diff --git a/src/CustomSolrConfigHtmlRouteProvider.php b/src/CustomSolrConfigHtmlRouteProvider.php
index 722e29e..b546906 100644
--- a/src/CustomSolrConfigHtmlRouteProvider.php
+++ b/src/CustomSolrConfigHtmlRouteProvider.php
@@ -32,10 +32,10 @@ class CustomSolrConfigHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
diff --git a/src/Form/CustomSolrConfigDeleteForm.php b/src/Form/CustomSolrConfigDeleteForm.php
index d938b1b..f010ec5 100644
--- a/src/Form/CustomSolrConfigDeleteForm.php
+++ b/src/Form/CustomSolrConfigDeleteForm.php
@@ -38,14 +38,12 @@ class CustomSolrConfigDeleteForm extends EntityConfirmFormBase {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->entity->delete();
 
-    drupal_set_message(
-      $this->t('content @type: deleted @label.',
-        [
-          '@type' => $this->entity->bundle(),
-          '@label' => $this->entity->label(),
-        ]
-        )
-    );
+    $this->messenger()->addStatus($this->t('content @type: deleted @label.',
+      [
+        '@type' => $this->entity->bundle(),
+        '@label' => $this->entity->label(),
+      ]
+      ));
 
     $form_state->setRedirectUrl($this->getCancelUrl());
   }
diff --git a/src/Form/CustomSolrConfigForm.php b/src/Form/CustomSolrConfigForm.php
index 6841b9f..7d76765 100644
--- a/src/Form/CustomSolrConfigForm.php
+++ b/src/Form/CustomSolrConfigForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\custom_solr_search\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -18,14 +19,14 @@ class CustomSolrConfigForm extends EntityForm {
   /**
    * The server storage controller.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
   /**
    * Constructs a ServerForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -36,7 +37,7 @@ class CustomSolrConfigForm extends EntityForm {
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = $container->get('entity_type.manager');
     return new static($entity_type_manager);
   }
@@ -44,7 +45,7 @@ class CustomSolrConfigForm extends EntityForm {
   /**
    * Retrieves the server storage controller.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The server storage controller.
    */
   protected function getStorage(){
@@ -129,17 +130,17 @@ class CustomSolrConfigForm extends EntityForm {
 
     switch ($status) {
       case SAVED_NEW:
-        drupal_set_message($this->t('Created the %label Custom solr config.', [
+        $this->messenger()->addStatus($this->t('Created the %label Custom solr config.', [
           '%label' => $custom_solr_config->label(),
         ]));
         break;
 
       default:
-        drupal_set_message($this->t('Saved the %label Custom solr config.', [
+        $this->messenger()->addStatus($this->t('Saved the %label Custom solr config.', [
           '%label' => $custom_solr_config->label(),
         ]));
     }
-    $form_state->setRedirectUrl($custom_solr_config->urlInfo('collection'));
+    $form_state->setRedirectUrl($custom_solr_config->toUrl('collection'));
   }
 
 }
diff --git a/src/Plugin/Block/CustomSolrSearchResultBlock.php b/src/Plugin/Block/CustomSolrSearchResultBlock.php
index 6deff22..e39b70c 100644
--- a/src/Plugin/Block/CustomSolrSearchResultBlock.php
+++ b/src/Plugin/Block/CustomSolrSearchResultBlock.php
@@ -23,21 +23,21 @@ class CustomSolrSearchResultBlock extends BlockBase implements ContainerFactoryP
   /**
    * \Drupal\custom_solr_search\Search definition.
    *
-   * @var \Drupal\custom_solr_search\Search
+   * @var Search
    */
   protected $search;
 
   /**
    * \Drupal\custom_solr_search\SolrServerDetails definition.
    *
-   * @var \Drupal\custom_solr_search\SolrServerDetails
+   * @var SolrServerDetails
    */
   protected $serverDetails;
 
   /**
    * \Drupal\custom_solr_search\Search definition.
    *
-   * @var \Drupal\custom_solr_search\SearchSolrAll
+   * @var SearchSolrAll
    */
   protected $searchall;
 
@@ -50,11 +50,11 @@ class CustomSolrSearchResultBlock extends BlockBase implements ContainerFactoryP
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\custom_solr_search\Search $search
+   * @param Search $search
    *   Custom Solr search service.
-   * @param \Drupal\custom_solr_search\SolrServerDetails $serverDetails
+   * @param SolrServerDetails $serverDetails
    *   Custom Solr server details service.
-   * @param \Drupal\custom_solr_search\SearchSolrAll $searchall
+   * @param SearchSolrAll $searchall
    *   Custom Solr search service for all core.
    */
   public function __construct(
@@ -171,7 +171,7 @@ class CustomSolrSearchResultBlock extends BlockBase implements ContainerFactoryP
             '#topic' => implode(', ', $result->topic)
           );
 
-          $result_items[] = render($result_item);
+          $result_items[] = \Drupal::service('renderer')->render($result_item);
         }
       }
     }
@@ -188,7 +188,7 @@ class CustomSolrSearchResultBlock extends BlockBase implements ContainerFactoryP
   }
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
