modules/contrib/tribute_cards/card_entity.page.inc
modules/contrib/tribute_cards/ecard_item.page.inc
modules/contrib/tribute_cards/ecard_item_entity.page.inc
modules/contrib/tribute_cards/src/AccessController/CardEntityAccessControlHandler.php
modules/contrib/tribute_cards/src/AccessController/EcardItemEntityAccessControlHandler.php
modules/contrib/tribute_cards/src/CardEntityPermissions.php
modules/contrib/tribute_cards/src/Entity/CardEntity.php
modules/contrib/tribute_cards/src/Entity/CardEntityInterface.php
modules/contrib/tribute_cards/src/Entity/CardEntityType.php
modules/contrib/tribute_cards/src/Entity/CardEntityTypeInterface.php
modules/contrib/tribute_cards/src/Entity/CardEntityViewsData.php
modules/contrib/tribute_cards/src/Entity/EcardItemEntity.php
modules/contrib/tribute_cards/src/Entity/EcardItemEntityInterface.php
modules/contrib/tribute_cards/src/Entity/EcardItemEntityType.php
modules/contrib/tribute_cards/src/Entity/EcardItemEntityTypeInterface.php
modules/contrib/tribute_cards/src/Entity/EcardItemEntityViewsData.php
modules/contrib/tribute_cards/src/Form/CardEntityDeleteForm.php
modules/contrib/tribute_cards/src/Form/CardEntityForm.php
modules/contrib/tribute_cards/src/Form/CardEntitySettingsForm.php
modules/contrib/tribute_cards/src/Form/CardEntityTypeDeleteForm.php
modules/contrib/tribute_cards/src/Form/CardEntityTypeForm.php
modules/contrib/tribute_cards/src/Form/EcardItemEntityDeleteForm.php
modules/contrib/tribute_cards/src/Form/EcardItemEntityForm.php
modules/contrib/tribute_cards/src/Form/EcardItemEntitySettingsForm.php
modules/contrib/tribute_cards/src/Form/EcardItemEntityTypeDeleteForm.php
modules/contrib/tribute_cards/src/Form/EcardItemEntityTypeForm.php
modules/contrib/tribute_cards/src/ListBuilder/CardEntityListBuilder.php
modules/contrib/tribute_cards/src/ListBuilder/CardEntityTypeListBuilder.php
modules/contrib/tribute_cards/src/ListBuilder/EcardItemEntityListBuilder.php
modules/contrib/tribute_cards/src/ListBuilder/EcardItemEntityTypeListBuilder.php
modules/contrib/tribute_cards/src/Routing/CardEntityHtmlRouteProvider.php
modules/contrib/tribute_cards/src/Routing/CardEntityTypeHtmlRouteProvider.php
modules/contrib/tribute_cards/src/Routing/EcardItemEntityHtmlRouteProvider.php
modules/contrib/tribute_cards/src/Routing/EcardItemEntityTypeHtmlRouteProvider.php
modules/contrib/tribute_cards/src/Translation/CardEntityTranslationHandler.php
modules/contrib/tribute_cards/src/Translation/EcardItemEntityTranslationHandler.php
modules/contrib/tribute_cards/tests/src/Functional/LoadTest.php
modules/contrib/tribute_cards/tribute_cards.module

11 files with changes
=====================

1) modules/contrib/tribute_cards/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tribute_cards\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/tribute_cards/src/Routing/EcardItemEntityHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/tribute_cards/src/Routing/CardEntityHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/tribute_cards/src/ListBuilder/EcardItemEntityListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tribute_cards\ListBuilder;

+use Drupal\tribute_cards\Entity\EcardItemEntity;
 use Drupal\Core\Link;
 use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Constructs a new PracticalListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(EntityTypeInterface $entityType, EntityStorageInterface $storage, DateFormatter $dateFormatter, RendererInterface $renderer) {
@@ @@
    */
   public function buildRow(EntityInterface $entity) {
     $row = [];
-    /** @var \Drupal\tribute_cards\Entity\EcardItemEntity $entity */
+    /** @var EcardItemEntity $entity */
     $row['id'] = $entity->toLink($entity->id());
     $row['name'] = Link::createFromRoute(
       $entity->label(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/tribute_cards/src/ListBuilder/CardEntityListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tribute_cards\ListBuilder;

+use Drupal\tribute_cards\Entity\CardEntity;
 use Drupal\Core\Link;
 use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Constructs a new PracticalListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(EntityTypeInterface $entityType, EntityStorageInterface $storage, DateFormatter $dateFormatter, RendererInterface $renderer) {
@@ @@
    */
   public function buildRow(EntityInterface $entity) {
     $row = [];
-    /** @var \Drupal\tribute_cards\Entity\CardEntity $entity */
+    /** @var CardEntity $entity */
     $row['id'] = $entity->toLink($entity->id());
     $row['name'] = Link::createFromRoute(
       "{$entity->getHonoreeFirstName()}  {$entity->getHonoreeLastName()}",
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/tribute_cards/src/Form/EcardItemEntitySettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/tribute_cards/src/Form/EcardItemEntityForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tribute_cards\Form;

+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/tribute_cards/src/Form/CardEntitySettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/tribute_cards/src/Form/CardEntityForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tribute_cards\Form;

+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/tribute_cards/src/AccessController/EcardItemEntityAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tribute_cards\AccessController;

+use Drupal\tribute_cards\Entity\EcardItemEntityInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\tribute_cards\Entity\EcardItemEntityInterface $entity */
-
+    /** @var EcardItemEntityInterface $entity */
     switch ($operation) {

       case 'view':
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/tribute_cards/src/AccessController/CardEntityAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tribute_cards\AccessController;

+use Drupal\tribute_cards\Entity\CardEntityInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\tribute_cards\Entity\CardEntityInterface $entity */
-
+    /** @var CardEntityInterface $entity */
     switch ($operation) {

       case 'view':
@@ @@
   /**
    * Test for given 'own' permission.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param $operation
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *
    * @return string|null
    *   The permission string indicating it's allowed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 11 files have been changed by Rector                                      

