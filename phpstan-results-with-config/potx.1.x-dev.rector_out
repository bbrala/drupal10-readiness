modules/contrib/potx/potx.drush.inc
modules/contrib/potx/potx.inc
modules/contrib/potx/potx.install
modules/contrib/potx/potx.local.inc
modules/contrib/potx/potx.locale.inc
modules/contrib/potx/potx.module
modules/contrib/potx/src/Commands/PotxCommands.php
modules/contrib/potx/src/Form/PotxExtractTranslationForm.php
modules/contrib/potx/tests/potx_test_5.module
modules/contrib/potx/tests/potx_test_6.module
modules/contrib/potx/tests/potx_test_7.module
modules/contrib/potx/tests/src/Kernel/PotxTest.php

5 files with changes
====================

1) modules/contrib/potx/tests/src/Kernel/PotxTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Add potx.inc which we test for its functionality.
@@ @@
     if (!$message) {
       $message = new FormattableMarkup('MsgID "@raw" found', ['@raw' => $string]);
     }
-    $this->assert(strpos($this->potx_output, 'msgid "' . _potx_format_quoted_string('"' . $string . '"') . '"') !== FALSE, $message, $group);
+    $this->assertTrue(strpos($this->potx_output, 'msgid "' . _potx_format_quoted_string('"' . $string . '"') . '"') !== FALSE, $message, $group);
   }

   /**
@@ @@
     if (!$message) {
       $message = new FormattableMarkup('MsgID "@raw" not found', ['@raw' => $string]);
     }
-    $this->assert(strpos($this->potx_output, 'msgid "' . _potx_format_quoted_string('"' . $string . '"') . '"') === FALSE, $message, $group);
+    $this->assertTrue(strpos($this->potx_output, 'msgid "' . _potx_format_quoted_string('"' . $string . '"') . '"') === FALSE, $message, $group);
   }

   /**
@@ @@
     if (!$message) {
       $message = new FormattableMarkup('MsgID "@raw" in context "@context" found', ['@raw' => $string, '@context' => $context]);
     }
-    $this->assert(strpos($this->potx_output, 'msgctxt "' . _potx_format_quoted_string('"' . $context . '"') . "\"\nmsgid \"" . _potx_format_quoted_string('"' . $string . '"') . '"') !== FALSE, $message, $group);
+    $this->assertTrue(strpos($this->potx_output, 'msgctxt "' . _potx_format_quoted_string('"' . $context . '"') . "\"\nmsgid \"" . _potx_format_quoted_string('"' . $string . '"') . '"') !== FALSE, $message, $group);
   }

   /**
@@ @@
     if (!$message) {
       $message = new FormattableMarkup('No MsgID "@raw" in context "@context" found', ['@raw' => $string, '@context' => $context]);
     }
-    $this->assert(strpos($this->potx_output, 'msgid "' . _potx_format_quoted_string('"' . $string . '"') . '"' . "\nmsgctxt \"" . _potx_format_quoted_string('"' . $context . '"') . '"') === FALSE, $message, $group);
+    $this->assertTrue(strpos($this->potx_output, 'msgid "' . _potx_format_quoted_string('"' . $string . '"') . '"' . "\nmsgctxt \"" . _potx_format_quoted_string('"' . $context . '"') . '"') === FALSE, $message, $group);
   }

   /**
@@ @@
     if (!$message) {
       $message = new FormattableMarkup('Plural ID "@raw" found', ['@raw' => $string]);
     }
-    $this->assert(strpos($this->potx_output, 'msgid "' . _potx_format_quoted_string('"' . $string . '"') . "\"\nmsgid_plural \"" . _potx_format_quoted_string('"' . $plural . '"') . '"') !== FALSE, $message, $group);
+    $this->assertTrue(strpos($this->potx_output, 'msgid "' . _potx_format_quoted_string('"' . $string . '"') . "\"\nmsgid_plural \"" . _potx_format_quoted_string('"' . $plural . '"') . '"') !== FALSE, $message, $group);
   }

   /**
@@ @@
     if (!$message) {
       $message = new FormattableMarkup('Plural ID "@raw" found with context "@context"', ['@raw' => $string, '@context' => $context]);
     }
-    $this->assert(strpos($this->potx_output, 'msgctxt "' . _potx_format_quoted_string('"' . $context . '"') . "\"\nmsgid \"" . _potx_format_quoted_string('"' . $string . '"') . "\"\nmsgid_plural \"" . _potx_format_quoted_string('"' . $plural . '"') . '"') !== FALSE, $message, $group);
+    $this->assertTrue(strpos($this->potx_output, 'msgctxt "' . _potx_format_quoted_string('"' . $context . '"') . "\"\nmsgid \"" . _potx_format_quoted_string('"' . $string . '"') . "\"\nmsgid_plural \"" . _potx_format_quoted_string('"' . $plural . '"') . '"') !== FALSE, $message, $group);
   }

   /**
@@ @@
     if (!$message) {
       $message = new FormattableMarkup('No plural ID "@raw" found with context "@context"', ['@raw' => $string, '@context' => $context]);
     }
-    $this->assert(strpos($this->potx_output, 'msgctxt "' . _potx_format_quoted_string('"' . $context . '"') . "\"\nmsgid \"" . _potx_format_quoted_string('"' . $string . '"') . "\"\nmsgid_plural \"" . _potx_format_quoted_string('"' . $plural . '"') . '"') === FALSE, $message, $group);
+    $this->assertTrue(strpos($this->potx_output, 'msgctxt "' . _potx_format_quoted_string('"' . $context . '"') . "\"\nmsgid \"" . _potx_format_quoted_string('"' . $string . '"') . "\"\nmsgid_plural \"" . _potx_format_quoted_string('"' . $plural . '"') . '"') === FALSE, $message, $group);
   }

   /**
@@ @@
    *   The list of expected errors.
    */
   private function assertPotxErrors($expected_errors) {
-    $this->assert(count($this->potx_status) == count($expected_errors), count($expected_errors) . ' error messages found');
+    $this->assertTrue(count($this->potx_status) == count($expected_errors), count($expected_errors) . ' error messages found');

     $potx_errors = array_column($this->potx_status, 0);
     foreach ($expected_errors as $assert_msg => $error_msg) {
       $key = array_search($error_msg, $potx_errors);

-      $this->assert($key !== FALSE, $assert_msg . ' found');
+      $this->assertTrue($key !== FALSE, $assert_msg . ' found');

       if ($key !== FALSE) {
         unset($potx_errors[$key]);
@@ @@
     }
     $output_path = "$file_dir/$basename." . $this->randomName(10) . '.html';
     $rv = file_put_contents($output_path, $this->drupalGetContent());
-    $this->pass("$description: " . l(t('Contents of result page'), $output_path));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRector
 * PassRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/potx/src/Form/PotxExtractTranslationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\potx\Form;

+use Drupal\language\ConfigurableLanguageManagerInterface;
+use Drupal\Core\Extension\Extension;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\language\ConfigurableLanguageManagerInterface
+   * @var ConfigurableLanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * Constructs a new PotxExtractTranslationForm object.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
    */
   public function __construct(LanguageManagerInterface $language_manager, ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler) {
@@ @@
     // Get a list of all enabled modules and themes.
     $modules = $this->moduleHandler->getModuleList();
     $themes = $this->themeHandler->listInfo();
-    /** @var \Drupal\Core\Extension\Extension[] $result */
+    /** @var Extension[] $result */
     $result = array_merge($modules, $themes);
     foreach ($result as $component) {
       // Build directory tree structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/potx/src/Commands/PotxCommands.php:40

    ---------- begin diff ----------
@@ @@
    *   strings: Strings
    *   warnings: Warnings
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The number of files, strings, and errors processed, in a table format.
    */
   public function potx($mode = NULL, array $options = [
@@ @@
     if (!empty($modules_option)) {
       $modules = explode(',', $modules_option);
       foreach ($modules as $module) {
-        $files = array_merge($files, _potx_explore_dir(drupal_get_path('module', $module) . '/', '*', $api_option, TRUE));
+        $files = array_merge($files, _potx_explore_dir(\Drupal::service('extension.list.module')->getPath($module) . '/', '*', $api_option, TRUE));
       }
     }
     elseif (!empty($files_option)) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/potx/potx.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\locale\PluralFormula;
 /**
  * @file
  * Extraction API used by the web and command line interface.
@@ @@
   if (isset($template_export_langcode)) {
     if ($api_version >= POTX_API_8) {
       $languages = \Drupal::languageManager()->getLanguages();
-      /** @var \Drupal\locale\PluralFormula $PluralFormula */
+      /** @var PluralFormula $PluralFormula */
       $plural_formula = \Drupal::service('locale.plural.formula');
       $language = (object) [
         'name' => $languages[$template_export_langcode]->getName(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


5) modules/contrib/potx/potx.drush.inc:90

    ---------- begin diff ----------
@@ @@
   if (!empty($modules_option)) {
     $modules = explode(',', $modules_option);
     foreach ($modules as $module) {
-      $files = array_merge($files, _potx_explore_dir(drupal_get_path('module', $module) . '/', '*', $api_option, TRUE));
+      $files = array_merge($files, _potx_explore_dir(\Drupal::service('extension.list.module')->getPath($module) . '/', '*', $api_option, TRUE));
     }
   }
   elseif (!empty($files_option)) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 5 files have been changed by Rector                                       

