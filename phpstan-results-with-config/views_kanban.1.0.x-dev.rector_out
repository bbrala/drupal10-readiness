modules/contrib/views_kanban/src/Controller/KanbanController.php
modules/contrib/views_kanban/src/Event/KanbanNodeInsertEvent.php
modules/contrib/views_kanban/src/EventSubscriber/KanbanNodeInsertSubscriber.php
modules/contrib/views_kanban/src/Plugin/views/style/Kanban.php
modules/contrib/views_kanban/views_kanban.module
modules/contrib/views_kanban/views_kanban.theme.inc

5 files with changes
====================

1) modules/contrib/views_kanban/views_kanban.theme.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\workflow\Entity\WorkflowState;
 /**
  * @file
  * Theme for Kanban views.
@@ @@
     $field_type = $status_field->getFieldDefinition()->getType();
     if ($field_type == 'workflow' && !empty($field_status_settings['workflow_type'])) {
       $workflow_type = $field_status_settings['workflow_type'];
-      $states = \Drupal\workflow\Entity\WorkflowState::loadMultiple([], $workflow_type);
+      $states = WorkflowState::loadMultiple([], $workflow_type);
       $status_values = [];
       foreach ($states as $state) {
         if ($state->isActive() && strpos($state->id(), 'creation') === FALSE) {
@@ @@
             ->generateAbsoluteString($thumbnailAvatar);
         }
         else {
-          $assign['avatar'] = file_create_url($thumbnailAvatar);
+          $assign['avatar'] = \Drupal::service('file_url_generator')->generateAbsoluteString($thumbnailAvatar);
         }
       }
       $variables['rows'][$id]['assign'][] = $assign;
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector


2) modules/contrib/views_kanban/views_kanban.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Kanban Views module help and theme functions.
@@ @@

 /**
  * Subscriber event.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   Entity.
  */
-function event_subscriber_kanban_node_insert(Drupal\Core\Entity\EntityInterface $entity) {
+function event_subscriber_kanban_node_insert(EntityInterface $entity) {
   // Dispatch the node insert kanban event so that subscribers can act accordingly.
   \Drupal::service('event_dispatcher')
     ->dispatch(KanbanNodeInsertEvent::KANBAN_NODE_INSERT, new KanbanNodeInsertEvent($entity));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/views_kanban/src/EventSubscriber/KanbanNodeInsertSubscriber.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Log the creation of a new node.
    *
-   * @param \Drupal\views_kanban\Event\KanbanNodeInsertEvent $event
+   * @param KanbanNodeInsertEvent $event
    *   Event.
    */
   public function onKanbanNodeInsert(KanbanNodeInsertEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/views_kanban/src/Event/KanbanNodeInsertEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\views_kanban\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;

 /**
@@ @@
   /**
    * Node entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * Constructs a node insertion demo event object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    */
   public function __construct(EntityInterface $entity) {
@@ @@
   /**
    * Get the inserted entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Return Entity.
    */
   public function getEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/views_kanban/src/Controller/KanbanController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\views_kanban\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Url;
 use Drupal\views\Views;
 use Drupal\workflows\State;
@@ @@
    * @param string $state_value
    *   State value.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Return json.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function updateState($view_id, $display_id, $entity_id = 0, $state_value = '') {
     $message = NULL;
@@ @@
    * @return array
    *   Allow values.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getAllowedValues($entity, $fieldName) {
     $extractStatus = explode(':', $fieldName);
@@ @@
    * @param string $newStatus
    *   New status.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Array text history status.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getHistoryMessage($entity, $status_field, $newStatus) {
     $statusName = $this->getStatusName($entity, $status_field, $newStatus);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 5 files have been changed by Rector                                       

