diff --git a/passwordless.info.yml b/passwordless.info.yml
index 36a3cfd..932b7ed 100644
--- a/passwordless.info.yml
+++ b/passwordless.info.yml
@@ -1,6 +1,5 @@
 name: Passwordless
 type: module
 description: 'Allows users to log in without using a password.'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
 configure: passwordless.settings
diff --git a/passwordless.module b/passwordless.module
index 3f626eb..399b179 100644
--- a/passwordless.module
+++ b/passwordless.module
@@ -59,7 +59,7 @@ function passwordless_form_alter(&$form, FormStateInterface $form_state, $form_i
       }
       // Hides the password field, and populates it with a random password
       $form['account']['pass']['#type'] = 'value';
-      $form['account']['pass']['#value'] = sha1(user_password());
+      $form['account']['pass']['#value'] = sha1(\Drupal::service('password_generator')->generate());
     break;
 
     case 'user_form' :
diff --git a/src/Controller/PasswordlessController.php b/src/Controller/PasswordlessController.php
index b12efe4..a9a2da9 100644
--- a/src/Controller/PasswordlessController.php
+++ b/src/Controller/PasswordlessController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\passwordless\Controller;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Url;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Access\AccessResult;
@@ -40,10 +41,10 @@ class PasswordlessController extends ControllerBase {
    * Checks access to the help page based on whether the current user
    * can access content, and whether the help page is enabled in settings.
    *
-   * @param Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function helpPageAccess(AccountInterface $account) {
@@ -89,10 +90,10 @@ class PasswordlessController extends ControllerBase {
    * Checks access based on whether the current user is anonymous,
    * or has permission to configure the module.
    *
-   * @param Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function sentPageAccess(AccountInterface $account) {
diff --git a/src/Controller/PasswordlessUserController.php b/src/Controller/PasswordlessUserController.php
index 66d7d3f..331e264 100644
--- a/src/Controller/PasswordlessUserController.php
+++ b/src/Controller/PasswordlessUserController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\passwordless\Controller;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\user\Controller\UserController;
 use Symfony\Component\HttpFoundation\Request;
@@ -28,7 +29,7 @@ class PasswordlessUserController extends UserController {
       }
       // A different user is already logged in on the computer.
       else {
-        /** @var \Drupal\user\UserInterface $reset_link_user */
+        /** @var UserInterface $reset_link_user */
         if ($reset_link_user = $this->userStorage->load($uid)) {
           $this->messenger()
             ->addMessage($this->t('Another user (%other_user) is already logged into the site on this computer, but you tried to use a one-time link for user %resetting_user. Please <a href=":logout">log out</a> and try using the link again.',
@@ -72,7 +73,7 @@ class PasswordlessUserController extends UserController {
           ]);
           $this->messenger()
             ->addMessage($this->t('You have just used your one-time login link.'));
-          $user->pass = sha1(user_password());
+          $user->pass = sha1(\Drupal::service('password_generator')->generate());
           $user->save();
           $route_name = 'user.page';
           $route_parameters = [];
