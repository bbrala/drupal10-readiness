modules/contrib/digest/digest.install
modules/contrib/digest/digest.module
modules/contrib/digest/src/Controller/DigestController.php
modules/contrib/digest/src/DigestListBuilder.php
modules/contrib/digest/src/DigestManager.php
modules/contrib/digest/src/DigestManagerInterface.php
modules/contrib/digest/src/Entity/Digest.php
modules/contrib/digest/src/Entity/DigestInterface.php
modules/contrib/digest/src/Form/Digest/DigestDeleteForm.php
modules/contrib/digest/src/Form/Digest/DigestEditForm.php
modules/contrib/digest/src/Form/Digest/DigestTestForm.php
modules/contrib/digest/src/Form/DigestSettingsForm.php
modules/contrib/digest/src/Plugin/Field/FieldType/SubscriptionItem.php
modules/contrib/digest/src/Plugin/Field/FieldWidget/SubscriptionWidget.php
modules/contrib/digest/src/Plugin/QueueWorker/DigestSendQueue.php
modules/contrib/digest/tests/modules/digest_test/src/Plugin/Block/TestAdminBlock.php
modules/contrib/digest/tests/src/Functional/DigestListBuilderTest.php
modules/contrib/digest/tests/src/Functional/Form/Digest/DigestEditFormTest.php
modules/contrib/digest/tests/src/Functional/Form/Digest/DigestTestFormTest.php
modules/contrib/digest/tests/src/Functional/Form/DigestSettingsFormTest.php
modules/contrib/digest/tests/src/Functional/Plugin/Field/FieldWidget/SubscriptionWidgetTest.php
modules/contrib/digest/tests/src/Kernel/DigestManagerTest.php
modules/contrib/digest/tests/src/Kernel/Entity/DigestTest.php
modules/contrib/digest/tests/src/Unit/Controller/DigestControllerTest.php
modules/contrib/digest/tests/src/Unit/Plugin/QueueWorker/DigestSendQueueTest.php

19 files with changes
=====================

1) modules/contrib/digest/tests/src/Unit/Plugin/QueueWorker/DigestSendQueueTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\digest\Kernel\Plugin\QueueWorker;

+use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityMalformedException;
@@ @@
   /**
    * The digest queue worker.
    *
-   * @var \Drupal\digest\Plugin\QueueWorker\DigestSendQueue
+   * @var DigestSendQueue
    */
   protected $queueWorker;

@@ @@
   /**
    * A mocked user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * A container for our mocked services.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;

@@ @@
   /**
    * A mocked entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * A mocked user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * A mocked digest storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $digestStorage;

@@ @@
   /**
    * A mocked mal-formed digest.
    *
-   * @var \Drupal\digest\Entity\DigestInterface
+   * @var DigestInterface
    */
   protected $badDigest;

@@ @@
   /**
    * A mocked well formed digest.
    *
-   * @var \Drupal\digest\Entity\DigestInterface
+   * @var DigestInterface
    */
   protected $goodDigest;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/digest/tests/src/Unit/Controller/DigestControllerTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The digest controller.
    *
-   * @var \Drupal\digest\Controller\DigestController
+   * @var DigestController
    */
   protected $controller;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/digest/tests/src/Kernel/Entity/DigestTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\digest\Kernel\Entity;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\digest\Entity\Digest;
 use Cron\CronExpression;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityMalformedException;
@@ @@
   /**
    * The digest storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $digestStorage;

@@ @@
   /**
    * A digest.
    *
-   * @var \Drupal\digest\Entity\Digest
+   * @var Digest
    */
   protected $digest;

@@ @@

     $title = $this->randomMachineName();
     $this->digest->setTitle($title);
-    $this->assertEqual($title, $this->digest->getTitle());
+    $this->assertEquals($title, $this->digest->getTitle());

   }

@@ @@

     $description = $this->randomMachineName();
     $this->digest->setDescription($description);
-    $this->assertEqual($description, $this->digest->getDescription());
+    $this->assertEquals($description, $this->digest->getDescription());

   }

@@ @@
     // Should successfully set and retrieve a cron expression.
     $this->digest->setSchedule($valid_cron);
     $expression = $this->digest->getSchedule()->getExpression();
-    $this->assertEqual($valid_cron, $expression);
+    $this->assertEquals($valid_cron, $expression);

     try {

@@ @@

       // The schedule should not have changed.
       $expression = $this->digest->getSchedule()->getExpression();
-      $this->assertEqual($valid_cron, $expression);
+      $this->assertEquals($valid_cron, $expression);

     }

@@ @@
     $valid_cron = '0 0 * * 5';
     $this->digest->set('schedule', $valid_cron);
     $expression = $this->digest->getSchedule();
-    $this->assertEqual($valid_cron, $expression);
+    $this->assertEquals($valid_cron, $expression);

     // The same results should occur if a CronExpression object is passed in.
     $cron_expression = new CronExpression($valid_cron);
     $this->digest->setSchedule($cron_expression);
     $expression = $this->digest->getSchedule();
-    $this->assertEqual($cron_expression, $expression);
+    $this->assertEquals($cron_expression, $expression);

     // The next send date should be updated when changing the schedule.
     $valid_cron = '0 0 * * 3';
@@ @@
     // Should successfully set and retrieve the display block.
     $this->digest->setDisplayBlock($valid_block);
     $block = $this->digest->getDisplayBlock();
-    $this->assertEqual($valid_block, $block->getPluginId());
+    $this->assertEquals($valid_block, $block->getPluginId());

     try {

@@ @@

       // The display block should not have changed.
       $block = $this->digest->getDisplayBlock();
-      $this->assertEqual($valid_block, $block->getPluginId());
+      $this->assertEquals($valid_block, $block->getPluginId());

     }

@@ @@
     $valid_block = 'user_login_block';
     $this->digest->set('display_block', $valid_block);
     $block = $this->digest->getDisplayBlock();
-    $this->assertEqual($valid_block, $block->getPluginId());
+    $this->assertEquals($valid_block, $block->getPluginId());

   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/digest/tests/src/Kernel/DigestManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\digest\Kernel;

+use Drupal\digest\DigestManagerInterface;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\digest\Entity\DigestInterface;
+use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
 use Psr\Log\LoggerInterface;
@@ @@
   /**
    * The digest manager.
    *
-   * @var \Drupal\digest\DigestManagerInterface
+   * @var DigestManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * The digest storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $storage;

@@ @@
     // The enabled digest should be returned.
     $enabled = $this->manager->getEnabled();
     $this->assertCount(1, $enabled);
-    $this->assertEqual($digest_1->id(), reset($enabled)->id());
+    $this->assertEquals($digest_1->id(), reset($enabled)->id());

     $this->storage->create([
       'id' => 'digest_2',
@@ @@
     // The new digest should not be returned.
     $enabled = $this->manager->getEnabled();
     $this->assertCount(1, $enabled);
-    $this->assertEqual($digest_1->id(), reset($enabled)->id());
+    $this->assertEquals($digest_1->id(), reset($enabled)->id());

   }

@@ @@
     $options = $this->manager->getAsOptions();
     $this->assertCount(0, $options);

-    /** @var \Drupal\digest\Entity\DigestInterface $digest_1 */
+    /** @var DigestInterface $digest_1 */
     $digest_1 = $this->storage->create([
       'id' => 'digest_1',
       'title' => 'My digest',
@@ @@
     $this->assertCount(1, $options);

     // Check that the options were created correctly.
-    $this->assertEqual($options[$digest_1->id()], $digest_1->getTitle());
+    $this->assertEquals($options[$digest_1->id()], $digest_1->getTitle());
     $this->assertFalse(isset($options[$digest_2->id()]));

   }
@@ @@
         RfcLogLevel::WARNING, $this->stringContains('display')
       ));

-    /** @var \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory */
+    /** @var LoggerChannelFactoryInterface $logger_factory */
     $logger_factory = \Drupal::service('logger.factory');
     $logger_factory->addLogger($logger);

@@ @@
     $this->assertEquals(0, $queue->numberOfItems());

     // Create digests to queue.
-    /** @var \Drupal\digest\Entity\DigestInterface $digest_1 */
+    /** @var DigestInterface $digest_1 */
     $digest_1 = $this->storage->create([
       'id' => 'digest_1',
       'title' => 'Queue me',
@@ @@
     ]);
     $digest_1->save();

-    /** @var \Drupal\digest\Entity\DigestInterface $digest_2 */
+    /** @var DigestInterface $digest_2 */
     $digest_2 = $this->storage->create([
       'id' => 'digest_2',
       'status' => FALSE,
@@ @@
     ]);
     $digest_2->save();

-    /** @var \Drupal\digest\Entity\DigestInterface $digest_3 */
+    /** @var DigestInterface $digest_3 */
     $digest_3 = $this->storage->create([
       'id' => 'digest_3',
       'description' => 'Malformed!',
@@ @@

     // Check that the data was created correctly.
     $data = $queue->claimItem()->data;
-    $this->assertEqual($digest_1->id(), $data['digest']);
-    $this->assertEqual($user->id(), $data['user']);
+    $this->assertEquals($digest_1->id(), $data['digest']);
+    $this->assertEquals($user->id(), $data['user']);

     // Check that the send date of the digest has been updated.
     $this->assertFalse($digest_1->shouldSend());
-    $this->assertEqual($digest_1->getNextSendDate(), $digest_1->getSchedule()->getNextRunDate());
+    $this->assertEquals($digest_1->getNextSendDate(), $digest_1->getSchedule()->getNextRunDate());

   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/digest/tests/src/Functional/Plugin/Field/FieldWidget/SubscriptionWidgetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\digest\Functional\Plugin\Field\FieldWidget;

+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\digest\Entity\DigestInterface;
 use Drupal\digest\Entity\Digest;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A testing user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
     $this->user = $this->drupalCreateUser();
     $this->drupalLogin($this->user);

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = \Drupal::service('entity_display.repository')
       ->getFormDisplay('user', 'user');

@@ @@
    */
   public function testWidget() {

-    /** @var \Drupal\digest\Entity\DigestInterface $digest_one */
+    /** @var DigestInterface $digest_one */
     $digest_one = Digest::create([
       'id' => 'digest_one',
       'title' => $this->randomMachineName(),
@@ @@
     ]);
     $digest_one->save();

-    /** @var \Drupal\digest\Entity\DigestInterface $digest_two */
+    /** @var DigestInterface $digest_two */
     $digest_two = Digest::create([
       'id' => 'digest_two',
       'title' => $this->randomMachineName(),
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/digest/tests/src/Functional/Form/DigestSettingsFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\digest\Functional\Form;

+use Drupal\user\Entity\User;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * An admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   private $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/digest/tests/src/Functional/Form/Digest/DigestTestFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\digest\Functional\Form\Digest;

+use Drupal\user\Entity\User;
+use Drupal\digest\Entity\Digest;
+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * An admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;

@@ @@
   /**
    * A testing digest.
    *
-   * @var \Drupal\digest\Entity\Digest
+   * @var Digest
    */
   protected $digest;

@@ @@
     $this->drupalGet($this->digest->toUrl('test-form'));
     $this->assertSession()->statusCodeEquals(200);

-    /** @var \Drupal\Core\Session\AccountProxyInterface $current_user */
+    /** @var AccountProxyInterface $current_user */
     $current_user = \Drupal::service('current_user');

     // Ensure the current user is used as the default field value.
@@ @@
       ->fieldValueEquals($user_field, $user_field_value);

     // Send the digest.
-    $this->drupalPostForm(NULL, [], 'Send');
+    $this->submitForm([], 'Send');

     $this->assertSession()->pageTextContains('The digest was sent successfully.');

@@ @@
     $this->assertSession()->statusCodeEquals(200);

     // Send the digest.
-    $this->drupalPostForm(NULL, [], 'Send');
+    $this->submitForm([], 'Send');

     $this->assertSession()->pageTextContains('The digest could not be sent.');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/digest/tests/src/Functional/Form/Digest/DigestEditFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\digest\Functional\Form\Digest;

+use Drupal\user\Entity\User;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 use Lorisleiva\CronTranslator\CronTranslator;
@@ @@
   /**
    * An admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   private $adminUser;

@@ @@
     $blockUsed = 'page_title_block';
     $page->fillField('display_block', $blockUsed);

-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->pageTextContains('The ' . $titleUsed . ' digest has been created');

     // Check the corresponding entity was created.
@@ @@

     $this->assertCount(1, $digests);
     $digest = reset($digests);
-    $this->assertEqual($digest->get('title'), $titleUsed);
-    $this->assertEqual($digest->get('schedule'), $scheduleUsed);
-    $this->assertEqual($digest->get('display_block'), $blockUsed);
+    $this->assertEquals($digest->get('title'), $titleUsed);
+    $this->assertEquals($digest->get('schedule'), $scheduleUsed);
+    $this->assertEquals($digest->get('display_block'), $blockUsed);

   }

@@ @@
     $newTitle = $this->randomMachineName();
     $this->getSession()->getPage()->fillField('title', $newTitle);

-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->pageTextContains('The ' . $newTitle . ' digest has been updated');

     // Check the corresponding entity was updated.
@@ @@

     $this->assertCount(1, $digests);
     $digest = reset($digests);
-    $this->assertEqual($digest->get('title'), $newTitle);
+    $this->assertEquals($digest->get('title'), $newTitle);

   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/digest/tests/src/Functional/DigestListBuilderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\digest\Functional;

+use Drupal\user\Entity\User;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * An admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   private $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/digest/tests/modules/digest_test/src/Plugin/Block/TestAdminBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digest_test\Plugin\Block;

+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/digest/src/Plugin/QueueWorker/DigestSendQueue.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digest\Plugin\QueueWorker;

+use Drupal\user\UserStorageInterface;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\user\UserInterface;
+use Drupal\digest\Entity\DigestInterface;
 use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
@@ @@
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * The digest storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $digestStorage;

@@ @@

     $instance = new static($configuration, $plugin_id, $plugin_definition);

-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager */
+    /** @var EntityTypeManagerInterface $entityTypeManager */
     $entityTypeManager = $container->get('entity_type.manager');

     $instance->userStorage = $entityTypeManager->getStorage('user');
@@ @@
    */
   public function processItem($data) {

-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $this->userStorage->load($data['user']);

-    /** @var \Drupal\digest\Entity\DigestInterface $digest */
+    /** @var DigestInterface $digest */
     $digest = $this->digestStorage->load($data['digest']);

     // Send out the digest to the given user.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/digest/src/Plugin/Field/FieldWidget/SubscriptionWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digest\Plugin\Field\FieldWidget;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\Plugin\Field\FieldWidget\OptionsWidgetBase;
@@ @@
   /**
    * The digest entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $digestStorage;

@@ @@
   /**
    * Returns an array to describe the options given by ::getOptions.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity for which to return options.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/digest/src/Form/Digest/DigestTestForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digest\Form\Digest;

+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@

       $user_storage = $this->entityTypeManager->getStorage('user');

-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       $user = $user_storage->load($form_state->getValue('send_to_user'));

       $this->entity->send($user);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/digest/src/Form/Digest/DigestEditForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digest\Form\Digest;

+use Drupal\Core\Block\BlockManagerInterface;
+use Drupal\Core\Plugin\Context\ContextRepositoryInterface;
+use Drupal\Core\Theme\ThemeManagerInterface;
 use Cron\CronExpression;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;

@@ @@
   /**
    * The context repository.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/digest/src/Entity/DigestInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digest\Entity;

+use Cron\CronExpression;
+use Drupal\Core\Block\BlockPluginInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\user\UserInterface;

@@ @@
   /**
    * Returns the current schedule as a CronExpression.
    *
-   * @return \Cron\CronExpression|null
+   * @return CronExpression|null
    *   The CronExpression representation of the schedule.
    *   Returns NULL if the schedule is invalid or missing.
    */
@@ @@
   /**
    * Sets the schedule of the digest.
    *
-   * @param string|\Cron\CronExpression $setTo
+   * @param string|CronExpression $setTo
    *   The value to set the schedule to.
    * @param bool $updateSendDate
    *   Whether the send date should be updated.
@@ @@
   /**
    * Gets the block plugin used for this digests display.
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface
+   * @return BlockPluginInterface
    *   The block plugin for this digest.
    *   If the value for the display block ID is invalid the 'broken' block will
    *   be returned.
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   Thrown when the given block ID is not valid.
    */
   public function setDisplayBlock($setTo);
@@ @@
   /**
    * Builds an email and sends it out to the given user.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to send this digest to.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    *   Thrown when a the digest cannot be sent out. For instance, there is no
    *   valid block to display.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/digest/src/Entity/Digest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digest\Entity;

+use Drupal\Core\Block\BlockManagerInterface;
+use Drupal\Core\State\StateInterface;
+use Drupal\Core\Mail\MailManagerInterface;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\Session\AccountSwitcherInterface;
 use Cron\CronExpression;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
@@ @@
   /**
    * The block plugin manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;

@@ @@
   /**
    * The state.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@

     // Switch to the recipients account to avoid permission issues (e.g., when
     // sending during CRON).
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = \Drupal::service('account_switcher');
     $account_switcher->switchTo($user);

@@ @@

     foreach ($user_ids as $user_id) {

-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       $user = $user_storage->load($user_id);

       // Get the subscription field and values.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/digest/src/DigestManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digest;

+use Drupal\digest\Entity\DigestInterface;
 /**
  * Defines the functionality for a digest manager.
  *
@@ @@
   /**
    * Returns an array of all enabled digests.
    *
-   * @return \Drupal\digest\Entity\DigestInterface[]
+   * @return DigestInterface[]
    *   All enabled digests.
    */
   public function getEnabled();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/digest/src/DigestManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digest;

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Core\Queue\QueueInterface;
+use Psr\Log\LoggerInterface;
+use Drupal\digest\Entity\DigestInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   /**
    * The digest storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * The digest send queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The Digest module logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a new DigestManager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Queue\QueueFactory $queueFactory
+   * @param QueueFactory $queueFactory
    *   The queue factory.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
+   * @param LoggerChannelFactoryInterface $loggerFactory
    *   The logger channel factory.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, QueueFactory $queueFactory, ConfigFactoryInterface $configFactory, LoggerChannelFactoryInterface $loggerFactory) {
@@ @@
     $digest_query = $this->storage->getQuery()
       ->condition('status', TRUE);

-    /** @var \Drupal\digest\Entity\DigestInterface[] $digests */
+    /** @var DigestInterface[] $digests */
     $digests = $this->storage->loadMultiple($digest_query->execute());
     return $digests;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/digest/src/Controller/DigestController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\digest\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\digest\Entity\DigestInterface;

@@ @@
   /**
    * Performs a given operation on a digest entity.
    *
-   * @param \Drupal\digest\Entity\DigestInterface $digest
+   * @param DigestInterface $digest
    *   The digest to do the operation on.
    * @param string $operation
    *   The operation to perform.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect, usually back to the digest listing page.
    *
    * @throws \BadMethodCallException
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 19 files have been changed by Rector                                      

