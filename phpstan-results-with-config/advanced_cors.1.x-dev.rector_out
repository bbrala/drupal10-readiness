modules/contrib/advanced_cors/advanced_cors.module
modules/contrib/advanced_cors/src/Entity/RouteConfigEntity.php
modules/contrib/advanced_cors/src/Entity/RouteConfigEntityInterface.php
modules/contrib/advanced_cors/src/EventSubscriber/AdvancedCorsEventSubscriber.php
modules/contrib/advanced_cors/src/Form/RouteConfigEntityDeleteForm.php
modules/contrib/advanced_cors/src/Form/RouteConfigEntityForm.php
modules/contrib/advanced_cors/src/PatternsCache.php
modules/contrib/advanced_cors/src/RouteConfigEntityHtmlRouteProvider.php
modules/contrib/advanced_cors/src/RouteConfigEntityListBuilder.php
modules/contrib/advanced_cors/tests/src/Unit/EventSubscriber/AdvancedCorsResponseEventSubscriberTest.php

4 files with changes
====================

1) modules/contrib/advanced_cors/src/PatternsCache.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\advanced_cors;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\advanced_cors\Entity\RouteConfigEntityInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;

@@ @@
   /**
    * The entity storage class.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * The cache backend that should be used.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * Constructs a Cache using a string storage.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Storage to use when looking for new translations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException|\Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException|PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, CacheBackendInterface $cache) {
     $this->storage = $entityTypeManager->getStorage('route_config');
@@ @@
       return $cache->data;
     }

-    /** @var \Drupal\advanced_cors\Entity\RouteConfigEntityInterface[] $entities */
+    /** @var RouteConfigEntityInterface[] $entities */
     $entities = $this->storage->loadByProperties(['status' => 1]);
     $result = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/advanced_cors/src/Form/RouteConfigEntityForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\advanced_cors\Form;

+use Drupal\advanced_cors\Entity\RouteConfigEntityInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Patterns cache object.
    *
-   * @var \Drupal\advanced_cors\PatternsCache
+   * @var PatternsCache
    */
   protected $patterns;

@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
-    /** @var \Drupal\advanced_cors\Entity\RouteConfigEntityInterface $route_config */
+    /** @var RouteConfigEntityInterface $route_config */
     $route_config = $this->entity;

     $form['status'] = [
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\advanced_cors\Entity\RouteConfigEntityInterface $route_config */
+    /** @var RouteConfigEntityInterface $route_config */
     $route_config = $this->entity;
     $status = $route_config->save();
     $this->patterns->resetCache();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/advanced_cors/src/Form/RouteConfigEntityDeleteForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/advanced_cors/src/EventSubscriber/AdvancedCorsEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\advanced_cors\EventSubscriber;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\advanced_cors\Entity\RouteConfigEntityInterface;
 use Drupal\advanced_cors\PatternsCache;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
 use Drupal\path_alias\AliasManagerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The entity storage class.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * The path alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;

@@ @@
   /**
    * The path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;

@@ @@
   /**
    * Patterns cache service.
    *
-   * @var \Drupal\advanced_cors\PatternsCache
+   * @var PatternsCache
    */
   protected $patterns;

@@ @@
   /**
    * Constructs a new CORS response event subscriber.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager.
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager
+   * @param AliasManagerInterface $alias_manager
    *   The alias manager.
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The path matcher.
-   * @param \Drupal\advanced_cors\PatternsCache $patterns
+   * @param PatternsCache $patterns
    *   The pattern cache.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException|\Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException|PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, AliasManagerInterface $alias_manager, PathMatcherInterface $path_matcher, PatternsCache $patterns) {
     $this->storage = $entityTypeManager->getStorage('route_config');
@@ @@
   /**
    * Adds headers to the response.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $request = $event->getRequest();
     $path_info = $request->getPathInfo();
     $current_path = $this->aliasManager->getPathByAlias($path_info);
@@ @@
   /**
    * Adds CORS headers to the response.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The response event from Drupal core (contains request and response).
-   * @param \Drupal\advanced_cors\Entity\RouteConfigEntityInterface $config
+   * @param RouteConfigEntityInterface $config
    *   The configuration for this module.
    */
-  protected function addCorsHeaders(FilterResponseEvent $event,
+  protected function addCorsHeaders(ResponseEvent $event,
                                     RouteConfigEntityInterface $config) {
     $mapping_headers = [
       'allowed_headers' => 'Access-Control-Allow-Headers',
@@ @@
    * specify a single origin value. See:
    * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Information about the incoming request.
    * @param string[] $allowed_origins
    *   The array of configured allowed origin values.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 4 files have been changed by Rector                                       

