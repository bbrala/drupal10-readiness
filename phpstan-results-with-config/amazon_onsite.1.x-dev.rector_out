modules/contrib/amazon_onsite/amazon_onsite.module
modules/contrib/amazon_onsite/src/AopFeedItemAccessControlHandler.php
modules/contrib/amazon_onsite/src/AopFeedItemListBuilder.php
modules/contrib/amazon_onsite/src/Controller/RssController.php
modules/contrib/amazon_onsite/src/Entity/AopFeedItem.php
modules/contrib/amazon_onsite/src/Form/AopFeedItemForm.php
modules/contrib/amazon_onsite/src/Form/AopFeedItemSettingsForm.php
modules/contrib/amazon_onsite/src/Form/SettingsForm.php
modules/contrib/amazon_onsite/src/Plugin/CKEditorPlugin/InsertAsin.php
modules/contrib/amazon_onsite/src/Plugin/Field/FieldFormatter/AopProductDefaultFormatter.php
modules/contrib/amazon_onsite/src/Plugin/Field/FieldType/AopProductItem.php
modules/contrib/amazon_onsite/src/Plugin/Field/FieldWidget/AopProductWidget.php
modules/contrib/amazon_onsite/src/Plugin/Filter/FilterAmazonProduct.php
modules/contrib/amazon_onsite/tests/src/Functional/OnSiteTest.php

8 files with changes
====================

1) modules/contrib/amazon_onsite/tests/src/Functional/OnSiteTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\amazon_onsite\Functional;

+use Drupal\user\UserInterface;
 use Drupal\amazon_onsite\Entity\AopFeedItem;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * A simulated anonymous user with access only to node content.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $anonymousUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/amazon_onsite/src/Plugin/CKEditorPlugin/InsertAsin.php:19

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getFile() {
-    return drupal_get_path('module', 'amazon_onsite') . '/js/plugins/insertasin/plugin.js';
+    return \Drupal::service('extension.list.module')->getPath('amazon_onsite') . '/js/plugins/insertasin/plugin.js';
   }

   /**
@@ @@
    * {@inheritdoc}
    */
   public function getButtons() {
-    $path = drupal_get_path('module', 'amazon_onsite') . '/js/plugins/insertasin';
+    $path = \Drupal::service('extension.list.module')->getPath('amazon_onsite') . '/js/plugins/insertasin';
     return [
       'InsertAsin' => [
         'label' => $this->t('Insert amazon product card'),
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/amazon_onsite/src/Form/SettingsForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Extension\ModuleHandlerInterface module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/amazon_onsite/src/Form/AopFeedItemSettingsForm.php:27

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/amazon_onsite/src/Form/AopFeedItemForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New aop feed item %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/amazon_onsite/src/Controller/RssController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\amazon_onsite\Controller;

+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\amazon_onsite\Entity\AopFeedItem;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Cache\CacheableResponse;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Callback for RSS feed.
    *
-   * @return \Drupal\Core\Cache\CacheableResponse
+   * @return CacheableResponse
    *   A CacheableResponse object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function buildResponse() {
     $build = $this->build();
@@ @@
    * @return array
    *   An array as expected by drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function build() {
     $config = $this->config('amazon_onsite.settings');
@@ @@
       '#description' => $config->get('feed_description'),
       '#langcode' => $config->get('language'),
       '#last_build_date' => $this->getLastBuildDate(),
-      '#logo_path' => $config->get('logo_path') ? file_create_url($config->get('logo_path')) : '',
+      '#logo_path' => $config->get('logo_path') ? \Drupal::service('file_url_generator')->generateAbsoluteString($config->get('logo_path')) : '',
       '#items' => $this->buildItems(),
     ];
   }
@@ @@
    * @return string|null
    *   A formatted timestamp.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getLastBuildDate() {
     if ($items = $this->getItems()) {
-      /** @var \Drupal\amazon_onsite\Entity\AopFeedItem $latest_item */
+      /** @var AopFeedItem $latest_item */
       $latest_item = reset($items);

       return $this->dateFormatter->format($latest_item->getChangedTime(), 'custom', 'r');
@@ @@
   /**
    * Load entities.
    *
-   * @return array|\Drupal\Core\Entity\EntityInterface[]
+   * @return array|EntityInterface[]
    *   An array of entity objects.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getItems() {
     $storage = $this->entityTypeManager()->getStorage('aop_feed_item');
@@ @@
    * @return array
    *   An array as expected by drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function buildItems() {
     $build = [];
@@ @@
     // Query the entities.
     $items = $this->getItems();
     foreach ($items as $item) {
-      /** @var \Drupal\amazon_onsite\Entity\AopFeedItem $item */
+      /** @var AopFeedItem $item */
       $elements = [
         'title' => $item->getTitle(),
         'amzn:subtitle' => ($subtitle = $item->field_subtitle->first()) ? $subtitle->view() : NULL, /* @phpstan-ignore-line */
@@ @@
   /**
    * Build a render array for product part of rss feed.
    *
-   * @param \Drupal\amazon_onsite\Entity\AopFeedItem $entity
+   * @param AopFeedItem $entity
    *   The entity object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/amazon_onsite/src/AopFeedItemListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\amazon_onsite;

+use Drupal\amazon_onsite\Entity\AopFeedItem;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new AopFeedItemListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\amazon_onsite\Entity\AopFeedItem $entity */
+    /** @var AopFeedItem $entity */
     $row['id'] = $entity->id();
     $row['title'] = $entity->toLink();
     $row['status'] = $entity->isEnabled() ? $this->t('Enabled') : $this->t('Disabled');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/amazon_onsite/amazon_onsite.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\field\Entity\FieldConfig;
 /**
  * @file
  * Provides an aop feed item entity type.
@@ @@
  * Implements hook_field_widget_form_alter().
  */
 function amazon_onsite_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
-  /** @var \Drupal\field\Entity\FieldConfig $def */
+  /** @var FieldConfig $def */
   $def = $context['items']->getFieldDefinition();

   // Set full_html filter format per default.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 8 files have been changed by Rector                                       

