modules/contrib/ldap_sso/ldap_sso.install
modules/contrib/ldap_sso/ldap_sso.module
modules/contrib/ldap_sso/src/Controller/LoginController.php
modules/contrib/ldap_sso/src/Form/LdapSsoAdminForm.php
modules/contrib/ldap_sso/src/LdapSsoBootSubscriber.php
modules/contrib/ldap_sso/src/RedirectResponseWithCookie.php
modules/contrib/ldap_sso/src/ServerVariableLookup.php
modules/contrib/ldap_sso/src/ServerVariableLookupInterface.php
modules/contrib/ldap_sso/tests/modules/ldap_sso_dummy_ldap/src/FakeBridgeFunctional.php
modules/contrib/ldap_sso/tests/modules/ldap_sso_dummy_ldap/src/ServerVariableLookup.php
modules/contrib/ldap_sso/tests/src/Functional/LdapSsoBrowserTest.php

4 files with changes
====================

1) modules/contrib/ldap_sso/tests/src/Functional/LdapSsoBrowserTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ldap_sso\Functional;

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Core\Language\LanguageManager;
 use Behat\Mink\Session;
 use Drupal\Core\Url;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ @@
       ->set('page.front', '/node/' . $node_front->id())
       ->save();

-    /** @var \Drupal\Core\Entity\EntityTypeManager $manager */
+    /** @var EntityTypeManager $manager */
     $manager = $this->container->get('entity_type.manager');
     $server = $manager->getStorage('ldap_server')->create([
       'id' => 'test',
@@ @@
     $fr = ConfigurableLanguage::createFromLangcode('fr');
     $fr->save();
     $this->rebuildContainer();
-    /** @var \Drupal\Core\Language\LanguageManager $language_manager */
+    /** @var LanguageManager $language_manager */
     $language_manager = $this->container->get('language_manager');
     self::assertCount(2, $language_manager->getLanguages());

@@ @@
    * @param string $url
    *   URL.
    *
-   * @return \Behat\Mink\Session
+   * @return Session
    *   Session.
    */
   private function getWithoutRedirect(string $url): Session {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ldap_sso/src/LdapSsoBootSubscriber.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ldap_sso;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Routing\RedirectDestinationInterface;
 use Drupal\Core\Path\CurrentPathStack;
@@ @@
 use Drupal\ldap_servers\Logger\LdapDetailLog;
 use Symfony\Component\HttpFoundation\RequestStack;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Cookie;

@@ @@
   /**
    * LDAP SSO config.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;

@@ @@
   /**
    * Detail log.
    *
-   * @var \Drupal\ldap_servers\Logger\LdapDetailLog
+   * @var LdapDetailLog
    */
   protected $detailLog;

@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Request Stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $currentRequest;

@@ @@
   /**
    * Fetches debugging level and logging interface.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   Factory for configuration for LDAP and logging level.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   Request stack.
-   * @param \Drupal\Core\Path\CurrentPathStack $currentPath
+   * @param CurrentPathStack $currentPath
    *   Adds the current path.
-   * @param \Drupal\ldap_servers\Logger\LdapDetailLog $detailLog
+   * @param LdapDetailLog $detailLog
    *   LDAP detail log.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   Redirect destination.
    */
   public function __construct(
@@ @@
   /**
    * Determine if we should attempt SSO.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   Event to act upon.
    */
-  public function checkSsoLoad(GetResponseEvent $event): void {
+  public function checkSsoLoad(RequestEvent $event): void {
     if ((PHP_SAPI === 'cli') || $this->account->isAuthenticated()) {
       $this->detailLog->log('CLI or logged in user, no SSO.', [], 'ldap_sso');
       return;
@@ @@
     }
     else {
       // Compatibility support for Drupal 8.9.
-      $cookie = new Cookie('sso_login_running', 'true', 0, base_path());
+      $cookie = Cookie::create('sso_login_running', 'true', 0, base_path());
     }
     $response = new RedirectResponseWithCookie($pathWithDestination, 302, [$cookie]);
     $response->send();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * NewToStaticCallRector
 * AddParamTypeDeclarationRector


3) modules/contrib/ldap_sso/src/Form/LdapSsoAdminForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ldap_sso\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\ldap_servers\Entity\Server;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
       ->condition('status', 1)
       ->execute();
     $enabled_servers = $this->storage->loadMultiple($query_result);
-    /** @var \Drupal\ldap_servers\Entity\Server $server */
+    /** @var Server $server */
     foreach ($enabled_servers as $server) {
       if ($server->get('bind_method') === 'user' || $server->get('bind_method') === 'anon_user') {
         $form_state->setErrorByName('ssoEnabled', $this->t("Single sign-on is not valid with the server %sid because that server configuration uses %bind_method. Since the user's credentials are never available to this module with single sign-on enabled, there is no way for the ldap module to bind to the ldap server with credentials.",
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/ldap_sso/src/Controller/LoginController.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ldap_sso\Controller;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Component\Datetime\Time;
+use Drupal\ldap_sso\ServerVariableLookup;
+use Drupal\user\Entity\User;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * Detail log.
    *
-   * @var \Drupal\ldap_servers\Logger\LdapDetailLog
+   * @var LdapDetailLog
    */
   protected $detailLog;

@@ @@
   /**
    * Config.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Login Validator.
    *
-   * @var \Drupal\ldap_authentication\Controller\LoginValidatorSso
+   * @var LoginValidatorSso
    */
   protected $validator;

@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * Time.
    *
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;

@@ @@
   /**
    * Lookup service.
    *
-   * @var \Drupal\ldap_sso\ServerVariableLookup
+   * @var ServerVariableLookup
    */
   protected $serverVariableLookup;

@@ @@
   /**
    * Constructor containing logger and watchdog level.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logging interface.
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   Factory for configuration for LDAP and logging level.
-   * @param \Drupal\ldap_authentication\Controller\LoginValidatorSso $validator
+   * @param LoginValidatorSso $validator
    *   Controller for doing the login procedures.
-   * @param \Drupal\ldap_servers\Logger\LdapDetailLog $detailLog
+   * @param LdapDetailLog $detailLog
    *   Logger interface for conditional logging.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Time.
-   * @param \Drupal\ldap_sso\ServerVariableLookupInterface $server_variable_lookup
+   * @param ServerVariableLookupInterface $server_variable_lookup
    *   Variable used on the server for identified user, often REMOTE_USER.
    */
   public function __construct(
@@ @@
    * In the case that there are no credentials set by the underlying web server,
    * the user is redirected to the normal user login form.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current Symfony HTTP Request.
    *
    *   Redirect response.
@@ @@
     }
     else {
       // Compatibility support for Drupal 8.9.
-      $cookies[] = new Cookie('sso_login_running', '', $this->time->getRequestTime() - 3600, base_path());
+      $cookies[] = Cookie::create('sso_login_running', '', $this->time->getRequestTime() - 3600, base_path());
     }

     return new RedirectResponseWithCookie($finalDestination->toString(), 302, $cookies);
@@ @@
    * @param string $remote_user
    *   Remote user name.
    *
-   * @return \Drupal\user\Entity\User|false
+   * @return User|false
    *   Returns the user if available or FALSE when the authentication is not
    *   successful.
    */
@@ @@
   /**
    * Finalize login with user set.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   Valid user account.
    */
   private function loginUserSetFinalize(UserInterface $account): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * NewToStaticCallRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

