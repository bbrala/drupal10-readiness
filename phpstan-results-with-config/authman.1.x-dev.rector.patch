diff --git a/src/Access/AuthmanAuthorizationCodeReceive.php b/src/Access/AuthmanAuthorizationCodeReceive.php
index 1f32c3a..b277147 100644
--- a/src/Access/AuthmanAuthorizationCodeReceive.php
+++ b/src/Access/AuthmanAuthorizationCodeReceive.php
@@ -20,14 +20,14 @@ class AuthmanAuthorizationCodeReceive implements AccessInterface {
   /**
    * The private tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $privateStoreFactory;
 
   /**
    * AuthmanAuthorizationCodeReceive constructor.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $privateStoreFactory
+   * @param PrivateTempStoreFactory $privateStoreFactory
    *   The private tempstore factory.
    */
   public function __construct(PrivateTempStoreFactory $privateStoreFactory) {
@@ -37,12 +37,12 @@ class AuthmanAuthorizationCodeReceive implements AccessInterface {
   /**
    * Protect against CSRF on authorization code receive route.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\authman\Entity\AuthmanAuthInterface $authman_auth
+   * @param AuthmanAuthInterface $authman_auth
    *   The upcasted authman_auth config entity.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Request $request, AuthmanAuthInterface $authman_auth): AccessResultInterface {
diff --git a/src/Annotation/AuthmanOauth.php b/src/Annotation/AuthmanOauth.php
index dc1a362..efe1f6b 100644
--- a/src/Annotation/AuthmanOauth.php
+++ b/src/Annotation/AuthmanOauth.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\authman\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class AuthmanOauth extends Plugin {
   /**
    * The human-readable name.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -32,7 +33,7 @@ class AuthmanOauth extends Plugin {
   /**
    * Description.
    *
-   * @var \Drupal\Core\Annotation\Translation|null
+   * @var Translation|null
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/AuthmanInstance/AuthmanOauthFactory.php b/src/AuthmanInstance/AuthmanOauthFactory.php
index 3baba11..8ee6a58 100644
--- a/src/AuthmanInstance/AuthmanOauthFactory.php
+++ b/src/AuthmanInstance/AuthmanOauthFactory.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\authman\AuthmanInstance;
 
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\authman\Entity\AuthmanAuthInterface;
 use Drupal\authman\EntityHandlers\AuthmanAuthStorage;
 use Drupal\authman\Exception\AuthmanClientCredentialsException;
@@ -27,14 +28,14 @@ class AuthmanOauthFactory implements AuthmanOauthFactoryInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * AuthmanOauthFactory constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ -87,10 +88,10 @@ class AuthmanOauthFactory implements AuthmanOauthFactoryInterface {
   /**
    * Creates an access token.
    *
-   * @param \Drupal\authman\Entity\AuthmanAuthInterface $authmanConfig
+   * @param AuthmanAuthInterface $authmanConfig
    *   An Authman config instance.
    *
-   * @return \Drupal\authman\Token\AuthmanAccessToken
+   * @return AuthmanAccessToken
    *   An access token with reference its storage. This is useful for when an
    *   access token needs to be refreshed and re-saved to Key.
    */
@@ -121,7 +122,7 @@ class AuthmanOauthFactory implements AuthmanOauthFactoryInterface {
   /**
    * Get key config storage.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @return ConfigEntityStorageInterface
    *   The key config storage.
    */
   protected function keyStorage(): EntityStorageInterface {
@@ -131,7 +132,7 @@ class AuthmanOauthFactory implements AuthmanOauthFactoryInterface {
   /**
    * Get authman_auth config storage.
    *
-   * @return \Drupal\authman\EntityHandlers\AuthmanAuthStorage
+   * @return AuthmanAuthStorage
    *   The authman_auth config storage.
    */
   protected function authmanAuthStorage(): AuthmanAuthStorage {
diff --git a/src/AuthmanInstance/AuthmanOauthFactoryInterface.php b/src/AuthmanInstance/AuthmanOauthFactoryInterface.php
index 350b9c9..935d1b5 100644
--- a/src/AuthmanInstance/AuthmanOauthFactoryInterface.php
+++ b/src/AuthmanInstance/AuthmanOauthFactoryInterface.php
@@ -17,7 +17,7 @@ interface AuthmanOauthFactoryInterface {
    * @param string $id
    *   ID of a 'authman_auth' configuration entity.
    *
-   * @return \Drupal\authman\AuthmanInstance\AuthmanOauthInstanceInterface
+   * @return AuthmanOauthInstanceInterface
    *   A ready-to-use single-use OAuth provider instance.
    */
   public function get(string $id): AuthmanOauthInstanceInterface;
diff --git a/src/AuthmanInstance/AuthmanOauthInstance.php b/src/AuthmanInstance/AuthmanOauthInstance.php
index 32dae9f..22a2698 100644
--- a/src/AuthmanInstance/AuthmanOauthInstance.php
+++ b/src/AuthmanInstance/AuthmanOauthInstance.php
@@ -4,6 +4,11 @@ declare(strict_types = 1);
 
 namespace Drupal\authman\AuthmanInstance;
 
+use League\OAuth2\Client\Grant\GrantFactory;
+use League\OAuth2\Client\Tool\RequestFactory;
+use GuzzleHttp\ClientInterface;
+use League\OAuth2\Client\OptionProvider\OptionProviderInterface;
+use League\OAuth2\Client\Provider\ResourceOwnerInterface;
 use Drupal\authman\Entity\AuthmanAuthInterface;
 use Drupal\authman\Exception\AuthmanAccessTokenException;
 use Drupal\authman\Exception\AuthmanTokenRenewalException;
@@ -26,24 +31,24 @@ use Psr\Http\Message\ResponseInterface;
  * Methods of provider can be called from this class, if a token is set then
  * token arguments are automatically set before proxying to provider.
  *
- * @method static setGrantFactory(\League\OAuth2\Client\Grant\GrantFactory $factory)
- * @method \League\OAuth2\Client\Grant\GrantFactory getGrantFactory()
- * @method static setRequestFactory(\League\OAuth2\Client\Tool\RequestFactory $factory)
- * @method \League\OAuth2\Client\Tool\RequestFactory getRequestFactory()
- * @method static setHttpClient(\GuzzleHttp\ClientInterface $client)
- * @method \GuzzleHttp\ClientInterface getHttpClient()
- * @method static setOptionProvider(\League\OAuth2\Client\OptionProvider\OptionProviderInterface $provider)
- * @method \League\OAuth2\Client\OptionProvider\OptionProviderInterface getOptionProvider()
+ * @method static setGrantFactory(GrantFactory $factory)
+ * @method GrantFactory getGrantFactory()
+ * @method static setRequestFactory(RequestFactory $factory)
+ * @method RequestFactory getRequestFactory()
+ * @method static setHttpClient(ClientInterface $client)
+ * @method ClientInterface getHttpClient()
+ * @method static setOptionProvider(OptionProviderInterface $provider)
+ * @method OptionProviderInterface getOptionProvider()
  * @method string getState()
  * @method string getBaseAuthorizationUrl()
  * @method string getBaseAccessTokenUrl(array $params)
- * @method string getResourceOwnerDetailsUrl(\League\OAuth2\Client\Token\AccessToken $token)
+ * @method string getResourceOwnerDetailsUrl(AccessToken $token)
  * @method string getAuthorizationUrl(array $options = [])
  * @method mixed authorize(array $options, ?callable $redirectHandler)
  * @method AccessTokenInterface getAccessToken($grant, array $options = [])
- * @method \Psr\Http\Message\RequestInterface getRequest(string $method, string $url, array $options = [])
- * @method mixed getParsedResponse(\Psr\Http\Message\RequestInterface $request)
- * @method \League\OAuth2\Client\Provider\ResourceOwnerInterface getResourceOwner()
+ * @method RequestInterface getRequest(string $method, string $url, array $options = [])
+ * @method mixed getParsedResponse(RequestInterface $request)
+ * @method ResourceOwnerInterface getResourceOwner()
  * @method array getHeaders(?mixed $token)
  */
 class AuthmanOauthInstance implements AuthmanOauthInstanceInterface {
@@ -51,14 +56,14 @@ class AuthmanOauthInstance implements AuthmanOauthInstanceInterface {
   /**
    * An instance of an authorization server provider.
    *
-   * @var \League\OAuth2\Client\Provider\AbstractProvider
+   * @var AbstractProvider
    */
   protected $provider;
 
   /**
    * An access token.
    *
-   * @var \Drupal\authman\Token\AuthmanAccessToken|null
+   * @var AuthmanAccessToken|null
    */
   protected $authmanToken;
 
@@ -72,7 +77,7 @@ class AuthmanOauthInstance implements AuthmanOauthInstanceInterface {
   /**
    * Constructs a new AuthmanOauthInstance.
    *
-   * @param \League\OAuth2\Client\Provider\AbstractProvider $provider
+   * @param AbstractProvider $provider
    *   An instance of an authorization server provider.
    * @param string $grantType
    *   The grant type.
diff --git a/src/AuthmanInstance/AuthmanOauthInstanceInterface.php b/src/AuthmanInstance/AuthmanOauthInstanceInterface.php
index f29c1db..00b8c43 100644
--- a/src/AuthmanInstance/AuthmanOauthInstanceInterface.php
+++ b/src/AuthmanInstance/AuthmanOauthInstanceInterface.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\authman\AuthmanInstance;
 
+use Drupal\authman\Exception\AuthmanTokenRenewalException;
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\authman\Token\AuthmanAccessToken;
 use Drupal\Core\Url;
 use League\OAuth2\Client\Provider\AbstractProvider;
@@ -19,7 +21,7 @@ interface AuthmanOauthInstanceInterface {
   /**
    * Get the authorization server provider.
    *
-   * @return \League\OAuth2\Client\Provider\AbstractProvider
+   * @return AbstractProvider
    *   The authorization server provider.
    */
   public function getProvider(): AbstractProvider;
@@ -31,7 +33,7 @@ interface AuthmanOauthInstanceInterface {
    *   Whether to automatically renew token if necessary, or set to NULL to use
    *   the system default.
    *
-   * @return \League\OAuth2\Client\Token\AccessTokenInterface|null
+   * @return AccessTokenInterface|null
    *   The access token, or NULL if not set.
    */
   public function getToken(?bool $autoRenew = TRUE): ?AccessTokenInterface;
@@ -41,7 +43,7 @@ interface AuthmanOauthInstanceInterface {
    *
    * Use removeToken if the token should be removed.
    *
-   * @param \Drupal\authman\Token\AuthmanAccessToken $token
+   * @param AuthmanAccessToken $token
    *   The access token.
    *
    * @return $this
@@ -56,7 +58,7 @@ interface AuthmanOauthInstanceInterface {
   /**
    * Determine if a token needs to be renewed.
    *
-   * @param \League\OAuth2\Client\Token\AccessTokenInterface $token
+   * @param AccessTokenInterface $token
    *   An access token.
    *
    * @return bool
@@ -77,13 +79,13 @@ interface AuthmanOauthInstanceInterface {
    *
    * This will initiate a call to the authorization server.
    *
-   * @param \League\OAuth2\Client\Token\AccessTokenInterface $token
+   * @param AccessTokenInterface $token
    *   An access token.
    *
-   * @return \League\OAuth2\Client\Token\AccessTokenInterface
+   * @return AccessTokenInterface
    *   An access token with renewed lifetime.
    *
-   * @throws \Drupal\authman\Exception\AuthmanTokenRenewalException
+   * @throws AuthmanTokenRenewalException
    *   Thrown when the token failed to renew.
    */
   public function tokenRenew(AccessTokenInterface $token): AccessTokenInterface;
@@ -91,7 +93,7 @@ interface AuthmanOauthInstanceInterface {
   /**
    * Get the URL for authorization codes.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The authorization code URL.
    */
   public function authorizationCodeUrl(): Url;
@@ -99,10 +101,10 @@ interface AuthmanOauthInstanceInterface {
   /**
    * Executes an authenticated request.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   The response from the resource server.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    *   Thrown when the request fails.
    *
    * @see \GuzzleHttp\ClientInterface::send
@@ -124,7 +126,7 @@ interface AuthmanOauthInstanceInterface {
    *   filtered out.
    *   See also https://github.com/thephpleague/oauth2-client/issues/863.
    *
-   * @return \Psr\Http\Message\RequestInterface
+   * @return RequestInterface
    *   an authenticated PSR-7 request instance.
    *
    * @see \League\OAuth2\Client\Provider\AbstractProvider::getAuthenticatedRequest
@@ -134,15 +136,15 @@ interface AuthmanOauthInstanceInterface {
   /**
    * Sends a request instance and returns a response instance.
    *
-   * @param \Psr\Http\Message\RequestInterface $request
+   * @param RequestInterface $request
    *   The request to execute.
    * @param array $options
    *   Additional options.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    *   Thrown when the request fails.
    *
    * @see \League\OAuth2\Client\Provider\AbstractProvider::getResponse
diff --git a/src/Controller/AuthmanOauthAuthorizationCodeController.php b/src/Controller/AuthmanOauthAuthorizationCodeController.php
index e124fd9..1bc2ccc 100644
--- a/src/Controller/AuthmanOauthAuthorizationCodeController.php
+++ b/src/Controller/AuthmanOauthAuthorizationCodeController.php
@@ -4,6 +4,10 @@ declare(strict_types = 1);
 
 namespace Drupal\authman\Controller;
 
+use Drupal\Core\TempStore\PrivateTempStoreFactory;
+use Drupal\authman\AuthmanInstance\AuthmanOauthFactoryInterface;
+use Drupal\key\KeyInterface;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\authman\Entity\AuthmanAuthInterface;
 use Drupal\authman\Token\AuthmanAccessToken;
 use Drupal\Core\Cache\CacheableMetadata;
@@ -24,14 +28,14 @@ class AuthmanOauthAuthorizationCodeController extends ControllerBase {
   /**
    * The private tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $privateStoreFactory;
 
   /**
    * The OAuth provider instance factory.
    *
-   * @var \Drupal\authman\AuthmanInstance\AuthmanOauthFactoryInterface
+   * @var AuthmanOauthFactoryInterface
    */
   protected $authmanOauthFactory;
 
@@ -61,7 +65,7 @@ class AuthmanOauthAuthorizationCodeController extends ControllerBase {
    * Users are redirected back to the website thanks to the redirectUri
    * setting in createProvider.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Redirect response offsite.
    */
   public function start(AuthmanAuthInterface $authman_auth): Response {
@@ -98,12 +102,12 @@ class AuthmanOauthAuthorizationCodeController extends ControllerBase {
    * Some parts copied/inspired by docs at
    * https://github.com/thephpleague/oauth2-google.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Redirects users to info page, displaying success or error message.
-   * @param \Drupal\authman\Entity\AuthmanAuthInterface $authman_auth
+   * @param AuthmanAuthInterface $authman_auth
    *   The Authman instance.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   A redirect response.
    */
   public function receive(Request $request, AuthmanAuthInterface $authman_auth): Response {
@@ -127,7 +131,7 @@ class AuthmanOauthAuthorizationCodeController extends ControllerBase {
     }
 
     $accessKeyId = $authman_auth->getAccessTokenKeyId();
-    /** @var \Drupal\key\KeyInterface $access_key */
+    /** @var KeyInterface $access_key */
     if (!$this->keyStorage()->load($accessKeyId)) {
       $this->messenger->addError($this->t('The key %key does not exist.', ['%key' => $accessKeyId]));
       throw new \LogicException(sprintf('The key %s does not exist', $accessKeyId));
@@ -151,7 +155,7 @@ class AuthmanOauthAuthorizationCodeController extends ControllerBase {
   /**
    * Get key config storage.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @return ConfigEntityStorageInterface
    *   The key config storage.
    */
   protected function keyStorage(): EntityStorageInterface {
diff --git a/src/Entity/AuthmanAuth.php b/src/Entity/AuthmanAuth.php
index b3c06d7..d99946e 100644
--- a/src/Entity/AuthmanAuth.php
+++ b/src/Entity/AuthmanAuth.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\authman\Entity;
 
+use Drupal\Component\Plugin\LazyPluginCollection;
 use Drupal\authman\Plugin\AuthmanOauthPluginCollection;
 use Drupal\authman\Plugin\AuthmanOauth\AuthmanOauthPluginInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
@@ -103,7 +104,7 @@ class AuthmanAuth extends ConfigEntityBase implements AuthmanAuthInterface, Enti
   /**
    * Encapsulates the creation of the plugin collection.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection|null
+   * @return LazyPluginCollection|null
    *   The plugin collection, or NULL if no plugin collection was created.
    */
   protected function getPluginCollection(): ?AuthmanOauthPluginCollection {
diff --git a/src/Entity/AuthmanAuthInterface.php b/src/Entity/AuthmanAuthInterface.php
index 01016d0..3c39101 100644
--- a/src/Entity/AuthmanAuthInterface.php
+++ b/src/Entity/AuthmanAuthInterface.php
@@ -66,7 +66,7 @@ interface AuthmanAuthInterface extends ConfigEntityInterface {
   /**
    * Gets the client key.
    *
-   * @return \Drupal\key\KeyInterface
+   * @return KeyInterface
    *   Client Key, or NULL if it does not exist.
    */
   public function getClientKey(): ?KeyInterface;
@@ -84,7 +84,7 @@ interface AuthmanAuthInterface extends ConfigEntityInterface {
   /**
    * Gets the access token Key.
    *
-   * @return \Drupal\key\KeyInterface
+   * @return KeyInterface
    *   Client Key, or NULL if it does not exist.
    */
   public function getAccessTokenKey(): ?KeyInterface;
diff --git a/src/EntityHandlers/AuthmanAuthRouteProvider.php b/src/EntityHandlers/AuthmanAuthRouteProvider.php
index 6eac5b3..63579e2 100644
--- a/src/EntityHandlers/AuthmanAuthRouteProvider.php
+++ b/src/EntityHandlers/AuthmanAuthRouteProvider.php
@@ -29,10 +29,10 @@ class AuthmanAuthRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets information route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   Entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   Information route if applicable.
    */
   protected function getInformationRoute(EntityTypeInterface $entity_type): ?Route {
diff --git a/src/EntityHandlers/AuthmanAuthStorage.php b/src/EntityHandlers/AuthmanAuthStorage.php
index 717ca1f..febae46 100644
--- a/src/EntityHandlers/AuthmanAuthStorage.php
+++ b/src/EntityHandlers/AuthmanAuthStorage.php
@@ -4,11 +4,12 @@ declare(strict_types = 1);
 
 namespace Drupal\authman\EntityHandlers;
 
+use Drupal\authman\Entity\AuthmanAuthInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorage;
 
 /**
  * Storage handler for "authman_auth" configuration entities.
  *
- * @method \Drupal\authman\Entity\AuthmanAuthInterface|null load($id)
+ * @method AuthmanAuthInterface|null load($id)
  */
 class AuthmanAuthStorage extends ConfigEntityStorage {}
diff --git a/src/Form/AuthmanAuthForm.php b/src/Form/AuthmanAuthForm.php
index c24867c..fe26bd1 100644
--- a/src/Form/AuthmanAuthForm.php
+++ b/src/Form/AuthmanAuthForm.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\authman\Form;
 
+use Drupal\key\KeyInterface;
 use Drupal\authman\AuthmanPluginManager;
 use Drupal\authman\Entity\AuthmanAuth;
 use Drupal\authman\Entity\AuthmanAuthInterface;
@@ -31,28 +32,28 @@ class AuthmanAuthForm extends EntityForm {
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Plugin manager.
    *
-   * @var \Drupal\authman\AuthmanPluginManager
+   * @var AuthmanPluginManager
    */
   protected $pluginManager;
 
   /**
    * The plugin form factory.
    *
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;
 
@@ -71,13 +72,13 @@ class AuthmanAuthForm extends EntityForm {
   /**
    * Constructs a AuthmanAuthForm.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Logger.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger.
-   * @param \Drupal\authman\AuthmanPluginManager $pluginManager
+   * @param AuthmanPluginManager $pluginManager
    *   Plugin manager.
-   * @param \Drupal\Core\Plugin\PluginFormFactoryInterface $pluginFormFactory
+   * @param PluginFormFactoryInterface $pluginFormFactory
    *   The plugin form factory.
    */
   public function __construct(LoggerInterface $logger, MessengerInterface $messenger, AuthmanPluginManager $pluginManager, PluginFormFactoryInterface $pluginFormFactory) {
@@ -359,7 +360,7 @@ class AuthmanAuthForm extends EntityForm {
     do {
       $keyId = ($i === 1 ? $baseKeyId : sprintf('%s_%d', $baseKeyId, $i));
       $i++;
-      /** @var \Drupal\key\KeyInterface|null $key */
+      /** @var KeyInterface|null $key */
       $key = Key::load($keyId);
     } while ($key);
     return $keyId;
diff --git a/src/Form/AuthmanAuthInfoForm.php b/src/Form/AuthmanAuthInfoForm.php
index 0228de2..fdbbf19 100644
--- a/src/Form/AuthmanAuthInfoForm.php
+++ b/src/Form/AuthmanAuthInfoForm.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\authman\Form;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\authman\AuthmanInstance\AuthmanOauthFactoryInterface;
 use Drupal\authman\Entity\AuthmanAuthInterface;
 use Drupal\authman\Plugin\AuthmanOauth\AuthmanOauthPluginResourceOwnerInterface;
 use Drupal\Core\Ajax\AjaxFormHelperTrait;
@@ -26,14 +28,14 @@ class AuthmanAuthInfoForm extends EntityForm {
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The OAuth provider instance factory.
    *
-   * @var \Drupal\authman\AuthmanInstance\AuthmanOauthFactoryInterface
+   * @var AuthmanOauthFactoryInterface
    */
   protected $authmanOauthFactory;
 
diff --git a/src/Plugin/AuthmanOauth/AuthmanOauthPluginInterface.php b/src/Plugin/AuthmanOauth/AuthmanOauthPluginInterface.php
index b4939d7..9b7c86e 100644
--- a/src/Plugin/AuthmanOauth/AuthmanOauthPluginInterface.php
+++ b/src/Plugin/AuthmanOauth/AuthmanOauthPluginInterface.php
@@ -30,10 +30,10 @@ interface AuthmanOauthPluginInterface extends ConfigurableInterface, DependentPl
    * @param string $grantType
    *   The grant type, any of value of constants
    *   \Drupal\authman\Entity\AuthmanAuthInterface::GRANT_*.
-   * @param \Drupal\key\KeyInterface $clientKey
+   * @param KeyInterface $clientKey
    *   A client credentials key.
    *
-   * @return \Drupal\authman\AuthmanInstance\AuthmanOauthInstanceInterface
+   * @return AuthmanOauthInstanceInterface
    *   A single-use OAuth provider instance.
    *
    * @see \Drupal\authman\AuthmanInstance\AuthmanOauthFactory::get
diff --git a/src/Plugin/AuthmanOauth/AuthmanOauthPluginResourceOwnerInterface.php b/src/Plugin/AuthmanOauth/AuthmanOauthPluginResourceOwnerInterface.php
index ba76c5a..7bb5802 100644
--- a/src/Plugin/AuthmanOauth/AuthmanOauthPluginResourceOwnerInterface.php
+++ b/src/Plugin/AuthmanOauth/AuthmanOauthPluginResourceOwnerInterface.php
@@ -14,7 +14,7 @@ interface AuthmanOauthPluginResourceOwnerInterface {
   /**
    * Renders a resource owner retrieved by an instance of this plugin.
    *
-   * @param \League\OAuth2\Client\Provider\ResourceOwnerInterface $resourceOwner
+   * @param ResourceOwnerInterface $resourceOwner
    *   A resource owner instance.
    *
    * @return array
diff --git a/src/Token/AuthmanAccessToken.php b/src/Token/AuthmanAccessToken.php
index 9c2e83e..dadd121 100644
--- a/src/Token/AuthmanAccessToken.php
+++ b/src/Token/AuthmanAccessToken.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\authman\Token;
 
+use Drupal\Component\Datetime\TimeInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\authman\Exception\AuthmanAccessTokenException;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\key\KeyInterface;
@@ -26,21 +28,21 @@ class AuthmanAccessToken implements AccessTokenInterface {
   /**
    * The access token.
    *
-   * @var \League\OAuth2\Client\Token\AccessTokenInterface|null
+   * @var AccessTokenInterface|null
    */
   protected $token;
 
   /**
    * The key storage, or NULL to get directly from container.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface|null
+   * @var ConfigEntityStorageInterface|null
    */
   protected $keyStorage;
 
   /**
    * The time machine, or NULL to get directly from container.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface|null
+   * @var TimeInterface|null
    */
   protected $time;
 
@@ -49,7 +51,7 @@ class AuthmanAccessToken implements AccessTokenInterface {
    *
    * @param string $accessKeyId
    *   A Key config entity ID for an 'authman_oauth_access_token' key type.
-   * @param \League\OAuth2\Client\Token\AccessTokenInterface|null $token
+   * @param AccessTokenInterface|null $token
    *   The access token.
    */
   public function __construct(string $accessKeyId, ?AccessTokenInterface $token = NULL) {
@@ -60,10 +62,10 @@ class AuthmanAccessToken implements AccessTokenInterface {
   /**
    * Saves the access token to a Key configuration entity.
    *
-   * @return \Drupal\key\KeyInterface
+   * @return KeyInterface
    *   The saved Key config entity for an 'authman_oauth_access_token' key type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   If token could not be saved to Key.
    */
   public function saveToKey(): KeyInterface {
@@ -71,7 +73,7 @@ class AuthmanAccessToken implements AccessTokenInterface {
       throw new AuthmanAccessTokenException('Token not set.');
     }
 
-    /** @var \Drupal\key\KeyInterface $accessKey */
+    /** @var KeyInterface $accessKey */
     $accessKey = $this->keyStorage()->load($this->accessKeyId);
     // See \Drupal\authman\Plugin\KeyType\OauthAccessTokenKeyType.
     $accessKey->setKeyValue([
@@ -87,7 +89,7 @@ class AuthmanAccessToken implements AccessTokenInterface {
   /**
    * Sets the access token.
    *
-   * @param \League\OAuth2\Client\Token\AccessTokenInterface $token
+   * @param AccessTokenInterface $token
    *   The access token.
    */
   public function setAccessToken(AccessTokenInterface $token): void {
@@ -97,7 +99,7 @@ class AuthmanAccessToken implements AccessTokenInterface {
   /**
    * Get the access token.
    *
-   * @return \League\OAuth2\Client\Token\AccessTokenInterface|null
+   * @return AccessTokenInterface|null
    *   The access token.
    */
   public function getAccessToken(): ?AccessTokenInterface {
@@ -107,7 +109,7 @@ class AuthmanAccessToken implements AccessTokenInterface {
   /**
    * Get key config storage.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @return ConfigEntityStorageInterface
    *   The key config storage.
    */
   protected function keyStorage(): ConfigEntityStorageInterface {
@@ -119,7 +121,7 @@ class AuthmanAccessToken implements AccessTokenInterface {
   /**
    * Set key config storage.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $keyStorage
+   * @param ConfigEntityStorageInterface $keyStorage
    *   The key config storage.
    */
   public function setKeyStorage(ConfigEntityStorageInterface $keyStorage): void {
diff --git a/src/Token/AuthmanAccessTokenProxyTrait.php b/src/Token/AuthmanAccessTokenProxyTrait.php
index e3fa1e9..db40323 100644
--- a/src/Token/AuthmanAccessTokenProxyTrait.php
+++ b/src/Token/AuthmanAccessTokenProxyTrait.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\authman\Token;
 
+use League\OAuth2\Client\Token\AccessTokenInterface;
 use Drupal\authman\Exception\AuthmanAccessTokenException;
 
 /**
@@ -17,7 +18,7 @@ trait AuthmanAccessTokenProxyTrait {
   /**
    * The access token.
    *
-   * @var \League\OAuth2\Client\Token\AccessTokenInterface|null
+   * @var AccessTokenInterface|null
    */
   protected $token;
 
diff --git a/tests/modules/authman_test_providers/src/Plugin/AuthmanOauth/AuthmanTestAuthorizationCode.php b/tests/modules/authman_test_providers/src/Plugin/AuthmanOauth/AuthmanTestAuthorizationCode.php
index 8410b46..0ae3bb0 100644
--- a/tests/modules/authman_test_providers/src/Plugin/AuthmanOauth/AuthmanTestAuthorizationCode.php
+++ b/tests/modules/authman_test_providers/src/Plugin/AuthmanOauth/AuthmanTestAuthorizationCode.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\authman_test_providers\Plugin\AuthmanOauth;
 
+use GuzzleHttp\Client;
 use Drupal\authman\AuthmanInstance\AuthmanOauthInstance;
 use Drupal\authman\AuthmanInstance\AuthmanOauthInstanceInterface;
 use Drupal\authman\Plugin\AuthmanOauth\AuthmanOauthPluginBase;
@@ -38,7 +39,7 @@ class AuthmanTestAuthorizationCode extends AuthmanOauthPluginBase implements Con
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
 
diff --git a/tests/modules/authman_test_providers/src/Plugin/AuthmanOauth/AuthmanTestClientCredentials.php b/tests/modules/authman_test_providers/src/Plugin/AuthmanOauth/AuthmanTestClientCredentials.php
index 7aa1282..64808e3 100644
--- a/tests/modules/authman_test_providers/src/Plugin/AuthmanOauth/AuthmanTestClientCredentials.php
+++ b/tests/modules/authman_test_providers/src/Plugin/AuthmanOauth/AuthmanTestClientCredentials.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\authman_test_providers\Plugin\AuthmanOauth;
 
+use GuzzleHttp\Client;
 use Drupal\authman\AuthmanInstance\AuthmanOauthInstance;
 use Drupal\authman\AuthmanInstance\AuthmanOauthInstanceInterface;
 use Drupal\authman\Plugin\AuthmanOauth\AuthmanOauthPluginBase;
@@ -36,7 +37,7 @@ class AuthmanTestClientCredentials extends AuthmanOauthPluginBase implements Con
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
 
diff --git a/tests/modules/authman_test_time/src/TimeMachine.php b/tests/modules/authman_test_time/src/TimeMachine.php
index 5a51763..06bfd95 100644
--- a/tests/modules/authman_test_time/src/TimeMachine.php
+++ b/tests/modules/authman_test_time/src/TimeMachine.php
@@ -15,14 +15,14 @@ class TimeMachine implements TimeInterface {
   /**
    * State.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * TimeMachine constructor.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State.
    */
   public function __construct(StateInterface $state) {
diff --git a/tests/src/Functional/AuthmanCrudUiTest.php b/tests/src/Functional/AuthmanCrudUiTest.php
index 5e610b6..d8a7d3a 100644
--- a/tests/src/Functional/AuthmanCrudUiTest.php
+++ b/tests/src/Functional/AuthmanCrudUiTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\authman\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\authman\Entity\AuthmanAuth;
 use Drupal\authman\Entity\AuthmanAuthInterface;
 use Drupal\authman_test_providers\Plugin\AuthmanOauth\AuthmanTestAuthorizationCode;
@@ -23,7 +24,7 @@ class AuthmanCrudUiTest extends BrowserTestBase {
   /**
    * User interface.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
@@ -106,7 +107,7 @@ class AuthmanCrudUiTest extends BrowserTestBase {
   /**
    * Assert that admin can add an authman instance.
    *
-   * @return \Drupal\authman\Entity\AuthmanAuthInterface
+   * @return AuthmanAuthInterface
    *   The added instance.
    */
   private function assertThatAdminCanAddAuthmanInstances() : AuthmanAuthInterface {
@@ -119,7 +120,7 @@ class AuthmanCrudUiTest extends BrowserTestBase {
     $assert->statusCodeEquals(200);
     $assert->linkExists('Add instance');
     $this->clickLink('Add instance');
-    $this->assertUrl(Url::fromRoute('entity.authman_auth.add_form'));
+    $this->assertSession()->addressEquals(Url::fromRoute('entity.authman_auth.add_form'));
     $instance_name = $this->randomMachineName();
     $id = mb_strtolower($this->randomMachineName());
 
@@ -167,10 +168,10 @@ class AuthmanCrudUiTest extends BrowserTestBase {
   /**
    * Assert that admin can edit instances.
    *
-   * @param \Drupal\authman\Entity\AuthmanAuthInterface $authmanConfig
+   * @param AuthmanAuthInterface $authmanConfig
    *   Instance to edit.
    *
-   * @return \Drupal\authman\Entity\AuthmanAuthInterface
+   * @return AuthmanAuthInterface
    *   The edited instance.
    */
   private function assertThatAdminCanEditAuthmanInstances(AuthmanAuthInterface $authmanConfig) : AuthmanAuthInterface {
@@ -190,14 +191,14 @@ class AuthmanCrudUiTest extends BrowserTestBase {
       'label' => $new_name,
     ], 'Save');
     $assert->pageTextContains(sprintf('Authman instance %s has been updated.', $new_name));
-    $this->assertUrl($collection_url);
+    $this->assertSession()->addressEquals($collection_url);
     return \Drupal::entityTypeManager()->getStorage('authman_auth')->loadUnchanged($authmanConfig->id());
   }
 
   /**
    * Assert that admin can delete authman instances.
    *
-   * @param \Drupal\authman\Entity\AuthmanAuthInterface $authmanConfig
+   * @param AuthmanAuthInterface $authmanConfig
    *   The instance to delete.
    */
   private function assertThatAdminCanDeleteAuthmanInstances(AuthmanAuthInterface $authmanConfig) : void {
diff --git a/tests/src/Functional/AuthmanInfoFormTest.php b/tests/src/Functional/AuthmanInfoFormTest.php
index 3ab823c..5376b44 100644
--- a/tests/src/Functional/AuthmanInfoFormTest.php
+++ b/tests/src/Functional/AuthmanInfoFormTest.php
@@ -61,7 +61,7 @@ final class AuthmanInfoFormTest extends BrowserTestBase {
     $this->drupalGet($authmanConfig->toUrl('information'));
     $this->assertSession()->statusCodeEquals(200);
 
-    $this->drupalPostForm(NULL, [], 'edit-reset');
+    $this->submitForm([], 'edit-reset');
     $this->assertSession()->pageTextContains('Deleted access token');
 
     // Token values were cleared.
diff --git a/tests/src/Kernel/AuthmanAuthorizationCodeTest.php b/tests/src/Kernel/AuthmanAuthorizationCodeTest.php
index 2baaffc..31a8511 100644
--- a/tests/src/Kernel/AuthmanAuthorizationCodeTest.php
+++ b/tests/src/Kernel/AuthmanAuthorizationCodeTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\authman\Kernel;
 
+use Drupal\authman_test_time\TimeMachine;
+use GuzzleHttp\Psr7\Request;
 use Drupal\authman\Entity\AuthmanAuthInterface;
 use Drupal\authman\Exception\AuthmanTokenRenewalException;
 use Drupal\authman\Token\AuthmanAccessToken;
@@ -59,7 +61,7 @@ final class AuthmanAuthorizationCodeTest extends KernelTestBase {
   /**
    * A mock Guzzle handler.
    *
-   * @var \GuzzleHttp\Handler\MockHandler
+   * @var MockHandler
    */
   protected $mockHandler;
 
@@ -71,7 +73,7 @@ final class AuthmanAuthorizationCodeTest extends KernelTestBase {
 
     parent::setUp();
 
-    /** @var \Drupal\authman_test_time\TimeMachine $timeMachine */
+    /** @var TimeMachine $timeMachine */
     $timeMachine = \Drupal::service('datetime.time');
     $this->currentTime = new \DateTime('18th October 2014 4:00:00pm Asia/Singapore');
     $timeMachine->setTime($this->currentTime);
@@ -147,9 +149,9 @@ final class AuthmanAuthorizationCodeTest extends KernelTestBase {
     $this->assertCount(2, $this->historyContainer);
 
     // Refresh token flow.
-    /** @var \GuzzleHttp\Psr7\Request[] $requests */
+    /** @var Request[] $requests */
     $requests = array_column($this->historyContainer, 'request');
-    /** @var \GuzzleHttp\Psr7\Response[] $responses */
+    /** @var Response[] $responses */
     $responses = array_column($this->historyContainer, 'response');
 
     $this->assertEquals('POST', $requests[0]->getMethod());
@@ -210,9 +212,9 @@ final class AuthmanAuthorizationCodeTest extends KernelTestBase {
     $authmanInstance->authenticatedRequest('GET', 'http://example.com/resource/foo/1');
     $this->assertCount(1, $this->historyContainer);
 
-    /** @var \GuzzleHttp\Psr7\Request[] $requests */
+    /** @var Request[] $requests */
     $requests = array_column($this->historyContainer, 'request');
-    /** @var \GuzzleHttp\Psr7\Response[] $responses */
+    /** @var Response[] $responses */
     $responses = array_column($this->historyContainer, 'response');
     $this->assertEquals('GET', $requests[0]->getMethod());
     $this->assertEquals('http://example.com/resource/foo/1', (string) $requests[0]->getUri());
diff --git a/tests/src/Kernel/AuthmanClientCredentialTest.php b/tests/src/Kernel/AuthmanClientCredentialTest.php
index 0d54a89..76f6be6 100644
--- a/tests/src/Kernel/AuthmanClientCredentialTest.php
+++ b/tests/src/Kernel/AuthmanClientCredentialTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\authman\Kernel;
 
+use Drupal\authman_test_time\TimeMachine;
+use GuzzleHttp\Psr7\Request;
 use Drupal\authman\Entity\AuthmanAuthInterface;
 use Drupal\authman_test_providers\Plugin\AuthmanOauth\AuthmanTestClientCredentials;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ -56,7 +58,7 @@ final class AuthmanClientCredentialTest extends KernelTestBase {
   /**
    * A mock Guzzle handler.
    *
-   * @var \GuzzleHttp\Handler\MockHandler
+   * @var MockHandler
    */
   protected $mockHandler;
 
@@ -68,7 +70,7 @@ final class AuthmanClientCredentialTest extends KernelTestBase {
 
     parent::setUp();
 
-    /** @var \Drupal\authman_test_time\TimeMachine $timeMachine */
+    /** @var TimeMachine $timeMachine */
     $timeMachine = \Drupal::service('datetime.time');
     $this->currentTime = new \DateTime('18th October 2014 4:00:00pm Asia/Singapore');
     $timeMachine->setTime($this->currentTime);
@@ -110,9 +112,9 @@ final class AuthmanClientCredentialTest extends KernelTestBase {
     $authmanInstance->authenticatedRequest('GET', 'http://example.com/resource/foo/1');
     $this->assertCount(2, $this->historyContainer);
 
-    /** @var \GuzzleHttp\Psr7\Request[] $requests */
+    /** @var Request[] $requests */
     $requests = array_column($this->historyContainer, 'request');
-    /** @var \GuzzleHttp\Psr7\Response[] $responses */
+    /** @var Response[] $responses */
     $responses = array_column($this->historyContainer, 'response');
     $this->assertEquals('POST', $requests[0]->getMethod());
     $this->assertEquals('http://example.com/oauth2/token', (string) $requests[0]->getUri());
diff --git a/tests/src/Traits/AuthmanConfigTrait.php b/tests/src/Traits/AuthmanConfigTrait.php
index 1077492..d878bc1 100644
--- a/tests/src/Traits/AuthmanConfigTrait.php
+++ b/tests/src/Traits/AuthmanConfigTrait.php
@@ -24,11 +24,11 @@ trait AuthmanConfigTrait {
    * @param array|null $keyValues
    *   Optional values.
    *
-   * @return \Drupal\key\KeyInterface
+   * @return KeyInterface
    *   A saved access token key.
    */
   protected function createClientKey(?array $keyValues = []): KeyInterface {
-    /** @var \Drupal\key\KeyInterface $clientKey */
+    /** @var KeyInterface $clientKey */
     $clientKey = Key::create([
       'id' => 'client_' . $this->randomMachineName(),
       'key_type' => 'authman_oauth_client',
@@ -46,11 +46,11 @@ trait AuthmanConfigTrait {
    * @param array|null $keyValues
    *   Optional values.
    *
-   * @return \Drupal\key\KeyInterface
+   * @return KeyInterface
    *   A saved access token key.
    */
   protected function createAccessTokenKey(?array $keyValues = []): KeyInterface {
-    /** @var \Drupal\key\KeyInterface $accessTokenKey */
+    /** @var KeyInterface $accessTokenKey */
     $accessTokenKey = Key::create([
       'id' => 'access_token_' . $this->randomMachineName(),
       'key_type' => 'authman_oauth_access_token',
@@ -69,12 +69,12 @@ trait AuthmanConfigTrait {
    *   The ID of an Authman plguin.
    * @param string $grantType
    *   The grant type.
-   * @param \Drupal\key\KeyInterface|null $clientKey
+   * @param KeyInterface|null $clientKey
    *   Optionally associate a client Key.
-   * @param \Drupal\key\KeyInterface|null $accessTokenKey
+   * @param KeyInterface|null $accessTokenKey
    *   Optionally associate an access token Key.
    *
-   * @return \Drupal\authman\Entity\AuthmanAuthInterface
+   * @return AuthmanAuthInterface
    *   A saved Authman config instance.
    */
   protected function createAuthmanConfig(string $plugin, string $grantType, ?KeyInterface $clientKey = NULL, ?KeyInterface $accessTokenKey = NULL): AuthmanAuthInterface {
@@ -90,7 +90,7 @@ trait AuthmanConfigTrait {
       $values['access_token_key'] = $accessTokenKey->id();
     }
 
-    /** @var \Drupal\authman\Entity\AuthmanAuthInterface $authmanConfig */
+    /** @var AuthmanAuthInterface $authmanConfig */
     $authmanConfig = AuthmanAuth::create($values);
     $authmanConfig->save();
     return $authmanConfig;
@@ -99,7 +99,7 @@ trait AuthmanConfigTrait {
   /**
    * Get the authman instance factory.
    *
-   * @return \Drupal\authman\AuthmanInstance\AuthmanOauthFactoryInterface
+   * @return AuthmanOauthFactoryInterface
    *   The authman instance factory.
    */
   protected function authmanInstanceFactory(): AuthmanOauthFactoryInterface {
