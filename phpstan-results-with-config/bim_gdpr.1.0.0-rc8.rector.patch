diff --git a/src/BimGdprGroupListBuilder.php b/src/BimGdprGroupListBuilder.php
index 481dc77..2a06d7a 100644
--- a/src/BimGdprGroupListBuilder.php
+++ b/src/BimGdprGroupListBuilder.php
@@ -24,7 +24,7 @@ class BimGdprGroupListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\bim_gdpr\BimGdprGroupInterface $entity */
+    /** @var BimGdprGroupInterface $entity */
     $row['label'] = $entity->label();
     $row['id'] = $entity->id();
     $row['status'] = $entity->status() ? $this->t('Enabled') : $this->t('Disabled');
diff --git a/src/BimGdprServiceInterface.php b/src/BimGdprServiceInterface.php
index af1c03a..c8cb620 100644
--- a/src/BimGdprServiceInterface.php
+++ b/src/BimGdprServiceInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bim_gdpr;
 
+use Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypeInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
 /**
@@ -57,7 +58,7 @@ interface BimGdprServiceInterface extends ConfigEntityInterface {
   /**
    * Return the service type plugin.
    *
-   * @return \Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypeInterface
+   * @return BimGdprServiceTypeInterface
    *   The service type plugin.
    */
   public function getServiceType();
diff --git a/src/BimGdprServiceListBuilder.php b/src/BimGdprServiceListBuilder.php
index ac9d155..b8dcb42 100644
--- a/src/BimGdprServiceListBuilder.php
+++ b/src/BimGdprServiceListBuilder.php
@@ -24,7 +24,7 @@ class BimGdprServiceListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\bim_gdpr\BimGdprGroupInterface $entity */
+    /** @var BimGdprGroupInterface $entity */
     $row['label'] = $entity->label();
     $row['id'] = $entity->id();
     $row['status'] = $entity->status() ? $this->t('Enabled') : $this->t('Disabled');
diff --git a/src/Form/BimGdprGroupForm.php b/src/Form/BimGdprGroupForm.php
index 961f470..810d010 100644
--- a/src/Form/BimGdprGroupForm.php
+++ b/src/Form/BimGdprGroupForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bim_gdpr\Form;
 
+use Drupal\bim_gdpr\BimGdprGroupInterface;
 use Drupal\bim_gdpr\Storage\TranslatableConfigEntityFormTrait;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ -10,7 +11,7 @@ use Drupal\Core\Url;
 /**
  * Bim GDPR Group form.
  *
- * @property \Drupal\bim_gdpr\BimGdprGroupInterface $entity
+ * @property BimGdprGroupInterface $entity
  */
 class BimGdprGroupForm extends EntityForm {
 
diff --git a/src/Form/BimGdprServiceForm.php b/src/Form/BimGdprServiceForm.php
index 4fc09f7..b98353d 100644
--- a/src/Form/BimGdprServiceForm.php
+++ b/src/Form/BimGdprServiceForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bim_gdpr\Form;
 
+use Drupal\bim_gdpr\BimGdprServiceInterface;
 use Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypeInterface;
 use Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypePluginManager;
 use Drupal\bim_gdpr\Storage\TranslatableConfigEntityFormTrait;
@@ -13,7 +14,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 /**
  * Bim GDPR Service form.
  *
- * @property \Drupal\bim_gdpr\BimGdprServiceInterface $entity
+ * @property BimGdprServiceInterface $entity
  */
 class BimGdprServiceForm extends EntityForm {
 
@@ -29,14 +30,14 @@ class BimGdprServiceForm extends EntityForm {
   /**
    * Service Type Plugin Manager.
    *
-   * @var \Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypePluginManager
+   * @var BimGdprServiceTypePluginManager
    */
   protected $serviceTypeManager;
 
   /**
    * BimGdprServiceForm constructor.
    *
-   * @param \Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypePluginManager $serviceTypeManager
+   * @param BimGdprServiceTypePluginManager $serviceTypeManager
    *   The service type manager.
    */
   public function __construct(BimGdprServiceTypePluginManager $serviceTypeManager) {
@@ -48,7 +49,7 @@ class BimGdprServiceForm extends EntityForm {
    */
   public static function create(ContainerInterface $container) {
     return new static(
-      $container->get(BimGdprServiceTypePluginManager::SERVICE_NAME)
+      $this->serviceTypeManager
     );
   }
 
@@ -123,7 +124,7 @@ class BimGdprServiceForm extends EntityForm {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    */
   protected function initServiceType(array &$form, FormStateInterface $formState) {
@@ -150,11 +151,11 @@ class BimGdprServiceForm extends EntityForm {
   /**
    * Return the plugin subform.
    *
-   * @param \Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypeInterface $plugin
+   * @param BimGdprServiceTypeInterface $plugin
    *   The plugin.
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    *
    * @return array
@@ -184,7 +185,7 @@ class BimGdprServiceForm extends EntityForm {
    *
    * @param array $form
    *   THe form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   protected function massageValues(array $form, FormStateInterface $form_state) {
diff --git a/src/Form/BimGdrpOverview.php b/src/Form/BimGdrpOverview.php
index 21e6de5..2453fee 100644
--- a/src/Form/BimGdrpOverview.php
+++ b/src/Form/BimGdrpOverview.php
@@ -29,28 +29,29 @@ class BimGdrpOverview extends FormBase {
   /**
    * Service repo.
    *
-   * @var \Drupal\bim_gdpr\Services\HierarchyStorage
+   * @var HierarchyStorage
    */
   protected $serviceHierarchy;
 
   /**
    * Renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * BimGdrpOverview constructor.
    *
-   * @param \Drupal\bim_gdpr\Services\HierarchyStorage $repository
+   * @param HierarchyStorage $repository
    *   The service repo.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
-  public function __construct(HierarchyStorage $repository, RendererInterface $renderer) {
+  public function __construct(HierarchyStorage $repository, RendererInterface $renderer, HierarchyStorage $serviceHierarchy) {
     $this->serviceHierarchy = $repository;
     $this->renderer = $renderer;
+    $this->serviceHierarchy = $serviceHierarchy;
   }
 
   /**
@@ -58,7 +59,7 @@ class BimGdrpOverview extends FormBase {
    */
   public static function create(ContainerInterface $container) {
     return new static(
-      $container->get(HierarchyStorage::SERVICE_NAME),
+      $this->serviceHierarchy,
       $container->get('renderer')
     );
   }
@@ -210,11 +211,11 @@ class BimGdrpOverview extends FormBase {
   /**
    * Add row to table.
    *
-   * @param \Drupal\bim_gdpr\Tools\DragTable $table
+   * @param DragTable $table
    *   The table.
    * @param array $itemList
    *   THe itemList.
-   * @param \Drupal\bim_gdpr\Hierarchy\HierarchyInterface $hierarchy
+   * @param HierarchyInterface $hierarchy
    *   THe hierarchy.
    * @param int $depth
    *   THe current depth.
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 35e000a..b22e32a 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -16,14 +16,14 @@ class SettingsForm extends FormBase {
   /**
    * Template Manager.
    *
-   * @var \Drupal\bim_gdpr\Services\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;
 
   /**
    * SettingsForm constructor.
    *
-   * @param \Drupal\bim_gdpr\Services\TemplateManager $templateManager
+   * @param TemplateManager $templateManager
    *   The template manager.
    */
   public function __construct(TemplateManager $templateManager) {
@@ -35,7 +35,7 @@ class SettingsForm extends FormBase {
    */
   public static function create(ContainerInterface $container) {
     return new static(
-      $container->get(TemplateManager::SERVICE_NAME)
+      $this->templateManager
     );
   }
 
@@ -69,7 +69,7 @@ class SettingsForm extends FormBase {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    */
   protected function initTemplateType(array &$form, FormStateInterface $formState) {
@@ -106,11 +106,11 @@ class SettingsForm extends FormBase {
   /**
    * Return the plugin subform.
    *
-   * @param \Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplateInterface $plugin
+   * @param BimGdprTemplateInterface $plugin
    *   The plugin.
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    *
    * @return array
@@ -138,11 +138,11 @@ class SettingsForm extends FormBase {
   /**
    * Return the plugin subform.
    *
-   * @param \Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplateInterface $plugin
+   * @param BimGdprTemplateInterface $plugin
    *   The plugin.
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    *
    * @return array
@@ -172,7 +172,7 @@ class SettingsForm extends FormBase {
    *
    * @param array $form
    *   THe form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   protected function getTemplateMassagedValues(array $form, FormStateInterface $form_state) {
diff --git a/src/Form/TranslateListForm.php b/src/Form/TranslateListForm.php
index 3a9613c..f5f5bbb 100644
--- a/src/Form/TranslateListForm.php
+++ b/src/Form/TranslateListForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\bim_gdpr\Form;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\bim_gdpr\Tools\DragTable;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -26,42 +28,42 @@ class TranslateListForm extends FormBase {
   /**
    * Renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Language Manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * BimGdrpOverview constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The route match.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(ConfigFactoryInterface $config, EntityTypeManagerInterface $entityTypeManager, LanguageManagerInterface $languageManager, RendererInterface $renderer, RouteMatchInterface $routeMatch, RequestStack $requestStack) {
     $this->configFactory = $config;
diff --git a/src/Hierarchy/Hierarchy.php b/src/Hierarchy/Hierarchy.php
index 2c17e6f..46630c9 100644
--- a/src/Hierarchy/Hierarchy.php
+++ b/src/Hierarchy/Hierarchy.php
@@ -23,14 +23,14 @@ class Hierarchy implements HierarchyInterface {
   /**
    * List of root Items.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $rootList = [];
 
   /**
    * List of all items.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $itemList = [];
 
@@ -44,7 +44,7 @@ class Hierarchy implements HierarchyInterface {
   /**
    * Hierarchy constructor.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $rawList
+   * @param EntityInterface[] $rawList
    *   The raw list.
    */
   public function __construct(array $rawList = []) {
@@ -100,7 +100,7 @@ class Hierarchy implements HierarchyInterface {
   /**
    * Return the raw id.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return string
@@ -176,7 +176,7 @@ class Hierarchy implements HierarchyInterface {
    * @param int $weight
    *   The weight.
    *
-   * @return \Drupal\bim_gdpr\BimGdprGroupInterface|null
+   * @return BimGdprGroupInterface|null
    *   The group.
    */
   protected function getGroupFromRawData(string $id, int &$weight) {
@@ -197,10 +197,10 @@ class Hierarchy implements HierarchyInterface {
    *   The id.
    * @param int $weight
    *   The weight.
-   * @param \Drupal\Core\Entity\EntityInterface|null $parent
+   * @param EntityInterface|null $parent
    *   The parent entity.
    *
-   * @return \Drupal\bim_gdpr\BimGdprServiceInterface|null
+   * @return BimGdprServiceInterface|null
    *   The service.
    */
   protected function getServiceFromRawData(string $id, int &$weight, EntityInterface $parent = NULL) {
@@ -291,7 +291,7 @@ class Hierarchy implements HierarchyInterface {
   /**
    * Return group data.
    *
-   * @param \Drupal\bim_gdpr\BimGdprGroupInterface $group
+   * @param BimGdprGroupInterface $group
    *   The group.
    *
    * @return array
@@ -309,7 +309,7 @@ class Hierarchy implements HierarchyInterface {
   /**
    * Return service data.
    *
-   * @param \Drupal\bim_gdpr\BimGdprServiceInterface $service
+   * @param BimGdprServiceInterface $service
    *   The service.
    *
    * @return array
diff --git a/src/Hierarchy/HierarchyInterface.php b/src/Hierarchy/HierarchyInterface.php
index aa6af6b..e268d00 100644
--- a/src/Hierarchy/HierarchyInterface.php
+++ b/src/Hierarchy/HierarchyInterface.php
@@ -46,7 +46,7 @@ interface HierarchyInterface {
   /**
    * Return the list of root elements.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The list of elements.
    */
   public function getRoot(): array;
@@ -54,10 +54,10 @@ interface HierarchyInterface {
   /**
    * Return ht echildren of an entity in the hierarchy.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $parent
+   * @param EntityInterface $parent
    *   The parent entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The list of children.
    */
   public function getChildrenOfItem(EntityInterface $parent): array;
@@ -65,7 +65,7 @@ interface HierarchyInterface {
   /**
    * REturn the weight of item.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $item
+   * @param EntityInterface $item
    *   THe item.
    *
    * @return int
@@ -76,10 +76,10 @@ interface HierarchyInterface {
   /**
    * REturn the parent of item.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $item
+   * @param EntityInterface $item
    *   THe item.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The weight.
    */
   public function getParentOfItem(EntityInterface $item);
diff --git a/src/PluginManager/BimGdprServiceType/BimGdprServiceTypeInterface.php b/src/PluginManager/BimGdprServiceType/BimGdprServiceTypeInterface.php
index 2c69863..a93e309 100644
--- a/src/PluginManager/BimGdprServiceType/BimGdprServiceTypeInterface.php
+++ b/src/PluginManager/BimGdprServiceType/BimGdprServiceTypeInterface.php
@@ -56,7 +56,7 @@ interface BimGdprServiceTypeInterface {
   /**
    * Create the Bim GDPR Service TYpe.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container.
    *
    * @return \Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypeInterface
@@ -67,11 +67,11 @@ interface BimGdprServiceTypeInterface {
   /**
    * Get the config form part.
    *
-   * @param \Drupal\bim_gdpr\BimGdprServiceInterface $service
+   * @param BimGdprServiceInterface $service
    *   The service.
    * @param array $parentForm
    *   The parent form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    * @param array $requiredStates
    *   The required state value to declare field is required.
@@ -88,7 +88,7 @@ interface BimGdprServiceTypeInterface {
    *   The form values.
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   THe formstate.
    *
    * @return array
diff --git a/src/PluginManager/BimGdprServiceType/BimGdprServiceTypePluginManager.php b/src/PluginManager/BimGdprServiceType/BimGdprServiceTypePluginManager.php
index 15415f0..f519611 100644
--- a/src/PluginManager/BimGdprServiceType/BimGdprServiceTypePluginManager.php
+++ b/src/PluginManager/BimGdprServiceType/BimGdprServiceTypePluginManager.php
@@ -32,7 +32,7 @@ class BimGdprServiceTypePluginManager extends DefaultPluginManager {
   /**
    * List of available plugin.
    *
-   * @var \Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypeInterface[]
+   * @var BimGdprServiceTypeInterface[]
    */
   protected $plugins;
 
@@ -67,7 +67,7 @@ class BimGdprServiceTypePluginManager extends DefaultPluginManager {
   /**
    * Return all available plugins.
    *
-   * @return \Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypeInterface[]
+   * @return BimGdprServiceTypeInterface[]
    *   The list of plugins.
    */
   public function getAllPlugins(): array {
@@ -94,11 +94,11 @@ class BimGdprServiceTypePluginManager extends DefaultPluginManager {
    * @param array $configuration
    *   The plugin configuration.
    *
-   * @return \Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypeInterface
+   * @return BimGdprServiceTypeInterface
    *   THe plugin.
    */
   protected static function createPluginInstance(string $plugin_id, array $configuration = []) {
-    /** @var \Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypeInterface $serviceType */
+    /** @var BimGdprServiceTypeInterface $serviceType */
     $serviceType = call_user_func($configuration['class'] . '::create', \Drupal::getContainer());
     $serviceType->setId($plugin_id);
     $serviceType->setLabel($configuration['label']);
@@ -111,7 +111,7 @@ class BimGdprServiceTypePluginManager extends DefaultPluginManager {
    * @param string $id
    *   The plugin id.
    *
-   * @return \Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypeInterface|null
+   * @return BimGdprServiceTypeInterface|null
    *   The plugin wrapper.
    */
   public function getPluginById($id) {
diff --git a/src/PluginManager/BimGdprTemplate/BimGdprTemplateInterface.php b/src/PluginManager/BimGdprTemplate/BimGdprTemplateInterface.php
index 7bbb53d..ac0df0c 100644
--- a/src/PluginManager/BimGdprTemplate/BimGdprTemplateInterface.php
+++ b/src/PluginManager/BimGdprTemplate/BimGdprTemplateInterface.php
@@ -89,7 +89,7 @@ interface BimGdprTemplateInterface {
   /**
    * Create the Bim Gdpr Template.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container.
    *
    * @return \Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplateInterface
@@ -100,11 +100,11 @@ interface BimGdprTemplateInterface {
   /**
    * Get the config form part.
    *
-   * @param \Drupal\bim_gdpr\Services\TemplateManager $templateManager
+   * @param TemplateManager $templateManager
    *   The service.
    * @param array $parentForm
    *   The parent form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    * @param array $requiredStates
    *   The required state value to declare field is required.
@@ -122,11 +122,11 @@ interface BimGdprTemplateInterface {
   /**
    * Get the translatino form part.
    *
-   * @param \Drupal\bim_gdpr\Services\TemplateManager $templateManager
+   * @param TemplateManager $templateManager
    *   The service.
    * @param array $parentForm
    *   The parent form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    * @param array $requiredStates
    *   The required state value to declare field is required.
@@ -148,7 +148,7 @@ interface BimGdprTemplateInterface {
    *   The form values.
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   THe formstate.
    *
    * @return array
diff --git a/src/PluginManager/BimGdprTemplate/BimGdprTemplatePluginManager.php b/src/PluginManager/BimGdprTemplate/BimGdprTemplatePluginManager.php
index c39904c..df5ebfb 100644
--- a/src/PluginManager/BimGdprTemplate/BimGdprTemplatePluginManager.php
+++ b/src/PluginManager/BimGdprTemplate/BimGdprTemplatePluginManager.php
@@ -32,7 +32,7 @@ class BimGdprTemplatePluginManager extends DefaultPluginManager {
   /**
    * List of available plugin.
    *
-   * @var \Drupal\bim_gdpr\PluginManager\BimGdprTemplate\AbstractBimGdprTemplate[]
+   * @var AbstractBimGdprTemplate[]
    */
   protected $plugins;
 
@@ -92,7 +92,7 @@ class BimGdprTemplatePluginManager extends DefaultPluginManager {
    * {@inheritdoc}
    */
   protected static function createPluginInstance($plugin_id, array $configuration = []) {
-    /** @var \Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplateInterface $plugin */
+    /** @var BimGdprTemplateInterface $plugin */
     $plugin = call_user_func($configuration['class'] . '::create', \Drupal::getContainer());
     $plugin->setId($plugin_id);
     $plugin->setLabel($configuration['label']);
@@ -108,7 +108,7 @@ class BimGdprTemplatePluginManager extends DefaultPluginManager {
    * @param string $id
    *   The plugin id.
    *
-   * @return \Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplateInterface|null
+   * @return BimGdprTemplateInterface|null
    *   The plugin.
    */
   public function getPluginById($id) {
diff --git a/src/PluginManager/BimGdprTemplate/BimGdprTemplateTrait.php b/src/PluginManager/BimGdprTemplate/BimGdprTemplateTrait.php
index 1319017..6f69e7c 100644
--- a/src/PluginManager/BimGdprTemplate/BimGdprTemplateTrait.php
+++ b/src/PluginManager/BimGdprTemplate/BimGdprTemplateTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bim_gdpr\PluginManager\BimGdprTemplate;
 
+use http\Client\Response;
 use Drupal\bim_gdpr\Services\TemplateManager;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Form\FormStateInterface;
@@ -32,7 +33,7 @@ trait BimGdprTemplateTrait {
   /**
    * Form state.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $formState;
 
@@ -48,11 +49,11 @@ trait BimGdprTemplateTrait {
    *
    * @param string $type
    *   The type.
-   * @param \Drupal\bim_gdpr\Services\TemplateManager $templateManager
+   * @param TemplateManager $templateManager
    *   The template manager.
    * @param array $form
    *   THe form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The formstate.
    *
    * @return $this
@@ -199,7 +200,7 @@ trait BimGdprTemplateTrait {
     $url = str_replace(static::LANGUAGE_TOKEN, $id, $url);
     if (!empty($url)) {
       try {
-        /** @var \http\Client\Response $body */
+        /** @var Response $body */
         $response = \Drupal::httpClient()->get($url);
         $content = Json::decode($response->getBody());
         $this->createInputFromJson($content);
diff --git a/src/Services/BimGdprInitializer.php b/src/Services/BimGdprInitializer.php
index b37e579..e89a7ad 100644
--- a/src/Services/BimGdprInitializer.php
+++ b/src/Services/BimGdprInitializer.php
@@ -23,21 +23,21 @@ class BimGdprInitializer {
   /**
    * Hierarchy storage.
    *
-   * @var \Drupal\bim_gdpr\Services\HierarchyStorage
+   * @var HierarchyStorage
    */
   protected $hierarchyStorage;
 
   /**
    * Template Manager.
    *
-   * @var \Drupal\bim_gdpr\Services\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -54,11 +54,11 @@ class BimGdprInitializer {
   /**
    * BimGdprInitializer constructor.
    *
-   * @param \Drupal\bim_gdpr\Services\HierarchyStorage $hierarchyStorage
+   * @param HierarchyStorage $hierarchyStorage
    *   The hierarchy storage.
-   * @param \Drupal\bim_gdpr\Services\TemplateManager $templateManager
+   * @param TemplateManager $templateManager
    *   THe template manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
    */
   public function __construct(HierarchyStorage $hierarchyStorage, TemplateManager $templateManager, LanguageManagerInterface $languageManager) {
diff --git a/src/Services/HierarchyStorage.php b/src/Services/HierarchyStorage.php
index a81298b..0458606 100644
--- a/src/Services/HierarchyStorage.php
+++ b/src/Services/HierarchyStorage.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\bim_gdpr\Services;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\bim_gdpr\BimGdprGroupInterface;
 use Drupal\bim_gdpr\BimGdprServiceInterface;
 use Drupal\bim_gdpr\Hierarchy\Hierarchy;
@@ -44,23 +46,23 @@ class HierarchyStorage {
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * THe config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * ServiceRepository constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   THe entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, ConfigFactoryInterface $configFactory) {
@@ -81,7 +83,7 @@ class HierarchyStorage {
   /**
    * Return the hierarchy of services.
    *
-   * @return \Drupal\bim_gdpr\Hierarchy\HierarchyInterface
+   * @return HierarchyInterface
    *   The hierararchy.
    */
   public function getHierarchy(): HierarchyInterface {
@@ -101,7 +103,7 @@ class HierarchyStorage {
   /**
    * Return the list of groups.
    *
-   * @return \Drupal\bim_gdpr\BimGdprGroupInterface[]
+   * @return BimGdprGroupInterface[]
    *   The list of groups.
    */
   public function getGroups(): array {
@@ -111,7 +113,7 @@ class HierarchyStorage {
   /**
    * Return the list of services.
    *
-   * @return \Drupal\bim_gdpr\BimGdprServiceInterface[]
+   * @return BimGdprServiceInterface[]
    *   The list of services.
    */
   public function getServices(): array {
@@ -134,7 +136,7 @@ class HierarchyStorage {
   /**
    * Register hierarchy configuration.
    *
-   * @param \Drupal\bim_gdpr\Hierarchy\HierarchyInterface $hierarchy
+   * @param HierarchyInterface $hierarchy
    *   The hierarchy.
    */
   public function saveHierarchy(HierarchyInterface $hierarchy) {
@@ -149,7 +151,7 @@ class HierarchyStorage {
   /**
    * Adds an entity in the hierarchy.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function add(EntityInterface $entity) {
@@ -164,7 +166,7 @@ class HierarchyStorage {
   /**
    * Delete entity from storage.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   The entities.
    */
   public function delete(array $entities) {
@@ -212,11 +214,11 @@ class HierarchyStorage {
    * @param string $rawId
    *   THe id.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getEntityFromRawId(string $rawId) {
     [$entityTypeId, $id] = explode(HierarchyInterface::PREFIX, $rawId);
@@ -226,7 +228,7 @@ class HierarchyStorage {
   /**
    * Add entity into raw Data.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param array $rawData
    *   THe raw data.
diff --git a/src/Services/TemplateManager.php b/src/Services/TemplateManager.php
index 1a5da21..9abb0b0 100644
--- a/src/Services/TemplateManager.php
+++ b/src/Services/TemplateManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\bim_gdpr\Services;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\bim_gdpr\PluginManager\BimGdprTemplate\AbstractBimGdprTemplate;
 use Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplatePluginManager;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -39,41 +41,41 @@ class TemplateManager {
   /**
    * Entity TYpe manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Config Factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
 
   /**
    * Template plugin manager.
    *
-   * @var \Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplatePluginManager
+   * @var BimGdprTemplatePluginManager
    */
   protected $pluginManager;
 
   /**
    * THe language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * TemplateManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   THe entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   THe config factory.
-   * @param \Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplatePluginManager $pluginManager
+   * @param BimGdprTemplatePluginManager $pluginManager
    *   The plugin manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The Language manager.
    */
   public function __construct(
@@ -104,7 +106,7 @@ class TemplateManager {
    * @param string|null $key
    *   THe key.
    *
-   * @return array|\Drupal\Core\Config\ImmutableConfig|mixed|null
+   * @return array|ImmutableConfig|mixed|null
    *   THe settings.
    */
   public function getLocaleSettings($key = NULL) {
@@ -147,7 +149,7 @@ class TemplateManager {
   /**
    * Return the list of available templates.
    *
-   * @return \Drupal\bim_gdpr\PluginManager\BimGdprTemplate\AbstractBimGdprTemplate[]|\Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplatePluginWrapper[]
+   * @return AbstractBimGdprTemplate[]|\Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplatePluginWrapper[]
    *   All plugin managers.
    */
   public function getAvailableTemplates() {
@@ -157,7 +159,7 @@ class TemplateManager {
   /**
    * Return the plugin manager.
    *
-   * @return \Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplatePluginManager
+   * @return BimGdprTemplatePluginManager
    *   The plugin manager.
    */
   public function getPluginManager(): BimGdprTemplatePluginManager {
diff --git a/src/Storage/TranslatableConfigEntityFormTrait.php b/src/Storage/TranslatableConfigEntityFormTrait.php
index 5ec1882..347e674 100644
--- a/src/Storage/TranslatableConfigEntityFormTrait.php
+++ b/src/Storage/TranslatableConfigEntityFormTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\bim_gdpr\Storage;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -23,7 +25,7 @@ trait TranslatableConfigEntityFormTrait {
    * {@inheritdoc}
    */
   public function buildEntity(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\bim_gdpr\Storage\TranslatableConfigEntityInterface $entity */
+    /** @var TranslatableConfigEntityInterface $entity */
     $entity = parent::buildEntity($form, $form_state);
 
     $this->initEntity();
@@ -57,8 +59,8 @@ trait TranslatableConfigEntityFormTrait {
   /**
    * Init the entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function initEntity() {
     $currentLanguage = \Drupal::languageManager()
diff --git a/src/Storage/TranslatableConfigEntityStorage.php b/src/Storage/TranslatableConfigEntityStorage.php
index 525c987..5d30bc5 100644
--- a/src/Storage/TranslatableConfigEntityStorage.php
+++ b/src/Storage/TranslatableConfigEntityStorage.php
@@ -57,7 +57,7 @@ class TranslatableConfigEntityStorage extends ConfigEntityStorage {
   /**
    * Return the prefix.
    *
-   * @param \Drupal\bim_gdpr\Storage\TranslatableConfigEntityInterface $entity
+   * @param TranslatableConfigEntityInterface $entity
    *   The entity.
    *
    * @return string
@@ -117,7 +117,7 @@ class TranslatableConfigEntityStorage extends ConfigEntityStorage {
    *   Return null if not exisiting in this language, else return default
    *   langcode.
    *
-   * @return \Drupal\bim_gdpr\Storage\TranslatableConfigEntityInterface|null
+   * @return TranslatableConfigEntityInterface|null
    *   The entity.
    */
   public function loadLanguaged($id, $languageId, $nullIfNotTranslated = FALSE) {
@@ -139,7 +139,7 @@ class TranslatableConfigEntityStorage extends ConfigEntityStorage {
    * @param string $languageId
    *   The language id.
    *
-   * @return \Drupal\bim_gdpr\Storage\TranslatableConfigEntityInterface|null
+   * @return TranslatableConfigEntityInterface|null
    *   The entity.
    */
   public function loadMultipleLanguaged(array $ids, $languageId) {
diff --git a/src/Storage/TranslatableConfigEntityTrait.php b/src/Storage/TranslatableConfigEntityTrait.php
index 497319f..37e3ffe 100644
--- a/src/Storage/TranslatableConfigEntityTrait.php
+++ b/src/Storage/TranslatableConfigEntityTrait.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\bim_gdpr\Storage;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 /**
  * Trait translatable config entity trait.
  *
@@ -19,18 +22,18 @@ trait TranslatableConfigEntityTrait {
   /**
    * Storage.
    *
-   * @var \Drupal\bim_gdpr\Storage\TranslatableConfigEntityStorage
+   * @var TranslatableConfigEntityStorage
    */
   protected $storage;
 
   /**
    * Return the storage.
    *
-   * @return \Drupal\bim_gdpr\Storage\TranslatableConfigEntityStorage|\Drupal\Core\Entity\EntityStorageInterface
+   * @return TranslatableConfigEntityStorage|EntityStorageInterface
    *   The storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getStorage() {
     if (is_null($this->storage)) {
@@ -64,7 +67,7 @@ trait TranslatableConfigEntityTrait {
    * @param string $languageId
    *   The language id.
    *
-   * @return \Drupal\bim_gdpr\Storage\TranslatableConfigEntityInterface
+   * @return TranslatableConfigEntityInterface
    *   The translation.
    */
   public function getTranslation(string $languageId) {
@@ -118,7 +121,7 @@ trait TranslatableConfigEntityTrait {
    * @param bool $nullIfNotTranslated
    *   Return null if not exisiting in this language, else return default lang.
    *
-   * @return \Drupal\bim_gdpr\Storage\TranslatableConfigEntityInterface|null
+   * @return TranslatableConfigEntityInterface|null
    *   The entity.
    */
   public static function loadLanguaged($id, $languageId, $nullIfNotTranslated = FALSE) {
@@ -138,7 +141,7 @@ trait TranslatableConfigEntityTrait {
    * @param bool $nullIfNotTranslated
    *   Return null if not exisiting in this language, else return default lang.
    *
-   * @return \Drupal\bim_gdpr\Storage\TranslatableConfigEntityInterface[]
+   * @return TranslatableConfigEntityInterface[]
    *   The entity.
    */
   public static function loadMultipleLanguaged(array $ids = NULL, $languageId, $nullIfNotTranslated = FALSE) {
diff --git a/src/Tools/DragTable.php b/src/Tools/DragTable.php
index 8467c80..66a2eeb 100644
--- a/src/Tools/DragTable.php
+++ b/src/Tools/DragTable.php
@@ -47,14 +47,14 @@ class DragTable {
   /**
    * THe renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * DragTable constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   THe renderer.
    * @param bool $draggable
    *   Is table draggable.
