modules/contrib/liveblog/liveblog.install
modules/contrib/liveblog/liveblog.module
modules/contrib/liveblog/modules/liveblog_pusher/liveblog_pusher.module
modules/contrib/liveblog/modules/liveblog_pusher/src/Plugin/LiveblogNotificationChannel/PusherNotificationChannel.php
modules/contrib/liveblog/src/Annotation/LiveblogNotificationChannel.php
modules/contrib/liveblog/src/Controller/LiveblogController.php
modules/contrib/liveblog/src/Controller/LiveblogListController.php
modules/contrib/liveblog/src/Entity/LiveblogPost.php
modules/contrib/liveblog/src/Form/LiveblogPostDeleteForm.php
modules/contrib/liveblog/src/Form/LiveblogPostForm.php
modules/contrib/liveblog/src/Form/LiveblogPostSettingsForm.php
modules/contrib/liveblog/src/Form/LiveblogSettingsForm.php
modules/contrib/liveblog/src/LiveblogAjaxResponseAttachmentsProcessor.php
modules/contrib/liveblog/src/LiveblogAssetResolver.php
modules/contrib/liveblog/src/LiveblogPostAccessControlHandler.php
modules/contrib/liveblog/src/LiveblogPostInterface.php
modules/contrib/liveblog/src/LiveblogPostStorageSchema.php
modules/contrib/liveblog/src/LiveblogRenderer.php
modules/contrib/liveblog/src/LiveblogRendererInterface.php
modules/contrib/liveblog/src/NotificationChannel/NotificationChannelInterface.php
modules/contrib/liveblog/src/NotificationChannel/NotificationChannelManager.php
modules/contrib/liveblog/src/NotificationChannel/NotificationChannelPluginBase.php
modules/contrib/liveblog/src/Plugin/Field/FieldWidget/TaxonomyTreeWidget.php
modules/contrib/liveblog/src/Utility/Payload.php
modules/contrib/liveblog/tests/src/Functional/LiveBlogEditFormTest.php
modules/contrib/liveblog/tests/src/Functional/LiveBlogListTest.php
modules/contrib/liveblog/tests/src/Functional/LiveBlogReinstallTest.php
modules/contrib/liveblog/tests/src/Functional/LiveBlogUpdate8002Test.php
modules/contrib/liveblog/tests/src/Kernel/DefaultConfigTest.php

22 files with changes
=====================

1) modules/contrib/liveblog/tests/src/Kernel/DefaultConfigTest.php:12

    ---------- begin diff ----------
@@ @@

   /**
    * Tests if installed config is equal to the exported config.
+   * @doesNotPerformAssertions
    */
   public function testModuleConfig($module = NULL) {
     parent::testModuleConfig('liveblog');
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/liveblog/tests/src/Functional/LiveBlogReinstallTest.php:40

    ---------- begin diff ----------
@@ @@
     // Uninstall and re-install via the UI like a real user.
     $edit = [];
     $edit['uninstall[liveblog]'] = TRUE;
-    $this->drupalPostForm('admin/modules/uninstall', $edit, t('Uninstall'));
-    $this->drupalPostForm(NULL, [], t('Uninstall'));
+    $this->drupalGet('admin/modules/uninstall');
+    $this->submitForm($edit, t('Uninstall'));
+    $this->submitForm([], t('Uninstall'));
     $this->rebuildContainer();
+    $this->drupalGet('admin/modules');

-    $this->drupalPostForm('admin/modules', ['modules[liveblog][enable]' => "1"], t('Install'));
+    $this->submitForm(['modules[liveblog][enable]' => "1"], t('Install'));
     $this->rebuildContainer();

     $count = \Drupal::database()->select('watchdog', 'w')
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/liveblog/tests/src/Functional/LiveBlogListTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\liveblog\Functional;

+use Drupal\node\NodeInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\liveblog\Entity\LiveblogPost;
 use Drupal\node\Entity\Node;
@@ @@
   /**
    * The liveblog node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->node = Node::create([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/liveblog/tests/src/Functional/LiveBlogEditFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\liveblog\Functional;

+use Drupal\node\NodeInterface;
+use Drupal\liveblog\LiveblogPostInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\liveblog\Entity\LiveblogPost;
 use Drupal\node\Entity\Node;
@@ @@
   /**
    * The liveblog node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * A liveblog post.
    *
-   * @var \Drupal\liveblog\LiveblogPostInterface
+   * @var LiveblogPostInterface
    */
   protected $post;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->node = Node::create([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/liveblog/src/Utility/Payload.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\liveblog\Utility;

+use Drupal\liveblog\LiveblogRenderer;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\liveblog\Entity\LiveblogPost;

 /**
@@ @@
   /**
    * The liveblog post entity.
    *
-   * @var \Drupal\liveblog\Entity\LiveblogPost $entity
+   * @var LiveblogPost $entity
    */
   protected $entity;

@@ @@
   /**
    * Constructors an instance.
    *
-   * @param \Drupal\liveblog\Entity\LiveblogPost $entity
+   * @param LiveblogPost $entity
    *   The liveblog post entity.
    */
   protected function __construct(LiveblogPost $entity) {
@@ @@
   /**
    * Constructors an instance.
    *
-   * @param \Drupal\liveblog\Entity\LiveblogPost $entity
+   * @param LiveblogPost $entity
    *   The liveblog post entity.
    *
    * @return self
@@ @@
   /**
    * Returns the render API renderer.
    *
-   * @return \Drupal\liveblog\LiveblogRenderer
+   * @return LiveblogRenderer
    */
   protected function getRenderer() {
     return \Drupal::service('liveblog.renderer');
@@ @@
   /**
    * Gets the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    */
   protected function entityTypeManager() {
     return \Drupal::entityTypeManager();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/liveblog/src/Plugin/Field/FieldWidget/TaxonomyTreeWidget.php:138

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function validateElement(array $element, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/liveblog/src/NotificationChannel/NotificationChannelPluginBase.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/liveblog/src/NotificationChannel/NotificationChannelManager.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The instance of the current active plugin.
    *
-   * @var \Drupal\liveblog\NotificationChannel\NotificationChannelInterface|null
+   * @var NotificationChannelInterface|null
    */
   protected $plugin;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Creates an instance of the current active plugin.
    *
-   * @return \Drupal\liveblog\NotificationChannel\NotificationChannelInterface|null
+   * @return NotificationChannelInterface|null
    *   The instance of the current active plugin, null if not set.
    */
   public function createActiveInstance() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/liveblog/src/NotificationChannel/NotificationChannelInterface.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Triggers event notification connected to the liveblog post.
    *
-   * @param \Drupal\liveblog\Entity\LiveblogPost $liveblog_post
+   * @param LiveblogPost $liveblog_post
    *   The target liveblog post.
    * @param string $event
    *   The event name.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/liveblog/src/LiveblogRenderer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\liveblog;

+use Drupal\Core\Ajax\AjaxResponseAttachmentsProcessor;
+use Drupal\Core\Ajax\CommandInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\PrependCommand;
 use Drupal\Core\Render\RendererInterface;
@@ @@
   /**
    * The ajax attachment processor.
    *
-   * @var \Drupal\Core\Ajax\AjaxResponseAttachmentsProcessor
+   * @var AjaxResponseAttachmentsProcessor
    */
   protected $ajaxResponseAttachmentsProcessor;

@@ @@
   /**
    * The renderer to use.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    * @param array $attachments
    *   The attachments array, i.e. #attached in a render array.
    *
-   * @return \Drupal\Core\Ajax\CommandInterface[]
+   * @return CommandInterface[]
    *   The array of commands.
    */
   protected function getCommandsForAttachments(array $attachments) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/liveblog/src/LiveblogPostInterface.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the liveblog post author(owner).
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The liveblog post author(owner)
    */
   public function getOwner();
@@ @@
   /**
    * Returns the related liveblog node.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   The related liveblog node.
    */
   public function getTitle();
@@ @@
   /**
    * Returns the related liveblog node.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   The related liveblog node.
    */
   public function getLiveblog();
@@ @@
   /**
    * Sets the related liveblog node.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The related liveblog node.
    *
    * @return $this
@@ @@
   /**
    * Returns the related liveblog author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The related liveblog author.
    */
   public function getAuthor();
@@ @@
   /**
    * Sets the related liveblog author.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The related liveblog author.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/liveblog/src/LiveblogAssetResolver.php:22

    ---------- begin diff ----------
@@ @@
    * $resolver->getLibrariesToLoad($assets) === ['core/a', 'core/b', 'core/d']
    * @endcode
    *
-   * @param \Drupal\Core\Asset\AttachedAssetsInterface $assets
+   * @param AttachedAssetsInterface $assets
    *   The assets attached to the current response.
    *
    * @return string[]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/liveblog/src/LiveblogAjaxResponseAttachmentsProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\liveblog;

+use Drupal\Core\Asset\LibraryDiscoveryInterface;
 use Drupal\Core\Ajax\AddCssCommand;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\AjaxResponseAttachmentsProcessor;
@@ @@
   /**
    * The asset resolver service.
    *
-   * @var \Drupal\liveblog\LiveblogAssetResolver
+   * @var LiveblogAssetResolver
    */
   protected $assetResolver;

@@ @@
   /**
    * Constructs a AjaxResponseAttachmentsProcessor object.
    *
-   * @param \Drupal\liveblog\LiveblogAssetResolver $asset_resolver
+   * @param LiveblogAssetResolver $asset_resolver
    *   An asset resolver.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   A config factory for retrieving required config objects.
-   * @param \Drupal\Core\Asset\AssetCollectionRendererInterface $css_collection_renderer
+   * @param AssetCollectionRendererInterface $css_collection_renderer
    *   The CSS asset collection renderer.
-   * @param \Drupal\Core\Asset\AssetCollectionRendererInterface $js_collection_renderer
+   * @param AssetCollectionRendererInterface $js_collection_renderer
    *   The JS asset collection renderer.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(LiveblogAssetResolver $asset_resolver, ConfigFactoryInterface $config_factory, AssetCollectionRendererInterface $css_collection_renderer, AssetCollectionRendererInterface $js_collection_renderer, RequestStack $request_stack, RendererInterface $renderer, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Gets library discovery service.
    *
-   * @return \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @return LibraryDiscoveryInterface
    *   The library discovery service.
    */
   function getLibraryDiscovery() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/liveblog/src/Form/LiveblogSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\liveblog\Form;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ @@
   /**
    * The notification channel manager.
    *
-   * @var \Drupal\liveblog\NotificationChannel\NotificationChannelManager
+   * @var NotificationChannelManager
    */
   protected $notificationChannelManager;

@@ @@
   /**
    * Constructs an EntityForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\liveblog\NotificationChannel\NotificationChannelManager $notification_channel_manager
+   * @param NotificationChannelManager $notification_channel_manager
    *   The notification channel service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, NotificationChannelManager $notification_channel_manager) {
@@ @@
   /**
    * Gets notification channel config.
    *
-   * @return \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @return Config|ImmutableConfig
    *   Notification channel config.
    */
   protected function getConfig() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/liveblog/src/Form/LiveblogPostSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\liveblog\Form;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
   /**
    * Gets notification channel config.
    *
-   * @return \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @return Config|ImmutableConfig
    *   Notification channel config.
    */
   protected function getConfig() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/liveblog/src/Form/LiveblogPostForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\liveblog\Form;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\liveblog\NotificationChannel\NotificationChannelPluginBase;
+use Drupal\liveblog\NotificationChannel\NotificationChannelManager;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ @@
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);
-    /** @var \Drupal\liveblog\NotificationChannel\NotificationChannelPluginBase $plugin */
+    /** @var NotificationChannelPluginBase $plugin */
     if ($plugin = $this->getNotificationChannelManager()->createActiveInstance()) {
       $plugin->validateLiveblogPostForm($form, $form_state, $this->buildEntity($form, $form_state));
     }
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   protected function clearFormInput(array $form, FormStateInterface $form_state) {
@@ @@
   /**
    * Gets the notification channel plugin manager.
    *
-   * @return \Drupal\liveblog\NotificationChannel\NotificationChannelManager
+   * @return NotificationChannelManager
    *   Notification channel plugin manager.
    */
   protected function getNotificationChannelManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/liveblog/src/Entity/LiveblogPost.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\liveblog\Entity;

+use Drupal\Core\Render\Renderer;
+use Drupal\liveblog\NotificationChannel\NotificationChannelManager;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\ContentEntityBase;
@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * Gets the notification channel plugin manager.
    *
-   * @return \Drupal\liveblog\NotificationChannel\NotificationChannelManager
+   * @return NotificationChannelManager
    *   Notification channel plugin manager.
    */
   protected function getNotificationChannelManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/liveblog/src/Controller/LiveblogListController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\liveblog\Controller;

+use Drupal\liveblog\LiveblogRendererInterface;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\liveblog\LiveblogRenderer;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\liveblog\Utility\Payload;
 use Drupal\node\Entity\Node;
@@ @@
    *
    * @todo Add render caching.
    *
-   * @param \Drupal\node\Entity\Node $node
+   * @param Node $node
    *   The liveblog node.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response containing the liveblog post form.
    */
   public function getList(Node $node) {
@@ @@
       $content[] = $result;
     }

-    /** @var \Drupal\liveblog\LiveblogRendererInterface $renderer */
+    /** @var LiveblogRendererInterface $renderer */
     $renderer = \Drupal::service('liveblog.renderer');
     // Render all the posts together to get the libraries and commands.
     $result = $renderer->render($render_array);
@@ @@
   /**
    * Returns current request.
    *
-   * @return \Symfony\Component\HttpFoundation\Request
+   * @return Request
    *   The currently active request object.
    */
   protected function getRequest() {
@@ @@
   /**
    * GEts the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   protected function getEntityTypeManager() {
@@ @@
   /**
    * Returns the render API renderer.
    *
-   * @return \Drupal\liveblog\LiveblogRenderer
+   * @return LiveblogRenderer
    *   The render API renderer.
    */
   protected function getRenderer() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/liveblog/src/Controller/LiveblogController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\liveblog\Controller;

+use Drupal\liveblog\LiveblogRendererInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\liveblog\Entity\LiveblogPost;
 use Symfony\Component\HttpFoundation\JsonResponse;
@@ @@
   /**
    * Returns a liveblog post form wrapped in a json response.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response containing the liveblog post form.
    */
   public function getFormAsJson(LiveblogPost $liveblog_post) {
@@ @@
       ->setEntity($liveblog_post);
     $content = $this->formBuilder()->getForm($form_object);

-    /** @var \Drupal\liveblog\LiveblogRendererInterface $renderer */
+    /** @var LiveblogRendererInterface $renderer */
     $renderer = \Drupal::service('liveblog.renderer');
     return new JsonResponse($renderer->render($content));
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/liveblog/src/Annotation/LiveblogNotificationChannel.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\liveblog\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $title;

@@ @@
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


21) modules/contrib/liveblog/modules/liveblog_pusher/src/Plugin/LiveblogNotificationChannel/PusherNotificationChannel.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\liveblog_pusher\Plugin\LiveblogNotificationChannel;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Pusher\Pusher;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The pusher client.
    *
-   * @var \Pusher\Pusher
+   * @var Pusher
    */
   protected $client;

@@ @@
   /**
    * The logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, LoggerChannelFactoryInterface $logger_factory) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Pusher\Pusher
+   * @return Pusher
    *   The notification channel client.
    */
   public function getClient() {
@@ @@
       if (!empty($cluster)) {
         $options['cluster'] = $cluster;
       }
-      /** @var \Pusher\Pusher client */
+      /** @var Pusher client */
       $this->client = new Pusher(
         $this->getConfigurationValue('key'),
         $this->getConfigurationValue('secret'),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/liveblog/liveblog.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Asset\AttachedAssetsInterface;
+use Drupal\Core\Asset\LibraryDependencyResolver;
 /**
  * @file
  * The module file.
@@ @@
 /**
  * Gets highlight options from the liveblog.
  *
- * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
+ * @param FieldStorageDefinitionInterface $definition
  *   The field storage definition.
- * @param \Drupal\Core\Entity\FieldableEntityInterface|NULL $entity
+ * @param FieldableEntityInterface|NULL $entity
  *   The entity.
  * @param null $cacheable
  *   If $cacheable is FALSE, then the allowed values are not statically
@@ @@
  * @see \Drupal\liveblog\LiveblogRenderer::render()
  * @see \Drupal\liveblog\LiveblogAjaxResponseAttachmentsProcessor::groupAssetsByLibraries()
  */
-function liveblog_js_settings_build(&$settings, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
+function liveblog_js_settings_build(&$settings, AttachedAssetsInterface $assets) {
   // Collects all the loaded libraries with dependencies in js settings.
   // We need this setting to detect new libraries delivered to frontend.
   // We should to send libraries settings to the liveblog library if:
@@ @@
   // - liveblog library is loaded, as all the frontend logic is happening there.
   // - core/drupal.ajax already has been loaded, as we need to handle AJAX
   //   commands.
-  /** @var \Drupal\Core\Asset\LibraryDependencyResolver $library_dependency_resolver */
+  /** @var LibraryDependencyResolver $library_dependency_resolver */
   $library_dependency_resolver = \Drupal::service('library.dependency_resolver');
   $libraries = $library_dependency_resolver->getLibrariesWithDependencies($assets->getLibraries());
   if (!in_array('liveblog/stream', $libraries) || !in_array('core/drupal.ajax', $libraries)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 22 files have been changed by Rector                                      

