diff --git a/modules/social_geolocation_maps/social_geolocation_maps.install b/modules/social_geolocation_maps/social_geolocation_maps.install
index 1efbef0..79635c0 100755
--- a/modules/social_geolocation_maps/social_geolocation_maps.install
+++ b/modules/social_geolocation_maps/social_geolocation_maps.install
@@ -25,7 +25,7 @@ function social_geolocation_maps_update_8001(&$sandbox): void {
       'location' => InstallStorage::CONFIG_OPTIONAL_DIRECTORY,
     ],
   ];
-  $base_path = drupal_get_path('module', 'social_geolocation_maps');
+  $base_path = \Drupal::service('extension.list.module')->getPath('social_geolocation_maps');
 
   foreach ($configs as $type => $config) {
     $storage = \Drupal::entityTypeManager()->getStorage($type);
@@ -50,7 +50,7 @@ function social_geolocation_maps_update_8001(&$sandbox): void {
  * From Social Geolocation - Leaflet - CommonMap with marker icons view.
  */
 function social_geolocation_maps_update_8002(&$sandbox): void {
-  $config_file = drupal_get_path('module', 'social_geolocation_maps') . '/config/static/views.view.social_geolocation_leaflet_commonmap_with_marker_icons_8002.yml';
+  $config_file = \Drupal::service('extension.list.module')->getPath('social_geolocation_maps') . '/config/static/views.view.social_geolocation_leaflet_commonmap_with_marker_icons_8002.yml';
 
   if (is_file($config_file)) {
     $views_configuration = Yaml::parse(file_get_contents($config_file));
diff --git a/modules/social_geolocation_maps/src/SocialGeolocationLandingPageConfigOverride.php b/modules/social_geolocation_maps/src/SocialGeolocationLandingPageConfigOverride.php
index 91d9b0c..bb2f919 100644
--- a/modules/social_geolocation_maps/src/SocialGeolocationLandingPageConfigOverride.php
+++ b/modules/social_geolocation_maps/src/SocialGeolocationLandingPageConfigOverride.php
@@ -16,23 +16,23 @@ class SocialGeolocationLandingPageConfigOverride implements ConfigFactoryOverrid
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected ModuleHandlerInterface $moduleHandler;
 
   /**
    * Constructs the configuration override.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Drupal configuration factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler) {
diff --git a/modules/social_geolocation_search/src/SocialGeolocationSearchApiConfigOverride.php b/modules/social_geolocation_search/src/SocialGeolocationSearchApiConfigOverride.php
index 5a63242..d44d4b9 100644
--- a/modules/social_geolocation_search/src/SocialGeolocationSearchApiConfigOverride.php
+++ b/modules/social_geolocation_search/src/SocialGeolocationSearchApiConfigOverride.php
@@ -16,7 +16,7 @@ class SocialGeolocationSearchApiConfigOverride implements ConfigFactoryOverrideI
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;
 
@@ -32,9 +32,9 @@ class SocialGeolocationSearchApiConfigOverride implements ConfigFactoryOverrideI
   /**
    * Constructs the configuration override.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Drupal configuration factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The Drupal module handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler) {
diff --git a/social_geolocation.install b/social_geolocation.install
index 42cdec3..eb53b7e 100644
--- a/social_geolocation.install
+++ b/social_geolocation.install
@@ -59,7 +59,7 @@ function social_geolocation_update_8005(&$sandbox): void {
 function _social_geolocation_set_permissions(): void {
   $roles = Role::loadMultiple();
 
-  /** @var \Drupal\user\Entity\Role $role */
+  /** @var Role $role */
   foreach ($roles as $role) {
     if ($role->id() === 'administrator') {
       continue;
diff --git a/social_geolocation.module b/social_geolocation.module
index ee80fba..a952d18 100755
--- a/social_geolocation.module
+++ b/social_geolocation.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\geolocation\GeocoderInterface;
+use CommerceGuys\Addressing\Formatter\FormatterInterface;
 /**
  * @file
  * Contains hook implementations for the Social Geolocation module.
@@ -196,7 +198,7 @@ function social_geolocation_profile_presave(ProfileInterface $profile): void {
 /**
  * Set value to geolocation field based on address input.
  *
- * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+ * @param FieldableEntityInterface $entity
  *   The entity that is being saved.
  * @param string $type
  *   The type of the entity being saved.
@@ -244,7 +246,7 @@ function _social_geolocation_entity_presave(FieldableEntityInterface $entity, st
   $new_coordinates = NULL;
 
   // Format address as a string consumable by the geocoding API.
-  /** @var \Drupal\address\AddressInterface $address */
+  /** @var AddressInterface $address */
   $address = $entity->get($field_address)->first();
   $address = _social_geolocation_address_to_string($address);
 
@@ -293,7 +295,7 @@ function _social_geolocation_entity_presave(FieldableEntityInterface $entity, st
 /**
  * Retrieves the configured Geocoder plugin.
  *
- * @return \Drupal\geolocation\GeocoderInterface|false
+ * @return GeocoderInterface|false
  *   Returns the configured geocoder or false if none is configured or the
  *   configured geocoder could not be loaded.
  */
@@ -358,14 +360,14 @@ function _social_geolocation_geocode_address(string $address): array {
  * a proper lef-to-right string that can be consumed by at least Nominatim and
  * the Google Geocoding API.
  *
- * @param \Drupal\address\AddressInterface $address
+ * @param AddressInterface $address
  *   The address field.
  *
  * @return string
  *   The string that can be sent to a geocoding API.
  */
 function _social_geolocation_address_to_string(AddressInterface $address) : string {
-  /** @var \CommerceGuys\Addressing\Formatter\FormatterInterface $formatter */
+  /** @var FormatterInterface $formatter */
   $formatter = \Drupal::service('social_geolocation.default_address_formatter');
 
   // Fix any edge cases in address formatting for the API we're using.
@@ -389,7 +391,7 @@ function _social_geolocation_address_to_string(AddressInterface $address) : stri
 /**
  * Fixes edge cases in address values before they're formatted.
  *
- * @param \Drupal\address\AddressInterface $address
+ * @param AddressInterface $address
  *   The address field.
  *
  * @return array
diff --git a/src/Form/SocialGeolocationSettings.php b/src/Form/SocialGeolocationSettings.php
index 13ef5df..706fab5 100644
--- a/src/Form/SocialGeolocationSettings.php
+++ b/src/Form/SocialGeolocationSettings.php
@@ -22,7 +22,7 @@ class SocialGeolocationSettings extends ConfigFormBase {
   /**
    * The Drupal module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected ModuleHandlerInterface $moduleHandler;
 
