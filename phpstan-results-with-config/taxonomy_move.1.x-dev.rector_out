modules/contrib/taxonomy_move/src/Form/TaxonomyDeleteForm.php
modules/contrib/taxonomy_move/src/Form/TaxonomyMoveForm.php
modules/contrib/taxonomy_move/taxonomy_move.module

3 files with changes
====================

1) modules/contrib/taxonomy_move/taxonomy_move.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\taxonomy\TermInterface;
 /**
  * @file
  * Modify or alter the terms between the vocabularies.
@@ @@
   foreach ($form['terms'] as $key => $value) {
     if (is_array($value) && isset($value['#term'])) {

-      /** @var \Drupal\taxonomy\TermInterface $term */
+      /** @var TermInterface $term */
       $term = $value['#term'];
       if ('unmanaged' === $term->bundle()) {
         $form['delete_button'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/taxonomy_move/src/Form/TaxonomyMoveForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\taxonomy_move\Form;

+use Drupal\node\NodeInterface;
+use Drupal\taxonomy\TermStorageInterface;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The pathauto generator.
    *
-   * @var \Drupal\pathauto\PathautoGenerator
+   * @var PathautoGenerator
    */
   protected $pathAutoGenerator;

@@ @@
   /**
    * Constructs a new TaxonomyMoveForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\pathauto\PathautoGenerator $path_auto_generator
+   * @param PathautoGenerator $path_auto_generator
    *   The path auto generator.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager, RequestStack $requestStack, PathautoGenerator $path_auto_generator) {
@@ @@
     $sourceVocabulary = $form_state->getValue('source_vocabulary');

     foreach ($termIds as $termId) {
-      /** @var \Drupal\taxonomy\TermInterface $term */
+      /** @var TermInterface $term */
       $term = $this->entityTypeManager->getStorage('taxonomy_term')->load($termId);

       // Do not move term if it has children.
@@ @@
           ]
         );

-        /** @var \Drupal\node\NodeInterface $node */
+        /** @var NodeInterface $node */
         foreach ($nodes as $node) {
           $tags = $node->get('field_tags')->getValue();
           $key = array_search($term->id(), array_column($tags, 'target_id'));
@@ @@

       // Update published state.
       if ('unmanaged' === $targetVocabulary) {
-        /** @var \Drupal\taxonomy\TermInterface $term */
+        /** @var TermInterface $term */
         $term = $this->entityTypeManager->getStorage('taxonomy_term')->load($termId);

         // Unpublish.
@@ @@
         $term->save();
       }
       elseif ('unmanaged' === $sourceVocabulary) {
-        /** @var \Drupal\taxonomy\TermInterface $term */
+        /** @var TermInterface $term */
         $term = $this->entityTypeManager->getStorage('taxonomy_term')->load($termId);

         // Publish.
@@ @@
       return [];
     }

-    /** @var \Drupal\taxonomy\TermStorageInterface $storage */
+    /** @var TermStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('taxonomy_term');
     $tree = $storage
       ->loadTree($vocabulary);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/taxonomy_move/src/Form/TaxonomyDeleteForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The term storage.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $termStorage;

@@ @@
   /**
    * The pathauto generator.
    *
-   * @var \Drupal\pathauto\PathautoGenerator
+   * @var PathautoGenerator
    */
   protected $pathAutoGenerator;

@@ @@
   /**
    * Constructs a new TaxonomyDeleteForm object.
    *
-   * @param \Drupal\taxonomy\TermStorageInterface $term_storage
+   * @param TermStorageInterface $term_storage
    *   The term storage.
-   * @param \Drupal\pathauto\PathautoGenerator $path_auto_generator
+   * @param PathautoGenerator $path_auto_generator
    *   The path auto generator.
    */
   public function __construct(TermStorageInterface $term_storage, PathautoGenerator $path_auto_generator) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

