modules/contrib/tmgmt_thebigword/src/Controller/RemoteCallbackController.php
modules/contrib/tmgmt_thebigword/src/Form/ExternalReviewRedirectForm.php
modules/contrib/tmgmt_thebigword/src/Plugin/tmgmt/Translator/ThebigwordTranslator.php
modules/contrib/tmgmt_thebigword/src/ThebigwordTranslatorUi.php
modules/contrib/tmgmt_thebigword/tmgmt_thebigword.install
modules/contrib/tmgmt_thebigword/tmgmt_thebigword.module

6 files with changes
====================

1) modules/contrib/tmgmt_thebigword/tmgmt_thebigword.module:22

    ---------- begin diff ----------
@@ @@
  * Implements hook_form_FORM_ID_alter().
  */
 function tmgmt_thebigword_form_tmgmt_job_edit_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\tmgmt\JobInterface $job */
+  /** @var JobInterface $job */
   $job = $form_state->getFormObject()->getEntity();
   if ($job->getTranslatorPlugin()->getPluginId() == 'thebigword' && !$job->isContinuous()) {
     $remotes = RemoteMapping::loadByLocalData($job->id());
     if (count($remotes) == 1) {
-      /** @var \Drupal\tmgmt\Entity\RemoteMapping $remote */
+      /** @var RemoteMapping $remote */
       $remote = reset($remotes);
       $project_id = $remote->getRemoteIdentifier2();
       $form['info'][] = [
@@ @@
  * Implements hook_form_FORM_ID_alter().
  */
 function tmgmt_thebigword_form_tmgmt_job_item_edit_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\tmgmt\JobItemInterface $job_item */
+  /** @var JobItemInterface $job_item */
   $job_item = $form_state->getFormObject()->getEntity();
   if ($job_item->getTranslatorPlugin()->getPluginId() == 'thebigword') {
     $remotes = RemoteMapping::loadByLocalData($job_item->getJobId(), $job_item->id());
     if (!empty($remotes)) {
-      /** @var \Drupal\tmgmt\Entity\RemoteMapping $remote */
+      /** @var RemoteMapping $remote */
       $remote = reset($remotes);
       $project_id = $remote->getRemoteIdentifier2();
       $form['info'][] = [
@@ @@
   $definitions[ThebigwordTranslator::JOB_ITEM_STATE_PRIMARY_REVIEW] = [
     'label' => t('Primary review'),
     'type' => 'translator_state',
-    'icon' => drupal_get_path('module', 'tmgmt_thebigword') . '/icons/primary.svg',
+    'icon' => \Drupal::service('extension.list.module')->getPath('tmgmt_thebigword') . '/icons/primary.svg',
     'weight' => 3,
     'show_job_filter' => TRUE,
   ];
@@ @@
   $definitions[ThebigwordTranslator::JOB_ITEM_STATE_SECONDARY_REVIEW] = [
     'label' => t('Secondary review'),
     'type' => 'translator_state',
-    'icon' => drupal_get_path('module', 'tmgmt_thebigword') . '/icons/secondary.svg',
+    'icon' => \Drupal::service('extension.list.module')->getPath('tmgmt_thebigword') . '/icons/secondary.svg',
     'weight' => 4,
     'show_job_filter' => TRUE,
   ];
@@ @@
     // Allow access to the field if the user being edited has permissions to
     // do reviews and the current user has permission to configure the field.
     if ($operation == 'edit' && $items && $items->getEntity() instanceof UserInterface) {
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       $user = $items->getEntity();
       $user_has_review_access = $user->hasPermission('access tmgmt thebigword primary review') || $user->hasPermission('access tmgmt thebigword secondary review');
       return AccessResult::forbiddenIf(!$user_has_review_access || !$account->hasPermission('configure tmgmt thebigword language skills'));
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


2) modules/contrib/tmgmt_thebigword/tmgmt_thebigword.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Extension\ModuleInstallerInterface;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 /**
  * @file
  * Install and update hooks for TMGMT thebigword.
@@ @@
  */
 function tmgmt_thebigword_update_8001() {
   // Make sure that the tmgmt_language_combination module is installed.
-  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+  /** @var ModuleInstallerInterface $module_installer */
   $module_installer = \Drupal::service('module_installer');
   $module_installer->install(['tmgmt_language_combination']);

@@ @@
     }

     $entity_type = \Drupal::service('config.manager')->getEntityTypeIdByName($config_name);
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage */
+    /** @var ConfigEntityStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage($entity_type);
     $entity = $storage->createFromStorageRecord($config_record);
     $entity->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/tmgmt_thebigword/src/ThebigwordTranslatorUi.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_thebigword;

+use Drupal\tmgmt\TranslatorInterface;
+use Drupal\tmgmt_thebigword\Plugin\tmgmt\Translator\ThebigwordTranslator;
+use Drupal\tmgmt\Entity\Job;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\tmgmt\TranslatorPluginUiBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildConfigurationForm($form, $form_state);

-    /** @var \Drupal\tmgmt\TranslatorInterface $translator */
+    /** @var TranslatorInterface $translator */
     $translator = $form_state->getFormObject()->getEntity();

     $settings = NestedArray::mergeDeep($translator->getPlugin()->defaultSettings(), $translator->getSettings());
@@ @@
     if ($form_state->hasAnyErrors()) {
       return;
     }
-    /** @var \Drupal\tmgmt\TranslatorInterface $translator */
+    /** @var TranslatorInterface $translator */
     $translator = $form_state->getFormObject()->getEntity();
-    /** @var \Drupal\tmgmt_thebigword\Plugin\tmgmt\Translator\ThebigwordTranslator $plugin */
+    /** @var ThebigwordTranslator $plugin */
     $plugin = $translator->getPlugin();
     $plugin->setTranslator($translator);
     $result = $plugin->request('states', 'GET', [], FALSE, TRUE);
@@ @@
    * {@inheritdoc}
    */
   public function checkoutSettingsForm(array $form, FormStateInterface $form_state, JobInterface $job) {
-    /** @var \Drupal\tmgmt_thebigword\Plugin\tmgmt\Translator\ThebigwordTranslator $translator_plugin */
+    /** @var ThebigwordTranslator $translator_plugin */
     $translator_plugin = $job->getTranslator()->getPlugin();
     $translator_plugin->setTranslator($job->getTranslator());
     $settings['required_by'] = [
@@ @@
    * Submit callback to pull translations form thebigword.
    */
   public function submitPullTranslations(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\tmgmt\Entity\Job $job */
+    /** @var Job $job */
     $job = $form_state->getFormObject()->getEntity();

     // Remove the destination key so that the redirect works as expected.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/tmgmt_thebigword/src/Plugin/tmgmt/Translator/ThebigwordTranslator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_thebigword\Plugin\tmgmt\Translator;

+use Drupal\tmgmt\Entity\JobItem;
+use Drupal\tmgmt_file\Format\FormatInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * Guzzle HTTP client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $client;

@@ @@
   /**
    * Constructs a ThebigwordTranslator object.
    *
-   * @param \GuzzleHttp\ClientInterface $client
+   * @param ClientInterface $client
    *   The Guzzle HTTP client.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    /** @var \GuzzleHttp\ClientInterface $client */
+    /** @var ClientInterface $client */
     $client = $container->get('http_client');
     return new static(
       $client,
@@ @@
   /**
    * Sets a Translator.
    *
-   * @param \Drupal\tmgmt\TranslatorInterface $translator
+   * @param TranslatorInterface $translator
    *   The translator to set.
    */
   public function setTranslator(TranslatorInterface $translator) {
@@ @@
    * {@inheritdoc}
    */
   public function requestJobItemsTranslation(array $job_items) {
-    /** @var \Drupal\tmgmt\Entity\Job $job */
+    /** @var Job $job */
     $job = Job::load(reset($job_items)->getJobId());
     $this->setTranslator($job->getTranslator());
     $project_id = 0;
@@ @@
       $project_id = $this->newTranslationProject($job, $datetime);
       $job->addMessage('Created a new project in thebigword with the id: @id', ['@id' => $project_id], 'debug');

-      /** @var \Drupal\tmgmt\Entity\JobItem $job_item */
+      /** @var JobItem $job_item */
       foreach ($job_items as $job_item) {
         $file_id = $this->sendFiles($job_item, $project_id, $datetime);

-        /** @var \Drupal\tmgmt\Entity\RemoteMapping $remote_mapping */
+        /** @var RemoteMapping $remote_mapping */
         $remote_mapping = RemoteMapping::create([
           'tjid' => $job->id(),
           'tjiid' => $job_item->id(),
@@ @@
    * @return array
    *   Response array from thebigword.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    */
   public function request($path, $method = 'GET', $params = [], $download = FALSE, $code = FALSE) {
     $options = [];
@@ @@
   /**
    * Creates new translation project at thebigword.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The job.
    * @param string $required_by
    *   The date by when the translation is required.
@@ @@
    * @return int
    *   Thebigword project id.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    */
   public function newTranslationProject(JobInterface $job, $required_by) {
     $url = Url::fromRoute('tmgmt_thebigword.callback');
@@ @@
   /**
    * Send the files to thebigword.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The Job.
    * @param int $project_id
    *   Thebigword project id.
@@ @@
    *   Thebigword FileId.
    */
   private function sendFiles(JobItemInterface $job_item, $project_id, $required_by) {
-    /** @var \Drupal\tmgmt_file\Format\FormatInterface $xliff_converter */
+    /** @var FormatInterface $xliff_converter */
     $xliff_converter = \Drupal::service('plugin.manager.tmgmt_file.format')->createInstance('xlf');

     $job_item_id = $job_item->id();
@@ @@
    *
    * @param string $xliff
    *   .XLIFF string to be translated. It is send as a file.
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The Job item.
    * @param string $project_id
    *   The Project ID.
@@ @@
    * @return string
    *   Thebigword uuid of the resource.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    */
   public function uploadFileResource($xliff, JobItemInterface $job_item, $project_id, $name, $required_by) {
     $form_params = [
@@ @@
    *   Unflatted data.
    */
   protected function parseTranslationData($data) {
-    /** @var \Drupal\tmgmt_file\Format\FormatInterface $xliff_converter */
+    /** @var FormatInterface $xliff_converter */
     $xliff_converter = \Drupal::service('plugin.manager.tmgmt_file.format')->createInstance('xlf');
     // Import given data using XLIFF converter. Specify that passed content is
     // not a file.
@@ @@
   /**
    * Fetches translations for job items of a given job.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   A job containing job items that translations will be fetched for.
    * @param int|null $project_id
    *   (optional) A project ID, if not provided, the project ID from the first
@@ @@
       $files = $this->getPendingFiles($project_id, $file_id);
       /** @var JobItemInterface $job_item */
       foreach ($files as $file_id => $file) {
-        /** @var \Drupal\tmgmt\Entity\RemoteMapping $mapping */
+        /** @var RemoteMapping $mapping */
         $mappings = RemoteMapping::loadByRemoteIdentifier('tmgmt_thebigword', $project_id, $file_id);
         $mapping = reset($mappings);
         try {
@@ @@
   /**
    * Send the preview url.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The Job item.
    * @param int $project_id
    *   The project ID.
@@ @@
    * @return string
    *   The file ID;
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    */
   protected function sendUrl(JobItemInterface $job_item, $project_id, $file_id, $preview, $required_by, $cms_state = self::STATE_REVIEW_PREVIEW) {
     /** @var Url $url */
@@ @@
    * @return array
    *   A list of files in the given state.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    */
   protected function getPendingFilesForState($state) {
     if (!isset($this->pendingFilesByState[$state])) {
@@ @@
    *   The project id.
    * @param string $file_id
    *   The file id to update.
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The Job.
    * @param string $required_by
    *   The date by when the translation is required.
@@ @@
    *   (Optional) Set to TRUE if also want to send the confirmation message
    *   of this error. Otherwise will not send it.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    *   If there is a problem with the request.
    */
   public function sendFileError($state, $project_id, $file_id, JobInterface $job, $required_by, $message = '', $confirm = FALSE) {
@@ @@
   /**
    * Retrieve the data of a file in a state.
    *
-   * @param \Drupal\tmgmt\RemoteMappingInterface $mapping
+   * @param RemoteMappingInterface $mapping
    *   The remote mapping entity.
    * @param string $state
    *   The state of the file.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    */
   public function processLoginToken(RemoteMappingInterface $mapping, $state) {
     $file_id = $mapping->getRemoteIdentifier3();
@@ @@
   /**
    * Retrieve the data of a file in a state.
    *
-   * @param \Drupal\tmgmt\RemoteMappingInterface $mapping
+   * @param RemoteMappingInterface $mapping
    *   The remote mapping entity.
    * @param string $state
    *   The state of the file.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    */
   public function addFileDataToJob(RemoteMappingInterface $mapping, $state) {
     if (in_array($state, [static::STATE_PRIMARY_REVIEW, static::STATE_SECONDARY_REVIEW])) {
@@ @@
   /**
    * Checks if a user is allowed to do the external review of a job item.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The job item.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user.
    *
    * @return bool
@@ @@
   /**
    * Checks if a user has the necessary language skills.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user entity.
    * @param string $langcode_from
    *   The from language code.
@@ @@
    * @return array
    *   The number of confirmed files.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    */
   protected function confirmUpload($project_id, $state) {
     $form_params = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/tmgmt_thebigword/src/Form/ExternalReviewRedirectForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * ExternalReviewRedirectForm constructor.
    *
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(TimeInterface $time) {
@@ @@
   /**
    * Builds the JWT token for external authentication.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $tmgmt_job_item
+   * @param JobItemInterface $tmgmt_job_item
    *   The job item.
-   * @param \Drupal\tmgmt\RemoteMappingInterface $mapping
+   * @param RemoteMappingInterface $mapping
    *   The remote mapping.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/tmgmt_thebigword/src/Controller/RemoteCallbackController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_thebigword\Controller;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * Handles the notifications of changes in the files states.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request to handle.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response to return.
    */
   public function callback(Request $request) {
@@ @@
         return new Response(new FormattableMarkup('Project %id not found.', ['%id' => $project_id]), 404);
       }
       $remote = NULL;
-      /** @var \Drupal\tmgmt\Entity\RemoteMapping $remote_candidate */
+      /** @var RemoteMapping $remote_candidate */
       foreach ($remotes as $remote_candidate) {
         if ($remote_candidate->getRemoteIdentifier3() == $file_id) {
           $remote = $remote_candidate;
@@ @@
         return new Response(new FormattableMarkup('File %id not found.', ['%id' => $file_id]), 404);
       }

-      /** @var \Drupal\tmgmt_thebigword\Plugin\tmgmt\Translator\ThebigwordTranslator $translator_plugin */
+      /** @var ThebigwordTranslator $translator_plugin */
       $translator_plugin = $remote->getJob()->getTranslator()->getPlugin();
       $translator_plugin->setTranslator($remote->getJob()->getTranslator());

@@ @@
   /**
    * Returns a no preview response.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request to handle.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response to return.
    */
   public function noPreview(Request $request) {
@@ @@
   /**
    * Pull all remote translations.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request to handle.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response to return.
    */
   public function pullAllRemoteTranslations(Request $request) {
@@ @@
    * Batch callback function.
    */
   public static function pullRemoteTranslations($item_id, &$context) {
-    /** @var \Drupal\tmgmt\JobItemInterface $job_item */
+    /** @var JobItemInterface $job_item */
     $job_item = JobItem::load($item_id);
     $mappings = RemoteMapping::loadByLocalData($job_item->getJobId(), $job_item->id());
-    /** @var \Drupal\tmgmt\RemoteMappingInterface $mapping */
+    /** @var RemoteMappingInterface $mapping */
     $mapping = reset($mappings);

     $project_id = $mapping->getRemoteIdentifier2();

-    /** @var \Drupal\tmgmt_thebigword\Plugin\tmgmt\Translator\ThebigwordTranslator $translator_plugin */
+    /** @var ThebigwordTranslator $translator_plugin */
     $translator_plugin = $job_item->getTranslatorPlugin();
     $results = $translator_plugin->fetchTranslatedFiles($job_item->getJob(), $project_id, $mapping->getRemoteIdentifier3());
     foreach ($results as $key => $count) {
@@ @@
   /**
    * Access callback for the review redirect form.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $tmgmt_job_item
+   * @param JobItemInterface $tmgmt_job_item
    *   The job item.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function reviewRedirectAccess(JobItemInterface $tmgmt_job_item) {
     if ($tmgmt_job_item->hasTranslator() && $tmgmt_job_item->getTranslatorPlugin() instanceof ThebigwordTranslator) {
-      /** @var \Drupal\tmgmt_thebigword\Plugin\tmgmt\Translator\ThebigwordTranslator $translator_plugin */
+      /** @var ThebigwordTranslator $translator_plugin */
       $translator_plugin = $tmgmt_job_item->getTranslatorPlugin();
       if ($translator_plugin->userHasExternalReviewAccess($tmgmt_job_item, $this->currentUser())) {
         return AccessResult::allowed()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

