modules/contrib/default_content_deploy/default_content_deploy.install
modules/contrib/default_content_deploy/src/Commands/DefaultContentDeployCommands.php
modules/contrib/default_content_deploy/src/Controller/DownloadController.php
modules/contrib/default_content_deploy/src/DeployManager.php
modules/contrib/default_content_deploy/src/Event/DefaultContentDeployEvents.php
modules/contrib/default_content_deploy/src/Event/PreSerializeEvent.php
modules/contrib/default_content_deploy/src/Exporter.php
modules/contrib/default_content_deploy/src/Form/ExportForm.php
modules/contrib/default_content_deploy/src/Form/ImportForm.php
modules/contrib/default_content_deploy/src/Form/SettingsForm.php
modules/contrib/default_content_deploy/src/Importer.php

9 files with changes
====================

1) modules/contrib/default_content_deploy/src/Importer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\default_content_deploy;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Deploy manager.
    *
-   * @var \Drupal\default_content_deploy\DeployManager
+   * @var DeployManager
    */
   protected $deployManager;

@@ @@
   /**
    * The Entity repository manager.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * The cache data.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The serializer service.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The link manager service.
    *
-   * @var \Drupal\hal\LinkManager\LinkManagerInterface
+   * @var LinkManagerInterface
    */
   protected $linkManager;

@@ @@
   /**
    * The account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;

@@ @@
   /**
    * DCD Exporter.
    *
-   * @var \Drupal\default_content_deploy\Exporter
+   * @var Exporter
    */
   protected $exporter;

   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Constructs the default content deploy manager.
    *
-   * @param \Symfony\Component\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   The serializer service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\hal\LinkManager\LinkManagerInterface $link_manager
+   * @param LinkManagerInterface $link_manager
    *   The link manager service.
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $account_switcher
+   * @param AccountSwitcherInterface $account_switcher
    *   The account switcher.
-   * @param \Drupal\default_content_deploy\DeployManager $deploy_manager
+   * @param DeployManager $deploy_manager
    *   Deploy manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The Entity repository manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache data.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database connection.
    */
   public function __construct(Serializer $serializer, EntityTypeManagerInterface $entity_type_manager, LinkManagerInterface $link_manager, AccountSwitcherInterface $account_switcher, DeployManager $deploy_manager, EntityRepositoryInterface $entity_repository, CacheBackendInterface $cache, Exporter $exporter, Connection $database) {
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \Exception
    */
   public function prepareForImport() {
@@ @@
   /**
    * Import to entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function import() {
     $files = $this->dataToImport;
@@ @@
           $class = $this->entityTypeManager->getDefinition($entity_type)->getClass();
           $needs_second_run = $this->preDenormalize($file, $entity_type);

-          /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+          /** @var ContentEntityInterface $entity */
           $entity = $this->serializer->denormalize($file['data'], $class, 'hal_json', ['request_method' => 'POST']);
           $entity->enforceIsNew($file['is_new']);
           $entity->save();
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \Exception
    */
   protected function decodeFile($file) {
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
+   * @throws InvalidPluginDefinitionException
    */
   protected function preAddToImport(&$data) {
     $decode = $data['data'];
     $uuid = $decode['uuid'][0]['value'];
     $entity_type_id = $data['entity_type_id'];
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->entityRepository->loadEntityByUuid($entity_type_id, $uuid);
     $entity_type_object = $this->entityTypeManager->getDefinition($entity_type_id);

@@ @@
    *
    * @param $file
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function preDenormalize(&$file, $entity_type) {
     $needs_second_run = FALSE;
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function updateTargetRevisionId(&$decode) {
     if (isset($decode['_embedded'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/default_content_deploy/src/Form/ImportForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\default_content_deploy\Form;

+use Symfony\Component\HttpFoundation\File\UploadedFile;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Default Content Deploy Importer object.
    *
-   * @var \Drupal\default_content_deploy\Importer
+   * @var Importer
    */
   private $importer;

@@ @@
   /**
    * Deploy manager.
    *
-   * @var \Drupal\default_content_deploy\DeployManager
+   * @var DeployManager
    */
   protected $deployManager;

@@ @@
   /**
    * The File system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * ImportForm constructor.
    *
-   * @param \Drupal\default_content_deploy\Importer $importer
-   * @param \Drupal\Core\Messenger\Messenger $messenger
-   * @param \Drupal\default_content_deploy\DeployManager $deploy_manager
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param Importer $importer
+   * @param Messenger $messenger
+   * @param DeployManager $deploy_manager
+   * @param FileSystemInterface $file_system
    */
   public function __construct(Importer $importer, Messenger $messenger, DeployManager $deploy_manager, FileSystemInterface  $file_system) {
     $this->importer = $importer;
@@ @@
     $all_files = $this->getRequest()->files->get('files', []);

     if (!empty($all_files['file'])) {
-      /** @var \Symfony\Component\HttpFoundation\File\UploadedFile $file_upload */
+      /** @var UploadedFile $file_upload */
       $file_upload = $all_files['file'];
       $extension = $file_upload->getClientOriginalExtension();

@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/default_content_deploy/src/Form/ExportForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Default Content Deploy Export object.
    *
-   * @var \Drupal\default_content_deploy\Exporter
+   * @var Exporter
    */
   protected $exporter;

@@ @@
   /**
    * Deploy manager.
    *
-   * @var \Drupal\default_content_deploy\DeployManager
+   * @var DeployManager
    */
   protected $deployManager;

@@ @@
   /**
    * Static cache of bundle information.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;

@@ @@
   /**
    * The File system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * ExportForm constructor.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
-   * @param \Drupal\default_content_deploy\DeployManager $deploy_manager
-   * @param \Drupal\default_content_deploy\Exporter $exporter
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param Messenger $messenger
+   * @param DeployManager $deploy_manager
+   * @param Exporter $exporter
+   * @param EntityTypeBundleInfoInterface $bundle_info
+   * @param FileSystemInterface $file_system
    */
   public function __construct(Messenger $messenger, DeployManager $deploy_manager, Exporter $exporter, EntityTypeBundleInfoInterface $bundle_info, FileSystemInterface  $file_system) {
     $this->exporter = $exporter;
@@ @@
    * Ajax callback for Mode form element.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ @@
    * Ajax callback for Entity type form element.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/default_content_deploy/src/Exporter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\default_content_deploy;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
   /**
    * DCD Manager.
    *
-   * @var \Drupal\default_content_deploy\DeployManager
+   * @var DeployManager
    */
   protected $deployManager;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * DB connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Serializer.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;

@@ @@
   /**
    * The account switcher service.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;

@@ @@
   /**
    * The link manager service.
    *
-   * @var \Drupal\hal\LinkManager\LinkManagerInterface
+   * @var LinkManagerInterface
    */
   protected $linkManager;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @var ContainerAwareEventDispatcher
    */
   protected $eventDispatcher;

   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Exporter constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   DB connection.
-   * @param \Drupal\default_content_deploy\DeployManager $deploy_manager
+   * @param DeployManager $deploy_manager
    *   DCD Manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type Manager.
-   * @param \Symfony\Component\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   Serializer.
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $account_switcher
+   * @param AccountSwitcherInterface $account_switcher
    *   The account switcher service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\hal\LinkManager\LinkManagerInterface $link_manager
+   * @param LinkManagerInterface $link_manager
    *   The link manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(Connection $database, DeployManager $deploy_manager, EntityTypeManagerInterface $entityTypeManager, Serializer $serializer, AccountSwitcherInterface $account_switcher, FileSystemInterface $file_system, LinkManagerInterface $link_manager, ContainerAwareEventDispatcher $eventDispatcher, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Prepare content to export.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function prepareToExport() {
     $entity_type = $this->entityTypeId;
@@ @@
     }

     foreach ($exported_entity_ids as $entity_id) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $entity = $this->entityTypeManager->getStorage($entity_type)->load($entity_id);
       $exported_entity = $this->getSerializedContent($entity);
       $this->addExportedEntity($exported_entity);
@@ @@
   /**
    * Prepare content with reference to export.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function prepareToExportWithReference() {
     $entity_type = $this->entityTypeId;
@@ @@
     }

     foreach ($exported_entity_ids as $entity_id) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $entity = $this->entityTypeManager->getStorage($entity_type)->load($entity_id);
       $exported_entities = $this->getSerializedContentWithReferences($entity);
       $this->addExportedEntity($exported_entities);
@@ @@
   /**
    * Prepare all content on the site to export.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function prepareToExportAllContent() {
     $content_entity_types = $this->deployManager->getContentEntityTypes();
@@ @@
         $entity_ids = array_values($query->execute());

         foreach ($entity_ids as $entity_id) {
-          /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+          /** @var ContentEntityInterface $entity */
           $entity = $this->entityTypeManager->getStorage($entity_type)->load($entity_id);

           if ($time && $entity instanceof EntityChangedInterface && $entity->getChangedTimeAcrossTranslations() < $time) {
@@ @@
    * @return array
    *   Return array of entity ids.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function getEntityIdsForExport() {
     $skip_entities = $this->skipEntityIds;
@@ @@
   /**
    * Exports a single entity as importContent expects it.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *
    * @return string
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getSerializedContent(ContentEntityInterface $entity) {
     $content = '';
@@ @@
   /**
    * Exports a single entity and all its referenced entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *
    * @return array
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function getSerializedContentWithReferences(ContentEntityInterface $entity) {
     $indexed_dependencies = [$entity->uuid() => $entity];
@@ @@
   /**
    * Returns all layout builder referenced blocks of an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    *   Keyed array of entities indexed by entity type and ID.
    */
   private function getEntityLayoutBuilderDependencies(ContentEntityInterface $entity) {
@@ @@
    * This method is also recursive to support use-cases like a node -> media
    * -> file.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param int $depth
    *   Guard against infinite recursion.
-   * @param \Drupal\Core\Entity\ContentEntityInterface[] $indexed_dependencies
+   * @param ContentEntityInterface[] $indexed_dependencies
    *   Previously discovered dependencies.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    *   Keyed array of entities indexed by entity type and ID.
    */
   private function getEntityReferencesRecursive(ContentEntityInterface $entity, $depth = 0, array &$indexed_dependencies = []) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/default_content_deploy/src/Event/PreSerializeEvent.php:10

    ---------- begin diff ----------
@@ @@
 class PreSerializeEvent extends Event {

   /**
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;

@@ @@
   protected $mode;

   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    * @param string $mode
    */
   public function __construct(ContentEntityInterface $entity, $mode) {
@@ @@
   }

   /**
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    */
   public function getEntity() {
     return $this->entity;
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
+   * @param ContentEntityInterface|null $entity
    */
   public function setEntity($entity = NULL) {
     $this->entity = $entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/default_content_deploy/src/DeployManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\default_content_deploy;

+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Archiver\ArchiveTar;
 use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * Site settings.
    *
-   * @var \Drupal\Core\Site\Settings
+   * @var Settings
    */
   protected $settings;

@@ @@
   /**
    * The File system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $request;

@@ @@
   /**
    * DeployManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory.
-   * @param \Drupal\Core\Site\Settings $settings
+   * @param Settings $settings
    *   Site settings.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The File system.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The current request.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config, Settings $settings, FileSystemInterface $file_system, RequestStack $request_stack) {
@@ @@
    * @return string
    *   UUID value.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getEntityUuidById($entity_type, $id) {
     $entity = $this->entityTypeManager->getStorage($entity_type)->load($id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/default_content_deploy/src/Controller/DownloadController.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The DCD manager.
    *
-   * @var \Drupal\default_content_deploy\DeployManager
+   * @var DeployManager
    */
   protected $deployManager;

@@ @@
   /**
    * The File system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * DownloadController constructor.
    *
-   * @param \Drupal\default_content_deploy\DeployManager $deploy_manager
+   * @param DeployManager $deploy_manager
    *   The DCD manager.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The File system.
    */
   public function __construct(DeployManager $deploy_manager, FileSystemInterface $file_system) {
@@ @@
   /**
    * Return binary archive file for download.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    */
   public function downloadCompressedContent() {
     $this->deployManager->compressContent();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/default_content_deploy/src/Commands/DefaultContentDeployCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\default_content_deploy\Commands;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\default_content_deploy\DeployManager;
 use Drupal\default_content_deploy\Exporter;
 use Drupal\default_content_deploy\Importer;
@@ @@
   /**
    * DCD Exporter.
    *
-   * @var \Drupal\default_content_deploy\Exporter
+   * @var Exporter
    */
   private $exporter;

@@ @@
   /**
    * DCD Importer.
    *
-   * @var \Drupal\default_content_deploy\Importer
+   * @var Importer
    */
   private $importer;

@@ @@
   /**
    * Default deploy content manager.
    *
-   * @var \Drupal\default_content_deploy\DeployManager
+   * @var DeployManager
    */
   protected $deployManager;

@@ @@
   /**
    * DefaultContentDeployCommands constructor.
    *
-   * @param \Drupal\default_content_deploy\Exporter $exporter
+   * @param Exporter $exporter
    *   DCD Exporter.
-   * @param \Drupal\default_content_deploy\Importer $importer
+   * @param Importer $importer
    *   DCD Importer.
-   * @param \Drupal\default_content_deploy\DeployManager $deploy_manager
+   * @param DeployManager $deploy_manager
    *   DCD manager.
    */
   public function __construct(Exporter $exporter, Importer $importer, DeployManager $deploy_manager) {
@@ @@
    *   Print detailed information about importing entities.
    * @aliases dcdi,default-content-deploy-import
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function contentDeployImport(array $options = ['force-override' => FALSE, 'folder' => self::OPT]) {
     // Perform read only update.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/default_content_deploy/default_content_deploy.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\Entity\Role;
 /**
  * @file
  * Install, update and uninstall hooks for default_content_deploy module.
  */
-
 /**
  * Swap permission 'import content' for 'default content deploy import'.
  */
 function default_content_deploy_update_8001() {
-  /** @var \Drupal\user\Entity\Role[] $roles */
+  /** @var Role[] $roles */
   $roles = \Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple();

   foreach ($roles as $role) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 9 files have been changed by Rector                                       

