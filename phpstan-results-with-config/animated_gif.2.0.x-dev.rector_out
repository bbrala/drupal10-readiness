modules/contrib/animated_gif/animated_gif.module
modules/contrib/animated_gif/src/AnimatedGifUtility.php
modules/contrib/animated_gif/src/Plugin/Field/FieldFormatter/AnimatedGifImageUrlFormatter.php
modules/contrib/animated_gif/tests/src/Functional/AnimatedGifFieldTest.php
modules/contrib/animated_gif/tests/src/Functional/AnimatedGifFunctionalTestBase.php
modules/contrib/animated_gif/tests/src/Kernel/AnimatedGifImageFormatterTest.php
modules/contrib/animated_gif/tests/src/Traits/AnimatedGifTestTrait.php

6 files with changes
====================

1) modules/contrib/animated_gif/tests/src/Traits/AnimatedGifTestTrait.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\animated_gif\Traits;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Extension\ModuleExtensionList;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\file\FileInterface;

@@ @@
   /**
    * File system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *
    * Currently no interface to rely on.
    *
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    */
   protected $moduleExtensionList;

@@ @@
    * @param string $fileUri
    *   The Uri of the file.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   Return a file.
    */
   protected function getTestFile(string $fileName, string $fileUri): FileInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/animated_gif/tests/src/Kernel/AnimatedGifImageFormatterTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\animated_gif\Kernel;

+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\Core\File\FileUrlGeneratorInterface;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\image\ImageStyleInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\field\Entity\FieldConfig;
@@ @@
   /**
    * The entity view display.
    *
-   * @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface
+   * @var EntityViewDisplayInterface
    */
   protected $display;

@@ @@
   /**
    * The file URL generator.
    *
-   * @var \Drupal\Core\File\FileUrlGeneratorInterface
+   * @var FileUrlGeneratorInterface
    */
   protected $fileUrlGenerator;

@@ @@
     // Generate the render array to verify markup.
     $build = $this->display->build($entity);

-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = $this->container->get('renderer');

     $output = $renderer->renderRoot($build[$this->fieldName][0]);
@@ @@
     $output = $renderer->renderRoot($build[$this->fieldName][1]);
     $this->assertStringNotContainsString($this->fileUrlGenerator->transformRelative($this->fileUrlGenerator->generateString($notAnimatedGifFile->getFileUri())), (string) $output);

-    /** @var \Drupal\image\ImageStyleInterface $image_style */
+    /** @var ImageStyleInterface $image_style */
     $image_style = $this->entityTypeManager
       ->getStorage('image_style')
       ->load('medium');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/animated_gif/tests/src/Functional/AnimatedGifFunctionalTestBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\animated_gif\Functional;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * The display repository service.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected EntityDisplayRepositoryInterface $displayRepository;

@@ @@
   /**
    * A user with administration permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected UserInterface $adminUser;

@@ @@
    * @param string $fieldName
    *   The field name.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createFileField(string $entityType, string $bundle, string $fieldName): void {
     if (!FieldStorageConfig::loadByName($entityType, $fieldName)) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/animated_gif/tests/src/Functional/AnimatedGifFieldTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\animated_gif\Functional;

+use Behat\Mink\Exception\ResponseTextException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\file\FileInterface;
 use Drupal\node\NodeInterface;

@@ @@
   /**
    * The tested node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected NodeInterface $node;

@@ @@
   /**
    * Method to test gif images.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws ResponseTextException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function testGif(): void {
     $this->gifAnimationTest(self::TEST_ANIMATED_FILE, self::TEST_ANIMATED_FILE_URI, TRUE);
@@ @@
    * @param bool $isAnimated
    *   Set if it's animated.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws ResponseTextException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function gifAnimationTest(string $fileName, string $fileUri, bool $isAnimated): void {
     $this->drupalLogin($this->adminUser);
@@ @@
   /**
    * Helper method to upload $file on the node.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file.
    */
   protected function uploadImage(FileInterface $file): void {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/animated_gif/src/Plugin/Field/FieldFormatter/AnimatedGifImageUrlFormatter.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\animated_gif\Plugin\Field\FieldFormatter;

+use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
+use Drupal\file\FileInterface;
 use Drupal\animated_gif\AnimatedGifUtility;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\image\Plugin\Field\FieldFormatter\ImageUrlFormatter;
@@ @@
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $elements = parent::viewElements($items, $langcode);

-    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $items */
+    /** @var EntityReferenceFieldItemListInterface $items */
     $images = $this->getEntitiesToView($items, $langcode);
     if (empty($images)) {
       // Early opt-out if the field is empty.
@@ @@
       return $elements;
     }

-    /** @var \Drupal\file\FileInterface[] $images */
+    /** @var FileInterface[] $images */
     foreach ($images as $delta => $image) {
       $image_uri = $image->getFileUri();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/animated_gif/animated_gif.module:5

    ---------- begin diff ----------
@@ @@
  */

 declare(strict_types = 1);
+use Drupal\file\FileInterface;

 use Drupal\animated_gif\AnimatedGifUtility;
 use Drupal\file\Entity\File;
@@ @@
     return;
   }

-  /** @var \Drupal\file\FileInterface $file */
+  /** @var FileInterface $file */
   $file = reset($files);

   if ($file->getMimeType() === 'image/gif' && AnimatedGifUtility::isAnAnimatedGif($file->getFileUri())) {
@@ @@
     return;
   }

-  /** @var \Drupal\file\FileInterface $file */
+  /** @var FileInterface $file */
   $file = reset($files);

   if ($file->getMimeType() === 'image/gif' && AnimatedGifUtility::isAnAnimatedGif($file->getFileUri())) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 6 files have been changed by Rector                                       

