modules/contrib/auto_entitylabel/auto_entitylabel.api.php
modules/contrib/auto_entitylabel/auto_entitylabel.install
modules/contrib/auto_entitylabel/auto_entitylabel.module
modules/contrib/auto_entitylabel/src/AutoEntityLabelManager.php
modules/contrib/auto_entitylabel/src/AutoEntityLabelManagerInterface.php
modules/contrib/auto_entitylabel/src/AutoEntityLabelPermissionController.php
modules/contrib/auto_entitylabel/src/Batch/ResaveBatch.php
modules/contrib/auto_entitylabel/src/EntityDecorator.php
modules/contrib/auto_entitylabel/src/EntityDecoratorInterface.php
modules/contrib/auto_entitylabel/src/Form/AutoEntityLabelForm.php
modules/contrib/auto_entitylabel/src/Plugin/Derivative/AutoEntityLabelConfigTask.php
modules/contrib/auto_entitylabel/src/Plugin/Validation/EntityLabelNotNullConstraint.php
modules/contrib/auto_entitylabel/src/Plugin/Validation/EntityLabelNotNullConstraintValidator.php
modules/contrib/auto_entitylabel/src/Routing/RouteEnhancer.php
modules/contrib/auto_entitylabel/src/Routing/RouteSubscriber.php
modules/contrib/auto_entitylabel/tests/src/Functional/PrefilledOptionTest.php
modules/contrib/auto_entitylabel/tests/src/Functional/PreserveTitlesOptionTest.php
modules/contrib/auto_entitylabel/tests/src/FunctionalJavascript/AutoEntityLabelBatchTest.php
modules/contrib/auto_entitylabel/tests/src/Kernel/AutoEntityLabelFormTest.php
modules/contrib/auto_entitylabel/tests/src/Kernel/AutoEntityLabelManagerTest.php
modules/contrib/auto_entitylabel/tests/src/Kernel/AutoEntityLabelPermissionControllerTest.php
modules/contrib/auto_entitylabel/tests/src/Kernel/AutoEntityLabelTest.php

18 files with changes
=====================

1) modules/contrib/auto_entitylabel/tests/src/Kernel/AutoEntityLabelTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\auto_entitylabel\Kernel;

+use Drupal\node\Entity\NodeType;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\auto_entitylabel\AutoEntityLabelManager;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
 use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
@@ @@
   /**
    * Node type.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodeType;

@@ @@
   /**
    * Config factory service variable.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('node');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/auto_entitylabel/tests/src/Kernel/AutoEntityLabelPermissionControllerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\auto_entitylabel\Kernel;

+use Drupal\node\Entity\NodeType;
 use Drupal\auto_entitylabel\AutoEntityLabelPermissionController;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
 use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
@@ @@
   /**
    * Node type.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodeType;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('node');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/auto_entitylabel/tests/src/Kernel/AutoEntityLabelManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\auto_entitylabel\Kernel;

+use Drupal\node\Entity\NodeType;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\node\NodeInterface;
 use Drupal\auto_entitylabel\AutoEntityLabelManager;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
 use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
@@ @@
   /**
    * Node type.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodeType;

@@ @@
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Node entity.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $entity;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('node');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/auto_entitylabel/tests/src/Kernel/AutoEntityLabelFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\auto_entitylabel\Kernel;

+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\node\Entity\NodeType;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\auto_entitylabel\AutoEntityLabelManager;
 use Drupal\auto_entitylabel\Form\AutoEntityLabelForm;
 use Drupal\Core\Form\FormState;
@@ @@
   /**
    * Mocked RouteMatch service.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $mockRouteMatch;

@@ @@
   /**
    * Node type.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodeType;

@@ @@
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->configFactory = $this->container->get('config.factory');
@@ @@

     $this->installConfig(self::$modules);

-    $this->mockRouteMatch = $this->getMockBuilder(RouteMatchInterface::class)->disableOriginalConstructor()->getMock();
+    $this->mockRouteMatch = $this->createMock(RouteMatchInterface::class);
     $this->mockRouteMatch->method('getRouteObject')->willReturn(new Route(
       '/admin/structure/types/manage/{node_type}/auto-label',
       [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/auto_entitylabel/tests/src/FunctionalJavascript/AutoEntityLabelBatchTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\auto_entitylabel\FunctionalJavascript;

+use Drupal\node\Entity\NodeType;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\user\Entity\User;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;

 /**
@@ @@
   /**
    * Node type.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodeType;

@@ @@
   /**
    * Config factory service variable.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * User variable.
    *
-   * @var bool|\Drupal\user\Entity\User|false
+   * @var bool|User|false
    */
   protected $user;

@@ @@
   /**
    * Node storage variable.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $nodeStorage;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->user = $this->drupalCreateUser([], '', TRUE);
@@ @@
       'save' => TRUE,
       'chunk' => 5,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');
     $webAssert->assertWaitOnAjaxRequest();
     $webAssert->pageTextContains('The configuration options have been saved.');
     $webAssert->pageTextContains('Resaved 10 labels.');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/auto_entitylabel/tests/src/Functional/PreserveTitlesOptionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\auto_entitylabel\Functional;

+use Drupal\node\Entity\NodeType;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\user\Entity\User;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\auto_entitylabel\AutoEntityLabelManager;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * Node type.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodeType;

@@ @@
   /**
    * Config factory service variable.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * User variable.
    *
-   * @var bool|\Drupal\user\Entity\User|false
+   * @var bool|User|false
    */
   protected $user;

@@ @@
   /**
    * Node storage variable.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $nodeStorage;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->user = $this->drupalCreateUser([], '', TRUE);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/auto_entitylabel/tests/src/Functional/PrefilledOptionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\auto_entitylabel\Functional;

+use Drupal\node\Entity\NodeType;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\user\Entity\User;
 use Drupal\auto_entitylabel\AutoEntityLabelManager;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * Node type.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodeType;

@@ @@
   /**
    * Config factory service variable.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * User variable.
    *
-   * @var bool|\Drupal\user\Entity\User|false
+   * @var bool|User|false
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->user = $this->drupalCreateUser([], '', TRUE);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/auto_entitylabel/src/Routing/RouteSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Gets the Entity Auto Label route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getEntityLabelRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/auto_entitylabel/src/Routing/RouteEnhancer.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a RouteEnhancer object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/auto_entitylabel/src/Plugin/Validation/EntityLabelNotNullConstraintValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\auto_entitylabel\Plugin\Validation;

+use Drupal\auto_entitylabel\AutoEntityLabelManager;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Validation\Plugin\Validation\Constraint\NotNullConstraintValidator;
 use Drupal\Core\Field\FieldItemList;
@@ @@
   /**
    * The entity decorator service.
    *
-   * @var \Drupal\auto_entitylabel\EntityDecorator
+   * @var EntityDecorator
    */
   protected $entityDecorator;

@@ @@
   /**
    * Creates an EntityLabelNotNullConstraintValidator object.
    *
-   * @param \Drupal\auto_entitylabel\EntityDecorator $entityDecorator
+   * @param EntityDecorator $entityDecorator
    *   The entity decorator service.
    */
   public function __construct(EntityDecorator $entityDecorator) {
@@ @@
     $typed_data = $this->getTypedData();
     if ($typed_data instanceof FieldItemList && $typed_data->isEmpty()) {
       $entity = $typed_data->getEntity();
-      /** @var \Drupal\auto_entitylabel\AutoEntityLabelManager $decorated_entity */
+      /** @var AutoEntityLabelManager $decorated_entity */
       $decorated_entity = $this->entityDecorator->decorate($entity);

       if ($decorated_entity->hasLabel() && $decorated_entity->autoLabelNeeded()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/auto_entitylabel/src/Plugin/Derivative/AutoEntityLabelConfigTask.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Creates an FieldUiLocalTask object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/auto_entitylabel/src/Form/AutoEntityLabelForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\auto_entitylabel\Form;

+use Drupal\Core\Config\Entity\ConfigEntityStorage;
+use Drupal\Core\Config\Entity\ConfigEntityType;
 use Drupal\auto_entitylabel\AutoEntityLabelManager;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
    * directly. See \Drupal\Core\Form\ConfigFormBase::config() for an example of
    * this.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The route matcher.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;

@@ @@
   /**
    * User.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $user;

@@ @@
   /**
    * AutoEntityLabelController constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config Factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   Route Match.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   Module Handler.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   Account Interface.
    */
   public function __construct(
@@ @@
       $config->set($key, $form_state->getValue($key));
     }

-    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorage $storage */
+    /** @var ConfigEntityStorage $storage */
     $storage = $this->entityTypeManager->getStorage($this->entityType);
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityType $entity_type */
+    /** @var ConfigEntityType $entity_type */
     $entity_type = $storage->getEntityType();
     $prefix = $entity_type->getConfigPrefix();
     $bundle = $entity_type->getBundleOf();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/auto_entitylabel/src/EntityDecoratorInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Automatic entity label entity decorator.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity.
    *
-   * @return \Drupal\auto_entitylabel\AutoEntityLabelManager|\Drupal\Core\Entity\ContentEntityInterface
+   * @return AutoEntityLabelManager|ContentEntityInterface
    *   Return Content Entity Interface.
    */
   public function decorate(ContentEntityInterface $entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/auto_entitylabel/src/EntityDecorator.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs an EntityDecorator object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Configuration factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Token manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/auto_entitylabel/src/AutoEntityLabelPermissionController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new AutoEntityLabelPermissionController instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/auto_entitylabel/src/AutoEntityLabelManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\auto_entitylabel;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The content entity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;

@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Automatic label configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Constructs an AutoEntityLabelManager object.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to add the automatic label to.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Configuration factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Token manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler.
    */
   public function __construct(
@@ @@
    *   True if the entity has a label property.
    */
   public function hasLabel() {
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $definition */
+    /** @var EntityTypeInterface $definition */
     $definition = $this->entityTypeManager
       ->getDefinition($this->entity->getEntityTypeId());
     return $definition->hasKey('label');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/auto_entitylabel/auto_entitylabel.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Allows hiding of entity label fields and automatic label creation.
@@ @@
  * Adds the Auto Label tab to the entity configuration page.
  */
 function auto_entitylabel_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+  /** @var EntityTypeInterface $entity_type */
   foreach ($entity_types as $entity_type) {
     if ($entity_type->getBundleOf() && $entity_type->hasLinkTemplate('edit-form')) {
       $entity_type->setLinkTemplate('auto-label', $entity_type->getLinkTemplate('edit-form') . "/auto-label");
@@ @@
  * Implements hook_form_alter().
  */
 function auto_entitylabel_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\Core\Entity\EntityFormInterface $formObject */
+  /** @var EntityFormInterface $formObject */
   $formObject = $form_state->getFormObject();
   if ($formObject instanceof EntityFormInterface) {
     $entity = $formObject->getEntity();
@@ @@
   $autolabel = $entity->label();
   if ($entity instanceof ContentEntityInterface) {
     $decorator = \Drupal::service('auto_entitylabel.entity_decorator');
-    /** @var \Drupal\auto_entitylabel\AutoEntityLabelManager $decorated_entity */
+    /** @var AutoEntityLabelManager $decorated_entity */
     $decorated_entity = $decorator->decorate($entity);
     if ($decorated_entity->hasLabel() && $decorated_entity->autoLabelNeeded()) {
       $autolabel = $decorated_entity->setLabel();
@@ @@
  *
  * @param array $form
  *   Form array.
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  *   The entity which title will be replaced.
  */
 function auto_entitylabel_prepare_entityform(array &$form, ContentEntityInterface $entity) {
   if (empty($form['#auto_entitylabel_processed'])) {
     $decorator = \Drupal::service('auto_entitylabel.entity_decorator');
-    /** @var \Drupal\auto_entitylabel\AutoEntityLabelManager $entity */
+    /** @var AutoEntityLabelManager $entity */
     $entity = $decorator->decorate($entity);
     $label = $entity->getLabelName();
     $widget = &$form[$label]['widget'][0];
@@ @@
   foreach ($entities as $entity) {
     if (isset($entity->in_preview) && $entity->in_preview === TRUE && $entity instanceof ContentEntityInterface) {
       $decorator = \Drupal::service('auto_entitylabel.entity_decorator');
-      /** @var \Drupal\auto_entitylabel\AutoEntityLabelManager $decorated_entity */
+      /** @var AutoEntityLabelManager $decorated_entity */
       $decorated_entity = $decorator->decorate($entity);

       if ($decorated_entity->hasLabel() && $decorated_entity->autoLabelNeeded()) {
@@ @@
 function auto_entitylabel_entity_presave(EntityInterface $entity) {
   if ($entity instanceof ContentEntityInterface) {
     $decorator = \Drupal::service('auto_entitylabel.entity_decorator');
-    /** @var \Drupal\auto_entitylabel\AutoEntityLabelManager $decorated_entity */
+    /** @var AutoEntityLabelManager $decorated_entity */
     $decorated_entity = $decorator->decorate($entity);
     if ($decorated_entity->hasLabel() && $decorated_entity->autoLabelNeeded()
       && !$decorated_entity->isTitlePreserved()) {
@@ @@
 function auto_entitylabel_entity_insert(EntityInterface $entity) {
   if ($entity instanceof ContentEntityInterface) {
     $decorator = \Drupal::service('auto_entitylabel.entity_decorator');
-    /** @var \Drupal\auto_entitylabel\AutoEntityLabelManager $decorated_entity */
+    /** @var AutoEntityLabelManager $decorated_entity */
     $decorated_entity = $decorator->decorate($entity);
     if ($decorated_entity->hasLabel()
       && (
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


18) modules/contrib/auto_entitylabel/auto_entitylabel.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\Entity\ConfigEntityType;
+use Drupal\Core\Config\ConfigFactory;
+use Drupal\Core\Config\Entity\ConfigEntityTypeInterface;
 /**
  * @file
  * Install, update and uninstall functions for the Automatic Entity Labels.
@@ @@
  * Split a single configuration into separate configs.
  */
 function auto_entitylabel_update_8201() {
-  /** @var \Drupal\Core\Entity\EntityTypeManager $entity_type_manager */
+  /** @var EntityTypeManager $entity_type_manager */
   $entity_type_manager = \Drupal::entityTypeManager();

-  /** @var \Drupal\Core\Config\Config $old_config */
+  /** @var Config $old_config */
   $old_config = \Drupal::configFactory()
     ->getEditable('auto_entitylabel.settings');
   $raw = $old_config->getRawData();

   $entity_types = [];
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityType $entity_type */
+  /** @var ConfigEntityType $entity_type */
   foreach ($entity_type_manager->getDefinitions() as $entity_type_id => $entity_type) {
     if ($entity_type->getLinkTemplate('auto-label')) {
       $entity_types[] = $entity_type_id;
@@ @@
     }
   }

-  /** @var \Drupal\Core\Config\ConfigFactory $config_interface */
+  /** @var ConfigFactory $config_interface */
   $config_interface = \Drupal::service('config.factory');

   foreach ($new_configs as $type => $type_configs) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityTypeInterface $entityType */
+    /** @var ConfigEntityTypeInterface $entityType */
     $entityType = $entity_type_manager->getStorage($type)->getEntityType();
     $prefix = $entityType->getConfigPrefix();
     $type = $entity_type_manager->getStorage($type)->getEntityType()->getProvider();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 18 files have been changed by Rector                                      

