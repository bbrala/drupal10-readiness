modules/contrib/panels_everywhere/panels_everywhere.install
modules/contrib/panels_everywhere/panels_everywhere.module
modules/contrib/panels_everywhere/panels_everywhere.post_update.php
modules/contrib/panels_everywhere/src/EventSubscriber/PanelsEverywherePageDisplayVariantSubscriber.php
modules/contrib/panels_everywhere/src/Plugin/DisplayVariant/PanelsEverywhereDisplayVariant.php
modules/contrib/panels_everywhere/src/Routing/PanelsEverywhereRouteSubscriber.php
modules/contrib/panels_everywhere/tests/src/Functional/DisplayVariantOverrideTest.php
modules/contrib/panels_everywhere/tests/src/Functional/PanelsEverywhereBrowserTestBase.php
modules/contrib/panels_everywhere/tests/src/Functional/PanelsEverywhereTest.php
modules/contrib/panels_everywhere/tests/src/Unit/EventSubscriber/PanelsEverywherePageDisplayVariantSubscriberTest.php
modules/contrib/panels_everywhere/tests/src/Unit/Routing/PanelsEverywhereRouteSubscriberTest.php

9 files with changes
====================

1) modules/contrib/panels_everywhere/tests/src/Unit/Routing/PanelsEverywhereRouteSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\panels_everywhere\Unit\Routing;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
  */
 class PanelsEverywhereRouteSubscriberTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Tests onAlterRoutes.
    *
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/panels_everywhere/tests/src/Unit/EventSubscriber/PanelsEverywherePageDisplayVariantSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\panels_everywhere\Unit\EventSubscriber;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Render\PageDisplayVariantSelectionEvent;
@@ @@
  */
 class PanelsEverywherePageDisplayVariantSubscriberTest extends UnitTestCase {

+  use ProphecyTrait;
   public function testSubscriberDoesNotStopPropagationForAdminRoutes() {
     // Given.
     $entity_type_manager = $this->prophesize(EntityTypeManagerInterface::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/panels_everywhere/tests/src/Functional/PanelsEverywhereTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\panels_everywhere\Functional;

+use Drupal\page_manager\PageInterface;
 use Drupal\page_manager\Entity\PageVariant;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * Retrieves an un-cached version of the site_template from storage.
    *
-   * @return \Drupal\page_manager\PageInterface
+   * @return PageInterface
    *   The site_template.
    */
   protected function loadSiteTemplate() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/panels_everywhere/tests/src/Functional/PanelsEverywhereBrowserTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\panels_everywhere\Functional;

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\page_manager\Entity\PageVariant;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * The page entity storage handler.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $pageStorage;

@@ @@
   /**
    * The page_variant entity storage handler.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $pageVariantStorage;

@@ @@
   /**
    * The block plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $blockManager;

@@ @@
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $conditionManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->pageStorage = \Drupal::entityTypeManager()->getStorage('page');
@@ @@
   /**
    * Place a block on the given Variant entity.
    *
-   * @param \Drupal\page_manager\Entity\PageVariant $variant
+   * @param PageVariant $variant
    *   The variant entity.
    * @param string $plugin_id
    *   The plugin id of the block.
@@ @@
   /**
    * Adds a request_path condition to the variant with the given configuration.
    *
-   * @param \Drupal\page_manager\Entity\PageVariant $variant
+   * @param PageVariant $variant
    *   The variant entity.
    * @param string $paths
    *   The list of paths separated by newline.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/panels_everywhere/tests/src/Functional/DisplayVariantOverrideTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // remove all placed block to more easily test placements
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/panels_everywhere/src/Routing/PanelsEverywhereRouteSubscriber.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\panels_everywhere\Routing;

+use Symfony\Component\Routing\Route;
 use Drupal\Core\Display\VariantInterface;
 use Drupal\page_manager\PageVariantInterface;
 use Drupal\page_manager\Routing\PageManagerRoutes;
@@ @@
    * @param $collection
    *   A collection of known routeis.
    *
-   * @return null|\Symfony\Component\Routing\Route
+   * @return null|Route
    *   Will return NULL if the variant route can not be found.
    *   Will return the variant route if route override is enabled.
    *   Will return the original route if route override is disabled.
    *   Will return NULL if the variant route is not overriding anything.
-   *
    */
   protected function getRouteAndCleanup(PageInterface $page, PageVariantInterface $variant, RouteCollection $collection) {
     $page_id = $page->id();
@@ @@
    * @param $collection
    *   A collection of known routes.
    *
-   * @return null|\Symfony\Component\Routing\Route
+   * @return null|Route
    *   The relevant route or NULL if the route could not be found.
    */
   protected function getRouteFor(PageInterface $page, PageVariantInterface $variant, RouteCollection $collection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/panels_everywhere/src/Plugin/DisplayVariant/PanelsEverywhereDisplayVariant.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\panels_everywhere\Plugin\DisplayVariant;

+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
 use Drupal\Core\Display\PageVariantInterface;
@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/panels_everywhere/src/EventSubscriber/PanelsEverywherePageDisplayVariantSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\panels_everywhere\EventSubscriber;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\panels_everywhere\Plugin\DisplayVariant\PanelsEverywhereDisplayVariant;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Core\Condition\ConditionAccessResolverTrait;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;

@@ @@
   /**
    * Constructs a new PageManagerRoutes.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Selects the page display variant.
    *
-   * @param \Drupal\Core\Render\PageDisplayVariantSelectionEvent $event
+   * @param PageDisplayVariantSelectionEvent $event
    *   The event to process.
    */
   public function onSelectPageDisplayVariant(PageDisplayVariantSelectionEvent $event) {
@@ @@
    *
    * Checks access of a page variant.
    *
-   * @param \Drupal\page_manager\PageVariantInterface $variant
+   * @param PageVariantInterface $variant
    *   The page variant.
    *
    * @return bool
@@ @@
   /**
    * Retrieves the display variant plugin for this route, if it exists.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route.
    *
-   * @return null|\Drupal\panels_everywhere\Plugin\DisplayVariant\PanelsEverywhereDisplayVariant
+   * @return null|PanelsEverywhereDisplayVariant
    *   The display variant plugin or NULL if non could be found.
    */
   protected function getVariantPlugin(Route $routeObject) {
@@ @@
   /**
    * Retrieves the page entity for the given route.
    *
-   * @param \Symfony\Component\Routing\Route $routeObject
+   * @param Route $routeObject
    *   The route.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The page entity referenced on the route or the 'site_template'
    *   page entity as long as they are enabled.
    *   Otherwise NULL will be returned.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/panels_everywhere/panels_everywhere.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
 use Drupal\page_manager\PageVariantInterface;

 /**
@@ @@
  */
 function panels_everywhere_page_variant_create(PageVariantInterface $page_variant) {
   if ($page_variant->getVariantPluginId() == 'panels_everywhere_variant') {
-    /** @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display */
+    /** @var PanelsDisplayVariant $panels_display */
     $panels_display = $page_variant->getVariantPlugin();
     // At this point, it very likely that $page_variant->id() is NULL. But
     // setting the storage type to 'page_manager' is enough to trigger Panels
@@ @@
  */
 function panels_everywhere_page_variant_presave(PageVariantInterface $page_variant) {
   if ($page_variant->getVariantPluginId() == 'panels_everywhere_variant') {
-    /** @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display */
+    /** @var PanelsDisplayVariant $panels_display */
     $panels_display = $page_variant->getVariantPlugin();
     // Set the storage info now that we have the id.
     $panels_display->setStorage('page_manager', $page_variant->id());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 9 files have been changed by Rector                                       

