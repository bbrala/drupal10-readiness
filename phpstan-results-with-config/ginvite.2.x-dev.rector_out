modules/contrib/ginvite/ginvite.install
modules/contrib/ginvite/ginvite.module
modules/contrib/ginvite/src/Controller/InvitationOperations.php
modules/contrib/ginvite/src/Event/UserRegisteredFromInvitationEvent.php
modules/contrib/ginvite/src/EventSubscriber/GinviteSubscriber.php
modules/contrib/ginvite/src/Form/BulkGroupInvitation.php
modules/contrib/ginvite/src/Form/BulkGroupInvitationConfirm.php
modules/contrib/ginvite/src/GroupInvitation.php
modules/contrib/ginvite/src/GroupInvitationLoader.php
modules/contrib/ginvite/src/GroupInvitationLoaderInterface.php
modules/contrib/ginvite/src/Plugin/GroupContentEnabler/GroupInvitation.php
modules/contrib/ginvite/src/Plugin/GroupInvitationPermissionProvider.php
modules/contrib/ginvite/src/Plugin/Validation/Constraint/PreventDuplicatedConstraint.php
modules/contrib/ginvite/src/Plugin/Validation/Constraint/PreventDuplicatedConstraintValidator.php
modules/contrib/ginvite/tests/src/Functional/GroupInviteExpireTest.php
modules/contrib/ginvite/tests/src/Functional/GroupInviteTest.php

13 files with changes
=====================

1) modules/contrib/ginvite/tests/src/Functional/GroupInviteTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ginvite\Functional;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\group\Entity\Group;
+use Drupal\user\Entity\User;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\group\Entity\GroupContent;
 use Drupal\Tests\group\Functional\GroupBrowserTestBase;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The group we will use to test methods on.
    *
-   * @var \Drupal\group\Entity\Group
+   * @var Group
    */
   protected $group;

@@ @@
   /**
    * The normal user we will use.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $account;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ginvite/tests/src/Functional/GroupInviteExpireTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ginvite\Functional;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\group\Entity\Group;
+use Drupal\user\Entity\User;
+use Drupal\Core\Cron;
+use Drupal\group\Entity\GroupContentInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\group\Entity\GroupContent;
 use Drupal\Tests\group\Functional\GroupBrowserTestBase;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The group we will use to test methods on.
    *
-   * @var \Drupal\group\Entity\Group
+   * @var Group
    */
   protected $group;

@@ @@
   /**
    * The normal user we will use.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $account;

@@ @@
   /**
    * The cron service.
    *
-   * @var \Drupal\Core\Cron
+   * @var Cron
    */
   protected $cron;

@@ @@
     $this->assertSession()->statusCodeEquals(200);

     // Expire the first invite.
-    /** @var \Drupal\group\Entity\GroupContentInterface $invite */
+    /** @var GroupContentInterface $invite */
     $invite = GroupContent::load(2);
     $invite->set('created', ($expire_days * 86400) - 1);
     $invite->save();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/ginvite/src/Plugin/Validation/Constraint/PreventDuplicatedConstraintValidator.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The group membership loader.
    *
-   * @var \Drupal\group\GroupMembershipLoaderInterface
+   * @var GroupMembershipLoaderInterface
    */
   protected $groupMembershipLoader;

@@ @@
   /**
    * Group invitations loader.
    *
-   * @var \Drupal\ginvite\GroupInvitationLoader
+   * @var GroupInvitationLoader
    */
   protected $groupInvitationLoader;

@@ @@
   /**
    * Constructs PreventDuplicatedConstraintValidator.
    *
-   * @param \Drupal\group\GroupMembershipLoaderInterface $group_membership_loader
+   * @param GroupMembershipLoaderInterface $group_membership_loader
    *   The group membership loader.
-   * @param \Drupal\ginvite\GroupInvitationLoader $invitation_loader
+   * @param GroupInvitationLoader $invitation_loader
    *   Invitations loader service.
    */
   public function __construct(GroupMembershipLoaderInterface $group_membership_loader, GroupInvitationLoader $invitation_loader) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/ginvite/src/Plugin/GroupContentEnabler/GroupInvitation.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ginvite\Plugin\GroupContentEnabler;

+use Drupal\Core\ProxyClass\Config\ConfigInstaller;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\ProxyClass\Config\ConfigInstaller
+   * @var ConfigInstaller
    */
   protected $configInstaller;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/ginvite/src/GroupInvitationLoaderInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Loads a invitation by group and user.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group to load the invitation from.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user to load the invitation for.
    *
    * @return \Drupal\ginvite\GroupInvitation|false
@@ @@
   /**
    * Loads all invitations for a group.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group to load the invitations from.
    * @param string|array $roles
    *   (optional) A group role machine name or a list of group role machine
@@ @@
   /**
    * Loads all invitations for a user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The user to load the invitation for. Leave blank to load the
    *   invitations of the currently logged in user.
    * @param string|array $roles
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/ginvite/src/GroupInvitationLoader.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ginvite;

+use Drupal\group\Entity\Storage\GroupContentStorageInterface;
+use Drupal\group\Entity\GroupContentInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\group\Entity\GroupInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The current user's account object.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Constructs a new GroupTypeController.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, AccountInterface $current_user) {
@@ @@
   /**
    * Gets the group content storage.
    *
-   * @return \Drupal\group\Entity\Storage\GroupContentStorageInterface
+   * @return GroupContentStorageInterface
    *   The group_content storage class.
    */
   protected function groupContentStorage() {
@@ @@
   /**
    * Wraps GroupContent entities in a GroupInvitation object.
    *
-   * @param \Drupal\group\Entity\GroupContentInterface[] $entities
+   * @param GroupContentInterface[] $entities
    *   An array of GroupContent entities to wrap.
    *
    * @return \Drupal\ginvite\GroupInvitation[]
@@ @@
       $properties['group_roles'] = (array) $roles;
     }

-    /** @var \Drupal\group\Entity\GroupContentInterface[] $group_contents */
+    /** @var GroupContentInterface[] $group_contents */
     $group_contents = $this->groupContentStorage()->loadByProperties($properties);
     return $this->wrapGroupContentEntities($group_contents);
   }
@@ @@

     $values['type'] = $group_content_type_ids;

-    /** @var \Drupal\group\Entity\GroupContentInterface[] $group_contents */
+    /** @var GroupContentInterface[] $group_contents */
     $group_contents = $this->groupContentStorage()->loadByProperties($values);
     return $this->wrapGroupContentEntities($group_contents);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/ginvite/src/GroupInvitation.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ginvite;

+use Drupal\group\Entity\GroupInterface;
+use Drupal\user\UserInterface;
+use Drupal\group\Entity\GroupRoleInterface;
+use Drupal\group\Entity\Storage\GroupRoleStorageInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\group\Entity\GroupContentInterface;

@@ @@
   /**
    * The group content entity to wrap.
    *
-   * @var \Drupal\group\Entity\GroupContentInterface
+   * @var GroupContentInterface
    */
   protected $groupContent;

@@ @@
   /**
    * Constructs a new GroupInvitation.
    *
-   * @param \Drupal\group\Entity\GroupContentInterface $group_content
+   * @param GroupContentInterface $group_content
    *   The group content entity representing the invitation.
    *
    * @throws \Exception
@@ @@
   /**
    * Returns the fieldable GroupContent entity for the invitation.
    *
-   * @return \Drupal\group\Entity\GroupContentInterface
+   * @return GroupContentInterface
    *   The group content entity.
    */
   public function getGroupContent() {
@@ @@
   /**
    * Returns the group for the invitation.
    *
-   * @return \Drupal\group\Entity\GroupInterface
+   * @return GroupInterface
    *   The group entity where invite belongs.
    */
   public function getGroup() {
@@ @@
   /**
    * Returns the user for the invitation.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity referenced in invitation.
    */
   public function getUser() {
@@ @@
   /**
    * Returns the group roles for the invitation.
    *
-   * @return \Drupal\group\Entity\GroupRoleInterface[]
+   * @return GroupRoleInterface[]
    *   An array of group roles, keyed by their ID.
    */
   public function getRoles() {
-    /** @var \Drupal\group\Entity\Storage\GroupRoleStorageInterface $group_role_storage */
+    /** @var GroupRoleStorageInterface $group_role_storage */
     $group_role_storage = \Drupal::entityTypeManager()->getStorage('group_role');
     return $group_role_storage->loadByUserAndGroup($this->getUser(), $this->getGroup());
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/ginvite/src/Form/BulkGroupInvitationConfirm.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new BulkGroupInvitationConfirm Form.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/ginvite/src/Form/BulkGroupInvitation.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ginvite\Form;

+use Drupal\group\Entity\Group;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Group.
    *
-   * @var \Drupal\group\Entity\Group
+   * @var Group
    */
   protected $group;

@@ @@
   /**
    * Constructs a new BulkGroupInvitation Form.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\group\GroupMembershipLoaderInterface $group_membership_loader
+   * @param GroupMembershipLoaderInterface $group_membership_loader
    *   The group membership loader.
-   * @param \Drupal\ginvite\GroupInvitationLoader $invitation_loader
+   * @param GroupInvitationLoader $invitation_loader
    *   Invitations loader service.
    */
   public function __construct(
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function cancelForm(array &$form, FormStateInterface $form_state) {
@@ @@
   /**
    * Get array of submited emails.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
   /**
    * Validate emails, display error message if not valid.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   private function validateEmails(FormStateInterface $form_state) {
@@ @@
   /**
    * Validate if emails belong to existing group member,display an error if so.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   private function validateExistingMembers(FormStateInterface $form_state) {
@@ @@
   /**
    * Validate if emails have already been invited, display an error if so.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   private function validateInviteDuplication(FormStateInterface $form_state) {
@@ @@
    *   Error message for one invalid email.
    * @param string $message_plural
    *   Error message for multiple invalid emails.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   private function displayErrorMessage(array $invalid_emails, $message_singular, $message_plural, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/ginvite/src/EventSubscriber/GinviteSubscriber.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Group invitations loader.
    *
-   * @var \Drupal\ginvite\GroupInvitationLoader
+   * @var GroupInvitationLoader
    */
   protected $groupInvitationLoader;

@@ @@
   /**
    * The current user's account object.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * Constructs GinviteSubscriber.
    *
-   * @param \Drupal\ginvite\GroupInvitationLoader $invitation_loader
+   * @param GroupInvitationLoader $invitation_loader
    *   Invitations loader service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
    */
   public function __construct(GroupInvitationLoader $invitation_loader, AccountInterface $current_user, MessengerInterface $messenger, LoggerChannelFactoryInterface $logger_factory) {
@@ @@
   /**
    * Notify user about Pending invitations.
    *
-   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param RequestEvent $event
    *   The RequestEvent to process.
    */
   public function notifyAboutPendingInvitations(RequestEvent $event) {
@@ @@
   /**
    * Unblock users when they are coming from pending invitations.
    *
-   * @param \Drupal\ginvite\Event\UserRegisteredFromInvitationEvent $event
+   * @param UserRegisteredFromInvitationEvent $event
    *   The UserRegisteredFromInvitationEvent to process.
    */
   public function unblockInvitedUsers(UserRegisteredFromInvitationEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/ginvite/src/Event/UserRegisteredFromInvitationEvent.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The group invitation.
    *
-   * @var \Drupal\ginvite\GroupInvitation
+   * @var GroupInvitation
    */
   protected $groupInvitation;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\ginvite\GroupInvitation $group_invitation
+   * @param GroupInvitation $group_invitation
    *   The group invitation.
    */
   public function __construct(GroupInvitation $group_invitation) {
@@ @@
   /**
    * Get the group invitation.
    *
-   * @return \Drupal\ginvite\GroupInvitation
+   * @return GroupInvitation
    *   The group invitation.
    */
   public function getGroupInvitation(): GroupInvitation {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/ginvite/src/Controller/InvitationOperations.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ginvite\Controller;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityFormBuilderInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
   /**
    * Group membership loader service.
    *
-   * @var \Drupal\group\GroupMembershipLoader
+   * @var GroupMembershipLoader
    */
   protected $membershipLoader;

@@ @@
   /**
    * The entity form builder.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   protected $entityFormBuilder;

@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * InvitationOperations constructor.
    *
-   * @param \Drupal\group\GroupMembershipLoader $membershipLoader
+   * @param GroupMembershipLoader $membershipLoader
    *   Group membership loader service.
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(GroupMembershipLoader $membershipLoader, EntityFormBuilderInterface $entity_form_builder, MessengerInterface $messenger) {
@@ @@
   /**
    * Custom access check for the invitation routes.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group entity.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    */
   public function access(AccountInterface $account, GroupInterface $group) {
     // Check if plugin is enabled for this group type.
@@ @@
   /**
    * Create user membership and change invitation status.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   HTTP request.
-   * @param \Drupal\group\Entity\GroupContentInterface $group_content
+   * @param GroupContentInterface $group_content
    *   Invitation entity.
    *
    * @return array
@@ @@
   /**
    * Decline invitation. Change invitation status.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   HTTP request.
-   * @param \Drupal\group\Entity\GroupContentInterface $group_content
+   * @param GroupContentInterface $group_content
    *   Invitation entity.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response object that may be returned by the controller.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function decline(Request $request, GroupContentInterface $group_content) {
     $group_content->set('invitation_status', GroupInvitation::INVITATION_REJECTED)->save();
@@ @@
   /**
    * Checks if this current has access to update invitation.
    *
-   * @param \Drupal\group\Entity\GroupContentInterface $group_content
+   * @param GroupContentInterface $group_content
    *   Invitation entity.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Access check result.
    */
   public function checkAccess(GroupContentInterface $group_content) {
@@ @@
   /**
    * Renders title for the group invite member route.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   Group entity.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Rendered translatable title.
    */
   public function invitationTitle(GroupInterface $group) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/ginvite/ginvite.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\ContentEntityFormInterface;
+use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
+use Drupal\group\Entity\GroupTypeInterface;
 /**
  * @file
  * Contains ginvite.module.
@@ @@
  * Implements hook_form_BASE_FORM_ID_alter() for group_content_form.
  */
 function ginvite_form_group_content_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\Core\Entity\ContentEntityFormInterface $formObject */
+  /** @var ContentEntityFormInterface $formObject */
   $formObject = $form_state->getFormObject();
-  /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
+  /** @var GroupContentInterface $group_content */
   $group_content = $formObject->getEntity();
   $content_plugin = $group_content->getContentPlugin();
   if ($content_plugin->getPluginId() === 'group_invitation') {
@@ @@
   ];

   $invitations = \Drupal::service('ginvite.invitation_loader')->loadByProperties($properties);
-  /** @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher */
+  /** @var ContainerAwareEventDispatcher $event_dispatcher */
   $event_dispatcher = \Drupal::service('event_dispatcher');
   foreach ($invitations as $invitation) {
     $group_content = $invitation->getGroupContent();
@@ @@
 function ginvite_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
   $replacements = [];
   if ($type == 'group_content' && !empty($data[$type])) {
-    /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
+    /** @var GroupContentInterface $group_content */
     $group_content = $data['group_content'];

     foreach ($tokens as $name => $original) {
@@ @@
   }

   $group_type_storage = \Drupal::entityTypeManager()->getStorage('group_type');
-  /** @var \Drupal\group\Entity\GroupTypeInterface $group_type */
+  /** @var GroupTypeInterface $group_type */
   foreach ($group_type_storage->loadMultiple() as $group_type_id => $group_type) {
     // Foreach group type get the configuration for the invites expired time.
     $group_plugin_collection = \Drupal::service('plugin.manager.group_content_enabler')->getInstalled($group_type);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 13 files have been changed by Rector                                      

