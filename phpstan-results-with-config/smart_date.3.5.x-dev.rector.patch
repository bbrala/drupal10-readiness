diff --git a/modules/smart_date_recur/smart_date_recur.install b/modules/smart_date_recur/smart_date_recur.install
index 83157ad..2bf70cf 100644
--- a/modules/smart_date_recur/smart_date_recur.install
+++ b/modules/smart_date_recur/smart_date_recur.install
@@ -5,6 +5,8 @@
  * Install, update and uninstall functions for smart_date_recur module.
  */
 declare(strict_types = 1);
+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
+use Drupal\Core\Entity\EntityFieldManager;
 
 use Drupal\Core\Field\BaseFieldDefinition;
 
@@ -92,9 +94,9 @@ if (!function_exists('db_change_varchar_field')) {
    *   The new length of the field, must be larger than the previous value.
    */
   function db_change_varchar_field($entity_type_id, $field_name, $field_length) {
-    /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $schema_repository */
+    /** @var EntityLastInstalledSchemaRepositoryInterface $schema_repository */
     $schema_repository = \Drupal::service('entity.last_installed_schema.repository');
-    /** @var \Drupal\Core\Entity\EntityFieldManager $entity_field_manager */
+    /** @var EntityFieldManager $entity_field_manager */
     $entity_field_manager = \Drupal::service('entity_field.manager');
     $base_field_definitions = $entity_field_manager->getBaseFieldDefinitions($entity_type_id);
     $schema_repository->setLastInstalledFieldStorageDefinition($base_field_definitions[$field_name]);
diff --git a/modules/smart_date_recur/src/Controller/Instances.php b/modules/smart_date_recur/src/Controller/Instances.php
index 14ff63d..0ae9cc2 100644
--- a/modules/smart_date_recur/src/Controller/Instances.php
+++ b/modules/smart_date_recur/src/Controller/Instances.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\smart_date_recur\Controller;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
 use Drupal\Core\Ajax\ReplaceCommand;
@@ -23,14 +28,14 @@ class Instances extends ControllerBase {
   /**
    * The rrule object whose instances are being listed.
    *
-   * @var \Drupal\smart_date_recur\Entity\SmartDateRule
+   * @var SmartDateRule
    */
   protected $rrule;
 
   /**
    * The entity storage class.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
@@ -44,7 +49,7 @@ class Instances extends ControllerBase {
   /**
    * Information about the entity type.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -341,10 +346,10 @@ class Instances extends ControllerBase {
   /**
    * Use the overrides for this RRule object to update the parent entity.
    *
-   * @param \Drupal\smart_date_recur\Entity\SmartDateRule $rrule
+   * @param SmartDateRule $rrule
    *   The rule whose overrides will be applied to the parent entity.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect to the view of the parent entity.
    */
   public function applyChanges(SmartDateRule $rrule) {
@@ -395,7 +400,7 @@ class Instances extends ControllerBase {
    * @param int|null $oid
    *   SmartDateOverride override id if existing.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function removeInstance(int $index, ?int $oid) {
     $rrule = $this->rrule->id();
@@ -414,12 +419,12 @@ class Instances extends ControllerBase {
   /**
    * Preparing the form for removing a rule instance via Ajax.
    *
-   * @param \Drupal\smart_date_recur\Entity\SmartDateRule $rrule
+   * @param SmartDateRule $rrule
    *   The rule object.
    * @param int $index
    *   Index of the instance to remove.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response object.
    */
   public function removeAjax(SmartDateRule $rrule, int $index) {
@@ -437,12 +442,12 @@ class Instances extends ControllerBase {
   /**
    * Preparing output of instance listing either modal/Ajax or default.
    *
-   * @param \Drupal\smart_date_recur\Entity\SmartDateRule $rrule
+   * @param SmartDateRule $rrule
    *   The rule object.
    * @param bool $modal
    *   Whether or not to use a modal for display.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   The AJAX response object.
    */
   public function listInstances(SmartDateRule $rrule, bool $modal = FALSE) {
@@ -464,16 +469,16 @@ class Instances extends ControllerBase {
   /**
    * Reverting a rule instance in an Ajax confirm dialog.
    *
-   * @param \Drupal\smart_date_recur\Entity\SmartDateOverride $entity
+   * @param SmartDateOverride $entity
    *   The override entity to remove.
    * @param bool $confirm
    *   Whether or not the removal has been confirmed.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revertAjax(SmartDateOverride $entity, bool $confirm) {
     if ($confirm) {
@@ -496,12 +501,12 @@ class Instances extends ControllerBase {
   /**
    * Preparing the form for rescheduling a rule instance via Ajax.
    *
-   * @param \Drupal\smart_date_recur\Entity\SmartDateRule $rrule
+   * @param SmartDateRule $rrule
    *   The rule object.
    * @param string $index
    *   Index of the instance to override.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response object.
    */
   public function reschedule(SmartDateRule $rrule, string $index) {
@@ -516,10 +521,10 @@ class Instances extends ControllerBase {
   /**
    * Revert instance by deleting the override.
    *
-   * @param \Drupal\smart_date_recur\Entity\SmartDateOverride $entity
+   * @param SmartDateOverride $entity
    *   The override entity to remove.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function revertInstance(SmartDateOverride $entity) {
     $entity->delete();
@@ -528,7 +533,7 @@ class Instances extends ControllerBase {
   /**
    * Setting the SmartDateRule on the controller.
    *
-   * @param \Drupal\smart_date_recur\Entity\SmartDateRule $rrule
+   * @param SmartDateRule $rrule
    *   The rule object.
    */
   public function setSmartDateRule(SmartDateRule $rrule) {
diff --git a/modules/smart_date_recur/src/Entity/SmartDateRule.php b/modules/smart_date_recur/src/Entity/SmartDateRule.php
index 584171f..071412f 100644
--- a/modules/smart_date_recur/src/Entity/SmartDateRule.php
+++ b/modules/smart_date_recur/src/Entity/SmartDateRule.php
@@ -878,7 +878,7 @@ class SmartDateRule extends ContentEntityBase {
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
diff --git a/modules/smart_date_recur/src/Form/SmartDateOverrideDeleteForm.php b/modules/smart_date_recur/src/Form/SmartDateOverrideDeleteForm.php
index 015f383..1db9d43 100644
--- a/modules/smart_date_recur/src/Form/SmartDateOverrideDeleteForm.php
+++ b/modules/smart_date_recur/src/Form/SmartDateOverrideDeleteForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\smart_date_recur\Form;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\smart_date_recur\Entity\SmartDateRule;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -43,10 +45,10 @@ class SmartDateOverrideDeleteForm extends ContentEntityConfirmFormBase {
     // @todo Delete override entity, if it exists.
     $this->entity
       ->delete();
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager */
+    /** @var EntityTypeManagerInterface $entityTypeManager */
     $entityTypeManager = \Drupal::service('entity_type.manager');
     $rrid = $this->entity->rrule->getString();
-    /** @var \Drupal\smart_date_recur\Entity\SmartDateRule $rrule */
+    /** @var SmartDateRule $rrule */
     $rrule = $entityTypeManager->getStorage('smart_date_rule')->load($rrid);
     $instanceController = new Instances();
     // Force refresh of parent entity.
diff --git a/modules/smart_date_recur/src/Form/SmartDateOverrideForm.php b/modules/smart_date_recur/src/Form/SmartDateOverrideForm.php
index 9b8e7bd..1afd55a 100644
--- a/modules/smart_date_recur/src/Form/SmartDateOverrideForm.php
+++ b/modules/smart_date_recur/src/Form/SmartDateOverrideForm.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\smart_date_recur\Form;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\smart_date_recur\Entity\SmartDateRule;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\PrependCommand;
 use Drupal\Core\Ajax\RemoveCommand;
@@ -133,14 +138,14 @@ class SmartDateOverrideForm extends FormBase {
    *
    * @param array $form
    *   The render array of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state to submit.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The return value of the AJAX submission.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function ajaxSubmit(array &$form, FormStateInterface $form_state) {
     $response = new AjaxResponse();
@@ -152,9 +157,9 @@ class SmartDateOverrideForm extends FormBase {
       return $response;
     }
     $form_state->disableRedirect();
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager */
+    /** @var EntityTypeManagerInterface $entityTypeManager */
     $entityTypeManager = \Drupal::service('entity_type.manager');
-    /** @var \Drupal\smart_date_recur\Entity\SmartDateRule $rrule */
+    /** @var SmartDateRule $rrule */
     $rrule = $entityTypeManager->getStorage('smart_date_rule')->load($form_state->getValue('rrule'));
     $instanceController = new Instances();
     $instanceController->setSmartDateRule($rrule);
@@ -171,9 +176,9 @@ class SmartDateOverrideForm extends FormBase {
 
     $this->override($form_state);
     if (!isset($form['ajaxcancel'])) {
-      /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager */
+      /** @var EntityTypeManagerInterface $entityTypeManager */
       $entityTypeManager = \Drupal::service('entity_type.manager');
-      /** @var \Drupal\smart_date_recur\Entity\SmartDateRule $rrule */
+      /** @var SmartDateRule $rrule */
       $rrule = $entityTypeManager->getStorage('smart_date_rule')->load($form_state->getValue('rrule'));
       $instanceController = new Instances();
       // Force refresh of parent entity.
@@ -188,10 +193,10 @@ class SmartDateOverrideForm extends FormBase {
   /**
    * Create or updating an override entity, this means overriding one rule item.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The provided form values.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function override(FormStateInterface $form_state) {
     if (!empty($form_state->getValue('oid'))) {
diff --git a/modules/smart_date_recur/src/Form/SmartDateRemoveInstanceForm.php b/modules/smart_date_recur/src/Form/SmartDateRemoveInstanceForm.php
index 7166edc..bbaf836 100644
--- a/modules/smart_date_recur/src/Form/SmartDateRemoveInstanceForm.php
+++ b/modules/smart_date_recur/src/Form/SmartDateRemoveInstanceForm.php
@@ -19,7 +19,7 @@ class SmartDateRemoveInstanceForm extends ConfirmFormBase {
   /**
    * ID of the rrule being used.
    *
-   * @var \Drupal\smart_date_recur\Entity\SmartDateRule
+   * @var SmartDateRule
    */
   protected $rrule;
 
@@ -72,10 +72,10 @@ class SmartDateRemoveInstanceForm extends ConfirmFormBase {
    *
    * @param array $form
    *   The form values being submitted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state being submitted.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response from the AJAX form submit.
    */
   public function ajaxSubmit(array &$form, FormStateInterface $form_state) {
diff --git a/smart_date.post_update.php b/smart_date.post_update.php
index e4ad419..6ede489 100644
--- a/smart_date.post_update.php
+++ b/smart_date.post_update.php
@@ -48,7 +48,7 @@ function smart_date_post_update_translatable_config() {
   }
 
   // Obtain configuration from yaml files.
-  $config_path = drupal_get_path('module', 'smart_date') . '/config/install/';
+  $config_path = \Drupal::service('extension.list.module')->getPath('smart_date') . '/config/install/';
   $source      = new FileStorage($config_path);
 
   // Load the provided default entities.
diff --git a/src/Entity/SmartDateFormatHtmlRouteProvider.php b/src/Entity/SmartDateFormatHtmlRouteProvider.php
index 3060d47..70522fb 100644
--- a/src/Entity/SmartDateFormatHtmlRouteProvider.php
+++ b/src/Entity/SmartDateFormatHtmlRouteProvider.php
@@ -32,10 +32,10 @@ class SmartDateFormatHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/Form/SmartDateFormatDeleteForm.php b/src/Form/SmartDateFormatDeleteForm.php
index be3ae4e..edda211 100644
--- a/src/Form/SmartDateFormatDeleteForm.php
+++ b/src/Form/SmartDateFormatDeleteForm.php
@@ -16,14 +16,14 @@ class SmartDateFormatDeleteForm extends EntityDeleteForm {
   /**
    * The smart date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs an SmartDateFormatDeleteForm object.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(DateFormatterInterface $date_formatter) {
diff --git a/src/Form/SmartDateFormatForm.php b/src/Form/SmartDateFormatForm.php
index 5fba9fd..6879434 100644
--- a/src/Form/SmartDateFormatForm.php
+++ b/src/Form/SmartDateFormatForm.php
@@ -19,23 +19,23 @@ class SmartDateFormatForm extends EntityForm {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The date format storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $smartDateFormatStorage;
 
   /**
    * Constructs a new date format form.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date service.
-   * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $smart_date_format_storage
+   * @param ConfigEntityStorageInterface $smart_date_format_storage
    *   The smart date format storage.
    */
   public function __construct(DateFormatterInterface $date_formatter, ConfigEntityStorageInterface $smart_date_format_storage) {
diff --git a/src/Form/SmartDateFormatSettingsForm.php b/src/Form/SmartDateFormatSettingsForm.php
index ae55107..cb32f5c 100644
--- a/src/Form/SmartDateFormatSettingsForm.php
+++ b/src/Form/SmartDateFormatSettingsForm.php
@@ -27,7 +27,7 @@ class SmartDateFormatSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -46,7 +46,7 @@ class SmartDateFormatSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Plugin/Field/FieldFormatter/SmartDatePlainFormatter.php b/src/Plugin/Field/FieldFormatter/SmartDatePlainFormatter.php
index f0be3db..52a6eab 100644
--- a/src/Plugin/Field/FieldFormatter/SmartDatePlainFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/SmartDatePlainFormatter.php
@@ -46,9 +46,9 @@ class SmartDatePlainFormatter extends DateTimePlainFormatter {
       $item->start_time = isset($items[$delta]->value) ? DrupalDateTime::createFromTimestamp($items[$delta]->value) : '';
       $item->end_time = isset($items[$delta]->end_value) ? DrupalDateTime::createFromTimestamp($items[$delta]->end_value) : '';
       if (!empty($item->start_time) && !empty($item->end_time)) {
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $start_time */
+        /** @var DrupalDateTime $start_time */
         $start_time = $item->start_time;
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $end_time */
+        /** @var DrupalDateTime $end_time */
         $end_time = $item->end_time;
 
         if ($start_time->getTimestamp() !== $end_time->getTimestamp()) {
diff --git a/src/Plugin/Field/FieldWidget/SmartDateDefaultWidget.php b/src/Plugin/Field/FieldWidget/SmartDateDefaultWidget.php
index 0161614..f599473 100644
--- a/src/Plugin/Field/FieldWidget/SmartDateDefaultWidget.php
+++ b/src/Plugin/Field/FieldWidget/SmartDateDefaultWidget.php
@@ -27,7 +27,7 @@ class SmartDateDefaultWidget extends SmartDateWidgetBase implements ContainerFac
   /**
    * The date format storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $dateStorage;
 
diff --git a/src/Plugin/Field/FieldWidget/SmartDateWidgetBase.php b/src/Plugin/Field/FieldWidget/SmartDateWidgetBase.php
index f09faef..4bcc665 100644
--- a/src/Plugin/Field/FieldWidget/SmartDateWidgetBase.php
+++ b/src/Plugin/Field/FieldWidget/SmartDateWidgetBase.php
@@ -121,13 +121,13 @@ class SmartDateWidgetBase extends DateTimeWidgetBase {
     }
     elseif ($field_type == 'daterange') {
       if ($items[$delta]->start_date) {
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $start_date */
+        /** @var DrupalDateTime $start_date */
         $start_date = $items[$delta]->start_date;
         $values['start'] = $this->createNormalizedDefaultValue($start_date, $element['value']['#date_timezone']);
       }
 
       if ($items[$delta]->end_date) {
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $end_date */
+        /** @var DrupalDateTime $end_date */
         $end_date = $items[$delta]->end_date;
         $values['end'] = $this->createNormalizedDefaultValue($end_date, $element['value']['#date_timezone']);
       }
@@ -346,7 +346,7 @@ class SmartDateWidgetBase extends DateTimeWidgetBase {
   /**
    * Conditionally convert a DrupalDateTime object to a timestamp.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $time
+   * @param DrupalDateTime $time
    *   The time to be converted.
    * @param DateTimezone|null $timezone
    *   An optional timezone to use for conversion.
@@ -362,7 +362,7 @@ class SmartDateWidgetBase extends DateTimeWidgetBase {
   /**
    * Conditionally convert a DrupalDateTime object to a timestamp.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime|null $time
+   * @param DrupalDateTime|null $time
    *   The time to be converted.
    * @param DateTimezone|null $timezone
    *   An optional timezone to use for conversion.
@@ -381,7 +381,7 @@ class SmartDateWidgetBase extends DateTimeWidgetBase {
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -568,7 +568,7 @@ class SmartDateWidgetBase extends DateTimeWidgetBase {
    * @param string $timezone
    *   A configured timezone for the field, if set.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   A date object for use as a default value in a field widget.
    */
   protected function createNormalizedDefaultValue($date, $timezone) {
