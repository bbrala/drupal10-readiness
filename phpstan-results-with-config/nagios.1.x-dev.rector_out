modules/contrib/nagios/nagios.api.php
modules/contrib/nagios/nagios.drush.inc
modules/contrib/nagios/nagios.module
modules/contrib/nagios/src/Commands/NagiosCommands.php
modules/contrib/nagios/src/Controller/RequirementsController.php
modules/contrib/nagios/src/Controller/StatuspageController.php
modules/contrib/nagios/src/EventSubscriber/MaintenanceModeSubscriber.php
modules/contrib/nagios/src/Form/IgnoredModulesForm.php
modules/contrib/nagios/src/Form/SettingsForm.php
modules/contrib/nagios/src/Plugin/migrate/source/NagiosDynamicSettings.php
modules/contrib/nagios/tests/modules/nagios_hook_test_module/nagios_hook_test_module.module
modules/contrib/nagios/tests/phpstan-bootstrap.php
modules/contrib/nagios/tests/src/Functional/SettingsFormTest.php
modules/contrib/nagios/tests/src/Kernel/CustomHookCheckTest.php
modules/contrib/nagios/tests/src/Kernel/MaintenanceModeTest.php
modules/contrib/nagios/tests/src/Kernel/NagiosCheckTest.php
modules/contrib/nagios/tests/src/Kernel/WatchdogCheckTest.php

11 files with changes
=====================

1) modules/contrib/nagios/tests/src/Kernel/WatchdogCheckTest.php:71

    ---------- begin diff ----------
@@ @@
     self::expectWatchdog($expected);
   }

+  /**
+   * @doesNotPerformAssertions
+   */
   public function testFilter() {
     $config = \Drupal::configFactory()->getEditable('nagios.settings');
     $config->set('nagios.limit_watchdog.channel_filter', ['onion']);
@@ @@
     self::expectWatchdog($expected);
   }

+  /**
+   * @doesNotPerformAssertions
+   */
   public function testOrder() {
     $this->getLogger('test')->warning('warning 1');
     sleep(2);
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/nagios/tests/src/Kernel/NagiosCheckTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\nagios\Kernel;

+use Drupal\Core\CronInterface;
 use Drupal\Core\Access\AccessResultNeutral;
 use Drupal\Core\Database\Database;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
@@ @@
     self::assertSame(2, $result1['data']['status'], "Check critical response");

     // run cron
-    /** @var \Drupal\Core\CronInterface $cron */
+    /** @var CronInterface $cron */
     $cron = \Drupal::service('cron');
     $cron->run();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/nagios/tests/src/Kernel/MaintenanceModeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\nagios\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpFoundation\Response;
 use Drupal\Core\Form\FormState;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
 use Drupal\nagios\Controller\StatuspageController;
@@ @@
 use Drupal\system\Form\SiteMaintenanceModeForm;
 use Prophecy\Argument;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;

 /**
  * Tests the functionality to monitor cron.
@@ @@
  */
 class MaintenanceModeTest extends EntityKernelTestBase {

+  use ProphecyTrait;
   /**
    * Modules to install.
    *
@@ @@

   public function testSubscriber() {
     $subscriber = new MaintenanceModeSubscriber();
-    $get_response_event = $this->prophesize(GetResponseEvent::class);
+    $get_response_event = $this->prophesize(RequestEvent::class);
     $request = $this->prophesize(Request::class);

     /** @noinspection PhpUndefinedMethodInspection */
@@ @@

     $content = '';
     $set_response_content = function ($args) use (&$content) {
-      /** @var \Symfony\Component\HttpFoundation\Response $response */
+      /** @var Response $response */
       $response = $args[0];
       $content = $response->getContent();
     };
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/nagios/tests/src/Functional/SettingsFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\nagios\Functional;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * A simple user with 'administer site configuration' permission
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $settingsUser;

@@ @@
   /**
    * A user with 'administer nagios ignore' permission
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $modulesUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/nagios/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\nagios\Form;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@

   /**
    * @param string $module
-   * @param \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig $config
+   * @param Config|ImmutableConfig $config
    *
    * @return bool
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/nagios/src/Form/IgnoredModulesForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a ModulesListForm object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/nagios/src/EventSubscriber/MaintenanceModeSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\nagios\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\nagios\Controller\StatuspageController;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 class MaintenanceModeSubscriber implements EventSubscriberInterface {
@@ @@
   /**
    * Make the status page available when Drupal is in maintenance mode.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event to process.
    */
-  public function onKernelRequestMaintenance(GetResponseEvent $event) {
+  public function onKernelRequestMaintenance(RequestEvent $event) {
     $config = \Drupal::config('nagios.settings');
     $request = $event->getRequest();
     $nagios_path = '/' . $config->get('nagios.statuspage.path');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/nagios/src/Controller/StatuspageController.php:33

    ---------- begin diff ----------
@@ @@
    * @param string $id_for_hook
    *   An arbitrary value to pass into the hook_nagios() implementation.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    */
   public function content(string $module_name = '', string $id_for_hook = '') {

@@ @@
   /**
    * Checks if the status page should exist.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    */
   public function access() {
     $config = \Drupal::config('nagios.settings');
@@ @@
    *
    * This function is called globally in nagios.module.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig|null $config
+   * @param ImmutableConfig|null $config
    *   Config to read the values from
    */
   public static function setNagiosStatusConstants(ImmutableConfig $config = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/nagios/src/Controller/RequirementsController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\nagios\Controller;

+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal;
 use Drupal\Core\Config\Config;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
    * @param $project_data
    */
   public function collectRequirements(array $enabled_modules, array $update_status, $project_data) {
-    /** @var \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler */
+    /** @var ModuleHandlerInterface $moduleHandler */
     $moduleHandler = Drupal::service('module_handler');

     foreach ($enabled_modules as $module_name) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/nagios/src/Commands/NagiosCommands.php:79

    ---------- begin diff ----------
@@ @@
    *   module: Module
    * @default-fields check,description
    * @filter-output
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    */
   public function nagios_list() {
     $valid_checks = nagios_functions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/nagios/nagios.module:338

    ---------- begin diff ----------
@@ @@
   /** @var string[] $nagios_ignored_extensions */
   $nagios_ignored_extensions = $nagios_ignored_modules + $nagios_ignored_themes;

-  /** @var array<string, \Drupal\Core\Extension\Extension> $modules_to_check */
+  /** @var array<string, Extension> $modules_to_check */
   $modules_to_check = Drupal::service('extension.list.module')
     ->reset()
     ->getList();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 11 files have been changed by Rector                                      

