modules/contrib/memory_limit_policy/memory_limit_policy.module
modules/contrib/memory_limit_policy/modules/memory_limit_policy_drush/src/Commands/MemoryLimitPolicyCommands.php
modules/contrib/memory_limit_policy/modules/memory_limit_policy_drush/src/Plugin/MemoryLimitConstraint/Drush.php
modules/contrib/memory_limit_policy/modules/memory_limit_policy_path/memory_limit_policy_path.install
modules/contrib/memory_limit_policy/modules/memory_limit_policy_path/src/Plugin/MemoryLimitConstraint/Path.php
modules/contrib/memory_limit_policy/modules/memory_limit_policy_query_param/src/Plugin/MemoryLimitConstraint/QueryParam.php
modules/contrib/memory_limit_policy/modules/memory_limit_policy_role/src/Plugin/MemoryLimitConstraint/Role.php
modules/contrib/memory_limit_policy/modules/memory_limit_policy_route/src/Plugin/MemoryLimitConstraint/AdminRoute.php
modules/contrib/memory_limit_policy/modules/memory_limit_policy_route/src/Plugin/MemoryLimitConstraint/Route.php
modules/contrib/memory_limit_policy/src/Annotation/MemoryLimitConstraint.php
modules/contrib/memory_limit_policy/src/Controller/MemoryLimitPolicyListBuilder.php
modules/contrib/memory_limit_policy/src/Entity/MemoryLimitPolicy.php
modules/contrib/memory_limit_policy/src/EventSubscriber/MemoryLimitPolicySubscriber.php
modules/contrib/memory_limit_policy/src/Form/ConstraintDelete.php
modules/contrib/memory_limit_policy/src/Form/ConstraintEdit.php
modules/contrib/memory_limit_policy/src/Form/MemoryLimitPolicyConstraintForm.php
modules/contrib/memory_limit_policy/src/Form/MemoryLimitPolicyDeleteForm.php
modules/contrib/memory_limit_policy/src/Form/MemoryLimitPolicyDisableForm.php
modules/contrib/memory_limit_policy/src/Form/MemoryLimitPolicyEnableForm.php
modules/contrib/memory_limit_policy/src/Form/MemoryLimitPolicyGeneralForm.php
modules/contrib/memory_limit_policy/src/Form/MemoryLimitPolicySettingsForm.php
modules/contrib/memory_limit_policy/src/MemoryLimitConstraintBase.php
modules/contrib/memory_limit_policy/src/MemoryLimitConstraintInterface.php
modules/contrib/memory_limit_policy/src/MemoryLimitConstraintPluginManager.php
modules/contrib/memory_limit_policy/src/MemoryLimitPolicyInterface.php
modules/contrib/memory_limit_policy/src/Wizard/MemoryLimitPolicyWizard.php
modules/contrib/memory_limit_policy/tests/src/Functional/MemoryLimitPolicyTest.php

17 files with changes
=====================

1) modules/contrib/memory_limit_policy/tests/src/Functional/MemoryLimitPolicyTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\memory_limit_policy\Functional;

+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * Validate header config adds X-Memory-Limit-Memory-* headers.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testDebugHeaders() {
     // Assert the response does not get the headers by default.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/memory_limit_policy/src/MemoryLimitConstraintPluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/memory_limit_policy/src/Form/MemoryLimitPolicyGeneralForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\memory_limit_policy\Form;

+use Drupal\memory_limit_policy\Entity\MemoryLimitPolicy;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $cached_values = $form_state->getTemporaryValue('wizard');
-    /** @var \Drupal\memory_limit_policy\Entity\MemoryLimitPolicy $policy */
+    /** @var MemoryLimitPolicy $policy */
     $policy = $cached_values['memory_limit_policy'];

     $form['memory'] = [
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $cached_values = $form_state->getTemporaryValue('wizard');
-    /** @var \Drupal\memory_limit_policy\Entity\MemoryLimitPolicy $policy */
+    /** @var MemoryLimitPolicy $policy */
     $policy = $cached_values['memory_limit_policy'];
     $policy->set('memory', $form_state->getValue('memory'));
     $policy->set('status', $form_state->getValue('status'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/memory_limit_policy/src/Form/MemoryLimitPolicyDeleteForm.php:13

    ---------- begin diff ----------
@@ @@
 class MemoryLimitPolicyDeleteForm extends EntityConfirmFormBase {

   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/memory_limit_policy/src/Form/MemoryLimitPolicyConstraintForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\memory_limit_policy\Form;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\memory_limit_policy\Entity\MemoryLimitPolicy;
+use Drupal\memory_limit_policy\MemoryLimitConstraintInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Ajax\AjaxResponse;
@@ @@
   /**
    * Plugin manager for constraints.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * Overridden constructor to load the plugin.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param PluginManagerInterface $manager
    *   Plugin manager for constraints.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
    */
   public function __construct(PluginManagerInterface $manager, FormBuilderInterface $form_builder) {
@@ @@
    *
    * @param array $form
    *   Form definition of parent form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   State of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Returns the valid Ajax response from a modal window.
    */
   public function add(array &$form, FormStateInterface $form_state) {
@@ @@
    * @return array
    *   Constraint rows rendered for the policy.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function renderRows($cached_values) {
-    /** @var \Drupal\memory_limit_policy\Entity\MemoryLimitPolicy $policy */
+    /** @var MemoryLimitPolicy $policy */
     $policy = $cached_values['memory_limit_policy'];

     $configured_conditions = [];

     foreach ($policy->getConstraints() as $row => $constraint) {
-      /** @var \Drupal\memory_limit_policy\MemoryLimitConstraintInterface $instance */
+      /** @var MemoryLimitConstraintInterface $instance */
       $instance = $this->manager->createInstance($constraint['id'], $constraint);

       $operations = $this->getOperations('entity.memory_limit_policy.constraint',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/memory_limit_policy/src/Form/ConstraintEdit.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\memory_limit_policy\Form;

+use Drupal\memory_limit_policy\Entity\MemoryLimitPolicy;
+use Drupal\memory_limit_policy\MemoryLimitPolicyInterface;
+use Drupal\memory_limit_policy\MemoryLimitConstraintInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\CloseModalDialogCommand;
@@ @@
   /**
    * Plugin manager of the memory limit constraints.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * Overriding the constructor to load in the plugin manager and tempstore.
    *
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The tempstore of the wizard form.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param PluginManagerInterface $manager
    *   The plugin manager for the memory limit constraints.
    */
   public function __construct(SharedTempStoreFactory $tempstore, PluginManagerInterface $manager) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $constraint_id
    *   Plugin ID of the constraint.
@@ @@
   public function buildForm(array $form, FormStateInterface $form_state, $constraint_id = NULL, $machine_name = NULL) {
     $this->machineName = $machine_name;
     $cached_values = $this->tempstore->get($this->tempstoreId)->get($this->machineName);
-    /** @var \Drupal\memory_limit_policy\Entity\MemoryLimitPolicy $policy */
+    /** @var MemoryLimitPolicy $policy */
     $policy = $cached_values['memory_limit_policy'];
     if (is_numeric($constraint_id)) {
       $id = $constraint_id;
@@ @@
       ],
     ];

-    /** @var \Drupal\memory_limit_policy\MemoryLimitPolicyInterface $instance */
+    /** @var MemoryLimitPolicyInterface $instance */
     $form = $instance->buildConfigurationForm($form, $form_state);

     return $form;
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $cached_values = $this->tempstore->get($this->tempstoreId)->get($this->machineName);
-    /** @var \Drupal\memory_limit_policy\Entity\MemoryLimitPolicy $policy */
+    /** @var MemoryLimitPolicy $policy */
     $policy = $cached_values['memory_limit_policy'];
     $constraints = $policy->getConstraints();
-    /** @var \Drupal\memory_limit_policy\MemoryLimitConstraintInterface $instance */
+    /** @var MemoryLimitConstraintInterface $instance */
     $instance = $form_state->getValue('instance');
     $instance->submitConfigurationForm($form, $form_state);
     if ($form_state->hasValue('id')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/memory_limit_policy/src/Form/ConstraintDelete.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\memory_limit_policy\Form;

+use Drupal\memory_limit_policy\Entity\MemoryLimitPolicy;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\ConfirmFormHelper;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Temp store to maintain state between steps of the wizard.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstore;

@@ @@
   /**
    * Constructor that adds the tempstore from the container for wizard.
    *
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $tempstore
+   * @param SharedTempStoreFactory $tempstore
    *   The tempstore of the wizard form.
    */
   public function __construct(SharedTempStoreFactory $tempstore) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $machine_name
    *   The machine name of the policy.
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $cached_values = $this->tempstore->get($this->tempstoreId)->get($this->machineName);
-    /** @var \Drupal\memory_limit_policy\Entity\MemoryLimitPolicy $policy */
+    /** @var MemoryLimitPolicy $policy */
     $policy = $cached_values['memory_limit_policy'];
     $constraints = $policy->getConstraints();
     unset($constraints[$this->id]);
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion($id = NULL, $cached_values = NULL) {
-    /** @var \Drupal\memory_limit_policy\Entity\MemoryLimitPolicy $memory_limit_policy */
+    /** @var MemoryLimitPolicy $memory_limit_policy */
     $memory_limit_policy = $cached_values['memory_limit_policy'];
     $context = $memory_limit_policy->getConstraint($id);
     return $this->t('Are you sure you want to delete the @label constraint?', [
@@ @@
   /**
    * Returns the route to go to if the user cancels the action.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public function getCancelUrl() {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/memory_limit_policy/src/EventSubscriber/MemoryLimitPolicySubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\memory_limit_policy\EventSubscriber;

+use Drupal\Core\Entity\EntityTypeManager;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\memory_limit_policy\Entity\MemoryLimitPolicy;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;

@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * Constructs a new MemoryLimitPolicySubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Config factory service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager,
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     $request = $event->getRequest();

     $policies = $this->entityTypeManager->getStorage('memory_limit_policy')->loadByProperties(['status' => TRUE]);
@@ @@

     $request->attributes->set('_memory_limit_policy_override', FALSE);

-    /** @var \Drupal\memory_limit_policy\Entity\MemoryLimitPolicy $policy */
+    /** @var MemoryLimitPolicy $policy */
     foreach ($policies as $policy) {
       if ($policy->evaluate()) {
         ini_set('memory_limit', $policy->getMemory());
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $request = $event->getRequest();

     $settings = $this->config->get('memory_limit_policy.settings');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/memory_limit_policy/src/Entity/MemoryLimitPolicy.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\memory_limit_policy\Entity;

+use Drupal\memory_limit_policy\MemoryLimitConstraintInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\memory_limit_policy\MemoryLimitPolicyInterface;

@@ @@
    * @param int $key
    *   The constraint index in constraints list.
    *
-   * @return \Drupal\memory_limit_policy\MemoryLimitConstraintInterface
+   * @return MemoryLimitConstraintInterface
    *   A specific constraint in the policy.
    */
   public function getConstraint($key) {
@@ @@
     foreach ($this->getConstraints() as $constraint) {
       $plugin = \Drupal::service('plugin.manager.memory_limit_policy.memory_limit_constraint');

-      /** @var \Drupal\memory_limit_policy\MemoryLimitConstraintInterface $constraint */
+      /** @var MemoryLimitConstraintInterface $constraint */
       $constraint = $plugin->createInstance($constraint['id'], $constraint);

       if ($constraint->isNegated() ? $constraint->evaluate() : !$constraint->evaluate()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/memory_limit_policy/src/Annotation/MemoryLimitConstraint.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\memory_limit_policy\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the constraint type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description shown to users.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


11) modules/contrib/memory_limit_policy/modules/memory_limit_policy_route/src/Plugin/MemoryLimitConstraint/Route.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Current route.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRoute;

@@ @@
   /**
    * The route admin context to determine whether a route is an admin one.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   protected $adminContext;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $current_route
+   * @param CurrentRouteMatch $current_route
    *   The current route.
-   * @param \Drupal\Core\Routing\AdminContext $admin_context
+   * @param AdminContext $admin_context
    *   The route admin context.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, CurrentRouteMatch $current_route, AdminContext $admin_context) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/memory_limit_policy/modules/memory_limit_policy_route/src/Plugin/MemoryLimitConstraint/AdminRoute.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The route admin context to determine whether a route is an admin one.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   protected $adminContext;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\AdminContext $admin_context
+   * @param AdminContext $admin_context
    *   The route admin context.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AdminContext $admin_context) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/memory_limit_policy/modules/memory_limit_policy_role/src/Plugin/MemoryLimitConstraint/Role.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\memory_limit_policy_role\Plugin\MemoryLimitConstraint;

+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The role storage.
    *
-   * @var \Drupal\user\RoleStorageInterface
+   * @var RoleStorageInterface
    */
   protected $roleStorage;

@@ @@
   /**
    * Proxy for the current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $current_user;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\user\RoleStorageInterface $role_storage
+   * @param RoleStorageInterface $role_storage
    *   The role storage.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user account.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RoleStorageInterface $role_storage, AccountInterface $current_user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/memory_limit_policy/modules/memory_limit_policy_query_param/src/Plugin/MemoryLimitConstraint/QueryParam.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Request stack service.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   private $requestStack;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   Request stack service.
    */
   public function __construct(array $configuration,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/memory_limit_policy/modules/memory_limit_policy_path/src/Plugin/MemoryLimitConstraint/Path.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;

@@ @@
   /**
    * The path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;

@@ @@
   /**
    * An alias manager to find the alias for the current system path.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path.
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The path matcher service.
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager
+   * @param AliasManagerInterface $alias_manager
    *   An alias manager to find the alias for the current system path.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, CurrentPathStack $current_path, PathMatcherInterface $path_matcher, AliasManagerInterface $alias_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/memory_limit_policy/modules/memory_limit_policy_drush/src/Commands/MemoryLimitPolicyCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\memory_limit_policy_drush\Commands;

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\memory_limit_policy\MemoryLimitConstraintInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\memory_limit_policy\Entity\MemoryLimitPolicy;
 use Drush\Commands\DrushCommands;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   private $entityTypeManager;

@@ @@
   /**
    * Constructs a new MemoryLimitPolicySubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ @@
    * This pre-command-event will set the php memory limit for drush command,
    * if there any policy configured for the same.
    *
-   * @param \Symfony\Component\Console\Event\ConsoleCommandEvent $event
+   * @param ConsoleCommandEvent $event
    *   The event.
    *
    * @hook command-event *
@@ @@
       return ($a->getWeight() < $b->getWeight()) ? -1 : 1;
     });

-    /** @var \Drupal\memory_limit_policy\Entity\MemoryLimitPolicy $policy */
+    /** @var MemoryLimitPolicy $policy */
     foreach ($policies as $policy) {
       foreach ($policy->getConstraints() as $constraint) {
         // If the constraint is other than drush, skip to next.
@@ @@

         $plugin = \Drupal::service('plugin.manager.memory_limit_policy.memory_limit_constraint');

-        /** @var \Drupal\memory_limit_policy\MemoryLimitConstraintInterface $constraint */
+        /** @var MemoryLimitConstraintInterface $constraint */
         $constraint = $plugin->createInstance($constraint['id'], $constraint);

         // If the current command is in the policy constraint, then get the
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/memory_limit_policy/memory_limit_policy.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Module file for the Memory Limit Policy module.
@@ @@
  * @param string $id
  *   ID of the memory limit policy entity.
  *
- * @return \Drupal\Core\Entity\EntityInterface
+ * @return EntityInterface
  *   Returns a memory limit policy object.
  */
 function memory_limit_policy_load($id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 17 files have been changed by Rector                                      

