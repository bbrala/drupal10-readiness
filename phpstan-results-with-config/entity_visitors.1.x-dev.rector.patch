diff --git a/entity_visitors.info.yml b/entity_visitors.info.yml
index 1318c5d..d017383 100644
--- a/entity_visitors.info.yml
+++ b/entity_visitors.info.yml
@@ -1,7 +1,6 @@
 name: 'Entity Visitors statistics'
 type: module
 description: 'This modules provides you with blocks to view the users who visited some entity.'
-core: 8.x
 package: 'Custom'
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 configure: entity_visitors.entity_visitiors_config
diff --git a/src/EntityVisitorsAccessControlHandler.php b/src/EntityVisitorsAccessControlHandler.php
index b091f48..b9bcba6 100644
--- a/src/EntityVisitorsAccessControlHandler.php
+++ b/src/EntityVisitorsAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_visitors;
 
+use Drupal\entity_visitors\Entity\EntityVisitorsInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,8 +19,7 @@ class EntityVisitorsAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\entity_visitors\Entity\EntityVisitorsInterface $entity */
-
+    /** @var EntityVisitorsInterface $entity */
     switch ($operation) {
 
       case 'view':
diff --git a/src/EntityVisitorsHtmlRouteProvider.php b/src/EntityVisitorsHtmlRouteProvider.php
index eaa0e74..0d560d7 100644
--- a/src/EntityVisitorsHtmlRouteProvider.php
+++ b/src/EntityVisitorsHtmlRouteProvider.php
@@ -32,10 +32,10 @@ class EntityVisitorsHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/Event/EntityVisitedEvent.php b/src/Event/EntityVisitedEvent.php
index 26ee204..89fb32e 100644
--- a/src/Event/EntityVisitedEvent.php
+++ b/src/Event/EntityVisitedEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\entity_visitors\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * EntityVisted Event Class.
diff --git a/src/EventSubscriber/EntityRouteMatchSubscriber.php b/src/EventSubscriber/EntityRouteMatchSubscriber.php
index 4d1635b..a40d373 100644
--- a/src/EventSubscriber/EntityRouteMatchSubscriber.php
+++ b/src/EventSubscriber/EntityRouteMatchSubscriber.php
@@ -2,11 +2,11 @@
 
 namespace Drupal\entity_visitors\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\entity_visitors\Service\EntityVisitorsManager;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\Component\Datetime\TimeInterface;
 
@@ -18,14 +18,14 @@ class EntityRouteMatchSubscriber implements EventSubscriberInterface {
   /**
    * The manager takes the current visited entity and handle things for you.
    *
-   * @var \Drupal\entity_visitors\Service\EntityVisitorsManager
+   * @var EntityVisitorsManager
    */
   private $entityVisitedManager;
 
   /**
    * Time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
@@ -49,7 +49,7 @@ class EntityRouteMatchSubscriber implements EventSubscriberInterface {
   /**
    * If this was entity view page, then handle this entity.
    */
-  public function updateEntityVisitors(FilterResponseEvent $event) {
+  public function updateEntityVisitors(ResponseEvent $event) {
     // Check https://www.lullabot.com/articles/common-max-age-pitfalls-with-drupal-cache
     if (!$event->isMasterRequest()) {
       return;
diff --git a/src/EventSubscriber/SendMailOnEntityVisitedSubscriber.php b/src/EventSubscriber/SendMailOnEntityVisitedSubscriber.php
index 89d6748..82caedd 100644
--- a/src/EventSubscriber/SendMailOnEntityVisitedSubscriber.php
+++ b/src/EventSubscriber/SendMailOnEntityVisitedSubscriber.php
@@ -16,21 +16,21 @@ class SendMailOnEntityVisitedSubscriber implements EventSubscriberInterface {
   /**
    * A mail manager instance.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   private $mailManager;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * A configuration manager instance.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   private $configManager;
 
diff --git a/src/Form/EntityVisitorsConfig.php b/src/Form/EntityVisitorsConfig.php
index bb9b20c..b0c0357 100644
--- a/src/Form/EntityVisitorsConfig.php
+++ b/src/Form/EntityVisitorsConfig.php
@@ -15,7 +15,7 @@ class EntityVisitorsConfig extends ConfigFormBase {
   /**
    * The RequestStack object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
@@ -31,7 +31,7 @@ class EntityVisitorsConfig extends ConfigFormBase {
   /**
    * EntityVisitorsConfig constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request service.
    */
   public function __construct(RequestStack $requestStack) {
diff --git a/src/Form/EntityVisitorsForm.php b/src/Form/EntityVisitorsForm.php
index 00c7489..b8c4a15 100644
--- a/src/Form/EntityVisitorsForm.php
+++ b/src/Form/EntityVisitorsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_visitors\Form;
 
+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -16,7 +17,7 @@ class EntityVisitorsForm extends ContentEntityForm {
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
 
diff --git a/src/Form/EntityVisitorsSettingsForm.php b/src/Form/EntityVisitorsSettingsForm.php
index 603ecd8..9edbdb5 100644
--- a/src/Form/EntityVisitorsSettingsForm.php
+++ b/src/Form/EntityVisitorsSettingsForm.php
@@ -27,7 +27,7 @@ class EntityVisitorsSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -39,7 +39,7 @@ class EntityVisitorsSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Service/EntityVisitorsManager.php b/src/Service/EntityVisitorsManager.php
index c18e217..63479ba 100644
--- a/src/Service/EntityVisitorsManager.php
+++ b/src/Service/EntityVisitorsManager.php
@@ -20,68 +20,68 @@ class EntityVisitorsManager {
   /**
    * Drupal\Core\Config\ConfigManagerInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   private $currentUser;
 
   /**
    * The matched route.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   private $routeMatch;
 
   /**
    * Time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @var ContainerAwareEventDispatcher
    */
   private $eventDispatcher;
 
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * The entityTypeBundleInfo service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   private $entityTypeBundleInfo;
 
   /**
    * Constructs a new EntityVisitorsManager object.
    *
-   * @param \Drupal\Core\Config\ConfigManagerInterface $configManager
+   * @param ConfigManagerInterface $configManager
    *   Config manager instance.
-   * @param \Drupal\Core\Session\AccountProxy $currentUser
+   * @param AccountProxy $currentUser
    *   Current user.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   Route matcher.
-   * @param \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $eventDispatcher
+   * @param ContainerAwareEventDispatcher $eventDispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager instance.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entityTypeBundleInfo
+   * @param EntityTypeBundleInfo $entityTypeBundleInfo
    *   Entity type bundle info instance to get the bundles.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Time service.
    */
   public function __construct(ConfigManagerInterface $configManager,
@@ -137,7 +137,7 @@ class EntityVisitorsManager {
     // a certain number views or pretty much anything.
     $entityVisitedEvent = new EntityVisitedEvent($visitedEntityId, $visitedEntityType, $entityVisitorId);
     // Dispatch event, an entity was visited!
-    $this->eventDispatcher->dispatch(EntityVisitedEvent::VISITED, $entityVisitedEvent);
+    $this->eventDispatcher->dispatch($entityVisitedEvent, EntityVisitedEvent::VISITED);
 
     $saveLastVisitOnly = $this->configManager->getConfigFactory()
       ->get('entity_visitors.entity_visitors_config')
