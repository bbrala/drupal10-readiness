diff --git a/private_message.api.php b/private_message.api.php
index 63c7aa6..dba9e62 100644
--- a/private_message.api.php
+++ b/private_message.api.php
@@ -12,7 +12,7 @@ use Drupal\Core\Entity\EntityInterface;
  *
  * @param array $build
  *   The render array representing the private message.
- * @param \Drupal\Core\Entity\EntityInterface $privateMessage
+ * @param EntityInterface $privateMessage
  *   The private message entity being rendered.
  * @param string $viewMode
  *   The view mode being rendered on the private message.
diff --git a/private_message.module b/private_message.module
index 9c78311..6816bd7 100644
--- a/private_message.module
+++ b/private_message.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\private_message\Entity\PrivateMessageThreadInterface;
+use Drupal\private_message\Entity\PrivateMessageInterface;
 /**
  * @file
  * Contains hooks for the private message module.
@@ -409,7 +411,7 @@ function template_preprocess_private_message_thread(array &$variables) {
   $variables['view_mode'] = $variables['elements']['#view_mode'];
   // Provide a distinct $teaser boolean.
   $variables['private_message_thread'] = $variables['elements']['#private_message_thread'];
-  /** @var \Drupal\private_message\Entity\PrivateMessageThreadInterface $private_message_thread */
+  /** @var PrivateMessageThreadInterface $private_message_thread */
   $private_message_thread = $variables['private_message_thread'];
   $variables['last_update'] = \Drupal::service('renderer')->render($variables['elements']['updated']);
 
@@ -439,7 +441,7 @@ function template_preprocess_private_message(array &$variables) {
   $variables['view_mode'] = $variables['elements']['#view_mode'];
   // Provide a distinct $teaser boolean.
   $variables['private_message'] = $variables['elements']['#private_message'];
-  /** @var \Drupal\private_message\Entity\PrivateMessageInterface $private_message */
+  /** @var PrivateMessageInterface $private_message */
   $private_message = $variables['private_message'];
 
   $variables['url'] = $private_message->toUrl('canonical', [
diff --git a/private_message.theme.inc b/private_message.theme.inc
index 0d92faa..084ecb6 100644
--- a/private_message.theme.inc
+++ b/private_message.theme.inc
@@ -12,7 +12,7 @@ use Drupal\Core\Url;
  * Implements hook_preprocess_private_message_notification_block().
  */
 function template_preprocess_private_message_notification_block(&$vars) {
-  $vars['notification_image_path'] = base_path() . drupal_get_path('module', 'private_message') . '/images/private-message-notification-icon.png';
+  $vars['notification_image_path'] = base_path() . \Drupal::service('extension.list.module')->getPath('private_message') . '/images/private-message-notification-icon.png';
   $link_title = $vars['new_message_count'] ? \Drupal::service('string_translation')->formatPlural($vars['new_message_count'], 'You have 1 unread private message', 'You have @count unread private messages') : t('You have no unread private messages');
   $url = Url::fromRoute('private_message.private_message_page', [], ['attributes' => ['title' => $link_title, 'class' => ['private-message-page-link']]]);
   $count = $vars['new_message_count'] > 99 ? '99+' : $vars['new_message_count'];
diff --git a/private_message.tokens.inc b/private_message.tokens.inc
index aff23c8..3feda5c 100644
--- a/private_message.tokens.inc
+++ b/private_message.tokens.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\private_message\Entity\PrivateMessageInterface;
 /**
  * @file
  * Provides tokens for the Private Message module.
@@ -107,7 +108,7 @@ function private_message_tokens($type, $tokens, array $data, array $options, Bub
   if ($type == 'private_message' && !empty($data['private_message'])) {
 
 
-    /** @var \Drupal\private_message\Entity\PrivateMessageInterface $private_message */
+    /** @var PrivateMessageInterface $private_message */
     $private_message = $data['private_message'];
 
     foreach ($tokens as $name => $original) {
diff --git a/src/Annotation/PrivateMessageConfigForm.php b/src/Annotation/PrivateMessageConfigForm.php
index fb28869..eaa404b 100644
--- a/src/Annotation/PrivateMessageConfigForm.php
+++ b/src/Annotation/PrivateMessageConfigForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\private_message\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class PrivateMessageConfigForm extends Plugin {
   /**
    * The name of the form plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Cache/Context/PrivateMessageThreadCacheContext.php b/src/Cache/Context/PrivateMessageThreadCacheContext.php
index a73332a..1138a9f 100644
--- a/src/Cache/Context/PrivateMessageThreadCacheContext.php
+++ b/src/Cache/Context/PrivateMessageThreadCacheContext.php
@@ -16,14 +16,14 @@ class PrivateMessageThreadCacheContext implements CacheContextInterface {
   /**
    * The current route matcher.
    *
-   * @var \Drupal\Core\Routing\ResettableStackedRouteMatchInterface
+   * @var ResettableStackedRouteMatchInterface
    */
   protected $currentRouteMatcher;
 
   /**
    * Constructs a new UserCacheContextBase class.
    *
-   * @param \Drupal\Core\Routing\ResettableStackedRouteMatchInterface $currentRouteMatcher
+   * @param ResettableStackedRouteMatchInterface $currentRouteMatcher
    *   The current route matcher.
    */
   public function __construct(ResettableStackedRouteMatchInterface $currentRouteMatcher) {
diff --git a/src/Commands/PrivateMessageCommands.php b/src/Commands/PrivateMessageCommands.php
index 397f146..9826436 100644
--- a/src/Commands/PrivateMessageCommands.php
+++ b/src/Commands/PrivateMessageCommands.php
@@ -25,23 +25,23 @@ class PrivateMessageCommands extends DrushCommands {
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageService
+   * @var PrivateMessageService
    */
   protected $privateMessageService;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a  object.
    *
-   * @param \Drupal\private_message\Service\PrivateMessageService $privateMessageService
+   * @param PrivateMessageService $privateMessageService
    *   The private message service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(
diff --git a/src/Controller/AjaxController.php b/src/Controller/AjaxController.php
index dfe23d0..2763624 100644
--- a/src/Controller/AjaxController.php
+++ b/src/Controller/AjaxController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\private_message\Controller;
 
+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
@@ -31,66 +32,66 @@ class AjaxController extends ControllerBase implements AjaxControllerInterface {
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The private message thread manager.
    *
-   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage
+   * @var SqlContentEntityStorage
    */
   protected $threadManager;
 
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   protected $privateMessageService;
 
   /**
    * Constructs a AjaxController object.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\private_message\Service\PrivateMessageServiceInterface $privateMessageService
+   * @param PrivateMessageServiceInterface $privateMessageService
    *   The private message service.
    */
   public function __construct(
@@ -199,7 +200,7 @@ class AjaxController extends ControllerBase implements AjaxControllerInterface {
   /**
    * Creates an Ajax Command containing new private message.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function getNewPrivateMessages(AjaxResponse $response) {
@@ -236,7 +237,7 @@ class AjaxController extends ControllerBase implements AjaxControllerInterface {
   /**
    * Create an Ajax Command containing old private messages.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function getOldPrivateMessages(AjaxResponse $response) {
@@ -270,7 +271,7 @@ class AjaxController extends ControllerBase implements AjaxControllerInterface {
   /**
    * Creates and Ajax Command containing old threads for the inbox.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function getOldInboxThreads(AjaxResponse $response) {
@@ -299,7 +300,7 @@ class AjaxController extends ControllerBase implements AjaxControllerInterface {
   /**
    * Creates an Ajax Command with new threads for the private message inbox.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function getNewInboxThreads(AjaxResponse $response) {
@@ -338,7 +339,7 @@ class AjaxController extends ControllerBase implements AjaxControllerInterface {
   /**
    * Create Ajax Command determining whether a given username is valid.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function validatePrivateMessageMemberUsername(AjaxResponse $response) {
@@ -354,7 +355,7 @@ class AjaxController extends ControllerBase implements AjaxControllerInterface {
    * Only messages created since the current user last visited the private
    * message page are shown.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function getNewUnreadThreadCount(AjaxResponse $response) {
@@ -366,7 +367,7 @@ class AjaxController extends ControllerBase implements AjaxControllerInterface {
   /**
    * Load a private message thread to be dynamically inserted into the page.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function loadThread(AjaxResponse $response) {
diff --git a/src/Controller/AjaxControllerInterface.php b/src/Controller/AjaxControllerInterface.php
index edc812b..9c81cf7 100644
--- a/src/Controller/AjaxControllerInterface.php
+++ b/src/Controller/AjaxControllerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\private_message\Controller;
 
+use Drupal\Core\Ajax\AjaxResponse;
 /**
  * Interface for the Private Message module's AjaxController.
  */
@@ -13,7 +14,7 @@ interface AjaxControllerInterface {
    * @param string $op
    *   The type of data to build for the response.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response
    */
   public function ajaxCallback($op);
@@ -21,7 +22,7 @@ interface AjaxControllerInterface {
   /**
    * Create AJAX response containing usernames for an autocomplete callback.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response
    */
   public function privateMessageMembersAutocomplete();
diff --git a/src/Controller/PrivateMessageController.php b/src/Controller/PrivateMessageController.php
index 4ea51fe..a6e824a 100644
--- a/src/Controller/PrivateMessageController.php
+++ b/src/Controller/PrivateMessageController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\private_message\Controller;
 
+use Drupal\user\UserStorageInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBuilderInterface;
@@ -19,57 +20,57 @@ class PrivateMessageController extends ControllerBase implements PrivateMessageC
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The form builder interface.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;
 
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   protected $privateMessageService;
 
   /**
    * The user manager service.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userManager;
 
   /**
    * Constructs a PrivateMessageForm object.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager service.
-   * @param \Drupal\Core\Form\FormBuilderInterface $formBuilder
+   * @param FormBuilderInterface $formBuilder
    *   The form builder service.
-   * @param \Drupal\user\UserDataInterface $userData
+   * @param UserDataInterface $userData
    *   The user data service.
-   * @param \Drupal\private_message\Service\PrivateMessageServiceInterface $privateMessageService
+   * @param PrivateMessageServiceInterface $privateMessageService
    *   The private message service.
    */
   public function __construct(AccountProxyInterface $currentUser, EntityTypeManagerInterface $entityTypeManager, FormBuilderInterface $formBuilder, UserDataInterface $userData, PrivateMessageServiceInterface $privateMessageService) {
diff --git a/src/Entity/Access/PrivateMessageAccessControlHandler.php b/src/Entity/Access/PrivateMessageAccessControlHandler.php
index c5081b7..a43ce58 100644
--- a/src/Entity/Access/PrivateMessageAccessControlHandler.php
+++ b/src/Entity/Access/PrivateMessageAccessControlHandler.php
@@ -21,20 +21,20 @@ class PrivateMessageAccessControlHandler extends EntityAccessControlHandler impl
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   protected $privateMessageService;
 
   /**
    * Costructs a PrivateMessageThreadAccessControlHandler entity.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The context handler service.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The context repository service.
-   * @param \Drupal\private_message\Service\PrivateMessageServiceInterface $privateMessageService
+   * @param PrivateMessageServiceInterface $privateMessageService
    *   The private message service.
    */
   public function __construct(EntityTypeInterface $entity_type, ContextHandlerInterface $context_handler, ContextRepositoryInterface $context_repository, PrivateMessageServiceInterface $privateMessageService) {
diff --git a/src/Entity/Builder/PrivateMessageThreadViewBuilder.php b/src/Entity/Builder/PrivateMessageThreadViewBuilder.php
index e606424..ed20ee5 100644
--- a/src/Entity/Builder/PrivateMessageThreadViewBuilder.php
+++ b/src/Entity/Builder/PrivateMessageThreadViewBuilder.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\private_message\Entity\Builder;
 
+use Drupal\Core\Config\Config;
+use Drupal\Core\DependencyInjection\ClassResolverInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -23,52 +27,52 @@ class PrivateMessageThreadViewBuilder extends EntityViewBuilder {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * The class resolver service.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The form builder service.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * Constructs a PrivateMessageThreadViewBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   The entity type.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
-   * @param \Drupal\Core\Theme\Registry $themeRegistry
+   * @param Registry $themeRegistry
    *   The theme register.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(
diff --git a/src/Entity/Builder/PrivateMessageViewBuilder.php b/src/Entity/Builder/PrivateMessageViewBuilder.php
index 108ba8a..6133954 100644
--- a/src/Entity/Builder/PrivateMessageViewBuilder.php
+++ b/src/Entity/Builder/PrivateMessageViewBuilder.php
@@ -21,24 +21,24 @@ class PrivateMessageViewBuilder extends EntityViewBuilder {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * Constructs a PrivateMessageViewBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Theme\Registry $themeRegistry
+   * @param Registry $themeRegistry
    *   The theme registry.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(
diff --git a/src/Entity/PrivateMessageThreadInterface.php b/src/Entity/PrivateMessageThreadInterface.php
index 20c6e4f..ff3f89b 100644
--- a/src/Entity/PrivateMessageThreadInterface.php
+++ b/src/Entity/PrivateMessageThreadInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\private_message\Entity;
 
+use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Session\AccountInterface;
 
@@ -18,7 +19,7 @@ interface PrivateMessageThreadInterface extends ContentEntityInterface {
    * @param \Drupal\user\AccountInterface $account
    *   The account to be set as a member of the private message thread.
    *
-   * @return \Drupal\private_message\Entity\PrivateMessageInterface
+   * @return PrivateMessageInterface
    *   Returns the class itself to allow for chaining.
    */
   public function addMember(AccountInterface $account);
@@ -30,7 +31,7 @@ interface PrivateMessageThreadInterface extends ContentEntityInterface {
    *   The ID of the account to be set as a member of the private message
    *   thread.
    *
-   * @return \Drupal\private_message\Entity\PrivateMessageInterface
+   * @return PrivateMessageInterface
    *   Returns the class itself to allow for chaining.
    */
   public function addMemberById($id);
@@ -60,10 +61,10 @@ interface PrivateMessageThreadInterface extends ContentEntityInterface {
   /**
    * Add a private message to the list of messages in this thread.
    *
-   * @param Drupal\private_message\Entity\PrivateMessageInterface $privateMessage
+   * @param PrivateMessageInterface $privateMessage
    *   The private message to be added to the thread.
    *
-   * @return Drupal\private_message\Entity\PrivateMessageThread
+   * @return PrivateMessageThread
    *   The private message thread.
    */
   public function addMessage(PrivateMessageInterface $privateMessage);
@@ -79,7 +80,7 @@ interface PrivateMessageThreadInterface extends ContentEntityInterface {
   /**
    * Retrieve all private messages attached to this thread.
    *
-   * @return \Drupal\Core\Field\EntityReferenceFieldItemListInterface
+   * @return EntityReferenceFieldItemListInterface
    *   A list of private messages attached to this thread
    */
   public function getMessages();
@@ -102,7 +103,7 @@ interface PrivateMessageThreadInterface extends ContentEntityInterface {
   /**
    * Add a history record to the current thread for the given user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user whose access time should be updated.
    */
   public function addHistoryRecord(AccountInterface $account);
@@ -110,7 +111,7 @@ interface PrivateMessageThreadInterface extends ContentEntityInterface {
   /**
    * Get the last access timestamp for the given user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user whose last access time should be retrieved.
    *
    * @return int
@@ -121,7 +122,7 @@ interface PrivateMessageThreadInterface extends ContentEntityInterface {
   /**
    * Update the last access time for the given user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user whose last access time should be updated.
    */
   public function updateLastAccessTime(AccountInterface $account);
@@ -129,7 +130,7 @@ interface PrivateMessageThreadInterface extends ContentEntityInterface {
   /**
    * Get the last delete timestamp for the given user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user whose last delete time should be retrieved.
    *
    * @return int
@@ -141,7 +142,7 @@ interface PrivateMessageThreadInterface extends ContentEntityInterface {
   /**
    * Update the last delete time for the given user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user whose last delete time should be updated.
    */
   public function updateLastDeleteTime(AccountInterface $account);
@@ -168,10 +169,10 @@ interface PrivateMessageThreadInterface extends ContentEntityInterface {
    * Only messages created after the last time the user deleted the thread will
    * be shown. If they have never deleted the thread, all messages are returned.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for whom private messages should be returned.
    *
-   * @return Drupal\private_message\Entity\PrivateMessage[]
+   * @return PrivateMessage[]
    *   An array of private messages
    */
   public function filterUserDeletedMessages(AccountInterface $account);
diff --git a/src/Form/AdminUninstallForm.php b/src/Form/AdminUninstallForm.php
index 1b369d4..ff8703f 100644
--- a/src/Form/AdminUninstallForm.php
+++ b/src/Form/AdminUninstallForm.php
@@ -16,14 +16,14 @@ class AdminUninstallForm extends ConfirmFormBase {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a new AdminUninstallForm object.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(MessengerInterface $messenger) {
diff --git a/src/Form/ConfigForm.php b/src/Form/ConfigForm.php
index 0071158..b483374 100644
--- a/src/Form/ConfigForm.php
+++ b/src/Form/ConfigForm.php
@@ -24,9 +24,9 @@ class ConfigForm extends ConfigFormBase {
   /**
    * Constructs a PrivateMessageForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager service.
    * @param \Drupal\private_message\PluginManager\PrivateMessageConfigFormManager $privateMessageConfigFormManager
    *   The private message config form plugin manager.
diff --git a/src/Form/PrivateMessageForm.php b/src/Form/PrivateMessageForm.php
index c48b68f..976f881 100644
--- a/src/Form/PrivateMessageForm.php
+++ b/src/Form/PrivateMessageForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\private_message\Form;
 
+use Drupal\user\UserStorageInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
@@ -40,81 +41,81 @@ class PrivateMessageForm extends ContentEntityForm {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The typed data manager service.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;
 
   /**
    * The private message configuration.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   protected $privateMessageService;
 
   /**
    * The private message thread manager service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageThreadManagerInterface
+   * @var PrivateMessageThreadManagerInterface
    */
   protected $privateMessageThreadManager;
 
   /**
    * The user manager service.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userManager;
 
   /**
    * Constructs a PrivateMessageForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typedDataManager
+   * @param TypedDataManagerInterface $typedDataManager
    *   The typed data manager service.
-   * @param \Drupal\user\UserDataInterface $userData
+   * @param UserDataInterface $userData
    *   The user data service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory service.
-   * @param \Drupal\private_message\Service\PrivateMessageServiceInterface $privateMessageService
+   * @param PrivateMessageServiceInterface $privateMessageService
    *   The private message service.
-   * @param \Drupal\private_message\Service\PrivateMessageThreadManagerInterface $privateMessageThreadManager
+   * @param PrivateMessageThreadManagerInterface $privateMessageThreadManager
    *   The private message thread manager service.
    */
   public function __construct(EntityRepositoryInterface $entityRepository, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time, EntityTypeManagerInterface $entityTypeManager, AccountProxyInterface $currentUser, TypedDataManagerInterface $typedDataManager, UserDataInterface $userData, ConfigFactoryInterface $configFactory, PrivateMessageServiceInterface $privateMessageService, PrivateMessageThreadManagerInterface $privateMessageThreadManager) {
@@ -316,7 +317,7 @@ class PrivateMessageForm extends ContentEntityForm {
   public function save(array $form, FormStateInterface $formState) {
     $status = parent::save($form, $formState);
 
-    /** @var \Drupal\private_message\Entity\PrivateMessageThreadInterface $private_message_thread */
+    /** @var PrivateMessageThreadInterface $private_message_thread */
     $private_message_thread = $formState->get('thread');
     if (!$private_message_thread) {
       // Generate an array containing the members of the thread.
diff --git a/src/Mapper/PrivateMessageMapper.php b/src/Mapper/PrivateMessageMapper.php
index b90f31e..3b97d92 100644
--- a/src/Mapper/PrivateMessageMapper.php
+++ b/src/Mapper/PrivateMessageMapper.php
@@ -15,7 +15,7 @@ class PrivateMessageMapper implements PrivateMessageMapperInterface {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -29,7 +29,7 @@ class PrivateMessageMapper implements PrivateMessageMapperInterface {
   /**
    * Constructs a PrivateMessageMapper object.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
    * @param \Drupal\Session\AccountProxyInterface $currentUser
    *   The current user.
diff --git a/src/Mapper/PrivateMessageMapperInterface.php b/src/Mapper/PrivateMessageMapperInterface.php
index 90ee10c..ba268df 100644
--- a/src/Mapper/PrivateMessageMapperInterface.php
+++ b/src/Mapper/PrivateMessageMapperInterface.php
@@ -29,7 +29,7 @@ interface PrivateMessageMapperInterface {
   /**
    * Retrieve the ID of the most recently updated thread for the given user.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user whose most recently updated thread should be retrieved.
    *
    * @return int|bool
@@ -41,7 +41,7 @@ interface PrivateMessageMapperInterface {
   /**
    * Retrieve a list of thread IDs for threads the user belongs to.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user whose most recently thread IDs should be retrieved.
    * @param mixed $count
    *   The number of thread IDs to retrieve or FALSE to retrieve them all.
@@ -57,7 +57,7 @@ interface PrivateMessageMapperInterface {
   /**
    * Check if a thread exists after with an ID greater than the given thread ID.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user for whom to check.
    * @param int $timestamp
    *   The timestamp to check against.
@@ -142,7 +142,7 @@ interface PrivateMessageMapperInterface {
   /**
    * Load the thread id of the thread that a private message belongs to.
    *
-   * @param Drupal\private_message\Entity\PrivateMessageInterface $privateMessage
+   * @param PrivateMessageInterface $privateMessage
    *   The private message for which the thread ID of the thread it belongs to
    *   should be returned.
    *
diff --git a/src/Plugin/Block/PrivateMessageActionsBlock.php b/src/Plugin/Block/PrivateMessageActionsBlock.php
index 6eb3ea7..c8004fe 100644
--- a/src/Plugin/Block/PrivateMessageActionsBlock.php
+++ b/src/Plugin/Block/PrivateMessageActionsBlock.php
@@ -26,14 +26,14 @@ class PrivateMessageActionsBlock extends BlockBase implements BlockPluginInterfa
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * Configuration Factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
@@ -46,9 +46,9 @@ class PrivateMessageActionsBlock extends BlockBase implements BlockPluginInterfa
    *   The ID of the plugin.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   The config factory service.
    */
   public function __construct(
diff --git a/src/Plugin/Block/PrivateMessageInboxBlock.php b/src/Plugin/Block/PrivateMessageInboxBlock.php
index 864c744..870eafb 100644
--- a/src/Plugin/Block/PrivateMessageInboxBlock.php
+++ b/src/Plugin/Block/PrivateMessageInboxBlock.php
@@ -29,35 +29,35 @@ class PrivateMessageInboxBlock extends BlockBase implements BlockPluginInterface
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   protected $privateMessageService;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The CSRF token generator service.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrfToken;
 
   /**
    * The private message configuration.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $privateMessageConfig;
 
@@ -70,15 +70,15 @@ class PrivateMessageInboxBlock extends BlockBase implements BlockPluginInterface
    *   The ID of the plugin.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\private_message\Service\PrivateMessageServiceInterface $privateMessageService
+   * @param PrivateMessageServiceInterface $privateMessageService
    *   The private message service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager service.
-   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrfToken
+   * @param CsrfTokenGenerator $csrfToken
    *   The CSRF token generator service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccountProxyInterface $currentUser, PrivateMessageServiceInterface $privateMessageService, EntityTypeManagerInterface $entityTypeManager, CsrfTokenGenerator $csrfToken, ConfigFactoryInterface $config) {
diff --git a/src/Plugin/Block/PrivateMessageNotificationBlock.php b/src/Plugin/Block/PrivateMessageNotificationBlock.php
index 6c99799..87bd9d1 100644
--- a/src/Plugin/Block/PrivateMessageNotificationBlock.php
+++ b/src/Plugin/Block/PrivateMessageNotificationBlock.php
@@ -28,28 +28,28 @@ class PrivateMessageNotificationBlock extends BlockBase implements BlockPluginIn
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The CSRF token generator service.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrfToken;
 
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   protected $privateMessageService;
 
   /**
    * The private message configuration.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $privateMessageConfig;
 
@@ -62,13 +62,13 @@ class PrivateMessageNotificationBlock extends BlockBase implements BlockPluginIn
    *   The ID of the plugin.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrfToken
+   * @param CsrfTokenGenerator $csrfToken
    *   The CSRF token generator service.
-   * @param \Drupal\private_message\Service\PrivateMessageServiceInterface $privateMessageService
+   * @param PrivateMessageServiceInterface $privateMessageService
    *   The private message service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccountProxyInterface $currentUser, CsrfTokenGenerator $csrfToken, PrivateMessageServiceInterface $privateMessageService, ConfigFactoryInterface $config) {
diff --git a/src/Plugin/Field/FieldFormatter/PrivateMessageThreadMemberFormatter.php b/src/Plugin/Field/FieldFormatter/PrivateMessageThreadMemberFormatter.php
index c793da3..50afd31 100644
--- a/src/Plugin/Field/FieldFormatter/PrivateMessageThreadMemberFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/PrivateMessageThreadMemberFormatter.php
@@ -30,21 +30,21 @@ class PrivateMessageThreadMemberFormatter extends FormatterBase implements Conta
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
@@ -55,7 +55,7 @@ class PrivateMessageThreadMemberFormatter extends FormatterBase implements Conta
    *   The ID of the plugin.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $settings
    *   The field settings.
@@ -65,11 +65,11 @@ class PrivateMessageThreadMemberFormatter extends FormatterBase implements Conta
    *   The current view mode.
    * @param array $third_party_settings
    *   The third party settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager service.
    * @param |Drupal\Core\Session\AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(
@@ -285,7 +285,7 @@ class PrivateMessageThreadMemberFormatter extends FormatterBase implements Conta
           }
           elseif ($this->getSetting('display_type') == 'entity') {
             $renderable = $view_builder->view($user, $this->getSetting('entity_display_mode'));
-            $users[$user->id()] = render($renderable);
+            $users[$user->id()] = \Drupal::service('renderer')->render($renderable);
           }
         }
       }
diff --git a/src/Plugin/Field/FieldFormatter/PrivateMessageThreadMessageFormatter.php b/src/Plugin/Field/FieldFormatter/PrivateMessageThreadMessageFormatter.php
index 427ad57..d117205 100644
--- a/src/Plugin/Field/FieldFormatter/PrivateMessageThreadMessageFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/PrivateMessageThreadMessageFormatter.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\private_message\Plugin\Field\FieldFormatter;
 
+use Drupal\user\UserStorageInterface;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Access\CsrfTokenGenerator;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -31,42 +33,42 @@ class PrivateMessageThreadMessageFormatter extends FormatterBase implements Cont
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The CSRF token generator.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrfTokenGenerator;
 
   /**
    * The user manager service.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userManager;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
@@ -77,7 +79,7 @@ class PrivateMessageThreadMessageFormatter extends FormatterBase implements Cont
    *   The ID of the plugin.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $settings
    *   The field settings.
@@ -87,15 +89,15 @@ class PrivateMessageThreadMessageFormatter extends FormatterBase implements Cont
    *   The current view mode.
    * @param array $third_party_settings
    *   The third party settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager service.
    * @param |Drupal\Core\Session\AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrfTokenGenerator
+   * @param CsrfTokenGenerator $csrfTokenGenerator
    *   The CSRF token generator.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(
diff --git a/src/Plugin/Field/FieldWidget/PrivateMessageThreadMemberWidget.php b/src/Plugin/Field/FieldWidget/PrivateMessageThreadMemberWidget.php
index 428a7f9..1b46835 100644
--- a/src/Plugin/Field/FieldWidget/PrivateMessageThreadMemberWidget.php
+++ b/src/Plugin/Field/FieldWidget/PrivateMessageThreadMemberWidget.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\private_message\Plugin\Field\FieldWidget;
 
+use Drupal\user\UserStorageInterface;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Access\CsrfTokenGenerator;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -32,35 +34,35 @@ class PrivateMessageThreadMemberWidget extends EntityReferenceAutocompleteWidget
   /**
    * The CSRF token generator service.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrfTokenGenerator;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The user manager service.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userManager;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
@@ -71,21 +73,21 @@ class PrivateMessageThreadMemberWidget extends EntityReferenceAutocompleteWidget
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrfTokenGenerator
+   * @param CsrfTokenGenerator $csrfTokenGenerator
    *   The CSRF token generator service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
    */
   public function __construct(
diff --git a/src/Plugin/PrivateMessageConfigForm/PrivateMessageConfigFormBase.php b/src/Plugin/PrivateMessageConfigForm/PrivateMessageConfigFormBase.php
index 20544d5..0eee1a9 100644
--- a/src/Plugin/PrivateMessageConfigForm/PrivateMessageConfigFormBase.php
+++ b/src/Plugin/PrivateMessageConfigForm/PrivateMessageConfigFormBase.php
@@ -15,7 +15,7 @@ abstract class PrivateMessageConfigFormBase extends PluginBase implements Privat
   /**
    * The private message config form plugin manager.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -28,7 +28,7 @@ abstract class PrivateMessageConfigFormBase extends PluginBase implements Privat
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definitions.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory service.
    */
   public function __construct(
diff --git a/src/Plugin/PrivateMessageConfigForm/PrivateMessageConfigFormPluginInterface.php b/src/Plugin/PrivateMessageConfigForm/PrivateMessageConfigFormPluginInterface.php
index 8cdc870..83a9d7a 100644
--- a/src/Plugin/PrivateMessageConfigForm/PrivateMessageConfigFormPluginInterface.php
+++ b/src/Plugin/PrivateMessageConfigForm/PrivateMessageConfigFormPluginInterface.php
@@ -30,7 +30,7 @@ interface PrivateMessageConfigFormPluginInterface extends PluginInspectionInterf
   /**
    * Build the section of the form as it will appear on the settings page.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The Drupal form state.
    *
    * @return array
@@ -43,7 +43,7 @@ interface PrivateMessageConfigFormPluginInterface extends PluginInspectionInterf
    *
    * @param array $form
    *   The form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The Drupal form state.
    *
    * @return array
diff --git a/src/PluginManager/PrivateMessageConfigFormManager.php b/src/PluginManager/PrivateMessageConfigFormManager.php
index 10d58f3..82df9e3 100644
--- a/src/PluginManager/PrivateMessageConfigFormManager.php
+++ b/src/PluginManager/PrivateMessageConfigFormManager.php
@@ -17,9 +17,9 @@ class PrivateMessageConfigFormManager extends DefaultPluginManager implements Pr
    *
    * @param \Traversable $namespaces
    *   Namespaces to be searched for the plugin.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler service.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cacheBackend, ModuleHandlerInterface $moduleHandler) {
diff --git a/src/Service/PrivateMessageNotifier.php b/src/Service/PrivateMessageNotifier.php
index 7977b2b..eec5129 100644
--- a/src/Service/PrivateMessageNotifier.php
+++ b/src/Service/PrivateMessageNotifier.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\private_message\Service;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -19,59 +21,59 @@ class PrivateMessageNotifier implements PrivateMessageNotifierInterface {
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   protected $privateMessageService;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;
 
   /**
    * The configuration factory service.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * The message manager.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $messageManager;
 
   /**
    * The message notification service.
    *
-   * @var \Drupal\message_notify\MessageNotifier
+   * @var MessageNotifier
    */
   protected $messageNotifier;
 
   /**
    * Constructs a new PrivateMessageNotifier object.
    *
-   * @param \Drupal\private_message\Service\PrivateMessageServiceInterface $privateMessageService
+   * @param PrivateMessageServiceInterface $privateMessageService
    *   The private message service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\user\UserDataInterface $userData
+   * @param UserDataInterface $userData
    *   The user data service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\message_notify\MessageNotifier $messageNotifier
+   * @param MessageNotifier $messageNotifier
    *   The message notification service.
    */
   public function __construct(
@@ -120,11 +122,11 @@ class PrivateMessageNotifier implements PrivateMessageNotifierInterface {
    *
    * Checks individual user preferences as well as system defaults.
    *
-   * @param \Drupal\Core\Session\AccountInterface $recipient
+   * @param AccountInterface $recipient
    *   The potential recipient.
-   * @param \Drupal\private_message\Entity\PrivateMessageInterface $message
+   * @param PrivateMessageInterface $message
    *   The private message for which a notification is being sent.
-   * @param \Drupal\private_message\Entity\PrivateMessageThreadInterface $thread
+   * @param PrivateMessageThreadInterface $thread
    *   The private message thread.
    *
    * @return bool
diff --git a/src/Service/PrivateMessageNotifierInterface.php b/src/Service/PrivateMessageNotifierInterface.php
index 0cebeb6..d091d33 100644
--- a/src/Service/PrivateMessageNotifierInterface.php
+++ b/src/Service/PrivateMessageNotifierInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\private_message\Service;
 
+use Drupal\user\UserInterface;
 use Drupal\private_message\Entity\PrivateMessageInterface;
 use Drupal\private_message\Entity\PrivateMessageThreadInterface;
 
@@ -13,11 +14,11 @@ interface PrivateMessageNotifierInterface {
   /**
    * Send a private message notification email.
    *
-   * @param \Drupal\private_message\Entity\PrivateMessageInterface $message
+   * @param PrivateMessageInterface $message
    *   The message.
-   * @param \Drupal\private_message\Entity\PrivateMessageThreadInterface $thread
+   * @param PrivateMessageThreadInterface $thread
    *   The message thread.
-   * @param \Drupal\user\UserInterface[] $members
+   * @param UserInterface[] $members
    *   The message members.
    */
   public function notify(PrivateMessageInterface $message, PrivateMessageThreadInterface $thread, array $members = []);
diff --git a/src/Service/PrivateMessageService.php b/src/Service/PrivateMessageService.php
index 62451ff..f34900a 100644
--- a/src/Service/PrivateMessageService.php
+++ b/src/Service/PrivateMessageService.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\private_message\Service;
 
+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
+use Drupal\user\UserStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\user\Entity\User;
+use Drupal\private_message\Entity\PrivateMessageThread;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -24,79 +31,79 @@ class PrivateMessageService implements PrivateMessageServiceInterface {
   /**
    * The private message mapper service.
    *
-   * @var \Drupal\private_message\Mapper\PrivateMessageMapperInterface
+   * @var PrivateMessageMapperInterface
    */
   protected $mapper;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;
 
   /**
    * Cache Tags Invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * The private message thread manager.
    *
-   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage
+   * @var SqlContentEntityStorage
    */
   protected $pmThreadManager;
 
   /**
    * The user entity manager.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userManager;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Constructs a PrivateMessageService object.
    *
-   * @param \Drupal\private_message\Mapper\PrivateMessageMapperInterface $mapper
+   * @param PrivateMessageMapperInterface $mapper
    *   The private message mapper service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
-   * @param \Drupal\user\UserDataInterface $userData
+   * @param UserDataInterface $userData
    *   The user data service.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheTagsInvalidator
+   * @param CacheTagsInvalidatorInterface $cacheTagsInvalidator
    *   The cache tags invalidator interface.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager interface.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(
     PrivateMessageMapperInterface $mapper,
@@ -393,13 +400,13 @@ class PrivateMessageService implements PrivateMessageServiceInterface {
   /**
    * Create a new private message thread for the given users.
    *
-   * @param \Drupal\user\Entity\User[] $members
+   * @param User[] $members
    *   An array of users who will be members of the given thread.
    *
-   * @return \Drupal\private_message\Entity\PrivateMessageThread
+   * @return PrivateMessageThread
    *   The new private message thread.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createPrivateMessageThread(array $members) {
     $thread = $this->pmThreadManager->create();
diff --git a/src/Service/PrivateMessageServiceInterface.php b/src/Service/PrivateMessageServiceInterface.php
index feb6612..499d8ce 100644
--- a/src/Service/PrivateMessageServiceInterface.php
+++ b/src/Service/PrivateMessageServiceInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\private_message\Service;
 
+use Drupal\private_message\Entity\PrivateMessageThread;
+use Drupal\user\Entity\User;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\private_message\Entity\PrivateMessageInterface;
@@ -28,11 +30,11 @@ interface PrivateMessageServiceInterface {
    *
    * If no thread exists, one will be created.
    *
-   * @param \Drupal\user\UserInterface[] $members
+   * @param UserInterface[] $members
    *   An array of User objects for whom the private message
    *   thread should be retrieved.
    *
-   * @return \Drupal\private_message\Entity\PrivateMessageThread
+   * @return PrivateMessageThread
    *   A private message thread that contains all members in the thread.
    */
   public function getThreadForMembers(array $members);
@@ -112,7 +114,7 @@ interface PrivateMessageServiceInterface {
    * @param int $count
    *   The maximum number of results to return.
    *
-   * @return \Drupal\user\Entity\User[]
+   * @return User[]
    *   An array of User accounts whose account names begin with the given
    *   string.
    */
@@ -178,7 +180,7 @@ interface PrivateMessageServiceInterface {
   /**
    * Updates the last access time for the current user on the given thread.
    *
-   * @param \Drupal\private_message\Entity\PrivateMessageThreadInterface $thread
+   * @param PrivateMessageThreadInterface $thread
    *   The thread whose access time should be updated.
    */
   public function updateThreadAccessTime(PrivateMessageThreadInterface $thread);
@@ -186,11 +188,11 @@ interface PrivateMessageServiceInterface {
   /**
    * Load the thread that a private message belongs to.
    *
-   * @param \Drupal\private_message\Entity\PrivateMessageInterface $privateMessage
+   * @param PrivateMessageInterface $privateMessage
    *   The private message for which the thread it belongs to should be
    *   returned.
    *
-   * @return \Drupal\private_message\Entity\PrivateMessageThread
+   * @return PrivateMessageThread
    *   The private message thread to which the private message belongs
    */
   public function getThreadFromMessage(PrivateMessageInterface $privateMessage);
@@ -201,9 +203,9 @@ interface PrivateMessageServiceInterface {
    * @param array $build
    *   A render array representing the given entity. Chances should be made to
    *   this render array.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being rendered.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The display being used to render the entity.
    * @param string $view_mode
    *   The view mode being used to render the entity.
diff --git a/src/Service/PrivateMessageThreadManager.php b/src/Service/PrivateMessageThreadManager.php
index c8377e3..6925cdf 100644
--- a/src/Service/PrivateMessageThreadManager.php
+++ b/src/Service/PrivateMessageThreadManager.php
@@ -16,51 +16,51 @@ class PrivateMessageThreadManager implements PrivateMessageThreadManagerInterfac
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   private $privateMessageService;
 
   /**
    * The private message notifier service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageNotifierInterface
+   * @var PrivateMessageNotifierInterface
    */
   private $privateMessageNotifier;
 
   /**
    * The private message.
    *
-   * @var \Drupal\private_message\Entity\PrivateMessageInterface
+   * @var PrivateMessageInterface
    */
   private $message;
 
   /**
    * The message recipients.
    *
-   * @var \Drupal\Core\Session\AccountInterface[]
+   * @var AccountInterface[]
    */
   private $recipients = [];
 
   /**
    * An array of members to exclude from notifications.
    *
-   * @var \Drupal\Core\Session\AccountInterface[]
+   * @var AccountInterface[]
    */
   private $excludeFromNotification = [];
 
   /**
    * The private message thread.
    *
-   * @var \Drupal\private_message\Entity\PrivateMessageThreadInterface|null
+   * @var PrivateMessageThreadInterface|null
    */
   private $thread;
 
   /**
    * PrivateMessageThreadManager constructor.
    *
-   * @param \Drupal\private_message\Service\PrivateMessageServiceInterface $privateMessageService
+   * @param PrivateMessageServiceInterface $privateMessageService
    *   The private message service.
-   * @param \Drupal\private_message\Service\PrivateMessageNotifierInterface $privateMessageNotifier
+   * @param PrivateMessageNotifierInterface $privateMessageNotifier
    *   The private message notifier service.
    */
   public function __construct(
@@ -124,7 +124,7 @@ class PrivateMessageThreadManager implements PrivateMessageThreadManagerInterfac
   /**
    * The users to receive notifications.
    *
-   * @return \Drupal\Core\Session\AccountInterface[]
+   * @return AccountInterface[]
    *   An array of Account objects of the thread members who are to receive
    *   the notification.
    */
diff --git a/src/Service/PrivateMessageThreadManagerInterface.php b/src/Service/PrivateMessageThreadManagerInterface.php
index 25e8a09..f37d09a 100644
--- a/src/Service/PrivateMessageThreadManagerInterface.php
+++ b/src/Service/PrivateMessageThreadManagerInterface.php
@@ -17,14 +17,14 @@ interface PrivateMessageThreadManagerInterface {
    *
    * A new thread will be created if one does not already exist.
    *
-   * @param \Drupal\private_message\Entity\PrivateMessageInterface $message
+   * @param PrivateMessageInterface $message
    *   The new message object.
    * @param array $recipients
    *   (optional) An array of message recipients. Defaults to an empty array.
    * @param array $excludeFromMail
    *   (optional) An array of members to exclude from notification emails.
    *   Defaults to an empty array.
-   * @param \Drupal\private_message\Entity\PrivateMessageThreadInterface|null $thread
+   * @param PrivateMessageThreadInterface|null $thread
    *   (optional) The private message thread. If NULL, one will be loaded
    *   using the recipients array.
    */
diff --git a/tests/src/Functional/PrivateMessageNotificationTest.php b/tests/src/Functional/PrivateMessageNotificationTest.php
index 484a6d7..148428a 100644
--- a/tests/src/Functional/PrivateMessageNotificationTest.php
+++ b/tests/src/Functional/PrivateMessageNotificationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\private_message\Functional;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -25,21 +26,21 @@ class PrivateMessageNotificationTest extends BrowserTestBase {
   /**
    * The first User used for the test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $userA;
 
   /**
    * The second User used for the test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $userB;
 
   /**
    * SetUp the test class.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->userA = $this->drupalCreateUser([
       'use private messaging system',
@@ -60,16 +61,16 @@ class PrivateMessageNotificationTest extends BrowserTestBase {
     $this->drupalLogin($this->userA);
 
     $this->drupalGet('/private-message/create');
-    $this->assertResponse(200);
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->statusCodeEquals(200);
+    $this->submitForm([
       'members[0][target_id]' => $this->userB->getDisplayName(),
       'message[0][value]' => $this->getRandomGenerator()->sentences(5),
     ], 'Send');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalLogin($this->userB);
     $this->drupalGet('private-message/create');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->elementTextContains('css', 'a.private-message-page-link', 1);
   }
 
diff --git a/tests/src/Functional/PrivateMessageSettingsFormTest.php b/tests/src/Functional/PrivateMessageSettingsFormTest.php
index d852acf..aa0e9df 100644
--- a/tests/src/Functional/PrivateMessageSettingsFormTest.php
+++ b/tests/src/Functional/PrivateMessageSettingsFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\private_message\Functional;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -25,21 +26,21 @@ class PrivateMessageSettingsFormTest extends BrowserTestBase {
   /**
    * The User used for the test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $adminUser;
 
   /**
    * The User used for the test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $user;
 
   /**
    * SetUp the test class.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->user = $this->DrupalCreateUser();
     $this->adminUser = $this->DrupalCreateUser([
@@ -54,11 +55,11 @@ class PrivateMessageSettingsFormTest extends BrowserTestBase {
   public function testSettingsPageExists() {
     $this->drupalLogin($this->user);
     $this->drupalGet('admin/config/private-message/config');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/config/private-message/config');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }
 
   /**
@@ -67,13 +68,14 @@ class PrivateMessageSettingsFormTest extends BrowserTestBase {
   public function testConfigForm() {
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/config/private-message/config');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Test form submission.
-    $this->drupalPostForm(NULL, [], t('Save configuration'));
-    $this->assertText(
-      'The configuration options have been saved.'
-    );
+    $this->submitForm([], t('Save configuration'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
   }
 
 }
diff --git a/tests/src/Functional/PrivateMessageThreadMembersTest.php b/tests/src/Functional/PrivateMessageThreadMembersTest.php
index 4455a20..e49b9ff 100644
--- a/tests/src/Functional/PrivateMessageThreadMembersTest.php
+++ b/tests/src/Functional/PrivateMessageThreadMembersTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\private_message\Functional;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Tests\BrowserTestBase;
 
@@ -25,28 +26,28 @@ class PrivateMessageThreadMembersTest extends BrowserTestBase {
   /**
    * The first User used for the test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $userA;
 
   /**
    * The second User used for the test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $userB;
 
   /**
    * The third User used for the test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $userC;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->userA = $this->drupalCreateUser([
       'use private messaging system',
diff --git a/tests/src/Functional/PrivateMessageUnreadCountTest.php b/tests/src/Functional/PrivateMessageUnreadCountTest.php
index a537e1f..ff2821d 100644
--- a/tests/src/Functional/PrivateMessageUnreadCountTest.php
+++ b/tests/src/Functional/PrivateMessageUnreadCountTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\private_message\Functional;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -26,21 +27,21 @@ class PrivateMessageUnreadCountTest extends BrowserTestBase {
   /**
    * The first User used for the test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $userA;
 
   /**
    * The second User used for the test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $userB;
 
   /**
    * SetUp the test class.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->userA = $this->drupalCreateUser([
       'use private messaging system',
@@ -61,12 +62,12 @@ class PrivateMessageUnreadCountTest extends BrowserTestBase {
     $this->drupalLogin($this->userA);
 
     $this->drupalGet('/private-message/create');
-    $this->assertResponse(200);
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->statusCodeEquals(200);
+    $this->submitForm([
       'members[0][target_id]' => $this->userB->getDisplayName(),
       'message[0][value]' => $this->getRandomGenerator()->sentences(5),
     ], 'Send');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // I should not see a notification for my own message.
     $this->assertSession()->elementTextContains('css', 'a.private-message-page-link', 0);
     // When going to a different page, I should still not see a notification for
@@ -80,14 +81,14 @@ class PrivateMessageUnreadCountTest extends BrowserTestBase {
 
     // We visit the thread directly.
     $this->drupalGet('private-messages/1');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->elementTextContains('css', 'a.private-message-page-link', 0);
 
     // We are not already looking at the thread.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'message[0][value]' => $this->getRandomGenerator()->sentences(5),
     ], 'Send');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // I should not see a notification for my own message.
     $this->assertSession()->elementTextContains('css', 'a.private-message-page-link', 0);
 
