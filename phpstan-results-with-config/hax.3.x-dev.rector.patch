diff --git a/hax.module b/hax.module
index fa61c46..bcaa657 100644
--- a/hax.module
+++ b/hax.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Form\FormStateInterface;
 /**
  * @file
  * Headless Authoring eXperience, accept calls and make things haxable.
@@ -558,7 +559,7 @@ function hax_page_bottom(array &$page_bottom) {
 /**
  * Alter the form so that we can easily integrate our singular element form w/ Drupal
  */
-function hax_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function hax_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   if (isset($form['#attributes']['class'][0]) && $form['#attributes']['class'][0] == 'hax-settings') {
     $form['#attached']['library'][] = 'hax/hax-form-helper';
   }
diff --git a/src/Controller/HaxController.php b/src/Controller/HaxController.php
index 59bab2a..38f7568 100644
--- a/src/Controller/HaxController.php
+++ b/src/Controller/HaxController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\hax\Controller;
 
+use Drupal\Core\Access\AccessResultAllowed;
+use Drupal\Core\Access\AccessResultForbidden;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\TypedData\Exception\ReadOnlyException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Utility\UrlHelper;
@@ -29,7 +33,7 @@ class HaxController extends NodeViewController {
   /**
    * Hax node edit form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $node
+   * @param EntityInterface $node
    *   The node.
    * @param string $view_mode
    *   The node's view mode.
@@ -59,10 +63,10 @@ class HaxController extends NodeViewController {
    *
    * @param mixed $op
    *   The operation.
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node.
    *
-   * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultForbidden
+   * @return AccessResultAllowed|AccessResultForbidden
    *   Either allowed or forbidden access response.
    */
   public function access($op, NodeInterface $node) {
@@ -76,16 +80,16 @@ class HaxController extends NodeViewController {
   /**
    * Custom node save logic for hax.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The hax node.
    * @param mixed $token
    *   A token.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The http response.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\TypedData\Exception\ReadOnlyException
+   * @throws EntityStorageException
+   * @throws ReadOnlyException
    */
   public function save(NodeInterface $node, $token) {
 
@@ -141,7 +145,7 @@ class HaxController extends NodeViewController {
    * @param mixed $op
    *   The operation?
    *
-   * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultForbidden
+   * @return AccessResultAllowed|AccessResultForbidden
    *   Whether the file access is allowed or forbidden.
    *
    * @todo: param does not appear to be used.  Remove?
@@ -161,10 +165,10 @@ class HaxController extends NodeViewController {
    * @param mixed $token
    *   Is this a token object?
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The http response.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *
    * @todo: Update data type for token.
    */
@@ -191,7 +195,7 @@ class HaxController extends NodeViewController {
           $file_wrapper = 'public';
         }
         // See if Drupal can load from this data source.
-        if ($file = file_save_data($data, $file_wrapper . '://' . $upload['name'])) {
+        if ($file = \Drupal::service('file.repository')->writeData($data, $file_wrapper . '://' . $upload['name'])) {
           $uri = str_replace($GLOBALS['base_url'] . '/', $GLOBALS['base_path'],file_create_url($file->getFileUri()));
           $return = array(
             'file' => array(
@@ -251,7 +255,7 @@ class HaxController extends NodeViewController {
    * @param mixed $token
    *   The app store token.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The http response.
    */
   public function loadAppStore($token) {
@@ -304,7 +308,7 @@ class HaxController extends NodeViewController {
    * @param mixed $token
    *   CSRF security token.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The http response.
    */
   public function loadHaxElementListSelectorData($token) {
