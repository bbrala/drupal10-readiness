modules/contrib/eca_vbo/eca_vbo.module
modules/contrib/eca_vbo/src/Event/EcaVboEvents.php
modules/contrib/eca_vbo/src/Event/VboCustomAccessEvent.php
modules/contrib/eca_vbo/src/Event/VboEventBase.php
modules/contrib/eca_vbo/src/Event/VboExecuteEvent.php
modules/contrib/eca_vbo/src/Event/VboFormBuildEvent.php
modules/contrib/eca_vbo/src/Event/VboFormEventBase.php
modules/contrib/eca_vbo/src/Event/VboFormSubmitEvent.php
modules/contrib/eca_vbo/src/Event/VboFormValidateEvent.php
modules/contrib/eca_vbo/src/EventSubscriber/EcaVbo.php
modules/contrib/eca_vbo/src/Plugin/Action/Derivative/VboExecuteDeriver.php
modules/contrib/eca_vbo/src/Plugin/Action/VboExecute.php
modules/contrib/eca_vbo/src/Plugin/Action/VboGetConfigValue.php
modules/contrib/eca_vbo/src/Plugin/Action/VboSetCustomAccess.php
modules/contrib/eca_vbo/src/Plugin/ECA/Event/VboEvent.php
modules/contrib/eca_vbo/src/Plugin/ECA/Event/VboEventDeriver.php
modules/contrib/eca_vbo/src/Plugin/views/field/EcaVboBulkForm.php

7 files with changes
====================

1) modules/contrib/eca_vbo/src/Plugin/Action/VboExecute.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected EventDispatcherInterface $eventDispatcher;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher) {
@@ @@
   /**
    * Get the executable view.
    *
-   * @return \Drupal\views\ViewExecutable|null
+   * @return ViewExecutable|null
    *   The executable view, or NULL if not available.
    */
   protected function getView(): ?ViewExecutable {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/eca_vbo/src/Plugin/Action/Derivative/VboExecuteDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\eca_vbo\Plugin\Action\Derivative;

+use Drupal\Core\StringTranslation\TranslationInterface;
+use Drupal\eca\Entity\Eca;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * Constructs a new EntityActionDeriverBase object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   public function getDerivativeDefinitions($base_plugin_definition) {
     if (!isset($this->definitions)) {
       $definitions = [];
-      /** @var \Drupal\eca\Entity\Eca $eca */
+      /** @var Eca $eca */
       foreach ($this->entityTypeManager->getStorage('eca')->loadMultiple() as $eca) {
         if (!$eca->status()) {
           continue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/eca_vbo/src/Event/VboFormEventBase.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The form state.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected FormStateInterface $formState;

@@ @@
    *
    * @param array &$form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The executable view.
    * @param array &$action_context
    *   The context array passed from VBO to the action.
    * @param array &$action_configuration
    *   The action configuration.
-   * @param \Drupal\Core\Action\ActionInterface $action
+   * @param ActionInterface $action
    *   The action plugin instance.
    */
   public function __construct(array &$form, FormStateInterface $form_state, ViewExecutable $view, array &$action_context, array &$action_configuration, ActionInterface $action) {
@@ @@
   /**
    * Get the exeuctable view.
    *
-   * @return \Drupal\views\ViewExecutable
+   * @return ViewExecutable
    *   The executable view.
    */
   public function getView(): ViewExecutable {
@@ @@
   /**
    * Get the action plugin instance.
    *
-   * @return \Drupal\Core\Action\ActionInterface
+   * @return ActionInterface
    *   The action plugin instance.
    */
   public function getAction(): ActionInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/eca_vbo/src/Event/VboExecuteEvent.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The main entity of the Views row.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected EntityInterface $entity;

@@ @@
   /**
    * Constructs a new ViewsBulkOperationsEvent object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The main entity of the Views row.
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The executable view.
    * @param array &$action_context
    *   The context array passed from VBO to the action.
    * @param array &$action_configuration
    *   The action configuration.
-   * @param \Drupal\Core\Action\ActionInterface $action
+   * @param ActionInterface $action
    *   The action plugin instance.
    */
   public function __construct(EntityInterface $entity, ViewExecutable $view, array &$action_context, array &$action_configuration, ActionInterface $action) {
@@ @@
   /**
    * Get the exeuctable view.
    *
-   * @return \Drupal\views\ViewExecutable
+   * @return ViewExecutable
    *   The executable view.
    */
   public function getView(): ViewExecutable {
@@ @@
   /**
    * Get the action plugin instance.
    *
-   * @return \Drupal\Core\Action\ActionInterface
+   * @return ActionInterface
    *   The action plugin instance.
    */
   public function getAction(): ActionInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/eca_vbo/src/Event/VboEventBase.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The executable view.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected ViewExecutable $view;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/eca_vbo/src/Event/VboCustomAccessEvent.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The account to check access for.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected AccountInterface $account;

@@ @@
   /**
    * The executable view.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected ViewExecutable $view;

@@ @@
   /**
    * Constructs a new VboCustomAccessEvent object.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account to check access for.
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The executable view.
    * @param bool $access_granted
    *   The default value whether access is granted.
@@ @@
   /**
    * Get the account to check access for.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   The account.
    */
   public function getAccount(): AccountInterface {
@@ @@
   /**
    * Get the executable view.
    *
-   * @return \Drupal\views\ViewExecutable
+   * @return ViewExecutable
    *   The executable view.
    */
   public function getView(): ViewExecutable {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/eca_vbo/eca_vbo.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionManager;
 use Drupal\eca\Entity\Eca;

 /**
@@ @@
     }
   }
   if ($clear_cache) {
-    /** @var \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionManager $manager */
+    /** @var ViewsBulkOperationsActionManager $manager */
     $manager = \Drupal::service('plugin.manager.views_bulk_operations_action');
     $manager->clearCachedDefinitions();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 7 files have been changed by Rector                                       

