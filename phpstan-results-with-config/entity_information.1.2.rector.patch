diff --git a/src/Annotation/EntityInformation.php b/src/Annotation/EntityInformation.php
index 80050ea..2fe4fdc 100644
--- a/src/Annotation/EntityInformation.php
+++ b/src/Annotation/EntityInformation.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_information\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class EntityInformation extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -42,7 +43,7 @@ class EntityInformation extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/EntityInformationController.php b/src/Controller/EntityInformationController.php
index c9da475..7ddb3e5 100644
--- a/src/Controller/EntityInformationController.php
+++ b/src/Controller/EntityInformationController.php
@@ -16,14 +16,14 @@ class EntityInformationController extends ControllerBase {
   /**
    * The entity information manager service.
    *
-   * @var \Drupal\entity_information\EntityInformationManager|null
+   * @var EntityInformationManager|null
    */
   protected $entityInformationManager;
 
   /**
    * EntityInformationController constructor.
    *
-   * @param \Drupal\entity_information\EntityInformationManager|null $entity_information_manager
+   * @param EntityInformationManager|null $entity_information_manager
    */
   public function __construct(EntityInformationManager $entity_information_manager) {
     $this->entityInformationManager = $entity_information_manager;
diff --git a/src/EntityInformationHelperTrait.php b/src/EntityInformationHelperTrait.php
index 38c627e..c407b1b 100644
--- a/src/EntityInformationHelperTrait.php
+++ b/src/EntityInformationHelperTrait.php
@@ -12,14 +12,14 @@ trait EntityInformationHelperTrait {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Wraps the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The module handler.
    */
   public function entityTypeManager(): EntityTypeManagerInterface {
diff --git a/src/EntityInformationManager.php b/src/EntityInformationManager.php
index c9b84ac..dc490f0 100644
--- a/src/EntityInformationManager.php
+++ b/src/EntityInformationManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_information;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ -29,7 +30,7 @@ class EntityInformationManager extends DefaultPluginManager {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -39,11 +40,11 @@ class EntityInformationManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager) {
@@ -196,7 +197,7 @@ class EntityInformationManager extends DefaultPluginManager {
   /**
    * Get the entity based on the type and ID from the request.
    *
-   * @return bool|\Drupal\Core\Entity\EntityInterface|null
+   * @return bool|EntityInterface|null
    *   The entity from the request or NULL.
    */
   public function pluggedEntity() {
diff --git a/src/EntityTypeInfo.php b/src/EntityTypeInfo.php
index c39aae5..9e64d8d 100644
--- a/src/EntityTypeInfo.php
+++ b/src/EntityTypeInfo.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_information;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * Manipulates entity type information.
  *
@@ -15,7 +16,7 @@ class EntityTypeInfo {
    *
    * This is an alter hook bridge.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
+   * @param EntityTypeInterface[] $entity_types
    *   The master entity type list to alter.
    *
    * @see hook_entity_type_alter()
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 8a4b2df..e0347ff 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -20,16 +20,16 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Entity information manager.
    *
-   * @var \Drupal\entity_information\EntityInformationManager
+   * @var EntityInformationManager
    */
   protected $entityInformationManager;
 
   /**
    * Constructs an entity information SettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\entity_information\EntityInformationManager $entity_information_manager
+   * @param EntityInformationManager $entity_information_manager
    *   Entity information manager.
    */
   public function __construct(ConfigFactory $config_factory, EntityInformationManager $entity_information_manager) {
diff --git a/src/Plugin/Derivative/EntityInformationLocalTask.php b/src/Plugin/Derivative/EntityInformationLocalTask.php
index 83c1a93..5ffcde4 100644
--- a/src/Plugin/Derivative/EntityInformationLocalTask.php
+++ b/src/Plugin/Derivative/EntityInformationLocalTask.php
@@ -19,23 +19,23 @@ class EntityInformationLocalTask extends DeriverBase implements ContainerDeriver
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity information manager service.
    *
-   * @var \Drupal\entity_information\EntityInformationManager
+   * @var EntityInformationManager
    */
   protected $entityInformationManager;
 
   /**
    * Creates an EntityInformationLocalTask object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\entity_information\EntityInformationManager $entity_information_manager
+   * @param EntityInformationManager $entity_information_manager
    *   The entity information manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityInformationManager $entity_information_manager) {
diff --git a/src/Plugin/EntityInformation/EntityInformationMenuLink.php b/src/Plugin/EntityInformation/EntityInformationMenuLink.php
index d723c90..aa633b8 100644
--- a/src/Plugin/EntityInformation/EntityInformationMenuLink.php
+++ b/src/Plugin/EntityInformation/EntityInformationMenuLink.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_information\Plugin\EntityInformation;
 
+use Drupal\menu_link_content\Plugin\Menu\MenuLinkContent;
+use Drupal\system\Entity\Menu;
 use Drupal\Core\Annotation\Translation;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Menu\MenuLinkManagerInterface;
@@ -36,7 +38,7 @@ class EntityInformationMenuLink extends PluginBase implements EntityInformationI
   /**
    * The menu link manager service.
    *
-   * @var \Drupal\Core\Menu\MenuLinkManagerInterface
+   * @var MenuLinkManagerInterface
    */
   protected $menuLinkManager;
 
@@ -49,7 +51,7 @@ class EntityInformationMenuLink extends PluginBase implements EntityInformationI
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager
+   * @param MenuLinkManagerInterface $menu_link_manager
    *   The menu link manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MenuLinkManagerInterface $menu_link_manager) {
@@ -111,7 +113,7 @@ class EntityInformationMenuLink extends PluginBase implements EntityInformationI
     // Build the table rows.
     $destination = $this->getDestinationArray();
     $rows = [];
-    /** @var \Drupal\menu_link_content\Plugin\Menu\MenuLinkContent[] $menu_link_content_items */
+    /** @var MenuLinkContent[] $menu_link_content_items */
     foreach ($menu_link_content_items as $menu_link_item) {
       $row = [];
 
@@ -123,7 +125,7 @@ class EntityInformationMenuLink extends PluginBase implements EntityInformationI
       $menu_link_content = reset($menu_link_content_by_uuid);
 
       // Get the menu entity.
-      /** @var \Drupal\system\Entity\Menu $menu */
+      /** @var Menu $menu */
       $menu = $this->entityTypeManager()->getStorage('menu')->load($menu_link_content->getMenuName());
 
       // Compile the table row and add some operations.
diff --git a/src/Plugin/EntityInformation/EntityInformationPathAlias.php b/src/Plugin/EntityInformation/EntityInformationPathAlias.php
index 06f3fcc..f9c4781 100644
--- a/src/Plugin/EntityInformation/EntityInformationPathAlias.php
+++ b/src/Plugin/EntityInformation/EntityInformationPathAlias.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_information\Plugin\EntityInformation;
 
+use Drupal\path_alias\Entity\PathAlias;
 use Drupal\Core\Annotation\Translation;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Link;
@@ -71,7 +72,7 @@ class EntityInformationPathAlias extends PluginBase implements EntityInformation
     // Build the table rows.
     $destination = $this->getDestinationArray();
     $rows = [];
-    /** @var \Drupal\path_alias\Entity\PathAlias[] $path_aliases */
+    /** @var PathAlias[] $path_aliases */
     foreach ($path_aliases as $path_alias) {
       $row = [];
       $url = $entity->toUrl('canonical', ['language' => $entity->language()]);
diff --git a/src/Plugin/EntityInformationInterface.php b/src/Plugin/EntityInformationInterface.php
index 474e9ca..a11b7f1 100644
--- a/src/Plugin/EntityInformationInterface.php
+++ b/src/Plugin/EntityInformationInterface.php
@@ -13,7 +13,7 @@ interface EntityInformationInterface extends PluginInspectionInterface {
   /**
    * Builds a renderable array for the field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The field's host entity.
    *
    * @return array
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index 5fcf30a..c17ce56 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -17,23 +17,23 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity information manager service.
    *
-   * @var \Drupal\entity_information\EntityInformationManager
+   * @var EntityInformationManager
    */
   protected $entityInformationManager;
 
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
-   * @param \Drupal\entity_information\EntityInformationManager $entity_information_manager
+   * @param EntityInformationManager $entity_information_manager
    *   The entity information manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager, EntityInformationManager $entity_information_manager) {
diff --git a/tests/src/Functional/EntityInformationAccessTest.php b/tests/src/Functional/EntityInformationAccessTest.php
index ee8928b..ae3f822 100644
--- a/tests/src/Functional/EntityInformationAccessTest.php
+++ b/tests/src/Functional/EntityInformationAccessTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity_information\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -28,14 +30,14 @@ class EntityInformationAccessTest extends BrowserTestBase {
   /**
    * A regular user with 'access content' permission.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * A regular user with 'access content' permission.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user_with_permission;
 
@@ -51,7 +53,7 @@ class EntityInformationAccessTest extends BrowserTestBase {
   /**
    * Test access to the entity information page.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testEntityInformationAccess(): void {
     // Create the user with the right permission.
@@ -82,7 +84,7 @@ class EntityInformationAccessTest extends BrowserTestBase {
   /**
    * Test access to the entity information page.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testSettingsAccess(): void {
     // Create the user with the right permission.
