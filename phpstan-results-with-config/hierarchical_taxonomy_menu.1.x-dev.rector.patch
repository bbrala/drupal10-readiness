diff --git a/src/Plugin/Block/HierarchicalTaxonomyMenuBlock.php b/src/Plugin/Block/HierarchicalTaxonomyMenuBlock.php
index 0e79e1b..7e4a421 100644
--- a/src/Plugin/Block/HierarchicalTaxonomyMenuBlock.php
+++ b/src/Plugin/Block/HierarchicalTaxonomyMenuBlock.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\hierarchical_taxonomy_menu\Plugin\Block;
 
+use Drupal\Core\Entity\EntityFieldManager;
+use Drupal\Core\Routing\CurrentRouteMatch;
+use Drupal\taxonomy\TermInterface;
+use Drupal\image\Entity\ImageStyle;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Database\Connection;
@@ -45,42 +49,42 @@ class HierarchicalTaxonomyMenuBlock extends BlockBase implements ContainerFactor
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The current route match service.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;
 
   /**
    * The the current primary database.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
@@ -100,17 +104,17 @@ class HierarchicalTaxonomyMenuBlock extends BlockBase implements ContainerFactor
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
-   * @param \Drupal\Core\Routing\ResettableStackedRouteMatchInterface $current_route_match
+   * @param ResettableStackedRouteMatchInterface $current_route_match
    *   The current route match service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The the current primary database.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
    */
   public function __construct(
@@ -416,7 +420,7 @@ class HierarchicalTaxonomyMenuBlock extends BlockBase implements ContainerFactor
   /**
    * Whether a field is media type of image.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field
+   * @param FieldDefinitionInterface $field
    *   A field to check.
    *
    * @return bool
@@ -717,7 +721,7 @@ class HierarchicalTaxonomyMenuBlock extends BlockBase implements ContainerFactor
     $translation_languages = $term->getTranslationLanguages();
 
     if (isset($translation_languages[$language])) {
-      /** @var \Drupal\taxonomy\TermInterface $term_translated */
+      /** @var TermInterface $term_translated */
       $term_translated = $term->getTranslation($language);
       return $term_translated->toUrl();
     }
@@ -790,11 +794,11 @@ class HierarchicalTaxonomyMenuBlock extends BlockBase implements ContainerFactor
           $path = $style->buildUrl($file->getFileUri());
         }
         else {
-          $path = Url::fromUri(file_create_url($file->getFileUri()));
+          $path = \Drupal::service('file_url_generator')->generate($file->getFileUri());
         }
       }
       else {
-        $path = Url::fromUri(file_create_url($file->getFileUri()));
+        $path = \Drupal::service('file_url_generator')->generate($file->getFileUri());
       }
       return $path;
     }
@@ -810,7 +814,7 @@ class HierarchicalTaxonomyMenuBlock extends BlockBase implements ContainerFactor
     $styles = $this->entityTypeManager->getStorage('image_style')->loadMultiple();
 
     foreach ($styles as $style) {
-      /** @var \Drupal\image\Entity\ImageStyle $style */
+      /** @var ImageStyle $style */
       $style_name = $style->getName();
       $options[$style_name] = $style->label();
     }
@@ -925,7 +929,7 @@ class HierarchicalTaxonomyMenuBlock extends BlockBase implements ContainerFactor
       $fields = $this->entityFieldManager
         ->getFieldDefinitions('commerce_product', $bundle);
 
-      /** @var \Drupal\Core\Field\FieldDefinitionInterface $field */
+      /** @var FieldDefinitionInterface $field */
       foreach ($fields as $field) {
         if ($field->getType() == 'entity_reference' && $field->getSetting('target_type') == 'taxonomy_term') {
           $referencing_fields[$field->getName()] = $field->getLabel();
diff --git a/tests/src/Functional/HierarchicalTaxonomyMenuCacheTest.php b/tests/src/Functional/HierarchicalTaxonomyMenuCacheTest.php
index c07de9e..860fc1c 100644
--- a/tests/src/Functional/HierarchicalTaxonomyMenuCacheTest.php
+++ b/tests/src/Functional/HierarchicalTaxonomyMenuCacheTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\hierarchical_taxonomy_menu\Functional;
 
+use Drupal\block\Entity\Block;
+use Drupal\user\Entity\User;
 use Drupal\taxonomy\Entity\Term;
 use Drupal\Tests\block\Traits\BlockCreationTrait;
 use Drupal\Tests\BrowserTestBase;
@@ -38,21 +40,21 @@ class HierarchicalTaxonomyMenuCacheTest extends BrowserTestBase {
   /**
    * The block.
    *
-   * @var \Drupal\block\Entity\Block
+   * @var Block
    */
   protected $block;
 
   /**
    * The user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $vocabulary = $this->createVocabulary();
@@ -98,12 +100,12 @@ class HierarchicalTaxonomyMenuCacheTest extends BrowserTestBase {
     $this->drupalGet('taxonomy/term/1');
     $this->assertCacheContext('url.path');
     $block_title_element = $this->getSession()->getPage()->find('css', '#block-hierarchicaltaxonomymenu h2');
-    $this->assertEqual($block_title_element->getText(), 'Term 1');
+    $this->assertEquals($block_title_element->getText(), 'Term 1');
 
     $this->drupalGet('taxonomy/term/2');
     $this->assertCacheContext('url.path');
     $block_title_element = $this->getSession()->getPage()->find('css', '#block-hierarchicaltaxonomymenu h2');
-    $this->assertEqual($block_title_element->getText(), 'Term 2');
+    $this->assertEquals($block_title_element->getText(), 'Term 2');
   }
 
   /**
@@ -118,12 +120,12 @@ class HierarchicalTaxonomyMenuCacheTest extends BrowserTestBase {
     $this->drupalGet('taxonomy/term/1');
     $this->assertCacheContext('url.path');
     $block_title_element = $this->getSession()->getPage()->find('css', '#block-hierarchicaltaxonomymenu h2');
-    $this->assertEqual($block_title_element->getText(), 'Term 1');
+    $this->assertEquals($block_title_element->getText(), 'Term 1');
 
     $this->drupalGet('taxonomy/term/2');
     $this->assertCacheContext('url.path');
     $block_title_element = $this->getSession()->getPage()->find('css', '#block-hierarchicaltaxonomymenu h2');
-    $this->assertEqual($block_title_element->getText(), 'Term 2');
+    $this->assertEquals($block_title_element->getText(), 'Term 2');
   }
 
   /**
diff --git a/tests/src/Functional/HierarchicalTaxonomyMenuImageTest.php b/tests/src/Functional/HierarchicalTaxonomyMenuImageTest.php
index bd5ae7e..74f82af 100644
--- a/tests/src/Functional/HierarchicalTaxonomyMenuImageTest.php
+++ b/tests/src/Functional/HierarchicalTaxonomyMenuImageTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\hierarchical_taxonomy_menu\Functional;
 
+use Drupal\block\Entity\Block;
+use Drupal\taxonomy\VocabularyInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\file\Entity\File;
@@ -40,21 +42,21 @@ class HierarchicalTaxonomyMenuImageTest extends BrowserTestBase {
   /**
    * The block.
    *
-   * @var \Drupal\block\Entity\Block
+   * @var Block
    */
   protected $block;
 
   /**
    * The vocabulary.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $vocabulary = $this->createVocabulary();
diff --git a/tests/src/Functional/HierarchicalTaxonomyMenuTest.php b/tests/src/Functional/HierarchicalTaxonomyMenuTest.php
index 765153a..d15a78f 100644
--- a/tests/src/Functional/HierarchicalTaxonomyMenuTest.php
+++ b/tests/src/Functional/HierarchicalTaxonomyMenuTest.php
@@ -33,7 +33,7 @@ class HierarchicalTaxonomyMenuTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $admin_user = $this->drupalCreateUser([
diff --git a/tests/src/Functional/HierarchicalTaxonomyMenuTranslationTest.php b/tests/src/Functional/HierarchicalTaxonomyMenuTranslationTest.php
index 0004ff1..0f0796a 100644
--- a/tests/src/Functional/HierarchicalTaxonomyMenuTranslationTest.php
+++ b/tests/src/Functional/HierarchicalTaxonomyMenuTranslationTest.php
@@ -39,7 +39,7 @@ class HierarchicalTaxonomyMenuTranslationTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $language = ConfigurableLanguage::createFromLangcode('sr');
@@ -163,11 +163,11 @@ class HierarchicalTaxonomyMenuTranslationTest extends BrowserTestBase {
   public function testDynamicBlockTitle() {
     $this->drupalGet('taxonomy/term/1');
     $block_title_element = $this->getSession()->getPage()->find('css', '#block-hierarchicaltaxonomymenu h2');
-    $this->assertEqual($block_title_element->getText(), 'Parent');
+    $this->assertEquals($block_title_element->getText(), 'Parent');
 
     $this->drupalGet('sr/taxonomy/term/1');
     $block_title_element = $this->getSession()->getPage()->find('css', '#block-hierarchicaltaxonomymenu h2');
-    $this->assertEqual($block_title_element->getText(), 'Roditelj');
+    $this->assertEquals($block_title_element->getText(), 'Roditelj');
   }
 
 }
diff --git a/tests/src/FunctionalJavascript/HierarchicalTaxonomyMenuAdvancedTest.php b/tests/src/FunctionalJavascript/HierarchicalTaxonomyMenuAdvancedTest.php
index 1672840..f2eefdc 100644
--- a/tests/src/FunctionalJavascript/HierarchicalTaxonomyMenuAdvancedTest.php
+++ b/tests/src/FunctionalJavascript/HierarchicalTaxonomyMenuAdvancedTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\hierarchical_taxonomy_menu\FunctionalJavascript;
 
+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\block\Entity\Block;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\taxonomy\Entity\Term;
@@ -42,7 +44,7 @@ class HierarchicalTaxonomyMenuAdvancedTest extends WebDriverTestBase {
   /**
    * The vocabulary.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;
 
@@ -56,14 +58,14 @@ class HierarchicalTaxonomyMenuAdvancedTest extends WebDriverTestBase {
   /**
    * The placed Hierarchical Taxonomy Menu block.
    *
-   * @var \Drupal\block\Entity\Block
+   * @var Block
    */
   protected $block;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $admin_user = $this->drupalCreateUser([
diff --git a/tests/src/FunctionalJavascript/HierarchicalTaxonomyMenuBasicTest.php b/tests/src/FunctionalJavascript/HierarchicalTaxonomyMenuBasicTest.php
index 53b74f8..ad1f17c 100644
--- a/tests/src/FunctionalJavascript/HierarchicalTaxonomyMenuBasicTest.php
+++ b/tests/src/FunctionalJavascript/HierarchicalTaxonomyMenuBasicTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\hierarchical_taxonomy_menu\FunctionalJavascript;
 
+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\block\Entity\Block;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\taxonomy\Entity\Term;
 use Drupal\Tests\block\Traits\BlockCreationTrait;
@@ -37,7 +39,7 @@ class HierarchicalTaxonomyMenuBasicTest extends WebDriverTestBase {
   /**
    * The vocabulary.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;
 
@@ -51,14 +53,14 @@ class HierarchicalTaxonomyMenuBasicTest extends WebDriverTestBase {
   /**
    * The placed Hierarchical Taxonomy Menu block.
    *
-   * @var \Drupal\block\Entity\Block
+   * @var Block
    */
   protected $block;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $admin_user = $this->drupalCreateUser([
@@ -205,7 +207,7 @@ class HierarchicalTaxonomyMenuBasicTest extends WebDriverTestBase {
 
     $this->drupalGet('taxonomy/term/1');
     $block_title_element = $this->getSession()->getPage()->find('css', '#block-hierarchicaltaxonomymenu h2');
-    $this->assertEqual($block_title_element->getText(), 'Parent term 1');
+    $this->assertEquals($block_title_element->getText(), 'Parent term 1');
   }
 
   /**
@@ -222,7 +224,7 @@ class HierarchicalTaxonomyMenuBasicTest extends WebDriverTestBase {
 
     $this->drupalGet('taxonomy/term/1');
     $block_title_element = $this->getSession()->getPage()->find('css', '#block-hierarchicaltaxonomymenu h2');
-    $this->assertEqual($block_title_element->getText(), 'Hierarchical Taxonomy Menu');
+    $this->assertEquals($block_title_element->getText(), 'Hierarchical Taxonomy Menu');
   }
 
   /**
diff --git a/tests/src/FunctionalJavascript/HierarchicalTaxonomyMenuDynamicTest.php b/tests/src/FunctionalJavascript/HierarchicalTaxonomyMenuDynamicTest.php
index ff94e28..e764d09 100644
--- a/tests/src/FunctionalJavascript/HierarchicalTaxonomyMenuDynamicTest.php
+++ b/tests/src/FunctionalJavascript/HierarchicalTaxonomyMenuDynamicTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\hierarchical_taxonomy_menu\FunctionalJavascript;
 
+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\block\Entity\Block;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\taxonomy\Entity\Term;
 use Drupal\Tests\block\Traits\BlockCreationTrait;
@@ -37,7 +39,7 @@ class HierarchicalTaxonomyMenuDynamicTest extends WebDriverTestBase {
   /**
    * The vocabulary.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;
 
@@ -51,14 +53,14 @@ class HierarchicalTaxonomyMenuDynamicTest extends WebDriverTestBase {
   /**
    * The placed Hierarchical Taxonomy Menu block.
    *
-   * @var \Drupal\block\Entity\Block
+   * @var Block
    */
   protected $block;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $admin_user = $this->drupalCreateUser([
