diff --git a/src/Agent/Action/Base.php b/src/Agent/Action/Base.php
index 1e23c7a..d4170ab 100644
--- a/src/Agent/Action/Base.php
+++ b/src/Agent/Action/Base.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd_agent\Agent\Action;
 
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Component\Datetime\Time;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
@@ -38,79 +39,79 @@ class Base implements BaseInterface, ContainerInjectionInterface {
   /**
    * Crypt object for this DRD request.
    *
-   * @var \Drupal\drd_agent\Crypt\BaseMethodInterface
+   * @var BaseMethodInterface
    */
   protected $crypt;
 
   /**
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;
 
   /**
    * Base constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $account_switcher
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\Core\Database\Connection $database
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_channel_factory
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\Core\State\StateInterface $state
-   * @param \Drupal\Component\Datetime\Time $time
+   * @param ContainerInterface $container
+   * @param AccountSwitcherInterface $account_switcher
+   * @param ConfigFactoryInterface $config_factory
+   * @param Connection $database
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param FileSystemInterface $file_system
+   * @param LoggerChannelFactoryInterface $logger_channel_factory
+   * @param MessengerInterface $messenger
+   * @param ModuleHandlerInterface $module_handler
+   * @param StateInterface $state
+   * @param Time $time
    */
   public function __construct(ContainerInterface $container, AccountSwitcherInterface $account_switcher, ConfigFactoryInterface $config_factory, Connection $database, EntityTypeManagerInterface $entity_type_manager, FileSystemInterface $file_system, LoggerChannelFactoryInterface $logger_channel_factory, MessengerInterface $messenger, ModuleHandlerInterface $module_handler, StateInterface $state, Time $time) {
     $this->accountSwitcher = $account_switcher;
diff --git a/src/Agent/Action/BaseInterface.php b/src/Agent/Action/BaseInterface.php
index d8f0524..276ae93 100644
--- a/src/Agent/Action/BaseInterface.php
+++ b/src/Agent/Action/BaseInterface.php
@@ -10,7 +10,7 @@ use Drupal\drd_agent\Crypt\BaseMethodInterface;
 interface BaseInterface {
 
   /**
-   * @param \Drupal\drd_agent\Crypt\BaseMethodInterface $crypt
+   * @param BaseMethodInterface $crypt
    * @param array $arguments
    * @param bool $debugMode
    */
@@ -29,7 +29,7 @@ interface BaseInterface {
    * @param string $uuid
    *   UUID of the crypt instance that should be loaded.
    *
-   * @return \Drupal\drd_agent\Crypt\BaseMethodInterface|bool
+   * @return BaseMethodInterface|bool
    *   The loaded Crypt instance if available or FALSE otherwise.
    */
   public function getCryptInstance($uuid);
diff --git a/src/Agent/Action/Blocks.php b/src/Agent/Action/Blocks.php
index 8406483..0fe6d74 100644
--- a/src/Agent/Action/Blocks.php
+++ b/src/Agent/Action/Blocks.php
@@ -3,6 +3,8 @@
 namespace Drupal\drd_agent\Agent\Action;
 
 
+use Drupal\block\BlockInterface;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\block\BlockListBuilder;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 
@@ -22,7 +24,7 @@ class Blocks extends Base {
 
     try {
       $blb = BlockListBuilder::createInstance($this->container, $this->entityTypeManager->getDefinition('block'));
-      /** @var \Drupal\block\BlockInterface[] $blocks */
+      /** @var BlockInterface[] $blocks */
       $blocks = $blb->load();
       foreach ($blocks as $id => $block) {
         $definition = $block->getPlugin()->getPluginDefinition();
@@ -42,7 +44,7 @@ class Blocks extends Base {
    * @param string $delta
    *   ID of the block from the given provider.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|array
+   * @return MarkupInterface|array
    *   Rendered result of the block or an empty array.
    */
   private function renderBlock($delta) {
@@ -52,7 +54,7 @@ class Blocks extends Base {
     catch (PluginNotFoundException $e) {
       return [];
     }
-    /** @var \Drupal\block\BlockInterface[] $blocks */
+    /** @var BlockInterface[] $blocks */
     $blocks = $blb->load();
     if (isset($blocks[$delta])) {
       $block = $blocks[$delta];
diff --git a/src/Agent/Action/Projects.php b/src/Agent/Action/Projects.php
index b9bbcef..e79e291 100644
--- a/src/Agent/Action/Projects.php
+++ b/src/Agent/Action/Projects.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd_agent\Agent\Action;
 
+use Drupal\Core\Extension\Extension;
 use Drupal;
 use Drupal\hacked\hackedProject;
 
@@ -58,7 +59,7 @@ class Projects extends Base {
    *   Type of the project (core, module, theme, etc.).
    * @param string $name
    *   Name of the project.
-   * @param \Drupal\Core\Extension\Extension $extension
+   * @param Extension $extension
    *   Object with further details about the project.
    */
   private function buildProjectInfo(array &$projects, $type, $name, $extension) {
diff --git a/src/Agent/Action/Session.php b/src/Agent/Action/Session.php
index 6479764..dbeb733 100644
--- a/src/Agent/Action/Session.php
+++ b/src/Agent/Action/Session.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\drd_agent\Agent\Action;
 
+use Drupal\user\UserInterface;
 use Drupal\user\Entity\User;
 
 /**
@@ -13,7 +14,7 @@ class Session extends Base {
    * {@inheritdoc}
    */
   public function execute() {
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = User::load(1);
     return [
       'url' => user_pass_reset_url($account) . '/login?destination=/admin',
diff --git a/src/Agent/Action/UserCredentials.php b/src/Agent/Action/UserCredentials.php
index dd3d2a7..a0c49c0 100644
--- a/src/Agent/Action/UserCredentials.php
+++ b/src/Agent/Action/UserCredentials.php
@@ -15,7 +15,7 @@ class UserCredentials extends Base {
    */
   public function execute() {
     $args = $this->getArguments();
-    /** @var \Drupal\user\Entity\User $account */
+    /** @var User $account */
     $account = User::load($args['uid']);
     if (!$account) {
       $this->messenger->addMessage('User does not exist.', 'error');
@@ -37,7 +37,7 @@ class UserCredentials extends Base {
   /**
    * Callback to set the new username if it is not taken yet.
    *
-   * @param \Drupal\user\Entity\User $account
+   * @param User $account
    *   User account which should be changed.
    * @param array $args
    *   Array of arguments.
@@ -62,7 +62,7 @@ class UserCredentials extends Base {
   /**
    * Callback to set the new password.
    *
-   * @param \Drupal\user\Entity\User $account
+   * @param User $account
    *   User account which should be changed.
    * @param array $args
    *   Array of arguments.
@@ -77,7 +77,7 @@ class UserCredentials extends Base {
   /**
    * Callback to set the status of the user account.
    *
-   * @param \Drupal\user\Entity\User $account
+   * @param User $account
    *   User account which should be changed.
    * @param array $args
    *   Array of arguments.
diff --git a/src/Agent/Auth/Base.php b/src/Agent/Auth/Base.php
index 6796f0f..c58bce9 100644
--- a/src/Agent/Auth/Base.php
+++ b/src/Agent/Auth/Base.php
@@ -21,26 +21,26 @@ abstract class Base implements BaseInterface {
   protected $storedSettings;
 
   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
-   * @var \Drupal\user\UserAuthInterface
+   * @var UserAuthInterface
    */
   protected $userAuth;
 
   /**
    * Base constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_User
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\user\UserAuthInterface $user_auth
+   * @param AccountInterface $current_User
+   * @param ConfigFactoryInterface $config_factory
+   * @param UserAuthInterface $user_auth
    */
   public function __construct(AccountInterface $current_User, ConfigFactoryInterface $config_factory, UserAuthInterface $user_auth) {
     $this->currentUser = $current_User;
diff --git a/src/Agent/Auth/BaseInterface.php b/src/Agent/Auth/BaseInterface.php
index 507325c..68a8f00 100644
--- a/src/Agent/Auth/BaseInterface.php
+++ b/src/Agent/Auth/BaseInterface.php
@@ -12,7 +12,7 @@ interface BaseInterface {
   /**
    * Get a list of all implemented authentication methods.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *
    * @return array
    *   Array of all implemented authentication methods.
diff --git a/src/Agent/Remote/Base.php b/src/Agent/Remote/Base.php
index 3fd96de..5492c6a 100644
--- a/src/Agent/Remote/Base.php
+++ b/src/Agent/Remote/Base.php
@@ -17,50 +17,50 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 abstract class Base implements BaseInterface, ContainerInjectionInterface {
 
   /**
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
   /**
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;
 
   /**
    * Base constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $accountSwitcher
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
-   * @param \Drupal\Core\Database\Connection $database
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
-   * @param \Drupal\Component\Datetime\Time $time
+   * @param ContainerInterface $container
+   * @param AccountSwitcherInterface $accountSwitcher
+   * @param ConfigFactoryInterface $configFactory
+   * @param Connection $database
+   * @param EntityTypeManagerInterface $entityTypeManager
+   * @param ModuleHandlerInterface $moduleHandler
+   * @param Time $time
    */
   public function __construct(ContainerInterface $container, AccountSwitcherInterface $accountSwitcher, ConfigFactoryInterface $configFactory, Connection $database, EntityTypeManagerInterface $entityTypeManager, ModuleHandlerInterface $moduleHandler, Time $time) {
     $this->container = $container;
diff --git a/src/Agent/Remote/SecurityReview.php b/src/Agent/Remote/SecurityReview.php
index 67c5def..336e170 100644
--- a/src/Agent/Remote/SecurityReview.php
+++ b/src/Agent/Remote/SecurityReview.php
@@ -3,6 +3,7 @@
 namespace Drupal\drd_agent\Agent\Remote;
 
 
+use Drupal\Core\Session\AccountSwitcherInterface;
 use Drupal\security_review\Controller\ChecklistController;
 use Drupal\Core\Session\UserSession;
 
@@ -23,7 +24,7 @@ class SecurityReview extends Base {
 
       // Only check once per day.
       if ($this->time->getRequestTime() - $security_review->getLastRun() > 86400) {
-        /** @var \Drupal\Core\Session\AccountSwitcherInterface $switcher */
+        /** @var AccountSwitcherInterface $switcher */
         $switcher = $this->container->get('account_switcher');
         $switcher->switchTo(new UserSession(['uid' => 1]));
 
