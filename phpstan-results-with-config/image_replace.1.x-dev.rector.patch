diff --git a/image_replace.info.yml b/image_replace.info.yml
index e945aa2..75d389e 100644
--- a/image_replace.info.yml
+++ b/image_replace.info.yml
@@ -1,6 +1,6 @@
 name: Image Replace Effect
 type: module
 description: 'Provides an image style effect capable of replacing the whole image with another one.'
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 dependencies:
   - drupal:image
diff --git a/src/ImageReplaceDatabaseStorage.php b/src/ImageReplaceDatabaseStorage.php
index ecf44d0..afef35c 100644
--- a/src/ImageReplaceDatabaseStorage.php
+++ b/src/ImageReplaceDatabaseStorage.php
@@ -12,14 +12,14 @@ class ImageReplaceDatabaseStorage implements ImageReplaceStorageInterface {
   /**
    * Active database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Constructs a ImageReplaceDatabaseStorage object.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection to be used.
    */
   public function __construct(Connection $database) {
diff --git a/src/Plugin/ImageEffect/ImageReplaceEffect.php b/src/Plugin/ImageEffect/ImageReplaceEffect.php
index e7de793..70715b3 100644
--- a/src/Plugin/ImageEffect/ImageReplaceEffect.php
+++ b/src/Plugin/ImageEffect/ImageReplaceEffect.php
@@ -23,14 +23,14 @@ class ImageReplaceEffect extends ImageEffectBase {
   /**
    * The image factory service.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;
 
   /**
    * The image replace storage service.
    *
-   * @var \Drupal\image_replace\ImageReplaceStorageInterface
+   * @var ImageReplaceStorageInterface
    */
   protected $imageReplaceStorage;
 
diff --git a/src/Plugin/ImageToolkit/Operation/gd/Replace.php b/src/Plugin/ImageToolkit/Operation/gd/Replace.php
index 942ae38..d0c8e4d 100644
--- a/src/Plugin/ImageToolkit/Operation/gd/Replace.php
+++ b/src/Plugin/ImageToolkit/Operation/gd/Replace.php
@@ -79,7 +79,7 @@ class Replace extends GDImageToolkitOperationBase {
    * @param array $arguments
    *   An associative array of data to be used by the toolkit operation.
    *
-   * @return \Drupal\system\Plugin\ImageToolkit\GDToolkit
+   * @return GDToolkit
    *   The correctly typed replacement image toolkit for GD operations.
    */
   protected function getReplacementImageToolkit(array $arguments = []) {
diff --git a/src/Tests/AdminTest.php b/src/Tests/AdminTest.php
index bfba630..52e5e7f 100644
--- a/src/Tests/AdminTest.php
+++ b/src/Tests/AdminTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\image_replace\Tests;
 
+use Drupal\user\Entity\User;
 use Drupal\Component\Utility\Html;
 use Drupal\image\Entity\ImageStyle;
 use Drupal\node\Entity\Node;
@@ -28,14 +29,14 @@ class AdminTest extends ImageReplaceTestBase {
   /**
    * The test admin user.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $adminUser;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create an image style containing the replace effect.
@@ -138,7 +139,8 @@ class AdminTest extends ImageReplaceTestBase {
     ];
     $edit['files[image_original_0]'] = $file_system->realpath($original_file->getFileUri());
     $edit['files[image_replacement_0]'] = $file_system->realpath($replacement_file->getFileUri());
-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->statusCodeEquals(200);
 
     $edit = [
@@ -152,8 +154,8 @@ class AdminTest extends ImageReplaceTestBase {
     $node = Node::load($matches[1]);
 
     // Verify that the original image is shown on the full node view.
-    $generated_url = file_create_url($node->image_original->entity->getFileUri());
-    $relative_url = file_url_transform_relative($generated_url);
+    $generated_url = \Drupal::service('file_url_generator')->generateAbsoluteString($node->image_original->entity->getFileUri());
+    $relative_url = \Drupal::service('file_url_generator')->transformRelative($generated_url);
     $this->assertSession()->responseContains(Html::escape($relative_url));
 
     $generated_image_data = $this->drupalGet($generated_url);
@@ -169,7 +171,7 @@ class AdminTest extends ImageReplaceTestBase {
     $this->drupalGet('node');
     $this->assertSession()->statusCodeEquals(200);
     $generated_url = ImageStyle::load($this->styleName)->buildUrl($node->image_original->entity->getFileUri());
-    $relative_url = file_url_transform_relative($generated_url);
+    $relative_url = \Drupal::service('file_url_generator')->transformRelative($generated_url);
     $this->assertSession()->responseContains(Html::escape($relative_url));
 
     $generated_image_data = $this->drupalGet($generated_url);
@@ -184,7 +186,8 @@ class AdminTest extends ImageReplaceTestBase {
     $edit = [
       $field_name => '0',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article/fields/node.article.image_original', $edit, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/article/fields/node.article.image_original');
+    $this->submitForm($edit, t('Save settings'));
     $this->assertSession()->statusCodeEquals(200);
 
     // Verify that a message is displayed if the mapping changes when there is
diff --git a/src/Tests/EntityTest.php b/src/Tests/EntityTest.php
index ef1a7ab..6a98a7c 100644
--- a/src/Tests/EntityTest.php
+++ b/src/Tests/EntityTest.php
@@ -28,7 +28,7 @@ class EntityTest extends ImageReplaceTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create an image style containing the replace effect.
@@ -92,7 +92,7 @@ class EntityTest extends ImageReplaceTestBase {
     $this->drupalGet('node');
     $this->assertSession()->statusCodeEquals(200);
     $generated_url = ImageStyle::load($this->styleName)->buildUrl($node->image_original->entity->getFileUri());
-    $relative_url = file_url_transform_relative($generated_url);
+    $relative_url = \Drupal::service('file_url_generator')->transformRelative($generated_url);
     $this->assertSession()->responseContains(Html::escape($relative_url));
 
     $generated_image_data = $this->drupalGet($generated_url);
@@ -107,8 +107,8 @@ class EntityTest extends ImageReplaceTestBase {
     // Check full view.
     $this->drupalGet('node/' . $node->id());
     $this->assertSession()->statusCodeEquals(200);
-    $generated_url = file_create_url($node->image_original->entity->getFileUri());
-    $relative_url = file_url_transform_relative($generated_url);
+    $generated_url = \Drupal::service('file_url_generator')->generateAbsoluteString($node->image_original->entity->getFileUri());
+    $relative_url = \Drupal::service('file_url_generator')->transformRelative($generated_url);
     $this->assertSession()->responseContains(Html::escape($relative_url));
 
     $generated_image_data = $this->drupalGet($generated_url);
