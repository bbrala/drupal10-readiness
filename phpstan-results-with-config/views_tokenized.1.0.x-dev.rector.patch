diff --git a/src/ViewsTokenized.php b/src/ViewsTokenized.php
index 562141f..e6515b5 100644
--- a/src/ViewsTokenized.php
+++ b/src/ViewsTokenized.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\views_tokenized;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Plugin\Context\ContextRepositoryInterface;
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\Database\Query\Select;
 use Drupal\Core\Access\AccessibleInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Database\Query\AlterableInterface;
@@ -19,21 +23,21 @@ class ViewsTokenized {
   /**
    * The Token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
   /**
    * The context repository.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface|null
+   * @var ContextRepositoryInterface|null
    */
   protected $contextRepository;
 
@@ -54,7 +58,7 @@ class ViewsTokenized {
   /**
    * The ViewsTokenized constructor.
    *
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The Token service.
    */
   public function __construct(Token $token) {
@@ -64,7 +68,7 @@ class ViewsTokenized {
   /**
    * Query alteration that replaces any Tokens.
    *
-   * @param \Drupal\Core\Database\Query\AlterableInterface $query
+   * @param AlterableInterface $query
    *   A Query object describing the composite parts of a SQL query.
    */
   public function alterQuery(AlterableInterface $query) {
@@ -121,7 +125,7 @@ class ViewsTokenized {
       if (!($value instanceof EntityInterface)) {
         continue;
       }
-      /** @var \Drupal\Core\Entity\EntityInterface $value */
+      /** @var EntityInterface $value */
       if ($entity_token_type_mapper) {
         $the_real_token_type = $entity_token_type_mapper->getTokenTypeForEntityType($value->getEntityTypeId(), TRUE);
       }
@@ -159,7 +163,7 @@ class ViewsTokenized {
         $bubbleable_metadata->addCacheableDependency($contexts[$type]);
       }
       if ($value instanceof AccessibleInterface) {
-        /** @var \Drupal\Core\Access\AccessResultInterface $access_result */
+        /** @var AccessResultInterface $access_result */
         $access_result = $value->access('view', NULL, TRUE);
         $bubbleable_metadata->addCacheableDependency($access_result);
         if (!$access_result->isAllowed()) {
@@ -180,13 +184,13 @@ class ViewsTokenized {
   /**
    * Collects input containing Tokens from the given query.
    *
-   * @param \Drupal\Core\Database\Query\AlterableInterface $query
+   * @param AlterableInterface $query
    *   A Query object describing the composite parts of a SQL query.
    * @param array &$to_replace
    *   A list of already collected input to evaluate.
    */
   protected function collectTokenInput(AlterableInterface $query, array &$to_replace) {
-    /** @var \Drupal\Core\Database\Query\Select $query */
+    /** @var Select $query */
     $tables = &$query->getTables();
     $conditions = &$query->conditions();
 
@@ -220,7 +224,7 @@ class ViewsTokenized {
   /**
    * Sub-method to collect input contaning Tokens from conditions.
    *
-   * @param \Drupal\Core\Database\Query\AlterableInterface $query
+   * @param AlterableInterface $query
    *   A Query object describing the composite parts of a SQL query.
    * @param mixed &$conditions
    *   The conditions.
