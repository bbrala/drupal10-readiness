modules/contrib/price/price.install
modules/contrib/price/price.module
modules/contrib/price/price.views.inc
modules/contrib/price/src/Cache/Context/CountryCacheContext.php
modules/contrib/price/src/Calculator.php
modules/contrib/price/src/Country.php
modules/contrib/price/src/CurrencyFormatter.php
modules/contrib/price/src/CurrencyImporter.php
modules/contrib/price/src/CurrencyImporterInterface.php
modules/contrib/price/src/CurrencyListBuilder.php
modules/contrib/price/src/CurrencyRouteProvider.php
modules/contrib/price/src/CurrentCountry.php
modules/contrib/price/src/CurrentCountryInterface.php
modules/contrib/price/src/CurrentLocale.php
modules/contrib/price/src/CurrentLocaleInterface.php
modules/contrib/price/src/Element/Number.php
modules/contrib/price/src/Element/Price.php
modules/contrib/price/src/Element/PriceModified.php
modules/contrib/price/src/Entity/Currency.php
modules/contrib/price/src/Entity/CurrencyInterface.php
modules/contrib/price/src/Entity/PriceModifier.php
modules/contrib/price/src/Entity/PriceModifierInterface.php
modules/contrib/price/src/Event/NumberFormatDefinitionEvent.php
modules/contrib/price/src/Event/NumberFormatEvent.php
modules/contrib/price/src/Event/PriceEvents.php
modules/contrib/price/src/Exception/CurrencyMismatchException.php
modules/contrib/price/src/Form/CurrencyForm.php
modules/contrib/price/src/Form/CurrencyImportForm.php
modules/contrib/price/src/Form/PriceModifierForm.php
modules/contrib/price/src/LegacyNumberFormatter.php
modules/contrib/price/src/Locale.php
modules/contrib/price/src/NumberFormatter.php
modules/contrib/price/src/NumberFormatterFactory.php
modules/contrib/price/src/NumberFormatterFactoryInterface.php
modules/contrib/price/src/Plugin/Field/FieldFormatter/PriceDefaultFormatter.php
modules/contrib/price/src/Plugin/Field/FieldFormatter/PriceModifiedDefaultFormatter.php
modules/contrib/price/src/Plugin/Field/FieldFormatter/PricePlainFormatter.php
modules/contrib/price/src/Plugin/Field/FieldType/PriceItem.php
modules/contrib/price/src/Plugin/Field/FieldType/PriceModifiedItem.php
modules/contrib/price/src/Plugin/Field/FieldWidget/PriceDefaultWidget.php
modules/contrib/price/src/Plugin/Field/FieldWidget/PriceModifiedDefaultWidget.php
modules/contrib/price/src/Plugin/Validation/Constraint/CurrencyConstraint.php
modules/contrib/price/src/Plugin/Validation/Constraint/CurrencyConstraintValidator.php
modules/contrib/price/src/Plugin/Validation/Constraint/PriceModifierConstraint.php
modules/contrib/price/src/Plugin/Validation/Constraint/PriceModifierConstraintValidator.php
modules/contrib/price/src/Price.php
modules/contrib/price/src/PriceModified.php
modules/contrib/price/src/PriceModifierListBuilder.php
modules/contrib/price/src/Repository/CurrencyRepository.php
modules/contrib/price/src/Repository/NumberFormatRepository.php
modules/contrib/price/src/Resolver/ChainCountryResolver.php
modules/contrib/price/src/Resolver/ChainCountryResolverInterface.php
modules/contrib/price/src/Resolver/ChainLocaleResolver.php
modules/contrib/price/src/Resolver/ChainLocaleResolverInterface.php
modules/contrib/price/src/Resolver/CountryResolverInterface.php
modules/contrib/price/src/Resolver/DefaultCountryResolver.php
modules/contrib/price/src/Resolver/DefaultLocaleResolver.php
modules/contrib/price/src/Resolver/LocaleResolverInterface.php
modules/contrib/price/src/Rounder.php
modules/contrib/price/src/RounderInterface.php
modules/contrib/price/src/TwigExtension/PriceTwigExtension.php

41 files with changes
=====================

1) modules/contrib/price/src/RounderInterface.php:11

    ---------- begin diff ----------
@@ @@
    *
    * For example, USD prices will be rounded to 2 decimals.
    *
-   * @param \Drupal\price\Price $price
+   * @param Price $price
    *   The price.
    * @param int $mode
    *   The rounding mode. One of the following constants: PHP_ROUND_HALF_UP,
    *   PHP_ROUND_HALF_DOWN, PHP_ROUND_HALF_EVEN, PHP_ROUND_HALF_ODD.
    *
-   * @return \Drupal\price\Price
+   * @return Price
    *   The rounded price.
    *
    * @throws \InvalidArgumentException
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/price/src/Rounder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\price;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\price\Entity\CurrencyInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;

 class Rounder implements RounderInterface {
@@ @@
   /**
    * The currency storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $currencyStorage;

@@ @@
   /**
    * Constructs a new Rounder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    */
   public function round(Price $price, $mode = PHP_ROUND_HALF_UP) {
     $currency_code = $price->getCurrencyCode();
-    /** @var \Drupal\price\Entity\CurrencyInterface $currency */
+    /** @var CurrencyInterface $currency */
     $currency = $this->currencyStorage->load($currency_code);
     if (!$currency) {
       throw new \InvalidArgumentException(sprintf('Could not load the "%s" currency.', $currency_code));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/price/src/Resolver/LocaleResolverInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\price\Resolver;

+use Drupal\price\Locale;
 /**
  * Defines the interface for locale resolvers.
  */
@@ @@
   /**
    * Resolves the locale.
    *
-   * @return \Drupal\price\Locale|null
+   * @return Locale|null
    *   The locale object, if resolved. Otherwise NULL, indicating that the next
    *   resolver in the chain should be called.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/price/src/Resolver/DefaultLocaleResolver.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The current country.
    *
-   * @var \Drupal\price\CurrentCountryInterface
+   * @var CurrentCountryInterface
    */
   protected $currentCountry;

@@ @@
   /**
    * Constructs a new DefaultLocaleResolver object.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\price\CurrentCountryInterface $current_country
+   * @param CurrentCountryInterface $current_country
    *   The current country.
    */
   public function __construct(LanguageManagerInterface $language_manager, CurrentCountryInterface $current_country) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/price/src/Resolver/DefaultCountryResolver.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a new DefaultCountryResolver object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/price/src/Resolver/CountryResolverInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\price\Resolver;

+use Drupal\price\Country;
 /**
  * Defines the interface for country resolvers.
  */
@@ @@
   /**
    * Resolves the country.
    *
-   * @return \Drupal\price\Country|null
+   * @return Country|null
    *   The country object, if resolved. Otherwise NULL, indicating that the next
    *   resolver in the chain should be called.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/price/src/Resolver/ChainLocaleResolverInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Adds a resolver.
    *
-   * @param \Drupal\price\Resolver\LocaleResolverInterface $resolver
+   * @param LocaleResolverInterface $resolver
    *   The resolver.
    */
   public function addResolver(LocaleResolverInterface $resolver);
@@ @@
   /**
    * Gets all added resolvers.
    *
-   * @return \Drupal\price\Resolver\LocaleResolverInterface[]
+   * @return LocaleResolverInterface[]
    *   The resolvers.
    */
   public function getResolvers();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/price/src/Resolver/ChainLocaleResolver.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * The resolvers.
    *
-   * @var \Drupal\price\Resolver\LocaleResolverInterface[]
+   * @var LocaleResolverInterface[]
    */
   protected $resolvers = [];

@@ @@
   /**
    * Constructs a new ChainLocaleResolver object.
    *
-   * @param \Drupal\price\Resolver\LocaleResolverInterface[] $resolvers
+   * @param LocaleResolverInterface[] $resolvers
    *   The resolvers.
    */
   public function __construct(array $resolvers = []) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/price/src/Resolver/ChainCountryResolverInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Adds a resolver.
    *
-   * @param \Drupal\price\Resolver\CountryResolverInterface $resolver
+   * @param CountryResolverInterface $resolver
    *   The resolver.
    */
   public function addResolver(CountryResolverInterface $resolver);
@@ @@
   /**
    * Gets all added resolvers.
    *
-   * @return \Drupal\price\Resolver\CountryResolverInterface[]
+   * @return CountryResolverInterface[]
    *   The resolvers.
    */
   public function getResolvers();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/price/src/Resolver/ChainCountryResolver.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * The resolvers.
    *
-   * @var \Drupal\price\Resolver\CountryResolverInterface[]
+   * @var CountryResolverInterface[]
    */
   protected $resolvers = [];

@@ @@
   /**
    * Constructs a new ChainCountryResolver object.
    *
-   * @param \Drupal\price\Resolver\CountryResolverInterface[] $resolvers
+   * @param CountryResolverInterface[] $resolvers
    *   The resolvers.
    */
   public function __construct(array $resolvers = []) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/price/src/Repository/NumberFormatRepository.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Creates a NumberFormatRepository instance.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
@@ @@
     $definition = parent::processDefinition($locale, $definition);
     // Let the definition be altered.
     $event = new NumberFormatDefinitionEvent($definition);
-    $this->eventDispatcher->dispatch(PriceEvents::NUMBER_FORMAT, $event);
+    $this->eventDispatcher->dispatch($event, PriceEvents::NUMBER_FORMAT);
     $definition = $event->getDefinition();

     return $definition;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/price/src/Repository/CurrencyRepository.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\price\Repository;

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use CommerceGuys\Intl\Currency\Currency;
 use CommerceGuys\Intl\Currency\CurrencyRepositoryInterface;
 use CommerceGuys\Intl\Exception\UnknownCurrencyException;
@@ @@
   /**
    * The currency storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $currencyStorage;

@@ @@
   /**
    * Creates an CurrencyRepository instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function get($currency_code, $locale = NULL) {
-    /** @var \Drupal\price\Entity\CurrencyInterface $currency */
+    /** @var CurrencyInterface $currency */
     $currency = $this->currencyStorage->load($currency_code);
     if (!$currency) {
       throw new UnknownCurrencyException($currency_code);
@@ @@
    */
   public function getAll($locale = NULL) {
     $all = [];
-    /** @var \Drupal\price\Entity\CurrencyInterface[] $currencies */
+    /** @var CurrencyInterface[] $currencies */
     $currencies = $this->currencyStorage->loadMultiple();
     foreach ($currencies as $currency_code => $currency) {
       $all[$currency_code] = $this->createValueObjectFromEntity($currency);
@@ @@
    */
   public function getList($locale = NULL) {
     $list = [];
-    /** @var \Drupal\price\Entity\CurrencyInterface[] $entities */
+    /** @var CurrencyInterface[] $entities */
     $currencies = $this->currencyStorage->loadMultiple();
     foreach ($currencies as $currency_code => $currency) {
       $list[$currency_code] = $currency->getName();
@@ @@
   /**
    * Creates a currency value object from the given entity.
    *
-   * @param \Drupal\price\Entity\CurrencyInterface $currency
+   * @param CurrencyInterface $currency
    *   The currency entity.
    *
-   * @return \CommerceGuys\Intl\Currency\Currency
+   * @return Currency
    *   The currency value object.
    */
   protected function createValueObjectFromEntity(CurrencyInterface $currency) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/price/src/PriceModified.php:290

    ---------- begin diff ----------
@@ @@
    * @param \Drupal\price\PriceModified $second_price
    *   The second price.
    *
-   * @throws \Drupal\price\Exception\CurrencyMismatchException
+   * @throws CurrencyMismatchException
    *   Thrown when the prices do not have the same currency.
    */
   protected function assertSameCurrency(PriceModified $first_price, PriceModified $second_price) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/price/src/Price.php:272

    ---------- begin diff ----------
@@ @@
    * @param \Drupal\price\Price $second_price
    *   The second price.
    *
-   * @throws \Drupal\price\Exception\CurrencyMismatchException
+   * @throws CurrencyMismatchException
    *   Thrown when the prices do not have the same currency.
    */
   protected function assertSameCurrency(Price $first_price, Price $second_price) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/price/src/Plugin/Validation/Constraint/PriceModifierConstraintValidator.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new PriceModifierConstraintValidator object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/price/src/Plugin/Validation/Constraint/CurrencyConstraintValidator.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new CurrencyConstraintValidator object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/price/src/Plugin/Field/FieldType/PriceModifiedItem.php:124

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the Price value object for the current field item.
    *
-   * @return \Drupal\price\PriceModified
+   * @return PriceModified
    *   The Price value object.
    */
   public function toPrice() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/price/src/Plugin/Field/FieldType/PriceItem.php:138

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the Price value object for the current field item.
    *
-   * @return \Drupal\price\Price
+   * @return Price
    *   The Price value object.
    */
   public function toPrice() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/price/src/Plugin/Field/FieldFormatter/PricePlainFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\price\Plugin\Field\FieldFormatter;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * The currency storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $currencyStorage;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/price/src/Plugin/Field/FieldFormatter/PriceModifiedDefaultFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\price\Plugin\Field\FieldFormatter;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\price\NumberFormatterFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
   /**
    * The currency storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $currencyStorage;

@@ @@
   /**
    * The modifier storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $modifierStorage;

@@ @@
   /**
    * The number formatter.
    *
-   * @var \CommerceGuys\Intl\Formatter\NumberFormatterInterface
+   * @var NumberFormatterInterface
    */
   protected $numberFormatter;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\price\NumberFormatterFactoryInterface $number_formatter_factory
+   * @param NumberFormatterFactoryInterface $number_formatter_factory
    *   The number formatter factory.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager, NumberFormatterFactoryInterface $number_formatter_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/price/src/Plugin/Field/FieldFormatter/PriceDefaultFormatter.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The currency formatter.
    *
-   * @var \CommerceGuys\Intl\Formatter\CurrencyFormatterInterface
+   * @var CurrencyFormatterInterface
    */
   protected $currencyFormatter;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \CommerceGuys\Intl\Formatter\CurrencyFormatterInterface $currency_formatter
+   * @param CurrencyFormatterInterface $currency_formatter
    *   The currency formatter.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, CurrencyFormatterInterface $currency_formatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/price/src/NumberFormatterFactoryInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Creates an instance of the number formatter for the current locale.
    *
-   * @return \Drupal\price\LegacyNumberFormatter
+   * @return LegacyNumberFormatter
    *   The created number formatter.
    */
   public function createInstance();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/price/src/NumberFormatterFactory.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The currency formatter.
    *
-   * @var \CommerceGuys\Intl\Formatter\CurrencyFormatterInterface
+   * @var CurrencyFormatterInterface
    */
   protected $currencyFormatter;

@@ @@
   /**
    * Constructs a new NumberFormatterFactory object.
    *
-   * @param \CommerceGuys\Intl\Formatter\CurrencyFormatterInterface $currency_formatter
+   * @param CurrencyFormatterInterface $currency_formatter
    *   The currency formatter.
    */
   public function __construct(CurrencyFormatterInterface $currency_formatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/price/src/NumberFormatter.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new NumberFormatter object.
    *
-   * @param \CommerceGuys\Intl\NumberFormat\NumberFormatRepositoryInterface $number_format_repository
+   * @param NumberFormatRepositoryInterface $number_format_repository
    *   The number format repository.
-   * @param \Drupal\price\CurrentLocaleInterface $current_locale
+   * @param CurrentLocaleInterface $current_locale
    *   The current locale.
    */
   public function __construct(NumberFormatRepositoryInterface $number_format_repository, CurrentLocaleInterface $current_locale) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/price/src/LegacyNumberFormatter.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The currency formatter.
    *
-   * @var \CommerceGuys\Intl\Formatter\CurrencyFormatterInterface
+   * @var CurrencyFormatterInterface
    */
   protected $currencyFormatter;

@@ @@
   /**
    * Constructs a new LegacyNumberFormatter object.
    *
-   * @param \CommerceGuys\Intl\Formatter\CurrencyFormatterInterface $currency_formatter
+   * @param CurrencyFormatterInterface $currency_formatter
    *   The currency formatter.
    */
   public function __construct(CurrencyFormatterInterface $currency_formatter) {
@@ @@
    *
    * @param string $number
    *   The number.
-   * @param \Drupal\price\Entity\CurrencyInterface $currency
+   * @param CurrencyInterface $currency
    *   The currency.
    *
    * @return string
@@ @@
    *
    * @param string $number
    *   The formatted number.
-   * @param \Drupal\price\Entity\CurrencyInterface $currency
+   * @param CurrencyInterface $currency
    *   The currency.
    *
    * @return string|false
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


26) modules/contrib/price/src/Form/PriceModifierForm.php:10

    ---------- begin diff ----------
@@ @@
 class PriceModifierForm extends EntityForm {

   /**
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
     $status = $entity->save();

     if ($status == SAVED_UPDATED) {
-      drupal_set_message($this->t($entity_label . ' %label has been updated.', ['%label' => $entity->label()]));
+      $this->messenger()->addStatus($this->t($entity_label . ' %label has been updated.', ['%label' => $entity->label()]));
     }
     else {
-      drupal_set_message($this->t($entity_label . ' %label has been created.', ['%label' => $entity->label()]));
+      $this->messenger()->addStatus($this->t($entity_label . ' %label has been created.', ['%label' => $entity->label()]));
     }

     $form_state->setRedirect('entity.' . $entity_type->id() . '.collection');
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/price/src/Form/CurrencyImportForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The currency importer.
    *
-   * @var \Drupal\price\CurrencyImporterInterface
+   * @var CurrencyImporterInterface
    */
   protected $importer;

@@ @@
   /**
    * Creates a new CurrencyImportForm object.
    *
-   * @param \Drupal\price\CurrencyImporterInterface $importer
+   * @param CurrencyImporterInterface $importer
    *   The currency importer.
    */
   public function __construct(CurrencyImporterInterface $importer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/price/src/Form/CurrencyForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\price\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\price\Entity\CurrencyInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The currency storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * Creates a new CurrencyForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The currency storage.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = $container->get('entity_type.manager');

     return new static($entity_type_manager);
@@ @@
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
-    /** @var \Drupal\price\Entity\CurrencyInterface $currency */
+    /** @var CurrencyInterface $currency */
     $currency = $this->entity;

     $form['name'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/price/src/Event/NumberFormatEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\price\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Defines the number format event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/price/src/Event/NumberFormatDefinitionEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\price\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Defines the number format definition event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/price/src/Element/PriceModified.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\price\Element;

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\price\Entity\CurrencyInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element\FormElement;

@@ @@
    *
    * @param array $element
    *   The initial price_price form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ @@
       throw new \InvalidArgumentException('The #default_value for a price_modified element must be an array with "number", "currency_code" and "modifier" keys.');
     }

-    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $currency_storage */
+    /** @var ConfigEntityStorageInterface $currency_storage */
     $currency_storage = \Drupal::service('entity_type.manager')->getStorage('price_currency');
-    /** @var \Drupal\price\Entity\CurrencyInterface[] $currencies */
+    /** @var CurrencyInterface[] $currencies */
     $currencies = $currency_storage->loadMultiple();
     $currency_codes = array_keys($currencies);
     // Keep only available currencies.
@@ @@
       $fraction_digits[] = $currency->getFractionDigits();
     }

-    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $modifier_storage */
+    /** @var ConfigEntityStorageInterface $modifier_storage */
     $modifier_storage = \Drupal::service('entity_type.manager')->getStorage('price_modifier');
-    /** @var \Drupal\price\Entity\CurrencyInterface[] $currencies */
+    /** @var CurrencyInterface[] $currencies */
     $modifiers = $modifier_storage->loadMultiple();

     $modifier_codes = array_keys($modifiers);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/price/src/Element/Price.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\price\Element;

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\price\Entity\CurrencyInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element\FormElement;

@@ @@
    *
    * @param array $element
    *   The initial price_price form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ @@
       throw new \InvalidArgumentException('The #default_value for a price_price element must be an array with "number" and "currency_code" keys.');
     }

-    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $currency_storage */
+    /** @var ConfigEntityStorageInterface $currency_storage */
     $currency_storage = \Drupal::service('entity_type.manager')->getStorage('price_currency');
-    /** @var \Drupal\price\Entity\CurrencyInterface[] $currencies */
+    /** @var CurrencyInterface[] $currencies */
     $currencies = $currency_storage->loadMultiple();
     $currency_codes = array_keys($currencies);
     // Keep only available currencies.
@@ @@
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function moveInlineErrors(array $element, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/price/src/Element/Number.php:91

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   The initial price_number form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ @@
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function validateNumber(array $element, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/price/src/CurrentLocaleInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the locale for the current request.
    *
-   * @return \Drupal\price\Locale
+   * @return Locale
    *   The locale.
    */
   public function getLocale();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


35) modules/contrib/price/src/CurrentLocale.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The chain resolver.
    *
-   * @var \Drupal\price\Resolver\ChainLocaleResolverInterface
+   * @var ChainLocaleResolverInterface
    */
   protected $chainResolver;

@@ @@
   /**
    * Constructs a new CurrentLocale object.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\price\Resolver\ChainLocaleResolverInterface $chain_resolver
+   * @param ChainLocaleResolverInterface $chain_resolver
    *   The chain resolver.
    */
   public function __construct(RequestStack $request_stack, ChainLocaleResolverInterface $chain_resolver) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


36) modules/contrib/price/src/CurrentCountryInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the country for the current request.
    *
-   * @return \Drupal\price\Country
+   * @return Country
    *   The country.
    */
   public function getCountry();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


37) modules/contrib/price/src/CurrentCountry.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The chain resolver.
    *
-   * @var \Drupal\price\Resolver\ChainCountryResolverInterface
+   * @var ChainCountryResolverInterface
    */
   protected $chainResolver;

@@ @@
   /**
    * Constructs a new CurrentCountry object.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\price\Resolver\ChainCountryResolverInterface $chain_resolver
+   * @param ChainCountryResolverInterface $chain_resolver
    *   The chain resolver.
    */
   public function __construct(RequestStack $request_stack, ChainCountryResolverInterface $chain_resolver) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


38) modules/contrib/price/src/CurrencyImporterInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\price;

+use Drupal\price\Entity\CurrencyInterface;
+use CommerceGuys\Intl\Exception\UnknownCurrencyException;
 /**
  * Imports the library-provided currency data into config entities.
  */
@@ @@
    * @param string $currency_code
    *   The currency code.
    *
-   * @return \Drupal\price\Entity\CurrencyInterface
+   * @return CurrencyInterface
    *   The saved currency entity.
    *
-   * @throws \CommerceGuys\Intl\Exception\UnknownCurrencyException
+   * @throws UnknownCurrencyException
    *   Thrown when the currency couldn't be found in the library definitions.
    */
   public function import($currency_code);
@@ @@
    * @param string $country_code
    *   The country code.
    *
-   * @return \Drupal\price\Entity\CurrencyInterface|null
+   * @return CurrencyInterface|null
    *   The saved currency entity or NULL if the given country's currency
    *   isn't known.
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


39) modules/contrib/price/src/CurrencyImporter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\price;

+use Drupal\Core\Entity\EntityStorageInterface;
+use CommerceGuys\Intl\Currency\CurrencyRepositoryInterface;
+use Drupal\language\Config\LanguageConfigOverride;
 use CommerceGuys\Addressing\Country\CountryRepository;
 use CommerceGuys\Intl\Currency\CurrencyRepository;
 use CommerceGuys\Intl\Exception\UnknownLocaleException;
@@ @@
   /**
    * The currency storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The library's currency repository.
    *
-   * @var \CommerceGuys\Intl\Currency\CurrencyRepositoryInterface
+   * @var CurrencyRepositoryInterface
    */
   protected $externalRepository;

@@ @@
   /**
    * Creates a new CurrencyImporter object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager) {
@@ @@
       'symbol' => $currency->getSymbol(),
       'fractionDigits' => $currency->getFractionDigits(),
     ];
-    /** @var \Drupal\price\Entity\CurrencyInterface $entity */
+    /** @var CurrencyInterface $entity */
     $entity = $this->storage->create($values);
     $entity->trustData()->save();
     if ($this->languageManager->isMultilingual()) {
@@ @@
   /**
    * Imports translations for the given currency entity.
    *
-   * @param \Drupal\price\Entity\CurrencyInterface $currency
+   * @param CurrencyInterface $currency
    *   The currency entity.
    * @param array $langcodes
    *   The langcodes.
@@ @@
         continue;
       }

-      /** @var \Drupal\language\Config\LanguageConfigOverride $config_translation */
+      /** @var LanguageConfigOverride $config_translation */
       $config_translation = $this->languageManager->getLanguageConfigOverride($langcode, $config_name);
       if ($config_translation->isNew()) {
         $config_translation->set('name', $translated_currency->getName());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


40) modules/contrib/price/src/CurrencyFormatter.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new CurrencyFormatter object.
    *
-   * @param \CommerceGuys\Intl\NumberFormat\NumberFormatRepositoryInterface $number_format_repository
+   * @param NumberFormatRepositoryInterface $number_format_repository
    *   The number format repository.
-   * @param \CommerceGuys\Intl\Currency\CurrencyRepositoryInterface $currency_repository
+   * @param CurrencyRepositoryInterface $currency_repository
    *   The currency repository.
-   * @param \Drupal\price\CurrentLocaleInterface $current_locale
+   * @param CurrentLocaleInterface $current_locale
    *   The current locale.
    */
   public function __construct(NumberFormatRepositoryInterface $number_format_repository, CurrencyRepositoryInterface $currency_repository, CurrentLocaleInterface $current_locale) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/price/src/Cache/Context/CountryCacheContext.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The current country.
    *
-   * @var \Drupal\price\CurrentCountry
+   * @var CurrentCountry
    */
   protected $currentCountry;

@@ @@
   /**
    * Constructs a new CountryCacheContext object.
    *
-   * @param \Drupal\price\CurrentCountry $country
+   * @param CurrentCountry $country
    *   The current country.
    */
   public function __construct(CurrentCountry $country) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [WARNING] 2 nodes were removed                                                 

 [OK] 41 files have been changed by Rector                                      

