modules/contrib/ecc/ecc.install
modules/contrib/ecc/ecc.module
modules/contrib/ecc/src/EccAccessControlHandler.php
modules/contrib/ecc/src/EccListBuilder.php
modules/contrib/ecc/src/EccTypeListBuilder.php
modules/contrib/ecc/src/Entity/Ecc.php
modules/contrib/ecc/src/Entity/EccType.php
modules/contrib/ecc/src/Form/ConfigurationForm.php
modules/contrib/ecc/src/Form/EccForm.php
modules/contrib/ecc/src/Form/EccTypeDeleteForm.php
modules/contrib/ecc/src/Form/EccTypeForm.php
modules/contrib/ecc/src/Plugin/rest/resource/EccResource.php

6 files with changes
====================

1) modules/contrib/ecc/src/Plugin/rest/resource/EccResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ecc\Plugin\rest\resource;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\ecc\Entity\EccType;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\ecc\Entity\Ecc;
 use Drupal\rest\Plugin\ResourceBase;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
    * @param string $name
    *   Machine name.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   Response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function get($name) {
     $entity = Ecc::loadByMachineName($name);
@@ @@
       throw new NotFoundHttpException($this->t('ECC not found'));
     }

-    /** @var \Drupal\ecc\Entity\EccType $type */
+    /** @var EccType $type */
     $type = $entity->get('type')->entity;

     // Check if config is exportable.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ecc/src/Form/EccTypeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ecc\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Serialization\Exception\InvalidDataTypeException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
       return $form;
     }

-    /** @var \Drupal\ecc\Entity\EccType $entity */
+    /** @var EccType $entity */
     $entity = $this->getEntity();

     $form['title'] = [
@@ @@
    * @return array
    *   Array of options.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getConfigCategoryOptions() {
     $storage = $this->entityTypeManager->getStorage('taxonomy_term');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/ecc/src/Form/EccForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ecc\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\file\Entity\File;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\ecc\Entity\Ecc;
@@ @@
    * @return array
    *   Form with all generated fields.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function buildFields(array $fields, array $default_values) {
     $form = [];
@@ @@
    *
    * @param array $element
    *   File element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function validateManagedFile(array $element, FormStateInterface $form_state) {
     // Skip ajax callback.
@@ @@
       return;
     }

-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     $file = reset($element['#files']);
     $file->setPermanent();
     $file->save();
@@ @@

     $form_state->setValueForElement($element, [
       'id' => $file->id(),
-      'url' => file_create_url($uri),
+      'url' => \Drupal::service('file_url_generator')->generateAbsoluteString($uri),
     ]);
   }

@@ @@
   /**
    * Build sub form for ECC config.
    *
-   * @param \Drupal\ecc\Entity\EccType $config_type
+   * @param EccType $config_type
    *   Config type.
    *
    * @return array
    *   Sub form.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function buildSubForm(EccType $config_type) {
     $fields = $config_type->getFormFields();

-    /** @var \Drupal\ecc\Entity\Ecc $entity */
+    /** @var Ecc $entity */
     $entity = $this->getEntity();
     $values = $entity->getValue();

@@ @@
    * @return array
    *   Array with options.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getConfigTypeOptions() {
     $types = $this->entityTypeManager
@@ @@
    * @return bool
    *   True if entity exists.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function exists($name) {
     $entity = Ecc::loadByMachineName($name);
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/ecc/src/Entity/Ecc.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ecc\Entity;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ @@
    * @return bool|\Drupal\ecc\Entity\Ecc
    *   ECC entity or FALSE when not found.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function loadByMachineName($name) {
     $storage = \Drupal::entityTypeManager()->getStorage('ecc');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/ecc/src/EccTypeListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ecc;

+use Drupal\ecc\Entity\EccType;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\ecc\Entity\EccType $entity */
+    /** @var EccType $entity */
     $row = [];
     $row['id'] = $entity->id();
     $row['title']['data'] = $entity->toLink(NULL, 'edit-form')->toRenderable();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/ecc/src/EccListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ecc;

+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\ecc\Entity\EccType;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\ecc\Entity\EccType $type */
+    /** @var EccType $type */
     $type = $entity->get('type')->entity;

     $row = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

