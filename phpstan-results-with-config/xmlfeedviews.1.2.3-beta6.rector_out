modules/contrib/xmlfeedviews/src/Plugin/views/row/XmlFeedViewsFields.php
modules/contrib/xmlfeedviews/src/Plugin/views/style/XmlFeedViews.php
modules/contrib/xmlfeedviews/src/Tests/Views/XmlFeedViewsTest.php
modules/contrib/xmlfeedviews/xmlfeedviews.install
modules/contrib/xmlfeedviews/xmlfeedviews.module

2 files with changes
====================

1) modules/contrib/xmlfeedviews/src/Tests/Views/XmlFeedViewsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\xmlfeedviews\Tests\Views;

+use Drupal\user\Entity\User;
+use Drupal\node\NodeStorage;
 use Drupal\Component\Utility\Html;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\views\Functional\ViewTestBase;
@@ @@
   /**
    * The admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   public $adminUser;

@@ @@
   /**
    * The entity storage for nodes.
    *
-   * @var \Drupal\node\NodeStorage
+   * @var NodeStorage
    */
   protected $nodeStorage;

@@ @@
     // Retrieve node default view.
     $actual_json = $this->drupalGet("callback/nodes");
     $expected = [];
-    $this->assertIdentical($actual_json, json_encode($expected), 'The expected JSON output was found.');
+    $this->assertSame($actual_json, json_encode($expected), 'The expected JSON output was found.');

     // Create some published nodes of type article and page.
     $this->createNodes(5, "article", $expected);
@@ @@

     // Check the view result using serializer service.
     $expected_string = json_encode($expected);
-    $this->assertIdentical($actual_json, $expected_string);
+    $this->assertSame($actual_json, $expected_string);

     // Re-test as anonymous user.
     $actual_json = $this->drupalGet("callback/nodes");
-    $this->assertIdentical($actual_json, $expected_string);
+    $this->assertSame($actual_json, $expected_string);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/xmlfeedviews/src/Plugin/views/row/XmlFeedViewsFields.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\xmlfeedviews\Plugin\views\row;

+use Drupal\Core\Render\Markup;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\row\RowPluginBase;
 use Drupal\Core\Url;
@@ @@
    *
    * @param array &$form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return array
@@ @@
       ) {
         $field_id = isset($fieldArray[1][0]) ? $fieldArray[1][0] : '';

-        /** @var \Drupal\Core\Render\Markup $data */
+        /** @var Markup $data */
         $data = $this->getField($index, trim($field_id));
         if (is_object($data)) {
           $data = $data->__toString();
@@ @@
    * @param string $field_id
    *   The ID assigned to the required field in the display.
    *
-   * @return string|null|\Drupal\Component\Render\MarkupInterface
+   * @return string|null|MarkupInterface
    *   An empty string if there is no style plugin, or the field ID is empty.
    *   NULL if the field value is empty. If neither of these conditions apply,
    *   a MarkupInterface object containing the rendered field value.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 2 files have been changed by Rector                                       

