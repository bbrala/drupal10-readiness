modules/contrib/navigation_blocks/navigation_blocks.module
modules/contrib/navigation_blocks/src/BackButtonManager.php
modules/contrib/navigation_blocks/src/BackButtonManagerInterface.php
modules/contrib/navigation_blocks/src/EntityButtonManager.php
modules/contrib/navigation_blocks/src/EntityButtonManagerInterface.php
modules/contrib/navigation_blocks/src/PathMatcher.php
modules/contrib/navigation_blocks/src/PathMatcherInterface.php
modules/contrib/navigation_blocks/src/Plugin/Block/BackButton.php
modules/contrib/navigation_blocks/src/Plugin/Block/EntityBackButtonBase.php
modules/contrib/navigation_blocks/src/Plugin/Block/EntityCanonicalBackButton.php
modules/contrib/navigation_blocks/src/Plugin/Block/EntityReferenceBackButton.php
modules/contrib/navigation_blocks/src/Plugin/Block/EntityReferenceBackButtonBase.php
modules/contrib/navigation_blocks/src/Plugin/Block/ReversedEntityReferenceBackButton.php
modules/contrib/navigation_blocks/src/Plugin/Block/TocBlock.php
modules/contrib/navigation_blocks/src/Plugin/CKEditorPlugin/HeadingTocControl.php
modules/contrib/navigation_blocks/src/Plugin/Deriver/EntityBackButtonDeriverBase.php
modules/contrib/navigation_blocks/src/Plugin/Deriver/EntityCanonicalBackButtonDeriver.php
modules/contrib/navigation_blocks/src/Plugin/Deriver/EntityReferenceBackButtonDeriver.php
modules/contrib/navigation_blocks/src/Plugin/Deriver/ReversedEntityBackButtonDeriver.php
modules/contrib/navigation_blocks/src/TocBuilder.php

15 files with changes
=====================

1) modules/contrib/navigation_blocks/src/Plugin/Deriver/EntityBackButtonDeriverBase.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new EntityBackButtonDeriver.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ @@
   /**
    * Get the admin label.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type for this derivative.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The admin label.
    */
   abstract protected function getAdminLabel(EntityTypeInterface $entity_type): TranslatableMarkup;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/navigation_blocks/src/Plugin/CKEditorPlugin/HeadingTocControl.php:26

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getFile() {
-    return drupal_get_path('module', 'navigation_blocks') . '/js/plugins/headingtoccontrol/plugin.js';
+    return \Drupal::service('extension.list.module')->getPath('navigation_blocks') . '/js/plugins/headingtoccontrol/plugin.js';
   }

   /**
@@ @@
    * {@inheritdoc}
    */
   public function getButtons() {
-    $path = drupal_get_path('module', 'navigation_blocks') . '/js/plugins/headingtoccontrol';
+    $path = \Drupal::service('extension.list.module')->getPath('navigation_blocks') . '/js/plugins/headingtoccontrol';
     return [
       'HeadingTocControl' => [
         'label' => $this->t('Table of Contents Control'),
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/navigation_blocks/src/Plugin/Block/TocBlock.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Builds a table of contents block.
    *
-   * @var \Drupal\navigation_blocks\TocBuilder
+   * @var TocBuilder
    */
   protected $tocBuilder;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\navigation_blocks\TocBuilder $toc_builder
+   * @param TocBuilder $toc_builder
    *   The TocBuilder.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TocBuilder $toc_builder) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/navigation_blocks/src/Plugin/Block/ReversedEntityReferenceBackButton.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\navigation_blocks\Plugin\Block;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use function explode;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getEntityReferenceOptions(EntityTypeInterface $entity_type): array {
     return $this->entityButtonManager->getReversedEntityReferenceFieldOptions($entity_type);
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   protected function getReferencedEntity(): EntityInterface {
     return $this->entityButtonManager->getReversedEntityReferenceEntity($this->getContextValue('entity'), ...explode(':', $this->getConfiguration()['entity_reference_field']));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/navigation_blocks/src/Plugin/Block/EntityReferenceBackButtonBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\navigation_blocks\Plugin\Block;

+use Drupal\navigation_blocks\EntityButtonManager;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Plugin\Context\EntityContextDefinition;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * The entity back button manager.
    *
-   * @var \Drupal\navigation_blocks\EntityButtonManager
+   * @var EntityButtonManager
    */
   protected $entityButtonManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $pluginDefinition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\navigation_blocks\BackButtonManagerInterface $backButtonManager
+   * @param BackButtonManagerInterface $backButtonManager
    *   The back button manager.
-   * @param \Drupal\navigation_blocks\EntityButtonManagerInterface $entityButtonManager
+   * @param EntityButtonManagerInterface $entityButtonManager
    *   The entity button manager.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, EntityTypeManagerInterface $entityTypeManager, BackButtonManagerInterface $backButtonManager, EntityButtonManagerInterface $entityButtonManager) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginNotFoundException
+   * @throws PluginException
    */
   public function blockForm($form, FormStateInterface $formState): array {
     $form = parent::blockForm($form, $formState);

-    /** @var \Drupal\Core\Plugin\Context\EntityContextDefinition $entityContextDefinition */
+    /** @var EntityContextDefinition $entityContextDefinition */
     $entityContextDefinition = $this->getContextDefinition('entity')->getDataDefinition();
     /** @var string $entityTypeId */
     $entityTypeId = $entityContextDefinition->getConstraint('EntityType');
@@ @@
   /**
    * Get available entity reference options for an entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return string[]
@@ @@
   /**
    * Get the referenced entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The referenced entity.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   abstract protected function getReferencedEntity(): EntityInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/navigation_blocks/src/Plugin/Block/EntityReferenceBackButton.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\navigation_blocks\Plugin\Block;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws PluginException
+   * @throws EntityMalformedException
    */
   protected function getReferencedEntity(): EntityInterface {
     return $this->entityButtonManager->getReferencedEntity($this->getContextValue('entity'), $this->getConfiguration()['entity_reference_field']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/navigation_blocks/src/Plugin/Block/EntityCanonicalBackButton.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\navigation_blocks\Plugin\Block;

+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityInterface;

 /**
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function build(): array {
     if ($this->backButtonManager->isCanonicalPath()) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getEntity(): EntityInterface {
     return $this->getContextValue('entity');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/navigation_blocks/src/Plugin/Block/EntityBackButtonBase.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function build(): array {
     try {
@@ @@
   /**
    * Get the for this block.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   abstract protected function getEntity(): EntityInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/navigation_blocks/src/Plugin/Block/BackButton.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\navigation_blocks\Plugin\Block;

+use Drupal\navigation_blocks\BackButtonManager;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\Element\EntityAutocomplete;
@@ @@
   /**
    * Back Button Manager.
    *
-   * @var \Drupal\navigation_blocks\BackButtonManager
+   * @var BackButtonManager
    */
   protected $backButtonManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $pluginDefinition
    *   The plugin implementation definition.
-   * @param \Drupal\navigation_blocks\BackButtonManagerInterface $backButtonManager
+   * @param BackButtonManagerInterface $backButtonManager
    *   The back button manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, BackButtonManagerInterface $backButtonManager, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function blockForm($form, FormStateInterface $formState): array {
     $form['preferred_paths'] = [
@@ @@
   /**
    * Get the url for the link.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The Url.
    */
   protected function getLinkUrl(): Url {
@@ @@
    * @return string
    *   The URI without scheme.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @see LinkWidget::getUriAsDisplayableString()
    */
@@ @@
    * @return array
    *   The form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getLinkFormElements(): array {
     return [
@@ @@
    * @return array
    *   The link element of the form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getUrlElement(): array {
     return [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/navigation_blocks/src/PathMatcherInterface.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Validate if the current path is valid.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The url.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/navigation_blocks/src/PathMatcher.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Alias Manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;

@@ @@
   /**
    * Current Path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;

@@ @@
   /**
    * Constructs a new path matcher.
    *
-   * @param \Drupal\Core\Path\CurrentPathStack $currentPath
+   * @param CurrentPathStack $currentPath
    *   The current path stack.
    * @param \Drupal\Core\Path\PathMatcherInterface $pathMatcher
    *   The core path matcher.
-   * @param \Drupal\path_alias\AliasManagerInterface $aliasManager
+   * @param AliasManagerInterface $aliasManager
    */
   public function __construct(CurrentPathStack $currentPath, CorePathMatcherInterface $pathMatcher, AliasManagerInterface $aliasManager) {
     $this->currentPath = $currentPath;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/navigation_blocks/src/EntityButtonManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\navigation_blocks;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * Get the entity reference field options.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   Entity type.
    *
    * @return string[]
@@ @@
    * @param string $entityTypeId
    *   Entity type id.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   Entity Type definition.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function getEntityType($entityTypeId): EntityTypeInterface;

@@ @@
   /**
    * Get the referenced entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Content Entity.
    * @param string $fieldName
    *   Name of the entity reference field name.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Referenced Entity.
    */
   public function getReferencedEntity(ContentEntityInterface $entity, string $fieldName): EntityInterface;
@@ @@
   /**
    * Get reversed entity reference entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $reversedEntityTypeId
    *   The entity type ID.
@@ @@
    * @param string $reversedFieldName
    *   The entity reference field name.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The reversed entity reference entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getReversedEntityReferenceEntity(EntityInterface $entity, string $reversedEntityTypeId, string $reversedBundle, string $reversedFieldName): EntityInterface;

@@ @@
   /**
    * Get the reversed entity reference field options.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   Entity type.
    *
    * @return string[]
    *   Reversed entity reference field options.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getReversedEntityReferenceFieldOptions(EntityTypeInterface $entityType): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/navigation_blocks/src/EntityButtonManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\navigation_blocks;

+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Field\EntityReferenceFieldItemList;
+use Drupal\field\FieldStorageConfigInterface;
+use Drupal\Core\Field\FieldConfigInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a manager for entity back buttons.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type Manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   Entity Type Bundle Info.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   Entity Field Manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityTypeBundleInfoInterface $entityTypeBundleInfo, EntityFieldManagerInterface $entityFieldManager) {
@@ @@

     $bundles = array_keys($this->entityTypeBundleInfo->getBundleInfo($entityType->id()));
     foreach ($bundles as $bundle) {
-      /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $fields */
+      /** @var FieldDefinitionInterface[] $fields */
       $fields = $this->entityFieldManager->getFieldDefinitions($entityType->id(), $bundle);
       foreach ($fields as $field) {
         if ($field->getType() !== 'entity_reference') {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function getReferencedEntity(ContentEntityInterface $entity, string $fieldName): EntityInterface {
-    /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $entityReferenceFieldItemList */
+    /** @var EntityReferenceFieldItemList $entityReferenceFieldItemList */
     $entityReferenceFieldItemList = $entities = $entity->get($fieldName);
-    /** @var \Drupal\Core\Entity\ContentEntityInterface[] $entities */
+    /** @var ContentEntityInterface[] $entities */
     $entities = $entityReferenceFieldItemList->referencedEntities();
     if (empty($entities)) {
       throw new EntityMalformedException('No entities found');
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function getReversedEntityReferenceEntity(EntityInterface $entity, string $reversedEntityTypeId, string $reversedBundle, string $reversedFieldName): EntityInterface {
     $reversedEntityType = $this->getEntityType($reversedEntityTypeId);
@@ @@
    * {@inheritdoc}
    */
   public function getReversedEntityReferenceFieldOptions(EntityTypeInterface $entityType): array {
-    /** @var \Drupal\field\FieldStorageConfigInterface[] $referenceFields */
+    /** @var FieldStorageConfigInterface[] $referenceFields */
     $referenceFields = $this->entityTypeManager->getStorage('field_storage_config')
       ->loadByProperties(
         [
@@ @@
       $fieldEntityType = $this->getEntityType($referenceField->getTargetEntityTypeId());
       $fieldName = $referenceField->getName();

-      /** @var \Drupal\Core\Field\FieldConfigInterface[] $fieldInstances */
+      /** @var FieldConfigInterface[] $fieldInstances */
       $fieldInstances = $this->entityTypeManager->getStorage('field_config')
         ->loadByProperties(
           [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/navigation_blocks/src/BackButtonManagerInterface.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Get the link.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   Url to link to.
    * @param string $text
    *   Text to show on the link.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/navigation_blocks/src/BackButtonManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\navigation_blocks;

+use Drupal\Core\Routing\CurrentRouteMatch;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Link;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ @@
   /**
    * Block Path Matcher.
    *
-   * @var \Drupal\navigation_blocks\PathMatcher
+   * @var PathMatcher
    */
   protected $blockPathMatcher;

@@ @@
   /**
    * CurrentRouteMatch service.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * The request stack to get the request object from.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a manager for back buttons.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $currentRouteMatch
+   * @param RouteMatchInterface $currentRouteMatch
    *   The current route match.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\navigation_blocks\PathMatcherInterface $blockPathMatcher
+   * @param PathMatcherInterface $blockPathMatcher
    *   The patch matcher.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(RouteMatchInterface $currentRouteMatch, RequestStack $requestStack, PathMatcherInterface $blockPathMatcher, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getPreferredLink(
     string $preferredPaths,
@@ @@
   /**
    * Get the back button text for a url.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The url to get the back button text for.
    * @param string $backButtonText
    *   Default back button text to render.
@@ @@
    * @return string
    *   The back button text.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function getBackButtonText(Url $url, $backButtonText): string {
     $params = $url->getRouteParameters();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 15 files have been changed by Rector                                      

