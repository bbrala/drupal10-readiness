diff --git a/healthcheck.install b/healthcheck.install
index f37e1f1..e48dac1 100644
--- a/healthcheck.install
+++ b/healthcheck.install
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\healthcheck\HealthcheckServiceInterface;
+use Drupal\Component\Datetime\TimeInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\healthcheck\CheckConfigServiceInterface;
 /**
  * Implements hook_requirements().
  */
@@ -13,17 +17,17 @@ function healthcheck_requirements($phase) {
   $requirements = [];
   $requirements['healthcheck_last_run']['title'] = t('Healthcheck');
 
-  /** @var \Drupal\healthcheck\HealthcheckServiceInterface $healthcheck_service */
+  /** @var HealthcheckServiceInterface $healthcheck_service */
   $healthcheck_service = \Drupal::service('healthcheck');
 
   // Get the last healthcheck run and the interval.
   $last_run = $healthcheck_service->getLastTimestamp();
   $interval = $healthcheck_service->getInterval();
 
-  /** @var \Drupal\Component\Datetime\TimeInterface $time_service */
+  /** @var TimeInterface $time_service */
   $time_service = \Drupal::service('datetime.time');
 
-  /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
+  /** @var DateFormatterInterface $date_formatter */
   $date_formatter = \Drupal::service('date.formatter');
 
   // Add the last run date to the status page.
@@ -56,7 +60,7 @@ function healthcheck_requirements($phase) {
  * Create check config entities for all healthcheck plugins.
  */
 function healthcheck_update_8001() {
-  /** @var \Drupal\healthcheck\CheckConfigServiceInterface $checksrv */
+  /** @var CheckConfigServiceInterface $checksrv */
   $checksrv = \Drupal::service('healthcheck.checkconfig');
 
   // Create the default CheckConfig entities.
diff --git a/healthcheck.theme.inc b/healthcheck.theme.inc
index dbe3fb0..8488a7b 100644
--- a/healthcheck.theme.inc
+++ b/healthcheck.theme.inc
@@ -1,9 +1,13 @@
 <?php
 
+use Drupal\healthcheck\Report\Report;
+use Drupal\healthcheck\Plugin\HealthcheckPluginManager;
+use Drupal\healthcheck\Finding\FindingInterface;
+use Drupal\healthcheck\Plugin\HealthcheckPluginInterface;
 use Drupal\healthcheck\Finding\FindingStatus;
 
 function template_preprocess_healthcheck_report(&$variables) {
-  /** @var \Drupal\healthcheck\Report\Report $report */
+  /** @var Report $report */
   $report = $variables['report'];
 
   $variables['checks'] = [
@@ -26,7 +30,7 @@ function template_preprocess_healthcheck_report(&$variables) {
   $variables['not_reviewed_count'] = $counts[FindingStatus::NOT_PERFORMED];
   $variables['total_reviewed'] = $report->count();
 
-  /** @var \Drupal\healthcheck\Plugin\HealthcheckPluginManager $plugin_mgr */
+  /** @var HealthcheckPluginManager $plugin_mgr */
   $plugin_mgr = \Drupal::service('plugin.manager.healthcheck_plugin');
   $filters = $plugin_mgr->getTags();
 
@@ -116,9 +120,9 @@ function template_preprocess_healthcheck_filter_list(&$variables) {
 function template_preprocess_healthcheck_status(&$variables) {
   $findings = $variables['findings'];
 
-  /** @var \Drupal\healthcheck\Finding\FindingInterface $finding */
+  /** @var FindingInterface $finding */
   foreach ($findings as $finding) {
-    /** @var \Drupal\healthcheck\Plugin\HealthcheckPluginInterface $check */
+    /** @var HealthcheckPluginInterface $check */
     $check = $finding->getCheck();
 
     $variables['action_items'][] = [
@@ -129,10 +133,10 @@ function template_preprocess_healthcheck_status(&$variables) {
 }
 
 function template_preprocess_healthcheck_finding(&$variables) {
-  /** @var \Drupal\healthcheck\Finding\FindingInterface $finding */
+  /** @var FindingInterface $finding */
   $finding = $variables['finding'];
 
-  /** @var \Drupal\healthcheck\Plugin\HealthcheckPluginInterface $check */
+  /** @var HealthcheckPluginInterface $check */
   $check = $finding->getCheck();
 
   $variables['status'] = $finding->getStatus();
diff --git a/healthcheck.tokens.inc b/healthcheck.tokens.inc
index e6b1676..eeb441b 100644
--- a/healthcheck.tokens.inc
+++ b/healthcheck.tokens.inc
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\Core\Render\BubbleableMetadata;
+use Drupal\healthcheck\Report\Report;
+use Drupal\Core\Url;
+use Drupal\healthcheck\Finding\FindingInterface;
 /**
  * @file
  * Provides tokens support for Healthcheck.
@@ -85,11 +89,11 @@ function healthcheck_token_info() {
 /**
  * Implements hook_tokens().
  */
-function healthcheck_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
+function healthcheck_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
   $replacements = [];
 
   if ($type = 'healthcheck_report' && !empty($data['healthcheck_report'])) {
-    /** @var \Drupal\healthcheck\Report\Report $report */
+    /** @var Report $report */
     $report = $data['healthcheck_report'];
 
     // Get the counts.
@@ -101,7 +105,7 @@ function healthcheck_tokens($type, $tokens, array $data, array $options, \Drupal
     foreach ($tokens as $name => $original) {
       switch ($name) {
         case 'adhoc_url':
-          $url = \Drupal\Core\Url::fromRoute('healthcheck.report_controller_runReport', [], ['absolute' => TRUE]);
+          $url = Url::fromRoute('healthcheck.report_controller_runReport', [], ['absolute' => TRUE]);
           $replacements[$original] = $url->toString();
           break;
 
@@ -135,7 +139,7 @@ function healthcheck_tokens($type, $tokens, array $data, array $options, \Drupal
           }
           else {
             $labels = [];
-            /** @var \Drupal\healthcheck\Finding\FindingInterface $finding */
+            /** @var FindingInterface $finding */
             foreach ($findings[FindingStatus::CRITICAL] as $finding) {
               $labels[] = $finding->getLabel();
             }
@@ -149,7 +153,7 @@ function healthcheck_tokens($type, $tokens, array $data, array $options, \Drupal
           }
           else {
             $labels = [];
-            /** @var \Drupal\healthcheck\Finding\FindingInterface $finding */
+            /** @var FindingInterface $finding */
             foreach ($findings[FindingStatus::ACTION_REQUESTED] as $finding) {
               $labels[] = $finding->getLabel();
             }
@@ -163,7 +167,7 @@ function healthcheck_tokens($type, $tokens, array $data, array $options, \Drupal
           }
           else {
             $labels = [];
-            /** @var \Drupal\healthcheck\Finding\FindingInterface $finding */
+            /** @var FindingInterface $finding */
             foreach ($findings[FindingStatus::NEEDS_REVIEW] as $finding) {
               $labels[] = $finding->getLabel();
             }
diff --git a/modules/healthcheck_email/healthcheck_email.module b/modules/healthcheck_email/healthcheck_email.module
index f14a721..d291027 100755
--- a/modules/healthcheck_email/healthcheck_email.module
+++ b/modules/healthcheck_email/healthcheck_email.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Config\Config;
 /**
  * @file
  * Contains healthcheck_email.module.
@@ -39,7 +41,7 @@ function healthcheck_email_mail($key, &$message, $params) {
 /**
  * Implements hook_form_FORM_ID_alter().
  */
-function healthcheck_email_form_healthcheck_settings_form_alter(&$form,  \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function healthcheck_email_form_healthcheck_settings_form_alter(&$form,  FormStateInterface $form_state, $form_id) {
   // Get the site's default email address.
   $site_email = \Drupal::config('system.site')->get('mail');
 
@@ -140,8 +142,8 @@ function healthcheck_email_form_healthcheck_settings_form_alter(&$form,  \Drupal
 /**
  * Submit handler for Healthcheck settings form.
  */
-function healthcheck_email_healthcheck_settings_form_submit($form, \Drupal\Core\Form\FormStateInterface $form_state) {
-  /** @var \Drupal\Core\Config\Config $config */
+function healthcheck_email_healthcheck_settings_form_submit($form, FormStateInterface $form_state) {
+  /** @var Config $config */
   $config = \Drupal::service('config.factory')->getEditable('healthcheck_email.settings');
 
   $config->set('email_critical_enabled', $form_state->getValue('email_critical_enabled'))
diff --git a/modules/healthcheck_email/src/EventSubscriber/EmailCheckSubscriber.php b/modules/healthcheck_email/src/EventSubscriber/EmailCheckSubscriber.php
index 7ab21a7..ec192d5 100755
--- a/modules/healthcheck_email/src/EventSubscriber/EmailCheckSubscriber.php
+++ b/modules/healthcheck_email/src/EventSubscriber/EmailCheckSubscriber.php
@@ -2,12 +2,13 @@
 
 namespace Drupal\healthcheck_email\EventSubscriber;
 
+use Drupal\healthcheck\Event\HealthcheckRunEvent;
+use Drupal\healthcheck\Report\ReportInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\healthcheck\Event\HealthcheckCriticalEvent;
 use Drupal\healthcheck\Event\HealthcheckCronEvent;
 use Drupal\healthcheck\Event\HealthcheckEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\Core\Mail\MailManagerInterface;
 use Drupal\Core\Utility\Token;
 use Drupal\Core\Language\LanguageInterface;
@@ -20,21 +21,21 @@ class EmailCheckSubscriber implements EventSubscriberInterface {
   /**
    * The mail manager service.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $tokenService;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -52,11 +53,11 @@ class EmailCheckSubscriber implements EventSubscriberInterface {
   /**
    * Send email when a critical finding is made.
    *
-   * @param \Drupal\healthcheck\Event\HealthcheckRunEvent $event
+   * @param HealthcheckRunEvent $event
    *   The event.
    */
   public function doCritical(HealthcheckCriticalEvent $event) {
-    /** @var \Drupal\healthcheck\Report\ReportInterface $report */
+    /** @var ReportInterface $report */
     $report = $event->getReport();
 
     // Add the report to token data.
@@ -91,7 +92,7 @@ class EmailCheckSubscriber implements EventSubscriberInterface {
   /**
    * Email reports performed in the background.
    *
-   * @param \Drupal\healthcheck\Event\HealthcheckRunEvent $event
+   * @param HealthcheckRunEvent $event
    *   The event.
    */
   public function doCron(HealthcheckCronEvent $event) {
