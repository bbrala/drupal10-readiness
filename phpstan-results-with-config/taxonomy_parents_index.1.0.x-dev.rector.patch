diff --git a/src/Form/IndexTaxonomyParents.php b/src/Form/IndexTaxonomyParents.php
index 2756f30..7858a02 100644
--- a/src/Form/IndexTaxonomyParents.php
+++ b/src/Form/IndexTaxonomyParents.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\taxonomy_parents_index\Form;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\taxonomy_parents_index\TaxonomyParentsIndexManager;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\FormBase;
@@ -19,9 +22,9 @@ class IndexTaxonomyParents extends FormBase implements ContainerInjectionInterfa
   /**
    * IndexTaxonomyParents constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger service.
-   * @param \Drupal\Core\StringTranslation\TranslationManager $stringTranslation
+   * @param TranslationManager $stringTranslation
    *   String translation.
    */
   public function __construct(MessengerInterface $messenger, TranslationManager $stringTranslation) {
@@ -114,8 +117,8 @@ class IndexTaxonomyParents extends FormBase implements ContainerInjectionInterfa
    * @param string[] $context
    *   Variables for the batch process.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function indexTerms(array &$context) {
     if (empty($context['sandbox'])) {
@@ -134,7 +137,7 @@ class IndexTaxonomyParents extends FormBase implements ContainerInjectionInterfa
     $query->range(0, $limit);
     $terms = $query->execute();
 
-    /** @var \Drupal\taxonomy_parents_index\TaxonomyParentsIndexManager $customTaxonomyParentsIndexManager */
+    /** @var TaxonomyParentsIndexManager $customTaxonomyParentsIndexManager */
     $customTaxonomyParentsIndexManager = \Drupal::service('taxonomy_parents_index.manager');
     foreach ($terms as $revisionId => $termId) {
       $customTaxonomyParentsIndexManager->indexAncestorTerms($termId, FALSE);
@@ -178,7 +181,7 @@ class IndexTaxonomyParents extends FormBase implements ContainerInjectionInterfa
       $messenger->addError($message);
     }
 
-    /** @var \Drupal\taxonomy_parents_index\TaxonomyParentsIndexManager $customTaxonomyParentsIndexManager */
+    /** @var TaxonomyParentsIndexManager $customTaxonomyParentsIndexManager */
     $customTaxonomyParentsIndexManager = \Drupal::service('taxonomy_parents_index.manager');
     $customTaxonomyParentsIndexManager->invalidateTaxonomyTermCacheTags();
   }
diff --git a/src/Plugin/views/relationship/TaxonomyIndexReverseToParents.php b/src/Plugin/views/relationship/TaxonomyIndexReverseToParents.php
index 8745f1a..e46d01b 100644
--- a/src/Plugin/views/relationship/TaxonomyIndexReverseToParents.php
+++ b/src/Plugin/views/relationship/TaxonomyIndexReverseToParents.php
@@ -20,7 +20,7 @@ class TaxonomyIndexReverseToParents extends RelationshipPluginBase {
   /**
    * Join manager.
    *
-   * @var \Drupal\views\Plugin\ViewsHandlerManager
+   * @var ViewsHandlerManager
    */
   protected $joinManager;
 
@@ -33,7 +33,7 @@ class TaxonomyIndexReverseToParents extends RelationshipPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\views\Plugin\ViewsHandlerManager $join_manager
+   * @param ViewsHandlerManager $join_manager
    *   Join manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ViewsHandlerManager $join_manager) {
diff --git a/src/TaxonomyParentsIndexManager.php b/src/TaxonomyParentsIndexManager.php
index d0b283d..785d666 100644
--- a/src/TaxonomyParentsIndexManager.php
+++ b/src/TaxonomyParentsIndexManager.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\taxonomy_parents_index;
 
+use Drupal\taxonomy\TermStorageInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Database\Connection;
@@ -17,32 +21,32 @@ class TaxonomyParentsIndexManager extends ControllerBase {
   /**
    * Taxonomy term storage.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $termStorage;
 
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * TaxonomyParentsIndexManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Taxonomy term storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   Database connection.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheTagsInvalidator
+   * @param CacheTagsInvalidatorInterface $cacheTagsInvalidator
    *   Cache tags invalidator.
    */
   public function __construct(
@@ -58,11 +62,11 @@ class TaxonomyParentsIndexManager extends ControllerBase {
   /**
    * Returns the Taxonomy Term storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface|\Drupal\taxonomy\TermStorageInterface
+   * @return EntityStorageInterface|TermStorageInterface
    *   Taxonomy Term storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getTermStorage() {
     if (!$this->termStorage) {
@@ -174,11 +178,11 @@ class TaxonomyParentsIndexManager extends ControllerBase {
    *   If TRUE, then the result is a Term ID array.
    *   If FALSE, then the result is an array of Term objects.
    *
-   * @return array|\Drupal\taxonomy\TermInterface[]
+   * @return array|TermInterface[]
    *   Result array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getAllSzulo($tid, $asIdsArray = FALSE) {
     $parents = $this->getTermStorage()->loadAllParents($tid);
@@ -195,7 +199,7 @@ class TaxonomyParentsIndexManager extends ControllerBase {
    * Here we need to remove only those rows that belong to the given Term's ID,
    * plus every row where the given Term's ID is in the ptid column.
    *
-   * @param \Drupal\taxonomy\TermInterface|null $term
+   * @param TermInterface|null $term
    *   The given Taxonomy Term ID.
    * @param bool $invalidateCacheTagsOnEnd
    *   Sets if it should invalidate cache tags or not.
@@ -222,7 +226,7 @@ class TaxonomyParentsIndexManager extends ControllerBase {
   /**
    * Updates indexes that belong to a given Taxonomy Term.
    *
-   * @param \Drupal\taxonomy\TermInterface|null $term
+   * @param TermInterface|null $term
    *   The given Taxonomy Term ID.
    * @param bool $invalidateCacheTagsOnEnd
    *   Sets if it should invalidate cache tags or not.
@@ -295,14 +299,14 @@ class TaxonomyParentsIndexManager extends ControllerBase {
   /**
    * Returns all children Taxonomy Term IDs of a given Taxonomy Term.
    *
-   * @param \Drupal\taxonomy\TermInterface|null $term
+   * @param TermInterface|null $term
    *   The given Taxonomy Term ID.
    *
    * @return int[]
    *   Array of children Taxonomy Term IDs. Empty array if there's none.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getAllChildren(?TermInterface $term) {
     $vid = $term->bundle();
diff --git a/taxonomy_parents_index.module b/taxonomy_parents_index.module
index 1c2ce20..cc2f237 100644
--- a/taxonomy_parents_index.module
+++ b/taxonomy_parents_index.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\taxonomy_parents_index\TaxonomyParentsIndexManager;
 /**
  * @file
  * Hooks for module taxonomy_parents_index.
@@ -123,7 +124,7 @@ function taxonomy_parents_index_views_data() {
  */
 function taxonomy_parents_index_taxonomy_term_insert(EntityInterface $entity) {
   // Index new Term.
-  /** @var \Drupal\taxonomy_parents_index\TaxonomyParentsIndexManager $customTaxonomyParentsIndexManager */
+  /** @var TaxonomyParentsIndexManager $customTaxonomyParentsIndexManager */
   $customTaxonomyParentsIndexManager = \Drupal::service('taxonomy_parents_index.manager');
   $customTaxonomyParentsIndexManager->indexAncestorTerms($entity->id());
 }
@@ -133,7 +134,7 @@ function taxonomy_parents_index_taxonomy_term_insert(EntityInterface $entity) {
  */
 function taxonomy_parents_index_taxonomy_term_delete(EntityInterface $entity) {
   // Remove Term's index.
-  /** @var \Drupal\taxonomy_parents_index\TaxonomyParentsIndexManager $customTaxonomyParentsIndexManager */
+  /** @var TaxonomyParentsIndexManager $customTaxonomyParentsIndexManager */
   $customTaxonomyParentsIndexManager = \Drupal::service('taxonomy_parents_index.manager');
   $customTaxonomyParentsIndexManager->removeTermIndex($entity);
 }
@@ -144,7 +145,7 @@ function taxonomy_parents_index_taxonomy_term_delete(EntityInterface $entity) {
  */
 function taxonomy_parents_index_taxonomy_term_update(EntityInterface $entity) {
   // Reindexing after modifying the Term.
-  /** @var \Drupal\taxonomy_parents_index\TaxonomyParentsIndexManager $customTaxonomyParentsIndexManager */
+  /** @var TaxonomyParentsIndexManager $customTaxonomyParentsIndexManager */
   $customTaxonomyParentsIndexManager = \Drupal::service('taxonomy_parents_index.manager');
   $customTaxonomyParentsIndexManager->updateTermIndex($entity);
 }
