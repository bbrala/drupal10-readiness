diff --git a/src/AkamaiAuthentication.php b/src/AkamaiAuthentication.php
index 16c3e6d..ec5405d 100644
--- a/src/AkamaiAuthentication.php
+++ b/src/AkamaiAuthentication.php
@@ -20,11 +20,11 @@ class AkamaiAuthentication extends Authentication {
   /**
    * AkamaiAuthentication factory method, following superclass patterns.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   A config factory, for getting client authentication details.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   A messenger service.
-   * @param \Drupal\akamai\KeyProviderInterface $key_provider
+   * @param KeyProviderInterface $key_provider
    *   A akamai.key_provider service.
    *
    * @return \Drupal\akamai\AkamaiAuthentication
diff --git a/src/AkamaiClientBase.php b/src/AkamaiClientBase.php
index ded20eb..0871709 100644
--- a/src/AkamaiClientBase.php
+++ b/src/AkamaiClientBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\akamai;
 
+use GuzzleHttp\Psr7\Response;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -24,7 +25,7 @@ abstract class AkamaiClientBase extends PluginBase implements AkamaiClientInterf
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -52,7 +53,7 @@ abstract class AkamaiClientBase extends PluginBase implements AkamaiClientInterf
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -102,13 +103,13 @@ abstract class AkamaiClientBase extends PluginBase implements AkamaiClientInterf
    *   The plugin implementation definition.
    * @param \Akamai\Open\EdgeGrid\Client $client
    *   Akamai EdgeGrid client.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   A messenger service.
-   * @param \Drupal\akamai\KeyProviderInterface $key_provider
+   * @param KeyProviderInterface $key_provider
    *   A key provider service.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, EdgeGridClient $client, ConfigFactoryInterface $config_factory, LoggerInterface $logger, MessengerInterface $messenger, KeyProviderInterface $key_provider) {
@@ -163,7 +164,7 @@ abstract class AkamaiClientBase extends PluginBase implements AkamaiClientInterf
   /**
    * Creates a config array for consumption by Akamai\Open\EdgeGrid\Client.
    *
-   * @param \Drupal\akamai\AkamaiAuthentication $auth
+   * @param AkamaiAuthentication $auth
    *   The auth instance.
    *
    * @return array
@@ -218,7 +219,7 @@ abstract class AkamaiClientBase extends PluginBase implements AkamaiClientInterf
    * @param string $url
    *   A URL to clear.
    *
-   * @return \GuzzleHttp\Psr7\Response|bool
+   * @return Response|bool
    *   Response to purge request, or FALSE on failure.
    */
   public function purgeUrl($url) {
@@ -231,7 +232,7 @@ abstract class AkamaiClientBase extends PluginBase implements AkamaiClientInterf
    * @param array $urls
    *   List of URLs to purge.
    *
-   * @return \GuzzleHttp\Psr7\Response|bool
+   * @return Response|bool
    *   Response to purge request, or FALSE on failure.
    */
   public function purgeUrls(array $urls) {
@@ -255,7 +256,7 @@ abstract class AkamaiClientBase extends PluginBase implements AkamaiClientInterf
    * @param string $cpcode
    *   A cpcode to clear.
    *
-   * @return \GuzzleHttp\Psr7\Response
+   * @return Response
    *   Response to purge request.
    */
   public function purgeCpCode($cpcode) {
@@ -268,7 +269,7 @@ abstract class AkamaiClientBase extends PluginBase implements AkamaiClientInterf
    * @param array $cpcodes
    *   List of cpcodes to purge.
    *
-   * @return \GuzzleHttp\Psr7\Response
+   * @return Response
    *   Response to purge request.
    */
   public function purgeCpCodes(array $cpcodes) {
@@ -281,7 +282,7 @@ abstract class AkamaiClientBase extends PluginBase implements AkamaiClientInterf
    * @param array $tags
    *   List of tags to purge.
    *
-   * @return \GuzzleHttp\Psr7\Response
+   * @return Response
    *   Response to purge request.
    */
   public function purgeTags(array $tags) {
@@ -446,7 +447,7 @@ abstract class AkamaiClientBase extends PluginBase implements AkamaiClientInterf
   /**
    * Formats a JSON error response into a string.
    *
-   * @param \GuzzleHttp\Exception\RequestException $e
+   * @param RequestException $e
    *   The RequestException containing the JSON error response.
    *
    * @return string
diff --git a/src/AkamaiClientFactory.php b/src/AkamaiClientFactory.php
index 06ce12e..24b182e 100644
--- a/src/AkamaiClientFactory.php
+++ b/src/AkamaiClientFactory.php
@@ -10,7 +10,7 @@ class AkamaiClientFactory {
   /**
    * The akamai client plugin manager.
    *
-   * @var \Drupal\akamai\AkamaiClientManager
+   * @var AkamaiClientManager
    */
   protected $clientManager;
 
@@ -24,7 +24,7 @@ class AkamaiClientFactory {
   /**
    * Constructs a new AkamaiClientFactory object.
    *
-   * @param \Drupal\akamai\AkamaiClientManager $client_manager
+   * @param AkamaiClientManager $client_manager
    *   The akamai client plugin manager.
    */
   public function __construct(AkamaiClientManager $client_manager) {
@@ -70,7 +70,7 @@ class AkamaiClientFactory {
    *   (optional) The version of the akamai client to use for this object,
    *   or NULL to use the current version.
    *
-   * @return \Drupal\akamai\AkamaiClientInterface
+   * @return AkamaiClientInterface
    *   An Akamai Client object.
    *
    * @see AkamaiClientFactory::setclientVersion()
diff --git a/src/AkamaiClientManager.php b/src/AkamaiClientManager.php
index 8be67f5..6f1d167 100644
--- a/src/AkamaiClientManager.php
+++ b/src/AkamaiClientManager.php
@@ -20,7 +20,7 @@ class AkamaiClientManager extends DefaultPluginManager {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -30,11 +30,11 @@ class AkamaiClientManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory) {
diff --git a/src/Annotation/AkamaiClient.php b/src/Annotation/AkamaiClient.php
index 257cb5c..b937c83 100644
--- a/src/Annotation/AkamaiClient.php
+++ b/src/Annotation/AkamaiClient.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\akamai\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -32,7 +33,7 @@ class AkamaiClient extends Plugin {
    *
    * The string should be wrapped in a @Translation().
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Event/AkamaiHeaderEvents.php b/src/Event/AkamaiHeaderEvents.php
index 47ac999..be61b2d 100644
--- a/src/Event/AkamaiHeaderEvents.php
+++ b/src/Event/AkamaiHeaderEvents.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\akamai\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Event that is fired when Akamai header is formed.
diff --git a/src/Event/AkamaiPurgeEvents.php b/src/Event/AkamaiPurgeEvents.php
index 1ab5aac..bfdd9d6 100644
--- a/src/Event/AkamaiPurgeEvents.php
+++ b/src/Event/AkamaiPurgeEvents.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\akamai\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Event that is fired when Akamai purge is formed.
diff --git a/src/EventSubscriber/CacheableResponseSubscriber.php b/src/EventSubscriber/CacheableResponseSubscriber.php
index 4e81790..8b94348 100644
--- a/src/EventSubscriber/CacheableResponseSubscriber.php
+++ b/src/EventSubscriber/CacheableResponseSubscriber.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\akamai\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\akamai\Event\AkamaiHeaderEvents;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Cache\CacheableResponseInterface;
@@ -19,32 +19,32 @@ class CacheableResponseSubscriber implements EventSubscriberInterface {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Cache tag formatter.
    *
-   * @var \Drupal\akamai\Helper\CacheTagFormatter
+   * @var CacheTagFormatter
    */
   protected $tagFormatter;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Constructs a new CacheableResponseSubscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\akamai\Helper\CacheTagFormatter $formatter
+   * @param CacheTagFormatter $formatter
    *   The cache tag formatter.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(ConfigFactoryInterface $config_factory, CacheTagFormatter $formatter, EventDispatcherInterface $event_dispatcher) {
@@ -64,10 +64,10 @@ class CacheableResponseSubscriber implements EventSubscriberInterface {
   /**
    * Add cache tags header on cacheable responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
@@ -92,7 +92,7 @@ class CacheableResponseSubscriber implements EventSubscriberInterface {
 
       // Instantiate our event.
       $event = new AkamaiHeaderEvents($tags);
-      $this->eventDispatcher->dispatch(AkamaiHeaderEvents::HEADER_CREATION, $event);
+      $this->eventDispatcher->dispatch($event, AkamaiHeaderEvents::HEADER_CREATION);
       $tags = $event->data;
       foreach ($tags as &$tag) {
         $tag = $this->tagFormatter->format($tag);
diff --git a/src/Form/CacheControlForm.php b/src/Form/CacheControlForm.php
index 8802fa8..0c47115 100644
--- a/src/Form/CacheControlForm.php
+++ b/src/Form/CacheControlForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\akamai\Form;
 
+use Drupal\akamai\AkamaiClientInterface;
 use Drupal\akamai\AkamaiClientFactory;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Form\FormBase;
@@ -19,7 +20,7 @@ class CacheControlForm extends FormBase {
   /**
    * The akamai client.
    *
-   * @var \Drupal\akamai\AkamaiClientInterface
+   * @var AkamaiClientInterface
    */
   protected $akamaiClient;
 
@@ -33,16 +34,16 @@ class CacheControlForm extends FormBase {
   /**
    * A messenger interface.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a new CacheControlForm.
    *
-   * @param \Drupal\akamai\AkamaiClientFactory $factory
+   * @param AkamaiClientFactory $factory
    *   The akamai client factory.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The Drupal messenger service.
    */
   public function __construct(AkamaiClientFactory $factory, MessengerInterface $messenger) {
diff --git a/src/Form/ClearUrlForm.php b/src/Form/ClearUrlForm.php
index b985a97..1476af0 100644
--- a/src/Form/ClearUrlForm.php
+++ b/src/Form/ClearUrlForm.php
@@ -15,14 +15,14 @@ class ClearUrlForm extends FormBase {
   /**
    * A messenger interface.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a new ClearUrlFrom.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The Drupal messenger service.
    */
   public function __construct(MessengerInterface $messenger) {
diff --git a/src/Form/ConfigForm.php b/src/Form/ConfigForm.php
index 2f4811c..b0846ad 100644
--- a/src/Form/ConfigForm.php
+++ b/src/Form/ConfigForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\akamai\Form;
 
+use Drupal\akamai\AkamaiClientInterface;
 use Drupal\akamai\AkamaiClientManager;
 use Drupal\akamai\KeyProviderInterface;
 use Drupal\Core\Config\ConfigFactory;
@@ -24,31 +25,31 @@ class ConfigForm extends ConfigFormBase implements TrustedCallbackInterface {
   /**
    * An array containing currently available client versions.
    *
-   * @var \Drupal\akamai\AkamaiClientInterface[]
+   * @var AkamaiClientInterface[]
    */
   protected $availableVersions = [];
 
   /**
    * A messenger interface.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a new ConfigForm.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   The ConfigFactory service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request_stack service.
-   * @param \Drupal\akamai\AkamaiClientManager $manager
+   * @param AkamaiClientManager $manager
    *   The Akamai Client plugin manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The Drupal messenger service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\akamai\KeyProviderInterface $key_provider
+   * @param KeyProviderInterface $key_provider
    *   The key provider service.
    */
   public function __construct(ConfigFactory $configFactory, RequestStack $request_stack, AkamaiClientManager $manager, MessengerInterface $messenger, ModuleHandlerInterface $module_handler, KeyProviderInterface $key_provider) {
diff --git a/src/Helper/Edgescape.php b/src/Helper/Edgescape.php
index 7563cc5..d2eba6d 100644
--- a/src/Helper/Edgescape.php
+++ b/src/Helper/Edgescape.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\akamai\Helper;
 
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Component\Utility\Html;
 use Symfony\Component\HttpFoundation\RequestStack;
@@ -23,23 +24,23 @@ class Edgescape {
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * Constructs an Edgescape helper object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RequestStack $request_stack) {
diff --git a/src/Plugin/Block/CacheClearBlock.php b/src/Plugin/Block/CacheClearBlock.php
index 10b9c1f..28f6425 100644
--- a/src/Plugin/Block/CacheClearBlock.php
+++ b/src/Plugin/Block/CacheClearBlock.php
@@ -23,7 +23,7 @@ class CacheClearBlock extends BlockBase implements ContainerFactoryPluginInterfa
   /**
    * The Form Builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
@@ -36,7 +36,7 @@ class CacheClearBlock extends BlockBase implements ContainerFactoryPluginInterfa
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The Form Builder.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FormBuilderInterface $form_builder) {
diff --git a/src/Plugin/Client/AkamaiClientV3.php b/src/Plugin/Client/AkamaiClientV3.php
index b183051..66bfba6 100644
--- a/src/Plugin/Client/AkamaiClientV3.php
+++ b/src/Plugin/Client/AkamaiClientV3.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\akamai\Plugin\Client;
 
+use GuzzleHttp\Psr7\Response;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\akamai\AkamaiClientBase;
 use GuzzleHttp\Exception\RequestException;
@@ -50,7 +51,7 @@ class AkamaiClientV3 extends AkamaiClientBase {
    * @param string[] $objects
    *   A non-associative array of Akamai objects to clear.
    *
-   * @return \GuzzleHttp\Psr7\Response|bool
+   * @return Response|bool
    *   Response to purge request, or FALSE on failure.
    *
    * @link https://developer.akamai.com/api/purge/ccu/reference.html
diff --git a/tests/src/Functional/AkamaiCacheControlFormTest.php b/tests/src/Functional/AkamaiCacheControlFormTest.php
index 5378c8b..3af257f 100644
--- a/tests/src/Functional/AkamaiCacheControlFormTest.php
+++ b/tests/src/Functional/AkamaiCacheControlFormTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\akamai\Functional;
 
+use Drupal\node\NodeInterface;
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -16,14 +18,14 @@ class AkamaiCacheControlFormTest extends BrowserTestBase {
   /**
    * Node created.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
   /**
    * User with admin rights.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $privilegedUser;
 
diff --git a/tests/src/Functional/AkamaiConfigFormTest.php b/tests/src/Functional/AkamaiConfigFormTest.php
index 2442bce..6473fd4 100644
--- a/tests/src/Functional/AkamaiConfigFormTest.php
+++ b/tests/src/Functional/AkamaiConfigFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\akamai\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\Url;
 
@@ -15,7 +16,7 @@ class AkamaiConfigFormTest extends BrowserTestBase {
   /**
    * User with admin rights.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $privilegedUser;
 
diff --git a/tests/src/Functional/AkamaiHomepageTest.php b/tests/src/Functional/AkamaiHomepageTest.php
index 3f78618..770461e 100644
--- a/tests/src/Functional/AkamaiHomepageTest.php
+++ b/tests/src/Functional/AkamaiHomepageTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\akamai\Functional;
 
+use Drupal\node\NodeInterface;
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -16,7 +18,7 @@ class AkamaiHomepageTest extends BrowserTestBase {
   /**
    * Node created.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
@@ -37,7 +39,7 @@ class AkamaiHomepageTest extends BrowserTestBase {
   /**
    * User with admin rights.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $privilegedUser;
 
diff --git a/tests/src/Functional/EdgescapeTest.php b/tests/src/Functional/EdgescapeTest.php
index a8afebd..3e1e1a4 100644
--- a/tests/src/Functional/EdgescapeTest.php
+++ b/tests/src/Functional/EdgescapeTest.php
@@ -69,7 +69,7 @@ class EdgescapeTest extends BrowserTestBase {
     $this->drupalGet($akamai_config_path, [], [
       Edgescape::EDGESCAPE_HEADER => $header_value,
     ]);
-    $this->assertRaw('Country Code: RAX');
+    $this->assertSession()->responseContains('Country Code: RAX');
   }
 
 }
diff --git a/tests/src/Kernel/EdgeCacheTagHeaderTest.php b/tests/src/Kernel/EdgeCacheTagHeaderTest.php
index d6c58c7..d30585c 100644
--- a/tests/src/Kernel/EdgeCacheTagHeaderTest.php
+++ b/tests/src/Kernel/EdgeCacheTagHeaderTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\akamai\Kernel;
 
+use Symfony\Component\HttpKernel\HttpKernelInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Symfony\Component\HttpFoundation\Request;
 use Drupal\akamai\Event\AkamaiHeaderEvents;
@@ -36,7 +37,7 @@ class EdgeCacheTagHeaderTest extends KernelTestBase {
 
     $config = $this->config('akamai.settings');
 
-    /** @var \Symfony\Component\HttpKernel\HttpKernelInterface $kernel */
+    /** @var HttpKernelInterface $kernel */
     $kernel = \Drupal::getContainer()->get('http_kernel');
     $response = $kernel->handle($request);
 
diff --git a/tests/src/Kernel/EventSubscriber/CacheableResponseSubscriberTest.php b/tests/src/Kernel/EventSubscriber/CacheableResponseSubscriberTest.php
index 3a198dd..d57331f 100644
--- a/tests/src/Kernel/EventSubscriber/CacheableResponseSubscriberTest.php
+++ b/tests/src/Kernel/EventSubscriber/CacheableResponseSubscriberTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\akamai\Kernel\EventSubscriber;
 
+use Symfony\Component\HttpKernel\HttpKernelInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Symfony\Component\HttpFoundation\Request;
 use Drupal\akamai\Event\AkamaiHeaderEvents;
@@ -36,7 +37,7 @@ class CacheableResponseSubscriberTest extends KernelTestBase {
 
     $config = $this->config('akamai.settings');
 
-    /** @var \Symfony\Component\HttpKernel\HttpKernelInterface $kernel */
+    /** @var HttpKernelInterface $kernel */
     $kernel = \Drupal::getContainer()->get('http_kernel');
     $response = $kernel->handle($request);
 
diff --git a/tests/src/Kernel/EventSubscriber/MockSubscriber.php b/tests/src/Kernel/EventSubscriber/MockSubscriber.php
index 6beb591..8496a9c 100644
--- a/tests/src/Kernel/EventSubscriber/MockSubscriber.php
+++ b/tests/src/Kernel/EventSubscriber/MockSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\akamai\Kernel\EventSubscriber;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Drupal\akamai\Event\AkamaiHeaderEvents;
 use Drupal\akamai\Event\AkamaiPurgeEvents;
@@ -14,7 +15,7 @@ class MockSubscriber implements EventSubscriberInterface {
   /**
    * Storage of the last event.
    *
-   * @var Symfony\Component\EventDispatcher\Event
+   * @var Event
    */
   public $event;
 
@@ -30,7 +31,7 @@ class MockSubscriber implements EventSubscriberInterface {
   /**
    * Add cache tags header on cacheable responses.
    *
-   * @param \Drupal\akamai\Event\AkamaiHeaderEvents $event
+   * @param AkamaiHeaderEvents $event
    *   The event to process.
    */
   public function onHeaderCreation(AkamaiHeaderEvents $event) {
@@ -41,7 +42,7 @@ class MockSubscriber implements EventSubscriberInterface {
   /**
    * Process purge creation event.
    *
-   * @param \Drupal\akamai\Event\AkamaiPurgeEvents $event
+   * @param AkamaiPurgeEvents $event
    *   The event to process.
    */
   public function onPurgeCreation(AkamaiPurgeEvents $event) {
diff --git a/tests/src/Kernel/MockHeaderSubscriber.php b/tests/src/Kernel/MockHeaderSubscriber.php
index 2ad65b6..bd0008f 100644
--- a/tests/src/Kernel/MockHeaderSubscriber.php
+++ b/tests/src/Kernel/MockHeaderSubscriber.php
@@ -21,7 +21,7 @@ class MockHeaderSubscriber implements EventSubscriberInterface {
   /**
    * Add cache tags header on cacheable responses.
    *
-   * @param \Drupal\akamai\Event\AkamaiHeaderEvents $event
+   * @param AkamaiHeaderEvents $event
    *   The event to process.
    */
   public function onHeaderCreation(AkamaiHeaderEvents $event) {
diff --git a/tests/src/Unit/AkamaiAuthenticationTest.php b/tests/src/Unit/AkamaiAuthenticationTest.php
index 5faffe1..ee8e7b0 100644
--- a/tests/src/Unit/AkamaiAuthenticationTest.php
+++ b/tests/src/Unit/AkamaiAuthenticationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\akamai\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\akamai\AkamaiAuthentication;
 use Drupal\akamai\KeyProviderInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -14,6 +15,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class AkamaiAuthenticationTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests that we can authorise when specifying edgerc file.
    *
diff --git a/tests/src/Unit/AkamaiClientV3Test.php b/tests/src/Unit/AkamaiClientV3Test.php
index d3c9fc2..ba00e50 100644
--- a/tests/src/Unit/AkamaiClientV3Test.php
+++ b/tests/src/Unit/AkamaiClientV3Test.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\akamai\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\akamai\Plugin\Client\AkamaiClientV3;
 use Drupal\akamai\KeyProviderInterface;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Tests\UnitTestCase;
@@ -14,13 +16,14 @@ use Psr\Log\LoggerInterface;
  */
 class AkamaiClientV3Test extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Creates a client to test.
    *
    * @param array $config
    *   An array of client configuration.
    *
-   * @return \Drupal\akamai\Plugin\Client\AkamaiClientV3
+   * @return AkamaiClientV3
    *   An AkamaiClient to test.
    */
   protected function getClient(array $config = []) {
