modules/contrib/akamai/akamai.install
modules/contrib/akamai/akamai.module
modules/contrib/akamai/akamai.post_update.php
modules/contrib/akamai/src/AkamaiAuthentication.php
modules/contrib/akamai/src/AkamaiClientBase.php
modules/contrib/akamai/src/AkamaiClientFactory.php
modules/contrib/akamai/src/AkamaiClientInterface.php
modules/contrib/akamai/src/AkamaiClientManager.php
modules/contrib/akamai/src/Annotation/AkamaiClient.php
modules/contrib/akamai/src/Commands/AkamaiCommands.php
modules/contrib/akamai/src/Event/AkamaiHeaderEvents.php
modules/contrib/akamai/src/Event/AkamaiPurgeEvents.php
modules/contrib/akamai/src/EventSubscriber/CacheableResponseSubscriber.php
modules/contrib/akamai/src/Form/CacheControlForm.php
modules/contrib/akamai/src/Form/ClearUrlForm.php
modules/contrib/akamai/src/Form/ConfigForm.php
modules/contrib/akamai/src/Helper/CacheTagFormatter.php
modules/contrib/akamai/src/Helper/Edgescape.php
modules/contrib/akamai/src/KeyProvider.php
modules/contrib/akamai/src/KeyProviderInterface.php
modules/contrib/akamai/src/Plugin/Block/CacheClearBlock.php
modules/contrib/akamai/src/Plugin/Client/AkamaiClientV3.php
modules/contrib/akamai/src/Plugin/Purge/DiagnosticCheck/CredentialCheck.php
modules/contrib/akamai/src/Plugin/Purge/DiagnosticCheck/QueueLengthCheck.php
modules/contrib/akamai/src/Plugin/Purge/Purger/AkamaiPurger.php
modules/contrib/akamai/src/Plugin/Purge/Purger/AkamaiTagPurger.php
modules/contrib/akamai/tests/bootstrap.php
modules/contrib/akamai/tests/src/Functional/AkamaiCacheControlFormTest.php
modules/contrib/akamai/tests/src/Functional/AkamaiConfigFormTest.php
modules/contrib/akamai/tests/src/Functional/AkamaiHomepageTest.php
modules/contrib/akamai/tests/src/Functional/EdgescapeTest.php
modules/contrib/akamai/tests/src/Kernel/EdgeCacheTagHeaderTest.php
modules/contrib/akamai/tests/src/Kernel/EventSubscriber/CacheableResponseSubscriberTest.php
modules/contrib/akamai/tests/src/Kernel/EventSubscriber/MockSubscriber.php
modules/contrib/akamai/tests/src/Kernel/KeyRepositoryAvailableTest.php
modules/contrib/akamai/tests/src/Kernel/KeyRepositoryUnavailableTest.php
modules/contrib/akamai/tests/src/Kernel/MockHeaderSubscriber.php
modules/contrib/akamai/tests/src/Unit/AkamaiAuthenticationTest.php
modules/contrib/akamai/tests/src/Unit/AkamaiClientV3Test.php
modules/contrib/akamai/tests/src/Unit/Helper/CacheTagFormatterTest.php
modules/contrib/akamai/tests/src/Unit/Helper/EdgescapeTest.php
modules/contrib/akamai/tests/src/Unit/Plugin/Purge/Purger/AkamaiPurgerTest.php
modules/contrib/akamai/tests/src/Unit/Plugin/Purge/Purger/AkamaiTagPurgerTest.php

24 files with changes
=====================

1) modules/contrib/akamai/tests/src/Unit/AkamaiClientV3Test.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\akamai\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\akamai\Plugin\Client\AkamaiClientV3;
 use Drupal\akamai\KeyProviderInterface;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Tests\UnitTestCase;
@@ @@
  */
 class AkamaiClientV3Test extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Creates a client to test.
    *
@@ @@
    * @param array $config
    *   An array of client configuration.
    *
-   * @return \Drupal\akamai\Plugin\Client\AkamaiClientV3
+   * @return AkamaiClientV3
    *   An AkamaiClient to test.
    */
   protected function getClient(array $config = []) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/akamai/tests/src/Unit/AkamaiAuthenticationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\akamai\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\akamai\AkamaiAuthentication;
 use Drupal\akamai\KeyProviderInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
  */
 class AkamaiAuthenticationTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Tests that we can authorise when specifying edgerc file.
    *
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/akamai/tests/src/Kernel/MockHeaderSubscriber.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Add cache tags header on cacheable responses.
    *
-   * @param \Drupal\akamai\Event\AkamaiHeaderEvents $event
+   * @param AkamaiHeaderEvents $event
    *   The event to process.
    */
   public function onHeaderCreation(AkamaiHeaderEvents $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/akamai/tests/src/Kernel/EventSubscriber/MockSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\akamai\Kernel\EventSubscriber;

+use Symfony\Contracts\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Drupal\akamai\Event\AkamaiHeaderEvents;
 use Drupal\akamai\Event\AkamaiPurgeEvents;
@@ @@
   /**
    * Storage of the last event.
    *
-   * @var Symfony\Component\EventDispatcher\Event
+   * @var Event
    */
   public $event;

@@ @@
   /**
    * Add cache tags header on cacheable responses.
    *
-   * @param \Drupal\akamai\Event\AkamaiHeaderEvents $event
+   * @param AkamaiHeaderEvents $event
    *   The event to process.
    */
   public function onHeaderCreation(AkamaiHeaderEvents $event) {
@@ @@
   /**
    * Process purge creation event.
    *
-   * @param \Drupal\akamai\Event\AkamaiPurgeEvents $event
+   * @param AkamaiPurgeEvents $event
    *   The event to process.
    */
   public function onPurgeCreation(AkamaiPurgeEvents $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/akamai/tests/src/Kernel/EventSubscriber/CacheableResponseSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\akamai\Kernel\EventSubscriber;

+use Symfony\Component\HttpKernel\HttpKernelInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Symfony\Component\HttpFoundation\Request;
 use Drupal\akamai\Event\AkamaiHeaderEvents;
@@ @@

     $config = $this->config('akamai.settings');

-    /** @var \Symfony\Component\HttpKernel\HttpKernelInterface $kernel */
+    /** @var HttpKernelInterface $kernel */
     $kernel = \Drupal::getContainer()->get('http_kernel');
     $response = $kernel->handle($request);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/akamai/tests/src/Kernel/EdgeCacheTagHeaderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\akamai\Kernel;

+use Symfony\Component\HttpKernel\HttpKernelInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Symfony\Component\HttpFoundation\Request;
 use Drupal\akamai\Event\AkamaiHeaderEvents;
@@ @@

     $config = $this->config('akamai.settings');

-    /** @var \Symfony\Component\HttpKernel\HttpKernelInterface $kernel */
+    /** @var HttpKernelInterface $kernel */
     $kernel = \Drupal::getContainer()->get('http_kernel');
     $response = $kernel->handle($request);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/akamai/tests/src/Functional/EdgescapeTest.php:68

    ---------- begin diff ----------
@@ @@
     $this->drupalGet($akamai_config_path, [], [
       Edgescape::EDGESCAPE_HEADER => $header_value,
     ]);
-    $this->assertRaw('Country Code: RAX');
+    $this->assertSession()->responseContains('Country Code: RAX');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/akamai/tests/src/Functional/AkamaiHomepageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\akamai\Functional;

+use Drupal\node\NodeInterface;
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * Node created.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * User with admin rights.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $privilegedUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/akamai/tests/src/Functional/AkamaiConfigFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\akamai\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\Url;

@@ @@
   /**
    * User with admin rights.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $privilegedUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/akamai/tests/src/Functional/AkamaiCacheControlFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\akamai\Functional;

+use Drupal\node\NodeInterface;
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * Node created.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * User with admin rights.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $privilegedUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/akamai/src/Plugin/Client/AkamaiClientV3.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\akamai\Plugin\Client;

+use GuzzleHttp\Psr7\Response;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\akamai\AkamaiClientBase;
 use GuzzleHttp\Exception\RequestException;
@@ @@
    * @param string[] $objects
    *   A non-associative array of Akamai objects to clear.
    *
-   * @return \GuzzleHttp\Psr7\Response|bool
+   * @return Response|bool
    *   Response to purge request, or FALSE on failure.
    *
    * @link https://developer.akamai.com/api/purge/ccu/reference.html
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/akamai/src/Plugin/Block/CacheClearBlock.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The Form Builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The Form Builder.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FormBuilderInterface $form_builder) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/akamai/src/Helper/Edgescape.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\akamai\Helper;

+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Component\Utility\Html;
 use Symfony\Component\HttpFoundation\RequestStack;
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * Constructs an Edgescape helper object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RequestStack $request_stack) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/akamai/src/Form/ConfigForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\akamai\Form;

+use Drupal\akamai\AkamaiClientInterface;
 use Drupal\akamai\AkamaiClientManager;
 use Drupal\akamai\KeyProviderInterface;
 use Drupal\Core\Config\ConfigFactory;
@@ @@
   /**
    * An array containing currently available client versions.
    *
-   * @var \Drupal\akamai\AkamaiClientInterface[]
+   * @var AkamaiClientInterface[]
    */
   protected $availableVersions = [];

@@ @@
   /**
    * A messenger interface.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new ConfigForm.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   The ConfigFactory service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request_stack service.
-   * @param \Drupal\akamai\AkamaiClientManager $manager
+   * @param AkamaiClientManager $manager
    *   The Akamai Client plugin manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The Drupal messenger service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\akamai\KeyProviderInterface $key_provider
+   * @param KeyProviderInterface $key_provider
    *   The key provider service.
    */
   public function __construct(ConfigFactory $configFactory, RequestStack $request_stack, AkamaiClientManager $manager, MessengerInterface $messenger, ModuleHandlerInterface $module_handler, KeyProviderInterface $key_provider) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/akamai/src/Form/ClearUrlForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * A messenger interface.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new ClearUrlFrom.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The Drupal messenger service.
    */
   public function __construct(MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/akamai/src/Form/CacheControlForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\akamai\Form;

+use Drupal\akamai\AkamaiClientInterface;
 use Drupal\akamai\AkamaiClientFactory;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Form\FormBase;
@@ @@
   /**
    * The akamai client.
    *
-   * @var \Drupal\akamai\AkamaiClientInterface
+   * @var AkamaiClientInterface
    */
   protected $akamaiClient;

@@ @@
   /**
    * A messenger interface.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new CacheControlForm.
    *
-   * @param \Drupal\akamai\AkamaiClientFactory $factory
+   * @param AkamaiClientFactory $factory
    *   The akamai client factory.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The Drupal messenger service.
    */
   public function __construct(AkamaiClientFactory $factory, MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/akamai/src/EventSubscriber/CacheableResponseSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\akamai\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\akamai\Event\AkamaiHeaderEvents;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Cache\CacheableResponseInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Cache tag formatter.
    *
-   * @var \Drupal\akamai\Helper\CacheTagFormatter
+   * @var CacheTagFormatter
    */
   protected $tagFormatter;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a new CacheableResponseSubscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\akamai\Helper\CacheTagFormatter $formatter
+   * @param CacheTagFormatter $formatter
    *   The cache tag formatter.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(ConfigFactoryInterface $config_factory, CacheTagFormatter $formatter, EventDispatcherInterface $event_dispatcher) {
@@ @@
   /**
    * Add cache tags header on cacheable responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
@@ @@

       // Instantiate our event.
       $event = new AkamaiHeaderEvents($tags);
-      $this->eventDispatcher->dispatch(AkamaiHeaderEvents::HEADER_CREATION, $event);
+      $this->eventDispatcher->dispatch($event, AkamaiHeaderEvents::HEADER_CREATION);
       $tags = $event->data;
       foreach ($tags as &$tag) {
         $tag = $this->tagFormatter->format($tag);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/akamai/src/Event/AkamaiPurgeEvents.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\akamai\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Event that is fired when Akamai purge is formed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/akamai/src/Event/AkamaiHeaderEvents.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\akamai\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Event that is fired when Akamai header is formed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/akamai/src/Annotation/AkamaiClient.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\akamai\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
    *
    * The string should be wrapped in a @Translation().
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


21) modules/contrib/akamai/src/AkamaiClientManager.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/akamai/src/AkamaiClientFactory.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * The akamai client plugin manager.
    *
-   * @var \Drupal\akamai\AkamaiClientManager
+   * @var AkamaiClientManager
    */
   protected $clientManager;

@@ @@
   /**
    * Constructs a new AkamaiClientFactory object.
    *
-   * @param \Drupal\akamai\AkamaiClientManager $client_manager
+   * @param AkamaiClientManager $client_manager
    *   The akamai client plugin manager.
    */
   public function __construct(AkamaiClientManager $client_manager) {
@@ @@
    *   (optional) The version of the akamai client to use for this object,
    *   or NULL to use the current version.
    *
-   * @return \Drupal\akamai\AkamaiClientInterface
+   * @return AkamaiClientInterface
    *   An Akamai Client object.
    *
    * @see AkamaiClientFactory::setclientVersion()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/akamai/src/AkamaiClientBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\akamai;

+use GuzzleHttp\Psr7\Response;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
    *   The plugin implementation definition.
    * @param \Akamai\Open\EdgeGrid\Client $client
    *   Akamai EdgeGrid client.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   A messenger service.
-   * @param \Drupal\akamai\KeyProviderInterface $key_provider
+   * @param KeyProviderInterface $key_provider
    *   A key provider service.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, EdgeGridClient $client, ConfigFactoryInterface $config_factory, LoggerInterface $logger, MessengerInterface $messenger, KeyProviderInterface $key_provider) {
@@ @@
   /**
    * Creates a config array for consumption by Akamai\Open\EdgeGrid\Client.
    *
-   * @param \Drupal\akamai\AkamaiAuthentication $auth
+   * @param AkamaiAuthentication $auth
    *   The auth instance.
    *
    * @return array
@@ @@
    * @param string $url
    *   A URL to clear.
    *
-   * @return \GuzzleHttp\Psr7\Response|bool
+   * @return Response|bool
    *   Response to purge request, or FALSE on failure.
    */
   public function purgeUrl($url) {
@@ @@
    * @param array $urls
    *   List of URLs to purge.
    *
-   * @return \GuzzleHttp\Psr7\Response|bool
+   * @return Response|bool
    *   Response to purge request, or FALSE on failure.
    */
   public function purgeUrls(array $urls) {
@@ @@
    * @param string $cpcode
    *   A cpcode to clear.
    *
-   * @return \GuzzleHttp\Psr7\Response
+   * @return Response
    *   Response to purge request.
    */
   public function purgeCpCode($cpcode) {
@@ @@
    * @param array $cpcodes
    *   List of cpcodes to purge.
    *
-   * @return \GuzzleHttp\Psr7\Response
+   * @return Response
    *   Response to purge request.
    */
   public function purgeCpCodes(array $cpcodes) {
@@ @@
    * @param array $tags
    *   List of tags to purge.
    *
-   * @return \GuzzleHttp\Psr7\Response
+   * @return Response
    *   Response to purge request.
    */
   public function purgeTags(array $tags) {
@@ @@
   /**
    * Formats a JSON error response into a string.
    *
-   * @param \GuzzleHttp\Exception\RequestException $e
+   * @param RequestException $e
    *   The RequestException containing the JSON error response.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/akamai/src/AkamaiAuthentication.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * AkamaiAuthentication factory method, following superclass patterns.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   A config factory, for getting client authentication details.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   A messenger service.
-   * @param \Drupal\akamai\KeyProviderInterface $key_provider
+   * @param KeyProviderInterface $key_provider
    *   A akamai.key_provider service.
    *
    * @return \Drupal\akamai\AkamaiAuthentication
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/akamai/tests/src/Unit/Plugin/Purge/Purger/AkamaiTagPurge
         rTest.php" file, due to:                                               
         "Analyze error: "Class Drupal\purge\Plugin\Purge\Purger\PurgerBase not 
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/akamai/tests/src/Unit/Plugin/Purge/Purger/AkamaiPurgerTe
         st.php" file, due to:                                                  
         "Analyze error: "Class Drupal\purge\Plugin\Purge\Purger\PurgerBase not 
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/akamai/src/Plugin/Purge/Purger/AkamaiTagPurger.php"   
         file, due to:                                                          
         "Analyze error: "Class Drupal\purge\Plugin\Purge\Purger\PurgerBase not 
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/akamai/src/Plugin/Purge/Purger/AkamaiPurger.php" file,
         due to:                                                                
         "Analyze error: "Class Drupal\purge\Plugin\Purge\Purger\PurgerBase not 
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/akamai/src/Plugin/Purge/DiagnosticCheck/QueueLengthCheck
         .php" file, due to:                                                    
         "Analyze error: "Class                                                 
         Drupal\purge\Plugin\Purge\DiagnosticCheck\DiagnosticCheckBase not      
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/akamai/src/Plugin/Purge/DiagnosticCheck/CredentialCheck.
         php" file, due to:                                                     
         "Analyze error: "Class                                                 
         Drupal\purge\Plugin\Purge\DiagnosticCheck\DiagnosticCheckBase not      
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 2 nodes were removed                                                 

