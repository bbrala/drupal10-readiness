modules/contrib/orejime/orejime.install
modules/contrib/orejime/orejime.module
modules/contrib/orejime/orejime_service.page.inc
modules/contrib/orejime/src/Controller/OrejimeController.php
modules/contrib/orejime/src/Entity/Orejime.php
modules/contrib/orejime/src/Entity/OrejimeInterface.php
modules/contrib/orejime/src/Entity/OrejimeViewsData.php
modules/contrib/orejime/src/Form/OrejimeDeleteForm.php
modules/contrib/orejime/src/Form/OrejimeForm.php
modules/contrib/orejime/src/Form/OrejimeRevisionDeleteForm.php
modules/contrib/orejime/src/Form/OrejimeRevisionRevertForm.php
modules/contrib/orejime/src/Form/OrejimeRevisionRevertTranslationForm.php
modules/contrib/orejime/src/Form/OrejimeSettingsForm.php
modules/contrib/orejime/src/OrejimeAccessControlHandler.php
modules/contrib/orejime/src/OrejimeHtmlRouteProvider.php
modules/contrib/orejime/src/OrejimeListBuilder.php
modules/contrib/orejime/src/OrejimeServiceProvider.php
modules/contrib/orejime/src/OrejimeStorage.php
modules/contrib/orejime/src/OrejimeStorageInterface.php
modules/contrib/orejime/src/OrejimeTranslationHandler.php
modules/contrib/orejime/src/Services/JsCollectionRendererOrejime.php
modules/contrib/orejime/src/Services/OrejimeManager.php

12 files with changes
=====================

1) modules/contrib/orejime/src/Services/OrejimeManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\orejime\Services;

+use Drupal\Core\Config\Config;
 use Drupal\orejime\Entity\Orejime;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Executable\ExecutableManagerInterface;
@@ @@
   /**
    * The Orejime config.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The condition manager.
    *
-   * @var \Drupal\Core\Executable\ExecutableManagerInterface
+   * @var ExecutableManagerInterface
    */
   protected $conditionManager;

@@ @@
   /**
    * Creates a new PathMessageEventSubscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Executable\ExecutableManagerInterface $condition_manager
+   * @param ExecutableManagerInterface $condition_manager
    *   The condition manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ExecutableManagerInterface $condition_manager, LanguageManagerInterface $language_manager, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/orejime/src/Services/JsCollectionRendererOrejime.php:56

    ---------- begin diff ----------
@@ @@
         case 'file':
           $query_string = $js_asset['version'] == -1 ? $default_query_string : 'v=' . $js_asset['version'];
           $query_string_separator = (strpos($js_asset['data'], '?') !== FALSE) ? '&' : '?';
-          $element['#attributes']['src'] = file_url_transform_relative(file_create_url($js_asset['data']));
+          $element['#attributes']['src'] = \Drupal::service('file_url_generator')->generateString($js_asset['data']);
           // Only add the cache-busting query string if this isn't an aggregate
           // file.
           if (!isset($js_asset['preprocessed'])) {
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/orejime/src/OrejimeStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of Orejime revision IDs for a specific Orejime.
    *
-   * @param \Drupal\orejime\Entity\OrejimeInterface $entity
+   * @param OrejimeInterface $entity
    *   The Orejime entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as Orejime author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\orejime\Entity\OrejimeInterface $entity
+   * @param OrejimeInterface $entity
    *   The Orejime entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all Orejime with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/orejime/src/OrejimeHtmlRouteProvider.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/orejime/src/OrejimeAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\orejime;

+use Drupal\orejime\Entity\OrejimeInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\orejime\Entity\OrejimeInterface $entity */
+    /** @var OrejimeInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/orejime/src/Form/OrejimeSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\orejime\Form;

+use Drupal\workflows\StateInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Plugin\Factory\FactoryInterface;
 use Drupal\Core\Asset\CssOptimizer;
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   ];

   /**
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   private $fileSystem;

   /**
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   private $time;

   /**
-   * @var \Drupal\workflows\StateInterface
+   * @var StateInterface
    */
   private $state;

@@ @@
   /**
    * Creates a new OrejimeSettingsForm.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Component\Plugin\Factory\FactoryInterface $plugin_factory
+   * @param FactoryInterface $plugin_factory
    *   The condition plugin factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Time.
-   * @param \Drupal\workflows\StateInterface $state
+   * @param StateInterface $state
    *   The State service.
    * @param EntityTypeManagerInterface $entityTypeManager
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function __construct(ConfigFactoryInterface $config_factory, FactoryInterface $plugin_factory, ModuleHandlerInterface $module_handler, FileSystemInterface $file_system, TimeInterface $time, State $state, EntityTypeManagerInterface $entityTypeManager) {
     parent::__construct($config_factory);
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
    * --------------
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return mixed
    */
@@ @@
    * --------------
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   *
+   * @param FormStateInterface $form_state
    */
   public function addCategory(array &$form, FormStateInterface $form_state) {
     $nb_cats = $form_state->get('nb_cat');
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
       $target = 'public://orejime';
       $this->fileSystem->prepareDirectory($target, FileSystemInterface::CREATE_DIRECTORY);
       $target = $target . '/';
-      $source = drupal_get_path('module', 'orejime') . '/css/orejime_drupal.css';
+      $source = \Drupal::service('extension.list.module')->getPath('orejime') . '/css/orejime_drupal.css';

       // Transform default file to the new file
       if (file_exists($source)) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/orejime/src/Form/OrejimeRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Provides a class for obtaining system time.
    *
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;

@@ @@
   /**
    * Constructs a new OrejimeRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Orejime storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Component\Datetime\Time $time
+   * @param Time $time
    *   The time service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager, Time $time) {
@@ @@
   protected function prepareRevertedRevision(OrejimeInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\orejime\Entity\OrejimeInterface $default_revision */
+    /** @var OrejimeInterface $default_revision */
     $latest_revision = $this->OrejimeStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/orejime/src/Form/OrejimeRevisionRevertForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The Orejime revision.
    *
-   * @var \Drupal\orejime\Entity\OrejimeInterface
+   * @var OrejimeInterface
    */
   protected $revision;

@@ @@
   /**
    * The Orejime storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $orejimeStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new OrejimeRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Orejime storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\orejime\Entity\OrejimeInterface $revision
+   * @param OrejimeInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\orejime\Entity\OrejimeInterface
+   * @return OrejimeInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(OrejimeInterface $revision, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/orejime/src/Form/OrejimeRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\orejime\Form;

+use Drupal\orejime\Entity\OrejimeInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The Orejime revision.
    *
-   * @var \Drupal\orejime\Entity\OrejimeInterface
+   * @var OrejimeInterface
    */
   protected $revision;

@@ @@
   /**
    * The Orejime storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $orejimeStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new OrejimeRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/orejime/src/Form/OrejimeForm.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Provides a class for obtaining system time.
    *
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new OrejimeRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\Time $time
+   * @param Time $time
    *   The time service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account service
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info, Time $time, AccountInterface $account, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/orejime/src/Entity/OrejimeInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\orejime\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Gets the Orejime revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/orejime/src/Controller/OrejimeController.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
 /**
    * The renderer service.
    *
-   * @var Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Constructs a new OrejimeRevisionRevertForm.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(DateFormatterInterface $date_formatter, RendererInterface $renderer) {
@@ @@
   /**
    * Generates an overview table of older revisions of a Orejime .
    *
-   * @param \Drupal\orejime\Entity\OrejimeInterface $orejime_service
+   * @param OrejimeInterface $orejime_service
    *   A Orejime  object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 12 files have been changed by Rector                                      

