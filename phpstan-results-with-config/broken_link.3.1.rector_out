modules/contrib/broken_link/broken_link.install
modules/contrib/broken_link/broken_link.module
modules/contrib/broken_link/src/BrokenLinkHtmlRouteProvider.php
modules/contrib/broken_link/src/BrokenLinkListBuilder.php
modules/contrib/broken_link/src/BrokenLinkRedirectListBuilder.php
modules/contrib/broken_link/src/BrokenLinkViewsData.php
modules/contrib/broken_link/src/Entity/BrokenLink.php
modules/contrib/broken_link/src/Entity/BrokenLinkRedirect.php
modules/contrib/broken_link/src/EventSubscriber/BrokenLinkSubscriber.php
modules/contrib/broken_link/src/Form/BrokenLinkDeleteForm.php
modules/contrib/broken_link/src/Form/BrokenLinkDeleteMultipleForm.php
modules/contrib/broken_link/src/Form/BrokenLinkRedirectDeleteForm.php
modules/contrib/broken_link/src/Form/BrokenLinkRedirectForm.php
modules/contrib/broken_link/src/Plugin/Action/DeleteBrokenLink.php
modules/contrib/broken_link/src/Plugin/views/field/BrokenLinkBulkForm.php

6 files with changes
====================

1) modules/contrib/broken_link/src/Plugin/Action/DeleteBrokenLink.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\broken_link\Plugin\Action;

+use Drupal\node\NodeInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
    * @param AccountInterface $current_user
    *   Current user.
@@ @@
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\node\NodeInterface $object */
+    /** @var NodeInterface $object */
     return $object->access('delete', $account, $return_as_object);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/broken_link/src/Form/BrokenLinkRedirectForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Path\PathValidator definition.
    *
-   * @var \Drupal\Core\Path\PathValidator
+   * @var PathValidator
    */
   protected $pathValidator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/broken_link/src/Form/BrokenLinkDeleteMultipleForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\broken_link\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The brokenLink storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $manager;

@@ @@
   /**
    * Constructs a DeleteMultiple form object.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $manager
+   * @param EntityTypeManagerInterface $manager
    *   The entity manager.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, EntityTypeManagerInterface $manager) {
@@ @@
     if ($form_state->getValue('confirm') && !empty($this->brokenLinkInfo)) {
       $total_count = 0;
       $delete_brokenLinks = [];
-      /** @var \Drupal\Core\Entity\ContentEntityInterface[][] $delete_translations */
+      /** @var ContentEntityInterface[][] $delete_translations */
       $delete_translations = [];
       /** @var \Drupal\brokenLink\NodeInterface[] $brokenLinks */
       $brokenLinks = $this->storage->loadMultiple(array_keys($this->brokenLinkInfo));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/broken_link/src/EventSubscriber/BrokenLinkSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\broken_link\EventSubscriber;

+use Symfony\Contracts\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Drupal\broken_link\Entity\BrokenLink;
 use Drupal\broken_link\Entity\BrokenLinkRedirect;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/broken_link/src/Entity/BrokenLink.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\broken_link\Entity;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ @@
    * @param string $link
    *   Broken link.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Broken link entity.
    */
   public function loadByLink($link) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/broken_link/src/BrokenLinkHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 6 files have been changed by Rector                                       

