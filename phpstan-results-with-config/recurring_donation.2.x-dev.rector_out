modules/contrib/recurring_donation/recurring_donation.install
modules/contrib/recurring_donation/recurring_donation.module
modules/contrib/recurring_donation/src/Controller/IPNController.php
modules/contrib/recurring_donation/src/DonationType.php
modules/contrib/recurring_donation/src/Event/IPNMessageEvents.php
modules/contrib/recurring_donation/src/Event/IPNMessageReceivedEvent.php
modules/contrib/recurring_donation/src/EventSubscriber/IPNRouteSubscriber.php
modules/contrib/recurring_donation/src/Form/DonationForm.php
modules/contrib/recurring_donation/src/Form/DonationTypeSelectionForm.php
modules/contrib/recurring_donation/src/Form/IPNSettingsForm.php
modules/contrib/recurring_donation/src/Form/SettingsForm.php
modules/contrib/recurring_donation/src/InvalidDonationTypeException.php
modules/contrib/recurring_donation/src/Plugin/Block/DonationBlock.php

5 files with changes
====================

1) modules/contrib/recurring_donation/src/Plugin/Block/DonationBlock.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * Stores the configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FormBuilderInterface $form_builder, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/recurring_donation/src/Form/SettingsForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The email validator.
    *
-   * @var \Egulias\EmailValidator\EmailValidator
+   * @var EmailValidator
    */
   protected $emailValidator;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Egulias\EmailValidator\EmailValidator $email_validator
+   * @param EmailValidator $email_validator
    *   Email validator.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EmailValidator $email_validator) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/recurring_donation/src/EventSubscriber/IPNRouteSubscriber.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a new NodeAdminRouteSubscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/recurring_donation/src/Event/IPNMessageReceivedEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_donation\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use PayPal\IPN\PPIPNMessage;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Class IPNMessageReceivedEvent.
@@ @@
   /**
    * The IPN message.
    *
-   * @var \PayPal\IPN\PPIPNMessage
+   * @var PPIPNMessage
    *   The IPN message.
    */
   protected $ipnMessage;
@@ @@
   /**
    * Constructs a new IPNMessageEvent.
    *
-   * @param \PayPal\IPN\PPIPNMessage $ipnMessage
+   * @param PPIPNMessage $ipnMessage
    *   The IPN message.
    */
   public function __construct(PPIPNMessage $ipnMessage) {
@@ @@
   /**
    * Gets the IPN message.
    *
-   * @return \PayPal\IPN\PPIPNMessage
+   * @return PPIPNMessage
    *   The IPN message.
    */
   public function getIpnMessage() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/recurring_donation/src/Controller/IPNController.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
@@ @@
   /**
    * IPN Listener.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Response.
    */
   public function listen() {
@@ @@
     if ($ipnMessage->validate()) {
       $responseMessage = 'Got valid IPN data';
       $this->getLogger('recurring_donation')->notice($responseMessage);
-      $this->eventDispatcher->dispatch(IPNMessageEvents::VALID, $event);
+      $this->eventDispatcher->dispatch($event, IPNMessageEvents::VALID);
     }
     else {
       $responseMessage = 'Got invalid IPN data';
       $this->getLogger('recurring_donation')->error($responseMessage);
-      $this->eventDispatcher->dispatch(IPNMessageEvents::INVALID, $event);
+      $this->eventDispatcher->dispatch($event, IPNMessageEvents::INVALID);
     }

     return new Response($responseMessage, 200);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 5 files have been changed by Rector                                       

