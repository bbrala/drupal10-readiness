modules/contrib/butils/butils.module
modules/contrib/butils/src/ArrayTrait.php
modules/contrib/butils/src/BUtils.php
modules/contrib/butils/src/CsvTrait.php
modules/contrib/butils/src/CurrentTrait.php
modules/contrib/butils/src/DatetimeTrait.php
modules/contrib/butils/src/DebugTrait.php
modules/contrib/butils/src/DomDocumentTrait.php
modules/contrib/butils/src/EntityTrait.php
modules/contrib/butils/src/EventSubscriber/DebugLog.php
modules/contrib/butils/src/FieldTrait.php
modules/contrib/butils/src/FileTrait.php
modules/contrib/butils/src/HtmlTrait.php
modules/contrib/butils/src/ImageStyleTrait.php
modules/contrib/butils/src/JsonApiTrait.php
modules/contrib/butils/src/MediaTrait.php
modules/contrib/butils/src/MenuTrait.php
modules/contrib/butils/src/ParagraphsTrait.php
modules/contrib/butils/src/RedirectsTrait.php
modules/contrib/butils/src/SqlQueryTrait.php
modules/contrib/butils/src/StateTrait.php
modules/contrib/butils/src/StringTrait.php
modules/contrib/butils/src/TaxonomyTrait.php
modules/contrib/butils/src/TruncateHTML.php
modules/contrib/butils/src/TwigExtension/ButilsTwigExtension.php
modules/contrib/butils/src/UriTrait.php
modules/contrib/butils/src/UserTrait.php
modules/contrib/butils/src/UtilsTrait.php
modules/contrib/butils/src/ViewsTrait.php
modules/contrib/butils/src/XmlTrait.php
modules/contrib/butils/tests/src/Functional/LoadTest.php

15 files with changes
=====================

1) modules/contrib/butils/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\butils\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
@@ @@
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/butils/src/UserTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\butils;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;

 /**
@@ @@
   /**
    * Check if user access given specified roles.
    *
-   * @param int|\Drupal\Core\Session\AccountInterface $account
+   * @param int|AccountInterface $account
    *   User id or user account.
    * @param array $rids
    *   Role ids.
@@ @@
   /**
    * Check whether user is an admin.
    *
-   * @param int|\Drupal\Core\Session\AccountInterface $account
+   * @param int|AccountInterface $account
    *   User id or user account.
    *
    * @return bool
@@ @@
    * @param string $type
    *   Profile type.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   Profile if any.
    */
   public function getProfile($uid, $type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/butils/src/TwigExtension/ButilsTwigExtension.php:56

    ---------- begin diff ----------
@@ @@
   /**
    * Returns entity's build array. Wraps Butils::entityBuild().
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to build.
    * @param string $view_mode
    *   Entity view mode.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/butils/src/TaxonomyTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\butils;

+use Drupal\taxonomy\TermInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\taxonomy\Entity\Term;
 use Drupal\taxonomy\Entity\Vocabulary;

@@ @@
   /**
    * Get children of a taxonomy term.
    *
-   * @param string|int|\Drupal\taxonomy\TermInterface $term
+   * @param string|int|TermInterface $term
    *   Term is.
    * @param int $depth
    *   Deph of tree. NULL - whole depth.
@@ @@
    * @param string $vid
    *   Taxonomy id.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Terms is any.
    */
   public function termsByName($name, $vid = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/butils/src/RedirectsTrait.php:15

    ---------- begin diff ----------
@@ @@
    *
    * @param string $path
    *   The path.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity that has a canonic url.
    */
   public function redirectToEntity($path, ContentEntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/butils/src/ParagraphsTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\butils;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\paragraphs\Entity\Paragraph;
 use Drupal\node\NodeInterface;
 use Drupal\paragraphs\ParagraphInterface;
@@ @@
    * @param object $entity
    *   Parent entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Result.
    */
   public function paragraphParentNode($entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/butils/src/MediaTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\butils;

+use Drupal\media\MediaInterface;
+use Drupal\Core\Entity\EntityInterface;
 /**
  * Trait Media.
  *
@@ @@
   /**
    * Get the media's main file object.
    *
-   * @param \Drupal\media\MediaInterface|string $media
+   * @param MediaInterface|string $media
    *   Media object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   File if any.
    */
   public function mediaFile($media) {
@@ @@
    *
    * (Is there an easier way?)
    *
-   * @param \Drupal\media\MediaInterface|string $media
+   * @param MediaInterface|string $media
    *   Media object.
    */
   public function mediaMetadata($media) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/butils/src/ImageStyleTrait.php:72

    ---------- begin diff ----------
@@ @@
   /**
    * Flush all derivatives of a file's image style.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $file
+   * @param EntityInterface $file
    *   File entity.
    * @param string $id
    *   Style name.
@@ @@
   /**
    * Flush all derivatives a file's all image styles.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $file
+   * @param EntityInterface $file
    *   File entity.
    *
    * @return bool
@@ @@
    *
    * NOTE: Making sure the file is a valid image file is on you!
    *
-   * @param \Drupal\Core\Entity\EntityInterface $file
+   * @param EntityInterface $file
    *   File entity.
    * @param array $styles
    *   Image styles to rebuild. If empty, all will be rebuilt.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/butils/src/FileTrait.php:57

    ---------- begin diff ----------
@@ @@
   /**
    * Get relative URI for the file.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   File object.
    *
    * @return string
@@ @@
    *   Relative url.
    */
   public function uriToRelative($uri) {
-    return file_url_transform_relative(file_create_url($uri));
+    return \Drupal::service('file_url_generator')->generateString($uri);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/butils/src/FieldTrait.php:78

    ---------- begin diff ----------
@@ @@
     ];
     $details += $extended_definition;
     if (is_object($details['description'])) {
-      $details['description'] = render($details['description']);
+      $details['description'] = \Drupal::service('renderer')->render($details['description']);
     }
     if (is_object($details['label'])) {
-      $details['description'] = render($details['label']);
+      $details['description'] = \Drupal::service('renderer')->render($details['label']);
     }

     // Additions for entity reference.
@@ @@
   /**
    * Empty an entity's field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity posessing the field.
    * @param string $field_name
    *   Field name.
@@ @@
   /**
    * View field value without the wrappers and label.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity posessing the field.
    * @param string $field_name
    *   Field name.
@@ @@
   /**
    * Renders field value without the wrappers and label.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity posessing the field.
    * @param string $field_name
    *   Field name.
@@ @@
   /**
    * Removes reference to an entity from the reference field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $parent
+   * @param EntityInterface $parent
    *   Parent entity.
    * @param string $field_name
    *   Reference entity field.
@@ @@
   /**
    * Removes reference to an entity from the reference revisions field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $parent
+   * @param EntityInterface $parent
    *   Parent entity.
    * @param string $field_name
    *   Reference entity field.
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/butils/src/EventSubscriber/DebugLog.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\butils\EventSubscriber;

+use Drupal\Core\Logger\LoggerChannelFactory;
+use Symfony\Component\HttpKernel\Event\TerminateEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
-use Symfony\Component\HttpKernel\Event\PostResponseEvent;

 /**
  * Class DebugLog: write the cumulative log on core shutdown.
@@ @@
   /**
    * Debug logger..
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactory
+   * @var LoggerChannelFactory
    */
   protected $logger;

@@ @@
   /**
    * Constructs a new DebugLog object.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Logger channel factory.
    */
   public function __construct(LoggerChannelFactoryInterface $logger_factory) {
@@ @@
   /**
    * Writes the debug log if any.
    *
-   * @param \Symfony\Component\HttpKernel\Event\PostResponseEvent $event
+   * @param TerminateEvent $event
    *   The Event to process.
    */
-  public function onTerminate(PostResponseEvent $event) {
+  public function onTerminate(TerminateEvent $event) {
     $log =& drupal_static('butils_debug_log', []);
     if (!empty($log)) {
       $flat = '';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/butils/src/EntityTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\butils;

+use Drupal\Core\Entity\Query\QueryInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\file\Entity\File;

@@ @@
    * @param array $values
    *   Entity values.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Resulting entity.
    */
   public function toEntity($type, array $values) {
@@ @@
   /**
    * Counts words in an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to render and count words.
    * @param string $view_mode
    *   View mode to render in.
@@ @@
   /**
    * Builds a build array for an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to render and count words.
    * @param string $view_mode
    *   View mode to render in.
@@ @@
   /**
    * Renders an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to render and count words.
    * @param string $view_mode
    *   View mode to render in.
@@ @@
    * @param string|array $id
    *   Entity id.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|array|null
+   * @return EntityInterface|array|null
    *   The loaded entity.
    */
   public function entityLoad($type, $id) {
@@ @@
    * @param string $type
    *   Entity type.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface|null
+   * @return QueryInterface|null
    *   The entity query.
    */
   public function entityQuery($type) {
@@ @@
   /**
    * Map string value to entity field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Destination entity.
    * @param string $field_name
    *   Name of the field.
@@ @@
   /**
    * Map some value to entity field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Destination entity.
    * @param string $field_name
    *   Name of the field.
@@ @@
   /**
    * Map boolean value to an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Node object.
    * @param string $field_name
    *   Name of the field.
@@ @@
   /**
    * Map term value to an entity field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Node object.
    * @param string $field_name
    *   Name of the field.
@@ @@
   /**
    * Map number value to an entity field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Node object.
    * @param string $field_name
    *   Name of the field.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/butils/src/CurrentTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\butils;

+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Language\LanguageInterface;

@@ @@
    * @param string $type
    *   Expected entity type. NULL will result if not met.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   Current page entity.
    */
   public function currentEntity($type = '') {
@@ @@
   /**
    * Get for the current language.
    *
-   * @return \Drupal\Core\Language\LanguageInterface
+   * @return LanguageInterface
    *   Current language.
    */
   public function currentLanguage() {
@@ @@
   /**
    * Get the current user account (as proxy interface).
    *
-   * @return \Drupal\Core\Session\AccountProxyInterface
+   * @return AccountProxyInterface
    *   Current user account.
    */
   public function currentUser() {
@@ @@
   /**
    * Get the current route.
    *
-   * @return \Drupal\Core\Routing\RouteMatchInterface
+   * @return RouteMatchInterface
    *   Current route.
    */
   public function currentRoute() {
@@ @@
   /**
    * Get the current request.
    *
-   * @return \Symfony\Component\HttpFoundation\Request
+   * @return Request
    *   Current request.
    */
   public function currentRequest() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/butils/src/BUtils.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Drupal\Core\Entity\EntityDisplayRepository definition.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepository
+   * @var EntityDisplayRepository
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * State service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Driver\mysql\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * FileSystem service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;

@@ @@
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Menu link tree service.
    *
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuTree;

@@ @@
   /**
    * Constructs a new BUtils object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Entity field manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepository $entity_display_repository
+   * @param EntityDisplayRepository $entity_display_repository
    *   Entity display repository.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Renderer.
-   * @param \Drupal\Core\Database\Driver\mysql\Connection $database
+   * @param Connection $database
    *   Database connection.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   FileSystem service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   Route matcher.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   Request stack.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account_proxy
+   * @param AccountProxyInterface $account_proxy
    *   Current account.
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   Path matcher.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler.
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menu_link_tree
+   * @param MenuLinkTreeInterface $menu_link_tree
    *   Menu link treee service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/butils/butils.module:41

    ---------- begin diff ----------
@@ @@
 /**
  * Node save hook handler.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   Node entity.
  *
- * @return \Drupal\Core\Entity\EntityInterface
+ * @return EntityInterface
  *   Node entity.
  */
 function butils_handle_node_save(EntityInterface $entity) {
@@ @@
 /**
  * Gets the current page main entity.
  *
- * @return \Drupal\Core\Entity\EntityInterface
+ * @return EntityInterface
  *   Current page main entity.
  */
 function butils_page_entity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 15 files have been changed by Rector                                      

