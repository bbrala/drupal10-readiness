modules/contrib/acquia_dam/acquia_dam.install
modules/contrib/acquia_dam/acquia_dam.module
modules/contrib/acquia_dam/acquia_dam.tokens.inc
modules/contrib/acquia_dam/acquia_dam.views.inc
modules/contrib/acquia_dam/modules/acquia_dam_integration_links/acquia_dam_integration_links.module
modules/contrib/acquia_dam/modules/acquia_dam_integration_links/src/AssetDetector/AssetDetectorBase.php
modules/contrib/acquia_dam/modules/acquia_dam_integration_links/src/AssetDetector/EntityEmbedTextDetector.php
modules/contrib/acquia_dam/modules/acquia_dam_integration_links/src/AssetDetector/MediaReferenceAssetDetector.php
modules/contrib/acquia_dam/modules/acquia_dam_integration_links/src/AssetDetector/ParagraphsAssetDetector.php
modules/contrib/acquia_dam/modules/acquia_dam_integration_links/src/AssetDetectorInterface.php
modules/contrib/acquia_dam/modules/acquia_dam_integration_links/src/AssetTracker.php
modules/contrib/acquia_dam/modules/acquia_dam_integration_links/src/EnhancedIntegrationLinkRegister.php
modules/contrib/acquia_dam/modules/acquia_dam_integration_links/tests/src/FunctionalJavascript/MediaInsertTest.php
modules/contrib/acquia_dam/modules/acquia_dam_integration_links/tests/src/Kernel/EnhancedIntegrationLinkTest.php
modules/contrib/acquia_dam/src/AcquiaDamMediaLibraryEditorOpener.php
modules/contrib/acquia_dam/src/AcquiadamAuthService.php
modules/contrib/acquia_dam/src/AssetLibraryBuilder.php
modules/contrib/acquia_dam/src/Client/AcquiaDamClient.php
modules/contrib/acquia_dam/src/Client/AcquiaDamClientFactory.php
modules/contrib/acquia_dam/src/Controller/AcquiaDamCategoriesController.php
modules/contrib/acquia_dam/src/Controller/AuthenticationController.php
modules/contrib/acquia_dam/src/Controller/AuthenticationPage.php
modules/contrib/acquia_dam/src/Cron.php
modules/contrib/acquia_dam/src/Element/WidenCategories.php
modules/contrib/acquia_dam/src/EmbedCodeFactory.php
modules/contrib/acquia_dam/src/EmbedCodeUrlBuilder.php
modules/contrib/acquia_dam/src/Entity/BundleFieldDefinition.php
modules/contrib/acquia_dam/src/Entity/MediaEmbedsField.php
modules/contrib/acquia_dam/src/Entity/MediaSourceField.php
modules/contrib/acquia_dam/src/EventSubscriber/RemoteDataSubscriber.php
modules/contrib/acquia_dam/src/EventSubscriber/SystemThemeConfigSubscriber.php
modules/contrib/acquia_dam/src/Exception/DamClientException.php
modules/contrib/acquia_dam/src/Exception/DamServerException.php
modules/contrib/acquia_dam/src/Form/AcquiaDamConfigurationForm.php
modules/contrib/acquia_dam/src/Form/EmbedSelectForm.php
modules/contrib/acquia_dam/src/Form/MediaEmbedFormAlter.php
modules/contrib/acquia_dam/src/FormatAllowedHtmlModifier.php
modules/contrib/acquia_dam/src/IntegrationLinkRegister.php
modules/contrib/acquia_dam/src/MediaTypeResolver.php
modules/contrib/acquia_dam/src/Plugin/Field/FieldFormatter/AssetThumbnailViewer.php
modules/contrib/acquia_dam/src/Plugin/Field/FieldFormatter/EmbedCodeFormatter.php
modules/contrib/acquia_dam/src/Plugin/Field/FieldType/AssetItem.php
modules/contrib/acquia_dam/src/Plugin/Field/FieldWidget/AssetItemWidget.php
modules/contrib/acquia_dam/src/Plugin/QueueWorker/AssetUpdateChecker.php
modules/contrib/acquia_dam/src/Plugin/media/Source/Asset.php
modules/contrib/acquia_dam/src/Plugin/media/Source/AssetDeriver.php
modules/contrib/acquia_dam/src/Plugin/views/MetadataFilterPluginTrait.php
modules/contrib/acquia_dam/src/Plugin/views/area/AcquiaDamTextCustom.php
modules/contrib/acquia_dam/src/Plugin/views/argument/AssetTypeArgument.php
modules/contrib/acquia_dam/src/Plugin/views/field/MediaLibrarySelectForm.php
modules/contrib/acquia_dam/src/Plugin/views/filter/AssetCategoryFilter.php
modules/contrib/acquia_dam/src/Plugin/views/filter/AssetMetadataInOperator.php
modules/contrib/acquia_dam/src/Plugin/views/filter/AssetMetadataString.php
modules/contrib/acquia_dam/src/Plugin/views/filter/AssetSearchFilter.php
modules/contrib/acquia_dam/src/Routing/RouteSubscriber.php
modules/contrib/acquia_dam/src/Routing/SiteStudioRouteSubscriber.php
modules/contrib/acquia_dam/src/StreamWrapper/AcquiaDamStreamWrapper.php
modules/contrib/acquia_dam/tests/modules/acquia_dam_test/src/AcquiaDamTestServiceProvider.php
modules/contrib/acquia_dam/tests/modules/acquia_dam_test/src/HttpClientMiddleware/MockedResponseMiddleware.php
modules/contrib/acquia_dam/tests/src/Functional/AcquiaDamConfigurationFormTest.php
modules/contrib/acquia_dam/tests/src/Functional/AuthPageTest.php
modules/contrib/acquia_dam/tests/src/Functional/DamMenuLinksTest.php
modules/contrib/acquia_dam/tests/src/Functional/MediaAcquiaDamFormAlterTest.php
modules/contrib/acquia_dam/tests/src/FunctionalJavascript/AcquiaDamSiteRegistrationTest.php
modules/contrib/acquia_dam/tests/src/FunctionalJavascript/AcquiaDamWebDriverTestBase.php
modules/contrib/acquia_dam/tests/src/FunctionalJavascript/AuthPageResponseTest.php
modules/contrib/acquia_dam/tests/src/FunctionalJavascript/MediaAcquiaDamAuth.php
modules/contrib/acquia_dam/tests/src/FunctionalJavascript/MediaLibraryIntegrationTest.php
modules/contrib/acquia_dam/tests/src/FunctionalJavascript/MediaTypeTest.php
modules/contrib/acquia_dam/tests/src/FunctionalJavascript/SiteStudioIntegrationTest.php
modules/contrib/acquia_dam/tests/src/FunctionalJavascript/UserAuthPageTest.php
modules/contrib/acquia_dam/tests/src/Kernel/AcquiaDamKernelTestBase.php
modules/contrib/acquia_dam/tests/src/Kernel/AssetVersionUpdateTest.php
modules/contrib/acquia_dam/tests/src/Kernel/CompatibilityTest.php
modules/contrib/acquia_dam/tests/src/Kernel/DamClientFactoryTest.php
modules/contrib/acquia_dam/tests/src/Kernel/EmbedCodeFormatterTest.php
modules/contrib/acquia_dam/tests/src/Kernel/FilterIntegrationTest.php
modules/contrib/acquia_dam/tests/src/Kernel/IntegrationLinkTest.php
modules/contrib/acquia_dam/tests/src/Kernel/MediaIntegrationTest.php
modules/contrib/acquia_dam/tests/src/Kernel/MediaTypeResolverTest.php
modules/contrib/acquia_dam/tests/src/Kernel/ModuleInstallationTest.php
modules/contrib/acquia_dam/tests/src/Kernel/Plugin/views/field/MediaLibrarySelectFormTest.php
modules/contrib/acquia_dam/tests/src/Kernel/StreamWrapper/AcquiaDamStreamWrapperTest.php
modules/contrib/acquia_dam/tests/src/Kernel/TokensTest.php
modules/contrib/acquia_dam/tests/src/Kernel/ViewsIntegrationTest.php
modules/contrib/acquia_dam/tests/src/Unit/EmbedCodeUrlBuilderTest.php

56 files with changes
=====================

1) modules/contrib/acquia_dam/tests/src/Unit/EmbedCodeUrlBuilderTest.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The EmbedCodeUrlBuilder object.
    *
-   * @var \Drupal\acquia_dam\EmbedCodeUrlBuilder
+   * @var EmbedCodeUrlBuilder
    */
   protected $urlBuilder;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/acquia_dam/tests/src/Kernel/TokensTest.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The test media entity.
    *
-   * @var \Drupal\media\MediaInterface
+   * @var MediaInterface
    */
   private $media;

@@ @@
    *
    * @param array $tokens
    *   The tokens being used.
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media.
    * @param array $expected_replacements
    *   The expected replacements.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/acquia_dam/tests/src/Kernel/IntegrationLinkTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_dam\Kernel;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\acquia_dam\IntegrationLinkRegister;
 use Drupal\media\Entity\Media;

 /**
@@ @@
 class IntegrationLinkTest extends AcquiaDamKernelTestBase {

   /**
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testIntegrationLink(): void {
     $this->drupalSetUpCurrentUser();
     $this->setDamSiteToken();
     $this->grantDamDomain();
-    /** @var \Drupal\acquia_dam\IntegrationLinkRegister $register */
+    /** @var IntegrationLinkRegister $register */
     $register = \Drupal::service('acquia_dam.integration_link_register');

     $media_type = $this->createPdfMediaType();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/acquia_dam/tests/src/Kernel/EmbedCodeFormatterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace src\Kernel;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\acquia_dam\EmbedCodeFactory;
 use Drupal\media\Entity\Media;
 use Drupal\media\MediaInterface;
@@ @@

   /**
    *
+   * @dataProvider embedFormatterData
    * @dataProvider testEmbedFormatterData
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testEmbedFormatter(string $embed_style, string $embed_key) {
     $embed_data = file_get_contents(__DIR__ . "/../../fixtures/0324b0b2-5293-4aa0-b0aa-c85b003395e2.json");
@@ @@
   /**
    * Renders media field with view builder.
    *
-   * @param \Drupal\media\Entity\Media $media
+   * @param Media $media
    *   Media entity instance.
    * @param string $embed_style
    *   Field formatter config value.
    *
-   * @return callable|\Drupal\Component\Render\MarkupInterface|mixed
+   * @return callable|MarkupInterface|mixed
    *   Rendered field markup.
    *
    * @throws \Exception
@@ @@
    * @return \string[][]
    *   Data sets for testEmbedFormatter.
    */
-  public function testEmbedFormatterData(): array {
+  public function embedFormatterData(): array {
     return [
       [
         'original',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/acquia_dam/tests/src/Kernel/AssetVersionUpdateTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace src\Kernel;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\media\Entity\Media;
 use Drupal\media\MediaInterface;
 use Drupal\Tests\acquia_dam\Kernel\AcquiaDamKernelTestBase;
@@ @@
   /**
    * Tests asset version update.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testUpdateAssetVersion() {
     $this->drupalSetUpCurrentUser();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/acquia_dam/tests/src/Kernel/AcquiaDamKernelTestBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_dam\Kernel;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
 use Drupal\media\Entity\MediaType;
 use Drupal\user\UserInterface;
@@ @@
   /**
    * Creates a PDF media type.
    *
-   * @return \Drupal\media\Entity\MediaType
+   * @return MediaType
    *   The media type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createPdfMediaType(): MediaType {
     return $this->createMediaType('acquia_dam_asset:pdf');
@@ @@
   /**
    * Creates a Video media type.
    *
-   * @return \Drupal\media\Entity\MediaType
+   * @return MediaType
    *   The media type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createVideoMediaType(): MediaType {
     return $this->createMediaType('acquia_dam_asset:video');
@@ @@
   /**
    * Creates a Spinset media type.
    *
-   * @return \Drupal\media\Entity\MediaType
+   * @return MediaType
    *   The media type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createSpinsetMediaType(): MediaType {
     return $this->createMediaType('acquia_dam_asset:spinset');
@@ @@
   /**
    * Creates an Image media type.
    *
-   * @return \Drupal\media\Entity\MediaType
+   * @return MediaType
    *   The media type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createImageMediaType(): MediaType {
     return $this->createMediaType('acquia_dam_asset:image');
@@ @@
   /**
    * Creates a document media type.
    *
-   * @return \Drupal\media\Entity\MediaType
+   * @return MediaType
    *   The media type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createDocumentMediaType(): MediaType {
     return $this->createMediaType('acquia_dam_asset:documents');
@@ @@
    * @param string $source_plugin_id
    *   The plugin ID.
    *
-   * @return \Drupal\media\Entity\MediaType
+   * @return MediaType
    *   The media type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function createMediaType(string $source_plugin_id): MediaType {
     $media_type = MediaType::create([
@@ @@
    * Grants the site a dummy DAM domain.
    */
   protected function grantDamDomain() {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
+    /** @var ConfigFactoryInterface $configFactory */
     $configFactory = $this->container->get('config.factory');
     $configFactory->getEditable('acquia_dam.settings')
       ->set('domain', 'test.widencollective.com')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/acquia_dam/tests/src/FunctionalJavascript/UserAuthPageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_dam\FunctionalJavascript;

+use Drupal\Core\Session\AccountInterface;
 /**
  * Test Acquia Dam site registration.
  *
@@ @@
   /**
    * User that has admin permissions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/acquia_dam/tests/src/FunctionalJavascript/MediaTypeTest.php:98

    ---------- begin diff ----------
@@ @@
    * @param string $label
    *   The media type label.
    *
-   * @return \Behat\Mink\Element\NodeElement
+   * @return NodeElement
    *   The media type's table row.
    */
   private function getMediaTypeTableRow(string $label): NodeElement {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/acquia_dam/tests/src/FunctionalJavascript/MediaLibraryIntegrationTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_dam\FunctionalJavascript;

+use Behat\Mink\Exception\ElementNotFoundException;
+use Behat\Mink\Exception\ResponseTextException;
+use Drupal\Core\Entity\EntityStorageException;
 use Behat\Mink\Element\NodeElement;
 use Drupal\acquia_dam\Entity\MediaEmbedsField;
 use Drupal\acquia_dam\Entity\MediaSourceField;
@@ @@
    * @param string $file_name
    *   The target file name.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ElementNotFoundException
+   * @throws ResponseTextException
+   * @throws EntityStorageException
    *
    * @dataProvider searchAssetProvider
    */
@@ @@
   /**
    * Tests source menu for the media_library.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   public function testSourceMenu(): void {
     $this->createAndLoginContentCreator();
@@ @@
   /**
    * Test to check if no items are selected in media library leads to error.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testNoItemSelected(): void {
     $this->createAndLoginContentCreator();
@@ @@
    * Test to check when the image_dam asset is click it will return
    * coming soon text.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ElementNotFoundException
+   * @throws ResponseTextException
+   * @throws EntityStorageException
    */
   public function testEmptyStateForImage() {
     $this->createAndLoginContentCreator();
@@ @@
    * @param string $asset_id
    *   The asset ID.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   The media entity.
    */
   private function assertAssetImported(string $asset_id): MediaInterface {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/acquia_dam/tests/src/FunctionalJavascript/AuthPageResponseTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_dam\FunctionalJavascript;

+use Drupal\Core\Session\AccountInterface;
+use Behat\Mink\Exception\ResponseTextException;
 /**
  * Test Acquia Dam request handling.
  *
@@ @@
   /**
    * User that has admin permissions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;

@@ @@
   /**
    * Test how the site handling the errors thrown from the server.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function testAuthPageResponse():void {
     $this->grantSiteRegistrationToken();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/acquia_dam/tests/src/FunctionalJavascript/AcquiaDamWebDriverTestBase.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_dam\FunctionalJavascript;

+use Drupal\Core\Config\ConfigFactoryInterface;
+use Behat\Mink\Exception\ElementNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\editor\Entity\Editor;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
@@ @@
    * Grants the site a dummy DAM domain.
    */
   protected function grantDamDomain() {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
+    /** @var ConfigFactoryInterface $configFactory */
     $configFactory = $this->container->get('config.factory');
     $configFactory->getEditable('acquia_dam.settings')
       ->set('domain', 'test.widencollective.com')
@@ @@
    * @param bool $is_editor
    *   True if the call coming from a ck_editor, False if it's a field widget.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   protected function selectAndInsertAsset(string $asset_id, string $asset_type, string $format = '', bool $is_editor = TRUE): void {
     $modal = $this->assertSession()->waitForElement('css', '#drupal-modal');
@@ @@
    * @param string $locator
    *   The button locator.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   protected function pressDialogButton(string $locator): void {
     $this->assertSession()->elementExists('css', '.ui-dialog-buttonpane')->pressButton($locator);
@@ @@
   /**
    * Helper function to log in a user with necessary permission and access.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException.
+   * @throws EntityStorageException .
    */
   protected function createAndLoginContentCreator() {
     $user = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/acquia_dam/tests/src/FunctionalJavascript/AcquiaDamSiteRegistrationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_dam\FunctionalJavascript;

+use Drupal\Core\Session\AccountInterface;
+use Behat\Mink\Exception\ExpectationException;
+use Behat\Mink\Exception\ResponseTextException;
 /**
  * Test Acquia Dam site registration.
  *
@@ @@
   /**
    * User that has admin permissions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;

@@ @@
   /**
    * Tests site authorisation link is present on config.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ExpectationException
+   * @throws ResponseTextException
    */
   public function testSiteAuthorisationLink() {
     $this->drupalLogin($this->adminUser);
@@ @@
   /**
    * Tests disconnect site button is present on config.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ExpectationException
+   * @throws ResponseTextException
    */
   public function testSiteDisconnectLink() {
     $this->drupalLogin($this->adminUser);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/acquia_dam/tests/src/Functional/MediaAcquiaDamFormAlterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_dam\Functional;

+use Drupal\Core\Session\AccountInterface;
+use Behat\Mink\Exception\ExpectationException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * User that has admin permissions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;

@@ @@
   /**
    * Test media Acquia DAM form alter.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ExpectationException
+   * @throws ResponseTextException
    */
   public function testFormAlter():void {
     $this->drupalLogin($this->adminUser);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/acquia_dam/tests/src/Functional/DamMenuLinksTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_dam\Functional;

+use Drupal\Core\Session\AccountInterface;
+use Behat\Mink\Exception\ExpectationException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * User that has admin permissions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;

@@ @@
   /**
    * Test menu links.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ExpectationException
+   * @throws ResponseTextException
    */
   public function testMenuLinks():void {
     $this->drupalLogin($this->adminUser);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/acquia_dam/tests/src/Functional/AuthPageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_dam\Functional;

+use Drupal\Core\Session\AccountInterface;
+use Behat\Mink\Exception\ExpectationException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * User that has admin permissions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;

@@ @@
   /**
    * Unauthorized user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $unAuthorizedUser;

@@ @@
   /**
    * Test permission of different users.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ExpectationException
+   * @throws ResponseTextException
    */
   public function testAuthPageAccess():void {
     $this->drupalLogin($this->adminUser);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/acquia_dam/tests/src/Functional/AcquiaDamConfigurationFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_dam\Functional;

+use Drupal\Core\Session\AccountInterface;
+use Behat\Mink\Exception\ExpectationException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * User that has admin permissions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;

@@ @@
   /**
    * Unauthorized user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $unAuthorizedUser;

@@ @@
   /**
    * Test permission of different users.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ExpectationException
+   * @throws ResponseTextException
    */
   public function testFormAccess():void {
     $this->drupalLogin($this->adminUser);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/acquia_dam/tests/modules/acquia_dam_test/src/HttpClientMiddleware/MockedResponseMiddleware.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;

@@ @@
   /**
    * Constructs a new MockedResponseMiddleware object.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(LoggerInterface $logger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/acquia_dam/src/StreamWrapper/AcquiaDamStreamWrapper.php:77

    ---------- begin diff ----------
@@ @@
   /**
    * The stream for this instance.
    *
-   * @var \Psr\Http\Message\StreamInterface|null
+   * @var StreamInterface|null
    */
   private $stream;

@@ @@
   /**
    * Fetches a stream for the asset's data.
    *
-   * @return \Psr\Http\Message\StreamInterface|null
+   * @return StreamInterface|null
    *   The stream, or NULL on error.
    */
   private function streamAsset(): ?StreamInterface {
@@ @@
    * @param string $uri
    *   The URI.
    *
-   * @throws \Drupal\acquia_dam\Exception\DamClientException
-   * @throws \Drupal\acquia_dam\Exception\DamServerException
+   * @throws DamClientException
+   * @throws DamServerException
    */
   private function loadAsset(string $uri): void {

@@ @@
    *
    * The HTTP client is used for streaming asset data.
    *
-   * @return \GuzzleHttp\Client
+   * @return Client
    *   The HTTP client.
    */
   private function getHttpClient(): Client {
@@ @@
   /**
    * Gets the DAM client.
    *
-   * @return \Drupal\acquia_dam\Client\AcquiaDamClient
+   * @return AcquiaDamClient
    *   The DAM client.
    *
-   * @throws \Drupal\acquia_dam\Exception\DamClientException
+   * @throws DamClientException
    */
   private function getDamClient(): AcquiaDamClient {
     static $client;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/acquia_dam/src/Plugin/views/filter/AssetMetadataString.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam\Plugin\views\filter;

+use Drupal\acquia_dam\Exception\DamClientException;
 use Drupal\acquia_dam\Client\AcquiaDamClient;
 use Drupal\acquia_dam\Client\AcquiaDamClientFactory;
 use Drupal\acquia_dam\Plugin\views\MetadataFilterPluginTrait;
@@ @@
   /**
    * DAM client factory.
    *
-   * @var \Drupal\acquia_dam\Client\AcquiaDamClientFactory
+   * @var AcquiaDamClientFactory
    */
   protected $clientFactory;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\acquia_dam\Client\AcquiaDamClientFactory $client_factory
+   * @param AcquiaDamClientFactory $client_factory
    *   The Acquia DAM client factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $connection, AcquiaDamClientFactory $client_factory) {
@@ @@
   /**
    * {@inheritDoc}
    *
-   * @throws \Drupal\acquia_dam\Exception\DamClientException
+   * @throws DamClientException
    */
   public function getClient():AcquiaDamClient {
     return $this->clientFactory->getSiteClient();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/acquia_dam/src/Plugin/views/filter/AssetMetadataInOperator.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * DAM client factory.
    *
-   * @var \Drupal\acquia_dam\Client\AcquiaDamClientFactory
+   * @var AcquiaDamClientFactory
    */
   protected $clientFactory;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\acquia_dam\Client\AcquiaDamClientFactory $client_factory
+   * @param AcquiaDamClientFactory $client_factory
    *   The Acquia DAM client factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AcquiaDamClientFactory $client_factory) {
@@ @@
   /**
    * {@inheritDoc}
    *
-   * @throws \Drupal\acquia_dam\Exception\DamClientException
+   * @throws DamClientException
    */
   public function getClient():AcquiaDamClient {
     return $this->clientFactory->getSiteClient();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/acquia_dam/src/Plugin/views/field/MediaLibrarySelectForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam\Plugin\views\field;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\acquia_dam\Client\AcquiaDamClientFactory;
+use Drupal\acquia_dam\MediaTypeResolver;
+use Drupal\media\MediaInterface;
 use Drupal\acquia_dam\Entity\MediaEmbedsField;
 use Drupal\acquia_dam\Entity\MediaSourceField;
 use Drupal\Component\Utility\Html;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * The client factory.
    *
-   * @var \Drupal\acquia_dam\Client\AcquiaDamClientFactory
+   * @var AcquiaDamClientFactory
    */
   private $clientFactory;

@@ @@
   /**
    * The media type resolver.
    *
-   * @var \Drupal\acquia_dam\MediaTypeResolver
+   * @var MediaTypeResolver
    */
   private $mediaTypeResolver;

@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @phpstan-param array<string, mixed> $form
@@ @@
           ->condition('mid', $selected_ids, 'IN')
       )
       ->execute();
-    /** @var array<int, \Drupal\media\MediaInterface> $existing_media_assets */
+    /** @var array<int, MediaInterface> $existing_media_assets */
     $existing_media_assets = $media_storage->loadMultiple($existing_media_asset_ids);
     foreach ($existing_media_assets as $existing_media_asset) {
       $selected_media_ids[] = $existing_media_asset->id();
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   A command to send the selection to the current field widget.
    */
   public static function updateWidgetToNext(array &$form, FormStateInterface $form_state, Request $request): AjaxResponse {
@@ @@
   /**
    * Build the embed form for the selected asset.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    * @param array $selected_ids
    *   The array containing the selected assets.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|void
+   * @return AjaxResponse|void
    *   A command to send the replace the current form with an another one.
    */
   public static function buildEmbedForm(FormStateInterface $form_state, Request $request, array $selected_ids) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/acquia_dam/src/Plugin/views/argument/AssetTypeArgument.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam\Plugin\views\argument;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\acquia_dam\Plugin\media\Source\Asset;
 use Drupal\media\MediaTypeInterface;
 use Drupal\views\Plugin\views\argument\ArgumentPluginBase;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/acquia_dam/src/Plugin/views/MetadataFilterPluginTrait.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Get the client interface.
    *
-   * @return \Drupal\acquia_dam\Client\AcquiaDamClient
+   * @return AcquiaDamClient
    *   Connection object.
    */
   abstract public function getClient(): AcquiaDamClient;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


24) modules/contrib/acquia_dam/src/Plugin/media/Source/Asset.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam\Plugin\media\Source;

+use Drupal\acquia_dam\Client\AcquiaDamClientFactory;
+use GuzzleHttp\Client;
+use Drupal\Core\Utility\Token;
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\acquia_dam\Entity\MediaEmbedsField;
 use Drupal\acquia_dam\Entity\MediaSourceField;
 use Drupal\Component\Render\PlainTextOutput;
@@ @@
   /**
    * The DAM client factory.
    *
-   * @var \Drupal\acquia_dam\Client\AcquiaDamClientFactory
+   * @var AcquiaDamClientFactory
    */
   private $clientFactory;

@@ @@
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   private $httpClient;

@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   private $fileSystem;

@@ @@
   /**
    * The token replacement service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   private $token;

@@ @@
   /**
    * Logger channel interface.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $damLoggerChannel;

@@ @@
   /**
    * Helper function that check if the media embeds field as value.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media object.
    *
    * @return null|string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/acquia_dam/src/Plugin/QueueWorker/AssetUpdateChecker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam\Plugin\QueueWorker;

+use Drupal\media\MediaInterface;
 use Drupal\acquia_dam\Client\AcquiaDamClientFactory;
 use Drupal\acquia_dam\Exception\DamClientException;
 use Drupal\acquia_dam\Exception\DamServerException;
@@ @@
   /**
    * Drupal entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal logger channel service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $loggerChannel;

@@ @@
   /**
    * The Acquia Dam client factory.
    *
-   * @var \Drupal\acquia_dam\Client\AcquiaDamClientFactory
+   * @var AcquiaDamClientFactory
    */
   protected $clientFactory;

@@ @@
     }

     $media_storage = $this->entityTypeManager->getStorage('media');
-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     $media = $media_storage->load($data['media_id']);

     if (!$media) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/acquia_dam/src/MediaTypeResolver.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\acquia_dam\Plugin\media\Source\Asset;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\media\MediaTypeInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * Constructs a new MediaTypeResolver object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * @param array $asset
    *   The asset data.
    *
-   * @return \Drupal\media\MediaTypeInterface|null
+   * @return MediaTypeInterface|null
    *   The media type, or NULL if one cannot be resolved.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function resolve(array $asset): ?MediaTypeInterface {
     if (!isset($asset['file_properties'])) {
@@ @@
   /**
    * Gets media types with Asset source plugin.
    *
-   * @return \Drupal\media\MediaTypeInterface[]
+   * @return MediaTypeInterface[]
    *   The media types.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
-   * @phpstan-return array<string, \Drupal\media\MediaTypeInterface>
+   * @phpstan-return array<string, MediaTypeInterface>
    */
   private function getMediaTypes(): array {
     static $media_types = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


27) modules/contrib/acquia_dam/src/IntegrationLinkRegister.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam;

+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\acquia_dam\Client\AcquiaDamClientFactory;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\DestructableInterface;
@@ @@
   /**
    * DAM client factory.
    *
-   * @var \Drupal\acquia_dam\Client\AcquiaDamClientFactory
+   * @var AcquiaDamClientFactory
    */
   protected $clientFactory;

@@ @@
   /**
    * Database connection service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityBundleInfo;

@@ @@
   /**
    * Logger channel for Acquia DAM.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $damLoggerChannel;

@@ @@
   /**
    * IntegrationLinkRegister constructor.
    *
-   * @param \Drupal\acquia_dam\Client\AcquiaDamClientFactory $client_factory
+   * @param AcquiaDamClientFactory $client_factory
    *   DAM client factory.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database connection.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $loggerChannel
+   * @param LoggerChannelInterface $loggerChannel
    *   Logger channel instance.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityBundleInfo
    *   Entity bundle info.
    */
   public function __construct(AcquiaDamClientFactory $client_factory, Connection $database, LoggerChannelInterface $loggerChannel, EntityTypeBundleInfoInterface $entityBundleInfo) {
@@ @@
    *
    * @param string $asset_id
    *   DAM asset id.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Content entity instance.
    */
   public function addIntegrationLinksList(string $asset_id, ContentEntityInterface $entity): void {
@@ @@
    *
    * @param string $asset_id
    *   DAM asset id.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity object.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   protected function registerIntegrationLink(string $asset_id, ContentEntityInterface $entity): void {
     try {
@@ @@
    * @param string $entity_uuid
    *   Entity uuid.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   protected function removeIntegrationLink(string $entity_uuid): void {
     try {
@@ @@
    * @param array $asset_ids
    *   Asset ids.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   protected function removeTrackings(string $entity_uuid, array $asset_ids) {
     try {
@@ @@
    *
    * Description can be 255 characters maximum.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity instance.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


28) modules/contrib/acquia_dam/src/FormatAllowedHtmlModifier.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Ensures the allowed_html setting for filter_html is correct.
    *
-   * @param \Drupal\filter\FilterFormatInterface $filter_format
+   * @param FilterFormatInterface $filter_format
    *   The filter format.
    */
   public static function process(FilterFormatInterface $filter_format): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


29) modules/contrib/acquia_dam/src/Form/MediaEmbedFormAlter.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam\Form;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\acquia_dam\EmbedCodeFactory;
 use Drupal\acquia_dam\Plugin\media\Source\Asset;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   private $entityRepository;

@@ @@
   /**
    * Constructs a new MediaEmbedFormAlter object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function __construct(EntityRepositoryInterface $entity_repository) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function formAlter(array &$form, FormStateInterface $form_state): void {
     if (isset($form_state->getUserInput()['editor_object'])) {
@@ @@
       return;
     }

-    /** @var \Drupal\acquia_dam\Plugin\media\Source\Asset $asset */
+    /** @var Asset $asset */
     $asset = $media->getSource();
     $form['data-embed-code-id'] = [
       '#title' => t('Embed code'),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


30) modules/contrib/acquia_dam/src/Form/EmbedSelectForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam\Form;

+use Drupal\acquia_dam\Plugin\media\Source\Asset;
 use Drupal\acquia_dam\EmbedCodeFactory;
 use Drupal\Core\Ajax\CloseDialogCommand;
 use Drupal\Core\Form\FormBase;
@@ @@
   /**
    * The EmbedSelectForm constructor.
    *
-   * @param \Drupal\Core\Http\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    */
   public function __construct(RequestStack $requestStack) {
@@ @@
         'settings' => ['thumbnail_size' => '300px'],
       ]);

-      /** @var \Drupal\acquia_dam\Plugin\media\Source\Asset $asset */
+      /** @var Asset $asset */
       $asset = $media_item->getSource();

       $form['embed_code']['thumbnail']['#title'] = $media_item->getName();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/acquia_dam/src/Form/AcquiaDamConfigurationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam\Form;

+use Drupal\Core\Extension\ModuleHandler;
 use Drupal\acquia_dam\AcquiadamAuthService;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * Client interface.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * DAM auth service.
    *
-   * @var \Drupal\acquia_dam\AcquiadamAuthService
+   * @var AcquiadamAuthService
    */
   protected $authService;

@@ @@
   /**
    * The field plugin manager service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * AcquiaDamConfigurationForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory service.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   Http client.
-   * @param \Drupal\acquia_dam\AcquiadamAuthService $authService
+   * @param AcquiadamAuthService $authService
    *   Acquia DAM authentication service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   Module handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ClientInterface $http_client, AcquiadamAuthService $authService, ModuleHandlerInterface $moduleHandler) {
@@ @@
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state instance.
    */
   public function validateForm(array &$form, FormStateInterface $form_state): void {
@@ @@
   /**
    * Validates that the provided domain is valid.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state instance.
    */
   private function validateDomain(FormStateInterface $form_state): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/acquia_dam/src/EventSubscriber/SystemThemeConfigSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The library discovery.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   private $libraryDiscovery;

@@ @@
   /**
    * Constructs a new SystemThemeConfigSubscriber object.
    *
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $library_discovery
+   * @param LibraryDiscoveryInterface $library_discovery
    *   The library discovery.
    */
   public function __construct(LibraryDiscoveryInterface $library_discovery) {
@@ @@
   /**
    * Rebuilds library definitions when the admin theme is changed.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The event.
    */
   public function onConfigSave(ConfigCrudEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


33) modules/contrib/acquia_dam/src/EventSubscriber/RemoteDataSubscriber.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The Acquia DAM client factory.
    *
-   * @var \Drupal\acquia_dam\Client\AcquiaDamClientFactory
+   * @var AcquiaDamClientFactory
    */
   private $clientFactory;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   private $messenger;

@@ @@
   /**
    * The logger service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The media type resolver.
    *
-   * @var \Drupal\acquia_dam\MediaTypeResolver
+   * @var MediaTypeResolver
    */
   private $mediaTypeResolver;

@@ @@
   /**
    * Constructs a new RemoteDataSubscriber object.
    *
-   * @param \Drupal\acquia_dam\Client\AcquiaDamClientFactory $clientFactory
+   * @param AcquiaDamClientFactory $clientFactory
    *   The client factory.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Time service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   Date formatter service.
-   * @param \Drupal\acquia_dam\MediaTypeResolver $media_type_resolver
+   * @param MediaTypeResolver $media_type_resolver
    *   The media type resolver.
    */
   public function __construct(AcquiaDamClientFactory $clientFactory, MessengerInterface $messenger, LoggerInterface $logger, TimeInterface $time, DateFormatterInterface $dateFormatter, MediaTypeResolver $media_type_resolver) {
@@ @@
   /**
    * Performs the query to return the results for a View.
    *
-   * @param \Drupal\views_remote_data\Events\RemoteDataQueryEvent $event
+   * @param RemoteDataQueryEvent $event
    *   The event.
    *
    * @throws \Exception
@@ @@
   /**
    * Creates stub Media entities to a View with remote data from the DAM.
    *
-   * @param \Drupal\views_remote_data\Events\RemoteDataLoadEntitiesEvent $event
+   * @param RemoteDataLoadEntitiesEvent $event
    *   The event.
    */
   public function doLoadEntities(RemoteDataLoadEntitiesEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


34) modules/contrib/acquia_dam/src/Entity/MediaSourceField.php:21

    ---------- begin diff ----------
@@ @@
    * @param string $entity_type_id
    *   The entity type ID.
    *
-   * @return \Drupal\acquia_dam\Entity\BundleFieldDefinition
+   * @return BundleFieldDefinition
    *   The storage definition.
    */
   public static function getStorageDefinition(string $entity_type_id): BundleFieldDefinition {
@@ @@
    * @param string $label
    *   The field label.
    *
-   * @return \Drupal\acquia_dam\Entity\BundleFieldDefinition
+   * @return BundleFieldDefinition
    *   The field definition.
    */
   public static function getFieldDefinition(string $entity_type_id, string $bundle, string $label): BundleFieldDefinition {
@@ @@
   /**
    * Get the bundle field definition.
    *
-   * @return \Drupal\acquia_dam\Entity\BundleFieldDefinition
+   * @return BundleFieldDefinition
    *   The bundle field definition.
    */
   private static function bundleFieldDefinition(): BundleFieldDefinition {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


35) modules/contrib/acquia_dam/src/Entity/MediaEmbedsField.php:21

    ---------- begin diff ----------
@@ @@
    * @param string $entity_type_id
    *   The entity type ID.
    *
-   * @return \Drupal\acquia_dam\Entity\BundleFieldDefinition
+   * @return BundleFieldDefinition
    *   The storage definition.
    */
   public static function getStorageDefinition(string $entity_type_id): BundleFieldDefinition {
@@ @@
    * @param string $label
    *   The field label.
    *
-   * @return \Drupal\acquia_dam\Entity\BundleFieldDefinition
+   * @return BundleFieldDefinition
    *   The field definition.
    */
   public static function getFieldDefinition(string $entity_type_id, string $bundle, string $label): BundleFieldDefinition {
@@ @@
   /**
    * Get the bundle field definition.
    *
-   * @return \Drupal\acquia_dam\Entity\BundleFieldDefinition
+   * @return BundleFieldDefinition
    *   The bundle field definition.
    */
   private static function bundleFieldDefinition(): BundleFieldDefinition {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


36) modules/contrib/acquia_dam/src/EmbedCodeFactory.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam;

+use Drupal\acquia_dam\Plugin\media\Source\Asset;
 use Drupal\acquia_dam\Entity\MediaSourceField;
 use Drupal\acquia_dam\Plugin\Field\FieldType\AssetItem;
 use Drupal\Core\Link;
@@ @@
    *   All embed codes of the asset.
    * @param string $format
    *   Embed code id for formatting.
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   Media instance.
    *
    * @return array
@@ @@
    *   Render array.
    */
   public static function renderAsset(array $embeds, string $format, MediaInterface $media): array {
-    /** @var \Drupal\acquia_dam\Plugin\media\Source\Asset $source */
+    /** @var Asset $source */
     $source = $media->getSource();
     switch ($source->getDerivativeId()) {
       case 'documents':
@@ @@
    *   All embed codes of the asset.
    * @param string $format
    *   Embed code id for formatting.
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   Media instance.
    *
    * @return array
@@ @@
    *   All embed codes of the asset.
    * @param string $format
    *   Embed code id for formatting.
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   Media instance.
    *
    * @return array
@@ @@
    *   All embed codes of the asset.
    * @param string $format
    *   Embed code id for formatting.
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   Media instance.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


37) modules/contrib/acquia_dam/src/Element/WidenCategories.php:31

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   Element array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/acquia_dam/src/Cron.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam;

+use Drupal\Core\Queue\QueueInterface;
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\acquia_dam\Exception\DamClientException;
 use Drupal\acquia_dam\Client\AcquiaDamClientFactory;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\CronInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The Acquia Dam client factory.
    *
-   * @var \Drupal\acquia_dam\Client\AcquiaDamClientFactory
+   * @var AcquiaDamClientFactory
    */
   protected $clientFactory;

@@ @@
   /**
    * The time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * DAM asset update queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $assetUpdateQueue;

@@ @@
   /**
    * DAM update logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $damUpdateLogger;

@@ @@
   /**
    * Constructs a new Cron object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\acquia_dam\Client\AcquiaDamClientFactory $clientFactory
+   * @param AcquiaDamClientFactory $clientFactory
    *   The recurring order manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State service.
-   * @param \Drupal\Core\Queue\QueueFactory $queueFactory
+   * @param QueueFactory $queueFactory
    *   Queue factory service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   Logger factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, AcquiaDamClientFactory $clientFactory, TimeInterface $time, StateInterface $state, QueueFactory $queueFactory, LoggerChannelFactoryInterface $loggerChannelFactory) {
@@ @@
   /**
    * Puts outdated assets into a queue based on version id.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\acquia_dam\Exception\DamClientException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws DamClientException
    */
   protected function enqueueAssets() {
     $request_time = $this->time->getCurrentTime();
@@ @@
    * @return array
    *   Outdated asset ids with media ids.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function filterActiveAssets(array $items): array {
     $media_storage = $this->entityTypeManager->getStorage('media');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


39) modules/contrib/acquia_dam/src/Controller/AuthenticationPage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam\Controller;

+use Drupal\Core\Access\AccessResultAllowed;
+use Drupal\Core\Access\AccessResultNeutral;
 use Drupal\acquia_dam\AcquiadamAuthService;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * Authentication service.
    *
-   * @var \Drupal\acquia_dam\AcquiadamAuthService
+   * @var AcquiadamAuthService
    */
   protected $authService;

@@ @@
   /**
    * AuthenticationPage construct.
    *
-   * @param \Drupal\acquia_dam\AcquiadamAuthService $authService
+   * @param AcquiadamAuthService $authService
    *   Acquia DAM authentication service.
    */
   public function __construct(AcquiadamAuthService $authService) {
@@ @@
   /**
    * Custom access check to match route parameter with current user.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   User instance.
    *
-   * @return \Drupal\Core\Access\AccessResult|\Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultNeutral
+   * @return AccessResult|AccessResultAllowed|AccessResultNeutral
    *   Allowed if the current user id matching the id from the route parameter.
    */
   public function access(UserInterface $user) {
@@ @@
   /**
    * Build authentication page for Acquia DAM.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   User instance.
    *
    * @return array
@@ @@
   /**
    * Returns a link rendered as a button.
    *
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup $button_text
+   * @param TranslatableMarkup $button_text
    *   Button title.
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   Url object for the link.
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup $title
+   * @param TranslatableMarkup $title
    *   Title of the field.
    * @param bool $delete
    *   If TRUE, sets attributes with button--danger class.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/acquia_dam/src/Controller/AuthenticationController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam\Controller;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\user\UserInterface;
 use Drupal\acquia_dam\AcquiadamAuthService;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The request stack factory service.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * DAM auth service.
    *
-   * @var \Drupal\acquia_dam\AcquiadamAuthService
+   * @var AcquiadamAuthService
    */
   protected $authService;

@@ @@
   /**
    * Acquia DAM logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $damLoggerChannel;

@@ @@
   /**
    * AuthenticationPage construct.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   Request stack.
-   * @param \Drupal\acquia_dam\AcquiadamAuthService $authService
+   * @param AcquiadamAuthService $authService
    *   DAM Authentication service.
    */
   public function __construct(RequestStack $request_stack, AcquiadamAuthService $authService) {
@@ @@
       return $this->redirect('acquia_dam.config');
     }

-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $this
       ->entityTypeManager()
       ->getStorage('user')
@@ @@
   /**
    * Deletes authentication info from user data.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirect response instance.
    */
   public function logout(): RedirectResponse {
@@ @@
   /**
    * Disconnects site from Acquia DAM.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirects to configuration page.
    */
   public function disconnectSite(): RedirectResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/acquia_dam/src/Controller/AcquiaDamCategoriesController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam\Controller;

+use Drupal\acquia_dam\Exception\DamClientException;
 use Drupal\acquia_dam\Client\AcquiaDamClientFactory;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * DAM client factory.
    *
-   * @var \Drupal\acquia_dam\Client\AcquiaDamClientFactory
+   * @var AcquiaDamClientFactory
    */
   protected $damClientFactory;

@@ @@
   /**
    * Constructs a new AcquiaDamCategoriesController.
    *
-   * @param \Drupal\acquia_dam\Client\AcquiaDamClientFactory $clientFactory
+   * @param AcquiaDamClientFactory $clientFactory
    *   DAM Client factory.
    */
   public function __construct(AcquiaDamClientFactory $clientFactory) {
@@ @@
   /**
    * Returns DAM category information.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Json response with category data.
    *
-   * @throws \Drupal\acquia_dam\Exception\DamClientException
+   * @throws DamClientException
    */
   public function getCategory(Request $request): JsonResponse {
     $client = $this->damClientFactory->getUserClient();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


42) modules/contrib/acquia_dam/src/Client/AcquiaDamClientFactory.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The handler stack.
    *
-   * @var \GuzzleHttp\HandlerStack
+   * @var HandlerStack
    */
   protected $stack;

@@ @@
   /**
    * The module extension list.
    *
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    */
   protected $moduleList;

@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   private $cacheBackend;

@@ @@
   /**
    * DAM auth service.
    *
-   * @var \Drupal\acquia_dam\AcquiadamAuthService
+   * @var AcquiadamAuthService
    */
   protected $authService;

@@ @@
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Acquia DAM logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $damLoggerChannel;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * AcquiaDamClientFactory constructor.
    *
-   * @param \GuzzleHttp\HandlerStack $stack
+   * @param HandlerStack $stack
    *   Handler stack.
-   * @param \Drupal\Core\Extension\ModuleExtensionList $module_list
+   * @param ModuleExtensionList $module_list
    *   Module list service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend.
-   * @param \Drupal\acquia_dam\AcquiadamAuthService $authService
+   * @param AcquiadamAuthService $authService
    *   User data service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   Current user.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $loggerChannel
+   * @param LoggerChannelInterface $loggerChannel
    *   Acquia DAM logger channel.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
    */
   public function __construct(HandlerStack $stack, ModuleExtensionList $module_list, CacheBackendInterface $cache_backend, AcquiadamAuthService $authService, AccountProxyInterface $currentUser, LoggerChannelInterface $loggerChannel, TimeInterface $time, ConfigFactoryInterface $configFactory) {
@@ @@
   /**
    * Returns a AcquiaDamClient instance using site token.
    *
-   * @return \Drupal\acquia_dam\Client\AcquiaDamClient
+   * @return AcquiaDamClient
    *   DAM client.
    *
-   * @throws \Drupal\acquia_dam\Exception\DamClientException
+   * @throws DamClientException
    */
   public function getSiteClient(): AcquiaDamClient {
     return $this->getClient($this->authService->getSiteToken());
@@ @@
   /**
    * Returns a AcquiaDamClient instance using the current user token.
    *
-   * @return \Drupal\acquia_dam\Client\AcquiaDamClient
+   * @return AcquiaDamClient
    *   DAM client.
    *
-   * @throws \Drupal\acquia_dam\Exception\DamClientException
+   * @throws DamClientException
    */
   public function getUserClient(): AcquiaDamClient {
     return $this->getClient($this->getDamToken());
@@ @@
    * @param string $token
    *   DAM token to authenticate with.
    *
-   * @return \Drupal\acquia_dam\Client\AcquiaDamClient
+   * @return AcquiaDamClient
    *   Client instance.
    *
-   * @throws \Drupal\acquia_dam\Exception\DamClientException
+   * @throws DamClientException
    *   Throws when DAM token is missing from user data.
    */
   protected function getClient(string $token): AcquiaDamClient {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


43) modules/contrib/acquia_dam/src/Client/AcquiaDamClient.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam\Client;

+use GuzzleHttp\Exception\GuzzleException;
+use function GuzzleHttp\http_build_query;
 use Drupal\acquia_dam\Exception\DamClientException;
 use Drupal\acquia_dam\Exception\DamServerException;
 use Drupal\Component\Datetime\TimeInterface;
@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   private $cacheBackend;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Acquia Dam Config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $acquiaDamConfig;

@@ @@
   /**
    * Constructs a new Client object.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Config\ImmutableConfig $acquiaDamConfig
+   * @param ImmutableConfig $acquiaDamConfig
    *   Acquia DAM config.
    * @param array $config
    *   Client config array.
@@ @@
    */
   public function search(string $query, string $sort = '-created_date', int $limit = 10, int $offset = 0, array $expand = []): array {
     try {
-      $query = \GuzzleHttp\http_build_query([
+      $query = http_build_query([
         'query' => $query,
         'sort' => $sort,
         'limit' => $limit,
@@ @@
    * @return array
    *   The asset, or null if not found.
    *
-   * @throws \Drupal\acquia_dam\Exception\DamClientException
-   * @throws \Drupal\acquia_dam\Exception\DamServerException
+   * @throws DamClientException
+   * @throws DamServerException
    */
   public function getAsset(string $id, string $version = ''): array {
     $cache_key = 'asset:' . $id;
@@ @@
    * @return array
    *   The asset's version data.
    *
-   * @throws \Drupal\acquia_dam\Exception\DamClientException
-   * @throws \Drupal\acquia_dam\Exception\DamServerException
+   * @throws DamClientException
+   * @throws DamServerException
    */
   public function getAssetVersionList(string $id): array {
     try {
@@ @@
    * @return array|null
    *   Response body, or null.
    *
-   * @throws \Drupal\acquia_dam\Exception\DamClientException
-   * @throws \Drupal\acquia_dam\Exception\DamServerException
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws DamClientException
+   * @throws DamServerException
+   * @throws GuzzleException
    */
   public function registerIntegrationLink(string $assetUuid, string $url, string $description): ?array {
     try {
@@ @@
    * @param string $uuid
    *   Integration link uuid.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function removeIntegrationLink(string $uuid): void {
     try {
@@ @@
    * @return array|null
    *   List of the field available under a particular field type.
    *
-   * @throws \Drupal\acquia_dam\Exception\DamClientException
-   * @throws \Drupal\acquia_dam\Exception\DamServerException
+   * @throws DamClientException
+   * @throws DamServerException
    */
   public function getDisplayKeys(string $field_types): ?array {
     try {
@@ @@
    * @return array|null
    *   List of the available vocabulary items under the display key.
    *
-   * @throws \Drupal\acquia_dam\Exception\DamClientException
-   * @throws \Drupal\acquia_dam\Exception\DamServerException
+   * @throws DamClientException
+   * @throws DamServerException
    */
   public function getDisplayKeyVocabulary(string $display_key): ?array {
     try {
@@ @@
    * @return array
    *   List of the category items.
    *
-   * @throws \Drupal\acquia_dam\Exception\DamClientException
-   * @throws \Drupal\acquia_dam\Exception\DamServerException
+   * @throws DamClientException
+   * @throws DamServerException
    */
   public function getCategories(string $category_path = ''): array {
     try {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/acquia_dam/src/AssetLibraryBuilder.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Acquia DAM authentication service.
    *
-   * @var \Drupal\acquia_dam\AcquiadamAuthService
+   * @var AcquiadamAuthService
    */
   protected $damAuthService;

@@ @@
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * Current user object.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Acquia DAM logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $damLoggerChannel;

@@ @@
   /**
    * The module extension list.
    *
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    */
   protected $moduleExtensionList;

@@ @@
   /**
    * The file URL generator.
    *
-   * @var \Drupal\Core\File\FileUrlGeneratorInterface
+   * @var FileUrlGeneratorInterface
    */
   protected $fileUrlGenerator;

@@ @@
   /**
    * Sets the messenger.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The new messenger.
    */
   public function setMessenger(MessengerInterface $messenger) {
@@ @@
   /**
    * Setter function for authentication service.
    *
-   * @param \Drupal\acquia_dam\AcquiadamAuthService $auth_service
+   * @param AcquiadamAuthService $auth_service
    *   Acquia DAM authentication service.
    */
   public function setAuthService(AcquiadamAuthService $auth_service) {
@@ @@
   /**
    * Setter function for current user object.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   Current user object.
    */
   public function setCurrentUser(AccountProxyInterface $current_user) {
@@ @@
   /**
    * Setter function for Acquia DAM logger channel.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger_channel
+   * @param LoggerChannelInterface $logger_channel
    *   Acquia DAM logger channel.
    */
   public function setLogger(LoggerChannelInterface $logger_channel) {
@@ @@
   /**
    * Setter function for user data.
    *
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   The user data service.
    */
   public function setUserData(UserDataInterface $user_data) {
@@ @@
   /**
    * Sets the module extension list.
    *
-   * @param \Drupal\Core\Extension\ModuleExtensionList $module_extension_list
+   * @param ModuleExtensionList $module_extension_list
    *   The module extension list.
    */
   public function setExtensionList(ModuleExtensionList $module_extension_list) {
@@ @@
   /**
    * Sets the file URL generator.
    *
-   * @param \Drupal\Core\File\FileUrlGeneratorInterface $file_url_generator
+   * @param FileUrlGeneratorInterface $file_url_generator
    *   The file URL generator.
    */
   public function setFileUrlGenerator(FileUrlGeneratorInterface $file_url_generator) {
@@ @@
   /**
    * Builds the authorization UI.
    *
-   * @param \Drupal\media_library\MediaLibraryState $state
+   * @param MediaLibraryState $state
    *   The current state of the media library, derived from the
    *   current request.
    *
@@ @@

     /** @var string[] $allowed_type_ids */
     $allowed_type_ids = $query->get('complete_allowed_list');
-    /** @var array<string, array<string, \Drupal\media\MediaTypeInterface>> $grouped_allowed_types */
+    /** @var array<string, array<string, MediaTypeInterface>> $grouped_allowed_types */
     $grouped_allowed_types = [];
-    /** @var array<string, \Drupal\media\MediaTypeInterface> $source_allowed_types */
+    /** @var array<string, MediaTypeInterface> $source_allowed_types */
     $source_allowed_types = $this->entityTypeManager->getStorage('media_type')->loadMultiple($allowed_type_ids);
     foreach ($source_allowed_types as $source_allowed_type) {
       $provider = $source_allowed_type->getSource()->getPluginDefinition()['provider'];
@@ @@
   /**
    * Returns build with no views or menu.
    *
-   * @param \Drupal\media_library\MediaLibraryState $state
+   * @param MediaLibraryState $state
    *   The current state of the media library, derived from the current request.
    *
    * @return array
@@ @@
   /**
    * Helper function to attach the source menu with the media library menu.
    *
-   * @param \Drupal\media_library\MediaLibraryState $state
+   * @param MediaLibraryState $state
    *   The current state of the media library, derived from the current request.
    * @param string $source_state
    *   Source state value of the media library.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/acquia_dam/src/AcquiadamAuthService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam;

+use Drupal\Core\Extension\ModuleHandler;
+use Drupal\Core\Config\ImmutableConfig;
+use GuzzleHttp\Client;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Site\Settings;
@@ @@
   /**
    * The logger service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The field plugin manager service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * User data.
    *
-   * @var \Drupal\user\UserData
+   * @var UserData
    */
   protected $userData;

@@ @@
   /**
    * Acquia Dam configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Guzzle client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * State storage.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;

@@ @@
   /**
    * Media Acquia Dam configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $mediaAcquiadamConfig;

@@ @@
   /**
    * AuthenticationPage construct.
    *
-   * @param \Drupal\user\UserData $userData
+   * @param UserData $userData
    *   User data.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \GuzzleHttp\ClientInterface $httpClient
+   * @param ClientInterface $httpClient
    *   Http client.
-   * @param \Drupal\Core\State\State $state
+   * @param State $state
    *   State storage.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   Module handler.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(UserData $userData, ConfigFactoryInterface $configFactory, ClientInterface $httpClient, State $state, ModuleHandlerInterface $moduleHandler, LoggerInterface $logger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


46) modules/contrib/acquia_dam/src/AcquiaDamMediaLibraryEditorOpener.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Sets the messenger.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function setEntityTypeManager(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/acquia_dam/modules/acquia_dam_integration_links/tests/src/Kernel/EnhancedIntegrationLinkTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_dam_integration_links\Kernel;

+use Drupal\acquia_dam\IntegrationLinkRegister;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Utility\Html;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   protected $mediaTypeId = '';

   /**
-   * @var \Drupal\acquia_dam\IntegrationLinkRegister
+   * @var IntegrationLinkRegister
    */
   protected $register;

@@ @@
   /**
    * Tests integration link creation on node create and edit (reference field).
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testIntegrationLinkEntityUpdate() {
     $this->grantDamDomain();
@@ @@
   /**
    * Creates media entity of DAM pdf type.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   Newly created media instance.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createPdfMedia(): MediaInterface {
     $media = Media::create([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/acquia_dam/modules/acquia_dam_integration_links/tests/src/FunctionalJavascript/MediaInsertTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\acquia_dam_integration_links\FunctionalJavascript;

+use Behat\Mink\Exception\ElementNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Tests\acquia_dam\FunctionalJavascript\AcquiaDamWebDriverTestBase;

 /**
@@ @@
    *
    * @dataProvider assetProvider
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException|\Behat\Mink\Exception\ResponseTextException
+   * @throws ElementNotFoundException
+   * @throws EntityStorageException|ResponseTextException
    */
   public function testIntegrationLinkOnInsert(string $asset_type, string $asset_id) {
     if ($asset_type === 'Image') {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/acquia_dam/modules/acquia_dam_integration_links/src/EnhancedIntegrationLinkRegister.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Integration link register service.
    *
-   * @var \Drupal\acquia_dam\IntegrationLinkRegister
+   * @var IntegrationLinkRegister
    */
   protected $register;

@@ @@
   /**
    * Asset tracker service.
    *
-   * @var \Drupal\acquia_dam_integration_links\AssetTracker
+   * @var AssetTracker
    */
   protected $assetTracker;

@@ @@
   /**
    * AssetTracker constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   Entity field manager.
-   * @param \Drupal\acquia_dam_integration_links\AssetTracker $assetTracker
+   * @param AssetTracker $assetTracker
    *   Asset tracker service.
-   * @param \Drupal\acquia_dam\IntegrationLinkRegister $register
+   * @param IntegrationLinkRegister $register
    *   Integration link register service.
    */
   public function __construct(EntityFieldManagerInterface $entityFieldManager, AssetTracker $assetTracker, IntegrationLinkRegister $register) {
@@ @@
   /**
    * Discover asset usage updates, saves locally and notifies the service.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity instance.
    */
   public function trackAssetUsage(EntityInterface $entity) {
@@ @@
       ->entityFieldManager
       ->getFieldDefinitions($entity->getEntityTypeId(), $entity->bundle());

-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $title_changed = $this->isTitleChanged($entity);
     $result = $this->assetTracker->runAssetDiscovery($entity, $field_definitions, $title_changed);

@@ @@
   /**
    * Remove all asset usage, deletes from local store and notifies the service.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity instance.
    */
   public function removeAssetUsage(EntityInterface $entity): void {
@@ @@
    *
    * @param array $discovered_usage
    *   Discovered assets.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Related entity instance.
    */
   protected function registerIntegrationLinks(array $discovered_usage, ContentEntityInterface $entity): void {
@@ @@
   /**
    * Determines if entity is eligible for discovery process.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity instance.
    *
    * @return bool
@@ @@
   /**
    * Checks title changed or not.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity instance.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


50) modules/contrib/acquia_dam/modules/acquia_dam_integration_links/src/AssetTracker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam_integration_links;

+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\ContentEntityInterface;

 /**
@@ @@
   /**
    * Asset detector list.
    *
-   * @var \Drupal\acquia_dam_integration_links\AssetDetectorInterface[]
+   * @var AssetDetectorInterface[]
    *   Asset detector interface instances.
    */
   private $assetDetectors;
@@ @@
   /**
    * Adds asset detector service.
    *
-   * @param \Drupal\acquia_dam_integration_links\AssetDetectorInterface $assetDetector
+   * @param AssetDetectorInterface $assetDetector
    *   Asset detector instance.
    */
   public function addAssetDetector(AssetDetectorInterface $assetDetector) {
@@ @@
   /**
    * Runs asset detection process.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity instance.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface[] $field_definitions
+   * @param FieldDefinitionInterface[] $field_definitions
    *   The array of field definitions for the entity.
    * @param bool $title_changed
    *   Tells if the main entity title changed or not.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


51) modules/contrib/acquia_dam/modules/acquia_dam_integration_links/src/AssetDetectorInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam_integration_links;

+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\ContentEntityInterface;

 /**
@@ @@
   /**
    * Discovers Acquia DAM asset usage.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity instance.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface[] $field_definitions
+   * @param FieldDefinitionInterface[] $field_definitions
    *   The array of field definitions for the entity.
    * @param bool $is_title_changed
    *   Title changed on main entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


52) modules/contrib/acquia_dam/modules/acquia_dam_integration_links/src/AssetDetector/ParagraphsAssetDetector.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Asset tracker service.
    *
-   * @var \Drupal\acquia_dam_integration_links\AssetTracker
+   * @var AssetTracker
    */
   protected $assetTracker;

@@ @@
   /**
    * Entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * ParagraphsAssetDetector constructor.
    *
-   * @param \Drupal\acquia_dam_integration_links\AssetTracker $assetTracker
+   * @param AssetTracker $assetTracker
    *   Asset tracker service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   Entity field manager service.
    */
   public function __construct(AssetTracker $assetTracker, EntityFieldManagerInterface $entityFieldManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/acquia_dam/modules/acquia_dam_integration_links/src/AssetDetector/MediaReferenceAssetDetector.php:59

    ---------- begin diff ----------
@@ @@
   /**
    * Returns asset ids of given Media entities.
    *
-   * @param \Drupal\media\MediaInterface[] $media_entities
+   * @param MediaInterface[] $media_entities
    *   Media entity array.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


54) modules/contrib/acquia_dam/modules/acquia_dam_integration_links/src/AssetDetector/EntityEmbedTextDetector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam_integration_links\AssetDetector;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * EntityEmbedTextDetector constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ @@
   /**
    * Gets embedded entity uuids from text fields.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   Field item list.
    *
    * @return array
@@ @@
   /**
    * Get asset ids from text field values.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   Field instance.
    *
    * @return array
    *   Array containing asset ids.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function parseAssetId(FieldItemListInterface $field): array {
     $asset_ids = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/acquia_dam/modules/acquia_dam_integration_links/src/AssetDetector/AssetDetectorBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\acquia_dam_integration_links\AssetDetector;

+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\acquia_dam_integration_links\AssetDetectorInterface;
 use Drupal\Core\Entity\ContentEntityInterface;

@@ @@
   /**
    * Checks if the given fields have relevant updates.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface[] $field_definitions
+   * @param FieldDefinitionInterface[] $field_definitions
    *   The array of field definitions for the entity.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity instance.
    *
    * @return bool
@@ @@
   /**
    * Returns supported fields.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface[] $field_definitions
+   * @param FieldDefinitionInterface[] $field_definitions
    *   The array of field definitions for the entity.
    * @param string[] $supported_field_types
    *   The array of field definitions for the entity.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface[]
+   * @return FieldDefinitionInterface[]
    *   Array with the supported field definitions.
    */
   protected function filterSupportedFields(array $field_definitions, array $supported_field_types) : array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


56) modules/contrib/acquia_dam/acquia_dam.module:5

    ---------- begin diff ----------
@@ @@
  */

 declare(strict_types=1);
+use Drupal\acquia_dam\IntegrationLinkRegister;

 use Drupal\acquia_dam\Client\AcquiaDamClientFactory;
 use Drupal\acquia_dam\EmbedCodeFactory;
@@ @@
  *
  * @param array $form
  *   An associative array containing the structure of the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  *
  * @todo Remove in https://www.drupal.org/node/2983454
@@ @@
  */
 function acquia_dam_form_views_form_acquia_dam_asset_library_page_alter(array &$form, FormStateInterface $form_state) {
   if (isset($form['media_bulk_form']) && isset($form['output'])) {
-    /** @var \Drupal\views\ViewExecutable $view */
+    /** @var ViewExecutable $view */
     $view = $form['output'][0]['#view'];
     foreach (Element::getVisibleChildren($form['media_bulk_form']) as $key) {
       if (isset($view->result[$key])) {
@@ @@
     return;
   }

-  /** @var \Drupal\acquia_dam\IntegrationLinkRegister $register */
+  /** @var IntegrationLinkRegister $register */
   $register = \Drupal::service('acquia_dam.integration_link_register');
   $register->addIntegrationLinksList($asset_id['asset_id'], $entity);
 }
@@ @@
     return;
   }

-  /** @var \Drupal\acquia_dam\IntegrationLinkRegister $register */
+  /** @var IntegrationLinkRegister $register */
   $register = \Drupal::service('acquia_dam.integration_link_register');
   $register->addIntegrationToDeleteList($entity->uuid());
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 56 files have been changed by Rector                                      

