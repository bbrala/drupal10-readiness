modules/contrib/rich_image/rich_image.install
modules/contrib/rich_image/rich_image.module
modules/contrib/rich_image/src/Module.php
modules/contrib/rich_image/src/Plugin/Field/FieldFormatter/RichImageFormatter.php
modules/contrib/rich_image/src/Plugin/Field/FieldType/RichImageItem.php
modules/contrib/rich_image/src/RichImageItemInterface.php
modules/contrib/rich_image/src/RichImageStorage.php

3 files with changes
====================

1) modules/contrib/rich_image/src/RichImageStorage.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The Cache Backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * The Cache Tags Invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * AbstractService constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The Cache Backend.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The Database.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The Database.
    */
   public function __construct(
@@ @@
   /**
    * Check if attributes are already defined for the specified arguments.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The image entity for which rich attributes are to be retrieved.
    * @param string $field_name
    *   The field name of the image field, like 'field_image' or
@@ @@
   /**
    * Get attributes from the database for the specified arguments.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The image entity for which rich attributes are to be retrieved.
    * @param string $field_name
    *   The field name of the image field, like 'field_image' or
@@ @@
   /**
    * Insert rich attributes for all deltas of the entity and field_name.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The image entity for which rich attributes are to be inserted.
    * @param string $field_name
    *   The field name of the image field, like 'field_image' or
@@ @@
    * - from revision table
    *     for entity_type+entity_id+langcode+field_name+revision_id.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The image entity for which rich attributes are to be deleted.
    * @param string $field_name
    *   The field name of the image field, like 'field_image' or
@@ @@
   /**
    * Delete all deltas of a revision.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The image entity for which rich attributes are to be deleted.
    * @param string $field_name
    *   The field name of the image field, like 'field_image' or
@@ @@
   /**
    * Delete attributes row from the database for the entity+field_name.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The image entity for which rich attributes are to be deleted.
    * @param string $field_name
    *   The field name of the image field, like 'field_image' or
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/rich_image/src/Module.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rich_image;

+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Entity\Element\EntityAutocomplete;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\RevisionableInterface;
@@ @@
   /**
    * Gets common values used across multiple methods in this class.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The image entity for which common values are to be retrieved.
    * @param string $field_name
    *   The field name for which common values are to be retrieved.
@@ @@

     if (!isset($static[$static_key])) {

-      /** @var \Drupal\Core\Field\FieldItemListInterface $field */
+      /** @var FieldItemListInterface $field */
       $field = $entity->get($field_name);

       $static[$static_key] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/rich_image/rich_image.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Template\Attribute;
+use Drupal\rich_image\Plugin\Field\FieldType\RichImageItem;
 /**
  * @file
  * This is the Rich Image module.
@@ @@
  */
 function rich_image_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
   // If field type is not image, then bypass this hook.
-  /** @var \Drupal\field\Entity\FieldConfig $field_definition */
+  /** @var FieldConfig $field_definition */
   $field_definition = $context['items']->getFieldDefinition();
   if ($field_definition->getType() !== 'image') {
     return;
@@ @@
  * Custom callback function for the #process of an image field type.
  */
 function _rich_image_widget_process($element, FormStateInterface &$form_state, $form) {
-  /** @var Drupal\field\Entity\FieldConfig $field_definition */
+  /** @var FieldConfig $field_definition */
   $field_definition = FieldConfig::loadByName($element['#entity_type'], $element['#bundle'], $element['#field_name']);
   $settings = !empty($field_definition) ? $field_definition->getSettings() : [];

@@ @@
     if ($variables['multiple']) {
       $variables['attributes']['class'][] = 'has-rich-image';
       foreach ($variables['items'] as $i => $item) {
-        /** @var \Drupal\Core\Template\Attribute $attribute_obj */
+        /** @var Attribute $attribute_obj */
         $attributes = $item['attributes'];
         $attributes->addClass('is-rich-image');
       }
@@ @@

   $formatter_settings = $variables['rich_image_formatter_settings'];

-  /** @var \Drupal\rich_image\Plugin\Field\FieldType\RichImageItem $richImageItem */
+  /** @var RichImageItem $richImageItem */
   $richImageItem = $variables['item'];
   $properties = $richImageItem->getValue();

@@ @@
 function rich_image_entity_storage_load(array $entities, $entity_type_id) {
   $richImageStorage = \Drupal::service('rich_image.storage');

-  /** @var \Drupal\Core\Entity\EntityInterface $entity */
+  /** @var EntityInterface $entity */
   foreach ($entities as $entity) {
     $image_field_names = _rich_image_get_image_field_names($entity);
     // If entity does not contain any image field, then pass.
@@ @@
 /**
  * Determines the image fields of an entity.
  *
- * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+ * @param FieldableEntityInterface $entity
  *   An entity whose fields to analyze.
  *
  * @return array
@@ @@
  *
  * @param mixed $element
  *   The current element for which this validator was called.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The state of the form when this validator was called.
  * @param mixed $form
  *   The form without changes when this validator was called.
@@ @@
  *
  * @param mixed $element
  *   The current element for which this validator was called.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The state of the form when this validator was called.
  * @param mixed $form
  *   The form without changes when this validator was called.
@@ @@
  *
  * @param mixed $element
  *   The current element for which this validator was called.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The state of the form when this validator was called.
  * @param mixed $form
  *   The form without changes when this validator was called.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

