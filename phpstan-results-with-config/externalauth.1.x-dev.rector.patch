diff --git a/externalauth.install b/externalauth.install
index 3e67238..0c87762 100644
--- a/externalauth.install
+++ b/externalauth.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Database\Schema;
 /**
  * @file
  * Install, update and uninstall functions for the externalauth module.
@@ -85,7 +86,7 @@ function externalauth_update_8101() {
  * Make index on authname+provider unique.
  */
 function externalauth_update_8102() {
-  /** @var \Drupal\Core\Database\Schema $schema */
+  /** @var Schema $schema */
   $schema = \Drupal::service('database')->schema();
   // This 'add' can potentially fail, if duplicate authnames are registered
   // already. This is why we do it before the 'remove'. If this happens, the
diff --git a/src/Authmap.php b/src/Authmap.php
index 1962d99..6035618 100644
--- a/src/Authmap.php
+++ b/src/Authmap.php
@@ -15,14 +15,14 @@ class Authmap implements AuthmapInterface {
   /**
    * The connection object used for this data.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The connection object used for this data.
    */
   public function __construct(Connection $connection) {
diff --git a/src/AuthmapInterface.php b/src/AuthmapInterface.php
index 553ec68..ed2fc4b 100644
--- a/src/AuthmapInterface.php
+++ b/src/AuthmapInterface.php
@@ -14,7 +14,7 @@ interface AuthmapInterface {
   /**
    * Save an external authname for a given Drupal user.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The Drupal user account.
    * @param string $provider
    *   The name of the service providing external authentication.
diff --git a/src/Event/ExternalAuthAuthmapAlterEvent.php b/src/Event/ExternalAuthAuthmapAlterEvent.php
index 62b606c..1711021 100644
--- a/src/Event/ExternalAuthAuthmapAlterEvent.php
+++ b/src/Event/ExternalAuthAuthmapAlterEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\externalauth\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Allow event listeners to alter the authmap data that will get stored.
diff --git a/src/Event/ExternalAuthLoginEvent.php b/src/Event/ExternalAuthLoginEvent.php
index 8b379ac..baa1d68 100644
--- a/src/Event/ExternalAuthLoginEvent.php
+++ b/src/Event/ExternalAuthLoginEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\externalauth\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Notify event listeners about an externalauth user login.
@@ -13,7 +13,7 @@ class ExternalAuthLoginEvent extends Event {
   /**
    * The Drupal user account.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $account;
 
@@ -36,7 +36,7 @@ class ExternalAuthLoginEvent extends Event {
   /**
    * Constructs an external login event object.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The Drupal user account.
    * @param string $provider
    *   The name of the service providing external authentication.
@@ -53,7 +53,7 @@ class ExternalAuthLoginEvent extends Event {
   /**
    * Gets the Drupal user entity.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The Drupal user account.
    */
   public function getAccount() {
diff --git a/src/Event/ExternalAuthRegisterEvent.php b/src/Event/ExternalAuthRegisterEvent.php
index 9a056eb..22f6ee2 100644
--- a/src/Event/ExternalAuthRegisterEvent.php
+++ b/src/Event/ExternalAuthRegisterEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\externalauth\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Notify event listeners about an externalauth user registration.
@@ -13,7 +13,7 @@ class ExternalAuthRegisterEvent extends Event {
   /**
    * The Drupal user account.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $account;
 
@@ -43,7 +43,7 @@ class ExternalAuthRegisterEvent extends Event {
   /**
    * Constructs an external registration event object.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The Drupal user account.
    * @param string $provider
    *   The name of the service providing external authentication.
@@ -63,7 +63,7 @@ class ExternalAuthRegisterEvent extends Event {
   /**
    * Gets the Drupal user entity.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The Drupal user account.
    */
   public function getAccount() {
diff --git a/src/ExternalAuth.php b/src/ExternalAuth.php
index fa6d58d..0587254 100644
--- a/src/ExternalAuth.php
+++ b/src/ExternalAuth.php
@@ -30,41 +30,41 @@ class ExternalAuth implements ExternalAuthInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The authmap service.
    *
-   * @var \Drupal\externalauth\AuthmapInterface
+   * @var AuthmapInterface
    */
   protected $authmap;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    * @param AuthmapInterface $authmap
    *   The authmap service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, AuthmapInterface $authmap, LoggerInterface $logger, EventDispatcherInterface $event_dispatcher) {
@@ -107,7 +107,7 @@ class ExternalAuth implements ExternalAuthInterface {
       $username = $provider . '_' . $authname;
     }
 
-    $authmap_event = $this->eventDispatcher->dispatch(ExternalAuthEvents::AUTHMAP_ALTER, new ExternalAuthAuthmapAlterEvent($provider, $authname, $username, $authmap_data));
+    $authmap_event = $this->eventDispatcher->dispatch(new ExternalAuthAuthmapAlterEvent($provider, $authname, $username, $authmap_data), ExternalAuthEvents::AUTHMAP_ALTER);
     $entity_storage = $this->entityTypeManager->getStorage('user');
 
     $account_search = $entity_storage->loadByProperties(['name' => $authmap_event->getUsername()]);
@@ -130,7 +130,7 @@ class ExternalAuth implements ExternalAuthInterface {
     $account->enforceIsNew();
     $account->save();
     $this->authmap->save($account, $provider, $authmap_event->getAuthname(), $authmap_event->getData());
-    $this->eventDispatcher->dispatch(ExternalAuthEvents::REGISTER, new ExternalAuthRegisterEvent($account, $provider, $authmap_event->getAuthname(), $authmap_event->getData()));
+    $this->eventDispatcher->dispatch(new ExternalAuthRegisterEvent($account, $provider, $authmap_event->getAuthname(), $authmap_event->getData()), ExternalAuthEvents::REGISTER);
     $this->logger->notice('External registration of user %name from provider %provider and authname %authname',
       [
         '%name' => $account->getAccountName(),
@@ -162,7 +162,7 @@ class ExternalAuth implements ExternalAuthInterface {
   public function userLoginFinalize(UserInterface $account, $authname, $provider) {
     user_login_finalize($account);
     $this->logger->notice('External login of user %name', ['%name' => $account->getAccountName()]);
-    $this->eventDispatcher->dispatch(ExternalAuthEvents::LOGIN, new ExternalAuthLoginEvent($account, $provider, $authname));
+    $this->eventDispatcher->dispatch(new ExternalAuthLoginEvent($account, $provider, $authname), ExternalAuthEvents::LOGIN);
     return $account;
   }
 
@@ -173,7 +173,7 @@ class ExternalAuth implements ExternalAuthInterface {
     // If a mapping (for the same provider) to this account already exists, we
     // silently skip saving this auth mapping.
     if (!$this->authmap->get($account->id(), $provider)) {
-      $authmap_event = $this->eventDispatcher->dispatch(ExternalAuthEvents::AUTHMAP_ALTER, new ExternalAuthAuthmapAlterEvent($provider, $authname, $account->getAccountName(), NULL));
+      $authmap_event = $this->eventDispatcher->dispatch(new ExternalAuthAuthmapAlterEvent($provider, $authname, $account->getAccountName(), NULL), ExternalAuthEvents::AUTHMAP_ALTER);
       $this->authmap->save($account, $provider, $authmap_event->getAuthname(), $authmap_event->getData());
     }
   }
diff --git a/src/ExternalAuthInterface.php b/src/ExternalAuthInterface.php
index 0cc5b88..27918fe 100644
--- a/src/ExternalAuthInterface.php
+++ b/src/ExternalAuthInterface.php
@@ -22,7 +22,7 @@ interface ExternalAuthInterface {
    * @param string $provider
    *   The module providing external authentication.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The loaded Drupal user.
    */
   public function load($authname, $provider);
@@ -36,7 +36,7 @@ interface ExternalAuthInterface {
    * @param string $provider
    *   The module providing external authentication.
    *
-   * @return \Drupal\user\UserInterface|bool
+   * @return UserInterface|bool
    *   The logged in Drupal user.
    */
   public function login($authname, $provider);
@@ -61,7 +61,7 @@ interface ExternalAuthInterface {
    * @param mixed $authmap_data
    *   Additional data to be stored in the authmap entry.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The registered Drupal user.
    */
   public function register($authname, $provider, array $account_data = [], $authmap_data = NULL);
@@ -79,7 +79,7 @@ interface ExternalAuthInterface {
    * @param mixed $authmap_data
    *   Additional data to be stored in the authmap entry.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The logged in, and optionally registered, Drupal user.
    */
   public function loginRegister($authname, $provider, array $account_data = [], $authmap_data = NULL);
@@ -89,7 +89,7 @@ interface ExternalAuthInterface {
    *
    * Encapsulates user_login_finalize.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The Drupal user to finalize login for.
    * @param string $authname
    *   The unique, external authentication name provided by authentication
@@ -97,7 +97,7 @@ interface ExternalAuthInterface {
    * @param string $provider
    *   The module providing external authentication.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The logged in Drupal user.
    *
    * @codeCoverageIgnore
@@ -112,7 +112,7 @@ interface ExternalAuthInterface {
    *   provider.
    * @param string $provider
    *   The module providing external authentication.
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The existing Drupal account to link.
    */
   public function linkExistingAccount($authname, $provider, UserInterface $account);
diff --git a/src/Plugin/migrate/destination/Authmap.php b/src/Plugin/migrate/destination/Authmap.php
index 8844daa..fe42ca7 100644
--- a/src/Plugin/migrate/destination/Authmap.php
+++ b/src/Plugin/migrate/destination/Authmap.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\externalauth\Plugin\migrate\destination;
 
+use Drupal\user\UserInterface;
 use Drupal\externalauth\AuthmapInterface;
 use Drupal\migrate\Plugin\MigrationInterface;
 use Drupal\migrate\Row;
@@ -22,14 +23,14 @@ class Authmap extends DestinationBase implements ContainerFactoryPluginInterface
   /**
    * The Authmap class.
    *
-   * @var \Drupal\externalauth\AuthmapInterface
+   * @var AuthmapInterface
    */
   protected $authmap;
 
   /**
    * User storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;
 
@@ -42,11 +43,11 @@ class Authmap extends DestinationBase implements ContainerFactoryPluginInterface
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration.
-   * @param \Drupal\externalauth\AuthmapInterface $authmap
+   * @param AuthmapInterface $authmap
    *   The Authmap handling class.
-   * @param \Drupal\user\UserStorageInterface $user_storage
+   * @param UserStorageInterface $user_storage
    *   The user storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration, AuthmapInterface $authmap, UserStorageInterface $user_storage) {
@@ -95,7 +96,7 @@ class Authmap extends DestinationBase implements ContainerFactoryPluginInterface
    * {@inheritdoc}
    */
   public function import(Row $row, array $old_destination_id_values = []) {
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = $this->userStorage->load($row->getDestinationProperty('uid'));
     $provider = $row->getDestinationProperty('provider');
     $authname = $row->getDestinationProperty('authname');
diff --git a/tests/src/Kernel/AuthmapTest.php b/tests/src/Kernel/AuthmapTest.php
index ad4ae37..9b2dc84 100644
--- a/tests/src/Kernel/AuthmapTest.php
+++ b/tests/src/Kernel/AuthmapTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\externalauth\Kernel;
 
+use Drupal\externalauth\Authmap;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\user\Entity\User;
 
@@ -22,14 +23,14 @@ class AuthmapTest extends KernelTestBase {
   /**
    * The Authmap service.
    *
-   * @var \Drupal\externalauth\Authmap
+   * @var Authmap
    */
   protected $authmap;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->authmap = \Drupal::service('externalauth.authmap');
     $this->installSchema('externalauth', ['authmap']);
