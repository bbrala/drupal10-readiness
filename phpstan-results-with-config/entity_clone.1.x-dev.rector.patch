diff --git a/entity_clone.api.php b/entity_clone.api.php
index a52b258..92734d6 100644
--- a/entity_clone.api.php
+++ b/entity_clone.api.php
@@ -1,10 +1,12 @@
 <?php
 
+use Symfony\Component\EventDispatcher\EventSubscriberInterface;
+use Drupal\entity_clone\Event\EntityCloneEvent;
+use Drupal\entity_clone\Event\EntityCloneEvents;
 /**
  * @file
  * Entity Clone hooks and events.
  */
-
 /**
  * Event subscribers for Entity Clone.
  *
@@ -25,7 +27,7 @@
  * ?>
  * </code>
  */
-class MyEntityCloneEventSubscriber implements \Symfony\Component\EventDispatcher\EventSubscriberInterface {
+class MyEntityCloneEventSubscriber implements EventSubscriberInterface {
 
   /**
    * An example event subscriber.
@@ -34,7 +36,7 @@ class MyEntityCloneEventSubscriber implements \Symfony\Component\EventDispatcher
    *
    * @see \Drupal\entity_clone\Event\EntityCloneEvents::PRE_CLONE
    */
-  public function myPreClone(\Drupal\entity_clone\Event\EntityCloneEvent $event): void {
+  public function myPreClone(EntityCloneEvent $event): void {
     $original = $event->getEntity();
     $newEntity = $event->getClonedEntity();
   }
@@ -46,7 +48,7 @@ class MyEntityCloneEventSubscriber implements \Symfony\Component\EventDispatcher
    *
    * @see \Drupal\entity_clone\Event\EntityCloneEvents::POST_CLONE
    */
-  public function myPostClone(\Drupal\entity_clone\Event\EntityCloneEvent $event): void {
+  public function myPostClone(EntityCloneEvent $event): void {
     $original = $event->getEntity();
     $newEntity = $event->getClonedEntity();
   }
@@ -55,8 +57,8 @@ class MyEntityCloneEventSubscriber implements \Symfony\Component\EventDispatcher
    * {@inheritdoc}
    */
   public static function getSubscribedEvents(): array {
-    $events[\Drupal\entity_clone\Event\EntityCloneEvents::PRE_CLONE][] = ['myPreClone'];
-    $events[\Drupal\entity_clone\Event\EntityCloneEvents::POST_CLONE][] = ['myPostClone'];
+    $events[EntityCloneEvents::PRE_CLONE][] = ['myPreClone'];
+    $events[EntityCloneEvents::POST_CLONE][] = ['myPostClone'];
     return $events;
   }
 
diff --git a/entity_clone.module b/entity_clone.module
index f2bdfba..9326f56 100644
--- a/entity_clone.module
+++ b/entity_clone.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Contains entity_clone.module.
@@ -83,7 +84,7 @@ function entity_clone_entity_type_build(array &$entity_types) {
     ],
   ];
 
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   foreach ($entity_types as $entity_type_id => $entity_type) {
     $has_entity_clone_handler = $entity_type->getHandlerClass('entity_clone');
     if (!$has_entity_clone_handler) {
@@ -111,7 +112,7 @@ function entity_clone_entity_type_build(array &$entity_types) {
 /**
  * Declares entity operations.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity on which the linked operations will be performed.
  *
  * @return array
diff --git a/entity_clone.post_update.php b/entity_clone.post_update.php
index 08f25a5..6ef7f74 100644
--- a/entity_clone.post_update.php
+++ b/entity_clone.post_update.php
@@ -1,17 +1,17 @@
 <?php
 
+use Drupal\entity_clone\EntityCloneSettingsManager;
 /**
  * @file
  * Contains entity_clone.post_update.php.
  */
-
 /**
  * Populates new entity_clone form settings.
  */
 function entity_clone_post_update_populate_form_settings3() {
   $form_settings = \Drupal::configFactory()->get('entity_clone.settings')->get('form_settings');
   if (!$form_settings) {
-    /** @var \Drupal\entity_clone\EntityCloneSettingsManager $entity_clone_settings_manager */
+    /** @var EntityCloneSettingsManager $entity_clone_settings_manager */
     $entity_clone_settings_manager = \Drupal::service('entity_clone.settings.manager');
     $form_settings = [];
     foreach (array_keys($entity_clone_settings_manager->getContentEntityTypes()) as $entity_type_id) {
diff --git a/src/EntityClone/Config/ConfigEntityCloneBase.php b/src/EntityClone/Config/ConfigEntityCloneBase.php
index c0c3349..4733910 100644
--- a/src/EntityClone/Config/ConfigEntityCloneBase.php
+++ b/src/EntityClone/Config/ConfigEntityCloneBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_clone\EntityClone\Config;
 
+use Drupal\core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityHandlerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -17,7 +18,7 @@ class ConfigEntityCloneBase implements EntityHandlerInterface, EntityCloneInterf
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -31,7 +32,7 @@ class ConfigEntityCloneBase implements EntityHandlerInterface, EntityCloneInterf
   /**
    * Constructs a new ConfigEntityCloneBase.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    * @param string $entity_type_id
    *   The entity type ID.
@@ -55,7 +56,7 @@ class ConfigEntityCloneBase implements EntityHandlerInterface, EntityCloneInterf
    * {@inheritdoc}
    */
   public function cloneEntity(EntityInterface $entity, EntityInterface $cloned_entity, array $properties = []) {
-    /** @var \Drupal\core\Config\Entity\ConfigEntityInterface $cloned_entity */
+    /** @var ConfigEntityInterface $cloned_entity */
     $id_key = $this->entityTypeManager->getDefinition($this->entityTypeId)->getKey('id');
     $label_key = $this->entityTypeManager->getDefinition($this->entityTypeId)->getKey('label');
 
diff --git a/src/EntityClone/Config/ConfigEntityCloneFormBase.php b/src/EntityClone/Config/ConfigEntityCloneFormBase.php
index 6ebcc19..188e16f 100644
--- a/src/EntityClone/Config/ConfigEntityCloneFormBase.php
+++ b/src/EntityClone/Config/ConfigEntityCloneFormBase.php
@@ -20,23 +20,23 @@ class ConfigEntityCloneFormBase implements EntityHandlerInterface, EntityCloneFo
   /**
    * The string translation.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationManager
+   * @var TranslationManager
    */
   protected $translationManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new ConfigEntityCloneFormBase.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationManager $translation_manager
+   * @param TranslationManager $translation_manager
    *   The string translation manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationManager $translation_manager) {
diff --git a/src/EntityClone/Config/ConfigWithFieldEntityClone.php b/src/EntityClone/Config/ConfigWithFieldEntityClone.php
index 322925a..0ce406e 100644
--- a/src/EntityClone/Config/ConfigWithFieldEntityClone.php
+++ b/src/EntityClone/Config/ConfigWithFieldEntityClone.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_clone\EntityClone\Config;
 
+use Drupal\Core\Entity\EntityFieldManager;
+use Drupal\entity_clone\EntityClone\EntityCloneInterface;
+use Drupal\Core\Entity\Display\EntityDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldConfigInterface;
 
@@ -46,7 +49,7 @@ class ConfigWithFieldEntityClone extends ConfigEntityCloneBase {
    *   The bundle of the cloned entity.
    */
   protected function cloneFields($entity_id, $cloned_entity_id, $bundle_of) {
-    /** @var \Drupal\Core\Entity\EntityFieldManager $field_manager */
+    /** @var EntityFieldManager $field_manager */
     $field_manager = \Drupal::service('entity_field.manager');
     $fields = $field_manager->getFieldDefinitions($bundle_of, $entity_id);
     foreach ($fields as $field_definition) {
@@ -54,7 +57,7 @@ class ConfigWithFieldEntityClone extends ConfigEntityCloneBase {
         if ($this->entityTypeManager->hasHandler($this->entityTypeManager->getDefinition($field_definition->getEntityTypeId())
           ->id(), 'entity_clone')
         ) {
-          /** @var \Drupal\entity_clone\EntityClone\EntityCloneInterface $field_config_clone_handler */
+          /** @var EntityCloneInterface $field_config_clone_handler */
           $field_config_clone_handler = $this->entityTypeManager->getHandler($this->entityTypeManager->getDefinition($field_definition->getEntityTypeId())
             ->id(), 'entity_clone');
           $field_config_properties = [
@@ -86,10 +89,10 @@ class ConfigWithFieldEntityClone extends ConfigEntityCloneBase {
    */
   protected function cloneDisplays($type, $entity_id, $cloned_entity_id, array $view_displays, $bundle_of) {
     foreach ($view_displays as $view_display_id => $view_display) {
-      /** @var \Drupal\Core\Entity\Display\EntityDisplayInterface $display */
+      /** @var EntityDisplayInterface $display */
       $display = $this->entityTypeManager->getStorage('entity_' . $type . '_display')->load($bundle_of . '.' . $entity_id . '.' . $view_display_id);
       if ($display) {
-        /** @var \Drupal\entity_clone\EntityClone\EntityCloneInterface $view_display_clone_handler */
+        /** @var EntityCloneInterface $view_display_clone_handler */
         $view_display_clone_handler = $this->entityTypeManager->getHandler($this->entityTypeManager->getDefinition($display->getEntityTypeId())
           ->id(), 'entity_clone');
         $view_display_properties = [
diff --git a/src/EntityClone/Config/FieldConfigEntityClone.php b/src/EntityClone/Config/FieldConfigEntityClone.php
index b16d1ed..4b2f603 100644
--- a/src/EntityClone/Config/FieldConfigEntityClone.php
+++ b/src/EntityClone/Config/FieldConfigEntityClone.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_clone\EntityClone\Config;
 
+use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\Core\Entity\EntityInterface;
 
 /**
@@ -15,8 +16,7 @@ class FieldConfigEntityClone extends ConfigEntityCloneBase {
   public function cloneEntity(EntityInterface $field_config, EntityInterface $cloned_field_config, array $properties = []) {
     /** @var \Drupal\field\Entity\FieldConfig $field_config */
     /** @var \Drupal\field\Entity\FieldConfig $cloned_field_config */
-    /** @var \Drupal\field\Entity\FieldStorageConfig $cloned_field_storage */
-
+    /** @var FieldStorageConfig $cloned_field_storage */
     if ((!isset($properties['skip_storage']) || !$properties['skip_storage'])) {
       $cloned_field_storage = $field_config->getFieldStorageDefinition()->createDuplicate();
       $cloned_field_storage->set('field_name', $properties['id']);
diff --git a/src/EntityClone/Config/LayoutBuilderEntityClone.php b/src/EntityClone/Config/LayoutBuilderEntityClone.php
index 9bf8b9c..1303098 100644
--- a/src/EntityClone/Config/LayoutBuilderEntityClone.php
+++ b/src/EntityClone/Config/LayoutBuilderEntityClone.php
@@ -20,7 +20,7 @@ class LayoutBuilderEntityClone extends ConfigEntityCloneBase {
   /**
    * Uuid generator service.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;
 
diff --git a/src/EntityClone/Config/MenuEntityClone.php b/src/EntityClone/Config/MenuEntityClone.php
index c83c6da..86c60b1 100644
--- a/src/EntityClone/Config/MenuEntityClone.php
+++ b/src/EntityClone/Config/MenuEntityClone.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_clone\EntityClone\Config;
 
+use Drupal\system\Entity\Menu;
 use Drupal\Core\Entity\EntityInterface;
 
 /**
@@ -13,7 +14,7 @@ class MenuEntityClone extends ConfigEntityCloneBase {
    * {@inheritDoc}
    */
   public function cloneEntity(EntityInterface $entity, EntityInterface $cloned_entity, array $properties = []) {
-    /** @var \Drupal\system\Entity\Menu */
+    /** @var Menu */
     $cloned_entity->set('locked', FALSE);
     return parent::cloneEntity($entity, $cloned_entity, $properties);
   }
diff --git a/src/EntityClone/Content/ContentEntityCloneBase.php b/src/EntityClone/Content/ContentEntityCloneBase.php
index 4246783..9fa7b8a 100644
--- a/src/EntityClone/Content/ContentEntityCloneBase.php
+++ b/src/EntityClone/Content/ContentEntityCloneBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_clone\EntityClone\Content;
 
+use Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\EntityHandlerInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -23,7 +25,7 @@ class ContentEntityCloneBase implements EntityHandlerInterface, EntityCloneInter
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -37,27 +39,27 @@ class ContentEntityCloneBase implements EntityHandlerInterface, EntityCloneInter
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * A service for obtaining the system's time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $timeService;
 
   /**
    * Constructs a new ContentEntityCloneBase.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    * @param string $entity_type_id
    *   The entity type ID.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *  The current user.
-   * @param \Drupal\Component\Datetime\TimeInterface $time_service
+   * @param TimeInterface $time_service
    *   A service for obtaining the system's time.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, $entity_type_id, TimeInterface $time_service, AccountProxyInterface $currentUser) {
@@ -92,7 +94,7 @@ class ContentEntityCloneBase implements EntityHandlerInterface, EntityCloneInter
       foreach ($cloned_entity->getFieldDefinitions() as $field_id => $field_definition) {
         if ($this->fieldIsClonable($field_definition)) {
           $field = $entity->get($field_id);
-          /** @var \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $value */
+          /** @var EntityReferenceItem $value */
           if ($field->count() > 0) {
             $cloned_entity->set($field_id, $this->cloneReferencedEntities($field, $field_definition, $properties, $already_cloned));
           }
@@ -118,7 +120,7 @@ class ContentEntityCloneBase implements EntityHandlerInterface, EntityCloneInter
   /**
    * Determines if a field is clonable.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    *
    * @return bool
@@ -140,9 +142,9 @@ class ContentEntityCloneBase implements EntityHandlerInterface, EntityCloneInter
   /**
    * Sets the cloned entity's label.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $original_entity
+   * @param EntityInterface $original_entity
    *   The original entity.
-   * @param \Drupal\Core\Entity\EntityInterface $cloned_entity
+   * @param EntityInterface $cloned_entity
    *   The entity cloned from the original.
    */
   protected function setClonedEntityLabel(EntityInterface $original_entity, EntityInterface $cloned_entity) {
@@ -155,9 +157,9 @@ class ContentEntityCloneBase implements EntityHandlerInterface, EntityCloneInter
   /**
    * Clones referenced entities.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field item.
-   * @param \Drupal\Core\Field\FieldConfigInterface $field_definition
+   * @param FieldConfigInterface $field_definition
    *   The field definition.
    * @param array $properties
    *   All new properties to replace old.
@@ -175,13 +177,13 @@ class ContentEntityCloneBase implements EntityHandlerInterface, EntityCloneInter
       if (!$referenced_entity = $value->get('entity')->getTarget()) {
         continue;
       }
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $referenced_entity */
+      /** @var ContentEntityInterface $referenced_entity */
       $referenced_entity = $value->get('entity')->getTarget()->getValue();
       $child_properties = $this->getChildProperties($properties, $field_definition, $referenced_entity);
       if (!empty($child_properties['clone'])) {
 
         $cloned_reference = $referenced_entity->createDuplicate();
-        /** @var \Drupal\entity_clone\EntityClone\EntityCloneInterface $entity_clone_handler */
+        /** @var EntityCloneInterface $entity_clone_handler */
         $entity_clone_handler = $this->entityTypeManager->getHandler($referenced_entity->getEntityTypeId(), 'entity_clone');
         $entity_clone_handler->cloneEntity($referenced_entity, $cloned_reference, $child_properties['children'], $already_cloned);
 
@@ -207,9 +209,9 @@ class ContentEntityCloneBase implements EntityHandlerInterface, EntityCloneInter
    *
    * @param array $properties
    *   Properties of the clone operation.
-   * @param \Drupal\Core\Field\FieldConfigInterface $field_definition
+   * @param FieldConfigInterface $field_definition
    *   The field definition.
-   * @param \Drupal\Core\Entity\EntityInterface $referenced_entity
+   * @param EntityInterface $referenced_entity
    *   The field's target entity.
    *
    * @return array
diff --git a/src/EntityClone/Content/ContentEntityCloneFormBase.php b/src/EntityClone/Content/ContentEntityCloneFormBase.php
index 0aef96b..6123947 100644
--- a/src/EntityClone/Content/ContentEntityCloneFormBase.php
+++ b/src/EntityClone/Content/ContentEntityCloneFormBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_clone\EntityClone\Content;
 
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Entity\EntityHandlerInterface;
@@ -25,39 +28,39 @@ class ContentEntityCloneFormBase implements EntityHandlerInterface, EntityCloneF
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationManager
+   * @var TranslationManager
    */
   protected $translationManager;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
    * The entity clone settings manager service.
    *
-   * @var \Drupal\entity_clone\EntityCloneSettingsManager
+   * @var EntityCloneSettingsManager
    */
   protected $entityCloneSettingsManager;
 
   /**
    * Entities we've found while cloning.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface[]
+   * @var ContentEntityInterface[]
    */
   protected $discoveredEntities = [];
 
   /**
    * Constructs a new ContentEntityCloneFormBase.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationManager $translation_manager
+   * @param TranslationManager $translation_manager
    *   The string translation manager.
-   * @param \Drupal\entity_clone\EntityCloneSettingsManager $entity_clone_settings_manager
+   * @param EntityCloneSettingsManager $entity_clone_settings_manager
    *   The entity clone settings manager.
    */
   public function __construct(
@@ -94,7 +97,7 @@ class ContentEntityCloneFormBase implements EntityHandlerInterface, EntityCloneF
       foreach ($entity->getFieldDefinitions() as $field_id => $field_definition) {
         if ($field_definition instanceof FieldConfigInterface && in_array($field_definition->getType(), ['entity_reference', 'entity_reference_revisions'], TRUE)) {
           $field = $entity->get($field_id);
-          /** @var \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $value */
+          /** @var EntityReferenceItem $value */
           if ($field->count() > 0
             && $this->entityTypeManager->getStorage($field->getSetting('target_type')) instanceof ContentEntityStorageInterface) {
             $form['recursive'] = array_merge($form['recursive'], $this->getRecursiveFormElement($field_definition, $field_id, $field, $discovered_entities));
@@ -118,11 +121,11 @@ class ContentEntityCloneFormBase implements EntityHandlerInterface, EntityCloneF
   /**
    * Get the recursive form element.
    *
-   * @param \Drupal\Core\Field\FieldConfigInterface $field_definition
+   * @param FieldConfigInterface $field_definition
    *   The field definition.
    * @param string $field_id
    *   The field ID.
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field item.
    * @param array $discovered_entities
    *   List of all entities already discovered.
@@ -152,7 +155,7 @@ class ContentEntityCloneFormBase implements EntityHandlerInterface, EntityCloneF
       if (!$referenced_entity = $value->get('entity')->getTarget()) {
         continue;
       }
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $referenced_entity */
+      /** @var ContentEntityInterface $referenced_entity */
       $referenced_entity = $value->get('entity')->getTarget()->getValue();
 
       if (isset($discovered_entities[$referenced_entity->getEntityTypeId()]) && array_key_exists($referenced_entity->id(), $discovered_entities[$referenced_entity->getEntityTypeId()])) {
@@ -206,7 +209,7 @@ class ContentEntityCloneFormBase implements EntityHandlerInterface, EntityCloneF
   /**
    * Fetches clonable children from a field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $referenced_entity
+   * @param ContentEntityInterface $referenced_entity
    *   The field item list.
    * @param array $discovered_entities
    *   List of all entities already discovered.
@@ -215,7 +218,7 @@ class ContentEntityCloneFormBase implements EntityHandlerInterface, EntityCloneF
    *   The list of children.
    */
   protected function getChildren(ContentEntityInterface $referenced_entity, array &$discovered_entities) {
-    /** @var \Drupal\entity_clone\EntityClone\EntityCloneFormInterface $entity_clone_handler */
+    /** @var EntityCloneFormInterface $entity_clone_handler */
     if ($this->entityTypeManager->hasHandler($referenced_entity->getEntityTypeId(), 'entity_clone_form')) {
       // Record that we've found this entity.
       $discovered_entities[$referenced_entity->getEntityTypeId()][$referenced_entity->id()] = $referenced_entity;
@@ -242,10 +245,10 @@ class ContentEntityCloneFormBase implements EntityHandlerInterface, EntityCloneF
    *
    * @param array $form
    *   The clone form.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Description to be shown
    */
   protected function getFormDescription(array $form, EntityInterface $entity) {
diff --git a/src/EntityClone/Content/FileEntityClone.php b/src/EntityClone/Content/FileEntityClone.php
index 4821b0d..652babe 100644
--- a/src/EntityClone/Content/FileEntityClone.php
+++ b/src/EntityClone/Content/FileEntityClone.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_clone\EntityClone\Content;
 
+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\File\FileSystemInterface;
 
@@ -14,8 +15,8 @@ class FileEntityClone extends ContentEntityCloneBase {
    * {@inheritdoc}
    */
   public function cloneEntity(EntityInterface $entity, EntityInterface $cloned_entity, array $properties = [], array &$already_cloned = []) {
-    /** @var \Drupal\file\FileInterface $cloned_entity */
-    $cloned_file = file_copy($cloned_entity, $cloned_entity->getFileUri(), FileSystemInterface::EXISTS_RENAME);
+    /** @var FileInterface $cloned_entity */
+    $cloned_file = \Drupal::service('file.repository')->copy($cloned_entity, $cloned_entity->getFileUri(), FileSystemInterface::EXISTS_RENAME);
     if (isset($properties['take_ownership']) && $properties['take_ownership'] === 1) {
       $cloned_file->setOwnerId(\Drupal::currentUser()->id());
     }
diff --git a/src/EntityClone/Content/TaxonomyTermEntityClone.php b/src/EntityClone/Content/TaxonomyTermEntityClone.php
index 3e4da6a..c4ceef5 100644
--- a/src/EntityClone/Content/TaxonomyTermEntityClone.php
+++ b/src/EntityClone/Content/TaxonomyTermEntityClone.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_clone\EntityClone\Content;
 
+use Drupal\core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 
 /**
@@ -13,8 +14,7 @@ class TaxonomyTermEntityClone extends ContentEntityCloneBase {
    * {@inheritdoc}
    */
   public function cloneEntity(EntityInterface $entity, EntityInterface $cloned_entity, array $properties = [], array &$already_cloned = []) {
-    /** @var \Drupal\core\Entity\ContentEntityInterface $cloned_entity */
-
+    /** @var ContentEntityInterface $cloned_entity */
     // Enforce a parent if the cloned term doesn't have a parent.
     // (First level of a taxonomy tree).
     if (!isset($cloned_entity->parent->target_id)) {
diff --git a/src/EntityClone/Content/UserEntityClone.php b/src/EntityClone/Content/UserEntityClone.php
index 844deca..67aa58f 100644
--- a/src/EntityClone/Content/UserEntityClone.php
+++ b/src/EntityClone/Content/UserEntityClone.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_clone\EntityClone\Content;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\EntityInterface;
 
 /**
@@ -13,7 +14,7 @@ class UserEntityClone extends ContentEntityCloneBase {
    * {@inheritdoc}
    */
   public function cloneEntity(EntityInterface $entity, EntityInterface $cloned_entity, array $properties = [], array &$already_cloned = []) {
-    /** @var \Drupal\user\UserInterface $cloned_entity */
+    /** @var UserInterface $cloned_entity */
     $cloned_entity->set('name', $cloned_entity->getAccountName() . '_cloned');
     return parent::cloneEntity($entity, $cloned_entity, $properties);
   }
diff --git a/src/EntityClone/EntityCloneFormInterface.php b/src/EntityClone/EntityCloneFormInterface.php
index c1656a7..29e506e 100644
--- a/src/EntityClone/EntityCloneFormInterface.php
+++ b/src/EntityClone/EntityCloneFormInterface.php
@@ -13,7 +13,7 @@ interface EntityCloneFormInterface {
   /**
    * Get all specific form element.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param bool $parent
    *   Is the parent form element.
@@ -26,7 +26,7 @@ interface EntityCloneFormInterface {
   /**
    * Get all new values provided by the specific form element.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
diff --git a/src/EntityClone/EntityCloneInterface.php b/src/EntityClone/EntityCloneInterface.php
index ed02023..022c410 100644
--- a/src/EntityClone/EntityCloneInterface.php
+++ b/src/EntityClone/EntityCloneInterface.php
@@ -12,14 +12,14 @@ interface EntityCloneInterface {
   /**
    * Clone an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
-   * @param \Drupal\Core\Entity\EntityInterface $cloned_entity
+   * @param EntityInterface $cloned_entity
    *   The cloned entity.
    * @param array $properties
    *   All new properties to replace old.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The new saved entity.
    */
   public function cloneEntity(EntityInterface $entity, EntityInterface $cloned_entity, array $properties = []);
diff --git a/src/EntityClonePermissions.php b/src/EntityClonePermissions.php
index 2de2227..465cf4f 100644
--- a/src/EntityClonePermissions.php
+++ b/src/EntityClonePermissions.php
@@ -16,30 +16,30 @@ class EntityClonePermissions implements ContainerInjectionInterface {
   /**
    * The entoty type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The string translation manager.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationManager
+   * @var TranslationManager
    */
   protected $translationManager;
 
   /**
    * The Service Provider that verifies if entity has ownership.
    *
-   * @var \Drupal\entity_clone\Services\EntityCloneServiceProvider
+   * @var EntityCloneServiceProvider
    */
   protected $serviceProvider;
 
   /**
    * Constructs a new EntityClonePermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationManager $string_translation
+   * @param TranslationManager $string_translation
    *   The string translation manager.
    * @param \\Drupal\entity_clone\Services\EntityCloneServiceProvider $service_provider
    *   The Service Provider that verifies if entity has ownership.
diff --git a/src/EntityCloneSettingsManager.php b/src/EntityCloneSettingsManager.php
index 6bf3ba6..8504cef 100644
--- a/src/EntityCloneSettingsManager.php
+++ b/src/EntityCloneSettingsManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_clone;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ -15,39 +17,39 @@ class EntityCloneSettingsManager {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The immutable entity clone settings configuration entity.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * The editable entity clone settings configuration entity.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $editableConfig;
 
   /**
    * EntityCloneSettingsManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, ConfigFactoryInterface $config_factory) {
@@ -60,7 +62,7 @@ class EntityCloneSettingsManager {
   /**
    * Get all content entity types.
    *
-   * @return \Drupal\Core\Entity\ContentEntityTypeInterface[]
+   * @return ContentEntityTypeInterface[]
    *   An array containing all content entity types.
    */
   public function getContentEntityTypes() {
diff --git a/src/Event/EntityCloneEvent.php b/src/Event/EntityCloneEvent.php
index 8889928..708393a 100644
--- a/src/Event/EntityCloneEvent.php
+++ b/src/Event/EntityCloneEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\entity_clone\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Represents entity selection as event.
@@ -13,14 +13,14 @@ class EntityCloneEvent extends Event {
   /**
    * Entity being cloned.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
   /**
    * New cloned entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $clonedEntity;
 
@@ -34,9 +34,9 @@ class EntityCloneEvent extends Event {
   /**
    * Constructs an EntityCloneEvent object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The original entity that was cloned.
-   * @param \Drupal\Core\Entity\EntityInterface $cloned_entity
+   * @param EntityInterface $cloned_entity
    *   The clone of the original entity.
    * @param array $properties
    *   The entity's properties.
@@ -50,7 +50,7 @@ class EntityCloneEvent extends Event {
   /**
    * Gets entity being cloned.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The original entity.
    */
   public function getEntity() {
@@ -60,7 +60,7 @@ class EntityCloneEvent extends Event {
   /**
    * Gets new cloned entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The cloned entity.
    */
   public function getClonedEntity() {
diff --git a/src/Form/EntityCloneForm.php b/src/Form/EntityCloneForm.php
index 55ebec9..96e1d78 100644
--- a/src/Form/EntityCloneForm.php
+++ b/src/Form/EntityCloneForm.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\entity_clone\Form;
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\entity_clone\EntityClone\EntityCloneFormInterface;
+use Drupal\entity_clone\EntityClone\EntityCloneInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
@@ -25,87 +30,87 @@ class EntityCloneForm extends FormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity ready to clone.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
   /**
    * The entity type définition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityTypeDefinition;
 
   /**
    * The string translation manager.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationManager
+   * @var TranslationManager
    */
   protected $stringTranslationManager;
 
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The entity clone settings manager service.
    *
-   * @var \Drupal\entity_clone\EntityCloneSettingsManager
+   * @var EntityCloneSettingsManager
    */
   protected $entityCloneSettingsManager;
 
   /**
    * The Service Provider that verifies if entity has ownership.
    *
-   * @var \Drupal\entity_clone\Services\EntityCloneServiceProvider
+   * @var EntityCloneServiceProvider
    */
   protected $serviceProvider;
 
   /**
    * Constructs a new Entity Clone form.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
-   * @param \Drupal\Core\StringTranslation\TranslationManager $string_translation
+   * @param TranslationManager $string_translation
    *   The string translation manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\entity_clone\EntityCloneSettingsManager $entity_clone_settings_manager
+   * @param EntityCloneSettingsManager $entity_clone_settings_manager
    *   The entity clone settings manager.
-   * @param \Drupal\entity_clone\Services\EntityCloneServiceProvider $service_provider
+   * @param EntityCloneServiceProvider $service_provider
    *   The Service Provider that verifies if entity has ownership.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RouteMatchInterface $route_match, TranslationManager $string_translation, EventDispatcherInterface $eventDispatcher, Messenger $messenger, AccountProxyInterface $currentUser, EntityCloneSettingsManager $entity_clone_settings_manager, EntityCloneServiceProvider $service_provider) {
     $this->entityTypeManager = $entity_type_manager;
@@ -151,7 +156,7 @@ class EntityCloneForm extends FormBase {
   public function buildForm(array $form, FormStateInterface $form_state) {
     if ($this->entity && $this->entityTypeDefinition->hasHandlerClass('entity_clone')) {
 
-      /** @var \Drupal\entity_clone\EntityClone\EntityCloneFormInterface $entity_clone_handler */
+      /** @var EntityCloneFormInterface $entity_clone_handler */
       if ($this->entityTypeManager->hasHandler($this->entityTypeDefinition->id(), 'entity_clone_form')) {
         $entity_clone_form_handler = $this->entityTypeManager->getHandler($this->entityTypeDefinition->id(), 'entity_clone_form');
         $form = array_merge($form, $entity_clone_form_handler->formElement($this->entity));
@@ -192,7 +197,7 @@ class EntityCloneForm extends FormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\entity_clone\EntityClone\EntityCloneInterface $entity_clone_handler */
+    /** @var EntityCloneInterface $entity_clone_handler */
     $entity_clone_handler = $this->entityTypeManager->getHandler($this->entityTypeDefinition->id(), 'entity_clone');
     if ($this->entityTypeManager->hasHandler($this->entityTypeDefinition->id(), 'entity_clone_form')) {
       $entity_clone_form_handler = $this->entityTypeManager->getHandler($this->entityTypeDefinition->id(), 'entity_clone_form');
@@ -205,9 +210,9 @@ class EntityCloneForm extends FormBase {
 
     $duplicate = $this->entity->createDuplicate();
 
-    $this->eventDispatcher->dispatch(EntityCloneEvents::PRE_CLONE, new EntityCloneEvent($this->entity, $duplicate, $properties));
+    $this->eventDispatcher->dispatch(new EntityCloneEvent($this->entity, $duplicate, $properties), EntityCloneEvents::PRE_CLONE);
     $cloned_entity = $entity_clone_handler->cloneEntity($this->entity, $duplicate, $properties);
-    $this->eventDispatcher->dispatch(EntityCloneEvents::POST_CLONE, new EntityCloneEvent($this->entity, $duplicate, $properties));
+    $this->eventDispatcher->dispatch(new EntityCloneEvent($this->entity, $duplicate, $properties), EntityCloneEvents::POST_CLONE);
 
     $this->messenger->addMessage($this->stringTranslationManager->translate('The entity <em>@entity (@entity_id)</em> of type <em>@type</em> was cloned.', [
       '@entity' => $this->entity->label(),
@@ -223,7 +228,7 @@ class EntityCloneForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function cancelForm(array &$form, FormStateInterface $form_state) {
@@ -233,9 +238,9 @@ class EntityCloneForm extends FormBase {
   /**
    * Sets a redirect on form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The cloned entity.
    */
   protected function formSetRedirect(FormStateInterface $form_state, EntityInterface $entity) {
@@ -250,7 +255,7 @@ class EntityCloneForm extends FormBase {
   /**
    * Gets the entity of this form.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity.
    */
   public function getEntity() {
diff --git a/src/Form/EntityCloneSettingsForm.php b/src/Form/EntityCloneSettingsForm.php
index 22ad1d8..7166209 100644
--- a/src/Form/EntityCloneSettingsForm.php
+++ b/src/Form/EntityCloneSettingsForm.php
@@ -17,14 +17,14 @@ class EntityCloneSettingsForm extends ConfigFormBase implements ContainerInjecti
   /**
    * The entity clone settings manager.
    *
-   * @var \Drupal\entity_clone\EntityCloneSettingsManager
+   * @var EntityCloneSettingsManager
    */
   protected $entityCloneSettingsManager;
 
   /**
    * {@inheritdoc}
    *
-   * @var \Drupal\entity_clone\EntityCloneSettingsManager $entity_clone_settings_manager
+   * @var EntityCloneSettingsManager $entity_clone_settings_manager
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityCloneSettingsManager $entity_clone_settings_manager) {
     parent::__construct($config_factory);
diff --git a/src/Plugin/Derivative/DynamicLocalTasks.php b/src/Plugin/Derivative/DynamicLocalTasks.php
index 5dd716b..bc530dd 100644
--- a/src/Plugin/Derivative/DynamicLocalTasks.php
+++ b/src/Plugin/Derivative/DynamicLocalTasks.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_clone\Plugin\Derivative;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -16,23 +17,23 @@ class DynamicLocalTasks extends DeriverBase implements ContainerDeriverInterface
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The translation manager.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationManager
+   * @var TranslationManager
    */
   protected $translationManager;
 
   /**
    * Constructs a new DynamicLocalTasks.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationManager $string_translation
+   * @param TranslationManager $string_translation
    *   The translation manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationManager $string_translation) {
@@ -56,7 +57,7 @@ class DynamicLocalTasks extends DeriverBase implements ContainerDeriverInterface
   public function getDerivativeDefinitions($base_plugin_definition) {
     $this->derivatives = [];
 
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     foreach ($this->entityTypeManager->getDefinitions() as $entity_type_id => $entity_type) {
       $has_clone_path = $entity_type->hasLinkTemplate('clone-form');
       $has_canonical_path = $entity_type->hasLinkTemplate('canonical');
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index 5c892ee..db3ce15 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -17,14 +17,14 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
@@ -45,10 +45,10 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * Gets the entity_clone route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getEntityCloneRoute(EntityTypeInterface $entity_type) {
diff --git a/src/Services/EntityCloneServiceProvider.php b/src/Services/EntityCloneServiceProvider.php
index 8f9f04d..6fc6dcd 100644
--- a/src/Services/EntityCloneServiceProvider.php
+++ b/src/Services/EntityCloneServiceProvider.php
@@ -18,7 +18,7 @@ class EntityCloneServiceProvider {
   /**
    * Checks if the given entity implements has owner trait.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity
+   * @param EntityTypeInterface $entity
    *   Entity to be tested.
    *
    * @return bool
