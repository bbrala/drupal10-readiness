modules/contrib/group_forum/group_forum.module
modules/contrib/group_forum/src/Controller/GroupForum.php
modules/contrib/group_forum/src/Plugin/GroupContentEnabler/GroupForum.php
modules/contrib/group_forum/src/Routing/GroupForumRouteProvider.php

2 files with changes
====================

1) modules/contrib/group_forum/src/Controller/GroupForum.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_forum\Controller;

+use Drupal\group\Entity\GroupContentTypeInterface;
 use Drupal\Core\Entity\EntityFormBuilderInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Render\RendererInterface;
@@ @@
   /**
    * The group content plugin manager.
    *
-   * @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface
+   * @var GroupContentEnablerManagerInterface
    */
   protected $pluginManager;

@@ @@
   /**
    * Constructs a new GroupForum.
    *
-   * @param \Drupal\group\Plugin\GroupContentEnablerManagerInterface $plugin_manager
+   * @param GroupContentEnablerManagerInterface $plugin_manager
    *   The group content plugin manager.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The private store factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(GroupContentEnablerManagerInterface $plugin_manager, PrivateTempStoreFactory $temp_store_factory, EntityTypeManagerInterface $entity_type_manager, EntityFormBuilderInterface $entity_form_builder, RendererInterface $renderer) {
@@ @@
     $storage = $this->entityTypeManager->getStorage('group_content_type');
     $properties = ['group_type' => $group->bundle(), 'content_plugin' => $plugin_ids];
     foreach ($storage->loadByProperties($properties) as $bundle => $group_content_type) {
-      /** @var \Drupal\group\Entity\GroupContentTypeInterface $group_content_type */
+      /** @var GroupContentTypeInterface $group_content_type */
       $bundles[$group_content_type->getContentPluginId()] = $bundle;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/group_forum/group_forum.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\group\Entity\GroupTypeInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultForbidden;
 use Drupal\Core\Access\AccessResultNeutral;
@@ @@
   // All other groups have the benefit of sharing the same permission set among
   // all anonymous or authenticated users per group type. We can therefore know
   // the user's permissions for all groups of the same type they aren't part of.
-  /** @var \Drupal\group\Entity\GroupTypeInterface[] $group_types */
+  /** @var GroupTypeInterface[] $group_types */
   $group_types = Drupal::entityTypeManager()->getStorage('group_type')->loadMultiple();
   foreach ($group_types as $group_type) {
     // Get the IDs of all the groups the user is not part of for the group type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 2 files have been changed by Rector                                       

