modules/contrib/yaml_translation_import/src/Command/YamlTranslationImportCommands.php
modules/contrib/yaml_translation_import/src/Exception/LanguageDoesNotExistException.php
modules/contrib/yaml_translation_import/src/Form/ImportForm.php
modules/contrib/yaml_translation_import/src/Form/SettingsForm.php
modules/contrib/yaml_translation_import/src/Import/YamlTranslationImporter.php
modules/contrib/yaml_translation_import/src/Utility/Flatten.php
modules/contrib/yaml_translation_import/src/Writer/ArrayDatabaseWriter.php
modules/contrib/yaml_translation_import/src/YamlImporter.php
modules/contrib/yaml_translation_import/tests/src/Functional/ImportFormTest.php
modules/contrib/yaml_translation_import/tests/src/Functional/SettingsFormTest.php
modules/contrib/yaml_translation_import/tests/src/Kernel/ArrayDatabaseWriterTest.php
modules/contrib/yaml_translation_import/tests/src/Kernel/YamlTranslationImporterTest.php
modules/contrib/yaml_translation_import/tests/src/Traits/TranslationCheckTrait.php
modules/contrib/yaml_translation_import/tests/src/Unit/FlattenTest.php

9 files with changes
====================

1) modules/contrib/yaml_translation_import/tests/src/Kernel/YamlTranslationImporterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\yaml_translation_import\Kernel;

+use Drupal\yaml_translation_import\Import\YamlTranslationImporter;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
     $nl_language = ConfigurableLanguage::load('nl');
     $fr_language = ConfigurableLanguage::load('fr');

-    /** @var \Drupal\yaml_translation_import\Import\YamlTranslationImporter $yaml_translation_importer */
+    /** @var YamlTranslationImporter $yaml_translation_importer */
     $yaml_translation_importer = $this->container->get('yaml_translation_import.import.yaml_translation');
     $yaml_translation_importer->execute([
       $nl_language->id(),
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/yaml_translation_import/tests/src/Kernel/ArrayDatabaseWriterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\yaml_translation_import\Kernel;

+use Drupal\yaml_translation_import\Writer\ArrayDatabaseWriter;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\Tests\yaml_translation_import\Traits\TranslationCheckTrait;
@@ @@
     $nl_language = ConfigurableLanguage::load('nl');
     $fr_language = ConfigurableLanguage::load('fr');

-    /** @var \Drupal\yaml_translation_import\Writer\ArrayDatabaseWriter $arrayDatabaseWriterService */
+    /** @var ArrayDatabaseWriter $arrayDatabaseWriterService */
     $arrayDatabaseWriterService = \Drupal::service('yaml_translation_import.writer.array_database_writer');

     // Test default report values.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/yaml_translation_import/tests/src/Functional/SettingsFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\yaml_translation_import\Functional;

+use Drupal\user\Entity\User;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * User with admin rights.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $adminUser;

@@ @@
   /**
    * A regular user.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $webUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/yaml_translation_import/tests/src/Functional/ImportFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\yaml_translation_import\Functional;

+use Drupal\user\Entity\User;
 use Drupal\Core\Url;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * User with admin rights.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $adminUser;

@@ @@
   /**
    * A regular user.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $webUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/yaml_translation_import/src/YamlImporter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\yaml_translation_import;

+use Drupal\locale\StringStorageException;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\yaml_translation_import\Utility\Flatten;
 use Drupal\yaml_translation_import\Writer\ArrayDatabaseWriter;
@@ @@
   /**
    * The array database writer.
    *
-   * @var \Drupal\yaml_translation_import\Writer\ArrayDatabaseWriter
+   * @var ArrayDatabaseWriter
    */
   protected $arrayDatabaseWriter;

@@ @@
   /**
    * YamlImporter constructor.
    *
-   * @param \Drupal\yaml_translation_import\Writer\ArrayDatabaseWriter $arrayDatabaseWriter
+   * @param ArrayDatabaseWriter $arrayDatabaseWriter
    *   The array database writer.
    */
   public function __construct(ArrayDatabaseWriter $arrayDatabaseWriter) {
@@ @@
   /**
    * Imports the given file for the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language.
    * @param string $resource
    *   The path to the file.
@@ @@
    * @return array
    *   The report array of write operations.
    *
-   * @throws \Drupal\locale\StringStorageException
+   * @throws StringStorageException
    */
   public function import(LanguageInterface $language, string $resource, array $options = []): array {
     $translations = Yaml::parseFile($resource);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/yaml_translation_import/src/Writer/ArrayDatabaseWriter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\yaml_translation_import\Writer;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\locale\StringStorageException;
 use Drupal\Core\Logger\LoggerChannelFactory;
 use Drupal\locale\StringStorageInterface;
 use Drupal\locale\TranslationString;
@@ @@
   /**
    * The locale storage.
    *
-   * @var \Drupal\locale\StringStorageInterface
+   * @var StringStorageInterface
    */
   private $localeStorage;

@@ @@
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $logger;

@@ @@
   /**
    * ArrayDatabaseWriter constructor.
    *
-   * @param \Drupal\locale\StringStorageInterface $localeStorage
+   * @param StringStorageInterface $localeStorage
    *   The locale storage.
-   * @param \Drupal\Core\Logger\LoggerChannelFactory $loggerChannelFactory
+   * @param LoggerChannelFactory $loggerChannelFactory
    *   The logger channel factory.
    */
   public function __construct(StringStorageInterface $localeStorage, LoggerChannelFactory $loggerChannelFactory) {
@@ @@
    * @param string $context
    *   The context.
    *
-   * @throws \Drupal\locale\StringStorageException
+   * @throws StringStorageException
    */
   public function writeItems(array $translations, string $context = ''): void {
     foreach ($translations as $source => $translation) {
@@ @@
    * @param string $context
    *   The context.
    *
-   * @throws \Drupal\locale\StringStorageException
+   * @throws StringStorageException
    */
   public function writeItem(string $source, string $translation, string $context = ''): void {
     $this->importString($source, $translation, $context);
@@ @@
    * @return int|null
    *   The string translation ID.
    *
-   * @throws \Drupal\locale\StringStorageException
+   * @throws StringStorageException
    *
    * @see \Drupal\locale\PoDatabaseWriter::importString()
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/yaml_translation_import/src/Import/YamlTranslationImporter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\yaml_translation_import\Import;

+use Drupal\locale\StringStorageException;
+use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The drush messenger.
    *
-   * @var \Drush\Style\DrushStyle
+   * @var DrushStyle
    */
   protected $drushMessenger;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The YAML importer.
    *
-   * @var \Drupal\yaml_translation_import\YamlImporter
+   * @var YamlImporter
    */
   protected $yamlImporter;

@@ @@
   /**
    * Import constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
    * @param string $root
    *   The application root.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\yaml_translation_import\YamlImporter $yamlImporter
+   * @param YamlImporter $yamlImporter
    *   The YAML Importer.
    */
   public function __construct(ConfigFactoryInterface $configFactory, LanguageManagerInterface $languageManager, string $root, MessengerInterface $messenger, YamlImporter $yamlImporter) {
@@ @@
    * @param array $options
    *   The options used by the yaml writer.
    *
-   * @throws \Drupal\locale\StringStorageException
+   * @throws StringStorageException
    */
   public function execute(array $langcodes = NULL, array $options = []): void {
     $languages = $this->getImportLanguages($langcodes);
@@ @@
    * @param array|null $langcodes
    *   The language ID.
    *
-   * @return \Drupal\Core\Language\LanguageInterface[]
+   * @return LanguageInterface[]
    *   An array of languages.
    *
    * @throws LanguageDoesNotExistException.
@@ @@
   /**
    * Set the drush messenger.
    *
-   * @param \Drush\Style\DrushStyle $drushMessenger
+   * @param DrushStyle $drushMessenger
    *   The drush messenger that prints messages to the cli.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/yaml_translation_import/src/Form/ImportForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The yaml translation importer.
    *
-   * @var \Drupal\yaml_translation_import\Import\YamlTranslationImporter
+   * @var YamlTranslationImporter
    */
   protected $YamlTranslationImporter;

@@ @@
   /**
    * ImportForm constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\yaml_translation_import\Import\YamlTranslationImporter $yaml_translation_importer
+   * @param YamlTranslationImporter $yaml_translation_importer
    *   The yaml translation importer.
    */
   public function __construct(LanguageManagerInterface $language_manager, YamlTranslationImporter $yaml_translation_importer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/yaml_translation_import/src/Command/YamlTranslationImportCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\yaml_translation_import\Command;

+use Drupal\locale\StringStorageException;
 use Drupal\yaml_translation_import\Import\YamlTranslationImporter;
 use Drush\Commands\DrushCommands;

@@ @@
   /**
    * The yaml translation importer.
    *
-   * @var \Drupal\yaml_translation_import\Import\YamlTranslationImporter
+   * @var YamlTranslationImporter
    */
   protected $YamlTranslationImporter;

@@ @@
   /**
    * Import constructor.
    *
-   * @param \Drupal\yaml_translation_import\Import\YamlTranslationImporter $yaml_translation_importer
+   * @param YamlTranslationImporter $yaml_translation_importer
    *   The yaml translation importer.
    */
   public function __construct(YamlTranslationImporter $yaml_translation_importer) {
@@ @@
    * @command yaml:translation-import
    * @aliases yti,yaml-translation-import
    *
-   * @throws \Drupal\locale\StringStorageException
+   * @throws StringStorageException
    */
   public function yamlTranslationImport(string $language = NULL, array $options = ['overwrite-customized' => NULL, 'overwrite-not-customized' => NULL]): void {
     $import_options = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 9 files have been changed by Rector                                       

