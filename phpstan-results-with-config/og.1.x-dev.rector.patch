diff --git a/og.api.php b/og.api.php
index 203da84a..7c2e7d63 100644
--- a/og.api.php
+++ b/og.api.php
@@ -15,13 +15,12 @@ use Drupal\og\OgAccess;
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Allows modules to alter group level permissions.
  *
  * @param array $permissions
  *   The list of group level permissions, passed by reference.
- * @param \Drupal\Core\Cache\CacheableMetadata $cacheable_metadata
+ * @param CacheableMetadata $cacheable_metadata
  *   The cache metadata.
  * @param array $context
  *   An associative array containing contextual information, with keys:
diff --git a/og.install b/og.install
index 0622ac0d..1a09548e 100644
--- a/og.install
+++ b/og.install
@@ -6,6 +6,7 @@
  */
 
 declare(strict_types = 1);
+use Drupal\og\Entity\OgMembership;
 
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ -47,7 +48,7 @@ function og_update_8001(&$sandbox) {
     ->sort('id')
     ->execute();
 
-  /** @var \Drupal\og\Entity\OgMembership $membership */
+  /** @var OgMembership $membership */
   foreach ($storage->loadMultiple($membership_ids) as $membership) {
     $group = $membership->getGroup();
     if (!empty($group)) {
diff --git a/og.module b/og.module
index 099daa8c..22b6e140 100755
--- a/og.module
+++ b/og.module
@@ -6,6 +6,13 @@
  */
 
 declare(strict_types = 1);
+use Drupal\og\OgDeleteOrphansInterface;
+use Drupal\og\MembershipManagerInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManager;
+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
+use Drupal\system\ActionConfigEntityInterface;
 
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Cache\Cache;
@@ -81,7 +88,7 @@ function og_entity_predelete(EntityInterface $entity) {
     $config = \Drupal::config('og.settings');
     if ($config->get('delete_orphans')) {
       $plugin_id = $config->get('delete_orphans_plugin_id');
-      /** @var \Drupal\og\OgDeleteOrphansInterface $plugin */
+      /** @var OgDeleteOrphansInterface $plugin */
       $plugin = \Drupal::service('plugin.manager.og.delete_orphans')->createInstance($plugin_id, []);
       $plugin->register($entity);
     }
@@ -92,7 +99,7 @@ function og_entity_predelete(EntityInterface $entity) {
   }
   // If a user is being deleted, also delete its memberships.
   if ($entity instanceof UserInterface) {
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
     foreach ($membership_manager->getMemberships($entity->id(), []) as $membership) {
       $membership->delete();
@@ -156,7 +163,7 @@ function og_entity_access(EntityInterface $entity, $operation, AccountInterface
     return AccessResult::allowed();
   }
 
-  /** @var \Drupal\Core\Access\AccessResult $access */
+  /** @var AccessResult $access */
   $access = \Drupal::service('og.access')->userAccessEntityOperation($operation, $entity, $account);
 
   if ($access->isAllowed()) {
@@ -223,7 +230,7 @@ function og_entity_create_access(AccountInterface $account, array $context, $bun
 
   $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type_id, $bundle);
   foreach ($field_definitions as $field_definition) {
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+    /** @var FieldDefinitionInterface $field_definition */
     if (!\Drupal::service('og.group_audience_helper')->isGroupAudienceField($field_definition)) {
       continue;
     }
@@ -233,7 +240,7 @@ function og_entity_create_access(AccountInterface $account, array $context, $bun
       'handler' => $field_definition->getSetting('handler'),
       'field_mode' => 'admin',
     ];
-    /** @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManager $handler */
+    /** @var SelectionPluginManager $handler */
     $handler = \Drupal::service('plugin.manager.entity_reference_selection');
 
     if ($handler->getInstance($options)) {
@@ -320,7 +327,7 @@ function og_field_widget_info_alter(array &$info) {
  * be rebuilt via RouteBuilder::setRebuildNeeded.
  */
 function og_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+  /** @var EntityTypeInterface $entity_type */
   foreach ($entity_types as $entity_type_id => $entity_type) {
     $entity_type->setLinkTemplate('og-admin-routes', "/group/$entity_type_id/{{$entity_type_id}}/admin");
   }
@@ -345,7 +352,7 @@ function og_theme($existing, $type, $theme, $path) {
 /**
  * Invalidates group content cache tags for the groups this entity belongs to.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The group content entity that is being created, changed or deleted and is
  *   the direct cause for the need to invalidate cached group content.
  */
@@ -356,7 +363,7 @@ function og_invalidate_group_content_cache_tags(EntityInterface $entity) {
   // 'og-group-content:{group entity type}:{group entity id}'.
   $is_group_content = Og::isGroupContent($entity->getEntityTypeId(), $entity->bundle());
   if ($is_group_content) {
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
     $tags = [];
 
@@ -364,15 +371,15 @@ function og_invalidate_group_content_cache_tags(EntityInterface $entity) {
     // update, check if any of the OG audience fields have been changed. This
     // means the group(s) of the entity changed and we should also invalidate
     // the tags of the old group(s).
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+    /** @var FieldableEntityInterface $entity */
     $original = !empty($entity->original) ? $entity->original : NULL;
     if ($original) {
-      /** @var \Drupal\og\OgGroupAudienceHelperInterface $group_audience_helper */
+      /** @var OgGroupAudienceHelperInterface $group_audience_helper */
       $group_audience_helper = \Drupal::service('og.group_audience_helper');
-      /** @var \Drupal\Core\Entity\FieldableEntityInterface $original */
+      /** @var FieldableEntityInterface $original */
       foreach ($group_audience_helper->getAllGroupAudienceFields($entity->getEntityTypeId(), $entity->bundle()) as $field) {
         $field_name = $field->getName();
-        /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $original_field_item_list */
+        /** @var EntityReferenceFieldItemListInterface $original_field_item_list */
         $original_field_item_list = $original->get($field_name);
         if (!$entity->get($field_name)->equals($original_field_item_list)) {
           foreach ($original_field_item_list->referencedEntities() as $old_group) {
@@ -383,7 +390,7 @@ function og_invalidate_group_content_cache_tags(EntityInterface $entity) {
     }
 
     foreach ($membership_manager->getGroups($entity) as $groups) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $group */
+      /** @var ContentEntityInterface $group */
       foreach ($groups as $group) {
         $tags = Cache::mergeTags($tags, $group->getCacheTagsToInvalidate());
       }
@@ -441,7 +448,7 @@ function og_og_role_insert(OgRoleInterface $role) {
  */
 function og_og_role_delete(OgRoleInterface $role) {
   $role_name = $role->getName();
-  /** @var \Drupal\system\ActionConfigEntityInterface[] $actions */
+  /** @var ActionConfigEntityInterface[] $actions */
   $actions = Action::loadMultiple([
     'og_membership_add_single_role_action.' . $role_name,
     'og_membership_remove_single_role_action.' . $role_name,
diff --git a/og.post_update.php b/og.post_update.php
index d3c7e6d9..105a499c 100644
--- a/og.post_update.php
+++ b/og.post_update.php
@@ -6,6 +6,7 @@
  */
 
 declare(strict_types = 1);
+use Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface;
 
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ -22,7 +23,7 @@ function og_post_update_og_membership_state_field(&$sandbox) {
   // mismatch which would otherwise be reported in the drupal Status Report
   // page.
   // @see https://www.drupal.org/docs/drupal-apis/update-api/updating-entities-and-fields-in-drupal-8#s-updating-a-base-field-type
-  /** @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $definition_manager */
+  /** @var EntityDefinitionUpdateManagerInterface $definition_manager */
   $definition_manager = \Drupal::service('entity.definition_update_manager');
   if (!$definition_manager->needsUpdates()) {
     // No updates necessary.
diff --git a/og.views.inc b/og.views.inc
index e21457ad..49d3d8b1 100644
--- a/og.views.inc
+++ b/og.views.inc
@@ -6,6 +6,7 @@
  */
 
 declare(strict_types = 1);
+use Drupal\Core\Entity\Sql\DefaultTableMapping;
 
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\field\FieldStorageConfigInterface;
@@ -39,7 +40,7 @@ function og_field_views_data(FieldStorageConfigInterface $field_storage) {
     case 'og_standard_reference':
       $entity_type_manager = \Drupal::entityTypeManager();
       $entity_type_id = $field_storage->getTargetEntityTypeId();
-      /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+      /** @var DefaultTableMapping $table_mapping */
       $table_mapping = $entity_type_manager->getStorage($entity_type_id)->getTableMapping();
       foreach ($data as $table_name => $table_data) {
         // Add a relationship to the target entity type.
diff --git a/og_ui/og_ui.module b/og_ui/og_ui.module
index 77da7505..f1e31d44 100644
--- a/og_ui/og_ui.module
+++ b/og_ui/og_ui.module
@@ -51,7 +51,7 @@ function og_ui_entity_update(EntityInterface $entity) {
 /**
  * Helper to save group information when a bundle entity is saved.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity object.
  */
 function og_ui_entity_type_save(EntityInterface $entity) {
diff --git a/og_ui/src/BundleFormAlter.php b/og_ui/src/BundleFormAlter.php
index 0c08163a..66f35d5b 100644
--- a/og_ui/src/BundleFormAlter.php
+++ b/og_ui/src/BundleFormAlter.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og_ui;
 
+use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -20,7 +21,7 @@ class BundleFormAlter {
   /**
    * Entity type definition.
    *
-   * @var \Drupal\Core\Entity\ContentEntityTypeInterface
+   * @var ContentEntityTypeInterface
    */
   protected $definition;
 
@@ -48,14 +49,14 @@ class BundleFormAlter {
   /**
    * The form entity which has been used for populating form element defaults.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
   /**
    * Construct a BundleFormAlter object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    */
   public function __construct(EntityInterface $entity) {
@@ -67,7 +68,7 @@ class BundleFormAlter {
    *
    * @param array $form
    *   The form variable.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function formAlter(array &$form, FormStateInterface $form_state) {
@@ -88,7 +89,7 @@ class BundleFormAlter {
    *
    * @param array $form
    *   The form variable.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   protected function prepare(array &$form, FormStateInterface $form_state) {
diff --git a/og_ui/src/Controller/OgUiController.php b/og_ui/src/Controller/OgUiController.php
index a83197e7..27bae404 100644
--- a/og_ui/src/Controller/OgUiController.php
+++ b/og_ui/src/Controller/OgUiController.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og_ui\Controller;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -19,32 +20,32 @@ class OgUiController extends ControllerBase {
   /**
    * The OG group manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * Constructs a OgUiController object.
    *
-   * @param \Drupal\og\GroupTypeManagerInterface $group_manager
+   * @param GroupTypeManagerInterface $group_manager
    *   The OG group manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
    */
   public function __construct(GroupTypeManagerInterface $group_manager, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
@@ -113,7 +114,7 @@ class OgUiController extends ControllerBase {
    * @param string $type
    *   The type of overview, either 'roles' or 'permissions'.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Return the translated title.
    */
   public function rolesPermissionsOverviewTitleCallback($type) {
diff --git a/og_ui/src/Form/AdminSettingsForm.php b/og_ui/src/Form/AdminSettingsForm.php
index 5b0c5b04..78409da6 100644
--- a/og_ui/src/Form/AdminSettingsForm.php
+++ b/og_ui/src/Form/AdminSettingsForm.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og_ui\Form;
 
+use Drupal\og\OgDeleteOrphansInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ -18,16 +19,16 @@ class AdminSettingsForm extends ConfigFormBase {
   /**
    * The manager for OgDeleteOrphans plugins.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $ogDeleteOrphansPluginManager;
 
   /**
    * Constructs an AdminSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $delete_orphans_plugin_manager
+   * @param PluginManagerInterface $delete_orphans_plugin_manager
    *   The manager for OgDeleteOrphans plugins.
    */
   public function __construct(ConfigFactoryInterface $config_factory, PluginManagerInterface $delete_orphans_plugin_manager) {
@@ -110,7 +111,7 @@ class AdminSettingsForm extends ConfigFormBase {
     ];
 
     foreach ($definitions as $id => $definition) {
-      /** @var \Drupal\og\OgDeleteOrphansInterface $plugin */
+      /** @var OgDeleteOrphansInterface $plugin */
       $plugin = $this->ogDeleteOrphansPluginManager->createInstance($id, []);
 
       // Add the description for each delete method.
diff --git a/og_ui/tests/src/Functional/BundleFormAlterTest.php b/og_ui/tests/src/Functional/BundleFormAlterTest.php
index 6e2a38b9..9e174085 100644
--- a/og_ui/tests/src/Functional/BundleFormAlterTest.php
+++ b/og_ui/tests/src/Functional/BundleFormAlterTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og_ui\Functional;
 
+use Drupal\user\Entity\User;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Form\FormState;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Tests\BrowserTestBase;
@@ -31,14 +34,14 @@ class BundleFormAlterTest extends BrowserTestBase {
   /**
    * An administrator user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -145,7 +148,7 @@ class BundleFormAlterTest extends BrowserTestBase {
    *   The message to display with the assertion.
    */
   protected function assertTargetBundles($expected, $message) {
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
+    /** @var EntityFieldManagerInterface $entity_field_manager */
     $entity_field_manager = $this->container->get('entity_field.manager');
     $entity_field_manager->clearCachedFieldDefinitions();
     $field_definitions = $entity_field_manager->getFieldDefinitions('node', 'class');
@@ -162,7 +165,7 @@ class BundleFormAlterTest extends BrowserTestBase {
    *   The message to display with the assertion.
    */
   protected function assertTargetType($expected, $message) {
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
+    /** @var EntityFieldManagerInterface $entity_field_manager */
     $entity_field_manager = $this->container->get('entity_field.manager');
     $entity_field_manager->clearCachedFieldDefinitions();
     $field_definitions = $entity_field_manager->getFieldStorageDefinitions('node');
diff --git a/src/Access/GroupCheck.php b/src/Access/GroupCheck.php
index d9e68cff..dd360c10 100644
--- a/src/Access/GroupCheck.php
+++ b/src/Access/GroupCheck.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Access;
 
+use Drupal\og\OgAccess;
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -24,23 +27,23 @@ class GroupCheck implements AccessInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccess
+   * @var OgAccess
    */
   protected $ogAccess;
 
   /**
    * Constructs a GroupCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, OgAccessInterface $og_access) {
@@ -56,11 +59,11 @@ class GroupCheck implements AccessInterface {
    * using the Route::setOption method.
    * see \Drupal\og\Routing\RouteSubscriber::alterRoutes as an example.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The currently logged in user.
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The rout match object.
    * @param string $entity_type_id
    *   (optional) The entity type ID.
@@ -68,7 +71,7 @@ class GroupCheck implements AccessInterface {
    *   The entity ID. If the ID is not sent, the access method will try to
    *   extract it from the route matcher.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $user, Route $route, RouteMatchInterface $route_match, $entity_type_id = NULL, $entity_id = NULL) {
@@ -80,7 +83,7 @@ class GroupCheck implements AccessInterface {
         throw new \BadMethodCallException('Group definition is missing from the router. Did you define $route->setOption(\'_og_entity_type_id\', $entity_type_id) in your route declaration?');
       }
 
-      /** @var \Drupal\Core\Entity\EntityInterface $group */
+      /** @var EntityInterface $group */
       if (!$group = $route_match->getParameter($parameter_name)) {
         return AccessResult::forbidden();
       }
diff --git a/src/Access/OgMembershipAddAccessCheck.php b/src/Access/OgMembershipAddAccessCheck.php
index b9b5c2d8..f8864185 100644
--- a/src/Access/OgMembershipAddAccessCheck.php
+++ b/src/Access/OgMembershipAddAccessCheck.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -22,14 +23,14 @@ class OgMembershipAddAccessCheck implements AccessInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a EntityCreateAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -39,16 +40,16 @@ class OgMembershipAddAccessCheck implements AccessInterface {
   /**
    * Checks access to create the entity type and bundle for the given route.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
-   * @param \Drupal\og\OgMembershipTypeInterface $og_membership_type
+   * @param OgMembershipTypeInterface $og_membership_type
    *   The membership type entity.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(RouteMatchInterface $route_match, AccountInterface $account, EntityInterface $group = NULL, OgMembershipTypeInterface $og_membership_type = NULL) {
diff --git a/src/Annotation/OgDeleteOrphans.php b/src/Annotation/OgDeleteOrphans.php
index cd514f7a..e1e153b6 100644
--- a/src/Annotation/OgDeleteOrphans.php
+++ b/src/Annotation/OgDeleteOrphans.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class OgDeleteOrphans extends Plugin {
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -32,7 +33,7 @@ class OgDeleteOrphans extends Plugin {
   /**
    * A short description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/OgGroupResolver.php b/src/Annotation/OgGroupResolver.php
index f7ff10fd..6d2cec60 100644
--- a/src/Annotation/OgGroupResolver.php
+++ b/src/Annotation/OgGroupResolver.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -26,7 +27,7 @@ class OgGroupResolver extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Cache/Context/OgGroupContextCacheContext.php b/src/Cache/Context/OgGroupContextCacheContext.php
index 579fd6d5..5477e0d1 100644
--- a/src/Cache/Context/OgGroupContextCacheContext.php
+++ b/src/Cache/Context/OgGroupContextCacheContext.php
@@ -28,14 +28,14 @@ class OgGroupContextCacheContext implements CacheContextInterface {
   /**
    * The OG context provider.
    *
-   * @var \Drupal\og\OgContextInterface
+   * @var OgContextInterface
    */
   protected $ogContext;
 
   /**
    * Constructs a new UserCacheContextBase class.
    *
-   * @param \Drupal\og\OgContextInterface $og_context
+   * @param OgContextInterface $og_context
    *   The OG context provider.
    */
   public function __construct(OgContextInterface $og_context) {
diff --git a/src/Cache/Context/OgMembershipStateCacheContext.php b/src/Cache/Context/OgMembershipStateCacheContext.php
index dd2dc14a..8de1c39e 100644
--- a/src/Cache/Context/OgMembershipStateCacheContext.php
+++ b/src/Cache/Context/OgMembershipStateCacheContext.php
@@ -27,32 +27,32 @@ class OgMembershipStateCacheContext implements CacheContextInterface {
   /**
    * The membership manager service.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;
 
   /**
    * The OG context provider.
    *
-   * @var \Drupal\og\OgContextInterface
+   * @var OgContextInterface
    */
   protected $ogContext;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;
 
   /**
    * Constructs a new UserCacheContextBase class.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The current user.
-   * @param \Drupal\og\OgContextInterface $og_context
+   * @param OgContextInterface $og_context
    *   The OG context provider.
-   * @param \Drupal\og\MembershipManagerInterface $membership_manager
+   * @param MembershipManagerInterface $membership_manager
    *   The membership manager service.
    */
   public function __construct(AccountInterface $user, OgContextInterface $og_context, MembershipManagerInterface $membership_manager) {
@@ -79,7 +79,7 @@ class OgMembershipStateCacheContext implements CacheContextInterface {
       return self::NO_CONTEXT;
     }
 
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = $this->membershipManager->getMembership($group, $this->user->id(), OgMembershipInterface::ALL_STATES);
     return $membership ? $membership->getState() : self::NO_CONTEXT;
   }
diff --git a/src/Cache/Context/OgRoleCacheContext.php b/src/Cache/Context/OgRoleCacheContext.php
index 151f827d..9121f023 100644
--- a/src/Cache/Context/OgRoleCacheContext.php
+++ b/src/Cache/Context/OgRoleCacheContext.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Cache\Context;
 
+use Drupal\Core\Entity\Sql\DefaultTableMapping;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Cache\Context\CacheContextInterface;
 use Drupal\Core\Cache\Context\UserCacheContextBase;
@@ -44,28 +45,28 @@ class OgRoleCacheContext extends UserCacheContextBase implements CacheContextInt
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The membership manager service.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;
 
   /**
    * The active database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The private key service.
    *
-   * @var \Drupal\Core\PrivateKey
+   * @var PrivateKey
    */
   protected $privateKey;
 
@@ -86,15 +87,15 @@ class OgRoleCacheContext extends UserCacheContextBase implements CacheContextInt
   /**
    * Constructs a new UserCacheContextBase class.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\og\MembershipManagerInterface $membershipManager
+   * @param MembershipManagerInterface $membershipManager
    *   The membership manager service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The active database connection.
-   * @param \Drupal\Core\PrivateKey $privateKey
+   * @param PrivateKey $privateKey
    *   The private key service.
    */
   public function __construct(AccountInterface $user, EntityTypeManagerInterface $entityTypeManager, MembershipManagerInterface $membershipManager, Connection $database, PrivateKey $privateKey) {
@@ -173,7 +174,7 @@ class OgRoleCacheContext extends UserCacheContextBase implements CacheContextInt
       throw new \LogicException('Can only retrieve memberships directly from SQL databases.');
     }
 
-    /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+    /** @var DefaultTableMapping $table_mapping */
     $table_mapping = $storage->getTableMapping();
     $base_table = $table_mapping->getBaseTable();
     $role_table = $table_mapping->getFieldTableName('roles');
diff --git a/src/ContextProvider/OgContext.php b/src/ContextProvider/OgContext.php
index 4053560a..2ea81eea 100644
--- a/src/ContextProvider/OgContext.php
+++ b/src/ContextProvider/OgContext.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og\ContextProvider;
 
+use Drupal\og\OgGroupResolverInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -45,23 +46,23 @@ class OgContext implements OgContextInterface, ContextProviderInterface {
   /**
    * The OgGroupResolver plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $pluginManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a new OgContext.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $plugin_manager
+   * @param PluginManagerInterface $plugin_manager
    *   The OgGroupResolver plugin manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(PluginManagerInterface $plugin_manager, ConfigFactoryInterface $config_factory) {
@@ -92,7 +93,7 @@ class OgContext implements OgContextInterface, ContextProviderInterface {
   /**
    * Returns the context object containing the relevant group.
    *
-   * @return \Drupal\Core\Plugin\Context\Context
+   * @return Context
    *   A context object containing the group which is relevant in the current
    *   context as a value. If there is no relevant group in the current context
    *   then the value will be empty.
@@ -134,7 +135,7 @@ class OgContext implements OgContextInterface, ContextProviderInterface {
     $group_resolvers = $this->configFactory->get('og.settings')->get('group_resolvers');
     $priority = 0;
     foreach ($group_resolvers as $plugin_id) {
-      /** @var \Drupal\og\OgGroupResolverInterface $plugin */
+      /** @var OgGroupResolverInterface $plugin */
       if ($plugin = $this->pluginManager->createInstance($plugin_id)) {
         // Set the default vote weight according to the plugin's priority.
         $collection->setVoteWeight($priority);
diff --git a/src/Controller/OgAdminMembersController.php b/src/Controller/OgAdminMembersController.php
index 4b2dca44..a6d5078a 100644
--- a/src/Controller/OgAdminMembersController.php
+++ b/src/Controller/OgAdminMembersController.php
@@ -23,14 +23,14 @@ class OgAdminMembersController extends ControllerBase {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new EntityController.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -49,7 +49,7 @@ class OgAdminMembersController extends ControllerBase {
   /**
    * Display list of members that belong to the group.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    *
    * @return array
@@ -120,16 +120,16 @@ class OgAdminMembersController extends ControllerBase {
   /**
    * Provides the add member submission form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
-   * @param \Drupal\og\OgMembershipTypeInterface $og_membership_type
+   * @param OgMembershipTypeInterface $og_membership_type
    *   The membership type entity.
    *
    * @return array
    *   The member add form.
    */
   public function addForm(EntityInterface $group, OgMembershipTypeInterface $og_membership_type) {
-    /** @var \Drupal\og\Entity\OgMembership $og_membership */
+    /** @var OgMembership $og_membership */
     $og_membership = OgMembership::create([
       'type' => $og_membership_type->id(),
       'entity_type' => $group->getEntityType()->id(),
diff --git a/src/Controller/OgAdminRoutesController.php b/src/Controller/OgAdminRoutesController.php
index 775dc0aa..12595f1f 100644
--- a/src/Controller/OgAdminRoutesController.php
+++ b/src/Controller/OgAdminRoutesController.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Controller;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Core\Access\AccessManagerInterface;
 use Drupal\Core\Controller\ControllerBase;
@@ -21,23 +22,23 @@ class OgAdminRoutesController extends ControllerBase {
   /**
    * The event dispatcher service.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @var ContainerAwareEventDispatcher
    */
   protected $eventDispatcher;
 
   /**
    * The access manager service.
    *
-   * @var \Drupal\Core\Access\AccessManagerInterface
+   * @var AccessManagerInterface
    */
   protected $accessManager;
 
   /**
    * Constructs an OgAdminController object.
    *
-   * @param \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher
+   * @param ContainerAwareEventDispatcher $event_dispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\Access\AccessManagerInterface $access_manager
+   * @param AccessManagerInterface $access_manager
    *   The access manager service.
    */
   public function __construct(ContainerAwareEventDispatcher $event_dispatcher, AccessManagerInterface $access_manager) {
@@ -58,7 +59,7 @@ class OgAdminRoutesController extends ControllerBase {
   /**
    * Show all the available admin routes.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    *
    * @return array
@@ -67,7 +68,7 @@ class OgAdminRoutesController extends ControllerBase {
   public function overview(RouteMatchInterface $route_match) {
     $parameter_name = $route_match->getRouteObject()->getOption('_og_entity_type_id');
 
-    /** @var \Drupal\Core\Entity\EntityInterface $group */
+    /** @var EntityInterface $group */
     $group = $route_match->getParameter($parameter_name);
 
     $entity_type_id = $group->getEntityTypeId();
@@ -76,7 +77,7 @@ class OgAdminRoutesController extends ControllerBase {
     $content = [];
 
     $event = new OgAdminRoutesEvent();
-    $event = $this->eventDispatcher->dispatch(OgAdminRoutesEventInterface::EVENT_NAME, $event);
+    $event = $this->eventDispatcher->dispatch($event, OgAdminRoutesEventInterface::EVENT_NAME);
 
     foreach ($event->getRoutes($entity_type_id) as $name => $info) {
       $route_name = "entity.$entity_type_id.og_admin_routes.$name";
diff --git a/src/Controller/OgAutocompleteController.php b/src/Controller/OgAutocompleteController.php
index db1ac87b..4beb29d2 100644
--- a/src/Controller/OgAutocompleteController.php
+++ b/src/Controller/OgAutocompleteController.php
@@ -25,32 +25,32 @@ class OgAutocompleteController extends ControllerBase {
   /**
    * The autocomplete matcher for entity references.
    *
-   * @var \Drupal\Core\Entity\EntityAutocompleteMatcher
+   * @var EntityAutocompleteMatcher
    */
   protected $matcher;
 
   /**
    * The private key service.
    *
-   * @var \Drupal\Core\PrivateKey
+   * @var PrivateKey
    */
   protected $privateKey;
 
   /**
    * The key value store.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreInterface
+   * @var KeyValueStoreInterface
    */
   protected $keyValue;
 
   /**
    * Constructs a EntityAutocompleteController object.
    *
-   * @param \Drupal\Core\Entity\EntityAutocompleteMatcher $matcher
+   * @param EntityAutocompleteMatcher $matcher
    *   The autocomplete matcher for entity references.
-   * @param \Drupal\Core\PrivateKey $privateKey
+   * @param PrivateKey $privateKey
    *   The private key service.
-   * @param \Drupal\Core\KeyValueStore\KeyValueStoreInterface $key_value
+   * @param KeyValueStoreInterface $key_value
    *   The key value factory.
    */
   public function __construct(EntityAutocompleteMatcher $matcher, PrivateKey $privateKey, KeyValueStoreInterface $key_value) {
@@ -73,9 +73,9 @@ class OgAutocompleteController extends ControllerBase {
   /**
    * Autocomplete the label of an entity.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object that contains the typed tags.
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group context for this autocomplete.
    * @param string $target_type
    *   The ID of the target entity type.
@@ -85,10 +85,10 @@ class OgAutocompleteController extends ControllerBase {
    *   The hashed key of the key/value entry that holds the selection handler
    *   settings.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The matched entity labels as a JSON response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown if the selection settings key is not found in the key/value store
    *   or if it does not match the stored data.
    */
diff --git a/src/Controller/SubscriptionController.php b/src/Controller/SubscriptionController.php
index b5843e5c..28528b6b 100644
--- a/src/Controller/SubscriptionController.php
+++ b/src/Controller/SubscriptionController.php
@@ -27,23 +27,23 @@ class SubscriptionController extends ControllerBase {
   /**
    * OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a SubscriptionController object.
    *
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(OgAccessInterface $og_access, MessengerInterface $messenger) {
@@ -66,9 +66,9 @@ class SubscriptionController extends ControllerBase {
    *
    * @param string $entity_type_id
    *   The entity type of the group entity.
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The entity ID of the group entity.
-   * @param \Drupal\og\OgMembershipTypeInterface $og_membership_type
+   * @param OgMembershipTypeInterface $og_membership_type
    *   The membership type to be used for creating the membership.
    *
    * @return mixed
@@ -154,7 +154,7 @@ class SubscriptionController extends ControllerBase {
   /**
    * Unsubscribe a user from group.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group entity.
    *
    * @return mixed
diff --git a/src/Entity/OgMembership.php b/src/Entity/OgMembership.php
index 1190a4a2..1ab71f87 100644
--- a/src/Entity/OgMembership.php
+++ b/src/Entity/OgMembership.php
@@ -528,7 +528,7 @@ class OgMembership extends ContentEntityBase implements OgMembershipInterface {
 
     // Check if the roles are valid.
     foreach ($this->getRoles() as $role) {
-      /** @var \Drupal\og\Entity\OgRole $role */
+      /** @var OgRole $role */
       // Make sure we don't save a membership for a non-member.
       if ($role->getName() == OgRoleInterface::ANONYMOUS) {
         throw new \LogicException('Cannot save an OgMembership with reference to a non-member role.');
diff --git a/src/Entity/OgRole.php b/src/Entity/OgRole.php
index 89361ad4..5475c574 100644
--- a/src/Entity/OgRole.php
+++ b/src/Entity/OgRole.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Entity;
 
+use Drupal\og\GroupTypeManagerInterface;
+use Drupal\og\OgAccessInterface;
 use Drupal\Core\Config\ConfigValueException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\og\Exception\OgRoleException;
@@ -296,7 +298,7 @@ class OgRole extends Role implements OgRoleInterface {
   /**
    * Gets the group manager.
    *
-   * @return \Drupal\og\GroupTypeManagerInterface
+   * @return GroupTypeManagerInterface
    *   The group manager.
    */
   protected function groupTypeManager() {
@@ -312,7 +314,7 @@ class OgRole extends Role implements OgRoleInterface {
   /**
    * Gets the OG access service.
    *
-   * @return \Drupal\og\OgAccessInterface
+   * @return OgAccessInterface
    *   The OG access service.
    */
   protected function ogAccess() {
diff --git a/src/Event/AccessEventBase.php b/src/Event/AccessEventBase.php
index 1eeaf507..b832d1cd 100644
--- a/src/Event/AccessEventBase.php
+++ b/src/Event/AccessEventBase.php
@@ -4,13 +4,13 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 use Drupal\Core\Cache\RefinableCacheableDependencyTrait;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Session\AccountInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Base class for OG access events.
@@ -22,30 +22,30 @@ class AccessEventBase extends Event implements AccessEventInterface {
   /**
    * The access result.
    *
-   * @var \Drupal\Core\Access\AccessResultInterface
+   * @var AccessResultInterface
    */
   protected $access;
 
   /**
    * The group that provides the context for the access check.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $group;
 
   /**
    * The user for which to check access.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;
 
   /**
    * Constructs an AccessEventBase event.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group that provides the context in which to perform the access check.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user for which to check access.
    */
   public function __construct(ContentEntityInterface $group, AccountInterface $user) {
diff --git a/src/Event/AccessEventInterface.php b/src/Event/AccessEventInterface.php
index 87e6f922..7276a884 100644
--- a/src/Event/AccessEventInterface.php
+++ b/src/Event/AccessEventInterface.php
@@ -20,7 +20,7 @@ interface AccessEventInterface extends RefinableCacheableDependencyInterface {
    * Calling this method will cause access to be granted for the action that is
    * being checked, unless another event listener denies access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The updated access result.
    */
   public function grantAccess(): AccessResultInterface;
@@ -32,7 +32,7 @@ interface AccessEventInterface extends RefinableCacheableDependencyInterface {
    * being checked. This takes precedence over any other event listeners that
    * might grant access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The updated access result.
    */
   public function denyAccess(): AccessResultInterface;
@@ -40,7 +40,7 @@ interface AccessEventInterface extends RefinableCacheableDependencyInterface {
   /**
    * Merges the given access result with the existing access result.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The updated access result.
    */
   public function mergeAccessResult(AccessResultInterface $access_result): AccessResultInterface;
@@ -48,7 +48,7 @@ interface AccessEventInterface extends RefinableCacheableDependencyInterface {
   /**
    * Returns the group that provides the context for the access check.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The group entity.
    */
   public function getGroup(): ContentEntityInterface;
@@ -56,7 +56,7 @@ interface AccessEventInterface extends RefinableCacheableDependencyInterface {
   /**
    * Returns the user for which access is being determined.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   The user.
    */
   public function getUser(): AccountInterface;
@@ -64,7 +64,7 @@ interface AccessEventInterface extends RefinableCacheableDependencyInterface {
   /**
    * Returns the current access result object.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result object.
    */
   public function getAccessResult(): AccessResultInterface;
diff --git a/src/Event/DefaultRoleEvent.php b/src/Event/DefaultRoleEvent.php
index 0c444749..28c25806 100644
--- a/src/Event/DefaultRoleEvent.php
+++ b/src/Event/DefaultRoleEvent.php
@@ -4,8 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\og\Entity\OgRole;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event that is fired when default roles are compiled.
@@ -138,7 +138,7 @@ class DefaultRoleEvent extends Event implements DefaultRoleEventInterface {
    *
    * The roles are stored locally keyed by role name.
    *
-   * @param \Drupal\og\Entity\OgRole $role
+   * @param OgRole $role
    *   The role to validate.
    *
    * @throws \InvalidArgumentException
diff --git a/src/Event/DefaultRoleEventInterface.php b/src/Event/DefaultRoleEventInterface.php
index 034cefd2..b3ac9665 100644
--- a/src/Event/DefaultRoleEventInterface.php
+++ b/src/Event/DefaultRoleEventInterface.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Event;
 
+use Drupal\og\OgRoleInterface;
 use Drupal\og\Entity\OgRole;
 
 /**
@@ -25,7 +26,7 @@ interface DefaultRoleEventInterface extends \ArrayAccess, \IteratorAggregate {
    * @param string $name
    *   The name of the role to return.
    *
-   * @return \Drupal\og\OgRoleInterface
+   * @return OgRoleInterface
    *   The OgRole entity.
    *
    * @throws \InvalidArgumentException
@@ -44,7 +45,7 @@ interface DefaultRoleEventInterface extends \ArrayAccess, \IteratorAggregate {
   /**
    * Adds a default role.
    *
-   * @param \Drupal\og\Entity\OgRole $role
+   * @param OgRole $role
    *   The OgRole entity to add. This should be an unsaved entity that doesn't
    *   have the group entity type and bundle IDs set.
    *
@@ -56,7 +57,7 @@ interface DefaultRoleEventInterface extends \ArrayAccess, \IteratorAggregate {
   /**
    * Adds multiple default roles.
    *
-   * @param \Drupal\og\Entity\OgRole[] $roles
+   * @param OgRole[] $roles
    *   An array of OgRole entities to add. These should be unsaved entities that
    *   don't have the group entity type and bundle IDs set.
    */
@@ -65,7 +66,7 @@ interface DefaultRoleEventInterface extends \ArrayAccess, \IteratorAggregate {
   /**
    * Sets a default roles.
    *
-   * @param \Drupal\og\Entity\OgRole $role
+   * @param OgRole $role
    *   The OgRole entity to set. This should be an unsaved entity that doesn't
    *   have the group entity type and bundle IDs set.
    *
@@ -78,7 +79,7 @@ interface DefaultRoleEventInterface extends \ArrayAccess, \IteratorAggregate {
   /**
    * Sets multiple default roles.
    *
-   * @param \Drupal\og\Entity\OgRole[] $roles
+   * @param OgRole[] $roles
    *   An array of OgRole entities to set. These should be unsaved entities that
    *   don't have the group entity type and bundle IDs set.
    */
diff --git a/src/Event/GroupContentEntityOperationAccessEvent.php b/src/Event/GroupContentEntityOperationAccessEvent.php
index 83360833..5ff91ef4 100644
--- a/src/Event/GroupContentEntityOperationAccessEvent.php
+++ b/src/Event/GroupContentEntityOperationAccessEvent.php
@@ -22,7 +22,7 @@ class GroupContentEntityOperationAccessEvent extends AccessEventBase implements
   /**
    * The group content entity upon which the operation is being performed.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $groupContent;
 
@@ -31,11 +31,11 @@ class GroupContentEntityOperationAccessEvent extends AccessEventBase implements
    *
    * @param string $operation
    *   The entity operation, such as "create", "update" or "delete".
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group in scope of which the access check is being performed.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $groupContent
+   * @param ContentEntityInterface $groupContent
    *   The group content upon which the entity operation is performed.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user for which to check access.
    */
   public function __construct(string $operation, ContentEntityInterface $group, ContentEntityInterface $groupContent, AccountInterface $user) {
diff --git a/src/Event/GroupContentEntityOperationAccessEventInterface.php b/src/Event/GroupContentEntityOperationAccessEventInterface.php
index 64999285..a5687085 100644
--- a/src/Event/GroupContentEntityOperationAccessEventInterface.php
+++ b/src/Event/GroupContentEntityOperationAccessEventInterface.php
@@ -27,7 +27,7 @@ interface GroupContentEntityOperationAccessEventInterface extends AccessEventInt
   /**
    * Returns the group content entity upon which the operation is performed.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The group content entity.
    */
   public function getGroupContent(): ContentEntityInterface;
diff --git a/src/Event/GroupCreationEvent.php b/src/Event/GroupCreationEvent.php
index a796f62b..ecf5dc45 100644
--- a/src/Event/GroupCreationEvent.php
+++ b/src/Event/GroupCreationEvent.php
@@ -4,7 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * The group creation event.
diff --git a/src/Event/OgAdminRoutesEvent.php b/src/Event/OgAdminRoutesEvent.php
index 5bde1ab4..9c17964a 100644
--- a/src/Event/OgAdminRoutesEvent.php
+++ b/src/Event/OgAdminRoutesEvent.php
@@ -4,9 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\og\OgAccess;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event that is fired when OG admin routes are being compiled.
diff --git a/src/Event/PermissionEvent.php b/src/Event/PermissionEvent.php
index 85e5240e..ff1ac6da 100644
--- a/src/Event/PermissionEvent.php
+++ b/src/Event/PermissionEvent.php
@@ -4,9 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\og\GroupContentOperationPermission;
 use Drupal\og\PermissionInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event that is fired when OG permissions are compiled.
diff --git a/src/Event/PermissionEventInterface.php b/src/Event/PermissionEventInterface.php
index 2e5a700c..9b102db6 100644
--- a/src/Event/PermissionEventInterface.php
+++ b/src/Event/PermissionEventInterface.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Event;
 
+use Drupal\og\GroupContentOperationPermission;
 use Drupal\og\PermissionInterface;
 
 /**
@@ -25,7 +26,7 @@ interface PermissionEventInterface extends \ArrayAccess, \IteratorAggregate {
    * @param string $name
    *   The name of the permission to return.
    *
-   * @return \Drupal\og\PermissionInterface
+   * @return PermissionInterface
    *   The permission.
    *
    * @throws \InvalidArgumentException
@@ -46,7 +47,7 @@ interface PermissionEventInterface extends \ArrayAccess, \IteratorAggregate {
    *   Set to FALSE if this permission applies to all entities, or to TRUE if it
    *   only applies to the ones owned by the user. Defaults to FALSE.
    *
-   * @return \Drupal\og\GroupContentOperationPermission
+   * @return GroupContentOperationPermission
    *   The permission.
    *
    * @throws \InvalidArgumentException
@@ -57,7 +58,7 @@ interface PermissionEventInterface extends \ArrayAccess, \IteratorAggregate {
   /**
    * Returns all the permissions.
    *
-   * @return \Drupal\og\PermissionInterface[]
+   * @return PermissionInterface[]
    *   An associative array of permissions, keyed by permission name.
    */
   public function getPermissions();
@@ -65,7 +66,7 @@ interface PermissionEventInterface extends \ArrayAccess, \IteratorAggregate {
   /**
    * Sets the permission with the given data.
    *
-   * @param \Drupal\og\PermissionInterface $permission
+   * @param PermissionInterface $permission
    *   The permission to set.
    *
    * @throws \InvalidArgumentException
@@ -76,7 +77,7 @@ interface PermissionEventInterface extends \ArrayAccess, \IteratorAggregate {
   /**
    * Sets multiple permissions.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   The permissions to set, keyed by permission name.
    */
   public function setPermissions(array $permissions);
diff --git a/src/EventSubscriber/OgEventSubscriber.php b/src/EventSubscriber/OgEventSubscriber.php
index 662e6763..8f485041 100644
--- a/src/EventSubscriber/OgEventSubscriber.php
+++ b/src/EventSubscriber/OgEventSubscriber.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og\EventSubscriber;
 
+use Drupal\og\Entity\OgRole;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -30,41 +31,41 @@ class OgEventSubscriber implements EventSubscriberInterface {
   /**
    * The OG permission manager.
    *
-   * @var \Drupal\og\PermissionManagerInterface
+   * @var PermissionManagerInterface
    */
   protected $permissionManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The service providing information about bundles.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;
 
   /**
    * Constructs an OgEventSubscriber object.
    *
-   * @param \Drupal\og\PermissionManagerInterface $permission_manager
+   * @param PermissionManagerInterface $permission_manager
    *   The OG permission manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The service providing information about bundles.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
    */
   public function __construct(PermissionManagerInterface $permission_manager, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, OgAccessInterface $og_access) {
@@ -96,7 +97,7 @@ class OgEventSubscriber implements EventSubscriberInterface {
   /**
    * Provides default OG permissions.
    *
-   * @param \Drupal\og\Event\PermissionEventInterface $event
+   * @param PermissionEventInterface $event
    *   The OG permission event.
    */
   public function provideDefaultOgPermissions(PermissionEventInterface $event) {
@@ -170,7 +171,7 @@ class OgEventSubscriber implements EventSubscriberInterface {
   /**
    * Provides default permissions for the Node entity.
    *
-   * @param \Drupal\og\Event\PermissionEventInterface $event
+   * @param PermissionEventInterface $event
    *   The OG permission event.
    */
   public function provideDefaultNodePermissions(PermissionEventInterface $event) {
@@ -231,11 +232,11 @@ class OgEventSubscriber implements EventSubscriberInterface {
   /**
    * Provides a default role for the group administrator.
    *
-   * @param \Drupal\og\Event\DefaultRoleEventInterface $event
+   * @param DefaultRoleEventInterface $event
    *   The default role event.
    */
   public function provideDefaultRoles(DefaultRoleEventInterface $event) {
-    /** @var \Drupal\og\Entity\OgRole $role */
+    /** @var OgRole $role */
     $role = $this->entityTypeManager->getStorage('og_role')->create([
       'name' => OgRoleInterface::ADMINISTRATOR,
       'label' => 'Administrator',
@@ -270,7 +271,7 @@ class OgEventSubscriber implements EventSubscriberInterface {
    *   An array of group content bundle IDs, keyed by group content entity type
    *   ID.
    *
-   * @return \Drupal\og\GroupContentOperationPermission[]
+   * @return GroupContentOperationPermission[]
    *   The array of permissions.
    *
    * @see \Drupal\og\EventSubscriber\OgEventSubscriber::provideDefaultNodePermissions()
@@ -360,7 +361,7 @@ class OgEventSubscriber implements EventSubscriberInterface {
   /**
    * Provide OG admin routes.
    *
-   * @param \Drupal\og\Event\OgAdminRoutesEventInterface $event
+   * @param OgAdminRoutesEventInterface $event
    *   The OG admin routes event object.
    */
   public function provideOgAdminRoutes(OgAdminRoutesEventInterface $event) {
@@ -396,7 +397,7 @@ class OgEventSubscriber implements EventSubscriberInterface {
   /**
    * Checks if a user has access to perform a group content entity operation.
    *
-   * @param \Drupal\og\Event\GroupContentEntityOperationAccessEventInterface $event
+   * @param GroupContentEntityOperationAccessEventInterface $event
    *   The event fired when a group content entity operation is performed.
    */
   public function checkGroupContentEntityOperationAccess(GroupContentEntityOperationAccessEventInterface $event): void {
diff --git a/src/Form/GroupSubscribeForm.php b/src/Form/GroupSubscribeForm.php
index 487384be..79321c57 100644
--- a/src/Form/GroupSubscribeForm.php
+++ b/src/Form/GroupSubscribeForm.php
@@ -28,20 +28,20 @@ class GroupSubscribeForm extends ContentEntityForm {
   /**
    * OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;
 
   /**
    * Constructs a GroupSubscribeForm.
    *
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface|null $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface|null $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface|null $time
+   * @param TimeInterface|null $time
    *   The time service.
    *
    * @todo Set the `EntityRepositoryInterface` type hint on the second argument
@@ -81,7 +81,7 @@ class GroupSubscribeForm extends ContentEntityForm {
    *   The confirmation question.
    */
   public function getQuestion() {
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = $this->entity;
     $group = $membership->getGroup();
 
@@ -109,7 +109,7 @@ class GroupSubscribeForm extends ContentEntityForm {
   /**
    * Return the URL to redirect on cancel.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL object to redirect to.
    */
   public function getCancelUrl() {
@@ -128,7 +128,7 @@ class GroupSubscribeForm extends ContentEntityForm {
   public function buildForm(array $form, FormStateInterface $form_state) {
     $state = $this->isStateActive() ? OgMembershipInterface::STATE_ACTIVE : OgMembershipInterface::STATE_PENDING;
 
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = $this->entity;
     $membership->setState($state);
 
@@ -191,7 +191,7 @@ class GroupSubscribeForm extends ContentEntityForm {
    *   True if the state is active.
    */
   public function isStateActive() {
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = $this->getEntity();
 
     $group = $membership->getGroup();
@@ -218,7 +218,7 @@ class GroupSubscribeForm extends ContentEntityForm {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = $this->getEntity();
 
     $group = $membership->getGroup();
diff --git a/src/Form/OgAddMultipleRolesForm.php b/src/Form/OgAddMultipleRolesForm.php
index 686f2144..44936b5e 100644
--- a/src/Form/OgAddMultipleRolesForm.php
+++ b/src/Form/OgAddMultipleRolesForm.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Form;
 
+use Drupal\og\OgRoleInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\og\Entity\OgRole;
 
@@ -25,7 +26,7 @@ class OgAddMultipleRolesForm extends OgChangeMultipleRolesFormBase {
   public function buildForm(array $form, FormStateInterface $form_state) {
     $options = [];
     foreach ($this->getGroupTypes() as $group_type) {
-      /** @var \Drupal\og\OgRoleInterface $role */
+      /** @var OgRoleInterface $role */
       foreach (OgRole::loadByGroupType($group_type['entity_type_id'], $group_type['bundle_id']) as $role) {
         // Only add the role to the list if it is not a required role, these
         // cannot be added.
@@ -51,7 +52,7 @@ class OgAddMultipleRolesForm extends OgChangeMultipleRolesFormBase {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $role_ids = array_keys($form_state->getValue('roles'));
-    /** @var \Drupal\og\OgRoleInterface[] $roles */
+    /** @var OgRoleInterface[] $roles */
     $roles = OgRole::loadMultiple($role_ids);
     foreach ($this->getMemberships() as $membership) {
       $changed = FALSE;
diff --git a/src/Form/OgChangeMultipleRolesFormBase.php b/src/Form/OgChangeMultipleRolesFormBase.php
index c63d6fb8..66cd45e3 100644
--- a/src/Form/OgChangeMultipleRolesFormBase.php
+++ b/src/Form/OgChangeMultipleRolesFormBase.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Form;
 
+use Drupal\og\OgMembershipInterface;
+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\og\OgRoleInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -29,37 +32,37 @@ class OgChangeMultipleRolesFormBase extends FormBase {
   /**
    * The memberships on which roles should be changed.
    *
-   * @var \Drupal\og\OgMembershipInterface[]
+   * @var OgMembershipInterface[]
    */
   protected $memberships = [];
 
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * The temporary storage for the current user.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $tempStore;
 
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;
 
   /**
    * Constructs a OgChangeMultipleRolesFormbase object.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, OgAccessInterface $og_access) {
@@ -101,7 +104,7 @@ class OgChangeMultipleRolesFormBase extends FormBase {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $role_ids = array_keys($form_state->getValue('roles'));
-    /** @var \Drupal\og\OgRoleInterface[] $roles */
+    /** @var OgRoleInterface[] $roles */
     $roles = OgRole::loadMultiple($role_ids);
     foreach ($this->getMemberships() as $membership) {
       $changed = FALSE;
@@ -124,10 +127,10 @@ class OgChangeMultipleRolesFormBase extends FormBase {
   /**
    * Controls access to the form.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account for which to check access.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function access(AccountInterface $account) {
@@ -146,7 +149,7 @@ class OgChangeMultipleRolesFormBase extends FormBase {
   /**
    * Returns the temporary storage for the current user.
    *
-   * @return \Drupal\Core\TempStore\PrivateTempStore
+   * @return PrivateTempStore
    *   The temporary storage for the current user.
    */
   protected function getTempStore() {
@@ -159,7 +162,7 @@ class OgChangeMultipleRolesFormBase extends FormBase {
   /**
    * Returns an array of memberships on which to change roles.
    *
-   * @return \Drupal\og\OgMembershipInterface[]
+   * @return OgMembershipInterface[]
    *   The array of memberships.
    */
   protected function getMemberships() {
diff --git a/src/Form/OgMembershipDeleteForm.php b/src/Form/OgMembershipDeleteForm.php
index 910899bf..cbd95e04 100644
--- a/src/Form/OgMembershipDeleteForm.php
+++ b/src/Form/OgMembershipDeleteForm.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Form;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\og\Entity\OgMembership;
 use Drupal\Core\Entity\ContentEntityDeleteForm;
 
 /**
@@ -15,7 +17,7 @@ class OgMembershipDeleteForm extends ContentEntityDeleteForm {
    * {@inheritdoc}
    */
   protected function getDeletionMessage() {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $membership = $this->getEntity();
 
     return $this->t('%user has been unsubscribed from %group.', [
@@ -28,7 +30,7 @@ class OgMembershipDeleteForm extends ContentEntityDeleteForm {
    * {@inheritdoc}
    */
   protected function logDeletionMessage() {
-    /** @var \Drupal\og\Entity\OgMembership $entity */
+    /** @var OgMembership $entity */
     $membership = $this->getEntity();
 
     $this->logger('og')->notice('OG Membership: deleted the @membership_type membership for the user uid: @uid to the group of the entity-type @group_type and ID: @gid', [
@@ -43,7 +45,7 @@ class OgMembershipDeleteForm extends ContentEntityDeleteForm {
    * {@inheritdoc}
    */
   public function getQuestion() {
-    /** @var \Drupal\og\Entity\OgMembership $entity */
+    /** @var OgMembership $entity */
     $membership = $this->getEntity();
 
     return $this->t('Are you sure you want to unsubscribe %user from %group?', [
diff --git a/src/Form/OgMembershipForm.php b/src/Form/OgMembershipForm.php
index 79cf07bf..b14ee181 100644
--- a/src/Form/OgMembershipForm.php
+++ b/src/Form/OgMembershipForm.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Form;
 
+use Drupal\og\OgAccess;
+use Drupal\og\Entity\OgMembership;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -23,20 +26,20 @@ class OgMembershipForm extends ContentEntityForm {
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccess
+   * @var OgAccess
    */
   protected $ogAccess;
 
   /**
    * Constructs a MessageForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, OgAccessInterface $og_access) {
@@ -60,9 +63,9 @@ class OgMembershipForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\og\Entity\OgMembership $entity */
+    /** @var OgMembership $entity */
     $entity = $this->getEntity();
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $group */
+    /** @var ContentEntityInterface $group */
     $group = $entity->getGroup();
 
     $form = parent::form($form, $form_state);
diff --git a/src/Form/OgMembershipTypeForm.php b/src/Form/OgMembershipTypeForm.php
index fbc4dbf7..83a8565b 100644
--- a/src/Form/OgMembershipTypeForm.php
+++ b/src/Form/OgMembershipTypeForm.php
@@ -18,14 +18,14 @@ class OgMembershipTypeForm extends BundleEntityFormBase {
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Constructs the OgMembershipTypeForm object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager) {
diff --git a/src/Form/OgRemoveMultipleRolesForm.php b/src/Form/OgRemoveMultipleRolesForm.php
index 8c3127c9..7ea55d6e 100644
--- a/src/Form/OgRemoveMultipleRolesForm.php
+++ b/src/Form/OgRemoveMultipleRolesForm.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Form;
 
+use Drupal\og\OgRoleInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\og\Entity\OgRole;
 
@@ -50,7 +51,7 @@ class OgRemoveMultipleRolesForm extends OgChangeMultipleRolesFormBase {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $role_ids = array_keys($form_state->getValue('roles'));
-    /** @var \Drupal\og\OgRoleInterface[] $roles */
+    /** @var OgRoleInterface[] $roles */
     $roles = OgRole::loadMultiple($role_ids);
     foreach ($this->getMemberships() as $membership) {
       $changed = FALSE;
diff --git a/src/GroupTypeManager.php b/src/GroupTypeManager.php
index fcbe2a87..d5591a9c 100644
--- a/src/GroupTypeManager.php
+++ b/src/GroupTypeManager.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og;
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ -40,35 +41,35 @@ class GroupTypeManager implements GroupTypeManagerInterface {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The service providing information about bundles.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * The OG permission manager.
    *
-   * @var \Drupal\og\PermissionManagerInterface
+   * @var PermissionManagerInterface
    */
   protected $permissionManager;
 
@@ -108,58 +109,58 @@ class GroupTypeManager implements GroupTypeManagerInterface {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The OG role manager.
    *
-   * @var \Drupal\og\OgRoleManagerInterface
+   * @var OgRoleManagerInterface
    */
   protected $ogRoleManager;
 
   /**
    * The route builder service.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routeBuilder;
 
   /**
    * The OG group audience helper.
    *
-   * @var \Drupal\og\OgGroupAudienceHelperInterface
+   * @var OgGroupAudienceHelperInterface
    */
   protected $groupAudienceHelper;
 
   /**
    * The Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a GroupTypeManager object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The service providing information about bundles.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend.
-   * @param \Drupal\og\PermissionManagerInterface $permission_manager
+   * @param PermissionManagerInterface $permission_manager
    *   The OG permission manager.
-   * @param \Drupal\og\OgRoleManagerInterface $og_role_manager
+   * @param OgRoleManagerInterface $og_role_manager
    *   The OG role manager.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $route_builder
+   * @param RouteBuilderInterface $route_builder
    *   The route builder service.
-   * @param \Drupal\og\OgGroupAudienceHelperInterface $group_audience_helper
+   * @param OgGroupAudienceHelperInterface $group_audience_helper
    *   The OG group audience helper.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, EventDispatcherInterface $event_dispatcher, CacheBackendInterface $cache, PermissionManagerInterface $permission_manager, OgRoleManagerInterface $og_role_manager, RouteBuilderInterface $route_builder, OgGroupAudienceHelperInterface $group_audience_helper) {
@@ -284,7 +285,7 @@ class GroupTypeManager implements GroupTypeManagerInterface {
 
     // Trigger an event upon the new group creation.
     $event = new GroupCreationEvent($entity_type_id, $bundle_id);
-    $this->eventDispatcher->dispatch(GroupCreationEventInterface::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, GroupCreationEventInterface::EVENT_NAME);
 
     $this->ogRoleManager->createPerBundleRoles($entity_type_id, $bundle_id);
     $this->refreshGroupMap();
diff --git a/src/GroupTypeManagerInterface.php b/src/GroupTypeManagerInterface.php
index 74cdfb80..73adc520 100644
--- a/src/GroupTypeManagerInterface.php
+++ b/src/GroupTypeManagerInterface.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og;
 
+use Drupal\Core\Entity\EntityInterface;
 /**
  * Interface for services intended to help managing groups.
  */
@@ -44,7 +45,7 @@ interface GroupTypeManagerInterface {
    * @param string $entity_type_id
    *   The entity type name.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of groups, or an empty array if none found
    */
   public function getGroupBundleIdsByEntityType($entity_type_id);
diff --git a/src/MembershipManager.php b/src/MembershipManager.php
index cf5e720b..4ade0170 100644
--- a/src/MembershipManager.php
+++ b/src/MembershipManager.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\og;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ -22,7 +25,7 @@ class MembershipManager implements MembershipManagerInterface {
   /**
    * The static cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $staticCache;
 
@@ -36,7 +39,7 @@ class MembershipManager implements MembershipManagerInterface {
   /**
    * The OG group audience helper.
    *
-   * @var \Drupal\og\OgGroupAudienceHelperInterface
+   * @var OgGroupAudienceHelperInterface
    */
   protected $groupAudienceHelper;
 
@@ -45,9 +48,9 @@ class MembershipManager implements MembershipManagerInterface {
    *
    * @param \Drupal\core\Entity\EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\og\OgGroupAudienceHelperInterface $group_audience_helper
+   * @param OgGroupAudienceHelperInterface $group_audience_helper
    *   The OG group audience helper.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The static cache backend.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, OgGroupAudienceHelperInterface $group_audience_helper, CacheBackendInterface $cache) {
@@ -66,7 +69,7 @@ class MembershipManager implements MembershipManagerInterface {
     }
     $group_ids = [];
 
-    /** @var \Drupal\og\Entity\OgMembership[] $memberships */
+    /** @var OgMembership[] $memberships */
     $memberships = $this->getMemberships($user_id, $states);
     foreach ($memberships as $membership) {
       $group_ids[$membership->getGroupEntityType()][] = $membership->getGroupId();
@@ -151,7 +154,7 @@ class MembershipManager implements MembershipManagerInterface {
       $user_id = $user_id->id();
     }
 
-    /** @var \Drupal\og\OgMembershipInterface[] $memberships */
+    /** @var OgMembershipInterface[] $memberships */
     $memberships = $this->getMemberships($user_id, $states);
     $memberships = array_filter($memberships, function (OgMembershipInterface $membership) use ($role_ids, $require_all_roles): bool {
       $membership_roles_ids = $membership->getRolesIds();
@@ -264,7 +267,7 @@ class MembershipManager implements MembershipManagerInterface {
    */
   public function createMembership(EntityInterface $group, UserInterface $user, $membership_type = OgMembershipInterface::TYPE_DEFAULT) {
     /** @var \Drupal\user\UserInterface $user */
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = OgMembership::create(['type' => $membership_type]);
     $membership
       ->setOwner($user)
@@ -396,7 +399,7 @@ class MembershipManager implements MembershipManagerInterface {
       $query->condition('entity_type', $entity_types, 'IN');
     }
 
-    /** @var \Drupal\field\FieldStorageConfigInterface[] $fields */
+    /** @var FieldStorageConfigInterface[] $fields */
     $storage = $this->entityTypeManager->getStorage('field_storage_config');
     $fields = array_filter($storage->loadMultiple($query->execute()), function (FieldStorageConfigInterface $field) use ($entity) {
       $type_matches = $field->getSetting('target_type') === $entity->getEntityTypeId();
@@ -497,13 +500,13 @@ class MembershipManager implements MembershipManagerInterface {
    * @param array[] $group_ids
    *   An associative array of entity IDs indexed by their entity type ID.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[][]
+   * @return ContentEntityInterface[][]
    *   An associative array of entities indexed by their entity type ID.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown when the entity type definition of one or more of the passed in
    *   entity types is invalid.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown when one or more of the passed in entity types is not defined.
    */
   protected function loadGroups(array $group_ids): array {
@@ -537,13 +540,13 @@ class MembershipManager implements MembershipManagerInterface {
    * @param array $ids
    *   The IDs of the memberships to load.
    *
-   * @return \Drupal\og\OgMembershipInterface[]
+   * @return OgMembershipInterface[]
    *   The membership entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown when the entity type definition of one or more of the passed in
    *   entity types is invalid.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown when one or more of the passed in entity types is not defined.
    */
   protected function loadMemberships(array $ids) {
diff --git a/src/MembershipManagerInterface.php b/src/MembershipManagerInterface.php
index bd57e76b..ed32e122 100644
--- a/src/MembershipManagerInterface.php
+++ b/src/MembershipManagerInterface.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\user\UserInterface;
 
@@ -48,7 +49,7 @@ interface MembershipManagerInterface {
    * @param string[] $states
    *   (optional) Array with the states to return. Defaults to active.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[][]
+   * @return ContentEntityInterface[][]
    *   An associative array, keyed by group entity type, each item an array of
    *   group entities.
    *
@@ -71,7 +72,7 @@ interface MembershipManagerInterface {
    *   the group. Set to FALSE to return the groups that match one or more of
    *   the requested roles. Defaults to TRUE.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[][]
+   * @return ContentEntityInterface[][]
    *   An associative array, keyed by group entity type, each item an array of
    *   group entities.
    */
@@ -107,7 +108,7 @@ interface MembershipManagerInterface {
    *   active memberships. In order to retrieve all memberships regardless of
    *   state, pass `OgMembershipInterface::ALL_STATES`.
    *
-   * @return \Drupal\og\OgMembershipInterface[]
+   * @return OgMembershipInterface[]
    *   An array of OgMembership entities, keyed by ID.
    */
   public function getMemberships($user_id, array $states = [OgMembershipInterface::STATE_ACTIVE]);
@@ -115,7 +116,7 @@ interface MembershipManagerInterface {
   /**
    * Returns the group membership for a given user and group.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group to get the membership for.
    * @param int $user_id
    *   The ID of the user to get the membership for.
@@ -124,7 +125,7 @@ interface MembershipManagerInterface {
    *   active memberships. In order to retrieve all memberships regardless of
    *   state, pass `OgMembershipInterface::ALL_STATES`.
    *
-   * @return \Drupal\og\OgMembershipInterface|null
+   * @return OgMembershipInterface|null
    *   The OgMembership entity. NULL will be returned if no membership is
    *   available that matches the passed in $states.
    */
@@ -133,7 +134,7 @@ interface MembershipManagerInterface {
   /**
    * Returns the number of group memberships for a given group.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group to get the membership for.
    * @param array $states
    *   (optional) Array with the state to return. Defaults to active.
@@ -146,7 +147,7 @@ interface MembershipManagerInterface {
   /**
    * Returns the membership IDs of the given group filtered by role names.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity for which to return the memberships.
    * @param array $role_names
    *   An array of role names to filter by. In order to retrieve a list of all
@@ -156,7 +157,7 @@ interface MembershipManagerInterface {
    *   active membership IDs. In order to retrieve all membership IDs regardless
    *   of state, pass `OgMembershipInterface::ALL_STATES`.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The membership entities.
    */
   public function getGroupMembershipIdsByRoleNames(EntityInterface $group, array $role_names, array $states = [OgMembershipInterface::STATE_ACTIVE]);
@@ -164,7 +165,7 @@ interface MembershipManagerInterface {
   /**
    * Returns the memberships of the given group filtered by role name.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity for which to return the memberships.
    * @param array $role_names
    *   An array of role names to filter by. In order to retrieve a list of all
@@ -174,7 +175,7 @@ interface MembershipManagerInterface {
    *   active memberships. In order to retrieve all memberships regardless of
    *   state, pass `OgMembershipInterface::ALL_STATES`.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The membership entities.
    */
   public function getGroupMembershipsByRoleNames(EntityInterface $group, array $role_names, array $states = [OgMembershipInterface::STATE_ACTIVE]);
@@ -182,15 +183,15 @@ interface MembershipManagerInterface {
   /**
    * Creates an OG membership.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user object.
    * @param string $membership_type
    *   (optional) The membership type. Defaults to
    *   \Drupal\og\OgMembershipInterface::TYPE_DEFAULT.
    *
-   * @return \Drupal\og\OgMembershipInterface
+   * @return OgMembershipInterface
    *   The unsaved membership object.
    */
   public function createMembership(EntityInterface $group, UserInterface $user, $membership_type = OgMembershipInterface::TYPE_DEFAULT);
@@ -201,7 +202,7 @@ interface MembershipManagerInterface {
    * Do not use this to retrieve group IDs associated with a user entity. Use
    * MembershipManager::getUserGroups() instead.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The group content entity for which to return the associated groups.
    * @param string $group_type_id
    *   Filter results to only include group IDs of this entity type.
@@ -230,14 +231,14 @@ interface MembershipManagerInterface {
    * to the group is stored on a field attached to the content entity, while
    * user memberships are tracked in OgMembership entities.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The group content entity for which to return the groups.
    * @param string $group_type_id
    *   Filter results to only include groups of this entity type.
    * @param string $group_bundle
    *   Filter results to only include groups of this bundle.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[][]
+   * @return EntityInterface[][]
    *   An associative array, keyed by group entity type, each item an array of
    *   group entities.
    *
@@ -251,7 +252,7 @@ interface MembershipManagerInterface {
    * Do not use this to retrieve the group membership count for a user entity.
    * Use count(\Drupal\og\MembershipManager::getUserGroupIds()) instead.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The group content entity for which to count the associated groups.
    * @param string $group_type_id
    *   Only count groups of this entity type.
@@ -269,7 +270,7 @@ interface MembershipManagerInterface {
    * This does not return information about users that are members of the given
    * group.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The group entity for which to return group content IDs.
    * @param array $entity_types
    *   Optional list of group content entity types for which to return results.
@@ -285,7 +286,7 @@ interface MembershipManagerInterface {
   /**
    * Returns whether a user belongs to a group.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
    * @param int $user_id
    *   The ID of the user to test the membership for.
@@ -302,7 +303,7 @@ interface MembershipManagerInterface {
   /**
    * Returns whether a user belongs to a group with a pending status.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
    * @param int $user_id
    *   The ID of the user.
@@ -317,7 +318,7 @@ interface MembershipManagerInterface {
   /**
    * Returns whether an entity belongs to a group with a blocked status.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
    * @param int $user_id
    *   The ID of the user to test the membership for.
diff --git a/src/Og.php b/src/Og.php
index 6e43c0c6..54a6e8ed 100644
--- a/src/Og.php
+++ b/src/Og.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\og;
 
+use Drupal\Core\Field\FieldConfigInterface;
+use Drupal\og\Entity\OgMembership;
+use Drupal\og\Plugin\EntityReferenceSelection\OgSelection;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ -46,7 +49,7 @@ class Og {
    *   - view_display: Array with values to override the view display
    *     definitions.
    *
-   * @return \Drupal\Core\Field\FieldConfigInterface
+   * @return FieldConfigInterface
    *   The created or existing field config.
    */
   public static function createField($plugin_id, $entity_type, $bundle, array $settings = []) {
@@ -63,7 +66,7 @@ class Og {
     // we validate the the field can be attached to the entity. For example,
     // the OG access module's field can be attached only to node entities, so
     // any other entity will throw an exception.
-    /** @var \Drupal\og\OgFieldBase $og_field */
+    /** @var OgFieldBase $og_field */
     $og_field = static::getFieldBaseDefinition($plugin_id)
       ->setFieldName($field_name)
       ->setBundle($bundle)
@@ -129,18 +132,18 @@ class Og {
   /**
    * Returns the group memberships a user is associated with.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user to get groups for.
    * @param array $states
    *   (optional) Array with the states to return. Defaults to only returning
    *   active memberships. In order to retrieve all memberships regardless of
    *   state, pass `OgMembershipInterface::ALL_STATES`.
    *
-   * @return \Drupal\og\OgMembershipInterface[]
+   * @return OgMembershipInterface[]
    *   An array of OgMembership entities, keyed by ID.
    */
   public static function getMemberships(AccountInterface $user, array $states = [OgMembershipInterface::STATE_ACTIVE]) {
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
     return $membership_manager->getMemberships($user->id(), $states);
   }
@@ -148,21 +151,21 @@ class Og {
   /**
    * Returns the group membership for a given user and group.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group to get the membership for.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user to get the membership for.
    * @param array $states
    *   (optional) Array with the states to return. Defaults to only returning
    *   active memberships. In order to retrieve all memberships regardless of
    *   state, pass `OgMembershipInterface::ALL_STATES`.
    *
-   * @return \Drupal\og\OgMembershipInterface|null
+   * @return OgMembershipInterface|null
    *   The OgMembership entity. NULL will be returned if no membership is
    *   available that matches the passed in $states.
    */
   public static function getMembership(EntityInterface $group, AccountInterface $user, array $states = [OgMembershipInterface::STATE_ACTIVE]) {
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
     return $membership_manager->getMembership($group, $user->id(), $states);
   }
@@ -170,16 +173,16 @@ class Og {
   /**
    * Returns the group memberships for a given group.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group to get the membership for.
    * @param array $states
    *   (optional) Array with the state to return. Defaults to active.
    *
-   * @return \Drupal\og\OgMembershipInterface[]
+   * @return OgMembershipInterface[]
    *   An array of OgMembership entities, keyed by ID.
    */
   public static function getGroupMemberships(EntityInterface $group, array $states = [OgMembershipInterface::STATE_ACTIVE]) {
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
     return $membership_manager->getGroupMemberships($group, $states);
   }
@@ -187,19 +190,19 @@ class Og {
   /**
    * Creates an OG membership.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user object.
    * @param string $membership_type
    *   (optional) The membership type. Defaults to
    *   \Drupal\og\OgMembershipInterface::TYPE_DEFAULT.
    *
-   * @return \Drupal\og\Entity\OgMembership
+   * @return OgMembership
    *   The unsaved membership object.
    */
   public static function createMembership(EntityInterface $group, AccountInterface $user, $membership_type = OgMembershipInterface::TYPE_DEFAULT) {
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
     return $membership_manager->createMembership($group, $user, $membership_type);
   }
@@ -207,9 +210,9 @@ class Og {
   /**
    * Returns whether a user belongs to a group.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user to test the membership for.
    * @param array $states
    *   (optional) Array with the membership states to check the membership.
@@ -219,7 +222,7 @@ class Og {
    *   TRUE if the user belongs to a group with a certain state.
    */
   public static function isMember(EntityInterface $group, AccountInterface $user, array $states = [OgMembershipInterface::STATE_ACTIVE]) {
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
     return $membership_manager->isMember($group, $user->id(), $states);
   }
@@ -227,9 +230,9 @@ class Og {
   /**
    * Returns whether a user belongs to a group with a pending status.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user entity.
    *
    * @return bool
@@ -244,9 +247,9 @@ class Og {
   /**
    * Returns whether an entity belongs to a group with a blocked status.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The entity to test the membership for.
    *
    * @return bool
@@ -318,7 +321,7 @@ class Og {
   /**
    * Returns the group manager instance.
    *
-   * @return \Drupal\og\GroupTypeManagerInterface
+   * @return GroupTypeManagerInterface
    *   Returns the group manager.
    */
   public static function groupTypeManager() {
@@ -354,12 +357,12 @@ class Og {
   /**
    * Get the selection handler for an audience field attached to entity.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $options
    *   Overriding the default options of the selection handler.
    *
-   * @return \Drupal\og\Plugin\EntityReferenceSelection\OgSelection
+   * @return OgSelection
    *   Returns the OG selection handler.
    *
    * @throws \Exception
diff --git a/src/OgAccess.php b/src/OgAccess.php
index e9862062..55da8464 100644
--- a/src/OgAccess.php
+++ b/src/OgAccess.php
@@ -52,68 +52,68 @@ class OgAccess implements OgAccessInterface {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The service that contains the current active user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $accountProxy;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The group manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;
 
   /**
    * The OG permission manager.
    *
-   * @var \Drupal\og\PermissionManagerInterface
+   * @var PermissionManagerInterface
    */
   protected $permissionManager;
 
   /**
    * The group membership manager.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;
 
   /**
    * Constructs the OgAccess service.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account_proxy
+   * @param AccountProxyInterface $account_proxy
    *   The service that contains the current active user.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\og\GroupTypeManagerInterface $group_manager
+   * @param GroupTypeManagerInterface $group_manager
    *   The group manager.
-   * @param \Drupal\og\PermissionManagerInterface $permission_manager
+   * @param PermissionManagerInterface $permission_manager
    *   The permission manager.
-   * @param \Drupal\og\MembershipManagerInterface $membership_manager
+   * @param MembershipManagerInterface $membership_manager
    *   The group membership manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
    */
   public function __construct(ConfigFactoryInterface $config_factory, AccountProxyInterface $account_proxy, ModuleHandlerInterface $module_handler, GroupTypeManagerInterface $group_manager, PermissionManagerInterface $permission_manager, MembershipManagerInterface $membership_manager, EventDispatcherInterface $dispatcher) {
@@ -190,7 +190,7 @@ class OgAccess implements OgAccessInterface {
     }
     elseif (!$this->membershipManager->isMember($group, $user->id(), [OgMembershipInterface::STATE_BLOCKED])) {
       // User is a non-member or has a pending membership.
-      /** @var \Drupal\og\Entity\OgRole $role */
+      /** @var OgRole $role */
       $role = OgRole::loadByGroupAndName($group, OgRoleInterface::ANONYMOUS);
       if ($role) {
         $permissions = $role->getPermissions();
@@ -323,7 +323,7 @@ class OgAccess implements OgAccessInterface {
       $event->addCacheContexts(['user']);
     }
 
-    $this->dispatcher->dispatch(GroupContentEntityOperationAccessEvent::EVENT_NAME, $event);
+    $this->dispatcher->dispatch($event, GroupContentEntityOperationAccessEvent::EVENT_NAME);
 
     return $event->getAccessResult();
   }
diff --git a/src/OgAccessInterface.php b/src/OgAccessInterface.php
index f06704c5..f973041b 100644
--- a/src/OgAccessInterface.php
+++ b/src/OgAccessInterface.php
@@ -36,13 +36,13 @@ interface OgAccessInterface {
    * guarantee consistent behavior, and ensure that the superuser and group
    * administrators can perform all actions.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group entity.
    * @param string $permission
    *   The name of the OG permission being checked. This includes both group
    *   level permissions such as 'subscribe without approval' and group content
    *   entity operation permissions such as 'edit own article content'.
-   * @param \Drupal\Core\Session\AccountInterface|null $user
+   * @param AccountInterface|null $user
    *   (optional) The user to check. Defaults to the current user.
    * @param bool $skip_alter
    *   (optional) If TRUE then user access will not be sent to other modules
@@ -50,7 +50,7 @@ interface OgAccessInterface {
    *   hook_og_user_access_alter() that still want to use og_user_access(), but
    *   without causing a recursion. Defaults to FALSE.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   An access result object.
    */
   public function userAccess(EntityInterface $group, string $permission, ?AccountInterface $user = NULL, bool $skip_alter = FALSE): AccessResultInterface;
@@ -79,12 +79,12 @@ interface OgAccessInterface {
    *   The name of the OG permission being checked. This includes both group
    *   level permissions such as 'subscribe without approval' and group content
    *   entity operation permissions such as 'edit own article content'.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object. This can be either a group or group content entity.
-   * @param \Drupal\Core\Session\AccountInterface|null $user
+   * @param AccountInterface|null $user
    *   (optional) The user object. If empty the current user will be used.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   An access result object.
    *
    * @see \Drupal\og\userAccess();
@@ -117,12 +117,12 @@ interface OgAccessInterface {
    *
    * @param string $operation
    *   The entity operation, such as "create", "update" or "delete".
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object. This can be either a group or group content entity.
-   * @param \Drupal\Core\Session\AccountInterface|null $user
+   * @param AccountInterface|null $user
    *   (optional) The user object. If empty the current user will be used.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   An access result object.
    *
    * @see \Drupal\og\userAccessGroupContentEntityOperation();
@@ -148,16 +148,16 @@ interface OgAccessInterface {
    *
    * @param string $operation
    *   The entity operation, such as "create", "update" or "delete".
-   * @param \Drupal\Core\Entity\EntityInterface $group_entity
+   * @param EntityInterface $group_entity
    *   The group entity, to retrieve the permissions from.
-   * @param \Drupal\Core\Entity\EntityInterface $group_content_entity
+   * @param EntityInterface $group_content_entity
    *   The group content entity for which access to the entity operation is
    *   requested.
-   * @param \Drupal\Core\Session\AccountInterface|null $user
+   * @param AccountInterface|null $user
    *   Optional user for which to check access. If omitted, the currently logged
    *   in user will be used.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result object.
    */
   public function userAccessGroupContentEntityOperation(string $operation, EntityInterface $group_entity, EntityInterface $group_content_entity, ?AccountInterface $user = NULL): AccessResultInterface;
diff --git a/src/OgContextInterface.php b/src/OgContextInterface.php
index 23000125..1c2c3944 100644
--- a/src/OgContextInterface.php
+++ b/src/OgContextInterface.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 /**
  * Declares an interface for OG context providers.
  */
@@ -12,7 +13,7 @@ interface OgContextInterface {
   /**
    * Returns the group which is relevant in the current context, if any.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The group which is relevant in the current context, or NULL if no group
    *   was found.
    */
diff --git a/src/OgDeleteOrphansBase.php b/src/OgDeleteOrphansBase.php
index 9d25b301..605e4147 100644
--- a/src/OgDeleteOrphansBase.php
+++ b/src/OgDeleteOrphansBase.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og;
 
+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -23,28 +24,28 @@ abstract class OgDeleteOrphansBase extends PluginBase implements OgDeleteOrphans
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
   /**
    * The OG membership manager.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;
 
   /**
    * The OG group audience helper.
    *
-   * @var \Drupal\og\OgGroupAudienceHelperInterface
+   * @var OgGroupAudienceHelperInterface
    */
   protected $groupAudienceHelper;
 
@@ -57,13 +58,13 @@ abstract class OgDeleteOrphansBase extends PluginBase implements OgDeleteOrphans
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
-   * @param \Drupal\og\MembershipManagerInterface $membership_manager
+   * @param MembershipManagerInterface $membership_manager
    *   The OG membership manager service.
-   * @param \Drupal\og\OgGroupAudienceHelperInterface $group_audience_helper
+   * @param OgGroupAudienceHelperInterface $group_audience_helper
    *   The OG group audience helper.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, QueueFactory $queue_factory, MembershipManagerInterface $membership_manager, OgGroupAudienceHelperInterface $group_audience_helper) {
@@ -106,7 +107,7 @@ abstract class OgDeleteOrphansBase extends PluginBase implements OgDeleteOrphans
   /**
    * Queries the registered group entity for orphaned members to delete.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The group entity that is the basis for the query.
    *
    * @return array
@@ -167,7 +168,7 @@ abstract class OgDeleteOrphansBase extends PluginBase implements OgDeleteOrphans
   /**
    * Returns the queue of orphans to delete.
    *
-   * @return \Drupal\Core\Queue\QueueInterface
+   * @return QueueInterface
    *   The queue.
    */
   protected function getQueue() {
diff --git a/src/OgDeleteOrphansInterface.php b/src/OgDeleteOrphansInterface.php
index 65360708..693f1784 100644
--- a/src/OgDeleteOrphansInterface.php
+++ b/src/OgDeleteOrphansInterface.php
@@ -27,7 +27,7 @@ interface OgDeleteOrphansInterface {
    *
    * During processing its orphaned members or content will be deleted.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The group entity to register.
    */
   public function register(EntityInterface $entity);
@@ -42,7 +42,7 @@ interface OgDeleteOrphansInterface {
    *
    * @param array $form
    *   The form definition array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/OgDeleteOrphansPluginManager.php b/src/OgDeleteOrphansPluginManager.php
index c9b10349..6beb275d 100644
--- a/src/OgDeleteOrphansPluginManager.php
+++ b/src/OgDeleteOrphansPluginManager.php
@@ -19,9 +19,9 @@ class OgDeleteOrphansPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/OgFieldsPluginManager.php b/src/OgFieldsPluginManager.php
index 462ba3b3..2bee4d6b 100644
--- a/src/OgFieldsPluginManager.php
+++ b/src/OgFieldsPluginManager.php
@@ -19,9 +19,9 @@ class OgFieldsPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/OgGroupAudienceHelper.php b/src/OgGroupAudienceHelper.php
index 47773910..5912326e 100644
--- a/src/OgGroupAudienceHelper.php
+++ b/src/OgGroupAudienceHelper.php
@@ -17,23 +17,23 @@ class OgGroupAudienceHelper implements OgGroupAudienceHelperInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Constructs an OgGroupAudienceHelper object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager) {
diff --git a/src/OgGroupAudienceHelperInterface.php b/src/OgGroupAudienceHelperInterface.php
index 18cacbc7..a1e6cf45 100644
--- a/src/OgGroupAudienceHelperInterface.php
+++ b/src/OgGroupAudienceHelperInterface.php
@@ -37,7 +37,7 @@ interface OgGroupAudienceHelperInterface {
   /**
    * Returns TRUE if field is a group audience type.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition object.
    *
    * @return bool
@@ -61,7 +61,7 @@ interface OgGroupAudienceHelperInterface {
    *   Fields that do not specify any bundle restrictions at all are also
    *   included. If omitted, the results will not be filtered by group bundle.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface[]
+   * @return FieldDefinitionInterface[]
    *   An array of field definitions, keyed by field name; Or an empty array if
    *   none found.
    */
diff --git a/src/OgGroupResolverInterface.php b/src/OgGroupResolverInterface.php
index 1cf34195..c294f65e 100644
--- a/src/OgGroupResolverInterface.php
+++ b/src/OgGroupResolverInterface.php
@@ -39,7 +39,7 @@ interface OgGroupResolverInterface {
   /**
    * Resolves groups within the plugin's domain.
    *
-   * @param \Drupal\og\OgResolvedGroupCollectionInterface $collection
+   * @param OgResolvedGroupCollectionInterface $collection
    *   A collection of groups that were resolved by previous plugins. If the
    *   plugin discovers new groups, it may add these to this collection.
    *   A plugin may also remove groups from the collection that were previously
diff --git a/src/OgGroupResolverPluginManager.php b/src/OgGroupResolverPluginManager.php
index 6f4c3d13..048e0846 100644
--- a/src/OgGroupResolverPluginManager.php
+++ b/src/OgGroupResolverPluginManager.php
@@ -19,9 +19,9 @@ class OgGroupResolverPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/OgMembershipAccessControlHandler.php b/src/OgMembershipAccessControlHandler.php
index 51f49f18..aa3c32ad 100644
--- a/src/OgMembershipAccessControlHandler.php
+++ b/src/OgMembershipAccessControlHandler.php
@@ -25,25 +25,25 @@ class OgMembershipAccessControlHandler extends EntityAccessControlHandler implem
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccess
+   * @var OgAccess
    */
   protected $ogAccess;
 
   /**
    * The OG Membership Manager service.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;
 
   /**
    * Constructs a OgMembershipAccessControllHandler object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
-   * @param \Drupal\og\MembershipManagerInterface $membership_manager
+   * @param MembershipManagerInterface $membership_manager
    *   The OG Membership Manager service.
    */
   public function __construct(EntityTypeInterface $entity_type, OgAccessInterface $og_access, MembershipManagerInterface $membership_manager) {
@@ -176,7 +176,7 @@ class OgMembershipAccessControlHandler extends EntityAccessControlHandler implem
    * {@inheritdoc}
    */
   protected function checkFieldAccess($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = $items ? $items->getEntity() : NULL;
 
     $administrative_fields = ['uid', 'state', 'roles'];
diff --git a/src/OgMembershipInterface.php b/src/OgMembershipInterface.php
index 90c102d2..fc19c305 100644
--- a/src/OgMembershipInterface.php
+++ b/src/OgMembershipInterface.php
@@ -85,7 +85,7 @@ interface OgMembershipInterface extends ContentEntityInterface, EntityOwnerInter
   /**
    * Sets the group associated with the membership.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The entity object.
    *
    * @return \Drupal\og\OgMembershipInterface
@@ -96,7 +96,7 @@ interface OgMembershipInterface extends ContentEntityInterface, EntityOwnerInter
   /**
    * Gets the group associated with the membership.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The group object which is referenced by the membership, or NULL if the
    *   group no longer exists in the entity storage. This can happen when the
    *   cleanup of orphaned memberships is configured to be handled in a cron job
@@ -164,7 +164,7 @@ interface OgMembershipInterface extends ContentEntityInterface, EntityOwnerInter
   /**
    * Sets the group's roles for the current user group membership.
    *
-   * @param \Drupal\og\OgRoleInterface[] $roles
+   * @param OgRoleInterface[] $roles
    *   The array of OG roles to set.
    *
    * @return \Drupal\og\OgMembershipInterface
@@ -175,7 +175,7 @@ interface OgMembershipInterface extends ContentEntityInterface, EntityOwnerInter
   /**
    * Adds a role to the user membership.
    *
-   * @param \Drupal\og\OgRoleInterface $role
+   * @param OgRoleInterface $role
    *   The OG role.
    *
    * @return \Drupal\og\OgMembershipInterface
@@ -186,7 +186,7 @@ interface OgMembershipInterface extends ContentEntityInterface, EntityOwnerInter
   /**
    * Revokes a role from the OG membership.
    *
-   * @param \Drupal\og\OgRoleInterface $role
+   * @param OgRoleInterface $role
    *   The OG role.
    *
    * @return \Drupal\og\OgMembershipInterface
@@ -208,7 +208,7 @@ interface OgMembershipInterface extends ContentEntityInterface, EntityOwnerInter
   /**
    * Gets all the referenced OG roles.
    *
-   * @return \Drupal\og\OgRoleInterface[]
+   * @return OgRoleInterface[]
    *   List of OG roles the user own for the current membership instance.
    */
   public function getRoles(): array;
@@ -224,7 +224,7 @@ interface OgMembershipInterface extends ContentEntityInterface, EntityOwnerInter
   /**
    * Returns whether the given role is valid for this membership.
    *
-   * @param \Drupal\og\OgRoleInterface $role
+   * @param OgRoleInterface $role
    *   The role to check.
    *
    * @return bool
diff --git a/src/OgResolvedGroupCollection.php b/src/OgResolvedGroupCollection.php
index 097e2fcc..375314f4 100644
--- a/src/OgResolvedGroupCollection.php
+++ b/src/OgResolvedGroupCollection.php
@@ -105,7 +105,7 @@ class OgResolvedGroupCollection implements OgResolvedGroupCollectionInterface {
   /**
    * Generates a key that can be used to identify the given group.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group for which to generate the key.
    *
    * @return string
diff --git a/src/OgResolvedGroupCollectionInterface.php b/src/OgResolvedGroupCollectionInterface.php
index 995eedb9..4717ce43 100644
--- a/src/OgResolvedGroupCollectionInterface.php
+++ b/src/OgResolvedGroupCollectionInterface.php
@@ -51,7 +51,7 @@ interface OgResolvedGroupCollectionInterface {
    * Each time it is added a 'vote' will be cast in its favor, increasing the
    * chance this group will be chosen as the group context.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group to add.
    * @param string[] $cache_contexts
    *   An optional array of cache contexts to assign to the group.
@@ -77,7 +77,7 @@ interface OgResolvedGroupCollectionInterface {
   /**
    * Removes the given group from the collection.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group to remove.
    */
   public function removeGroup(ContentEntityInterface $group);
@@ -85,7 +85,7 @@ interface OgResolvedGroupCollectionInterface {
   /**
    * Returns whether the given group has already been added.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group for which to check the existence.
    *
    * @return bool
diff --git a/src/OgRoleInterface.php b/src/OgRoleInterface.php
index 23505603..6d4cec32 100644
--- a/src/OgRoleInterface.php
+++ b/src/OgRoleInterface.php
@@ -151,7 +151,7 @@ interface OgRoleInterface extends RoleInterface {
   /**
    * Returns the role represented by the given group and role name.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group for which to return the role.
    * @param string $name
    *   The role name for which to return the role.
diff --git a/src/OgRoleManager.php b/src/OgRoleManager.php
index b35d2c82..5e54fc74 100644
--- a/src/OgRoleManager.php
+++ b/src/OgRoleManager.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\og\Event\DefaultRoleEvent;
 use Drupal\og\Event\DefaultRoleEventInterface;
@@ -17,39 +18,39 @@ class OgRoleManager implements OgRoleManagerInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity storage for OgRole entities.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $ogRoleStorage;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The OG permission manager.
    *
-   * @var \Drupal\og\PermissionManagerInterface
+   * @var PermissionManagerInterface
    */
   protected $permissionManager;
 
   /**
    * Constructs an OgRoleManager object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\og\PermissionManagerInterface $permission_manager
+   * @param PermissionManagerInterface $permission_manager
    *   The OG permission manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher, PermissionManagerInterface $permission_manager) {
@@ -88,7 +89,7 @@ class OgRoleManager implements OgRoleManagerInterface {
     $roles = $this->getRequiredDefaultRoles();
 
     $event = new DefaultRoleEvent();
-    $this->eventDispatcher->dispatch(DefaultRoleEventInterface::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, DefaultRoleEventInterface::EVENT_NAME);
 
     // Use the array union operator '+=' to ensure the default roles cannot be
     // altered by event subscribers.
@@ -179,7 +180,7 @@ class OgRoleManager implements OgRoleManagerInterface {
   /**
    * Retrieves the OG Role storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The OG Role storage
    */
   protected function ogRoleStorage() {
diff --git a/src/OgRoleManagerInterface.php b/src/OgRoleManagerInterface.php
index b7871fa0..7e0fbe69 100644
--- a/src/OgRoleManagerInterface.php
+++ b/src/OgRoleManagerInterface.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og;
 
+use Drupal\og\Entity\OgRole;
 /**
  * Defines an interface for OG role manager.
  */
@@ -19,7 +20,7 @@ interface OgRoleManagerInterface {
    * @param string $bundle_id
    *   The bundle ID of the group for which to create default roles.
    *
-   * @return \Drupal\og\Entity\OgRole[]
+   * @return OgRole[]
    *   Array with the saved OG roles that were created
    */
   public function createPerBundleRoles($entity_type_id, $bundle_id);
@@ -27,7 +28,7 @@ interface OgRoleManagerInterface {
   /**
    * Returns the default roles.
    *
-   * @return \Drupal\og\Entity\OgRole[]
+   * @return OgRole[]
    *   An associative array of (unsaved) OgRole entities, keyed by role name.
    *   These are populated with the basic properties: name, label, role_type and
    *   is_admin.
@@ -40,7 +41,7 @@ interface OgRoleManagerInterface {
    * This provides the 'member' and 'non-member' roles. These are hard coded
    * because they are strictly required and should not be altered.
    *
-   * @return \Drupal\og\Entity\OgRole[]
+   * @return OgRole[]
    *   An associative array of (unsaved) required OgRole entities, keyed by role
    *   name. These are populated with the basic properties: name, label and
    *   role_type.
@@ -55,7 +56,7 @@ interface OgRoleManagerInterface {
    * @param string $bundle
    *   The bundle of the group.
    *
-   * @return \Drupal\og\OgRoleInterface[]
+   * @return OgRoleInterface[]
    *   An array of roles indexed by their IDs.
    */
   public function getRolesByBundle($entity_type_id, $bundle);
@@ -76,7 +77,7 @@ interface OgRoleManagerInterface {
    *   all roles that include one or more of the given permissions will be
    *   returned. Defaults to TRUE.
    *
-   * @return \Drupal\og\OgRoleInterface[]
+   * @return OgRoleInterface[]
    *   An array of roles indexed by their IDs.
    */
   public function getRolesByPermissions(array $permissions, $entity_type_id = NULL, $bundle = NULL, $require_all = TRUE): array;
diff --git a/src/OgRouteGroupResolverBase.php b/src/OgRouteGroupResolverBase.php
index 8b5f165a..3ab9e776 100644
--- a/src/OgRouteGroupResolverBase.php
+++ b/src/OgRouteGroupResolverBase.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -18,21 +19,21 @@ abstract class OgRouteGroupResolverBase extends OgGroupResolverBase implements C
   /**
    * The route matching service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;
 
@@ -52,11 +53,11 @@ abstract class OgRouteGroupResolverBase extends OgGroupResolverBase implements C
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
-   * @param \Drupal\og\GroupTypeManagerInterface $group_type_manager
+   * @param GroupTypeManagerInterface $group_type_manager
    *   The group type manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteMatchInterface $route_match, GroupTypeManagerInterface $group_type_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ -86,7 +87,7 @@ abstract class OgRouteGroupResolverBase extends OgGroupResolverBase implements C
    * This will return the entity if the current route matches the entity paths
    * ('link templates') that are defined in the entity definition.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The entity, or NULL if we are not on a content entity path.
    */
   protected function getContentEntity() {
@@ -118,7 +119,7 @@ abstract class OgRouteGroupResolverBase extends OgGroupResolverBase implements C
   protected function getContentEntityPaths() {
     if (!isset($this->contentEntityPaths)) {
       $this->contentEntityPaths = [];
-      /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+      /** @var EntityTypeInterface[] $entity_types */
       $entity_types = $this->entityTypeManager->getDefinitions();
       foreach ($entity_types as $entity_type_id => $entity_type) {
         if ($entity_type->entityClassImplements(ContentEntityInterface::class)) {
diff --git a/src/PermissionManager.php b/src/PermissionManager.php
index 9c4ab7b5..e05d4fb8 100644
--- a/src/PermissionManager.php
+++ b/src/PermissionManager.php
@@ -16,14 +16,14 @@ class PermissionManager implements PermissionManagerInterface {
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Constructs a PermissionManager object.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
@@ -35,7 +35,7 @@ class PermissionManager implements PermissionManagerInterface {
    */
   public function getDefaultPermissions($group_entity_type_id, $group_bundle_id, array $group_content_bundle_ids, $role_name = NULL) {
     $event = new PermissionEvent($group_entity_type_id, $group_bundle_id, $group_content_bundle_ids);
-    $this->eventDispatcher->dispatch(PermissionEventInterface::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, PermissionEventInterface::EVENT_NAME);
     return $event->getPermissions();
   }
 
diff --git a/src/PermissionManagerInterface.php b/src/PermissionManagerInterface.php
index 1a9f38dd..89d5fed8 100644
--- a/src/PermissionManagerInterface.php
+++ b/src/PermissionManagerInterface.php
@@ -27,7 +27,7 @@ interface PermissionManagerInterface {
    *   Optional default role name to filter the permissions on. If omitted, all
    *   permissions will be returned.
    *
-   * @return \Drupal\og\PermissionInterface[]
+   * @return PermissionInterface[]
    *   The array of permissions.
    */
   public function getDefaultPermissions($group_entity_type_id, $group_bundle_id, array $group_content_bundle_ids, $role_name = NULL);
@@ -52,7 +52,7 @@ interface PermissionManagerInterface {
    *   Optional default role name to filter the permissions on. If omitted, all
    *   permissions will be returned.
    *
-   * @return \Drupal\og\GroupPermission[]
+   * @return GroupPermission[]
    *   An array of permissions that are enabled by default for the given role.
    *
    * @see \Drupal\og\Event\PermissionEventInterface
@@ -82,7 +82,7 @@ interface PermissionManagerInterface {
    *   Optional default role name to filter the permissions on. If omitted, all
    *   permissions will be returned.
    *
-   * @return \Drupal\og\GroupContentOperationPermission[]
+   * @return GroupContentOperationPermission[]
    *   The array of permissions.
    *
    * @see \Drupal\og\Event\PermissionEventInterface
diff --git a/src/Plugin/Action/ChangeMultipleOgMembershipRolesBase.php b/src/Plugin/Action/ChangeMultipleOgMembershipRolesBase.php
index 719bc0b7..e3c05ced 100644
--- a/src/Plugin/Action/ChangeMultipleOgMembershipRolesBase.php
+++ b/src/Plugin/Action/ChangeMultipleOgMembershipRolesBase.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Plugin\Action;
 
+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\og\Entity\OgMembership;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -20,14 +22,14 @@ abstract class ChangeMultipleOgMembershipRolesBase extends ActionBase implements
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;
 
   /**
    * The private temporary storage.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $tempStore;
 
@@ -40,9 +42,9 @@ abstract class ChangeMultipleOgMembershipRolesBase extends ActionBase implements
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The private temporary storage factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, OgAccessInterface $og_access, PrivateTempStoreFactory $temp_store_factory) {
@@ -89,7 +91,7 @@ abstract class ChangeMultipleOgMembershipRolesBase extends ActionBase implements
    * {@inheritdoc}
    */
   public function access($object, ?AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\og\Entity\OgMembership $object */
+    /** @var OgMembership $object */
     // Only grant access if the user has permission to manage members in this
     // group.
     $access = $this->ogAccess->userAccess($object->getGroup(), 'manage members', $account);
diff --git a/src/Plugin/Action/ChangeOgMembershipStateBase.php b/src/Plugin/Action/ChangeOgMembershipStateBase.php
index 4fdb263c..665bf231 100644
--- a/src/Plugin/Action/ChangeOgMembershipStateBase.php
+++ b/src/Plugin/Action/ChangeOgMembershipStateBase.php
@@ -20,7 +20,7 @@ abstract class ChangeOgMembershipStateBase extends ActionBase implements Contain
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;
 
@@ -33,7 +33,7 @@ abstract class ChangeOgMembershipStateBase extends ActionBase implements Contain
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, OgAccessInterface $og_access) {
@@ -67,7 +67,7 @@ abstract class ChangeOgMembershipStateBase extends ActionBase implements Contain
    * {@inheritdoc}
    */
   public function access($object, ?AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\og\Entity\OgMembership $object */
+    /** @var OgMembership $object */
     // Deny access if the membership is not in the required state.
     $original_state = $this->getOriginalState();
     if ($original_state && $object->getState() !== $original_state) {
diff --git a/src/Plugin/Action/ChangeSingleOgMembershipRoleBase.php b/src/Plugin/Action/ChangeSingleOgMembershipRoleBase.php
index b425c1b3..e5954068 100644
--- a/src/Plugin/Action/ChangeSingleOgMembershipRoleBase.php
+++ b/src/Plugin/Action/ChangeSingleOgMembershipRoleBase.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Plugin\Action;
 
+use Drupal\Core\Config\Entity\ConfigEntityTypeInterface;
+use Drupal\og\Entity\OgMembership;
+use Drupal\og\OgRoleInterface;
 use Drupal\Core\Action\ConfigurableActionBase;
 use Drupal\Core\Entity\DependencyTrait;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -24,14 +27,14 @@ abstract class ChangeSingleOgMembershipRoleBase extends ConfigurableActionBase i
   /**
    * The OG role entity type.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityTypeInterface
+   * @var ConfigEntityTypeInterface
    */
   protected $entityType;
 
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;
 
@@ -44,9 +47,9 @@ abstract class ChangeSingleOgMembershipRoleBase extends ConfigurableActionBase i
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The user role entity type.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeInterface $entity_type, OgAccessInterface $og_access) {
@@ -106,7 +109,7 @@ abstract class ChangeSingleOgMembershipRoleBase extends ConfigurableActionBase i
    * {@inheritdoc}
    */
   public function access($object, ?AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\og\Entity\OgMembership $object */
+    /** @var OgMembership $object */
     // Grant access if the user can manage members in this group.
     $access = $this->ogAccess->userAccess($object->getGroup(), 'manage members', $account);
 
@@ -120,7 +123,7 @@ abstract class ChangeSingleOgMembershipRoleBase extends ConfigurableActionBase i
    *   An associative array of labels, keyed by OgRole ID.
    */
   protected function getOgRoleLabels() {
-    /** @var \Drupal\og\OgRoleInterface[] $roles */
+    /** @var OgRoleInterface[] $roles */
     $roles = OgRole::loadMultiple();
     // Do not return the default roles 'member' and 'non-member'. These are
     // required and cannot be added to or removed from a membership.
diff --git a/src/Plugin/Action/DeleteOgMembership.php b/src/Plugin/Action/DeleteOgMembership.php
index 4de67bc5..965c7cbf 100644
--- a/src/Plugin/Action/DeleteOgMembership.php
+++ b/src/Plugin/Action/DeleteOgMembership.php
@@ -25,7 +25,7 @@ class DeleteOgMembership extends ActionBase implements ContainerFactoryPluginInt
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;
 
@@ -38,7 +38,7 @@ class DeleteOgMembership extends ActionBase implements ContainerFactoryPluginInt
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, OgAccessInterface $og_access) {
@@ -72,7 +72,7 @@ class DeleteOgMembership extends ActionBase implements ContainerFactoryPluginInt
    * {@inheritdoc}
    */
   public function access($object, ?AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\og\Entity\OgMembership $object */
+    /** @var OgMembership $object */
     // Grant access if the user can manage members in this group.
     $access = $this->ogAccess->userAccess($object->getGroup(), 'manage members', $account);
 
diff --git a/src/Plugin/Action/UnblockOgMembership.php b/src/Plugin/Action/UnblockOgMembership.php
index 00fba336..fedc3b73 100644
--- a/src/Plugin/Action/UnblockOgMembership.php
+++ b/src/Plugin/Action/UnblockOgMembership.php
@@ -27,7 +27,7 @@ class UnblockOgMembership extends ActionBase implements ContainerFactoryPluginIn
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;
 
@@ -40,7 +40,7 @@ class UnblockOgMembership extends ActionBase implements ContainerFactoryPluginIn
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, OgAccessInterface $og_access) {
@@ -74,7 +74,7 @@ class UnblockOgMembership extends ActionBase implements ContainerFactoryPluginIn
    * {@inheritdoc}
    */
   public function access($object, ?AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\og\Entity\OgMembership $object */
+    /** @var OgMembership $object */
     // Deny access if the membership is not blocked.
     if ($object->getState() !== OgMembershipInterface::STATE_BLOCKED) {
       $access = AccessResult::forbidden();
diff --git a/src/Plugin/Block/MemberCountBlock.php b/src/Plugin/Block/MemberCountBlock.php
index d5787383..0bdabd85 100644
--- a/src/Plugin/Block/MemberCountBlock.php
+++ b/src/Plugin/Block/MemberCountBlock.php
@@ -31,14 +31,14 @@ class MemberCountBlock extends BlockBase implements ContainerFactoryPluginInterf
   /**
    * The OG context provider.
    *
-   * @var \Drupal\og\OgContextInterface
+   * @var OgContextInterface
    */
   protected $ogContext;
 
   /**
    * The membership manager.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;
 
@@ -51,9 +51,9 @@ class MemberCountBlock extends BlockBase implements ContainerFactoryPluginInterf
    *   The plugin ID for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\og\OgContextInterface $og_context
+   * @param OgContextInterface $og_context
    *   The OG context provider.
-   * @param \Drupal\og\MembershipManagerInterface $membership_manager
+   * @param MembershipManagerInterface $membership_manager
    *   The membership manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, OgContextInterface $og_context, MembershipManagerInterface $membership_manager) {
diff --git a/src/Plugin/Block/RecentGroupContentBlock.php b/src/Plugin/Block/RecentGroupContentBlock.php
index fcfe28ff..f90b2aee 100644
--- a/src/Plugin/Block/RecentGroupContentBlock.php
+++ b/src/Plugin/Block/RecentGroupContentBlock.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Plugin\Block;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ -29,28 +30,28 @@ class RecentGroupContentBlock extends BlockBase implements ContainerFactoryPlugi
   /**
    * The OG context provider.
    *
-   * @var \Drupal\og\OgContextInterface
+   * @var OgContextInterface
    */
   protected $ogContext;
 
   /**
    * The entity type manager, needed to load entities.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The OG group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;
 
   /**
    * The bundle information service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
@@ -63,13 +64,13 @@ class RecentGroupContentBlock extends BlockBase implements ContainerFactoryPlugi
    *   The plugin ID for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\og\OgContextInterface $og_context
+   * @param OgContextInterface $og_context
    *   The OG context provider.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\og\GroupTypeManagerInterface $group_type_manager
+   * @param GroupTypeManagerInterface $group_type_manager
    *   The OG group type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The bundle info service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, OgContextInterface $og_context, EntityTypeManagerInterface $entity_type_manager, GroupTypeManagerInterface $group_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
@@ -227,7 +228,7 @@ class RecentGroupContentBlock extends BlockBase implements ContainerFactoryPlugi
   /**
    * Returns the most recent group content for the active group.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The most recent group content for the group which is currently active
    *   according to OgContext.
    */
@@ -243,7 +244,7 @@ class RecentGroupContentBlock extends BlockBase implements ContainerFactoryPlugi
       ->condition('type', OgGroupAudienceHelperInterface::GROUP_REFERENCE)
       ->condition('entity_type', $entity_type);
 
-    /** @var \Drupal\field\FieldStorageConfigInterface[] $fields */
+    /** @var FieldStorageConfigInterface[] $fields */
     $fields = array_filter($field_storage_config_storage->loadMultiple($query->execute()), function (FieldStorageConfigInterface $field) use ($group) {
       $type_matches = $field->getSetting('target_type') === $group->getEntityTypeId();
       // If the list of target bundles is empty, it targets all bundles.
diff --git a/src/Plugin/Condition/GroupType.php b/src/Plugin/Condition/GroupType.php
index 09cd2540..cd770b7a 100644
--- a/src/Plugin/Condition/GroupType.php
+++ b/src/Plugin/Condition/GroupType.php
@@ -28,21 +28,21 @@ class GroupType extends ConditionPluginBase implements ContainerFactoryPluginInt
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
@@ -58,11 +58,11 @@ class GroupType extends ConditionPluginBase implements ContainerFactoryPluginInt
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\og\GroupTypeManagerInterface $group_type_manager
+   * @param GroupTypeManagerInterface $group_type_manager
    *   The group type manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GroupTypeManagerInterface $group_type_manager, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
diff --git a/src/Plugin/Derivative/OgActionLink.php b/src/Plugin/Derivative/OgActionLink.php
index b6e51f1e..53a65f63 100644
--- a/src/Plugin/Derivative/OgActionLink.php
+++ b/src/Plugin/Derivative/OgActionLink.php
@@ -21,23 +21,23 @@ class OgActionLink extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManager
+   * @var GroupTypeManager
    */
   protected $groupTypeManager;
 
   /**
    * Route provider object.
    *
-   * @var \Drupal\Core\Routing\RouteProvider
+   * @var RouteProvider
    */
   protected $routeProvider;
 
   /**
    * Creates an OgLocalTask object.
    *
-   * @param \Drupal\og\GroupTypeManager $group_type_manager
+   * @param GroupTypeManager $group_type_manager
    *   The group type manager.
-   * @param \Drupal\Core\Routing\RouteProvider $route_provider
+   * @param RouteProvider $route_provider
    *   The route provider services.
    */
   public function __construct(GroupTypeManager $group_type_manager, RouteProvider $route_provider) {
diff --git a/src/Plugin/Derivative/OgLocalTask.php b/src/Plugin/Derivative/OgLocalTask.php
index 9135d932..c21e4c8c 100644
--- a/src/Plugin/Derivative/OgLocalTask.php
+++ b/src/Plugin/Derivative/OgLocalTask.php
@@ -21,23 +21,23 @@ class OgLocalTask extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;
 
   /**
    * Route provider object.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routProvider;
 
   /**
    * Creates an OgLocalTask object.
    *
-   * @param \Drupal\og\GroupTypeManagerInterface $group_type_manager
+   * @param GroupTypeManagerInterface $group_type_manager
    *   The group type manager.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider services.
    */
   public function __construct(GroupTypeManagerInterface $group_type_manager, RouteProviderInterface $route_provider) {
diff --git a/src/Plugin/EntityReferenceSelection/OgRoleSelection.php b/src/Plugin/EntityReferenceSelection/OgRoleSelection.php
index d284c16d..97c8b5cc 100644
--- a/src/Plugin/EntityReferenceSelection/OgRoleSelection.php
+++ b/src/Plugin/EntityReferenceSelection/OgRoleSelection.php
@@ -21,7 +21,7 @@ class OgRoleSelection extends DefaultSelection {
   /**
    * Get the selection handler of the field.
    *
-   * @return Drupal\Core\Entity\Plugin\EntityReferenceSelection\DefaultSelection
+   * @return DefaultSelection
    *   Returns the selection handler.
    */
   public function getSelectionHandler() {
diff --git a/src/Plugin/EntityReferenceSelection/OgSelection.php b/src/Plugin/EntityReferenceSelection/OgSelection.php
index 20abe1c3..282c7671 100644
--- a/src/Plugin/EntityReferenceSelection/OgSelection.php
+++ b/src/Plugin/EntityReferenceSelection/OgSelection.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Plugin\EntityReferenceSelection;
 
+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\og\MembershipManagerInterface;
 use Drupal\Core\Entity\Plugin\EntityReferenceSelection\DefaultSelection;
 use Drupal\og\Og;
 
@@ -29,7 +32,7 @@ class OgSelection extends DefaultSelection {
   /**
    * Get the selection handler of the field.
    *
-   * @return \Drupal\Core\Entity\Plugin\EntityReferenceSelection\DefaultSelection
+   * @return DefaultSelection
    *   Returns the selection handler.
    */
   public function getSelectionHandler() {
@@ -57,7 +60,7 @@ class OgSelection extends DefaultSelection {
    *   (Optional) The operation the matching should be done with. Defaults
    *   to "CONTAINS".
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The EntityQuery object with the basic conditions and sorting applied to
    *   it.
    */
@@ -120,11 +123,11 @@ class OgSelection extends DefaultSelection {
   /**
    * Return all the user's groups.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    *   Array with the user's group, or an empty array if none found.
    */
   protected function getUserGroups() {
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
     $other_groups = $membership_manager->getUserGroups($this->currentUser->id());
     return isset($other_groups[$this->configuration['target_type']]) ? $other_groups[$this->configuration['target_type']] : [];
diff --git a/src/Plugin/EntityReferenceSelection/OgUserSelection.php b/src/Plugin/EntityReferenceSelection/OgUserSelection.php
index e17abee0..dcc6383e 100644
--- a/src/Plugin/EntityReferenceSelection/OgUserSelection.php
+++ b/src/Plugin/EntityReferenceSelection/OgUserSelection.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Plugin\EntityReferenceSelection;
 
+use Drupal\user\UserStorageInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -32,14 +34,14 @@ class OgUserSelection extends DefaultSelection {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;
 
@@ -47,7 +49,7 @@ class OgUserSelection extends DefaultSelection {
   /**
    * The OG membership manager.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;
 
@@ -60,21 +62,21 @@ class OgUserSelection extends DefaultSelection {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\og\MembershipManagerInterface $membership_manager
+   * @param MembershipManagerInterface $membership_manager
    *   The OG membership manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, AccountInterface $current_user, EntityFieldManagerInterface $entity_field_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityRepositoryInterface $entity_repository, Connection $connection, MembershipManagerInterface $membership_manager) {
@@ -107,7 +109,7 @@ class OgUserSelection extends DefaultSelection {
   /**
    * Get the selection handler of the field.
    *
-   * @return \Drupal\Core\Entity\Plugin\EntityReferenceSelection\DefaultSelection
+   * @return DefaultSelection
    *   Returns the selection handler.
    */
   public function getSelectionHandler() {
@@ -183,7 +185,7 @@ class OgUserSelection extends DefaultSelection {
 
     // In order to create a referenceable user, it needs to be active.
     if (!$this->currentUser->hasPermission('administer users')) {
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       $user->activate();
     }
 
@@ -198,7 +200,7 @@ class OgUserSelection extends DefaultSelection {
     // Mirror the conditions checked in buildEntityQuery().
     if (!$this->currentUser->hasPermission('administer users')) {
       $entities = array_filter($entities, function ($user) {
-        /** @var \Drupal\user\UserInterface $user */
+        /** @var UserInterface $user */
         return $user->isActive();
       });
     }
diff --git a/src/Plugin/Field/FieldFormatter/GroupSubscribeFormatter.php b/src/Plugin/Field/FieldFormatter/GroupSubscribeFormatter.php
index dc503587..9a65c7d5 100644
--- a/src/Plugin/Field/FieldFormatter/GroupSubscribeFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/GroupSubscribeFormatter.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Plugin\Field\FieldFormatter;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ -37,21 +40,21 @@ class GroupSubscribeFormatter extends FormatterBase implements ContainerFactoryP
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -62,7 +65,7 @@ class GroupSubscribeFormatter extends FormatterBase implements ContainerFactoryP
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -72,15 +75,15 @@ class GroupSubscribeFormatter extends FormatterBase implements ContainerFactoryP
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\og\OgAccessInterface $og_access
+   * @param OgAccessInterface $og_access
    *   The OG access service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, AccountInterface $current_user, OgAccessInterface $og_access, EntityTypeManagerInterface $entity_type_manager) {
     parent::__construct($plugin_id, $plugin_definition, $field_definition, $settings, $label, $view_mode, $third_party_settings);
@@ -150,7 +153,7 @@ class GroupSubscribeFormatter extends FormatterBase implements ContainerFactoryP
       'entity_id' => $group->id(),
     ];
     $memberships = $storage->loadByProperties($props);
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = reset($memberships);
 
     if ($membership) {
@@ -187,7 +190,7 @@ class GroupSubscribeFormatter extends FormatterBase implements ContainerFactoryP
       }
       $cache_meta->applyTo($elements);
 
-      /** @var \Drupal\Core\Access\AccessResult $access */
+      /** @var AccessResult $access */
       if (($access = $this->ogAccess->userAccess($group, 'subscribe without approval', $user)) && $access->isAllowed()) {
         $link['title'] = $this->t('Subscribe to group');
         $link['class'] = ['subscribe'];
diff --git a/src/Plugin/Field/FieldWidget/OgComplex.php b/src/Plugin/Field/FieldWidget/OgComplex.php
index fe0cd54c..998519aa 100644
--- a/src/Plugin/Field/FieldWidget/OgComplex.php
+++ b/src/Plugin/Field/FieldWidget/OgComplex.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Plugin\Field\FieldWidget;
 
+use Drupal\og\MembershipManagerInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldFilteredMarkup;
@@ -70,7 +71,7 @@ class OgComplex extends EntityReferenceAutocompleteWidget {
 
     $target_type = $this->fieldDefinition->getFieldStorageDefinition()->getSetting('target_type');
 
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
     $user_groups = $membership_manager->getUserGroups(\Drupal::currentUser()->id());
     $user_groups_target_type = isset($user_groups[$target_type]) ? $user_groups[$target_type] : [];
@@ -189,9 +190,9 @@ class OgComplex extends EntityReferenceAutocompleteWidget {
   /**
    * Adding the other groups widget to the form.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The existing items to add to the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -236,7 +237,7 @@ class OgComplex extends EntityReferenceAutocompleteWidget {
 
     $target_type = $this->fieldDefinition->getFieldStorageDefinition()->getSetting('target_type');
 
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
     $user_groups = $membership_manager->getUserGroups(\Drupal::currentUser()->id());
     $user_groups_target_type = isset($user_groups[$target_type]) ? $user_groups[$target_type] : [];
@@ -283,7 +284,7 @@ class OgComplex extends EntityReferenceAutocompleteWidget {
    * @param int $delta
    *   The delta of the new element. Need to be the last delta in order to be
    *   added in the end of the list.
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   The entity object.
    * @param int $weight_delta
    *   The delta of the item.
diff --git a/src/Plugin/OgGroupResolver/RequestQueryArgumentResolver.php b/src/Plugin/OgGroupResolver/RequestQueryArgumentResolver.php
index f1b3d859..5ffba27a 100644
--- a/src/Plugin/OgGroupResolver/RequestQueryArgumentResolver.php
+++ b/src/Plugin/OgGroupResolver/RequestQueryArgumentResolver.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Plugin\OgGroupResolver;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -40,21 +41,21 @@ class RequestQueryArgumentResolver extends OgGroupResolverBase implements Contai
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -67,11 +68,11 @@ class RequestQueryArgumentResolver extends OgGroupResolverBase implements Contai
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\og\GroupTypeManagerInterface $group_type_manager
+   * @param GroupTypeManagerInterface $group_type_manager
    *   The group type manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RequestStack $request_stack, GroupTypeManagerInterface $group_type_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ -111,7 +112,7 @@ class RequestQueryArgumentResolver extends OgGroupResolverBase implements Contai
       }
 
       // Load the entity and check if it is a group.
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       if ($entity = $storage->load($query->get(self::GROUP_ID_ARGUMENT))) {
         if ($this->groupTypeManager->isGroup($entity->getEntityTypeId(), $entity->bundle())) {
           // Only add a vote for the group if it already has been discovered by
diff --git a/src/Plugin/OgGroupResolver/RouteGroupContentResolver.php b/src/Plugin/OgGroupResolver/RouteGroupContentResolver.php
index 015fe9dd..bddcf63d 100644
--- a/src/Plugin/OgGroupResolver/RouteGroupContentResolver.php
+++ b/src/Plugin/OgGroupResolver/RouteGroupContentResolver.php
@@ -30,14 +30,14 @@ class RouteGroupContentResolver extends OgRouteGroupResolverBase {
   /**
    * The OG membership manager.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;
 
   /**
    * The OG group audience helper.
    *
-   * @var \Drupal\og\OgGroupAudienceHelperInterface
+   * @var OgGroupAudienceHelperInterface
    */
   protected $groupAudienceHelper;
 
@@ -50,15 +50,15 @@ class RouteGroupContentResolver extends OgRouteGroupResolverBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
-   * @param \Drupal\og\GroupTypeManagerInterface $group_type_manager
+   * @param GroupTypeManagerInterface $group_type_manager
    *   The group type manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\og\MembershipManagerInterface $membership_manager
+   * @param MembershipManagerInterface $membership_manager
    *   The OG membership manager.
-   * @param \Drupal\og\OgGroupAudienceHelperInterface $group_audience_helper
+   * @param OgGroupAudienceHelperInterface $group_audience_helper
    *   The OG group audience helper.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteMatchInterface $route_match, GroupTypeManagerInterface $group_type_manager, EntityTypeManagerInterface $entity_type_manager, MembershipManagerInterface $membership_manager, OgGroupAudienceHelperInterface $group_audience_helper) {
diff --git a/src/Plugin/OgGroupResolver/UserGroupAccessResolver.php b/src/Plugin/OgGroupResolver/UserGroupAccessResolver.php
index ad058cf2..179273a1 100644
--- a/src/Plugin/OgGroupResolver/UserGroupAccessResolver.php
+++ b/src/Plugin/OgGroupResolver/UserGroupAccessResolver.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Plugin\OgGroupResolver;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\og\OgGroupResolverBase;
 use Drupal\og\OgResolvedGroupCollectionInterface;
 
@@ -27,7 +28,7 @@ class UserGroupAccessResolver extends OgGroupResolverBase {
    */
   public function resolve(OgResolvedGroupCollectionInterface $collection) {
     foreach ($collection->getGroupInfo() as $group_info) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $group */
+      /** @var ContentEntityInterface $group */
       $group = $group_info['entity'];
 
       // If the current user has access, cast a vote along with the 'user'
diff --git a/src/Plugin/QueueWorker/DeleteOrphan.php b/src/Plugin/QueueWorker/DeleteOrphan.php
index a8a36bd3..16c66431 100644
--- a/src/Plugin/QueueWorker/DeleteOrphan.php
+++ b/src/Plugin/QueueWorker/DeleteOrphan.php
@@ -23,7 +23,7 @@ class DeleteOrphan extends QueueWorkerBase implements ContainerFactoryPluginInte
   /**
    * The plugin manager for OgDeleteOrphans plugins.
    *
-   * @var \Drupal\og\OgDeleteOrphansPluginManager
+   * @var OgDeleteOrphansPluginManager
    */
   protected $ogDeleteOrphansPluginManager;
 
@@ -36,7 +36,7 @@ class DeleteOrphan extends QueueWorkerBase implements ContainerFactoryPluginInte
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\og\OgDeleteOrphansPluginManager $og_delete_orphans_plugin_manager
+   * @param OgDeleteOrphansPluginManager $og_delete_orphans_plugin_manager
    *   The plugin manager for OgDeleteOrphans plugins.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, OgDeleteOrphansPluginManager $og_delete_orphans_plugin_manager) {
diff --git a/src/Plugin/Validation/Constraint/UniqueOgMembershipConstraintValidator.php b/src/Plugin/Validation/Constraint/UniqueOgMembershipConstraintValidator.php
index bfcb3390..b696dcae 100644
--- a/src/Plugin/Validation/Constraint/UniqueOgMembershipConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/UniqueOgMembershipConstraintValidator.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Plugin\Validation\Constraint;
 
+use Drupal\Core\Field\FieldItemInterface;
+use Drupal\og\Entity\OgMembership;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -25,14 +27,14 @@ class UniqueOgMembershipConstraintValidator extends ConstraintValidator implemen
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a UniqueOgMembershipConstraintValidator object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -52,12 +54,12 @@ class UniqueOgMembershipConstraintValidator extends ConstraintValidator implemen
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Field\FieldItemInterface $value */
+    /** @var FieldItemInterface $value */
     if (!isset($value)) {
       return;
     }
 
-    /** @var \Drupal\og\Entity\OgMembership $entity */
+    /** @var OgMembership $entity */
     $entity = $value->getEntity();
 
     // Only applicable to new memberships.
diff --git a/src/Plugin/Validation/Constraint/ValidOgMembershipReferenceConstraintValidator.php b/src/Plugin/Validation/Constraint/ValidOgMembershipReferenceConstraintValidator.php
index 3cf690a4..0e91b266 100644
--- a/src/Plugin/Validation/Constraint/ValidOgMembershipReferenceConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/ValidOgMembershipReferenceConstraintValidator.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Plugin\Validation\Constraint;
 
+use Drupal\Core\Field\FieldItemInterface;
 use Drupal\og\Og;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
@@ -17,7 +18,7 @@ class ValidOgMembershipReferenceConstraintValidator extends ConstraintValidator
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Field\FieldItemInterface $value */
+    /** @var FieldItemInterface $value */
     if (!isset($value)) {
       return;
     }
diff --git a/src/Plugin/Validation/Constraint/ValidOgRoleConstraintValidator.php b/src/Plugin/Validation/Constraint/ValidOgRoleConstraintValidator.php
index 6eefd8ca..e6bf88c2 100644
--- a/src/Plugin/Validation/Constraint/ValidOgRoleConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/ValidOgRoleConstraintValidator.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Plugin\Validation\Constraint;
 
+use Drupal\Core\Field\FieldItemInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
 
@@ -16,7 +17,7 @@ class ValidOgRoleConstraintValidator extends ConstraintValidator {
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Field\FieldItemInterface $value */
+    /** @var FieldItemInterface $value */
     if (!isset($value)) {
       return;
     }
diff --git a/src/Plugin/views/argument_default/Group.php b/src/Plugin/views/argument_default/Group.php
index 9ff3743d..b4652065 100644
--- a/src/Plugin/views/argument_default/Group.php
+++ b/src/Plugin/views/argument_default/Group.php
@@ -25,7 +25,7 @@ class Group extends ArgumentDefaultPluginBase implements CacheableDependencyInte
   /**
    * The OG context provider.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextProviderInterface
+   * @var ContextProviderInterface
    */
   protected $ogContext;
 
@@ -38,7 +38,7 @@ class Group extends ArgumentDefaultPluginBase implements CacheableDependencyInte
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Plugin\Context\ContextProviderInterface $og_context
+   * @param ContextProviderInterface $og_context
    *   The OG context provider.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ContextProviderInterface $og_context) {
@@ -116,7 +116,7 @@ class Group extends ArgumentDefaultPluginBase implements CacheableDependencyInte
   /**
    * Returns the group that is relevant in the current context.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The group, or NULL if no group is found.
    */
   protected function getGroup() {
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index d616903a..ad96ee4b 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Routing;
 
+use Drupal\Core\Routing\RouteProvider;
+use Symfony\Component\EventDispatcher\EventDispatcher;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\RouteProviderInterface;
 use Drupal\Core\Routing\RouteSubscriberBase;
@@ -26,32 +28,32 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The route provider service.
    *
-   * @var \Drupal\Core\Routing\RouteProvider
+   * @var RouteProvider
    */
   protected $routeProvider;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $eventDispatcher;
 
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RouteProviderInterface $route_provider, EventDispatcherInterface $event_dispatcher) {
@@ -115,12 +117,12 @@ class RouteSubscriber extends RouteSubscriberBase {
    *   The OG admin path.
    * @param string $entity_type_id
    *   The entity type ID.
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection object.
    */
   protected function createRoutesFromEventSubscribers($og_admin_path, $entity_type_id, RouteCollection $collection) {
     $event = new OgAdminRoutesEvent();
-    $this->eventDispatcher->dispatch(OgAdminRoutesEventInterface::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, OgAdminRoutesEventInterface::EVENT_NAME);
 
     foreach ($event->getRoutes($entity_type_id) as $name => $route_info) {
       // Add the parent route.
@@ -134,7 +136,7 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * Helper method to add route to collection.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The collection route.
    * @param string $route_name
    *   The route name.
diff --git a/tests/modules/og_test/og_test.module b/tests/modules/og_test/og_test.module
index c0e04808..5c32418d 100644
--- a/tests/modules/og_test/og_test.module
+++ b/tests/modules/og_test/og_test.module
@@ -6,6 +6,7 @@
  */
 
 declare(strict_types = 1);
+use Drupal\Core\Session\AccountProxyInterface;
 
 use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Core\Access\AccessResultInterface;
@@ -52,7 +53,7 @@ function og_test_og_user_access_entity_operation_alter(AccessResultInterface &$a
   if (\Drupal::state()->get('og_test_group_content_entity_operation_access_alter', FALSE)) {
     // Moderators should have access to edit and delete all comments in all
     // groups.
-    /** @var \Drupal\Core\Session\AccountProxyInterface $user */
+    /** @var AccountProxyInterface $user */
     $user = $context['user'];
     $group_content = $context['group_content'];
 
diff --git a/tests/modules/og_test/src/EventSubscriber/OgTestEventSubscriber.php b/tests/modules/og_test/src/EventSubscriber/OgTestEventSubscriber.php
index aa6300eb..be9b5e1a 100644
--- a/tests/modules/og_test/src/EventSubscriber/OgTestEventSubscriber.php
+++ b/tests/modules/og_test/src/EventSubscriber/OgTestEventSubscriber.php
@@ -16,14 +16,14 @@ class OgTestEventSubscriber implements EventSubscriberInterface {
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * Constructs an OgTestEventSubscriber.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    */
   public function __construct(StateInterface $state) {
@@ -42,7 +42,7 @@ class OgTestEventSubscriber implements EventSubscriberInterface {
   /**
    * Allows moderators to edit and delete comments in all groups.
    *
-   * @param \Drupal\og\Event\GroupContentEntityOperationAccessEventInterface $event
+   * @param GroupContentEntityOperationAccessEventInterface $event
    *   The event that fires when an entity operation is being performed on group
    *   content.
    */
diff --git a/tests/src/Functional/GroupSubscribeFormatterTest.php b/tests/src/Functional/GroupSubscribeFormatterTest.php
index 733a14f0..b6ddcecd 100644
--- a/tests/src/Functional/GroupSubscribeFormatterTest.php
+++ b/tests/src/Functional/GroupSubscribeFormatterTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Functional;
 
+use Drupal\node\NodeInterface;
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ -31,7 +33,7 @@ class GroupSubscribeFormatterTest extends BrowserTestBase {
   /**
    * Test entity group.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $group;
 
@@ -45,14 +47,14 @@ class GroupSubscribeFormatterTest extends BrowserTestBase {
   /**
    * A non-author user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user1;
 
   /**
    * A non-author user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user2;
 
@@ -85,7 +87,7 @@ class GroupSubscribeFormatterTest extends BrowserTestBase {
     ]);
     $this->group->save();
 
-    /** @var \Drupal\og\Entity\OgRole $role */
+    /** @var OgRole $role */
     $role = OgRole::getRole('node', $this->groupBundle, OgRoleInterface::ANONYMOUS);
     $role
       ->grantPermission('subscribe without approval')
diff --git a/tests/src/Functional/GroupSubscribeTest.php b/tests/src/Functional/GroupSubscribeTest.php
index ce66ce30..8f0be3e8 100644
--- a/tests/src/Functional/GroupSubscribeTest.php
+++ b/tests/src/Functional/GroupSubscribeTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\og\MembershipManager;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
 use Drupal\node\NodeInterface;
@@ -37,35 +40,35 @@ class GroupSubscribeTest extends BrowserTestBase {
   /**
    * Test entity group.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $groupB1No1;
 
   /**
    * Test entity group.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $groupB2No1;
 
   /**
    * Test entity group.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $groupB1No2Unpublished;
 
   /**
    * Test entity group.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $nonGroup;
 
   /**
    * Test entity group.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $groupB3No1;
 
@@ -107,7 +110,7 @@ class GroupSubscribeTest extends BrowserTestBase {
   /**
    * Test normal user with no connection to the organic group.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $normalUser;
 
@@ -286,7 +289,7 @@ class GroupSubscribeTest extends BrowserTestBase {
       $new_user = $this->drupalCreateUser();
       $this->drupalLogin($new_user);
       $entity = NULL;
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       if (!empty($scenario['entity'])) {
         $entity = $scenario['entity'];
         $entity_type_id = $entity->getEntityTypeId();
@@ -330,7 +333,7 @@ class GroupSubscribeTest extends BrowserTestBase {
       $this->assertSession()->elementNotExists('css', '#edit-state');
       $this->click('#edit-submit');
       $this->assertSession()->statusCodeEquals(200);
-      /** @var \Drupal\og\MembershipManager $membership_manager */
+      /** @var MembershipManager $membership_manager */
       $membership_manager = $this->container->get('og.membership_manager');
       $this->assertTrue($membership_manager->isMember($entity, $new_user->id(), $expected_state));
 
diff --git a/tests/src/Functional/GroupTabTest.php b/tests/src/Functional/GroupTabTest.php
index cb489d8a..e63353e7 100644
--- a/tests/src/Functional/GroupTabTest.php
+++ b/tests/src/Functional/GroupTabTest.php
@@ -4,6 +4,10 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Functional;
 
+use Drupal\node\NodeInterface;
+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\og\MembershipManager;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Url;
 use Drupal\entity_test\Entity\EntityTest;
@@ -39,14 +43,14 @@ class GroupTabTest extends BrowserTestBase {
   /**
    * Test entity group.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $groupNode;
 
   /**
    * Test non-group entity.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $nonGroup;
 
@@ -60,56 +64,56 @@ class GroupTabTest extends BrowserTestBase {
   /**
    * The group author user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $authorUser;
 
   /**
    * The group administrator user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $groupAdminUser;
 
   /**
    * A group user with 'manage members' permission.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $groupManagerUser;
 
   /**
    * The node group membership for another user.
    *
-   * @var \Drupal\og\OgMembershipInterface
+   * @var OgMembershipInterface
    */
   protected $anotherNodeMembership;
 
   /**
    * A group that is of type entity_test.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $groupTestEntity;
 
   /**
    * The entity_test group membership for another user.
    *
-   * @var \Drupal\og\OgMembershipInterface
+   * @var OgMembershipInterface
    */
   protected $anotherTestEntityMembership;
 
   /**
    * A administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user1;
 
   /**
    * A non-author user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user2;
 
@@ -200,9 +204,9 @@ class GroupTabTest extends BrowserTestBase {
   public function testMembershipAdd() {
     $loop = 0;
     $random_name = $this->randomMachineName();
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manger */
+    /** @var EntityTypeManagerInterface $entity_type_manger */
     $entity_type_manger = $this->container->get('entity_type.manager');
-    /** @var \Drupal\og\MembershipManager $membership_manager */
+    /** @var MembershipManager $membership_manager */
     $membership_manager = $this->container->get('og.membership_manager');
     foreach ($this->membershipAddScenarios() as $scenario) {
       [$account] = $scenario;
@@ -214,7 +218,7 @@ class GroupTabTest extends BrowserTestBase {
 
       foreach ($group_data as $data) {
         [$group, $membership] = $data;
-        /** @var \Drupal\og\OgMembershipInterface $membership */
+        /** @var OgMembershipInterface $membership */
         $exiting_member = $membership->getOwner();
         $this->drupalGet($this->groupMemberAddFormUrl($group));
         $value = $exiting_member->getDisplayName() . ' (' . $exiting_member->id() . ')';
@@ -273,7 +277,7 @@ class GroupTabTest extends BrowserTestBase {
   public function testBlockedUserAdd() {
     $this->drupalLogin($this->groupAdminUser);
     $blocked_user = $this->drupalCreateUser([], 'bbblocked', FALSE, ['status' => 0]);
-    /** @var \Drupal\og\MembershipManager $membership_manager */
+    /** @var MembershipManager $membership_manager */
     $membership_manager = $this->container->get('og.membership_manager');
     $group_data = [
       [$this->groupNode, $this->anotherNodeMembership],
@@ -282,7 +286,7 @@ class GroupTabTest extends BrowserTestBase {
 
     foreach ($group_data as $data) {
       [$group, $membership] = $data;
-      /** @var \Drupal\og\OgMembershipInterface $membership */
+      /** @var OgMembershipInterface $membership */
       $exiting_member = $membership->getOwner();
       $membership->setState(OgMembershipInterface::STATE_BLOCKED);
       $membership->save();
@@ -328,10 +332,10 @@ class GroupTabTest extends BrowserTestBase {
   /**
    * Get the Url for the member add for for a group.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The Url object.
    */
   protected function groupMemberAddFormUrl(EntityInterface $group): Url {
@@ -347,7 +351,7 @@ class GroupTabTest extends BrowserTestBase {
   /**
    * Assert an expected number of matches looking to add a user to a group.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group.
    * @param string $match
    *   The search string.
diff --git a/tests/src/Functional/OgComplexWidgetTest.php b/tests/src/Functional/OgComplexWidgetTest.php
index 28fbe54b..b43a6ab6 100644
--- a/tests/src/Functional/OgComplexWidgetTest.php
+++ b/tests/src/Functional/OgComplexWidgetTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Functional;
 
+use Drupal\node\NodeInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
 use Drupal\Tests\node\Traits\NodeCreationTrait;
@@ -103,7 +104,7 @@ class OgComplexWidgetTest extends BrowserTestBase {
       ->execute();
     $post_nid = reset($result);
 
-    /** @var \Drupal\node\NodeInterface $post */
+    /** @var NodeInterface $post */
     $post = Node::load($post_nid);
 
     // Check that the post references the group correctly.
diff --git a/tests/src/Kernel/Access/AccessByOgMembershipTest.php b/tests/src/Kernel/Access/AccessByOgMembershipTest.php
index 2a60deee..55ac3cff 100644
--- a/tests/src/Kernel/Access/AccessByOgMembershipTest.php
+++ b/tests/src/Kernel/Access/AccessByOgMembershipTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Access;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
@@ -47,21 +50,21 @@ class AccessByOgMembershipTest extends KernelTestBase {
   /**
    * A test group.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $group;
 
   /**
    * Test group content entities.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $groupContent;
 
   /**
    * Test users.
    *
-   * @var \Drupal\Core\Session\AccountInterface[]
+   * @var AccountInterface[]
    */
   protected $users;
 
@@ -136,7 +139,7 @@ class AccessByOgMembershipTest extends KernelTestBase {
 
     // Grant both members and non-members permission to edit any group content.
     foreach ([OgRoleInterface::AUTHENTICATED, OgRoleInterface::ANONYMOUS] as $role_name) {
-      /** @var \Drupal\og\Entity\OgRole $role */
+      /** @var OgRole $role */
       $role = OgRole::getRole('block_content', 'group', $role_name);
 
       $role
@@ -178,7 +181,7 @@ class AccessByOgMembershipTest extends KernelTestBase {
    */
   public function testEntityOperationAccess($user, array $expected_results) {
     foreach ($expected_results as $group_content => $expected_result) {
-      /** @var \Drupal\Core\Access\AccessResult $result */
+      /** @var AccessResult $result */
       $result = og_entity_access($this->groupContent[$group_content], 'update', $this->users[$user]);
       $this->assertEquals($expected_result, $result->isAllowed());
     }
@@ -188,7 +191,7 @@ class AccessByOgMembershipTest extends KernelTestBase {
    * Tests exception is thrown when trying to save non-member role.
    */
   public function testNonMemberRoleMembershipSave() {
-    /** @var \Drupal\og\Entity\OgRole $role */
+    /** @var OgRole $role */
     $role = OgRole::getRole('block_content', 'group', OgRoleInterface::ANONYMOUS);
 
     $role
diff --git a/tests/src/Kernel/Access/GroupContentOperationAccessAlterTest.php b/tests/src/Kernel/Access/GroupContentOperationAccessAlterTest.php
index b144cdbb..f39ac312 100644
--- a/tests/src/Kernel/Access/GroupContentOperationAccessAlterTest.php
+++ b/tests/src/Kernel/Access/GroupContentOperationAccessAlterTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Access;
 
+use Drupal\og\OgAccessInterface;
+use Drupal\user\UserInterface;
+use Drupal\comment\CommentInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;
 use Drupal\comment\Entity\Comment;
@@ -40,28 +43,28 @@ class GroupContentOperationAccessAlterTest extends KernelTestBase {
   /**
    * The OG access service. This is the system under test.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;
 
   /**
    * A test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * A test group.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $group;
 
   /**
    * A test group content entity.
    *
-   * @var \Drupal\comment\CommentInterface
+   * @var CommentInterface
    */
   protected $groupContent;
 
diff --git a/tests/src/Kernel/Access/GroupLevelAccessTest.php b/tests/src/Kernel/Access/GroupLevelAccessTest.php
index 3185e3d8..c801338e 100644
--- a/tests/src/Kernel/Access/GroupLevelAccessTest.php
+++ b/tests/src/Kernel/Access/GroupLevelAccessTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Access;
 
+use Drupal\og\OgAccessInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\entity_test\Entity\EntityTest;
@@ -37,42 +39,42 @@ class GroupLevelAccessTest extends KernelTestBase {
   /**
    * The OgAccess service, this is the system under test.
    *
-   * @var \Drupal\og\OgAccessInterface
+   * @var OgAccessInterface
    */
   protected $ogAccess;
 
   /**
    * A user object.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $nonMemberUser;
 
   /**
    * The group owner.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $ownerUser;
 
   /**
    * An admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;
 
   /**
    * A second administrator which has an alternative administration role.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $alternativeAdminUser;
 
   /**
    * A group entity.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $group;
 
@@ -129,7 +131,7 @@ class GroupLevelAccessTest extends KernelTestBase {
     // Create another administrator role and assign it to a second test user.
     // This is a supported use case: it is possible to have multiple
     // administration roles.
-    /** @var \Drupal\og\OgRoleInterface $alternative_admin_role */
+    /** @var OgRoleInterface $alternative_admin_role */
     $alternative_admin_role = $this->createOgRole([], TRUE);
     $this->alternativeAdminUser = $this->createUserWithOgRole($alternative_admin_role);
   }
@@ -159,7 +161,7 @@ class GroupLevelAccessTest extends KernelTestBase {
 
     // Grant the arbitrary permission to non-members and check that our
     // non-member now has the permission.
-    /** @var \Drupal\og\Entity\OgRole $role */
+    /** @var OgRole $role */
     $role = OgRole::loadByGroupAndName($this->group, OgRoleInterface::ANONYMOUS);
     $role
       ->grantPermission('some_perm')
@@ -288,7 +290,7 @@ class GroupLevelAccessTest extends KernelTestBase {
         $result = AccessResult::neutral();
       }
       else {
-        /** @var \Drupal\Core\Access\AccessResultInterface $result */
+        /** @var AccessResultInterface $result */
         $result = array_shift($hook_result);
         foreach ($hook_result as $other) {
           $result = $result->orIf($other);
@@ -302,7 +304,7 @@ class GroupLevelAccessTest extends KernelTestBase {
   /**
    * Returns test users with permissions to perform group entity operations.
    *
-   * @return \Drupal\user\UserInterface[]
+   * @return UserInterface[]
    *   The test users.
    */
   protected function setupGroupEntityOperationPermissions(): array {
@@ -374,11 +376,11 @@ class GroupLevelAccessTest extends KernelTestBase {
    * @param bool $is_admin
    *   Whether or not this is an admin role.
    *
-   * @return \Drupal\og\OgRoleInterface
+   * @return OgRoleInterface
    *   The newly created role.
    */
   protected function createOgRole(array $permissions = [], bool $is_admin = FALSE): OgRoleInterface {
-    /** @var \Drupal\og\OgRoleInterface $role */
+    /** @var OgRoleInterface $role */
     $role = OgRole::create();
     $role
       ->setName($this->randomMachineName())
@@ -399,10 +401,10 @@ class GroupLevelAccessTest extends KernelTestBase {
   /**
    * Creates a test user and assigns it a membership with the given role.
    *
-   * @param \Drupal\og\OgRoleInterface $role
+   * @param OgRoleInterface $role
    *   The OG role to assign to the newly created user.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The newly created user.
    */
   protected function createUserWithOgRole(OgRoleInterface $role): UserInterface {
diff --git a/tests/src/Kernel/Access/OgAccessHookTest.php b/tests/src/Kernel/Access/OgAccessHookTest.php
index 36765d11..ab94eef4 100644
--- a/tests/src/Kernel/Access/OgAccessHookTest.php
+++ b/tests/src/Kernel/Access/OgAccessHookTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Access;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Access\AccessResult;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\og\Traits\OgMembershipCreationTrait;
 use Drupal\block_content\Entity\BlockContent;
@@ -43,35 +46,35 @@ class OgAccessHookTest extends KernelTestBase {
   /**
    * A test group.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $group;
 
   /**
    * Test group content entities.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $groupContent;
 
   /**
    * Test non group content entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $nonGroupContent;
 
   /**
    * Test users.
    *
-   * @var \Drupal\Core\Session\AccountInterface[]
+   * @var AccountInterface[]
    */
   protected $users;
 
   /**
    * Test roles.
    *
-   * @var \Drupal\user\Entity\Role[]
+   * @var Role[]
    */
   protected $roles;
 
@@ -160,7 +163,7 @@ class OgAccessHookTest extends KernelTestBase {
     Og::createField(OgGroupAudienceHelperInterface::DEFAULT_FIELD, 'node', 'group_content', $settings);
 
     // Grant members permission to edit their own content.
-    /** @var \Drupal\og\Entity\OgRole $role */
+    /** @var OgRole $role */
     $role = OgRole::getRole('block_content', 'group', OgRoleInterface::AUTHENTICATED);
     $role->grantPermission('edit own group_content content');
     $role->save();
@@ -205,7 +208,7 @@ class OgAccessHookTest extends KernelTestBase {
    */
   public function testEntityOperationAccess($user, array $expected_results) {
     foreach ($expected_results as $group_content => $expected_result) {
-      /** @var \Drupal\Core\Access\AccessResult $result */
+      /** @var AccessResult $result */
       $result = og_entity_access($this->groupContent[$group_content], 'update', $this->users[$user]);
       $this->assertEquals($expected_result, $result->isAllowed());
     }
diff --git a/tests/src/Kernel/Access/OgGroupContentOperationAccessTest.php b/tests/src/Kernel/Access/OgGroupContentOperationAccessTest.php
index ac933989..11d999d8 100644
--- a/tests/src/Kernel/Access/OgGroupContentOperationAccessTest.php
+++ b/tests/src/Kernel/Access/OgGroupContentOperationAccessTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Access;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\og\OgAccessInterface;
 use Drupal\comment\Entity\CommentType;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\KernelTests\KernelTestBase;
@@ -42,14 +45,14 @@ class OgGroupContentOperationAccessTest extends KernelTestBase {
   /**
    * An array of test users.
    *
-   * @var \Drupal\user\Entity\User[]
+   * @var User[]
    */
   protected $users;
 
   /**
    * A test group.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $group;
 
@@ -63,21 +66,21 @@ class OgGroupContentOperationAccessTest extends KernelTestBase {
   /**
    * An array of test roles.
    *
-   * @var \Drupal\og\OgRoleInterface[]
+   * @var OgRoleInterface[]
    */
   protected $roles;
 
   /**
    * An array of test group content, keyed by bundle ID and user ID.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface[][]
+   * @var ContentEntityInterface[][]
    */
   protected $groupContent;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -257,7 +260,7 @@ class OgGroupContentOperationAccessTest extends KernelTestBase {
    * @dataProvider accessProvider
    */
   public function testAccess($group_content_bundle_id, $expected_access_matrix) {
-    /** @var \Drupal\og\OgAccessInterface $og_access */
+    /** @var OgAccessInterface $og_access */
     $og_access = $this->container->get('og.access');
 
     foreach ($expected_access_matrix as $user_id => $operations) {
diff --git a/tests/src/Kernel/Action/ActionTestBase.php b/tests/src/Kernel/Action/ActionTestBase.php
index 5c9028ca..fb384e79 100644
--- a/tests/src/Kernel/Action/ActionTestBase.php
+++ b/tests/src/Kernel/Action/ActionTestBase.php
@@ -4,6 +4,12 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Action;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\og\MembershipManagerInterface;
+use Drupal\og\GroupTypeManagerInterface;
+use Drupal\Core\Action\ActionInterface;
+use Drupal\Core\Action\ActionManager;
 use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Core\Session\AnonymousUserSession;
 use Drupal\KernelTests\KernelTestBase;
@@ -38,42 +44,42 @@ abstract class ActionTestBase extends KernelTestBase {
   /**
    * An array of test users.
    *
-   * @var \Drupal\Core\Session\AccountInterface[]
+   * @var AccountInterface[]
    */
   protected $users;
 
   /**
    * An array of test memberships.
    *
-   * @var \Drupal\og\OgMembershipInterface[]
+   * @var OgMembershipInterface[]
    */
   protected $memberships;
 
   /**
    * A test group.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $group;
 
   /**
    * An array of test OG roles.
    *
-   * @var \Drupal\og\OgRoleInterface[]
+   * @var OgRoleInterface[]
    */
   protected $roles;
 
   /**
    * The OG membership manager.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;
 
   /**
    * The OG group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;
 
@@ -188,11 +194,11 @@ abstract class ActionTestBase extends KernelTestBase {
    * @var array $configuration
    *   An array of configuration relevant to the plugin instance.
    *
-   * @return \Drupal\Core\Action\ActionInterface
+   * @return ActionInterface
    *   The plugin instance.
    */
   public function getPlugin($configuration = []) {
-    /** @var \Drupal\Core\Action\ActionManager $plugin_manager */
+    /** @var ActionManager $plugin_manager */
     $plugin_manager = $this->container->get('plugin.manager.action');
     return $plugin_manager->createInstance($this->pluginId, $configuration);
   }
@@ -205,6 +211,7 @@ abstract class ActionTestBase extends KernelTestBase {
    *
    * @covers ::execute
    * @dataProvider executeProvider
+   * @doesNotPerformAssertions
    */
   abstract public function testExecute($membership);
 
diff --git a/tests/src/Kernel/Action/AddSingleOgMembershipRoleActionTest.php b/tests/src/Kernel/Action/AddSingleOgMembershipRoleActionTest.php
index 4b3e7cca..505f4235 100644
--- a/tests/src/Kernel/Action/AddSingleOgMembershipRoleActionTest.php
+++ b/tests/src/Kernel/Action/AddSingleOgMembershipRoleActionTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Action;
 
+use Drupal\og\Plugin\Action\AddSingleOgMembershipRole;
 use Drupal\og\Entity\OgRole;
 
 /**
@@ -35,7 +36,7 @@ class AddSingleOgMembershipRoleActionTest extends ChangeOgMembershipActionTestBa
    * @dataProvider executeProvider
    */
   public function testExecute($membership, $default_role_name = NULL, $expected_role_name = NULL) {
-    /** @var \Drupal\og\Plugin\Action\AddSingleOgMembershipRole $plugin */
+    /** @var AddSingleOgMembershipRole $plugin */
     $configuration = !empty($default_role_name) ? ['role_name' => $default_role_name] : [];
     $plugin = $this->getPlugin($configuration);
     $plugin->execute($this->memberships[$membership]);
diff --git a/tests/src/Kernel/Action/ApprovePendingOgMembershipActionTest.php b/tests/src/Kernel/Action/ApprovePendingOgMembershipActionTest.php
index e36036ef..e2bfe298 100644
--- a/tests/src/Kernel/Action/ApprovePendingOgMembershipActionTest.php
+++ b/tests/src/Kernel/Action/ApprovePendingOgMembershipActionTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Action;
 
+use Drupal\og\Plugin\Action\AddSingleOgMembershipRole;
 use Drupal\og\OgMembershipInterface;
 
 /**
@@ -30,7 +31,7 @@ class ApprovePendingOgMembershipActionTest extends ActionTestBase {
    */
   public function testExecute($membership = NULL) {
     $membership = $this->memberships[$membership];
-    /** @var \Drupal\og\Plugin\Action\AddSingleOgMembershipRole $plugin */
+    /** @var AddSingleOgMembershipRole $plugin */
     $plugin = $this->getPlugin();
     $plugin->execute($membership);
 
diff --git a/tests/src/Kernel/Action/BlockOgMembershipActionTest.php b/tests/src/Kernel/Action/BlockOgMembershipActionTest.php
index 6882fb85..840cdab1 100644
--- a/tests/src/Kernel/Action/BlockOgMembershipActionTest.php
+++ b/tests/src/Kernel/Action/BlockOgMembershipActionTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Action;
 
+use Drupal\og\Plugin\Action\AddSingleOgMembershipRole;
 use Drupal\og\OgMembershipInterface;
 
 /**
@@ -30,7 +31,7 @@ class BlockOgMembershipActionTest extends ActionTestBase {
    */
   public function testExecute($membership = NULL) {
     $membership = $this->memberships[$membership];
-    /** @var \Drupal\og\Plugin\Action\AddSingleOgMembershipRole $plugin */
+    /** @var AddSingleOgMembershipRole $plugin */
     $plugin = $this->getPlugin();
     $plugin->execute($membership);
 
diff --git a/tests/src/Kernel/Action/ChangeMultipleOgMembershipRolesActionTestBase.php b/tests/src/Kernel/Action/ChangeMultipleOgMembershipRolesActionTestBase.php
index 0b5bfab7..b94a43b9 100644
--- a/tests/src/Kernel/Action/ChangeMultipleOgMembershipRolesActionTestBase.php
+++ b/tests/src/Kernel/Action/ChangeMultipleOgMembershipRolesActionTestBase.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Action;
 
+use Drupal\Core\TempStore\PrivateTempStoreFactory;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\og\Plugin\Action\AddMultipleOgMembershipRoles;
 /**
  * Base class for tests for plugins that change multiple roles at once.
  */
@@ -12,14 +15,14 @@ class ChangeMultipleOgMembershipRolesActionTestBase extends ChangeOgMembershipAc
   /**
    * The factory for private temporary storage objects.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStorageFactory;
 
   /**
    * A test user that is logged in during the test session.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $testUser;
 
@@ -60,7 +63,7 @@ class ChangeMultipleOgMembershipRolesActionTestBase extends ChangeOgMembershipAc
       return in_array($membership_id, $membership_ids);
     }, ARRAY_FILTER_USE_KEY);
 
-    /** @var \Drupal\og\Plugin\Action\AddMultipleOgMembershipRoles $plugin */
+    /** @var AddMultipleOgMembershipRoles $plugin */
     $plugin = $this->getPlugin();
     $plugin->executeMultiple($memberships);
 
@@ -118,7 +121,7 @@ class ChangeMultipleOgMembershipRolesActionTestBase extends ChangeOgMembershipAc
     // @see \Drupal\Tests\og\Kernel\Action\ActionTestBase::testAccess()
     $this->setCurrentUser($this->testUser);
 
-    /** @var \Drupal\og\Plugin\Action\AddMultipleOgMembershipRoles $plugin */
+    /** @var AddMultipleOgMembershipRoles $plugin */
     $plugin = $this->getPlugin();
     $plugin->execute($this->memberships[$membership]);
 
diff --git a/tests/src/Kernel/Action/DeleteOgMembershipActionTest.php b/tests/src/Kernel/Action/DeleteOgMembershipActionTest.php
index 0a84f870..f5e721f0 100644
--- a/tests/src/Kernel/Action/DeleteOgMembershipActionTest.php
+++ b/tests/src/Kernel/Action/DeleteOgMembershipActionTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Action;
 
+use Drupal\og\Plugin\Action\AddSingleOgMembershipRole;
 use Drupal\og\OgMembershipInterface;
 
 /**
@@ -31,7 +32,7 @@ class DeleteOgMembershipActionTest extends ChangeOgMembershipActionTestBase {
   public function testExecute($membership = NULL) {
     $membership = $this->memberships[$membership];
     $member = $membership->getOwner();
-    /** @var \Drupal\og\Plugin\Action\AddSingleOgMembershipRole $plugin */
+    /** @var AddSingleOgMembershipRole $plugin */
     $plugin = $this->getPlugin();
     $plugin->execute($membership);
 
diff --git a/tests/src/Kernel/Action/PendingOgMembershipActionTest.php b/tests/src/Kernel/Action/PendingOgMembershipActionTest.php
index 4cda3256..1ac4c032 100644
--- a/tests/src/Kernel/Action/PendingOgMembershipActionTest.php
+++ b/tests/src/Kernel/Action/PendingOgMembershipActionTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Action;
 
+use Drupal\og\Plugin\Action\AddSingleOgMembershipRole;
 use Drupal\og\OgMembershipInterface;
 
 /**
@@ -30,7 +31,7 @@ class PendingOgMembershipActionTest extends ActionTestBase {
    */
   public function testExecute($membership = NULL) {
     $membership = $this->memberships[$membership];
-    /** @var \Drupal\og\Plugin\Action\AddSingleOgMembershipRole $plugin */
+    /** @var AddSingleOgMembershipRole $plugin */
     $plugin = $this->getPlugin();
     $plugin->execute($membership);
 
diff --git a/tests/src/Kernel/Action/RemoveSingleOgMembershipRoleActionTest.php b/tests/src/Kernel/Action/RemoveSingleOgMembershipRoleActionTest.php
index 8109094b..c3f8a11b 100644
--- a/tests/src/Kernel/Action/RemoveSingleOgMembershipRoleActionTest.php
+++ b/tests/src/Kernel/Action/RemoveSingleOgMembershipRoleActionTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Action;
 
+use Drupal\og\Plugin\Action\AddSingleOgMembershipRole;
 use Drupal\og\Entity\OgRole;
 
 /**
@@ -35,7 +36,7 @@ class RemoveSingleOgMembershipRoleActionTest extends ChangeOgMembershipActionTes
    * @dataProvider executeProvider
    */
   public function testExecute($membership, $default_role_name = NULL, $expected_role_name = NULL) {
-    /** @var \Drupal\og\Plugin\Action\AddSingleOgMembershipRole $plugin */
+    /** @var AddSingleOgMembershipRole $plugin */
     $configuration = !empty($default_role_name) ? ['role_name' => $default_role_name] : [];
     $plugin = $this->getPlugin($configuration);
     $plugin->execute($this->memberships[$membership]);
diff --git a/tests/src/Kernel/Action/UnblockOgMembershipActionTest.php b/tests/src/Kernel/Action/UnblockOgMembershipActionTest.php
index dd2933ca..af4ad580 100644
--- a/tests/src/Kernel/Action/UnblockOgMembershipActionTest.php
+++ b/tests/src/Kernel/Action/UnblockOgMembershipActionTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Action;
 
+use Drupal\og\Plugin\Action\AddSingleOgMembershipRole;
 use Drupal\og\OgMembershipInterface;
 
 /**
@@ -30,7 +31,7 @@ class UnblockOgMembershipActionTest extends ActionTestBase {
    */
   public function testExecute($membership = NULL) {
     $membership = $this->memberships[$membership];
-    /** @var \Drupal\og\Plugin\Action\AddSingleOgMembershipRole $plugin */
+    /** @var AddSingleOgMembershipRole $plugin */
     $plugin = $this->getPlugin();
     $plugin->execute($membership);
 
diff --git a/tests/src/Kernel/Cache/Context/OgRoleCacheContextTest.php b/tests/src/Kernel/Cache/Context/OgRoleCacheContextTest.php
index 87d3aeeb..90d18a26 100644
--- a/tests/src/Kernel/Cache/Context/OgRoleCacheContextTest.php
+++ b/tests/src/Kernel/Cache/Context/OgRoleCacheContextTest.php
@@ -4,6 +4,12 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Cache\Context;
 
+use Drupal\Core\Database\Connection;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\og\GroupTypeManagerInterface;
+use Drupal\og\MembershipManagerInterface;
+use Drupal\Core\PrivateKey;
+use Drupal\og\OgRoleInterface;
 use Drupal\Core\Cache\Context\CacheContextInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -45,35 +51,35 @@ class OgRoleCacheContextTest extends KernelTestBase {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The OG group type manager service.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;
 
   /**
    * The OG membership manager service.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;
 
   /**
    * The private key handler.
    *
-   * @var \Drupal\Core\PrivateKey
+   * @var PrivateKey
    */
   protected $privateKey;
 
@@ -152,7 +158,7 @@ class OgRoleCacheContextTest extends KernelTestBase {
     // test as a custom role in addition to the default roles 'member',
     // 'administrator', etc.
     foreach (['entity_test', 'node'] as $entity_type_id) {
-      /** @var \Drupal\og\OgRoleInterface $role */
+      /** @var OgRoleInterface $role */
       $role = OgRole::create();
       $role
         ->setGroupType($entity_type_id)
@@ -209,10 +215,10 @@ class OgRoleCacheContextTest extends KernelTestBase {
   /**
    * Returns the instantiated cache context service which is being tested.
    *
-   * @param \Drupal\Core\Session\AccountInterface|null $user
+   * @param AccountInterface|null $user
    *   The user account for which to return the cache context service.
    *
-   * @return \Drupal\Core\Cache\Context\CacheContextInterface
+   * @return CacheContextInterface
    *   The instantiated cache context service.
    */
   protected function getCacheContext(?AccountInterface $user = NULL): CacheContextInterface {
@@ -225,7 +231,7 @@ class OgRoleCacheContextTest extends KernelTestBase {
    * @param string $entity_type_id
    *   The entity type of the entity to create. Can be 'entity_test' or 'node'.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity.
    */
   protected function createGroup(string $entity_type_id): ContentEntityInterface {
diff --git a/tests/src/Kernel/DefaultRoleEventIntegrationTest.php b/tests/src/Kernel/DefaultRoleEventIntegrationTest.php
index 48dede81..1bfe9ded 100644
--- a/tests/src/Kernel/DefaultRoleEventIntegrationTest.php
+++ b/tests/src/Kernel/DefaultRoleEventIntegrationTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel;
 
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\og\Event\DefaultRoleEvent;
 use Drupal\og\Event\DefaultRoleEventInterface;
@@ -25,7 +27,7 @@ class DefaultRoleEventIntegrationTest extends KernelTestBase {
   /**
    * The Symfony event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -39,7 +41,7 @@ class DefaultRoleEventIntegrationTest extends KernelTestBase {
   /**
    * The OG role storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $ogRoleStorage;
 
@@ -63,12 +65,12 @@ class DefaultRoleEventIntegrationTest extends KernelTestBase {
    * Tests that OG correctly provides the group administrator default role.
    */
   public function testPermissionEventIntegration() {
-    /** @var \Drupal\og\Event\DefaultRoleEvent $event */
+    /** @var DefaultRoleEvent $event */
     $event = new DefaultRoleEvent();
 
     // Query the event listener directly to see if the administrator role is
     // present.
-    $this->eventDispatcher->dispatch(DefaultRoleEventInterface::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, DefaultRoleEventInterface::EVENT_NAME);
     $this->assertEquals([OgRoleInterface::ADMINISTRATOR], array_keys($event->getRoles()));
 
     // Check that the role was created with the correct values.
diff --git a/tests/src/Kernel/Entity/CacheInvalidationOnGroupChangeTest.php b/tests/src/Kernel/Entity/CacheInvalidationOnGroupChangeTest.php
index 96cfa071..fb80082c 100644
--- a/tests/src/Kernel/Entity/CacheInvalidationOnGroupChangeTest.php
+++ b/tests/src/Kernel/Entity/CacheInvalidationOnGroupChangeTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Entity;
 
+use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\entity_test\Entity\EntityTest;
@@ -21,7 +22,7 @@ class CacheInvalidationOnGroupChangeTest extends KernelTestBase {
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
@@ -135,7 +136,7 @@ class CacheInvalidationOnGroupChangeTest extends KernelTestBase {
   /**
    * Caches a listing of group content that belongs to the given group.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group for which to cache a group content listing.
    * @param bool $include_group_cache_tag
    *   Whether or not the group content listing is tagged with the group's cache
@@ -153,7 +154,7 @@ class CacheInvalidationOnGroupChangeTest extends KernelTestBase {
   /**
    * Generates a cache ID for a group content listing of the given group.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group for which to generate a group content listing cache ID.
    *
    * @return string
@@ -166,7 +167,7 @@ class CacheInvalidationOnGroupChangeTest extends KernelTestBase {
   /**
    * Checks if the group content listing cache for a given group is populated.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group for which to perform the check.
    */
   protected function assertCachePopulated(ContentEntityInterface $group): void {
@@ -176,7 +177,7 @@ class CacheInvalidationOnGroupChangeTest extends KernelTestBase {
   /**
    * Checks if the group content listing cache for a given group is unpopulated.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group for which to perform the check.
    */
   protected function assertCacheNotPopulated(ContentEntityInterface $group): void {
@@ -186,7 +187,7 @@ class CacheInvalidationOnGroupChangeTest extends KernelTestBase {
   /**
    * Returns the cached group content listing for a given group, if available.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $group
+   * @param ContentEntityInterface $group
    *   The group for which to return the cached group content listing.
    *
    * @return false|object
diff --git a/tests/src/Kernel/Entity/EntityCreateAccessTest.php b/tests/src/Kernel/Entity/EntityCreateAccessTest.php
index a8c57392..89400fdf 100644
--- a/tests/src/Kernel/Entity/EntityCreateAccessTest.php
+++ b/tests/src/Kernel/Entity/EntityCreateAccessTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Entity;
 
+use Drupal\node\Access\NodeAddAccessCheck;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
 use Drupal\Tests\node\Traits\NodeCreationTrait;
@@ -41,14 +42,14 @@ class EntityCreateAccessTest extends KernelTestBase {
   /**
    * The group type.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   public $groupType;
 
   /**
    * The group content type.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   public $groupContentType;
 
@@ -106,7 +107,7 @@ class EntityCreateAccessTest extends KernelTestBase {
       ->save();
 
     // Grant the anonymous user permission to view published content.
-    /** @var \Drupal\user\Entity\Role $role */
+    /** @var Role $role */
     $role = Role::create([
       'id' => Role::ANONYMOUS_ID,
       'label' => 'anonymous user',
@@ -115,7 +116,7 @@ class EntityCreateAccessTest extends KernelTestBase {
 
     // Verify that the user does not have access to the entity create form of
     // the group content type.
-    /** @var \Drupal\node\Access\NodeAddAccessCheck $node_access_check */
+    /** @var NodeAddAccessCheck $node_access_check */
     $node_access_check = $this->container->get('access_check.node.add');
     $result = $node_access_check->access(User::getAnonymousUser(), $this->groupContentType);
     $this->assertNotInstanceOf('\Drupal\Core\Access\AccessResultAllowed', $result);
diff --git a/tests/src/Kernel/Entity/FieldCreateTest.php b/tests/src/Kernel/Entity/FieldCreateTest.php
index 78af9f9d..12a9faf4 100644
--- a/tests/src/Kernel/Entity/FieldCreateTest.php
+++ b/tests/src/Kernel/Entity/FieldCreateTest.php
@@ -97,6 +97,7 @@ class FieldCreateTest extends KernelTestBase {
 
   /**
    * Testing invalid field creation.
+   * @doesNotPerformAssertions
    */
   public function testInvalidFields() {
     // Unknown plugin.
diff --git a/tests/src/Kernel/Entity/GetBundleByBundleTest.php b/tests/src/Kernel/Entity/GetBundleByBundleTest.php
index c063e11f..1e50b560 100644
--- a/tests/src/Kernel/Entity/GetBundleByBundleTest.php
+++ b/tests/src/Kernel/Entity/GetBundleByBundleTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Entity;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\og\GroupTypeManagerInterface;
+use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\block_content\Entity\BlockContentType;
 use Drupal\node\Entity\NodeType;
@@ -35,28 +38,28 @@ class GetBundleByBundleTest extends KernelTestBase {
   /**
    * Test groups.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[][]
+   * @var EntityInterface[][]
    */
   protected $groups = [];
 
   /**
    * Test group content.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $groupContent;
 
   /**
    * The group manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;
 
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
diff --git a/tests/src/Kernel/Entity/GetGroupContentTest.php b/tests/src/Kernel/Entity/GetGroupContentTest.php
index 3dbc1bff..9c75cdf2 100644
--- a/tests/src/Kernel/Entity/GetGroupContentTest.php
+++ b/tests/src/Kernel/Entity/GetGroupContentTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Entity;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\user\UserInterface;
+use Drupal\og\MembershipManagerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\node\Entity\Node;
@@ -36,14 +39,14 @@ class GetGroupContentTest extends KernelTestBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The group admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $groupAdmin;
 
@@ -60,7 +63,7 @@ class GetGroupContentTest extends KernelTestBase {
     $this->installEntitySchema('user');
     $this->installSchema('system', 'sequences');
 
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = $this->container->get('entity_type.manager');
     $this->entityTypeManager = $entity_type_manager;
 
@@ -150,7 +153,7 @@ class GetGroupContentTest extends KernelTestBase {
       }
     }
 
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
 
     // Check that Og::getGroupContent() returns the correct group content for
@@ -216,7 +219,7 @@ class GetGroupContentTest extends KernelTestBase {
     ]);
     $group_content->save();
 
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
 
     // Check that Og::getGroupContent() returns the group content entity for
@@ -290,7 +293,7 @@ class GetGroupContentTest extends KernelTestBase {
     $group_content = $this->entityTypeManager->getStorage('entity_test')->create($values);
     $group_content->save();
 
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
 
     // Check that Og::getGroupContent() returns the group content entity for
diff --git a/tests/src/Kernel/Entity/GetMembershipsTest.php b/tests/src/Kernel/Entity/GetMembershipsTest.php
index e4e192ce..bbed61e0 100644
--- a/tests/src/Kernel/Entity/GetMembershipsTest.php
+++ b/tests/src/Kernel/Entity/GetMembershipsTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Entity;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\og\Traits\OgMembershipCreationTrait;
 use Drupal\node\Entity\Node;
@@ -38,21 +41,21 @@ class GetMembershipsTest extends KernelTestBase {
   /**
    * Test groups.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $groups = [];
 
   /**
    * Test users.
    *
-   * @var \Drupal\user\UserInterface[]
+   * @var UserInterface[]
    */
   protected $users;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/tests/src/Kernel/Entity/GetUserGroupsTest.php b/tests/src/Kernel/Entity/GetUserGroupsTest.php
index caadd616..d8f18c45 100644
--- a/tests/src/Kernel/Entity/GetUserGroupsTest.php
+++ b/tests/src/Kernel/Entity/GetUserGroupsTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Entity;
 
+use Drupal\og\MembershipManagerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\og\Traits\OgMembershipCreationTrait;
 use Drupal\entity_test\Entity\EntityTest;
@@ -38,42 +39,42 @@ class GetUserGroupsTest extends KernelTestBase {
   /**
    * The OG membership manager.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;
 
   /**
    * A user object.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user1;
 
   /**
    * A user object.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user2;
 
   /**
    * A user object.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user3;
 
   /**
    * A group entity.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $group1;
 
   /**
    * A group entity.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $group2;
 
@@ -304,7 +305,7 @@ class GetUserGroupsTest extends KernelTestBase {
    *
    * Assumes entity_type is used.
    *
-   * @param \Drupal\entity_test\Entity\EntityTest $group_to_check
+   * @param EntityTest $group_to_check
    *   The group entity to check.
    * @param array $results
    *   Array keyed by the entity type, and with the group entities as values.
diff --git a/tests/src/Kernel/Entity/GroupAudienceTest.php b/tests/src/Kernel/Entity/GroupAudienceTest.php
index 192ce6cd..e8866bc0 100644
--- a/tests/src/Kernel/Entity/GroupAudienceTest.php
+++ b/tests/src/Kernel/Entity/GroupAudienceTest.php
@@ -19,7 +19,7 @@ class GroupAudienceTest extends KernelTestBase {
   /**
    * The OG group audience helper.
    *
-   * @var \Drupal\og\OgGroupAudienceHelperInterface
+   * @var OgGroupAudienceHelperInterface
    */
   protected $groupAudienceHelper;
 
diff --git a/tests/src/Kernel/Entity/GroupMembershipManagerTest.php b/tests/src/Kernel/Entity/GroupMembershipManagerTest.php
index 6ef62798..3f200ea9 100644
--- a/tests/src/Kernel/Entity/GroupMembershipManagerTest.php
+++ b/tests/src/Kernel/Entity/GroupMembershipManagerTest.php
@@ -4,6 +4,11 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Entity;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\og\MembershipManagerInterface;
+use Drupal\node\NodeInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\og\Traits\OgMembershipCreationTrait;
 use Drupal\entity_test\Entity\EntityTestBundle;
@@ -45,35 +50,35 @@ class GroupMembershipManagerTest extends KernelTestBase {
   /**
    * Test groups.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[][]
+   * @var EntityInterface[][]
    */
   protected $groups;
 
   /**
    * Test group content.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $groupContent;
 
   /**
    * Test users.
    *
-   * @var \Drupal\user\UserInterface[]
+   * @var UserInterface[]
    */
   protected $users;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The membership manager. This is the system under test.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;
 
@@ -200,9 +205,10 @@ class GroupMembershipManagerTest extends KernelTestBase {
    *
    * @covers ::getGroupIds
    * @dataProvider groupContentProvider
+   * @doesNotPerformAssertions
    */
   public function testGetGroupIdsInvalidArguments() {
-    /** @var \Drupal\og\MembershipManagerInterface $membership_manager */
+    /** @var MembershipManagerInterface $membership_manager */
     $membership_manager = \Drupal::service('og.membership_manager');
 
     $test_cases = [
@@ -276,7 +282,7 @@ class GroupMembershipManagerTest extends KernelTestBase {
     $this->assertEquals($group_content_rev->id(), $group_content_with_bundle->id());
 
     $group_content_rev_group = $this->membershipManager->getGroups($group_content_rev);
-    /** @var \Drupal\node\NodeInterface $group */
+    /** @var NodeInterface $group */
     $group = reset($group_content_rev_group['node']);
     $this->assertEquals($this->groups['node'][0]->id(), $group->id());
     $group_content_with_bundle_group = $this->membershipManager->getGroups($group_content_with_bundle);
@@ -308,9 +314,9 @@ class GroupMembershipManagerTest extends KernelTestBase {
     // Check that all expected results are returned.
     foreach ($expected as $expected_type => $expected_keys) {
       foreach ($expected_keys as $expected_key) {
-        /** @var \Drupal\Core\Entity\EntityInterface $expected_group */
+        /** @var EntityInterface $expected_group */
         $expected_group = $this->groups[$expected_type][$expected_key];
-        /** @var \Drupal\Core\Entity\EntityInterface $group */
+        /** @var EntityInterface $group */
         foreach ($result[$expected_type] as $group) {
           if ($group->getEntityTypeId() === $expected_group->getEntityTypeId() && $group->id() === $expected_group->id()) {
             // The expected result was found. Continue the test.
@@ -381,11 +387,12 @@ class GroupMembershipManagerTest extends KernelTestBase {
    * Tests retrieval of group membership IDs filtered by role names.
    *
    * @covers ::getGroupMembershipIdsByRoleNames
+   * @doesNotPerformAssertions
    */
   public function testGetGroupMembershipIdsByRoleNames() {
     $membership_storage = $this->container->get('entity_type.manager')->getStorage('og_membership');
     $retrieve_membership_owner_id = function ($membership_id) use ($membership_storage) {
-      /** @var \Drupal\og\OgMembershipInterface $membership */
+      /** @var OgMembershipInterface $membership */
       $membership = $membership_storage->load($membership_id);
       return $membership->getOwnerId();
     };
diff --git a/tests/src/Kernel/Entity/GroupTypeTest.php b/tests/src/Kernel/Entity/GroupTypeTest.php
index d9191bf7..1ab67045 100644
--- a/tests/src/Kernel/Entity/GroupTypeTest.php
+++ b/tests/src/Kernel/Entity/GroupTypeTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Entity;
 
+use Drupal\og\GroupTypeManagerInterface;
+use Drupal\node\NodeTypeInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\NodeType;
 
@@ -22,7 +24,7 @@ class GroupTypeTest extends KernelTestBase {
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;
 
@@ -48,7 +50,7 @@ class GroupTypeTest extends KernelTestBase {
     $editable->set('groups', $groups);
     $editable->save();
     // Create a content type.
-    /** @var \Drupal\node\NodeTypeInterface $group_type */
+    /** @var NodeTypeInterface $group_type */
     $group_type = NodeType::create(['type' => 'group', 'name' => 'Group']);
     $group_type->save();
 
diff --git a/tests/src/Kernel/Entity/OgMembershipRoleReferenceTest.php b/tests/src/Kernel/Entity/OgMembershipRoleReferenceTest.php
index fbdf9fb1..85dbc7a9 100644
--- a/tests/src/Kernel/Entity/OgMembershipRoleReferenceTest.php
+++ b/tests/src/Kernel/Entity/OgMembershipRoleReferenceTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Entity;
 
+use Drupal\og\OgMembershipInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ -41,14 +42,14 @@ class OgMembershipRoleReferenceTest extends KernelTestBase {
   /**
    * The group entity, of type node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $group;
 
   /**
    * The user object.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;
 
@@ -108,7 +109,7 @@ class OgMembershipRoleReferenceTest extends KernelTestBase {
       ->setLabel('Group member');
     $group_member->save();
 
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = Og::getMembership($this->group, $this->user);
     $membership
       // Assign only the content editor role for now.
diff --git a/tests/src/Kernel/Entity/OgMembershipTest.php b/tests/src/Kernel/Entity/OgMembershipTest.php
index bf2fe64a..e7c59c01 100644
--- a/tests/src/Kernel/Entity/OgMembershipTest.php
+++ b/tests/src/Kernel/Entity/OgMembershipTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Entity;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\og\GroupTypeManagerInterface;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\entity_test\Entity\EntityTest;
@@ -42,35 +45,35 @@ class OgMembershipTest extends KernelTestBase {
   /**
    * Test group.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $group;
 
   /**
    * Test group owner.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $owner;
 
   /**
    * Test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;
 
@@ -184,7 +187,7 @@ class OgMembershipTest extends KernelTestBase {
   /**
    * Asserts that the test user is set as the owner of the given membership.
    *
-   * @param \Drupal\og\OgMembershipInterface $membership
+   * @param OgMembershipInterface $membership
    *   The membership to check.
    */
   protected function assertOwner(OgMembershipInterface $membership) {
@@ -193,7 +196,7 @@ class OgMembershipTest extends KernelTestBase {
     $this->assertEquals($this->user->id(), $membership->getOwnerId());
 
     // And after re-loading.
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = $this->entityTypeManager->getStorage('og_membership')->loadUnchanged($membership->id());
 
     $this->assertInstanceOf(UserInterface::class, $membership->getOwner());
@@ -231,7 +234,7 @@ class OgMembershipTest extends KernelTestBase {
    * @covers ::preSave
    */
   public function testSetNoUserException() {
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = OgMembership::create(['type' => OgMembershipInterface::TYPE_DEFAULT]);
     $this->expectException(EntityStorageException::class);
     $membership
@@ -245,7 +248,7 @@ class OgMembershipTest extends KernelTestBase {
    * @covers ::preSave
    */
   public function testSetNoGroupException() {
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = OgMembership::create();
     $this->expectException(EntityStorageException::class);
     $membership
@@ -258,6 +261,7 @@ class OgMembershipTest extends KernelTestBase {
    *
    * @todo This test is not related to the OgMembership entity. It should be
    *   moved to a more appropriate test class.
+   * @doesNotPerformAssertions
    */
   public function testNoOwnerException() {
     // Create a bundle and add as a group.
@@ -289,7 +293,7 @@ class OgMembershipTest extends KernelTestBase {
     ]);
 
     $non_group->save();
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = Og::createMembership($non_group, $this->user);
 
     $this->expectException(EntityStorageException::class);
@@ -311,7 +315,7 @@ class OgMembershipTest extends KernelTestBase {
 
     $this->groupTypeManager->addGroup('entity_test', $group->bundle());
 
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership1 = Og::createMembership($group, $this->user);
     $membership1->save();
 
@@ -591,6 +595,7 @@ class OgMembershipTest extends KernelTestBase {
    * Tests re-saving a membership.
    *
    * @covers ::preSave
+   * @doesNotPerformAssertions
    */
   public function testSaveSameMembershipTwice() {
     $group = EntityTest::create([
@@ -602,7 +607,7 @@ class OgMembershipTest extends KernelTestBase {
 
     $this->groupTypeManager->addGroup('entity_test', $group->bundle());
 
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = Og::createMembership($group, $this->user);
     $membership->save();
 
diff --git a/tests/src/Kernel/Entity/OgRoleTest.php b/tests/src/Kernel/Entity/OgRoleTest.php
index 089bd2aa..deee150b 100644
--- a/tests/src/Kernel/Entity/OgRoleTest.php
+++ b/tests/src/Kernel/Entity/OgRoleTest.php
@@ -4,6 +4,12 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Entity;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\og\GroupTypeManagerInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Config\Entity\ConfigEntityBundleBase;
+use Drupal\Core\Action\ActionInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Config\ConfigValueException;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\KernelTests\KernelTestBase;
@@ -35,28 +41,28 @@ class OgRoleTest extends KernelTestBase {
   /**
    * The entity storage handler for Action entities.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $actionStorage;
 
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Test group types.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityBundleBase[]
+   * @var ConfigEntityBundleBase[]
    */
   protected $groupTypes;
 
@@ -91,7 +97,7 @@ class OgRoleTest extends KernelTestBase {
    * Testing OG role creation.
    */
   public function testRoleCreate() {
-    /** @var \Drupal\og\Entity\OgRole $og_role */
+    /** @var OgRole $og_role */
     $og_role = OgRole::create();
     $og_role
       ->setName('content_editor')
@@ -111,7 +117,7 @@ class OgRoleTest extends KernelTestBase {
       ->setGroupBundle('group')
       ->save();
 
-    /** @var \Drupal\og\Entity\OgRole $saved_role */
+    /** @var OgRole $saved_role */
     $saved_role = $this->loadUnchangedOgRole('node-group-content_editor');
     $this->assertNotEmpty($saved_role, 'The role was created with the expected ID.');
     $this->assertEquals($og_role->id(), $saved_role->id());
@@ -128,7 +134,7 @@ class OgRoleTest extends KernelTestBase {
       'og_membership_add_single_role_action.content_editor',
       'og_membership_remove_single_role_action.content_editor',
     ];
-    /** @var \Drupal\Core\Action\ActionInterface[] $actions */
+    /** @var ActionInterface[] $actions */
     $actions = Action::loadMultiple($action_ids);
     foreach ($action_ids as $action_id) {
       $this->assertTrue(array_key_exists($action_id, $actions));
@@ -304,7 +310,7 @@ class OgRoleTest extends KernelTestBase {
    * @param string $id
    *   The ID of the role to load.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The role, or NULL if there is no such role.
    */
   protected function loadUnchangedOgRole($id) {
diff --git a/tests/src/Kernel/Entity/OgStandardReferenceItemTest.php b/tests/src/Kernel/Entity/OgStandardReferenceItemTest.php
index d981cd8c..5b81f072 100644
--- a/tests/src/Kernel/Entity/OgStandardReferenceItemTest.php
+++ b/tests/src/Kernel/Entity/OgStandardReferenceItemTest.php
@@ -46,7 +46,7 @@ class OgStandardReferenceItemTest extends KernelTestBase {
   /**
    * A list of groups.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest[]
+   * @var EntityTest[]
    */
   protected $groups;
 
diff --git a/tests/src/Kernel/Entity/SelectionHandlerTest.php b/tests/src/Kernel/Entity/SelectionHandlerTest.php
index eb2fb14f..7e7da458 100644
--- a/tests/src/Kernel/Entity/SelectionHandlerTest.php
+++ b/tests/src/Kernel/Entity/SelectionHandlerTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Entity;
 
+use Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManager;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ -22,7 +25,7 @@ class SelectionHandlerTest extends KernelTestBase {
   /**
    * The selection handler.
    *
-   * @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface|false|object
+   * @var SelectionInterface|false|object
    */
   protected $selectionHandler;
 
@@ -42,14 +45,14 @@ class SelectionHandlerTest extends KernelTestBase {
   /**
    * A user object.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user1;
 
   /**
    * A user object.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user2;
 
@@ -70,14 +73,14 @@ class SelectionHandlerTest extends KernelTestBase {
   /**
    * The field definition used in this test.
    *
-   * @var \Drupal\Core\Field\FieldDefinitionInterface
+   * @var FieldDefinitionInterface
    */
   protected $fieldDefinition;
 
   /**
    * Selection plugin manager.
    *
-   * @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManager
+   * @var SelectionPluginManager
    */
   protected $selectionPluginManager;
 
@@ -188,7 +191,7 @@ class SelectionHandlerTest extends KernelTestBase {
    *
    * @param int $amount
    *   The number of groups to create.
-   * @param \Drupal\user\Entity\User $user
+   * @param User $user
    *   The user object which owns the groups.
    *
    * @return ContentEntityBase[]
@@ -214,7 +217,7 @@ class SelectionHandlerTest extends KernelTestBase {
   /**
    * Sets the current account.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account to switch to.
    */
   protected function setCurrentAccount(AccountInterface $account) {
diff --git a/tests/src/Kernel/EntityReference/Views/OgStandardReferenceRelationshipTest.php b/tests/src/Kernel/EntityReference/Views/OgStandardReferenceRelationshipTest.php
index ef717240..158a1b08 100644
--- a/tests/src/Kernel/EntityReference/Views/OgStandardReferenceRelationshipTest.php
+++ b/tests/src/Kernel/EntityReference/Views/OgStandardReferenceRelationshipTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\EntityReference\Views;
 
+use Drupal\views\ResultRow;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\entity_test\Entity\EntityTestMul;
 use Drupal\og\Og;
@@ -102,72 +103,72 @@ class OgStandardReferenceRelationshipTest extends ViewsKernelTestBase {
     $entity = EntityTest::create();
     $entity->field_test_data->target_id = $referenced_entity->id();
     $entity->save();
-    $this->assertEqual($entity->field_test_data[0]->entity->id(), $referenced_entity->id());
+    $this->assertEquals($entity->field_test_data[0]->entity->id(), $referenced_entity->id());
     $this->entities[] = $entity;
 
     $entity = EntityTest::create();
     $entity->field_test_data->target_id = $referenced_entity->id();
     $entity->save();
-    $this->assertEqual($entity->field_test_data[0]->entity->id(), $referenced_entity->id());
+    $this->assertEquals($entity->field_test_data[0]->entity->id(), $referenced_entity->id());
     $this->entities[] = $entity;
 
     Views::viewsData()->clear();
 
     // Check the generated views data.
     $views_data = Views::viewsData()->get('entity_test__field_test_data');
-    $this->assertEqual($views_data['field_test_data']['relationship']['id'], 'standard');
-    $this->assertEqual($views_data['field_test_data']['relationship']['base'], 'entity_test_mul_property_data');
-    $this->assertEqual($views_data['field_test_data']['relationship']['base field'], 'id');
-    $this->assertEqual($views_data['field_test_data']['relationship']['relationship field'], 'field_test_data_target_id');
-    $this->assertEqual($views_data['field_test_data']['relationship']['entity type'], 'entity_test_mul');
+    $this->assertEquals($views_data['field_test_data']['relationship']['id'], 'standard');
+    $this->assertEquals($views_data['field_test_data']['relationship']['base'], 'entity_test_mul_property_data');
+    $this->assertEquals($views_data['field_test_data']['relationship']['base field'], 'id');
+    $this->assertEquals($views_data['field_test_data']['relationship']['relationship field'], 'field_test_data_target_id');
+    $this->assertEquals($views_data['field_test_data']['relationship']['entity type'], 'entity_test_mul');
 
     // Check the backwards reference.
     $views_data = Views::viewsData()->get('entity_test_mul_property_data');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['id'], 'entity_reverse');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['base'], 'entity_test');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['base field'], 'id');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['field table'], 'entity_test__field_test_data');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['field field'], 'field_test_data_target_id');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['field_name'], 'field_test_data');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['entity_type'], 'entity_test');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['id'], 'entity_reverse');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['base'], 'entity_test');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['base field'], 'id');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['field table'], 'entity_test__field_test_data');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['field field'], 'field_test_data_target_id');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['field_name'], 'field_test_data');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['entity_type'], 'entity_test');
 
     $values = ['field' => 'deleted', 'value' => 0, 'numeric' => TRUE];
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['join_extra'][0], $values);
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['join_extra'][0], $values);
 
     // Check an actual test view.
     $view = Views::getView('test_og_standard_reference_entity_test_view');
     $this->executeView($view);
-    /** @var \Drupal\views\ResultRow $row */
+    /** @var ResultRow $row */
     foreach ($view->result as $index => $row) {
       // Check that the actual ID of the entity is the expected one.
-      $this->assertEqual($row->id, $this->entities[$index]->id());
+      $this->assertEquals($row->id, $this->entities[$index]->id());
 
       // Also check that we have the correct result entity.
-      $this->assertEqual($row->_entity->id(), $this->entities[$index]->id());
+      $this->assertEquals($row->_entity->id(), $this->entities[$index]->id());
 
       // Test the forward relationship.
-      $this->assertEqual($row->entity_test_mul_property_data_entity_test__field_test_data_i, 1);
+      $this->assertEquals($row->entity_test_mul_property_data_entity_test__field_test_data_i, 1);
 
       // Test that the correct relationship entity is on the row.
-      $this->assertEqual($row->_relationship_entities['field_test_data']->id(), 1);
-      $this->assertEqual($row->_relationship_entities['field_test_data']->bundle(), 'entity_test_mul');
+      $this->assertEquals($row->_relationship_entities['field_test_data']->id(), 1);
+      $this->assertEquals($row->_relationship_entities['field_test_data']->bundle(), 'entity_test_mul');
 
     }
 
     // Check the backwards reference view.
     $view = Views::getView('test_og_standard_reference_reverse_entity_test_view');
     $this->executeView($view);
-    /** @var \Drupal\views\ResultRow $row */
+    /** @var ResultRow $row */
     foreach ($view->result as $index => $row) {
-      $this->assertEqual($row->id, 1);
-      $this->assertEqual($row->_entity->id(), 1);
+      $this->assertEquals($row->id, 1);
+      $this->assertEquals($row->_entity->id(), 1);
 
       // Test the backwards relationship.
-      $this->assertEqual($row->field_test_data_entity_test_mul_property_data_id, $this->entities[$index]->id());
+      $this->assertEquals($row->field_test_data_entity_test_mul_property_data_id, $this->entities[$index]->id());
 
       // Test that the correct relationship entity is on the row.
-      $this->assertEqual($row->_relationship_entities['reverse__entity_test__field_test_data']->id(), $this->entities[$index]->id());
-      $this->assertEqual($row->_relationship_entities['reverse__entity_test__field_test_data']->bundle(), 'entity_test');
+      $this->assertEquals($row->_relationship_entities['reverse__entity_test__field_test_data']->id(), $this->entities[$index]->id());
+      $this->assertEquals($row->_relationship_entities['reverse__entity_test__field_test_data']->bundle(), 'entity_test');
     }
   }
 
@@ -185,72 +186,72 @@ class OgStandardReferenceRelationshipTest extends ViewsKernelTestBase {
     $entity = EntityTestMul::create();
     $entity->field_data_test->target_id = $referenced_entity->id();
     $entity->save();
-    $this->assertEqual($entity->field_data_test[0]->entity->id(), $referenced_entity->id());
+    $this->assertEquals($entity->field_data_test[0]->entity->id(), $referenced_entity->id());
     $this->entities[] = $entity;
 
     $entity = EntityTestMul::create();
     $entity->field_data_test->target_id = $referenced_entity->id();
     $entity->save();
-    $this->assertEqual($entity->field_data_test[0]->entity->id(), $referenced_entity->id());
+    $this->assertEquals($entity->field_data_test[0]->entity->id(), $referenced_entity->id());
     $this->entities[] = $entity;
 
     Views::viewsData()->clear();
 
     // Check the generated views data.
     $views_data = Views::viewsData()->get('entity_test_mul__field_data_test');
-    $this->assertEqual($views_data['field_data_test']['relationship']['id'], 'standard');
-    $this->assertEqual($views_data['field_data_test']['relationship']['base'], 'entity_test');
-    $this->assertEqual($views_data['field_data_test']['relationship']['base field'], 'id');
-    $this->assertEqual($views_data['field_data_test']['relationship']['relationship field'], 'field_data_test_target_id');
-    $this->assertEqual($views_data['field_data_test']['relationship']['entity type'], 'entity_test');
+    $this->assertEquals($views_data['field_data_test']['relationship']['id'], 'standard');
+    $this->assertEquals($views_data['field_data_test']['relationship']['base'], 'entity_test');
+    $this->assertEquals($views_data['field_data_test']['relationship']['base field'], 'id');
+    $this->assertEquals($views_data['field_data_test']['relationship']['relationship field'], 'field_data_test_target_id');
+    $this->assertEquals($views_data['field_data_test']['relationship']['entity type'], 'entity_test');
 
     // Check the backwards reference.
     $views_data = Views::viewsData()->get('entity_test');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['id'], 'entity_reverse');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['base'], 'entity_test_mul_property_data');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['base field'], 'id');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field table'], 'entity_test_mul__field_data_test');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field field'], 'field_data_test_target_id');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field_name'], 'field_data_test');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['entity_type'], 'entity_test_mul');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['id'], 'entity_reverse');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['base'], 'entity_test_mul_property_data');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['base field'], 'id');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field table'], 'entity_test_mul__field_data_test');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field field'], 'field_data_test_target_id');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field_name'], 'field_data_test');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['entity_type'], 'entity_test_mul');
 
     $values = ['field' => 'deleted', 'value' => 0, 'numeric' => TRUE];
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['join_extra'][0], $values);
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['join_extra'][0], $values);
 
     // Check an actual test view.
     $view = Views::getView('test_og_standard_reference_entity_test_mul_view');
     $this->executeView($view);
-    /** @var \Drupal\views\ResultRow $row */
+    /** @var ResultRow $row */
     foreach ($view->result as $index => $row) {
       // Check that the actual ID of the entity is the expected one.
-      $this->assertEqual($row->id, $this->entities[$index]->id());
+      $this->assertEquals($row->id, $this->entities[$index]->id());
 
       // Also check that we have the correct result entity.
-      $this->assertEqual($row->_entity->id(), $this->entities[$index]->id());
+      $this->assertEquals($row->_entity->id(), $this->entities[$index]->id());
 
       // Test the forward relationship.
-      $this->assertEqual($row->entity_test_entity_test_mul__field_data_test_id, 1);
+      $this->assertEquals($row->entity_test_entity_test_mul__field_data_test_id, 1);
 
       // Test that the correct relationship entity is on the row.
-      $this->assertEqual($row->_relationship_entities['field_data_test']->id(), 1);
-      $this->assertEqual($row->_relationship_entities['field_data_test']->bundle(), 'entity_test');
+      $this->assertEquals($row->_relationship_entities['field_data_test']->id(), 1);
+      $this->assertEquals($row->_relationship_entities['field_data_test']->bundle(), 'entity_test');
 
     }
 
     // Check the backwards reference view.
     $view = Views::getView('test_og_standard_reference_reverse_entity_test_mul_view');
     $this->executeView($view);
-    /** @var \Drupal\views\ResultRow $row */
+    /** @var ResultRow $row */
     foreach ($view->result as $index => $row) {
-      $this->assertEqual($row->id, 1);
-      $this->assertEqual($row->_entity->id(), 1);
+      $this->assertEquals($row->id, 1);
+      $this->assertEquals($row->_entity->id(), 1);
 
       // Test the backwards relationship.
-      $this->assertEqual($row->field_data_test_entity_test_id, $this->entities[$index]->id());
+      $this->assertEquals($row->field_data_test_entity_test_id, $this->entities[$index]->id());
 
       // Test that the correct relationship entity is on the row.
-      $this->assertEqual($row->_relationship_entities['reverse__entity_test_mul__field_data_test']->id(), $this->entities[$index]->id());
-      $this->assertEqual($row->_relationship_entities['reverse__entity_test_mul__field_data_test']->bundle(), 'entity_test_mul');
+      $this->assertEquals($row->_relationship_entities['reverse__entity_test_mul__field_data_test']->id(), $this->entities[$index]->id());
+      $this->assertEquals($row->_relationship_entities['reverse__entity_test_mul__field_data_test']->bundle(), 'entity_test_mul');
     }
   }
 
diff --git a/tests/src/Kernel/Field/AudienceFieldFormatterTest.php b/tests/src/Kernel/Field/AudienceFieldFormatterTest.php
index 69cb3de3..5e2f8ecc 100644
--- a/tests/src/Kernel/Field/AudienceFieldFormatterTest.php
+++ b/tests/src/Kernel/Field/AudienceFieldFormatterTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Field;
 
+use Drupal\Core\Field\FormatterPluginManager;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\og\OgGroupAudienceHelperInterface;
 
@@ -23,7 +24,7 @@ class AudienceFieldFormatterTest extends KernelTestBase {
    * Testing og_field_formatter_info_alter().
    */
   public function testFieldFormatterInfoAlter() {
-    /** @var \Drupal\Core\Field\FormatterPluginManager $formatter_manager */
+    /** @var FormatterPluginManager $formatter_manager */
     $formatter_manager = \Drupal::getContainer()->get('plugin.manager.field.formatter');
 
     $expected = [
diff --git a/tests/src/Kernel/Field/GroupSubscribeFormatterTest.php b/tests/src/Kernel/Field/GroupSubscribeFormatterTest.php
index 82da1735..0a1a9b7b 100644
--- a/tests/src/Kernel/Field/GroupSubscribeFormatterTest.php
+++ b/tests/src/Kernel/Field/GroupSubscribeFormatterTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Field;
 
+use Drupal\user\Entity\User;
+use Drupal\node\NodeInterface;
+use Drupal\og\MembershipManager;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ -23,14 +26,14 @@ class GroupSubscribeFormatterTest extends EntityKernelTestBase {
   /**
    * The owner of the group.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;
 
   /**
    * Test entity group.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $group;
 
@@ -126,7 +129,7 @@ class GroupSubscribeFormatterTest extends EntityKernelTestBase {
     $elements = $this->getElements();
     $this->assertEquals('Request group membership', $elements[0]['#title']);
 
-    /** @var \Drupal\og\MembershipManager $membership_manager */
+    /** @var MembershipManager $membership_manager */
     $membership_manager = $this->container->get('og.membership_manager');
     $membership = $membership_manager->createMembership($this->group, $user1, OgMembershipInterface::STATE_ACTIVE);
     $membership->save();
diff --git a/tests/src/Kernel/Form/GroupSubscribeFormTest.php b/tests/src/Kernel/Form/GroupSubscribeFormTest.php
index 0c46be0f..8003a747 100644
--- a/tests/src/Kernel/Form/GroupSubscribeFormTest.php
+++ b/tests/src/Kernel/Form/GroupSubscribeFormTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Form;
 
+use Drupal\og\Form\GroupSubscribeForm;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ -38,28 +39,28 @@ class GroupSubscribeFormTest extends KernelTestBase {
   /**
    * A user object.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user1;
 
   /**
    * A group entity.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $group1;
 
   /**
    * A group entity.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $group2;
 
   /**
    * A group entity.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $group3;
 
@@ -113,7 +114,7 @@ class GroupSubscribeFormTest extends KernelTestBase {
     $this->group3->save();
 
     // Change the permissions of group to "subscribe".
-    /** @var \Drupal\og\Entity\OgRole $role */
+    /** @var OgRole $role */
     $role = OgRole::getRole('node', $bundle_names[0], OgRoleInterface::ANONYMOUS);
     $role
       ->grantPermission('subscribe')
@@ -141,7 +142,7 @@ class GroupSubscribeFormTest extends KernelTestBase {
   public function testIsStateActive() {
     $user = $this->createUser(['access content']);
 
-    /** @var \Drupal\og\Form\GroupSubscribeForm $form */
+    /** @var GroupSubscribeForm $form */
     $form = \Drupal::entityTypeManager()->getFormObject('og_membership', 'subscribe');
 
     // Pending membership.
@@ -191,7 +192,7 @@ class GroupSubscribeFormTest extends KernelTestBase {
    * @param array $permissions
    *   (optional) Array of permission names to assign to user.
    *
-   * @return \Drupal\user\Entity\User
+   * @return User
    *   The created user entity.
    */
   protected function createUser(array $permissions = []) {
diff --git a/tests/src/Kernel/GroupManagerSubscriptionTest.php b/tests/src/Kernel/GroupManagerSubscriptionTest.php
index d4a0880a..7953b4e1 100644
--- a/tests/src/Kernel/GroupManagerSubscriptionTest.php
+++ b/tests/src/Kernel/GroupManagerSubscriptionTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel;
 
+use Drupal\user\UserInterface;
+use Drupal\og\GroupTypeManagerInterface;
+use Drupal\og\MembershipManagerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ -34,21 +37,21 @@ class GroupManagerSubscriptionTest extends KernelTestBase {
   /**
    * Test group owner.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $owner;
 
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;
 
   /**
    * The membership manager.
    *
-   * @var \Drupal\og\MembershipManagerInterface
+   * @var MembershipManagerInterface
    */
   protected $membershipManager;
 
@@ -142,7 +145,7 @@ class GroupManagerSubscriptionTest extends KernelTestBase {
   /**
    * Checks if the membership is overridden by a custom hook implementation.
    *
-   * @param \Drupal\og\OgMembershipInterface $membership
+   * @param OgMembershipInterface $membership
    *   The OG Membership to check. If empty the membership does not exist.
    *
    * @return bool
diff --git a/tests/src/Kernel/GroupTypeConditionTest.php b/tests/src/Kernel/GroupTypeConditionTest.php
index 0a9ac13a..137ad4d3 100644
--- a/tests/src/Kernel/GroupTypeConditionTest.php
+++ b/tests/src/Kernel/GroupTypeConditionTest.php
@@ -4,6 +4,10 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\PluginManagerInterface;
+use Drupal\og\GroupTypeManagerInterface;
+use Drupal\og\Plugin\Condition\GroupType;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
@@ -32,21 +36,21 @@ class GroupTypeConditionTest extends KernelTestBase {
   /**
    * Test groups.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $groups;
 
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $conditionManager;
 
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;
 
@@ -105,8 +109,7 @@ class GroupTypeConditionTest extends KernelTestBase {
    */
   public function testConditions($group_types, $negate, $context_value, $expected) {
     // Create an instance of the group type condition plugin.
-    /** @var \Drupal\og\Plugin\Condition\GroupType $plugin_instance */
-
+    /** @var GroupType $plugin_instance */
     $plugin_instance = $this->conditionManager->createInstance('og_group_type')
       ->setConfig('group_types', array_combine($group_types, $group_types))
       ->setConfig('negate', $negate)
diff --git a/tests/src/Kernel/OgDeleteOrphansTest.php b/tests/src/Kernel/OgDeleteOrphansTest.php
index d19ad1ed..c04195aa 100644
--- a/tests/src/Kernel/OgDeleteOrphansTest.php
+++ b/tests/src/Kernel/OgDeleteOrphansTest.php
@@ -4,6 +4,10 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel;
 
+use Drupal\Component\Plugin\PluginManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\og\OgDeleteOrphansPluginManager;
+use Drupal\og\OgDeleteOrphansInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ -34,21 +38,21 @@ class OgDeleteOrphansTest extends KernelTestBase {
   /**
    * The plugin manager for OgDeleteOrphans plugins.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $ogDeleteOrphansPluginManager;
 
   /**
    * A test group.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $group;
 
   /**
    * A test group content.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $groupContent;
 
@@ -66,7 +70,7 @@ class OgDeleteOrphansTest extends KernelTestBase {
     $this->installSchema('node', 'node_access');
     $this->installSchema('system', ['sequences']);
 
-    /** @var \Drupal\og\OgDeleteOrphansPluginManager $plugin_manager */
+    /** @var OgDeleteOrphansPluginManager $plugin_manager */
     $plugin_manager = \Drupal::service('plugin.manager.og.delete_orphans');
     $this->ogDeleteOrphansPluginManager = $plugin_manager;
 
@@ -269,7 +273,7 @@ class OgDeleteOrphansTest extends KernelTestBase {
    *   The ID of the plugin that is responsible for processing the queue.
    */
   protected function process($queue_id, $plugin_id) {
-    /** @var \Drupal\og\OgDeleteOrphansInterface $plugin */
+    /** @var OgDeleteOrphansInterface $plugin */
     $plugin = $this->ogDeleteOrphansPluginManager->createInstance($plugin_id, []);
     while ($this->getQueueCount($queue_id) > 0) {
       $plugin->process();
diff --git a/tests/src/Kernel/OgRoleManagerTest.php b/tests/src/Kernel/OgRoleManagerTest.php
index 7935a0aa..9beaa665 100644
--- a/tests/src/Kernel/OgRoleManagerTest.php
+++ b/tests/src/Kernel/OgRoleManagerTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\og\OgRoleManagerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\NodeType;
 use Drupal\og\Entity\OgRole;
@@ -34,7 +36,7 @@ class OgRoleManagerTest extends KernelTestBase {
   /**
    * A test group.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $group;
 
@@ -48,7 +50,7 @@ class OgRoleManagerTest extends KernelTestBase {
   /**
    * The OG role manager.
    *
-   * @var \Drupal\og\OgRoleManagerInterface
+   * @var OgRoleManagerInterface
    */
   protected $ogRoleManager;
 
diff --git a/tests/src/Kernel/PermissionEventTest.php b/tests/src/Kernel/PermissionEventTest.php
index 65f23e20..ef3fdab8 100644
--- a/tests/src/Kernel/PermissionEventTest.php
+++ b/tests/src/Kernel/PermissionEventTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel;
 
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\NodeType;
@@ -36,7 +37,7 @@ class PermissionEventTest extends KernelTestBase {
   /**
    * The Symfony event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -82,7 +83,7 @@ class PermissionEventTest extends KernelTestBase {
    *   group.
    * @param array $expected_permissions
    *   An array of permission names that are expected to be returned.
-   * @param \Drupal\og\PermissionInterface[] $expected_full_permissions
+   * @param PermissionInterface[] $expected_full_permissions
    *   An array of full permissions that are expected to be returned. This is a
    *   subset of the permissions. It is not necessary to test the full
    *   permission data for each entry, testing the data for only a couple of
@@ -92,9 +93,9 @@ class PermissionEventTest extends KernelTestBase {
    */
   public function testPermissionEventIntegration(array $group_content_bundle_ids, array $expected_permissions, array $expected_full_permissions) {
     // Retrieve the permissions from the listeners.
-    /** @var \Drupal\og\Event\PermissionEvent $permission_event */
+    /** @var PermissionEvent $permission_event */
     $event = new PermissionEvent($this->randomMachineName(), $this->randomMachineName(), $group_content_bundle_ids);
-    $permission_event = $this->eventDispatcher->dispatch(PermissionEventInterface::EVENT_NAME, $event);
+    $permission_event = $this->eventDispatcher->dispatch($event, PermissionEventInterface::EVENT_NAME);
     $actual_permissions = array_keys($permission_event->getPermissions());
 
     // Sort the permission arrays so they can be compared.
@@ -218,9 +219,9 @@ class PermissionEventTest extends KernelTestBase {
   /**
    * Asserts that the two permissions are identical.
    *
-   * @param \Drupal\og\PermissionInterface $expected
+   * @param PermissionInterface $expected
    *   The expected permission.
-   * @param \Drupal\og\PermissionInterface $actual
+   * @param PermissionInterface $actual
    *   The actual permission.
    */
   protected function assertPermission(PermissionInterface $expected, PermissionInterface $actual) {
@@ -232,7 +233,7 @@ class PermissionEventTest extends KernelTestBase {
   /**
    * Returns the property names that are used for the given Permission object.
    *
-   * @param \Drupal\og\PermissionInterface $permission
+   * @param PermissionInterface $permission
    *   The Permission object for which to return the properties.
    *
    * @return array
diff --git a/tests/src/Kernel/Plugin/Block/MemberCountBlockTest.php b/tests/src/Kernel/Plugin/Block/MemberCountBlockTest.php
index 851db046..5f627faa 100644
--- a/tests/src/Kernel/Plugin/Block/MemberCountBlockTest.php
+++ b/tests/src/Kernel/Plugin/Block/MemberCountBlockTest.php
@@ -4,6 +4,16 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Plugin\Block;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\og\GroupTypeManagerInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Core\Entity\EntityViewBuilderInterface;
+use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\Render\PlaceholderingRenderCache;
+use Drupal\block\BlockInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\entity_test\Entity\EntityTest;
@@ -21,6 +31,7 @@ use Prophecy\Promise\CallbackPromise;
  */
 class MemberCountBlockTest extends KernelTestBase {
 
+  use ProphecyTrait;
   use OgMembershipCreationTrait;
   use StringTranslationTrait;
   use UserCreationTrait;
@@ -41,63 +52,63 @@ class MemberCountBlockTest extends KernelTestBase {
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface
+   * @var GroupTypeManagerInterface
    */
   protected $groupTypeManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The block storage handler.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $blockStorage;
 
   /**
    * The block view builder.
    *
-   * @var \Drupal\Core\Entity\EntityViewBuilderInterface
+   * @var EntityViewBuilderInterface
    */
   protected $blockViewBuilder;
 
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The render cache.
    *
-   * @var \Drupal\Core\Render\PlaceholderingRenderCache
+   * @var PlaceholderingRenderCache
    */
   protected $renderCache;
 
   /**
    * Test groups.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest[]
+   * @var EntityTest[]
    */
   protected $groups;
 
   /**
    * A test block. This is the system under test.
    *
-   * @var \Drupal\block\BlockInterface
+   * @var BlockInterface
    */
   protected $block;
 
@@ -106,7 +117,7 @@ class MemberCountBlockTest extends KernelTestBase {
    *
    * This group will be returned by the mocked OgContext service.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $activeGroup;
 
@@ -288,7 +299,7 @@ class MemberCountBlockTest extends KernelTestBase {
    * @param string $state
    *   The membership state to assign to the newly added member.
    *
-   * @return \Drupal\og\OgMembershipInterface
+   * @return OgMembershipInterface
    *   The membership entity for the newly added member.
    */
   protected function addMember($group_key, $state) {
@@ -304,7 +315,7 @@ class MemberCountBlockTest extends KernelTestBase {
    * @param mixed $value
    *   The value to set.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   Thrown when the updated block cannot be saved.
    */
   protected function updateBlockSetting($setting, $value) {
@@ -366,7 +377,7 @@ class MemberCountBlockTest extends KernelTestBase {
   /**
    * Callback providing the active group to be returned by the mocked OgContext.
    *
-   * @return \Drupal\entity_test\Entity\EntityTest
+   * @return EntityTest
    *   The active group.
    */
   public function getActiveGroup() {
diff --git a/tests/src/Kernel/Views/OgAdminMembersViewTest.php b/tests/src/Kernel/Views/OgAdminMembersViewTest.php
index 450292a9..27302ced 100644
--- a/tests/src/Kernel/Views/OgAdminMembersViewTest.php
+++ b/tests/src/Kernel/Views/OgAdminMembersViewTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Views;
 
+use Drupal\user\UserInterface;
+use Drupal\entity_test\Entity\EntityTest;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
 use Drupal\og\Og;
@@ -79,14 +82,14 @@ class OgAdminMembersViewTest extends ViewsKernelTestBase {
   /**
    * The user entity.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * The group entity.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $group;
 
@@ -126,7 +129,7 @@ class OgAdminMembersViewTest extends ViewsKernelTestBase {
    * Tests the Members table.
    */
   public function testMembersTable() {
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = $this->container->get('renderer');
 
     $view = Views::getView('og_members_overview');
diff --git a/tests/src/Traits/OgMembershipCreationTrait.php b/tests/src/Traits/OgMembershipCreationTrait.php
index f8ad5b2c..f813ce7a 100644
--- a/tests/src/Traits/OgMembershipCreationTrait.php
+++ b/tests/src/Traits/OgMembershipCreationTrait.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Traits;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\og\Entity\OgMembership;
@@ -21,9 +22,9 @@ trait OgMembershipCreationTrait {
   /**
    * Creates a test membership.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   The group for which to create the membership.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user for which to create the membership.
    * @param array|null $role_names
    *   Optional array of role names to assign to the membership. Defaults to the
@@ -37,10 +38,10 @@ trait OgMembershipCreationTrait {
    * @param string|null $membership_type
    *   The membership type. Defaults to 'default'.
    *
-   * @return \Drupal\og\OgMembershipInterface
+   * @return OgMembershipInterface
    *   The membership.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   Thrown when the membership cannot be created.
    */
   protected function createOgMembership(EntityInterface $group, AccountInterface $user, ?array $role_names = NULL, ?string $state = NULL, ?string $membership_type = NULL) {
@@ -56,7 +57,7 @@ trait OgMembershipCreationTrait {
       return OgRole::getRole($group_entity_type, $group_bundle, $role_name);
     }, $role_names);
 
-    /** @var \Drupal\og\OgMembershipInterface $membership */
+    /** @var OgMembershipInterface $membership */
     $membership = OgMembership::create(['type' => $membership_type]);
     $membership
       ->setRoles($roles)
diff --git a/tests/src/Unit/Cache/Context/OgCacheContextTestBase.php b/tests/src/Unit/Cache/Context/OgCacheContextTestBase.php
index 3d68a04d..0bec1210 100644
--- a/tests/src/Unit/Cache/Context/OgCacheContextTestBase.php
+++ b/tests/src/Unit/Cache/Context/OgCacheContextTestBase.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit\Cache\Context;
 
+use Drupal\Core\Cache\Context\CacheContextInterface;
 use Drupal\Tests\UnitTestCase;
 
 /**
@@ -14,7 +15,7 @@ abstract class OgCacheContextTestBase extends UnitTestCase {
   /**
    * Returns the instantiated cache context service which is being tested.
    *
-   * @return \Drupal\Core\Cache\Context\CacheContextInterface
+   * @return CacheContextInterface
    *   The instantiated cache context service.
    */
   abstract protected function getCacheContext();
diff --git a/tests/src/Unit/Cache/Context/OgContextCacheContextTestBase.php b/tests/src/Unit/Cache/Context/OgContextCacheContextTestBase.php
index cfe04d3a..ce591c6b 100644
--- a/tests/src/Unit/Cache/Context/OgContextCacheContextTestBase.php
+++ b/tests/src/Unit/Cache/Context/OgContextCacheContextTestBase.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit\Cache\Context;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\og\OgContextInterface;
 
@@ -17,17 +19,18 @@ use Drupal\og\OgContextInterface;
  */
 abstract class OgContextCacheContextTestBase extends OgCacheContextTestBase {
 
+  use ProphecyTrait;
   /**
    * The mocked OG context service.
    *
-   * @var \Drupal\og\OgContextInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgContextInterface|ObjectProphecy
    */
   protected $ogContext;
 
   /**
    * A mocked group entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityInterface|ObjectProphecy
    */
   protected $group;
 
@@ -69,6 +72,7 @@ abstract class OgContextCacheContextTestBase extends OgCacheContextTestBase {
    * Tests the result of the cache context service without active context.
    *
    * @covers ::getContext
+   * @doesNotPerformAssertions
    */
   abstract public function testWithoutContext();
 
@@ -98,7 +102,7 @@ abstract class OgContextCacheContextTestBase extends OgCacheContextTestBase {
   /**
    * Sets an expectation that OgContext will return the given group.
    *
-   * @param \Drupal\Core\Entity\EntityInterface|null $group
+   * @param EntityInterface|null $group
    *   The group to return, or NULL if no group is expected to be returned by
    *   OgContext.
    */
diff --git a/tests/src/Unit/Cache/Context/OgMembershipStateCacheContextTest.php b/tests/src/Unit/Cache/Context/OgMembershipStateCacheContextTest.php
index 077ddfdc..35f189c6 100644
--- a/tests/src/Unit/Cache/Context/OgMembershipStateCacheContextTest.php
+++ b/tests/src/Unit/Cache/Context/OgMembershipStateCacheContextTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit\Cache\Context;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\og\Cache\Context\OgMembershipStateCacheContext;
 use Drupal\og\MembershipManagerInterface;
@@ -17,24 +19,25 @@ use Drupal\og\OgMembershipInterface;
  */
 class OgMembershipStateCacheContextTest extends OgContextCacheContextTestBase {
 
+  use ProphecyTrait;
   /**
    * The OG membership entity.
    *
-   * @var \Drupal\og\OgMembershipInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgMembershipInterface|ObjectProphecy
    */
   protected $membership;
 
   /**
    * The membership manager service.
    *
-   * @var \Drupal\og\MembershipManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var MembershipManagerInterface|ObjectProphecy
    */
   protected $membershipManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var AccountInterface|ObjectProphecy
    */
   protected $user;
 
diff --git a/tests/src/Unit/Cache/Context/OgRoleCacheContextTest.php b/tests/src/Unit/Cache/Context/OgRoleCacheContextTest.php
index 8cd718bd..d4086f06 100644
--- a/tests/src/Unit/Cache/Context/OgRoleCacheContextTest.php
+++ b/tests/src/Unit/Cache/Context/OgRoleCacheContextTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit\Cache\Context;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Cache\Context\CacheContextInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -23,33 +25,34 @@ use Drupal\og\OgMembershipInterface;
  */
 class OgRoleCacheContextTest extends OgCacheContextTestBase {
 
+  use ProphecyTrait;
   use OgRoleCacheContextTestTrait;
 
   /**
    * The mocked entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeManagerInterface|ObjectProphecy
    */
   protected $entityTypeManager;
 
   /**
    * The mocked OG membership manager service.
    *
-   * @var \Drupal\og\MembershipManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var MembershipManagerInterface|ObjectProphecy
    */
   protected $membershipManager;
 
   /**
    * The mocked database connection.
    *
-   * @var \Drupal\Core\Database\Connection|\Prophecy\Prophecy\ObjectProphecy
+   * @var Connection|ObjectProphecy
    */
   protected $database;
 
   /**
    * The mocked private key handler.
    *
-   * @var \Drupal\Core\PrivateKey|\Prophecy\Prophecy\ObjectProphecy
+   * @var PrivateKey|ObjectProphecy
    */
   protected $privateKey;
 
@@ -75,7 +78,7 @@ class OgRoleCacheContextTest extends OgCacheContextTestBase {
   public function testNoMemberships(): void {
     // No memberships (an empty array) will be returned by the membership
     // manager.
-    /** @var \Drupal\Core\Session\AccountInterface|\Prophecy\Prophecy\ObjectProphecy $user */
+    /** @var AccountInterface|ObjectProphecy $user */
     $user = $this->prophesize(AccountInterface::class)->reveal();
     $this->membershipManager->getMemberships($user->id())->willReturn([]);
 
@@ -97,13 +100,13 @@ class OgRoleCacheContextTest extends OgCacheContextTestBase {
   public function testMembershipsWithOrphanedRole(): void {
     // Mock the membership with the orphaned role. It will return a group and
     // group entity type, but no roles.
-    /** @var \Drupal\og\OgMembershipInterface|\Prophecy\Prophecy\ObjectProphecy $membership */
+    /** @var OgMembershipInterface|ObjectProphecy $membership */
     $membership = $this->prophesize(OgMembershipInterface::class);
     $membership->getRolesIds()->willReturn([]);
 
     // The membership with the orphaned role will be returned by the membership
     // manager.
-    /** @var \Drupal\Core\Session\AccountInterface|\Prophecy\Prophecy\ObjectProphecy $user */
+    /** @var AccountInterface|ObjectProphecy $user */
     $user = $this->prophesize(AccountInterface::class)->reveal();
     $this->membershipManager->getMemberships($user->id())->willReturn([$membership]);
 
@@ -146,7 +149,7 @@ class OgRoleCacheContextTest extends OgCacheContextTestBase {
     // Mock the users that are defined in the test case.
     $user_ids = array_keys($group_memberships);
     $users = array_map(function ($user_id) {
-      /** @var \Drupal\Core\Session\AccountInterface|\Prophecy\Prophecy\ObjectProphecy $user */
+      /** @var AccountInterface|ObjectProphecy $user */
       $user = $this->prophesize(AccountInterface::class);
       $user->id()->willReturn($user_id);
       return $user->reveal();
@@ -168,7 +171,7 @@ class OgRoleCacheContextTest extends OgCacheContextTestBase {
             return "{$group_entity_type_id}-bundle-{$role_name}";
           }, $roles);
           // Mock the expected returns of method calls on the membership.
-          /** @var \Drupal\og\OgMembershipInterface|\Prophecy\Prophecy\ObjectProphecy $membership */
+          /** @var OgMembershipInterface|ObjectProphecy $membership */
           $membership = $this->prophesize(OgMembershipInterface::class);
           $membership->getGroupEntityType()->willReturn($group_entity_type_id);
           $membership->getGroupBundle()->willReturn('bundle');
diff --git a/tests/src/Unit/CreateMembershipTest.php b/tests/src/Unit/CreateMembershipTest.php
index d1be7ce7..9b00ea48 100644
--- a/tests/src/Unit/CreateMembershipTest.php
+++ b/tests/src/Unit/CreateMembershipTest.php
@@ -4,6 +4,10 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -25,45 +29,46 @@ use Prophecy\Argument;
  */
 class CreateMembershipTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeManagerInterface|ObjectProphecy
    */
   protected $entityTypeManager;
 
   /**
    * The mocked entity type repository.
    *
-   * @var \Drupal\Core\Entity\EntityTypeRepositoryInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeRepositoryInterface|ObjectProphecy
    */
   protected $entityTypeRepository;
 
   /**
    * The OG group audience helper.
    *
-   * @var \Drupal\og\OgGroupAudienceHelperInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgGroupAudienceHelperInterface|ObjectProphecy
    */
   protected $groupAudienceHelper;
 
   /**
    * The mocked memory cache backend.
    *
-   * @var \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var MemoryCacheInterface|ObjectProphecy
    */
   protected $staticCache;
 
   /**
    * The entity storage prophecy used in the test.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityStorageInterface|ObjectProphecy
    */
   protected $entityStorage;
 
   /**
    * A mocked test user.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var AccountInterface|ObjectProphecy
    */
   protected $user;
 
@@ -84,14 +89,14 @@ class CreateMembershipTest extends UnitTestCase {
   /**
    * The mocked test group.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityInterface|ObjectProphecy
    */
   protected $group;
 
   /**
    * The mocked test OG membership.
    *
-   * @var \Drupal\og\OgMembershipInterface
+   * @var OgMembershipInterface
    */
   protected $membership;
 
@@ -117,7 +122,7 @@ class CreateMembershipTest extends UnitTestCase {
       ->willReturn('og_membership');
 
     // Create a mocked Og Membership entity.
-    /** @var \Drupal\og\OgMembershipInterface|\Prophecy\Prophecy\ObjectProphecy $membership_entity */
+    /** @var OgMembershipInterface|ObjectProphecy $membership_entity */
     $membership_entity = $this->prophesize(OgMembershipInterface::class);
 
     $this->entityStorage
diff --git a/tests/src/Unit/DefaultRoleEventTest.php b/tests/src/Unit/DefaultRoleEventTest.php
index a8a1a795..03066d71 100644
--- a/tests/src/Unit/DefaultRoleEventTest.php
+++ b/tests/src/Unit/DefaultRoleEventTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Tests\UnitTestCase;
@@ -19,17 +21,18 @@ use Drupal\og\OgRoleInterface;
  */
 class DefaultRoleEventTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The DefaultRoleEvent class, which is the system under test.
    *
-   * @var \Drupal\og\Event\DefaultRoleEvent
+   * @var DefaultRoleEvent
    */
   protected $defaultRoleEvent;
 
   /**
    * The mocked OgRole entity storage.
    *
-   * @var \Drupal\core\Entity\EntityStorageInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var \Drupal\core\Entity\EntityStorageInterface|ObjectProphecy
    */
   protected $ogRoleStorage;
 
@@ -517,9 +520,9 @@ class DefaultRoleEventTest extends UnitTestCase {
   /**
    * Asserts that the given role properties matches the expected result.
    *
-   * @param \Drupal\og\Entity\OgRole $expected
+   * @param OgRole $expected
    *   The expected role.
-   * @param \Drupal\og\Entity\OgRole $actual
+   * @param OgRole $actual
    *   The actual OgRole entity to check.
    *
    *   Note that we are not specifying the OgRoleInterface type because of a PHP
@@ -534,7 +537,7 @@ class DefaultRoleEventTest extends UnitTestCase {
   /**
    * Adds an expectation that roles with the given properties should be created.
    *
-   * @param \Drupal\og\Entity\OgRole[] $roles
+   * @param OgRole[] $roles
    *   An array of role properties that are expected to be passed to the roles
    *   that should be created.
    */
diff --git a/tests/src/Unit/GroupCheckTest.php b/tests/src/Unit/GroupCheckTest.php
index a303e699..0001e520 100644
--- a/tests/src/Unit/GroupCheckTest.php
+++ b/tests/src/Unit/GroupCheckTest.php
@@ -4,6 +4,10 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
+use Drupal\og\OgAccess;
+use Drupal\user\UserInterface;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityInterface;
@@ -25,45 +29,46 @@ use Symfony\Component\Routing\Route;
  */
 class GroupCheckTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The entity type manager prophecy used in the test.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeManagerInterface|ObjectProphecy
    */
   protected $entityTypeManager;
 
   /**
    * The entity type prophecy used in the test.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var \Drupal\Core\Entity\EntityTypeInterface|ObjectProphecy
    */
   protected $entityType;
 
   /**
    * The entity storage prophecy used in the test.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityStorageInterface|ObjectProphecy
    */
   protected $entityStorage;
 
   /**
    * The OG access service prophecy used in the test.
    *
-   * @var \Drupal\og\OgAccess|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgAccess|ObjectProphecy
    */
   protected $ogAccess;
 
   /**
    * The route service prophecy used in the test.
    *
-   * @var \Symfony\Component\Routing\Route|\Prophecy\Prophecy\ObjectProphecy
+   * @var Route|ObjectProphecy
    */
   protected $route;
 
   /**
    * A user used in the test.
    *
-   * @var \Drupal\user\UserInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var UserInterface|ObjectProphecy
    */
   protected $user;
 
@@ -84,7 +89,7 @@ class GroupCheckTest extends UnitTestCase {
   /**
    * The test group entity used in the test..
    *
-   * @var \Drupal\Core\Entity\EntityInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityInterface|ObjectProphecy
    */
   protected $group;
 
@@ -98,14 +103,14 @@ class GroupCheckTest extends UnitTestCase {
   /**
    * The group manager used in the test.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var GroupTypeManagerInterface|ObjectProphecy
    */
   protected $groupTypeManager;
 
   /**
    * The access result used in the test.
    *
-   * @var \Drupal\Core\Access\AccessResultInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var AccessResultInterface|ObjectProphecy
    */
   protected $accessResult;
 
@@ -334,7 +339,7 @@ class GroupCheckTest extends UnitTestCase {
   /**
    * Return the access result.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   protected function getAccessResult() {
diff --git a/tests/src/Unit/GroupTypeManagerTest.php b/tests/src/Unit/GroupTypeManagerTest.php
index b46a0e30..27fb7724 100644
--- a/tests/src/Unit/GroupTypeManagerTest.php
+++ b/tests/src/Unit/GroupTypeManagerTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -32,94 +34,95 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
  */
 class GroupTypeManagerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The config prophecy used in the test.
    *
-   * @var \Drupal\Core\Config\Config|\Prophecy\Prophecy\ObjectProphecy
+   * @var Config|ObjectProphecy
    */
   protected $config;
 
   /**
    * The config factory prophecy used in the test.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var ConfigFactoryInterface|ObjectProphecy
    */
   protected $configFactory;
 
   /**
    * The entity type manager prophecy used in the test.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeManagerInterface|ObjectProphecy
    */
   protected $entityTypeManager;
 
   /**
    * The entity storage prophecy used in the test.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityStorageInterface|ObjectProphecy
    */
   protected $entityStorage;
 
   /**
    * The OG role prophecy used in the test.
    *
-   * @var \Drupal\og\Entity\OgRole|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgRole|ObjectProphecy
    */
   protected $ogRole;
 
   /**
    * The entity type bundle info prophecy used in the test.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeBundleInfoInterface|ObjectProphecy
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The event dispatcher prophecy used in the test.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EventDispatcherInterface|ObjectProphecy
    */
   protected $eventDispatcher;
 
   /**
    * The permission event prophecy used in the test.
    *
-   * @var \Drupal\og\Event\PermissionEventInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var PermissionEventInterface|ObjectProphecy
    */
   protected $permissionEvent;
 
   /**
    * The cache prophecy used in the test.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var CacheBackendInterface|ObjectProphecy
    */
   protected $cache;
 
   /**
    * The OG permission manager prophecy used in the test.
    *
-   * @var \Drupal\og\PermissionManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var PermissionManagerInterface|ObjectProphecy
    */
   protected $permissionManager;
 
   /**
    * The OG role manager prophecy used in the test.
    *
-   * @var \Drupal\og\OgRoleManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgRoleManagerInterface|ObjectProphecy
    */
   protected $ogRoleManager;
 
   /**
    * The route builder service used in the test.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var RouteBuilderInterface|ObjectProphecy
    */
   protected $routeBuilder;
 
   /**
    * The OG group audience helper.
    *
-   * @var \Drupal\og\OgGroupAudienceHelperInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgGroupAudienceHelperInterface|ObjectProphecy
    */
   protected $groupAudienceHelper;
 
@@ -312,7 +315,7 @@ class GroupTypeManagerTest extends UnitTestCase {
   /**
    * Creates a group manager instance with a mock config factory.
    *
-   * @return \Drupal\og\GroupTypeManagerInterface
+   * @return GroupTypeManagerInterface
    *   Returns the group manager.
    */
   protected function createGroupManager() {
diff --git a/tests/src/Unit/OgAccessEntityTestBase.php b/tests/src/Unit/OgAccessEntityTestBase.php
index d0e542d3..c719d4a0 100644
--- a/tests/src/Unit/OgAccessEntityTestBase.php
+++ b/tests/src/Unit/OgAccessEntityTestBase.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -19,10 +21,11 @@ use Drupal\og\OgGroupAudienceHelperInterface;
  */
 abstract class OgAccessEntityTestBase extends OgAccessTestBase {
 
+  use ProphecyTrait;
   /**
    * A test group content entity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var ContentEntityInterface|ObjectProphecy
    */
   protected $groupContentEntity;
 
diff --git a/tests/src/Unit/OgAccessHookTest.php b/tests/src/Unit/OgAccessHookTest.php
index b55c9ee0..0f7dff1a 100644
--- a/tests/src/Unit/OgAccessHookTest.php
+++ b/tests/src/Unit/OgAccessHookTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityInterface;
 
 /**
@@ -13,6 +14,7 @@ use Drupal\Core\Entity\EntityInterface;
  */
 class OgAccessHookTest extends OgAccessEntityTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
diff --git a/tests/src/Unit/OgAccessTestBase.php b/tests/src/Unit/OgAccessTestBase.php
index 959a1867..462aaff3 100644
--- a/tests/src/Unit/OgAccessTestBase.php
+++ b/tests/src/Unit/OgAccessTestBase.php
@@ -4,6 +4,11 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
+use Drupal\user\UserInterface;
+use Drupal\og\OgAccessInterface;
+use Drupal\og\OgRoleInterface;
 use Drupal\Core\Cache\Context\CacheContextsManager;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -30,17 +35,18 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
  */
 class OgAccessTestBase extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The mocked config handler.
    *
-   * @var \Drupal\Core\Config\Config|\Prophecy\Prophecy\ObjectProphecy
+   * @var Config|ObjectProphecy
    */
   protected $config;
 
   /**
    * A mocked test user.
    *
-   * @var \Drupal\user\UserInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var UserInterface|ObjectProphecy
    */
   protected $user;
 
@@ -68,56 +74,56 @@ class OgAccessTestBase extends UnitTestCase {
   /**
    * The mocked test group.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityInterface|ObjectProphecy
    */
   protected $group;
 
   /**
    * The mocked group manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var GroupTypeManagerInterface|ObjectProphecy
    */
   protected $groupTypeManager;
 
   /**
    * The mocked permission manager.
    *
-   * @var \Drupal\og\PermissionManager|\Prophecy\Prophecy\ObjectProphecy
+   * @var PermissionManager|ObjectProphecy
    */
   protected $permissionManager;
 
   /**
    * The OgAccess class, this is the system under test.
    *
-   * @var \Drupal\og\OgAccessInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgAccessInterface|ObjectProphecy
    */
   protected $ogAccess;
 
   /**
    * The group membership manager service.
    *
-   * @var \Drupal\og\MembershipManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var MembershipManagerInterface|ObjectProphecy
    */
   protected $membershipManager;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeManagerInterface|ObjectProphecy
    */
   protected $entityTypeManager;
 
   /**
    * The membership entity.
    *
-   * @var \Drupal\og\OgMembershipInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgMembershipInterface|ObjectProphecy
    */
   protected $membership;
 
   /**
    * The OG role.
    *
-   * @var \Drupal\og\OgRoleInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgRoleInterface|ObjectProphecy
    */
   protected $ogRole;
 
@@ -214,7 +220,7 @@ class OgAccessTestBase extends UnitTestCase {
    *   Whether or not this test group should be owned by the test user which is
    *   used in the test.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @return EntityInterface|ObjectProphecy
    *   The test group.
    */
   protected function groupEntity($is_owner = FALSE) {
diff --git a/tests/src/Unit/OgAdminRoutesControllerTest.php b/tests/src/Unit/OgAdminRoutesControllerTest.php
index 9396912f..a8f18868 100644
--- a/tests/src/Unit/OgAdminRoutesControllerTest.php
+++ b/tests/src/Unit/OgAdminRoutesControllerTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
+use Drupal\Core\Routing\RouteProvider;
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Core\Access\AccessManagerInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ -25,52 +28,53 @@ use Symfony\Component\Routing\Route;
  */
 class OgAdminRoutesControllerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The access manager service.
    *
-   * @var \Drupal\Core\Access\AccessManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var AccessManagerInterface|ObjectProphecy
    */
   protected $accessManager;
 
   /**
    * Route provider object.
    *
-   * @var \Drupal\Core\Routing\RouteProvider|\Prophecy\Prophecy\ObjectProphecy
+   * @var RouteProvider|ObjectProphecy
    */
   protected $routeProvider;
 
   /**
    * The route service.
    *
-   * @var \Symfony\Component\Routing\Route|\Prophecy\Prophecy\ObjectProphecy
+   * @var Route|ObjectProphecy
    */
   protected $route;
 
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var RouteMatchInterface|ObjectProphecy
    */
   protected $routeMatch;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher|\Prophecy\Prophecy\ObjectProphecy
+   * @var ContainerAwareEventDispatcher|ObjectProphecy
    */
   protected $eventDispatcher;
 
   /**
    * The group entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityInterface|ObjectProphecy
    */
   protected $group;
 
   /**
    * The OG admin route event.
    *
-   * @var \Drupal\og\Event\OgAdminRoutesEvent
+   * @var OgAdminRoutesEvent
    */
   protected $event;
 
@@ -91,7 +95,7 @@ class OgAdminRoutesControllerTest extends UnitTestCase {
   /**
    * The Url object.
    *
-   * @var \Drupal\Core\Url
+   * @var Url
    */
   protected $url;
 
diff --git a/tests/src/Unit/OgContextTest.php b/tests/src/Unit/OgContextTest.php
index 92d91c2e..ebf0700e 100644
--- a/tests/src/Unit/OgContextTest.php
+++ b/tests/src/Unit/OgContextTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
@@ -26,45 +28,46 @@ use Symfony\Component\DependencyInjection\Container;
  */
 class OgContextTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * A mocked plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var PluginManagerInterface|ObjectProphecy
    */
   protected $pluginManager;
 
   /**
    * A mocked config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var ConfigFactoryInterface|ObjectProphecy
    */
   protected $configFactory;
 
   /**
    * A mocked typed data manager service.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var TypedDataManagerInterface|ObjectProphecy
    */
   protected $typedDataManager;
 
   /**
    * A mocked typed data definition.
    *
-   * @var \Drupal\Core\Entity\TypedData\EntityDataDefinition|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityDataDefinition|ObjectProphecy
    */
   protected $dataDefinition;
 
   /**
    * A mocked typed data object.
    *
-   * @var \Drupal\Core\TypedData\TypedDataInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var TypedDataInterface|ObjectProphecy
    */
   protected $typedData;
 
   /**
    * An array of mocked test entities.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface[]|\Prophecy\Prophecy\ObjectProphecy[]
+   * @var ContentEntityInterface[]|ObjectProphecy[]
    */
   protected $entities;
 
@@ -169,7 +172,7 @@ class OgContextTest extends UnitTestCase {
         ->willReturn(!empty($group_resolver['stop_propagation']));
       $plugin->resolve(Argument::type(OgResolvedGroupCollectionInterface::class))
         ->will(function ($args) use ($entities, $group_resolver) {
-          /** @var \Drupal\og\OgResolvedGroupCollectionInterface $collection */
+          /** @var OgResolvedGroupCollectionInterface $collection */
           $collection = $args[0];
           foreach ($group_resolver['candidates'] as $candidate) {
             $entity = $entities[$candidate['entity']];
diff --git a/tests/src/Unit/OgLocalTaskTest.php b/tests/src/Unit/OgLocalTaskTest.php
index b0e451fd..1947a6ff 100644
--- a/tests/src/Unit/OgLocalTaskTest.php
+++ b/tests/src/Unit/OgLocalTaskTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Routing\RouteProvider;
 use Drupal\Tests\UnitTestCase;
@@ -21,24 +23,25 @@ use Symfony\Component\Routing\Route;
  */
 class OgLocalTaskTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var GroupTypeManagerInterface|ObjectProphecy
    */
   protected $groupTypeManager;
 
   /**
    * Route provider object.
    *
-   * @var \Drupal\Core\Routing\RouteProvider|\Prophecy\Prophecy\ObjectProphecy
+   * @var RouteProvider|ObjectProphecy
    */
   protected $routeProvider;
 
   /**
    * The route service.
    *
-   * @var \Symfony\Component\Routing\Route|\Prophecy\Prophecy\ObjectProphecy
+   * @var Route|ObjectProphecy
    */
   protected $route;
 
diff --git a/tests/src/Unit/OgResolvedGroupCollectionTest.php b/tests/src/Unit/OgResolvedGroupCollectionTest.php
index 862e2325..dccb9eeb 100644
--- a/tests/src/Unit/OgResolvedGroupCollectionTest.php
+++ b/tests/src/Unit/OgResolvedGroupCollectionTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\og\OgResolvedGroupCollection;
@@ -16,10 +18,11 @@ use Drupal\og\OgResolvedGroupCollection;
  */
 class OgResolvedGroupCollectionTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * An array of mocked test groups, keyed by entity type ID and entity ID.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface[]|\Prophecy\Prophecy\ObjectProphecy[]
+   * @var ContentEntityInterface[]|ObjectProphecy[]
    */
   protected $groups;
 
@@ -34,7 +37,7 @@ class OgResolvedGroupCollectionTest extends UnitTestCase {
     foreach ($entity_types as $entity_type) {
       for ($i = 0; $i < 2; $i++) {
         $entity_id = "$entity_type-$i";
-        /** @var \Drupal\Core\Entity\ContentEntityInterface|\Prophecy\Prophecy\ObjectProphecy $entity */
+        /** @var ContentEntityInterface|ObjectProphecy $entity */
         $entity = $this->prophesize(ContentEntityInterface::class);
         $entity->getEntityTypeId()->willReturn($entity_type);
         $entity->id()->willReturn($entity_id);
diff --git a/tests/src/Unit/OgRoleManagerTest.php b/tests/src/Unit/OgRoleManagerTest.php
index 293e3eda..db763826 100644
--- a/tests/src/Unit/OgRoleManagerTest.php
+++ b/tests/src/Unit/OgRoleManagerTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
+use Drupal\og\OgRoleManagerInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Tests\UnitTestCase;
@@ -21,6 +24,7 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
  */
 class OgRoleManagerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The entity type ID of the test group.
    *
@@ -38,42 +42,42 @@ class OgRoleManagerTest extends UnitTestCase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeManagerInterface|ObjectProphecy
    */
   protected $entityTypeManager;
 
   /**
    * The entity storage service.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityStorageInterface|ObjectProphecy
    */
   protected $entityStorage;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EventDispatcherInterface|ObjectProphecy
    */
   protected $eventDispatcher;
 
   /**
    * The created OG role.
    *
-   * @var \Drupal\og\Entity\OgRole|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgRole|ObjectProphecy
    */
   protected $ogRole;
 
   /**
    * The entity storage for OgRole entities.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $ogRoleStorage;
 
   /**
    * The permissions manager service.
    *
-   * @var \Drupal\og\PermissionManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var PermissionManagerInterface|ObjectProphecy
    */
   protected $permissionManager;
 
@@ -224,7 +228,7 @@ class OgRoleManagerTest extends UnitTestCase {
   /**
    * Return a new OG role manager object.
    *
-   * @return \Drupal\og\OgRoleManagerInterface
+   * @return OgRoleManagerInterface
    *   The initialized OG role manager.
    */
   protected function getOgRoleManager() {
diff --git a/tests/src/Unit/PermissionEventTest.php b/tests/src/Unit/PermissionEventTest.php
index 14d4f98f..0ad17f3c 100644
--- a/tests/src/Unit/PermissionEventTest.php
+++ b/tests/src/Unit/PermissionEventTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Drupal\og\PermissionInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\og\Event\PermissionEvent;
 use Drupal\og\GroupContentOperationPermission;
@@ -22,7 +23,7 @@ class PermissionEventTest extends UnitTestCase {
   /**
    * Tests getting a single group permission.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ -62,7 +63,7 @@ class PermissionEventTest extends UnitTestCase {
   /**
    * Tests getting a single group content permission.
    *
-   * @param \Drupal\og\GroupContentOperationPermission[] $permissions
+   * @param GroupContentOperationPermission[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ -101,7 +102,7 @@ class PermissionEventTest extends UnitTestCase {
   /**
    * Tests getting group permissions.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ -126,7 +127,7 @@ class PermissionEventTest extends UnitTestCase {
   /**
    * Tests setting group permissions.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ -153,7 +154,7 @@ class PermissionEventTest extends UnitTestCase {
   /**
    * Tests setting an invalid permission.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ -178,7 +179,7 @@ class PermissionEventTest extends UnitTestCase {
   /**
    * Tests deleting a permission.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ -209,7 +210,7 @@ class PermissionEventTest extends UnitTestCase {
   /**
    * Tests deleting a group content permission.
    *
-   * @param \Drupal\og\GroupContentOperationPermission[] $permissions
+   * @param GroupContentOperationPermission[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ -247,7 +248,7 @@ class PermissionEventTest extends UnitTestCase {
   /**
    * Tests checking if permission exists.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ -274,7 +275,7 @@ class PermissionEventTest extends UnitTestCase {
   /**
    * Tests checking if group content permission exists.
    *
-   * @param \Drupal\og\GroupContentOperationPermission[] $permissions
+   * @param GroupContentOperationPermission[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ -306,7 +307,7 @@ class PermissionEventTest extends UnitTestCase {
   /**
    * Tests getting a group entity type ID.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ -328,7 +329,7 @@ class PermissionEventTest extends UnitTestCase {
   /**
    * Tests getting a group bundle ID.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ -350,7 +351,7 @@ class PermissionEventTest extends UnitTestCase {
   /**
    * Tests getting group content bundle IDs.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ -372,7 +373,7 @@ class PermissionEventTest extends UnitTestCase {
   /**
    * Tests "offsetGet".
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ -408,7 +409,7 @@ class PermissionEventTest extends UnitTestCase {
   /**
    * Tests "offsetSet".
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ -498,7 +499,7 @@ class PermissionEventTest extends UnitTestCase {
   /**
    * Tests "offsetUnset".
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ -530,7 +531,7 @@ class PermissionEventTest extends UnitTestCase {
   /**
    * Tests "offsetExists".
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
@@ -557,7 +558,7 @@ class PermissionEventTest extends UnitTestCase {
   /**
    * Check that the iterator has looped over all permissions correctly.
    *
-   * @param \Drupal\og\PermissionInterface[] $permissions
+   * @param PermissionInterface[] $permissions
    *   An array of test permissions.
    * @param string $entity_type_id
    *   The entity type ID of the group type to which the permissions apply.
diff --git a/tests/src/Unit/Plugin/OgGroupResolver/OgGroupResolverTestBase.php b/tests/src/Unit/Plugin/OgGroupResolver/OgGroupResolverTestBase.php
index 950baabc..c67c17b2 100644
--- a/tests/src/Unit/Plugin/OgGroupResolver/OgGroupResolverTestBase.php
+++ b/tests/src/Unit/Plugin/OgGroupResolver/OgGroupResolverTestBase.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit\Plugin\OgGroupResolver;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
+use Drupal\og\OgGroupResolverInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Tests\UnitTestCase;
@@ -18,6 +21,7 @@ use Drupal\og\OgGroupAudienceHelperInterface;
  */
 abstract class OgGroupResolverTestBase extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The fully qualified class name of the plugin under test.
    *
@@ -35,35 +39,35 @@ abstract class OgGroupResolverTestBase extends UnitTestCase {
   /**
    * Mocked test entities.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface[]
+   * @var ContentEntityInterface[]
    */
   protected $testEntities;
 
   /**
    * The mocked entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeManagerInterface|ObjectProphecy
    */
   protected $entityTypeManager;
 
   /**
    * The OG group audience helper.
    *
-   * @var \Drupal\og\OgGroupAudienceHelperInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgGroupAudienceHelperInterface|ObjectProphecy
    */
   protected $groupAudienceHelper;
 
   /**
    * The mocked OG group type manager.
    *
-   * @var \Drupal\og\GroupTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var GroupTypeManagerInterface|ObjectProphecy
    */
   protected $groupTypeManager;
 
   /**
    * The OG membership manager.
    *
-   * @var \Drupal\og\MembershipManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var MembershipManagerInterface|ObjectProphecy
    */
   protected $membershipManager;
 
@@ -80,7 +84,7 @@ abstract class OgGroupResolverTestBase extends UnitTestCase {
     $this->membershipManager = $this->prophesize(MembershipManagerInterface::class);
 
     // Create mocked test entities.
-    /** @var \Drupal\Core\Entity\ContentEntityInterface[] $test_entities */
+    /** @var ContentEntityInterface[] $test_entities */
     $test_entities = [];
     foreach ($this->getTestEntityProperties() as $id => $properties) {
       $entity_type_id = $properties['type'];
@@ -118,6 +122,7 @@ abstract class OgGroupResolverTestBase extends UnitTestCase {
    *
    * @dataProvider resolveProvider
    * @covers ::resolve()
+   * @doesNotPerformAssertions
    */
   abstract public function testResolve();
 
@@ -163,7 +168,7 @@ abstract class OgGroupResolverTestBase extends UnitTestCase {
   /**
    * Returns an instance of the plugin under test.
    *
-   * @return \Drupal\og\OgGroupResolverInterface
+   * @return OgGroupResolverInterface
    *   The plugin under test.
    */
   protected function getPluginInstance() {
@@ -200,11 +205,11 @@ abstract class OgGroupResolverTestBase extends UnitTestCase {
    *   - type: The entity type.
    *   - bundle: The entity bundle.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @return ContentEntityInterface|ObjectProphecy
    *   The mocked entity.
    */
   protected function createMockedEntity($id, array $properties) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface|\Prophecy\Prophecy\ObjectProphecy $entity */
+    /** @var ContentEntityInterface|ObjectProphecy $entity */
     $entity = $this->prophesize(ContentEntityInterface::class);
 
     // In case this entity is questioned about its identity, it shall
diff --git a/tests/src/Unit/Plugin/OgGroupResolver/OgRouteGroupResolverTestBase.php b/tests/src/Unit/Plugin/OgGroupResolver/OgRouteGroupResolverTestBase.php
index 3fdb3747..0d7c8ade 100644
--- a/tests/src/Unit/Plugin/OgGroupResolver/OgRouteGroupResolverTestBase.php
+++ b/tests/src/Unit/Plugin/OgGroupResolver/OgRouteGroupResolverTestBase.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit\Plugin\OgGroupResolver;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -15,6 +17,7 @@ use Symfony\Component\Routing\Route;
  */
 abstract class OgRouteGroupResolverTestBase extends OgGroupResolverTestBase {
 
+  use ProphecyTrait;
   /**
    * A list of link templates that belong to entity types used in the tests.
    *
@@ -49,7 +52,7 @@ abstract class OgRouteGroupResolverTestBase extends OgGroupResolverTestBase {
   /**
    * The mocked route matcher.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var RouteMatchInterface|ObjectProphecy
    */
   protected $routeMatch;
 
@@ -105,7 +108,7 @@ abstract class OgRouteGroupResolverTestBase extends OgGroupResolverTestBase {
     }
 
     // Add expectations for groups that should be added or removed.
-    /** @var \Drupal\og\OgResolvedGroupCollectionInterface|\Prophecy\Prophecy\ObjectProphecy $collection */
+    /** @var OgResolvedGroupCollectionInterface|ObjectProphecy $collection */
     $collection = $this->prophesize(OgResolvedGroupCollectionInterface::class);
 
     foreach ($expected_added_groups as $expected_added_group) {
@@ -153,7 +156,7 @@ abstract class OgRouteGroupResolverTestBase extends OgGroupResolverTestBase {
    *   The path that will be retrieved.
    */
   protected function willRetrieveCurrentPathFromRouteMatcher($path) {
-    /** @var \Symfony\Component\Routing\Route|\Prophecy\Prophecy\ObjectProphecy $route */
+    /** @var Route|ObjectProphecy $route */
     $route = $this->prophesize(Route::class);
     $route
       ->getPath()
@@ -179,7 +182,7 @@ abstract class OgRouteGroupResolverTestBase extends OgGroupResolverTestBase {
     // Provide some mocked content entity types.
     $entity_types = [];
     foreach (array_keys($this->linkTemplates) as $entity_type_id) {
-      /** @var \Drupal\Core\Entity\EntityTypeInterface|\Prophecy\Prophecy\ObjectProphecy $entity_type */
+      /** @var EntityTypeInterface|ObjectProphecy $entity_type */
       $entity_type = $this->prophesize(EntityTypeInterface::class);
       // The plugin will need to know if this is a content entity, so we will
       // provide this information. We are not requiring this to be called since
diff --git a/tests/src/Unit/Plugin/OgGroupResolver/RequestQueryArgumentResolverTest.php b/tests/src/Unit/Plugin/OgGroupResolver/RequestQueryArgumentResolverTest.php
index 8daf87f7..b2a8866c 100644
--- a/tests/src/Unit/Plugin/OgGroupResolver/RequestQueryArgumentResolverTest.php
+++ b/tests/src/Unit/Plugin/OgGroupResolver/RequestQueryArgumentResolverTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit\Plugin\OgGroupResolver;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\og\OgResolvedGroupCollectionInterface;
 use Drupal\og\Plugin\OgGroupResolver\RequestQueryArgumentResolver;
@@ -19,6 +21,7 @@ use Symfony\Component\HttpFoundation\RequestStack;
  */
 class RequestQueryArgumentResolverTest extends OgGroupResolverTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ -32,7 +35,7 @@ class RequestQueryArgumentResolverTest extends OgGroupResolverTestBase {
   /**
    * The mocked request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack|\Prophecy\Prophecy\ObjectProphecy
+   * @var RequestStack|ObjectProphecy
    */
   protected $requestStack;
 
@@ -73,7 +76,7 @@ class RequestQueryArgumentResolverTest extends OgGroupResolverTestBase {
       ->shouldBeCalled();
 
     // It will retrieve the query object from the request.
-    /** @var \Symfony\Component\HttpFoundation\ParameterBag|\Prophecy\Prophecy\ObjectProphecy $query */
+    /** @var ParameterBag|ObjectProphecy $query */
     $query = $this->prophesize(ParameterBag::class);
 
     // Mock methods to check for the existence and value of the query arguments
@@ -104,7 +107,7 @@ class RequestQueryArgumentResolverTest extends OgGroupResolverTestBase {
     }
 
     // Construct a collection of groups that were discovered by other plugins.
-    /** @var \Drupal\og\OgResolvedGroupCollectionInterface|\Prophecy\Prophecy\ObjectProphecy $collection */
+    /** @var OgResolvedGroupCollectionInterface|ObjectProphecy $collection */
     $collection = $this->prophesize(OgResolvedGroupCollectionInterface::class);
 
     // Set expectations for investigations the plugin may launch into the nature
diff --git a/tests/src/Unit/Plugin/OgGroupResolver/RouteGroupResolverTest.php b/tests/src/Unit/Plugin/OgGroupResolver/RouteGroupResolverTest.php
index 3fa80608..31c01840 100644
--- a/tests/src/Unit/Plugin/OgGroupResolver/RouteGroupResolverTest.php
+++ b/tests/src/Unit/Plugin/OgGroupResolver/RouteGroupResolverTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit\Plugin\OgGroupResolver;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\og\Plugin\OgGroupResolver\RouteGroupResolver;
 
@@ -15,6 +17,7 @@ use Drupal\og\Plugin\OgGroupResolver\RouteGroupResolver;
  */
 class RouteGroupResolverTest extends OgRouteGroupResolverTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ -52,7 +55,7 @@ class RouteGroupResolverTest extends OgRouteGroupResolverTestBase {
    *
    * This mimicks the data returned by EntityTypeManager::getDefinitions().
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    *   A list of mocked entity types.
    *
    * @see \Drupal\Core\Entity\EntityTypeManagerInterface::getDefinitions()
diff --git a/tests/src/Unit/Plugin/OgGroupResolver/UserGroupAccessResolverTest.php b/tests/src/Unit/Plugin/OgGroupResolver/UserGroupAccessResolverTest.php
index 0dc28912..0dd92982 100644
--- a/tests/src/Unit/Plugin/OgGroupResolver/UserGroupAccessResolverTest.php
+++ b/tests/src/Unit/Plugin/OgGroupResolver/UserGroupAccessResolverTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit\Plugin\OgGroupResolver;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\og\OgResolvedGroupCollectionInterface;
 use Drupal\og\Plugin\OgGroupResolver\UserGroupAccessResolver;
 
@@ -15,6 +17,7 @@ use Drupal\og\Plugin\OgGroupResolver\UserGroupAccessResolver;
  */
 class UserGroupAccessResolverTest extends OgGroupResolverTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ -45,7 +48,7 @@ class UserGroupAccessResolverTest extends OgGroupResolverTestBase {
    */
   public function testResolve(array $previously_added_groups = [], array $expected_added_groups = [], array $expected_removed_groups = []) {
     // Construct a collection of groups that were discovered by other plugins.
-    /** @var \Drupal\og\OgResolvedGroupCollectionInterface|\Prophecy\Prophecy\ObjectProphecy $collection */
+    /** @var OgResolvedGroupCollectionInterface|ObjectProphecy $collection */
     $collection = $this->prophesize(OgResolvedGroupCollectionInterface::class);
 
     // It is expected that the plugin will retrieve the full set of information
diff --git a/tests/src/Unit/SubscriptionControllerTest.php b/tests/src/Unit/SubscriptionControllerTest.php
index 1335b421..f2e7a552 100644
--- a/tests/src/Unit/SubscriptionControllerTest.php
+++ b/tests/src/Unit/SubscriptionControllerTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
+use Drupal\user\UserInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityFormBuilderInterface;
@@ -27,59 +30,60 @@ use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
  */
 class SubscriptionControllerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The entity for builder object.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityFormBuilderInterface|ObjectProphecy
    */
   protected $entityFormBuilder;
 
   /**
    * The group entity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var ContentEntityInterface|ObjectProphecy
    */
   protected $group;
 
   /**
    * The membership manager service.
    *
-   * @var \Drupal\og\MembershipManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var MembershipManagerInterface|ObjectProphecy
    */
   protected $membershipManager;
 
   /**
    * OG access service.
    *
-   * @var \Drupal\og\OgAccessInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgAccessInterface|ObjectProphecy
    */
   protected $ogAccess;
 
   /**
    * The mocked messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var MessengerInterface|ObjectProphecy
    */
   protected $messenger;
 
   /**
    * The OG membership entity.
    *
-   * @var \Drupal\og\OgMembershipInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var OgMembershipInterface|ObjectProphecy
    */
   protected $ogMembership;
 
   /**
    * The URL object.
    *
-   * @var \Drupal\Core\Url|\Prophecy\Prophecy\ObjectProphecy
+   * @var Url|ObjectProphecy
    */
   protected $url;
 
   /**
    * The user entity.
    *
-   * @var \Drupal\user\UserInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var UserInterface|ObjectProphecy
    */
   protected $user;
 
@@ -93,7 +97,7 @@ class SubscriptionControllerTest extends UnitTestCase {
   /**
    * The mocked entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var EntityTypeManagerInterface|ObjectProphecy
    */
   protected $entityTypeManager;
 
