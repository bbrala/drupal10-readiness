diff --git a/includes/webform.date.inc b/includes/webform.date.inc
index 9042f13ea..e2161c783 100644
--- a/includes/webform.date.inc
+++ b/includes/webform.date.inc
@@ -15,9 +15,9 @@ use Drupal\webform\Plugin\WebformElement\DateTime;
  *
  * @param array $element
  *   The element.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
- * @param \Drupal\Core\Datetime\DrupalDateTime|null $date
+ * @param DrupalDateTime|null $date
  *   The date value.
  *
  * @see \Drupal\Core\Datetime\Element\Datelist::processDatelist
@@ -31,9 +31,9 @@ function _webform_datelist_date_date_callback(array &$element, FormStateInterfac
  *
  * @param array $element
  *   The element.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
- * @param \Drupal\Core\Datetime\DrupalDateTime|null $date
+ * @param DrupalDateTime|null $date
  *   The date value.
  *
  * @see \Drupal\webform\Plugin\WebformElement\DateTime::prepare
@@ -47,9 +47,9 @@ function _webform_datetime_date(array &$element, FormStateInterface $form_state,
  *
  * @param array $element
  *   The element.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
- * @param \Drupal\Core\Datetime\DrupalDateTime|null $date
+ * @param DrupalDateTime|null $date
  *   The date value.
  *
  * @see \Drupal\webform\Plugin\WebformElement\DateTime::prepare
diff --git a/includes/webform.editor.inc b/includes/webform.editor.inc
index ebec16e5a..fe5a184e3 100644
--- a/includes/webform.editor.inc
+++ b/includes/webform.editor.inc
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityRepositoryInterface;
+use Drupal\file\FileUsage\FileUsageInterface;
 /**
  * @file
  * Webform module editor file upload hooks.
@@ -66,11 +69,10 @@ function webform_webform_delete(WebformInterface $webform) {
 // @see \Drupal\webform\Form\AdminConfig\WebformAdminConfigBaseForm::loadConfig
 // @see \Drupal\webform\Form\AdminConfig\WebformAdminConfigBaseForm::saveConfig
 /* ************************************************************************** */
-
 /**
  * Update config editor file references.
  *
- * @param \Drupal\Core\Config\Config $config
+ * @param Config $config
  *   An editable configuration object.
  */
 function _webform_config_update(Config $config) {
@@ -89,7 +91,7 @@ function _webform_config_update(Config $config) {
 /**
  * Delete config editor file references.
  *
- * @param \Drupal\Core\Config\Config $config
+ * @param Config $config
  *   An editable configuration object.
  *
  * @see webform_uninstall()
@@ -102,11 +104,10 @@ function _webform_config_delete(Config $config) {
 /* ************************************************************************** */
 // Config entity functions.
 /* ************************************************************************** */
-
 /**
  * Finds all files referenced (data-entity-uuid) by config entity.
  *
- * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+ * @param ConfigEntityInterface $entity
  *   An entity whose fields to analyze.
  *
  * @return array
@@ -141,7 +142,6 @@ function _webform_get_array_file_uuids(array $data) {
 /* ************************************************************************** */
 // File usage functions.
 /* ************************************************************************** */
-
 /**
  * Records file usage of files referenced by formatted text fields.
  *
@@ -155,7 +155,7 @@ function _webform_get_array_file_uuids(array $data) {
  * @param string $id
  *   The unique ID of the object containing the referenced file.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  *
  * @see _editor_record_file_usage()
  */
@@ -164,10 +164,10 @@ function _webform_record_file_usage(array $uuids, $type, $id) {
     return;
   }
 
-  /** @var \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository */
+  /** @var EntityRepositoryInterface $entity_repository */
   $entity_repository = \Drupal::service('entity.repository');
 
-  /** @var \Drupal\file\FileUsage\FileUsageInterface $file_usage */
+  /** @var FileUsageInterface $file_usage */
   $file_usage = \Drupal::service('file.usage');
 
   foreach ($uuids as $uuid) {
@@ -194,7 +194,7 @@ function _webform_record_file_usage(array $uuids, $type, $id) {
  *   The number of references to delete. Should be 1 when deleting a single
  *   revision and 0 when deleting an entity entirely.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  *
  * @see \Drupal\file\FileUsage\FileUsageInterface::delete()
  * @see _editor_delete_file_usage()
@@ -204,10 +204,10 @@ function _webform_delete_file_usage(array $uuids, $type, $id, $count) {
     return;
   }
 
-  /** @var \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository */
+  /** @var EntityRepositoryInterface $entity_repository */
   $entity_repository = \Drupal::service('entity.repository');
 
-  /** @var \Drupal\file\FileUsage\FileUsageInterface $file_usage */
+  /** @var FileUsageInterface $file_usage */
   $file_usage = \Drupal::service('file.usage');
 
   $make_unused_managed_files_temporary = \Drupal::config('webform.settings')->get('html_editor.make_unused_managed_files_temporary');
diff --git a/includes/webform.form_alter.inc b/includes/webform.form_alter.inc
index 6ce8b8cb8..c898b6dfa 100644
--- a/includes/webform.form_alter.inc
+++ b/includes/webform.form_alter.inc
@@ -1,5 +1,10 @@
 <?php
 
+use Drupal\webform\WebformInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\webform\WebformSubmissionInterface;
+use Drupal\views\ViewExecutable;
+use Drupal\webform\WebformEmailProviderInterface;
 /**
  * @file
  * Webform module form alter hooks.
@@ -33,9 +38,9 @@ function webform_form_alter(&$form, FormStateInterface $form_state, $form_id) {
 
   // Display editing original language warning.
   if (\Drupal::moduleHandler()->moduleExists('config_translation') && preg_match('/^entity.webform.(?:edit|settings|assets|access|handlers|third_party_settings)_form$/', \Drupal::routeMatch()->getRouteName())) {
-    /** @var \Drupal\webform\WebformInterface $webform */
+    /** @var WebformInterface $webform */
     $webform = \Drupal::routeMatch()->getParameter('webform');
-    /** @var \Drupal\Core\Language\LanguageManagerInterface $language_manager */
+    /** @var LanguageManagerInterface $language_manager */
     $language_manager = \Drupal::service('language_manager');
 
     // If current webform is translated, load the base (default) webform and apply
@@ -71,7 +76,7 @@ function webform_form_alter(&$form, FormStateInterface $form_state, $form_id) {
 function _webform_form_webform_submission_form_after_build($form, FormStateInterface $form_state) {
   $form_object = $form_state->getFormObject();
 
-  /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
+  /** @var WebformSubmissionInterface $webform_submission */
   $webform_submission = $form_object->getEntity();
   $webform = $webform_submission->getWebform();
 
@@ -141,7 +146,7 @@ function webform_form_update_manager_update_form_alter(&$form, FormStateInterfac
  * Implements hook_form_FORM_ID_alter() for views exposed form.
  */
 function webform_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\views\ViewExecutable $view */
+  /** @var ViewExecutable $view */
   $view = $form_state->get('view');
 
   // Check if this a is webform submission view.
@@ -167,7 +172,7 @@ function webform_form_smtp_admin_settings_alter(&$form, FormStateInterface $form
  */
 function _webform_form_smtp_admin_settings_submit(&$form, FormStateInterface $form_state) {
   // Since the SMTP module can enabled or disabled, check HTML email provider.
-  /** @var \Drupal\webform\WebformEmailProviderInterface $email_provider */
+  /** @var WebformEmailProviderInterface $email_provider */
   $email_provider = \Drupal::service('webform.email_provider');
   $email_provider->check();
 }
diff --git a/includes/webform.install.inc b/includes/webform.install.inc
index b42ca58f9..a7f039d2e 100644
--- a/includes/webform.install.inc
+++ b/includes/webform.install.inc
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\webform\WebformAccessRulesManagerInterface;
+use Drupal\webform\Plugin\WebformHandlerManagerInterface;
+use Drupal\field\FieldStorageConfigInterface;
 /**
  * @file
  * Webform install helper functions.
@@ -149,7 +152,7 @@ function _webform_update_webform_setting(array $data) {
   $data['settings'] = _webform_update_webform_setting_settings($settings);
 
   // Set access.
-  /** @var \Drupal\webform\WebformAccessRulesManagerInterface $access_rules_manager */
+  /** @var WebformAccessRulesManagerInterface $access_rules_manager */
   $access_rules_manager = \Drupal::service('webform.access_rules_manager');
   $data['access'] += $access_rules_manager->getDefaultAccessRules();
 
@@ -204,7 +207,7 @@ function _webform_update_webform_handler_settings() {
 
   // Get the default configuration (aka settings) for all handlers provided
   // by the Webform module.
-  /** @var \Drupal\webform\Plugin\WebformHandlerManagerInterface $handler_manager */
+  /** @var WebformHandlerManagerInterface $handler_manager */
   $handler_manager = \Drupal::service('plugin.manager.webform.handler');
   $definitions = $handler_manager->getDefinitions();
   $default_handler_settings = [];
@@ -314,7 +317,7 @@ function _webform_update_actions() {
  */
 function _webform_update_field_storage_definitions() {
   $manager = \Drupal::entityDefinitionUpdateManager();
-  /** @var \Drupal\field\FieldStorageConfigInterface[] $fields */
+  /** @var FieldStorageConfigInterface[] $fields */
   $fields = \Drupal::entityTypeManager()
     ->getStorage('field_storage_config')
     ->loadByProperties(['type' => 'webform']);
diff --git a/includes/webform.install.requirements.inc b/includes/webform.install.requirements.inc
index 591bd4edf..ae8f0fca3 100644
--- a/includes/webform.install.requirements.inc
+++ b/includes/webform.install.requirements.inc
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\webform\WebformEmailProviderInterface;
+use Drupal\webform\WebformLibrariesManagerInterface;
+use Drupal\webform\WebformAddonsManagerInterface;
 /**
  * @file
  * Webform requirements.
@@ -47,8 +50,7 @@ function webform_requirements($phase) {
   /* ************************************************************************ */
   // Check HTML email handling.
   /* ************************************************************************ */
-
-  /** @var \Drupal\webform\WebformEmailProviderInterface $email_provider */
+  /** @var WebformEmailProviderInterface $email_provider */
   $email_provider = \Drupal::service('webform.email_provider');
   $mail_module_name = $email_provider->getModuleName();
   $mail_plugin_id = $email_provider->getMailPluginId();
@@ -102,8 +104,7 @@ function webform_requirements($phase) {
   /* ************************************************************************ */
   // Check external libraries.
   /* ************************************************************************ */
-
-  /** @var \Drupal\webform\WebformLibrariesManagerInterface $libraries_manager */
+  /** @var WebformLibrariesManagerInterface $libraries_manager */
   $libraries_manager = \Drupal::service('webform.libraries_manager');
   $requirements += $libraries_manager->requirements();
 
@@ -213,7 +214,7 @@ function webform_requirements($phase) {
       '#suffix' => '</dl>',
     ];
 
-    /** @var \Drupal\webform\WebformAddonsManagerInterface $addons_manager */
+    /** @var WebformAddonsManagerInterface $addons_manager */
     $addons_manager = \Drupal::service('webform.addons_manager');
     $projects = $addons_manager->getProjects('spam');
     foreach ($projects as $project_name => $project) {
diff --git a/includes/webform.install.update.inc b/includes/webform.install.update.inc
index ed71e3d9c..fac57e81b 100644
--- a/includes/webform.install.update.inc
+++ b/includes/webform.install.update.inc
@@ -1,5 +1,13 @@
 <?php
 
+use Drupal\webform\Plugin\WebformElementManagerInterface;
+use Drupal\webform\WebformEntityReferenceManagerInterface;
+use Drupal\block\Entity\Block;
+use Drupal\webform\WebformHelpManagerInterface;
+use Drupal\webform\Plugin\WebformHandlerManagerInterface;
+use Drupal\path_alias\PathAliasInterface;
+use Drupal\webform\WebformOptionsInterface;
+use Drupal\field\FieldStorageConfigInterface;
 /**
  * @file
  * Archived Webform update hooks.
@@ -255,7 +263,7 @@ function _webform_update_8011(array &$element) {
   \Drupal::service('kernel')->rebuildContainer();
 
   if (isset($element['#format'])) {
-    /** @var \Drupal\webform\Plugin\WebformElementManagerInterface $element_manager */
+    /** @var WebformElementManagerInterface $element_manager */
     $element_manager = \Drupal::service('plugin.manager.webform.element');
     $webform_element = $element_manager->getElementInstance($element);
 
@@ -326,7 +334,7 @@ function _webform_update_8014(array &$element) {
   // Issue #2863986: Allow updating modules with new service dependencies.
   \Drupal::service('kernel')->rebuildContainer();
 
-  /** @var \Drupal\webform\Plugin\WebformElementManagerInterface $element_manager */
+  /** @var WebformElementManagerInterface $element_manager */
   $element_manager = \Drupal::service('plugin.manager.webform.element');
 
   // Add 'webform_' prefix to #type.
@@ -506,7 +514,7 @@ function webform_update_8025() {
   // Issue #2863986: Allow updating modules with new service dependencies.
   \Drupal::service('kernel')->rebuildContainer();
 
-  /** @var \Drupal\webform\WebformEntityReferenceManagerInterface $entity_reference_manager */
+  /** @var WebformEntityReferenceManagerInterface $entity_reference_manager */
   $entity_reference_manager = \Drupal::service('webform.entity_reference_manager');
 
   $webform_tables = $entity_reference_manager->getTableNames();
@@ -786,7 +794,7 @@ function webform_update_8036() {
 
   // Must resave all Webform config lookup keys.
   // @see \Drupal\Core\Config\Entity\Query\QueryFactory::updateConfigKeyStore
-  /** @var \Drupal\webform\WebformInterface[] $webforms */
+  /** @var WebformInterface[] $webforms */
   $webforms = Webform::loadMultiple();
   foreach ($webforms as $webform) {
     $title = $webform->get('title');
@@ -1268,7 +1276,7 @@ function webform_update_8061() {
  * Issue #2871207: Random Multiple Submissions. Populate next serial in webform table.
  */
 function webform_update_8062() {
-  /** @var \Drupal\webform\WebformInterface[] $webforms */
+  /** @var WebformInterface[] $webforms */
   $webforms = Webform::loadMultiple();
   foreach ($webforms as $webform) {
     \Drupal::database()->insert('webform')
@@ -1431,7 +1439,7 @@ function webform_update_8071() {
     'delete_custom_data' => 'deleted_custom_data',
   ];
 
-  /** @var \Drupal\webform\WebformInterface[] $webforms */
+  /** @var WebformInterface[] $webforms */
   $webforms = Webform::loadMultiple();
   foreach ($webforms as $webform) {
     $has_remote_post = FALSE;
@@ -1466,7 +1474,7 @@ function webform_update_8071() {
 function webform_update_8072() {
   drupal_flush_all_caches();
 
-  /** @var \Drupal\webform\WebformInterface[] $webforms */
+  /** @var WebformInterface[] $webforms */
   $webforms = Webform::loadMultiple();
   foreach ($webforms as $webform) {
     $handlers = $webform->getHandlers();
@@ -1508,7 +1516,7 @@ function webform_update_8075() {
   $admin_config->save();
 
   // Update webform results.export state.
-  /** @var \Drupal\webform\WebformInterface[] $webforms */
+  /** @var WebformInterface[] $webforms */
   $webforms = Webform::loadMultiple();
   foreach ($webforms as $webform) {
     $namespace = 'webform.webform.' . $webform->id();
@@ -1555,7 +1563,7 @@ function webform_update_8076() {
   $admin_config->save();
 
   // Update webform results.export state.
-  /** @var \Drupal\webform\WebformInterface[] $webforms */
+  /** @var WebformInterface[] $webforms */
   $webforms = Webform::loadMultiple();
   foreach ($webforms as $webform) {
     $namespace = 'webform.webform.' . $webform->id();
@@ -1910,7 +1918,7 @@ function webform_update_8100() {
   _webform_update_webform_handler_settings();
 
   // Add locked to remote post handler's excluded data.
-  /** @var \Drupal\webform\WebformInterface[] $webforms */
+  /** @var WebformInterface[] $webforms */
   $webforms = Webform::loadMultiple();
   foreach ($webforms as $webform) {
     $has_handler = FALSE;
@@ -2002,7 +2010,7 @@ function webform_update_8107() {
  * Issue #2944515: Report proper dependencies of a webform block.
  */
 function webform_update_8108() {
-  /** @var \Drupal\block\Entity\Block $block */
+  /** @var Block $block */
   foreach (\Drupal::entityTypeManager()->getStorage('block')->loadMultiple() as $block) {
     if ($block->getPluginId() === 'webform_block') {
       $webform_id = $block->getPlugin()->getConfiguration()['webform_id'];
@@ -2201,7 +2209,7 @@ function webform_update_8119() {
   // Issue #2982273: Route "webform.config.libraries" does not exist.
   \Drupal::service('router.builder')->rebuild();
 
-  /** @var \Drupal\webform\WebformHelpManagerInterface $help_manager */
+  /** @var WebformHelpManagerInterface $help_manager */
   $help_manager = \Drupal::service('webform.help_manager');
   $help_manager->addNotification('webform_update_8119',
     t("<strong>ATTENTION DEVELOPERS!!!</strong> The webform submission form's  BASE_FORM_ID and FORM_ID have changed.") .
@@ -2358,7 +2366,7 @@ function webform_update_8131() {
   // Get all webform handlers that are instances of the email handler.
   // This allows any custom handler that extends the EmailWebformHandler to be
   // updated.
-  /** @var \Drupal\webform\Plugin\WebformHandlerManagerInterface $handler_manager */
+  /** @var WebformHandlerManagerInterface $handler_manager */
   $handler_manager = \Drupal::service('plugin.manager.webform.handler');
   $definitions = $handler_manager->getDefinitions();
   $email_handler_ids = [];
@@ -2579,7 +2587,7 @@ function webform_update_8139() {
     ],
   ];
 
-  /** @var \Drupal\webform\WebformHelpManagerInterface $help_manager */
+  /** @var WebformHelpManagerInterface $help_manager */
   $help_manager = \Drupal::service('webform.help_manager');
   $help_manager->addNotification(__FUNCTION__, $build, 'warning');
 }
@@ -2832,7 +2840,7 @@ function webform_update_8153() {
       ->condition('path', '/webform/', 'STARTS_WITH')
       ->execute();
 
-    /** @var \Drupal\path_alias\PathAliasInterface $path_alias */
+    /** @var PathAliasInterface $path_alias */
     foreach ($storage->loadMultiple($ids) as $path_alias) {
       if (preg_match('#^/webform/([^/]+)/(?:drafts|submissions)$#', $path_alias->getPath(), $match)) {
         // Check if the webform still exists.
@@ -2999,7 +3007,7 @@ function webform_update_8157() {
  * Issue #3023863: Typo in State/Province codes options.
  */
 function webform_update_8158() {
-  /** @var \Drupal\webform\WebformOptionsInterface $webform_options */
+  /** @var WebformOptionsInterface $webform_options */
   $webform_options = WebformOptions::load('state_province_codes');
   if (!$webform_options) {
     return;
@@ -3015,7 +3023,7 @@ function webform_update_8158() {
  * Issue #3023223: Remove unused fields settings.
  */
 function webform_update_8159() {
-  /** @var \Drupal\field\FieldStorageConfigInterface[] $field_storage_configs */
+  /** @var FieldStorageConfigInterface[] $field_storage_configs */
   $field_storage_configs = FieldStorageConfig::loadMultiple();
   foreach ($field_storage_configs as $field_storage_config) {
     if ($field_storage_config->getType() !== 'webform') {
@@ -3455,7 +3463,7 @@ function webform_update_8185() {
  * Issue #3108150: Save numeric properties as numbers instead of strings.
  */
 function webform_update_8186() {
-  /** @var \Drupal\webform\Plugin\WebformElementManagerInterface $element_manager */
+  /** @var WebformElementManagerInterface $element_manager */
   $element_manager = \Drupal::service('plugin.manager.webform.element');
 
   $config_factory = \Drupal::configFactory();
@@ -3513,7 +3521,7 @@ function webform_update_8186() {
  */
 function webform_update_8187() {
   if (!file_exists(\Drupal::root() . '/libraries/jquery.inputmask/dist/jquery.inputmask.min.js')) {
-    /** @var \Drupal\webform\WebformHelpManagerInterface $help_manager */
+    /** @var WebformHelpManagerInterface $help_manager */
     $help_manager = \Drupal::service('webform.help_manager');
     $help_manager->addNotification('webform_update_8187',
       t('<strong>ATTENTION DEVELOPERS!!!</strong> Please make sure to download and update the <a href=":href">Input Mask</a> library to version 5.0.x', [':href' => 'https://github.com/RobinHerbots/Inputmask']) .
@@ -4061,7 +4069,7 @@ function webform_update_8606() {
 
     if ($path_changed) {
       $webform_config->setData($data)->save();
-      /** @var \Drupal\webform\WebformInterface $webform */
+      /** @var WebformInterface $webform */
       $webform = Webform::load($data['id']);
       $webform->setSetting('page_submit_path', $data['settings']['page_submit_path']);
       $webform->setSetting('page_confirm_path', $data['settings']['page_confirm_path']);
@@ -4227,7 +4235,7 @@ function webform_update_8622() {
     $config->set('handlers.email_confirmation.settings.to_mail', '[current-user:mail]');
     $config->save();
 
-    /** @var \Drupal\webform\WebformHelpManagerInterface $help_manager */
+    /** @var WebformHelpManagerInterface $help_manager */
     $help_manager = \Drupal::service('webform.help_manager');
     $help_manager->addNotification('webform_update_8622',
       t("<strong>ATTENTION!!!</strong> The default Contact webform, included with the Webform module, has been updated to send the confirmation email to an authenticated user's email address.") .
diff --git a/includes/webform.libraries.inc b/includes/webform.libraries.inc
index 84d805028..c97bb8f72 100644
--- a/includes/webform.libraries.inc
+++ b/includes/webform.libraries.inc
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\webform\WebformInterface;
+use Drupal\webform\WebformLibrariesManagerInterface;
 /**
  * @file
  * Webform libraries.
@@ -16,7 +18,7 @@ function webform_library_info_build() {
   $base_path = base_path();
   $default_query_string = \Drupal::state()->get('system.css_js_query_string') ?: '0';
 
-  /** @var \Drupal\webform\WebformInterface[] $webforms */
+  /** @var WebformInterface[] $webforms */
   $webforms = Webform::loadMultiple();
   $libraries = [];
   foreach ($webforms as $webform_id => $webform) {
@@ -56,7 +58,7 @@ function webform_library_info_alter(&$libraries, $extension) {
     return;
   }
 
-  /** @var \Drupal\webform\WebformLibrariesManagerInterface $libraries_manager */
+  /** @var WebformLibrariesManagerInterface $libraries_manager */
   $libraries_manager = \Drupal::service('webform.libraries_manager');
 
   // Use Tippy.js 6.x which is compatible with Drupal 9.x.
diff --git a/includes/webform.query.inc b/includes/webform.query.inc
index a5d9a3735..ca68ffee1 100644
--- a/includes/webform.query.inc
+++ b/includes/webform.query.inc
@@ -1,5 +1,10 @@
 <?php
 
+use Drupal\Core\Database\Query\SelectInterface;
+use Drupal\Core\Entity\Plugin\EntityReferenceSelection\DefaultSelection;
+use Drupal\webform\WebformInterface;
+use Drupal\webform\WebformSubmissionStorageInterface;
+use Drupal\webform\WebformAccessRulesManagerInterface;
 /**
  * @file
  * Webform module query hooks.
@@ -18,7 +23,7 @@ use Drupal\webform\Entity\Webform;
  * @see \Drupal\webform\WebformSubmissionListBuilder::getEntityIds
  */
 function webform_query_webform_submission_list_builder_alter(AlterableInterface $query) {
-  /** @var \Drupal\Core\Database\Query\SelectInterface $query */
+  /** @var SelectInterface $query */
   $name = $query->getMetaData('webform_submission_element_name');
   $direction = $query->getMetaData('webform_submission_element_direction');
   $property_name = $query->getMetaData('webform_submission_element_property_name');
@@ -37,7 +42,7 @@ function webform_query_webform_submission_list_builder_alter(AlterableInterface
  * Implements hook_query_TAG_alter().
  */
 function webform_query_entity_reference_alter(AlterableInterface $query) {
-  /** @var \Drupal\Core\Entity\Plugin\EntityReferenceSelection\DefaultSelection $handler */
+  /** @var DefaultSelection $handler */
   $handler = $query->getMetaData('entity_reference_selection_handler');
 
   // Get webform settings used to limit and randomize results.
@@ -62,7 +67,7 @@ function webform_query_entity_reference_alter(AlterableInterface $query) {
  * for an operation stored in the 'op' meta-data (or 'view' if not provided).
  */
 function webform_query_webform_submission_access_alter(AlterableInterface $query) {
-  /** @var \Drupal\Core\Database\Query\SelectInterface $query */
+  /** @var SelectInterface $query */
   $op = $query->getMetaData('op') ?: 'view';
   $account = $query->getMetaData('account') ?: \Drupal::currentUser();
 
@@ -110,7 +115,7 @@ function webform_query_webform_submission_access_alter(AlterableInterface $query
   }
 
   // Alter query based on update access to all webforms.
-  /** @var \Drupal\webform\WebformInterface[] $webforms */
+  /** @var WebformInterface[] $webforms */
   if ($account->isAuthenticated()) {
     // Get cached list of webforms that the user can update so that we don't
     // have to continually load every webform.
@@ -120,7 +125,7 @@ function webform_query_webform_submission_access_alter(AlterableInterface $query
     }
     else {
       $webform_account_access_update = [];
-      /** @var \Drupal\webform\WebformInterface[] $webforms */
+      /** @var WebformInterface[] $webforms */
       $webforms = Webform::loadMultiple();
       foreach ($webforms as $webform) {
         if ($webform->access('update', $account)) {
@@ -141,7 +146,7 @@ function webform_query_webform_submission_access_alter(AlterableInterface $query
     }
   }
   else {
-    /** @var \Drupal\webform\WebformSubmissionStorageInterface $submission_storage */
+    /** @var WebformSubmissionStorageInterface $submission_storage */
     $submission_storage = \Drupal::entityTypeManager()->getStorage('webform_submission');
     $sids = $submission_storage->getAnonymousSubmissionIds($account);
     if ($sids) {
@@ -152,7 +157,7 @@ function webform_query_webform_submission_access_alter(AlterableInterface $query
   }
 
   // Alter query based on access rules.
-  /** @var \Drupal\webform\WebformAccessRulesManagerInterface $access_rules_manager */
+  /** @var WebformAccessRulesManagerInterface $access_rules_manager */
   $access_rules_manager = \Drupal::service('webform.access_rules_manager');
 
   // Get cached webform access rules and cache tags so that we don't have
@@ -162,7 +167,7 @@ function webform_query_webform_submission_access_alter(AlterableInterface $query
     $webform_access_rules = $cached->data;
   }
   else {
-    /** @var \Drupal\webform\WebformInterface[] $webforms */
+    /** @var WebformInterface[] $webforms */
     $webforms = Webform::loadMultiple();
     $webform_access_rules = [];
     foreach ($webforms as $webform_id => $webform) {
@@ -189,7 +194,7 @@ function webform_query_webform_submission_access_alter(AlterableInterface $query
     // webform submission tables conditions.
     elseif ($access_rules_manager->checkAccessRules($op . '_own', $account, $access_rules)) {
       foreach ($webform_submission_tables as $table) {
-        /** @var \Drupal\Core\Database\Query\SelectInterface $query */
+        /** @var SelectInterface $query */
         $condition = $query->andConditionGroup();
         $condition->condition($table['alias'] . '.uid', $account->id());
         $condition->condition($table['alias'] . '.webform_id', $webform_id);
diff --git a/includes/webform.theme.inc b/includes/webform.theme.inc
index d63d3ed4c..f353d3a77 100644
--- a/includes/webform.theme.inc
+++ b/includes/webform.theme.inc
@@ -1,5 +1,11 @@
 <?php
 
+use Drupal\webform\WebformInterface;
+use Drupal\webform\Plugin\WebformElementManagerInterface;
+use Drupal\webform\WebformThemeManagerInterface;
+use Drupal\file\FileInterface;
+use Drupal\webform\WebformSubmissionInterface;
+use Drupal\webform\Plugin\WebformHandlerInterface;
 /**
  * @file
  * Theme hooks, preprocessor, and suggestions.
@@ -343,7 +349,7 @@ function webform_preprocess_status_messages(&$variables) {
 function webform_preprocess_table(&$variables) {
   // Add links to 'Translate' webform tab.
   if (\Drupal::routeMatch()->getRouteName() === 'entity.webform.config_translation_overview') {
-    /** @var \Drupal\webform\WebformInterface $webform */
+    /** @var WebformInterface $webform */
     $webform = \Drupal::routeMatch()->getParameter('webform');
     foreach ($variables['rows'] as &$row) {
       // Check first cell.
@@ -504,7 +510,7 @@ function webform_preprocess_fieldset(&$variables) {
   //
   // Issue #3240249: Aria-required on fieldset trigger accessibility fails.
   // @see https://www.drupal.org/project/webform/issues/3240249
-  /** @var \Drupal\webform\Plugin\WebformElementManagerInterface $element_manager */
+  /** @var WebformElementManagerInterface $element_manager */
   $element_manager = \Drupal::service('plugin.manager.webform.element');
   $element_plugin = $element_manager->getElementInstance($element);
   $is_radios = ($element_plugin instanceof WebformRadios || $element_plugin instanceof WebformEntityRadios);
@@ -562,7 +568,7 @@ function webform_preprocess_form_element(&$variables) {
   static $is_claro_theme;
   static $is_olivero_theme;
   if (!isset($is_claro_theme)) {
-    /** @var \Drupal\webform\WebformThemeManagerInterface $theme_manager */
+    /** @var WebformThemeManagerInterface $theme_manager */
     $theme_manager = \Drupal::service('webform.theme_manager');
     $is_claro_theme = $theme_manager->isActiveTheme('claro');
     $is_olivero_theme = $theme_manager->isActiveTheme('olivero');
@@ -702,7 +708,7 @@ function webform_preprocess_file_upload_help(&$variables) {
  * @see webform_file_access
  */
 function webform_preprocess_file_link(&$variables) {
-  /** @var \Drupal\file\FileInterface $file */
+  /** @var FileInterface $file */
   $file = $variables['file'];
   $file = ($file instanceof File) ? $file : File::load($file->fid);
 
@@ -1026,25 +1032,25 @@ function _webform_theme_suggestions(array $variables, $hook) {
     $webform_submission = NULL;
     $sanitized_view_mode = NULL;
     if (isset($variables['elements']) && isset($variables['elements']['#webform_submission'])) {
-      /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
+      /** @var WebformSubmissionInterface $webform_submission */
       $webform_submission = $variables['elements']['#webform_submission'];
       $webform = $webform_submission->getWebform();
       $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
     }
     elseif (isset($variables['webform_submission'])) {
-      /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
+      /** @var WebformSubmissionInterface $webform_submission */
       $webform_submission = $variables['webform_submission'];
       $webform = $webform_submission->getWebform();
     }
     elseif (isset($variables['webform'])) {
-      /** @var \Drupal\webform\WebformInterface $webform */
+      /** @var WebformInterface $webform */
       $webform = $variables['webform'];
     }
 
     if ($webform) {
       $suggestions[] = $hook . '__' . $webform->id();
       if (isset($variables['handler'])) {
-        /** @var \Drupal\webform\Plugin\WebformHandlerInterface $handler */
+        /** @var WebformHandlerInterface $handler */
         $handler = $variables['handler'];
         $suggestions[] = $hook . '__' . $webform->id() . '__' . $handler->getPluginId();
         $suggestions[] = $hook . '__' . $webform->id() . '__' . $handler->getPluginId() . '__' . $handler->getHandlerId();
diff --git a/includes/webform.theme.template.inc b/includes/webform.theme.template.inc
index 9759452ee..9c802d8ed 100644
--- a/includes/webform.theme.template.inc
+++ b/includes/webform.theme.template.inc
@@ -1,5 +1,12 @@
 <?php
 
+use Drupal\webform\WebformHelpManagerInterface;
+use Drupal\webform\WebformInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\webform\WebformRequestInterface;
+use Drupal\webform\WebformSubmissionStorageInterface;
+use Drupal\webform\WebformLibrariesManagerInterface;
+use Drupal\file\FileInterface;
 /**
  * @file
  * Preprocessors and helper functions to make theming easier.
@@ -33,7 +40,7 @@ use Drupal\webform\Utility\WebformElementHelper;
  *   - content: Help content.
  */
 function template_preprocess_webform_help(array &$variables) {
-  /** @var \Drupal\webform\WebformHelpManagerInterface $help_manager */
+  /** @var WebformHelpManagerInterface $help_manager */
   $help_manager = \Drupal::service('webform.help_manager');
 
   $help_info = $variables['info'];
@@ -107,14 +114,14 @@ function template_preprocess_webform_actions(array &$variables) {
  *   - source_entity: A webform submission source entity.
  */
 function template_preprocess_webform_confirmation(array &$variables) {
-  /** @var \Drupal\webform\WebformInterface $webform */
+  /** @var WebformInterface $webform */
   $webform = $variables['webform'];
-  /** @var \Drupal\Core\Entity\EntityInterface $source_entity */
+  /** @var EntityInterface $source_entity */
   $source_entity = $variables['source_entity'];
-  /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
+  /** @var WebformSubmissionInterface $webform_submission */
   $webform_submission = $variables['webform_submission'];
 
-  /** @var \Drupal\webform\WebformMessageManagerInterface $message_manager */
+  /** @var WebformMessageManagerInterface $message_manager */
   $message_manager = \Drupal::service('webform.message_manager');
   $message_manager->setWebformSubmission($webform_submission);
   // Must set webform and source entity because webform submission could be
@@ -204,12 +211,12 @@ function template_preprocess_webform_confirmation(array &$variables) {
  *          (canonical, edit-form, resend-form, html, text, or yaml).
  */
 function template_preprocess_webform_submission_navigation(array &$variables) {
-  /** @var \Drupal\webform\WebformRequestInterface $request_handler */
+  /** @var WebformRequestInterface $request_handler */
   $request_handler = \Drupal::service('webform.request');
-  /** @var \Drupal\webform\WebformSubmissionStorageInterface $webform_submission_storage */
+  /** @var WebformSubmissionStorageInterface $webform_submission_storage */
   $webform_submission_storage = \Drupal::entityTypeManager()->getStorage('webform_submission');
 
-  /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
+  /** @var WebformSubmissionInterface $webform_submission */
   $webform_submission = $variables['webform_submission'];
   $webform = $webform_submission->getWebform();
 
@@ -300,7 +307,7 @@ function template_preprocess_webform_submission_data(array &$variables) {
  *   - webform_submission: A webform submission.
  */
 function template_preprocess_webform_submission_information(array &$variables) {
-  /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
+  /** @var WebformSubmissionInterface $webform_submission */
   $webform_submission = $variables['webform_submission'];
   $webform = $webform_submission->getWebform();
 
@@ -358,7 +365,7 @@ function template_preprocess_webform_submission_information(array &$variables) {
   }
 
   if ($webform_submission->access('delete')) {
-    /** @var \Drupal\webform\WebformRequestInterface $request_handler */
+    /** @var WebformRequestInterface $request_handler */
     $request_handler = \Drupal::service('webform.request');
 
     $current_url = Url::fromRoute('<current>')->toString();
@@ -521,12 +528,12 @@ function _template_progress_webform_set_title(array &$variables, $strip_tags = F
  *   - current_page: The current wizard page.
  */
 function template_preprocess_webform_progress(array &$variables) {
-  /** @var \Drupal\webform\WebformLibrariesManagerInterface $libraries_manager */
+  /** @var WebformLibrariesManagerInterface $libraries_manager */
   $libraries_manager = \Drupal::service('webform.libraries_manager');
 
-  /** @var \Drupal\webform\WebformInterface $webform */
+  /** @var WebformInterface $webform */
   $webform = $variables['webform'];
-  /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
+  /** @var WebformSubmissionInterface $webform_submission */
   $webform_submission = $variables['webform_submission'];
   $current_page = $variables['current_page'];
   $operation = $variables['operation'];
@@ -599,9 +606,9 @@ function template_preprocess_webform_progress_tracker(array &$variables) {
  *   - current_page: The current wizard page.
  */
 function _template_preprocess_webform_progress(array &$variables) {
-  /** @var \Drupal\webform\WebformInterface $webform */
+  /** @var WebformInterface $webform */
   $webform = $variables['webform'];
-  /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
+  /** @var WebformSubmissionInterface $webform_submission */
   $webform_submission = $variables['webform_submission'];
   $current_page = $variables['current_page'];
   $operation = $variables['operation'];
@@ -936,9 +943,9 @@ function template_preprocess_webform_element_more(array &$variables) {
  */
 function template_preprocess_webform_element_managed_file(array &$variables) {
   if (!empty($variables['file'])) {
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = $variables['file'];
-    $variables['uri'] = file_create_url($file->getFileUri());
+    $variables['uri'] = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
     $variables['extension'] = strtolower(pathinfo($variables['uri'], PATHINFO_EXTENSION));
     $variables['type'] = \Drupal::service('file.mime_type.guesser')->guess($variables['uri']);
     $variables['file_link'] = [
@@ -996,14 +1003,14 @@ function template_preprocess_webform_element_document_file(array &$variables) {
  */
 function template_preprocess_webform_element_image_file(array &$variables) {
   if (!empty($variables['file'])) {
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = $variables['file'];
 
     $style_name = $variables['style_name'];
     $format = $variables['format'];
 
     $uri = $file->getFileUri();
-    $url = Url::fromUri(file_create_url($uri));
+    $url = \Drupal::service('file_url_generator')->generate($uri);
 
     $extension = pathinfo($uri, PATHINFO_EXTENSION);
     $is_image = in_array($extension, ['gif', 'png', 'jpg', 'jpeg']);
diff --git a/includes/webform.translation.inc b/includes/webform.translation.inc
index deccb1862..743ca43ac 100644
--- a/includes/webform.translation.inc
+++ b/includes/webform.translation.inc
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\webform\WebformTranslationConfigManagerInterface;
+use Drupal\webform\WebformTranslationLingotekManagerInterface;
 /**
  * @file
  * Webform module translation hooks.
@@ -60,7 +62,7 @@ function webform_form_locale_translate_edit_form_alter(&$form, FormStateInterfac
  * Implements hook_form_FORM_ID_alter() for config translation add form.
  */
 function webform_form_config_translation_add_form_alter(&$form, FormStateInterface $form_state, $is_new = TRUE) {
-  /** @var \Drupal\webform\WebformTranslationConfigManagerInterface $translation_config_manager */
+  /** @var WebformTranslationConfigManagerInterface $translation_config_manager */
   $translation_config_manager = \Drupal::service('webform.translation_config_manager');
   $translation_config_manager->alterForm($form, $form_state);
 }
@@ -69,7 +71,7 @@ function webform_form_config_translation_add_form_alter(&$form, FormStateInterfa
  * Implements hook_form_FORM_ID_alter() for config translation edit form.
  */
 function webform_form_config_translation_edit_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\webform\WebformTranslationConfigManagerInterface $translation_config_manager */
+  /** @var WebformTranslationConfigManagerInterface $translation_config_manager */
   $translation_config_manager = \Drupal::service('webform.translation_config_manager');
   $translation_config_manager->alterForm($form, $form_state);
 }
@@ -82,7 +84,7 @@ function webform_form_config_translation_edit_form_alter(&$form, FormStateInterf
  * Implements hook_lingotek_config_entity_document_upload().
  */
 function webform_lingotek_config_entity_document_upload(array &$source_data, ConfigEntityInterface &$entity, &$url) {
-  /** @var \Drupal\webform\WebformTranslationLingotekManagerInterface $translation_lingotek_manager */
+  /** @var WebformTranslationLingotekManagerInterface $translation_lingotek_manager */
   $translation_lingotek_manager = \Drupal::service('webform.translation_lingotek_manager');
   $translation_lingotek_manager->configEntityDocumentUpload($source_data, $entity, $url);
 }
@@ -91,7 +93,7 @@ function webform_lingotek_config_entity_document_upload(array &$source_data, Con
  * Implements hook_lingotek_config_entity_translation_presave().
  */
 function webform_lingotek_config_entity_translation_presave(ConfigEntityInterface &$translation, $langcode, &$data) {
-  /** @var \Drupal\webform\WebformTranslationLingotekManagerInterface $translation_lingotek_manager */
+  /** @var WebformTranslationLingotekManagerInterface $translation_lingotek_manager */
   $translation_lingotek_manager = \Drupal::service('webform.translation_lingotek_manager');
   $translation_lingotek_manager->configEntityTranslationPresave($translation, $langcode, $data);
 }
@@ -100,7 +102,7 @@ function webform_lingotek_config_entity_translation_presave(ConfigEntityInterfac
  * Implements hook_lingotek_config_object_document_upload().
  */
 function webform_lingotek_config_object_document_upload(array &$data, $config_name) {
-  /** @var \Drupal\webform\WebformTranslationLingotekManagerInterface $translation_lingotek_manager */
+  /** @var WebformTranslationLingotekManagerInterface $translation_lingotek_manager */
   $translation_lingotek_manager = \Drupal::service('webform.translation_lingotek_manager');
   $translation_lingotek_manager->configObjectDocumentUpload($data, $config_name);
 }
@@ -109,7 +111,7 @@ function webform_lingotek_config_object_document_upload(array &$data, $config_na
  * Implements hook_lingotek_config_object_translation_presave().
  */
 function webform_lingotek_config_object_translation_presave(array &$data, $config_name) {
-  /** @var \Drupal\webform\WebformTranslationLingotekManagerInterface $translation_lingotek_manager */
+  /** @var WebformTranslationLingotekManagerInterface $translation_lingotek_manager */
   $translation_lingotek_manager = \Drupal::service('webform.translation_lingotek_manager');
   $translation_lingotek_manager->configObjectTranslationPresave($data, $config_name);
 }
diff --git a/modules/webform_access/src/Access/WebformAccessGroupAccess.php b/modules/webform_access/src/Access/WebformAccessGroupAccess.php
index 484a86cad..1f49c53d6 100644
--- a/modules/webform_access/src/Access/WebformAccessGroupAccess.php
+++ b/modules/webform_access/src/Access/WebformAccessGroupAccess.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\webform_access\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Session\AccountInterface;
 
@@ -13,7 +14,7 @@ class WebformAccessGroupAccess {
   /**
    * Check whether the current user is a administor or assign admin access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public static function checkAdminAccess() {
@@ -35,7 +36,7 @@ class WebformAccessGroupAccess {
   /**
    * Determine if a user account is am administrator for any access group.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   A user account.
    *
    * @return bool
diff --git a/modules/webform_access/src/Breadcrumb/WebformAccessBreadcrumbBuilder.php b/modules/webform_access/src/Breadcrumb/WebformAccessBreadcrumbBuilder.php
index 64ca64cf6..1bfc0fc08 100644
--- a/modules/webform_access/src/Breadcrumb/WebformAccessBreadcrumbBuilder.php
+++ b/modules/webform_access/src/Breadcrumb/WebformAccessBreadcrumbBuilder.php
@@ -27,7 +27,7 @@ class WebformAccessBreadcrumbBuilder implements BreadcrumbBuilderInterface {
   /**
    * Constructs a WebformAccessBreadcrumbBuilder object.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(TranslationInterface $string_translation) {
diff --git a/modules/webform_access/src/Plugin/Block/WebformAccessGroupEntityBlock.php b/modules/webform_access/src/Plugin/Block/WebformAccessGroupEntityBlock.php
index 069f97d33..973b851b9 100644
--- a/modules/webform_access/src/Plugin/Block/WebformAccessGroupEntityBlock.php
+++ b/modules/webform_access/src/Plugin/Block/WebformAccessGroupEntityBlock.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\webform_access\Plugin\Block;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\webform_access\WebformAccessGroupStorageInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Block\BlockBase;
 
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -24,21 +28,21 @@ class WebformAccessGroupEntityBlock extends BlockBase implements ContainerFactor
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The webform access group storage.
    *
-   * @var \Drupal\webform_access\WebformAccessGroupStorageInterface
+   * @var WebformAccessGroupStorageInterface
    */
   protected $webformAccessGroupStorage;
 
   /**
    * The 'language_manager' service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -57,7 +61,7 @@ class WebformAccessGroupEntityBlock extends BlockBase implements ContainerFactor
    * {@inheritdoc}
    */
   public function build() {
-    /** @var \Drupal\node\NodeInterface[] $nodes */
+    /** @var NodeInterface[] $nodes */
     $nodes = $this->getEntityStorage('webform_access_group')->getUserEntities($this->currentUser, 'node');
     if (empty($nodes)) {
       return NULL;
diff --git a/modules/webform_access/src/WebformAccessGroupAccessControlHandler.php b/modules/webform_access/src/WebformAccessGroupAccessControlHandler.php
index 1c61475ee..79df00f98 100644
--- a/modules/webform_access/src/WebformAccessGroupAccessControlHandler.php
+++ b/modules/webform_access/src/WebformAccessGroupAccessControlHandler.php
@@ -18,7 +18,7 @@ class WebformAccessGroupAccessControlHandler extends EntityAccessControlHandler
    * {@inheritdoc}
    */
   public function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\webform_access\WebformAccessGroupInterface $entity */
+    /** @var WebformAccessGroupInterface $entity */
     if ($account->hasPermission('administer webform')) {
       $access_result = AccessResult::allowed();
     }
diff --git a/modules/webform_access/src/WebformAccessGroupForm.php b/modules/webform_access/src/WebformAccessGroupForm.php
index f5c79649b..2f2da670f 100644
--- a/modules/webform_access/src/WebformAccessGroupForm.php
+++ b/modules/webform_access/src/WebformAccessGroupForm.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\webform_access;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\webform\Plugin\WebformElementManagerInterface;
+use Drupal\webform\WebformEntityReferenceManagerInterface;
+use Drupal\webform\WebformAccessRulesManagerInterface;
+use Drupal\webform\WebformInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\webform\Entity\Webform;
@@ -23,28 +29,28 @@ class WebformAccessGroupForm extends EntityForm {
   /**
    * Entity manager.
    *
-   * @var Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManagerInterface;
 
   /**
    * The webform element manager.
    *
-   * @var \Drupal\webform\Plugin\WebformElementManagerInterface
+   * @var WebformElementManagerInterface
    */
   protected $elementManager;
 
   /**
    * The webform entity reference manager.
    *
-   * @var \Drupal\webform\WebformEntityReferenceManagerInterface
+   * @var WebformEntityReferenceManagerInterface
    */
   protected $webformEntityReferenceManager;
 
   /**
    * The webform access rules manager.
    *
-   * @var \Drupal\webform\WebformAccessRulesManagerInterface
+   * @var WebformAccessRulesManagerInterface
    */
   protected $webformAccessRulesManager;
 
@@ -75,7 +81,7 @@ class WebformAccessGroupForm extends EntityForm {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\webform_access\WebformAccessGroupInterface $webform_access_group */
+    /** @var WebformAccessGroupInterface $webform_access_group */
     $webform_access_group = $this->getEntity();
 
     // Customize title for duplicate and edit operation.
@@ -98,7 +104,7 @@ class WebformAccessGroupForm extends EntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $is_webform_admin = $this->currentUser()->hasPermission('administer webform');
 
-    /** @var \Drupal\webform_access\WebformAccessGroupInterface $webform_access_group */
+    /** @var WebformAccessGroupInterface $webform_access_group */
     $webform_access_group = $this->entity;
 
     // Access group information which is displayed to group administrators.
@@ -337,7 +343,7 @@ class WebformAccessGroupForm extends EntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\webform_access\WebformAccessGroupInterface $webform_access_group */
+    /** @var WebformAccessGroupInterface $webform_access_group */
     $webform_access_group = $this->getEntity();
     $webform_access_group->setAdminIds($form_state->getValue('admins'));
     $webform_access_group->setUserIds($form_state->getValue('users'));
@@ -387,10 +393,10 @@ class WebformAccessGroupForm extends EntityForm {
       }
     }
 
-    /** @var \Drupal\webform\WebformInterface[] $webforms */
+    /** @var WebformInterface[] $webforms */
     $webforms = Webform::loadMultiple($webform_ids);
 
-    /** @var \Drupal\node\NodeInterface[] $nodes */
+    /** @var NodeInterface[] $nodes */
     $nodes = $this->entityTypeManager->getStorage('node')->loadMultiple($nids);
 
     $options = [];
diff --git a/modules/webform_access/src/WebformAccessGroupListBuilder.php b/modules/webform_access/src/WebformAccessGroupListBuilder.php
index eda78f817..5f81d8b35 100644
--- a/modules/webform_access/src/WebformAccessGroupListBuilder.php
+++ b/modules/webform_access/src/WebformAccessGroupListBuilder.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\webform_access;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\webform\WebformInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -29,14 +33,14 @@ class WebformAccessGroupListBuilder extends ConfigEntityListBuilder {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -155,8 +159,7 @@ class WebformAccessGroupListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\webform_access\WebformAccessGroupInterface $entity */
-
+    /** @var WebformAccessGroupInterface $entity */
     // Label/Description.
     $row['label'] = [
       'data' => [
@@ -231,7 +234,7 @@ class WebformAccessGroupListBuilder extends ConfigEntityListBuilder {
    */
   public function load() {
     $entity_ids = $this->getEntityIds();
-    /** @var \Drupal\webform\WebformInterface[] $entities */
+    /** @var WebformInterface[] $entities */
     $entities = $this->storage->loadMultiple($entity_ids);
 
     // If the user is not a webform admin, check access to each access group.
@@ -273,7 +276,7 @@ class WebformAccessGroupListBuilder extends ConfigEntityListBuilder {
    *   A renderable array of user accounts.
    */
   public static function buildUserAccounts(array $uids) {
-    /** @var \Drupal\user\UserInterface[] $users */
+    /** @var UserInterface[] $users */
     $users = $uids ? User::loadMultiple($uids) : [];
     $items = [];
     foreach ($users as $user) {
diff --git a/modules/webform_access/src/WebformAccessGroupStorage.php b/modules/webform_access/src/WebformAccessGroupStorage.php
index 1c1e006df..bde88a3b1 100644
--- a/modules/webform_access/src/WebformAccessGroupStorage.php
+++ b/modules/webform_access/src/WebformAccessGroupStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\webform_access;
 
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Config\Entity\ConfigEntityStorage;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -20,7 +21,7 @@ class WebformAccessGroupStorage extends ConfigEntityStorage implements WebformAc
   /**
    * Active database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -38,7 +39,7 @@ class WebformAccessGroupStorage extends ConfigEntityStorage implements WebformAc
    * {@inheritdoc}
    */
   protected function doLoadMultiple(array $ids = NULL) {
-    /** @var \Drupal\webform_access\WebformAccessGroupInterface[] $webform_access_groups */
+    /** @var WebformAccessGroupInterface[] $webform_access_groups */
     $webform_access_groups = parent::doLoadMultiple($ids);
 
     // Load admin.
@@ -94,7 +95,7 @@ class WebformAccessGroupStorage extends ConfigEntityStorage implements WebformAc
    * {@inheritdoc}
    */
   protected function doSave($id, EntityInterface $entity) {
-    /** @var \Drupal\webform_access\WebformAccessGroupInterface $entity */
+    /** @var WebformAccessGroupInterface $entity */
     $result = parent::doSave($id, $entity);
 
     // Save admins.
@@ -149,7 +150,7 @@ class WebformAccessGroupStorage extends ConfigEntityStorage implements WebformAc
    * {@inheritdoc}
    */
   public function delete(array $entities) {
-    /** @var \Drupal\webform_access\WebformAccessGroupInterface[] $entities */
+    /** @var WebformAccessGroupInterface[] $entities */
     foreach ($entities as $entity) {
       $this->database->delete('webform_access_group_admin')
         ->condition('group_id', $entity->id())
@@ -205,7 +206,7 @@ class WebformAccessGroupStorage extends ConfigEntityStorage implements WebformAc
    * {@inheritdoc}
    */
   public function getUserEntities(AccountInterface $account, $entity_type = NULL) {
-    /** @var \Drupal\webform_access\WebformAccessGroupInterface[] $webform_access_groups */
+    /** @var WebformAccessGroupInterface[] $webform_access_groups */
     $webform_access_groups = $this->loadByEntities(NULL, NULL, $account);
 
     $source_entity_ids = [];
diff --git a/modules/webform_access/src/WebformAccessGroupStorageInterface.php b/modules/webform_access/src/WebformAccessGroupStorageInterface.php
index 874af230a..eba9e2cdb 100644
--- a/modules/webform_access/src/WebformAccessGroupStorageInterface.php
+++ b/modules/webform_access/src/WebformAccessGroupStorageInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\webform_access;
 
+use Drupal\webform\WebformSubmissionInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Config\Entity\ImportableEntityStorageInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -16,16 +17,16 @@ interface WebformAccessGroupStorageInterface extends ConfigEntityStorageInterfac
   /**
    * Load webform access groups by their related entity references.
    *
-   * @param \Drupal\webform\WebformInterface|null $webform
+   * @param WebformInterface|null $webform
    *   (optional) The webform that the submission token is associated with.
-   * @param \Drupal\Core\Entity\EntityInterface|null $source_entity
+   * @param EntityInterface|null $source_entity
    *   (optional) A webform submission source entity.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   (optional) A user account.
    * @param string $type
    *   (optional) Webform access type.
    *
-   * @return \Drupal\webform\WebformSubmissionInterface[]
+   * @return WebformSubmissionInterface[]
    *   An array of webform access group objects indexed by their ids.
    */
   public function loadByEntities(WebformInterface $webform = NULL, EntityInterface $source_entity = NULL, AccountInterface $account = NULL, $type = NULL);
@@ -33,12 +34,12 @@ interface WebformAccessGroupStorageInterface extends ConfigEntityStorageInterfac
   /**
    * Get source entities associated with a user account.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   A user account.
    * @param string|null $entity_type
    *   Source entity type.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Get source entities associated with a user account.
    */
   public function getUserEntities(AccountInterface $account, $entity_type = NULL);
diff --git a/modules/webform_access/src/WebformAccessTypeForm.php b/modules/webform_access/src/WebformAccessTypeForm.php
index b81cb701a..d1ff66b21 100644
--- a/modules/webform_access/src/WebformAccessTypeForm.php
+++ b/modules/webform_access/src/WebformAccessTypeForm.php
@@ -15,7 +15,7 @@ class WebformAccessTypeForm extends EntityForm {
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\webform_access\WebformAccessTypeInterface $webform_access_type */
+    /** @var WebformAccessTypeInterface $webform_access_type */
     $webform_access_type = $this->entity;
 
     $form['label'] = [
@@ -61,7 +61,7 @@ class WebformAccessTypeForm extends EntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\webform_access\WebformAccessTypeInterface $webform_access_type */
+    /** @var WebformAccessTypeInterface $webform_access_type */
     $webform_access_type = $this->getEntity();
     $webform_access_type->save();
 
diff --git a/modules/webform_access/src/WebformAccessTypeListBuilder.php b/modules/webform_access/src/WebformAccessTypeListBuilder.php
index 6c1537a0a..86f9769d8 100644
--- a/modules/webform_access/src/WebformAccessTypeListBuilder.php
+++ b/modules/webform_access/src/WebformAccessTypeListBuilder.php
@@ -89,8 +89,7 @@ class WebformAccessTypeListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\webform_access\WebformAccessTypeInterface $entity */
-
+    /** @var WebformAccessTypeInterface $entity */
     $row = [];
     // Label.
     $row['label'] = $entity->toLink((string) $entity->label(), 'edit-form');
diff --git a/modules/webform_access/tests/src/Functional/WebformAccessBrowserTestBase.php b/modules/webform_access/tests/src/Functional/WebformAccessBrowserTestBase.php
index 57d227fab..a0d657643 100644
--- a/modules/webform_access/tests/src/Functional/WebformAccessBrowserTestBase.php
+++ b/modules/webform_access/tests/src/Functional/WebformAccessBrowserTestBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\webform_access\Functional;
 
+use Drupal\node\NodeInterface;
+use Drupal\user\UserInterface;
+use Drupal\webform_access\WebformAccessTypeInterface;
+use Drupal\webform_access\WebformAccessGroupInterface;
 use Drupal\webform_access\Entity\WebformAccessGroup;
 use Drupal\webform_access\Entity\WebformAccessType;
 use Drupal\Tests\webform_node\Functional\WebformNodeBrowserTestBase;
@@ -21,35 +25,35 @@ abstract class WebformAccessBrowserTestBase extends WebformNodeBrowserTestBase {
   /**
    * Webform node[].
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $nodes = [];
 
   /**
    * Users.
    *
-   * @var \Drupal\user\UserInterface[]
+   * @var UserInterface[]
    */
   protected $users = [];
 
   /**
    * Access types (manager, employee, and customer).
    *
-   * @var \Drupal\webform_access\WebformAccessTypeInterface[]
+   * @var WebformAccessTypeInterface[]
    */
   protected $types = [];
 
   /**
    * Access groups (manager, employee, and customer).
    *
-   * @var \Drupal\webform_access\WebformAccessGroupInterface[]
+   * @var WebformAccessGroupInterface[]
    */
   protected $groups = [];
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create webform nodes.
diff --git a/modules/webform_access/tests/src/Functional/WebformAccessSubmissionViewsTest.php b/modules/webform_access/tests/src/Functional/WebformAccessSubmissionViewsTest.php
index d1166f3c8..5510e0720 100644
--- a/modules/webform_access/tests/src/Functional/WebformAccessSubmissionViewsTest.php
+++ b/modules/webform_access/tests/src/Functional/WebformAccessSubmissionViewsTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\webform_access\Functional;
 
+use Drupal\webform\WebformSubmissionGenerateInterface;
+use Drupal\webform\WebformSubmissionStorageInterface;
 use Drupal\webform\Entity\Webform;
 use Drupal\webform\Entity\WebformSubmission;
 use Drupal\webform\WebformInterface;
@@ -22,11 +24,12 @@ class WebformAccessSubmissionViewsTest extends WebformAccessBrowserTestBase {
 
   /**
    * Tests webform access submission views.
+   * @doesNotPerformAssertions
    */
   public function testWebformAccessSubmissionViewsTest() {
     // Create a test submission for each node and user account.
     $webform = Webform::load('contact');
-    /** @var \Drupal\webform\WebformSubmissionGenerateInterface $submission_generate */
+    /** @var WebformSubmissionGenerateInterface $submission_generate */
     $submission_generate = \Drupal::service('webform_submission.generate');
     foreach ($this->nodes as $node) {
       foreach ($this->users as $user) {
@@ -46,7 +49,7 @@ class WebformAccessSubmissionViewsTest extends WebformAccessBrowserTestBase {
   /**
    * Check user submission access.
    *
-   * @param \Drupal\webform\WebformInterface $webform
+   * @param WebformInterface $webform
    *   The webform.
    * @param array $accounts
    *   An associative array of test users.
@@ -54,7 +57,7 @@ class WebformAccessSubmissionViewsTest extends WebformAccessBrowserTestBase {
    * @see \Drupal\Tests\webform\Functional\WebformSubmissionViewsAccessTest::checkUserSubmissionAccess
    */
   protected function checkUserSubmissionAccess(WebformInterface $webform, array $accounts) {
-    /** @var \Drupal\webform\WebformSubmissionStorageInterface $webform_submission_storage */
+    /** @var WebformSubmissionStorageInterface $webform_submission_storage */
     $webform_submission_storage = \Drupal::entityTypeManager()->getStorage('webform_submission');
 
     // Reset the static cache to make sure we are hitting actual fresh access
diff --git a/modules/webform_access/tests/src/Functional/WebformAccessTokensTest.php b/modules/webform_access/tests/src/Functional/WebformAccessTokensTest.php
index 6407d87f4..45a7f1ef0 100644
--- a/modules/webform_access/tests/src/Functional/WebformAccessTokensTest.php
+++ b/modules/webform_access/tests/src/Functional/WebformAccessTokensTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\webform_access\Functional;
 
+use Drupal\webform\WebformTokenManagerInterface;
 use Drupal\webform\Entity\WebformSubmission;
 
 /**
@@ -42,7 +43,7 @@ class WebformAccessTokensTest extends WebformAccessBrowserTestBase {
     $sid = $this->postNodeSubmission($this->nodes['contact_01'], $edit);
     $webform_submission = WebformSubmission::load($sid);
 
-    /** @var \Drupal\webform\WebformTokenManagerInterface $token_manager */
+    /** @var WebformTokenManagerInterface $token_manager */
     $token_manager = \Drupal::service('webform.token_manager');
     $token_data['webform_access'] = $webform_submission;
 
diff --git a/modules/webform_access/webform_access.module b/modules/webform_access/webform_access.module
index 9546c5d31..20f864f20 100644
--- a/modules/webform_access/webform_access.module
+++ b/modules/webform_access/webform_access.module
@@ -1,5 +1,14 @@
 <?php
 
+use Drupal\field\Entity\FieldConfig;
+use Drupal\field\Entity\FieldStorageConfig;
+use Drupal\webform\WebformRequestInterface;
+use Drupal\webform_access\WebformAccessGroupStorageInterface;
+use Drupal\Core\Cache\CacheableMetadata;
+use Drupal\webform_access\WebformAccessGroupInterface;
+use Drupal\Core\Database\Query\SelectInterface;
+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\webform\WebformEntityReferenceManagerInterface;
 /**
  * @file
  * Provides webform access controls for webform nodes.
@@ -76,7 +85,7 @@ function webform_access_node_delete(EntityInterface $entity) {
  * Implements hook_field_config_delete().
  */
 function webform_access_field_config_delete(EntityInterface $entity) {
-  /** @var Drupal\field\Entity\FieldConfig $definition */
+  /** @var FieldConfig $definition */
   if ($entity->getType() === 'webform' && $entity->getEntityTypeId() === 'node') {
     $entity_ids = \Drupal::entityQuery('webform_access_group')
       ->condition('type', $entity->getTargetBundle())
@@ -95,7 +104,7 @@ function webform_access_field_config_delete(EntityInterface $entity) {
  * Implements hook_field_storage_config_delete().
  */
 function webform_access_field_storage_config_delete(EntityInterface $entity) {
-  /** @var Drupal\field\Entity\FieldStorageConfig $entity */
+  /** @var FieldStorageConfig $entity */
   if ($entity->getType() === 'webform') {
     \Drupal::database()->delete('webform_access_group_entity')
       ->condition('entity_type', $entity->getEntityTypeId())
@@ -132,7 +141,7 @@ function webform_access_menu_local_tasks_alter(&$data, $route_name) {
     return;
   }
 
-  /** @var \Drupal\webform\WebformRequestInterface $request_handler */
+  /** @var WebformRequestInterface $request_handler */
   $request_handler = \Drupal::service('webform.request');
   $account = \Drupal::currentUser();
   $webform = $request_handler->getCurrentWebform();
@@ -141,14 +150,14 @@ function webform_access_menu_local_tasks_alter(&$data, $route_name) {
     return;
   }
 
-  /** @var \Drupal\webform_access\WebformAccessGroupStorageInterface $webform_access_group */
+  /** @var WebformAccessGroupStorageInterface $webform_access_group */
   $webform_access_group_storage = \Drupal::entityTypeManager()->getStorage('webform_access_group');
   $webform_access_groups = $webform_access_group_storage->loadByEntities($webform, $source_entity, $account);
   if (empty($webform_access_groups)) {
     return;
   }
 
-  /** @var \Drupal\Core\Cache\CacheableMetadata $cacheability */
+  /** @var CacheableMetadata $cacheability */
   $cacheability = $data['cacheability'];
   foreach ($webform_access_groups as $webforn_access_group) {
     $cacheability->addCacheableDependency($webforn_access_group);
@@ -166,14 +175,14 @@ function webform_access_webform_access(WebformInterface $webform, $operation, Ac
     return AccessResult::neutral();
   }
 
-  /** @var \Drupal\webform\WebformRequestInterface $request_handler */
+  /** @var WebformRequestInterface $request_handler */
   $request_handler = \Drupal::service('webform.request');
   $source_entity = $request_handler->getCurrentSourceEntity(['webform_submission']);
   if (!$source_entity) {
     return AccessResult::neutral();
   }
 
-  /** @var \Drupal\webform_access\WebformAccessGroupStorageInterface $webform_access_group */
+  /** @var WebformAccessGroupStorageInterface $webform_access_group */
   $webform_access_group_storage = \Drupal::entityTypeManager()->getStorage('webform_access_group');
   $webform_access_groups = $webform_access_group_storage->loadByEntities($webform, $source_entity, $account);
   if (empty($webform_access_groups)) {
@@ -212,7 +221,7 @@ function webform_access_webform_submission_access(WebformSubmissionInterface $we
     return AccessResult::neutral();
   }
 
-  /** @var \Drupal\webform_access\WebformAccessGroupStorageInterface $webform_access_group */
+  /** @var WebformAccessGroupStorageInterface $webform_access_group */
   $webform_access_group_storage = \Drupal::entityTypeManager()->getStorage('webform_access_group');
   $webform_access_groups = $webform_access_group_storage->loadByEntities($webform, $source_entity, $account);
   if (empty($webform_access_groups)) {
@@ -246,9 +255,9 @@ function webform_access_webform_submission_query_access_alter(AlterableInterface
   $account = $query->getMetaData('account') ?: \Drupal::currentUser();
 
   // Collect access group ids with 'view_any' or 'administer' permissions.
-  /** @var \Drupal\webform_access\WebformAccessGroupStorageInterface $access_group_storage */
+  /** @var WebformAccessGroupStorageInterface $access_group_storage */
   $access_group_storage = \Drupal::entityTypeManager()->getStorage('webform_access_group');
-  /** @var \Drupal\webform_access\WebformAccessGroupInterface $access_group */
+  /** @var WebformAccessGroupInterface $access_group */
   $access_groups = $access_group_storage->loadByEntities(NULL, NULL, $account);
   $access_any_group_ids = [];
   $access_own_group_ids = [];
@@ -270,7 +279,7 @@ function webform_access_webform_submission_query_access_alter(AlterableInterface
       ->execute();
     while ($record = $result->fetchAssoc()) {
       foreach ($webform_submission_tables as $table) {
-        /** @var \Drupal\Core\Database\Query\SelectInterface $query */
+        /** @var SelectInterface $query */
         $condition = $query->andConditionGroup();
         $condition->condition($table['alias'] . '.entity_type', $record['entity_type']);
         $condition->condition($table['alias'] . '.entity_id', (string) $record['entity_id']);
@@ -287,7 +296,7 @@ function webform_access_webform_submission_query_access_alter(AlterableInterface
       ->execute();
     while ($record = $result->fetchAssoc()) {
       foreach ($webform_submission_tables as $table) {
-        /** @var \Drupal\Core\Database\Query\SelectInterface $query */
+        /** @var SelectInterface $query */
         $condition = $query->andConditionGroup();
         $condition->condition($table['alias'] . '.uid', $account->id());
         $condition->condition($table['alias'] . '.entity_type', $record['entity_type']);
@@ -307,7 +316,7 @@ function webform_access_webform_submission_query_access_alter(AlterableInterface
  * Implements hook_field_widget_form_alter().
  */
 function webform_access_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
-  /** @var \Drupal\Core\Field\FieldItemListInterface $items */
+  /** @var FieldItemListInterface $items */
   $items = $context['items'];
   $field_definition = $items->getFieldDefinition();
   if ($field_definition->getType() !== 'webform') {
@@ -341,7 +350,7 @@ function webform_access_field_widget_form_alter(&$element, FormStateInterface $f
  * Implements hook_form_BASE_FORM_ID_alter().
  */
 function webform_access_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\webform\WebformEntityReferenceManagerInterface $entity_reference_manager */
+  /** @var WebformEntityReferenceManagerInterface $entity_reference_manager */
   $entity_reference_manager = \Drupal::service('webform.entity_reference_manager');
   $node = $form_state->getFormObject()->getEntity();
   $field_names = $entity_reference_manager->getFieldNames($node);
@@ -354,7 +363,7 @@ function webform_access_form_node_form_alter(&$form, FormStateInterface $form_st
  * Webform access group submit handler.
  */
 function _webform_access_form_node_form_submit(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\webform\WebformEntityReferenceManagerInterface $entity_reference_manager */
+  /** @var WebformEntityReferenceManagerInterface $entity_reference_manager */
   $entity_reference_manager = \Drupal::service('webform.entity_reference_manager');
   $node = $form_state->getFormObject()->getEntity();
   $field_names = $entity_reference_manager->getFieldNames($node);
@@ -466,7 +475,6 @@ function _webform_access_user_profile_form_submit($form, FormStateInterface $for
 /* ************************************************************************** */
 // Webform access group helper functions.
 /* ************************************************************************** */
-
 /**
  * Build element used to select webform access groups.
  *
@@ -474,7 +482,7 @@ function _webform_access_user_profile_form_submit($form, FormStateInterface $for
  *   Array of default group ids.
  * @param array $form
  *   An associative array containing the structure of the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  *
  * @return array
diff --git a/modules/webform_access/webform_access.tokens.inc b/modules/webform_access/webform_access.tokens.inc
index 0b2cbe1d3..cb3821349 100644
--- a/modules/webform_access/webform_access.tokens.inc
+++ b/modules/webform_access/webform_access.tokens.inc
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\webform_access\WebformAccessGroupStorageInterface;
+use Drupal\webform\WebformSubmissionInterface;
+use Drupal\webform_access\WebformAccessGroupInterface;
 /**
  * @file
  * Builds placeholder replacement tokens for webform access type.
@@ -80,10 +83,10 @@ function webform_access_token_info() {
 function webform_access_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
   $replacements = [];
   if ($type === 'webform_access' && !empty($data['webform_access'])) {
-    /** @var \Drupal\webform_access\WebformAccessGroupStorageInterface $webform_access_group_storage */
+    /** @var WebformAccessGroupStorageInterface $webform_access_group_storage */
     $webform_access_group_storage = \Drupal::entityTypeManager()->getStorage('webform_access_group');
 
-    /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
+    /** @var WebformSubmissionInterface $webform_submission */
     $webform_submission = $data['webform_access'];
     $webform = $webform_submission->getWebform();
     $source_entity = $webform_submission->getSourceEntity();
@@ -98,7 +101,7 @@ function webform_access_tokens($type, $tokens, array $data, array $options, Bubb
       // Properties can be admins, users, or emails.
       $property = $parts[2] ?? NULL;
 
-      /** @var \Drupal\webform_access\WebformAccessGroupInterface $webform_access_group */
+      /** @var WebformAccessGroupInterface $webform_access_group */
       $webform_access_groups = $webform_access_group_storage->loadByEntities($webform, $source_entity, NULL, $webform_access_type_id);
       $webform_access_group_ids = array_keys($webform_access_groups);
 
diff --git a/modules/webform_attachment/src/Controller/WebformAttachmentController.php b/modules/webform_attachment/src/Controller/WebformAttachmentController.php
index 7bcfa1bd5..c8ba3497d 100644
--- a/modules/webform_attachment/src/Controller/WebformAttachmentController.php
+++ b/modules/webform_attachment/src/Controller/WebformAttachmentController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\webform_attachment\Controller;
 
+use Drupal\Core\Render\ElementInfoManager;
+use Drupal\webform\Plugin\WebformElementManagerInterface;
+use Drupal\webform_attachment\Element\WebformAttachmentInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Render\Element;
@@ -21,14 +24,14 @@ class WebformAttachmentController extends ControllerBase implements ContainerInj
   /**
    * Element info.
    *
-   * @var \Drupal\Core\Render\ElementInfoManager
+   * @var ElementInfoManager
    */
   protected $elementInfo;
 
   /**
    * The webform element plugin manager.
    *
-   * @var \Drupal\webform\Plugin\WebformElementManagerInterface
+   * @var WebformElementManagerInterface
    */
   protected $elementManager;
 
@@ -45,16 +48,16 @@ class WebformAttachmentController extends ControllerBase implements ContainerInj
   /**
    * Response callback to download an attachment.
    *
-   * @param \Drupal\webform\WebformInterface $webform
+   * @param WebformInterface $webform
    *   A webform.
-   * @param \Drupal\webform\WebformSubmissionInterface $webform_submission
+   * @param WebformSubmissionInterface $webform_submission
    *   A webform submission.
    * @param string $element
    *   The attachment element webform key.
    * @param string $filename
    *   The attachment filename.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   A response containing the attachment's file.
    */
   public function download(WebformInterface $webform, WebformSubmissionInterface $webform_submission, $element, $filename) {
@@ -84,7 +87,7 @@ class WebformAttachmentController extends ControllerBase implements ContainerInj
       throw new AccessDeniedHttpException();
     }
 
-    /** @var \Drupal\webform_attachment\Element\WebformAttachmentInterface $element_info */
+    /** @var WebformAttachmentInterface $element_info */
     // Get base form element for webform element derivatives.
     // @see \Drupal\webform_entity_print\Plugin\Derivative\WebformEntityPrintWebformElementDeriver
     [$type] = explode(':', $element['#type']);
diff --git a/modules/webform_attachment/src/Element/WebformAttachmentBase.php b/modules/webform_attachment/src/Element/WebformAttachmentBase.php
index 220c45c70..18d0b745e 100644
--- a/modules/webform_attachment/src/Element/WebformAttachmentBase.php
+++ b/modules/webform_attachment/src/Element/WebformAttachmentBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\webform_attachment\Element;
 
+use Drupal\webform\WebformTokenManagerInterface;
+use Drupal\Component\Transliteration\TransliterationInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element\RenderElement;
 use Drupal\Core\Url;
@@ -44,7 +48,7 @@ abstract class WebformAttachmentBase extends RenderElement implements WebformAtt
       return $element;
     }
 
-    /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
+    /** @var WebformSubmissionInterface $webform_submission */
     $webform_submission = $form_object->getEntity();
 
     // Attachments only work for completed and saved webform submissions.
@@ -68,7 +72,7 @@ abstract class WebformAttachmentBase extends RenderElement implements WebformAtt
    */
   public static function getFileName(array $element, WebformSubmissionInterface $webform_submission) {
     if (!empty($element['#filename'])) {
-      /** @var \Drupal\webform\WebformTokenManagerInterface $token_manager */
+      /** @var WebformTokenManagerInterface $token_manager */
       $token_manager = \Drupal::service('webform.token_manager');
 
       $filename = $token_manager->replace($element['#filename'], $webform_submission);
@@ -83,9 +87,9 @@ abstract class WebformAttachmentBase extends RenderElement implements WebformAtt
       // @see http://stackoverflow.com/questions/2021624/string-sanitizer-for-filename
       // @see \Drupal\webform\Plugin\WebformElement\WebformManagedFileBase::getFileDestinationUri
       if (!empty($element['#sanitize'])) {
-        /** @var \Drupal\Component\Transliteration\TransliterationInterface $transliteration */
+        /** @var TransliterationInterface $transliteration */
         $transliteration = \Drupal::service('transliteration');
-        /** @var \Drupal\Core\Language\LanguageManagerInterface $language_manager */
+        /** @var LanguageManagerInterface $language_manager */
         $language_manager = \Drupal::service('language_manager');
         $langcode = $language_manager->getCurrentLanguage()->getId();
 
@@ -111,7 +115,7 @@ abstract class WebformAttachmentBase extends RenderElement implements WebformAtt
    * {@inheritdoc}
    */
   public static function getFileMimeType(array $element, WebformSubmissionInterface $webform_submission) {
-    /** @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $file_mime_type_guesser */
+    /** @var MimeTypesInterface $file_mime_type_guesser */
     $file_mime_type_guesser = \Drupal::service('file.mime_type.guesser');
     $file_name = static::getFileName($element, $webform_submission);
     return $file_mime_type_guesser->guess($file_name);
diff --git a/modules/webform_attachment/src/Element/WebformAttachmentInterface.php b/modules/webform_attachment/src/Element/WebformAttachmentInterface.php
index 412ce8e7a..8e4aa7756 100644
--- a/modules/webform_attachment/src/Element/WebformAttachmentInterface.php
+++ b/modules/webform_attachment/src/Element/WebformAttachmentInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\webform_attachment\Element;
 
+use Drupal\Core\Url;
 use Drupal\webform\WebformSubmissionInterface;
 
 /**
@@ -14,7 +15,7 @@ interface WebformAttachmentInterface {
    *
    * @param array $element
    *   The webform attachment element.
-   * @param \Drupal\webform\WebformSubmissionInterface $webform_submission
+   * @param WebformSubmissionInterface $webform_submission
    *   A webform submission.
    *
    * @return mixed|string
@@ -27,7 +28,7 @@ interface WebformAttachmentInterface {
    *
    * @param array $element
    *   The webform attachment element.
-   * @param \Drupal\webform\WebformSubmissionInterface $webform_submission
+   * @param WebformSubmissionInterface $webform_submission
    *   A webform submission.
    *
    * @return mixed|string
@@ -40,7 +41,7 @@ interface WebformAttachmentInterface {
    *
    * @param array $element
    *   The webform attachment element.
-   * @param \Drupal\webform\WebformSubmissionInterface $webform_submission
+   * @param WebformSubmissionInterface $webform_submission
    *   A webform submission.
    *
    * @return mixed|string
@@ -53,10 +54,10 @@ interface WebformAttachmentInterface {
    *
    * @param array $element
    *   The webform attachment element.
-   * @param \Drupal\webform\WebformSubmissionInterface $webform_submission
+   * @param WebformSubmissionInterface $webform_submission
    *   A webform submission.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   A webform attachment's download URL. Return NULL if the submission is
    *   not saved to the database.
    */
@@ -67,7 +68,7 @@ interface WebformAttachmentInterface {
    *
    * @param array $element
    *   The webform attachment element.
-   * @param \Drupal\webform\WebformSubmissionInterface $webform_submission
+   * @param WebformSubmissionInterface $webform_submission
    *   A webform submission.
    *
    * @return array
diff --git a/modules/webform_attachment/src/Element/WebformAttachmentToken.php b/modules/webform_attachment/src/Element/WebformAttachmentToken.php
index b7dd1d75e..a0abe4a84 100644
--- a/modules/webform_attachment/src/Element/WebformAttachmentToken.php
+++ b/modules/webform_attachment/src/Element/WebformAttachmentToken.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\webform_attachment\Element;
 
+use Drupal\webform\WebformTokenManagerInterface;
 use Drupal\webform\WebformSubmissionInterface;
 
 /**
@@ -24,7 +25,7 @@ class WebformAttachmentToken extends WebformAttachmentBase {
    * {@inheritdoc}
    */
   public static function getFileContent(array $element, WebformSubmissionInterface $webform_submission) {
-    /** @var \Drupal\webform\WebformTokenManagerInterface $token_manager */
+    /** @var WebformTokenManagerInterface $token_manager */
     $token_manager = \Drupal::service('webform.token_manager');
     $content = $token_manager->replace($element['#template'], $webform_submission);
     return (!empty($element['#trim'])) ? trim($content) : $content;
diff --git a/modules/webform_attachment/src/Element/WebformAttachmentUrl.php b/modules/webform_attachment/src/Element/WebformAttachmentUrl.php
index 2cdd89bb0..a01246672 100644
--- a/modules/webform_attachment/src/Element/WebformAttachmentUrl.php
+++ b/modules/webform_attachment/src/Element/WebformAttachmentUrl.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\webform_attachment\Element;
 
+use Drupal\webform\WebformTokenManagerInterface;
 use Drupal\webform\WebformSubmissionInterface;
 use GuzzleHttp\Exception\RequestException;
 
@@ -28,11 +29,11 @@ class WebformAttachmentUrl extends WebformAttachmentBase {
     try {
       $url = $element['#url'];
       // URL can contain tokens.
-      /** @var \Drupal\webform\WebformTokenManagerInterface $token_manager */
+      /** @var WebformTokenManagerInterface $token_manager */
       $token_manager = \Drupal::service('webform.token_manager');
       $url = $token_manager->replace($url, $webform_submission);
       // Url can be a URI.
-      $url = file_create_url($url) ?: $url;
+      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($url) ?: $url;
       // Prepend scheme and host to root relative path.
       if (strpos($url, '/') === 0) {
         $url = \Drupal::request()->getSchemeAndHttpHost() . $url;
@@ -50,7 +51,7 @@ class WebformAttachmentUrl extends WebformAttachmentBase {
    */
   public static function getFileName(array $element, WebformSubmissionInterface $webform_submission) {
     if (!isset($element['#filename']) && !empty($element['#url'])) {
-      /** @var \Drupal\webform\WebformTokenManagerInterface $token_manager */
+      /** @var WebformTokenManagerInterface $token_manager */
       $token_manager = \Drupal::service('webform.token_manager');
       $url = $token_manager->replace($element['#url'], $webform_submission);
       return basename($url);
diff --git a/modules/webform_attachment/src/Plugin/WebformElement/WebformAttachmentBase.php b/modules/webform_attachment/src/Plugin/WebformElement/WebformAttachmentBase.php
index f2ed483a3..837ff3d69 100644
--- a/modules/webform_attachment/src/Plugin/WebformElement/WebformAttachmentBase.php
+++ b/modules/webform_attachment/src/Plugin/WebformElement/WebformAttachmentBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\webform_attachment\Plugin\WebformElement;
 
+use Drupal\webform\WebformSubmissionConditionsValidator;
+use Drupal\webform_attachment\Element\WebformAttachmentInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\webform\Element\WebformMessage;
 use Drupal\webform\Plugin\WebformElement\WebformDisplayOnTrait;
@@ -22,7 +24,7 @@ abstract class WebformAttachmentBase extends WebformElementBase implements Webfo
   /**
    * The webform submission (server-side) conditions (#states) validator.
    *
-   * @var \Drupal\webform\WebformSubmissionConditionsValidator
+   * @var WebformSubmissionConditionsValidator
    */
   protected $conditionsValidator;
 
@@ -83,7 +85,7 @@ abstract class WebformAttachmentBase extends WebformElementBase implements Webfo
    * {@inheritdoc}
    */
   protected function formatHtmlItem(array $element, WebformSubmissionInterface $webform_submission, array $options = []) {
-    /** @var \Drupal\webform_attachment\Element\WebformAttachmentInterface $attachment_element */
+    /** @var WebformAttachmentInterface $attachment_element */
     $attachment_element = $this->getFormElementClassDefinition();
     $format = $this->getItemFormat($element);
     switch ($format) {
@@ -103,7 +105,7 @@ abstract class WebformAttachmentBase extends WebformElementBase implements Webfo
    * {@inheritdoc}
    */
   protected function formatTextItem(array $element, WebformSubmissionInterface $webform_submission, array $options = []) {
-    /** @var \Drupal\webform_attachment\Element\WebformAttachmentInterface $attachment_element */
+    /** @var WebformAttachmentInterface $attachment_element */
     $attachment_element = $this->getFormElementClassDefinition();
 
     $format = $this->getItemFormat($element);
@@ -255,7 +257,7 @@ abstract class WebformAttachmentBase extends WebformElementBase implements Webfo
       return [];
     }
 
-    /** @var \Drupal\webform_attachment\Element\WebformAttachmentInterface $attachment_element */
+    /** @var WebformAttachmentInterface $attachment_element */
     $attachment_element = $this->getFormElementClassDefinition();
 
     $file_content = $attachment_element::getFileContent($element, $webform_submission);
diff --git a/modules/webform_attachment/tests/modules/webform_attachment_test/webform_attachment_test.module b/modules/webform_attachment/tests/modules/webform_attachment_test/webform_attachment_test.module
index 7cfc86f8d..41c3bd72b 100644
--- a/modules/webform_attachment/tests/modules/webform_attachment_test/webform_attachment_test.module
+++ b/modules/webform_attachment/tests/modules/webform_attachment_test/webform_attachment_test.module
@@ -1,10 +1,10 @@
 <?php
 
+use Drupal\webform\WebformInterface;
 /**
  * @file
  * Support module for webform attachment element that provides test webforms.
  */
-
 /**
  * Implements hook_webform_load().
  */
@@ -15,7 +15,7 @@ function webform_attachment_test_webform_load(array $entities) {
 
   global $base_url;
 
-  /** @var \Drupal\webform\WebformInterface $webform */
+  /** @var WebformInterface $webform */
   $webform = $entities['test_attachment_url'];
   $elements = $webform->getElementsDecodedAndFlattened();
 
diff --git a/modules/webform_attachment/tests/src/Functional/WebformAttachmentTest.php b/modules/webform_attachment/tests/src/Functional/WebformAttachmentTest.php
index 1f13407d3..6cb54cd6b 100644
--- a/modules/webform_attachment/tests/src/Functional/WebformAttachmentTest.php
+++ b/modules/webform_attachment/tests/src/Functional/WebformAttachmentTest.php
@@ -250,12 +250,12 @@ class WebformAttachmentTest extends WebformBrowserTestBase {
     // Check that attachment is enabled.
     $this->postSubmission($webform_attachment_states, ['attach' => TRUE]);
     $sent_email = $this->getLastEmail();
-    $this->assert(isset($sent_email['params']['attachments'][0]), 'Attachment enabled via #states');
+    $this->assertTrue(isset($sent_email['params']['attachments'][0]), 'Attachment enabled via #states');
 
     // Check that attachment is disabled.
     $this->postSubmission($webform_attachment_states, ['attach' => FALSE]);
     $sent_email = $this->getLastEmail();
-    $this->assert(!isset($sent_email['params']['attachments'][0]), 'Attachment disabled via #states');
+    $this->assertTrue(!isset($sent_email['params']['attachments'][0]), 'Attachment disabled via #states');
   }
 
 }
diff --git a/modules/webform_bootstrap/tests/modules/webform_bootstrap_test_module/src/Controller/WebformBootstrapTestModuleController.php b/modules/webform_bootstrap/tests/modules/webform_bootstrap_test_module/src/Controller/WebformBootstrapTestModuleController.php
index 608647aa4..f1eb79b19 100644
--- a/modules/webform_bootstrap/tests/modules/webform_bootstrap_test_module/src/Controller/WebformBootstrapTestModuleController.php
+++ b/modules/webform_bootstrap/tests/modules/webform_bootstrap_test_module/src/Controller/WebformBootstrapTestModuleController.php
@@ -14,7 +14,7 @@ class WebformBootstrapTestModuleController extends ControllerBase {
   /**
    * Returns a Bootstrap style-guide.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
    * @return array
diff --git a/modules/webform_bootstrap/tests/modules/webform_bootstrap_test_module/webform_bootstrap_test_module.install b/modules/webform_bootstrap/tests/modules/webform_bootstrap_test_module/webform_bootstrap_test_module.install
index cbb05cb90..82138219d 100644
--- a/modules/webform_bootstrap/tests/modules/webform_bootstrap_test_module/webform_bootstrap_test_module.install
+++ b/modules/webform_bootstrap/tests/modules/webform_bootstrap_test_module/webform_bootstrap_test_module.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Extension\ThemeInstallerInterface;
 /**
  * @file
  * Install, update and uninstall functions for the Webform Test Bootstrap module.
@@ -12,7 +13,7 @@ use Drupal\Core\Serialization\Yaml;
  */
 function webform_bootstrap_test_module_install() {
   // Install bootstrap theme.
-  /** @var \Drupal\Core\Extension\ThemeInstallerInterface $theme_installer */
+  /** @var ThemeInstallerInterface $theme_installer */
   $theme_installer = \Drupal::service('theme_installer');
   $theme_installer->install(['webform_bootstrap_test_theme', 'bootstrap']);
 
@@ -116,7 +117,7 @@ function webform_bootstrap_test_module_uninstall() {
 
   // Uninstall bootstrap theme.
   // Install bootstrap theme.
-  /** @var \Drupal\Core\Extension\ThemeInstallerInterface $theme_installer */
+  /** @var ThemeInstallerInterface $theme_installer */
   $theme_installer = \Drupal::service('theme_installer');
   $theme_installer->uninstall(['webform_bootstrap_test_theme', 'bootstrap']);
 }
