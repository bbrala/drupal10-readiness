modules/contrib/config_overlay/config_overlay.install
modules/contrib/config_overlay/src/Config/ExtensionInstallStorage.php
modules/contrib/config_overlay/src/Config/ExtensionOptionalStorage.php
modules/contrib/config_overlay/src/Config/ExtensionStorageFactory.php
modules/contrib/config_overlay/src/Config/ReadOnlyUnionStorage.php
modules/contrib/config_overlay/src/EventSubscriber/ConfigOverlayConfigSubscriber.php
modules/contrib/config_overlay/src/Exception/ConfigOverlayMissingExtensionListException.php
modules/contrib/config_overlay/src/Plugin/ConfigFilter/ConfigOverlayFilter.php
modules/contrib/config_overlay/tests/src/Functional/ConfigOverlayDemoUmamiTest.php
modules/contrib/config_overlay/tests/src/Functional/ConfigOverlayFunctionalTestTrait.php
modules/contrib/config_overlay/tests/src/Functional/ConfigOverlayMinimalTest.php
modules/contrib/config_overlay/tests/src/Functional/ConfigOverlayProfileTestBase.php
modules/contrib/config_overlay/tests/src/Functional/ConfigOverlayStandardTest.php
modules/contrib/config_overlay/tests/src/Functional/ConfigOverlayTestingMultilingualTest.php
modules/contrib/config_overlay/tests/src/Functional/ConfigOverlayTestingTest.php
modules/contrib/config_overlay/tests/src/Functional/ExistingConfig/ConfigOverlayExistingConfigTestBase.php
modules/contrib/config_overlay/tests/src/Functional/ExistingConfig/ConfigOverlayMinimalExistingConfigTest.php
modules/contrib/config_overlay/tests/src/Functional/ExistingConfig/ConfigOverlayTestingExistingConfigTest.php
modules/contrib/config_overlay/tests/src/Functional/Language/ConfigOverlayTestingLanguageTest.php

6 files with changes
====================

1) modules/contrib/config_overlay/tests/src/Functional/ConfigOverlayFunctionalTestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\config_overlay\Functional;

+use Drupal\Core\Config\ConfigManagerInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\File\FileSystemInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Component\Serialization\SerializationInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
@@ @@
   /**
    * The configuration manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;

@@ @@
   /**
    * The configuration storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configStorage;

@@ @@
   /**
    * The configuration synchronization storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configSyncStorage;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The serializer.
    *
-   * @var \Drupal\Component\Serialization\SerializationInterface
+   * @var SerializationInterface
    */
   protected $serializer;

@@ @@
   /**
    * Tests recreating a shipped configuration entity.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $initial_entity
+   * @param ConfigEntityInterface $initial_entity
    *   The entity to recreate.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface
+   * @return ConfigEntityInterface
    *   The recreated entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function doTestRecreateInitial(ConfigEntityInterface $initial_entity) {
     // Change some configuration and make sure that it is detected correctly.
@@ @@
   /**
    * Tests editing a configuration entity.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity to edit.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function doTestEdit(ConfigEntityInterface $entity) {
     // Edit the menu, so that it will be exported to the synchronization
@@ @@
   /**
    * Tests recreating a non-shipped configuration entity.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $recreated_entity
+   * @param ConfigEntityInterface $recreated_entity
    *   The entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function doTestRecreateAgain(ConfigEntityInterface $recreated_entity) {
     // Recreate the menu again with the same values (but for the UUID). Since
@@ @@
   /**
    * Recreates a given configuration entity.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface
+   * @return ConfigEntityInterface
    *   The recreated entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function recreateEntity(ConfigEntityInterface $entity) {
     $entity->delete();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/config_overlay/src/Plugin/ConfigFilter/ConfigOverlayFilter.php:57

    ---------- begin diff ----------
@@ @@
   /**
    * The extension storage factory.
    *
-   * @var \Drupal\config_overlay\Config\ExtensionStorageFactory
+   * @var ExtensionStorageFactory
    */
   protected $extensionStorageFactory;

@@ @@
   /**
    * The active configuration storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $activeStorage;

@@ @@
    * 'config/install' directories and an extension storage for the
    * 'config/optional' directories.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    *
    * @see \Drupal\Core\Config\ExtensionInstallStorage
    * @see \Drupal\config_overlay\Config\ExtensionOptionalStorage
@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\config_overlay\Config\ExtensionStorageFactory $extension_storage_factory
+   * @param ExtensionStorageFactory $extension_storage_factory
    *   The extension storage factory.
-   * @param \Drupal\Core\Config\StorageInterface $active_storage
+   * @param StorageInterface $active_storage
    *   The active configuration storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ExtensionStorageFactory $extension_storage_factory, StorageInterface $active_storage) {
@@ @@
   /**
    * Sets the extension install configuration storage.
    *
-   * @param \Drupal\Core\Config\StorageInterface $extension_storage
+   * @param StorageInterface $extension_storage
    *   The extension install configuration storage.
    */
   protected function setExtensionStorage(StorageInterface $extension_storage) {
@@ @@
    * exist either. In this case the extension list is read from the active
    * storage, so that this filter can work at all.
    *
-   * @return \Drupal\Core\Config\StorageInterface
+   * @return StorageInterface
    *   The storage that contains the extension list.
    *
-   * @throws \Drupal\config_overlay\Exception\ConfigOverlayMissingExtensionListException
+   * @throws ConfigOverlayMissingExtensionListException
    *   If no storage with an extension could be found.
    */
   protected function getStorageWithExtensionList() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/config_overlay/src/EventSubscriber/ConfigOverlayConfigSubscriber.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The Configuration Overlay extension storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $extensionStorage;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a configuration subscriber for Configuration Overlay.
    *
-   * @param \Drupal\Core\Config\StorageInterface $extension_storage
+   * @param StorageInterface $extension_storage
    *   The Configuration Overlay extension storage.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(StorageInterface $extension_storage, ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Removes any re-added shipped configuration from the deletion list.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration save event.
    */
   public function onSave(ConfigCrudEvent $event) {
@@ @@
   /**
    * Records any any shipped configuration that is deleted.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration deletion event.
    */
   public function onDelete(ConfigCrudEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/config_overlay/src/Config/ReadOnlyUnionStorage.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The storages that are part of the union.
    *
-   * @var \Drupal\Core\Config\StorageInterface[]
+   * @var StorageInterface[]
    */
   protected $storages = [];

@@ @@
   /**
    * Constructs a read-only union configuration storage.
    *
-   * @param \Drupal\Core\Config\StorageInterface[] $storages
+   * @param StorageInterface[] $storages
    *   The storages to form the union of.
    */
   public function __construct(array $storages) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/config_overlay/src/Config/ExtensionStorageFactory.php:18

    ---------- begin diff ----------
@@ @@
    * The returned storage is similar to an ExtensionInstallStorage except that
    * it also supports optional extension configuration.
    *
-   * @param \Drupal\Core\Config\StorageInterface $storage
+   * @param StorageInterface $storage
    *   The base storage to read the extension list form.
    *
-   * @return \Drupal\Core\Config\StorageInterface
+   * @return StorageInterface
    *   The extension storage.
    */
   public function create(StorageInterface $storage) {
@@ @@
     // If the profile has a config/sync directory add that first, so that
     // configuration there can override module-provided configuration.
     /* @see install_profile_info() */
-    $profile_sync_path = drupal_get_path('profile', $profile) . '/config/sync';
+    $profile_sync_path = \Drupal::service('extension.list.profile')->getPath($profile) . '/config/sync';
     if (is_dir($profile_sync_path)) {
       $storages[] = new FileStorage($profile_sync_path, $storage->getCollectionName());
     }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/config_overlay/src/Config/ExtensionOptionalStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_overlay\Config;

+use Drupal\config_overlay\Exception\ConfigOverlayMissingExtensionListException;
 use Drupal\Component\Serialization\Exception\InvalidDataTypeException;
 use Drupal\Core\Config\InstallStorage;
 use Drupal\Core\Config\StorageInterface;
@@ @@
   /**
    * The extension configuration storage for the 'config/install' directory.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $extensionInstallStorage;

@@ @@
   /**
    * Overrides \Drupal\Core\Config\InstallStorage::__construct().
    *
-   * @param \Drupal\Core\Config\StorageInterface $config_storage
+   * @param StorageInterface $config_storage
    *   The active configuration store where the list of enabled modules and
    *   themes is stored.
-   * @param \Drupal\Core\Config\StorageInterface $extension_install_storage
+   * @param StorageInterface $extension_install_storage
    *   The extension configuration storage for the 'config/install' directory.
    * @param string $profile
    *   The current installation profile.
@@ @@
    *   TRUE if there is valid optional configuration for the given name; FALSE
    *   otherwise.
    *
-   * @throws \Drupal\config_overlay\Exception\ConfigOverlayMissingExtensionListException
+   * @throws ConfigOverlayMissingExtensionListException
    *   If no storage with an extension could be found.
    */
   protected function isValidOptionalConfig($name) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

