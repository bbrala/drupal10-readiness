diff --git a/src/Commands/InstallProfileCommands.php b/src/Commands/InstallProfileCommands.php
index 4c3bf27..585ead0 100644
--- a/src/Commands/InstallProfileCommands.php
+++ b/src/Commands/InstallProfileCommands.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\helper\Commands;
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Installer\Exception\InstallerException;
 use Drupal\helper\InstallProfile;
 use Drush\Commands\DrushCommands;
@@ -15,14 +16,14 @@ class InstallProfileCommands extends DrushCommands {
   /**
    * The install profile helper.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $installProfile;
 
   /**
    * SchemaCommands constructor.
    *
-   * @param \Drupal\helper\InstallProfile $installProfile
+   * @param InstallProfile $installProfile
    *   The install profile helper.
    */
   public function __construct(InstallProfile $installProfile) {
@@ -42,7 +43,7 @@ class InstallProfileCommands extends DrushCommands {
    * @usage drush install-profile:switch minimal
    *   Switches from the current install profile to the minimal install profile.
    *
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws UserAbortException
    *   If the user aborted the confirmation.
    */
   public function switch($profile, $schema_version = NULL) {
diff --git a/src/Commands/ModuleCommands.php b/src/Commands/ModuleCommands.php
index 54c619d..301a564 100644
--- a/src/Commands/ModuleCommands.php
+++ b/src/Commands/ModuleCommands.php
@@ -16,14 +16,14 @@ class ModuleCommands extends DrushCommands {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * SchemaCommands constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    */
   public function __construct(ModuleHandlerInterface $moduleHandler) {
@@ -68,7 +68,7 @@ class ModuleCommands extends DrushCommands {
    *   current schema.
    *
    * @throws \InvalidArgumentException
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws UserAbortException
    * @throws \RuntimeException
    */
   public function setSchemaVersion($module, $version) {
@@ -165,7 +165,7 @@ class ModuleCommands extends DrushCommands {
    * @validate-module
    *
    * @throws \InvalidArgumentException
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws UserAbortException
    * @throws \RuntimeException
    */
   public function resetPostUpdate($module, $hook) {
@@ -308,7 +308,7 @@ class ModuleCommands extends DrushCommands {
    * If the argument to be validated is not named $module, pass the
    * argument name as the value of the validate-module-name annotation.
    *
-   * @param \Consolidation\AnnotatedCommand\CommandData $commandData
+   * @param CommandData $commandData
    *   The command data.
    *
    * @hook validate @validate-module
diff --git a/src/Config.php b/src/Config.php
index bd4b1db..f679795 100644
--- a/src/Config.php
+++ b/src/Config.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\helper;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ConfigManagerInterface;
@@ -18,28 +20,28 @@ class Config {
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The configuration manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;
 
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
@@ -53,13 +55,13 @@ class Config {
   /**
    * Config constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The configuration manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ConfigManagerInterface $config_manager, LoggerInterface $logger, FileSystemInterface $file_system) {
@@ -102,7 +104,7 @@ class Config {
    *
    * @throws \RuntimeException
    *   If unable to decode YAML from file.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   In unable to save the config.
    */
   public function importFile($uri, $contents = NULL) {
@@ -123,7 +125,7 @@ class Config {
       $entity_type = $entity_storage->getEntityType();
       $id_key = $entity_type->getKey('id');
       $data[$id_key] = $entity_id;
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+      /** @var ConfigEntityInterface $entity */
       $entity = $entity_storage->create($data);
       if ($existing_entity = $entity_storage->load($entity_id)) {
         if (!$this->updateExistingConfig) {
@@ -158,7 +160,7 @@ class Config {
    *
    * @throws \RuntimeException
    *   If unable to decode YAML from file.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   In unable to save the config.
    */
   public function importDirectory($directory, array $options = []) {
@@ -181,11 +183,11 @@ class Config {
    *
    * @throws \RuntimeException
    *   If unable to decode YAML from file.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   In unable to save the config.
    */
   public function importModule($module, $directory = 'install', array $options = []) {
-    $this->importDirectory(drupal_get_path('module', $module) . '/config/' . $directory, $options);
+    $this->importDirectory(\Drupal::service('extension.list.module')->getPath($module) . '/config/' . $directory, $options);
   }
 
   /**
@@ -266,7 +268,7 @@ class Config {
    *   If the directory is not writeable or if the configuration does not exist.
    */
   public function reExportModule($module, $directory = 'install', array $options = []) {
-    $this->reExportDirectory(drupal_get_path('module', $module) . '/config/' . $directory, $options);
+    $this->reExportDirectory(\Drupal::service('extension.list.module')->getPath($module) . '/config/' . $directory, $options);
   }
 
   /**
@@ -275,7 +277,7 @@ class Config {
    * @param string $entity_type_id
    *   The configuration entity type ID.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @return ConfigEntityStorageInterface
    *   Returns the config based on entity type id.
    */
   protected function getStorage($entity_type_id) {
@@ -285,7 +287,7 @@ class Config {
   /**
    * Get the entity ID for a configuration object.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $entity_storage
+   * @param ConfigEntityStorageInterface $entity_storage
    *   The configuration entity storage.
    * @param string $config_name
    *   The configuration name.
diff --git a/src/Controller/ToolbarController.php b/src/Controller/ToolbarController.php
index b1f3bc3..91499c6 100644
--- a/src/Controller/ToolbarController.php
+++ b/src/Controller/ToolbarController.php
@@ -16,14 +16,14 @@ class ToolbarController extends ControllerBase {
   /**
    * A request stack symfony instance.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Constructs a ToolbarController object.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   A request stack symfony instance.
    */
   public function __construct(RequestStack $request_stack) {
@@ -55,7 +55,7 @@ class ToolbarController extends ControllerBase {
   /**
    * Flush the PHP caches.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Reloads the page.
    */
   public function flushPhp() {
@@ -80,7 +80,7 @@ class ToolbarController extends ControllerBase {
   /**
    * Flush the libraries (and CSS/JS) cache.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Reloads the page.
    */
   public function flushLibraries() {
@@ -96,7 +96,7 @@ class ToolbarController extends ControllerBase {
   /**
    * Flush the bootstrap cache.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Reloads the page.
    */
   public function flushBootstrap() {
diff --git a/src/EntityBrowserFormTrait.php b/src/EntityBrowserFormTrait.php
index 7e6e3be..0431030 100644
--- a/src/EntityBrowserFormTrait.php
+++ b/src/EntityBrowserFormTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\helper;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
@@ -75,7 +76,7 @@ trait EntityBrowserFormTrait {
    * @param string $id
    *   An ID.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   A loaded entity.
    */
   public static function loadEntityBrowserEntity($id) {
@@ -89,7 +90,7 @@ trait EntityBrowserFormTrait {
    * @param array|string $ids
    *   An array of IDs.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of loaded entities, keyed by an ID.
    */
   public static function loadEntityBrowserEntitiesByIds($ids) {
@@ -113,7 +114,7 @@ trait EntityBrowserFormTrait {
   /**
    * Gets the entity browser form value.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array|string $parents
    *   The parents of the containing form element.
diff --git a/src/EventSubscriber/ConfigCacheTagInvalidator.php b/src/EventSubscriber/ConfigCacheTagInvalidator.php
index 59f31c3..e08d537 100644
--- a/src/EventSubscriber/ConfigCacheTagInvalidator.php
+++ b/src/EventSubscriber/ConfigCacheTagInvalidator.php
@@ -25,7 +25,7 @@ class ConfigCacheTagInvalidator implements EventSubscriberInterface {
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
@@ -46,7 +46,7 @@ class ConfigCacheTagInvalidator implements EventSubscriberInterface {
   /**
    * Constructs a ConfigCacheTagInvalidator object.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
    * @param string $config_name
    *   The configuration object name.
@@ -62,7 +62,7 @@ class ConfigCacheTagInvalidator implements EventSubscriberInterface {
   /**
    * Invalidate the cache tags whenever the config is changed.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration event to process.
    */
   public function onChange(ConfigCrudEvent $event) {
diff --git a/src/Field.php b/src/Field.php
index fa7a66a..713f5d8 100644
--- a/src/Field.php
+++ b/src/Field.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\helper;
 
+use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 
 /**
@@ -12,7 +13,7 @@ class Field {
   /**
    * Finds duplicate field values.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field list class.
    * @param string $property
    *   The field item property to use. Defaults to mainPropertyName() on the
@@ -25,7 +26,7 @@ class Field {
     $values = [];
 
     foreach ($items as $delta => $item) {
-      /** @var \Drupal\Core\Field\FieldItemInterface $item */
+      /** @var FieldItemInterface $item */
       if (!isset($property)) {
         $property = $item::mainPropertyName();
       }
diff --git a/src/File.php b/src/File.php
index dd6a930..b7d79c8 100644
--- a/src/File.php
+++ b/src/File.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\helper;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\file\FileInterface;
 use Symfony\Component\HttpFoundation\File\Exception\AccessDeniedException;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 
 /**
  * Provides helpers for working with files.
@@ -15,26 +16,26 @@ class File {
   /**
    * The file storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $fileStorage;
 
   /**
    * The mime type guesser.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var MimeTypesInterface
    */
   protected $mimeTypeGuesser;
 
   /**
    * File constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $mime_type_guesser
+   * @param MimeTypesInterface $mime_type_guesser
    *   The mime type guesser.
    */
-  public function __construct(EntityTypeManagerInterface $entity_type_manager, MimeTypeGuesserInterface $mime_type_guesser) {
+  public function __construct(EntityTypeManagerInterface $entity_type_manager, MimeTypesInterface $mime_type_guesser) {
     $this->fileStorage = $entity_type_manager->getStorage('file');
     $this->mimeTypeGuesser = $mime_type_guesser;
   }
@@ -48,7 +49,7 @@ class File {
    *   If TRUE will try to reuse an existing file with the same URI.
    *   If FALSE will always create a new file.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   A file object.
    */
   public function createOrReuseFromUri($uri, $reuse_existing = TRUE) {
@@ -70,7 +71,7 @@ class File {
   /**
    * Filter callback; Permanent files or temporary files owned by current user.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file object.
    *
    * @return bool
@@ -94,7 +95,7 @@ class File {
    * @return string
    *   The image data URI for use in a src attribute.
    *
-   * @throws \Symfony\Component\HttpFoundation\File\Exception\AccessDeniedException
+   * @throws AccessDeniedException
    *   If the file cannot be read.
    */
   public function getDataUri($uri, $base_64_encode = TRUE, $mimetype = NULL) {
diff --git a/src/InstallProfile.php b/src/InstallProfile.php
index e9ab735..0705382 100644
--- a/src/InstallProfile.php
+++ b/src/InstallProfile.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\helper;
 
+use Drupal\Core\KeyValueStore\KeyValueStoreInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Extension\ExtensionList;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -19,41 +20,41 @@ class InstallProfile {
   /**
    * The profile extension list service.
    *
-   * @var \Drupal\Core\Extension\ExtensionList
+   * @var ExtensionList
    */
   protected $profileList;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The module schema key/value store.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreInterface
+   * @var KeyValueStoreInterface
    */
   protected $schemaKeyValue;
 
   /**
    * InstallProfileSwitcher constructor.
    *
-   * @param \Drupal\Core\Extension\ExtensionList $profileList
+   * @param ExtensionList $profileList
    *   The profile extension list service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $key_value_factory
+   * @param KeyValueFactoryInterface $key_value_factory
    *   The key/value storage factory.
    */
   public function __construct(ExtensionList $profileList, ConfigFactoryInterface $configFactory, ModuleHandlerInterface $module_handler, KeyValueFactoryInterface $key_value_factory) {
@@ -137,7 +138,7 @@ class InstallProfile {
    *
    * @throws \InvalidArgumentException
    *   If the profile does not exist.
-   * @throws \Drupal\Core\Installer\Exception\InstallerException
+   * @throws InstallerException
    *   If the profile failed any validations.
    */
   public function validateProfile($profile) {
@@ -168,7 +169,7 @@ class InstallProfile {
     // Ensure that the profile's .install file and classes are available, since
     // drupal_check_profile only does this for the install profile's
     // dependencies, but not the install profile itself.
-    $profile_path = drupal_get_path('profile', $profile);
+    $profile_path = \Drupal::service('extension.list.profile')->getPath($profile);
     $profile_install_file = DRUPAL_ROOT . '/' . $profile_path . "/$profile.install";
     \Drupal::service('class_loader')->addPsr4('Drupal\\' . $profile_path . '\\', \Drupal::root() . "/$profile_path/src");
     if (is_file($profile_install_file)) {
@@ -240,7 +241,7 @@ class InstallProfile {
    * @param string $type
    *   The extension type. Possible values are module or theme.
    *
-   * @throws \Drupal\Core\Installer\Exception\InstallerException
+   * @throws InstallerException
    *   If there are extensions that enabled in the currnet profile that do not
    *   also reside in the new profile.
    */
@@ -249,7 +250,7 @@ class InstallProfile {
     $current_profile_path = $this->profileList->getPath($current_profile);
     $new_profile_path = $this->profileList->getPath($profile);
 
-    /** @var \Drupal\Core\Extension\ExtensionList $extensionList */
+    /** @var ExtensionList $extensionList */
     $extensionList = \Drupal::service('extension.list.' . $type);
     $extensions = array_keys($extensionList->getAllInstalledInfo());
 
diff --git a/src/Menu.php b/src/Menu.php
index 29010b6..3cb0d55 100644
--- a/src/Menu.php
+++ b/src/Menu.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\helper;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Link;
@@ -19,23 +20,23 @@ class Menu {
   /**
    * The menu tree.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $menuTree;
 
   /**
    * The menu active trail interface.
    *
-   * @var \Drupal\Core\Menu\MenuActiveTrailInterface
+   * @var MenuActiveTrailInterface
    */
   protected $menuActiveTrail;
 
   /**
    * File constructor.
    *
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menu_tree
+   * @param MenuLinkTreeInterface $menu_tree
    *   The entity type manager.
-   * @param \Drupal\Core\Menu\MenuActiveTrailInterface $menu_active_trail
+   * @param MenuActiveTrailInterface $menu_active_trail
    *   The active trail service.
    */
   public function __construct(MenuLinkTreeInterface $menu_tree, MenuActiveTrailInterface $menu_active_trail) {
@@ -135,7 +136,7 @@ class Menu {
    *
    * @param string $menu_name
    *   The menu name (any value can be provided).
-   * @param \Drupal\Core\Link[] $links
+   * @param Link[] $links
    *   An array of links.
    *
    * @return array
@@ -154,7 +155,7 @@ class Menu {
   /**
    * Convert a link field to an array of menu links.
    *
-   * @param \Drupal\Core\Link[] $links
+   * @param Link[] $links
    *   The links to convert.
    *
    * @return array
@@ -174,7 +175,7 @@ class Menu {
   /**
    * Convert a link into a menu link.
    *
-   * @param \Drupal\Core\Link $link
+   * @param Link $link
    *   The link to convert.
    *
    * @return array
@@ -200,7 +201,7 @@ class Menu {
    *
    * @param string $menu_name
    *   The menu name (any value can be provided).
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   A link field item list.
    *
    * @return array
@@ -226,7 +227,7 @@ class Menu {
   /**
    * Convert a link field to an array of menu links.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The link field items to convert.
    *
    * @return array
@@ -246,10 +247,10 @@ class Menu {
   /**
    * Convert a link field item into a link.
    *
-   * @param \Drupal\link\Plugin\Field\FieldType\LinkItem $item
+   * @param LinkItem $item
    *   The link field item to convert.
    *
-   * @return \Drupal\Core\Link
+   * @return Link
    *   The link.
    */
   public function convertLinkItemToLink(LinkItem $item) {
diff --git a/src/Plugin/Mail/LoggerMail.php b/src/Plugin/Mail/LoggerMail.php
index 0017323..ee23485 100644
--- a/src/Plugin/Mail/LoggerMail.php
+++ b/src/Plugin/Mail/LoggerMail.php
@@ -30,7 +30,7 @@ class LoggerMail implements MailInterface, ContainerFactoryPluginInterface {
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -43,7 +43,7 @@ class LoggerMail implements MailInterface, ContainerFactoryPluginInterface {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LoggerInterface $logger) {
diff --git a/src/Plugin/Validation/Constraint/EntityFieldUniqueValuesValidator.php b/src/Plugin/Validation/Constraint/EntityFieldUniqueValuesValidator.php
index 9bf4d8d..260a266 100644
--- a/src/Plugin/Validation/Constraint/EntityFieldUniqueValuesValidator.php
+++ b/src/Plugin/Validation/Constraint/EntityFieldUniqueValuesValidator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\helper\Plugin\Validation\Constraint;
 
+use Drupal\Core\Entity\FieldableEntityInterface;
 use Symfony\Component\Validator\Constraint;
 
 /**
@@ -13,7 +14,7 @@ class EntityFieldUniqueValuesValidator extends FieldListUniqueValuesValidator {
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $value */
+    /** @var FieldableEntityInterface $value */
     parent::validate($value->get($constraint->field_name), $constraint);
   }
 
diff --git a/src/Plugin/Validation/Constraint/FieldListUniqueValuesValidator.php b/src/Plugin/Validation/Constraint/FieldListUniqueValuesValidator.php
index ff84628..893bbd1 100644
--- a/src/Plugin/Validation/Constraint/FieldListUniqueValuesValidator.php
+++ b/src/Plugin/Validation/Constraint/FieldListUniqueValuesValidator.php
@@ -16,8 +16,7 @@ class FieldListUniqueValuesValidator extends ConstraintValidator {
    */
   public function validate($value, Constraint $constraint) {
     /** @var \Drupal\Core\Field\FieldItemListInterface $value */
-    /** @var \Drupal\helper\Plugin\Validation\Constraint\FieldListUniqueValues $constraint */
-
+    /** @var FieldListUniqueValues $constraint */
     // If the field is empty or doesn't have more than one value, there is
     // nothing to validate.
     if (!isset($value) || count($value) <= 1) {
diff --git a/src/Response/JsonEncodeResponse.php b/src/Response/JsonEncodeResponse.php
index d45cf7a..57ca926 100644
--- a/src/Response/JsonEncodeResponse.php
+++ b/src/Response/JsonEncodeResponse.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\helper\Response;
 
+use function GuzzleHttp\json_encode;
 use GuzzleHttp\Psr7\Response;
 
 /**
@@ -29,7 +30,7 @@ class JsonEncodeResponse extends Response {
    *   code).
    */
   public function __construct($data, $status = 200, array $headers = [], $version = '1.1', $reason = NULL) {
-    $body = \GuzzleHttp\json_encode($data);
+    $body = json_encode($data);
     $headers += [
       'Content-Type' => 'application/json',
     ];
diff --git a/src/Tests/AssertFileUsageTrait.php b/src/Tests/AssertFileUsageTrait.php
index 8b80c9e..25f7fd0 100644
--- a/src/Tests/AssertFileUsageTrait.php
+++ b/src/Tests/AssertFileUsageTrait.php
@@ -17,7 +17,7 @@ trait AssertFileUsageTrait {
    *   The file ID to check for usage.
    * @param string $module
    *   The module to check for usage.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The attached entity to check for usage.
    */
   protected function assertFileUsage($expectedUsage, $fid, $module, EntityInterface $entity) {
diff --git a/src/Tests/AssertQueueTrait.php b/src/Tests/AssertQueueTrait.php
index 063f18d..be2775a 100644
--- a/src/Tests/AssertQueueTrait.php
+++ b/src/Tests/AssertQueueTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\helper\Tests;
 
+use Drupal\Core\Queue\QueueWorkerInterface;
 use Drupal\Core\Queue\RequeueException;
 use Drupal\Core\Queue\SuspendQueueException;
 
@@ -67,7 +68,7 @@ trait AssertQueueTrait {
       $this->assertQueueSize($queue_name, $assert_count_before);
     }
 
-    /** @var \Drupal\Core\Queue\QueueWorkerInterface $queue_worker */
+    /** @var QueueWorkerInterface $queue_worker */
     $queue_worker = \Drupal::service('plugin.manager.queue_worker')->createInstance($queue_name);
     $end = time() + $time_limit;
     $lease_time = 1;
diff --git a/src/Twig/HelperExtension.php b/src/Twig/HelperExtension.php
index 356264a..c8ba35e 100644
--- a/src/Twig/HelperExtension.php
+++ b/src/Twig/HelperExtension.php
@@ -12,14 +12,14 @@ class HelperExtension extends \Twig_Extension {
   /**
    * The file helper service.
    *
-   * @var \Drupal\helper\File
+   * @var File
    */
   protected $fileHelper;
 
   /**
    * Constructs \Drupal\helper\Twig\HelperExtension.
    *
-   * @param \Drupal\helper\File $file_helper
+   * @param File $file_helper
    *   The file helper.
    */
   public function __construct(File $file_helper) {
diff --git a/tests/src/Kernel/InstallProfileTest.php b/tests/src/Kernel/InstallProfileTest.php
index 7f8ad3a..53f4803 100644
--- a/tests/src/Kernel/InstallProfileTest.php
+++ b/tests/src/Kernel/InstallProfileTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\helper\Kernel;
 
+use Drupal\helper\InstallProfile;
 use Drupal\Core\Installer\Exception\InstallerException;
 use Drupal\KernelTests\KernelTestBase;
 
@@ -25,14 +26,14 @@ class InstallProfileTest extends KernelTestBase {
   /**
    * The install profile helper.
    *
-   * @var \Drupal\helper\InstallProfile
+   * @var InstallProfile
    */
   protected $installProfile;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installProfile = $this->container->get('helper.install_profile');
     $this->setInstallProfile('testing');
