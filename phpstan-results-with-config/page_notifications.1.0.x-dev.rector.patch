diff --git a/page_notifications.module b/page_notifications.module
index 42f22f0..dc7fd51 100644
--- a/page_notifications.module
+++ b/page_notifications.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\node\NodeInterface;
+use Drupal\Core\Mail\Plugin\Mail\PhpMail;
 use Drupal\Core\Mail\MailManagerInterface;
 use Drupal\Component\Utility\SafeMarkup;
 use Drupal\Component\Utility\Html;
@@ -26,7 +28,7 @@ function page_notify_block_page_attachments(array &$attachments) {
   $attachments['#attached']['library'][] = 'page_notify_block/page_notify_block';
 }
 
-function page_notify_block_node_presave(Drupal\node\NodeInterface $node) {
+function page_notify_block_node_presave(NodeInterface $node) {
   $moduleHandler = \Drupal::service('module_handler');
   if ($moduleHandler->moduleExists('page_notify_block')) {
     $template_info = \Drupal::service('load.databaseinnfo.service')->get_notify_email_template();
@@ -99,7 +101,7 @@ function page_notify_block_node_presave(Drupal\node\NodeInterface $node) {
             $tokanized_body = \Drupal::service('load.databaseinnfo.service')->page_notify_block_process_tokens($template_info['notify_general_email_template'], $body_replacements);
             strval($tokanized_subject);
 
-            $send_mail = new \Drupal\Core\Mail\Plugin\Mail\PhpMail();
+            $send_mail = new PhpMail();
             $message['headers'] = array(
               'content-type' => 'text/html',
               'MIME-Version' => '1.0',
@@ -119,7 +121,7 @@ function page_notify_block_node_presave(Drupal\node\NodeInterface $node) {
         if ($template_info['notify_node_timestamp'] && !is_null($template_info['notify_node_timestamp'])) {
           $notify_node_timestamp = $template_info['notify_node_timestamp'];
           if($node->hasField($notify_node_timestamp)){
-            $node->set($notify_node_timestamp, REQUEST_TIME);
+            $node->set($notify_node_timestamp, \Drupal::time()->getRequestTime());
           }
         }
         $node->set($checkbox_field, 0);
diff --git a/src/Controller/SubscriberPage.php b/src/Controller/SubscriberPage.php
index ad2a11d..440758e 100644
--- a/src/Controller/SubscriberPage.php
+++ b/src/Controller/SubscriberPage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\page_notify_block\Controller;
 
+use Drupal\node\Entity\Node;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 use Drupal\examples\Utility\DescriptionTemplateTrait;
@@ -53,7 +54,7 @@ class SubscriberPage extends ControllerBase {
       $rows = array();
       foreach($result as $row) {
         if ($row->nid) {
-          $subscriptions_record = \Drupal\node\Entity\Node::load($row->nid);
+          $subscriptions_record = Node::load($row->nid);
           if ($subscriptions_record && $subscriptions_record->isPublished() == true) {
             $field_token_notify_user_id = $subscriptions_record->get("field_token_notify_user_id")->getValue();
             if ($field_token_notify_user_id && $field_token_notify_user_id[0]['value'] == $user_token) {
@@ -63,8 +64,8 @@ class SubscriberPage extends ControllerBase {
               $rows[] = array('data' => array(
                 'title' => new FormattableMarkup('<a href="@page_url">@page_title</a>',
                   [
-                  '@page_title' => \Drupal\node\Entity\Node::load($field_node_id_notify[0]["value"])->getTitle(),
-                  '@page_url' => \Drupal\node\Entity\Node::load($field_node_id_notify[0]["value"])->toUrl()->toString(),
+                  '@page_title' => Node::load($field_node_id_notify[0]["value"])->getTitle(),
+                  '@page_url' => Node::load($field_node_id_notify[0]["value"])->toUrl()->toString(),
                   ]),
                 'cancel_one' => new FormattableMarkup('<a id="notify-cancel-@token" href="/nojs/cancel_subscription/@token" class="use-ajax btn btn-default notify-cancel-subscription">@name</a>',
                     ['@name' => 'Stop Watching', '@token' => $field_token_notify[0]['value']]
@@ -148,7 +149,7 @@ function getAllRecords($email) {
     ->condition('field_email_notify', $email, '=');
   $records = $query->execute();
   foreach ($records as $key => $record) {
-    $node = \Drupal\node\Entity\Node::load($record);
+    $node = Node::load($record);
     $nodes[] = $node;
   }
   if ($nodes) {
diff --git a/src/Form/AccessVerificationStep.php b/src/Form/AccessVerificationStep.php
index 67c5fd9..a2927cd 100644
--- a/src/Form/AccessVerificationStep.php
+++ b/src/Form/AccessVerificationStep.php
@@ -30,21 +30,21 @@ class AccessVerificationStep extends FormBase {
   /**
    * The mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;
 
   /**
    * The email validator.
    *
-   * @var \Drupal\Component\Utility\EmailValidator
+   * @var EmailValidator
    */
   protected $emailValidator;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -58,11 +58,11 @@ class AccessVerificationStep extends FormBase {
   /**
    * Constructs a new EmailUnsubscribePage.
    *
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Component\Utility\EmailValidator $email_validator
+   * @param EmailValidator $email_validator
    *   The email validator.
    */
   public function __construct(MailManagerInterface $mail_manager, LanguageManagerInterface $language_manager, EmailValidator $email_validator) {
@@ -166,13 +166,12 @@ class AccessVerificationStep extends FormBase {
   /**
    * {@inheritdoc}
    */
-
   /**
    * Implements ajax submit callback.
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -190,7 +189,7 @@ class AccessVerificationStep extends FormBase {
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Current state of the form.
    */
   public function rebuildFormSubmit(array &$form, FormStateInterface $form_state) {
diff --git a/src/Form/EmailConfirmationPage.php b/src/Form/EmailConfirmationPage.php
index 691a21a..a2c441b 100644
--- a/src/Form/EmailConfirmationPage.php
+++ b/src/Form/EmailConfirmationPage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\page_notify_block\Form;
 
+use Drupal\Core\Mail\Plugin\Mail\PhpMail;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Mail\MailManagerInterface;
@@ -23,32 +24,32 @@ class EmailConfirmationPage extends FormBase {
   /**
    * The mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;
 
   /**
    * The email validator.
    *
-   * @var \Drupal\Component\Utility\EmailValidator
+   * @var EmailValidator
    */
   protected $emailValidator;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a new EmailUnsubscribePage.
    *
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Component\Utility\EmailValidator $email_validator
+   * @param EmailValidator $email_validator
    *   The email validator.
    */
   public function __construct(MailManagerInterface $mail_manager, LanguageManagerInterface $language_manager, EmailValidator $email_validator) {
@@ -99,7 +100,7 @@ class EmailConfirmationPage extends FormBase {
         return $form;
       }
       else {
-        $node = \Drupal\node\Entity\Node::load($node_id);
+        $node = Node::load($node_id);
         $node_title = $node->getTitle();
         $subscribed_node_url = $node->toUrl()->setAbsolute()->toString();
 
@@ -123,7 +124,7 @@ class EmailConfirmationPage extends FormBase {
         $new_submition->save();
 
         // Seand email confirmation
-        $send_confirmation_mail = new \Drupal\Core\Mail\Plugin\Mail\PhpMail();
+        $send_confirmation_mail = new PhpMail();
         //TODO make this check on node or path
         $all_subscriptions_url = $host . '/page-notify/verify-list/'.$node_id.'-'.$subscription_token_raw;
         $unsubscribe_link = $host . "/page-notify/unsubscribe/".$subscription_token;
diff --git a/src/Form/EmailUnsubscribePage.php b/src/Form/EmailUnsubscribePage.php
index 9e0b47e..47ca0ca 100644
--- a/src/Form/EmailUnsubscribePage.php
+++ b/src/Form/EmailUnsubscribePage.php
@@ -24,32 +24,32 @@ class EmailUnsubscribePage extends FormBase {
   /**
    * The mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;
 
   /**
    * The email validator.
    *
-   * @var \Drupal\Component\Utility\EmailValidator
+   * @var EmailValidator
    */
   protected $emailValidator;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a new EmailUnsubscribePage.
    *
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Component\Utility\EmailValidator $email_validator
+   * @param EmailValidator $email_validator
    *   The email validator.
    */
   public function __construct(MailManagerInterface $mail_manager, LanguageManagerInterface $language_manager, EmailValidator $email_validator) {
@@ -87,7 +87,7 @@ class EmailUnsubscribePage extends FormBase {
     $host = \Drupal::request()->getSchemeAndHttpHost();
     if ($subscription_token && !is_null($subscription_token)) {
       $part_subscription_token = explode("-", $subscription_token);
-      $node = \Drupal\node\Entity\Node::load($part_subscription_token[0]);
+      $node = Node::load($part_subscription_token[0]);
       if ($node) {
         $node_title = $node->getTitle();
         $subscriptions_url = $host . '/page-notify/verify-list/'.$subscription_token;
@@ -180,7 +180,7 @@ class EmailUnsubscribePage extends FormBase {
     else {
       $inrecords = checkIfRecordExistUnsubscribe($email_unsubscribe, $subscription_token);
       if ($inrecords && !is_null($inrecords)) {
-        $node = \Drupal\node\Entity\Node::load($node_id_unsubscribe);
+        $node = Node::load($node_id_unsubscribe);
         $node_title = $node->getTitle();
         $result = \Drupal::entityQuery("node")
           ->condition("type", "subscriptions")
@@ -193,7 +193,7 @@ class EmailUnsubscribePage extends FormBase {
         \Drupal::messenger()->addStatus(t('You have successfully unsubscribed from @title.', ['@title' => $node_title,]));
       }
     }
-    $url = \Drupal\Core\Url::fromRoute('<front>')->toString();
+    $url = Url::fromRoute('<front>')->toString();
     $response = new RedirectResponse($url);
     $response->send();
   }
diff --git a/src/Form/PageNotificationsBlockForm.php b/src/Form/PageNotificationsBlockForm.php
index d105b92..8f287ce 100644
--- a/src/Form/PageNotificationsBlockForm.php
+++ b/src/Form/PageNotificationsBlockForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\page_notify_block\Form;
 
+use Drupal\node\NodeInterface;
+use Drupal\Core\Mail\Plugin\Mail\PhpMail;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -27,32 +29,32 @@ class PageNotifyBlockForm extends FormBase {
   /**
    * The mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;
 
   /**
    * The email validator.
    *
-   * @var \Drupal\Component\Utility\EmailValidator
+   * @var EmailValidator
    */
   protected $emailValidator;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a new EmailExampleGetFormPage.
    *
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Component\Utility\EmailValidator $email_validator
+   * @param EmailValidator $email_validator
    *   The email validator.
    */
   public function __construct(MailManagerInterface $mail_manager, LanguageManagerInterface $language_manager, EmailValidator $email_validator) {
@@ -102,8 +104,8 @@ class PageNotifyBlockForm extends FormBase {
     $route_match = \Drupal::routeMatch();
     if ($route_match->getRouteName() == 'entity.node.canonical') {
       $node = \Drupal::routeMatch()->getParameter('node');
-        if ($node instanceof \Drupal\node\NodeInterface) {
-          $node = \Drupal\node\Entity\Node::load($node->id());
+        if ($node instanceof NodeInterface) {
+          $node = Node::load($node->id());
           $node_title = $node->getTitle();
           $node_node_url = $node->toUrl()->setAbsolute()->toString();
 
@@ -201,7 +203,7 @@ class PageNotifyBlockForm extends FormBase {
       $record_exist = \Drupal::service('load.databaseinnfo.service')->checkIfRecordExistNode($email_notify, $node_id);
       if ($record_exist) {
         $unsubscribe_link = $host . "/page-notify/unsubscribe/".$record_exist['field_node_id_notify'].'-'. $record_exist['field_token_notify'];
-        $node = \Drupal\node\Entity\Node::load($node_id);
+        $node = Node::load($node_id);
         $node_title = $node->getTitle();
         $subscribed_node_url = $node->toUrl()->setAbsolute()->toString();
 
@@ -245,7 +247,7 @@ class PageNotifyBlockForm extends FormBase {
         // Create tokens
         $subscription_token = page_notify_block_generateRandomString();
 
-        $node = \Drupal\node\Entity\Node::load($node_id);
+        $node = Node::load($node_id);
         $node_title = $node->getTitle();
         $subscribed_node_url = $node->toUrl()->setAbsolute()->toString();
         $confrm_url = $host."/page-notify/confirmation/".$form_state->getValue('email_notify')."/".$form_state->getValue('current_node')."-".$subscription_token;
@@ -283,7 +285,7 @@ class PageNotifyBlockForm extends FormBase {
           '#format' => 'full_html',
         ];
 
-        $send_conf_mail = new \Drupal\Core\Mail\Plugin\Mail\PhpMail();
+        $send_conf_mail = new PhpMail();
         $message['headers'] = array(
           'content-type' => 'text/html',
           'MIME-Version' => '1.0',
diff --git a/src/LoadDataBaseInfo.php b/src/LoadDataBaseInfo.php
index 7e9cb09..c2fb3aa 100644
--- a/src/LoadDataBaseInfo.php
+++ b/src/LoadDataBaseInfo.php
@@ -1,7 +1,9 @@
 <?php
 
-namespace Drupal\page_notify_block;
-
+namespace Drupal\page_notify_block;
+
+use Drupal\node\Entity\Node;
+use Drupal\node\NodeInterface;
 class LoadDataBaseInfo {
 
   public function get_notify_email_template() {
@@ -178,7 +180,7 @@ class LoadDataBaseInfo {
     if ($records && !is_null($records)) {
       $user_records = [];
       foreach ($records as $record) {
-        $node_record = \Drupal\node\Entity\Node::load($record);
+        $node_record = Node::load($record);
         if ($node_record && $node_record->isPublished() == true) {
           $field_token_notify_user_id = $node_record->get("field_token_notify_user_id")->getValue();
           $field_email_notify = $node_record->get("field_email_notify")->getValue();
@@ -202,7 +204,7 @@ class LoadDataBaseInfo {
 
   public function getCurrentPageInfo() {
     $node = \Drupal::routeMatch()->getParameter('node');
-    if ($node instanceof \Drupal\node\NodeInterface) {
+    if ($node instanceof NodeInterface) {
       $nid = $node->id();
       $pageinfo = [
         'current_node' => $nid,
diff --git a/src/Plugin/Block/PageNotificationsBlock.php b/src/Plugin/Block/PageNotificationsBlock.php
index 948f462..f15e101 100644
--- a/src/Plugin/Block/PageNotificationsBlock.php
+++ b/src/Plugin/Block/PageNotificationsBlock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\page_notify_block\Plugin\Block;
 
+use Drupal\node\NodeInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -256,7 +257,7 @@ class PageNotifyBlock extends BlockBase implements ContainerFactoryPluginInterfa
           'notify_checkbox_field' => $form_state->getValue('notify_checkbox_field'),
           'notify_notes_field' => $form_state->getValue('notify_notes_field'),
           'notify_node_timestamp' => $form_state->getValue('notify_node_timestamp'),
-          'created' => REQUEST_TIME,
+          'created' => \Drupal::time()->getRequestTime(),
           'notify_verification_email_subject' => $form_state->getValue('notify_verification_email_subject'),
           'notify_verification_email_text' => $notify_verification_email_text['value'],
           'notify_confirmation_email_subject' => $form_state->getValue('notify_confirmation_email_subject'),
@@ -278,7 +279,7 @@ class PageNotifyBlock extends BlockBase implements ContainerFactoryPluginInterfa
           'notify_checkbox_field' => $form_state->getValue('notify_checkbox_field'),
           'notify_notes_field' => $form_state->getValue('notify_notes_field'),
           'notify_node_timestamp' => $form_state->getValue('notify_node_timestamp'),
-          'created' => REQUEST_TIME,
+          'created' => \Drupal::time()->getRequestTime(),
           'notify_verification_email_subject' => $form_state->getValue('notify_verification_email_subject'),
           'notify_verification_email_text' => $notify_verification_email_text['value'],
           'notify_confirmation_email_subject' => $form_state->getValue('notify_confirmation_email_subject'),
@@ -298,7 +299,7 @@ class PageNotifyBlock extends BlockBase implements ContainerFactoryPluginInterfa
   /**
    * Form builder service.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
@@ -330,7 +331,7 @@ class PageNotifyBlock extends BlockBase implements ContainerFactoryPluginInterfa
     $route_match = \Drupal::routeMatch();
     if ($route_match->getRouteName() == 'entity.node.canonical') {
       $node = \Drupal::routeMatch()->getParameter('node');
-        if ($node instanceof \Drupal\node\NodeInterface) {
+        if ($node instanceof NodeInterface) {
           $output['form'] = $this->formBuilder->getForm(PageNotifyBlockForm::class);
         }
         else {
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index 0f04737..5becff1 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\page_notify_block\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -22,14 +23,14 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
