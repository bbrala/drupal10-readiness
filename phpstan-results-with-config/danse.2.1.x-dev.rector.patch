diff --git a/danse.module b/danse.module
index 8789de2..19ca0b3 100644
--- a/danse.module
+++ b/danse.module
@@ -1,9 +1,10 @@
 <?php
 
+use Drupal\danse\Service;
 use Drupal\Core\Form\FormStateInterface;
 
 /**
- * @return \Drupal\danse\Service
+ * @return Service
  */
 function _danse_service() {
   return Drupal::service('danse.service');
@@ -21,7 +22,7 @@ function danse_cron() {
  * Implements hook_form_alter().
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function danse_form_alter(array &$form, FormStateInterface $form_state) {
   _danse_service()->buildForm($form, $form_state);
@@ -31,7 +32,7 @@ function danse_form_alter(array &$form, FormStateInterface $form_state) {
  * Implements hook_form_FORM_ID_alter().
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function danse_form_user_form_alter(array &$form, FormStateInterface $form_state) {
   if (!Drupal::configFactory()->get('danse.settings')->get('subscriptions_as_tab')) {
diff --git a/modules/config/src/ConfigSubscriber.php b/modules/config/src/ConfigSubscriber.php
index db74725..e64c49e 100644
--- a/modules/config/src/ConfigSubscriber.php
+++ b/modules/config/src/ConfigSubscriber.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\danse_config;
 
+use Drupal\danse_config\Plugin\Danse\Config;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\language\Config\LanguageConfigOverride;
 use Drupal\Core\Config\ConfigCrudEvent;
 use Drupal\Core\Config\ConfigEvents;
 use Drupal\Core\Config\ConfigImporterEvent;
@@ -16,7 +19,7 @@ use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 class ConfigSubscriber implements EventSubscriberInterface {
 
   /**
-   * @var \Drupal\danse_config\Plugin\Danse\Config
+   * @var Config
    */
   protected $plugin;
 
@@ -28,9 +31,9 @@ class ConfigSubscriber implements EventSubscriberInterface {
   /**
    * Constructs a new Settings object.
    *
-   * @param \Drupal\danse\PluginManager $plugin_manager
+   * @param PluginManager $plugin_manager
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function __construct(PluginManager $plugin_manager) {
     $this->plugin = $plugin_manager->createInstance('config');
@@ -50,7 +53,7 @@ class ConfigSubscriber implements EventSubscriberInterface {
   /**
    * Saves changed config to a configurable directory.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   Public function onConfigSave event.
    */
   public function onConfigSave(ConfigCrudEvent $event): void {
@@ -64,13 +67,13 @@ class ConfigSubscriber implements EventSubscriberInterface {
   /**
    * Saves changed config translation to a configurable directory.
    *
-   * @param \Drupal\language\Config\LanguageConfigOverrideCrudEvent $event
+   * @param LanguageConfigOverrideCrudEvent $event
    *   Public function onConfigTranslationSave event.
    */
   public function onConfigTranslationSave(LanguageConfigOverrideCrudEvent $event): void {
     if ($this->active && $this->enabled()) {
       // TODO: Move this to the plugin.
-      /** @var \Drupal\language\Config\LanguageConfigOverride $object */
+      /** @var LanguageConfigOverride $object */
       $object = $event->getLanguageConfigOverride();
       #$this->plugin->createEvent('language', 'Config translation changed', new ConfigPayload($object));
 
@@ -80,7 +83,7 @@ class ConfigSubscriber implements EventSubscriberInterface {
   /**
    * Turn off this subscriber on importing configuration.
    *
-   * @param \Drupal\Core\Config\ConfigImporterEvent $event
+   * @param ConfigImporterEvent $event
    *   Public function onConfigImportValidate event.
    */
   public function onConfigImportValidate(ConfigImporterEvent $event): void {
diff --git a/modules/config/src/Payload.php b/modules/config/src/Payload.php
index e9c7fe1..8cbd7ab 100644
--- a/modules/config/src/Payload.php
+++ b/modules/config/src/Payload.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\danse_config;
 
+use Drupal\node\NodeInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\node\Entity\Node;
 use Drupal\danse\Entity\EventInterface;
@@ -65,7 +66,7 @@ final class Payload extends PayloadBase {
    * {@inheritdoc}
    */
   public function getEntity(): ContentEntityInterface {
-    /** @var \Drupal\node\NodeInterface $entity */
+    /** @var NodeInterface $entity */
     $entity = Node::create([
       'title' => 'not yet implemented',
     ]);
diff --git a/modules/content/danse_content.module b/modules/content/danse_content.module
index 033d20b..0ea0b96 100644
--- a/modules/content/danse_content.module
+++ b/modules/content/danse_content.module
@@ -9,8 +9,8 @@ use Drupal\danse_content\Payload;
  * Implements hook_entity_view().
  *
  * @param array $build
- * @param \Drupal\Core\Entity\EntityInterface $entity
- * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+ * @param EntityInterface $entity
+ * @param EntityViewDisplayInterface $display
  * @param string $view_mode
  */
 function danse_content_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
diff --git a/modules/content/src/Payload.php b/modules/content/src/Payload.php
index ae6e6d9..5a1c87f 100644
--- a/modules/content/src/Payload.php
+++ b/modules/content/src/Payload.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\danse_content;
 
+use Drupal\user\UserInterface;
 use Drupal;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
@@ -20,14 +21,14 @@ use Drupal\user\Entity\User;
 final class Payload extends PayloadBase {
 
   /**
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;
 
   /**
    * Content constructor.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    */
   public function __construct(ContentEntityInterface $entity) {
     $this->entity = $entity;
@@ -112,7 +113,7 @@ final class Payload extends PayloadBase {
    * {@inheritdoc}
    */
   public function hasAccess($uid): bool {
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = User::load($uid);
     return $this->getEntity()->access('view', $user);
   }
diff --git a/modules/content/src/Plugin/Danse/Content.php b/modules/content/src/Plugin/Danse/Content.php
index 857973a..e6453d9 100644
--- a/modules/content/src/Plugin/Danse/Content.php
+++ b/modules/content/src/Plugin/Danse/Content.php
@@ -99,7 +99,7 @@ class Content extends PluginBase {
     if (!empty($info['callback_object']) && $info['callback_object'] instanceof ContentEntityFormInterface) {
       /** @var ContentEntityFormInterface $callback */
       $callback = $info['callback_object'];
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $entity = $callback->getEntity();
       if ($callback instanceof ContentEntityDeleteForm) {
         $topics = [self::TOPIC_DELETE, self::TOPIC_UNPUBLISH];
@@ -132,7 +132,7 @@ class Content extends PluginBase {
    * {@inheritdoc}
    */
   public function getRedirectUrl(EventInterface $event): Url {
-    /** @var \Drupal\danse_content\Payload $payload */
+    /** @var Payload $payload */
     $payload = $event->getPayload();
     try {
       return $payload->getEntity()->toUrl();
@@ -142,7 +142,7 @@ class Content extends PluginBase {
   }
 
   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *
    * @return bool
    */
@@ -177,8 +177,8 @@ class Content extends PluginBase {
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   * @param \Drupal\Core\Entity\ContentEntityTypeInterface $definition
+   * @param FormStateInterface $form_state
+   * @param ContentEntityTypeInterface $definition
    *
    * @return array
    */
@@ -251,7 +251,7 @@ class Content extends PluginBase {
    * Submit callback.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitContentTypeSettingsForm(array &$form, FormStateInterface $form_state): void {
     $config_id = $form_state->getValue(['danse_config_id']);
@@ -290,13 +290,13 @@ class Content extends PluginBase {
    * Submit callback.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitContentForm(array &$form, FormStateInterface $form_state): void {
     $info = $form_state->getBuildInfo();
     /** @var ContentEntityFormInterface $callback */
     $callback = $info['callback_object'];
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $callback->getEntity();
     $topic = $form_state->getValue('danse_topic');
     $orgStatus = (bool) $form_state->getValue('danse_was_published');
@@ -334,7 +334,7 @@ class Content extends PluginBase {
   }
 
   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    * @param bool $push
    * @param bool $force
    * @param bool $silent
@@ -354,7 +354,7 @@ class Content extends PluginBase {
   }
 
   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    * @param bool $push
    * @param bool $force
    * @param bool $silent
@@ -378,7 +378,7 @@ class Content extends PluginBase {
   }
 
   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    * @param bool $push
    * @param bool $force
    * @param bool $silent
@@ -398,7 +398,7 @@ class Content extends PluginBase {
   }
 
   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    * @param bool $push
    * @param bool $force
    * @param bool $silent
@@ -408,7 +408,7 @@ class Content extends PluginBase {
   }
 
   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    * @param bool $push
    * @param bool $force
    * @param bool $silent
diff --git a/modules/content/src/Plugin/Danse/ContentSettingsTrait.php b/modules/content/src/Plugin/Danse/ContentSettingsTrait.php
index c897fb4..79878f0 100644
--- a/modules/content/src/Plugin/Danse/ContentSettingsTrait.php
+++ b/modules/content/src/Plugin/Danse/ContentSettingsTrait.php
@@ -3,6 +3,7 @@
 
 namespace Drupal\danse_content\Plugin\Danse;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 
 trait ContentSettingsTrait {
@@ -42,7 +43,7 @@ trait ContentSettingsTrait {
 
   /**
    * @param array $roles
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    * @param string $topic
    * @param bool $forEdit
    *
diff --git a/modules/form/danse_form.module b/modules/form/danse_form.module
index 7daf9de..3a1f1e9 100644
--- a/modules/form/danse_form.module
+++ b/modules/form/danse_form.module
@@ -5,11 +5,11 @@ use Drupal\Core\Form\FormStateInterface;
 use Drupal\danse_form\Plugin\Danse\Form;
 
 /**
- * @return \Drupal\danse_form\Plugin\Danse\Form;
+ * @return Form ;
  */
 function _danse_form_plugin() {
   try {
-    /** @var \Drupal\danse_form\Plugin\Danse\Form $plugin */
+    /** @var Form $plugin */
     return Drupal::service('danse.plugin.manager')->createInstance('form');
   }
   catch (PluginException $e) {
diff --git a/modules/form/src/Payload.php b/modules/form/src/Payload.php
index 8883856..ac19081 100644
--- a/modules/form/src/Payload.php
+++ b/modules/form/src/Payload.php
@@ -22,7 +22,7 @@ final class Payload extends PayloadBase {
   protected $form;
 
   /**
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $form_state;
 
@@ -30,7 +30,7 @@ final class Payload extends PayloadBase {
    * Content constructor.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function __construct(array $form, FormStateInterface $form_state) {
     $this->form = $form;
diff --git a/modules/log/src/Event/LogEvent.php b/modules/log/src/Event/LogEvent.php
index c868be6..f63ee14 100644
--- a/modules/log/src/Event/LogEvent.php
+++ b/modules/log/src/Event/LogEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\danse_log\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\danse_log\Payload;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Class LogEvent
@@ -18,14 +18,14 @@ class LogEvent extends Event {
   protected $status = FALSE;
 
   /**
-   * @var \Drupal\danse_log\Payload
+   * @var Payload
    */
   protected $payload;
 
   /**
    * LogEvent constructor.
    *
-   * @param \Drupal\danse_log\Payload $payload
+   * @param Payload $payload
    */
   public function __construct(Payload $payload) {
     $this->payload = $payload;
@@ -55,7 +55,7 @@ class LogEvent extends Event {
   }
 
   /**
-   * @return \Drupal\danse_log\Payload
+   * @return Payload
    */
   public function getPayload(): Payload {
     return $this->payload;
diff --git a/modules/log/src/EventSubscriber/DefaultLog.php b/modules/log/src/EventSubscriber/DefaultLog.php
index 459291c..10bbeb0 100644
--- a/modules/log/src/EventSubscriber/DefaultLog.php
+++ b/modules/log/src/EventSubscriber/DefaultLog.php
@@ -15,7 +15,7 @@ class DefaultLog implements EventSubscriberInterface {
   /**
    * New log item event handler.
    *
-   * @param \Drupal\danse_log\Event\LogEvent $event
+   * @param LogEvent $event
    */
   public function onNewLog(LogEvent $event): void {
     if ($event->getPayload()->getLevel() <= RfcLogLevel::ERROR) {
diff --git a/modules/log/src/Logger.php b/modules/log/src/Logger.php
index 22bd148..908ed6a 100644
--- a/modules/log/src/Logger.php
+++ b/modules/log/src/Logger.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\danse_log;
 
+use Drupal\danse_log\Plugin\Danse\Log;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Logger\LoggerChannel;
 use Drupal\Core\Logger\LogMessageParserInterface;
@@ -20,24 +21,24 @@ class Logger extends LoggerChannel {
   /**
    * The message's placeholders parser.
    *
-   * @var \Drupal\Core\Logger\LogMessageParserInterface
+   * @var LogMessageParserInterface
    */
   protected $parser;
 
   /**
-   * @var \Drupal\danse\PluginManager
+   * @var PluginManager
    */
   protected $pluginManager;
 
   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
-   * @param \Drupal\Core\Logger\LogMessageParserInterface $parser
-   * @param \Drupal\danse\PluginManager $plugin_manager
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param LogMessageParserInterface $parser
+   * @param PluginManager $plugin_manager
+   * @param EventDispatcherInterface $event_dispatcher
    */
   public function __construct(LogMessageParserInterface $parser, PluginManager $plugin_manager, EventDispatcherInterface $event_dispatcher) {
     parent::__construct('danse');
@@ -51,7 +52,7 @@ class Logger extends LoggerChannel {
    */
   public function log($level, $message, array $context = []): void {
     try {
-      /** @var \Drupal\danse_log\Plugin\Danse\Log $plugin */
+      /** @var Log $plugin */
       $plugin = $this->pluginManager->createInstance('log');
     }
     catch (PluginException $e) {
@@ -66,7 +67,7 @@ class Logger extends LoggerChannel {
     $payload = new Payload($level, $message, $context);
 
     $event = new LogEvent($payload);
-    $this->eventDispatcher->dispatch(LogEvents::LOG, $event);
+    $this->eventDispatcher->dispatch($event, LogEvents::LOG);
     if ($event->isRelevant()) {
       try {
         $plugin->createLogEvent($context['channel'], $message, $payload);
diff --git a/modules/log/src/Plugin/Danse/Log.php b/modules/log/src/Plugin/Danse/Log.php
index 8d83a30..88bad39 100644
--- a/modules/log/src/Plugin/Danse/Log.php
+++ b/modules/log/src/Plugin/Danse/Log.php
@@ -52,9 +52,9 @@ class Log extends PluginBase {
   /**
    * @param string $topic
    * @param string $message
-   * @param \Drupal\danse_log\Payload $payload
+   * @param Payload $payload
    *
-   * @return \Drupal\danse\Entity\EventInterface
+   * @return EventInterface
    */
   public function createLogEvent($topic, $message, Payload $payload): EventInterface {
     return $this->createEvent(mb_substr($topic, 0, 32), $message, $payload, TRUE, TRUE, FALSE);
diff --git a/modules/user/danse_user.module b/modules/user/danse_user.module
index a9513b7..ac9912e 100644
--- a/modules/user/danse_user.module
+++ b/modules/user/danse_user.module
@@ -7,11 +7,11 @@ use Drupal\danse_user\Plugin\Danse\User;
 use Drupal\user\UserInterface;
 
 /**
- * @return \Drupal\danse_user\Plugin\Danse\User;
+ * @return User ;
  */
 function _danse_user_plugin() {
   try {
-    /** @var \Drupal\danse_user\Plugin\Danse\User $plugin */
+    /** @var User $plugin */
     return Drupal::service('danse.plugin.manager')->createInstance('user');
   }
   catch (PluginException $e) {
diff --git a/modules/user/src/Payload.php b/modules/user/src/Payload.php
index a68b9d3..df04572 100644
--- a/modules/user/src/Payload.php
+++ b/modules/user/src/Payload.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\danse_user;
 
+use Drupal\user\UserInterface;
 use Drupal;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -19,14 +20,14 @@ use Drupal\user\Entity\User;
 final class Payload extends PayloadBase {
 
   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * Content constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    */
   public function __construct(AccountInterface $account) {
     $this->account = $account;
@@ -66,7 +67,7 @@ final class Payload extends PayloadBase {
    * {@inheritdoc}
    */
   public static function createFromArray(array $payload): PayloadInterface {
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = User::load($payload['account']);
     return new static($user);
   }
diff --git a/modules/webhook/src/Payload.php b/modules/webhook/src/Payload.php
index 715c64c..d789625 100644
--- a/modules/webhook/src/Payload.php
+++ b/modules/webhook/src/Payload.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\danse_webhook;
 
+use Drupal\node\NodeInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal;
@@ -128,7 +129,7 @@ final class Payload extends PayloadBase {
    * {@inheritdoc}
    */
   public function getEntity(): ContentEntityInterface {
-    /** @var \Drupal\node\NodeInterface $entity */
+    /** @var NodeInterface $entity */
     $entity = Node::create([
       'title' => $this->label,
       'body' => $this->message,
diff --git a/modules/webhook/src/Plugin/Danse/Webhook.php b/modules/webhook/src/Plugin/Danse/Webhook.php
index 9cf8189..ec9ce2b 100644
--- a/modules/webhook/src/Plugin/Danse/Webhook.php
+++ b/modules/webhook/src/Plugin/Danse/Webhook.php
@@ -52,9 +52,9 @@ class Webhook extends PluginBase {
   /**
    * @param string $agent
    * @param string $label
-   * @param \Drupal\danse_webhook\Payload $payload
+   * @param Payload $payload
    *
-   * @return \Drupal\danse\Entity\EventInterface
+   * @return EventInterface
    */
   public function createWebhookEvent($agent, $label, Payload $payload): EventInterface {
     return $this->createEvent($agent, $label, $payload);
diff --git a/modules/webhook/src/Plugin/rest/resource/Webhook.php b/modules/webhook/src/Plugin/rest/resource/Webhook.php
index 3238eff..0f59f34 100644
--- a/modules/webhook/src/Plugin/rest/resource/Webhook.php
+++ b/modules/webhook/src/Plugin/rest/resource/Webhook.php
@@ -57,7 +57,7 @@ final class Webhook extends ResourceBase implements DependentPluginInterface {
    * @param mixed $record
    *   Data to write into the database.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The HTTP response object.
    */
   public function post($record): Response {
diff --git a/src/Annotation/Danse.php b/src/Annotation/Danse.php
index f007935..d23a198 100644
--- a/src/Annotation/Danse.php
+++ b/src/Annotation/Danse.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\danse\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class Danse extends Plugin {
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -30,7 +31,7 @@ class Danse extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/DanseRecipientSelection.php b/src/Annotation/DanseRecipientSelection.php
index 3af6d1a..31e487b 100644
--- a/src/Annotation/DanseRecipientSelection.php
+++ b/src/Annotation/DanseRecipientSelection.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\danse\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class DanseRecipientSelection extends Plugin {
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -30,7 +31,7 @@ class DanseRecipientSelection extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Commands/DanseCommands.php b/src/Commands/DanseCommands.php
index f606a2c..147b2a5 100644
--- a/src/Commands/DanseCommands.php
+++ b/src/Commands/DanseCommands.php
@@ -11,14 +11,14 @@ use Drush\Commands\DrushCommands;
 class DanseCommands extends DrushCommands {
 
   /**
-   * @var \Drupal\danse\Service
+   * @var Service
    */
   protected $danse;
 
   /**
    * DanseCommands constructor.
    *
-   * @param \Drupal\danse\Service $danse
+   * @param Service $danse
    */
   public function __construct(Service $danse) {
     parent::__construct();
diff --git a/src/Cron.php b/src/Cron.php
index d4b83a6..257fdda 100644
--- a/src/Cron.php
+++ b/src/Cron.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\danse;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -12,32 +13,32 @@ class Cron {
   use StringTranslationTrait;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $database;
 
   /**
-   * @var \Drupal\danse\Service
+   * @var Service
    */
   protected $danse;
 
   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * Cron constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Database\Connection $database
-   * @param \Drupal\danse\Service $danse
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param Connection $database
+   * @param Service $danse
+   * @param ConfigFactory $config_factory
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, Connection $database, Service $danse, ConfigFactory $config_factory) {
     $this->entityTypeManager = $entity_type_manager;
diff --git a/src/Entity/EventAccess.php b/src/Entity/EventAccess.php
index 6132da2..fcd68d1 100644
--- a/src/Entity/EventAccess.php
+++ b/src/Entity/EventAccess.php
@@ -20,7 +20,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 final class EventAccess extends EntityAccessControlHandler implements EntityHandlerInterface {
 
   /**
-   * @var \Drupal\danse\Query
+   * @var Query
    */
   protected $query;
 
diff --git a/src/Entity/EventInterface.php b/src/Entity/EventInterface.php
index b675ce1..42fcc07 100644
--- a/src/Entity/EventInterface.php
+++ b/src/Entity/EventInterface.php
@@ -16,7 +16,7 @@ interface EventInterface extends ContentEntityInterface {
   public function getPluginId(): string;
 
   /**
-   * @return \Drupal\danse\PayloadInterface
+   * @return PayloadInterface
    */
   public function getPayload(): PayloadInterface;
 
diff --git a/src/Entity/EventView.php b/src/Entity/EventView.php
index e832c8c..222eae4 100644
--- a/src/Entity/EventView.php
+++ b/src/Entity/EventView.php
@@ -22,37 +22,37 @@ use Symfony\Component\HttpFoundation\Request;
 final class EventView extends EntityViewBuilder {
 
   /**
-   * @var \Drupal\Core\DrupalKernel
+   * @var DrupalKernel
    */
   protected $kernel;
 
   /**
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
-   * @var \Drupal\danse\Query
+   * @var Query
    */
   protected $query;
 
   /**
-   * @var \Drupal\danse\PluginManager
+   * @var PluginManager
    */
   protected $pluginManager;
 
   /**
    * EventView constructor.
    *
-   * @param \Drupal\Core\DrupalKernel $kernel
-   * @param \Symfony\Component\HttpFoundation\Request $request
-   * @param \Drupal\danse\Query $query
-   * @param \Drupal\danse\PluginManager $plugin_manager
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
-   * @param \Drupal\Core\Theme\Registry $theme_registry
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param DrupalKernel $kernel
+   * @param Request $request
+   * @param Query $query
+   * @param PluginManager $plugin_manager
+   * @param EntityTypeInterface $entity_type
+   * @param EntityRepositoryInterface $entity_repository
+   * @param LanguageManagerInterface $language_manager
+   * @param Registry $theme_registry
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    */
   public function __construct(DrupalKernel $kernel, Request $request, Query $query, PluginManager $plugin_manager, EntityTypeInterface $entity_type, EntityRepositoryInterface $entity_repository, LanguageManagerInterface $language_manager, Registry $theme_registry = NULL, EntityDisplayRepositoryInterface $entity_display_repository = NULL) {
     parent::__construct($entity_type, $entity_repository, $language_manager, $theme_registry, $entity_display_repository);
@@ -87,7 +87,7 @@ final class EventView extends EntityViewBuilder {
     if ($session === NULL) {
       return [];
     }
-    /** @var \Drupal\danse\Entity\EventInterface $event */
+    /** @var EventInterface $event */
     $event = $build['#danse_event'];
     $plugin = $this->pluginManager->createInstance($event->getPluginId());
     foreach ($this->query->findEventNotificationsForCurrentUser($event) as $notification) {
diff --git a/src/Entity/NotificationAction.php b/src/Entity/NotificationAction.php
index 0a21246..14a2151 100644
--- a/src/Entity/NotificationAction.php
+++ b/src/Entity/NotificationAction.php
@@ -32,7 +32,7 @@ use Drupal\Core\Field\BaseFieldDefinition;
 class NotificationAction extends ContentEntityBase implements NotificationActionInterface {
 
   /**
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    * @param array $values
    */
   public static function preCreate(EntityStorageInterface $storage, array &$values) {
diff --git a/src/Entity/NotificationInterface.php b/src/Entity/NotificationInterface.php
index 52a262c..93d9d86 100644
--- a/src/Entity/NotificationInterface.php
+++ b/src/Entity/NotificationInterface.php
@@ -15,7 +15,7 @@ interface NotificationInterface extends ContentEntityInterface {
   public function uid(): int;
 
   /**
-   * @return \Drupal\danse\Entity\EventInterface
+   * @return EventInterface
    */
   public function event(): EventInterface;
 
diff --git a/src/Form/Settings.php b/src/Form/Settings.php
index 5d43b74..fe7b3f3 100644
--- a/src/Form/Settings.php
+++ b/src/Form/Settings.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\danse\Form;
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -15,21 +16,21 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 final class Settings extends ConfigFormBase {
 
   /**
-   * @var \Drupal\danse\Service
+   * @var Service
    */
   protected $danse;
 
   /**
-   * @var \Drupal\danse\RecipientSelectionManager
+   * @var RecipientSelectionManager
    */
   protected $recipientSelectionManager;
 
   /**
    * Settings constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\danse\Service $danse
-   * @param \Drupal\danse\RecipientSelectionManager $recipient_selection_manager
+   * @param ConfigFactoryInterface $config_factory
+   * @param Service $danse
+   * @param RecipientSelectionManager $recipient_selection_manager
    */
   public function __construct(ConfigFactoryInterface $config_factory, Service $danse, RecipientSelectionManager $recipient_selection_manager) {
     parent::__construct($config_factory);
@@ -144,7 +145,7 @@ final class Settings extends ConfigFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state): void {
-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     if ($config = $this->config('danse.settings')) {
       $config->set('subscriptions_as_tab', $form_state->getValue('subscriptions_as_tab'));
       foreach ($this->danse->getPluginInstances() as $id => $plugin) {
diff --git a/src/Form/Subscriptions.php b/src/Form/Subscriptions.php
index 7c52a19..2e89b00 100644
--- a/src/Form/Subscriptions.php
+++ b/src/Form/Subscriptions.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\danse\Form;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -15,14 +16,14 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class Subscriptions extends FormBase {
 
   /**
-   * @var \Drupal\danse\Service
+   * @var Service
    */
   protected $danse;
 
   /**
    * Subscriptions constructor.
    *
-   * @param \Drupal\danse\Service $danse
+   * @param Service $danse
    */
   public function __construct(Service $danse) {
     $this->danse = $danse;
@@ -47,10 +48,10 @@ class Subscriptions extends FormBase {
   /**
    * Checks access for the DANSE subscription form.
    *
-   * @param \Drupal\user\UserInterface|null $user
+   * @param UserInterface|null $user
    *   (optional) The owner of the shortcut set.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function checkAccess(UserInterface $user = NULL) {
diff --git a/src/PayloadInterface.php b/src/PayloadInterface.php
index 31a9fea..c50ffdd 100644
--- a/src/PayloadInterface.php
+++ b/src/PayloadInterface.php
@@ -21,7 +21,7 @@ interface PayloadInterface {
   public function getEventReference(): string;
 
   /**
-   * @param \Drupal\danse\Entity\EventInterface $event
+   * @param EventInterface $event
    *
    * @return string
    */
@@ -40,7 +40,7 @@ interface PayloadInterface {
   public static function createFromArray(array $payload): PayloadInterface;
 
   /**
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    */
   public function getEntity(): ContentEntityInterface;
 
diff --git a/src/Plugin/views/field/EventLabel.php b/src/Plugin/views/field/EventLabel.php
index f8027c1..526bb45 100644
--- a/src/Plugin/views/field/EventLabel.php
+++ b/src/Plugin/views/field/EventLabel.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\danse\Plugin\views\field;
 
+use Drupal\Core\Field\Plugin\Field\FieldType\StringItem;
+use Drupal\danse\Entity\Event;
 use Drupal\views\Plugin\views\field\EntityField;
 
 /**
@@ -13,9 +15,9 @@ class EventLabel extends EntityField {
    * {@inheritdoc}
    */
   public function render_item($count, $item) {
-    /** @var \Drupal\Core\Field\Plugin\Field\FieldType\StringItem $raw */
+    /** @var StringItem $raw */
     $raw = $item['raw'];
-    /** @var \Drupal\danse\Entity\Event $entity */
+    /** @var Event $entity */
     $event = $raw->getEntity();
     $item['rendered']['#context']['value'] = $event->getPayload()->label();
     return parent::render_item($count, $item);
diff --git a/src/PluginBase.php b/src/PluginBase.php
index 7264e76..b10ccdd 100644
--- a/src/PluginBase.php
+++ b/src/PluginBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\danse;
 
+use Drupal\danse\Entity\NotificationInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
@@ -31,42 +32,42 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
   use DependencySerializationTrait;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;
 
   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
-   * @var \Drupal\danse\RecipientSelectionInterface[]
+   * @var RecipientSelectionInterface[]
    */
   protected $recipientSelectionPlugins;
 
   /**
-   * @var \Drupal\danse\Query
+   * @var Query
    */
   protected $query;
 
@@ -76,14 +77,14 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\user\UserDataInterface $user_data
-   * @param \Drupal\danse\RecipientSelectionManager $recipient_selection_manager
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
-   * @param \Drupal\danse\Query $query
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeBundleInfoInterface $bundle_info
+   * @param ConfigFactoryInterface $config_factory
+   * @param UserDataInterface $user_data
+   * @param RecipientSelectionManager $recipient_selection_manager
+   * @param AccountProxyInterface $current_user
+   * @param RouteMatchInterface $route_match
+   * @param Query $query
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $bundle_info, ConfigFactoryInterface $config_factory, UserDataInterface $user_data, RecipientSelectionManager $recipient_selection_manager, AccountProxyInterface $current_user, RouteMatchInterface $route_match, Query $query) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ -135,9 +136,9 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
    * {@inheritdoc}
    */
   final public function createNotifications(): void {
-    /** @var \Drupal\danse\Entity\EventInterface $event */
+    /** @var EventInterface $event */
     foreach ($this->getUnprocessedEvents() as $event) {
-      /** @var \Drupal\danse\PayloadInterface $payload */
+      /** @var PayloadInterface $payload */
       $payload = $event->getPayload();
       $subscribers = $this->getSubscribers($event);
       $recipients = [];
@@ -190,12 +191,12 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
   /**
    * @param string $topic
    * @param string $label
-   * @param \Drupal\danse\PayloadInterface $payload
+   * @param PayloadInterface $payload
    * @param bool $push
    * @param bool $force
    * @param bool $silent
    *
-   * @return \Drupal\danse\Entity\EventInterface|null
+   * @return EventInterface|null
    */
   protected function createEvent($topic, $label, PayloadInterface $payload, $push = TRUE, $force = FALSE, $silent = FALSE): ?EventInterface {
     if (!$this->assertPayload($payload)) {
@@ -223,7 +224,7 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
 
   /**
    *
-   * @param \Drupal\danse\Entity\EventInterface $event
+   * @param EventInterface $event
    *
    * @return int[]
    */
@@ -239,11 +240,11 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
   }
 
   /**
-   * @param \Drupal\danse\Entity\EventInterface $event
+   * @param EventInterface $event
    * @param string $trigger
    * @param int $uid
    *
-   * @return \Drupal\danse\Entity\NotificationInterface[]
+   * @return NotificationInterface[]
    */
   protected function createNotification(EventInterface $event, $trigger, $uid): array {
     if (!$event->getPayload()->hasAccess($uid)) {
@@ -254,7 +255,7 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
       // There is an existing notification which is undelivered, so we do not create a new one.
       return $existingNotifications;
     }
-    /** @var \Drupal\danse\Entity\NotificationInterface $notification */
+    /** @var NotificationInterface $notification */
     $notification = Notification::create([
       'event' => $event,
       'trigger' => $trigger,
@@ -274,11 +275,11 @@ abstract class PluginBase extends CorePluginBase implements PluginInterface, Con
   }
 
   /**
-   * @return \Drupal\danse\Entity\EventInterface[]
+   * @return EventInterface[]
    */
   protected function getUnprocessedEvents(): array {
     try {
-      /** @var \Drupal\danse\Entity\EventInterface[] $events */
+      /** @var EventInterface[] $events */
       $events = $this->entityTypeManager->getStorage('danse_event')
         ->loadByProperties([
           'plugin' => $this->getPluginId(),
diff --git a/src/PluginInterface.php b/src/PluginInterface.php
index ac0cccf..94be6c9 100644
--- a/src/PluginInterface.php
+++ b/src/PluginInterface.php
@@ -13,7 +13,7 @@ use Drupal\danse\Entity\EventInterface;
 interface PluginInterface extends PluginInspectionInterface {
 
   /**
-   * @param \Drupal\danse\PayloadInterface $payload
+   * @param PayloadInterface $payload
    *
    * @return bool
    */
@@ -28,7 +28,7 @@ interface PluginInterface extends PluginInspectionInterface {
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return mixed
    *   Optionally return the submit handler definition.
@@ -36,9 +36,9 @@ interface PluginInterface extends PluginInspectionInterface {
   public function buildForm(&$form, FormStateInterface $form_state);
 
   /**
-   * @param \Drupal\danse\Entity\EventInterface $event
+   * @param EventInterface $event
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getRedirectUrl(EventInterface $event): Url;
 
diff --git a/src/PluginManager.php b/src/PluginManager.php
index f4bb0dc..69b5092 100644
--- a/src/PluginManager.php
+++ b/src/PluginManager.php
@@ -19,9 +19,9 @@ class PluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Query.php b/src/Query.php
index b2d0712..5736d97 100644
--- a/src/Query.php
+++ b/src/Query.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\danse;
 
+use Drupal\danse\Entity\NotificationInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Connection;
@@ -12,17 +13,17 @@ use Drupal\danse\Entity\EventInterface;
 class Query {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   private $currentUser;
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $database;
 
@@ -36,15 +37,15 @@ class Query {
   }
 
   /**
-   * @param \Drupal\danse\Entity\EventInterface $event
+   * @param EventInterface $event
    *
-   * @return \Drupal\danse\Entity\NotificationInterface[]
+   * @return NotificationInterface[]
    */
   public function findEventNotificationsForCurrentUser(EventInterface $event): array {
-    /** @var \Drupal\danse\Entity\NotificationInterface[] $notifications */
+    /** @var NotificationInterface[] $notifications */
     $notifications = [];
     try {
-      /** @var \Drupal\danse\Entity\NotificationInterface[] $notifications */
+      /** @var NotificationInterface[] $notifications */
       $notifications = $this->entityTypeManager->getStorage('danse_notification')->loadByProperties([
         'event' => $event->id(),
         'uid' => $this->currentUser->id(),
@@ -58,9 +59,9 @@ class Query {
   }
 
   /**
-   * @param \Drupal\danse\PayloadInterface $payload
+   * @param PayloadInterface $payload
    *
-   * @return \Drupal\danse\Entity\NotificationInterface[]
+   * @return NotificationInterface[]
    */
   public function findNotificationsForCurrentUser($payload): array {
     $reference = $payload->getEventReference();
@@ -73,11 +74,11 @@ class Query {
       ->condition('e.reference', $reference)
       ->execute()
       ->fetchCol();
-    /** @var \Drupal\danse\Entity\NotificationInterface[] $notifications */
+    /** @var NotificationInterface[] $notifications */
     $notifications = [];
     if (!empty($ids)) {
       try {
-        /** @var \Drupal\danse\Entity\NotificationInterface[] $notifications */
+        /** @var NotificationInterface[] $notifications */
         $notifications = $this->entityTypeManager->getStorage('danse_notification')
           ->loadMultiple($ids);
       }
@@ -92,10 +93,10 @@ class Query {
   }
 
   /**
-   * @param \Drupal\danse\Entity\EventInterface $event
+   * @param EventInterface $event
    * @param int $uid
    *
-   * @return \Drupal\danse\Entity\NotificationInterface[]
+   * @return NotificationInterface[]
    */
   public function findSimilarEventNotifications(EventInterface $event, $uid): array {
     $query = $this->database->select('danse_notification', 'n');
@@ -111,11 +112,11 @@ class Query {
       ->condition('e.reference', $event->getPayload()->getEventReference())
       ->execute()
       ->fetchCol();
-    /** @var \Drupal\danse\Entity\NotificationInterface[] $notifications */
+    /** @var NotificationInterface[] $notifications */
     $notifications = [];
     if (!empty($ids)) {
       try {
-        /** @var \Drupal\danse\Entity\NotificationInterface[] $notifications */
+        /** @var NotificationInterface[] $notifications */
         $notifications = $this->entityTypeManager->getStorage('danse_notification')
           ->loadMultiple($ids);
       }
diff --git a/src/RecipientSelectionBase.php b/src/RecipientSelectionBase.php
index 94df6d6..30e3b64 100644
--- a/src/RecipientSelectionBase.php
+++ b/src/RecipientSelectionBase.php
@@ -17,12 +17,12 @@ abstract class RecipientSelectionBase extends PluginBase implements RecipientSel
   use DependencySerializationTrait;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -32,8 +32,8 @@ abstract class RecipientSelectionBase extends PluginBase implements RecipientSel
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param ConfigFactoryInterface $config_factory
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
diff --git a/src/RecipientSelectionInterface.php b/src/RecipientSelectionInterface.php
index 5df0881..a8eede7 100644
--- a/src/RecipientSelectionInterface.php
+++ b/src/RecipientSelectionInterface.php
@@ -16,7 +16,7 @@ interface RecipientSelectionInterface {
   public function label(): string;
 
   /**
-   * @param \Drupal\danse\PayloadInterface $payload
+   * @param PayloadInterface $payload
    *
    * @return int[]
    */
diff --git a/src/RecipientSelectionManager.php b/src/RecipientSelectionManager.php
index e0d402c..ebab810 100644
--- a/src/RecipientSelectionManager.php
+++ b/src/RecipientSelectionManager.php
@@ -19,9 +19,9 @@ class RecipientSelectionManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Service.php b/src/Service.php
index 9469a2a..6e67ff7 100644
--- a/src/Service.php
+++ b/src/Service.php
@@ -16,24 +16,24 @@ class Service {
   use StringTranslationTrait;
 
   /**
-   * @var \Drupal\danse\PluginManager
+   * @var PluginManager
    */
   protected $pluginManager;
 
   /**
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;
 
   /**
-   * @var \Drupal\danse\Query
+   * @var Query
    */
   protected $query;
 
   /**
-   * @param \Drupal\danse\PluginManager $plugin_manager
-   * @param \Drupal\user\UserDataInterface $user_data
-   * @param \Drupal\danse\Query $query
+   * @param PluginManager $plugin_manager
+   * @param UserDataInterface $user_data
+   * @param Query $query
    */
   public function __construct(PluginManager $plugin_manager, UserDataInterface $user_data, Query $query) {
     $this->pluginManager = $plugin_manager;
@@ -42,7 +42,7 @@ class Service {
   }
 
   /**
-   * @return \Drupal\danse\PluginInterface[]
+   * @return PluginInterface[]
    */
   public function getPluginInstances(): array {
     $instances = [];
@@ -79,7 +79,7 @@ class Service {
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function buildForm(array &$form, FormStateInterface $form_state): void {
     $submitHandler = [];
@@ -95,7 +95,7 @@ class Service {
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    * @param bool $collapsed
    */
   public function buildUserSubscriptionForm(array &$form, AccountInterface $account, $collapsed = TRUE): void {
@@ -142,7 +142,7 @@ class Service {
    * Submit callback.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitUserSubscriptionForm(array &$form, FormStateInterface $form_state): void {
     $this->saveUserSubscriptionForm($form_state, $form_state->getFormObject()->getEntity());
@@ -151,8 +151,8 @@ class Service {
   /**
    * Save user settings.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param FormStateInterface $form_state
+   * @param AccountInterface $account
    */
   public function saveUserSubscriptionForm(FormStateInterface $form_state, AccountInterface $account) {
     foreach ($form_state->getValue('danse') as $key => $value) {
@@ -170,7 +170,7 @@ class Service {
   }
 
   /**
-   * @param \Drupal\danse\PayloadInterface $payload
+   * @param PayloadInterface $payload
    */
   public function markSeen(PayloadInterface $payload): void {
     foreach ($this->query->findNotificationsForCurrentUser($payload) as $notification) {
