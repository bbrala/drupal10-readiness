diff --git a/search_api_page.api.php b/search_api_page.api.php
index 63daf12..ca96d06 100644
--- a/search_api_page.api.php
+++ b/search_api_page.api.php
@@ -1,10 +1,11 @@
 <?php
 
+use Drupal\search_api\Query\ResultSet;
+use Drupal\search_api_page\SearchApiPageInterface;
 /**
  * @file
  * Hooks provided by the Search API Page module.
  */
-
 /**
  * Alter the Search API results page.
  *
@@ -13,9 +14,9 @@
  *
  * @param array $build
  *   An array containing all page elements.
- * @param \Drupal\search_api\Query\ResultSet $query_result
+ * @param ResultSet $query_result
  *   Search API query result.
- * @param \Drupal\search_api_page\SearchApiPageInterface $search_api_page
+ * @param SearchApiPageInterface $search_api_page
  *   The Search API Page entity object.
  *
  * @see \Drupal\search_api_page\Controller\SearchApiPageController
diff --git a/search_api_page.module b/search_api_page.module
index b8b4486..916ec0d 100644
--- a/search_api_page.module
+++ b/search_api_page.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\file\Entity\File;
 /**
  * @file
  * Search API pages file.
@@ -58,7 +59,7 @@ function search_api_page_form_config_translation_delete_form_alter(&$form, FormS
  *
  * @param array $form
  *   The current form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current form state.
  */
 function search_api_page_config_translation_change_form(&$form, FormStateInterface $form_state) {
@@ -118,7 +119,7 @@ function template_preprocess_search_api_page_result(&$variables) {
 
   $variables['snippet'] = ['#markup' => $item->getExcerpt()];
   $variables['title'] = $entity->label();
-  if ($entity instanceof \Drupal\file\Entity\File) {
+  if ($entity instanceof File) {
     $variables['url'] = $entity->createFileUrl();
   }
   else {
diff --git a/src/Controller/SearchApiPageController.php b/src/Controller/SearchApiPageController.php
index 1ad4217..18081b4 100644
--- a/src/Controller/SearchApiPageController.php
+++ b/src/Controller/SearchApiPageController.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\search_api_page\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\search_api\Query\QueryInterface;
+use Drupal\search_api\ParseMode\ParseModeInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Language\LanguageInterface;
@@ -23,23 +29,23 @@ class SearchApiPageController extends ControllerBase {
   /**
    * The parse mode plugin manager.
    *
-   * @var \Drupal\search_api\ParseMode\ParseModePluginManager
+   * @var ParseModePluginManager
    */
   protected $parseModePluginManager;
 
   /**
    * The parse mode pager manager.
    *
-   * @var Drupal\Core\Pager\PagerManagerInterface
+   * @var PagerManagerInterface
    */
   protected $pagerManager;
 
   /**
    * SearchApiPageController constructor.
    *
-   * @param \Drupal\search_api\ParseMode\ParseModePluginManager $parseModePluginManager
+   * @param ParseModePluginManager $parseModePluginManager
    *   The parse mode plugin manager.
-   * @param Drupal\Core\Pager\PagerManagerInterface $pagerManager
+   * @param PagerManagerInterface $pagerManager
    *   The parse mode pager manager.
    */
   public function __construct(ParseModePluginManager $parseModePluginManager, PagerManagerInterface $pagerManager) {
@@ -60,7 +66,7 @@ class SearchApiPageController extends ControllerBase {
   /**
    * Page callback.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $search_api_page_name
    *   The search api page name.
@@ -70,10 +76,10 @@ class SearchApiPageController extends ControllerBase {
    * @return array
    *   The page render array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
+   * @throws SearchApiException
    */
   public function page(Request $request, $search_api_page_name, $keys = '') {
     /* @var $search_api_page \Drupal\search_api_page\SearchApiPageInterface */
@@ -125,7 +131,7 @@ class SearchApiPageController extends ControllerBase {
    *
    * @param array $build
    *   The build to add the form to.
-   * @param \Drupal\search_api_page\SearchApiPageInterface $search_api_page
+   * @param SearchApiPageInterface $search_api_page
    *   The search api page.
    * @param mixed $keys
    *   The search word.
@@ -146,9 +152,9 @@ class SearchApiPageController extends ControllerBase {
   /**
    * Creates a render array for the given result item.
    *
-   * @param \Drupal\search_api\Item\ItemInterface $item
+   * @param ItemInterface $item
    *   The item to render.
-   * @param \Drupal\search_api_page\SearchApiPageInterface $search_api_page
+   * @param SearchApiPageInterface $search_api_page
    *   The search api page.
    *
    * @return array
@@ -160,7 +166,7 @@ class SearchApiPageController extends ControllerBase {
       if ($originalObject === NULL) {
         return [];
       }
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       $entity = $originalObject->getValue();
     }
     catch (SearchApiException $e) {
@@ -203,9 +209,9 @@ class SearchApiPageController extends ControllerBase {
    *
    * @param array $build
    *   An array containing all page elements.
-   * @param \Drupal\search_api_page\SearchApiPageInterface $searchApiPage
+   * @param SearchApiPageInterface $searchApiPage
    *   The Search API page entity.
-   * @param \Drupal\search_api\Query\ResultSetInterface $result
+   * @param ResultSetInterface $result
    *   Search API result.
    *
    * @return array
@@ -225,18 +231,18 @@ class SearchApiPageController extends ControllerBase {
   /**
    * Prepares the search query.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\search_api_page\SearchApiPageInterface $search_api_page
+   * @param SearchApiPageInterface $search_api_page
    *   The search api page.
    *
-   * @return \Drupal\search_api\Query\QueryInterface
+   * @return QueryInterface
    *   The prepared query.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\search_api\SearchApiException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
+   * @throws SearchApiException
    */
   protected function prepareQuery(Request $request, SearchApiPageInterface $search_api_page) {
     /* @var $search_api_index \Drupal\search_api\IndexInterface */
@@ -249,7 +255,7 @@ class SearchApiPageController extends ControllerBase {
     ]);
     $query->setSearchID('search_api_page:' . $search_api_page->id());
 
-    /** @var \Drupal\search_api\ParseMode\ParseModeInterface $parse_mode */
+    /** @var ParseModeInterface $parse_mode */
     $parse_mode = $this->parseModePluginManager->createInstance($search_api_page->getParseMode());
     $query->setParseMode($parse_mode);
 
@@ -272,7 +278,7 @@ class SearchApiPageController extends ControllerBase {
    *
    * @param array $build
    *   The build to finish.
-   * @param \Drupal\search_api_page\SearchApiPageInterface $searchApiPage
+   * @param SearchApiPageInterface $searchApiPage
    *   The Search API page entity.
    *
    * @return array
@@ -298,11 +304,11 @@ class SearchApiPageController extends ControllerBase {
    *
    * @param array $build
    *   The build.
-   * @param \Drupal\search_api\Query\ResultSetInterface $result
+   * @param ResultSetInterface $result
    *   Search API result.
    * @param array $results
    *   The result item render arrays.
-   * @param \Drupal\search_api_page\SearchApiPageInterface $search_api_page
+   * @param SearchApiPageInterface $search_api_page
    *   The search api page.
    *
    * @return array
@@ -330,7 +336,7 @@ class SearchApiPageController extends ControllerBase {
   /**
    * Title callback.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $search_api_page_name
    *   The search api page name.
diff --git a/src/Form/SearchApiPageBlockForm.php b/src/Form/SearchApiPageBlockForm.php
index 1bf04a3..e5686b8 100644
--- a/src/Form/SearchApiPageBlockForm.php
+++ b/src/Form/SearchApiPageBlockForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_page\Form;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\BaseFormIdInterface;
 use Drupal\Core\Form\FormBase;
@@ -20,14 +21,14 @@ class SearchApiPageBlockForm extends FormBase implements BaseFormIdInterface {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -41,18 +42,18 @@ class SearchApiPageBlockForm extends FormBase implements BaseFormIdInterface {
   /**
    * The storage for Search API Page entities.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $pageStorage;
 
   /**
    * Constructs a new SearchBlockForm.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $pageStorage
+   * @param EntityStorageInterface $pageStorage
    *   The search API page storage
    */
   public function __construct(LanguageManagerInterface $language_manager, RendererInterface $renderer, EntityStorageInterface $pageStorage) {
@@ -65,7 +66,7 @@ class SearchApiPageBlockForm extends FormBase implements BaseFormIdInterface {
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager */
+    /** @var EntityTypeManagerInterface $entityTypeManager */
     $entityTypeManager = $container->get('entity_type.manager');
     return new static(
       $container->get('language_manager'),
diff --git a/src/Form/SearchApiPageForm.php b/src/Form/SearchApiPageForm.php
index 8ae10a2..9ca79b4 100644
--- a/src/Form/SearchApiPageForm.php
+++ b/src/Form/SearchApiPageForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_page\Form;
 
+use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\search_api\Entity\Index;
@@ -353,7 +354,7 @@ class SearchApiPageForm extends EntityForm {
       \Drupal::service('router.builder')->rebuild();
     }
 
-    /** @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface $invalidator */
+    /** @var CacheTagsInvalidatorInterface $invalidator */
     $invalidator = \Drupal::service('cache_tags.invalidator');
     $invalidator->invalidateTags(['search_api_page.style']);
   }
diff --git a/src/PathProcessor/PathProcessorSearchApiPage.php b/src/PathProcessor/PathProcessorSearchApiPage.php
index 4988582..ae54176 100644
--- a/src/PathProcessor/PathProcessorSearchApiPage.php
+++ b/src/PathProcessor/PathProcessorSearchApiPage.php
@@ -19,21 +19,21 @@ class PathProcessorSearchApiPage implements InboundPathProcessorInterface, Outbo
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
 
diff --git a/src/Plugin/Block/SearchApiPageBlock.php b/src/Plugin/Block/SearchApiPageBlock.php
index 35daccd..4fc9210 100644
--- a/src/Plugin/Block/SearchApiPageBlock.php
+++ b/src/Plugin/Block/SearchApiPageBlock.php
@@ -24,21 +24,21 @@ class SearchApiPageBlock extends BlockBase implements ContainerFactoryPluginInte
   /**
    * The search API page form.
    *
-   * @var \Drupal\search_api_page\Form\SearchApiPageBlockForm
+   * @var SearchApiPageBlockForm
    */
   protected $searchApiPageBlockForm;
 
   /**
    * The search api page storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $searchApiPageStorage;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
@@ -65,11 +65,11 @@ class SearchApiPageBlock extends BlockBase implements ContainerFactoryPluginInte
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $searchApiStorage
+   * @param EntityStorageInterface $searchApiStorage
    *   The entity type manager.
-   * @param \Drupal\Core\Form\FormBuilderInterface $formBuilder
+   * @param FormBuilderInterface $formBuilder
    *   The form builder.
-   * @param \Drupal\search_api_page\Form\SearchApiPageBlockForm $searchApiPageForm
+   * @param SearchApiPageBlockForm $searchApiPageForm
    *   The search API page form.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityStorageInterface $searchApiStorage, FormBuilderInterface $formBuilder, SearchApiPageBlockForm $searchApiPageForm) {
diff --git a/src/Plugin/search_api/display/SearchApiPageDeriver.php b/src/Plugin/search_api/display/SearchApiPageDeriver.php
index 0554298..6252bf5 100644
--- a/src/Plugin/search_api/display/SearchApiPageDeriver.php
+++ b/src/Plugin/search_api/display/SearchApiPageDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_page\Plugin\search_api\display;
 
+use Drupal\search_api_page\SearchApiPageInterface;
 use Drupal\search_api\Display\DisplayDeriverBase;
 use Drupal\search_api_page\Entity\SearchApiPage;
 
@@ -32,7 +33,7 @@ class SearchApiPageDeriver extends DisplayDeriverBase {
   /**
    * Creates derived plugin definitions for pages.
    *
-   * @param \Drupal\search_api_page\SearchApiPageInterface[] $pages
+   * @param SearchApiPageInterface[] $pages
    *   The pages to create plugins for.
    * @param array $base_plugin_definition
    *   The plugin definition for this plugin.
diff --git a/src/Routing/SearchApiPageRoutes.php b/src/Routing/SearchApiPageRoutes.php
index 9828cd0..e73df9f 100644
--- a/src/Routing/SearchApiPageRoutes.php
+++ b/src/Routing/SearchApiPageRoutes.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api_page\Routing;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -17,23 +19,23 @@ class SearchApiPageRoutes implements ContainerInjectionInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a new SearchApiRoutes object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager) {
@@ -54,11 +56,11 @@ class SearchApiPageRoutes implements ContainerInjectionInterface {
   /**
    * Returns an array of route objects.
    *
-   * @return \Symfony\Component\Routing\Route[]
+   * @return Route[]
    *   An array of route objects.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function routes() {
     $routes = [];
diff --git a/src/SearchApiPageInterface.php b/src/SearchApiPageInterface.php
index 8ff8671..5fe7151 100644
--- a/src/SearchApiPageInterface.php
+++ b/src/SearchApiPageInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_page;
 
+use Drupal\search_api_page\Config\ViewMode;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
 /**
@@ -109,7 +110,7 @@ interface SearchApiPageInterface extends ConfigEntityInterface {
   /**
    * Get the view mode configuration object.
    *
-   * @return \Drupal\search_api_page\Config\ViewMode
+   * @return ViewMode
    */
   public function getViewModeConfig();
 
diff --git a/tests/src/Functional/BlockTest.php b/tests/src/Functional/BlockTest.php
index ed657ce..8d8ce08 100644
--- a/tests/src/Functional/BlockTest.php
+++ b/tests/src/Functional/BlockTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\search_api_page\Functional;
 
+use Behat\Mink\Exception\ExpectationException;
 /**
  * Provides web tests for Search API Pages.
  *
@@ -12,7 +13,7 @@ class BlockTest extends FunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->drupalLogin($this->adminUser);
@@ -39,7 +40,7 @@ class BlockTest extends FunctionalTestBase {
    * @param int $indexId
    *   The id of index to use.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   private function createSearchPage($id, $label, $path, $indexId) {
     $this->drupalGet('admin/config/search/search-api-pages');
@@ -50,12 +51,13 @@ class BlockTest extends FunctionalTestBase {
       'id' => $id,
       'index' => $indexId,
     ];
-    $this->drupalPostForm('admin/config/search/search-api-pages/add', $step1, 'Next');
+    $this->drupalGet('admin/config/search/search-api-pages/add');
+    $this->submitForm($step1, 'Next');
 
     $step2 = [
       'path' => $path,
     ];
-    $this->drupalPostForm(NULL, $step2, 'Save');
+    $this->submitForm($step2, 'Save');
   }
 
   /**
