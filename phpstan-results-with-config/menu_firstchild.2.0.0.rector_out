modules/contrib/menu_firstchild/menu_firstchild.api.php
modules/contrib/menu_firstchild/menu_firstchild.module
modules/contrib/menu_firstchild/src/MenuItemParser.php
modules/contrib/menu_firstchild/tests/modules/menu_firstchild_test/menu_firstchild_test.module
modules/contrib/menu_firstchild/tests/src/Functional/MenuFirstchildTest.php

3 files with changes
====================

1) modules/contrib/menu_firstchild/tests/src/Functional/MenuFirstchildTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\menu_firstchild\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\menu_link_content\Entity\MenuLinkContent;
@@ @@
   /**
    * A user with administration rights.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * An authenticated user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $authenticatedUser;

@@ @@
   /**
    * A test menu.
    *
-   * @var \Drupal\system\Entity\Menu
+   * @var Menu
    */
   protected $menu;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser([
@@ @@
     // Build Parent Link.
     $this->clickLink($this->t('Add link'));

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'link[0][uri]' => 'route:<none>',
       'title[0][value]' => "MFC Parent",
       'menu_firstchild_enabled' => TRUE,
@@ @@
       'description[0][value]' => "MFC Parent",
       'weight[0][value]' => 10,
     ], $this->t('Save'));
-    $this->assertUrl(Url::fromRoute('entity.menu.edit_form', ['menu' => $menu_name]));
+    $this->assertSession()->addressEquals(Url::fromRoute('entity.menu.edit_form', ['menu' => $menu_name]));

     $menu_links = \Drupal::entityTypeManager()->getStorage('menu_link_content')->loadByProperties(['title' => "MFC Parent"]);
     $parent_menu_link = reset($menu_links);
@@ @@
     // Build First Child link.
     $this->clickLink($this->t('Add link'));

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'link[0][uri]' => '/node/' . $this->nodes[0]->id(),
       'title[0][value]' => "First Child",
       'description[0][value]' => "First Child",
@@ @@
       'menu_parent' => $menu_name . ':' . $parent_menu_link->getPluginId(),
       'weight[0][value]' => 0,
     ], $this->t('Save'));
-    $this->assertUrl(Url::fromRoute('entity.menu.edit_form', ['menu' => $menu_name]));
+    $this->assertSession()->addressEquals(Url::fromRoute('entity.menu.edit_form', ['menu' => $menu_name]));

     $menu_links = \Drupal::entityTypeManager()->getStorage('menu_link_content')->loadByProperties(['title' => "First Child"]);
     $c1_menu_link = reset($menu_links);
@@ @@
     // Build Second Child link.
     $this->clickLink($this->t('Add link'));

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'link[0][uri]' => '/node/' . $this->nodes[1]->id(),
       'title[0][value]' => "Second Child",
       'description[0][value]' => "Second Child",
@@ @@
       'menu_parent' => $menu_name . ':' . $parent_menu_link->getPluginId(),
       'weight[0][value]' => 10,
     ], $this->t('Save'));
-    $this->assertUrl(Url::fromRoute('entity.menu.edit_form', ['menu' => $menu_name]));
+    $this->assertSession()->addressEquals(Url::fromRoute('entity.menu.edit_form', ['menu' => $menu_name]));

     $menu_links = \Drupal::entityTypeManager()->getStorage('menu_link_content')->loadByProperties(['title' => "Second Child"]);
     $c2_menu_link = reset($menu_links);
@@ @@
     $this->drupalGet('<front>');

     // Check for Parent links.
-    $this->assertLink($this->t('MFC Parent'));
+    $this->assertSession()->linkExists($this->t('MFC Parent'));
     $links = $this->xpath('//a[contains(@href, :href)][@title = :label]', [
       ':href' => $first_url,
       ':label' => "MFC Parent",
     ]);
-    $this->assert(!empty($links), "MFC Parent Link Does not exist: " . $first_url . " :: " . count($links));
+    $this->assertTrue(!empty($links), "MFC Parent Link Does not exist: " . $first_url . " :: " . count($links));

     // Check for Child 1 links /w hierarchy.
-    $this->assertLink($this->t('First Child'));
+    $this->assertSession()->linkExists($this->t('First Child'));
     $links = $this->xpath('//a[contains(@href, :href1)][@title = :label1]/following-sibling::ul[contains(@class, "menu")]/*/a[contains(@href, :href2)][@title = :label2]', [
       ':href1' => $first_url,
       ':label1' => "MFC Parent",
@@ @@
       ':href2' => $first_url,
       ':label2' => "First Child",
     ]);
-    $this->assert(!empty($links), "First Child Link Does not exist");
+    $this->assertTrue(!empty($links), "First Child Link Does not exist");

     // Check for Child 2 links /w hierarchy.
-    $this->assertLink($this->t('Second Child'));
+    $this->assertSession()->linkExists($this->t('Second Child'));
     $links = $this->xpath('//a[contains(@href, :href1)][@title = :label1]/following-sibling::ul[contains(@class, "menu")]/*/a[contains(@href, :href2)][@title = :label2]', [
       ':href1' => $first_url,
       ':label1' => "MFC Parent",
@@ @@
       ':href2' => $second_url,
       ':label2' => "Second Child",
     ]);
-    $this->assert(!empty($links), "Second Child Link Does not exist");
+    $this->assertTrue(!empty($links), "Second Child Link Does not exist");

     // Install test module, and clear cache.
     \Drupal::service('module_installer')->install(['menu_firstchild_test']);
@@ @@
    *
    * Borrowed from Drupal\Tests\menu_ui\Traits\MenuUiTrait.
    *
-   * @return \Drupal\system\Entity\Menu
+   * @return Menu
    *   The custom menu that has been created.
    */
   public function addCustomMenu() {
@@ @@
       'description' => '',
       'label' => $label,
     ];
-    $this->drupalPostForm('admin/structure/menu/add', $edit, $this->t('Save'));
+    $this->drupalGet('admin/structure/menu/add');
+    $this->submitForm($edit, $this->t('Save'));

     // Verify that using a menu_name that is too long results in a validation
     // message.
-    $this->assertRaw($this->t('@name cannot be longer than %max characters but is currently %length characters long.', [
+    $this->assertSession()->responseContains($this->t('@name cannot be longer than %max characters but is currently %length characters long.', [
       '@name' => $this->t('Menu name'),
       '%max' => MenuStorage::MAX_ID_LENGTH,
       '%length' => mb_strlen($menu_name),
@@ @@
     // Change the menu_name so it no longer exceeds the maximum length.
     $menu_name = strtolower($this->randomMachineName(MenuStorage::MAX_ID_LENGTH));
     $edit['id'] = $menu_name;
-    $this->drupalPostForm('admin/structure/menu/add', $edit, $this->t('Save'));
+    $this->drupalGet('admin/structure/menu/add');
+    $this->submitForm($edit, $this->t('Save'));

     // Verify that no validation error is given for menu_name length.
-    $this->assertNoRaw($this->t('@name cannot be longer than %max characters but is currently %length characters long.', [
+    $this->assertSession()->responseNotContains($this->t('@name cannot be longer than %max characters but is currently %length characters long.', [
       '@name' => $this->t('Menu name'),
       '%max' => MenuStorage::MAX_ID_LENGTH,
       '%length' => mb_strlen($menu_name),
     ]));
     // Verify that the confirmation message is displayed.
-    $this->assertRaw($this->t('Menu %label has been added.', ['%label' => $label]));
+    $this->assertSession()->responseContains($this->t('Menu %label has been added.', ['%label' => $label]));
     $this->drupalGet('admin/structure/menu');
-    $this->assertText($label, 'Menu created');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($label);

     // Confirm that the custom menu block is available.
     $this->drupalGet('admin/structure/block/list/' . $this->config('system.theme')->get('default'));
     $this->clickLink('Place block');
-    $this->assertText($label);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($label);

     // Enable the block.
     $block = $this->drupalPlaceBlock('system_menu_block:' . $menu_name, [
    ----------- end diff -----------

Applied rules:
 * AssertLinkRector
 * AssertNoRawRector
 * AssertRawRector
 * AssertRector
 * AssertTextRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/menu_firstchild/src/MenuItemParser.php:83

    ---------- begin diff ----------
@@ @@
    * @param string $menu_name
    *   Menu machine name.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   URL to use in the link.
    */
   protected function firstChildUrl(array $item, $menu_name) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/menu_firstchild/menu_firstchild.module:73

    ---------- begin diff ----------
@@ @@
  *
  * @param array $form
  *   Form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state.
  *
- * @return \Drupal\Core\Ajax\AjaxResponse
+ * @return AjaxResponse
  *   AJAX callback response.
  */
 function menu_firstchild_menu_link_content_form_ajax_callback(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

