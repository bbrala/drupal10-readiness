modules/contrib/paragraphs_ee/modules/paragraphs_ee_sets/paragraphs_ee_sets.install
modules/contrib/paragraphs_ee/modules/paragraphs_ee_sets/paragraphs_ee_sets.module
modules/contrib/paragraphs_ee/paragraphs_ee.api.php
modules/contrib/paragraphs_ee/paragraphs_ee.install
modules/contrib/paragraphs_ee/paragraphs_ee.module
modules/contrib/paragraphs_ee/src/Controller/ParagraphsCategoryListBuilder.php
modules/contrib/paragraphs_ee/src/Controller/ParagraphsOffCanvasBrowser.php
modules/contrib/paragraphs_ee/src/Entity/ParagraphsCategory.php
modules/contrib/paragraphs_ee/src/Form/ParagraphsCategoryDeleteForm.php
modules/contrib/paragraphs_ee/src/Form/ParagraphsCategoryForm.php
modules/contrib/paragraphs_ee/src/ParagraphsCategoryInterface.php
modules/contrib/paragraphs_ee/tests/src/FunctionalJavascript/ParagraphsEEAddInBetweenTest.php
modules/contrib/paragraphs_ee/tests/src/FunctionalJavascript/ParagraphsEEJavascriptTestBase.php
modules/contrib/paragraphs_ee/tests/src/Traits/ParagraphsEEDialogTrait.php

10 files with changes
=====================

1) modules/contrib/paragraphs_ee/tests/src/Traits/ParagraphsEEDialogTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\paragraphs_ee\Traits;

+use Drupal\FunctionalJavascriptTests\WebDriverWebAssert;
 use Behat\Mink\Element\NodeElement;

 /**
@@ @@
    * @param int $delta
    *   Where to add paragraphs to the field using the opened dialog.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The NodeElement for the opened dialog or NULL in case the dialog cannot
    *   be opened.
    */
@@ @@
     $session = $this->getSession();
     $page = $session->getPage();

-    /** @var \Drupal\FunctionalJavascriptTests\WebDriverWebAssert $assertSession */
+    /** @var WebDriverWebAssert $assertSession */
     $assertSession = $this->assertSession();

     $css_selector_field = 'edit-' . strtr($field_name, ['_' => '-']);

-    /** @var \Behat\Mink\Element\NodeElement[] $add_in_between_rows */
+    /** @var NodeElement[] $add_in_between_rows */
     $add_in_between_rows = $page->findAll('css', '[data-drupal-selector=' . $css_selector_field . '] .paragraphs-features__add-in-between__row');
     $this->assertNotEmpty($add_in_between_rows);

@@ @@
     }
     // Check that specified row exists.
     $this->assertArrayHasKey($delta, $add_in_between_rows, 'Row with specified delta does not exists: [' . $delta . ']');
-    /** @var \Behat\Mink\Element\NodeElement $add_in_between_row */
+    /** @var NodeElement $add_in_between_row */
     $add_in_between_row = $add_in_between_rows[$delta];
-    /** @var \Behat\Mink\Element\NodeElement $paragraphs_button_add_dialog */
+    /** @var NodeElement $paragraphs_button_add_dialog */
     $paragraphs_button_add_dialog = $add_in_between_row->find('css', 'button.paragraphs_ee__add-in-between__dialog-button');
     $this->assertNotEmpty($paragraphs_button_add_dialog);
     // Open dialog.
@@ @@
    * @param int $delta
    *   Where to add paragraphs to the field using the opened dialog.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The NodeElement of the inserted paragraph or NULL in case of errors.
    */
   protected function addParagraph($field_name, $paragraph_type, $delta = -1): ?NodeElement {
-    /** @var \Drupal\FunctionalJavascriptTests\WebDriverWebAssert $assertSession */
+    /** @var WebDriverWebAssert $assertSession */
     $assertSession = $this->assertSession();

     $dialog = $this->openDialog($field_name, $delta);
@@ @@
     // Compose button selector.
     $button_selector = $field_name . '_' . $paragraph_type . '_add_more';

-    /** @var \Behat\Mink\Element\NodeElement $button */
+    /** @var NodeElement $button */
     $button = $dialog->find('css', '[name=' . $button_selector . ']');
     $this->assertNotEmpty($button);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/paragraphs_ee/tests/src/FunctionalJavascript/ParagraphsEEJavascriptTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\paragraphs_ee\FunctionalJavascript;

+use Behat\Mink\Exception\DriverException;
+use Behat\Mink\Exception\UnsupportedDriverActionException;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     if ($theme = getenv('THEME')) {
@@ @@
    * @param string|array $locator
    *   Selector locator.
    *
-   * @throws \Behat\Mink\Exception\DriverException
-   * @throws \Behat\Mink\Exception\UnsupportedDriverActionException
+   * @throws DriverException
+   * @throws UnsupportedDriverActionException
    */
   public function scrollClick($selector, $locator) {
     $this->scrollElementInView($selector, $locator);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/paragraphs_ee/tests/src/FunctionalJavascript/ParagraphsEEAddInBetweenTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\paragraphs_ee\FunctionalJavascript;

+use Drupal\FunctionalJavascriptTests\WebDriverWebAssert;
+use Behat\Mink\Element\NodeElement;
 /**
  * Tests the enhanced add-in-between paragraphs feature.
  *
@@ @@
     $session = $this->getSession();
     $page = $session->getPage();
     $driver = $session->getDriver();
-    /** @var \Drupal\FunctionalJavascriptTests\WebDriverWebAssert $assertSession */
+    /** @var WebDriverWebAssert $assertSession */
     $assertSession = $this->assertSession();

     // Check that add in between functionality is used.
@@ @@
     $assertSession->waitForElementVisible('css', '[data-drupal-selector=field-paragraphs] .paragraph-type--test-1');

     // Test adding a paragraph directly.
-    /** @var \Behat\Mink\Element\NodeElement $paragraph */
+    /** @var NodeElement $paragraph */
     $paragraph = $this->addParagraph('field_paragraphs', 'test_2');
     $this->assertNotEmpty($paragraph);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/paragraphs_ee/src/Form/ParagraphsCategoryForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\paragraphs_ee\Form;

+use Drupal\paragraphs_ee\ParagraphsCategoryInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Constructs an ParagraphsCategoryForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entityTypeManager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\paragraphs_ee\ParagraphsCategoryInterface $paragraphs_category */
+    /** @var ParagraphsCategoryInterface $paragraphs_category */
     $paragraphs_category = $this->entity;

     $form['label'] = [
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\paragraphs_ee\ParagraphsCategoryInterface $paragraphs_category */
+    /** @var ParagraphsCategoryInterface $paragraphs_category */
     $paragraphs_category = $this->entity;
     $status = $paragraphs_category->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/paragraphs_ee/src/Controller/ParagraphsOffCanvasBrowser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\paragraphs_ee\Controller;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Template\Attribute;

@@ @@
   public function getTitle($entity_type, $bundle, $form_mode, $field_name) {
     $title_default = $this->t('Add Paragraph', [], ['context' => 'Paragraphs Editor Enhancements']);

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->entityTypeManager()
       ->getStorage('entity_form_display')
       ->load($entity_type . '.' . $bundle . '.' . $form_mode);
@@ @@
   public function content($entity_type, $bundle, $form_mode, $field_name) {
     $build = [];

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->entityTypeManager()
       ->getStorage('entity_form_display')
       ->load($entity_type . '.' . $bundle . '.' . $form_mode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/paragraphs_ee/src/Controller/ParagraphsCategoryListBuilder.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new ParagraphsCategoryListBuilder.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, ConfigFactoryInterface $config_factory, MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/paragraphs_ee/paragraphs_ee.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\paragraphs_ee\ParagraphsCategoryInterface;
 /**
  * @file
  * Main functions for "Paragraphs Editor Enhancements" module.
@@ @@
       'base hook' => 'input',
       'render element' => 'element',
       'template' => 'input--submit--paragraph_action--image',
-      'path' => drupal_get_path('module', 'paragraphs_ee') . '/templates',
+      'path' => \Drupal::service('extension.list.module')->getPath('paragraphs_ee') . '/templates',
     ],
   ];
 }
@@ @@
  * Implements hook_paragraphs_ee_widget_access().
  */
 function paragraphs_ee_paragraphs_ee_widget_access(array $elements, FormStateInterface $form_state, array $context) {
-  /** @var \Drupal\paragraphs\Plugin\Field\FieldWidget\ParagraphsWidget $widget */
+  /** @var ParagraphsWidget $widget */
   $widget = $context['widget'];

   if (!($widget instanceof ParagraphsWidget) || ('modal' !== $widget->getSetting('add_mode'))) {
@@ @@
  * Implements hook_field_widget_multivalue_form_alter().
  */
 function paragraphs_ee_field_widget_multivalue_form_alter(array &$elements, FormStateInterface $form_state, array $context) {
-  /** @var \Drupal\paragraphs\Plugin\Field\FieldWidget\ParagraphsWidget $widget */
+  /** @var ParagraphsWidget $widget */
   $widget = $context['widget'];
   if (!($widget instanceof ParagraphsWidget)) {
     return;
@@ @@
   // Check if modifications to widget are allowed.
   $hook_arguments = [$elements, $form_state, $context];
   $access_results = \Drupal::moduleHandler()->invokeAll('paragraphs_ee_widget_access', $hook_arguments);
-  /** @var \Drupal\Core\Access\AccessResultInterface $result */
+  /** @var AccessResultInterface $result */
   $result = AccessResult::neutral();
   if (!empty($access_results)) {
     $result = array_shift($access_results);
@@ @@
     return;
   }

-  /** @var \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList $items */
+  /** @var EntityReferenceRevisionsFieldItemList $items */
   $items = $context['items'];

   // Add custom library.
@@ @@
   $types_available = ParagraphsType::loadMultiple(array_column($elements['add_more'], '#bundle_machine_name'));

   $buttons_ref = [];
-  /** @var \Drupal\paragraphs\Entity\ParagraphsType $type */
+  /** @var ParagraphsType $type */
   foreach ($types_available as $id => $type) {
     $button_id = "add_more_button_{$id}";
     $button = $elements['add_more'][$button_id];
@@ @@
   $elements['add_more']['#attached']['library'][] = 'paragraphs_ee/paragraphs_ee.categories';

   if (!empty($widget_third_party_settings['dialog_off_canvas'])) {
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $form_state->get('form_display');
     $elements['add_more']['#dialog_attributes']['data-dialog-off-canvas'] = 'true';
     $elements['add_more']['#dialog_attributes']['data-dialog-field-name'] = $items->getFieldDefinition()->getName();
@@ @@
  * Implements hook_form_BASE_FORM_ID_alter().
  */
 function paragraphs_ee_form_paragraphs_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var Drupal\paragraphs\ParagraphsTypeInterface $paragraph */
+  /** @var ParagraphsTypeInterface $paragraph */
   $paragraph = $form_state->getFormObject()->getEntity();

-  /** @var \Drupal\paragraphs_ee\ParagraphsCategoryInterface[] $categories */
+  /** @var ParagraphsCategoryInterface[] $categories */
   $categories = \Drupal::entityTypeManager()->getStorage('paragraphs_category')
     ->loadMultiple();
   // Sort the entities using the entity class's sort() method.
@@ @@
   if (isset($variables['element']['add_more_delta'])) {
     $variables['add']['add_more_delta'] = $variables['element']['add_more_delta'];
   }
-  /** @var \Drupal\paragraphs_ee\ParagraphsCategoryInterface[] $categories */
+  /** @var ParagraphsCategoryInterface[] $categories */
   $paragraphs_categories = \Drupal::entityTypeManager()->getStorage('paragraphs_category')
     ->loadMultiple();
   // Sort the entities using the entity class's sort() method.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


8) modules/contrib/paragraphs_ee/paragraphs_ee.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 /**
  * @file
  * Installation hooks for paragraphs_ee module.
@@ @@
  */
 function paragraphs_ee_update_8002() {
   $storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
-  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface[] $form_displays */
+  /** @var EntityFormDisplayInterface[] $form_displays */
   $form_displays = $storage->loadMultiple();
   foreach ($form_displays as $form_display) {
     $content = $form_display->get('content');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


9) modules/contrib/paragraphs_ee/paragraphs_ee.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList;
 /**
  * @file
  * Hooks for the paragraphs_ee module.
@@ @@
  *     form to set default values.
  */
 function hook_paragraphs_ee_widget_access(array $elements, FormStateInterface $form_state, array $context) {
-  /** @var \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList $items */
+  /** @var EntityReferenceRevisionsFieldItemList $items */
   $items = $context['items'];
   if (empty($items)) {
     return AccessResult::forbidden('No items available in widget.');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


10) modules/contrib/paragraphs_ee/modules/paragraphs_ee_sets/paragraphs_ee_sets.module:44

    ---------- begin diff ----------
@@ @@
  * Implements hook_field_widget_multivalue_form_alter().
  */
 function paragraphs_ee_sets_field_widget_multivalue_form_alter(array &$elements, FormStateInterface $form_state, array $context) {
-  /** @var \Drupal\paragraphs\Plugin\Field\FieldWidget\ParagraphsWidget $widget */
+  /** @var ParagraphsWidget $widget */
   $widget = $context['widget'];
   if (!($widget instanceof ParagraphsWidget)) {
     return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 10 files have been changed by Rector                                      

