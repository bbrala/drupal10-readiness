themes/contrib/materialize/Commands/materialize/SubThemeCommands.php
themes/contrib/materialize/STARTERKIT/STARTERKIT.theme
themes/contrib/materialize/autoload-fix.php
themes/contrib/materialize/materialize.drush.inc
themes/contrib/materialize/materialize.theme
themes/contrib/materialize/src/Annotation/MaterializeAlter.php
themes/contrib/materialize/src/Annotation/MaterializeConstant.php
themes/contrib/materialize/src/Annotation/MaterializeForm.php
themes/contrib/materialize/src/Annotation/MaterializePreprocess.php
themes/contrib/materialize/src/Annotation/MaterializePrerender.php
themes/contrib/materialize/src/Annotation/MaterializeProcess.php
themes/contrib/materialize/src/Annotation/MaterializeProvider.php
themes/contrib/materialize/src/Annotation/MaterializeSetting.php
themes/contrib/materialize/src/Annotation/MaterializeUpdate.php
themes/contrib/materialize/src/Annotation/PluginCallback.php
themes/contrib/materialize/src/Materialize.php
themes/contrib/materialize/src/Plugin/Alter/AlterInterface.php
themes/contrib/materialize/src/Plugin/Alter/ElementInfo.php
themes/contrib/materialize/src/Plugin/Alter/LibraryInfo.php
themes/contrib/materialize/src/Plugin/Alter/PageAttachments.php
themes/contrib/materialize/src/Plugin/Alter/ThemeRegistry.php
themes/contrib/materialize/src/Plugin/Alter/ThemeSuggestions.php
themes/contrib/materialize/src/Plugin/AlterManager.php
themes/contrib/materialize/src/Plugin/Form/FormBase.php
themes/contrib/materialize/src/Plugin/Form/FormInterface.php
themes/contrib/materialize/src/Plugin/Form/NodePreviewFormSelect.php
themes/contrib/materialize/src/Plugin/Form/SearchBlockForm.php
themes/contrib/materialize/src/Plugin/Form/SearchForm.php
themes/contrib/materialize/src/Plugin/Form/SystemThemeSettings.php
themes/contrib/materialize/src/Plugin/FormManager.php
themes/contrib/materialize/src/Plugin/PluginBase.php
themes/contrib/materialize/src/Plugin/PluginManager.php
themes/contrib/materialize/src/Plugin/Preprocess/Breadcrumb.php
themes/contrib/materialize/src/Plugin/Preprocess/FieldMultipleValueForm.php
themes/contrib/materialize/src/Plugin/Preprocess/FileLink.php
themes/contrib/materialize/src/Plugin/Preprocess/FileUploadHelp.php
themes/contrib/materialize/src/Plugin/Preprocess/FilterTips.php
themes/contrib/materialize/src/Plugin/Preprocess/FormElement.php
themes/contrib/materialize/src/Plugin/Preprocess/FormElementLabel.php
themes/contrib/materialize/src/Plugin/Preprocess/ImageWidget.php
themes/contrib/materialize/src/Plugin/Preprocess/Input.php
themes/contrib/materialize/src/Plugin/Preprocess/InputButton.php
themes/contrib/materialize/src/Plugin/Preprocess/Links.php
themes/contrib/materialize/src/Plugin/Preprocess/MaterializeCarousel.php
themes/contrib/materialize/src/Plugin/Preprocess/MaterializeDropdown.php
themes/contrib/materialize/src/Plugin/Preprocess/MaterializeModal.php
themes/contrib/materialize/src/Plugin/Preprocess/Menu.php
themes/contrib/materialize/src/Plugin/Preprocess/MenuLocalAction.php
themes/contrib/materialize/src/Plugin/Preprocess/MenuLocalTask.php
themes/contrib/materialize/src/Plugin/Preprocess/Page.php
themes/contrib/materialize/src/Plugin/Preprocess/Pager.php
themes/contrib/materialize/src/Plugin/Preprocess/PreprocessBase.php
themes/contrib/materialize/src/Plugin/Preprocess/PreprocessInterface.php
themes/contrib/materialize/src/Plugin/Preprocess/ProgressBar.php
themes/contrib/materialize/src/Plugin/Preprocess/Region.php
themes/contrib/materialize/src/Plugin/Preprocess/Select.php
themes/contrib/materialize/src/Plugin/Preprocess/Table.php
themes/contrib/materialize/src/Plugin/Preprocess/ViewsMiniPager.php
themes/contrib/materialize/src/Plugin/Preprocess/ViewsViewTable.php
themes/contrib/materialize/src/Plugin/PreprocessManager.php
themes/contrib/materialize/src/Plugin/Prerender/Link.php
themes/contrib/materialize/src/Plugin/Prerender/PrerenderBase.php
themes/contrib/materialize/src/Plugin/Prerender/PrerenderInterface.php
themes/contrib/materialize/src/Plugin/PrerenderManager.php
themes/contrib/materialize/src/Plugin/Process/Actions.php
themes/contrib/materialize/src/Plugin/Process/Details.php
themes/contrib/materialize/src/Plugin/Process/ManagedFile.php
themes/contrib/materialize/src/Plugin/Process/ProcessBase.php
themes/contrib/materialize/src/Plugin/Process/ProcessInterface.php
themes/contrib/materialize/src/Plugin/Process/Search.php
themes/contrib/materialize/src/Plugin/Process/TextFormat.php
themes/contrib/materialize/src/Plugin/ProcessManager.php
themes/contrib/materialize/src/Plugin/Setting/Components/Breadcrumbs/Breadcrumb.php
themes/contrib/materialize/src/Plugin/Setting/Components/Breadcrumbs/BreadcrumbHome.php
themes/contrib/materialize/src/Plugin/Setting/Components/Breadcrumbs/BreadcrumbTitle.php
themes/contrib/materialize/src/Plugin/Setting/General/Buttons/ButtonColorize.php
themes/contrib/materialize/src/Plugin/Setting/General/Buttons/ButtonIconize.php
themes/contrib/materialize/src/Plugin/Setting/General/Buttons/ButtonSize.php
themes/contrib/materialize/src/Plugin/Setting/General/Forms/FormsHasErrorValueToggle.php
themes/contrib/materialize/src/Plugin/Setting/General/Forms/FormsRequiredHasError.php
themes/contrib/materialize/src/Plugin/Setting/General/Forms/FormsSmartDescriptions.php
themes/contrib/materialize/src/Plugin/Setting/General/Forms/FormsSmartDescriptionsAllowedTags.php
themes/contrib/materialize/src/Plugin/Setting/General/Forms/FormsSmartDescriptionsLimit.php
themes/contrib/materialize/src/Plugin/Setting/General/Images/ImageResponsive.php
themes/contrib/materialize/src/Plugin/Setting/General/Images/ImageShape.php
themes/contrib/materialize/src/Plugin/Setting/General/Tables/TableBordered.php
themes/contrib/materialize/src/Plugin/Setting/General/Tables/TableCondensed.php
themes/contrib/materialize/src/Plugin/Setting/General/Tables/TableHover.php
themes/contrib/materialize/src/Plugin/Setting/General/Tables/TableResponsive.php
themes/contrib/materialize/src/Plugin/Setting/General/Tables/TableStriped.php
themes/contrib/materialize/src/Plugin/Setting/Schemas.php
themes/contrib/materialize/src/Plugin/Setting/SettingBase.php
themes/contrib/materialize/src/Plugin/Setting/SettingInterface.php
themes/contrib/materialize/src/Plugin/SettingManager.php
themes/contrib/materialize/src/Theme.php
themes/contrib/materialize/src/ThemeSettings.php
themes/contrib/materialize/src/Utility/ArrayObject.php
themes/contrib/materialize/src/Utility/Attributes.php
themes/contrib/materialize/src/Utility/Crypt.php
themes/contrib/materialize/src/Utility/DrupalAttributes.php
themes/contrib/materialize/src/Utility/Element.php
themes/contrib/materialize/src/Utility/Storage.php
themes/contrib/materialize/src/Utility/StorageItem.php
themes/contrib/materialize/src/Utility/Unicode.php
themes/contrib/materialize/src/Utility/Variables.php
themes/contrib/materialize/tmp/ActionsDropbutton.php
themes/contrib/materialize/tmp/Prerender/Dropbutton.php
themes/contrib/materialize/tmp/Prerender/Operations.php

34 files with changes
=====================

1) themes/contrib/materialize/src/Utility/Variables.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * An element object.
    *
-   * @var \Drupal\materialize\Utility\Element|FALSE
+   * @var Element|FALSE
    */
   public $element = FALSE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) themes/contrib/materialize/src/Utility/StorageItem.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The \Drupal\materialize\Storage instance this item belongs to.
    *
-   * @var \Drupal\materialize\Utility\Storage
+   * @var Storage
    */
   protected $storage;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) themes/contrib/materialize/src/Utility/Element.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\materialize\Utility;

+use Drupal\Core\Render\Renderer;
 use Drupal\materialize\Materialize;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Render\MarkupInterface;
@@ @@
   /**
    * The current state of the form.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $formState;

@@ @@
    *
    * @param array|string $element
    *   A render array element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function __construct(&$element = [], FormStateInterface $form_state = NULL) {
@@ @@
    *
    * @param array|string $element
    *   A render array element or a string.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   A current FormState instance, if any.
    *
    * @return \Drupal\materialize\Utility\Element
@@ @@
    *
    * @param array|string|\Drupal\materialize\Utility\Element $element
    *   A render array element, string or Element instance.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   A current FormState instance, if any.
    *
    * @return \Drupal\materialize\Utility\Element
@@ @@
   /**
    * Renders the final element HTML.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The rendered HTML.
    */
   public function render() {
-    /** @var \Drupal\Core\Render\Renderer $renderer */
+    /** @var Renderer $renderer */
     $renderer = \Drupal::service('renderer');
     return $renderer->render($this->array);
   }
@@ @@
   /**
    * Renders the final element HTML.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The rendered HTML.
    */
   public function renderPlain() {
-    /** @var \Drupal\Core\Render\Renderer $renderer */
+    /** @var Renderer $renderer */
     $renderer = \Drupal::service('renderer');
     return $renderer->renderPlain($this->array);
   }
@@ @@
    *
    * (Cannot be executed within another render context.)
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The rendered HTML.
    */
   public function renderRoot() {
-    /** @var \Drupal\Core\Render\Renderer $renderer */
+    /** @var Renderer $renderer */
     $renderer = \Drupal::service('renderer');
     return $renderer->renderRoot($this->array);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) themes/contrib/materialize/src/Utility/DrupalAttributes.php:108

    ---------- begin diff ----------
@@ @@
   /**
    * Stored attribute instances.
    *
-   * @var \Drupal\materialize\Utility\Attributes[]
+   * @var Attributes[]
    */
   protected $attributes = [];

@@ @@
    * @param string $type
    *   (optional) The type of attributes to use for this method.
    *
-   * @return \Drupal\materialize\Utility\Attributes
+   * @return Attributes
    *   An attributes object for $type.
    */
   public function getAttributes($type = DrupalAttributes::ATTRIBUTES) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) themes/contrib/materialize/src/Utility/ArrayObject.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\materialize\Utility;

+use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 use Drupal\Core\Render\AttachmentsInterface;
@@ @@
   /**
    * Merges an object's cacheable metadata into the variables array.
    *
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface|mixed $object
+   * @param CacheableDependencyInterface|mixed $object
    *   The object whose cacheability metadata to retrieve. If it implements
    *   CacheableDependencyInterface, its cacheability metadata will be used,
    *   otherwise, the passed in object must be assumed to be uncacheable, so
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) themes/contrib/materialize/src/ThemeSettings.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The current theme object.
    *
-   * @var \Drupal\materialize\Theme
+   * @var Theme
    */
   protected $theme;

@@ @@
   /**
    * Retrieves a specific theme's stored config settings.
    *
-   * @param \Drupal\materialize\Theme $theme
+   * @param Theme $theme
    *   A theme object.
    * @param bool $active_theme
    *   Flag indicating whether or not $theme is the active theme.
@@ @@
       $logo_url = FALSE;
       foreach (['svg', 'png', 'jpg'] as $type) {
         if (file_exists($theme->getPath() . "/logo.$type")) {
-          $logo_url = file_create_url($theme->getPath() . "/logo.$type");
+          $logo_url = \Drupal::service('file_url_generator')->generateAbsoluteString($theme->getPath() . "/logo.$type");
           break;
         }
       }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) themes/contrib/materialize/src/Theme.php:2

    ---------- begin diff ----------
@@ @@
 namespace Drupal\materialize;

 // use Drupal\materialize\Plugin\ProviderManager;
+use Drupal\materialize\Plugin\Setting\SettingInterface;
 use Drupal\materialize\Plugin\SettingManager;
 use Drupal\materialize\Plugin\UpdateManager;
 use Drupal\materialize\Utility\Crypt;
@@ @@
   /**
    * The current theme Extension object.
    *
-   * @var \Drupal\Core\Extension\Extension
+   * @var Extension
    */
   protected $theme;

@@ @@
   /**
    * Theme handler object.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * Theme constructor.
    *
-   * @param \Drupal\Core\Extension\Extension $theme
+   * @param Extension $theme
    *   A theme \Drupal\Core\Extension\Extension object.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler object.
    */
   public function __construct(Extension $theme, ThemeHandlerInterface $theme_handler) {
@@ @@
    * @param mixed $default
    *   Optional. The default value to use if $name does not exist.
    *
-   * @return mixed|\Drupal\materialize\Utility\StorageItem
+   * @return mixed|StorageItem
    *   The cached value for $name.
    */
   public function getCache($name, array $context = [], $default = []) {
@@ @@
    * @param string $name
    *   Optional. The name of a specific setting plugin instance to return.
    *
-   * @return \Drupal\materialize\Plugin\Setting\SettingInterface|\Drupal\materialize\Plugin\Setting\SettingInterface[]|NULL
+   * @return SettingInterface|SettingInterface[]|NULL
    *   If $name was provided, it will either return a specific setting plugin
    *   instance or NULL if not set. If $name was omitted it will return an array
    *   of setting plugin instances, keyed by their name.
@@ @@
   /**
    * Retrieves the theme's setting plugin instances.
    *
-   * @return \Drupal\materialize\Plugin\Setting\SettingInterface[]
+   * @return SettingInterface[]
    *   An associative array of setting objects, keyed by their name.
    *
    * @deprecated Will be removed in a future release. Use \Drupal\materialize\Theme::getSettingPlugin instead.
@@ @@
   /**
    * Retrieves the theme's cache from the database.
    *
-   * @return \Drupal\materialize\Utility\Storage
+   * @return Storage
    *   The cache object.
    */
   public function getStorage() {
@@ @@
   /**
    * Retrieves the theme settings instance.
    *
-   * @return \Drupal\materialize\ThemeSettings
+   * @return ThemeSettings
    *   All settings.
    */
   public function settings() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) themes/contrib/materialize/src/Plugin/SettingManager.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new \Drupal\materialize\Plugin\SettingManager object.
    *
-   * @param \Drupal\materialize\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    */
   public function __construct(Theme $theme) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) themes/contrib/materialize/src/Plugin/Setting/SettingInterface.php:49

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\materialize\Utility\Element
+   * @return Element
    *   The group element object.
    *
    * @deprecated Will be removed in a future release. Use \Drupal\materialize\Plugin\Setting\SettingInterface::getGroupElement
@@ @@
   /**
    * Retrieves the group form element the setting belongs to.
    *
-   * @param \Drupal\materialize\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\materialize\Utility\Element
+   * @return Element
    *   The group element object.
    */
   public function getGroupElement(Element $form, FormStateInterface $form_state);
@@ @@
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\materialize\Utility\Element
+   * @return Element
    *   The setting element object.
    *
    * @deprecated Will be removed in a future release. Use \Drupal\materialize\Plugin\Setting\SettingInterface::getSettingElement
@@ @@
   /**
    * Retrieves the form element for the setting.
    *
-   * @param \Drupal\materialize\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\materialize\Utility\Element
+   * @return Element
    *   The setting element object.
    */
   public function getSettingElement(Element $form, FormStateInterface $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) themes/contrib/materialize/src/Plugin/Setting/Schemas.php:81

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function updateTheme(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) themes/contrib/materialize/src/Plugin/ProcessManager.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new \Drupal\materialize\Plugin\ProcessManager object.
    *
-   * @param \Drupal\materialize\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    */
   public function __construct(Theme $theme) {
@@ @@
    *
    * @param array $element
    *   The element render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ @@
   /**
    * Processes elements with AJAX properties.
    *
-   * @param \Drupal\materialize\Utility\Element $element
+   * @param Element $element
    *   The element object.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ @@
   /**
    * Processes elements that have input groups.
    *
-   * @param \Drupal\materialize\Utility\Element $element
+   * @param Element $element
    *   The element object.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ @@
   /**
    * Traverses an element to find the closest button.
    *
-   * @param \Drupal\materialize\Utility\Element $element
+   * @param Element $element
    *   The element to iterate over.
    *
-   * @return \Drupal\materialize\Utility\Element|FALSE
+   * @return Element|FALSE
    *   The first button element or FALSE if no button could be found.
    */
   protected static function &findButton(Element $element) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) themes/contrib/materialize/src/Plugin/Process/ProcessInterface.php:19

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   The element render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) themes/contrib/materialize/src/Plugin/Process/ProcessBase.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Process a specific form element.
    *
-   * @param \Drupal\materialize\Utility\Element $element
+   * @param Element $element
    *   The element object.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) themes/contrib/materialize/src/Plugin/PrerenderManager.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new \Drupal\materialize\Plugin\PrerenderManager object.
    *
-   * @param \Drupal\materialize\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    */
   public function __construct(Theme $theme) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) themes/contrib/materialize/src/Plugin/Prerender/PrerenderBase.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Pre-render element callback.
    *
-   * @param \Drupal\materialize\Utility\Element $element
+   * @param Element $element
    *   The element object.
    */
   public static function preRenderElement(Element $element) {}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) themes/contrib/materialize/src/Plugin/PreprocessManager.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new \Drupal\materialize\Plugin\PreprocessManager object.
    *
-   * @param \Drupal\materialize\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    */
   public function __construct(Theme $theme) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) themes/contrib/materialize/src/Plugin/Preprocess/PreprocessBase.php:94

    ---------- begin diff ----------
@@ @@
   /**
    * Preprocess the variables array if an element is present.
    *
-   * @param \Drupal\materialize\Utility\Element $element
+   * @param Element $element
    *   The Element object.
-   * @param \Drupal\materialize\Utility\Variables $variables
+   * @param Variables $variables
    *   The Variables object.
    */
   protected function preprocessElement(Element $element, Variables $variables) {}
@@ @@
   /**
    * Preprocess the variables array.
    *
-   * @param \Drupal\materialize\Utility\Variables $variables
+   * @param Variables $variables
    *   The Variables object.
    */
   protected function preprocessVariables(Variables $variables) {}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) themes/contrib/materialize/src/Plugin/Preprocess/MaterializeDropdown.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * Preprocess links in the variables array to convert them from dropbuttons.
    *
-   * @param \Drupal\materialize\Utility\Variables $variables
+   * @param Variables $variables
    *   A variables object.
    */
   protected function preprocessLinks(Variables $variables) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) themes/contrib/materialize/src/Plugin/Preprocess/FilterTips.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\materialize\Plugin\Preprocess;

+use Drupal\filter\FilterFormatInterface;
+use Drupal\filter\Plugin\FilterBase;
 use Drupal\materialize\Annotation\MaterializePreprocess;
 use Drupal\materialize\Utility\Variables;
 use Drupal\Core\Url;
@@ @@
    * {@inheritdoc}
    */
   public function preprocessVariables(Variables $variables) {
-    /** @var \Drupal\filter\FilterFormatInterface $current_format */
+    /** @var FilterFormatInterface $current_format */
     $current_format = \Drupal::routeMatch()->getParameter('filter_format');
     $current_format_id = $current_format ? $current_format->id() : FALSE;

@@ @@
       $tips = [];

       // Iterate over each format's enabled filters.
-      /** @var \Drupal\filter\Plugin\FilterBase $filter */
+      /** @var FilterBase $filter */
       foreach ($format->filters() as $name => $filter) {
         // Ignore filters that are not enabled.
         if (!$filter->status) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) themes/contrib/materialize/src/Plugin/Preprocess/FileLink.php:27

    ---------- begin diff ----------
@@ @@
     $options = [];

     $file = ($variables['file'] instanceof File) ? $variables['file'] : File::load($variables['file']->fid);
-    $url = file_create_url($file->getFileUri());
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());

     $file_size = $file->getSize();
     $mime_type = $file->getMimeType();
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) themes/contrib/materialize/src/Plugin/PluginManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\materialize\Plugin;

+use Drupal\Core\Extension\ThemeHandlerInterface;
+use Drupal\Core\Theme\ThemeManager;
 use Drupal\materialize\Materialize;
 use Drupal\materialize\Theme;
 use Drupal\Core\Plugin\DefaultPluginManager;
@@ @@
   /**
    * The current theme.
    *
-   * @var \Drupal\materialize\Theme
+   * @var Theme
    */
   protected $theme;

@@ @@
   /**
    * The theme handler to check if theme exists.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * The theme manager to invoke alter hooks.
    *
-   * @var \Drupal\Core\Theme\ThemeManager
+   * @var ThemeManager
    */
   protected $themeManager;

@@ @@
   /**
    * Creates the discovery object.
    *
-   * @param \Drupal\materialize\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    * @param string|bool $subdir
    *   The plugin's subdirectory, for example Plugin/views/filter.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) themes/contrib/materialize/src/Plugin/PluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\materialize\Plugin;

+use Drupal\materialize\Theme;
 use Drupal\materialize\Materialize;

 /**
@@ @@
   /**
    * The currently set theme object.
    *
-   * @var \Drupal\materialize\Theme
+   * @var Theme
    */
   protected $theme;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) themes/contrib/materialize/src/Plugin/FormManager.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new \Drupal\materialize\Plugin\FormManager object.
    *
-   * @param \Drupal\materialize\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    */
   public function __construct(Theme $theme) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) themes/contrib/materialize/src/Plugin/Form/SystemThemeSettings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\materialize\Plugin\Form;

+use Drupal\materialize\Theme;
 use Drupal\materialize\Annotation\MaterializeForm;
 use Drupal\materialize\Materialize;
 use Drupal\materialize\Utility\Element;
@@ @@
   /**
    * Sets up the vertical tab groupings.
    *
-   * @param \Drupal\materialize\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function createGroups(Element $form, FormStateInterface $form_state) {
@@ @@
   /**
    * Retrieves the currently selected theme on the settings form.
    *
-   * @param \Drupal\materialize\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\materialize\Theme|false
+   * @return Theme|false
    *   The currently selected theme object or FALSE if not a Materialize theme.
    */
   public static function getTheme(Element $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) themes/contrib/materialize/src/Plugin/Form/FormInterface.php:16

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   Nested array of form elements that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $form_id
    *   String representing the name of the form itself. Typically this is the
@@ @@
   /**
    * The alter method to store the code.
    *
-   * @param \Drupal\materialize\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $form_id
    *   String representing the name of the form itself. Typically this is the
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function validateForm(array &$form, FormStateInterface $form_state);
@@ @@
   /**
    * Form validation handler.
    *
-   * @param \Drupal\materialize\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function validateFormElement(Element $form, FormStateInterface $form_state);
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function submitForm(array &$form, FormStateInterface $form_state);
@@ @@
   /**
    * Form submission handler.
    *
-   * @param \Drupal\materialize\Utility\Element $form
+   * @param Element $form
    *   The Element object that comprises the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function submitFormElement(Element $form, FormStateInterface $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


26) themes/contrib/materialize/src/Plugin/AlterManager.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new \Drupal\materialize\Plugin\AlterManager object.
    *
-   * @param \Drupal\materialize\Theme $theme
+   * @param Theme $theme
    *   The theme to use for discovery.
    */
   public function __construct(Theme $theme) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) themes/contrib/materialize/src/Plugin/Alter/ThemeSuggestions.php:78

    ---------- begin diff ----------
@@ @@
    *
    * @param array $suggestions
    *   The suggestions array.
-   * @param \Drupal\materialize\Utility\Variables $variables
+   * @param Variables $variables
    *   The variables object.
    * @param string $entity_type
    *   Optional. A specific type of entity to look for.
@@ @@
   /**
    * Extracts the entity from the element(s) passed in the Variables object.
    *
-   * @param \Drupal\materialize\Utility\Variables $variables
+   * @param Variables $variables
    *   The Variables object.
    * @param string $entity_type
    *   Optional. The entity type to attempt to retrieve.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The extracted entity, NULL if entity could not be found.
    */
   public function getEntity(Variables $variables, $entity_type = 'entity') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) themes/contrib/materialize/src/Plugin/Alter/ThemeRegistry.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\materialize\Plugin\Alter;

+use Drupal\materialize\Theme;
 use Drupal\materialize\Annotation\MaterializeAlter;
 use Drupal\materialize\Materialize;
 use Drupal\materialize\Plugin\PreprocessManager;
@@ @@
    *
    * Cannot use "$theme" because this is the Registry's ActiveTheme object.
    *
-   * @var \Drupal\materialize\Theme
+   * @var Theme
    */
   protected $currentTheme;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) themes/contrib/materialize/src/Materialize.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\materialize;

+use Drupal\materialize\Plugin\Form\FormInterface;
+use Drupal\materialize\Plugin\Alter\AlterInterface;
+use Drupal\Core\Theme\ThemeManager;
+use Drupal\materialize\Plugin\Preprocess\PreprocessInterface;
 use Drupal\materialize\Plugin\AlterManager;
 use Drupal\materialize\Plugin\FormManager;
 use Drupal\materialize\Plugin\PreprocessManager;
@@ @@

       // Iterate over each form identifier and look for a possible plugin.
       foreach ($ids as $id) {
-        /** @var \Drupal\materialize\Plugin\Form\FormInterface $form */
+        /** @var FormInterface $form */
         if ($form_manager->hasDefinition($id) && ($form = $form_manager->createInstance($id, ['theme' => $theme]))) {
           $data['#submit'][] = [get_class($form), 'submitForm'];
           $data['#validate'][] = [get_class($form), 'validateForm'];
@@ @@
       // Retrieve a list of alter definitions.
       $alter_manager = new AlterManager($theme);

-      /** @var \Drupal\materialize\Plugin\Alter\AlterInterface $class */
+      /** @var AlterInterface $class */
       if ($alter_manager->hasDefinition($hook) && ($class = $alter_manager->createInstance($hook, ['theme' => $theme]))) {
         $class->alter($data, $context1, $context2);
       }
@@ @@
       ];

       // Allow sub-themes to alter this array of patterns.
-      /** @var \Drupal\Core\Theme\ThemeManager $theme_manager */
+      /** @var ThemeManager $theme_manager */
       $theme_manager = \Drupal::service('theme.manager');
       $theme_manager->alter('materialize_colorize_text', $data);

@@ @@
    *
    * @param string $name
    *   The machine name of a theme. If omitted, the active theme will be used.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler object.
    *
-   * @return \Drupal\materialize\Theme
+   * @return Theme
    *   A theme object.
    */
   public static function getTheme($name = NULL, ThemeHandlerInterface $theme_handler = NULL) {
@@ @@
   /**
    * Retrieves the theme handler instance.
    *
-   * @return \Drupal\Core\Extension\ThemeHandlerInterface
+   * @return ThemeHandlerInterface
    *   The theme handler instance.
    */
   public static function getThemeHandler() {
@@ @@
       ];

       // Allow sub-themes to alter this array of patterns.
-      /** @var \Drupal\Core\Theme\ThemeManager $theme_manager */
+      /** @var ThemeManager $theme_manager */
       $theme_manager = \Drupal::service('theme.manager');
       $theme_manager->alter('materialize_iconize_text', $data);

@@ @@
     if (isset($info['materialize preprocess'])) {
       if ($preprocess_manager->hasDefinition($info['materialize preprocess'])) {
         $class = $preprocess_manager->createInstance($info['materialize preprocess'], ['theme' => $theme]);
-        /** @var \Drupal\materialize\Plugin\Preprocess\PreprocessInterface $class */
+        /** @var PreprocessInterface $class */
         $class->preprocess($variables, $hook, $info);
       }
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


30) themes/contrib/materialize/src/Annotation/PluginCallback.php:35

    ---------- begin diff ----------
@@ @@
    *
    * @see \Drupal\materialize\Materialize::addCallback()
    *
-   * @var \Drupal\materialize\Annotation\MaterializeConstant
+   * @var MaterializeConstant
    */
   public $action = Materialize::CALLBACK_APPEND;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


31) themes/contrib/materialize/src/Annotation/MaterializeUpdate.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\materialize\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * A short human-readable label.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label = '';

@@ @@
   /**
    * A detailed description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description = '';
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


32) themes/contrib/materialize/src/Annotation/MaterializeSetting.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\materialize\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Doctrine\Common\Annotations\Annotation\Attribute;
 use Doctrine\Common\Annotations\Annotation\Attributes;
 use Drupal\Component\Annotation\Plugin;
@@ @@
   /**
    * The setting's description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;

@@ @@
   /**
    * The setting's groups.
    *
-   * @var \Drupal\Core\Annotation\Translation[]
+   * @var Translation[]
    */
   public $groups = [];

@@ @@
   /**
    * The setting's title.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $title;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) themes/contrib/materialize/materialize.drush.inc:122

    ---------- begin diff ----------
@@ @@
   }

   // Ensure the STARTERKIT directory exists.
-  $starterkit_path = drush_normalize_path(drush_get_context('DRUSH_DRUPAL_ROOT') . '/' . drupal_get_path('theme', 'materialize') . '/STARTERKIT');
+  $starterkit_path = drush_normalize_path(drush_get_context('DRUSH_DRUPAL_ROOT') . '/' . \Drupal::service('extension.list.theme')->getPath('materialize') . '/STARTERKIT');
   if (!is_dir($starterkit_path)) {
     return drush_set_error('MATERIALIZE_STARTERKIT_NOT_FOUND', dt('The STARTERKIT directory was not found in "!directory"', ['!directory' => dirname($starterkit_path)]));
     // Allow localize.drupal.org to pick up the string to translate.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


34) themes/contrib/materialize/Commands/materialize/SubThemeCommands.php:105

    ---------- begin diff ----------
@@ @@
     ));

     // Ensure the STARTERKIT directory exists.
-    $starterkit_path = Utils::normalizePath($drupal_root . '/' . drupal_get_path('theme', 'materialize') . '/STARTERKIT');
+    $starterkit_path = Utils::normalizePath($drupal_root . '/' . \Drupal::service('extension.list.theme')->getPath('materialize') . '/STARTERKIT');
     if (!is_dir($starterkit_path)) {
       return drush_set_error('MATERIALIZE_STARTERKIT_NOT_FOUND',
         dt('The STARTERKIT directory was not found in "!directory"',
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 34 files have been changed by Rector                                      

