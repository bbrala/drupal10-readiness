diff --git a/modules/paragraphs_collection_demo/paragraphs_collection_demo.install b/modules/paragraphs_collection_demo/paragraphs_collection_demo.install
index b3f22e0..b5bffb2 100644
--- a/modules/paragraphs_collection_demo/paragraphs_collection_demo.install
+++ b/modules/paragraphs_collection_demo/paragraphs_collection_demo.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Installation hooks for paragraphs_collection_demo module.
@@ -91,7 +92,7 @@ function _paragraphs_collection_demo_add_background_plugin_field() {
 /**
  * Create demo article example.
  *
- * @return \Drupal\Core\Entity\EntityInterface|static
+ * @return EntityInterface|static
  *   Returns node.
  */
 function _paragraphs_collection_demo_create_demo_article() {
@@ -114,7 +115,7 @@ function _paragraphs_collection_demo_create_demo_article() {
   // PARAGRAPH DEMO ITEM: background image.
   // Image to be used for the background.
   $filename = 'kazuend-32607.jpg';
-  \Drupal::service('file_system')->copy(drupal_get_path('module', 'paragraphs_collection_demo') . '/files/' . $filename, 'public://' . $filename);
+  \Drupal::service('file_system')->copy(\Drupal::service('extension.list.module')->getPath('paragraphs_collection_demo') . '/files/' . $filename, 'public://' . $filename);
   $image = File::create([
     'uri' => 'public://' . $filename,
   ]);
@@ -288,7 +289,7 @@ function _paragraphs_collection_demo_create_demo_article() {
 /**
  * Creates demo content.
  *
- * @return \Drupal\Core\Entity\EntityInterface
+ * @return EntityInterface
  *   Returns node.
  */
 function _paragraphs_collection_demo_create_demo_article_1() {
@@ -360,7 +361,7 @@ function _paragraphs_collection_demo_create_demo_article_1() {
 
   // Create an image.
   $filename = 'nasa-43566.jpg';
-  \Drupal::service('file_system')->copy(drupal_get_path('module', 'paragraphs_collection_demo') . '/files/' . $filename, 'public://' . $filename);
+  \Drupal::service('file_system')->copy(\Drupal::service('extension.list.module')->getPath('paragraphs_collection_demo') . '/files/' . $filename, 'public://' . $filename);
   $image = File::create([
     'uri' => 'public://' . $filename,
   ]);
@@ -411,7 +412,7 @@ function _paragraphs_collection_demo_create_demo_article_1() {
 /**
  * Create demo grid article example.
  *
- * @return \Drupal\Core\Entity\EntityInterface
+ * @return EntityInterface
  *   Returns node.
  */
 function _paragraphs_collection_demo_create_grid_article() {
@@ -483,7 +484,7 @@ These are the voyages of the starship Enterprise. Its five-year mission: to expl
  * @param array $paragraphs
  *   Array of paragraphs entites.
  *
- * @return \Drupal\Core\Entity\EntityInterface
+ * @return EntityInterface
  *   Saved node entity.
  */
 function _paragraphs_collection_demo_create_node($title, array $paragraphs) {
@@ -507,7 +508,7 @@ function _paragraphs_collection_demo_create_node($title, array $paragraphs) {
  * @param string $format
  *   Text format.
  *
- * @return \Drupal\Core\Entity\EntityInterface
+ * @return EntityInterface
  *   Paragraphs text entity.
  */
 function _paragraphs_collection_demo_create_text_paragraph($text, $format = 'basic_html') {
@@ -530,7 +531,7 @@ function _paragraphs_collection_demo_create_text_paragraph($text, $format = 'bas
  * @param string $layout
  *   Layout name.
  *
- * @return \Drupal\Core\Entity\EntityInterface
+ * @return EntityInterface
  *   Paragraphs grid entity.
  */
 function _paragraphs_collection_demo_create_grid_paragraph(array $items, $layout) {
@@ -555,12 +556,12 @@ function _paragraphs_collection_demo_create_grid_paragraph(array $items, $layout
  * @param string $alt
  *   Image alt. If not set $title value will be used.
  *
- * @return \Drupal\Core\Entity\EntityInterface
+ * @return EntityInterface
  *   Paragraphs image entity.
  */
 function _paragraphs_collection_demo_create_image_paragraph($filename, $title, $alt = NULL) {
   // Create image from module files.
-  \Drupal::service('file_system')->copy(drupal_get_path('module', 'paragraphs_collection_demo') . '/files/' . $filename, 'public://' . $filename);
+  \Drupal::service('file_system')->copy(\Drupal::service('extension.list.module')->getPath('paragraphs_collection_demo') . '/files/' . $filename, 'public://' . $filename);
   $image = File::create([
     'uri' => 'public://' . $filename,
   ]);
@@ -586,7 +587,7 @@ function _paragraphs_collection_demo_create_image_paragraph($filename, $title, $
  * @param array $items
  *   Accordion items.
  *
- * @return \Drupal\Core\Entity\EntityInterface
+ * @return EntityInterface
  *   Paragraphs accordion entity.
  */
 function _paragraphs_collection_demo_create_accordion_paragraph(array $items) {
diff --git a/modules/paragraphs_collection_demo/src/Plugin/paragraphs/Behavior/ParagraphsAnchorPlugin.php b/modules/paragraphs_collection_demo/src/Plugin/paragraphs/Behavior/ParagraphsAnchorPlugin.php
index 7eea579..05282eb 100644
--- a/modules/paragraphs_collection_demo/src/Plugin/paragraphs/Behavior/ParagraphsAnchorPlugin.php
+++ b/modules/paragraphs_collection_demo/src/Plugin/paragraphs/Behavior/ParagraphsAnchorPlugin.php
@@ -26,7 +26,7 @@ class ParagraphsAnchorPlugin extends ParagraphsBehaviorBase {
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -39,9 +39,9 @@ class ParagraphsAnchorPlugin extends ParagraphsBehaviorBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityFieldManagerInterface $entity_field_manager, ConfigFactoryInterface $config_factory) {
diff --git a/modules/paragraphs_collection_demo/src/Plugin/paragraphs/Behavior/ParagraphsSliderPlugin.php b/modules/paragraphs_collection_demo/src/Plugin/paragraphs/Behavior/ParagraphsSliderPlugin.php
index 600ce87..42b342e 100644
--- a/modules/paragraphs_collection_demo/src/Plugin/paragraphs/Behavior/ParagraphsSliderPlugin.php
+++ b/modules/paragraphs_collection_demo/src/Plugin/paragraphs/Behavior/ParagraphsSliderPlugin.php
@@ -42,21 +42,21 @@ class ParagraphsSliderPlugin extends ParagraphsBehaviorBase implements Container
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
@@ -69,15 +69,15 @@ class ParagraphsSliderPlugin extends ParagraphsBehaviorBase implements Container
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
    * @param \Drupal\slick\SlickManagerInterface $slick_manager
    *   The slick manager service.
    * @param \Drupal\core\Entity\EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   Current user for permissions scope.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityFieldManagerInterface $entity_field_manager, SlickManagerInterface $slick_manager, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, AccountProxyInterface $currentUser) {
@@ -305,7 +305,7 @@ class ParagraphsSliderPlugin extends ParagraphsBehaviorBase implements Container
   /**
    * Returns all fields that have cardinality greater than one.
    *
-   * @param \Drupal\paragraphs\Entity\ParagraphsType $paragraphs_type
+   * @param ParagraphsType $paragraphs_type
    *
    * @return array
    *   A list of fields of the paragraph type,
diff --git a/modules/paragraphs_collection_demo/tests/src/Functional/ParagraphsAccordionPluginTest.php b/modules/paragraphs_collection_demo/tests/src/Functional/ParagraphsAccordionPluginTest.php
index 310c2a2..c8bcb45 100644
--- a/modules/paragraphs_collection_demo/tests/src/Functional/ParagraphsAccordionPluginTest.php
+++ b/modules/paragraphs_collection_demo/tests/src/Functional/ParagraphsAccordionPluginTest.php
@@ -45,11 +45,11 @@ class ParagraphsAccordionPluginTest extends ParagraphsTestBase {
    */
   public function testCreatingAccordionContent() {
     $this->drupalGet('node/add/paragraphed_accordion_test');
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_accordion_add_more');
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_0_subform_paragraphs_accordion_paragraphs_accordion_content_add_more');
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_0_subform_paragraphs_accordion_paragraphs_accordion_content_add_more');
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_0_subform_paragraphs_accordion_paragraphs_accordion_content_add_more');
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_0_subform_paragraphs_accordion_paragraphs_accordion_content_add_more');
+    $this->submitForm(NULL, 'field_paragraphs_accordion_add_more');
+    $this->submitForm(NULL, 'field_paragraphs_0_subform_paragraphs_accordion_paragraphs_accordion_content_add_more');
+    $this->submitForm(NULL, 'field_paragraphs_0_subform_paragraphs_accordion_paragraphs_accordion_content_add_more');
+    $this->submitForm(NULL, 'field_paragraphs_0_subform_paragraphs_accordion_paragraphs_accordion_content_add_more');
+    $this->submitForm(NULL, 'field_paragraphs_0_subform_paragraphs_accordion_paragraphs_accordion_content_add_more');
     $edit = [
       'title[0][value]' => 'Accordion',
       'field_paragraphs[0][subform][paragraphs_accordion_paragraphs][0][subform][field_accordion_content][0][value]' => 'Title',
@@ -57,7 +57,7 @@ class ParagraphsAccordionPluginTest extends ParagraphsTestBase {
       'field_paragraphs[0][subform][paragraphs_accordion_paragraphs][2][subform][field_accordion_content][0][value]' => 'Second title',
       'field_paragraphs[0][subform][paragraphs_accordion_paragraphs][3][subform][field_accordion_content][0][value]' => 'Second Body text.',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $node = $this->getNodeByTitle('Accordion');
     $this->drupalGet('node/' . $node->id());
     // Ensure expected markup for an accordion.
@@ -66,18 +66,25 @@ class ParagraphsAccordionPluginTest extends ParagraphsTestBase {
       ':items-class' => 'field__items',
     ]);
     $this->assertTrue(!empty($elements), 'The proper accordion markup was found.');
+    $this->drupalGet('admin/structure/paragraphs_type/accordion/fields/paragraph.accordion.paragraphs_accordion_paragraphs/delete');
 
-    $this->drupalPostForm('admin/structure/paragraphs_type/accordion/fields/paragraph.accordion.paragraphs_accordion_paragraphs/delete', [], t('Delete'));
-    $this->assertText('The field Accordion has been deleted from the Accordion content type.');
+    $this->submitForm([], t('Delete'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The field Accordion has been deleted from the Accordion content type.');
 
     $node = $this->getNodeByTitle('Accordion');
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet('admin/structure/paragraphs_type/accordion');
-    $this->assertResponse(200);
-    $this->drupalPostForm(NULL, ['behavior_plugins[accordion][enabled]' => TRUE], t('Save'));
-    $this->assertText('The Accordion plugin cannot be enabled if the accordion field is missing.');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->submitForm(['behavior_plugins[accordion][enabled]' => TRUE], t('Save'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The Accordion plugin cannot be enabled if the accordion field is missing.');
   }
 
   /**
@@ -85,12 +92,21 @@ class ParagraphsAccordionPluginTest extends ParagraphsTestBase {
    */
   public function testConfigurationForm() {
     $this->drupalGet('admin/structure/paragraphs_type/accordion_content');
-    $this->assertText('There are no fields available with the cardinality greater than one. Please add at least one in the Manage fields page.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There are no fields available with the cardinality greater than one. Please add at least one in the Manage fields page.');
 
     $this->drupalGet('admin/structure/paragraphs_type/accordion');
-    $this->assertText('Accordion effect for paragraphs.');
-    $this->assertOptionSelected('edit-behavior-plugins-accordion-settings-paragraph-accordion-field', 'paragraphs_accordion_paragraphs');
-    $this->assertText('Choose a field to be used as the accordion container.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Accordion effect for paragraphs.');
+    $this->assertTrue($this->assertSession()->optionExists('edit-behavior-plugins-accordion-settings-paragraph-accordion-field', 'paragraphs_accordion_paragraphs')->hasAttribute('selected'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Choose a field to be used as the accordion container.');
   }
 
 }
diff --git a/modules/paragraphs_collection_demo/tests/src/Functional/ParagraphsAnchorPluginTest.php b/modules/paragraphs_collection_demo/tests/src/Functional/ParagraphsAnchorPluginTest.php
index 7c28f04..ab0b504 100644
--- a/modules/paragraphs_collection_demo/tests/src/Functional/ParagraphsAnchorPluginTest.php
+++ b/modules/paragraphs_collection_demo/tests/src/Functional/ParagraphsAnchorPluginTest.php
@@ -28,8 +28,14 @@ class ParagraphsAnchorPluginTest extends ParagraphsTestBase {
     $this->loginAsAdmin(['edit behavior plugin settings']);
 
     $this->drupalGet('admin/structure/paragraphs_type/add');
-    $this->assertText('Anchor');
-    $this->assertText('Allows to set ID attribute that can be used as jump position in URLs.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Anchor');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Allows to set ID attribute that can be used as jump position in URLs.');
 
     $paragraph_type = 'text_test';
     $this->addParagraphsType($paragraph_type);
@@ -40,7 +46,7 @@ class ParagraphsAnchorPluginTest extends ParagraphsTestBase {
     $edit = [
       'behavior_plugins[anchor][enabled]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
 
     $this->addParagraphedContentType('paragraphed_test', 'text');
     $this->setParagraphsWidgetMode('paragraphed_test', 'text', 'closed');
@@ -50,21 +56,27 @@ class ParagraphsAnchorPluginTest extends ParagraphsTestBase {
       'edit behavior plugin settings',
     ]);
     $this->drupalGet('node/add/paragraphed_test');
-    $this->drupalPostForm(NULL, [], 'text_text_test_add_more');
-    $this->assertText('Anchor');
-    $this->assertText('Sets an ID attribute prefixed with "scrollto-" in the Paragraph so that it can be used as a jump-to link.');
+    $this->submitForm([], 'text_text_test_add_more');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Anchor');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Sets an ID attribute prefixed with "scrollto-" in the Paragraph so that it can be used as a jump-to link.');
     $edit = [
       'title[0][value]' => t('Anchor'),
       'text[0][subform][paragraphs_text][0][value]' => t('Test Anchor'),
       'text[0][behavior_plugins][anchor][anchor]' => 'element-anchor',
     ];
 
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertRaw('id="scrollto-element-anchor"');
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->responseContains('id="scrollto-element-anchor"');
 
     // Test settings summary.
     $this->clickLink('Edit');
-    $this->assertRaw('<span class="summary-content">Test Anchor</span></div><div class="paragraphs-plugin-wrapper"><span class="summary-plugin"><span class="summary-plugin-label">Anchor</span>scrollto-element-anchor');
+    $this->assertSession()->responseContains('<span class="summary-content">Test Anchor</span></div><div class="paragraphs-plugin-wrapper"><span class="summary-plugin"><span class="summary-plugin-label">Anchor</span>scrollto-element-anchor');
   }
 
 }
