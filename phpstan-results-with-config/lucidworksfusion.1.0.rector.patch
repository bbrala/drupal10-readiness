diff --git a/fusion_connector.info.yml b/fusion_connector.info.yml
index cc6eb9c..1e51300 100644
--- a/fusion_connector.info.yml
+++ b/fusion_connector.info.yml
@@ -1,8 +1,7 @@
 name: 'Fusion Connector'
 type: module
 description: 'Fusion connector Implementation'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
 package: 'Web services'
 configure: fusion_connector.settings
 dependencies:
diff --git a/src/Access/EntityAccessChecker.php b/src/Access/EntityAccessChecker.php
index 3dd6de7..eb974df 100644
--- a/src/Access/EntityAccessChecker.php
+++ b/src/Access/EntityAccessChecker.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\fusion_connector\Access;
 
+use Drupal\jsonapi\JsonApiResource\LabelOnlyResourceObject;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultReasonInterface;
 use Drupal\Core\Access\AccessResultForbidden;
@@ -31,13 +33,13 @@ class EntityAccessChecker extends JsonApiEntityAccessChecker {
   /**
    * Get the object to normalize and the access based on the provided entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to test access for.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The account with which access should be checked. Defaults to
    *   the current user.
    *
-   * @return \Drupal\jsonapi\JsonApiResource\ResourceObject|\Drupal\jsonapi\JsonApiResource\LabelOnlyResourceObject|\Drupal\jsonapi\Exception\EntityAccessDeniedHttpException
+   * @return \Drupal\jsonapi\JsonApiResource\ResourceObject|LabelOnlyResourceObject|EntityAccessDeniedHttpException
    *   The ResourceObject, a LabelOnlyResourceObject or an
    *   EntityAccessDeniedHttpException object if neither is accessible. All
    *   three possible return values carry the access result cacheability.
@@ -129,15 +131,15 @@ class EntityAccessChecker extends JsonApiEntityAccessChecker {
   /**
    * Checks access to the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which access should be evaluated.
    * @param string $operation
    *   The entity operation for which access should be evaluated.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The account with which access should be checked. Defaults to
    *   the current user.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface|\Drupal\Core\Access\AccessResultReasonInterface
+   * @return AccessResultInterface|AccessResultReasonInterface
    *   The access check result.
    */
   public function checkEntityAccess(
diff --git a/src/Controller/EntityResource.php b/src/Controller/EntityResource.php
index 320921f..e284e1f 100644
--- a/src/Controller/EntityResource.php
+++ b/src/Controller/EntityResource.php
@@ -24,18 +24,18 @@ class EntityResource extends JsonApiEntityResourse {
   /**
    * Gets the relationship of an entity.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The base JSON:API resource type for the request to be served.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The requested entity.
    * @param string $related
    *   The related field name.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    * @param int $response_code
    *   The response code. Defaults to 200.
    *
-   * @return \Drupal\jsonapi\ResourceResponse
+   * @return ResourceResponse
    *   The response.
    */
   public function getRelationship(
@@ -71,23 +71,23 @@ class EntityResource extends JsonApiEntityResourse {
   /**
    * Builds a response with the appropriate wrapped document.
    *
-   * @param \Drupal\jsonapi\JsonApiResource\TopLevelDataInterface $data
+   * @param TopLevelDataInterface $data
    *   The data to wrap.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
-   * @param \Drupal\jsonapi\JsonApiResource\IncludedData $includes
+   * @param IncludedData $includes
    *   The resources to be included in the document. Use NullData if
    *   there should be no included resources in the document.
    * @param int $response_code
    *   The response code.
    * @param array $headers
    *   An array of response headers.
-   * @param \Drupal\jsonapi\JsonApiResource\LinkCollection $links
+   * @param LinkCollection $links
    *   The URLs to which to link. A 'self' link is added automatically.
    * @param array $meta
    *   (optional) The top-level metadata.
    *
-   * @return \Drupal\jsonapi\ResourceResponse
+   * @return ResourceResponse
    *   The response.
    */
   protected function buildWrappedResponse(
diff --git a/src/Controller/FusionConnectorEntryPoint.php b/src/Controller/FusionConnectorEntryPoint.php
index 9008850..fadc3b7 100644
--- a/src/Controller/FusionConnectorEntryPoint.php
+++ b/src/Controller/FusionConnectorEntryPoint.php
@@ -28,7 +28,7 @@ class FusionConnectorEntryPoint extends EntryPoint {
   /**
    * Controller to list all the resources.
    *
-   * @return \Drupal\jsonapi\ResourceResponse
+   * @return ResourceResponse
    *   The response object.
    */
   public function index() {
diff --git a/src/EventSubscriber/ConfigSubscriber.php b/src/EventSubscriber/ConfigSubscriber.php
index d123a2f..792c351 100644
--- a/src/EventSubscriber/ConfigSubscriber.php
+++ b/src/EventSubscriber/ConfigSubscriber.php
@@ -2,13 +2,13 @@
 
 namespace Drupal\fusion_connector\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\Core\Config\ConfigCrudEvent;
 use Drupal\Core\Config\ConfigEvents;
 use Drupal\Core\DrupalKernelInterface;
 use Drupal\Core\Routing\RouteBuilderInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -19,23 +19,23 @@ class ConfigSubscriber implements EventSubscriberInterface {
   /**
    * The Drupal kernel.
    *
-   * @var \Drupal\Core\DrupalKernelInterface
+   * @var DrupalKernelInterface
    */
   protected $drupalKernel;
 
   /**
    * The route building service.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routeBuilder;
 
   /**
    * Constructs a ConfigSubscriber object.
    *
-   * @param \Drupal\Core\DrupalKernelInterface $drupal_kernel
+   * @param DrupalKernelInterface $drupal_kernel
    *   The Drupal kernel.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $route_builder
+   * @param RouteBuilderInterface $route_builder
    *   The route building service.
    */
   public function __construct(DrupalKernelInterface $drupal_kernel, RouteBuilderInterface $route_builder) {
@@ -46,7 +46,7 @@ class ConfigSubscriber implements EventSubscriberInterface {
   /**
    * Rebuilds container and routes  when 'path_prefix' configuration is changed.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The Event to process.
    */
   public function onSave(ConfigCrudEvent $event) {
@@ -72,10 +72,10 @@ class ConfigSubscriber implements EventSubscriberInterface {
   /**
    * Associates JSON:API Extras' config cache tag with all JSON:API responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The response event.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     if ($event->getRequest()->getRequestFormat() !== 'api_json') {
       return;
     }
diff --git a/src/EventSubscriber/ResourceObjectNormalizationCacher.php b/src/EventSubscriber/ResourceObjectNormalizationCacher.php
index 8e06415..3557b4b 100644
--- a/src/EventSubscriber/ResourceObjectNormalizationCacher.php
+++ b/src/EventSubscriber/ResourceObjectNormalizationCacher.php
@@ -17,7 +17,7 @@ class ResourceObjectNormalizationCacher extends JsonApiResourceObjectNormalizati
   /**
    * Adds a normalization to be cached after the response has been sent.
    *
-   * @param \Drupal\jsonapi\JsonApiResource\ResourceObject $object
+   * @param ResourceObject $object
    *   The resource object for which to generate a cache item.
    * @param array $normalization_parts
    *   The normalization parts to cache.
@@ -47,7 +47,7 @@ class ResourceObjectNormalizationCacher extends JsonApiResourceObjectNormalizati
   /**
    * Generates a lookup render array for a normalization.
    *
-   * @param \Drupal\jsonapi\JsonApiResource\ResourceObject $object
+   * @param ResourceObject $object
    *   The resource object for which to generate a cache item.
    *
    * @return array
diff --git a/src/EventSubscriber/ResourceResponseSubscriber.php b/src/EventSubscriber/ResourceResponseSubscriber.php
index 5bd2976..ef0e059 100644
--- a/src/EventSubscriber/ResourceResponseSubscriber.php
+++ b/src/EventSubscriber/ResourceResponseSubscriber.php
@@ -2,11 +2,11 @@
 
 namespace Drupal\fusion_connector\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\jsonapi\Normalizer\Value\CacheableNormalization;
 use Drupal\jsonapi\ResourceResponse;
 use Drupal\jsonapi\EventSubscriber\ResourceResponseSubscriber as JsonApiResourceResponseSubscriber;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\Serializer\SerializerInterface;
 
 /**
@@ -37,10 +37,10 @@ class ResourceResponseSubscriber extends JsonApiResourceResponseSubscriber {
   /**
    * Serializes ResourceResponse responses' data, and removes that data.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $response = $event->getResponse();
     if (!$response instanceof ResourceResponse) {
       return;
@@ -61,11 +61,11 @@ class ResourceResponseSubscriber extends JsonApiResourceResponseSubscriber {
    * contexts), so instead, allow those to "leak" and collect them here in
    * a render context.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
-   * @param \Drupal\jsonapi\ResourceResponse $response
+   * @param ResourceResponse $response
    *   The response from the JSON:API resource.
-   * @param \Symfony\Component\Serializer\SerializerInterface $serializer
+   * @param SerializerInterface $serializer
    *   The serializer to use.
    * @param string|null $format
    *   The response format, or NULL in case the response does not need a format,
@@ -98,7 +98,7 @@ class ResourceResponseSubscriber extends JsonApiResourceResponseSubscriber {
   /**
    * Generates a top-level JSON:API normalization context.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request from which the context can be derived.
    *
    * @return array
diff --git a/src/Form/FusionConnectorEntitiesAccessForm.php b/src/Form/FusionConnectorEntitiesAccessForm.php
index 957e898..9c81620 100644
--- a/src/Form/FusionConnectorEntitiesAccessForm.php
+++ b/src/Form/FusionConnectorEntitiesAccessForm.php
@@ -26,18 +26,18 @@ class FusionConnectorEntitiesAccessForm extends ConfigFormBase
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\ProxyClass\Routing\RouteBuilder $router_builder
+   * @param RouteBuilder $router_builder
    *   The router builder to rebuild menus after saving config entity.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager.
    */
   public function __construct(
diff --git a/src/Form/FusionConnectorFieldsAccessForm.php b/src/Form/FusionConnectorFieldsAccessForm.php
index 8a6a9f1..cf9977e 100644
--- a/src/Form/FusionConnectorFieldsAccessForm.php
+++ b/src/Form/FusionConnectorFieldsAccessForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\fusion_connector\Form;
 
+use Drupal\Core\Config\Entity\ConfigEntityTypeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -25,21 +26,21 @@ class FusionConnectorFieldsAccessForm extends ConfigFormBase
   /**
    * The current route match.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The JSON:API resource type repository.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepository
+   * @var ResourceTypeRepository
    */
   protected $resourceTypeRepository;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;
 
@@ -51,15 +52,15 @@ class FusionConnectorFieldsAccessForm extends ConfigFormBase
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\ProxyClass\Routing\RouteBuilder $router_builder
+   * @param RouteBuilder $router_builder
    *   The router builder.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entityFieldManager
+   * @param EntityFieldManager $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepository $resource_type_repository
+   * @param ResourceTypeRepository $resource_type_repository
    *   The jsonapi resource type repository.
    */
   public function __construct(
@@ -133,7 +134,7 @@ class FusionConnectorFieldsAccessForm extends ConfigFormBase
     ) : [];
     $resource_config_id = sprintf('%s--%s', $bundle, $entity_type_id);
 
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityTypeInterface $entity_type */
+    /** @var ConfigEntityTypeInterface $entity_type */
     $entity_type = \Drupal::entityTypeManager()->getDefinition($bundle);
     $bundle = $resource_type->getBundle();
 
@@ -200,7 +201,7 @@ class FusionConnectorFieldsAccessForm extends ConfigFormBase
   /**
    * Gets all field names for a given entity type and bundle.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   Entity type.
    * @param string $bundle
    *   Bundle.
diff --git a/src/Form/FusionConnectorLanguageAccessForm.php b/src/Form/FusionConnectorLanguageAccessForm.php
index 85bdf85..e2674e8 100644
--- a/src/Form/FusionConnectorLanguageAccessForm.php
+++ b/src/Form/FusionConnectorLanguageAccessForm.php
@@ -24,9 +24,9 @@ class FusionConnectorLanguageAccessForm extends ConfigFormBase {
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\ProxyClass\Routing\RouteBuilder $router_builder
+   * @param RouteBuilder $router_builder
    *   The router builder to rebuild menus after saving config entity.
    */
   public function __construct(
@@ -100,7 +100,7 @@ class FusionConnectorLanguageAccessForm extends ConfigFormBase {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The form config.
    *
    * @return array
diff --git a/src/Form/FusionConnectorLanguageTypeAccessForm.php b/src/Form/FusionConnectorLanguageTypeAccessForm.php
index 15bc4be..682bd87 100644
--- a/src/Form/FusionConnectorLanguageTypeAccessForm.php
+++ b/src/Form/FusionConnectorLanguageTypeAccessForm.php
@@ -20,14 +20,14 @@ class FusionConnectorLanguageTypeAccessForm extends ConfigFormBase {
   /**
    * The current route match.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The JSON:API resource type repository.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepository
+   * @var ResourceTypeRepository
    */
   protected $resourceTypeRepository;
 
@@ -39,13 +39,13 @@ class FusionConnectorLanguageTypeAccessForm extends ConfigFormBase {
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\ProxyClass\Routing\RouteBuilder $router_builder
+   * @param RouteBuilder $router_builder
    *   The router builder to rebuild menus after saving config entity.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object that contains query params.
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepository $resource_type_repository
+   * @param ResourceTypeRepository $resource_type_repository
    *   The service that provides information about all the entity types.
    */
   public function __construct(
diff --git a/src/FusionConnectorPermissions.php b/src/FusionConnectorPermissions.php
index 35b39d4..9b802e2 100644
--- a/src/FusionConnectorPermissions.php
+++ b/src/FusionConnectorPermissions.php
@@ -28,32 +28,32 @@ class FusionConnectorPermissions implements ContainerInjectionInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The bundle information service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;
 
   /**
    * The bundle information service.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceType;
 
   /**
    * Constructs a TaxonomyPermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
+   * @param EntityTypeBundleInfoInterface $bundle_info
    *   Bundle information service.
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $resourceType
+   * @param ResourceTypeRepositoryInterface $resourceType
    *   Fusion connector resource type repository.
    */
   public function __construct(
diff --git a/src/FusionConnectorServiceProvider.php b/src/FusionConnectorServiceProvider.php
index af6f61a..62b2bf8 100644
--- a/src/FusionConnectorServiceProvider.php
+++ b/src/FusionConnectorServiceProvider.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\fusion_connector;
 
+use Symfony\Component\DependencyInjection\Definition;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\DependencyInjection\ServiceProviderBase;
 use Drupal\fusion_connector\EventSubscriber\ResourceObjectNormalizationCacher;
@@ -18,7 +19,7 @@ class FusionConnectorServiceProvider extends ServiceProviderBase {
    */
   public function alter(ContainerBuilder $container) {
 
-    /** @var \Symfony\Component\DependencyInjection\Definition $definition */
+    /** @var Definition $definition */
     $container_namespaces = $container->getParameter('container.namespaces');
     $container_modules = $container->getParameter('container.modules');
     $jsonapi_impostor_path = dirname(
diff --git a/src/JsonApiResource/LabelOnlyResourceObject.php b/src/JsonApiResource/LabelOnlyResourceObject.php
index 6b033cb..6010fed 100644
--- a/src/JsonApiResource/LabelOnlyResourceObject.php
+++ b/src/JsonApiResource/LabelOnlyResourceObject.php
@@ -21,7 +21,7 @@ final class LabelOnlyResourceObject extends ResourceObject {
   /**
    * The entity represented by this resource object.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
@@ -44,7 +44,7 @@ final class LabelOnlyResourceObject extends ResourceObject {
   /**
    * Gets the decorated entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The label for which to only normalize its label.
    */
   public function getEntity() {
@@ -54,7 +54,7 @@ final class LabelOnlyResourceObject extends ResourceObject {
   /**
    * Sets the underlying entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity.
    */
   protected function setEntity(EntityInterface $entity) {
diff --git a/src/JsonApiResource/Relationship.php b/src/JsonApiResource/Relationship.php
index 03eda6b..25711d3 100644
--- a/src/JsonApiResource/Relationship.php
+++ b/src/JsonApiResource/Relationship.php
@@ -27,16 +27,16 @@ class Relationship extends JsonApiRelationship {
   /**
    * Builds a LinkCollection for the given entity reference field.
    *
-   * @param \Drupal\jsonapi\JsonApiResource\ResourceObject $context
+   * @param ResourceObject $context
    *   The context resource object of the relationship object.
-   * @param \Drupal\Core\Field\EntityReferenceFieldItemListInterface $field
+   * @param EntityReferenceFieldItemListInterface $field
    *   The entity reference field from which to create the links.
-   * @param \Drupal\jsonapi\JsonApiResource\LinkCollection $links
+   * @param LinkCollection $links
    *   Any extra links for the Relationship, if a `self` link is not provided,
    *   one will be automatically added if the context resource is locatable and
    *   is not internal.
    *
-   * @return \Drupal\jsonapi\JsonApiResource\LinkCollection
+   * @return LinkCollection
    *   The built links.
    */
   protected static function buildLinkCollectionFromEntityReferenceField(ResourceObject $context, EntityReferenceFieldItemListInterface $field, LinkCollection $links) {
diff --git a/src/JsonApiResource/ResourceObject.php b/src/JsonApiResource/ResourceObject.php
index 5657c13..fcbc90a 100644
--- a/src/JsonApiResource/ResourceObject.php
+++ b/src/JsonApiResource/ResourceObject.php
@@ -33,16 +33,16 @@ class ResourceObject extends JsonApiResourceObject {
   /**
    * Builds a LinkCollection for the given entity.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The JSON:API resource type of the given entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to build links.
-   * @param \Drupal\jsonapi\JsonApiResource\LinkCollection $links
+   * @param LinkCollection $links
    *   (optional) Any extra links for the resource object, if a `self` link is
    *   not provided, one will be automatically added if the resource is
    *   locatable and is not an internal entity.
    *
-   * @return \Drupal\jsonapi\JsonApiResource\LinkCollection
+   * @return LinkCollection
    *   The built links.
    */
   protected static function buildLinksFromEntity(
diff --git a/src/Normalizer/EntityAccessDeniedHttpExceptionNormalizer.php b/src/Normalizer/EntityAccessDeniedHttpExceptionNormalizer.php
index ba932e3..d60d905 100644
--- a/src/Normalizer/EntityAccessDeniedHttpExceptionNormalizer.php
+++ b/src/Normalizer/EntityAccessDeniedHttpExceptionNormalizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\fusion_connector\Normalizer;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Url;
 use Drupal\jsonapi\Exception\EntityAccessDeniedHttpException;
 use Drupal\jsonapi\Normalizer\EntityAccessDeniedHttpExceptionNormalizer as JsonApiEntityAccessDeniedHttpExceptionNormalizer;
@@ -32,7 +33,7 @@ class EntityAccessDeniedHttpExceptionNormalizer extends JsonApiEntityAccessDenie
 
     if ($exception instanceof EntityAccessDeniedHttpException) {
       $error = $exception->getError();
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       $entity = $error['entity'];
       $pointer = $error['pointer'];
       $reason = $error['reason'];
diff --git a/src/Normalizer/ResourceObjectNormalizer.php b/src/Normalizer/ResourceObjectNormalizer.php
index 4878bf2..f16d406 100644
--- a/src/Normalizer/ResourceObjectNormalizer.php
+++ b/src/Normalizer/ResourceObjectNormalizer.php
@@ -32,14 +32,14 @@ class ResourceObjectNormalizer extends JsonApiResourceObjectNormalizer {
   /**
    * The entity normalization cacher.
    *
-   * @var \Drupal\jsonapi\EventSubscriber\ResourceObjectNormalizationCacher
+   * @var ResourceObjectNormalizationCacher
    */
   protected $cacher;
 
   /**
    * Constructs a ResourceObjectNormalizer object.
    *
-   * @param \Drupal\jsonapi\EventSubscriber\ResourceObjectNormalizationCacher $cacher
+   * @param ResourceObjectNormalizationCacher $cacher
    *   The entity normalization cacher.
    */
   public function __construct(ResourceObjectNormalizationCacher $cacher) {
@@ -136,7 +136,7 @@ class ResourceObjectNormalizer extends JsonApiResourceObjectNormalizer {
    * @param string $format
    *   The serialization format.
    *
-   * @return \Drupal\jsonapi\Normalizer\Value\CacheableNormalization
+   * @return CacheableNormalization
    *   The normalized value.
    */
   protected function serializeField($field, array $context, $format) {
diff --git a/src/Plugin/Derivative/LanguageAccessLocalTask.php b/src/Plugin/Derivative/LanguageAccessLocalTask.php
index a3d97ba..b4bea8a 100644
--- a/src/Plugin/Derivative/LanguageAccessLocalTask.php
+++ b/src/Plugin/Derivative/LanguageAccessLocalTask.php
@@ -15,14 +15,14 @@ class LanguageAccessLocalTask extends DeriverBase implements ContainerDeriverInt
   /**
    * Language manager interface.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   private $languageManager;
 
   /**
    * Constrcuts a LanguageAccessLocalTask object.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language manager interface.
    */
   public function __construct(LanguageManagerInterface $languageManager) {
diff --git a/src/ResourceType/FusionConnectorResourceTypeRepository.php b/src/ResourceType/FusionConnectorResourceTypeRepository.php
index e74a9a1..78d13e5 100644
--- a/src/ResourceType/FusionConnectorResourceTypeRepository.php
+++ b/src/ResourceType/FusionConnectorResourceTypeRepository.php
@@ -15,23 +15,23 @@ class FusionConnectorResourceTypeRepository {
   /**
    * The JSON:API resource type repository.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;
 
   /**
    * The bundle manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * ResourceTypeConverter constructor.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The JSON:API resource type repository.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_bundle_info
    *   The entity type bundle info service.
    */
   public function __construct(
diff --git a/src/Routing/FusionRoutes.php b/src/Routing/FusionRoutes.php
index e42d2ba..3625d6b 100644
--- a/src/Routing/FusionRoutes.php
+++ b/src/Routing/FusionRoutes.php
@@ -81,7 +81,7 @@ class FusionRoutes extends Routes {
   /**
    * Get all the relatable resource types for the selected entities.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceType $resource
+   * @param ResourceType $resource
    *   Resource.
    * @param array $selectedResourcesTypeNames
    *   Selected Resources Type Names.
@@ -119,7 +119,7 @@ class FusionRoutes extends Routes {
   /**
    * Get a unique route name for the JSON:API resource type and route type.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The resource type for which the route collection should be created.
    * @param string $route_type
    *   The route type. E.g. 'individual' or 'collection'.
@@ -137,7 +137,7 @@ class FusionRoutes extends Routes {
   /**
    * Get a unique route name for the file upload resource type and route type.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The resource type for which the route collection should be created.
    * @param string $route_type
    *   The route type. E.g. 'individual' or 'collection'.
diff --git a/tests/src/Functional/EntityAccessTest.php b/tests/src/Functional/EntityAccessTest.php
index ee5ab9d..5adecd0 100644
--- a/tests/src/Functional/EntityAccessTest.php
+++ b/tests/src/Functional/EntityAccessTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\fusion_connector\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Tests\jsonapi\Functional\JsonApiFunctionalTestBase;
 
@@ -27,14 +28,14 @@ class EntityAccessTest extends JsonApiFunctionalTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(
       ['view fusion_connector node--article'],
@@ -70,10 +71,7 @@ class EntityAccessTest extends JsonApiFunctionalTestBase {
     $this->assertNotNull($response);
     $this->assertNotNull($response['data']);
     $this->assertTrue(count($response['data']) > 0);
-    $this->assertEqual(
-      $response['data'][0]['attributes']['title'],
-      'Hello World'
-    );
+    $this->assertEquals($response['data'][0]['attributes']['title'], 'Hello World');
   }
 
   /**
diff --git a/tests/src/Functional/FusionConnectorConfigFormsTest.php b/tests/src/Functional/FusionConnectorConfigFormsTest.php
index 4f4595c..4df34f0 100644
--- a/tests/src/Functional/FusionConnectorConfigFormsTest.php
+++ b/tests/src/Functional/FusionConnectorConfigFormsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\fusion_connector\Functional;
 
+use Drupal\user\Entity\User;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\Tests\BrowserTestBase;
 
@@ -15,7 +16,7 @@ class FusionConnectorConfigFormsTest extends BrowserTestBase {
   /**
    * An administrative user to configure the test environment.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;
 
@@ -39,7 +40,7 @@ class FusionConnectorConfigFormsTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $permissions = [
@@ -63,21 +64,25 @@ class FusionConnectorConfigFormsTest extends BrowserTestBase {
     // Check if the fusion connector settings page is available.
     $this->drupalGet('admin/config/services/fusion_connector');
 
-    $this->assertField('fusion_connector_types[node--page]', 'Basic page');
-    $this->assertField('fusion_connector_types[node--article]', 'Article');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('fusion_connector_types[node--page]', 'Basic page');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('fusion_connector_types[node--article]', 'Article');
 
     // Disable the page entity from indexing.
     $edit = [
       'fusion_connector_types[node--article]' => 0,
     ];
-    $this->drupalPostForm(
-      'admin/config/services/fusion_connector',
-      $edit,
-      t('Save configuration')
-    );
-    $this->assertText('The configuration options have been saved.');
-    $this->assertFieldChecked('fusion_connector_types[node--page]');
-    $this->assertNoFieldChecked('fusion_connector_types[node--article]');
+    $this->drupalGet('admin/config/services/fusion_connector');
+    $this->submitForm($edit, t('Save configuration'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
+    $this->assertSession()->checkboxChecked('fusion_connector_types[node--page]');
+    $this->assertSession()->checkboxNotChecked('fusion_connector_types[node--article]');
 
     $config = $this->config('fusion_connector.settings');
     $disabledEntities = $config->get('disabled_entities');
@@ -94,21 +99,25 @@ class FusionConnectorConfigFormsTest extends BrowserTestBase {
     // Check if the visibility setting is available.
     $this->drupalGet('admin/config/services/fusion_connector/access/node/page');
 
-    $this->assertField('fusion_connector_fieldsaccess[nid][0]', 'nid');
-    $this->assertField('fusion_connector_fieldsaccess[uid][0]', 'uid');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('fusion_connector_fieldsaccess[nid][0]', 'nid');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('fusion_connector_fieldsaccess[uid][0]', 'uid');
 
     // Disable the page entity fields from indexing.
     $edit = [
       'fusion_connector_fieldsaccess[uid][0]' => 0,
     ];
-    $this->drupalPostForm(
-      'admin/config/services/fusion_connector/access/node/page',
-      $edit,
-      t('Save configuration')
-    );
-    $this->assertText('The configuration options have been saved.');
-    $this->assertFieldChecked('fusion_connector_fieldsaccess[nid][0]');
-    $this->assertNoFieldChecked('fusion_connector_fieldsaccess[uid][0]');
+    $this->drupalGet('admin/config/services/fusion_connector/access/node/page');
+    $this->submitForm($edit, t('Save configuration'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
+    $this->assertSession()->checkboxChecked('fusion_connector_fieldsaccess[nid][0]');
+    $this->assertSession()->checkboxNotChecked('fusion_connector_fieldsaccess[uid][0]');
 
     $config = $this->config('fusion_connector.settings');
     $disabledFields = $config->get('disabled_fields');
@@ -137,20 +146,16 @@ class FusionConnectorConfigFormsTest extends BrowserTestBase {
       'admin/config/services/fusion_connector/type_language_access/node/page'
     );
 
-    $this->assertField(
-      'fusion_connector_entity_type_languages[ca][checked]',
-      'Catalan'
-    );
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('fusion_connector_entity_type_languages[ca][checked]', 'Catalan');
 
     // Disable the page entity from indexing on the ca language.
     $edit = [
       'fusion_connector_entity_type_languages[ca][checked]' => 0,
     ];
-    $this->drupalPostForm(
-      'admin/config/services/fusion_connector/type_language_access/node/page',
-      $edit,
-      t('Save configuration')
-    );
+    $this->drupalGet('admin/config/services/fusion_connector/type_language_access/node/page');
+    $this->submitForm($edit, t('Save configuration'));
 
     $config = $this->config('fusion_connector.settings');
     $disabledLanguages = $config->get('disabled_entity_type_languages');
@@ -176,17 +181,16 @@ class FusionConnectorConfigFormsTest extends BrowserTestBase {
     // Check if the language setting is available.
     $this->drupalGet('admin/config/services/fusion_connector/languages');
 
-    $this->assertField('fusion_connector_languages[ca][checked]', 'Catalan');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('fusion_connector_languages[ca][checked]', 'Catalan');
 
     // Disable a language from being indexed.
     $edit = [
       'fusion_connector_languages[ca][checked]' => 0,
     ];
-    $this->drupalPostForm(
-      'admin/config/services/fusion_connector/languages',
-      $edit,
-      t('Save configuration')
-    );
+    $this->drupalGet('admin/config/services/fusion_connector/languages');
+    $this->submitForm($edit, t('Save configuration'));
 
     $config = $this->config('fusion_connector.settings');
     $disabledLanguages = $config->get('disabled_languages');
diff --git a/tests/src/Functional/FusionConnectorPermissionsTest.php b/tests/src/Functional/FusionConnectorPermissionsTest.php
index 2155138..9a67fb1 100644
--- a/tests/src/Functional/FusionConnectorPermissionsTest.php
+++ b/tests/src/Functional/FusionConnectorPermissionsTest.php
@@ -57,7 +57,7 @@ class FusionConnectorPermissionsTest extends JsonApiFunctionalTestBase {
 
     $this->assertNotNull($response);
     $this->assertIsArray($response['data']);
-    $this->assertEqual(count($response['data']), 0);
+    $this->assertEquals(count($response['data']), 0);
   }
 
   /**
@@ -85,11 +85,8 @@ class FusionConnectorPermissionsTest extends JsonApiFunctionalTestBase {
     $this->assertNotNull($response);
     $this->assertIsArray($response['data']);
     // Check that we have one element in array.
-    $this->assertEqual(count($response['data']), 1);
-    $this->assertEqual(
-      $response['data'][0]['attributes']['name'],
-      $this->tags[0]->getName()
-    );
+    $this->assertEquals(count($response['data']), 1);
+    $this->assertEquals($response['data'][0]['attributes']['name'], $this->tags[0]->getName());
 
     // Get the available articles.
     $response = Json::decode($this->drupalGet('/fusion/node/article'));
@@ -97,7 +94,7 @@ class FusionConnectorPermissionsTest extends JsonApiFunctionalTestBase {
     $this->assertNotNull($response);
     $this->assertIsArray($response['data']);
     // Check that we have response,
-    $this->assertEqual(count($response['data']), 3);
+    $this->assertEquals(count($response['data']), 3);
     $this->assertArrayHasKey('title', $response['data'][0]['attributes']);
     $this->drupalLogout();
 
@@ -114,13 +111,10 @@ class FusionConnectorPermissionsTest extends JsonApiFunctionalTestBase {
     $this->assertNotNull($response);
     $this->assertIsArray($response['data']);
     // Check that we have one element in array.
-    $this->assertEqual(count($response['data']), 3);
+    $this->assertEquals(count($response['data']), 3);
     $this->assertArrayHasKey('field_sort1', $response['data'][0]['attributes']);
     $this->assertArrayHasKey('title', $response['data'][0]['attributes']);
-    $this->assertEqual(
-      $response['data'][0]['attributes']['title'],
-      $this->nodes[0]->getTitle()
-    );
+    $this->assertEquals($response['data'][0]['attributes']['title'], $this->nodes[0]->getTitle());
 
     // Get the available tags.
     $response = Json::decode($this->drupalGet('/fusion/taxonomy_term/tags'));
@@ -128,7 +122,7 @@ class FusionConnectorPermissionsTest extends JsonApiFunctionalTestBase {
     $this->assertNotNull($response);
     $this->assertIsArray($response['data']);
     // Check that we have no response,
-    $this->assertEqual(count($response['data']), 0);
+    $this->assertEquals(count($response['data']), 0);
     $this->drupalLogout();
   }
 
diff --git a/tests/src/Functional/MultilangualTest.php b/tests/src/Functional/MultilangualTest.php
index 2f2f75a..da31d8b 100644
--- a/tests/src/Functional/MultilangualTest.php
+++ b/tests/src/Functional/MultilangualTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\fusion_connector\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\language\Entity\ContentLanguageSettings;
@@ -33,14 +34,14 @@ class MultilangualTest extends JsonApiFunctionalTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalCreateContentType(
       [
