diff --git a/snippet_manager.api.php b/snippet_manager.api.php
index 3678a91..ec462db 100644
--- a/snippet_manager.api.php
+++ b/snippet_manager.api.php
@@ -11,11 +11,10 @@ use Drupal\snippet_manager\SnippetInterface;
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Provides render context for a given snippet entity.
  *
- * @param \Drupal\snippet_manager\SnippetInterface $snippet
+ * @param SnippetInterface $snippet
  *   The snippet entity.
  *
  * @return array
@@ -40,7 +39,7 @@ function hook_snippet_context(SnippetInterface $snippet) {
  *
  * @param array $context
  *   Snippet context to be altered.
- * @param \Drupal\snippet_manager\SnippetInterface $snippet
+ * @param SnippetInterface $snippet
  *   The snippet entity.
  *
  * @deprecated Use hook_snippet_view_alter() instead.
@@ -56,7 +55,7 @@ function hook_snippet_context_alter(array &$context, SnippetInterface $snippet)
  *
  * @param array &$build
  *   A renderable array of data.
- * @param \Drupal\snippet_manager\SnippetInterface $snippet
+ * @param SnippetInterface $snippet
  *   The snippet entity.
  * @param string $view_mode
  *   (optional) The view mode to render the snippet.
diff --git a/snippet_manager.module b/snippet_manager.module
index 2537ce1..fbf5e46 100644
--- a/snippet_manager.module
+++ b/snippet_manager.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\snippet_manager\SnippetInterface;
 /**
  * @file
  * Primary module hooks for Snippet manager module.
@@ -46,7 +47,7 @@ function template_preprocess_snippet_layout(array &$variables) {
     $context[$name]['#attributes']['class'][] = 'layout__region--' . $name;
   }
 
-  /** @var \Drupal\snippet_manager\SnippetInterface $snippet */
+  /** @var SnippetInterface $snippet */
   $snippet = $variables['content']['#snippet'];
   // Replace layout content with snippet build.
   $variables['content'] = \Drupal::service('entity_type.manager')
@@ -85,7 +86,7 @@ function snippet_manager_entity_update(EntityInterface $entity) {
 /**
  * Clears cached definitions of snippet variable plugins.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   Entity that has been saved.
  */
 function snippet_manager_entity_save(EntityInterface $entity) {
diff --git a/src/Annotation/SnippetVariable.php b/src/Annotation/SnippetVariable.php
index 1735916..78e70bb 100644
--- a/src/Annotation/SnippetVariable.php
+++ b/src/Annotation/SnippetVariable.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\snippet_manager\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class SnippetVariable extends Plugin {
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -30,7 +31,7 @@ class SnippetVariable extends Plugin {
   /**
    * The category of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/PathAutocomplete.php b/src/Controller/PathAutocomplete.php
index 862aa54..f9e90b3 100644
--- a/src/Controller/PathAutocomplete.php
+++ b/src/Controller/PathAutocomplete.php
@@ -16,14 +16,14 @@ class PathAutocomplete implements ContainerInjectionInterface {
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
   /**
    * Constructs the controller.
    *
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
    */
   public function __construct(RouteProviderInterface $route_provider) {
@@ -42,10 +42,10 @@ class PathAutocomplete implements ContainerInjectionInterface {
   /**
    * Retrieves suggestions for path completion.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing autocomplete suggestions.
    */
   public function autocomplete(Request $request) {
diff --git a/src/Controller/SnippetController.php b/src/Controller/SnippetController.php
index 64a46f4..98d034c 100644
--- a/src/Controller/SnippetController.php
+++ b/src/Controller/SnippetController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\snippet_manager\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\snippet_manager\SnippetInterface;
 
@@ -13,12 +14,12 @@ class SnippetController extends ControllerBase {
   /**
    * Calls a method on a snippet and reloads the listing page.
    *
-   * @param \Drupal\snippet_manager\SnippetInterface $snippet
+   * @param SnippetInterface $snippet
    *   The snippet being acted upon.
    * @param string $op
    *   The operation to perform, e.g., 'enable' or 'disable'.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect back to the listing page.
    */
   public function performOperation(SnippetInterface $snippet, $op) {
diff --git a/src/DelegatedCacheabilityTrait.php b/src/DelegatedCacheabilityTrait.php
index 3eb2537..6eab4cc 100644
--- a/src/DelegatedCacheabilityTrait.php
+++ b/src/DelegatedCacheabilityTrait.php
@@ -10,7 +10,7 @@ trait DelegatedCacheabilityTrait {
   /**
    * Get cacheanility.
    *
-   * @return \Drupal\Core\Cache\CacheableDependencyInterface|null
+   * @return CacheableDependencyInterface|null
    *   An object that carries this object's result cacheability.
    */
   abstract protected function cacheability(): ?CacheableDependencyInterface;
diff --git a/src/Entity/Snippet.php b/src/Entity/Snippet.php
index e9fe14f..26dac9d 100644
--- a/src/Entity/Snippet.php
+++ b/src/Entity/Snippet.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\snippet_manager\Entity;
 
+use Drupal\snippet_manager\SnippetVariablePluginManager;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\snippet_manager\SnippetInterface;
@@ -64,7 +65,7 @@ use Drupal\snippet_manager\SnippetVariableCollection;
  *   }
  * )
  *
- * @property \Drupal\snippet_manager\SnippetInterface $original;
+ * @property SnippetInterface $original ;
  */
 class Snippet extends ConfigEntityBase implements SnippetInterface {
 
@@ -164,7 +165,7 @@ class Snippet extends ConfigEntityBase implements SnippetInterface {
   /**
    * Snippet variable plugin manager.
    *
-   * @var \Drupal\snippet_manager\SnippetVariablePluginManager
+   * @var SnippetVariablePluginManager
    */
   protected $variableManager;
 
@@ -247,7 +248,7 @@ class Snippet extends ConfigEntityBase implements SnippetInterface {
    * {@inheritdoc}
    */
   public static function preDelete(EntityStorageInterface $storage, array $entities) {
-    /** @var \Drupal\snippet_manager\SnippetInterface[] $entities */
+    /** @var SnippetInterface[] $entities */
     parent::preDelete($storage, $entities);
     foreach ($entities as $entity) {
       if ($entity->get('page')['status']) {
diff --git a/src/EventSubscriber/DisplayVariantSubscriber.php b/src/EventSubscriber/DisplayVariantSubscriber.php
index 0408ddd..177ade3 100644
--- a/src/EventSubscriber/DisplayVariantSubscriber.php
+++ b/src/EventSubscriber/DisplayVariantSubscriber.php
@@ -17,23 +17,23 @@ class DisplayVariantSubscriber implements EventSubscriberInterface {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The variant manager.
    *
-   * @var \Drupal\Core\Display\VariantManager
+   * @var VariantManager
    */
   protected $variantManager;
 
   /**
    * Constructs subscriber object.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Display\VariantManager $variant_manager
+   * @param VariantManager $variant_manager
    *   The variant manager.
    */
   public function __construct(RequestStack $request_stack, VariantManager $variant_manager) {
@@ -44,7 +44,7 @@ class DisplayVariantSubscriber implements EventSubscriberInterface {
   /**
    * Event callback.
    *
-   * @param \Drupal\Core\Render\PageDisplayVariantSelectionEvent $event
+   * @param PageDisplayVariantSelectionEvent $event
    *   The event to process.
    */
   public function onSelectPageDisplayVariant(PageDisplayVariantSelectionEvent $event) {
diff --git a/src/EventSubscriber/RouteSubscriber.php b/src/EventSubscriber/RouteSubscriber.php
index a9a9aed..78421a5 100644
--- a/src/EventSubscriber/RouteSubscriber.php
+++ b/src/EventSubscriber/RouteSubscriber.php
@@ -16,14 +16,14 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new SnippetManagerRouteSubscriber.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -84,10 +84,10 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * Builds page route for a given snippet.
    *
-   * @param \Drupal\snippet_manager\SnippetInterface $snippet
+   * @param SnippetInterface $snippet
    *   The snippet.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   The route.
    */
   protected function buildRoute(SnippetInterface $snippet) {
diff --git a/src/Form/CssForm.php b/src/Form/CssForm.php
index 81ea8f1..3975009 100644
--- a/src/Form/CssForm.php
+++ b/src/Form/CssForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\snippet_manager\Form;
 
+use Drupal\snippet_manager\SnippetInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\State\StateInterface;
@@ -12,30 +13,30 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 /**
  * Snippet CSS form.
  *
- * @property \Drupal\snippet_manager\SnippetInterface $entity
+ * @property SnippetInterface $entity
  */
 class CssForm extends EntityForm {
 
   /**
    * The library builder.
    *
-   * @var \Drupal\snippet_manager\SnippetLibraryBuilder
+   * @var SnippetLibraryBuilder
    */
   protected $libraryBuilder;
 
   /**
    * The key/value Store to use for state.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * Constructs a snippet form object.
    *
-   * @param \Drupal\snippet_manager\SnippetLibraryBuilder $library_builder
+   * @param SnippetLibraryBuilder $library_builder
    *   The snippet library builder.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key/value store.
    */
   public function __construct(SnippetLibraryBuilder $library_builder, StateInterface $state) {
diff --git a/src/Form/DuplicateForm.php b/src/Form/DuplicateForm.php
index f600e35..87a4df8 100644
--- a/src/Form/DuplicateForm.php
+++ b/src/Form/DuplicateForm.php
@@ -2,13 +2,14 @@
 
 namespace Drupal\snippet_manager\Form;
 
+use Drupal\snippet_manager\SnippetInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 
 /**
  * Duplicate form.
  *
- * @property \Drupal\snippet_manager\SnippetInterface $entity
+ * @property SnippetInterface $entity
  */
 class DuplicateForm extends EntityForm {
 
diff --git a/src/Form/GeneralForm.php b/src/Form/GeneralForm.php
index 7bb71ef..1272f35 100644
--- a/src/Form/GeneralForm.php
+++ b/src/Form/GeneralForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\snippet_manager\Form;
 
+use Drupal\snippet_manager\SnippetInterface;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Display\VariantManager;
@@ -15,57 +16,57 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 /**
  * General snippet form.
  *
- * @property \Drupal\snippet_manager\SnippetInterface $entity
+ * @property SnippetInterface $entity
  */
 class GeneralForm extends EntityForm {
 
   /**
    * The variant manager.
    *
-   * @var \Drupal\Core\Display\VariantManager
+   * @var VariantManager
    */
   protected $variantManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The module handler to invoke the alter hook.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * The permission handler.
    *
-   * @var \Drupal\user\PermissionHandlerInterface
+   * @var PermissionHandlerInterface
    */
   protected $permissionHandler;
 
   /**
    * Constructs a snippet form object.
    *
-   * @param \Drupal\Core\Display\VariantManager $variant_manager
+   * @param VariantManager $variant_manager
    *   The variant manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\user\PermissionHandlerInterface $permission_handler
+   * @param PermissionHandlerInterface $permission_handler
    *   The permission handler.
    */
   public function __construct(VariantManager $variant_manager, ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler, PermissionHandlerInterface $permission_handler) {
diff --git a/src/Form/JsForm.php b/src/Form/JsForm.php
index c005d75..c288025 100644
--- a/src/Form/JsForm.php
+++ b/src/Form/JsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\snippet_manager\Form;
 
+use Drupal\snippet_manager\SnippetInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\State\StateInterface;
@@ -12,30 +13,30 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 /**
  * Snippet JS form.
  *
- * @property \Drupal\snippet_manager\SnippetInterface $entity
+ * @property SnippetInterface $entity
  */
 class JsForm extends EntityForm {
 
   /**
    * The key/value store to use for state.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The library builder.
    *
-   * @var \Drupal\snippet_manager\SnippetLibraryBuilder
+   * @var SnippetLibraryBuilder
    */
   protected $libraryBuilder;
 
   /**
    * Constructs a snippet form object.
    *
-   * @param \Drupal\snippet_manager\SnippetLibraryBuilder $library_builder
+   * @param SnippetLibraryBuilder $library_builder
    *   The snippet library builder.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key/value store.
    */
   public function __construct(SnippetLibraryBuilder $library_builder, StateInterface $state) {
diff --git a/src/Form/TemplateForm.php b/src/Form/TemplateForm.php
index 6af8919..fa284e9 100644
--- a/src/Form/TemplateForm.php
+++ b/src/Form/TemplateForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\snippet_manager\Form;
 
+use Drupal\snippet_manager\SnippetInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Link;
@@ -14,39 +15,39 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 /**
  * Snippet template form.
  *
- * @property \Drupal\snippet_manager\SnippetInterface $entity
+ * @property SnippetInterface $entity
  */
 class TemplateForm extends EntityForm {
 
   /**
    * The variable manager.
    *
-   * @var \Drupal\snippet_manager\SnippetVariablePluginManager
+   * @var SnippetVariablePluginManager
    */
   protected $variableManager;
 
   /**
    * The Twig service.
    *
-   * @var \Drupal\Core\Template\TwigEnvironment
+   * @var TwigEnvironment
    */
   protected $twig;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Constructs a snippet form object.
    *
-   * @param \Drupal\snippet_manager\SnippetVariablePluginManager $variable_manager
+   * @param SnippetVariablePluginManager $variable_manager
    *   The variable manager.
-   * @param \Drupal\Core\Template\TwigEnvironment $twig
+   * @param TwigEnvironment $twig
    *   The Twig service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(SnippetVariablePluginManager $variable_manager, TwigEnvironment $twig, RendererInterface $renderer) {
diff --git a/src/Form/VariableAddForm.php b/src/Form/VariableAddForm.php
index 6f6dcb4..cb44f7b 100644
--- a/src/Form/VariableAddForm.php
+++ b/src/Form/VariableAddForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\snippet_manager\Form;
 
+use Drupal\snippet_manager\SnippetVariablePluginManager;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -10,14 +11,14 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 /**
  * Form builder for "Add variable" form.
  *
- * @property \Drupal\snippet_manager\SnippetVariablePluginManager $variableManager
+ * @property SnippetVariablePluginManager $variableManager
  */
 class VariableAddForm extends VariableFormBase {
 
   /**
    * The variable manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $variableManager;
 
diff --git a/src/Form/VariableFormBase.php b/src/Form/VariableFormBase.php
index a031e7e..05faaf2 100644
--- a/src/Form/VariableFormBase.php
+++ b/src/Form/VariableFormBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\snippet_manager\Form;
 
+use Drupal\snippet_manager\SnippetInterface;
+use Drupal\snippet_manager\SnippetVariableInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
@@ -9,14 +11,14 @@ use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 /**
  * Provides a base class for variable forms.
  *
- * @property \Drupal\snippet_manager\SnippetInterface $entity
+ * @property SnippetInterface $entity
  */
 abstract class VariableFormBase extends EntityForm {
 
   /**
    * The variable plugin.
    *
-   * @var \Drupal\snippet_manager\SnippetVariableInterface
+   * @var SnippetVariableInterface
    */
   protected $plugin;
 
diff --git a/src/Plugin/Block/SnippetBlock.php b/src/Plugin/Block/SnippetBlock.php
index b0156f9..86db344 100644
--- a/src/Plugin/Block/SnippetBlock.php
+++ b/src/Plugin/Block/SnippetBlock.php
@@ -23,7 +23,7 @@ class SnippetBlock extends BlockBase implements ContainerFactoryPluginInterface
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/Plugin/Block/SnippetBlockDeriver.php b/src/Plugin/Block/SnippetBlockDeriver.php
index eb7d7c4..e073efd 100644
--- a/src/Plugin/Block/SnippetBlockDeriver.php
+++ b/src/Plugin/Block/SnippetBlockDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\snippet_manager\Plugin\Block;
 
+use Drupal\snippet_manager\Entity\Snippet;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -15,14 +16,14 @@ class SnippetBlockDeriver extends DeriverBase implements ContainerDeriverInterfa
   /**
    * The snippet storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $snippetStorage;
 
   /**
    * Constructs a Snippet object.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $snippet_storage
+   * @param EntityStorageInterface $snippet_storage
    *   The snippet storage.
    */
   public function __construct(EntityStorageInterface $snippet_storage) {
@@ -44,7 +45,7 @@ class SnippetBlockDeriver extends DeriverBase implements ContainerDeriverInterfa
   public function getDerivativeDefinitions($base_plugin_definition) {
     $snippets = $this->snippetStorage->loadMultiple();
 
-    /** @var \Drupal\snippet_manager\Entity\Snippet $snippet */
+    /** @var Snippet $snippet */
     foreach ($snippets as $snippet) {
       if ($snippet->status() && $snippet->get('block')['status']) {
         $delta = $snippet->id();
diff --git a/src/Plugin/CKEditorPlugin/Snippet.php b/src/Plugin/CKEditorPlugin/Snippet.php
index a7f05b5..fe175f6 100644
--- a/src/Plugin/CKEditorPlugin/Snippet.php
+++ b/src/Plugin/CKEditorPlugin/Snippet.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\snippet_manager\Plugin\CKEditorPlugin;
 
+use Drupal\snippet_manager\SnippetInterface;
 use Drupal\ckeditor\CKEditorPluginBase;
 use Drupal\ckeditor\CKEditorPluginConfigurableInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -23,7 +24,7 @@ class Snippet extends CKEditorPluginBase implements CKEditorPluginConfigurableIn
    * {@inheritdoc}
    */
   public function getFile() {
-    return drupal_get_path('module', 'snippet_manager') . '/js/plugins/snippet/plugin.js';
+    return \Drupal::service('extension.list.module')->getPath('snippet_manager') . '/js/plugins/snippet/plugin.js';
   }
 
   /**
@@ -48,7 +49,7 @@ class Snippet extends CKEditorPluginBase implements CKEditorPluginConfigurableIn
    * {@inheritdoc}
    */
   public function getButtons() {
-    $module_path = drupal_get_path('module', 'snippet_manager');
+    $module_path = \Drupal::service('extension.list.module')->getPath('snippet_manager');
     return [
       'snippet' => [
         'label' => $this->t('Snippet'),
@@ -94,7 +95,7 @@ class Snippet extends CKEditorPluginBase implements CKEditorPluginConfigurableIn
    */
   protected static function getSnippetOptions() {
     $options = [];
-    /** @var \Drupal\snippet_manager\SnippetInterface $snippet */
+    /** @var SnippetInterface $snippet */
     foreach (SnippetEntity::loadMultiple() as $snippet) {
       $options[$snippet->id()] = $snippet->label();
     }
diff --git a/src/Plugin/DisplayVariant/SnippetDisplayVariant.php b/src/Plugin/DisplayVariant/SnippetDisplayVariant.php
index 0ebefdb..72f841c 100644
--- a/src/Plugin/DisplayVariant/SnippetDisplayVariant.php
+++ b/src/Plugin/DisplayVariant/SnippetDisplayVariant.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\snippet_manager\Plugin\DisplayVariant;
 
+use Drupal\snippet_manager\SnippetInterface;
+use Drupal\snippet_manager\SnippetViewBuilder;
 use Drupal\Core\Display\PageVariantInterface;
 use Drupal\Core\Display\VariantBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -38,21 +40,21 @@ class SnippetDisplayVariant extends VariantBase implements PageVariantInterface,
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Snippet renderer.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -65,11 +67,11 @@ class SnippetDisplayVariant extends VariantBase implements PageVariantInterface,
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger channel.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LoggerChannelInterface $logger, RendererInterface $renderer) {
@@ -115,11 +117,11 @@ class SnippetDisplayVariant extends VariantBase implements PageVariantInterface,
   public function build() {
     $build = [];
 
-    /** @var \Drupal\snippet_manager\SnippetInterface $snippet */
+    /** @var SnippetInterface $snippet */
     $snippet = $this->entityTypeManager->getStorage('snippet')->load($this->getDerivativeId());
     if ($snippet) {
 
-      /** @var \Drupal\snippet_manager\SnippetViewBuilder $view_builder */
+      /** @var SnippetViewBuilder $view_builder */
       $view_builder = $this->entityTypeManager->getViewBuilder('snippet');
 
       $build['content'] = $view_builder->view($snippet);
diff --git a/src/Plugin/DisplayVariant/SnippetDisplayVariantDeriver.php b/src/Plugin/DisplayVariant/SnippetDisplayVariantDeriver.php
index bb768cc..1362104 100644
--- a/src/Plugin/DisplayVariant/SnippetDisplayVariantDeriver.php
+++ b/src/Plugin/DisplayVariant/SnippetDisplayVariantDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\snippet_manager\Plugin\DisplayVariant;
 
+use Drupal\snippet_manager\SnippetInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -15,14 +16,14 @@ class SnippetDisplayVariantDeriver extends DeriverBase implements ContainerDeriv
   /**
    * The snippet storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $snippetStorage;
 
   /**
    * Constructs a Snippet object.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $snippet_storage
+   * @param EntityStorageInterface $snippet_storage
    *   The snippet storage.
    */
   public function __construct(EntityStorageInterface $snippet_storage) {
@@ -44,7 +45,7 @@ class SnippetDisplayVariantDeriver extends DeriverBase implements ContainerDeriv
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
 
-    /** @var \Drupal\snippet_manager\SnippetInterface[] $snippets */
+    /** @var SnippetInterface[] $snippets */
     $snippets = $this->snippetStorage->loadMultiple();
 
     foreach ($snippets as $snippet_id => $snippet) {
diff --git a/src/Plugin/Layout/SnippetLayout.php b/src/Plugin/Layout/SnippetLayout.php
index c8c12f4..4dbaea0 100644
--- a/src/Plugin/Layout/SnippetLayout.php
+++ b/src/Plugin/Layout/SnippetLayout.php
@@ -22,14 +22,14 @@ class SnippetLayout extends LayoutDefault implements ContainerFactoryPluginInter
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
@@ -45,9 +45,9 @@ class SnippetLayout extends LayoutDefault implements ContainerFactoryPluginInter
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The manager service.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger channel.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LoggerChannelInterface $logger) {
diff --git a/src/Plugin/Layout/SnippetLayoutDeriver.php b/src/Plugin/Layout/SnippetLayoutDeriver.php
index 3523c41..005796c 100644
--- a/src/Plugin/Layout/SnippetLayoutDeriver.php
+++ b/src/Plugin/Layout/SnippetLayoutDeriver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\snippet_manager\Plugin\Layout;
 
+use Drupal\snippet_manager\SnippetInterface;
+use Drupal\Core\Layout\LayoutDefinition;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -15,14 +17,14 @@ class SnippetLayoutDeriver extends DeriverBase implements ContainerDeriverInterf
   /**
    * The snippet storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $snippetStorage;
 
   /**
    * Constructs a Snippet object.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $snippet_storage
+   * @param EntityStorageInterface $snippet_storage
    *   The snippet storage.
    */
   public function __construct(EntityStorageInterface $snippet_storage) {
@@ -44,13 +46,13 @@ class SnippetLayoutDeriver extends DeriverBase implements ContainerDeriverInterf
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
 
-    /** @var \Drupal\snippet_manager\SnippetInterface[] $snippets */
+    /** @var SnippetInterface[] $snippets */
     $snippets = $this->snippetStorage->loadMultiple();
 
     foreach ($snippets as $snippet_id => $snippet) {
       $layout = $snippet->get('layout');
       if ($snippet->status() && $layout['status']) {
-        /** @var \Drupal\Core\Layout\LayoutDefinition $base_plugin_definition */
+        /** @var LayoutDefinition $base_plugin_definition */
         $definition = clone $base_plugin_definition;
         $definition->setLabel($layout['label'] ?: $snippet->label());
         $definition->setRegions($snippet->getLayoutRegions());
diff --git a/src/Plugin/SnippetVariable/Block.php b/src/Plugin/SnippetVariable/Block.php
index 1bf9d52..32297e5 100644
--- a/src/Plugin/SnippetVariable/Block.php
+++ b/src/Plugin/SnippetVariable/Block.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\snippet_manager\Plugin\SnippetVariable;
 
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -35,35 +36,35 @@ class Block extends SnippetVariableBase implements ContainerFactoryPluginInterfa
   /**
    * Stores the configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Block plugin manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * The plugin form manager.
    *
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;
 
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
@@ -76,15 +77,15 @@ class Block extends SnippetVariableBase implements ContainerFactoryPluginInterfa
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   Block plugin manager.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\Core\Plugin\PluginFormFactoryInterface $plugin_form_manager
+   * @param PluginFormFactoryInterface $plugin_form_manager
    *   The plugin form manager.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory, BlockManagerInterface $block_manager, AccountInterface $account, PluginFormFactoryInterface $plugin_form_manager, ContextRepositoryInterface $context_repository) {
@@ -122,7 +123,7 @@ class Block extends SnippetVariableBase implements ContainerFactoryPluginInterfa
     $theme = $this->configFactory->get('system.theme')->get('default');
     $form_state->set('block_theme', $theme);
 
-    /** @var \Drupal\Core\Plugin\ContextAwarePluginInterface $block_plugin */
+    /** @var ContextAwarePluginInterface $block_plugin */
     $block_plugin = $this->getBlockPlugin();
 
     $plugin_form = $block_plugin instanceof PluginWithFormsInterface ?
@@ -213,7 +214,7 @@ class Block extends SnippetVariableBase implements ContainerFactoryPluginInterfa
   /**
    * Creates block plugin instance.
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface
+   * @return BlockPluginInterface
    *   Block plugin instance.
    */
   protected function getBlockPlugin() {
diff --git a/src/Plugin/SnippetVariable/BlockDeriver.php b/src/Plugin/SnippetVariable/BlockDeriver.php
index 129a1a6..8e54e21 100644
--- a/src/Plugin/SnippetVariable/BlockDeriver.php
+++ b/src/Plugin/SnippetVariable/BlockDeriver.php
@@ -17,32 +17,32 @@ class BlockDeriver extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The module handler to invoke the alter hook.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
   /**
    * Block plugin manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * Constructs BlockDeriver object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   Block plugin manager.
    */
   public function __construct(ModuleHandlerInterface $module_handler, ContextRepositoryInterface $context_repository, BlockManagerInterface $block_manager) {
diff --git a/src/Plugin/SnippetVariable/Condition.php b/src/Plugin/SnippetVariable/Condition.php
index cbe5d56..e6f6644 100644
--- a/src/Plugin/SnippetVariable/Condition.php
+++ b/src/Plugin/SnippetVariable/Condition.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\snippet_manager\Plugin\SnippetVariable;
 
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Condition\ConditionManager;
@@ -36,21 +37,21 @@ class Condition extends SnippetVariableBase implements ContainerFactoryPluginInt
   /**
    * The condition manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;
 
   /**
    * The plugin context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
   /**
    * The context repository.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
@@ -70,12 +71,12 @@ class Condition extends SnippetVariableBase implements ContainerFactoryPluginInt
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The condition manager.
    *   The ConditionManager for checking visibility of blocks.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The ContextHandler for applying contexts to conditions properly.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConditionManager $condition_manager, ContextHandlerInterface $context_handler, ContextRepositoryInterface $context_repository) {
@@ -164,7 +165,7 @@ class Condition extends SnippetVariableBase implements ContainerFactoryPluginInt
   /**
    * Creates a condition plugin instance.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface
+   * @return ConditionInterface
    *   The condition instance.
    */
   protected function getPlugin() {
diff --git a/src/Plugin/SnippetVariable/ConditionDeriver.php b/src/Plugin/SnippetVariable/ConditionDeriver.php
index c3332ad..bf133c5 100644
--- a/src/Plugin/SnippetVariable/ConditionDeriver.php
+++ b/src/Plugin/SnippetVariable/ConditionDeriver.php
@@ -15,14 +15,14 @@ class ConditionDeriver extends DeriverBase implements ContainerDeriverInterface
   /**
    * The condition manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;
 
   /**
    * Constructs ConditionDeriver object.
    *
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The condition manager.
    */
   public function __construct(ConditionManager $condition_manager) {
diff --git a/src/Plugin/SnippetVariable/Entity.php b/src/Plugin/SnippetVariable/Entity.php
index 1eaffdb..397cc24 100644
--- a/src/Plugin/SnippetVariable/Entity.php
+++ b/src/Plugin/SnippetVariable/Entity.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\snippet_manager\Plugin\SnippetVariable;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
@@ -33,7 +34,7 @@ class Entity extends SnippetVariableBase implements ContainerFactoryPluginInterf
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -47,21 +48,21 @@ class Entity extends SnippetVariableBase implements ContainerFactoryPluginInterf
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * The currently active route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
@@ -77,13 +78,13 @@ class Entity extends SnippetVariableBase implements ContainerFactoryPluginInterf
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger channel.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository, LoggerChannelInterface $logger, RouteMatchInterface $route_match) {
@@ -172,7 +173,7 @@ class Entity extends SnippetVariableBase implements ContainerFactoryPluginInterf
   /**
    * Loads entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   Loaded entity or null if the entity was not found.
    */
   protected function loadEntity() {
diff --git a/src/Plugin/SnippetVariable/EntityDeriver.php b/src/Plugin/SnippetVariable/EntityDeriver.php
index acc90aa..434faa5 100644
--- a/src/Plugin/SnippetVariable/EntityDeriver.php
+++ b/src/Plugin/SnippetVariable/EntityDeriver.php
@@ -15,14 +15,14 @@ class EntityDeriver extends DeriverBase implements ContainerDeriverInterface {
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs EntityDeriver object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/SnippetVariable/EntityForm.php b/src/Plugin/SnippetVariable/EntityForm.php
index 6074034..58311df 100644
--- a/src/Plugin/SnippetVariable/EntityForm.php
+++ b/src/Plugin/SnippetVariable/EntityForm.php
@@ -26,7 +26,7 @@ class EntityForm extends SnippetVariableBase implements ContainerFactoryPluginIn
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -40,14 +40,14 @@ class EntityForm extends SnippetVariableBase implements ContainerFactoryPluginIn
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * Entity form builder.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   protected $entityFormBuilder;
 
@@ -63,11 +63,11 @@ class EntityForm extends SnippetVariableBase implements ContainerFactoryPluginIn
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository, EntityFormBuilderInterface $entity_form_builder) {
diff --git a/src/Plugin/SnippetVariable/EntityFormDeriver.php b/src/Plugin/SnippetVariable/EntityFormDeriver.php
index 26e9e03..ceb26b4 100644
--- a/src/Plugin/SnippetVariable/EntityFormDeriver.php
+++ b/src/Plugin/SnippetVariable/EntityFormDeriver.php
@@ -16,14 +16,14 @@ class EntityFormDeriver extends DeriverBase implements ContainerDeriverInterface
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs EntityDeriver object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/SnippetVariable/File.php b/src/Plugin/SnippetVariable/File.php
index bb770ed..2571eeb 100644
--- a/src/Plugin/SnippetVariable/File.php
+++ b/src/Plugin/SnippetVariable/File.php
@@ -76,7 +76,7 @@ class File extends SnippetVariableBase implements SnippetAwareInterface {
 
     $origin_file = $this->getFile();
 
-    /** @var \Drupal\file\FileInterface $new_file */
+    /** @var FileInterface $new_file */
     $new_file = \Drupal::entityTypeManager()->getStorage('file')->load($values['file'][0]);
 
     // Update usage if the file has been changed.
@@ -118,7 +118,7 @@ class File extends SnippetVariableBase implements SnippetAwareInterface {
         }
         else {
           $build['file'] = [
-            '#markup' => file_create_url($file->getFileUri()),
+            '#markup' => \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri()),
           ];
         }
         $build['file']['#cache']['tags'] = $file->getCacheTags();
@@ -132,7 +132,7 @@ class File extends SnippetVariableBase implements SnippetAwareInterface {
   /**
    * Returns file entity.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file.
    */
   protected function getFile() {
@@ -144,7 +144,7 @@ class File extends SnippetVariableBase implements SnippetAwareInterface {
   /**
    * Records that the snippet is using a file.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   A file entity.
    */
   protected function addUsage(FileInterface $file) {
@@ -155,7 +155,7 @@ class File extends SnippetVariableBase implements SnippetAwareInterface {
   /**
    * Removes a record to indicate that a the snippet is no longer using a file.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   A file entity.
    */
   protected function deleteUsage(FileInterface $file) {
diff --git a/src/Plugin/SnippetVariable/Form.php b/src/Plugin/SnippetVariable/Form.php
index 8781cbd..8ac572a 100644
--- a/src/Plugin/SnippetVariable/Form.php
+++ b/src/Plugin/SnippetVariable/Form.php
@@ -22,7 +22,7 @@ class Form extends SnippetVariableBase implements ContainerFactoryPluginInterfac
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
@@ -35,7 +35,7 @@ class Form extends SnippetVariableBase implements ContainerFactoryPluginInterfac
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FormBuilderInterface $form_builder) {
diff --git a/src/Plugin/SnippetVariable/FormDeriver.php b/src/Plugin/SnippetVariable/FormDeriver.php
index 4a8eeee..5abadf5 100644
--- a/src/Plugin/SnippetVariable/FormDeriver.php
+++ b/src/Plugin/SnippetVariable/FormDeriver.php
@@ -18,14 +18,14 @@ class FormDeriver extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The module handler to invoke the alter hook.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Creates the FormDeriver object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/SnippetVariable/LayoutRegion.php b/src/Plugin/SnippetVariable/LayoutRegion.php
index bff8df2..c9c8d83 100644
--- a/src/Plugin/SnippetVariable/LayoutRegion.php
+++ b/src/Plugin/SnippetVariable/LayoutRegion.php
@@ -22,7 +22,7 @@ class LayoutRegion extends SnippetVariableBase implements ContainerFactoryPlugin
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
diff --git a/src/Plugin/SnippetVariable/Menu.php b/src/Plugin/SnippetVariable/Menu.php
index 6c7422b..769be8b 100644
--- a/src/Plugin/SnippetVariable/Menu.php
+++ b/src/Plugin/SnippetVariable/Menu.php
@@ -27,7 +27,7 @@ class Menu extends SnippetVariableBase implements ContainerFactoryPluginInterfac
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -35,7 +35,7 @@ class Menu extends SnippetVariableBase implements ContainerFactoryPluginInterfac
   /**
    * The menu link tree service.
    *
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuTree;
 
@@ -48,9 +48,9 @@ class Menu extends SnippetVariableBase implements ContainerFactoryPluginInterfac
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menu_tree
+   * @param MenuLinkTreeInterface $menu_tree
    *   The menu tree service.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, EntityTypeManagerInterface $entity_type_manager, MenuLinkTreeInterface $menu_tree) {
diff --git a/src/Plugin/SnippetVariable/MenuDeriver.php b/src/Plugin/SnippetVariable/MenuDeriver.php
index e6cf10c..1ba6f55 100644
--- a/src/Plugin/SnippetVariable/MenuDeriver.php
+++ b/src/Plugin/SnippetVariable/MenuDeriver.php
@@ -15,14 +15,14 @@ class MenuDeriver extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The menu storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $menuStorage;
 
   /**
    * Constructs new MenuDeriver.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $menu_storage
+   * @param EntityStorageInterface $menu_storage
    *   The menu storage.
    */
   public function __construct(EntityStorageInterface $menu_storage) {
diff --git a/src/Plugin/SnippetVariable/Text.php b/src/Plugin/SnippetVariable/Text.php
index e6a1ae1..0e9dea8 100644
--- a/src/Plugin/SnippetVariable/Text.php
+++ b/src/Plugin/SnippetVariable/Text.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\snippet_manager\Plugin\SnippetVariable;
 
+use Drupal\file\FileInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -28,14 +29,14 @@ class Text extends SnippetVariableBase implements SnippetAwareInterface, Contain
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The file usage service.
    *
-   * @var \Drupal\file\FileUsage\FileUsageInterface
+   * @var FileUsageInterface
    */
   protected $fileUsage;
 
@@ -48,9 +49,9 @@ class Text extends SnippetVariableBase implements SnippetAwareInterface, Contain
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\file\FileUsage\FileUsageInterface $file_usage
+   * @param FileUsageInterface $file_usage
    *   The file usage service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityRepositoryInterface $entity_repository, FileUsageInterface $file_usage) {
@@ -106,7 +107,7 @@ class Text extends SnippetVariableBase implements SnippetAwareInterface, Contain
 
     $new_uuids = array_diff($current_uuids, $original_uuids);
     foreach ($new_uuids as $uuid) {
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       if ($file = $this->entityRepository->loadEntityByUuid('file', $uuid)) {
         $this->fileUsage->add($file, 'snippet_manager', 'snippet', $snippet_id);
       }
@@ -114,7 +115,7 @@ class Text extends SnippetVariableBase implements SnippetAwareInterface, Contain
 
     $outdated_uuids = array_diff($original_uuids, $current_uuids);
     foreach ($outdated_uuids as $uuid) {
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       if ($file = $this->entityRepository->loadEntityByUuid('file', $uuid)) {
         $this->fileUsage->delete($file, 'snippet_manager', 'snippet', $snippet_id);
       }
@@ -163,7 +164,7 @@ class Text extends SnippetVariableBase implements SnippetAwareInterface, Contain
     $uuids = self::parseFileUuids($this->configuration['content']['value']);
     $snippet_id = $this->getSnippet()->id();
     foreach ($uuids as $uuid) {
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       if ($file = $this->entityRepository->loadEntityByUuid('file', $uuid)) {
         $this->fileUsage->delete($file, 'snippet_manager', 'snippet', $snippet_id);
       }
diff --git a/src/Plugin/SnippetVariable/View.php b/src/Plugin/SnippetVariable/View.php
index 0bb18f1..5dfe7a5 100644
--- a/src/Plugin/SnippetVariable/View.php
+++ b/src/Plugin/SnippetVariable/View.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\snippet_manager\Plugin\SnippetVariable;
 
+use Drupal\views\ViewEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -27,7 +28,7 @@ class View extends SnippetVariableBase implements ContainerFactoryPluginInterfac
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -40,7 +41,7 @@ class View extends SnippetVariableBase implements ContainerFactoryPluginInterfac
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
@@ -133,7 +134,7 @@ class View extends SnippetVariableBase implements ContainerFactoryPluginInterfac
   /**
    * Return the associated view entity.
    *
-   * @return \Drupal\views\ViewEntityInterface
+   * @return ViewEntityInterface
    *   View configuration entity.
    */
   protected function getView() {
diff --git a/src/Plugin/SnippetVariable/ViewDeriver.php b/src/Plugin/SnippetVariable/ViewDeriver.php
index ddabd9d..046a94e 100644
--- a/src/Plugin/SnippetVariable/ViewDeriver.php
+++ b/src/Plugin/SnippetVariable/ViewDeriver.php
@@ -16,14 +16,14 @@ class ViewDeriver extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The module handler to invoke the alter hook.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Creates the FormDeriver object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ModuleHandlerInterface $module_handler) {
diff --git a/src/SnippetAccessControlHandler.php b/src/SnippetAccessControlHandler.php
index 97fd98d..080d78d 100644
--- a/src/SnippetAccessControlHandler.php
+++ b/src/SnippetAccessControlHandler.php
@@ -18,7 +18,7 @@ class SnippetAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\snippet_manager\SnippetInterface $entity */
+    /** @var SnippetInterface $entity */
     if ($operation == 'view' && $entity->status()) {
       return AccessResult::allowed()->addCacheableDependency($entity);
     }
diff --git a/src/SnippetAwareInterface.php b/src/SnippetAwareInterface.php
index 699b0bb..e023b1c 100644
--- a/src/SnippetAwareInterface.php
+++ b/src/SnippetAwareInterface.php
@@ -10,7 +10,7 @@ interface SnippetAwareInterface {
   /**
    * Sets the snippet for this object.
    *
-   * @param \Drupal\snippet_manager\SnippetInterface $snippet
+   * @param SnippetInterface $snippet
    *   The snippet.
    */
   public function setSnippet(SnippetInterface $snippet);
@@ -18,7 +18,7 @@ interface SnippetAwareInterface {
   /**
    * Gets the snippet from this object.
    *
-   * @return \Drupal\snippet_manager\SnippetInterface
+   * @return SnippetInterface
    *   The snippet.
    */
   public function getSnippet();
diff --git a/src/SnippetAwareTrait.php b/src/SnippetAwareTrait.php
index 5280b7b..45cf832 100644
--- a/src/SnippetAwareTrait.php
+++ b/src/SnippetAwareTrait.php
@@ -12,7 +12,7 @@ trait SnippetAwareTrait {
   /**
    * The snippet.
    *
-   * @var \Drupal\snippet_manager\SnippetInterface
+   * @var SnippetInterface
    */
   protected $snippet;
 
diff --git a/src/SnippetInterface.php b/src/SnippetInterface.php
index a3e1816..75a454c 100644
--- a/src/SnippetInterface.php
+++ b/src/SnippetInterface.php
@@ -46,7 +46,7 @@ interface SnippetInterface extends ConfigEntityInterface {
   /**
    * Returns a collection of snippet variables.
    *
-   * @return \Drupal\snippet_manager\SnippetVariableCollection
+   * @return SnippetVariableCollection
    *   The collection if initialized snippet variables.
    */
   public function getPluginCollection();
diff --git a/src/SnippetLibraryBuilder.php b/src/SnippetLibraryBuilder.php
index 0a0aba5..611015e 100644
--- a/src/SnippetLibraryBuilder.php
+++ b/src/SnippetLibraryBuilder.php
@@ -23,41 +23,41 @@ class SnippetLibraryBuilder {
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Snippet renderer.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * File system wrapper.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The library discovery service.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;
 
   /**
    * Constructs a new SnippetLibraryBuilder instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The manager service.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger channel.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system wrapper.
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $library_discovery
+   * @param LibraryDiscoveryInterface $library_discovery
    *   The library discovery service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LoggerChannelInterface $logger, FileSystemInterface $file_system, LibraryDiscoveryInterface $library_discovery) {
@@ -75,7 +75,7 @@ class SnippetLibraryBuilder {
 
     $storage = $this->entityTypeManager->getStorage('snippet');
 
-    /** @var \Drupal\snippet_manager\SnippetInterface $snippet */
+    /** @var SnippetInterface $snippet */
     foreach ($storage->loadMultiple() as $snippet) {
       $name = 'snippet_' . $snippet->id();
       // Preprocess option was added in 8.x-1.4, so it might not be defined
diff --git a/src/SnippetListBuilder.php b/src/SnippetListBuilder.php
index 98d1aa7..59268d1 100644
--- a/src/SnippetListBuilder.php
+++ b/src/SnippetListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\snippet_manager;
 
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Link;
@@ -46,7 +47,7 @@ class SnippetListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\snippet_manager\SnippetInterface $entity */
+    /** @var SnippetInterface $entity */
     $row['name'] = $entity->toLink();
     $row['id'] = $entity->id();
 
@@ -97,7 +98,7 @@ class SnippetListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function getDefaultOperations(EntityInterface $entity) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $operations = parent::getDefaultOperations($entity);
     $operations['duplicate'] = [
       'title' => $this->t('Duplicate'),
diff --git a/src/SnippetManagerTwigExtension.php b/src/SnippetManagerTwigExtension.php
index 2225a67..58947f9 100644
--- a/src/SnippetManagerTwigExtension.php
+++ b/src/SnippetManagerTwigExtension.php
@@ -15,14 +15,14 @@ class SnippetManagerTwigExtension extends AbstractExtension {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new SnippetManagerRouteSubscriber.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -39,7 +39,7 @@ class SnippetManagerTwigExtension extends AbstractExtension {
         if (!$snippet || !$snippet->access('view')) {
           throw new RuntimeException(sprintf('Could not load snippet %s.', $snippet_id));
         }
-        /** @var \Drupal\snippet_manager\SnippetViewBuilder $view_builder */
+        /** @var SnippetViewBuilder $view_builder */
         $view_builder = $this->entityTypeManager->getViewBuilder('snippet');
         return $view_builder->view($snippet, 'full', NULL, $context);
       }),
diff --git a/src/SnippetTemplateLoader.php b/src/SnippetTemplateLoader.php
index 93a22c0..e8c39ac 100644
--- a/src/SnippetTemplateLoader.php
+++ b/src/SnippetTemplateLoader.php
@@ -15,7 +15,7 @@ class SnippetTemplateLoader implements LoaderInterface {
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -44,7 +44,7 @@ class SnippetTemplateLoader implements LoaderInterface {
   public function getSourceContext($name) {
     $snippet_id = explode('/', $name)[1];
 
-    /** @var \Drupal\snippet_manager\SnippetInterface $snippet */
+    /** @var SnippetInterface $snippet */
     $snippet = $this->entityTypeManager->getStorage('snippet')->load($snippet_id);
     if (!$snippet || !$snippet->access('view')) {
       throw new LoaderError(sprintf('Could not load snippet "%s".', $snippet_id));
@@ -63,7 +63,7 @@ class SnippetTemplateLoader implements LoaderInterface {
   public function getSource($name) {
     $snippet_id = explode('/', $name)[1];
 
-    /** @var \Drupal\snippet_manager\SnippetInterface $snippet */
+    /** @var SnippetInterface $snippet */
     $snippet = $this->entityTypeManager->getStorage('snippet')->load($snippet_id);
     if (!$snippet || !$snippet->access('view')) {
       throw new LoaderError(sprintf('Could not load snippet "%s".', $snippet_id));
diff --git a/src/SnippetVariableCollection.php b/src/SnippetVariableCollection.php
index 2f4b71b..831154d 100644
--- a/src/SnippetVariableCollection.php
+++ b/src/SnippetVariableCollection.php
@@ -12,21 +12,21 @@ class SnippetVariableCollection implements \IteratorAggregate {
   /**
    * The snippet.
    *
-   * @var \Drupal\snippet_manager\SnippetInterface
+   * @var SnippetInterface
    */
   protected $snippet;
 
   /**
    * Snippet variable plugin manager.
    *
-   * @var \Drupal\snippet_manager\SnippetVariablePluginManager
+   * @var SnippetVariablePluginManager
    */
   protected $variableManager;
 
   /**
    * SnippetVariableCollection constructor.
    *
-   * @param \Drupal\snippet_manager\SnippetInterface $snippet
+   * @param SnippetInterface $snippet
    *   The snippet.
    */
   public function __construct(SnippetInterface $snippet) {
@@ -36,7 +36,7 @@ class SnippetVariableCollection implements \IteratorAggregate {
   /**
    * Returns the snippet variable plugin manager.
    *
-   * @return \Drupal\snippet_manager\SnippetVariablePluginManager
+   * @return SnippetVariablePluginManager
    *   Snippet variable plugin manager.
    */
   protected function variableManager() {
@@ -52,7 +52,7 @@ class SnippetVariableCollection implements \IteratorAggregate {
    * @param string $name
    *   A name of the variable.
    *
-   * @return \Drupal\snippet_manager\SnippetVariableInterface|null
+   * @return SnippetVariableInterface|null
    *   A fully configured snippet variable or null if plugin was not found.
    */
   public function createInstance($name) {
diff --git a/src/SnippetVariableInterface.php b/src/SnippetVariableInterface.php
index 5521788..252603c 100644
--- a/src/SnippetVariableInterface.php
+++ b/src/SnippetVariableInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\snippet_manager;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ -15,7 +16,7 @@ interface SnippetVariableInterface extends PluginFormInterface, PluginInspection
   /**
    * Defines variable type.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Variable type.
    */
   public function getType();
diff --git a/src/SnippetVariablePluginManager.php b/src/SnippetVariablePluginManager.php
index 51d038e..a0b2119 100644
--- a/src/SnippetVariablePluginManager.php
+++ b/src/SnippetVariablePluginManager.php
@@ -17,9 +17,9 @@ class SnippetVariablePluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/SnippetViewBuilder.php b/src/SnippetViewBuilder.php
index 4e878ac..3ab3552 100644
--- a/src/SnippetViewBuilder.php
+++ b/src/SnippetViewBuilder.php
@@ -27,14 +27,14 @@ class SnippetViewBuilder implements EntityViewBuilderInterface, EntityHandlerInt
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a new SnippetViewBuilder.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ModuleHandlerInterface $module_handler) {
@@ -53,7 +53,7 @@ class SnippetViewBuilder implements EntityViewBuilderInterface, EntityHandlerInt
   /**
    * Builds the render array for the provided snippet.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $snippet
+   * @param EntityInterface $snippet
    *   The snippet to render.
    * @param string $view_mode
    *   (optional) The view mode that should be used to render the snippet.
@@ -83,7 +83,7 @@ class SnippetViewBuilder implements EntityViewBuilderInterface, EntityHandlerInt
   /**
    * Builds the render array for the source view mode.
    *
-   * @param \Drupal\snippet_manager\SnippetInterface $snippet
+   * @param SnippetInterface $snippet
    *   The snippet to render.
    *
    * @return array
@@ -103,7 +103,7 @@ class SnippetViewBuilder implements EntityViewBuilderInterface, EntityHandlerInt
 
     $value = $this->view($snippet);
     // Render the snippet immediately to calculate render time.
-    $build['content']['#value'] = (string) render($value);
+    $build['content']['#value'] = (string) \Drupal::service('renderer')->render($value);
 
     $render_time = Timer::read('snippet');
 
@@ -126,7 +126,7 @@ class SnippetViewBuilder implements EntityViewBuilderInterface, EntityHandlerInt
   /**
    * Builds render array.
    *
-   * @param \Drupal\snippet_manager\SnippetInterface $snippet
+   * @param SnippetInterface $snippet
    *   A snippet.
    * @param array $context
    *   Twig context.
@@ -146,7 +146,7 @@ class SnippetViewBuilder implements EntityViewBuilderInterface, EntityHandlerInt
     );
 
     $build = [];
-    /** @var \Drupal\snippet_manager\SnippetVariableInterface|null $plugin */
+    /** @var SnippetVariableInterface|null $plugin */
     foreach ($snippet->getPluginCollection() as $variable_name => $plugin) {
       $default_context[$variable_name] = $plugin ? $plugin->build() : '';
       if ($plugin instanceof CacheableDependencyInterface) {
diff --git a/tests/snippet_manager_test/src/EventSubscriber/DisplayVariantSubscriber.php b/tests/snippet_manager_test/src/EventSubscriber/DisplayVariantSubscriber.php
index 287a852..2f7089b 100644
--- a/tests/snippet_manager_test/src/EventSubscriber/DisplayVariantSubscriber.php
+++ b/tests/snippet_manager_test/src/EventSubscriber/DisplayVariantSubscriber.php
@@ -16,23 +16,23 @@ class DisplayVariantSubscriber implements EventSubscriberInterface {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The variant manager.
    *
-   * @var \Drupal\Core\Display\VariantManager
+   * @var VariantManager
    */
   protected $variantManager;
 
   /**
    * Constructs subscriber object.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Display\VariantManager $variant_manager
+   * @param VariantManager $variant_manager
    *   The variant manager.
    */
   public function __construct(RequestStack $request_stack, VariantManager $variant_manager) {
@@ -43,7 +43,7 @@ class DisplayVariantSubscriber implements EventSubscriberInterface {
   /**
    * Event callback.
    *
-   * @param \Drupal\Core\Render\PageDisplayVariantSelectionEvent $event
+   * @param PageDisplayVariantSelectionEvent $event
    *   The event to process.
    */
   public function onSelectPageDisplayVariant(PageDisplayVariantSelectionEvent $event) {
