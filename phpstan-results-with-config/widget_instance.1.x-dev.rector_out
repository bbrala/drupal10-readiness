modules/contrib/widget_instance/src/ComputedHtmlIdItemList.php
modules/contrib/widget_instance/src/Entity/WidgetInstance.php
modules/contrib/widget_instance/src/Plugin/Field/FieldWidget/DisplayOptionsWidget.php
modules/contrib/widget_instance/src/WidgetInstanceAccessControlHandler.php
modules/contrib/widget_instance/src/WidgetInstanceInterface.php
modules/contrib/widget_instance/src/WidgetInstanceListBuilder.php
modules/contrib/widget_instance/src/WidgetInstanceViewBuilder.php
modules/contrib/widget_instance/tests/src/FunctionalJavascript/WidgetInstanceTranslationTest.php
modules/contrib/widget_instance/tests/src/FunctionalJavascript/WidgetInstanceViewBuilderTest.php
modules/contrib/widget_instance/tests/src/Kernel/ComputedHtmlIdItemListTest.php
modules/contrib/widget_instance/tests/src/Kernel/WidgetInstanceAccessControlHandlerTest.php
modules/contrib/widget_instance/widget_instance.install
modules/contrib/widget_instance/widget_instance.module

8 files with changes
====================

1) modules/contrib/widget_instance/tests/src/Kernel/WidgetInstanceAccessControlHandlerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\widget_instance\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\widget_instance\WidgetInstanceInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
  */
 class WidgetInstanceAccessControlHandlerTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
   /**
    * The system under test.
    *
-   * @var \Drupal\widget_instance\WidgetInstanceAccessControlHandler
+   * @var WidgetInstanceAccessControlHandler
    */
   private $theSut;

@@ @@
   /**
    * The entity.
    *
-   * @var \Drupal\widget_instance\WidgetInstanceInterface
+   * @var WidgetInstanceInterface
    */
   private $entity;

@@ @@
    *
    * @SuppressWarnings(PHPMD.StaticAccess)
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     \Drupal::setContainer($this->container);
     $this->installEntitySchema('widget_type');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/widget_instance/tests/src/Kernel/ComputedHtmlIdItemListTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\widget_instance\Kernel;

+use Drupal\widget_instance\WidgetInstanceInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\widget_instance\Entity\WidgetInstance;
 use Drupal\widget_type\Entity\WidgetType;
@@ @@
   /**
    * The entity.
    *
-   * @var \Drupal\widget_instance\WidgetInstanceInterface
+   * @var WidgetInstanceInterface
    */
   private $entity;

@@ @@
    *
    * @SuppressWarnings(PHPMD.StaticAccess)
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     \Drupal::setContainer($this->container);
     $this->installEntitySchema('widget_type');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/widget_instance/tests/src/FunctionalJavascript/WidgetInstanceViewBuilderTest.php:32

    ---------- begin diff ----------
@@ @@
    * @SuppressWarnings(PHPMD.StaticAccess)
    */
   public function testView() {
-    $module_dir = drupal_get_path('module', 'widget_instance');
+    $module_dir = \Drupal::service('extension.list.module')->getPath('widget_instance');
     $uri = 'base:/' . $module_dir . '/tests/widgets/widget-boilerplate/v1';
     $widget_directory = Url::fromUri($uri, ['absolute' => TRUE])->toString();
     $widget_type = WidgetType::create([
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/widget_instance/tests/src/FunctionalJavascript/WidgetInstanceTranslationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\widget_instance\FunctionalJavascript;

+use Drupal\widget_instance\WidgetInstanceInterface;
 use Drupal\Core\Url;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ @@
   /**
    * The widget instance.
    *
-   * @var \Drupal\widget_instance\WidgetInstanceInterface
+   * @var WidgetInstanceInterface
    */
   private $widgetInstance;

@@ @@
    *
    * @SuppressWarnings(PHPMD.StaticAccess)
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->enableTranslation();
     $this->setupLanguages();
-    $module_dir = drupal_get_path('module', 'widget_instance');
+    $module_dir = \Drupal::service('extension.list.module')->getPath('widget_instance');
     $uri = 'base:/' . $module_dir . '/tests/widgets/widget-boilerplate/v1';
     $widget_directory = Url::fromUri($uri, ['absolute' => TRUE])->toString();
     $widget_type = WidgetType::create([
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/widget_instance/src/WidgetInstanceListBuilder.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new WidgetInstanceListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/widget_instance/src/WidgetInstanceInterface.php:62

    ---------- begin diff ----------
@@ @@
   /**
    * Set the widget_instance type.
    *
-   * @param \Drupal\widget_type\WidgetTypeInterface $widget_type
+   * @param WidgetTypeInterface $widget_type
    *   The widget_instance type.
    *
    * @return \Drupal\widget_instance\self
@@ @@
   /**
    * Get the widget_instance type.
    *
-   * @return \Drupal\widget_type\WidgetTypeInterface|null
+   * @return WidgetTypeInterface|null
    *   The widget_instance type.
    */
   public function getWidgetType(): ?WidgetTypeInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/widget_instance/src/Plugin/Field/FieldWidget/DisplayOptionsWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\widget_instance\Plugin\Field\FieldWidget;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * Generates FAPI arrays from JSON Schema definitions.
    *
-   * @var \SchemaForms\FormGeneratorInterface
+   * @var FormGeneratorInterface
    */
   private $formGenerator;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager, FormGeneratorInterface $form_generator) {
+  public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, $plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager, FormGeneratorInterface $form_generator, private FormGeneratorDrupal $formGeneratorDrupal) {
     parent::__construct($plugin_id, $plugin_definition, $field_definition, $settings, $third_party_settings);
     $this->storage = $entity_type_manager->getStorage('widget_type');
     $this->formGenerator = $form_generator;
+    parent::__construct($plugin_id, $plugin_definition, $field_definition, $settings, $third_party_settings);
   }

   /**
@@ @@
       $configuration['settings'],
       $configuration['third_party_settings'],
       $container->get('entity_type.manager'),
-      $container->get(FormGeneratorDrupal::class)
+      $this->formGeneratorDrupal
     );
   }

@@ @@
    *   The form element to alter.
    * @param int $widget_type_id
    *   The widget type ID.
-   * @param \Drupal\widget_instance\WidgetInstanceInterface $widget_instance
+   * @param WidgetInstanceInterface $widget_instance
    *   The widget instance.
    */
   private function setWidgetTypeSettingsForm(array &$display_options, int $widget_type_id, WidgetInstanceInterface $widget_instance): void {
@@ @@
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function validateParamsElement(array $element, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/widget_instance/src/Entity/WidgetInstance.php:256

    ---------- begin diff ----------
@@ @@
   /**
    * The field definitions for the custom business logic.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition[]
+   * @return BaseFieldDefinition[]
    *   The definitions.
    */
   public static function customBaseFieldDefinitions() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 8 files have been changed by Rector                                       

