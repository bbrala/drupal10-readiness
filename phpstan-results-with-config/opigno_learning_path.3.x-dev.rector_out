modules/contrib/opigno_learning_path/modules/opigno_alter_entity_autocomplete/opigno_alter_entity_autocomplete.module
modules/contrib/opigno_learning_path/modules/opigno_alter_entity_autocomplete/src/Controller/EntityAutocompleteController.php
modules/contrib/opigno_learning_path/modules/opigno_alter_entity_autocomplete/src/EntityAutocompleteMatcherOverride.php
modules/contrib/opigno_learning_path/modules/opigno_alter_entity_autocomplete/src/Routing/AutocompleteRouteSubscriber.php
modules/contrib/opigno_learning_path/modules/opigno_user_selection/opigno_user_selection.module
modules/contrib/opigno_learning_path/modules/opigno_user_selection/src/Controller/OpignoUserSelectionController.php
modules/contrib/opigno_learning_path/modules/opigno_user_selection/src/Element/EntitySelector.php
modules/contrib/opigno_learning_path/opigno_learning_path.install
modules/contrib/opigno_learning_path/opigno_learning_path.module
modules/contrib/opigno_learning_path/opigno_learning_path.tokens.inc
modules/contrib/opigno_learning_path/opigno_learning_path.views.inc
modules/contrib/opigno_learning_path/src/Annotation/LearningPathContentType.php
modules/contrib/opigno_learning_path/src/Annotation/LearningPathMembers.php
modules/contrib/opigno_learning_path/src/Cache/Context/OpignoCurrentCacheContext.php
modules/contrib/opigno_learning_path/src/Controller/LearningPathAchievementController.php
modules/contrib/opigno_learning_path/src/Controller/LearningPathContentController.php
modules/contrib/opigno_learning_path/src/Controller/LearningPathController.php
modules/contrib/opigno_learning_path/src/Controller/LearningPathManagerController.php
modules/contrib/opigno_learning_path/src/Controller/LearningPathMembershipController.php
modules/contrib/opigno_learning_path/src/Controller/LearningPathProgress.php
modules/contrib/opigno_learning_path/src/Controller/LearningPathResults.php
modules/contrib/opigno_learning_path/src/Controller/LearningPathStepsController.php
modules/contrib/opigno_learning_path/src/Controller/OpignoPopupController.php
modules/contrib/opigno_learning_path/src/Entity/LPManagedContent.php
modules/contrib/opigno_learning_path/src/Entity/LPManagedLink.php
modules/contrib/opigno_learning_path/src/Entity/LPModuleAvailability.php
modules/contrib/opigno_learning_path/src/Entity/LPResult.php
modules/contrib/opigno_learning_path/src/Entity/LPStatus.php
modules/contrib/opigno_learning_path/src/Entity/LPStatusViewsData.php
modules/contrib/opigno_learning_path/src/Entity/LatestActivity.php
modules/contrib/opigno_learning_path/src/EventSubscriber/LearningPathEventSubscriber.php
modules/contrib/opigno_learning_path/src/Form/DeleteAchievementsForm.php
modules/contrib/opigno_learning_path/src/Form/LearningPathAdminSettingsForm.php
modules/contrib/opigno_learning_path/src/Form/LearningPathCreateClassForm.php
modules/contrib/opigno_learning_path/src/Form/LearningPathCreateMemberForm.php
modules/contrib/opigno_learning_path/src/Form/LearningPathCreateUserForm.php
modules/contrib/opigno_learning_path/src/Form/LearningPathMembersForm.php
modules/contrib/opigno_learning_path/src/JoinService.php
modules/contrib/opigno_learning_path/src/LPResultAccessControlHandler.php
modules/contrib/opigno_learning_path/src/LPStatusInterface.php
modules/contrib/opigno_learning_path/src/LatestActivityAccessControlHandler.php
modules/contrib/opigno_learning_path/src/LatestActivityInterface.php
modules/contrib/opigno_learning_path/src/LearningPathAccess.php
modules/contrib/opigno_learning_path/src/LearningPathContent.php
modules/contrib/opigno_learning_path/src/LearningPathContentTypesManager.php
modules/contrib/opigno_learning_path/src/LearningPathGroupOperationsLinks.php
modules/contrib/opigno_learning_path/src/LearningPathMembersManager.php
modules/contrib/opigno_learning_path/src/LearningPathMembersPluginBase.php
modules/contrib/opigno_learning_path/src/LearningPathMembersPluginInterface.php
modules/contrib/opigno_learning_path/src/LearningPathValidator.php
modules/contrib/opigno_learning_path/src/LpSteps.php
modules/contrib/opigno_learning_path/src/Plugin/Block/BackLinkBlock.php
modules/contrib/opigno_learning_path/src/Plugin/Block/DocumentsLastGroupBlock.php
modules/contrib/opigno_learning_path/src/Plugin/Block/GroupOperationsBlockLP.php
modules/contrib/opigno_learning_path/src/Plugin/Block/StepsBlock.php
modules/contrib/opigno_learning_path/src/Plugin/LearningPathMembers/MembersPlugin.php
modules/contrib/opigno_learning_path/src/Plugin/LearningPathMembers/RecipientsPlugin.php
modules/contrib/opigno_learning_path/src/Plugin/views/field/GroupMembershipStatus.php
modules/contrib/opigno_learning_path/src/Plugin/views/field/OpignoGroupMembership.php
modules/contrib/opigno_learning_path/src/Plugin/views/field/OpignoLearningPathProgress.php
modules/contrib/opigno_learning_path/src/Plugin/views/field/OpignoLearningPathTakeLink.php
modules/contrib/opigno_learning_path/src/Plugin/views/filter/OpignoGroupMembershipBoolean.php
modules/contrib/opigno_learning_path/src/Plugin/views/filter/OpignoGroupMembershipStatus.php
modules/contrib/opigno_learning_path/src/Progress.php
modules/contrib/opigno_learning_path/src/Routing/RouteSubscriber.php
modules/contrib/opigno_learning_path/src/Traits/LearningPathAchievementTrait.php
modules/contrib/opigno_learning_path/src/TwigExtension/DefaultTwigExtension.php
modules/contrib/opigno_learning_path/tests/src/Functional/LearningPathBrowserTestBase.php
modules/contrib/opigno_learning_path/tests/src/Functional/OpignoLinkConditionTest.php
modules/contrib/opigno_learning_path/tests/src/Functional/OpignoModuleScoreTest.php
modules/contrib/opigno_learning_path/tests/src/Functional/TrainingAccessTest.php
modules/contrib/opigno_learning_path/tests/src/Functional/TrainingCompleteTest.php
modules/contrib/opigno_learning_path/tests/src/Functional/TrainingContentTrait.php
modules/contrib/opigno_learning_path/tests/src/Functional/TrainingEditInterfaceAccessTest.php
modules/contrib/opigno_learning_path/tests/src/FunctionalJavascript/LearningPathWebDriverTestBase.php
modules/contrib/opigno_learning_path/tests/src/FunctionalJavascript/TrainingEditInterfaceTest.php

47 files with changes
=====================

1) modules/contrib/opigno_learning_path/tests/src/FunctionalJavascript/LearningPathWebDriverTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\opigno_learning_path\FunctionalJavascript;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\user\UserInterface;
+use Drupal\Core\Session\AccountSwitcherInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\Tests\opigno_learning_path\Functional\TrainingContentTrait;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * A test user with group creation rights.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $groupCreator;

@@ @@
   /**
    * Account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->entityTypeManager = $this->container->get('entity_type.manager');
     $this->accountSwitcher = $this->container->get('account_switcher');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/opigno_learning_path/tests/src/Functional/TrainingContentTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\opigno_learning_path\Functional;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\opigno_module\Entity\OpignoAnswer;
+use Drupal\group\Plugin\GroupContentEnablerInterface;
 use Drupal\group\Entity\Group;
 use Drupal\group\Entity\GroupContent;
 use Drupal\opigno_group_manager\Entity\OpignoGroupManagedContent;
@@ @@
    * @param array $values
    *   (optional) The values used to create the entity.
    *
-   * @return \Drupal\group\Entity\Group
+   * @return Group
    *   The created group entity of type learning_path.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function createGroup(array $values = []) {
     /* @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
@@ @@
   /**
    * Add Module to a Training.
    *
-   * @param \Drupal\group\Entity\Group $training
+   * @param Group $training
    *   Group.
-   * @param \Drupal\opigno_module\Entity\OpignoModule $module
+   * @param OpignoModule $module
    *   Module.
    * @param int $is_mandatory
    *   Content is required.
    *
-   * @return \Drupal\group\Entity\Group
+   * @return Group
    *   The training with contents.
    */
   protected function addModuleToTraining(Group $training, OpignoModule $module, $is_mandatory = 1) {
@@ @@
    * @param array $values
    *   Module values.
    *
-   * @return \Drupal\opigno_module\Entity\OpignoModule
+   * @return OpignoModule
    *   The Opigno module with activities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function createOpignoModule(array $values = []) {
     /* @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
@@ @@
    * @return array
    *   An array of activities objects.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function createActivities(array $values, $number = 1) {
     $activities = [];
@@ @@
    * @param int $score
    *   Score.
    *
-   * @return \Drupal\opigno_module\Entity\OpignoAnswer
+   * @return OpignoAnswer
    *   Opigno Answer entity.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function createAnswer($activity, $module, $attempt, $uid, $score) {
     $answer = \Drupal::entityTypeManager()->getStorage('opigno_answer')->create([
@@ @@
    * Adds user group role.
    */
   protected function addGroupRoleForUser(Group $group, $user, $roles) {
-    /** @var \Drupal\group\Plugin\GroupContentEnablerInterface $plugin */
+    /** @var GroupContentEnablerInterface $plugin */
     $plugin = $group->getGroupType()->getContentPlugin('group_membership');
     $group_content = GroupContent::create([
       'type' => $plugin->getContentTypeConfigId(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/opigno_learning_path/tests/src/Functional/OpignoModuleScoreTest.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     \Drupal::service('module_installer')->install([
       'opigno_statistics',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/opigno_learning_path/tests/src/Functional/OpignoLinkConditionTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Install dependencies.
     \Drupal::service('module_installer')->install([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/opigno_learning_path/tests/src/Functional/LearningPathBrowserTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\opigno_learning_path\Functional;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\user\UserInterface;
+use Drupal\Core\Session\AccountSwitcherInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * A test user with group creation rights.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $groupCreator;

@@ @@
   /**
    * Account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->entityTypeManager = $this->container->get('entity_type.manager');
     $this->accountSwitcher = $this->container->get('account_switcher');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/opigno_learning_path/src/TwigExtension/DefaultTwigExtension.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path\TwigExtension;

+use Drupal\opigno_learning_path\Progress;
 use Drupal\Core\Link;
 use Drupal\Core\Render\Markup;
 use Drupal\Core\Url;
@@ @@
           $link = [
             'title' => $joinLabel,
             'route' => 'user.login',
-            'args' => ['destination' => render($url)->toString()],
+            'args' => ['destination' => \Drupal::service('renderer')->render($url)->toString()],
           ];
         }
       }
@@ @@
       $link = [
         'title' => t('Create an account and subscribe'),
         'route' => 'user.login',
-        'args' => ['prev_path' => render($url)->toString()],
+        'args' => ['prev_path' => \Drupal::service('renderer')->render($url)->toString()],
       ];
     }

@@ @@
         $url = Url::fromRoute($link['route'], $link['args'], ['attributes' => $attributes]);
         $l = Link::fromTextAndUrl($link['title'], $url)->toRenderable();

-        return render($l);
+        return \Drupal::service('renderer')->render($l);
       }
     }

@@ @@
             '#type' => 'inline_template',
             '#template' => '<div class="top-text complete"><i class="fi fi-rr-lock"></i><div>{{"Complete"|t}}<br>{{top_text}}<br>{{"before"|t}}</div></div>',
             '#context' => [
-              'top_text' => render($top_text) ?? '',
+              'top_text' => \Drupal::service('renderer')->render($top_text) ?? '',
             ],
           ];
         }
@@ @@
       return [];
     }

-    /** @var \Drupal\opigno_learning_path\Progress $progress_service */
+    /** @var Progress $progress_service */
     $progress_service = \Drupal::service('opigno_learning_path.progress');
     if ($ajax) {
       $content = $progress_service->getProgressAjaxContainer($group->id(), $account->id(), '', $class);
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/opigno_learning_path/src/Traits/LearningPathAchievementTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path\Traits;

+use Drupal\opigno_module\Entity\UserModuleStatus;
+use Drupal\opigno_module\Entity\OpignoAnswer;
 use Drupal\group\Entity\GroupInterface;
 use Drupal\opigno_group_manager\Controller\OpignoGroupManagerController;
 use Drupal\opigno_group_manager\OpignoGroupContext;
@@ @@
    *
    * @param array $attempts
    *   User module attempts.
-   * @param \Drupal\opigno_module\Entity\OpignoModule $module
+   * @param OpignoModule $module
    *   Module.
    *
-   * @return \Drupal\opigno_module\Entity\UserModuleStatus
+   * @return UserModuleStatus
    *   $attempt
    */
   protected function getTargetAttempt(array $attempts, OpignoModule $module) {
@@ @@
     $parent = isset($course) ? $course : $training;
     $step = opigno_learning_path_get_module_step($parent->id(), $user->id(), $module, $latest_cert_date);

-    /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
+    /** @var OpignoModule $module */
     $module = OpignoModule::load($step['id']);
-    /** @var \Drupal\opigno_module\Entity\UserModuleStatus[] $attempts */
+    /** @var UserModuleStatus[] $attempts */
     $attempts = $module->getModuleAttempts($user, NULL, $latest_cert_date);

     if ($moduleHandler->moduleExists('opigno_skills_system') && $module->getSkillsActive() && $module->getModuleSkillsGlobal() && !empty($attempts)) {
@@ @@
     else {
       $activities = $module->getModuleActivities();
     }
-    /** @var \Drupal\opigno_module\Entity\OpignoActivity[] $activities */
+    /** @var OpignoActivity[] $activities */
     $activities = array_map(function ($activity) {
-      /** @var \Drupal\opigno_module\Entity\OpignoActivity $activity */
+      /** @var OpignoActivity $activity */
       return OpignoActivity::load($activity->id);
     }, $activities);
     return [$activities, $attempts];
@@ @@
     $user = $this->currentUser();

     /** @var \Drupal\opigno_module\Entity\OpignoActivity $activity */
-    /** @var \Drupal\opigno_module\Entity\OpignoAnswer $answer */
+    /** @var OpignoAnswer $answer */
     $array_map = [];
     foreach ($activities as $key => $activity) {
       $answer = isset($attempt)
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/opigno_learning_path/src/Progress.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path;

+use Drupal\Core\Database\Connection;
+use Drupal\group\Entity\GroupInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\group\Entity\GroupContent;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Link;
 use Drupal\Core\Render\Markup;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The database layer.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The RequestStack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
    *   Renderable array.
    */
   public function getProgressBuildGroupPage(int $group_id, int $account_id, $latest_cert_date): array {
-    /** @var \Drupal\group\Entity\GroupInterface $group */
+    /** @var GroupInterface $group */
     $group = Group::load($group_id);
     $account = User::load($account_id);

@@ @@
    */
   public function getProgressBuildModulePage(int $group_id, int $account_id): array {
     $home_link = Link::createFromRoute(Markup::create($this->t('home') . '<i class="icon-home-2"></i>'), 'entity.group.canonical', ['group' => $group_id], ['attributes' => ['class' => ['w-100']]])->toRenderable();
-    $home_link = render($home_link);
+    $home_link = \Drupal::service('renderer')->render($home_link);

     $progress = $this->getProgressRound($group_id, $account_id);

@@ @@
     $group = Group::load($group_id);
     $account = User::load($account_id);

-    /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
+    /** @var DateFormatterInterface $date_formatter */
     $date_formatter = \Drupal::service('date.formatter');

-    /** @var \Drupal\group\Entity\GroupContent $member */
+    /** @var GroupContent $member */
     $member = $group->getMember($account)->getGroupContent();
     $registration = $member->getCreatedTime();
     $registration = $date_formatter->format($registration, 'custom', 'm/d/Y');
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/opigno_learning_path/src/Plugin/views/field/OpignoLearningPathProgress.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Opigno learning path progress service.
    *
-   * @var \Drupal\opigno_learning_path\Progress
+   * @var Progress
    */
   protected $progress;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/opigno_learning_path/src/Plugin/Block/StepsBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path\Plugin\Block;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\opigno_group_manager\ContentTypeBase;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\opigno_group_manager\OpignoGroupContent;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableMetadata;
@@ @@
   /**
    * Service "opigno_group_manager.content_types.manager" definition.
    *
-   * @var \Drupal\opigno_group_manager\OpignoGroupContentTypesManager
+   * @var OpignoGroupContentTypesManager
    */
   protected $opignoGroupContentTypesManager;

@@ @@
   /**
    * Process module list.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function processModuleList($elements) {
     foreach ($elements["steps"] as &$step) {
@@ @@
   /**
    * Take a module link.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    * @todo Previously it can be take or next link, it should be researched.
-   *
    */
   protected function getLink($step): Url {
     $content_step = OpignoGroupManagedContent::load($step['cid']);
-    /** @var \Drupal\opigno_group_manager\ContentTypeBase $content_type */
+    /** @var ContentTypeBase $content_type */
     $content_type = $this->opignoGroupContentTypesManager->createInstance($content_step->getGroupContentTypeId());
     $step_url = $content_type->getStartContentUrl($content_step->getEntityId(), $this->getCurrentGroupId());
     return Url::fromRoute($step_url->getRouteName(), $step_url->getRouteParameters());
@@ @@
    */
   public function getLinkToStart($step): ?Url {
     $link = NULL;
-    /** @var \Drupal\opigno_learning_path\Controller\LearningPathStepsController $controller */
+    /** @var LearningPathStepsController $controller */
     $controller = \Drupal::classResolver(LearningPathStepsController::class);
     if ($step['step_first']) {
       return $this->getLink($step);
@@ @@
   /**
    * Loading a training/course and module entities by step array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getTrainingAndCourse($step): array {

@@ @@
       ];
     }

-    /** @var \Drupal\opigno_group_manager\OpignoGroupContent $content */
+    /** @var OpignoGroupContent $content */
     $content = $this->entityTypeManager()
       ->getStorage('opigno_group_content')
       ->load($step_training["cid"]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/opigno_learning_path/src/Plugin/Block/DocumentsLastGroupBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path\Plugin\Block;

+use Drupal\Component\Plugin\Context\ContextInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Url;

@@ @@
 class DocumentsLastGroupBlock extends BlockBase {

   /**
-   * @var \Drupal\Component\Plugin\Context\ContextInterface[]|mixed
+   * @var ContextInterface[]|mixed
    */
   protected $groupId;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/opigno_learning_path/src/Plugin/Block/BackLinkBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path\Plugin\Block;

+use Drupal\Component\Plugin\Context\ContextInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Link;
@@ @@
 class BackLinkBlock extends SystemBreadcrumbBlock implements ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\Component\Plugin\Context\ContextInterface[]|void
+   * @var ContextInterface[]|void
    */
   protected $isOverrideJS = NULL;

@@ @@
    */
   public function build() {
     $config = $this->configuration;
-    /** @var \Drupal\Core\Link[] $links */
+    /** @var Link[] $links */
     $links = $this->getLinks();
-    /** @var \Drupal\Core\Link $last_link */
+    /** @var Link $last_link */
     $last_link = array_pop($links);
     if ($last_link instanceof Link) {
       return [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/opigno_learning_path/src/LpSteps.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path;

+use Drupal\Core\Database\Connection;
+use Symfony\Component\HttpFoundation\RequestStack;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\opigno_module\Entity\UserModuleStatus;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\opigno_module\Entity\OpignoModule;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The database layer.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The RequestStack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $moduleHandler;

@@ @@
     $results = &drupal_static(__FUNCTION__);

     if (!isset($results[$key])) {
-      /** @var \Drupal\opigno_group_manager\Entity\OpignoGroupManagedContent $content */
+      /** @var OpignoGroupManagedContent $content */
       $content = current(OpignoGroupManagedContent::loadByProperties([
         'group_id' => $group_id,
         'group_content_type_id' => 'ContentTypeModule',
@@ @@
    *   Training group ID.
    * @param int $uid
    *   User ID.
-   * @param \Drupal\group\Entity\GroupInterface $course
+   * @param GroupInterface $course
    *   Group entity of the course.
    *
    * @return array
    *   Data array about step in a group for a user.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   public function getCourseStep($group_id, $uid, GroupInterface $course, $latest_cert_date = NULL) {
     $id = $course->id();
@@ @@
     $key = "{$group_id}_{$uid}_{$id}_{$latest_cert_date}";
     $results = &drupal_static(__FUNCTION__);
     if (!isset($results[$key])) {
-      /** @var \Drupal\opigno_group_manager\Entity\OpignoGroupManagedContent $content */
+      /** @var OpignoGroupManagedContent $content */
       $content = current(OpignoGroupManagedContent::loadByProperties([
         'group_id' => $group_id,
         'group_content_type_id' => 'ContentTypeCourse',
@@ @@
    * @return array
    *   Data array about step in a group for a user.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getMeetingStep($group_id, $uid, MeetingInterface $meeting) {
     $id = $meeting->id();
@@ @@
     $key = "{$group_id}_{$uid}_$id";
     $results = &drupal_static(__FUNCTION__);
     if (!isset($results[$key])) {
-      /** @var \Drupal\opigno_group_manager\Entity\OpignoGroupManagedContent $content */
+      /** @var OpignoGroupManagedContent $content */
       $content = current(OpignoGroupManagedContent::loadByProperties([
         'group_id' => $group_id,
         'group_content_type_id' => 'ContentTypeMeeting',
@@ @@
    * @return array
    *   Data array about step in a group for a user.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getIltStep($group_id, $uid, ILTInterface $ilt) {
     $id = $ilt->id();
@@ @@
     $key = "{$group_id}_{$uid}_$id";
     $results = &drupal_static(__FUNCTION__);
     if (!isset($results[$key])) {
-      /** @var \Drupal\opigno_group_manager\Entity\OpignoGroupManagedContent $content */
+      /** @var OpignoGroupManagedContent $content */
       $content = current(OpignoGroupManagedContent::loadByProperties([
         'group_id' => $group_id,
         'group_content_type_id' => 'ContentTypeILT',
@@ @@
    */
   public function getTimeSpent($attempts) {
     return array_sum(array_map(function ($attempt) {
-      /** @var \Drupal\opigno_module\Entity\UserModuleStatus $attempt */
+      /** @var UserModuleStatus $attempt */
       $started = (int) $attempt->get('started')->getString();
       $finished = (int) $attempt->get('finished')->getString();

@@ @@
     return array_filter($options['attempts'], function ($attempt) use (
       $options
     ) {
-      /** @var \Drupal\opigno_module\Entity\UserModuleStatus $attempt */
+      /** @var UserModuleStatus $attempt */
       // Check that all actual module activities is evaluated.
       $evaluated = TRUE;
       $answered_count = 0;
@@ @@
     else {
       // Get finish date of the first attempt that has passed.
       $completed_on = !empty($passed_attempts) ? min(array_map(function ($attempt) {
-        /** @var \Drupal\opigno_module\Entity\UserModuleStatus $attempt */
+        /** @var UserModuleStatus $attempt */
         return (int) $attempt->get('finished')->getString();
       }, $passed_attempts)) : 0;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/opigno_learning_path/src/LearningPathValidator.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * Checks if module have at least one activity.
    *
-   * @param \Drupal\opigno_module\Entity\OpignoModule $module
+   * @param OpignoModule $module
    *   Opigno Module Entity.
    * @param int $redirect_step
    *   Step to redirect.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/opigno_learning_path/src/LearningPathMembersPluginBase.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * Returns group members uids.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
    *
    * @return array|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/opigno_learning_path/src/LearningPathGroupOperationsLinks.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
    *   The config factory service.
    * @param \Drupal\opigno_learning_path\ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
    */
   public function __construct(
@@ @@
   /**
    * Prepare the render array to build the available LP action links.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group to build links for.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/opigno_learning_path/src/LearningPathContent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\opigno_learning_path\Entity\LPManagedContent;

 /**
@@ @@
   /**
    * Returns LP content properties array to manager.
    *
-   * @param \Drupal\opigno_learning_path\Entity\LPManagedContent|null $content
+   * @param LPManagedContent|null $content
    *   LP content.
    *
    * @return array
    *   LP content properties array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function toManagerArray(LPManagedContent $content = NULL) {
     if ($content === NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/opigno_learning_path/src/LearningPathAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path;

+use Drupal\group\Entity\GroupContentInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * Sets roles on membership presave.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $membership
+   * @param EntityInterface $membership
    *   Membership object.
    */
   public static function membershipPreSave(EntityInterface &$membership) {
     if ($membership->isNew()) {
-      /** @var \Drupal\group\Entity\GroupContentInterface $membership */
+      /** @var GroupContentInterface $membership */
       $group = $membership->getGroup();
       $group_is_semiprivate = $group->hasField('field_learning_path_visibility')
         && $group->get('field_learning_path_visibility')->getValue() === 'semiprivate';
@@ @@
   /**
    * Merges Learning Path group user status.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $membership
+   * @param EntityInterface $membership
    *   Membership object.
    *
    * @throws \Exception
@@ @@
   public static function mergeUserStatus(EntityInterface $membership) {
     $message = \Drupal::request()->get('user_message');
     $message = !empty($message) ? Html::escape($message) : '';
-    /** @var \Drupal\group\Entity\GroupContentInterface $membership */
+    /** @var GroupContentInterface $membership */
     $group = $membership->getGroup();
     $uid = $membership->getEntity()->id();
     $gid = $group->id();
@@ @@
       ->condition('mid', $membership->id());
     $result = $query->execute();
     if ($result) {
-      /** @var \Drupal\group\Entity\GroupContentInterface $membership */
+      /** @var GroupContentInterface $membership */
       $entity = $membership->getEntity();
       $group = $membership->getGroup();
       if (isset($entity) && isset($group)
@@ @@
   /**
    * Returns uncompleted required trainings flag.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   Group.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User account.
    *
    * @return bool|array
@@ @@
   /**
    * Returns user course/class access flag.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User account.
    *
    * @return bool
@@ @@
    * @param string $role
    *   User role in group.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User account.
    *
    * @param int $gid
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/opigno_learning_path/src/LatestActivityInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path;

+use Drupal\group\Entity\GroupInterface;
+use Drupal\opigno_module\Entity\OpignoModuleInterface;
+use Drupal\user\Entity\User;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Session\AccountInterface;

@@ @@
   /**
    * Gets the training entity.
    *
-   * @return \Drupal\group\Entity\GroupInterface
+   * @return GroupInterface
    *   The training entity.
    */
   public function getTraining();
@@ @@
   /**
    * Sets the training entity.
    *
-   * @param \Drupal\group\Entity\GroupInterface $training
+   * @param GroupInterface $training
    *   The training entity.
    *
    * @return \Drupal\opigno_learning_path\LatestActivityInterface
@@ @@
   /**
    * Gets the module entity.
    *
-   * @return \Drupal\opigno_module\Entity\OpignoModuleInterface
+   * @return OpignoModuleInterface
    *   The module entity.
    */
   public function getModule();
@@ @@
   /**
    * Sets the module entity.
    *
-   * @param \Drupal\opigno_module\Entity\OpignoModuleInterface $module
+   * @param OpignoModuleInterface $module
    *   The module entity.
    *
    * @return \Drupal\opigno_learning_path\LatestActivityInterface
@@ @@
   /**
    * Gets the user entity.
    *
-   * @return \Drupal\user\Entity\User
+   * @return User
    *   The user entity.
    */
   public function getUser();
@@ @@
   /**
    * Sets the user entity.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User account.
    *
    * @return \Drupal\opigno_learning_path\LatestActivityInterface
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/opigno_learning_path/src/LatestActivityAccessControlHandler.php:20

    ---------- begin diff ----------
@@ @@
    * $operation as defined in the routing.yml file.
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\opigno_learning_path\LatestActivityInterface $entity */
+    /** @var LatestActivityInterface $entity */
     // LatestActivity entity only used internally to track a latest activity
     // in trainings for the latest_active_trainings view.
     // Deny all edit operations to all users.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/opigno_learning_path/src/LPStatusInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path;

+use Drupal\group\Entity\GroupInterface;
+use Drupal\user\Entity\User;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\opigno_moxtra\MeetingResultInterface;
@@ @@
   /**
    * Gets the training entity.
    *
-   * @return \Drupal\group\Entity\GroupInterface
+   * @return GroupInterface
    *   The training entity.
    */
   public function getTraining();
@@ @@
   /**
    * Gets the user entity.
    *
-   * @return \Drupal\user\Entity\User
+   * @return User
    *   The user entity.
    */
   public function getUser();
@@ @@
   /**
    * Sets the user entity.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User account.
    *
    * @return \Drupal\opigno_learning_path\LPStatusInterface
@@ @@
    * @param string $status
    *   Training status.
    *
-   * @return \Drupal\opigno_learning_path\LatestActivityInterface
+   * @return LatestActivityInterface
    *   The called entity.
    */
   public function setStatus($status);
@@ @@
    * @param int $timestamp
    *   The timestamp.
    *
-   * @return \Drupal\opigno_learning_path\LatestActivityInterface
+   * @return LatestActivityInterface
    *   The called entity.
    */
   public function setFinished($timestamp);
@@ @@
   /**
    * Checks if the training finished.
    *
-   * @return \Drupal\opigno_learning_path\LatestActivityInterface
+   * @return LatestActivityInterface
    *   Boolean, true if the training was finished, false otherwise.
    */
   public function isFinished();
@@ @@
    * @param int $timestamp
    *   The timestamp.
    *
-   * @return \Drupal\opigno_learning_path\LatestActivityInterface
+   * @return LatestActivityInterface
    *   The called entity.
    */
   public function setStarted($timestamp);
@@ @@
   /**
    * Checks if the training finished.
    *
-   * @return \Drupal\opigno_learning_path\LatestActivityInterface
+   * @return LatestActivityInterface
    *   Boolean, true if the training was started, false otherwise.
    */
   public function isStarted();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/opigno_learning_path/src/LPResultAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path;

+use Drupal\group\Entity\Group;
 use Drupal\Core\Access\AccessException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
@@ @@
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
     /** @var \Drupal\opigno_learning_path\Entity\LPResult $entity */
-    /** @var \Drupal\group\Entity\Group $group */
+    /** @var Group $group */
     $group = $entity->getLearningPath();
     $is_owner = $entity->getUserId() == $account->id();
     if (empty($group) || !is_object($group)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/opigno_learning_path/src/JoinService.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The entity form builder.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   protected $entityFormBuilder;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


24) modules/contrib/opigno_learning_path/src/Form/LearningPathMembersForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path\Form;

+use Drupal\group\Entity\Group;
+use Drupal\group\Entity\GroupContentInterface;
+use Drupal\user\Entity\User;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Markup;
@@ @@
     $content_manager_role = 'learning_path-content_manager';
     $class_manager_role = 'opigno_class-class_manager';

-    /** @var \Drupal\group\Entity\Group $group */
+    /** @var Group $group */
     $group = \Drupal::routeMatch()->getParameter('group');
     $group_bundle = $group->bundle();

@@ @@
     $users = [];
     $classes = [];

-    /** @var \Drupal\group\Entity\GroupContentInterface $item */
+    /** @var GroupContentInterface $item */
     foreach ($content as $item) {
       $entity = $item->getEntity();
       if ($entity === NULL) {
@@ @@
       $member_count = 0;

       $members = array_filter($users, function ($user) use ($class) {
-        /** @var \Drupal\group\Entity\Group $class_entity */
+        /** @var Group $class_entity */
         $class_entity = $class['entity'];
         return $class_entity->getMember($user['entity']) !== FALSE;
       });
@@ @@
         $member_count = $members_view->total_rows;
       }

-      /** @var \Drupal\group\Entity\GroupContentInterface $class_group_content */
+      /** @var GroupContentInterface $class_group_content */
       $class_group_content = $class['group content'];
       $member_since_value = $class_group_content
         ->get('created')
@@ @@
         ->getValue()[0]['value'];
       $member_since = date('d/m/Y', $member_since_value);

-      /** @var \Drupal\group\Entity\Group $class_entity */
+      /** @var Group $class_entity */
       $class_entity = $class['entity'];

       $form[] = [
@@ @@
         'members_table' => !empty($members_view_renderable) ? [
           '#type' => 'html_tag',
           '#tag' => 'div',
-          '#value' => render($members_view_renderable),
+          '#value' => \Drupal::service('renderer')->render($members_view_renderable),
           '#attributes' => [
             'id' => 'class-' . $class_entity->id(),
             'class' => ['class_members', 'class_members_row'],
@@ @@

     if (!empty($individual_members)) {
       $rows = array_map(function ($member_info) use ($group, $student_manager_role, $content_manager_role, $class_manager_role) {
-        /** @var \Drupal\group\Entity\GroupContentInterface $user_group_content */
+        /** @var GroupContentInterface $user_group_content */
         $user_group_content = $member_info['group content'];
         $member_since_value = $user_group_content
           ->get('created')
           ->getValue()[0]['value'];

-        /** @var \Drupal\user\Entity\User $user_entity */
+        /** @var User $user_entity */
         $user_entity = $member_info['entity'];
         $member = $group->getMember($user_entity);
         $roles = $member->getRoles();
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/opigno_learning_path/src/Form/LearningPathCreateUserForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path\Form;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
 use Drupal\Core\Form\FormBase;
@@ @@
     $user = User::create();
     $user->enforceIsNew();
     $user->setUsername($name);
-    $user->setPassword(user_password());
+    $user->setPassword(\Drupal::service('password_generator')->generate());
     $user->setEmail($email);
     $user->set('init', $email);
     $user->set('langcode', $lang);
@@ @@
   /**
    * Get entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   protected function entityTypeManager() {
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/opigno_learning_path/src/Form/LearningPathCreateClassForm.php:133

    ---------- begin diff ----------
@@ @@
     $users = User::loadMultiple($uids);

     // Create new class.
-    /** @var \Drupal\group\Entity\Group $class */
+    /** @var Group $class */
     $class = Group::create([
       'type' => 'opigno_class',
       'label' => $name,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/opigno_learning_path/src/Form/DeleteAchievementsForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Group.
    *
-   * @var \Drupal\group\Entity\Group
+   * @var Group
    */
   protected $group;

@@ @@
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/opigno_learning_path/src/EventSubscriber/LearningPathEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Url;
 use Drupal\opigno_learning_path\LearningPathContentTypesManager;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Event called when a request is sent.
    */
-  public function onKernelRequest(GetResponseEvent $event) {
+  public function onKernelRequest(RequestEvent $event) {
   }

   /**
    * Redirect from canonical module path to module edit.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The route building event.
    */
-  public function moduleRedirect(FilterResponseEvent $event) {
+  public function moduleRedirect(ResponseEvent $event) {
     $route = \Drupal::routeMatch();
     $route_name = $route->getRouteName();
     if ($route_name == 'entity.opigno_module.canonical') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


29) modules/contrib/opigno_learning_path/src/Entity/LatestActivity.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path\Entity;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
    * @param $user_id
    *   The user ID.
    *
-   * @return \Drupal\opigno_learning_path\LatestActivityInterface
+   * @return LatestActivityInterface
    *   Created or updated entity.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public static function insertGroupActivity($training_id, $module_id, $user_id) {
     $query = \Drupal::entityQuery('opigno_latest_group_activity');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/opigno_learning_path/src/Entity/LPStatus.php:237

    ---------- begin diff ----------
@@ @@
   /**
    * Gets training certificate expiration flag.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
    *
    * @return bool
@@ @@
   /**
    * Gets training certificate expiration period.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
    *
    * @return int|null
@@ @@
   /**
    * Returns flag if training certificate expired for the user.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
    * @param int $uid
    *   User ID.
@@ @@
   /**
    * Returns training start date for displaying statistics.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
    * @param int $uid
    *   User ID.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/opigno_learning_path/src/Entity/LPModuleAvailability.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path\Entity;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ @@
    *
    * It's not saved automatically. You need to do $obj->save().
    *
-   * @return \Drupal\Core\Entity\EntityInterface|self
+   * @return EntityInterface|self
    *   LPModuleAvailability object.
    */
   public static function createWithValues(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/opigno_learning_path/src/Entity/LPManagedLink.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path\Entity;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
    * @param int $required_score
    *   The required score to go from the parent to the child content.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|self
+   * @return EntityInterface|self
    *   LPManagedLink object.
    */
   public static function createWithValues(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/opigno_learning_path/src/Entity/LPManagedContent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path\Entity;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\ContentEntityBase;
@@ @@
    * todo: Not sure that we are still using this functional. We have the same functional for entity 'opigno_group_content'.
    * Table with that entity always is empty on DEV instances.
    */
-
   /**
    * Creates a new LPManagedContent object with the values passed in param.
    *
@@ @@
    * @param int $coordinate_y
    *   The Y coordinate for this content in the learning path.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|self
+   * @return EntityInterface|self
    *   LPManagedContent object.
    */
   public static function createWithValues(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/opigno_learning_path/src/Controller/OpignoPopupController.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * OpignoPopupController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder service.
    */
   public function __construct(EntityFormBuilderInterface $entity_form_builder) {
@@ @@
   /**
    * Close the modal.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response object.
    */
   public function closeModal(): AjaxResponse {
@@ @@
   /**
    * Get the delete group confirmation form.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group to be deleted.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response object.
    */
   public function getDeleteGroupForm(GroupInterface $group): AjaxResponse {
@@ @@
   /**
    * Get the delete opigno_module confirmation form.
    *
-   * @param \Drupal\opigno_module\Entity\OpignoModuleInterface $opigno_module
+   * @param OpignoModuleInterface $opigno_module
    *   The module entity to be deleted.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response object.
    */
   public function getDeleteModuleForm(OpignoModuleInterface $opigno_module): AjaxResponse {
@@ @@
   /**
    * Get the delete entity confirmation form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to be deleted.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response object.
    */
   private function getDeleteEntityConfirmPopup(EntityInterface $entity): AjaxResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/opigno_learning_path/src/Controller/LearningPathStepsController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path\Controller;

+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\opigno_module\Entity\UserModuleStatus;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\AppendCommand;
@@ @@
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
    * @param array $content
    *   The popup content.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response to show the popup.
    */
   public function showPopup(array $content): AjaxResponse {
@@ @@
    * @return array
    */
   public function listSteps(Group $group) {
-    /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
+    /** @var DateFormatterInterface $date_formatter */
     $date_formatter = \Drupal::service('date.formatter');

     $group_id = $group->id();
@@ @@
    *
    * @param array $attempts
    *   User module attempts.
-   * @param \Drupal\opigno_module\Entity\OpignoModule $module
+   * @param OpignoModule $module
    *   Module.
    *
-   * @return \Drupal\opigno_module\Entity\UserModuleStatus
+   * @return UserModuleStatus
    *   $attempt
    */
   protected function getTargetAttempt(array $attempts, OpignoModule $module) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/opigno_learning_path/src/Controller/LearningPathProgress.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path\Controller;

+use Symfony\Component\HttpFoundation\Response;
 use Drupal\opigno_learning_path\Progress;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The progress bar generator service.
    *
-   * @var \Drupal\opigno_learning_path\Progress
+   * @var Progress
    */
   protected $progressService;

@@ @@
    * @param string $class
    *   identifier for progress bar.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response object.
    */
   public function getHTML(Group $group, User $account, int $latest_cert_date, string $class) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


37) modules/contrib/opigno_learning_path/src/Controller/LearningPathMembershipController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path\Controller;

+use Drupal\Core\Form\FormBuilder;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\group\Entity\GroupContentInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
 use Drupal\Core\Ajax\ReplaceCommand;
@@ @@
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilder
+   * @var FormBuilder
    */
   protected $formBuilder;

@@ @@
   /**
    * Returns response for the autocompletion.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing the autocomplete suggestions.
    */
   public function addUserToTrainingAutocompleteSelect(Group $group): array {
@@ @@
     $uids = $query->execute();
     $users = User::loadMultiple($uids);

-    /** @var \Drupal\user\Entity\User $user */
+    /** @var User $user */
     foreach ($users as $user) {
       $id = $user->id();
       $name = $user->getDisplayName();
@@ @@
       $classes = Group::loadMultiple($gids);

       $db_connection = \Drupal::service('database');
-      /** @var \Drupal\group\Entity\Group $class */
+      /** @var Group $class */
       foreach ($classes as $class) {
         // Check if class already added.
         $is_class_added = $db_connection->select('group_content_field_data', 'g_c_f_d')
@@ @@
   /**
    * Returns response for the autocompletion.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function addUserToTrainingAutocomplete(Group $group) {
     [$matches, $default] = $this->addUserToTrainingAutocompleteSelect($group);
@@ @@
   /**
    * Returns response for the autocompletion.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing the autocomplete suggestions.
    */
   public function addUserToClassAutocomplete(Group $group) {
@@ @@

       $users = User::loadMultiple($uids);

-      /** @var \Drupal\user\Entity\User $user */
+      /** @var User $user */
       foreach ($users as $user) {
         $id = $user->id();
         $name = $user->getDisplayName();
@@ @@
   /**
    * Returns users of current group for the autocompletion.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing the autocomplete suggestions.
    */
   public function findUsersInGroupAutocomplete() {
@@ @@

     if ($string) {
       $like_string = '%' . $this->connection->escapeLike($string) . '%';
-      /** @var \Drupal\group\Entity\Group $curr_group */
+      /** @var Group $curr_group */
       $curr_group = \Drupal::routeMatch()
         ->getParameter('group');

@@ @@
       $uids = $query->execute();
       $users = User::loadMultiple($uids);

-      /** @var \Drupal\user\Entity\User $user */
+      /** @var User $user */
       foreach ($users as $user) {
         $id = $user->id();
         $name = $user->getDisplayName();
@@ @@
   /**
    * Ajax callback for searching user in a training classes.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
    * @param string $class_id
    *   Class group ID.
@@ @@
    * @param string $uid
    *   User ID.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax command or empty.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function findGroupMember(Group $group, $class_id, $uid) {
     $response = new AjaxResponse();
@@ @@
       $users = [];
       $classes = [];

-      /** @var \Drupal\group\Entity\GroupContentInterface $item */
+      /** @var GroupContentInterface $item */
       foreach ($content as $item) {
         $entity = $item->getEntity();
         if ($entity === NULL) {
@@ @@
    *
    * Removes member from learning path.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Response.
    */
   public function deleteUser() {
-    /** @var \Drupal\group\Entity\Group $group */
+    /** @var Group $group */
     $group = \Drupal::routeMatch()->getParameter('group');
     if (!isset($group)) {
       throw new NotFoundHttpException();
@@ @@
    * Removes class from learning path.
    */
   public function deleteClass() {
-    /** @var \Drupal\group\Entity\Group $group */
+    /** @var Group $group */
     $group = \Drupal::routeMatch()->getParameter('group');

     $class_id = \Drupal::request()->query->get('class_id');
@@ @@
     $content = $group->getContent();
     $account = $this->currentUser();

-    /** @var \Drupal\group\Entity\GroupContentInterface $item */
+    /** @var GroupContentInterface $item */
     foreach ($content as $item) {
       $entity = $item->getEntity();
       $type = $entity->getEntityTypeId();
@@ @@
    * Toggles user role in learning path.
    */
   public function toggleRole() {
-    /** @var \Drupal\group\Entity\Group $group */
+    /** @var Group $group */
     $group = \Drupal::routeMatch()->getParameter('group');
     $query = \Drupal::request()->query;
     $uid = $query->get('uid');
@@ @@
    * Validates user role in learning path.
    */
   public function validate() {
-    /** @var \Drupal\group\Entity\Group $group */
+    /** @var Group $group */
     $group = \Drupal::routeMatch()->getParameter('group');
     $gid = $group->id();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/opigno_learning_path/src/Controller/LearningPathManagerController.php:103

    ---------- begin diff ----------
@@ @@
     $item['entityId'] = $entity->id();
     $item['entityBundle'] = \Drupal::routeMatch()->getParameter('type');
     $item['title'] = $entity->get('label')->getString();
-    $item['imageUrl'] = ($file) ? file_create_url($file->getFileUri()) : '';
+    $item['imageUrl'] = ($file) ? \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri()) : '';

     $response->addCommand(
       new SettingsCommand([
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/opigno_learning_path/src/Controller/LearningPathController.php:147

    ---------- begin diff ----------
@@ @@
       ],
       '#theme' => 'opigno_learning_path_training_content',
     ];
-    /** @var \Drupal\group\Entity\Group $group */
+    /** @var Group $group */
     $group = \Drupal::routeMatch()->getParameter('group');
     if(!($group instanceof GroupInterface)){
       // On of  case an anonymous user hasn't an access to the group.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/opigno_learning_path/src/Controller/LearningPathContentController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path\Controller;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
       '#learning_path_id' => $gid,
       '#group_type' => $group_type,
       '#view_type' => $view_type,
-      '#next_link' => isset($next_link) ? render($next_link) : NULL,
+      '#next_link' => isset($next_link) ? \Drupal::service('renderer')->render($next_link) : NULL,
       '#user_has_info_card' => $tempstore->get('hide_info_card') ? FALSE : TRUE,
       '#parent_learning_path' => $group_type == 'learning_path' ? '?learning_path=' . $gid : '',
     ];
@@ @@
       '#base_href' => $request->getPathInfo(),
       '#learning_path_id' => $group->id(),
       '#module_context' => 'false',
-      '#next_link' => isset($next_link) ? render($next_link) : NULL,
+      '#next_link' => isset($next_link) ? \Drupal::service('renderer')->render($next_link) : NULL,
       '#user_has_info_card' => $tempstore->get('hide_info_card') ? FALSE : TRUE,
     ];
   }
@@ @@
   /**
    * Returns next link.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group.
    *
    * @return array|mixed[]|null
@@ @@
    *
    * It returns all the LP courses in JSON format.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Response.
    */
   public function getCourses(Group $group) {
@@ @@
    *
    * @param array $modules
    *   Initial modules array.
-   * @param \Drupal\Core\Entity\EntityInterface $group
+   * @param EntityInterface $group
    *   Training group.
    *
    * @return array
    *   Sorted modules array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function sortModulesArray(array $modules, EntityInterface $group): array {
     try {
@@ @@
   /**
    * Returns conditional activities with the module.
    *
-   * @param \Drupal\opigno_module\Entity\OpignoModule $opigno_module
+   * @param OpignoModule $opigno_module
    *   Entity OpignoModule".
    * @param array $results
    *   Results.
@@ @@
    * @param string $opigno_entity_id
    *   Entity ID.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Json response.
    */
   public function getModuleRequiredActivities($opigno_entity_type, $opigno_entity_id) {
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/opigno_learning_path/src/Controller/LearningPathAchievementController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_learning_path\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\opigno_module\Entity\UserModuleStatus;
+use Drupal\opigno_module\Entity\OpignoAnswer;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\AppendCommand;
@@ @@
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Progress bar service.
    *
-   * @var \Drupal\opigno_learning_path\Progress
+   * @var Progress
    */
   protected $progress;

@@ @@
   /**
    * Formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Returns max score that user can have in this module & activity.
    *
-   * @param \Drupal\opigno_module\Entity\OpignoModule $module
+   * @param OpignoModule $module
    *   Module object.
-   * @param \Drupal\opigno_module\Entity\OpignoActivity $activity
+   * @param OpignoActivity $activity
    *   Activity object.
    *
    * @return int
@@ @@
   /**
    * Returns module panel renderable array.
    *
-   * @param \Drupal\group\Entity\GroupInterface $training
+   * @param GroupInterface $training
    *   Group.
-   * @param null|\Drupal\group\Entity\GroupInterface $course
+   * @param null|GroupInterface $course
    *   Group.
-   * @param \Drupal\opigno_module\Entity\OpignoModule $module
+   * @param OpignoModule $module
    *   Module.
    *
    * @return array
    *   Module panel renderable array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function build_module_panel(GroupInterface $training, GroupInterface $course = NULL, OpignoModule $module, AccountInterface $account = NULL) {
-    /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
+    /** @var DateFormatterInterface $date_formatter */
     $date_formatter = \Drupal::service('date.formatter');
     $user = $this->currentUser($account);
     $moduleHandler = \Drupal::service('module_handler');
@@ @@
       ? $date_formatter->format($completed_on, 'custom', 'F d, Y')
       : '';

-    /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
+    /** @var OpignoModule $module */
     $module = OpignoModule::load($step['id']);
-    /** @var \Drupal\opigno_module\Entity\UserModuleStatus[] $attempts */
+    /** @var UserModuleStatus[] $attempts */
     $attempts = $module->getModuleAttempts($user, NULL, $latest_cert_date);

     if ($moduleHandler->moduleExists('opigno_skills_system') && $module->getSkillsActive() && $module->getModuleSkillsGlobal() && !empty($attempts)) {
@@ @@
     else {
       $activities = $module->getModuleActivities();
     }
-    /** @var \Drupal\opigno_module\Entity\OpignoActivity[] $activities */
+    /** @var OpignoActivity[] $activities */
     $activities = array_map(function ($activity) {
-      /** @var \Drupal\opigno_module\Entity\OpignoActivity $activity */
+      /** @var OpignoActivity $activity */
       return OpignoActivity::load($activity->id);
     }, $activities);

@@ @@
     $activities_done = 0;
     $activities = array_map(function ($activity) use ($user, $module, $attempt, &$activities_done) {
       /** @var \Drupal\opigno_module\Entity\OpignoActivity $activity */
-      /** @var \Drupal\opigno_module\Entity\OpignoAnswer $answer */
+      /** @var OpignoAnswer $answer */
       $answer = isset($attempt)
         ? $activity->getUserAnswer($module, $attempt, $user)
         : NULL;
@@ @@

     $step = opigno_learning_path_get_module_step($parent->id(), $user->id(), $module, $latest_cert_date);

-    /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
+    /** @var OpignoModule $module */
     $module = OpignoModule::load($step['id']);
-    /** @var \Drupal\opigno_module\Entity\UserModuleStatus[] $attempts */
+    /** @var UserModuleStatus[] $attempts */
     $attempts = $module->getModuleAttempts($user, NULL, $latest_cert_date);

     if ($moduleHandler->moduleExists('opigno_skills_system') && $module->getSkillsActive() && $module->getModuleSkillsGlobal() && !empty($attempts)) {
@@ @@
     else {
       $activities = $module->getModuleActivities();
     }
-    /** @var \Drupal\opigno_module\Entity\OpignoActivity[] $activities */
+    /** @var OpignoActivity[] $activities */
     $activities = array_map(function ($activity) {
-      /** @var \Drupal\opigno_module\Entity\OpignoActivity $activity */
+      /** @var OpignoActivity $activity */
       return OpignoActivity::load($activity->id);
     }, $activities);

@@ @@

     $activities = array_map(function ($activity) use ($user, $module, $attempt) {
       /** @var \Drupal\opigno_module\Entity\OpignoActivity $activity */
-      /** @var \Drupal\opigno_module\Entity\OpignoAnswer $answer */
+      /** @var OpignoAnswer $answer */
       $answer = isset($attempt)
         ? $activity->getUserAnswer($module, $attempt, $user)
         : NULL;
@@ @@
   /**
    * Returns course steps renderable array.
    *
-   * @param \Drupal\group\Entity\GroupInterface $training
+   * @param GroupInterface $training
    *   Parent training group entity.
-   * @param \Drupal\group\Entity\GroupInterface $course
+   * @param GroupInterface $course
    *   Course group entity.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   User account entity.
    *
    * @return array
@@ @@
       list($approved, $approved_percent) = $this->getApprovedModuleByStep($step, $user, $latest_cert_date, $training);
       $badges = $this->getModulesStatusBadges($step, $training, $user->id());

-      /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
+      /** @var OpignoModule $module */
       $module = OpignoModule::load($step['id']);
       return [
         '#theme' => 'opigno_learning_path_training_module',
@@ @@
   /**
    * Returns course passed steps.
    *
-   * @param \Drupal\group\Entity\GroupInterface $training
+   * @param GroupInterface $training
    *   Parent training group entity.
-   * @param \Drupal\group\Entity\GroupInterface $course
+   * @param GroupInterface $course
    *   Course group entity.
    *
    * @return array
@@ @@
   /**
    * Returns LP steps.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   Group.
    *
    * @return array
@@ @@
   /**
    * Returns training timeline.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   Group.
    *
    * @return array
    *   Training timeline.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   protected function build_training_timeline(GroupInterface $group) {
-    /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
+    /** @var DateFormatterInterface $date_formatter */
     $date_formatter = \Drupal::service('date.formatter');
     $user = $this->currentUser();

@@ @@
   /**
    * Returns training summary.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   Group.
    *
    * @return array
    *   Training summary.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   protected function build_training_summary(GroupInterface $group, AccountInterface $account = NULL) {
     $gid = $group->id();
@@ @@
   /**
    * Returns training array.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   Group.
    *
    * @return array
    *   Training array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   protected function build_training(GroupInterface $group = NULL, AccountInterface $account = NULL) {
     return [
@@ @@
   /**
    * Loads module panel with a AJAX.
    *
-   * @param \Drupal\group\Entity\GroupInterface $training
+   * @param GroupInterface $training
    *   Training group.
-   * @param null|\Drupal\group\Entity\GroupInterface $course
+   * @param null|GroupInterface $course
    *   Course group.
-   * @param \Drupal\opigno_module\Entity\OpignoModule $opigno_module
+   * @param OpignoModule $opigno_module
    *   Opigno module.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Response.
    */
   public function course_module_panel_ajax(GroupInterface $training, GroupInterface $course, OpignoModule $opigno_module) {
@@ @@
   /**
    * Loads module panel with a AJAX.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   Group.
-   * @param \Drupal\opigno_module\Entity\OpignoModule $opigno_module
+   * @param OpignoModule $opigno_module
    *   Opigno module.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Response.
    */
   public function training_module_panel_ajax(GroupInterface $group, OpignoModule $opigno_module) {
@@ @@
   /**
    * Loads steps for a training with a AJAX.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Response.
    */
   public function training_steps_ajax(Group $group) {
@@ @@
   /**
    * Get the training progress page title.
    *
-   * @param \Drupal\group\Entity\GroupInterface|null $group
+   * @param GroupInterface|null $group
    *   The group entity to get statistics for.
-   * @param \Drupal\user\UserInterface|null $account
+   * @param UserInterface|null $account
    *   The user account to get statistics for.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The training progress page title.
    */
   public function buildTrainingProgressTitle(?GroupInterface $group = NULL, ?UserInterface $account = NULL): TranslatableMarkup {
@@ @@
    *
    * @param array $attempts
    *   User module attempts.
-   * @param \Drupal\opigno_module\Entity\OpignoModule $module
+   * @param OpignoModule $module
    *   Module.
    *
-   * @return \Drupal\opigno_module\Entity\UserModuleStatus
+   * @return UserModuleStatus
    *   $attempt
    */
   protected function getTargetAttempt(array $attempts, OpignoModule $module) {
@@ @@
    * @param int $page
    *   Page id.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Response.
    */
   public function page_ajax($page = 0) {
@@ @@
       ) = $this->getApprovedModuleByStep($step, $user, $latest_cert_date, $group);
     $badges = $this->getModulesStatusBadges($step, $group, $user->id());

-    /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
+    /** @var OpignoModule $module */
     $module = OpignoModule::load($step['id']);
     return [
       '#theme' => 'opigno_learning_path_training_module',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/opigno_learning_path/opigno_learning_path.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\group\GroupMembership;
+use Drupal\group\GroupMembershipLoaderInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\opigno_group_manager\OpignoGroupContentTypesManager;
+use Drupal\opigno_group_manager\OpignoGroupContent;
+use Drupal\opigno_module\Entity\OpignoAnswer;
 /**
  * @file
  * Contains opigno_learning_path.module.
@@ @@
           ],
         ],
       ])->toRenderable();
-      $variables['add_member_link'] = render($link);
+      $variables['add_member_link'] = \Drupal::service('renderer')->render($link);
     }
     else {
       $variables['add_member_link'] = [
@@ @@
   $route = \Drupal::routeMatch();

   if (($entity = $route->getParameter('group')) !== NULL) {
-    /** @var \Drupal\group\Entity\GroupInterface $entity */
+    /** @var GroupInterface $entity */
     $args = [
       'group' => $entity->id(),
     ];
@@ @@
     )->toRenderable();
   }
   elseif (($entity = $route->getParameter('opigno_module')) !== NULL) {
-    /** @var \Drupal\opigno_module\Entity\OpignoModule $entity */
+    /** @var OpignoModule $entity */
     $args = [
       'opigno_module' => $entity->id(),
     ];
@@ @@
     ];

     $user = \Drupal::currentUser();
-    /** @var \Drupal\group\Entity\Group $group */
+    /** @var Group $group */
     $group = $route->getParameter('group');
     if (isset($group) && !$group->access('update', $user)) {
       unset($steps[1]);
@@ @@
   $need_clear_cache = count($classes) > 1;

   // Load the learning path group.
-  /** @var \Drupal\group\Entity\Group $group */
+  /** @var Group $group */
   $group = \Drupal::routeMatch()->getParameter('group');
   $is_class = $group->getGroupType()->id() == 'opigno_class';

@@ @@
       ->execute()->fetchField();

     if (!$is_class_added) {
-      /** @var \Drupal\group\Entity\Group $class */
+      /** @var Group $class */
       $group->addContent($class, 'subgroup:opigno_class');

       // Rebuild module and theme data to escape cache warnings when add more
@@ @@
       $members = $class->getMembers();

       foreach ($members as $member) {
-        /** @var \Drupal\group\GroupMembership $member */
+        /** @var GroupMembership $member */
         $user = $member->getUser();
         $users[$user->id()] = $user;
       }
@@ @@
     }

     // Add user to the learning path.
-    /** @var \Drupal\user\Entity\User $user */
+    /** @var User $user */
     $group->addMember($user);

     if ($is_class) {
@@ @@
   if ($entity->getEntityTypeId() === 'user_module_status') {
     // Try to get training id from path.
     $route = \Drupal::routeMatch();
-    /** @var \Drupal\group\Entity\Group $group */
+    /** @var Group $group */
     $group = $route->getParameter('group');
     if (!empty($group)
       && $group instanceof Group
@@ @@
     }
     if ($group_id) {
       /** @var \Drupal\opigno_module\Entity\UserModuleStatus $entity */
-      /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
+      /** @var OpignoModule $module */
       $module = $entity->getModule();
       $module_id = $module->id();
       $account = \Drupal::currentUser();
@@ @@
  */
 function opigno_learning_path_entity_presave(EntityInterface $entity) {
   if ($entity->bundle() == 'learning_path-group_membership') {
-    /** @var \Drupal\group\Entity\GroupContentInterface $entity */
+    /** @var GroupContentInterface $entity */
     LearningPathAccess::membershipPreSave($entity);
     $uid = $entity->getEntity()->id();
     $group = $entity->getGroup();
@@ @@
     if (!$user->hasPermission('manage group members in any group')) {
       // If current user is not an admin and not a global user manager.
       // Get trainings where the current user is a user manager.
-      /** @var \Drupal\group\GroupMembershipLoaderInterface $membership_service */
+      /** @var GroupMembershipLoaderInterface $membership_service */
       $membership_service = \Drupal::service('group.membership_loader');
       $memberships = $membership_service->loadByUser($user, [
         'learning_path-user_manager',
       ]);
       $groups_ids = array_map(function ($membership) {
-        /** @var \Drupal\group\GroupMembership $membership */
+        /** @var GroupMembership $membership */
         return $membership->getGroup()->id();
       }, $memberships);

@@ @@

   if ($view->id() === 'opigno_group_members_table') {
     // Add filter for only members of a training.
-    /** @var \Drupal\group\Entity\Group $group */
+    /** @var Group $group */
     $group = \Drupal::routeMatch()->getParameter('group');
     if ($group) {
       $members = $view->storage->get('group_members');
@@ @@
 /**
  * Calculates module attempt score.
  *
- * @param \Drupal\opigno_module\Entity\UserModuleStatus $attempt
+ * @param UserModuleStatus $attempt
  *   Attempt object.
  *
  * @return int
@@ @@
  *   Training group ID.
  * @param int $uid
  *   User ID.
- * @param \Drupal\opigno_module\Entity\OpignoModule $module
+ * @param OpignoModule $module
  *   Opigno Module entity.
  * @param int $latest_cert_date
  *   Latest certification date.
@@ @@
  * @return array
  *   Data array about step in a group for a user.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function opigno_learning_path_get_module_step($group_id, $uid, OpignoModule $module, $latest_cert_date = NULL) {
   $opigno_lps = Drupal::service('opigno_lps');
@@ @@
  *   Training group ID.
  * @param int $uid
  *   User ID.
- * @param \Drupal\group\Entity\GroupInterface $course
+ * @param GroupInterface $course
  *   Group entity of the course.
  *
  * @return array
  *   Data array about step in a group for a user.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginException
+ * @throws PluginNotFoundException
  */
 function opigno_learning_path_get_course_step($group_id, $uid, GroupInterface $course, $latest_cert_date = NULL) {
   $opigno_lps = Drupal::service('opigno_lps');
@@ @@
  * @return array
  *   Data array about step in a group for a user.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function opigno_learning_path_get_meeting_step($group_id, $uid, MeetingInterface $meeting) {
   $opigno_lps = Drupal::service('opigno_lps');
@@ @@
  * @return array
  *   Data array about step in a group for a user.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function opigno_learning_path_get_ilt_step($group_id, $uid, ILTInterface $ilt) {
   $opigno_lps = Drupal::service('opigno_lps');
@@ @@
  * @return array
  *   Info about each step in a group for a user.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginException
+ * @throws PluginNotFoundException
  */
 function opigno_learning_path_get_steps($group_id, $uid, $only_modules_and_courses = NULL, $latest_cert_date = NULL) {
   $key = "${group_id}_${uid}_${only_modules_and_courses}_${latest_cert_date}";
@@ @@
     }

     $entity_type_manager = \Drupal::entityTypeManager();
-    /** @var \Drupal\opigno_group_manager\OpignoGroupContentTypesManager $content_type_manager */
+    /** @var OpignoGroupContentTypesManager $content_type_manager */
     $content_type_manager = \Drupal::service('opigno_group_manager.content_types.manager');

-    /** @var \Drupal\opigno_group_manager\Entity\OpignoGroupManagedContent $first_content */
+    /** @var OpignoGroupManagedContent $first_content */
     $managed_content = OpignoGroupManagedContent::getFirstStep($group_id);
     while ($managed_content) {
       $id = $managed_content->getEntityId();
       $type_id = $managed_content->getGroupContentTypeId();
       $type = $content_type_manager->createInstance($type_id);
-      /** @var \Drupal\opigno_group_manager\OpignoGroupContent $content */
+      /** @var OpignoGroupContent $content */
       $content = $type->getContent($id);
       if ($content === FALSE) {
         // If can't load step content, skip it. Assume user has got 100% score.
@@ @@

       switch ($type_id) {
         case 'ContentTypeModule':
-          /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
+          /** @var OpignoModule $module */
           $module = $entity_type_manager
             ->getStorage('opigno_module')
             ->load($id);
           $step_info = opigno_learning_path_get_module_step($group_id, $uid, $module, $latest_cert_date);

-          /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
+          /** @var OpignoModule $module */
           if ($module = OpignoModule::load($id)) {
-            /** @var \Drupal\opigno_module\Entity\UserModuleStatus[] $attempts */
+            /** @var UserModuleStatus[] $attempts */
             $attempts = $module->getModuleAttempts($user, NULL, $latest_cert_date, FALSE, $group_id);
             if (!empty($attempts)) {
               $attempts_raw[$id] = $attempts;
@@ @@
 function opigno_learning_path_best_attempt(array $attempts) {
   usort($attempts, function ($a, $b) {
     /** @var \Drupal\opigno_module\Entity\UserModuleStatus $a */
-    /** @var \Drupal\opigno_module\Entity\UserModuleStatus $b */
+    /** @var UserModuleStatus $b */
     $b_score = $b->getAttemptScore();
     $a_score = $a->getAttemptScore();
     return $b_score - $a_score;
@@ @@
  * @return array
  *   Info about each step in a group for a user.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginException
+ * @throws PluginNotFoundException
  */
 function opigno_learning_path_get_all_steps($group_id, $uid, $only_modules_and_courses = NULL, $latest_cert_date = NULL) {
   $key = "${group_id}_${uid}_${only_modules_and_courses}_${latest_cert_date}";
@@ @@
     $contents = OpignoGroupManagedContent::loadByGroupId($group_id);
     usort($contents, function ($a, $b) {
       /** @var \Drupal\opigno_group_manager\Entity\OpignoGroupManagedContent $a */
-      /** @var \Drupal\opigno_group_manager\Entity\OpignoGroupManagedContent $b */
+      /** @var OpignoGroupManagedContent $b */
       $b_y = $b->getCoordinateY();
       $a_y = $a->getCoordinateY();
       return $a_y > $b_y;
@@ @@
     });

     $entity_type_manager = \Drupal::entityTypeManager();
-    /** @var \Drupal\opigno_group_manager\OpignoGroupContentTypesManager $content_type_manager */
+    /** @var OpignoGroupContentTypesManager $content_type_manager */
     $content_type_manager = \Drupal::service('opigno_group_manager.content_types.manager');

     $managed_content = reset($contents);
@@ @@
       $id = $managed_content->getEntityId();
       $type_id = $managed_content->getGroupContentTypeId();
       $type = $content_type_manager->createInstance($type_id);
-      /** @var \Drupal\opigno_group_manager\OpignoGroupContent $content */
+      /** @var OpignoGroupContent $content */
       $content = $type->getContent($id);
       if ($content === FALSE) {
         // If can't load step content, skip it. Assume user has got 100% score.
@@ @@

       switch ($type_id) {
         case 'ContentTypeModule':
-          /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
+          /** @var OpignoModule $module */
           $module = $entity_type_manager
             ->getStorage('opigno_module')
             ->load($id);
           $step_info = opigno_learning_path_get_module_step($group_id, $uid, $module, $latest_cert_date);

-          /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
+          /** @var OpignoModule $module */
           if ($module = OpignoModule::load($id)) {
-            /** @var \Drupal\opigno_module\Entity\UserModuleStatus[] $attempts */
+            /** @var UserModuleStatus[] $attempts */
             $user = \Drupal::currentUser();
             $attempts = $module->getModuleAttempts($user, NULL, $latest_cert_date);
             $best_attempt = NULL;
@@ @@
 function opigno_learning_path_get_module_activities($module_id, $uid, $step_state_counting = FALSE, $latest_cert_date = NULL, $group_id = NULL) {
   $user = User::load($uid);

-  /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
+  /** @var OpignoModule $module */
   $module = OpignoModule::load($module_id);

-  /** @var \Drupal\opigno_module\Entity\UserModuleStatus[] $attempts */
+  /** @var UserModuleStatus[] $attempts */
   $attempts = $module->getModuleAttempts($user, NULL, $latest_cert_date, FALSE, $group_id);

   // Load activities for a module.
@@ @@
   $activities = array_map(function ($activity) use ($user, $module, $attempts, $step_state_counting) {
     // Value returned by the OpignoModule::getModuleActivities()
     // is not an OpignoActivity.
-    /** @var \Drupal\opigno_module\Entity\OpignoActivity $activity */
+    /** @var OpignoActivity $activity */
     $activity = OpignoActivity::load($activity->id);

-    /** @var \Drupal\opigno_module\Entity\OpignoAnswer[] $answers */
+    /** @var OpignoAnswer[] $answers */
     $answers = array_map(function ($attempt) use ($user, $module, $activity, $step_state_counting) {
-      /** @var \Drupal\opigno_module\Entity\OpignoActivity $activity */
+      /** @var OpignoActivity $activity */
       $answer = $activity->getUserAnswer($module, $attempt, $user);
       if ($answer && $step_state_counting && $activity->hasField('opigno_evaluation_method') && $activity->get('opigno_evaluation_method')->value && !$answer->isEvaluated()) {
         $answer = NULL;
@@ @@
  * @return array
  *   Info about each activity status for a user.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginException
+ * @throws PluginNotFoundException
  */
 function opigno_learning_path_get_activities($group_id, $uid, $latest_cert_date = NULL) {
   $activities = [];
@@ @@
  * @return int
  *   Completion time.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginException
+ * @throws PluginNotFoundException
  */
 function opigno_learning_path_completed_on($group_id, $uid, $only_mandatory = FALSE) {
   // Get all mandatory steps.
@@ @@
 /**
  * Returns attempted flag.
  *
- * @param array|\Drupal\group\Entity\GroupInterface $step
+ * @param array|GroupInterface $step
  *   Learning Path or Course Group entity,
  *   or step array, returned by opigno_learning_path_get_steps()
  * @param int $uid
@@ @@
  * @return bool
  *   Attempted flag.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginException
+ * @throws PluginNotFoundException
  */
 function opigno_learning_path_is_attempted($step, $uid) {
   if (is_array($step)) {
@@ @@
 /**
  * Returns LP passed flag.
  *
- * @param array|\Drupal\group\Entity\GroupInterface $step
+ * @param array|GroupInterface $step
  *   Learning Path or Course Group entity,
  *   or step array, returned by opigno_learning_path_get_steps()
  * @param int $uid
@@ @@
  * @return bool
  *   LP passed flag.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginException
+ * @throws PluginNotFoundException
  */
 function opigno_learning_path_is_passed($step, $uid, $current_attempt = FALSE) {
   if (is_array($step)) {
@@ @@
     $module = [];

     $entity_type_manager = \Drupal::entityTypeManager();
-    /** @var \Drupal\opigno_group_manager\OpignoGroupContentTypesManager $content_type_manager */
+    /** @var OpignoGroupContentTypesManager $content_type_manager */
     $content_type_manager = \Drupal::service('opigno_group_manager.content_types.manager');

-    /** @var \Drupal\opigno_group_manager\Entity\OpignoGroupManagedContent $first_content */
+    /** @var OpignoGroupManagedContent $first_content */
     $managed_content = OpignoGroupManagedContent::getFirstStep($group_id);
     while ($managed_content) {
       $id = $managed_content->getEntityId();
       $type_id = $managed_content->getGroupContentTypeId();
       $type = $content_type_manager->createInstance($type_id);
-      /** @var \Drupal\opigno_group_manager\OpignoGroupContent $content */
+      /** @var OpignoGroupContent $content */
       $content = $type->getContent($id);
       if ($content === FALSE) {
         // If can't load step content, skip it. Assume user has got 100% score.
@@ @@

       switch ($type_id) {
         case 'ContentTypeModule':
-          /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
+          /** @var OpignoModule $module */
           $module = $entity_type_manager
             ->getStorage('opigno_module')
             ->load($id);
@@ @@

           $step_info["best score"] = $step_info["current attempt score"];

-          /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
+          /** @var OpignoModule $module */
           if ($module = OpignoModule::load($id)) {
-            /** @var \Drupal\opigno_module\Entity\UserModuleStatus[] $attempts */
+            /** @var UserModuleStatus[] $attempts */
             $user = \Drupal::currentUser();
             $attempts = $module->getModuleAttempts($user, 'last');
             $attempts_raw[$id] = $attempts;
@@ @@
  * @return int
  *   Score.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginException
+ * @throws PluginNotFoundException
  */
 function opigno_learning_path_get_score($gid, $uid, $current_attempt = FALSE, $latest_cert_date = NULL) {
   $steps = !$current_attempt ? opigno_learning_path_get_steps($gid, $uid, NULL, $latest_cert_date) :
@@ @@
  * @return int
  *   Time spent in seconds.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginException
+ * @throws PluginNotFoundException
  */
 function opigno_learning_path_get_time_spent($gid, $uid) {
   $steps = opigno_learning_path_get_steps($gid, $uid);
@@ @@
  * @return int
  *   Row ID.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function opigno_learning_path_save_step_achievements(
   $gid,
@@ @@
  * @param bool $with_meeting
  *   If training contains ILT or Live Meeting.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginException
+ * @throws PluginNotFoundException
  */
 function opigno_learning_path_save_achievements($gid, $uid, $with_meeting = FALSE) {
   if (empty($gid)) {
@@ @@

   $user = User::load($uid);
   $group = Group::load($gid);
-  /** @var \Drupal\group\GroupMembership $group_membership */
+  /** @var GroupMembership $group_membership */
   $group_membership = $group->getMember($user);

   // Format timestamps to the storage format.
@@ @@
 /**
  * Function to detect if user already started Learning path.
  *
- * @param \Drupal\group\Entity\Group $group
+ * @param Group $group
  *   Group.
- * @param \Drupal\Core\Session\AccountProxyInterface $user
+ * @param AccountProxyInterface $user
  *   User.
  *
  * @return mixed|bool
@@ @@
   $group_content = $group->getContent('subgroup:opigno_course');
   foreach ($group_content as $content) {
     /** @var \Drupal\group\Entity\GroupContent $content */
-    /** @var \Drupal\group\Entity\Group $content_entity */
+    /** @var Group $content_entity */
     $course = $content->getEntity();
     $course_contents = $course->getContent('opigno_module_group');
     foreach ($course_contents as $course_content) {
-      /** @var \Drupal\opigno_module\Entity\OpignoModule $module_entity */
+      /** @var OpignoModule $module_entity */
       $module_entity = $course_content->getEntity();
       $modules[] = $module_entity->id();
     }
@@ @@
   $group_content = $group->getContent('opigno_module_group');
   foreach ($group_content as $content) {
     /** @var \Drupal\group\Entity\GroupContent $content */
-    /** @var \Drupal\opigno_module\Entity\OpignoModule $content_entity */
+    /** @var OpignoModule $content_entity */
     $content_entity = $content->getEntity();
     $modules[] = $content_entity->id();
   }
@@ @@
   }
   if ($route_match->getRouteName() == 'forum.page') {
     $term = $route_match->getParameter('taxonomy_term');
-    /** @var \Drupal\group\Entity\Group $group */
+    /** @var Group $group */
     $group = LearningPathController::loadGroupByForum($term);
     if ($group) {
       $breadcrumb->addLink($group->toLink());
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector


43) modules/contrib/opigno_learning_path/opigno_learning_path.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\CachedStorage;
 /**
  * @file
  * Install, update and uninstall functions for the module.
@@ @@
  * Create a step lp block for aristotle theme.
  */
 function opigno_learning_path_update_9002() {
-  $config_path = drupal_get_path('module', 'opigno_learning_path') . '/config/optional';
+  $config_path = \Drupal::service('extension.list.module')->getPath('opigno_learning_path') . '/config/optional';
   /* @var Drupal\Core\Config\CachedStorage $config_storage */
   $storage = new FileStorage($config_path);
   $config_storage = \Drupal::service('config.storage');
@@ @@
   }

   // Add taxonomy duration field.
-  $config_path = drupal_get_path('module', 'opigno_learning_path') . '/config/optional';
+  $config_path = \Drupal::service('extension.list.module')->getPath('opigno_learning_path') . '/config/optional';
   $storage = new FileStorage($config_path);

   $data = $storage->read('field.storage.group.field_learning_path_duration');
@@ @@
   foreach ($durations as $item) {
     $tid = $item['tid'];

-    /** @var \Drupal\group\Entity\GroupInterface $lp */
+    /** @var GroupInterface $lp */
     foreach ($item['lps'] as $lp) {
       if (!$lp->hasField('field_learning_path_duration')) {
         continue;
@@ @@
  * Import optional configs.
  */
 function opigno_learning_path_update_9004() {
-  $config_path = drupal_get_path('module', 'opigno_learning_path') . '/config/optional';
+  $config_path = \Drupal::service('extension.list.module')->getPath('opigno_learning_path') . '/config/optional';
   $files = \Drupal::service('file_system')
     ->scanDirectory($config_path, '/\.yml$/');

   // Import arbitrary config from a variable.
   $source = new FileStorage($config_path);
-  /** @var \Drupal\Core\Config\CachedStorage $config_storage */
+  /** @var CachedStorage $config_storage */
   $config_storage = \Drupal::service('config.storage');
   foreach ($files as $config) {
     $config_storage->delete($config->name);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


44) modules/contrib/opigno_learning_path/modules/opigno_user_selection/src/Element/EntitySelector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_user_selection\Element;

+use Drupal\Core\Controller\ControllerResolver;
+use Drupal\Core\Access\AccessManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\Render\Element\Select;
@@ @@
       ($group = $element['#entity_selector_parameters']['group']) instanceof Group
     ) {
       /** @var \Drupal\opigno_user_selection\UserSelectionHelper $controller */
-      /** @var \Drupal\Core\Controller\ControllerResolver $controller_resolver */
+      /** @var ControllerResolver $controller_resolver */
       $controller_resolver = \Drupal::service('controller_resolver');
       $callable = $controller_resolver->getControllerFromDefinition($element['#entity_selector_option']);
       list($options, $default) = call_user_func_array($callable, [$group]);
@@ @@
     }
     $url = Url::fromRoute($element['#entity_selector_route_name'], [])
       ->toString(TRUE);
-    /** @var \Drupal\Core\Access\AccessManagerInterface $access_manager */
+    /** @var AccessManagerInterface $access_manager */
     $access_manager = \Drupal::service('access_manager');
     $access = $access_manager->checkNamedRoute($element['#entity_selector_route_name'], [], \Drupal::currentUser(), TRUE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/opigno_learning_path/modules/opigno_user_selection/src/Controller/OpignoUserSelectionController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_user_selection\Controller;

+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\user\Entity\User;
+use Drupal\group\Entity\Group;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Cache\Cache;
@@ @@
   /**
    * Service "request_stack" definition.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $currentRequest;

@@ @@
   /**
    * Service "group.membership_loader" definition.
    *
-   * @var \Drupal\group\GroupMembershipLoaderInterface
+   * @var GroupMembershipLoaderInterface
    */
   protected $groupMembershipLoader;

@@ @@
    * @opigno_deprecated
    */
   protected function getEntityField(EntityInterface $entity, string $field_name) {
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $user */
+    /** @var FieldableEntityInterface $user */
     if (
       $entity->hasField($field_name) &&
       !($field = $entity->get($field_name))->isEmpty()
@@ @@
    * @opigno_deprecated
    */
   public function getUserAvatar($user) {
-    $default_image = file_create_url(drupal_get_path('module', 'opigno_user_selection') . '/assets/profile.svg');
+    $default_image = \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('opigno_user_selection') . '/assets/profile.svg');
     $image_style = ImageStyle::load('thumbnail');
     if (!($image_style instanceof ImageStyle)) {
       return $default_image;
     }
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $user */
+    /** @var FieldableEntityInterface $user */
     if (!($file = $this->getEntityField($user, 'user_picture'))) {
       return $default_image;
     }
@@ @@
    * @opigno_deprecated
    */
   public function getGroupImage($type, $group) {
-    $default_image = file_create_url(drupal_get_path('module', 'opigno_user_selection') . '/assets/' . $type . '.svg');
+    $default_image = \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('opigno_user_selection') . '/assets/' . $type . '.svg');

     $image_style = ImageStyle::load('thumbnail');
     if (!($image_style instanceof ImageStyle)) {
@@ @@
     $meta = new CacheableMetadata();
     $meta->setCacheMaxAge(Cache::PERMANENT);

-    /** @var \Drupal\user\Entity\User[] $users */
+    /** @var User[] $users */
     $users = $this->entityTypeManager()
       ->getStorage('user')
       ->loadMultiple($data ?: []);
@@ @@
       $meta->addCacheableDependency($user);

       $memberships = $this->groupMembershipLoader->loadByUser($user);
-      /** @var \Drupal\user\Entity\User $user */
+      /** @var User $user */
       return [
         'id' => $user->id(),
         'name' => $user->getDisplayName(),
@@ @@
       return in_array((int) $user['id'], $data);
     });

-    /** @var \Drupal\group\Entity\Group[] $groups */
+    /** @var Group[] $groups */
     $groups = $this->entityTypeManager()
       ->getStorage('group')
       ->loadMultiple($groups_id ?: []);
@@ @@
       $meta->addCacheableDependency($group);

       $memberships = $this->groupMembershipLoader->loadByGroup($group);
-      /** @var \Drupal\group\Entity\Group $group */
+      /** @var Group $group */
       return $group->access('take') ? [
         "id" => $group->id(),
         "type" => $map[$group->bundle()],
@@ @@
       'opigno_class' => 'class',
     ];

-    /** @var \Drupal\group\Entity\Group[] $groups */
+    /** @var Group[] $groups */
     $groups = $this->entityTypeManager()
       ->getStorage('group')
       ->loadMultiple($data ?: []);
@@ @@

       $meta->addCacheableDependency($group);

-      /** @var \Drupal\group\Entity\Group $group */
+      /** @var Group $group */
       return [
         'id' => $group->id(),
         'name' => $group->label(),
@@ @@
       'add any members to calendar event',
       'message anyone regardless of groups',
     ], 'OR')->isAllowed();
-    /** @var \Drupal\Core\Session\AccountInterface[] $allowed_recipients */
+    /** @var AccountInterface[] $allowed_recipients */
     $allowed_recipients = opigno_messaging_get_all_recipients($show_all);
     foreach ($allowed_recipients as $allowed_recipient) {
       $mapped_recipients[$allowed_recipient->id()] = $allowed_recipient;
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/opigno_learning_path/modules/opigno_alter_entity_autocomplete/src/Routing/AutocompleteRouteSubscriber.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Alters route.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   Routes.
    */
   public function alterRoutes(RouteCollection $collection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/opigno_learning_path/modules/opigno_alter_entity_autocomplete/src/Controller/EntityAutocompleteController.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The autocomplete matcher for entity references.
    *
-   * @var \Drupal\opigno_alter_entity_autocomplete\EntityAutocompleteMatcherOverride
+   * @var EntityAutocompleteMatcherOverride
    */
   protected $matcher;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 47 files have been changed by Rector                                      

