modules/contrib/podlove/podlove.module
modules/contrib/podlove/src/Annotation/PodloveClient.php
modules/contrib/podlove/src/Plugin/Field/FieldFormatter/PodloveWebPlayerFormatter.php
modules/contrib/podlove/src/Plugin/Field/FieldType/PodloveClientSettingsItem.php
modules/contrib/podlove/src/Plugin/Field/FieldWidget/PodloveClientSettingsWidget.php
modules/contrib/podlove/src/Plugin/PodloveClient/ApplePodcasts.php
modules/contrib/podlove/src/Plugin/PodloveClient/GPodder.php
modules/contrib/podlove/src/Plugin/PodloveClient/GooglePodcasts.php
modules/contrib/podlove/src/Plugin/PodloveClient/ITunes.php
modules/contrib/podlove/src/Plugin/PodloveClient/Rss.php
modules/contrib/podlove/src/Plugin/PodloveClient/Spotify.php
modules/contrib/podlove/src/PodloveClientInterface.php
modules/contrib/podlove/src/PodloveClientPluginBase.php
modules/contrib/podlove/src/PodloveClientPluginManager.php

4 files with changes
====================

1) modules/contrib/podlove/src/PodloveClientPluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/podlove/src/Plugin/Field/FieldWidget/PodloveClientSettingsWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\podlove\Plugin\Field\FieldWidget;

+use Drupal\podlove\PodloveClientPluginManager;
+use Drupal\podlove\PodloveClientInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\WidgetBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Podlove client plugin manager.
    *
-   * @var \Drupal\podlove\PodloveClientPluginManager
+   * @var PodloveClientPluginManager
    */
   protected $podloveClientPluginManager;

@@ @@
     $settings = isset($items->getValue()[0]['settings']) ? $items->getValue()[0]['settings']['clients'] : [];
     $clients = [];
     foreach ($plugin_definitions as $plugin_id => $plugin_definition) {
-      /** @var \Drupal\podlove\PodloveClientInterface $plugin */
+      /** @var PodloveClientInterface $plugin */
       $plugin_settings = [];
       if ($settings[$plugin_id]['value'] && isset($settings[$plugin_id]['settings'])) {
         $plugin_settings = $settings[$plugin_id]['settings'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/podlove/src/Plugin/Field/FieldFormatter/PodloveWebPlayerFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\podlove\Plugin\Field\FieldFormatter;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\podlove\PodloveClientPluginManager;
+use Drupal\Core\Field\FieldItemInterface;
+use Drupal\podcast_publisher\PodcastInterface;
+use Drupal\image\Entity\ImageStyle;
+use Drupal\file\FileInterface;
+use Drupal\podlove\PodloveClientInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The podlove client plugin manager.
    *
-   * @var \Drupal\podlove\PodloveClientPluginManager
+   * @var PodloveClientPluginManager
    */
   protected $podloveClientPluginManager;

@@ @@
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $element = [];

-    /** @var \Drupal\Core\Field\FieldItemInterface $item */
+    /** @var FieldItemInterface $item */
     foreach ($items as $delta => $item) {
-      /** @var \Drupal\media\MediaInterface $media */
+      /** @var MediaInterface $media */
       $media = $items->getParent()->getEntity();
       $file_id = $item->entity->id();
       $template = <<<TWIG
@@ @@
   /**
    * Extracts the episode info of given podcast episode.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The podacast episode media entity.
    *
    * @return mixed[]
@@ @@
    *   Associative array containing the episode info.
    */
   protected function getEpisodeInformation(MediaInterface $media) {
-    /** @var \Drupal\podcast_publisher\PodcastInterface $podcast */
+    /** @var PodcastInterface $podcast */
     $podcast = $media->field_podcast->entity;
     if (!$podcast) {
       return [];
     }
     $publication_date = DrupalDateTime::createFromTimestamp($media->getCreatedTime());
-    /** @var \Drupal\image\Entity\ImageStyle $image_style */
+    /** @var ImageStyle $image_style */
     $image_style = $this->entityTypeManager->getStorage('image_style')->load('podcast_3000x3000');

     if ($image_media = $podcast->field_image->entity) {
@@ @@
       $episode_image = $image_style->buildUrl($image_media->field_media_image->entity->uri->value);
     }

-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = $media->field_media_audio_file->entity;
     $config = [
       'version' => 5,
@@ @@
   /**
    * Generates player config based on podcast episode.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The podacast episode media entity.
    *
    * @return mixed[]
@@ @@
    *   Associative array containing the player configuration.
    */
   protected function getPlayerConfig(MediaInterface $media) {
-    /** @var \Drupal\podcast_publisher\PodcastInterface $podcast */
+    /** @var PodcastInterface $podcast */
     $podcast = $media->field_podcast->entity;
     $url = Url::fromRoute('view.podcast_feed.podcast_feed', ['arg_0' => $podcast->id()]);
     $url->setAbsolute(TRUE);
@@ @@
     $clients = [];
     foreach ($field_data as $plugin_id => $data) {
       if ($data['value']) {
-        /** @var \Drupal\podlove\PodloveClientInterface $plugin */
+        /** @var PodloveClientInterface $plugin */
         $plugin = $this->podloveClientPluginManager->createInstance($plugin_id, isset($data['settings']) ? $data['settings'] : []);
         $clients[] = $plugin->getClientSettings();
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/podlove/src/Annotation/PodloveClient.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\podlove\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 4 files have been changed by Rector                                       

