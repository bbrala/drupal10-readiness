diff --git a/metatag.api.php b/metatag.api.php
index 96e3d2f..c732b15 100644
--- a/metatag.api.php
+++ b/metatag.api.php
@@ -1,23 +1,24 @@
 <?php
 
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Document all supported APIs.
  */
-
 /**
  * Provides a ability to integrate alternative routes with metatags.
  *
  * Return an entity when the given route/route parameters matches a certain
  * entity. All meta tags will be rendered on that page.
  *
- * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+ * @param RouteMatchInterface $route_match
  *   The route match.
  *
- * @return \Drupal\Core\Entity\EntityInterface|null
+ * @return EntityInterface|null
  *   Return an entity, if the route should use metatags.
  */
-function hook_metatag_route_entity(\Drupal\Core\Routing\RouteMatchInterface $route_match) {
+function hook_metatag_route_entity(RouteMatchInterface $route_match) {
   if ($route_match->getRouteName() === 'example.test_route') {
     if ($node = $route_match->getParameter('node')) {
       return $node;
diff --git a/metatag.install b/metatag.install
index 20f69d4..efeb1ed 100644
--- a/metatag.install
+++ b/metatag.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\field\FieldStorageConfigInterface;
 /**
  * @file
  * Requirements and update functions for the Metatag module.
@@ -91,7 +92,7 @@ function metatag_update_8109(&$sandbox) {
     $field_counter = 0;
 
     // Get all of the field storage entities of type metatag.
-    /** @var \Drupal\field\FieldStorageConfigInterface[] $field_storage_configs */
+    /** @var FieldStorageConfigInterface[] $field_storage_configs */
     $field_storage_configs = \Drupal::entityTypeManager()
       ->getStorage('field_storage_config')
       ->loadByProperties(['type' => 'metatag']);
diff --git a/metatag.module b/metatag.module
index 621d250..53ed9e1 100644
--- a/metatag.module
+++ b/metatag.module
@@ -1,5 +1,10 @@
 <?php
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\metatag\MetatagManager;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\metatag\Entity\MetatagDefaults;
+use Drupal\Core\Database\Query\SelectInterface;
 /**
  * @file
  * Contains metatag.module.
@@ -222,7 +227,7 @@ function metatag_entity_view_alter(array &$build, EntityInterface $entity, Entit
 /**
  * A function to determine whether the entity in question is the route entity.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity.
  *
  * @return bool
@@ -324,7 +329,7 @@ function metatag_is_current_route_supported() {
 /**
  * Returns the entity of the current route.
  *
- * @return Drupal\Core\Entity\EntityInterface|null
+ * @return EntityInterface|null
  *   The entity or NULL if this is not an entity route.
  */
 function metatag_get_route_entity() {
@@ -517,15 +522,15 @@ function metatag_get_tags_from_route($entity = NULL) {
  *   Array of tags or NULL;
  */
 function metatag_get_default_tags($entity = NULL) {
-  /** @var \Drupal\Core\Entity\EntityStorageInterface $global_metatag_manager */
+  /** @var EntityStorageInterface $global_metatag_manager */
   $global_metatag_manager = \Drupal::entityTypeManager()->getStorage('metatag_defaults');
-  /** @var \Drupal\metatag\MetatagManager $metatag_manager */
+  /** @var MetatagManager $metatag_manager */
   $metatag_manager = \Drupal::service('metatag.manager');
 
   // Load config based on language.
   $current_language = NULL;
   if ($entity !== NULL) {
-    /** @var \Drupal\Core\Language\LanguageManagerInterface $language_manager */
+    /** @var LanguageManagerInterface $language_manager */
     $language_manager = \Drupal::languageManager();
     $current_language = $language_manager->getConfigOverrideLanguage();
     $language_manager->setConfigOverrideLanguage($entity->language());
@@ -553,7 +558,7 @@ function metatag_get_default_tags($entity = NULL) {
     }
 
     if (!empty($entity) && $entity instanceof ContentEntityInterface) {
-      /** @var \Drupal\metatag\Entity\MetatagDefaults|null $entity_metatags */
+      /** @var MetatagDefaults|null $entity_metatags */
       $entity_metatags = $global_metatag_manager->load($entity->getEntityTypeId());
       if ($entity_metatags != NULL && $entity_metatags->status()) {
         // Merge with global defaults.
@@ -561,7 +566,7 @@ function metatag_get_default_tags($entity = NULL) {
       }
 
       // Finally, check if bundle overrides should be added.
-      /** @var \Drupal\metatag\Entity\MetatagDefaults|null $bundle_metatags */
+      /** @var MetatagDefaults|null $bundle_metatags */
       $bundle_metatags = $global_metatag_manager->load($entity->getEntityTypeId() . '__' . $entity->bundle());
       if ($bundle_metatags != NULL && $bundle_metatags->status()) {
         // Merge with existing defaults.
@@ -748,7 +753,7 @@ function metatag_migrate_prepare_row(Row $row, MigrateSourceInterface $source, M
       }
 
       /** @var \Drupal\migrate\Plugin\migrate\source\SqlBase $source */
-      /** @var \Drupal\Core\Database\Query\SelectInterface $query */
+      /** @var SelectInterface $query */
       $query = $source->getDatabase()->select('metatag', 'm')
         ->fields('m', ['data'])
         ->condition('entity_type', $entity_type)
@@ -831,9 +836,8 @@ function metatag_migrate_prepare_row(Row $row, MigrateSourceInterface $source, M
       // define('NODEWORDS_TYPE_TRACKER',    7);
       // define('NODEWORDS_TYPE_VOCABULARY', 9);
       // @endcode
-
       /** @var \Drupal\migrate\Plugin\migrate\source\SqlBase $source */
-      /** @var \Drupal\Core\Database\Query\SelectInterface $query */
+      /** @var SelectInterface $query */
       $query = $source->getDatabase()->select('nodewords', 'nw')
         ->fields('nw', ['name', 'content'])
         ->condition('type', $nodeword_type)
diff --git a/metatag.tokens.inc b/metatag.tokens.inc
index cfad046..905b66b 100644
--- a/metatag.tokens.inc
+++ b/metatag.tokens.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\token\TokenInterface;
 /**
  * @file
  * Metatag token integration.
@@ -129,7 +130,7 @@ function metatag_tokens($type, $tokens, array $data, array $options, BubbleableM
 
   switch ($type) {
     case 'current-page':
-      /** @var \Drupal\token\TokenInterface $token_service */
+      /** @var TokenInterface $token_service */
       $token_service = \Drupal::token();
       $metatag_tokens = $token_service->findWithPrefix($tokens, 'metatag');
       if (!empty($metatag_tokens) && metatag_is_current_route_supported()) {
@@ -142,7 +143,7 @@ function metatag_tokens($type, $tokens, array $data, array $options, BubbleableM
 
     case 'entity':
       if (!empty($data['entity_type']) && !empty($data['entity']) && !empty($data['token_type'])) {
-        /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+        /** @var ContentEntityInterface $entity */
         $entity = $data['entity'];
         if (!($entity instanceof ContentEntityInterface)) {
           return $replacements;
@@ -158,7 +159,7 @@ function metatag_tokens($type, $tokens, array $data, array $options, BubbleableM
         }
 
         if (!empty($metatag_fields)) {
-          /** @var \Drupal\token\TokenInterface $token_service */
+          /** @var TokenInterface $token_service */
           $token_service = \Drupal::token();
           $metatag_tokens = [];
           foreach ($metatag_fields as $metatag_field) {
diff --git a/metatag_extended_perms/src/MetatagPermissions.php b/metatag_extended_perms/src/MetatagPermissions.php
index cc93705..35a7c69 100644
--- a/metatag_extended_perms/src/MetatagPermissions.php
+++ b/metatag_extended_perms/src/MetatagPermissions.php
@@ -20,23 +20,23 @@ class MetatagPermissions implements ContainerInjectionInterface {
   /**
    * The Metatag Tag Plugin Manager.
    *
-   * @var \Drupal\metatag\MetatagTagPluginManager
+   * @var MetatagTagPluginManager
    */
   protected $tagManager;
 
   /**
    * The Metatag Group Plugin Manager.
    *
-   * @var \Drupal\metatag\MetatagGroupPluginManager
+   * @var MetatagGroupPluginManager
    */
   protected $groupManager;
 
   /**
    * Constructs a MetatagPermissions instance.
    *
-   * @param \Drupal\metatag\MetatagTagPluginManager $tag_manager
+   * @param MetatagTagPluginManager $tag_manager
    *   The tag plugin manager.
-   * @param \Drupal\metatag\MetatagGroupPluginManager $group_manager
+   * @param MetatagGroupPluginManager $group_manager
    *   The group plugin manager.
    */
   public function __construct(MetatagTagPluginManager $tag_manager, MetatagGroupPluginManager $group_manager) {
diff --git a/metatag_extended_perms/tests/src/Functional/PermissionsTest.php b/metatag_extended_perms/tests/src/Functional/PermissionsTest.php
index 1380fc7..7ad806e 100644
--- a/metatag_extended_perms/tests/src/Functional/PermissionsTest.php
+++ b/metatag_extended_perms/tests/src/Functional/PermissionsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\metatag_extended_perms\Functional;
 
+use Drupal\Tests\metatag\Functional\MetatagHelperTrait;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -12,7 +13,7 @@ use Drupal\Tests\BrowserTestBase;
 class PermissionsTest extends BrowserTestBase {
 
   // Contains helper methods.
-  use \Drupal\Tests\metatag\Functional\MetatagHelperTrait;
+  use MetatagHelperTrait;
 
   /**
    * {@inheritdoc}
diff --git a/metatag_hreflang/src/Plugin/Derivative/HreflangDeriver.php b/metatag_hreflang/src/Plugin/Derivative/HreflangDeriver.php
index 885aabf..53f7a33 100644
--- a/metatag_hreflang/src/Plugin/Derivative/HreflangDeriver.php
+++ b/metatag_hreflang/src/Plugin/Derivative/HreflangDeriver.php
@@ -23,7 +23,7 @@ class HreflangDeriver extends DeriverBase {
       ->getLanguages(LanguageInterface::STATE_ALL);
 
     // Now we loop over them and declare the derivatives.
-    /** @var \Drupal\Core\Language\LanguageInterface $language */
+    /** @var LanguageInterface $language */
     foreach ($languages as $langcode => $language) {
       // Ignore the global values.
       if ($langcode == Language::LANGCODE_NOT_SPECIFIED) {
diff --git a/metatag_open_graph/metatag_open_graph.install b/metatag_open_graph/metatag_open_graph.install
index 9a0a69b..0e8356e 100644
--- a/metatag_open_graph/metatag_open_graph.install
+++ b/metatag_open_graph/metatag_open_graph.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\ContentEntityType;
 /**
  * @file
  * Update scripts for the Metatag Open Graph module.
@@ -16,7 +17,7 @@ use Drupal\metatag\Entity\MetatagDefaults;
  * The "article:tags" meta tag was renamed to the correct "article:tag".
  */
 function metatag_open_graph_update_8101() {
-  /** @var Drupal\metatag\Entity\MetatagDefaults $configs */
+  /** @var MetatagDefaults $configs */
   $configs = MetatagDefaults::loadMultiple();
 
   foreach ($configs as $config) {
@@ -72,7 +73,7 @@ function metatag_open_graph_update_8102(&$sandbox) {
 
   foreach ($sandbox['todo'] as $entity_type => $fields) {
 
-    /** @var Drupal\Core\Entity\ContentEntityType $def */
+    /** @var ContentEntityType $def */
     $def = Drupal::entityTypeManager()->getDefinition($entity_type);
 
     // Grab the primary key field for this entity type
@@ -95,7 +96,7 @@ function metatag_open_graph_update_8102(&$sandbox) {
       $entities = $etm->getStorage($entity_type)->loadMultiple($res);
 
       foreach ($entities as $entity) {
-        /** @var \Drupal\Core\Entity\ContentEntityBase $entity */
+        /** @var ContentEntityBase $entity */
         if ($entity instanceof ContentEntityBase) {
           if ($entity->hasField($field_name)) {
             /** @var LanguageInterface $langcode */
diff --git a/metatag_views/src/Controller/MetatagViewsController.php b/metatag_views/src/Controller/MetatagViewsController.php
index 951ed29..fc0d166 100644
--- a/metatag_views/src/Controller/MetatagViewsController.php
+++ b/metatag_views/src/Controller/MetatagViewsController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\metatag_views\Controller;
 
+use Drupal\views\ViewEntityInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Url;
@@ -19,14 +20,14 @@ class MetatagViewsController extends ControllerBase {
   /**
    * The Views storage interface.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $viewStorage;
 
   /**
    * The Metatag manager interface.
    *
-   * @var \Drupal\metatag\MetatagManagerInterface
+   * @var MetatagManagerInterface
    */
   protected $metatagManager;
 
@@ -227,7 +228,7 @@ class MetatagViewsController extends ControllerBase {
    * Gets label values for the views and their displays.
    */
   protected function getViewsAndDisplaysLabels() {
-    /** @var \Drupal\views\ViewEntityInterface[] $views */
+    /** @var ViewEntityInterface[] $views */
     $views = $this->viewStorage->loadByProperties(['status' => 1]);
 
     $labels = [];
diff --git a/metatag_views/src/Controller/MetatagViewsTranslationController.php b/metatag_views/src/Controller/MetatagViewsTranslationController.php
index d1f8670..5fb192b 100644
--- a/metatag_views/src/Controller/MetatagViewsTranslationController.php
+++ b/metatag_views/src/Controller/MetatagViewsTranslationController.php
@@ -19,35 +19,35 @@ class MetatagViewsTranslationController extends ControllerBase {
   /**
    * The View storage interface.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $viewStorage;
 
   /**
    * The Metatag manager.
    *
-   * @var \Drupal\metatag\MetatagManagerInterface
+   * @var MetatagManagerInterface
    */
   protected $metatagManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
diff --git a/metatag_views/src/Form/MetatagViewsEditForm.php b/metatag_views/src/Form/MetatagViewsEditForm.php
index 88ca6da..9b38e98 100644
--- a/metatag_views/src/Form/MetatagViewsEditForm.php
+++ b/metatag_views/src/Form/MetatagViewsEditForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\metatag_views\Form;
 
+use Drupal\metatag\MetatagManager;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\views\ViewEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -21,14 +24,14 @@ class MetatagViewsEditForm extends FormBase {
   /**
    * Drupal\metatag\MetatagManager definition.
    *
-   * @var \Drupal\metatag\MetatagManager
+   * @var MetatagManager
    */
   protected $metatagManager;
 
   /**
    * The Views manager.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $viewsManager;
 
@@ -42,7 +45,7 @@ class MetatagViewsEditForm extends FormBase {
   /**
    * View entity object.
    *
-   * @var \Drupal\views\ViewEntityInterface
+   * @var ViewEntityInterface
    */
   protected $view;
 
@@ -164,7 +167,7 @@ class MetatagViewsEditForm extends FormBase {
     unset($metatags['view']);
     $metatags = $this->clearMetatagViewsDisallowedValues($metatags);
 
-    /** @var \Drupal\views\ViewEntityInterface $view */
+    /** @var ViewEntityInterface $view */
     $view = $this->viewsManager->load($view_id);
 
     // Store the meta tags on the view.
diff --git a/metatag_views/src/Form/MetatagViewsRevertForm.php b/metatag_views/src/Form/MetatagViewsRevertForm.php
index 70397a2..2df8f52 100644
--- a/metatag_views/src/Form/MetatagViewsRevertForm.php
+++ b/metatag_views/src/Form/MetatagViewsRevertForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\metatag_views\Form;
 
+use Drupal\views\ViewEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -16,14 +17,14 @@ class MetatagViewsRevertForm extends ConfirmFormBase {
   /**
    * Entity manager for views entities.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $viewsManager;
 
   /**
    * The view entity to revert meta tags on.
    *
-   * @var \Drupal\views\ViewEntityInterface
+   * @var ViewEntityInterface
    */
   protected $view;
 
diff --git a/metatag_views/src/Form/MetatagViewsTranslationForm.php b/metatag_views/src/Form/MetatagViewsTranslationForm.php
index 89be8de..1b919fb 100644
--- a/metatag_views/src/Form/MetatagViewsTranslationForm.php
+++ b/metatag_views/src/Form/MetatagViewsTranslationForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\metatag_views\Form;
 
+use Drupal\metatag\MetatagManager;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\views\ViewEntityInterface;
+use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -26,42 +30,42 @@ class MetatagViewsTranslationForm extends FormBase {
   /**
    * Drupal\metatag\MetatagManager definition.
    *
-   * @var \Drupal\metatag\MetatagManager
+   * @var MetatagManager
    */
   protected $metatagManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\language\ConfigurableLanguageManagerInterface
+   * @var ConfigurableLanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The Views manager.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $viewsManager;
 
   /**
    * The Metatag token service.
    *
-   * @var \Drupal\metatag\MetatagToken
+   * @var MetatagToken
    */
   protected $tokenService;
 
   /**
    * The Metatag tag plugin manager.
    *
-   * @var \Drupal\metatag\MetatagTagPluginManager
+   * @var MetatagTagPluginManager
    */
   protected $tagPluginManager;
 
   /**
    * The View entity object.
    *
-   * @var \Drupal\views\ViewEntityInterface
+   * @var ViewEntityInterface
    */
   protected $view;
 
@@ -82,14 +86,14 @@ class MetatagViewsTranslationForm extends FormBase {
   /**
    * The language of the translation.
    *
-   * @var \Drupal\Core\Language\LanguageInterface
+   * @var LanguageInterface
    */
   protected $language;
 
   /**
    * The language of the translation source.
    *
-   * @var \Drupal\Core\Language\LanguageInterface
+   * @var LanguageInterface
    */
   protected $sourceLanguage;
 
diff --git a/metatag_views/src/MetatagViewsCachePluginManager.php b/metatag_views/src/MetatagViewsCachePluginManager.php
index 9b03761..69efa11 100644
--- a/metatag_views/src/MetatagViewsCachePluginManager.php
+++ b/metatag_views/src/MetatagViewsCachePluginManager.php
@@ -14,23 +14,23 @@ use Drupal\views\Plugin\ViewsPluginManager;
 class MetatagViewsCachePluginManager implements PluginManagerInterface, CachedDiscoveryInterface, CacheableDependencyInterface {
 
   /**
-   * @var \Drupal\views\Plugin\ViewsPluginManager
+   * @var ViewsPluginManager
    */
   protected $viewsPluginManager;
 
   /**
    * MetatagViewsCachePluginManager constructor.
    *
-   * @param \Drupal\views\Plugin\ViewsPluginManager $views_plugin_manager
+   * @param ViewsPluginManager $views_plugin_manager
    */
   public function __construct(ViewsPluginManager $views_plugin_manager) {
     $this->viewsPluginManager = $views_plugin_manager;
   }
 
   /**
-   * @param \Drupal\views\Plugin\views\cache\CachePluginBase $plugin
+   * @param CachePluginBase $plugin
    *
-   * @return \Drupal\metatag_views\MetatagViewsCacheWrapper
+   * @return MetatagViewsCacheWrapper
    */
   protected function wrap(CachePluginBase $plugin) {
     return new MetatagViewsCacheWrapper($plugin);
@@ -48,7 +48,7 @@ class MetatagViewsCachePluginManager implements PluginManagerInterface, CachedDi
    * {@inheritdoc}
    */
   public function getInstance(array $options) {
-    /** @var \Drupal\views\Plugin\views\cache\CachePluginBase $plugin */
+    /** @var CachePluginBase $plugin */
     $plugin = $this->viewsPluginManager->getInstance($options);
     return $plugin->getPluginId() === 'none' ? $plugin : $this->wrap($plugin);
   }
diff --git a/metatag_views/src/MetatagViewsCacheWrapper.php b/metatag_views/src/MetatagViewsCacheWrapper.php
index 608a1b6..7853af5 100644
--- a/metatag_views/src/MetatagViewsCacheWrapper.php
+++ b/metatag_views/src/MetatagViewsCacheWrapper.php
@@ -25,7 +25,7 @@ class MetatagViewsCacheWrapper extends CachePluginBase {
   const RESULTS = 'results';
 
   /**
-   * @var \Drupal\views\Plugin\views\cache\CachePluginBase
+   * @var CachePluginBase
    */
   protected $plugin;
 
@@ -39,7 +39,7 @@ class MetatagViewsCacheWrapper extends CachePluginBase {
   /**
    * MetatagViewsCacheWrapper constructor.
    *
-   * @param \Drupal\views\Plugin\views\cache\CachePluginBase $plugin
+   * @param CachePluginBase $plugin
    *   The cache plugin being wrapped.
    */
   public function __construct(CachePluginBase $plugin) {
diff --git a/metatag_views/src/Plugin/views/display_extender/MetatagDisplayExtender.php b/metatag_views/src/Plugin/views/display_extender/MetatagDisplayExtender.php
index 592be74..6868d2d 100644
--- a/metatag_views/src/Plugin/views/display_extender/MetatagDisplayExtender.php
+++ b/metatag_views/src/Plugin/views/display_extender/MetatagDisplayExtender.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\metatag_views\Plugin\views\display_extender;
 
+use Drupal\metatag\MetatagManagerInterface;
+use Drupal\metatag\MetatagTagPluginManager;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\display_extender\DisplayExtenderPluginBase;
 use Drupal\views\Plugin\views\style\StylePluginBase;
@@ -29,14 +31,14 @@ class MetatagDisplayExtender extends DisplayExtenderPluginBase {
   /**
    * The metatag manager.
    *
-   * @var \Drupal\metatag\MetatagManagerInterface
+   * @var MetatagManagerInterface
    */
   protected $metatagManager;
 
   /**
    * The plugin manager for metatag tags.
    *
-   * @var \Drupal\metatag\MetatagTagPluginManager
+   * @var MetatagTagPluginManager
    */
   protected $metatagTagManager;
 
@@ -272,7 +274,7 @@ class MetatagDisplayExtender extends DisplayExtenderPluginBase {
   /**
    * Set the first row tokens on the style plugin.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view.
    * @param array $first_row_tokens
    *   The first row tokens.
@@ -285,7 +287,7 @@ class MetatagDisplayExtender extends DisplayExtenderPluginBase {
   /**
    * Get the first row tokens from the style plugin.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view.
    *
    * @return array
@@ -299,7 +301,7 @@ class MetatagDisplayExtender extends DisplayExtenderPluginBase {
   /**
    * Get the first row tokens for this Views object iteration.
    *
-   * @param \Drupal\views\Plugin\views\style\StylePluginBase $style
+   * @param StylePluginBase $style
    *   The style plugin used for this request.
    *
    * @return \ReflectionProperty
diff --git a/metatag_views/tests/src/Functional/MetatagViewsBasicsTest.php b/metatag_views/tests/src/Functional/MetatagViewsBasicsTest.php
index 62f7496..331d23d 100644
--- a/metatag_views/tests/src/Functional/MetatagViewsBasicsTest.php
+++ b/metatag_views/tests/src/Functional/MetatagViewsBasicsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\metatag_views\Functional;
 
+use Drupal\Tests\metatag\Functional\MetatagHelperTrait;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -12,7 +13,7 @@ use Drupal\Tests\BrowserTestBase;
 class MetatagViewsBasicsTest extends BrowserTestBase {
 
   // Contains helper methods.
-  use \Drupal\Tests\metatag\Functional\MetatagHelperTrait;
+  use MetatagHelperTrait;
 
   /**
    * {@inheritdoc}
diff --git a/metatag_views/tests/src/Functional/MetatagViewsTokenTest.php b/metatag_views/tests/src/Functional/MetatagViewsTokenTest.php
index 5715fd4..23166be 100644
--- a/metatag_views/tests/src/Functional/MetatagViewsTokenTest.php
+++ b/metatag_views/tests/src/Functional/MetatagViewsTokenTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\metatag_views\Functional;
 
+use Drupal\Tests\metatag\Functional\MetatagHelperTrait;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -12,7 +13,7 @@ use Drupal\Tests\BrowserTestBase;
 class MetatagViewsTokenTest extends BrowserTestBase {
 
   // Contains helper methods.
-  use \Drupal\Tests\metatag\Functional\MetatagHelperTrait;
+  use MetatagHelperTrait;
 
   /**
    * {@inheritdoc}
diff --git a/src/Annotation/MetatagGroup.php b/src/Annotation/MetatagGroup.php
index 873cdb0..9fa89ff 100644
--- a/src/Annotation/MetatagGroup.php
+++ b/src/Annotation/MetatagGroup.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\metatag\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class MetatagGroup extends Plugin {
   /**
    * The name of the group.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/MetatagTag.php b/src/Annotation/MetatagTag.php
index c788a11..81da8a7 100644
--- a/src/Annotation/MetatagTag.php
+++ b/src/Annotation/MetatagTag.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\metatag\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class MetatagTag extends Plugin {
   /**
    * The display label/name of the meta tag plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -30,7 +31,7 @@ class MetatagTag extends Plugin {
   /**
    * A longer explanation of what the field is for.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/MetatagController.php b/src/Controller/MetatagController.php
index b3cc732..1124e8b 100644
--- a/src/Controller/MetatagController.php
+++ b/src/Controller/MetatagController.php
@@ -18,23 +18,23 @@ class MetatagController extends ControllerBase {
   /**
    * Metatag tag plugin manager.
    *
-   * @var \Drupal\metatag\MetatagTagPluginManager
+   * @var MetatagTagPluginManager
    */
   protected $tagManager;
 
   /**
    * Metatag group plugin manager.
    *
-   * @var \Drupal\metatag\MetatagGroupPluginManager
+   * @var MetatagGroupPluginManager
    */
   protected $groupManager;
 
   /**
    * Constructs a new \Drupal\views_ui\Controller\ViewsUIController object.
    *
-   * @param \Drupal\metatag\MetatagTagPluginManager $tag_manaager
+   * @param MetatagTagPluginManager $tag_manaager
    *   The tag manager object.
-   * @param \Drupal\metatag\MetatagGroupPluginManager $group_manager
+   * @param MetatagGroupPluginManager $group_manager
    *   The group manager object.
    */
   public function __construct(MetatagTagPluginManager $tag_manaager, MetatagGroupPluginManager $group_manager) {
diff --git a/src/Entity/MetatagDefaults.php b/src/Entity/MetatagDefaults.php
index d6fba8a..30517b1 100644
--- a/src/Entity/MetatagDefaults.php
+++ b/src/Entity/MetatagDefaults.php
@@ -99,7 +99,7 @@ class MetatagDefaults extends ConfigEntityBase implements MetatagDefaultsInterfa
    * Reverts an entity to its default values.
    */
   public function revert() {
-    $default_install_path = drupal_get_path('module', 'metatag') . '/' . InstallStorage::CONFIG_INSTALL_DIRECTORY;
+    $default_install_path = \Drupal::service('extension.list.module')->getPath('metatag') . '/' . InstallStorage::CONFIG_INSTALL_DIRECTORY;
     $storage = new FileStorage($default_install_path, StorageInterface::DEFAULT_COLLECTION);
     $default_config_data = $storage->read('metatag.metatag_defaults.' . $this->id());
     if ($default_config_data) {
diff --git a/src/Form/MetatagDefaultsForm.php b/src/Form/MetatagDefaultsForm.php
index 2ea675e..f7a13a6 100644
--- a/src/Form/MetatagDefaultsForm.php
+++ b/src/Form/MetatagDefaultsForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\metatag\Form;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ -26,50 +28,50 @@ class MetatagDefaultsForm extends EntityForm {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The Metatag manager service.
    *
-   * @var \Drupal\metatag\MetatagManagerInterface
+   * @var MetatagManagerInterface
    */
   protected $metatagManager;
 
   /**
    * The Metatag token service.
    *
-   * @var \Drupal\metatag\MetatagToken
+   * @var MetatagToken
    */
   protected $metatagToken;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The Metatag tag plugin manager service.
    *
-   * @var \Drupal\metatag\MetatagTagPluginManager
+   * @var MetatagTagPluginManager
    */
   protected $metatagPluginManager;
 
   /**
    * Constructs a new MetatagDefaultsForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\metatag\MetatagManagerInterface $metatag_manager
+   * @param MetatagManagerInterface $metatag_manager
    *   The Metatag manager service.
-   * @param \Drupal\metatag\MetatagToken $metatag_token
+   * @param MetatagToken $metatag_token
    *   The Metatag token service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\metatag\MetatagTagPluginManager $metatag_plugin_manager
+   * @param MetatagTagPluginManager $metatag_plugin_manager
    *   The Metatag tag plugin manager service.
    */
   public function __construct(EntityTypeBundleInfoInterface $entity_type_bundle_info, MetatagManagerInterface $metatag_manager, MetatagToken $metatag_token, ModuleHandlerInterface $module_handler, MetatagTagPluginManager $metatag_plugin_manager) {
@@ -191,7 +193,7 @@ class MetatagDefaultsForm extends EntityForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -337,7 +339,7 @@ class MetatagDefaultsForm extends EntityForm {
   public static function getSupportedEntityTypes() {
     $entity_types = [];
 
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = \Drupal::service('entity_type.manager');
 
     // A list of entity types that are not supported.
@@ -379,7 +381,7 @@ class MetatagDefaultsForm extends EntityForm {
   /**
    * Returns the text label for the entity type specified.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   The entity type to process.
    *
    * @return string
@@ -389,7 +391,7 @@ class MetatagDefaultsForm extends EntityForm {
     $label = $entityType->getLabel();
 
     if (is_a($label, 'Drupal\Core\StringTranslation\TranslatableMarkup')) {
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $label */
+      /** @var TranslatableMarkup $label */
       $label = $label->render();
     }
 
@@ -399,10 +401,10 @@ class MetatagDefaultsForm extends EntityForm {
   /**
    * Route title callback.
    *
-   * @param \Drupal\metatag\MetatagDefaultsInterface|null $metatag_defaults
+   * @param MetatagDefaultsInterface|null $metatag_defaults
    *   Metatags default entity.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Translated route title.
    */
   public function getTitle(MetatagDefaultsInterface $metatag_defaults) {
diff --git a/src/Form/MetatagSettingsForm.php b/src/Form/MetatagSettingsForm.php
index a7c6feb..682e875 100644
--- a/src/Form/MetatagSettingsForm.php
+++ b/src/Form/MetatagSettingsForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\metatag\Form;
 
+use Drupal\metatag\MetatagManagerInterface;
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
+use Drupal\Core\State\StateInterface;
+use Drupal\metatag\MetatagTagPluginManager;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -14,28 +18,28 @@ class MetatagSettingsForm extends ConfigFormBase {
   /**
    * The metatag.manager service.
    *
-   * @var \Drupal\metatag\MetatagManagerInterface
+   * @var MetatagManagerInterface
    */
   protected $metatagManager;
 
   /**
    * The entity_type.bundle.info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The tag plugin manager.
    *
-   * @var \Drupal\metatag\MetatagTagPluginManager
+   * @var MetatagTagPluginManager
    */
   protected $tagPluginManager;
 
diff --git a/src/MetatagDefaultsListBuilder.php b/src/MetatagDefaultsListBuilder.php
index ed86df8..7b989fb 100644
--- a/src/MetatagDefaultsListBuilder.php
+++ b/src/MetatagDefaultsListBuilder.php
@@ -94,7 +94,7 @@ class MetatagDefaultsListBuilder extends ConfigEntityListBuilder {
   /**
    * Renders the Metatag defaults label plus its configuration.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The Metatag defaults entity.
    *
    * @return array
diff --git a/src/MetatagManager.php b/src/MetatagManager.php
index 667426f..4083d06 100644
--- a/src/MetatagManager.php
+++ b/src/MetatagManager.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\metatag;
 
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\metatag\Entity\MetatagDefaults;
+use Drupal\metatag\Plugin\metatag\Tag\MetaNameBase;
 use Drupal\Component\Render\PlainTextOutput;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -27,14 +31,14 @@ class MetatagManager implements MetatagManagerInterface {
   /**
    * The group plugin manager.
    *
-   * @var \Drupal\metatag\MetatagGroupPluginManager
+   * @var MetatagGroupPluginManager
    */
   protected $groupPluginManager;
 
   /**
    * The tag plugin manager.
    *
-   * @var \Drupal\metatag\MetatagTagPluginManager
+   * @var MetatagTagPluginManager
    */
   protected $tagPluginManager;
 
@@ -48,42 +52,42 @@ class MetatagManager implements MetatagManagerInterface {
   /**
    * The Metatag token.
    *
-   * @var \Drupal\metatag\MetatagToken
+   * @var MetatagToken
    */
   protected $tokenService;
 
   /**
    * The Metatag logging channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * The path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;
 
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -97,23 +101,23 @@ class MetatagManager implements MetatagManagerInterface {
   /**
    * Constructor for MetatagManager.
    *
-   * @param \Drupal\metatag\MetatagGroupPluginManager $groupPluginManager
+   * @param MetatagGroupPluginManager $groupPluginManager
    *   The MetatagGroupPluginManager object.
-   * @param \Drupal\metatag\MetatagTagPluginManager $tagPluginManager
+   * @param MetatagTagPluginManager $tagPluginManager
    *   The MetatagTagPluginManager object.
-   * @param \Drupal\metatag\MetatagToken $token
+   * @param MetatagToken $token
    *   The MetatagToken object.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $channelFactory
+   * @param LoggerChannelFactoryInterface $channelFactory
    *   The LoggerChannelFactoryInterface object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The EntityTypeManagerInterface object.
-   * @param \Drupal\Core\Path\PathMatcherInterface $pathMatcher
+   * @param PathMatcherInterface $pathMatcher
    *   The path matcher.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The route match.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
    */
   public function __construct(MetatagGroupPluginManager $groupPluginManager,
@@ -163,7 +167,7 @@ class MetatagManager implements MetatagManagerInterface {
 
     $fields = $this->getFields($entity);
 
-    /** @var \Drupal\field\Entity\FieldConfig $field_info */
+    /** @var FieldConfig $field_info */
     foreach ($fields as $field_name => $field_info) {
       // Get the tags from this field.
       $tags = $this->getFieldTags($entity, $field_name);
@@ -183,19 +187,19 @@ class MetatagManager implements MetatagManagerInterface {
    * {@inheritdoc}
    */
   public function defaultTagsFromEntity(ContentEntityInterface $entity) {
-    /** @var \Drupal\metatag\Entity\MetatagDefaults $metatags */
+    /** @var MetatagDefaults $metatags */
     $metatags = $this->metatagDefaults->load('global');
     if (!$metatags || !$metatags->status()) {
       return [];
     }
     // Add/overwrite with tags set on the entity type.
-    /** @var \Drupal\metatag\Entity\MetatagDefaults $entity_type_tags */
+    /** @var MetatagDefaults $entity_type_tags */
     $entity_type_tags = $this->metatagDefaults->load($entity->getEntityTypeId());
     if (!is_null($entity_type_tags) && $entity_type_tags->status()) {
       $metatags->overwriteTags($entity_type_tags->get('tags'));
     }
     // Add/overwrite with tags set on the entity bundle.
-    /** @var \Drupal\metatag\Entity\MetatagDefaults $bundle_metatags */
+    /** @var MetatagDefaults $bundle_metatags */
     $bundle_metatags = $this->metatagDefaults->load($entity->getEntityTypeId() . '__' . $entity->bundle());
     if (!is_null($bundle_metatags) && $bundle_metatags->status()) {
       $metatags->overwriteTags($bundle_metatags->get('tags'));
@@ -362,7 +366,7 @@ class MetatagManager implements MetatagManagerInterface {
   /**
    * Returns a list of the Metatag fields on an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to examine.
    *
    * @return array
@@ -396,7 +400,7 @@ class MetatagManager implements MetatagManagerInterface {
   /**
    * Returns a list of the meta tags with values from a field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The ContentEntityInterface object.
    * @param string $field_name
    *   The name of the field to work on.
@@ -420,7 +424,7 @@ class MetatagManager implements MetatagManagerInterface {
   /**
    * Returns default meta tags for an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to work on.
    *
    * @return array
@@ -464,7 +468,7 @@ class MetatagManager implements MetatagManagerInterface {
   /**
    * Returns global meta tags.
    *
-   * @return \Drupal\metatag\Entity\MetatagDefaults|null
+   * @return MetatagDefaults|null
    *   The global meta tags or NULL.
    */
   public function getGlobalMetatags() {
@@ -475,7 +479,7 @@ class MetatagManager implements MetatagManagerInterface {
   /**
    * Returns special meta tags.
    *
-   * @return \Drupal\metatag\Entity\MetatagDefaults|null
+   * @return MetatagDefaults|null
    *   The defaults for this page, if it's a special page.
    */
   public function getSpecialMetatags() {
@@ -502,14 +506,14 @@ class MetatagManager implements MetatagManagerInterface {
   /**
    * Returns default meta tags for an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to work with.
    *
    * @return array
    *   The appropriate default meta tags.
    */
   public function getEntityDefaultMetatags(ContentEntityInterface $entity) {
-    /** @var \Drupal\metatag\Entity\MetatagDefaults $entity_metatags */
+    /** @var MetatagDefaults $entity_metatags */
     $entity_metatags = $this->metatagDefaults->load($entity->getEntityTypeId());
     $metatags = [];
     if ($entity_metatags != NULL && $entity_metatags->status()) {
@@ -518,7 +522,7 @@ class MetatagManager implements MetatagManagerInterface {
     }
 
     // Finally, check if we should apply bundle overrides.
-    /** @var \Drupal\metatag\Entity\MetatagDefaults $bundle_metatags */
+    /** @var MetatagDefaults $bundle_metatags */
     $bundle_metatags = $this->metatagDefaults->load($entity->getEntityTypeId() . '__' . $entity->bundle());
     if ($bundle_metatags != NULL && $bundle_metatags->status()) {
       // Merge with existing defaults.
@@ -562,7 +566,7 @@ class MetatagManager implements MetatagManagerInterface {
    *   The array of tags as plugin_id => value.
    * @param object $entity
    *   Optional entity object to use for token replacements.
-   * @param \Drupal\Core\Render\BubbleableMetadata|null $cache
+   * @param BubbleableMetadata|null $cache
    *   (optional) Cacheability metadata.
    *
    * @return array
@@ -711,7 +715,7 @@ class MetatagManager implements MetatagManagerInterface {
   /**
    * Sets tag value and returns sanitized value with token replaced.
    *
-   * @param \Drupal\metatag\Plugin\metatag\Tag\MetaNameBase|object $tag
+   * @param MetaNameBase|object $tag
    *   Metatag object.
    * @param array|string $value
    *   Value to process.
diff --git a/src/MetatagManagerInterface.php b/src/MetatagManagerInterface.php
index dd0f7ca..2d286c0 100644
--- a/src/MetatagManagerInterface.php
+++ b/src/MetatagManagerInterface.php
@@ -14,7 +14,7 @@ interface MetatagManagerInterface {
   /**
    * Extracts all tags of a given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity to extract meta tags from.
    *
    * @return array
@@ -27,7 +27,7 @@ interface MetatagManagerInterface {
    *
    * And combines them with sitewide, per-entity-type, and per-bundle defaults.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity to extract meta tags from.
    *
    * @return array
@@ -40,7 +40,7 @@ interface MetatagManagerInterface {
    *
    * From sitewide, per-entity-type, and per-bundle defaults.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity for which to calculate defaults.
    *
    * @return array
diff --git a/src/MetatagToken.php b/src/MetatagToken.php
index f2b3fae..2a62b1c 100644
--- a/src/MetatagToken.php
+++ b/src/MetatagToken.php
@@ -17,23 +17,23 @@ class MetatagToken {
   /**
    * Token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * Token entity type mapper service.
    *
-   * @var \Drupal\token\TokenEntityMapperInterface
+   * @var TokenEntityMapperInterface
    */
   protected $tokenEntityMapper;
 
   /**
    * Constructs a new MetatagToken object.
    *
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Token service.
-   * @param \Drupal\token\TokenEntityMapperInterface $token_entity_mapper
+   * @param TokenEntityMapperInterface $token_entity_mapper
    *   The token entity type mapper service.
    */
   public function __construct(Token $token, TokenEntityMapperInterface $token_entity_mapper) {
@@ -50,7 +50,7 @@ class MetatagToken {
    *   Arguments for token->replace().
    * @param array $options
    *   Any additional options necessary.
-   * @param \Drupal\Core\Render\BubbleableMetadata|null $bubbleable_metadata
+   * @param BubbleableMetadata|null $bubbleable_metadata
    *   (optional) An object to which static::generate() and the hooks and
    *   functions that it invokes will add their required bubbleable metadata.
    *
diff --git a/src/Plugin/Field/FieldWidget/MetatagFirehose.php b/src/Plugin/Field/FieldWidget/MetatagFirehose.php
index bda34cb..637301f 100644
--- a/src/Plugin/Field/FieldWidget/MetatagFirehose.php
+++ b/src/Plugin/Field/FieldWidget/MetatagFirehose.php
@@ -31,21 +31,21 @@ class MetatagFirehose extends WidgetBase implements ContainerFactoryPluginInterf
   /**
    * Instance of MetatagManager service.
    *
-   * @var \Drupal\metatag\MetatagManagerInterface
+   * @var MetatagManagerInterface
    */
   protected $metatagManager;
 
   /**
    * Instance of MetatagTagPluginManager service.
    *
-   * @var \Drupal\metatag\MetatagTagPluginManager
+   * @var MetatagTagPluginManager
    */
   protected $metatagPluginManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
diff --git a/src/Plugin/metatag/Group/GroupBase.php b/src/Plugin/metatag/Group/GroupBase.php
index eac73d5..756c9e3 100644
--- a/src/Plugin/metatag/Group/GroupBase.php
+++ b/src/Plugin/metatag/Group/GroupBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\metatag\Plugin\metatag\Group;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Plugin\PluginBase;
 
 /**
@@ -19,7 +20,7 @@ abstract class GroupBase extends PluginBase {
   /**
    * The name of the group.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Plugin/metatag/Tag/MetaNameBase.php b/src/Plugin/metatag/Tag/MetaNameBase.php
index a105386..c148934 100644
--- a/src/Plugin/metatag/Tag/MetaNameBase.php
+++ b/src/Plugin/metatag/Tag/MetaNameBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\metatag\Plugin\metatag\Tag;
 
+use Drupal\Core\Annotation\Translation;
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Component\Render\PlainTextOutput;
 use Drupal\Core\Form\FormStateInterface;
@@ -31,7 +33,7 @@ abstract class MetaNameBase extends PluginBase {
   /**
    * The title of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -40,7 +42,7 @@ abstract class MetaNameBase extends PluginBase {
   /**
    * A longer explanation of what the field is for.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -98,7 +100,7 @@ abstract class MetaNameBase extends PluginBase {
   /**
    * Retrieves the currently active request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
@@ -399,7 +401,7 @@ abstract class MetaNameBase extends PluginBase {
    *
    * @param array $element
    *   The form element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function validateTag(array &$element, FormStateInterface $form_state) {
diff --git a/src/Plugin/migrate/source/d6/NodewordsFieldInstance.php b/src/Plugin/migrate/source/d6/NodewordsFieldInstance.php
index d56085e..504105d 100644
--- a/src/Plugin/migrate/source/d6/NodewordsFieldInstance.php
+++ b/src/Plugin/migrate/source/d6/NodewordsFieldInstance.php
@@ -20,7 +20,7 @@ class NodewordsFieldInstance extends DrupalSqlBase {
   /**
    * The entity type bundle service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
@@ -37,7 +37,7 @@ class NodewordsFieldInstance extends DrupalSqlBase {
   /**
    * Sets the entity type bundle info service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
    */
   public function setEntityTypeBundleInfo(EntityTypeBundleInfoInterface $entity_type_bundle_info) {
diff --git a/src/Plugin/migrate/source/d7/MetatagFieldDeriver.php b/src/Plugin/migrate/source/d7/MetatagFieldDeriver.php
index 1f4c0be..9e24c10 100644
--- a/src/Plugin/migrate/source/d7/MetatagFieldDeriver.php
+++ b/src/Plugin/migrate/source/d7/MetatagFieldDeriver.php
@@ -24,14 +24,14 @@ class MetatagFieldDeriver extends DeriverBase implements ContainerDeriverInterfa
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a MetatagFieldDeriver instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/migrate/source/d7/MetatagFieldInstance.php b/src/Plugin/migrate/source/d7/MetatagFieldInstance.php
index eb1beaf..f8cd778 100644
--- a/src/Plugin/migrate/source/d7/MetatagFieldInstance.php
+++ b/src/Plugin/migrate/source/d7/MetatagFieldInstance.php
@@ -20,7 +20,7 @@ class MetatagFieldInstance extends DrupalSqlBase {
   /**
    * The entity type bundle service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
@@ -37,7 +37,7 @@ class MetatagFieldInstance extends DrupalSqlBase {
   /**
    * Sets the entity type bundle info service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
    */
   public function setEntityTypeBundleInfo(EntityTypeBundleInfoInterface $entity_type_bundle_info) {
diff --git a/src/Plugin/migrate/source/d7/MetatagFieldInstanceDeriver.php b/src/Plugin/migrate/source/d7/MetatagFieldInstanceDeriver.php
index 8c49395..b23bb25 100644
--- a/src/Plugin/migrate/source/d7/MetatagFieldInstanceDeriver.php
+++ b/src/Plugin/migrate/source/d7/MetatagFieldInstanceDeriver.php
@@ -38,14 +38,14 @@ class MetatagFieldInstanceDeriver extends DeriverBase implements ContainerDerive
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a PathRedirectDeriver instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/tests/src/Functional/DisabledDefaultTags.php b/tests/src/Functional/DisabledDefaultTags.php
index 31761c5..1c6c512 100644
--- a/tests/src/Functional/DisabledDefaultTags.php
+++ b/tests/src/Functional/DisabledDefaultTags.php
@@ -2,6 +2,14 @@
 
 namespace Drupal\Tests\metatag\Functional;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\metatag\Entity\MetatagDefaults;
+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -61,17 +69,17 @@ class DisabledDefaultTags extends BrowserTestBase {
    * @param string $id
    *   The id of the metatag default to load.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The default metatag.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function loadMetatagDefault($id) {
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $global_metatag_manager */
+    /** @var EntityStorageInterface $global_metatag_manager */
     $global_metatag_manager = \Drupal::entityTypeManager()
       ->getStorage('metatag_defaults');
-    /** @var \Drupal\metatag\Entity\MetatagDefaults $entity_metatags */
+    /** @var MetatagDefaults $entity_metatags */
     return $global_metatag_manager->load($id);
   }
 
@@ -159,11 +167,11 @@ class DisabledDefaultTags extends BrowserTestBase {
   /**
    * Test that a disabled Node metatag default doesn't load.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
+   * @throws EntityStorageException
    */
   public function testEntityTypeDefaults() {
     $node = $this->createContentTypeNode();
@@ -173,10 +181,10 @@ class DisabledDefaultTags extends BrowserTestBase {
     // Change the node type default's canonical to a hardcoded test string.
     // Will be inherited by node:page, as normally neither has canonical filled
     // in and inherit it anyway from Global.
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $global_metatag_manager */
+    /** @var EntityStorageInterface $global_metatag_manager */
     $global_metatag_manager = \Drupal::entityTypeManager()
       ->getStorage('metatag_defaults');
-    /** @var \Drupal\metatag\Entity\MetatagDefaults $entity_metatags */
+    /** @var MetatagDefaults $entity_metatags */
     $entity_metatags = $global_metatag_manager->load('node');
     $entity_metatags->overwriteTags(['canonical_url' => 'https://test.canonical']);
     $entity_metatags->save();
@@ -208,11 +216,11 @@ class DisabledDefaultTags extends BrowserTestBase {
   /**
    * Test that a disabled node bundle metatag default doesn't load.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
+   * @throws EntityStorageException
    */
   public function testEntityBundleDefaults() {
     $node = $this->createContentTypeNode();
@@ -220,10 +228,10 @@ class DisabledDefaultTags extends BrowserTestBase {
       ->toString();
 
     // Change the node bundle's default's canonical to a hardcoded test string.
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $global_metatag_manager */
+    /** @var EntityStorageInterface $global_metatag_manager */
     $global_metatag_manager = \Drupal::entityTypeManager()
       ->getStorage('metatag_defaults');
-    /** @var \Drupal\metatag\Entity\MetatagDefaults $entity_metatags */
+    /** @var MetatagDefaults $entity_metatags */
     $entity_metatags = $global_metatag_manager->create(['id' => 'node__metatag_test']);
     $entity_metatags->overwriteTags(['canonical_url' => 'https://test.canonical']);
     $entity_metatags->save();
diff --git a/tests/src/Functional/MetatagConfigTranslationTest.php b/tests/src/Functional/MetatagConfigTranslationTest.php
index d7291fd..56bd3c3 100644
--- a/tests/src/Functional/MetatagConfigTranslationTest.php
+++ b/tests/src/Functional/MetatagConfigTranslationTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\metatag\Functional;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Config\ConfigManagerInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\metatag\Entity\MetatagDefaults;
 use Drupal\Tests\BrowserTestBase;
@@ -26,7 +28,7 @@ class MetatagConfigTranslationTest extends BrowserTestBase {
   /**
    * Admin user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
 
@@ -95,7 +97,7 @@ class MetatagConfigTranslationTest extends BrowserTestBase {
     // Load all of the Metatag defaults.
     $defaults = \Drupal::configFactory()->listAll('metatag.metatag_defaults');
 
-    /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
+    /** @var ConfigManagerInterface $config_manager */
     $config_manager = \Drupal::service('config.manager');
 
     // Confirm each of the configs is available on the translation form.
diff --git a/tests/src/Functional/MetatagFieldTestBase.php b/tests/src/Functional/MetatagFieldTestBase.php
index 9002fac..fde0b86 100644
--- a/tests/src/Functional/MetatagFieldTestBase.php
+++ b/tests/src/Functional/MetatagFieldTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\metatag\Functional;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -51,7 +52,7 @@ abstract class MetatagFieldTestBase extends BrowserTestBase {
   /**
    * Admin user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
 
@@ -282,6 +283,7 @@ abstract class MetatagFieldTestBase extends BrowserTestBase {
    * When there is no field for overriding the defaults.
    *
    * @todo Write this.
+   * @doesNotPerformAssertions
    */
   public function testBundleDefaultsInheritance() {
   }
diff --git a/tests/src/Functional/MetatagFieldUserTest.php b/tests/src/Functional/MetatagFieldUserTest.php
index 5ffda1b..80054f8 100644
--- a/tests/src/Functional/MetatagFieldUserTest.php
+++ b/tests/src/Functional/MetatagFieldUserTest.php
@@ -96,6 +96,7 @@ class MetatagFieldUserTest extends MetatagFieldTestBase {
    * Confirm the metatag field can be shown on a user registration page.
    *
    * @todo Write this.
+   * @doesNotPerformAssertions
    */
   public function testFieldsOnUserRegistrationForm() {}
 
@@ -103,6 +104,7 @@ class MetatagFieldUserTest extends MetatagFieldTestBase {
    * Confirm the metatag field can be shown on a normal user's own edit form.
    *
    * @todo Write this.
+   * @doesNotPerformAssertions
    */
   public function testFieldsOnUserEditForm() {}
 
diff --git a/tests/src/Functional/MetatagForumTest.php b/tests/src/Functional/MetatagForumTest.php
index 1a2b9da..99617d2 100644
--- a/tests/src/Functional/MetatagForumTest.php
+++ b/tests/src/Functional/MetatagForumTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\metatag\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 
@@ -33,7 +34,7 @@ class MetatagForumTest extends BrowserTestBase {
   /**
    * Administrator user for tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
diff --git a/tests/src/Functional/MetatagHelperTrait.php b/tests/src/Functional/MetatagHelperTrait.php
index 4090f27..e116b2d 100644
--- a/tests/src/Functional/MetatagHelperTrait.php
+++ b/tests/src/Functional/MetatagHelperTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\metatag\Functional;
 
+use Drupal\node\NodeInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Html;
 use Drupal\taxonomy\Entity\Term;
@@ -18,7 +19,7 @@ trait MetatagHelperTrait {
    */
   protected function loginUser1() {
     // Load user 1.
-    /** @var \Drupal\user\Entity\User $account */
+    /** @var User $account */
     $account = User::load(1);
 
     // Reset the password.
@@ -58,7 +59,7 @@ trait MetatagHelperTrait {
    * @param string $body
    *   The text to use as the body.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   A fully formatted node object.
    */
   private function createContentTypeNode($title = 'Title test', $body = 'Body test') {
@@ -91,7 +92,7 @@ trait MetatagHelperTrait {
    *   be automatically generated. If the 'name' item is not present the 'vid'
    *   will be used.
    *
-   * @return \Drupal\taxonomy\Entity\Vocabulary
+   * @return Vocabulary
    *   A fully formatted vocabulary object.
    */
   private function createVocabulary(array $values = []) {
@@ -111,7 +112,7 @@ trait MetatagHelperTrait {
     $vocab = Vocabulary::create($values);
     $status = $vocab->save();
 
-    if ($this instanceof \PHPUnit_Framework_TestCase) {
+    if ($this instanceof \PHPUnit\Framework\TestCase) {
       $this->assertSame($status, SAVED_NEW, (new FormattableMarkup('Created vocabulary %type.', ['%type' => $vocab->id()]))->__toString());
     }
     else {
@@ -127,7 +128,7 @@ trait MetatagHelperTrait {
    * @param array $values
    *   Items passed to the term. Requires the 'vid' element.
    *
-   * @return Drupal\taxonomy\Entity\Term
+   * @return Term
    *   A fully formatted term object.
    */
   private function createTerm(array $values = []) {
@@ -144,7 +145,7 @@ trait MetatagHelperTrait {
     $term = Term::create($values);
     $status = $term->save();
 
-    if ($this instanceof \PHPUnit_Framework_TestCase) {
+    if ($this instanceof \PHPUnit\Framework\TestCase) {
       $this->assertSame($status, SAVED_NEW, (new FormattableMarkup('Created term %name.', ['%name' => $term->label()]))->__toString());
     }
     else {
diff --git a/tests/src/Functional/MetatagNodeTranslationTest.php b/tests/src/Functional/MetatagNodeTranslationTest.php
index 0cfb47a..f544f73 100644
--- a/tests/src/Functional/MetatagNodeTranslationTest.php
+++ b/tests/src/Functional/MetatagNodeTranslationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\metatag\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -49,7 +50,7 @@ class MetatagNodeTranslationTest extends BrowserTestBase {
   /**
    * Administrator user for tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
diff --git a/tests/src/Functional/MetatagPanelizerTest.php b/tests/src/Functional/MetatagPanelizerTest.php
index 49fb6b8..9bf2eb5 100644
--- a/tests/src/Functional/MetatagPanelizerTest.php
+++ b/tests/src/Functional/MetatagPanelizerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\metatag\Functional;
 
+use Drupal\node\NodeInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -41,7 +42,7 @@ class MetatagPanelizerTest extends BrowserTestBase {
    * Create an entity, view its JSON output, confirm Metatag data exists.
    */
   public function testPanelizerMetatagPreRender() {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $title = 'Panelizer Metatag Test Title';
     $body = 'Testing JSON output for a content type';
     $node = $this->createContentTypeNode($title, $body);
diff --git a/tests/src/Functional/MetatagStringTest.php b/tests/src/Functional/MetatagStringTest.php
index d1471a2..bf83296 100644
--- a/tests/src/Functional/MetatagStringTest.php
+++ b/tests/src/Functional/MetatagStringTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\metatag\Functional;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 
@@ -17,7 +18,7 @@ class MetatagStringTest extends BrowserTestBase {
   /**
    * Admin user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
 
diff --git a/tests/src/Functional/MetatagTagTypesTest.php b/tests/src/Functional/MetatagTagTypesTest.php
index 1e9bb8b..17b2d02 100644
--- a/tests/src/Functional/MetatagTagTypesTest.php
+++ b/tests/src/Functional/MetatagTagTypesTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\metatag\Functional;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 
@@ -24,7 +25,7 @@ class MetatagTagTypesTest extends BrowserTestBase {
   /**
    * Admin user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
 
diff --git a/tests/src/Functional/MetatagXssTest.php b/tests/src/Functional/MetatagXssTest.php
index 588d8f8..fa6e478 100644
--- a/tests/src/Functional/MetatagXssTest.php
+++ b/tests/src/Functional/MetatagXssTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\metatag\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 
@@ -55,7 +56,7 @@ class MetatagXssTest extends BrowserTestBase {
   /**
    * Administrator user for tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
@@ -141,7 +142,7 @@ class MetatagXssTest extends BrowserTestBase {
 
     // Check for the title tag, which will have the HTML tags removed and then
     // be lightly HTML encoded.
-    $session->assertEscaped(strip_tags($this->xssTitleString));
+    $this->assertSession()->assertEscaped(strip_tags($this->xssTitleString));
     $session->responseNotContains($this->xssTitleString);
 
     // Check for the basic meta tag.
@@ -171,7 +172,7 @@ class MetatagXssTest extends BrowserTestBase {
 
     // Check for the title tag, which will have the HTML tags removed and then
     // be lightly HTML encoded.
-    $session->assertEscaped(strip_tags($this->xssTitleString));
+    $this->assertSession()->assertEscaped(strip_tags($this->xssTitleString));
     $session->responseNotContains($this->xssTitleString);
 
     // Check for the basic meta tag.
@@ -199,7 +200,7 @@ class MetatagXssTest extends BrowserTestBase {
 
     // Check for the title tag, which will have the HTML tags removed and then
     // be lightly HTML encoded.
-    $session->assertEscaped(strip_tags($this->xssTitleString));
+    $this->assertSession()->assertEscaped(strip_tags($this->xssTitleString));
     $session->responseNotContains($this->xssTitleString);
   }
 
diff --git a/tests/src/Functional/NodeJsonOutput.php b/tests/src/Functional/NodeJsonOutput.php
index 164d59d..145a3d3 100644
--- a/tests/src/Functional/NodeJsonOutput.php
+++ b/tests/src/Functional/NodeJsonOutput.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\metatag\Functional;
 
+use Drupal\node\NodeInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\rest\RestResourceConfigInterface;
 use Drupal\Tests\BrowserTestBase;
@@ -49,7 +50,7 @@ class NodeJsonOutput extends BrowserTestBase {
   public function testNode() {
     $this->provisionResource();
 
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $this->createContentTypeNode('Test JSON output', 'Testing JSON output for a content type');
     $url = $node->toUrl();
 
diff --git a/tests/src/Kernel/Form/MetatagSettingsFormTest.php b/tests/src/Kernel/Form/MetatagSettingsFormTest.php
index 39f5c03..39d3e2d 100644
--- a/tests/src/Kernel/Form/MetatagSettingsFormTest.php
+++ b/tests/src/Kernel/Form/MetatagSettingsFormTest.php
@@ -18,7 +18,7 @@ class MetatagSettingsFormTest extends KernelTestBase {
   /**
    * The metatag form object under test.
    *
-   * @var \Drupal\metatag\Form\MetatagSettingsForm
+   * @var MetatagSettingsForm
    */
   protected $metatagSettingsForm;
 
diff --git a/tests/src/Kernel/MetatagManagerTest.php b/tests/src/Kernel/MetatagManagerTest.php
index 413df26..e0b8ffb 100644
--- a/tests/src/Kernel/MetatagManagerTest.php
+++ b/tests/src/Kernel/MetatagManagerTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\metatag\Kernel;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\metatag\MetatagManagerInterface;
+use Drupal\user\UserInterface;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -32,14 +35,14 @@ class MetatagManagerTest extends KernelTestBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The metatag manager.
    *
-   * @var \Drupal\metatag\MetatagManagerInterface
+   * @var MetatagManagerInterface
    */
   protected $metatagManager;
 
@@ -68,7 +71,7 @@ class MetatagManagerTest extends KernelTestBase {
    * Tests default tags for user entity.
    */
   public function testDefaultTagsFromEntity() {
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $this->entityTypeManager->getStorage('user')->create();
 
     $default_tags = $this->metatagManager->defaultTagsFromEntity($user);
diff --git a/tests/src/Kernel/MetatagSerializationTest.php b/tests/src/Kernel/MetatagSerializationTest.php
index 177bd2b..2ba8531 100644
--- a/tests/src/Kernel/MetatagSerializationTest.php
+++ b/tests/src/Kernel/MetatagSerializationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\metatag\Kernel;
 
+use Symfony\Component\Serializer\SerializerInterface;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\entity_test\Entity\EntityTest;
@@ -31,7 +32,7 @@ class MetatagSerializationTest extends FieldKernelTestBase {
   /**
    * The serializer service.
    *
-   * @var \Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   protected $serializer;
 
diff --git a/tests/src/Kernel/MetatagSettingsTest.php b/tests/src/Kernel/MetatagSettingsTest.php
index 542121e..fa21a6c 100644
--- a/tests/src/Kernel/MetatagSettingsTest.php
+++ b/tests/src/Kernel/MetatagSettingsTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\metatag\Kernel;
 
+use Drupal\metatag\MetatagManagerInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -25,14 +27,14 @@ class MetatagSettingsTest extends KernelTestBase {
   /**
    * The metatag manager.
    *
-   * @var \Drupal\metatag\MetatagManagerInterface
+   * @var MetatagManagerInterface
    */
   protected $metatagManager;
 
   /**
    * The configuration factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
diff --git a/tests/src/Kernel/Migrate/d6/NodewordsEntitiesTest.php b/tests/src/Kernel/Migrate/d6/NodewordsEntitiesTest.php
index 1f5646c..58b79d9 100644
--- a/tests/src/Kernel/Migrate/d6/NodewordsEntitiesTest.php
+++ b/tests/src/Kernel/Migrate/d6/NodewordsEntitiesTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\metatag\Kernel\Migrate\d6;
 
+use Drupal\migrate\Plugin\Migration;
 use Drupal\Core\StreamWrapper\PublicStream;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
 use Drupal\node\Entity\Node;
@@ -62,7 +63,7 @@ class NodewordsEntitiesTest extends MigrateDrupal6TestBase {
     $fs->mkdir('public://sites/default/files', NULL, TRUE);
     file_put_contents('public://sites/default/files/cube.jpeg', str_repeat('*', 3620));
 
-    /** @var \Drupal\migrate\Plugin\Migration $migration */
+    /** @var Migration $migration */
     $migration = $this->getMigration('d6_file');
     // Set the source plugin's source_base_path configuration value, which
     // would normally be set by the user running the migration.
@@ -119,7 +120,7 @@ class NodewordsEntitiesTest extends MigrateDrupal6TestBase {
    * Test Nodewords migration from Drupal 6 to Metatag in 8.
    */
   public function testMetatag() {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = Node::load(23);
     $this->assertInstanceOf(NodeInterface::class, $node);
     $this->assertTrue($node->hasField('field_metatag'));
@@ -150,7 +151,7 @@ class NodewordsEntitiesTest extends MigrateDrupal6TestBase {
     ];
     $this->assertSame(serialize($expected), $node->field_metatag->value);
 
-    /** @var \Drupal\user\Entity\User $user */
+    /** @var User $user */
     $user = User::load(2);
     $this->assertInstanceOf(UserInterface::class, $user);
     $this->assertTrue($user->hasField('field_metatag'));
@@ -160,7 +161,7 @@ class NodewordsEntitiesTest extends MigrateDrupal6TestBase {
     ];
     $this->assertSame(serialize($expected), $user->field_metatag->value);
 
-    /** @var \Drupal\taxonomy\Entity\Term $term */
+    /** @var Term $term */
     $term = Term::load(16);
     $this->assertInstanceOf(TermInterface::class, $term);
     $this->assertTrue($term->hasField('field_metatag'));
diff --git a/tests/src/Kernel/Migrate/d7/MetatagEntitiesTest.php b/tests/src/Kernel/Migrate/d7/MetatagEntitiesTest.php
index 5e5b491..b3a168e 100644
--- a/tests/src/Kernel/Migrate/d7/MetatagEntitiesTest.php
+++ b/tests/src/Kernel/Migrate/d7/MetatagEntitiesTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\metatag\Kernel\Migrate\d7;
 
+use Drupal\migrate\Plugin\Migration;
 use Drupal\Core\StreamWrapper\PublicStream;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
 use Drupal\node\Entity\Node;
@@ -65,7 +66,7 @@ class MetatagEntitiesTest extends MigrateDrupal7TestBase {
     $fs->mkdir('public://sites/default/files', NULL, TRUE);
     file_put_contents('public://sites/default/files/cube.jpeg', str_repeat('*', 3620));
 
-    /** @var \Drupal\migrate\Plugin\Migration $migration */
+    /** @var Migration $migration */
     $migration = $this->getMigration('d7_file');
     // Set the source plugin's source_base_path configuration value, which
     // would normally be set by the user running the migration.
@@ -116,7 +117,7 @@ class MetatagEntitiesTest extends MigrateDrupal7TestBase {
    * Test Metatag migration from Drupal 7 to 8.
    */
   public function testMetatag() {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = Node::load(998);
     $this->assertInstanceOf(NodeInterface::class, $node);
     $this->assertTrue($node->hasField('field_metatag'));
@@ -141,7 +142,7 @@ class MetatagEntitiesTest extends MigrateDrupal7TestBase {
     ];
     $this->assertSame(serialize($expected), $node->field_metatag->value);
 
-    /** @var \Drupal\user\Entity\User $user */
+    /** @var User $user */
     $user = User::load(2);
     $this->assertInstanceOf(UserInterface::class, $user);
     $this->assertTrue($user->hasField('field_metatag'));
@@ -153,7 +154,7 @@ class MetatagEntitiesTest extends MigrateDrupal7TestBase {
     ];
     $this->assertSame(serialize($expected), $user->field_metatag->value);
 
-    /** @var \Drupal\taxonomy\Entity\Term $term */
+    /** @var Term $term */
     $term = Term::load(152);
     $this->assertInstanceOf(TermInterface::class, $term);
     $this->assertTrue($term->hasField('field_metatag'));
diff --git a/tests/src/Unit/MetaNameBaseTest.php b/tests/src/Unit/MetaNameBaseTest.php
index df65716..a4b64e4 100644
--- a/tests/src/Unit/MetaNameBaseTest.php
+++ b/tests/src/Unit/MetaNameBaseTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\metatag\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\metatag\Plugin\metatag\Tag\MetaNameBase;
 use Drupal\Tests\UnitTestCase;
 
@@ -15,7 +16,7 @@ class MetaNameBaseTest extends UnitTestCase {
   /**
    * The MetaNameBase Mocked Object.
    *
-   * @var \Drupal\metatag\Plugin\metatag\Tag\MetaNameBase|\PHPUnit\Framework\MockObject\MockObject
+   * @var MetaNameBase|MockObject
    */
   protected $metaNameBase;
 
diff --git a/tests/src/Unit/MetatagTrimmerTest.php b/tests/src/Unit/MetatagTrimmerTest.php
index ec56551..c97fb23 100644
--- a/tests/src/Unit/MetatagTrimmerTest.php
+++ b/tests/src/Unit/MetatagTrimmerTest.php
@@ -16,7 +16,7 @@ class MetatagTrimmerTest extends UnitTestCase {
   /**
    * The Metatagtrimmer Object.
    *
-   * @var \Drupal\metatag\MetatagTrimmer
+   * @var MetatagTrimmer
    */
   protected $metatagTrimmer;
 
