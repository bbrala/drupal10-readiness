modules/contrib/layout_builder_kit/layout_builder_kit.install
modules/contrib/layout_builder_kit/layout_builder_kit.module
modules/contrib/layout_builder_kit/modules/layout_builder_kit_demo/layout_builder_kit_demo.module
modules/contrib/layout_builder_kit/src/Form/LayoutBuilderKitSettingsForm.php
modules/contrib/layout_builder_kit/src/LinkProvider.php
modules/contrib/layout_builder_kit/src/LinkProviderInterface.php
modules/contrib/layout_builder_kit/src/Plugin/Block/LBKBaseComponent.php
modules/contrib/layout_builder_kit/src/Plugin/Block/LBKBookNavigation/LBKBookNavigation.php
modules/contrib/layout_builder_kit/src/Plugin/Block/LBKBookNavigation/LBKBookNavigationEventSubscriber.php
modules/contrib/layout_builder_kit/src/Plugin/Block/LBKIconText/LBKIconText.php
modules/contrib/layout_builder_kit/src/Plugin/Block/LBKIconText/LBKIconTextEventSubscriber.php
modules/contrib/layout_builder_kit/src/Plugin/Block/LBKImage/LBKImage.php
modules/contrib/layout_builder_kit/src/Plugin/Block/LBKImage/LBKImageEventSubscriber.php
modules/contrib/layout_builder_kit/src/Plugin/Block/LBKRender/LBKRender.php
modules/contrib/layout_builder_kit/src/Plugin/Block/LBKRender/LBKRenderEventSubscriber.php
modules/contrib/layout_builder_kit/src/Plugin/Block/LBKRichText/LBKRichText.php
modules/contrib/layout_builder_kit/src/Plugin/Block/LBKRichText/LBKRichTextEventSubscriber.php
modules/contrib/layout_builder_kit/src/Plugin/Block/LBKTab/LBKTab.php
modules/contrib/layout_builder_kit/src/Plugin/Block/LBKTab/LBKTabEventSubscriber.php
modules/contrib/layout_builder_kit/src/Plugin/Block/LBKVideo/LBKVideo.php
modules/contrib/layout_builder_kit/src/Plugin/Block/LBKVideo/LBKVideoEventSubscriber.php

18 files with changes
=====================

1) modules/contrib/layout_builder_kit/src/Plugin/Block/LBKVideo/LBKVideoEventSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Logger Factory service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
    *   The event.
    */
   public function themeEvent(ThemeEvent $event) {
-    $modulePath = drupal_get_path('module', 'layout_builder_kit');
+    $modulePath = \Drupal::service('extension.list.module')->getPath('layout_builder_kit');

     $newThemes = [
       'LBKVideo' => [
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/layout_builder_kit/src/Plugin/Block/LBKVideo/LBKVideo.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Config\ConfigManagerInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;

@@ @@
   /**
    * Drupal\Core\Routing\CurrentRouteMatch class.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * Drupal\Core\Entity\EntityFieldManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeBundleInfo class.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityTypeBundleInfo;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $pluginDefinition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The EntityTypeManagerInterface service.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $configManager
+   * @param ConfigManagerInterface $configManager
    *   The ConfigManagerInterface service.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $currentRouteMatch
+   * @param CurrentRouteMatch $currentRouteMatch
    *   The CurrentRouteMatch service.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entityFieldManager
+   * @param EntityFieldManager $entityFieldManager
    *   The EntityFieldManager service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entityTypeBundleInfo
+   * @param EntityTypeBundleInfo $entityTypeBundleInfo
    *   The EntityTypeBundleInfo service.
    */
   public function __construct(
@@ @@
             $filePath = $fieldOutput['value'][0]['#file'];
             if ($filePath) {
               $videoFieldUri = $filePath->getFileUri();
-              $videoFieldPath = file_create_url($videoFieldUri);
+              $videoFieldPath = \Drupal::service('file_url_generator')->generateAbsoluteString($videoFieldUri);
               $build['#video_field']['value'] = $videoFieldPath;
             }
             break;
@@ @@
               $filePath = $fieldOutput['value'][0]['#file'];
               if ($filePath) {
                 $videoFieldUri = $filePath->getFileUri();
-                $videoFieldPath = file_create_url($videoFieldUri);
+                $videoFieldPath = \Drupal::service('file_url_generator')->generateAbsoluteString($videoFieldUri);
                 $build['#video_field']['value'] = $videoFieldPath;
               }
               break;
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/layout_builder_kit/src/Plugin/Block/LBKTab/LBKTabEventSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Logger Factory service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
    *   The event.
    */
   public function themeEvent(ThemeEvent $event) {
-    $modulePath = drupal_get_path('module', 'layout_builder_kit');
+    $modulePath = \Drupal::service('extension.list.module')->getPath('layout_builder_kit');

     $newThemes = [
       'LBKTab' => [
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/layout_builder_kit/src/Plugin/Block/LBKTab/LBKTab.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Config\ConfigManagerInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;

@@ @@
   /**
    * Drupal\Core\Routing\CurrentRouteMatch class.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * Drupal\Core\Extension\ModuleHandlerInterface class.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Drupal\Core\Entity\EntityFieldManager class.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeBundleInfo class.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityTypeBundleInfo;

@@ @@
    *   The pluginId for the plugin instance.
    * @param string $pluginDefinition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The EntityTypeManagerInterface service.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $configManager
+   * @param ConfigManagerInterface $configManager
    *   The ConfigManagerInterface service.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $currentRouteMatch
+   * @param CurrentRouteMatch $currentRouteMatch
    *   The CurrentRouteMatch service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The ModuleHandlerInterface service.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entityFieldManager
+   * @param EntityFieldManager $entityFieldManager
    *   The EntityFieldManager service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entityTypeBundleInfo
+   * @param EntityTypeBundleInfo $entityTypeBundleInfo
    *   The EntityTypeBundleInfo service.
    */
   public function __construct(
@@ @@
    *
    * @param array $form
    *   The array form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The FormStateInterface.
    */
   public function addCustomText(array &$form, FormStateInterface $formState) {
@@ @@
    *
    * @param array $form
    *   The array form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The FormStateInterface.
    *
    * @return mixed
@@ @@
    *
    * @param array $form
    *   The array form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The FormStateInterface.
    */
   public function addBlock(array &$form, FormStateInterface $formState) {
@@ @@
    *
    * @param array $form
    *   The array form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The FormStateInterface.
    *
    * @return mixed
@@ @@
    *
    * @param array $form
    *   The array form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The FormStateInterface.
    */
   public function removeLastBlock(array &$form, FormStateInterface $formState) {
@@ @@
    *
    * @param array $form
    *   The array form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The FormStateInterface.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/layout_builder_kit/src/Plugin/Block/LBKRichText/LBKRichTextEventSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Logger Factory service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
    *   The event.
    */
   public function themeEvent(ThemeEvent $event) {
-    $modulePath = drupal_get_path('module', 'layout_builder_kit');
+    $modulePath = \Drupal::service('extension.list.module')->getPath('layout_builder_kit');

     $newThemes = [
       'LBKRichText' => [
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/layout_builder_kit/src/Plugin/Block/LBKRichText/LBKRichText.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeBundleInfo class.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityTypeBundleInfo;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $pluginDefinition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The EntityTypeManagerInterface service.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $currentRouteMatch
+   * @param CurrentRouteMatch $currentRouteMatch
    *   The CurrentRouteMatch service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entityTypeBundleInfo
+   * @param EntityTypeBundleInfo $entityTypeBundleInfo
    *   The EntityTypeBundleInfo service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/layout_builder_kit/src/Plugin/Block/LBKRender/LBKRenderEventSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Logger Factory service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
    *   The event.
    */
   public function themeEvent(ThemeEvent $event) {
-    $modulePath = drupal_get_path('module', 'layout_builder_kit');
+    $modulePath = \Drupal::service('extension.list.module')->getPath('layout_builder_kit');

     $newThemes = [
       'LBKRender' => [
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/layout_builder_kit/src/Plugin/Block/LBKRender/LBKRender.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Config\ConfigManagerInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;

@@ @@
   /**
    * Drupal\Core\Database\Connection definition.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Drupal\Core\Database\Connection definition.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * Drupal\Core\Database\Connection definition.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $entityDisplayRepository;

@@ @@
    *   The pluginId for the plugin instance.
    * @param string $pluginDefinition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The EntityTypeManagerInterface service.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $configManager
+   * @param ConfigManagerInterface $configManager
    *   The ConfigManagerInterface service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The Database Connection service.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $currentRouteMatch
+   * @param CurrentRouteMatch $currentRouteMatch
    *   The CurrentRouteMatch service.
    */
   public function __construct(
@@ @@
         $toRender = ['#markup' => '<span>' . $this->t('Media module is not enabled.') . '</span>'];
       }
     }
-    $output = render($toRender);
+    $output = \Drupal::service('renderer')->render($toRender);

     $build['#entity'] = $output;
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/layout_builder_kit/src/Plugin/Block/LBKImage/LBKImageEventSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Logger Factory service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
    *   The event.
    */
   public function themeEvent(ThemeEvent $event) {
-    $modulePath = drupal_get_path('module', 'layout_builder_kit');
+    $modulePath = \Drupal::service('extension.list.module')->getPath('layout_builder_kit');

     $newThemes = [
       'LBKImage' => [
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/layout_builder_kit/src/Plugin/Block/LBKImage/LBKImage.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Config\ConfigManagerInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;

@@ @@
   /**
    * Drupal\Core\Database\Connection definition.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeBundleInfo class.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityTypeBundleInfo;

@@ @@
    *   The pluginId for the plugin instance.
    * @param string $pluginDefinition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The EntityTypeManagerInterface service.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $configManager
+   * @param ConfigManagerInterface $configManager
    *   The ConfigManagerInterface service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The Database Connection service.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $currentRouteMatch
+   * @param CurrentRouteMatch $currentRouteMatch
    *   The CurrentRouteMatch service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entityTypeBundleInfo
+   * @param EntityTypeBundleInfo $entityTypeBundleInfo
    *   The EntityTypeBundleInfo service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/layout_builder_kit/src/Plugin/Block/LBKIconText/LBKIconTextEventSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Logger Factory service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
    *   The event.
    */
   public function themeEvent(ThemeEvent $event) {
-    $modulePath = drupal_get_path('module', 'layout_builder_kit');
+    $modulePath = \Drupal::service('extension.list.module')->getPath('layout_builder_kit');

     $newThemes = [
       'LBKIconText' => [
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/layout_builder_kit/src/Plugin/Block/LBKIconText/LBKIconText.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Config\ConfigManagerInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;

@@ @@
   /**
    * Drupal\Core\Database\Connection definition.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Drupal\Core\Routing\CurrentRouteMatch class.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeBundleInfo class.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityTypeBundleInfo;

@@ @@
    *   The pluginId for the plugin instance.
    * @param string $pluginDefinition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The EntityTypeManagerInterface service.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $configManager
+   * @param ConfigManagerInterface $configManager
    *   The ConfigManagerInterface service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The Database Connection service.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $currentRouteMatch
+   * @param CurrentRouteMatch $currentRouteMatch
    *   The CurrentRouteMatch service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entityTypeBundleInfo
+   * @param EntityTypeBundleInfo $entityTypeBundleInfo
    *   The EntityTypeBundleInfo service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/layout_builder_kit/src/Plugin/Block/LBKBookNavigation/LBKBookNavigationEventSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Logger Factory service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
    *   The event.
    */
   public function themeEvent(ThemeEvent $event) {
-    $modulePath = drupal_get_path('module', 'layout_builder_kit');
+    $modulePath = \Drupal::service('extension.list.module')->getPath('layout_builder_kit');

     $newThemes = [
       'LBKBookNavigation' => [
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/layout_builder_kit/src/Plugin/Block/LBKBookNavigation/LBKBookNavigation.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Routing\CurrentRouteMatch class.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   private $currentRouteMatch;

@@ @@
   /**
    * Drupal\book\BookOutlineStorageInterface definition.
    *
-   * @var \Drupal\book\BookOutlineStorageInterface
+   * @var BookOutlineStorageInterface
    */
   private $bookOutlineStorage;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Config\ConfigManagerInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;

@@ @@
   /**
    * Drupal\layout_builder_kit\LinkProviderInterface definition.
    *
-   * @var \Drupal\layout_builder_kit\LinkProviderInterface
+   * @var LinkProviderInterface
    */
   private $linkProvider;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeBundleInfo class.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityTypeBundleInfo;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $pluginDefinition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The EntityTypeManagerInterface service.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $configManager
+   * @param ConfigManagerInterface $configManager
    *   The ConfigManagerInterface service.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $currentRouteMatch
+   * @param CurrentRouteMatch $currentRouteMatch
    *   The CurrentRouteMatch service.
-   * @param \Drupal\book\BookOutlineStorageInterface $bookOutlineStorage
+   * @param BookOutlineStorageInterface $bookOutlineStorage
    *   The BookOutlineStorageInterface service.
-   * @param \Drupal\layout_builder_kit\LinkProviderInterface $linkProvider
+   * @param LinkProviderInterface $linkProvider
    *   The LinkProviderInterface service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entityTypeBundleInfo
+   * @param EntityTypeBundleInfo $entityTypeBundleInfo
    *   The EntityTypeBundleInfo service.
    */
   public function __construct(array $configuration,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/layout_builder_kit/src/Plugin/Block/LBKBaseComponent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layout_builder_kit\Plugin\Block;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Transliteration\TransliterationInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * The transliteration service.
    *
-   * @var \Drupal\Component\Transliteration\TransliterationInterface
+   * @var TransliterationInterface
    */
   protected $transliteration;

@@ @@
   /**
    * Drupal\Core\Routing\CurrentRouteMatch class.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   private $currentRouteMatch;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeBundleInfo class.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityTypeBundleInfo;

   /**
    * {@inheritdoc}
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $currentRouteMatch
+   * @param CurrentRouteMatch $currentRouteMatch
    *   The CurrentRouteMatch service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entityTypeBundleInfo
+   * @param EntityTypeBundleInfo $entityTypeBundleInfo
    *   The EntityTypeBundleInfo service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, CurrentRouteMatch $currentRouteMatch, EntityTypeBundleInfo $entityTypeBundleInfo) {
@@ @@
    * than access(), in order to avoid repeating the handling of the
    * $return_as_object argument.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user session for which to check access.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    *
    * @see self::access()
@@ @@
   /**
    * Wraps the transliteration service.
    *
-   * @return \Drupal\Component\Transliteration\TransliterationInterface
+   * @return TransliterationInterface
    *   The transliteration service.
    */
   protected function transliteration() {
@@ @@
   /**
    * Sets the transliteration service.
    *
-   * @param \Drupal\Component\Transliteration\TransliterationInterface $transliteration
+   * @param TransliterationInterface $transliteration
    *   The transliteration service.
    */
   public function setTransliteration(TransliterationInterface $transliteration) {
@@ @@
    * @param $currentRouteMatch
    * @return array
    *   Return an array.
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected static function getContextNode($currentRouteMatch) {
     $contentContext = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/layout_builder_kit/src/LinkProvider.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Get a Link object from a given Url object.
    *
-   * @return \Drupal\Core\Link
+   * @return Link
    *   Return a link object.
    */
   public function renderLink($url, $html, $text) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/layout_builder_kit/src/Form/LayoutBuilderKitSettingsForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Config\ConfigManagerInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/layout_builder_kit/layout_builder_kit.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 /**
  * @file
  * Contains layout_builder_kit.install.
@@ @@
  * @param $phase
  *
  * @return array
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function layout_builder_kit_requirements($phase) {
   $requirements = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 18 files have been changed by Rector                                      

