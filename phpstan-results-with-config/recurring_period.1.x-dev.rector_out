modules/contrib/recurring_period/src/Annotation/RecurringPeriod.php
modules/contrib/recurring_period/src/DateTime/Period.php
modules/contrib/recurring_period/src/Entity/PeriodEntityInterface.php
modules/contrib/recurring_period/src/Entity/PeriodEntityTrait.php
modules/contrib/recurring_period/src/EventSubscriber/ReferenceablePluginTypesSubscriber.php
modules/contrib/recurring_period/src/Plugin/RecurringPeriod/FixedReferenceDateInterval.php
modules/contrib/recurring_period/src/Plugin/RecurringPeriod/RecurringPeriodBase.php
modules/contrib/recurring_period/src/Plugin/RecurringPeriod/RecurringPeriodInterface.php
modules/contrib/recurring_period/src/Plugin/RecurringPeriod/RollingInterval.php
modules/contrib/recurring_period/src/Plugin/RecurringPeriod/Unlimited.php
modules/contrib/recurring_period/src/RecurringPeriodManager.php
modules/contrib/recurring_period/tests/src/Kernel/FixedReferenceDateIntervalTest.php
modules/contrib/recurring_period/tests/src/Kernel/RecurringPeriodTestBase.php
modules/contrib/recurring_period/tests/src/Kernel/RollingIntervalTest.php

9 files with changes
====================

1) modules/contrib/recurring_period/tests/src/Kernel/RecurringPeriodTestBase.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The recurring period plugin manager.
    *
-   * @var \Drupal\recurring_period\RecurringPeriodManager
+   * @var RecurringPeriodManager
    */
   protected $recurringPeriodManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->recurringPeriodManager = $this->container->get('plugin.manager.recurring_period');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/recurring_period/tests/src/Kernel/FixedReferenceDateIntervalTest.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Tests the fixed interval plugin.
    *
-   * @dataProvider testFixedIntervalPluginProvider
+   * @dataProvider fixedIntervalPluginProvider
    */
   public function testFixedIntervalPlugin($timezone_name, $reference_date, $interval, $start_date, $expected_next, $expected_start) {
     $timezone = new \DateTimeZone($timezone_name);
@@ @@
   /**
    * Data provider for testSteppedByItem().
    */
-  public function testFixedIntervalPluginProvider() {
+  public function fixedIntervalPluginProvider() {
     return [
       'annual recurring, due later this year' => [
         // Timezone.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/recurring_period/src/RecurringPeriodManager.php:19

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/recurring_period/src/Plugin/RecurringPeriod/RecurringPeriodInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_period\Plugin\RecurringPeriod;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\recurring_period\Datetime\Period;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
@@ @@
    * @param \DateTimeImmutable $end
    *   The date and time on which the period ends.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The label.
    */
   public function getPeriodLabel(\DateTimeImmutable $start, \DateTimeImmutable $end);
@@ @@
    * @param \DateTimeImmutable $start
    *   The date and time to begin the period from.
    *
-   * @return \Drupal\recurring_period\Datetime\Period
+   * @return Period
    *   The period value object.
    */
   public function getPeriodFromDate(\DateTimeImmutable $start);
@@ @@
    * @param \DateTimeImmutable $date
    *   A date and time that should be contained in the period.
    *
-   * @return \Drupal\recurring_period\Datetime\Period
+   * @return Period
    *   The period value object.
    */
   public function getPeriodContainingDate(\DateTimeImmutable $date);
@@ @@
   /**
    * Calculates the period after the given period.
    *
-   * @param \Drupal\recurring_period\Datetime\Period $period
+   * @param Period $period
    *   The date and time to begin the period from.
    *
-   * @return \Drupal\recurring_period\Datetime\Period
+   * @return Period
    *   The period value object.
    */
   public function getNextPeriod(Period $period);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/recurring_period/src/Plugin/RecurringPeriod/RecurringPeriodBase.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The Interval Plugin Manager service.
    *
-   * @var \Drupal\interval\IntervalPluginManagerInterface
+   * @var IntervalPluginManagerInterface
    */
   protected $pluginManagerIntervals;

@@ @@
    *   The pluginId for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\interval\IntervalPluginManagerInterface $plugin_manager_interval_intervals
+   * @param IntervalPluginManagerInterface $plugin_manager_interval_intervals
    *   The Interval Plugin Manager service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/recurring_period/src/Entity/PeriodEntityTrait.php:78

    ---------- begin diff ----------
@@ @@
   /**
    * Returns an array of base field definitions for representing a time period.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type to add the period fields to.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition[]
+   * @return BaseFieldDefinition[]
    *   An array of base field definitions.
    *
-   * @throws \Drupal\Core\Entity\Exception\UnsupportedEntityTypeDefinitionException
+   * @throws UnsupportedEntityTypeDefinitionException
    *   Thrown when the entity type does not implement PeriodEntityInterface
    *   or if it does not the necessary entity keys.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/recurring_period/src/Entity/PeriodEntityInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the start date/time.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The start date/time.
    */
   public function getStartDate();
@@ @@
   /**
    * Gets the end date/time.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The end date/time.
    */
   public function getEndDate();
@@ @@
   /**
    * Checks whether the given date/time is contained in the period.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $date
+   * @param DrupalDateTime $date
    *   The date/time.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/recurring_period/src/DateTime/Period.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_period\Datetime;

+use Drupal\Core\Entity\EntityBase;
 use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;

 /**
@@ @@
    *   for the label field, it will be taken over any label from the Period
    *   object.
    *
-   * @return \Drupal\Core\Entity\EntityBase
+   * @return EntityBase
    *   The unsaved entity.
    */
   public function toEntity($entity_type_id, $values = []) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/recurring_period/src/Annotation/RecurringPeriod.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_period\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 9 files have been changed by Rector                                       

