diff --git a/lib/Drupal/autoslave/Database/Driver/autoslave/Connection.php b/lib/Drupal/autoslave/Database/Driver/autoslave/Connection.php
index d3609af..ef8c73f 100644
--- a/lib/Drupal/autoslave/Database/Driver/autoslave/Connection.php
+++ b/lib/Drupal/autoslave/Database/Driver/autoslave/Connection.php
@@ -151,7 +151,7 @@ class Connection extends DatabaseConnection {
     }
     $this->__affected_tables_backend = new $class($this);
 
-    
+
     // Initialize and prepare the connection prefix.
     $this->setPrefix(isset($this->connectionOptions['prefix']) ? $this->connectionOptions['prefix'] : '');
 
@@ -288,12 +288,12 @@ class Connection extends DatabaseConnection {
 		unset($options['target']);
     $query = $this->getSafeConnection($target)->select($table, $alias, $options);
     $query->addMetaData('autoslave_connection', array($this->getTarget(), $this->getKey()));
-    
+
     /**
      * This function doesn't exist in D8 and not sure what to replace it with or if it's needed here.
      */
     //drupal_bootstrap(DRUPAL_BOOTSTRAP_VARIABLES);
-    
+
     include_once 'injector.inc';
     return $query->addTag('autoslave');
   }
@@ -505,7 +505,7 @@ class Connection extends DatabaseConnection {
    * and populate pools.
    */
   function setupConnections() {
-    
+
     $key = $this->getKey();
 
     $databases = Database::getAllConnectionInfo();
@@ -520,7 +520,7 @@ class Connection extends DatabaseConnection {
       'master' => $this->connectionOptions['master'], 
       'slave' => $this->connectionOptions['slave'],
     );
-    
+
     foreach ($backends as $backend => $targets) {
       foreach ($targets as $target) {      
         if (empty($databases[$key][$target])) {
@@ -533,9 +533,9 @@ class Connection extends DatabaseConnection {
           $databases[$key][$target] = array($databases[$key][$target]);
           $conninfos = &$databases[$key][$target];
         }
-        
+
         foreach ($conninfos as $idx => &$conninfo) {
-          
+
           if (empty($conninfo['autoslave_id'])) {
             $conninfo['target'] = $target;
             $conninfo['key'] = $key;
@@ -572,7 +572,7 @@ class Connection extends DatabaseConnection {
         include $file;
       }
     }
-    
+
     // At this level, using Exceptions may result in endless loops ... so we die!
     if (empty($this->__pool['master'])) {
       die('There are no masters defined for AutoSlave. Please configure settings.php');
diff --git a/lib/Drupal/autoslave/Database/Driver/autoslave/Install/Tasks.php b/lib/Drupal/autoslave/Database/Driver/autoslave/Install/Tasks.php
index 2245b4a..fb6bca4 100644
--- a/lib/Drupal/autoslave/Database/Driver/autoslave/Install/Tasks.php
+++ b/lib/Drupal/autoslave/Database/Driver/autoslave/Install/Tasks.php
@@ -61,7 +61,7 @@ class Tasks extends InstallTasks {
     }
     $msg[] = '<strong>Master pools:</strong> (' . implode(', ', $master_pool) . ')';
     $msg[] = '<strong>Slave pools:</strong> (' . implode(', ', $slave_pool) . ')';
-    $path = '/' . drupal_get_path('module', 'autoslave') . '/icons/';
+    $path = '/' . \Drupal::service('extension.list.module')->getPath('autoslave') . '/icons/';
     $rows = array();
     foreach ($pool['all'] as $id => $conninfo) {
       if ($conninfo['driver'] == 'autoslave') {
diff --git a/src/Controller/AutoslaveController.php b/src/Controller/AutoslaveController.php
index 82595b3..5608c43 100644
--- a/src/Controller/AutoslaveController.php
+++ b/src/Controller/AutoslaveController.php
@@ -43,7 +43,7 @@ class AutoslaveController extends ControllerBase
 
     return [
       '#type' => '#markup',
-      '#markup' => render($build)
+      '#markup' => \Drupal::service('renderer')->render($build)
     ];
   }
 
diff --git a/src/Controller/AutoslaveDashboardController.php b/src/Controller/AutoslaveDashboardController.php
index ee97bf8..4c602c0 100644
--- a/src/Controller/AutoslaveDashboardController.php
+++ b/src/Controller/AutoslaveDashboardController.php
@@ -190,7 +190,7 @@ class AutoslaveDashboardController extends ControllerBase {
       'num_servers' => $num_servers,
       'num_masters' => count($array_master_status),
       'hashkey_link' => $asd_formatted_hashlink,
-      'module_path' => drupal_get_path('module', 'autoslave')
+      'module_path' => \Drupal::service('extension.list.module')->getPath('autoslave')
       // Variables go here, you can add more variables like json_data.
       // These variables are used in templates/autoslave_dashboard.tpl.php.
     ];
diff --git a/src/Lock/AutoSlaveLockBackend.php b/src/Lock/AutoSlaveLockBackend.php
index 9452276..b49f4e1 100644
--- a/src/Lock/AutoSlaveLockBackend.php
+++ b/src/Lock/AutoSlaveLockBackend.php
@@ -20,7 +20,7 @@ class AutoSlaveLockBackend implements LockBackendInterface {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $backend;
 
diff --git a/src/ProxyClass/Lock/AutoSlaveLockBackend.php b/src/ProxyClass/Lock/AutoSlaveLockBackend.php
index 65e7667..908df22 100644
--- a/src/ProxyClass/Lock/AutoSlaveLockBackend.php
+++ b/src/ProxyClass/Lock/AutoSlaveLockBackend.php
@@ -7,15 +7,18 @@
 
 namespace Drupal\autoslave\ProxyClass\Lock {
 
+    use Drupal\Core\Lock\LockBackendInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
     /**
      * Provides a proxy class for \Drupal\autoslave\Lock\AutoSlaveLockBackend.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class AutoSlaveLockBackend implements \Drupal\Core\Lock\LockBackendInterface
+    class AutoSlaveLockBackend implements LockBackendInterface
     {
 
-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;
 
         /**
          * The id of the original proxied service.
@@ -34,19 +37,19 @@ namespace Drupal\autoslave\ProxyClass\Lock {
         /**
          * The service container.
          *
-         * @var \Symfony\Component\DependencyInjection\ContainerInterface
+         * @var ContainerInterface
          */
         protected $container;
 
         /**
          * Constructs a ProxyClass Drupal proxy object.
          *
-         * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+         * @param ContainerInterface $container
          *   The container.
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
