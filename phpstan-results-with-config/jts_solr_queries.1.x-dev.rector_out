modules/contrib/jts_solr_queries/jts_solr_queries.module
modules/contrib/jts_solr_queries/src/EventSubscriber/EventListener.php
modules/contrib/jts_solr_queries/src/Plugin/views/filter/SearchApiJtsFilter.php
modules/contrib/jts_solr_queries/src/RptShapesDataType.php

3 files with changes
====================

1) modules/contrib/jts_solr_queries/src/Plugin/views/filter/SearchApiJtsFilter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jts_solr_queries\Plugin\views\filter;

+use Drupal\geofield\Plugin\GeofieldProximitySourceInterface;
+use Drupal\views\Plugin\views\query\Sql;
 use Drupal\geofield\Plugin\views\filter\GeofieldProximityFilter;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
    */
   public function query() {
     try {
-      /** @var \Drupal\geofield\Plugin\GeofieldProximitySourceInterface $source_plugin */
+      /** @var GeofieldProximitySourceInterface $source_plugin */
       $this->sourcePlugin = $this->proximitySourceManager->createInstance($this->options['source'], $this->options['source_configuration']);
       $this->sourcePlugin->setViewHandler($this);
       $this->sourcePlugin->setUnits($this->options['units']);
@@ @@
       // Otherwise output empty result in case of unexposed proximity filter.
       elseif (!$this->isExposed()) {
         // Origin is not valid so return no results (if not exposed filter).
-        drupal_set_message($this->t('The location %location could not be resolved and was ignored.', ['%location' => $this->value['value']]), 'warning');
+        $this->messenger()->addWarning($this->t('The location %location could not be resolved and was ignored.', ['%location' => $this->value['value']]));
       }
     }
     catch (\Exception $e) {
@@ @@
     ) {
       // We are not using $this->value['value'] here... @todo whenever
       // predicates are used.
-      /** @var \Drupal\views\Plugin\views\query\Sql $query */
+      /** @var Sql $query */
       $query = $this->query;
       $predicate = $this->operators()[$this->operator]['short'];
       $query->setOption("solr_param_fq", "rptm_" . $options["field"] . ":\"$predicate(" . $options["lat"] . "," . $options["lon"] . ")\"");
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/jts_solr_queries/src/EventSubscriber/EventListener.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jts_solr_queries\EventSubscriber;

+use Symfony\Contracts\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\search_api\Event\SearchApiEvents;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * Drupal\Core\Messenger\MessengerInterface definition.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Method called when SearchApiEvents::GATHERING_DATA_SOURCES is dispatched.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param Event $event
    *   The dispatched event.
    */
   public function dataTypeInfoAlter(Event $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/jts_solr_queries/jts_solr_queries.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\search_api\IndexInterface;
+use Drupal\search_api\Item\FieldInterface;
 /**
  * @file
  * Contains jts_solr_queries.module.
@@ @@
  * Implements hook_views_data_alter().
  */
 function jts_solr_queries_views_data_alter(&$data) {
-  /** @var \Drupal\search_api\IndexInterface $index */
+  /** @var IndexInterface $index */
   foreach (Index::loadMultiple() as $index) {
     $table = &$data['search_api_index_' . $index->id()];

-    /** @var \Drupal\search_api\Item\FieldInterface $field */
+    /** @var FieldInterface $field */
     foreach ($index->getFields(TRUE) as $field_id => $field) {
       // @todo convert to search_api_rpt search filter!!
       // && $field->getOriginalFieldIdentifier() == 'rpt') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 3 files have been changed by Rector                                       

