modules/contrib/loco_translate/inc/cron_pull.inc
modules/contrib/loco_translate/inc/cron_push.inc
modules/contrib/loco_translate/loco_translate.install
modules/contrib/loco_translate/loco_translate.module
modules/contrib/loco_translate/src/Commands/PullCommand.php
modules/contrib/loco_translate/src/Commands/PushCommand.php
modules/contrib/loco_translate/src/Controller/OverviewController.php
modules/contrib/loco_translate/src/Exception/LocoApiException.php
modules/contrib/loco_translate/src/Exception/LocoTranslateException.php
modules/contrib/loco_translate/src/Form/PullForm.php
modules/contrib/loco_translate/src/Form/SettingsForm.php
modules/contrib/loco_translate/src/Loco/ApiClientFactory.php
modules/contrib/loco_translate/src/Loco/Pull.php
modules/contrib/loco_translate/src/Loco/Push.php
modules/contrib/loco_translate/src/TranslationsImport.php
modules/contrib/loco_translate/src/TwigExtension/LocoExport.php
modules/contrib/loco_translate/src/Utility.php
modules/contrib/loco_translate/tests/src/Functional/OverviewControllerTest.php
modules/contrib/loco_translate/tests/src/Functional/PullFormTest.php
modules/contrib/loco_translate/tests/src/Kernel/Cron/CronPullTest.php
modules/contrib/loco_translate/tests/src/Kernel/Cron/CronPushTest.php
modules/contrib/loco_translate/tests/src/Kernel/PullCommandTest.php
modules/contrib/loco_translate/tests/src/Kernel/TranslationsImportTest.php
modules/contrib/loco_translate/tests/src/Kernel/TranslationsTest.php
modules/contrib/loco_translate/tests/src/Kernel/TranslationsTestsBase.php
modules/contrib/loco_translate/tests/src/Unit/LocoPullTest.php
modules/contrib/loco_translate/tests/src/Unit/LocoPushTest.php
modules/contrib/loco_translate/tests/src/Unit/UtilityTest.php
modules/contrib/loco_translate/tests/src/Unit/UtilityTestBase.php

22 files with changes
=====================

1) modules/contrib/loco_translate/tests/src/Unit/UtilityTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\loco_translate\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\loco_translate\Utility;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ @@
  */
 abstract class UtilityTestBase extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The Utility service of Loco Translate.
    *
-   * @var \Drupal\loco_translate\Utility
+   * @var Utility
    */
   protected $utility;

@@ @@
   /**
    * The state mocked service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
       'locked'    => FALSE,
     ]);

-    /** @var \Drupal\Core\Language\LanguageManagerInterface|\Prophecy\Prophecy\ProphecyInterface $language_manager */
+    /** @var LanguageManagerInterface|ProphecyInterface $language_manager */
     $language_manager = $this->prophesize(LanguageManagerInterface::class);
-    /** @var \Drupal\Core\State\StateInterface|\Prophecy\Prophecy\ProphecyInterface $state */
+    /** @var StateInterface|ProphecyInterface $state */
     $this->state = $this->prophesize(StateInterface::class);

     $this->utility = new Utility($language_manager->reveal(), $this->state->reveal());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/loco_translate/tests/src/Unit/LocoPushTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\loco_translate\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\UnitTestCase;
 use Drupal\loco_translate\Loco\Push as LocoPush;
 use Loco\Http\ApiClient;
@@ @@
  */
 class LocoPushTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Uploader to Loco.
    *
@@ @@
   /**
    * A mock of Loco SDK API client.
    *
-   * @var \Loco\Http\ApiClient
+   * @var ApiClient
    */
   private $apiClient;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/loco_translate/tests/src/Unit/LocoPullTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\loco_translate\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\loco_translate\Loco\Pull as locoPull;
 use Loco\Http\ApiClient;
@@ @@
  */
 class LocoPullTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The Loco translations pull manager.
    *
@@ @@
   /**
    * A mock of Loco SDK API client.
    *
-   * @var \Loco\Http\ApiClient
+   * @var ApiClient
    */
   private $apiClient;

@@ @@
    * {@inheritdoc}
    */
   public function setUp(): void {
-    /** @var \Drupal\loco_translate\Utility|\Prophecy\Prophecy\ProphecyInterface $language_manager */
+    /** @var Utility|ProphecyInterface $language_manager */
     $utility = $this->prophesize(Utility::class);
     $utility->isLangcodeEnabled(Argument::any())
       ->willReturn(TRUE);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/loco_translate/tests/src/Kernel/TranslationsTestsBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\loco_translate\Kernel;

+use Drupal\locale\TranslationString;
+use Drupal\locale\StringStorageInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;

@@ @@
   /**
    * Collection of tests translations strings.
    *
-   * @var \Drupal\locale\TranslationString[]
+   * @var TranslationString[]
    */
   protected $translationsStrings;

@@ @@
   /**
    * String translation storage object.
    *
-   * @var \Drupal\locale\StringStorageInterface
+   * @var StringStorageInterface
    */
   protected $localStorage;

@@ @@

     $this->setUpLanguages();

-    /** @var \Drupal\locale\StringStorageInterface $localStorage */
+    /** @var StringStorageInterface $localStorage */
     $this->localStorage = $this->container->get('locale.storage');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/loco_translate/tests/src/Kernel/TranslationsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\loco_translate\Kernel;

+use Drupal\loco_translate\TranslationsImport;
 /**
  * Cover default behaviors of translations.
  *
@@ @@
   /**
    * The Translation importer.
    *
-   * @var \Drupal\loco_translate\TranslationsImport
+   * @var TranslationsImport
    */
   protected $translationsImport;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/loco_translate/tests/src/Kernel/TranslationsImportTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\loco_translate\Kernel;

+use Drupal\loco_translate\TranslationsImport;
 use Drupal\loco_translate\Exception\LocoTranslateException;

 /**
@@ @@
   /**
    * The Translation importer.
    *
-   * @var \Drupal\loco_translate\TranslationsImport
+   * @var TranslationsImport
    */
   protected $translationsImport;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    /** @var \Drupal\loco_translate\TranslationsImport $translationsImport */
+    /** @var TranslationsImport $translationsImport */
     $this->translationsImport = $this->container->get('loco_translate.translations.import');

     /** @var string $translationsPath */
-    $this->translationsPath = drupal_get_path('module', 'loco_translate_test') . DIRECTORY_SEPARATOR . 'assets';
+    $this->translationsPath = \Drupal::service('extension.list.module')->getPath('loco_translate_test') . DIRECTORY_SEPARATOR . 'assets';
   }

   /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/loco_translate/tests/src/Kernel/PullCommandTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\loco_translate\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
 /**
  * @coversDefaultClass \Drupal\loco_translate\Commands\PullCommand
  *
@@ @@
  */
 final class PullCommandTest extends TranslationsTestsBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
    */
   public function testPull(): void {
     // Mock the Loco Response export response.
-    $data = file_get_contents(drupal_get_path('module', 'loco_translate_test') . '/responses/export-200.po');
+    $data = file_get_contents(\Drupal::service('extension.list.module')->getPath('loco_translate_test') . '/responses/export-200.po');
     $response = new Response(200, [], $data);
     $response = RawResult::fromResponse($response);
     $this->locoPull->fromLocoToDrupal('en', NULL, NULL)
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/loco_translate/tests/src/Kernel/Cron/CronPushTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\loco_translate\Kernel\Cron;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Config\Config;
+use Drupal\Core\State\StateInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\loco_translate\Loco\Push as LocoPush;
 use Prophecy\Argument;
@@ @@
  */
 class CronPushTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * The directory of tests .po files.
    *
@@ @@
   /**
    * An editable config object for access to 'loco_translate.settings'.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $cronConfig;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
     $this->cronConfig = \Drupal::configFactory()->getEditable('loco_translate.settings');

     /** @var string $translationsPath */
-    $this->translationsPath = drupal_get_path('module', 'loco_translate_test') . DIRECTORY_SEPARATOR . 'assets';
+    $this->translationsPath = \Drupal::service('extension.list.module')->getPath('loco_translate_test') . DIRECTORY_SEPARATOR . 'assets';

     // Save the default push configurations.
     $this->cronConfig->set('automation.push.interval', 3600)->save();
@@ @@
     $this->cronConfig->set('automation.push.template', $this->translationsPath . '/en.po')->save();
     $this->cronConfig->set('automation.push.langcodes', ['en' => 'en'])->save();

-    /** @var \Drupal\Core\State\StateInterface $state */
+    /** @var StateInterface $state */
     $this->state = $this->container->get('state');

     // Pretend that cron(s) has never been run.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/loco_translate/tests/src/Kernel/Cron/CronPullTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\loco_translate\Kernel\Cron;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Config\Config;
+use Drupal\Core\State\StateInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\loco_translate\Loco\Pull as LocoPull;
 use Drupal\loco_translate\TranslationsImport;
@@ @@
  */
 class CronPullTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * An editable config object for access to 'loco_translate.settings'.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $cronConfig;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
     $this->cronConfig->set('automation.pull.interval', 3600)->save();
     $this->cronConfig->set('automation.pull.langcodes', ['en' => 'en'])->save();

-    /** @var \Drupal\Core\State\StateInterface $state */
+    /** @var StateInterface $state */
     $this->state = $this->container->get('state');

     // Pretend that cron(s) has never been run.
@@ @@
    * @dataProvider goodIntervalProvider
    */
   public function testCronPullGoodInterval($langcode, $last_run, $interval) {
-    $data = file_get_contents(drupal_get_path('module', 'loco_translate_test') . '/responses/export-200.po');
+    $data = file_get_contents(\Drupal::service('extension.list.module')->getPath('loco_translate_test') . '/responses/export-200.po');
     $response = new Response(200, [], $data);
     $response = RawResult::fromResponse($response);

@@ @@
       ->set('translation.path', '')
       ->save();

-    $data = file_get_contents(drupal_get_path('module', 'loco_translate_test') . '/responses/export-200.po');
+    $data = file_get_contents(\Drupal::service('extension.list.module')->getPath('loco_translate_test') . '/responses/export-200.po');
     $response = new Response(200, [], $data);
     $response = RawResult::fromResponse($response);

@@ @@
       ->set('translation.path', '')
       ->save();

-    $data = file_get_contents(drupal_get_path('module', 'loco_translate_test') . '/responses/export-200.po');
+    $data = file_get_contents(\Drupal::service('extension.list.module')->getPath('loco_translate_test') . '/responses/export-200.po');
     $response = new Response(200, [], $data);
     $response = RawResult::fromResponse($response);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/loco_translate/src/Utility.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\loco_translate;

+use Drupal\language\ConfigurableLanguageManager;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\State\StateInterface;

@@ @@
   /**
    * The language Manager.
    *
-   * @var \Drupal\language\ConfigurableLanguageManager
+   * @var ConfigurableLanguageManager
    */
   protected $languageManager;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    */
   public function __construct(LanguageManagerInterface $language_manager, StateInterface $state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/loco_translate/src/TwigExtension/LocoExport.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\loco_translate\TwigExtension;

+use Drupal\Core\Config\ConfigFactoryInterface;
 use Symfony\Component\DependencyInjection\ContainerAwareTrait;

 /**
@@ @@
    *   The export GET link for Loco API.
    */
   public function exportLink($locale) {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+    /** @var ConfigFactoryInterface $config_factory */
     $config_factory = $this->container->get('config.factory');

     $config = $config_factory->get('loco_translate.settings');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/loco_translate/src/TranslationsImport.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The Utility service of Loco Translate.
    *
-   * @var \Drupal\loco_translate\Utility
+   * @var Utility
    */
   protected $utility;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\loco_translate\Utility $utility
+   * @param Utility $utility
    *   Utility methods for Loco Translate.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(Utility $utility, ModuleHandlerInterface $module_handler, FileSystemInterface $file_system) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/loco_translate/src/Loco/Push.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\loco_translate\Loco;

+use GuzzleHttp\Command\Result;
 use Loco\Http\ApiClient;
 use Drupal\loco_translate\Exception\LocoTranslateException;
 use Drupal\loco_translate\Exception\LocoApiException;
@@ @@
   /**
    * The Loco SDK HTTP client.
    *
-   * @var \Loco\Http\ApiClient
+   * @var ApiClient
    */
   private $client;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Loco\Http\ApiClient $api_client
+   * @param ApiClient $api_client
    *   Loco Api Client.
    */
   public function __construct(ApiClient $api_client) {
@@ @@
   /**
    * Set the API Client.
    *
-   * @param \Loco\Http\ApiClient $api_client
+   * @param ApiClient $api_client
    *   Loco Api Client.
    */
   public function setApiClient(ApiClient $api_client) {
@@ @@
     $data = file_get_contents($file);

     try {
-      /** @var \GuzzleHttp\Command\Result */
+      /** @var Result */
       $result = $this->client->import([
         'data' => $data,
         'locale' => $locale,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/loco_translate/src/Loco/Pull.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\loco_translate\Loco;

+use Loco\Http\Result\RawResult;
 use Loco\Http\ApiClient;
 use Drupal\loco_translate\Utility;
 use Drupal\loco_translate\Exception\LocoTranslateException;
@@ @@
   /**
    * The Loco SDK HTTP client.
    *
-   * @var \Loco\Http\ApiClient
+   * @var ApiClient
    */
   private $client;

@@ @@
   /**
    * The Utility service of Loco Translate.
    *
-   * @var \Drupal\loco_translate\Utility
+   * @var Utility
    */
   protected $utility;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Loco\Http\ApiClient $api_client
+   * @param ApiClient $api_client
    *   Loco Api Client.
-   * @param \Drupal\loco_translate\Utility $utility
+   * @param Utility $utility
    *   Utility methods for Loco Translate.
    */
   public function __construct(ApiClient $api_client, Utility $utility) {
@@ @@
   /**
    * Set the API Client.
    *
-   * @param \Loco\Http\ApiClient $api_client
+   * @param ApiClient $api_client
    *   Loco Api Client.
    */
   public function setApiClient(ApiClient $api_client) {
@@ @@
    * @param string $index
    *   Override lookup key for the file format: "id", "text" or a custom alias.
    *
-   * @return \Loco\Http\Result\RawResult
+   * @return RawResult
    *   The result of the query.
    *
-   * @throws \Drupal\loco_translate\Exception\LocoApiException
-   * @throws \Drupal\loco_translate\Exception\LocoTranslateException
+   * @throws LocoApiException
+   * @throws LocoTranslateException
    *
    * @see https://localise.biz/api/#!/import/import
    */
@@ @@
     }

     try {
-      /** @var \Loco\Http\Result\RawResult */
+      /** @var RawResult */
       $result = $this->client->exportLocale([
         'ext' => 'po',
         'index' => $index,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/loco_translate/src/Loco/ApiClientFactory.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Get the Loco API Client with a full access key.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Drupal Config Factory.
    *
-   * @return \Loco\Http\ApiClient
+   * @return ApiClient
    *   The Loco ApiClient.
    */
   public static function withFullAccess(ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Get the Loco API Client with a read-only access key.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Drupal Config Factory.
    *
-   * @return \Loco\Http\ApiClient
+   * @return ApiClient
    *   The Loco ApiClient.
    */
   public static function withReadOnlyAccess(ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/loco_translate/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\loco_translate\Form;

+use GuzzleHttp\Command\Result;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The configurable language manager.
    *
-   * @var \Drupal\language\ConfigurableLanguageManagerInterface
+   * @var ConfigurableLanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a loco translate settings form object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\language\ConfigurableLanguageManagerInterface $language_manager
+   * @param ConfigurableLanguageManagerInterface $language_manager
    *   The configurable language manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ConfigurableLanguageManagerInterface $language_manager) {
@@ @@
    *   The API Key to validate.
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   private function validateKey($key, array &$form, FormStateInterface $form_state) {
@@ @@
     ]);

     try {
-      /** @var \GuzzleHttp\Command\Result */
+      /** @var Result */
       $client->authVerify();
     }
     catch (\Exception $e) {
@@ @@
    *   An associative array containing the values to validate.
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   private function validatePushAutomation(array $values, array &$form, FormStateInterface $form_state) {
@@ @@
    *   An associative array containing the values to validate.
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   private function validatePullAutomation(array $values, array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/loco_translate/src/Form/PullForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\loco_translate\Form;

+use Drupal\file\FileInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\loco_translate\Utility;
@@ @@
   /**
    * The Utility service of Loco Translate.
    *
-   * @var \Drupal\loco_translate\Utility
+   * @var Utility
    */
   protected $utility;

@@ @@
   /**
    * The configurable language manager.
    *
-   * @var \Drupal\language\ConfigurableLanguageManagerInterface
+   * @var ConfigurableLanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The Translation importer.
    *
-   * @var \Drupal\loco_translate\TranslationsImport
+   * @var TranslationsImport
    */
   protected $translationsImport;

@@ @@
   /**
    * Constructs a form for language pull.
    *
-   * @param \Drupal\loco_translate\Utility $utility
+   * @param Utility $utility
    *   The Utility service of Loco Translate.
-   * @param \Drupal\language\ConfigurableLanguageManagerInterface $language_manager
+   * @param ConfigurableLanguageManagerInterface $language_manager
    *   The configurable language manager.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    * @param \Drupal\loco_translate\Loco\Pull $loco_pull
    *   The Loco translations pull manager.
-   * @param \Drupal\loco_translate\TranslationsImport $translatons_import
+   * @param TranslationsImport $translatons_import
    *   The Translation importer.
    */
   public function __construct(Utility $utility, ConfigurableLanguageManagerInterface $language_manager, FileSystemInterface $file_system, LocoPull $loco_pull, TranslationsImport $translatons_import) {
@@ @@
           throw new \RuntimeException(sprintf('Download error. Could not move downloaded file from Loco to destination %s.', $destination_directory));
         }

-        /** @var \Drupal\file\FileInterface $file */
-        $file = file_save_data($response->__toString(), $destination_directory);
+        /** @var FileInterface $file */
+        $file = \Drupal::service('file.repository')->writeData($response->__toString(), $destination_directory);
         $form_state->setValue('files[' . $langcode . ']', $this->fileSystem->realPath($file->getFileUri()));
       }
       catch (\Exception $e) {
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/loco_translate/src/Exception/LocoApiException.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The upload to Loco API has failed.
    *
-   * @param \GuzzleHttp\Command\Result $result
+   * @param Result $result
    *   A Loco response message.
    *
    * @return LocoApiException
@@ @@
   /**
    * Download from Loco API has failed.
    *
-   * @param Loco\Http\Result\RawResult $raw_result
+   * @param RawResult $raw_result
    *   A Loco response message.
    *
    * @return LocoApiException
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/loco_translate/src/Controller/OverviewController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\loco_translate\Controller;

+use GuzzleHttp\Command\Result;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\State\StateInterface;
@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Cache backend service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * Construct a OverviewController object.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The configuration factory.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Cache backend.
    */
   public function __construct(StateInterface $state, ConfigFactoryInterface $config_factory, DateFormatterInterface $date_formatter, CacheBackendInterface $cache) {
@@ @@
       $this->cache->set('loco_translate.cache.api.assets', $assets, CacheBackendInterface::CACHE_PERMANENT);

       // Get the Loco Status.
-      /** @var \GuzzleHttp\Command\Result $result */
+      /** @var Result $result */
       $result = $client->ping();
       $this->cache->set('loco_translate.cache.versions', [
         'api' => $result->offsetGet('version'),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/loco_translate/src/Commands/PushCommand.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\loco_translate\Commands;

+use Drupal\loco_translate\Exception\LocoApiException;
+use Drupal\loco_translate\Exception\LocoTranslateException;
 use Drush\Commands\DrushCommands;
 use Drupal\loco_translate\Loco\Push;
 use Drupal\loco_translate\Utility;
@@ @@
   /**
    * Loco Push Api Wrapper.
    *
-   * @var \Drupal\loco_translate\Loco\Push
+   * @var Push
    */
   private $locoPush;

@@ @@
   /**
    * The Utility service of Loco Translate.
    *
-   * @var \Drupal\loco_translate\Utility
+   * @var Utility
    */
   private $utility;

@@ @@
   /**
    * PushCommand constructor.
    *
-   * @param \Drupal\loco_translate\Loco\Push $locoPush
+   * @param Push $locoPush
    *   The Loco Push Api Wrapper.
-   * @param \Drupal\loco_translate\Utility $utility
+   * @param Utility $utility
    *   The Utility service of Loco Translate.
    */
   public function __construct(Push $locoPush, Utility $utility) {
@@ @@
    * @param array $options
    *   (Optional) An array of options.
    *
-   * @throws \Drupal\loco_translate\Exception\LocoApiException
-   * @throws \Drupal\loco_translate\Exception\LocoTranslateException
+   * @throws LocoApiException
+   * @throws LocoTranslateException
    *
    * @command loco_translate:push
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/loco_translate/src/Commands/PullCommand.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\loco_translate\Commands;

+use Drupal\loco_translate\Exception\LocoApiException;
+use Drupal\loco_translate\Exception\LocoTranslateException;
+use Drupal\file\FileInterface;
 use Drupal\loco_translate\Loco\Pull;
 use Drupal\loco_translate\TranslationsImport;
 use Drush\Commands\DrushCommands;
@@ @@
   /**
    * Loco Pull Api Wrapper.
    *
-   * @var \Drupal\loco_translate\Loco\Pull
+   * @var Pull
    */
   private $locoPull;

@@ @@
   /**
    * The Translation importer.
    *
-   * @var \Drupal\loco_translate\TranslationsImport
+   * @var TranslationsImport
    */
   protected $translationsImport;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * PullCommand constructor.
    *
-   * @param \Drupal\loco_translate\Loco\Pull $locoPull
+   * @param Pull $locoPull
    *   The Loco Push Api Wrapper.
-   * @param \Drupal\loco_translate\TranslationsImport $translations_import
+   * @param TranslationsImport $translations_import
    *   The translation import service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(Pull $locoPull, TranslationsImport $translations_import, FileSystemInterface $file_system) {
@@ @@
    * @param array $options
    *   (Optional) An array of options.
    *
-   * @throws \Drupal\loco_translate\Exception\LocoApiException
-   * @throws \Drupal\loco_translate\Exception\LocoTranslateException
+   * @throws LocoApiException
+   * @throws LocoTranslateException
    *
    * @command loco_translate:pull
    *
@@ @@
       throw new \RuntimeException(sprintf('Download error. Could not move downloaded file from Loco to destination %s.', $destination_directory));
     }

-    /** @var \Drupal\file\FileInterface $file */
-    $file = file_save_data($response->__toString(), $destination_directory);
+    /** @var FileInterface $file */
+    $file = \Drupal::service('file.repository')->writeData($response->__toString(), $destination_directory);

     // Be sure the file is temporary, so will be garbage collected.
     $file->setTemporary();
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/loco_translate/inc/cron_pull.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\file\FileInterface;
 /**
  * @file
  * Pull cron function for Loco Translate module.
@@ @@
     throw new \RuntimeException(sprintf('Download error. Could not move downloaded file from Loco to destination %s.', $destination_directory));
   }

-  /** @var \Drupal\file\FileInterface $file */
-  $file = file_save_data($response->__toString(), $destination_directory);
+  /** @var FileInterface $file */
+  $file = \Drupal::service('file.repository')->writeData($response->__toString(), $destination_directory);
   $path = $file_system->realPath($file->getFileUri());
   $report = $translations_import->fromFile($path, $langcode);
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector


 [OK] 22 files have been changed by Rector                                      

