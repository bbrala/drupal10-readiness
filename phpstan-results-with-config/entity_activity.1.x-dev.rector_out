modules/contrib/entity_activity/entity_activity.install
modules/contrib/entity_activity/entity_activity.module
modules/contrib/entity_activity/entity_activity.tokens.inc
modules/contrib/entity_activity/entity_activity.views.inc
modules/contrib/entity_activity/modules/entity_activity_mail/entity_activity_mail.install
modules/contrib/entity_activity/modules/entity_activity_mail/entity_activity_mail.module
modules/contrib/entity_activity/modules/entity_activity_mail/src/EventSubscriber/LogReportSubscriber.php
modules/contrib/entity_activity/modules/entity_activity_mail/src/Form/SettingsForm.php
modules/contrib/entity_activity/modules/entity_activity_mail/src/MailHandler.php
modules/contrib/entity_activity/modules/entity_activity_mail/src/MailHandlerInterface.php
modules/contrib/entity_activity/modules/entity_activity_mail/src/Plugin/QueueWorker/PrepareReportWorker.php
modules/contrib/entity_activity/modules/entity_activity_mail/src/Plugin/QueueWorker/ReportWorker.php
modules/contrib/entity_activity/modules/entity_activity_mail/src/ReportService.php
modules/contrib/entity_activity/modules/entity_activity_mail/src/ReportServiceInterface.php
modules/contrib/entity_activity/modules/entity_activity_mail/tests/src/Functional/EntityActivityMailBrowserTest.php
modules/contrib/entity_activity/modules/entity_activity_mass_subscribe/entity_activity_mass_subscribe.module
modules/contrib/entity_activity/modules/entity_activity_mass_subscribe/src/Access/MassSubscribeAccess.php
modules/contrib/entity_activity/modules/entity_activity_mass_subscribe/src/Form/MassSubscribeForm.php
modules/contrib/entity_activity/modules/entity_activity_mass_subscribe/src/MassSubscribeBatch.php
modules/contrib/entity_activity/modules/entity_activity_mass_subscribe/src/Plugin/Derivative/MassSubscribeLocalTasks.php
modules/contrib/entity_activity/modules/entity_activity_mass_subscribe/src/Routing/MassSubscribeRoutes.php
modules/contrib/entity_activity/src/Access/ListSubscribersAccess.php
modules/contrib/entity_activity/src/Access/LogAccessCheck.php
modules/contrib/entity_activity/src/Access/SubscriptionAccessCheck.php
modules/contrib/entity_activity/src/Access/UserViewsAccess.php
modules/contrib/entity_activity/src/Annotation/LogGenerator.php
modules/contrib/entity_activity/src/Controller/EntityActivityBaseController.php
modules/contrib/entity_activity/src/Controller/EntityActivityBaseControllerInterface.php
modules/contrib/entity_activity/src/Controller/ListSubscribersController.php
modules/contrib/entity_activity/src/Controller/LogController.php
modules/contrib/entity_activity/src/Controller/SubscriptionController.php
modules/contrib/entity_activity/src/Entity/Generator.php
modules/contrib/entity_activity/src/Entity/GeneratorInterface.php
modules/contrib/entity_activity/src/Entity/Log.php
modules/contrib/entity_activity/src/Entity/LogInterface.php
modules/contrib/entity_activity/src/Entity/LogViewsData.php
modules/contrib/entity_activity/src/Entity/Subscription.php
modules/contrib/entity_activity/src/Entity/SubscriptionInterface.php
modules/contrib/entity_activity/src/Entity/SubscriptionViewsData.php
modules/contrib/entity_activity/src/EntityActivityContentEntityStorage.php
modules/contrib/entity_activity/src/EntityActivityManager.php
modules/contrib/entity_activity/src/EntityActivityManagerInterface.php
modules/contrib/entity_activity/src/Event/EntityActivityEvent.php
modules/contrib/entity_activity/src/Event/EntityActivityEvents.php
modules/contrib/entity_activity/src/Event/EntityActivitySupportEntityTypeEvent.php
modules/contrib/entity_activity/src/Event/LogEvent.php
modules/contrib/entity_activity/src/Event/LogEvents.php
modules/contrib/entity_activity/src/Event/SubscriptionEvent.php
modules/contrib/entity_activity/src/Event/SubscriptionEvents.php
modules/contrib/entity_activity/src/EventSubscriber/EntityActivitySubscriber.php
modules/contrib/entity_activity/src/Form/GeneratorDeleteForm.php
modules/contrib/entity_activity/src/Form/GeneratorDisableForm.php
modules/contrib/entity_activity/src/Form/GeneratorDuplicateForm.php
modules/contrib/entity_activity/src/Form/GeneratorEnableForm.php
modules/contrib/entity_activity/src/Form/GeneratorForm.php
modules/contrib/entity_activity/src/Form/LogSettingsForm.php
modules/contrib/entity_activity/src/Form/SettingsForm.php
modules/contrib/entity_activity/src/Form/SubscriptionSettingsForm.php
modules/contrib/entity_activity/src/GeneratorHtmlRouteProvider.php
modules/contrib/entity_activity/src/GeneratorListBuilder.php
modules/contrib/entity_activity/src/Interval.php
modules/contrib/entity_activity/src/LogAccessControlHandler.php
modules/contrib/entity_activity/src/LogHtmlRouteProvider.php
modules/contrib/entity_activity/src/LogListBuilder.php
modules/contrib/entity_activity/src/LogStorage.php
modules/contrib/entity_activity/src/LogStorageInterface.php
modules/contrib/entity_activity/src/Plugin/Block/SubscribeOnBlock.php
modules/contrib/entity_activity/src/Plugin/Block/UserLogBlock.php
modules/contrib/entity_activity/src/Plugin/Derivative/ListSubscribersLocalTasks.php
modules/contrib/entity_activity/src/Plugin/Field/FieldFormatter/LogReadFormatter.php
modules/contrib/entity_activity/src/Plugin/LogGenerator/BrokenLogGenerator.php
modules/contrib/entity_activity/src/Plugin/LogGenerator/CommentLogGenerator.php
modules/contrib/entity_activity/src/Plugin/LogGenerator/NodeLogGenerator.php
modules/contrib/entity_activity/src/Plugin/LogGenerator/TermLogGenerator.php
modules/contrib/entity_activity/src/Plugin/LogGenerator/UserLogGenerator.php
modules/contrib/entity_activity/src/Plugin/LogGeneratorBase.php
modules/contrib/entity_activity/src/Plugin/LogGeneratorInterface.php
modules/contrib/entity_activity/src/Plugin/LogGeneratorManager.php
modules/contrib/entity_activity/src/Plugin/LogGeneratorManagerInterface.php
modules/contrib/entity_activity/src/Plugin/LogGeneratorPluginCollection.php
modules/contrib/entity_activity/src/Plugin/QueueWorker/LogGeneratorWorker.php
modules/contrib/entity_activity/src/Plugin/QueueWorker/PurgeLogWorker.php
modules/contrib/entity_activity/src/Plugin/views/area/LogReadAll.php
modules/contrib/entity_activity/src/Plugin/views/area/LogTotalUnread.php
modules/contrib/entity_activity/src/Plugin/views/field/LogReferenceSourceEntity.php
modules/contrib/entity_activity/src/Plugin/views/field/LogSourceEntity.php
modules/contrib/entity_activity/src/Plugin/views/field/SubscriptionSourceEntity.php
modules/contrib/entity_activity/src/Routing/EntityActivityRoutes.php
modules/contrib/entity_activity/src/Routing/RouteSubscriber.php
modules/contrib/entity_activity/src/SubscriptionAccessControlHandler.php
modules/contrib/entity_activity/src/SubscriptionHtmlRouteProvider.php
modules/contrib/entity_activity/src/SubscriptionListBuilder.php
modules/contrib/entity_activity/src/SubscriptionStorage.php
modules/contrib/entity_activity/src/SubscriptionStorageInterface.php
modules/contrib/entity_activity/tests/modules/entity_activity_test/entity_activity_test.install
modules/contrib/entity_activity/tests/modules/entity_activity_test/entity_activity_test.module
modules/contrib/entity_activity/tests/src/Functional/EntityActivityBrowserTest.php
modules/contrib/entity_activity/tests/src/Functional/EntityActivityBrowserTestBase.php
modules/contrib/entity_activity/tests/src/FunctionalJavascript/EntityActivityWebDriverTest.php
modules/contrib/entity_activity/tests/src/FunctionalJavascript/EntityActivityWebDriverTestBase.php
modules/contrib/entity_activity/tests/src/Traits/EntityActivityBrowserTestTrait.php

69 files with changes
=====================

1) modules/contrib/entity_activity/tests/src/FunctionalJavascript/EntityActivityWebDriverTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_activity\FunctionalJavascript;

+use Drupal\user\UserInterface;
+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\taxonomy\TermInterface;
+use Drupal\node\NodeInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\entity_activity\SubscriptionStorageInterface;
+use Drupal\entity_activity\LogStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
@@ @@
   /**
    * A test user with administrative privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * A test user with advanced privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $advancedUser;

@@ @@
   /**
    * A test user with normal privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user1;

@@ @@
   /**
    * A test user with normal privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user2;

@@ @@
   /**
    * The vocabulary used for creating terms.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;

@@ @@
   /**
    * Stores the first term used in the different tests.
    *
-   * @var \Drupal\taxonomy\TermInterface
+   * @var TermInterface
    */
   protected $term1;

@@ @@
   /**
    * Stores the second term used in the different tests.
    *
-   * @var \Drupal\taxonomy\TermInterface
+   * @var TermInterface
    */
   protected $term2;

@@ @@
   /**
    * Store the first article.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $article1;

@@ @@
   /**
    * Store the second article.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $article2;

@@ @@
   /**
    * Store the first page.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $page1;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\entity_activity\SubscriptionStorageInterface definition.
    *
-   * @var \Drupal\entity_activity\SubscriptionStorageInterface
+   * @var SubscriptionStorageInterface
    */
   protected $subscriptionStorage;

@@ @@
   /**
    * Drupal\entity_activity\LogStorageInterface definition.
    *
-   * @var \Drupal\entity_activity\LogStorageInterface
+   * @var LogStorageInterface
    */
   protected $logStorage;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->entityTypeManager = $this->container->get('entity_type.manager');
     $this->subscriptionStorage = $this->entityTypeManager->getStorage('entity_activity_subscription');
@@ @@
   /**
    * Install and set component for view display subscription and log entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function installEntityViewDisplayMode() {
     $view_display = $this->entityTypeManager
@@ @@
         ->create($values)
         ->save();
     }
-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $view_display */
+    /** @var EntityViewDisplayInterface $view_display */
     $view_display = $this->entityTypeManager
       ->getStorage('entity_view_display')
       ->load("entity_activity_log.entity_activity_log.default");
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_activity/tests/src/FunctionalJavascript/EntityActivityWebDriverTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->advancedUser);
   }
@@ @@
     $this->article1->set('body', 'This is the value of Article 1 body')->save();

     $logs = $this->logStorage->loadMultipleUnreadByOwner($this->advancedUser);
-    $this->assertEqual(1, count($logs));
+    $this->assertEquals(1, count($logs));

     $this->drupalGet('user/' . $this->advancedUser->id() . '/logs');
     $this->waitForAjaxToFinish();
@@ @@
     $this->waitForAjaxToFinish();

     $logs = $this->logStorage->loadMultipleUnreadByOwner($this->advancedUser);
-    $this->assertEqual(0, count($logs));
+    $this->assertEquals(0, count($logs));

     $logs = $this->logStorage->loadMultipleByOwner($this->advancedUser);
-    $this->assertEqual(1, count($logs));
+    $this->assertEquals(1, count($logs));

     $page->pressButton('Remove');
     $this->waitForAjaxToFinish();
@@ @@
     $page = $this->getSession()->getPage();
     $this->assertNotTrue($page->hasContent('The content Article 1 has been updated'));
     $logs = $this->logStorage->loadMultipleByOwner($this->advancedUser);
-    $this->assertEqual(0, count($logs));
+    $this->assertEquals(0, count($logs));

     // Check subscriptions page and Remove button.
     $this->drupalGet('user/' . $this->advancedUser->id() . '/subscriptions');
@@ @@
     $this->article1->set('body', 'This is the value of Article 1 body')->save();

     $logs = $this->logStorage->loadMultipleUnreadByOwner($this->user1);
-    $this->assertEqual(1, count($logs));
+    $this->assertEquals(1, count($logs));

     $this->drupalGet('user/' . $this->user1->id() . '/logs');
     $this->waitForAjaxToFinish();
@@ @@
     $this->waitForAjaxToFinish();

     $logs = $this->logStorage->loadMultipleUnreadByOwner($this->user1);
-    $this->assertEqual(0, count($logs));
+    $this->assertEquals(0, count($logs));

     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(1, count($logs));
+    $this->assertEquals(1, count($logs));

     $page->pressButton('Remove');
     $this->waitForAjaxToFinish();
@@ @@
     $page = $this->getSession()->getPage();
     $this->assertNotTrue($page->hasContent('The content Article 1 has been updated'));
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(0, count($logs));
+    $this->assertEquals(0, count($logs));

     // Check subscriptions page and Remove button.
     $this->drupalGet('user/' . $this->user1->id() . '/subscriptions');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_activity/tests/src/Functional/EntityActivityBrowserTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_activity\Functional;

+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\taxonomy\TermInterface;
+use Drupal\node\NodeInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\entity_activity\SubscriptionStorageInterface;
+use Drupal\entity_activity\LogStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\entity_activity\Entity\SubscriptionInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Queue\QueueFactory;
+use Drupal\Core\Queue\QueueWorkerManagerInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ @@
   /**
    * A test user with administrative privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * A test user with advanced privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $advancedUser;

@@ @@
   /**
    * A test user with normal privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user1;

@@ @@
   /**
    * A test user with normal privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user2;

@@ @@
   /**
    * The vocabulary used for creating terms.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;

@@ @@
   /**
    * Stores the first term used in the different tests.
    *
-   * @var \Drupal\taxonomy\TermInterface
+   * @var TermInterface
    */
   protected $term1;

@@ @@
   /**
    * Stores the second term used in the different tests.
    *
-   * @var \Drupal\taxonomy\TermInterface
+   * @var TermInterface
    */
   protected $term2;

@@ @@
   /**
    * Store the first article.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $article1;

@@ @@
   /**
    * Store the second article.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $article2;

@@ @@
   /**
    * Store the first page.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $page1;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\entity_activity\SubscriptionStorageInterface definition.
    *
-   * @var \Drupal\entity_activity\SubscriptionStorageInterface
+   * @var SubscriptionStorageInterface
    */
   protected $subscriptionStorage;

@@ @@
   /**
    * Drupal\entity_activity\LogStorageInterface definition.
    *
-   * @var \Drupal\entity_activity\LogStorageInterface
+   * @var LogStorageInterface
    */
   protected $logStorage;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->entityTypeManager = $this->container->get('entity_type.manager');
     $this->subscriptionStorage = $this->entityTypeManager->getStorage('entity_activity_subscription');
@@ @@
   /**
    * Install and set component for view display subscription and log entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function installEntityViewDisplayMode() {
     $view_display = $this->entityTypeManager
@@ @@
   /**
    * Create a subscription.
    *
-   * @param \Drupal\user\UserInterface $user
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param UserInterface $user
+   * @param ContentEntityInterface $entity
    *
-   * @return \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @return SubscriptionInterface
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createSubscription(UserInterface $user, ContentEntityInterface $entity) {
     $values = [
@@ @@
       'source_entity_id' => $entity->id(),
       'langcode' => $this->langcode,
     ];
-    /** @var \Drupal\entity_activity\Entity\SubscriptionInterface $subscription */
+    /** @var SubscriptionInterface $subscription */
     $subscription = $this->subscriptionStorage->create($values);
     $subscription->save();
     return $subscription;
@@ @@
    * @param string $queue_name
    *   The queue name.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function processQueue($queue_name) {
     // Grab the defined cron queues.
-    /** @var \Drupal\Core\Queue\QueueFactory $queue_factory */
+    /** @var QueueFactory $queue_factory */
     $queue_factory = \Drupal::service('queue');
-    /** @var \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_manager */
+    /** @var QueueWorkerManagerInterface $queue_manager */
     $queue_manager = \Drupal::service('plugin.manager.queue_worker');
     $queues = $queue_manager->getDefinitions();
     if (!isset($queues[$queue_name])) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entity_activity/tests/src/Functional/EntityActivityBrowserTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_activity\Functional;

+use Drupal\entity_activity\Entity\SubscriptionInterface;
+use Behat\Mink\Exception\ElementNotFoundException;
+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\node\Entity\Node;
 use Drupal\Core\StringTranslation\StringTranslationTrait;

@@ @@
   /**
    * A subscription.
    *
-   * @var \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @var SubscriptionInterface
    */
   protected $subscription1;

@@ @@
   /**
    * A subscription.
    *
-   * @var \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @var SubscriptionInterface
    */
   protected $subscription2;

@@ @@
   /**
    * A subscription.
    *
-   * @var \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @var SubscriptionInterface
    */
   protected $subscription3;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->subscription1 = $this->createSubscription($this->user1, $this->term1);
     $this->subscription2 = $this->createSubscription($this->user1, $this->user2);
@@ @@
   /**
    * Test permissions's module.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws ElementNotFoundException
+   * @throws ExpectationException
+   * @throws EntityMalformedException
    */
   public function testPermissions() {
     $this->drupalLogin($this->advancedUser);
@@ @@
     $this->drupalGet($this->article1->toUrl());
     $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->buttonExists('Subscribe');
-    $this->assertText('Subscribe');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Subscribe');

     $this->drupalGet('user/' . $this->user1->id() . '/subscriptions');
     $this->assertSession()->statusCodeEquals(200);
@@ @@
   /**
    * Test List Subscribers access.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws ElementNotFoundException
+   * @throws ExpectationException
+   * @throws EntityMalformedException
    */
   public function testListSubscribers() {

@@ @@
     $this->drupalLogin($this->advancedUser);
     $this->drupalGet('taxonomy/term/' . $this->term1->id() . '/list-subscribers');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText($this->user1->getDisplayName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->user1->getDisplayName());

     $this->drupalLogout();
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('taxonomy/term/' . $this->term1->id() . '/list-subscribers');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText($this->user1->getDisplayName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->user1->getDisplayName());

     $this->drupalLogout();
     $this->drupalLogin($this->user1);
     $this->drupalGet($this->term1->toUrl());
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertNoText('Subscribers');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Subscribers');
     $this->drupalGet('taxonomy/term/' . $this->term1->id() . '/list-subscribers');
     $this->assertSession()->statusCodeEquals(403);
   }
@@ @@
   /**
    * Test generation of logs from a reference field and with(out) a cron.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testGenerationLogsByReference() {
     // User 1 has a subscription on User 2 and on Term 1.
     $subscriptions = $this->subscriptionStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(2, count($subscriptions));
+    $this->assertEquals(2, count($subscriptions));
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(0, count($logs));
+    $this->assertEquals(0, count($logs));

     $this->drupalLogin($this->user2);
     $new_article = Node::create([
@@ @@
     $new_article->save();

     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(1, count($logs));
+    $this->assertEquals(1, count($logs));

     $this->drupalLogout();
     $this->drupalLogin($this->user1);
     $this->drupalGet('user/' . $this->user1->id() . '/logs');
-    $this->assertText('The content New Article has been created by ' . $this->user2->getDisplayName() . '. Log with the generator test_insert.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The content New Article has been created by ' . $this->user2->getDisplayName() . '. Log with the generator test_insert.');

     $this->drupalLogout();
     $this->drupalLogin($this->user2);
@@ @@

     // $this->logStorage->resetCache();
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(2, count($logs));
+    $this->assertEquals(2, count($logs));

     $this->drupalLogout();
     $this->drupalLogin($this->user1);
     $this->drupalGet('user/' . $this->user1->id() . '/logs');
-    $this->assertText('The content Article 1 has been updated by ' . $this->user2->getDisplayName() . '. Log with the generator test_update_term.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The content Article 1 has been updated by ' . $this->user2->getDisplayName() . '. Log with the generator test_update_term.');

     $this->drupalLogout();
     $this->drupalLogin($this->user2);
@@ @@
     $new_article->delete();

     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(3, count($logs));
+    $this->assertEquals(3, count($logs));

     $this->drupalLogout();
     $this->drupalLogin($this->user1);
     $this->drupalGet('user/' . $this->user1->id() . '/logs');
-    $this->assertText('The content New Article has been deleted by ' . $this->user2->getDisplayName() . '. Log with the generator test_delete.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The content New Article has been deleted by ' . $this->user2->getDisplayName() . '. Log with the generator test_delete.');

     $config = \Drupal::configFactory()->getEditable('entity_activity.generator.test_insert');
     $config->set('generators.node.use_cron', TRUE);
@@ @@
     $another_article->save();

     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(3, count($logs));
+    $this->assertEquals(3, count($logs));
     $this->assertEquals(1, \Drupal::queue('entity_activity_log_generator_worker')->numberOfItems());
     $this->container->get('cron')->run();

     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(4, count($logs));
+    $this->assertEquals(4, count($logs));
     $this->assertEquals(0, \Drupal::queue('entity_activity_log_generator_worker')->numberOfItems());

     $this->drupalLogout();
     $this->drupalLogin($this->user1);
     $this->drupalGet('user/' . $this->user1->id() . '/logs');
-    $this->assertText('The content Another Article has been created by ' . $this->user2->getDisplayName() . '. Log with the generator test_insert.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The content Another Article has been created by ' . $this->user2->getDisplayName() . '. Log with the generator test_insert.');
     $this->drupalLogout();

     // Delete user 1.
@@ @@
     $edit = [];
     $edit[$title_key] = 'Another Article';
     $edit[$body_key] = 'The body of the another article';
-    $this->drupalPostForm('node/add/article', $edit, $this->t('Save'));
-    $this->assertText('Another Article');
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, $this->t('Save'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Another Article');
     $this->assertSession()->statusCodeEquals(200);

     // Check that the node exists in the database.
@@ @@
     }

     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(5, count($logs));
+    $this->assertEquals(5, count($logs));
     $time = $this->container->get('datetime.time');
     $tree_day_ago = $time->getRequestTime() - (86400 * 3);
     $log = reset($logs);
@@ @@
     $log->set('created', $tree_day_ago)->save();
     $this->container->get('cron')->run();
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(4, count($logs));
+    $this->assertEquals(4, count($logs));

     $purge = [
       'method' => 'time',
@@ @@
     $log->set('created', $tree_day_ago)->save();
     $this->container->get('cron')->run();
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(4, count($logs));
+    $this->assertEquals(4, count($logs));
     $log->set('read', TRUE)->save();
     $this->container->get('cron')->run();
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(3, count($logs));
+    $this->assertEquals(3, count($logs));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity_activity/src/SubscriptionStorageInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity;

+use Drupal\entity_activity\Entity\SubscriptionInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * Generates a subscription.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $source
+   * @param ContentEntityInterface $source
    *   The source entity.
-   * @param \Drupal\Core\Session\AccountInterface $owner
+   * @param AccountInterface $owner
    *   The current user account owner of the subscription.
    * @param string $langcode
    *   The langcode.
@@ @@
    * @param array $parameters
    *   An array of additional parameters for the log.
    *
-   * @return \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @return SubscriptionInterface
    *   The subscription entity, unsaved.
    */
   public function generate(ContentEntityInterface $source, AccountInterface $owner = NULL, $langcode = NULL, array $parameters = []);
@@ @@
   /**
    * Loads all subscriptions for a source entity for any langcode.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
-   * @return \Drupal\entity_activity\Entity\SubscriptionInterface[]
+   * @return SubscriptionInterface[]
    *   The subscriptions.
    */
   public function loadMultipleByEntityAnyLangcode(ContentEntityInterface $entity);
@@ @@
   /**
    * Loads all subscriptions for a source entity and a langcode.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $langcode
    *   The langcode.
    *
-   * @return \Drupal\entity_activity\Entity\SubscriptionInterface[]
+   * @return SubscriptionInterface[]
    *   The subscriptions.
    */
   public function loadMultipleByEntity(ContentEntityInterface $entity, $langcode);
@@ @@
    * @param string $langcode
    *   The langcode.
    *
-   * @return \Drupal\entity_activity\Entity\SubscriptionInterface[]
+   * @return SubscriptionInterface[]
    *   The subscriptions.
    */
   public function loadMultipleByEntityTypeId($entity_type_id, $entity_id, $langcode);
@@ @@
   /**
    * Loads all subscriptions for a given owner.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    *
-   * @return \Drupal\entity_activity\Entity\SubscriptionInterface[]
+   * @return SubscriptionInterface[]
    *   The subscriptions.
    */
   public function loadMultipleByOwner(AccountInterface $account);
@@ @@
   /**
    * Loads all subscriptions for a source entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    * @param string $langcode
    *   The langcode.
    *
-   * @return \Drupal\entity_activity\Entity\SubscriptionInterface[]
+   * @return SubscriptionInterface[]
    *   The subscriptions.
    */
   public function loadMultipleByEntityAndOwner(ContentEntityInterface $entity, AccountInterface $account, $langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/entity_activity/src/SubscriptionListBuilder.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new NodeListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity_activity/src/SubscriptionHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity_activity/src/SubscriptionAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity;

+use Drupal\entity_activity\Entity\SubscriptionInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
       return AccessResult::allowed()->cachePerPermissions();
     }

-    /** @var \Drupal\entity_activity\Entity\SubscriptionInterface $entity */
+    /** @var SubscriptionInterface $entity */
     $owner = $entity->getOwner();
     if (!$owner) {
       // The log is malformed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entity_activity/src/Routing/EntityActivityRoutes.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Routing;

+use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal\entity_activity\EntityActivityManagerInterface definition.
    *
-   * @var \Drupal\entity_activity\EntityActivityManagerInterface
+   * @var EntityActivityManagerInterface
    */
   protected $entityActivityManager;

@@ @@
   /**
    * An array of ContentEntityType supported by entity_activity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityTypeInterface[]
+   * @var ContentEntityTypeInterface[]
    */
   protected $supportedContentEntityTypes;

@@ @@
   /**
    * EntityActivityRoutes Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\entity_activity\EntityActivityManagerInterface $entity_activity_manager
+   * @param EntityActivityManagerInterface $entity_activity_manager
    *   The entity activity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, ConfigFactoryInterface $config_factory, EntityActivityManagerInterface $entity_activity_manager) {
@@ @@
   /**
    * Gets the list subscribers route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getListSubscribersRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the type of the ID key for a given entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   An entity type.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/entity_activity/src/Plugin/views/area/LogTotalUnread.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Plugin\views\area;

+use Drupal\entity_activity\LogStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\views\Plugin\views\argument\ArgumentPluginBase;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The Log storage.
    *
-   * @var \Drupal\entity_activity\LogStorageInterface
+   * @var LogStorageInterface
    */
   protected $logStorage;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
     // Display the button only on views with a %user argument.
     $user = NULL;
     $arguments = $this->view->argument;
-    /** @var \Drupal\views\Plugin\views\argument\ArgumentPluginBase $argument */
+    /** @var ArgumentPluginBase $argument */
     foreach ($arguments as $plugin_id => $argument) {
       $real_Field = $argument->realField;
       $entity_type = $argument->getEntityType();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/entity_activity/src/Plugin/views/area/LogReadAll.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Plugin\views\area;

+use Drupal\views\Plugin\views\argument\ArgumentPluginBase;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
     // Display the button only on views with a %user argument.
     $user = NULL;
     $arguments = $this->view->argument;
-    /** @var \Drupal\views\Plugin\views\argument\ArgumentPluginBase $argument */
+    /** @var ArgumentPluginBase $argument */
     foreach ($arguments as $plugin_id => $argument) {
       $real_Field = $argument->realField;
       $entity_type = $argument->getEntityType();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/entity_activity/src/Plugin/QueueWorker/PurgeLogWorker.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/entity_activity/src/Plugin/QueueWorker/LogGeneratorWorker.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The log generator manager.
    *
-   * @var \Drupal\entity_activity\Plugin\LogGeneratorManagerInterface
+   * @var LogGeneratorManagerInterface
    */
   protected $logManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\entity_activity\Plugin\LogGeneratorManagerInterface $log_manager
+   * @param LogGeneratorManagerInterface $log_manager
    *   The log generator manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LogGeneratorManagerInterface $log_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/entity_activity/src/Plugin/LogGeneratorManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/entity_activity/src/Plugin/LogGeneratorInterface.php:18

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The configuration form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form_state object.
    *
    * @return mixed
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public function validateConfigurationForm(array $form, FormStateInterface $form_state);
@@ @@
   /**
    * Gets the source entity on which users have subscribed on.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The current entity on which the generator applies.
    *
    * @return array
@@ @@
    *
    * Useful to generate log from a queue / cron and not immediately.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    * @param string $generator_id
    *   The generator ID from which the plugin has been instantiated.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user who perform the action.
    *
    * @return array
@@ @@
   /**
    * Get the log with token replaced.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    *
    * @return array
@@ @@
   /**
    * Rewrite the final log message with a new based language log message.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The source entity.
    * @param array $log_message
    *   The log message array in the new language.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/entity_activity/src/Plugin/LogGeneratorBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Plugin;

+use Drupal\entity_activity\SubscriptionStorageInterface;
+use Drupal\entity_activity\LogStorageInterface;
+use Drupal\taxonomy\TermStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Component\Utility\NestedArray;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Datetime\DateFormatterInterface definition.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Drupal\Core\Utility\Token definition.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * Drupal\Core\Extension\ModuleHandlerInterface definition.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Drupal\Core\Entity\EntityRepositoryInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Drupal\Core\Entity\EntityFieldManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The token entity mapper service.
    *
-   * @var \Drupal\token\TokenEntityMapperInterface
+   * @var TokenEntityMapperInterface
    */
   protected $tokenEntityMapper;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The serializer service.
    *
-   * @var \Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   protected $serializer;

@@ @@
   /**
    * The global entity activity manager.
    *
-   * @var \Drupal\entity_activity\EntityActivityManagerInterface
+   * @var EntityActivityManagerInterface
    */
   protected $entityActivityManager;

@@ @@
   /**
    * The subscription storage.
    *
-   * @var \Drupal\entity_activity\SubscriptionStorageInterface
+   * @var SubscriptionStorageInterface
    */
   protected $subscriptionStorage;

@@ @@
   /**
    * The log storage.
    *
-   * @var \Drupal\entity_activity\LogStorageInterface
+   * @var LogStorageInterface
    */
   protected $logStorage;

@@ @@
   /**
    * The taxonomy term storage.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $termStorage;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    * @param \Drupal\Token\TokenEntityMapperInterface $token_entity_mapper
    *   The token entity mapper.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Symfony\Component\Serializer\SerializerInterface $serializer
+   * @param SerializerInterface $serializer
    *   The serializer service.
-   * @param \Drupal\entity_activity\EntityActivityManagerInterface $entity_activity_manager
+   * @param EntityActivityManagerInterface $entity_activity_manager
    *   The global entity activity manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, DateFormatterInterface $date_formatter, Token $token, ModuleHandlerInterface $module_handler, EntityRepositoryInterface $entity_repository, EntityFieldManagerInterface $entity_field_manager, TokenEntityMapperInterface $token_entity_mapper, EntityTypeBundleInfoInterface $entity_type_bundle_info, AccountProxyInterface $current_user, LanguageManagerInterface $language_manager, ConfigFactoryInterface $config_factory, TimeInterface $time, SerializerInterface $serializer, EntityActivityManagerInterface $entity_activity_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
   /**
    * Get the class name of the entity to use it with the serializer service.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    *
    * @return string
@@ @@
     }

     $use_user_preferred_language = $this->configFactory->get('entity_activity.settings')->get('language.user');
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $source_entity */
+    /** @var ContentEntityInterface $source_entity */
     $source_entity = $this->entityTypeManager->getStorage($source_entity_type)->load($source_entity_id);
     // The source entity has been deleted. Load it from the serialized entity stored in the settings.
     // @TODO use always this entity serialized instead of reloading the source entity.
@@ @@
             $language = $this->languageManager->getLanguage($user_langcode);
             $original_language = $this->languageManager->getConfigOverrideLanguage();
             $this->languageManager->setConfigOverrideLanguage($language);
-            /** @var \Drupal\entity_activity\Entity\GeneratorInterface $generator */
+            /** @var GeneratorInterface $generator */
             $generator = $this->entityTypeManager->getStorage('entity_activity_generator')->load($generator_id);
             $this->languageManager->setConfigOverrideLanguage($original_language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/entity_activity/src/Plugin/Derivative/ListSubscribersLocalTasks.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity activity manager service.
    *
-   * @var \Drupal\entity_activity\EntityActivityManagerInterface
+   * @var EntityActivityManagerInterface
    */
   protected $entityActivityManager;

@@ @@
   /**
    * Drupal\Core\Routing\RouteMatchInterface definition.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
    *
    * @param $base_plugin_id
    *   The base plugin id.
-   * @param \Drupal\entity_activity\EntityActivityManagerInterface $entity_activity_manager
+   * @param EntityActivityManagerInterface $entity_activity_manager
    *   The entity activity manager service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    */
   public function __construct($base_plugin_id, EntityActivityManagerInterface $entity_activity_manager, RouteMatchInterface $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/entity_activity/src/Plugin/Block/UserLogBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Plugin\Block;

+use Drupal\entity_activity\LogStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityViewModeInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Entity\Entity\EntityViewMode;
@@ @@
   /**
    * The Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The \Drupal\Core\Session\AccountProxyInterface definition.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Drupal\Core\Extension\ModuleHandlerInterface definition.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The log storage.
    *
-   * @var \Drupal\entity_activity\LogStorageInterface
+   * @var LogStorageInterface
    */
   protected $logStorage;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, AccountProxyInterface $current_user, ModuleHandlerInterface $module_handler) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
   protected function getViewModeIds($value_is_label = TRUE, $entity_type_id = 'entity_activity_log') {
     $list = [];
     $view_modes = EntityViewMode::loadMultiple();
-    /** @var \Drupal\Core\Entity\EntityViewModeInterface $view_mode */
+    /** @var EntityViewModeInterface $view_mode */
     foreach ($view_modes as $key => $view_mode) {
       if ($view_mode->getTargetType() == $entity_type_id) {
         $parts = explode('.', $key);
@@ @@
   /**
    * Gets the latest X logs unread for an account.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The log's owner.
    * @param int $length
    *   The number of logs to retrieve.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/entity_activity/src/Plugin/Block/SubscribeOnBlock.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\entity_activity\EntityActivityManagerInterface definition.
    *
-   * @var \Drupal\entity_activity\EntityActivityManagerInterface
+   * @var EntityActivityManagerInterface
    */
   protected $entityActivityManager;

@@ @@
   /**
    * Drupal\Core\Routing\CurrentRouteMatch definition.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * Drupal\Core\Session\AccountProxyInterface definition.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal\Core\Language\LanguageManagerInterface definition.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
    *   The plugin id.
    * @param $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\entity_activity\EntityActivityManagerInterface $entity_activity_manager
+   * @param EntityActivityManagerInterface $entity_activity_manager
    *   The entity activity manager.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $current_route_match
+   * @param CurrentRouteMatch $current_route_match
    *   The current route match.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory..
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityActivityManagerInterface $entity_activity_manager, CurrentRouteMatch $current_route_match, AccountProxyInterface $current_user, ConfigFactoryInterface $config_factory, LanguageManagerInterface $language_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/entity_activity/src/LogStorageInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity;

+use Drupal\entity_activity\Entity\LogInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * Generates a log.
    *
-   * @param \Drupal\entity_activity\Entity\SubscriptionInterface $subscription
+   * @param SubscriptionInterface $subscription
    *   The subscription entity.
    * @param array $log
    *   The log message array with value and format as the array keys.
@@ @@
    *   The current user id who made the action.
    * @param string $langcode
    *   The langcode used for generating the log message.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $source
+   * @param ContentEntityInterface $source
    *   The source entity.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $reference_source
+   * @param ContentEntityInterface $reference_source
    *   The reference source entity.
    * @param array $parameters
    *   An array of additional parameters for the log.
    *
-   * @return \Drupal\entity_activity\Entity\LogInterface
+   * @return LogInterface
    *   The generated log, unsaved.
    */
   public function generate(SubscriptionInterface $subscription, array $log, $log_generator_id, $current_user_id, $langcode, ContentEntityInterface $source = NULL, ContentEntityInterface $reference_source = NULL, array $parameters = []);
@@ @@
   /**
    * Loads all logs for a source entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
-   * @return \Drupal\entity_activity\Entity\LogInterface[]
+   * @return LogInterface[]
    *   The logs.
    */
   public function loadMultipleByEntity(ContentEntityInterface $entity);
@@ @@
   /**
    * Loads all logs for a given owner.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    *
-   * @return \Drupal\entity_activity\Entity\LogInterface[]
+   * @return LogInterface[]
    *   The logs.
    */
   public function loadMultipleByOwner(AccountInterface $account);
@@ @@
   /**
    * Loads all unread logs for a given owner.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    *
-   * @return \Drupal\entity_activity\Entity\LogInterface[]
+   * @return LogInterface[]
    *   The logs.
    */
   public function loadMultipleUnreadByOwner(AccountInterface $account);
@@ @@
   /**
    * Get the total of all unread logs for a given owner.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    *
-   * @return \Drupal\entity_activity\Entity\LogInterface[]
+   * @return LogInterface[]
    *   The logs.
    */
   public function totalUnreadByOwner(AccountInterface $account);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/entity_activity/src/LogListBuilder.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * Constructs a new NodeListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, Renderer $renderer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/entity_activity/src/LogHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/entity_activity/src/LogAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity;

+use Drupal\entity_activity\Entity\LogInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
       return AccessResult::allowed()->cachePerPermissions();
     }

-    /** @var \Drupal\entity_activity\Entity\LogInterface $entity */
+    /** @var LogInterface $entity */
     $owner = $entity->getOwner();
     if (!$owner) {
       // The log is malformed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/entity_activity/src/Interval.php:87

    ---------- begin diff ----------
@@ @@
   /**
    * Adds the interval to the given date.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $date
+   * @param DrupalDateTime $date
    *   The date.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The new date.
    */
   public function add(DrupalDateTime $date) {
-    /** @var \Drupal\Core\Datetime\DrupalDateTime $new_date */
+    /** @var DrupalDateTime $new_date */
     $new_date = clone $date;
     $new_date->modify('+' . $this->__toString());
     // Jan 31st + 1 month should give Feb 28th, not Mar 3rd.
@@ @@
   /**
    * Subtracts the interval from the given date.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $date
+   * @param DrupalDateTime $date
    *   The date.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The new date.
    */
   public function subtract(DrupalDateTime $date) {
-    /** @var \Drupal\Core\Datetime\DrupalDateTime $new_date */
+    /** @var DrupalDateTime $new_date */
     $new_date = clone $date;
     $new_date->modify('-' . $this->__toString());
     // Mar 31st - 1 month should Feb 28th, not Mar 3rd.
@@ @@
    * For example, an Apr 14th date would be reduced to Apr 1st for monthly
    * intervals, and Jan 1st for yearly intervals.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $date
+   * @param DrupalDateTime $date
    *   The date.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The new date.
    */
   public function floor(DrupalDateTime $date) {
-    /** @var \Drupal\Core\Datetime\DrupalDateTime $new_date */
+    /** @var DrupalDateTime $new_date */
     $new_date = clone $date;
     switch ($this->unit) {
       case 'hour':
@@ @@
    * For example, an Apr 14th date would be increased to May 1st for a 1 month
    * interval, and to June 1st for a 2 month interval.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $date
+   * @param DrupalDateTime $date
    *   The date.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The new date.
    */
   public function ceil(DrupalDateTime $date) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


25) modules/contrib/entity_activity/src/GeneratorListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity;

+use Drupal\entity_activity\Plugin\LogGeneratorInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;

@@ @@
     $data['generators'] = [];

     /** @var \Drupal\entity_activity\Entity\GeneratorInterface $entity */
-    /** @var \Drupal\entity_activity\Plugin\LogGeneratorInterface $log_generator */
+    /** @var LogGeneratorInterface $log_generator */
     foreach ($entity->getLogGeneratorsCollection() as $log_generator_id => $log_generator) {
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $summary */
+      /** @var TranslatableMarkup $summary */
       if ($summary = $log_generator->summary()) {
         $data['generators'][$log_generator_id] = ['#markup' => $summary->render()];
       }
@@ @@
       '#items' => empty($data['generators']) ? [$this->t('None')] : $data['generators'],
     ];

-    $row['generators'] = render($data['generators']);
+    $row['generators'] = \Drupal::service('renderer')->render($data['generators']);
     $row['status'] = $entity->status() ? $this->t('Enabled') : $this->t('Disabled');

     return $row + parent::buildRow($entity);
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/entity_activity/src/Form/SubscriptionSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/entity_activity/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Form;

+use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeBundleInfoInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * Drupal\entity_activity\EntityActivityManagerInterface definition.
    *
-   * @var \Drupal\entity_activity\EntityActivityManagerInterface
+   * @var EntityActivityManagerInterface
    */
   protected $entityActivityManager;

@@ @@
   /**
    * Drupal\Core\Language\LanguageManagerInterface definition.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * SettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\entity_activity\EntityActivityManagerInterface $entity_activity_manager
+   * @param EntityActivityManagerInterface $entity_activity_manager
    *   The entity activity manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityActivityManagerInterface $entity_activity_manager, LanguageManagerInterface $language_manager) {
@@ @@
     $entity_types = $this->entityActivityManager->getSupportedContentEntityTypes(TRUE);
     // We do not use here a checkboxes to be able later to
     // enable / disable per bundle too.
-    /** @var \Drupal\Core\Entity\ContentEntityTypeInterface $entity_type */
+    /** @var ContentEntityTypeInterface $entity_type */
     foreach ($entity_types as $entity_type_id => $entity_type) {
       $form['entity_type'][$entity_type_id]['enable'] = [
         '#type' => 'checkbox',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/entity_activity/src/Form/LogSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/entity_activity/src/Form/GeneratorForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Form;

+use Drupal\entity_activity\Entity\GeneratorInterface;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Drupal\Core\Extension\ThemeHandler;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\entity_activity\Plugin\LogGeneratorInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Extension\ThemeHandlerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The generator entity.
    *
-   * @var \Drupal\entity_activity\Entity\GeneratorInterface
+   * @var GeneratorInterface
    */
   protected $entity;

@@ @@
   /**
    * The log generator plugin manager.
    *
-   * @var \Drupal\entity_activity\Plugin\LogGeneratorManagerInterface
+   * @var LogGeneratorManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $language;

@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandler
+   * @var ThemeHandler
    */
   protected $themeHandler;

@@ @@
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * The plugin form manager.
    *
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;

@@ @@
   /**
    * GeneratorFormBase constructor.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\entity_activity\Plugin\LogGeneratorManagerInterface $log_generator_manager
+   * @param LogGeneratorManagerInterface $log_generator_manager
    *   The LogGeneratorManager for building the generators UI.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language
+   * @param LanguageManagerInterface $language
    *   The language manager.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\Plugin\PluginFormFactoryInterface $plugin_form_manager
+   * @param PluginFormFactoryInterface $plugin_form_manager
    *   The plugin form manager.
    */
   public function __construct(LoggerInterface $logger, LogGeneratorManagerInterface $log_generator_manager, ContextRepositoryInterface $context_repository, LanguageManagerInterface $language, ThemeHandlerInterface $theme_handler, PluginFormFactoryInterface $plugin_form_manager) {
@@ @@

     $form['#tree'] = TRUE;

-    /** @var \Drupal\entity_activity\Entity\GeneratorInterface $entity */
+    /** @var GeneratorInterface $entity */
     $entity = $this->entity;

     $form['label'] = [
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    *   The form array with the generators UI added in.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function buildLogGeneratorsInterface(array $form, FormStateInterface $form_state) {
     $form['generators_tabs'] = [
@@ @@
     foreach ($log_generators_definitions as $log_generator_id => $definition) {

       $log_generator_config = isset($log_generators[$log_generator_id]) ? $log_generators[$log_generator_id] : [];
-      /** @var \Drupal\entity_activity\Plugin\LogGeneratorInterface $log_generator */
+      /** @var LogGeneratorInterface $log_generator */
       $log_generator = $this->manager->createInstance($log_generator_id, $log_generator_config);
       $form_state->set(['generators', $log_generator_id], $log_generator);
       $log_generator_form = $log_generator->buildConfigurationForm([], $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/entity_activity/src/Form/GeneratorEnableForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Form;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->entity;
     $entity->enable()->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/entity_activity/src/Form/GeneratorDuplicateForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Form;

+use Drupal\entity_activity\Entity\GeneratorInterface;
 use Drupal\Core\Form\FormStateInterface;

 /**
@@ @@
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\entity_activity\Entity\GeneratorInterface $entity */
+    /** @var GeneratorInterface $entity */
     $entity = $this->entity->createDuplicate();
     $entity->set('label', $this->t('Duplicate of @label', ['@label' => $this->entity->label()]));
     $this->entity = $entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/entity_activity/src/Form/GeneratorDisableForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Form;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->entity;
     $entity->disable()->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/entity_activity/src/EventSubscriber/EntityActivitySubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\EventSubscriber;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\entity_activity\Plugin\LogGeneratorInterface;
 use Drupal\Core\Queue\QueueFactory;
 use Drupal\entity_activity\EntityActivityManagerInterface;
 use Drupal\entity_activity\Event\EntityActivityEvent;
@@ @@
   /**
    * The entity activity manager.
    *
-   * @var \Drupal\entity_activity\EntityActivityManagerInterface
+   * @var EntityActivityManagerInterface
    */
   protected $entityActivityManager;

@@ @@
   /**
    * Queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * Constructs a new EntityActivitySubscriber object.
    *
-   * @param \Drupal\entity_activity\EntityActivityManagerInterface $entity_activity_manager
+   * @param EntityActivityManagerInterface $entity_activity_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
    */
   public function __construct(EntityActivityManagerInterface $entity_activity_manager, QueueFactory $queue_factory) {
@@ @@
   /**
    * Generate logs for the insert operation.
    *
-   * @param \Drupal\entity_activity\Event\EntityActivityEvent $event
+   * @param EntityActivityEvent $event
    *   The entity activity event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function insertGenerateLog(EntityActivityEvent $event) {
     $this->generateLog($event, 'insert');
@@ @@
   /**
    * Generate logs for the update operation.
    *
-   * @param \Drupal\entity_activity\Event\EntityActivityEvent $event
+   * @param EntityActivityEvent $event
    *   The entity activity event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function updateGenerateLog(EntityActivityEvent $event) {
     $this->generateLog($event, 'update');
@@ @@
   /**
    * Generate logs for the delete operation.
    *
-   * @param \Drupal\entity_activity\Event\EntityActivityEvent $event
+   * @param EntityActivityEvent $event
    *   The entity activity event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function deleteGenerateLog(EntityActivityEvent $event) {
     $this->generateLog($event, 'delete');
@@ @@
   /**
    * Generate logs for a given operation.
    *
-   * @param \Drupal\entity_activity\Event\EntityActivityEvent $event
+   * @param EntityActivityEvent $event
    *   The entity activity event.
    * @param string $operation
    *   The operation.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function generateLog(EntityActivityEvent $event, $operation) {
     if (!$event->isProcessed()) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $entity = $event->getEntity();
       $langcode = NULL;
       if ($language = $entity->language()) {
@@ @@
       }
       $entity_type_id = $entity->getEntityTypeId();
       $log_generators_per_config = $this->entityActivityManager->getLogGenerators($entity_type_id, $langcode);
-      /** @var \Drupal\entity_activity\Plugin\LogGeneratorInterface $log_generator */
+      /** @var LogGeneratorInterface $log_generator */
       foreach ($log_generators_per_config as $generator_id => $log_generators) {
         foreach ($log_generators as $plugin_id => $log_generator) {
           if ($log_generator->isEnabled() && $log_generator->getOperation() == $operation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


34) modules/contrib/entity_activity/src/Event/SubscriptionEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\entity_activity\Entity\SubscriptionInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the log event.
@@ @@
   /**
    * The subscription.
    *
-   * @var \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @var SubscriptionInterface
    */
   protected $subscription;

@@ @@
   /**
    * Constructs a new SubscriptionEvent.
    *
-   * @param \Drupal\entity_activity\Entity\SubscriptionInterface $subscription
+   * @param SubscriptionInterface $subscription
    *   The subscription entity.
    */
   public function __construct(SubscriptionInterface $subscription) {
@@ @@
   /**
    * Gets the subscription.
    *
-   * @return \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @return SubscriptionInterface
    *   Gets the subscription.
    */
   public function getSubscription() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/entity_activity/src/Event/LogEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\entity_activity\Entity\LogInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the log event.
@@ @@
   /**
    * The log.
    *
-   * @var \Drupal\entity_activity\Entity\LogInterface
+   * @var LogInterface
    */
   protected $log;

@@ @@
   /**
    * Constructs a new LogEvent.
    *
-   * @param \Drupal\entity_activity\Entity\LogInterface $log
+   * @param LogInterface $log
    *   The log entity.
    */
   public function __construct(LogInterface $log) {
@@ @@
   /**
    * Gets the log.
    *
-   * @return \Drupal\entity_activity\Entity\LogInterface
+   * @return LogInterface
    *   Gets the log.
    */
   public function getLog() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/entity_activity/src/Event/EntityActivitySupportEntityTypeEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Defines the log event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/entity_activity/src/Event/EntityActivityEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the log event.
@@ @@
   /**
    * The content entity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;

@@ @@
   /**
    * Constructs a new EntityActivityEvent.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param bool $processed
    *   The tracker to know if the event has been processed.
@@ @@
   /**
    * Gets the entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   Gets the entity.
    */
   public function getEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/entity_activity/src/EntityActivityManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity;

+use Drupal\entity_activity\Plugin\LogGeneratorInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\user\UserInterface;

@@ @@
    *
    * @param string $event_name
    *   The event name.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    */
   public function dispatch($event_name, ContentEntityInterface $entity);
@@ @@
    * @param string $langcode
    *   The optional langcode.
    *
-   * @return \Drupal\entity_activity\Plugin\LogGeneratorInterface[][]
+   * @return LogGeneratorInterface[][]
    *   An array keyed by the config entity id with as value an array of
    *   LogGenerator plugin instance keyed by their plugin_id.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getLogGenerators($entity_type_id, $langcode = NULL);

@@ @@
   /**
    * Delete subscriptions done on an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    */
   public function deleteSubscriptions(ContentEntityInterface $entity);
@@ @@
   /**
    * Delete the user subscriptions.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user entity.
    */
   public function deleteUserSubscriptions(UserInterface $user);
@@ @@
   /**
    * Delete the user logs.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user entity.
    */
   public function deleteUserLogs(UserInterface $user);
@@ @@
   /**
    * Get the entity's langcode or the default langcode as fallback.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    *
    * @return string
@@ @@
   /**
    * Invalidate cache tags given an content entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    */
   public function invalidateCache(ContentEntityInterface $entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


39) modules/contrib/entity_activity/src/EntityActivityManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity;

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Core\Routing\CurrentRouteMatch;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\entity_activity\Entity\GeneratorInterface;
 use Drupal\Component\Datetime\Time;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Cache\Cache;
@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The current route match service.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The log generator manager.
    *
-   * @var \Drupal\entity_activity\Plugin\LogGeneratorManagerInterface
+   * @var LogGeneratorManagerInterface
    */
   protected $logManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The subscription storage.
    *
-   * @var \Drupal\entity_activity\SubscriptionStorageInterface
+   * @var SubscriptionStorageInterface
    */
   protected $subscriptionStorage;

@@ @@
   /**
    * The log storage.
    *
-   * @var \Drupal\entity_activity\LogStorageInterface
+   * @var LogStorageInterface
    */
   protected $logStorage;

@@ @@
   /**
    * EntityActivityManager constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    * @param |Drupal\entity_activity\Plugin\LogGeneratorManagerInterface $manager
    *   The log generator manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Queue\QueueFactory $queue
+   * @param QueueFactory $queue
    *   The queue factory.
-   * @param \Drupal\Component\Datetime\Time $time
+   * @param Time $time
    *   The time service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EntityRepositoryInterface $entity_repository, LanguageManagerInterface $language_manager, EntityFieldManagerInterface $entity_field_manager, LogGeneratorManagerInterface $manager, AccountProxyInterface $current_user, EntityTypeBundleInfoInterface $entity_type_bundle_info, EventDispatcherInterface $event_dispatcher, QueueFactory $queue, Time $time, StateInterface $state) {
     $this->configFactory = $config_factory;
@@ @@
    * {@inheritdoc}
    */
   public function getSupportedContentEntityTypes($return_object = FALSE) {
-    /** @var \Drupal\Core\Entity\ContentEntityTypeInterface[] $entity_types */
+    /** @var ContentEntityTypeInterface[] $entity_types */
     $entity_types = $this->entityTypeManager->getDefinitions();
     foreach ($entity_types as $entity_type_id => $entity_type) {
       if (!$entity_type instanceof ContentEntityTypeInterface) {
@@ @@
         // subscriptions to these entities which can not have a "subscribe on"
         // button.
         $support_entity_type = new EntityActivitySupportEntityTypeEvent($entity_type_id);
-        $this->eventDispatcher->dispatch(EntityActivityEvents::ENTITY_ACTIVITY_SUPPORT_ENTITY_TYPE, $support_entity_type);
+        $this->eventDispatcher->dispatch($support_entity_type, EntityActivityEvents::ENTITY_ACTIVITY_SUPPORT_ENTITY_TYPE);
         if ($support_entity_type->isSupported()) {
           continue;
         }
@@ @@
     $is_enabled = in_array($entity->getEntityTypeId(), $entity_type_enabled);
     if ($is_enabled) {
       $event = new EntityActivityEvent($entity);
-      $this->eventDispatcher->dispatch($event_name, $event);
+      $this->eventDispatcher->dispatch($event, $event_name);
     }
   }

@@ @@
   public function getLogGenerators($entity_type_id, $langcode = NULL) {
     $log_generator_instances = [];
     $generators = $this->entityTypeManager->getStorage('entity_activity_generator')->loadMultiple();
-    /** @var \Drupal\entity_activity\Entity\GeneratorInterface $generator */
+    /** @var GeneratorInterface $generator */
     foreach ($generators as $generator) {
       $generator = $this->entityRepository->getTranslationFromContext($generator, $langcode);
       if (!$generator->status()) {
@@ @@
         // Let's go !
         $max = $config['limit']['max'];
         $users = $this->entityTypeManager->getStorage('user')->loadMultiple();
-        /** @var \Drupal\user\UserInterface $user */
+        /** @var UserInterface $user */
         foreach ($users as $user) {
           $data = [];
           $query = $this->logStorage->getQuery()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


40) modules/contrib/entity_activity/src/EntityActivityContentEntityStorage.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a new EntityActivityContentEntityStorage object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection to be used.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend to be used.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EntityTypeInterface $entity_type, Connection $database, EntityFieldManagerInterface $entity_field_manager, CacheBackendInterface $cache, LanguageManagerInterface $language_manager, MemoryCacheInterface $memory_cache, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher) {
@@ @@

     $event_class = $this->entityType->getHandlerClass('event');
     if ($event_class) {
-      $this->eventDispatcher->dispatch($this->getEventName($hook), new $event_class($entity));
+      $this->eventDispatcher->dispatch(new $event_class($entity), $this->getEventName($hook));
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/entity_activity/src/Entity/SubscriptionInterface.php:79

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the source entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The source entity.
    */
   public function getSourceEntity();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


42) modules/contrib/entity_activity/src/Entity/LogInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Entity;

+use Drupal\entity_activity\Plugin\LogGeneratorInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\user\EntityOwnerInterface;
 use Drupal\user\UserInterface;
@@ @@
   /**
    * Returns the entity subscription.
    *
-   * @return \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @return SubscriptionInterface
    *   The subscription entity.
    */
   public function getSubscription();
@@ @@
   /**
    * Sets the entity subscription.
    *
-   * @param \Drupal\entity_activity\Entity\SubscriptionInterface $subscription
+   * @param SubscriptionInterface $subscription
    *   The subscription entity.
    *
    * @return $this
@@ @@
   /**
    * Gets the log generator.
    *
-   * @return \Drupal\entity_activity\Plugin\LogGeneratorInterface
+   * @return LogGeneratorInterface
    *   The log generator.
    */
   public function getLogGenerator();
@@ @@
   /**
    * Gets the source entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The source entity.
    */
   public function getSourceEntity();
@@ @@
   /**
    * Gets the reference source entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The reference source entity.
    */
   public function getReferenceSourceEntity();
@@ @@
   /**
    * Returns the entity current user's user entity.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The current user entity.
    */
   public function getCurrentUser();
@@ @@
   /**
    * Sets the entity current user's user entity.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The current user entity.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


43) modules/contrib/entity_activity/src/Entity/GeneratorInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Entity;

+use Drupal\entity_activity\Plugin\LogGeneratorInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\entity_activity\Plugin\LogGeneratorPluginCollection;

@@ @@
   /**
    * Gets log generators for this entity.
    *
-   * @return \Drupal\entity_activity\Plugin\LogGeneratorInterface[]|\Drupal\entity_activity\Plugin\LogGeneratorPluginCollection
+   * @return LogGeneratorInterface[]|LogGeneratorPluginCollection
    *   An array or collection of configured log generators plugins.
    */
   public function getLogGeneratorsCollection();
@@ @@
   /**
    * Set new log generators on the entity.
    *
-   * @param \Drupal\entity_activity\Plugin\LogGeneratorPluginCollection $log_generators
+   * @param LogGeneratorPluginCollection $log_generators
    *   Log generators to set.
    */
   public function setLogGeneratorsCollection(LogGeneratorPluginCollection $log_generators);
@@ @@
    * @param string $instance_id
    *   The log generator plugin instance ID.
    *
-   * @return \Drupal\entity_activity\Plugin\LogGeneratorInterface
+   * @return LogGeneratorInterface
    *   A log generator plugin.
    */
   public function getLogGeneratorsInstance($instance_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


44) modules/contrib/entity_activity/src/Entity/Generator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Entity;

+use Drupal\entity_activity\Plugin\LogGeneratorManager;
+use Drupal\Core\Executable\ExecutableManagerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
 use Drupal\entity_activity\Plugin\LogGeneratorPluginCollection;
@@ @@
   /**
    * The log generators collection.
    *
-   * @var \Drupal\entity_activity\Plugin\LogGeneratorPluginCollection
+   * @var LogGeneratorPluginCollection
    */
   protected $logGeneratorsCollection;

@@ @@
   /**
    * The log generator plugin manager.
    *
-   * @var \Drupal\entity_activity\Plugin\LogGeneratorManager
+   * @var LogGeneratorManager
    */
   protected $logGeneratorManager;

@@ @@
   /**
    * Gets the log generator plugin manager.
    *
-   * @return \Drupal\Core\Executable\ExecutableManagerInterface
+   * @return ExecutableManagerInterface
    *   The log generator plugin manager.
    */
   protected function logGeneratorPluginManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/entity_activity/src/Controller/SubscriptionController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Controller;

+use Symfony\Component\HttpFoundation\JsonResponse;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\entity_activity\SubscriptionStorageInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\entity_activity\Entity\SubscriptionInterface;
 use Symfony\Component\HttpFoundation\Request;
@@ @@
   /**
    * Check if an entity has a subscription for the current user.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The Json response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function haveSubscription(Request $request) {
     $data = $this->getPostData($request);
@@ @@
   /**
    * Create or delete a subscription for an entity and the current user.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function addRemove(Request $request) {
     $data = $this->getPostData($request);
@@ @@

     $subscriptions = $this->subscriptionStorage()->loadMultipleByEntityAndOwner($entity, $this->currentUser, $data['langcode']);
     if ($subscriptions) {
-      /** @var \Drupal\entity_activity\Entity\SubscriptionInterface $subscription */
+      /** @var SubscriptionInterface $subscription */
       $subscription = reset($subscriptions);
       if ($this->isAdmin($subscription) || $this->isOwner($subscription)) {
         $subscription->delete();
@@ @@
   /**
    * Remove a subscription with the subscription ID given.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function remove(Request $request) {
     $data = $this->getPostData($request);
@@ @@
   /**
    * Check if a subscription is enable.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    */
   public function status(Request $request) {
@@ @@
   /**
    * Enable or disable a subscription.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    */
   public function enableDisable(Request $request) {
@@ @@
   /**
    * Get the subscription storage.
    *
-   * @return \Drupal\entity_activity\SubscriptionStorageInterface
+   * @return SubscriptionStorageInterface
    *   The subscription storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function subscriptionStorage() {
     return $this->entityTypeManager->getStorage('entity_activity_subscription');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/entity_activity/src/Controller/LogController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Controller;

+use Symfony\Component\HttpFoundation\JsonResponse;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\entity_activity\LogStorageInterface;
 use Drupal\Core\Site\Settings;
 use Drupal\entity_activity\Entity\LogInterface;
 use Drupal\user\UserInterface;
@@ @@
   /**
    * Delete a Log entity.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function remove(Request $request) {
     $data = $this->getPostData($request);
@@ @@
   /**
    * Switch the read /unread status of a log.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function readUnread(Request $request) {
     $data = $this->getPostData($request);
@@ @@
   /**
    * Mark as read all the logs for a user.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function readAll(Request $request) {
     $data = $this->getPostData($request);
@@ @@
   /**
    * Get the total unread for a user.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getTotalUnread(Request $request) {
     $data = $this->getPostData($request);
@@ @@
   /**
    * Get the log storage.
    *
-   * @return \Drupal\entity_activity\LogStorageInterface
+   * @return LogStorageInterface
    *   The log storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function logStorage() {
     return $this->entityTypeManager->getStorage('entity_activity_log');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/entity_activity/src/Controller/ListSubscribersController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Controller;

+use Drupal\entity_activity\SubscriptionStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Drupal\Core\Routing\RouteMatchInterface definition.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The subscription storage.
    *
-   * @var \Drupal\entity_activity\SubscriptionStorageInterface
+   * @var SubscriptionStorageInterface
    */
   protected $storageSubscription;

@@ @@
   /**
    * ListSubscribersController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeManagerInterface $entity_type_manager, RouteMatchInterface $route_match) {
     $this->entityRepository = $entity_repository;
@@ @@
   /**
    * Get the current entity from the route.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    */
   protected function getCurrentEntity() {
     $entity = NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/entity_activity/src/Controller/EntityActivityBaseController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Controller;

+use Drupal\Core\Render\Renderer;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Entity\EntityRepositoryInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Drupal\Core\Session\AccountProxyInterface definition.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Drupal\entity_activity\EntityActivityManagerInterface.
    *
-   * @var \Drupal\entity_activity\EntityActivityManagerInterface
+   * @var EntityActivityManagerInterface
    */
   protected $entityActivityManager;

@@ @@
   /**
    * Symfony\Component\HttpFoundation\RequestStack definition.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Drupal\Core\Render\Renderer definition.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * Drupal\Component\Datetime\TimeInterface definition.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Drupal\Core\Language\LanguageManagerInterface definition.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * EntityActivityBaseController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\entity_activity\EntityActivityManagerInterface $entity_activity_manager
+   * @param EntityActivityManagerInterface $entity_activity_manager
    *   The entity activity manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityRepositoryInterface $entity_repository, AccountProxyInterface $current_user, EntityActivityManagerInterface $entity_activity_manager, RequestStack $request_stack, RendererInterface $renderer, TimeInterface $time, LanguageManagerInterface $language_manager) {
@@ @@
    * @param array $data
    *   The data pass to the endpoint.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The default Json response.
    */
   protected function notValidRequest(array $data) {
@@ @@
    * @param array $data
    *   The data pass to the endpoint.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The default Json response.
    */
   protected function defaultResponse(array $data) {
@@ @@
    * @param array $data
    *   The data pass to the endpoint.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The access denied Json response.
    */
   protected function accessDeniedResponse(array $data) {
@@ @@
   /**
    * Fetch POST data from the request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return array
@@ @@
    * @param int $entity_id
    *   The entity id.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The entity or NULL.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getEntity($entity_type, $entity_id) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->entityTypeManager->getStorage($entity_type)->load($entity_id);
     return $entity;
   }
@@ @@
   /**
    * Check if an account is the owner of an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to check.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The account.
    *
    * @return bool
@@ @@
   /**
    * Check if an account has the admin permission on an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to check.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The account.
    *
    * @return bool
@@ @@
    * @param array $result
    *   Additionnal data to send.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   - status (array)
    *     - code (int : HTTP Code 200, 403, etc)
    *     - message (string : the reason)
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/entity_activity/src/Annotation/LogGenerator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The plugin description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


50) modules/contrib/entity_activity/src/Access/UserViewsAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Access;

+use Drupal\Core\Access\AccessResultAllowed;
+use Drupal\Core\Access\AccessResultForbidden;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\user\UserInterface;
@@ @@
   /**
    * Checks access on view user_logs.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route object.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\user\UserInterface|null $user
+   * @param UserInterface|null $user
    *   The user related logs.
    *
-   * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultForbidden
+   * @return AccessResultAllowed|AccessResultForbidden
    *   The access result.
    */
   public function accessLogs(Route $route, RouteMatchInterface $route_match, AccountInterface $account, UserInterface $user = NULL) {
@@ @@
   /**
    * Checks access on view user_subscriptions.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route object.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\user\UserInterface|null $user
+   * @param UserInterface|null $user
    *   The user related subscriptions.
    *
-   * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultForbidden
+   * @return AccessResultAllowed|AccessResultForbidden
    *   The access result.
    */
   public function accessSubscriptions(Route $route, RouteMatchInterface $route_match, AccountInterface $account, UserInterface $user = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


51) modules/contrib/entity_activity/src/Access/SubscriptionAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new SubscriptionAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    *
    * More advanced access checks are done by the API itself.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


52) modules/contrib/entity_activity/src/Access/LogAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new SubscriptionAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    *
    * More advanced access checks are done by the API itself.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


53) modules/contrib/entity_activity/src/Access/ListSubscribersAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
   /**
    * Drupal\Core\Routing\RouteMatchInterface definition.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Constructs a ListSubscribersAccess object.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    */
   public function __construct(RouteMatchInterface $route_match) {
@@ @@
   /**
    * Checks access to the entity operation on the given route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The node on which check access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account, EntityInterface $entity = NULL) {
@@ @@
   /**
    * Get the current entity from the route.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    */
   protected function getCurrentEntity() {
     $entity = NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


54) modules/contrib/entity_activity/modules/entity_activity_mass_subscribe/src/Routing/MassSubscribeRoutes.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity_mass_subscribe\Routing;

+use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal\entity_activity\EntityActivityManagerInterface definition.
    *
-   * @var \Drupal\entity_activity\EntityActivityManagerInterface
+   * @var EntityActivityManagerInterface
    */
   protected $entityActivityManager;

@@ @@
   /**
    * An array of ContentEntityType supported by entity_activity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityTypeInterface[]
+   * @var ContentEntityTypeInterface[]
    */
   protected $supportedContentEntityTypes;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\entity_activity\EntityActivityManagerInterface $entity_activity_manager
+   * @param EntityActivityManagerInterface $entity_activity_manager
    *   The entity activity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, ConfigFactoryInterface $config_factory, EntityActivityManagerInterface $entity_activity_manager) {
@@ @@
   /**
    * Gets the mass subscribe route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getMassSubscribeRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the type of the ID key for a given entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   An entity type.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


55) modules/contrib/entity_activity/modules/entity_activity_mass_subscribe/src/Plugin/Derivative/MassSubscribeLocalTasks.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity activity manager service.
    *
-   * @var \Drupal\entity_activity\EntityActivityManagerInterface
+   * @var EntityActivityManagerInterface
    */
   protected $entityActivityManager;

@@ @@
   /**
    * Drupal\Core\Routing\RouteMatchInterface definition.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
    *
    * @param string $base_plugin_id
    *   The base plugin id.
-   * @param \Drupal\entity_activity\EntityActivityManagerInterface $entity_activity_manager
+   * @param EntityActivityManagerInterface $entity_activity_manager
    *   The entity activity manager service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    */
   public function __construct($base_plugin_id, EntityActivityManagerInterface $entity_activity_manager, RouteMatchInterface $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


56) modules/contrib/entity_activity/modules/entity_activity_mass_subscribe/src/MassSubscribeBatch.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity_mass_subscribe;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\user\UserStorageInterface;
+use Drupal\entity_activity\SubscriptionStorageInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\StringTranslation\PluralTranslatableMarkup;
@@ @@
    *
    * @param array $user_ids
    *   An array of user ID.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
    * @param bool $unsubscribe
    *   Bool which indicate if we must unsubscribe users.
@@ @@
    * @param array $context
    *   The batch context.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function subscribe(array $user_ids, ContentEntityInterface $entity, AccountInterface $account, $unsubscribe, array &$context) {
-    /** @var \Drupal\user\UserStorageInterface $userStorage */
+    /** @var UserStorageInterface $userStorage */
     $userStorage = self::entityTypeManager()->getStorage('user');
-    /** @var \Drupal\entity_activity\SubscriptionStorageInterface $subscriptionStorage */
+    /** @var SubscriptionStorageInterface $subscriptionStorage */
     $subscriptionStorage = self::entityTypeManager()->getStorage('entity_activity_subscription');

     if (empty($context['results'])) {
@@ @@
   /**
    * Get the entity type manager service.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity manager service.
    */
   public static function entityTypeManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


57) modules/contrib/entity_activity/modules/entity_activity_mass_subscribe/src/Form/MassSubscribeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity_mass_subscribe\Form;

+use Drupal\entity_activity\SubscriptionStorageInterface;
+use Drupal\user\UserStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Database\Database;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Drupal\Core\Routing\RouteMatchInterface definition.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The subscription storage.
    *
-   * @var \Drupal\entity_activity\SubscriptionStorageInterface
+   * @var SubscriptionStorageInterface
    */
   protected $storageSubscription;

@@ @@
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $storageUser;

@@ @@
   /**
    * ListSubscribersController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeManagerInterface $entity_type_manager, RouteMatchInterface $route_match) {
     $this->entityRepository = $entity_repository;
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param string|array $property
    *   The property to check.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param mixed $default
    *   The default value returned if property not found.
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The current entity.
    *
    * @return array
@@ @@

     $results = $query->execute();

-    /** @var \Drupal\user\UserInterface[] $users */
+    /** @var UserInterface[] $users */
     $users = $this->storageUser->loadMultiple($results);

     $element['filters'] = [
@@ @@
   /**
    * Get the table select options.
    *
-   * @param \Drupal\user\UserInterface[] $users
+   * @param UserInterface[] $users
    *   An array of users object.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The current entity against check if a subscription exists.
    *
    * @return array
@@ @@
    */
   protected function getOptions(array $users, ContentEntityInterface $entity) {
     $options = [];
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     foreach ($users as $id => $user) {
       $options[$id]['name'] = $user->getDisplayName();
       $options[$id]['role'] = implode(', ', $this->getUserRoles($user));
@@ @@
   /**
    * Get the user roles.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The given user entity.
    *
    * @return array
@@ @@
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
     $values = $form_state->cleanValues()->getValues();
-    /** @var \Drupal\Core\Session\AccountInterface $account */
+    /** @var AccountInterface $account */
     $account = $values['account'];
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $values['entity'];
     // The mass subscribe global permissions can be removed to a user. So we
     // check again if the current user has yet one the the permission.
@@ @@
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $values = $form_state->cleanValues()->getValues();
     $method = !empty($values['method']) ? $values['method'] : '';
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $values['entity'];
-    /** @var \Drupal\Core\Session\AccountInterface $account */
+    /** @var AccountInterface $account */
     $account = $values['account'];
     $unsubscribe = !empty($values['unsubscribe']);
     // A last check about the unsubscribe feature. Certainly a bit too much.
@@ @@
   /**
    * The _title_callback for the mass subscribe form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
    *
    * @return string
@@ @@
   /**
    * Get the entity type label given an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity object.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   The entity type label.
    */
   protected function getEntityTypeLabel(ContentEntityInterface $entity) {
@@ @@
    */
   protected function getRoles($exclude_authenticated = FALSE) {
     $roles = [];
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     foreach (Role::loadMultiple() as $role) {
       if ($role->id() === RoleInterface::ANONYMOUS_ID) {
         continue;
@@ @@
   /**
    * Get methods available given a user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user performing the action.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The related entity to the mass subscribe action..
    *
    * @return array
@@ @@
   /**
    * Check global permissions.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account object.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity object.
    *
    * @return bool
@@ @@
   /**
    * Get the current entity from the route.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The current entity found in the route or NULL.
    */
   protected function getCurrentEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


58) modules/contrib/entity_activity/modules/entity_activity_mass_subscribe/src/Access/MassSubscribeAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity_mass_subscribe\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * Checks access to the entity operation on the given route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The node on which check access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account, EntityInterface $entity = NULL) {
@@ @@
   /**
    * Get the current entity from the route.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The current entity found on the route.
    */
   protected function getCurrentEntity(RouteMatchInterface $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


59) modules/contrib/entity_activity/modules/entity_activity_mail/tests/src/Functional/EntityActivityMailBrowserTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_activity_mail\Functional;

+use Drupal\entity_activity\Entity\SubscriptionInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Test\AssertMailTrait;
 use Drupal\entity_activity_mail\ReportServiceInterface;
@@ @@
   /**
    * A subscription.
    *
-   * @var \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @var SubscriptionInterface
    */
   protected $subscription1;

@@ @@
   /**
    * A subscription.
    *
-   * @var \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @var SubscriptionInterface
    */
   protected $subscription2;

@@ @@
   /**
    * A subscription.
    *
-   * @var \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @var SubscriptionInterface
    */
   protected $subscription3;

@@ @@
   /**
    * The report service.
    *
-   * @var \Drupal\entity_activity_mail\ReportServiceInterface
+   * @var ReportServiceInterface
    */
   protected $reportService;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->reportService = $this->container->get('entity_activity_mail.report');
     // User 1 has a subscription on User 2 and on Term 1.
@@ @@
     $new_article->save();

     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(1, count($logs));
+    $this->assertEquals(1, count($logs));
     $emails = $this->getMails();
     $this->assertCount(1, $emails);
     $email = end($emails);
@@ @@
     $new_article->save();

     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(2, count($logs));
+    $this->assertEquals(2, count($logs));
     $emails = $this->getMails();
     // No new email has been sent yet.
     $this->assertCount(1, $emails);
@@ @@
     $this->drupalLogout();

     $logs1 = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(2, count($logs1));
+    $this->assertEquals(2, count($logs1));
     $logs1_unsent = $this->reportService->getUnsentLogsPerUserId($this->user1->id());
     $this->assertCount(2, $logs1_unsent);

     $logs2 = $this->logStorage->loadMultipleByOwner($this->user2);
-    $this->assertEqual(2, count($logs2));
+    $this->assertEquals(2, count($logs2));
     $logs2_unsent = $this->reportService->getUnsentLogsPerUserId($this->user2->id());
     $this->assertCount(2, $logs2_unsent);

@@ @@
     $this->drupalLogout();

     $logs1 = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(2, count($logs1));
+    $this->assertEquals(2, count($logs1));
     $logs1_unsent = $this->reportService->getUnsentLogsPerUserId($this->user1->id());
     $this->assertCount(2, $logs1_unsent);

     $logs2 = $this->logStorage->loadMultipleByOwner($this->user2);
-    $this->assertEqual(2, count($logs2));
+    $this->assertEquals(2, count($logs2));
     $logs2_unsent = $this->reportService->getUnsentLogsPerUserId($this->user2->id());
     $this->assertCount(2, $logs2_unsent);

@@ @@
     $logs1 = $this->logStorage->loadMultipleByOwner($this->user1);
     $this->assertCount(2, $logs1);
     $logs1_unread = $this->logStorage->totalUnreadByOwner($this->user1);
-    $this->assertEqual(2, $logs1_unread);
+    $this->assertEquals(2, $logs1_unread);

     $logs2 = $this->logStorage->loadMultipleByOwner($this->user2);
     $this->assertCount(2, $logs2);
     $logs2_unread = $this->logStorage->totalUnreadByOwner($this->user2);
-    $this->assertEqual(2, $logs2_unread);
+    $this->assertEquals(2, $logs2_unread);

     $emails = $this->getMails();
     $this->assertCount(0, $emails);
@@ @@
     $this->assertCount(2, $emails);

     $logs1_unread = $this->logStorage->totalUnreadByOwner($this->user1);
-    $this->assertEqual(0, $logs1_unread);
+    $this->assertEquals(0, $logs1_unread);

     $logs2_unread = $this->logStorage->totalUnreadByOwner($this->user2);
-    $this->assertEqual(0, $logs2_unread);
+    $this->assertEquals(0, $logs2_unread);

   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


60) modules/contrib/entity_activity/modules/entity_activity_mail/src/ReportServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity_mail;

+use Drupal\entity_activity\Entity\LogInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\user\UserInterface;

@@ @@
    *
    * @param string $frequency
    *   The frequency, i.e. daily, weekly, monthly.
-   * @param \Drupal\Core\Datetime\DrupalDateTime $date
+   * @param DrupalDateTime $date
    *   The date (generally the current date).
    *
    * @return array
@@ @@
    *
    * @param string $frequency
    *   The frequency, i.e. daily, weekly, monthly.
-   * @param \Drupal\Core\Datetime\DrupalDateTime $date
+   * @param DrupalDateTime $date
    *   The date (generally the current date).
    *
    * @return int
@@ @@
   /**
    * Send a logs report to a user.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user whom logs are related.
-   * @param \Drupal\entity_activity\Entity\LogInterface[] $logs
+   * @param LogInterface[] $logs
    *   An array of logs entities.
    * @param array $logs_content
    *   An array of renderable array of log entity for the view mode ID 'mail'.
@@ @@
    *
    * @param string $string
    *   The string on which replace tokens.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The related user entity.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


61) modules/contrib/entity_activity/modules/entity_activity_mail/src/ReportService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity_mail;

+use drupal\entity_activity_mail\MailHandlerInterface;
+use Drupal\user\UserStorageInterface;
+use Drupal\entity_activity\LogStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\EmailValidatorInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Component\Utility\EmailValidatorInterface definition.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;

@@ @@
   /**
    * Queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The mail handler service.
    *
-   * @var \drupal\entity_activity_mail\MailHandlerInterface
+   * @var MailHandlerInterface
    */
   protected $mailHandler;

@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Drupal\Core\State\StateInterface definition.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Drupal\user\UserStorageInterface definition.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * Drupal\entity_activity\LogStorageInterface definition.
    *
-   * @var \Drupal\entity_activity\LogStorageInterface
+   * @var LogStorageInterface
    */
   protected $logStorage;

@@ @@
   /**
    * CollectService constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator service.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
    * @param \Drupal\entity_activity_mail\MailHandlerInterface $mail_handler
    *   The mail handler service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EmailValidatorInterface $email_validator, QueueFactory $queue_factory, MailHandlerInterface $mail_handler, Token $token, LanguageManagerInterface $language_manager, StateInterface $state) {
     $this->configFactory = $config_factory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


62) modules/contrib/entity_activity/modules/entity_activity_mail/src/Plugin/QueueWorker/ReportWorker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity_mail\Plugin\QueueWorker;

+use Drupal\user\UserStorageInterface;
+use Drupal\entity_activity\LogStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\entity_activity\Entity\LogInterface;
 use Drupal\Component\Utility\EmailValidatorInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal\Component\Utility\EmailValidatorInterface definition.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;

@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * The report service.
    *
-   * @var \Drupal\entity_activity_mail\ReportServiceInterface
+   * @var ReportServiceInterface
    */
   protected $report;

@@ @@
   /**
    * Drupal\Core\Logger\LoggerChannelFactoryInterface definition.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * Drupal\user\UserStorageInterface definition.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * Drupal\entity_activity\LogStorageInterface definition.
    *
-   * @var \Drupal\entity_activity\LogStorageInterface
+   * @var LogStorageInterface
    */
   protected $logStorage;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator service.
-   * @param \Drupal\entity_activity_mail\MailHandlerInterface $mail_handler
+   * @param MailHandlerInterface $mail_handler
    *   The mail handler service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\entity_activity_mail\ReportServiceInterface $report
+   * @param ReportServiceInterface $report
    *   The report service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, EmailValidatorInterface $email_validator, MailHandlerInterface $mail_handler, Token $token, ReportServiceInterface $report, LoggerChannelFactoryInterface $logger_factory) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
           // Should we mark as read logs sent ?
           $mark_read = $this->configFactory->get('entity_activity_mail.settings')->get('general.mark_read');
           // Mark all logs as sent.
-          /** @var \Drupal\entity_activity\Entity\LogInterface $log */
+          /** @var LogInterface $log */
           foreach ($logs as $log) {
             $log->set('sent', TRUE);
             if ($mark_read) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


63) modules/contrib/entity_activity/modules/entity_activity_mail/src/Plugin/QueueWorker/PrepareReportWorker.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager..
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The report service.
    *
-   * @var \Drupal\entity_activity_mail\ReportServiceInterface
+   * @var ReportServiceInterface
    */
   protected $report;

@@ @@
   /**
    * Queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\entity_activity_mail\ReportServiceInterface $report
+   * @param ReportServiceInterface $report
    *   The report service.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ReportServiceInterface $report, QueueFactory $queue_factory, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


64) modules/contrib/entity_activity/modules/entity_activity_mail/src/MailHandler.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The language default.
    *
-   * @var \Drupal\Core\Language\LanguageDefault
+   * @var LanguageDefault
    */
   protected $languageDefault;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;

@@ @@
   /**
    * Constructs a new MailHandler object.
    *
-   * @param \Drupal\Core\Language\LanguageDefault $language_default
+   * @param LanguageDefault $language_default
    *   The language default.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail manager.
    */
   public function __construct(LanguageDefault $language_default, LanguageManagerInterface $language_manager, MailManagerInterface $mail_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


65) modules/contrib/entity_activity/modules/entity_activity_mail/src/Form/SettingsForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\entity_activity_mail\ReportServiceInterface definition.
    *
-   * @var \Drupal\entity_activity_mail\ReportServiceInterface
+   * @var ReportServiceInterface
    */
   protected $report;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Component\Utility\EmailValidatorInterface definition.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;

@@ @@
   /**
    * Drupal\Core\Extension\ModuleHandlerInterface definition.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Drupal\Core\Entity\EntityFieldManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * SettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\entity_activity_mail\ReportServiceInterface $report
+   * @param ReportServiceInterface $report
    *   The log report service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ReportServiceInterface $report, EntityTypeManagerInterface $entity_type_manager, EmailValidatorInterface $email_validator, ModuleHandlerInterface $module_handler, EntityFieldManagerInterface $entity_field_manager) {
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $values = $form_state->getValues();
-    /** @var \Drupal\Core\Datetime\DrupalDateTime $date */
+    /** @var DrupalDateTime $date */
     $date = $values['general']['cron_time'];
     $time = $date->format('H:i:s');
     $values['general']['cron_time'] = $time;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


66) modules/contrib/entity_activity/modules/entity_activity_mail/src/EventSubscriber/LogReportSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The report service.
    *
-   * @var \Drupal\entity_activity_mail\ReportServiceInterface
+   * @var ReportServiceInterface
    */
   protected $report;

@@ @@
   /**
    * Constructs a new EntityActivitySubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\entity_activity_mail\ReportServiceInterface $report
+   * @param ReportServiceInterface $report
    *   The report service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ReportServiceInterface $report) {
@@ @@
   /**
    * Send a log report if owner has subscribed to this option.
    *
-   * @param \Drupal\entity_activity\Event\LogEvent $event
+   * @param LogEvent $event
    *   The entity activity log event.
    */
   public function sendLogReport(LogEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


67) modules/contrib/entity_activity/modules/entity_activity_mail/entity_activity_mail.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Render\RendererInterface;
 /**
  * @file
  * Contains entity_activity_mail.module.
@@ @@
  * Implements hook_cron().
  */
 function entity_activity_mail_cron() {
-  /** @var \Drupal\entity_activity_mail\ReportServiceInterface $reportService */
+  /** @var ReportServiceInterface $reportService */
   $reportService = \Drupal::service('entity_activity_mail.report');
   $request_time = \Drupal::time()->getCurrentTime();
   $time = $reportService->getCronTime();
@@ @@
  * Prepares emails sent by the MailHandler service.
  */
 function entity_activity_mail_mail($key, &$message, $params) {
-  /** @var \Drupal\Core\Render\RendererInterface $renderer */
+  /** @var RendererInterface $renderer */
   $renderer = \Drupal::service('renderer');

   if (isset($params['headers'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


68) modules/contrib/entity_activity/entity_activity.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\entity_activity\EntityActivityManagerInterface;
+use Drupal\views\Plugin\views\argument\ArgumentPluginBase;
 /**
  * @file
  * Contains entity_activity.module.
@@ @@
  */
 function entity_activity_entity_insert(EntityInterface $entity) {
   if ($entity instanceof ContentEntityInterface) {
-    /** @var \Drupal\entity_activity\EntityActivityManagerInterface $entityActivityManager */
+    /** @var EntityActivityManagerInterface $entityActivityManager */
     $entityActivityManager = \Drupal::service('entity_activity.manager');
     $entityActivityManager->dispatch(EntityActivityEvents::ENTITY_ACTIVITY_INSERT, $entity);
     $entityActivityManager->invalidateCache($entity);
@@ @@
  */
 function entity_activity_entity_update(EntityInterface $entity) {
   if ($entity instanceof ContentEntityInterface) {
-    /** @var \Drupal\entity_activity\EntityActivityManagerInterface $entityActivityManager */
+    /** @var EntityActivityManagerInterface $entityActivityManager */
     $entityActivityManager = \Drupal::service('entity_activity.manager');
     $entityActivityManager->dispatch(EntityActivityEvents::ENTITY_ACTIVITY_UPDATE, $entity);
   }
@@ @@
 function entity_activity_entity_delete(EntityInterface $entity) {
   if ($entity instanceof ContentEntityInterface) {
     if (!$entity instanceof SubscriptionInterface) {
-      /** @var \Drupal\entity_activity\EntityActivityManagerInterface $entityActivityManager */
+      /** @var EntityActivityManagerInterface $entityActivityManager */
       $entityActivityManager = \Drupal::service('entity_activity.manager');
       $entityActivityManager->dispatch(EntityActivityEvents::ENTITY_ACTIVITY_DELETE, $entity);
       $entityActivityManager->deleteSubscriptions($entity);
@@ @@
  */
 function entity_activity_user_delete(EntityInterface $entity) {
   if ($entity instanceof UserInterface) {
-    /** @var \Drupal\entity_activity\EntityActivityManagerInterface $entityActivityManager */
+    /** @var EntityActivityManagerInterface $entityActivityManager */
     $entityActivityManager = \Drupal::service('entity_activity.manager');
     $entityActivityManager->deleteUserSubscriptions($entity);
     $entityActivityManager->deleteUserLogs($entity);
@@ @@
  */
 function entity_activity_theme_suggestions_subscribe_on_alter(array &$suggestions, array $variables) {
   $view_mode = $variables['view_mode'];
-  /** @var \Drupal\Core\Entity\EntityInterface $entity */
+  /** @var EntityInterface $entity */
   $entity = $variables['entity'];
   $suggestions[] = 'subscribe_on__' . $view_mode;
   $suggestions[] = 'subscribe_on__' . $entity->getEntityTypeId();
@@ @@
  * Implements hook_entity_extra_field_info().
  */
 function entity_activity_entity_extra_field_info() {
-  /** @var \Drupal\entity_activity\EntityActivityManagerInterface $entityActivityManager */
+  /** @var EntityActivityManagerInterface $entityActivityManager */
   $entityActivityManager = \Drupal::service('entity_activity.manager');
   $entity_type_enabled = $entityActivityManager->getContentEntityTypesEnabled();
   $extra = [];
@@ @@
   if (!$entity instanceof ContentEntityInterface) {
     return;
   }
-  /** @var \Drupal\entity_activity\EntityActivityManagerInterface $entityActivityManager */
+  /** @var EntityActivityManagerInterface $entityActivityManager */
   $entityActivityManager = \Drupal::service('entity_activity.manager');
   $entity_types_enabled = $entityActivityManager->getContentEntityTypesEnabled();
   $account = \Drupal::currentUser();
@@ @@
  *   - attributes: HTML attributes for the containing element.
  */
 function template_preprocess_entity_activity_log(array &$variables) {
-  /** @var \Drupal\entity_activity\Entity\LogInterface $log */
+  /** @var LogInterface $log */
   $log = $variables['elements']['#entity_activity_log'];
   $variables['entity'] = $log;
   $variables['source_entity'] = $log->getSourceEntity();
@@ @@
  *   - attributes: HTML attributes for the containing element.
  */
 function template_preprocess_entity_activity_subscription(array &$variables) {
-  /** @var \Drupal\entity_activity\Entity\SubscriptionInterface $subscription */
+  /** @var SubscriptionInterface $subscription */
   $subscription = $variables['elements']['#entity_activity_subscription'];
   $variables['entity'] = $subscription;
   $variables['source_entity'] = $subscription->getSourceEntity();
@@ @@
  * Implements hook_preprocess_HOOK().
  */
 function entity_activity_preprocess_views_view(&$variables) {
-  /** @var \Drupal\views\ViewExecutable $view */
+  /** @var ViewExecutable $view */
   $view = $variables['view'];
   $view_id = $variables['id'];
   $view_display_id = $variables['display_id'];
@@ @@
     // We must ensure that the custom Log cache tag is always here.
     $uid = NULL;
     $arguments = $view->argument;
-    /** @var \Drupal\views\Plugin\views\argument\ArgumentPluginBase $argument */
+    /** @var ArgumentPluginBase $argument */
     foreach ($arguments as $plugin_id => $argument) {
       $real_Field = $argument->realField;
       $entity_type = $argument->getEntityType();
@@ @@
     // We must ensure that the custom subscription cache tag is always here.
     $uid = NULL;
     $arguments = $view->argument;
-    /** @var \Drupal\views\Plugin\views\argument\ArgumentPluginBase $argument */
+    /** @var ArgumentPluginBase $argument */
     foreach ($arguments as $plugin_id => $argument) {
       $real_Field = $argument->realField;
       $entity_type = $argument->getEntityType();
@@ @@
  * Implements hook_cron().
  */
 function entity_activity_cron() {
-  /** @var \Drupal\entity_activity\EntityActivityManagerInterface $entityActivityManager */
+  /** @var EntityActivityManagerInterface $entityActivityManager */
   $entityActivityManager = \Drupal::service('entity_activity.manager');
   $entityActivityManager->purgeLog();
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


69) modules/contrib/entity_activity/entity_activity.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Extension\ModuleInstallerInterface;
+use Drupal\entity_activity\SubscriptionStorageInterface;
+use Drupal\entity_activity\Entity\SubscriptionInterface;
+use Drupal\entity_activity\LogStorageInterface;
+use Drupal\entity_activity\Entity\LogInterface;
 /**
  * @file
  */
@@ @@
 function entity_activity_update_8101(&$sandbox) {
   $module_handler = \Drupal::moduleHandler();
   if (!$module_handler->moduleExists('serialization')) {
-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+    /** @var ModuleInstallerInterface $module_installer */
     $module_installer = \Drupal::service('module_installer');
     $module_installer->install(['serialization']);
   }
@@ @@
  * Delete all subscriptions for which a source entity has been deleted.
  */
 function entity_activity_update_8102(&$sandbox) {
-  /** @var \Drupal\entity_activity\SubscriptionStorageInterface $subscriptions_storage */
+  /** @var SubscriptionStorageInterface $subscriptions_storage */
   $subscriptions_storage = \Drupal::entityTypeManager()->getStorage('entity_activity_subscription');
   // Initialize some variables during the first pass through.
   if (!isset($sandbox['total'])) {
@@ @@
   $query->sort('id', 'DESC');
   $result = $query->execute();
   foreach ($result as $id) {
-    /** @var \Drupal\entity_activity\Entity\SubscriptionInterface $subscription */
+    /** @var SubscriptionInterface $subscription */
     $subscription = $subscriptions_storage->load($id);
     $source_entity = \Drupal::entityTypeManager()
       ->getStorage($subscription->getSourceEntityTypeId())
@@ @@
  * Delete all subscriptions for which the owner has been deleted.
  */
 function entity_activity_update_8103(&$sandbox) {
-  /** @var \Drupal\entity_activity\SubscriptionStorageInterface $subscriptions_storage */
+  /** @var SubscriptionStorageInterface $subscriptions_storage */
   $subscription_storage = \Drupal::entityTypeManager()->getStorage('entity_activity_subscription');
   // Initialize some variables during the first pass through.
   if (!isset($sandbox['total'])) {
@@ @@
   $query->sort('id', 'DESC');
   $result = $query->execute();
   foreach ($result as $id) {
-    /** @var \Drupal\entity_activity\Entity\SubscriptionInterface $subscription */
+    /** @var SubscriptionInterface $subscription */
     $subscription = $subscription_storage->load($id);
     $owner = $subscription->getOwner();
     if (!$owner instanceof UserInterface) {
@@ @@
  * Delete all logs for which the owner has been deleted.
  */
 function entity_activity_update_8104(&$sandbox) {
-  /** @var \Drupal\entity_activity\LogStorageInterface $log_storage */
+  /** @var LogStorageInterface $log_storage */
   $log_storage = \Drupal::entityTypeManager()->getStorage('entity_activity_log');
   // Initialize some variables during the first pass through.
   if (!isset($sandbox['total'])) {
@@ @@
   $query->sort('id', 'DESC');
   $result = $query->execute();
   foreach ($result as $id) {
-    /** @var \Drupal\entity_activity\Entity\LogInterface $log */
+    /** @var LogInterface $log */
     $log = $log_storage->load($id);
     $owner = $log->getOwner();
     if (!$owner instanceof UserInterface) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 4 nodes were removed                                                 

 [OK] 69 files have been changed by Rector                                      

