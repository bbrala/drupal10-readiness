modules/contrib/rc/modules/rc_group/rc_group.install
modules/contrib/rc/modules/rc_group/rc_group.module
modules/contrib/rc/modules/rc_group/src/Form/GroupsChatSettingsForm.php
modules/contrib/rc/modules/rc_group/src/Groups/GroupRc.php
modules/contrib/rc/modules/rc_group/src/Plugin/Action/RcCreateGroup.php
modules/contrib/rc/modules/rc_group/src/Plugin/Block/RcGroupBlock.php
modules/contrib/rc/modules/rc_group/src/Services/RcGroup.php
modules/contrib/rc/modules/rc_opensocial/rc_opensocial.module
modules/contrib/rc/modules/rc_opensocial/src/Plugin/Block/RcOsGroupBlock.php
modules/contrib/rc/modules/rc_opensocial/src/Plugin/Block/RcOsUserBlock.php
modules/contrib/rc/rc.api.php
modules/contrib/rc/rc.install
modules/contrib/rc/rc.module
modules/contrib/rc/src/Form/RcSettingsForm.php
modules/contrib/rc/src/Form/RcUserSettingsForm.php
modules/contrib/rc/src/Plugin/Action/RcCreateUser.php
modules/contrib/rc/src/Plugin/Action/RcUpdateUser.php
modules/contrib/rc/src/Plugin/Block/RcUserBlock.php
modules/contrib/rc/src/Plugin/Block/RcUserPopupBlock.php
modules/contrib/rc/src/Services/RcAuth.php
modules/contrib/rc/src/Services/RcChat.php
modules/contrib/rc/src/Services/RcUser.php
modules/contrib/rc/tests/src/Functional/LoadTest.php

19 files with changes
=====================

1) modules/contrib/rc/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\rc\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/rc/src/Services/RcUser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rc\Services;

+use Drupal\Core\Config\ImmutableConfig;
+use Psr\Log\LoggerInterface;
 use ATDev\RocketChat\Chat;
 use ATDev\RocketChat\Users\User;
 use Drupal\Core\Config\ConfigFactory;
@@ @@
   /**
    * The module configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The logging service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

   /**
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactory $logger_factory
+   * @param LoggerChannelFactory $logger_factory
    *   The logging service.   *.
    */
   public function __construct(
@@ @@
    * @param string $userName
    * @param string $password
    *
-   * @return \ATDev\RocketChat\Users\User|bool|void
+   * @return User|bool|void
    */
   public function login(string $userName = NULL, string $password = NULL) {
     if ($userName && $password) {
@@ @@
    *
    * @param $user
    *
-   * @return \ATDev\RocketChat\Users\User|bool|void
+   * @return User|bool|void
    */
   public function getAuthTokenByName($user) {

@@ @@
   /**
    * Login to Rocket Chat server with admin account saved in configurations.
    *
-   * @return \ATDev\RocketChat\Users\User|bool|void
+   * @return User|bool|void
    */
   public function loginRcAdmin() {
     return $this->login($this->user(), $this->secret());
@@ @@
    *
    * @param object $user
    *
-   * @return \ATDev\RocketChat\Users\User|bool|void
+   * @return User|bool|void
    */
   public function loginUserByName(object $user) {

@@ @@
    *
    * @param object $user
    *
-   * @return \ATDev\RocketChat\Users\User|bool|void
+   * @return User|bool|void
    */
   public function userInfoByName(object $user = NULL) {
     if ($user) {
@@ @@
    *
    * @param object $user
    *
-   * @return \ATDev\RocketChat\Users\User|bool|void
+   * @return User|bool|void
    */
   public function userInfoById(object $user = NULL) {
     if ($user) {
@@ @@
    *
    * @param $user
    *
-   * @return \ATDev\RocketChat\Users\User|bool|void
+   * @return User|bool|void
    */
   public function checkIfUserExist($user) {

@@ @@
    * @param object $user
    * @param bool|null $save
    *
-   * @return \ATDev\RocketChat\Users\User|bool|void
+   * @return User|bool|void
    */
   public function createUser(object $user, bool $save = NULL) {
     // Login in with Rocket chat admin to create new user.
@@ @@
    * @param object $user
    * @param bool|null $save
    *
-   * @return \ATDev\RocketChat\Users\User|bool|void
+   * @return User|bool|void
    */
   public function updateUser(object $user, bool $save = NULL) {

@@ @@
    *
    * @param object $user
    *
-   * @return \ATDev\RocketChat\Users\User|bool|void
+   * @return User|bool|void
    */
   public function deleteUser(object $user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/rc/src/Services/RcChat.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rc\Services;

+use ATDev\RocketChat\Users\User;
 use ATDev\RocketChat\Chat;

 /**
@@ @@
    * @param string $password
    * @param bool $auth
    *
-   * @return \ATDev\RocketChat\Users\User|bool
+   * @return User|bool
    */
   public static function authToken($userName, $password, $auth = TRUE) {
     static::send("login", "POST", ["user" => $userName, "password" => $password]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/rc/src/Services/RcAuth.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The module configuration.
    *
-   * @var Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $config;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/rc/src/Plugin/Block/RcUserPopupBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rc\Plugin\Block;

+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
 class RcUserPopupBlock extends BlockBase implements ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected AccountInterface $account;

   /**
-   * @var \Drupal\rc\Services\RcUser
+   * @var RcUser
    */
   protected RcUser $rcUser;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Session\AccountInterface $account
-   * @param \Drupal\rc\Services\RcUser $rcUser
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param AccountInterface $account
+   * @param RcUser $rcUser
+   * @param EntityTypeManagerInterface $entityTypeManager
    */
   public function __construct(array $configuration,
     $plugin_id,
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function blockSubmit($form, FormStateInterface $form_state) {
     parent::blockSubmit($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/rc/src/Plugin/Block/RcUserBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rc\Plugin\Block;

+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
 class RcUserBlock extends BlockBase implements ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected AccountInterface $account;

   /**
-   * @var \Drupal\rc\Services\RcUser
+   * @var RcUser
    */
   protected RcUser $rcUser;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Session\AccountInterface $account
-   * @param \Drupal\rc\Services\RcUser $rcUser
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param AccountInterface $account
+   * @param RcUser $rcUser
+   * @param EntityTypeManagerInterface $entityTypeManager
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccountInterface $account, RcUser $rcUser, EntityTypeManagerInterface $entityTypeManager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function blockSubmit($form, FormStateInterface $form_state) {
     parent::blockSubmit($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/rc/src/Plugin/Action/RcUpdateUser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rc\Plugin\Action;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\views_bulk_operations\Action\ViewsBulkOperationsActionBase;
 use Drupal\Core\Session\AccountInterface;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE): bool|\Drupal\Core\Access\AccessResultInterface {
+  public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE): bool|AccessResultInterface {
     if ($object->getEntityType() === 'user') {
       $access = $object->access('update', $account, TRUE)
         ->andIf($object->status->access('edit', $account, TRUE));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/rc/rc.module:92

    ---------- begin diff ----------
@@ @@
  *
  * Implements hook_ENTITY_TYPE_presave() for user entities.
  *
- * @param \Drupal\user\UserInterface $user
+ * @param UserInterface $user
  */
 function rc_user_presave(UserInterface $user) {

@@ @@
  * Implements hook_user_cancel().
  *
  * @param $edit
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  * @param $method
  */
 function rc_user_cancel($edit, AccountInterface $account, $method) {
@@ @@
  *
  * Implements hook_user_delete().
  *
- * @param \Drupal\user\UserInterface $user
+ * @param UserInterface $user
  */
 function rc_user_delete(AccountInterface $account) {
   $rcUser = \Drupal::service('rc.user');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


9) modules/contrib/rc/rc.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\field\Entity\FieldConfig;

@@ @@
 /**
  * Implements hook_uninstall().
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function rc_uninstall($is_syncing) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


10) modules/contrib/rc/rc.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use ATDev\RocketChat\Users\User;
 /**
  * @file
  */
-
 /**
  * @param object $entity
- * @param \ATDev\RocketChat\Users\User $rcUser
+ * @param User $rcUser
  *
  *   * Custom hook to provide an interface to map Drupal user fields to Rocket Chat
  *   User fields.
  */
-function hook_field_mapping_rc_alter(object $entity, ATDev\RocketChat\Users\User $rcUser) {
+function hook_field_mapping_rc_alter(object $entity, User $rcUser) {
   // Usage example with $entity = Drupal\user\UserInterface $user.
   //  $name = $user->getDisplayName();
   //  $invokeName = $name . ' Invoke';
    ----------- end diff -----------

11) modules/contrib/rc/modules/rc_opensocial/src/Plugin/Block/RcOsUserBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rc_opensocial\Plugin\Block;

+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
 class RcOsUserBlock extends BlockBase implements ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected AccountInterface $account;

   /**
-   * @var \Drupal\rc\Services\RcUser
+   * @var RcUser
    */
   protected RcUser $rcUser;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Session\AccountInterface $account
-   * @param \Drupal\rc\Services\RcUser $rcUser
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param AccountInterface $account
+   * @param RcUser $rcUser
+   * @param EntityTypeManagerInterface $entityTypeManager
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccountInterface $account, RcUser $rcUser, EntityTypeManagerInterface $entityTypeManager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function blockSubmit($form, FormStateInterface $form_state) {
     parent::blockSubmit($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/rc/modules/rc_opensocial/src/Plugin/Block/RcOsGroupBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rc_opensocial\Plugin\Block;

+use Drupal\Component\Plugin\Context\ContextInterface;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Current path.
    *
-   * @var \Drupal\Component\Plugin\Context\ContextInterface[]|void
+   * @var ContextInterface[]|void
    */
   private $routeMatch;

@@ @@
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private AccountInterface $account;

@@ @@
   /**
    * Current group.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * RcUser service initiated from container.
    *
-   * @var \Drupal\rc\Services\RcUser
+   * @var RcUser
    */
   private RcUser $rcUser;

@@ @@
   /**
    * RcGroup service initiated from container.
    *
-   * @var \Drupal\rc_group\Services\RcGroup
+   * @var RcGroup
    */
   private RcGroup $rcGroup;

@@ @@
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Session\AccountInterface $account
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   * @param \Drupal\rc\Services\RcUser $rcUser
-   * @param \Drupal\rc_group\Services\RcGroup $rcGroup
+   * @param AccountInterface $account
+   * @param EntityTypeManagerInterface $entityTypeManager
+   * @param RcUser $rcUser
+   * @param RcGroup $rcGroup
    * @param $routeMatch
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccountInterface $account, EntityTypeManagerInterface $entityTypeManager, RcUser $rcUser, RcGroup $rcGroup, $routeMatch) {
@@ @@
   /**
    * Pass service through container.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function blockSubmit($form, FormStateInterface $form_state) {
     parent::blockSubmit($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/rc/modules/rc_opensocial/rc_opensocial.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 /**
  * @file
  * Contains rc_opensocial.module.
@@ @@
 }

 /**
- * @throws \Drupal\Core\TypedData\Exception\MissingDataException
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws MissingDataException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function updateUserAvatarRemote(object $profile) {

@@ @@
   if ($rcUsers->loginRcAdmin()) {

     // Add the profile image.
-    /** @var \Drupal\image\Entity\ImageStyle $image_style */
+    /** @var ImageStyle $image_style */
     $image_style = ImageStyle::load('social_medium');

     if (!empty($profile->field_profile_image->entity)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


14) modules/contrib/rc/modules/rc_group/src/Services/RcGroup.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rc_group\Services;

+use Drupal\Core\Config\ImmutableConfig;
+use Psr\Log\LoggerInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use ATDev\RocketChat\Users\Collection;
+use Drupal\Core\Entity\EntityStorageException;
 use ATDev\RocketChat\Groups\Group;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Config\FileStorage;
@@ @@
   /**
    * The module configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The logging service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

   /**
-   * @param Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactory $logger_factory
+   * @param LoggerChannelFactory $logger_factory
    *   The logging service.
    */
-
   protected $rcAuth;

   /**
@@ @@
   protected array $userRoles;

   /**
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
-   * @param \Drupal\Core\Logger\LoggerChannelFactory $logger_factory
+   * @param ConfigFactory $config_factory
+   * @param LoggerChannelFactory $logger_factory
    */
   public function __construct(
     ConfigFactory $config_factory,
@@ @@
    *
    * @param object $group
    *
-   * @return \ATDev\RocketChat\Groups\Group|bool|void
+   * @return Group|bool|void
    */
   public function groupInfo(object $group) {

@@ @@
   //    }
   //
   //  }
-
   /**
    * This method check if the Rocket Chat group exists. If exists, it returns
    * a list of all rocket chat room (channel) names in an array.
@@ @@
    *
    * @return array
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function checkIfGroupExists(object $group) {

@@ @@
    *
    * @param object $group
    *
-   * @return \ATDev\RocketChat\Users\Collection|void
+   * @return Collection|void
    */
   public function groupMembersList(object $group) {

@@ @@
    * @param object $group
    * @param bool $save
    *
-   * @return \ATDev\RocketChat\Groups\Group|bool|void
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return Group|bool|void
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function createGroup(object $group, bool $save = FALSE) {

@@ @@
    * @param string $label
    * @param bool $required
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function createRcRoomIdField(
     string $entity,
@@ @@

     // Create field storage if it does not exist.
     if (!$roomIdFieldStorage) {
-      $configDirectory = new FileStorage(drupal_get_path('module', 'rc_group') . '/config/install');
+      $configDirectory = new FileStorage(\Drupal::service('extension.list.module')->getPath('rc_group') . '/config/install');

       // Import the field from the associated config file.
       $rcRoomIdConfig = $configDirectory
@@ @@
    *
    * @param object $group
    *
-   * @return \ATDev\RocketChat\Groups\Group|void
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return Group|void
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function renameGroup(object $group) {
     // Get the Rocket Chat room ID from field.
@@ @@
   /**
    * @param object $group
    *
-   * @return \ATDev\RocketChat\Groups\Group|bool|void
+   * @return Group|bool|void
    */
   public function deleteGroup(object $group) {

@@ @@
    * @param object $user
    * @param object $group
    *
-   * @return \ATDev\RocketChat\Groups\Group|bool|void
+   * @return Group|bool|void
    */
   public function groupInviteUser(object $groupOwner, object $user, object $group) {

@@ @@
    * @param object $user
    * @param object $group
    *
-   * @return \ATDev\RocketChat\Groups\Group|bool|void
+   * @return Group|bool|void
    */
   public function groupInviteUserByAdmin(object $groupOwner, object $user, object $group) {

@@ @@
    * @param object $user
    * @param object $group
    *
-   * @return \ATDev\RocketChat\Groups\Group|bool|void
+   * @return Group|bool|void
    */
   public function groupKickUser(object $groupOwner, object $user, object $group) {

@@ @@
    * @param object $user
    * @param object $group
    *
-   * @return \ATDev\RocketChat\Groups\Group|bool|void
+   * @return Group|bool|void
    */
   public function groupAddOwner(object $groupOwner, object $user, object $group) {

@@ @@
    * @param object $user
    * @param object $group
    *
-   * @return \ATDev\RocketChat\Groups\Group|bool|void
+   * @return Group|bool|void
    */
   public function GroupRemoveOwner(object $groupOwner, object $user, object $group) {

@@ @@
    * @param object $user
    * @param object $group
    *
-   * @return \ATDev\RocketChat\Groups\Group|void
+   * @return Group|void
    */
   public function groupAddModerator(object $groupOwner, object $user, object $group) {

@@ @@
    * @param object $user
    * @param object $group
    *
-   * @return \ATDev\RocketChat\Groups\Group|void
+   * @return Group|void
    */
   public function groupRemoveModerator(object $groupOwner, object $user, object $group) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/rc/modules/rc_group/src/Plugin/Block/RcGroupBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rc_group\Plugin\Block;

+use Drupal\Component\Plugin\Context\ContextInterface;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * Current path.
    *
-   * @var \Drupal\Component\Plugin\Context\ContextInterface[]|void
+   * @var ContextInterface[]|void
    */
   private $routeMatch;

@@ @@
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private AccountInterface $account;

@@ @@
   /**
    * Current group.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * RcUser service initiated from container.
    *
-   * @var \Drupal\rc\Services\RcUser
+   * @var RcUser
    */
   private RcUser $rcUser;

@@ @@
   /**
    * RcGroup service initiated from container.
    *
-   * @var \Drupal\rc_group\Services\RcGroup
+   * @var RcGroup
    */
   private RcGroup $rcGroup;

@@ @@
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Session\AccountInterface $account
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   * @param \Drupal\rc\Services\RcUser $rcUser
-   * @param \Drupal\rc_group\Services\RcGroup $rcGroup
+   * @param AccountInterface $account
+   * @param EntityTypeManagerInterface $entityTypeManager
+   * @param RcUser $rcUser
+   * @param RcGroup $rcGroup
    * @param $routeMatch
    */
   public function __construct(array $configuration,
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function blockSubmit($form, FormStateInterface $form_state) {
     parent::blockSubmit($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/rc/modules/rc_group/src/Groups/GroupRc.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Gets group info.
    *
-   * @return \ATDev\RocketChat\Groups\Group|bool
+   * @return Group|bool
    */
   public function info() {
     static::send("groups.info", "GET", ["roomId" => $this->getGroupId()]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/rc/modules/rc_group/src/Form/GroupsChatSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rc_group\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\field\Entity\FieldConfig;
@@ @@
    * @param $groupType
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function groupRoles($groupType): array {
     $groupRoles = (array) \Drupal::entityTypeManager()
@@ @@
   //   public function update_groups(array &$form, FormStateInterface $form_state) {
   //
   //  }
-
   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/rc/modules/rc_group/rc_group.module:17

    ---------- begin diff ----------
@@ @@

 /**
  * @param $route_name
- * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+ * @param RouteMatchInterface $route_match
  *
  * @return string|void
  */
@@ @@
  * This is used to manage the creation of chat channels when new group is added
  * according to the Groups Chat settings.
  *
- * @param \Drupal\group\Entity\Group $group
+ * @param Group $group
  */
 function rc_group_group_presave(Group $group) {
   $rcSettings = \Drupal::config('rc_group.settings');
@@ @@
  * This is used to manage the creation of room id field when new group type is
  * added according to the "Groups Chat settings".
  *
- * @param \Drupal\group\Entity\Group $group
+ * @param Group $group
  */
 function rc_group_group_type_insert(GroupType $groupType) {
   $type = $groupType->getEntityTypeId();
@@ @@
  *
  * Add new member to Rocket chat and update roles.
  *
- * @param \Drupal\group\Entity\GroupContent $groupContent
+ * @param GroupContent $groupContent
  */
 function rc_group_group_content_update(GroupContent $groupContent) {
   // Adding/Removing Rocket Chat roles.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


19) modules/contrib/rc/modules/rc_group/rc_group.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\field\Entity\FieldConfig;

 /**
  * Implements hook_uninstall().
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function rc_group_uninstall($is_syncing) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 19 files have been changed by Rector                                      

