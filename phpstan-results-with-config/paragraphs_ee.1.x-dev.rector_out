modules/contrib/paragraphs_ee/modules/paragraphs_ee_sets/paragraphs_ee_sets.install
modules/contrib/paragraphs_ee/modules/paragraphs_ee_sets/paragraphs_ee_sets.module
modules/contrib/paragraphs_ee/paragraphs_ee.api.php
modules/contrib/paragraphs_ee/paragraphs_ee.install
modules/contrib/paragraphs_ee/paragraphs_ee.module
modules/contrib/paragraphs_ee/src/Controller/ParagraphsCategoryListBuilder.php
modules/contrib/paragraphs_ee/src/Controller/ParagraphsOffCanvasBrowser.php
modules/contrib/paragraphs_ee/src/Entity/ParagraphsCategory.php
modules/contrib/paragraphs_ee/src/Form/ParagraphsCategoryDeleteForm.php
modules/contrib/paragraphs_ee/src/Form/ParagraphsCategoryForm.php
modules/contrib/paragraphs_ee/src/ParagraphsCategoryInterface.php

7 files with changes
====================

1) modules/contrib/paragraphs_ee/src/Form/ParagraphsCategoryForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\paragraphs_ee\Form;

+use Drupal\paragraphs_ee\ParagraphsCategoryInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Constructs an ParagraphsCategoryForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entityTypeManager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\paragraphs_ee\ParagraphsCategoryInterface $paragraphs_category */
+    /** @var ParagraphsCategoryInterface $paragraphs_category */
     $paragraphs_category = $this->entity;

     $form['label'] = [
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\paragraphs_ee\ParagraphsCategoryInterface $paragraphs_category */
+    /** @var ParagraphsCategoryInterface $paragraphs_category */
     $paragraphs_category = $this->entity;
     $status = $paragraphs_category->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/paragraphs_ee/src/Controller/ParagraphsOffCanvasBrowser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\paragraphs_ee\Controller;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Template\Attribute;

@@ @@
   public function getTitle($entity_type, $bundle, $form_mode, $field_name) {
     $title_default = $this->t('Add Paragraph', [], ['context' => 'Paragraphs Editor Enhancements']);

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->entityTypeManager()
       ->getStorage('entity_form_display')
       ->load($entity_type . '.' . $bundle . '.' . $form_mode);
@@ @@
   public function content($entity_type, $bundle, $form_mode, $field_name) {
     $build = [];

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->entityTypeManager()
       ->getStorage('entity_form_display')
       ->load($entity_type . '.' . $bundle . '.' . $form_mode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/paragraphs_ee/src/Controller/ParagraphsCategoryListBuilder.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new ParagraphsCategoryListBuilder.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, ConfigFactoryInterface $config_factory, MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/paragraphs_ee/paragraphs_ee.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\paragraphs_ee\ParagraphsCategoryInterface;
 /**
  * @file
  * Main functions for "Paragraphs Editor Enhancements" module.
@@ @@
       'base hook' => 'input',
       'render element' => 'element',
       'template' => 'input--submit--paragraph_action--image',
-      'path' => drupal_get_path('module', 'paragraphs_ee') . '/templates',
+      'path' => \Drupal::service('extension.list.module')->getPath('paragraphs_ee') . '/templates',
     ],
   ];
 }
@@ @@
  * Implements hook_paragraphs_ee_widget_access().
  */
 function paragraphs_ee_paragraphs_ee_widget_access(array $elements, FormStateInterface $form_state, array $context) {
-  /** @var \Drupal\paragraphs\Plugin\Field\FieldWidget\ParagraphsWidget $widget */
+  /** @var ParagraphsWidget $widget */
   $widget = $context['widget'];
   if (!($widget instanceof ParagraphsWidget) || ('modal' !== $widget->getSetting('add_mode'))) {
     return AccessResult::forbidden();
@@ @@
  * Implements hook_field_widget_multivalue_form_alter().
  */
 function paragraphs_ee_field_widget_multivalue_form_alter(array &$elements, FormStateInterface $form_state, array $context) {
-  /** @var \Drupal\paragraphs\Plugin\Field\FieldWidget\ParagraphsWidget $widget */
+  /** @var ParagraphsWidget $widget */
   $widget = $context['widget'];
   if (!($widget instanceof ParagraphsWidget)) {
     return;
@@ @@
   // Check if modifications to widget are allowed.
   $hook_arguments = [$elements, $form_state, $context];
   $access_results = \Drupal::moduleHandler()->invokeAll('paragraphs_ee_widget_access', $hook_arguments);
-  /** @var \Drupal\Core\Access\AccessResultInterface $result */
+  /** @var AccessResultInterface $result */
   $result = AccessResult::neutral();
   if (!empty($access_results)) {
     $result = array_shift($access_results);
@@ @@
     return;
   }

-  /** @var \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList $items */
+  /** @var EntityReferenceRevisionsFieldItemList $items */
   $items = $context['items'];

   // Add custom library.
@@ @@
   $types_available = ParagraphsType::loadMultiple(array_column($elements['add_more'], '#bundle_machine_name'));

   $buttons_ref = [];
-  /** @var \Drupal\paragraphs\Entity\ParagraphsType $type */
+  /** @var ParagraphsType $type */
   foreach ($types_available as $id => $type) {
     $button_id = "add_more_button_{$id}";
     $button = $elements['add_more'][$button_id];
@@ @@
   $elements['add_more']['#attached']['library'][] = 'paragraphs_ee/paragraphs_ee.categories';

   if (!empty($widget_third_party_settings['dialog_off_canvas'])) {
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $form_state->get('form_display');
     $elements['add_more']['#dialog_attributes']['data-dialog-off-canvas'] = 'true';
     $elements['add_more']['#dialog_attributes']['data-dialog-field-name'] = $items->getFieldDefinition()->getName();
@@ @@
  * Implements hook_form_BASE_FORM_ID_alter().
  */
 function paragraphs_ee_form_paragraphs_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var Drupal\paragraphs\ParagraphsTypeInterface $paragraph */
+  /** @var ParagraphsTypeInterface $paragraph */
   $paragraph = $form_state->getFormObject()->getEntity();

-  /** @var \Drupal\paragraphs_ee\ParagraphsCategoryInterface[] $categories */
+  /** @var ParagraphsCategoryInterface[] $categories */
   $categories = \Drupal::entityTypeManager()->getStorage('paragraphs_category')
     ->loadMultiple();
   // Sort the entities using the entity class's sort() method.
@@ @@
   if (isset($variables['element']['add_modal_form_area'])) {
     $variables['add'] = $variables['element']['add_modal_form_area'];
   }
-  /** @var \Drupal\paragraphs_ee\ParagraphsCategoryInterface[] $categories */
+  /** @var ParagraphsCategoryInterface[] $categories */
   $paragraphs_categories = \Drupal::entityTypeManager()->getStorage('paragraphs_category')
     ->loadMultiple();
   // Sort the entities using the entity class's sort() method.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


5) modules/contrib/paragraphs_ee/paragraphs_ee.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 /**
  * @file
  * Installation hooks for paragraphs_ee module.
@@ @@
  */
 function paragraphs_ee_update_8002() {
   $storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
-  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface[] $form_displays */
+  /** @var EntityFormDisplayInterface[] $form_displays */
   $form_displays = $storage->loadMultiple();
   foreach ($form_displays as $form_display) {
     $content = $form_display->get('content');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


6) modules/contrib/paragraphs_ee/paragraphs_ee.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList;
 /**
  * @file
  * Hooks for the paragraphs_ee module.
@@ @@
  *     form to set default values.
  */
 function hook_paragraphs_ee_widget_access(array $elements, FormStateInterface $form_state, array $context) {
-  /** @var \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList $items */
+  /** @var EntityReferenceRevisionsFieldItemList $items */
   $items = $context['items'];
   if (empty($items)) {
     return AccessResult::forbidden('No items available in widget.');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


7) modules/contrib/paragraphs_ee/modules/paragraphs_ee_sets/paragraphs_ee_sets.module:44

    ---------- begin diff ----------
@@ @@
  * Implements hook_field_widget_multivalue_form_alter().
  */
 function paragraphs_ee_sets_field_widget_multivalue_form_alter(array &$elements, FormStateInterface $form_state, array $context) {
-  /** @var \Drupal\paragraphs\Plugin\Field\FieldWidget\ParagraphsWidget $widget */
+  /** @var ParagraphsWidget $widget */
   $widget = $context['widget'];
   if (!($widget instanceof ParagraphsWidget)) {
     return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 7 files have been changed by Rector                                       

