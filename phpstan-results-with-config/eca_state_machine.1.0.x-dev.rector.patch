diff --git a/src/EventSubscriber/EcaStateMachine.php b/src/EventSubscriber/EcaStateMachine.php
index 15e71e4..25b025a 100644
--- a/src/EventSubscriber/EcaStateMachine.php
+++ b/src/EventSubscriber/EcaStateMachine.php
@@ -16,7 +16,7 @@ class EcaStateMachine extends EcaBase {
   /**
    * Subscriber method before initial execution.
    *
-   * @param \Drupal\eca\Event\BeforeInitialExecutionEvent $before_event
+   * @param BeforeInitialExecutionEvent $before_event
    *   The according event.
    */
   public function onBeforeInitialExecution(BeforeInitialExecutionEvent $before_event): void {
diff --git a/src/Plugin/Action/StateTransition.php b/src/Plugin/Action/StateTransition.php
index 8aae6cf..2cd9bca 100644
--- a/src/Plugin/Action/StateTransition.php
+++ b/src/Plugin/Action/StateTransition.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\eca_state_machine\Plugin\Action;
 
+use Drupal\Core\TypedData\Exception\ReadOnlyException;
+use Drupal\state_machine\WorkflowManager;
+use Drupal\state_machine\Plugin\Workflow\Workflow;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -22,8 +25,8 @@ class StateTransition extends ConfigurableActionBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Core\TypedData\Exception\ReadOnlyException
+   * @throws PluginException
+   * @throws ReadOnlyException
    * @throws \InvalidArgumentException
    */
   public function execute($entity = NULL): void {
@@ -43,9 +46,9 @@ class StateTransition extends ConfigurableActionBase {
     if (count($parts) === 4 && $parts[3] !== $currentState) {
       throw new \InvalidArgumentException('Entity state does not match the transition from state.');
     }
-    /** @var \Drupal\state_machine\WorkflowManager $manager */
+    /** @var WorkflowManager $manager */
     $manager = \Drupal::service('plugin.manager.workflow');
-    /** @var \Drupal\state_machine\Plugin\Workflow\Workflow $workflow */
+    /** @var Workflow $workflow */
     $workflow = $manager->createInstance($parts[0]);
     if (!$workflow) {
       throw new \InvalidArgumentException('Entity state field is not attached to the selected workflow.');
@@ -72,7 +75,7 @@ class StateTransition extends ConfigurableActionBase {
   public function buildConfigurationForm(array $form, FormStateInterface $form_state): array {
     $form = parent::buildConfigurationForm($form, $form_state);
     $options = [];
-    /** @var \Drupal\state_machine\WorkflowManager $manager */
+    /** @var WorkflowManager $manager */
     $manager = \Drupal::service('plugin.manager.workflow');
     foreach ($manager->getDefinitions() as $wid => $definition) {
       try {
diff --git a/src/Plugin/ECA/Condition/EntityStateCondition.php b/src/Plugin/ECA/Condition/EntityStateCondition.php
index 93a4c68..4919ce0 100644
--- a/src/Plugin/ECA/Condition/EntityStateCondition.php
+++ b/src/Plugin/ECA/Condition/EntityStateCondition.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eca_state_machine\Plugin\ECA\Condition;
 
+use Drupal\state_machine\WorkflowManager;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -57,7 +58,7 @@ class EntityStateCondition extends ConditionBase {
   public function buildConfigurationForm(array $form, FormStateInterface $form_state): array {
     $form = parent::buildConfigurationForm($form, $form_state);
     $options = [];
-    /** @var \Drupal\state_machine\WorkflowManager $manager */
+    /** @var WorkflowManager $manager */
     $manager = \Drupal::service('plugin.manager.workflow');
     foreach ($manager->getDefinitions() as $wid => $definition) {
       try {
diff --git a/src/Plugin/ECA/Condition/StateMachineCondition.php b/src/Plugin/ECA/Condition/StateMachineCondition.php
index 84dca01..63d20a2 100644
--- a/src/Plugin/ECA/Condition/StateMachineCondition.php
+++ b/src/Plugin/ECA/Condition/StateMachineCondition.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eca_state_machine\Plugin\ECA\Condition;
 
+use Drupal\state_machine\WorkflowManager;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\eca\Plugin\ECA\Condition\ConditionBase;
@@ -54,7 +55,7 @@ class StateMachineCondition extends ConditionBase {
   public function buildConfigurationForm(array $form, FormStateInterface $form_state): array {
     $form = parent::buildConfigurationForm($form, $form_state);
     $options = [];
-    /** @var \Drupal\state_machine\WorkflowManager $manager */
+    /** @var WorkflowManager $manager */
     $manager = \Drupal::service('plugin.manager.workflow');
     foreach ($manager->getDefinitions() as $wid => $definition) {
       try {
