modules/contrib/extra_field/extra_field.api.php
modules/contrib/extra_field/extra_field.module
modules/contrib/extra_field/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleAllNodes.php
modules/contrib/extra_field/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleArticle.php
modules/contrib/extra_field/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleFormattedField.php
modules/contrib/extra_field/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleMultilingualField.php
modules/contrib/extra_field/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleWithDependencyInjection.php
modules/contrib/extra_field/modules/extra_field_example/src/Plugin/ExtraField/Form/CustomSubmit.php
modules/contrib/extra_field/modules/extra_field_example/src/Plugin/ExtraField/Form/ExampleCustomInput.php
modules/contrib/extra_field/modules/extra_field_example/src/Plugin/ExtraField/Form/ExampleMarkup.php
modules/contrib/extra_field/src/Annotation/ExtraFieldDisplay.php
modules/contrib/extra_field/src/Annotation/ExtraFieldForm.php
modules/contrib/extra_field/src/Plugin/ExtraFieldDisplayBase.php
modules/contrib/extra_field/src/Plugin/ExtraFieldDisplayFormattedBase.php
modules/contrib/extra_field/src/Plugin/ExtraFieldDisplayFormattedInterface.php
modules/contrib/extra_field/src/Plugin/ExtraFieldDisplayInterface.php
modules/contrib/extra_field/src/Plugin/ExtraFieldDisplayManager.php
modules/contrib/extra_field/src/Plugin/ExtraFieldDisplayManagerInterface.php
modules/contrib/extra_field/src/Plugin/ExtraFieldFormBase.php
modules/contrib/extra_field/src/Plugin/ExtraFieldFormInterface.php
modules/contrib/extra_field/src/Plugin/ExtraFieldFormManager.php
modules/contrib/extra_field/src/Plugin/ExtraFieldFormManagerInterface.php
modules/contrib/extra_field/src/Plugin/ExtraFieldManagerBase.php
modules/contrib/extra_field/src/Plugin/ExtraFieldManagerBaseInterface.php
modules/contrib/extra_field/tests/extra_field_test/src/Plugin/ExtraField/Display/AllNodeTypesTest.php
modules/contrib/extra_field/tests/extra_field_test/src/Plugin/ExtraField/Display/EmptyFormattedFieldTest.php
modules/contrib/extra_field/tests/extra_field_test/src/Plugin/ExtraField/Display/MultipleItemsFieldTest.php
modules/contrib/extra_field/tests/extra_field_test/src/Plugin/ExtraField/Display/MultipleItemsFieldWithCacheDependencyTest.php
modules/contrib/extra_field/tests/extra_field_test/src/Plugin/ExtraField/Display/OneNodeTypeTest.php
modules/contrib/extra_field/tests/extra_field_test/src/Plugin/ExtraField/Display/SingleTextFieldTest.php
modules/contrib/extra_field/tests/extra_field_test/src/Plugin/ExtraField/Form/SingleItemTest.php
modules/contrib/extra_field/tests/src/Functional/ExtraFieldBrowserTestBase.php
modules/contrib/extra_field/tests/src/Functional/ExtraFieldDisplayFieldTest.php
modules/contrib/extra_field/tests/src/Functional/ExtraFieldDisplayUITest.php
modules/contrib/extra_field/tests/src/Functional/ExtraFieldDisplayViewTest.php
modules/contrib/extra_field/tests/src/Functional/ExtraFieldFormUITest.php
modules/contrib/extra_field/tests/src/Functional/ExtraFieldFormViewTest.php
modules/contrib/extra_field/tests/src/Kernel/ExtraFieldDisplayPluginTest.php
modules/contrib/extra_field/tests/src/Kernel/ExtraFieldFormPluginTest.php
modules/contrib/extra_field/tests/src/Unit/ExtraFieldDisplayManagerTest.php
modules/contrib/extra_field/tests/src/Unit/ExtraFieldFormManagerTest.php
modules/contrib/extra_field/tests/src/Unit/ExtraFieldManagerBaseTest.php

29 files with changes
=====================

1) modules/contrib/extra_field/tests/src/Unit/ExtraFieldManagerBaseTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\extra_field\Unit;

+use Drupal\extra_field\Plugin\ExtraFieldManagerBaseInterface;
 use Drupal\Tests\UnitTestCase;

 /**
@@ @@
   /**
    * The ExtraFieldManagerBase under test.
    *
-   * @var \Drupal\extra_field\Plugin\ExtraFieldManagerBaseInterface
+   * @var ExtraFieldManagerBaseInterface
    */
   protected $baseManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->baseManager = $this->getMockBuilder('Drupal\extra_field\Plugin\ExtraFieldManagerBase')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/extra_field/tests/src/Unit/ExtraFieldFormManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\extra_field\Unit;

+use Drupal\extra_field\Plugin\ExtraFieldFormManagerInterface;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Tests\UnitTestCase;

 /**
@@ @@
   /**
    * The plugin manager under test.
    *
-   * @var \Drupal\extra_field\Plugin\ExtraFieldFormManagerInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var ExtraFieldFormManagerInterface|MockObject
    */
   protected $formManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->formManager = $this->getMockBuilder('Drupal\extra_field\Plugin\ExtraFieldFormManager')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/extra_field/tests/src/Unit/ExtraFieldDisplayManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\extra_field\Unit;

+use Drupal\extra_field\Plugin\ExtraFieldDisplayManager;
+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\extra_field\Plugin\ExtraFieldDisplayInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\Entity\EntityViewDisplay;
+use Drupal\Component\Plugin\Factory\FactoryInterface;
 use Drupal\Tests\UnitTestCase;

 /**
@@ @@
   /**
    * The plugin manager under test.
    *
-   * @var \Drupal\extra_field\Plugin\ExtraFieldDisplayManager|\PHPUnit\Framework\MockObject\MockObject
+   * @var ExtraFieldDisplayManager|MockObject
    */
   protected $displayManager;

@@ @@
   /**
    * Returns a mocked ExtraFieldDisplay object.
    *
-   * @return \Drupal\extra_field\Plugin\ExtraFieldDisplayInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @return ExtraFieldDisplayInterface|MockObject
    *   The mocked object.
    */
   protected function createMockDisplayPlugin($entity, $display, $viewMode, $build) {
@@ @@
     $this->prepareDefinitions($definitions);

     // Mock content entity.
-    /** @var \Drupal\Core\Entity\ContentEntityInterface|\PHPUnit\Framework\MockObject\MockObject $contentEntity */
+    /** @var ContentEntityInterface|MockObject $contentEntity */
     $contentEntity = $this->createMock('Drupal\Core\Entity\ContentEntityInterface');
     $contentEntity->expects($this->any())
       ->method('getEntityTypeId')
@@ @@
       ->will($this->returnValue($bundle));

     // Mock entity view display.
-    /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay|\PHPUnit\Framework\MockObject\MockObject $display */
+    /** @var EntityViewDisplay|MockObject $display */
     $display = $this->createMock('Drupal\Core\Entity\Entity\EntityViewDisplay');
     $display->expects($this->any())
       ->method('getComponent')
@@ @@
       ->will($this->returnValue($hasComponent));

     // Mock extra field display plugin.
-    /** @var \Drupal\Component\Plugin\Factory\FactoryInterface|\PHPUnit\Framework\MockObject\MockObject $pluginFactory */
+    /** @var FactoryInterface|MockObject $pluginFactory */
     $pluginFactory = $this->createMock('Drupal\Component\Plugin\Factory\FactoryInterface');
     $pluginFactory->expects($this->any())
       ->method('createInstance')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/extra_field/tests/src/Kernel/ExtraFieldDisplayPluginTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\extra_field\Kernel;

+use Drupal\extra_field\Plugin\ExtraFieldDisplayManager;
+use Drupal\node\NodeInterface;
 use Drupal\extra_field_test\Plugin\ExtraField\Display\AllNodeTypesTest;
 use Drupal\extra_field_test\Plugin\ExtraField\Display\EmptyFormattedFieldTest;
 use Drupal\extra_field_test\Plugin\ExtraField\Display\SingleTextFieldTest;
@@ @@
   /**
    * The plugin manager under test.
    *
-   * @var \Drupal\extra_field\Plugin\ExtraFieldDisplayManager
+   * @var ExtraFieldDisplayManager
    */
   protected $displayManager;

@@ @@
   /**
    * The node that contains the extra fields under test.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('user');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/extra_field/tests/src/Functional/ExtraFieldFormViewTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\extra_field\Functional;

+use Drupal\node\Entity\Node;
 /**
  * Tests the view of extra field form plugins.
  *
@@ @@
   /**
    * A node that contains the extra fields.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $content;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->content = $this->createContent('first_node_type');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/extra_field/tests/src/Functional/ExtraFieldFormUITest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\extra_field\Functional;

+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 /**
  * Tests the extra field Form on entity UI pages.
  *
@@ @@
   /**
    * Entity form display for each content type.
    *
-   * @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface[]
+   * @var EntityViewDisplayInterface[]
    */
   protected $entityFrom;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {

     parent::setUp();
     $adminUser = $this->drupalCreateUser(['administer node form display']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/extra_field/tests/src/Functional/ExtraFieldDisplayViewTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\extra_field\Functional;

+use Drupal\node\Entity\Node;
 /**
  * Tests the view of extra field Displays.
  *
@@ @@
   /**
    * A node that contains the extra fields.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $content;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->content = $this->createContent('first_node_type');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/extra_field/tests/src/Functional/ExtraFieldDisplayUITest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\extra_field\Functional;

+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 /**
  * Tests the extra field Display on entity UI pages.
  *
@@ @@
   /**
    * Entity display for each content type.
    *
-   * @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface[]
+   * @var EntityViewDisplayInterface[]
    */
   protected $entityDisplay;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {

     parent::setUp();
     $adminUser = $this->drupalCreateUser(['administer node display']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/extra_field/tests/src/Functional/ExtraFieldDisplayFieldTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\extra_field\Functional;

+use Drupal\node\Entity\Node;
 /**
  * Tests the extra_field Display with field wrapper.
  *
@@ @@
   /**
    * A node that contains the extra fields.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $firstNode;

@@ @@
   /**
    * A second node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $secondNode;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->firstNode = $this->createContent('first_node_type');
@@ @@
     // Test the output of field with cacheable dependency.
     $this->assertSession()->pageTextContains('Related pages');
     $this->assertSession()->pageTextContains($this->secondNode->label());
-    $this->assertCacheTag('node:' . $this->secondNode->id());
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'node:' . $this->secondNode->id());

     // Test the output of the empty field.
     $this->assertSession()->pageTextNotContains('Empty field');
    ----------- end diff -----------

Applied rules:
 * AssertCacheTagRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/extra_field/tests/src/Functional/ExtraFieldBrowserTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\extra_field\Functional;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Tests\BrowserTestBase;
@@ @@
    * @param string $contentType
    *   Content type of the node.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The new node.
    */
   public function createContent($contentType) {

     $this->createContentType(['type' => $contentType]);
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $node */
+    /** @var ContentEntityInterface $node */
     $node = \Drupal::entityTypeManager()->getStorage('node')->create([
       'type' => $contentType,
       'title' => $this->randomMachineName(),
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/extra_field/tests/extra_field_test/src/Plugin/ExtraField/Display/MultipleItemsFieldWithCacheDependencyTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The render service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The render service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/extra_field/src/Plugin/ExtraFieldManagerBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\extra_field\Plugin;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;

@@ @@
   /**
    * Returns the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager service.
    */
   abstract protected function getEntityTypeManager();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/extra_field/src/Plugin/ExtraFieldFormManagerInterface.php:24

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The entity form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function entityFormAlter(array &$form, FormStateInterface $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/extra_field/src/Plugin/ExtraFieldFormManager.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/extra_field/src/Plugin/ExtraFieldFormInterface.php:16

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The entity form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
@@ @@
   /**
    * Stores the field's parent entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that hosts the field.
    */
   public function setEntity(ContentEntityInterface $entity);
@@ @@
   /**
    * Returns the field's parent entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity that hosts the field.
    */
   public function getEntity();
@@ @@
   /**
    * Stores the entity form display.
    *
-   * @param \Drupal\Core\Entity\Display\EntityFormDisplayInterface $display
+   * @param EntityFormDisplayInterface $display
    *   The entity form display holding the display options configured for the
    *   entity components.
    */
@@ @@
   /**
    * Returns the entity form display object of the field's host entity.
    *
-   * @return \Drupal\Core\Entity\Display\EntityFormDisplayInterface
+   * @return EntityFormDisplayInterface
    *   The entity view display object.
    */
   public function getEntityFormDisplay();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/extra_field/src/Plugin/ExtraFieldFormBase.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The field's parent entity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;

@@ @@
    *
    * Contains the form display options configured for the entity components.
    *
-   * @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface
+   * @var EntityFormDisplayInterface
    */
   protected $entityFormDisplay;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/extra_field/src/Plugin/ExtraFieldDisplayManagerInterface.php:36

    ---------- begin diff ----------
@@ @@
    *   A renderable array representing the entity content. The module may add
    *   elements to $build prior to rendering. The structure of $build is a
    *   renderable array as expected by drupal_render().
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity object.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The entity view display holding the display options configured for the
    *   entity components.
    * @param string $viewMode
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/extra_field/src/Plugin/ExtraFieldDisplayManager.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/extra_field/src/Plugin/ExtraFieldDisplayInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Builds a renderable array for the field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The field's host entity.
    *
    * @return array
@@ @@
   /**
    * Stores the field's parent entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that hosts the field.
    */
   public function setEntity(ContentEntityInterface $entity);
@@ @@
   /**
    * Returns the field's parent entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity that hosts the field.
    */
   public function getEntity();
@@ @@
   /**
    * Stores the entity view display.
    *
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The entity view display holding the display options configured for the
    *   entity components. As provided by hook_entity_view()
    */
@@ @@
   /**
    * Returns the entity view display object of the field's host entity.
    *
-   * @return \Drupal\Core\Entity\Display\EntityViewDisplayInterface
+   * @return EntityViewDisplayInterface
    *   The entity view display object.
    */
   public function getEntityViewDisplay();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/extra_field/src/Plugin/ExtraFieldDisplayFormattedInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\extra_field\Plugin;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\ContentEntityInterface;

 /**
@@ @@
   /**
    * Returns the renderable array of the field item(s).
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The field's host entity.
    *
    * @return array
@@ @@
    *
    * If applicable, the code has to take care of the translatability.
    *
-   * @return string|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return string|TranslatableMarkup
    *   The field label.
    */
   public function getLabel();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/extra_field/src/Plugin/ExtraFieldDisplayFormattedBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\extra_field\Plugin;

+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Render\Element;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/extra_field/src/Plugin/ExtraFieldDisplayBase.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The field's parent entity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;

@@ @@
    *
    * Contains the display options configured for the entity components.
    *
-   * @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface
+   * @var EntityViewDisplayInterface
    */
   protected $entityViewDisplay;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/extra_field/src/Annotation/ExtraFieldForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\extra_field\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


24) modules/contrib/extra_field/src/Annotation/ExtraFieldDisplay.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\extra_field\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


25) modules/contrib/extra_field/modules/extra_field_example/src/Plugin/ExtraField/Form/ExampleCustomInput.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
    *
    * @param array $form
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateVoucherCode(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/extra_field/modules/extra_field_example/src/Plugin/ExtraField/Form/CustomSubmit.php:46

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The entity form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function addCustomMessage(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/extra_field/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleWithDependencyInjection.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\extra_field_example\Plugin\ExtraField\Display;

+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The current request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $currentRequest;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RequestStack $request_stack) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/extra_field/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleMultilingualField.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\extra_field_example\Plugin\ExtraField\Display;

+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\extra_field\Plugin\ExtraFieldDisplayFormattedBase;
@@ @@
       // Build the field output as a concatenated string of tags.
       $tags = [];
       foreach ($tagsField as $item) {
-        /** @var \Drupal\Core\Entity\ContentEntityInterface $tag */
+        /** @var ContentEntityInterface $tag */
         $tag = $item->entity;
         $tags[] = $tag->label();
         $cache->addCacheableDependency($tag);
@@ @@
   /**
    * Returns the Tags field this plugin uses.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface|null
+   * @return FieldItemListInterface|null
    *   The taxonomy terms this field references.
    */
   protected function getTagsField() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/extra_field/extra_field.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\ContentEntityInterface;
 /**
  * @file
  * Hook implementations for Extra Field module.
@@ @@
  */
 function extra_field_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {

-  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+  /** @var ContentEntityInterface $entity */
   Drupal::service('plugin.manager.extra_field_display')->entityView($build, $entity, $display, $view_mode);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 29 files have been changed by Rector                                      

