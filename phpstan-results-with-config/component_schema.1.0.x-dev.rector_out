modules/contrib/component_schema/component_schema.api.php
modules/contrib/component_schema/modules/component_schema_ui_patterns/component_schema_ui_patterns.module
modules/contrib/component_schema/modules/component_schema_ui_patterns/src/Element/ComponentPattern.php
modules/contrib/component_schema/modules/component_schema_ui_patterns/src/Plugin/Deriver/ComponentSchemaDeriver.php
modules/contrib/component_schema/modules/component_schema_ui_patterns/src/Plugin/UiPatterns/Pattern/ComponentSchemaPattern.php
modules/contrib/component_schema/src/Component/ComponentStorageManager.php
modules/contrib/component_schema/src/Component/Schema/ComponentAttribute.php
modules/contrib/component_schema/src/Component/Schema/ComponentBooleanData.php
modules/contrib/component_schema/src/Component/Schema/ComponentBooleanDataAttributeProvider.php
modules/contrib/component_schema/src/Component/Schema/ComponentComponent.php
modules/contrib/component_schema/src/Component/Schema/ComponentDataDefinition.php
modules/contrib/component_schema/src/Component/Schema/ComponentDataDefinitionInterface.php
modules/contrib/component_schema/src/Component/Schema/ComponentMapping.php
modules/contrib/component_schema/src/Component/Schema/ComponentSequence.php
modules/contrib/component_schema/src/Component/Schema/ComponentStringData.php
modules/contrib/component_schema/src/Component/Schema/ComponentStringDataAttributeProvider.php
modules/contrib/component_schema/src/Component/Schema/ComponentTemplate.php
modules/contrib/component_schema/src/Component/Schema/ComponentVariableArrayElementTrait.php
modules/contrib/component_schema/src/Component/Schema/ComponentVariableAttributeProviderDataDefinition.php
modules/contrib/component_schema/src/Component/Schema/ComponentVariableAttributeProviderDataDefinitionInterface.php
modules/contrib/component_schema/src/Component/Schema/ComponentVariableAttributeProviderTrait.php
modules/contrib/component_schema/src/Component/Schema/ComponentVariableDataDefinition.php
modules/contrib/component_schema/src/Component/Schema/ComponentVariableDataDefinitionInterface.php
modules/contrib/component_schema/src/Component/Schema/ComponentVariableDataDefinitionTrait.php
modules/contrib/component_schema/src/Component/Schema/ComponentVariableMapDataDefinition.php
modules/contrib/component_schema/src/Component/Schema/ComponentVariablePrimitiveElementTrait.php
modules/contrib/component_schema/src/Component/Schema/ComponentVariableSequenceDataDefinition.php
modules/contrib/component_schema/src/Component/Schema/ComponentVariableTrait.php
modules/contrib/component_schema/src/Component/Schema/SchemaBadMethodCallException.php
modules/contrib/component_schema/src/Component/Schema/TypedComponentVariableInterface.php
modules/contrib/component_schema/src/Component/TypedComponentManager.php
modules/contrib/component_schema/src/Component/TypedComponentManagerInterface.php
modules/contrib/component_schema/src/ComponentProcessor.php
modules/contrib/component_schema/src/ComponentSchema.php
modules/contrib/component_schema/src/Event/ComponentSchemaStorageEvents.php
modules/contrib/component_schema/src/Event/ComponentStorageTransformEvent.php
modules/contrib/component_schema/src/Plugin/Styleguide/ComponentSchema.php
modules/contrib/component_schema/src/Template/ComponentTwigExtension.php

13 files with changes
=====================

1) modules/contrib/component_schema/src/Template/ComponentTwigExtension.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\component_schema\Template;

+use Drupal\component_schema\Component\Schema\ComponentMapping;
 use Drupal\component_schema\Component\TypedComponentManager;
 use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Template\Attribute;
@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The typed component manager.
    *
-   * @var \Drupal\component_schema\Component\TypedComponentManager
+   * @var TypedComponentManager
    */
   protected $typedComponentManager;

@@ @@
   /**
    * Constructs a new ComponentTwigExtension.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\component_schema\Component\TypedComponentManager $typed_component_manager
+   * @param TypedComponentManager $typed_component_manager
    *   The typed component manager.
    */
   public function __construct(RendererInterface $renderer, TypedComponentManager $typed_component_manager) {
@@ @@
    * This method is used to produce more easily read markup where there is a
    * primary class that is associated with the element it's being added to.
    *
-   * @param \Drupal\Core\Template\Attribute $attributes
+   * @param Attribute $attributes
    *   An attributes object.
    * @param string $class
    *   A class to prepend.
    *
-   * @return \Drupal\Core\Template\Attribute
+   * @return Attribute
    *   An attributes object that has the given attributes.
    */
   public function prependClass(Attribute $attributes, $class) {
@@ @@
     $process_variables = array_intersect_key($template_variables, $definition['mapping']);

     // Process the variables.
-    /** @var \Drupal\component_schema\Component\Schema\ComponentMapping $schema */
+    /** @var ComponentMapping $schema */
     $schema = $this->typedComponentManager->createFromNameAndData($component_type, $process_variables);

     $process_variables = $schema->getValue();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/component_schema/src/Event/ComponentStorageTransformEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\component_schema\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Config\StorageInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Class ComponentStorageTransformEvent.
@@ @@
    * used instead of the original storage after all event subscribers have been
    * called.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $storage;

@@ @@
   /**
    * StorageTransformEvent constructor.
    *
-   * @param \Drupal\Core\Config\StorageInterface $storage
+   * @param StorageInterface $storage
    *   The storage with the configuration to transform.
    */
   public function __construct(StorageInterface $storage) {
@@ @@
   /**
    * Returns the mutable storage ready to be read from and written to.
    *
-   * @return \Drupal\Core\Config\StorageInterface
+   * @return StorageInterface
    *   The config storage.
    */
   public function getStorage() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/component_schema/src/ComponentSchema.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\component_schema;

+use Drupal\component_schema\Component\TypedComponentManager;
+use Drupal\Core\TypedData\TraversableTypedDataInterface;
 /**
  * Component Schema factory class.
  *
@@ @@
   /**
    * Gets component processor instance.
    *
-   * @return \Drupal\component_schema\ComponentProcessor
+   * @return ComponentProcessor
    *   Component Schema processor instance.
    */
   public static function getProcessor() {
@@ @@
   /**
    * Gets typed component manager instance.
    *
-   * @return \Drupal\component_schema\Component\TypedComponentManager
+   * @return TypedComponentManager
    *   Component Schema processor instance.
    */
   public static function getTypedManager() {
@@ @@
    * @param array $variables
    *   (optional) An array of variable data.
    *
-   * @return \Drupal\Core\TypedData\TraversableTypedDataInterface|NULL
+   * @return TraversableTypedDataInterface|NULL
    *   Component schema instance or NULL if none.
    */
   public static function getComponentSchema($component_type, $variables = []) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/component_schema/src/ComponentProcessor.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * The YAML discovery classes to find all .component_schema.yml files.
    *
-   * @var \Drupal\Core\Discovery\YamlDiscovery[]
+   * @var YamlDiscovery[]
    */
   protected $yamlDiscovery = [];

@@ @@
   /**
    * Constructs a new ComponentProcessor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation.
    */
   public function __construct(ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler, TranslationInterface $string_translation) {
@@ @@
    * @param string $provider_type
    *   The type of extension.
    *
-   * @return \Drupal\Core\Discovery\YamlDiscovery
+   * @return YamlDiscovery
    *   The YAML discovery.
    */
   protected function getYamlDiscovery($provider_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/component_schema/src/Component/TypedComponentManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\component_schema\Component;

+use Drupal\component_schema\Component\Schema\ComponentMapping;
 use Drupal\Core\Config\TypedConfigManagerInterface;
 use Drupal\Core\Template\TwigEnvironment;

@@ @@
    * @param string $component_type
    *   The component type.
    *
-   * @return \Drupal\component_schema\Component\Schema\ComponentMapping
+   * @return ComponentMapping
    *   The schema object.
    */
   public function getComponentTypeSchema($component_type);
@@ @@
   /**
    * Sets the Twig environment.
    *
-   * @param \Drupal\Core\Template\TwigEnvironment $twig
+   * @param TwigEnvironment $twig
    *   The Twig environment.
    */
   public function setTwigEnvironment(TwigEnvironment $twig);
@@ @@
   /**
    * Gets the Twig environment.
    *
-   * @return \Drupal\Core\Template\TwigEnvironment
+   * @return TwigEnvironment
    *   The Twig environment.
    */
   public function getTwigEnvironment();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/component_schema/src/Component/TypedComponentManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\component_schema\Component;

+use Drupal\Core\Config\Schema\Element;
 use Drupal\Component\Graph\Graph;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\StorageInterface;
@@ @@
   /**
    * The Twig environment.
    *
-   * @var \Drupal\Core\Template\TwigEnvironment
+   * @var TwigEnvironment
    */
   protected $twig;

@@ @@
   /**
    * The component schema wrapper objects for components.
    *
-   * @var \Drupal\Core\Config\Schema\Element[]
+   * @var Element[]
    */
   protected $schemas = [];

@@ @@
   /**
    * Creates a new typed configuration manager.
    *
-   * @param \Drupal\Core\Config\StorageInterface $configStorage
+   * @param StorageInterface $configStorage
    *   The storage object to use for reading schema data
-   * @param \Drupal\Core\Config\StorageInterface $schemaStorage
+   * @param StorageInterface $schemaStorage
    *   The storage object to use for reading schema data
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend to use for caching the definitions.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver.
    */
   public function __construct(StorageInterface $configStorage, StorageInterface $schemaStorage, CacheBackendInterface $cache, ModuleHandlerInterface $module_handler, ClassResolverInterface $class_resolver) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/component_schema/src/Component/Schema/ComponentVariableAttributeProviderTrait.php:10

    ---------- begin diff ----------
@@ @@
    *
    * @param string $value
    *   The class to add.
-   * @param \Drupal\Core\Template\Attribute $attribute
+   * @param Attribute $attribute
    *   An Attribute object.
    *
    * @return $this
@@ @@
    *
    * @param string $value
    *   The value to set.
-   * @param \Drupal\Core\Template\Attribute $attribute
+   * @param Attribute $attribute
    *   An Attribute object.
    *
    * @return $this
@@ @@
    *
    * @param mixed &$value
    *   A component variable value.
-   * @param \Drupal\Core\Template\Attribute $attribute
+   * @param Attribute $attribute
    *   An Attribute object.
    *
    * @todo Write this method.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/component_schema/src/Component/Schema/ComponentTemplate.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\component_schema\Component\Schema;

+use Drupal\Core\Template\TwigEnvironment;
 use Drupal\Core\Template\Attribute;

 /**
@@ @@
       $template = $value['template'];
       $variables = $value['variables'] ?? [];

-      /** @var \Drupal\Core\Template\TwigEnvironment $twig */
+      /** @var TwigEnvironment $twig */
       $twig = $this
         ->getTypedDataManager()
         ->getTwigEnvironment();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/component_schema/src/Component/Schema/ComponentStringDataAttributeProvider.php:20

    ---------- begin diff ----------
@@ @@
    *
    * @param string $value
    *   The class to add.
-   * @param \Drupal\Core\Template\Attribute $attribute
+   * @param Attribute $attribute
    *   An Attribute object.
    *
    * @return $this
@@ @@
    *
    * @param string $value
    *   The value to set.
-   * @param \Drupal\Core\Template\Attribute $attribute
+   * @param Attribute $attribute
    *   An Attribute object.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/component_schema/src/Component/Schema/ComponentComponent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\component_schema\Component\Schema;

+use Drupal\Core\Template\TwigEnvironment;
 use Drupal\Core\Template\Attribute;

 /**
@@ @@

       $process_variables = $schema->getValue();

-      /** @var \Drupal\Core\Template\TwigEnvironment $twig */
+      /** @var TwigEnvironment $twig */
       $twig = $this
         ->getTypedDataManager()
         ->getTwigEnvironment();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/component_schema/src/Component/Schema/ComponentBooleanDataAttributeProvider.php:20

    ---------- begin diff ----------
@@ @@
    *
    * @param string $value
    *   The class to add.
-   * @param \Drupal\Core\Template\Attribute $attribute
+   * @param Attribute $attribute
    *   An Attribute object.
    *
    * @return $this
@@ @@
    *
    * @param string $value
    *   The value to set.
-   * @param \Drupal\Core\Template\Attribute $attribute
+   * @param Attribute $attribute
    *   An Attribute object.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/component_schema/src/Component/ComponentStorageManager.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The memory storage.
    *
-   * @var \Drupal\Core\Config\MemoryStorage
+   * @var MemoryStorage
    */
   protected $storage;

@@ @@
   /**
    * The provided component schema storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $provided;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The used lock backend instance.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;

@@ @@
   /**
    * The component processor.
    *
-   * @var \Drupal\component_schema\ComponentProcessor
+   * @var ComponentProcessor
    */
   protected $componentProcessor;

@@ @@
   /**
    * ExportStorageManager constructor.
    *
-   * @param \Drupal\Core\Config\StorageInterface $active
+   * @param StorageInterface $active
    *   The provided component schema storage to prime the component storage.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The used lock backend instance.
-   * @param \Drupal\component_schema\ComponentProcessor $component_processor
+   * @param ComponentProcessor $component_processor
    *   The component processor.
    */
   public function __construct(StorageInterface $provided, EventDispatcherInterface $event_dispatcher, LockBackendInterface $lock, ComponentProcessor $component_processor) {
@@ @@
       }
     }

-    $this->eventDispatcher->dispatch(ComponentSchemaStorageEvents::TRANSFORM_COLLECT, new ComponentStorageTransformEvent($this->storage));
+    $this->eventDispatcher->dispatch(new ComponentStorageTransformEvent($this->storage), ComponentSchemaStorageEvents::TRANSFORM_COLLECT);

     return new ReadOnlyStorage($this->storage);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/component_schema/modules/component_schema_ui_patterns/src/Element/ComponentPattern.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\component_schema_ui_patterns\Element;

+use Drupal\Core\Config\Schema\Element;
 use Drupal\component_schema\ComponentSchema;
 use Drupal\Core\Security\TrustedCallbackInterface;
 use Drupal\Core\TypedData\TraversableTypedDataInterface;
@@ @@
   /**
    * The component schema wrapper object for the current component object.
    *
-   * @var \Drupal\Core\Config\Schema\Element
+   * @var Element
    */
   protected $schema;

@@ @@
    * @param array $element
    *   Render array.
    *
-   * @return \Drupal\Core\TypedData\TraversableTypedDataInterface|NULL
+   * @return TraversableTypedDataInterface|NULL
    *   Component schema instance or NULL if none.
    */
   public static function getComponent($element) {
@@ @@
    *
    * @param array $element
    *   Render array.
-   * @param \Drupal\Core\TypedData\TraversableTypedDataInterface $component
+   * @param TraversableTypedDataInterface $component
    *   Component schema instance.
    * @param string $key
    *   The component variable key.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [ERROR] Could not process                                                      
         "modules/contrib/component_schema/src/Plugin/Styleguide/ComponentSchema.p
         hp" file, due to:                                                      
         "Analyze error: "Class Drupal\styleguide\Plugin\StyleguidePluginBase not
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/component_schema/modules/component_schema_ui_patterns/sr
         c/Plugin/UiPatterns/Pattern/ComponentSchemaPattern.php" file, due to:  
         "Analyze error: "Class Drupal\ui_patterns\Plugin\PatternBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/component_schema/modules/component_schema_ui_patterns/sr
         c/Plugin/Deriver/ComponentSchemaDeriver.php" file, due to:             
         "Analyze error: "Class                                                 
         Drupal\ui_patterns\Plugin\Deriver\AbstractPatternsDeriver not found.". 
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 1 nodes were removed                                                 

