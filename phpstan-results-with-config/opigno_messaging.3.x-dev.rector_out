modules/contrib/opigno_messaging/opigno_messaging.install
modules/contrib/opigno_messaging/opigno_messaging.module
modules/contrib/opigno_messaging/src/Access/UpdateThreadAccess.php
modules/contrib/opigno_messaging/src/Ajax/OpignoScrollToLastMessage.php
modules/contrib/opigno_messaging/src/Controller/OpignoMessageThreadController.php
modules/contrib/opigno_messaging/src/Form/OpignoPrivateMessageThreadForm.php
modules/contrib/opigno_messaging/src/Form/PrivateMessageForm.php
modules/contrib/opigno_messaging/src/Form/PrivateMessageThreadDeleteForm.php
modules/contrib/opigno_messaging/src/OpignoMessagingServiceProvider.php
modules/contrib/opigno_messaging/src/Plugin/views/filter/OpignoAvailableMessageThreadIdsFilter.php
modules/contrib/opigno_messaging/src/Plugin/views/filter/OpignoMessageThreadNameFilter.php
modules/contrib/opigno_messaging/src/Plugin/views/sort/OpignoMessageThreadsSorting.php
modules/contrib/opigno_messaging/src/Routing/RouteSubscriber.php
modules/contrib/opigno_messaging/src/Services/OpignoMessageThread.php
modules/contrib/opigno_messaging/src/Services/OpignoPrivateMessageService.php
modules/contrib/opigno_messaging/tests/src/Functional/LoadTest.php

12 files with changes
=====================

1) modules/contrib/opigno_messaging/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\opigno_messaging\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
@@ @@
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/opigno_messaging/src/Services/OpignoPrivateMessageService.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Opigno private messages thread service.
    *
-   * @var \Drupal\opigno_messaging\Services\OpignoMessageThread
+   * @var OpignoMessageThread
    */
   protected $msgThreadService;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/opigno_messaging/src/Services/OpignoMessageThread.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_messaging\Services;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\Cache;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The private message thread entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|null
+   * @var EntityStorageInterface|null
    */
   protected $threadStorage = NULL;

@@ @@
   /**
    * The mail service.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailService;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * The DB connection service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * OpignoMessageThread constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   The user data service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The DB connection service.
    */
   public function __construct(
@@ @@
   /**
    * Get the messages thread data: image, title, date, text.
    *
-   * @param \Drupal\private_message\Entity\PrivateMessageThreadInterface $thread
+   * @param PrivateMessageThreadInterface $thread
    *   The message thread to get the data for.
    *
    * @return array
@@ @@
       ]);
     }
     else {
-      $path = drupal_get_path('theme', 'aristotle') . '/src/images/content/group_profile.svg';
+      $path = \Drupal::service('extension.list.theme')->getPath('aristotle') . '/src/images/content/group_profile.svg';
       $image = [
         '#theme' => 'image',
-        '#uri' => file_exists($path) ? file_url_transform_relative(base_path() . $path) : '',
+        '#uri' => file_exists($path) ? \Drupal::service('file_url_generator')->transformRelative(base_path() . $path) : '',
         '#alt' => $title,
         '#title' => $title,
       ];
@@ @@
   /**
    * Get the amount of unread messages in the given thread.
    *
-   * @param \Drupal\private_message\Entity\PrivateMessageThreadInterface $thread
+   * @param PrivateMessageThreadInterface $thread
    *   The thread to get unread messages amount for.
    *
    * @return int
@@ @@
   /**
    * Get the formatted date of the message.
    *
-   * @param \Drupal\private_message\Entity\PrivateMessage $message
+   * @param PrivateMessage $message
    *   The private message entity to get the date for.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   The message formatted date.
    */
   public function getMessageFormattedDate(PrivateMessage $message) {
@@ @@
    *   Whether the new thread should be created in case if it doesn't exist for
    *   the given members or not.
    *
-   * @return \Drupal\private_message\Entity\PrivateMessageThreadInterface|null
+   * @return PrivateMessageThreadInterface|null
    *   The private message thread for the given members.
    */
   public function getThreadForMembers(array $uids, bool $create = TRUE): ?PrivateMessageThreadInterface {
@@ @@
   /**
    * Send the email to all thread members when the new message is created.
    *
-   * @param \Drupal\private_message\Entity\PrivateMessageThreadInterface $thread
+   * @param PrivateMessageThreadInterface $thread
    *   The PM thread.
-   * @param \Drupal\private_message\Entity\PrivateMessageInterface $message
+   * @param PrivateMessageInterface $message
    *   The message.
    */
   public function sendEmailToThreadMembers(PrivateMessageThreadInterface $thread, PrivateMessageInterface $message): void {
@@ @@
   /**
    * Prepare the render array to display the thread actions.
    *
-   * @param \Drupal\private_message\Entity\PrivateMessageThreadInterface $thread
+   * @param PrivateMessageThreadInterface $thread
    *   The PM thread to get actions for.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/opigno_messaging/src/Plugin/views/sort/OpignoMessageThreadsSorting.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The router service.
    *
-   * @var \Drupal\Core\Routing\AccessAwareRouterInterface
+   * @var AccessAwareRouterInterface
    */
   protected $router;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $request;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/opigno_messaging/src/Plugin/views/filter/OpignoMessageThreadNameFilter.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The join manager service.
    *
-   * @var \Drupal\views\Plugin\ViewsHandlerManager
+   * @var ViewsHandlerManager
    */
   protected $joinManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/opigno_messaging/src/Plugin/views/filter/OpignoAvailableMessageThreadIdsFilter.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Opigno messages service.
    *
-   * @var array|\Drupal\opigno_messaging\Services\OpignoMessageThread
+   * @var array|OpignoMessageThread
    */
   protected $messageManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/opigno_messaging/src/Form/PrivateMessageForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/opigno_messaging/src/Form/OpignoPrivateMessageThreadForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_messaging\Form;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityViewBuilderInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Ajax\AjaxResponse;
@@ @@
   /**
    * The loaded current user entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|null
+   * @var EntityInterface|null
    */
   protected $currentUser = NULL;

@@ @@
   /**
    * The PM thread entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|null
+   * @var EntityStorageInterface|null
    */
   protected $threadStorage = NULL;

@@ @@
   /**
    * The PM entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|null
+   * @var EntityStorageInterface|null
    */
   protected $messageStorage = NULL;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Learning path members manager service.
    *
-   * @var \Drupal\opigno_learning_path\LearningPathMembersManager
+   * @var LearningPathMembersManager
    */
   protected $lpMembersManager;

@@ @@
   /**
    * Opigno PM manager service.
    *
-   * @var \Drupal\opigno_messaging\Services\OpignoMessageThread
+   * @var OpignoMessageThread
    */
   protected $pmService;

@@ @@
   /**
    * PM thread view builder service.
    *
-   * @var \Drupal\Core\Entity\EntityViewBuilderInterface
+   * @var EntityViewBuilderInterface
    */
   protected $threadViewBuilder;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * OpignoPrivateMessageThreadForm constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\opigno_learning_path\LearningPathMembersManager $lp_members_manager
+   * @param LearningPathMembersManager $lp_members_manager
    *   The LP members manager service.
-   * @param \Drupal\opigno_messaging\Services\OpignoMessageThread $pm_service
+   * @param OpignoMessageThread $pm_service
    *   The private messages manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response object.
    */
   public function showMembersAjax(array $form, FormStateInterface $form_state): AjaxResponse {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response.
    */
   public function ajaxSubmit(array $form, FormStateInterface $form_state): AjaxResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/opigno_messaging/src/Controller/OpignoMessageThreadController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_messaging\Controller;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Form\EnforcedResponseException;
+use Drupal\Core\Form\FormAjaxException;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Ajax\AjaxResponse;
@@ @@
   /**
    * The DB connection service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The private messages storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|null
+   * @var EntityStorageInterface|null
    */
   protected $messageStorage = NULL;

@@ @@
   /**
    * Opigno private messaging manager service.
    *
-   * @var \Drupal\opigno_messaging\Services\OpignoMessageThread
+   * @var OpignoMessageThread
    */
   protected $messageService;

@@ @@
   /**
    * OpignoMessageThreadController constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The DB connection service.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder service.
-   * @param \Drupal\opigno_messaging\Services\OpignoMessageThread $pm_service
+   * @param OpignoMessageThread $pm_service
    *   The private messages manager service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
    */
   public function __construct(
@@ @@
    *   The thread ID to get the form for. If 0 is given, creation form will be
    *   rendered.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response object.
    *
-   * @throws \Drupal\Core\Form\EnforcedResponseException
-   * @throws \Drupal\Core\Form\FormAjaxException
+   * @throws EnforcedResponseException
+   * @throws FormAjaxException
    */
   private function prepareThreadFormResponse(int $tid = 0): AjaxResponse {
     $response = new AjaxResponse();
@@ @@
   /**
    * Get the private messages thread create form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response object.
    *
-   * @throws \Drupal\Core\Form\EnforcedResponseException
-   * @throws \Drupal\Core\Form\FormAjaxException
+   * @throws EnforcedResponseException
+   * @throws FormAjaxException
    */
   public function getThreadForm(): AjaxResponse {
     return $this->prepareThreadFormResponse();
@@ @@
   /**
    * Get the private messages thread edit form.
    *
-   * @param \Drupal\private_message\Entity\PrivateMessageThreadInterface $private_message_thread
+   * @param PrivateMessageThreadInterface $private_message_thread
    *   The thread to get the form for.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response object.
    *
-   * @throws \Drupal\Core\Form\EnforcedResponseException
-   * @throws \Drupal\Core\Form\FormAjaxException
+   * @throws EnforcedResponseException
+   * @throws FormAjaxException
    */
   public function getEditThreadForm(PrivateMessageThreadInterface $private_message_thread): AjaxResponse {
     $tid = (int) $private_message_thread->id();
@@ @@
   /**
    * Get the delete thread confirmation form.
    *
-   * @param \Drupal\private_message\Entity\PrivateMessageThreadInterface $private_message_thread
+   * @param PrivateMessageThreadInterface $private_message_thread
    *   The thread to be deleted.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response object.
    */
   public function getDeleteThreadForm(PrivateMessageThreadInterface $private_message_thread): AjaxResponse {
@@ @@
   /**
    * Close the modal.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response object.
    */
   public function closeModal(): AjaxResponse {
@@ @@
    * @param int $uid
    *   The user ID to create message thread with.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @return RedirectResponse|null
    *   The redirect response.
    */
   public function redirectToNewThread(int $uid): ?RedirectResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/opigno_messaging/src/Access/UpdateThreadAccess.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Checks the access.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check the access to.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in user's account.
-   * @param \Drupal\private_message\Entity\PrivateMessageThreadInterface $private_message_thread
+   * @param PrivateMessageThreadInterface $private_message_thread
    *   The thread to check the access to.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, AccountInterface $account, PrivateMessageThreadInterface $private_message_thread): AccessResultInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/opigno_messaging/opigno_messaging.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\UserInterface;
+use Drupal\group\GroupMembership;
+use Drupal\group\Entity\GroupInterface;
+use Drupal\Core\Entity\ContentEntityFormInterface;
 /**
  * @file
  * Contains opigno_messaging.module.
@@ @@
  * @param int $group_id
  *   Group.
  *
- * @return \Drupal\user\UserInterface[]
+ * @return UserInterface[]
  *   User ID.
  */
 function opigno_messaging_get_user_for_group($group_id = NULL, $show_all = FALSE) {
@@ @@
   if ($show_all) {
     if ($members) {
       $users = array_map(function ($member) {
-        /** @var \Drupal\group\GroupMembership $member */
+        /** @var GroupMembership $member */
         return $member->getUser();
       }, $members);

       $users = array_filter($users, function ($user) {
-        /** @var \Drupal\user\UserInterface $user */
+        /** @var UserInterface $user */
         return $user->id() > 0 && $user->isActive();
       });
     }
@@ @@

   if (opigno_messaging_user_is_manager($member_roles)) {
     $users = array_map(function ($member) {
-      /** @var \Drupal\group\GroupMembership $member */
+      /** @var GroupMembership $member */
       return $member->getUser();
     }, $members);

     $users = array_filter($users, function ($user) {
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       return $user->id() > 0 && $user->isActive();
     });
   }
@@ @@
 /**
  * Check socials sharing settings.
  *
- * @param \Drupal\Core\Entity\EntityInterface $group
+ * @param EntityInterface $group
  *
  * @return bool
  *   Social sharing is allowed.
@@ @@
 /**
  * Checks the member roles is an manager.
  *
- * @param \Drupal\group\GroupMembership[] $member_roles
+ * @param GroupMembership[] $member_roles
  *   Group member roles.
  *
  * @return bool
@@ @@

   if ($current_user->hasPermission('message anyone regardless of groups')) {
     return array_filter(User::loadMultiple(), function ($user) {
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       return $user->id() > 0;
     });
   }
@@ @@
   $groups = opigno_messaging_get_groups('opigno_class')
     + opigno_messaging_get_groups('learning_path');

-  /** @var \Drupal\group\Entity\GroupInterface $group */
+  /** @var GroupInterface $group */
   foreach ($groups as $group_info) {
     $group = Group::load($group_info['entity_id']);
     $members = $group->getMembers();
@@ @@
     $show_all
   ) {
     return array_filter(User::loadMultiple(), function ($user) {
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       return $user->id() > 0 && $user->isActive();
     });
   }
@@ @@

   if (!$current_user->hasPermission('message all groups')) {
     $groups = array_filter($groups, function ($group) use ($current_user) {
-      /** @var \Drupal\group\Entity\GroupInterface $group */
+      /** @var GroupInterface $group */
       return $group->getMember($current_user) !== FALSE;
     });
   }

   return array_map(function ($group) {
-    /** @var \Drupal\group\Entity\Group $group */
+    /** @var Group $group */
     return [
       'entity_id' => $group->id(),
       'title' => $group->label(),
@@ @@
  *
  * @param array $form
  *   The PM creation form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state object.
  */
 function opigno_messaging_private_message_add_form_submit(array $form, FormStateInterface $form_state) {
-  /** @var \Drupal\Core\Entity\ContentEntityFormInterface $form_obj */
+  /** @var ContentEntityFormInterface $form_obj */
   $form_obj = $form_state->getFormObject();
-  /** @var \Drupal\opigno_messaging\Services\OpignoMessageThread $pm_service */
+  /** @var OpignoMessageThread $pm_service */
   $pm_service = \Drupal::service('opigno_messaging.manager');
   $form_state->cleanValues();
-  /** @var \Drupal\private_message\Entity\PrivateMessageInterface $entity */
+  /** @var PrivateMessageInterface $entity */
   $entity = $form_obj->buildEntity($form, $form_state);

   // Get the thread and send the email to all participants.
@@ @@
 ) {
   if (isset($build['last_message'])
     && $build['#view_mode'] === 'preview') {
-    /** @var \Drupal\private_message\Entity\PrivateMessageThreadInterface $entity */
+    /** @var PrivateMessageThreadInterface $entity */
     $messages = $entity->getMessages();
     $last_message = array_pop($messages);
     $view_builder = \Drupal::entityTypeManager()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


12) modules/contrib/opigno_messaging/opigno_messaging.install:52

    ---------- begin diff ----------
@@ @@
  * Import configs.
  */
 function opigno_messaging_update_9001() {
-  $path = drupal_get_path('module', 'opigno_messaging') . '/config/optional/';
+  $path = \Drupal::service('extension.list.module')->getPath('opigno_messaging') . '/config/optional/';
   $source = new FileStorage($path);

   // Import new fields configs.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 12 files have been changed by Rector                                      

