modules/contrib/geysir/geysir.api.php
modules/contrib/geysir/geysir.module
modules/contrib/geysir/geysir.theme.inc
modules/contrib/geysir/src/Ajax/GeysirCloseModalDialogCommand.php
modules/contrib/geysir/src/Ajax/GeysirOpenModalDialogCommand.php
modules/contrib/geysir/src/Ajax/GeysirReattachBehaviors.php
modules/contrib/geysir/src/Controller/GeysirControllerBase.php
modules/contrib/geysir/src/Controller/GeysirCutPasteController.php
modules/contrib/geysir/src/Controller/GeysirModalController.php
modules/contrib/geysir/src/Form/GeysirFormEntityRevisionTrait.php
modules/contrib/geysir/src/Form/GeysirModalParagraphAddForm.php
modules/contrib/geysir/src/Form/GeysirModalParagraphAddSelectTypeForm.php
modules/contrib/geysir/src/Form/GeysirModalParagraphDeleteForm.php
modules/contrib/geysir/src/Form/GeysirModalParagraphForm.php
modules/contrib/geysir/src/Form/GeysirParagraphDeleteForm.php
modules/contrib/geysir/src/Form/GeysirParagraphForm.php

7 files with changes
====================

1) modules/contrib/geysir/src/Form/GeysirParagraphForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\geysir\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $route_match = $this->getRouteMatch();
@@ @@
    * @param $parent_entity_type
    * @param $parent_entity_revision
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return EntityInterface|null
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getParentRevisionOrParent($parent_entity_type, $parent_entity_revision) {
     $entity_storage = $this->entityTypeManager->getStorage($parent_entity_type);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/geysir/src/Form/GeysirParagraphDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\geysir\Form;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityDeleteForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
    * @param $parent_entity_type
    * @param $parent_entity_revision
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return EntityInterface|null
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getParentRevisionOrParent($parent_entity_type, $parent_entity_revision) {
     $entity_storage = $this->entityTypeManager->getStorage($parent_entity_type);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/geysir/src/Form/GeysirModalParagraphAddSelectTypeForm.php:44

    ---------- begin diff ----------
@@ @@
     $bundles = $this->getAllowedBundles($bundles);
     $paragraphs_type_storage = \Drupal::entityTypeManager()->getStorage('paragraphs_type');

-    $default_icon = drupal_get_path('module', 'geysir') . '/images/geysir-puzzle.svg';
+    $default_icon = \Drupal::service('extension.list.module')->getPath('geysir') . '/images/geysir-puzzle.svg';

     foreach ($bundles as $bundle => $label) {
       $icon_url = $default_icon;
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/geysir/src/Form/GeysirFormEntityRevisionTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\geysir\Form;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\RevisionableInterface;
@@ @@
   /**
    * Saves the revision on the parent entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The parent entity.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The system time.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    *
    * @return int
    *   Save status.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function saveParentEntityRevision(EntityInterface $entity, TimeInterface $time, AccountInterface $current_user): int {
     if ($entity instanceof RevisionableInterface) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/geysir/src/Controller/GeysirModalController.php:26

    ---------- begin diff ----------
@@ @@
         ]);
         $form = $this->entityFormBuilder()->getForm($newParagraph, 'geysir_modal_add', []);

-        $response->addCommand(new GeysirOpenModalDialogCommand($this->t('Add @paragraph_title', ['@paragraph_title' => $paragraph_title]), render($form)));
+        $response->addCommand(new GeysirOpenModalDialogCommand($this->t('Add @paragraph_title', ['@paragraph_title' => $paragraph_title]), \Drupal::service('renderer')->render($form)));
       }
       else {
         $bundle_fields = $this->entityFieldManager->getFieldDefinitions($parent_entity_type, $entity->bundle());
@@ @@
         ];

         $form = \Drupal::formBuilder()->getForm('\Drupal\geysir\Form\GeysirModalParagraphAddSelectTypeForm', $routeParams, $bundles);
-        $response->addCommand(new GeysirOpenModalDialogCommand($this->t('Add @paragraph_title', ['@paragraph_title' => $paragraph_title]), render($form)));
+        $response->addCommand(new GeysirOpenModalDialogCommand($this->t('Add @paragraph_title', ['@paragraph_title' => $paragraph_title]), \Drupal::service('renderer')->render($form)));
       }
       return $response;
     }
@@ @@
         ]);
         $form = $this->entityFormBuilder()->getForm($newParagraph, 'geysir_modal_add', []);

-        $response->addCommand(new GeysirOpenModalDialogCommand($this->t('Add @paragraph_title', ['@paragraph_title' => $paragraph_title]), render($form)));
+        $response->addCommand(new GeysirOpenModalDialogCommand($this->t('Add @paragraph_title', ['@paragraph_title' => $paragraph_title]), \Drupal::service('renderer')->render($form)));
       }
       else {

@@ @@
         ];

         $form = \Drupal::formBuilder()->getForm('\Drupal\geysir\Form\GeysirModalParagraphAddSelectTypeForm', $routeParams, $bundles);
-        $response->addCommand(new GeysirOpenModalDialogCommand($this->t('Add @paragraph_title', ['@paragraph_title' => $paragraph_title]), render($form)));
+        $response->addCommand(new GeysirOpenModalDialogCommand($this->t('Add @paragraph_title', ['@paragraph_title' => $paragraph_title]), \Drupal::service('renderer')->render($form)));
       }

       return $response;
@@ @@
       $response = new AjaxResponse();
       $form = $this->entityFormBuilder()->getForm($paragraph_revision, 'geysir_modal_edit', []);
       $paragraph_title = $this->getParagraphTitle($parent_entity_type, $parent_entity_bundle, $field);
-      $response->addCommand(new GeysirOpenModalDialogCommand($this->t('Edit @paragraph_title', ['@paragraph_title' => $paragraph_title]), render($form)));
+      $response->addCommand(new GeysirOpenModalDialogCommand($this->t('Edit @paragraph_title', ['@paragraph_title' => $paragraph_title]), \Drupal::service('renderer')->render($form)));

       return $response;
     }
@@ @@
       $translated_paragraph = $paragraph->addTranslation($langcode, $paragraph->toArray());
       $form = $this->entityFormBuilder()->getForm($translated_paragraph, 'geysir_modal_edit', []);
       $paragraph_title = $this->getParagraphTitle($parent_entity_type, $parent_entity_bundle, $field);
-      $response->addCommand(new GeysirOpenModalDialogCommand($this->t('Translate @paragraph_title', ['@paragraph_title' => $paragraph_title]), render($form)));
+      $response->addCommand(new GeysirOpenModalDialogCommand($this->t('Translate @paragraph_title', ['@paragraph_title' => $paragraph_title]), \Drupal::service('renderer')->render($form)));

       return $response;
     }
@@ @@

       $response = new AjaxResponse();
       $paragraph_title = $this->getParagraphTitle($parent_entity_type, $parent_entity_bundle, $field);
-      $response->addCommand(new OpenModalDialogCommand($this->t('Delete @paragraph_title', ['@paragraph_title' => $paragraph_title]), render($form), $options));
+      $response->addCommand(new OpenModalDialogCommand($this->t('Delete @paragraph_title', ['@paragraph_title' => $paragraph_title]), \Drupal::service('renderer')->render($form), $options));
       return $response;
     }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/geysir/src/Controller/GeysirControllerBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\geysir\Controller;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
    * @param $parent_entity_type
    * @param $parent_entity_revision
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return EntityInterface|null
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getParentRevisionOrParent($parent_entity_type, $parent_entity_revision) {
     $entity_storage = $this->entityTypeManager->getStorage($parent_entity_type);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/geysir/geysir.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\paragraphs\Entity\Paragraph;
+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList;
+use Drupal\Core\Field\BaseFieldDefinition;
+use Drupal\field\Entity\FieldStorageConfig;
 /**
  * @file
  * Geysir module file.
@@ @@
 /**
  * Gets the first parent that is not a paragraph.
  *
- * @param Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *
- * @return Drupal\Core\Entity\EntityInterface $entity
+ * @return EntityInterface $entity
  */
 function geysir_get_non_paragraph_parent(EntityInterface $entity) {
   if ($entity->getEntityTypeId() != 'paragraph') {
@@ @@
     return $entity;
   }
   else {
-    /** @var Drupal\paragraphs\Entity\Paragraph $entity */
+    /** @var Paragraph $entity */
     return geysir_get_non_paragraph_parent($entity->getParentEntity());
   }
 }
@@ @@
   }

   $element = &$vars['element'];
-  /** @var Drupal\Core\Entity\FieldableEntityInterface $parent */
+  /** @var FieldableEntityInterface $parent */
   $parent = $element['#object'];

   // Skip nested paragraphs.
@@ @@
     return;
   }

-  /** @var Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList $field */
+  /** @var EntityReferenceRevisionsFieldItemList $field */
   $field = $element['#items'];
   $field_definition = $field->getFieldDefinition();
   $field_storage_definition = $field_definition->getFieldStorageDefinition();
@@ @@
   $delta = 0;
   while (!empty($element[$delta])) {
     $links = [];
-    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
+    /** @var Paragraph $paragraph */
     $paragraph = $element[$delta]['#paragraph'];
     $paragraph_to_cut = $paragraph;
     // Use the parent revision id if available, otherwise the parent id.
@@ @@
     $vars['items'][$delta]['content']['#geysir_field_paragraph_links'] = Drupal::service('renderer')
       ->render($links_array);

-    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
+    /** @var Paragraph $paragraph */
     $paragraph = $vars['items'][$delta]['content']['#paragraph'];
     if (
       $paragraph->isTranslatable() &&
@@ @@
  * Using hook_preprocess_node().
  */
 function geysir_preprocess_node(&$vars) {
-  /** @var \Drupal\node\Entity\Node $node */
+  /** @var Node $node */
   $node = $vars["node"];

   if (
@@ @@
   // Check if multiple paragraph fields.
   $paragraph_fields = [];
   foreach ($field_definitions as $field_definition) {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition $field_Definition */
+    /** @var BaseFieldDefinition $field_Definition */
     if ($field_definition->getType() == 'entity_reference_revisions') {
-      /** @var \Drupal\field\Entity\FieldStorageConfig $field_storage_definition */
+      /** @var FieldStorageConfig $field_storage_definition */
       $field_storage_definition = $field_definition->getFieldStorageDefinition();
       if ($field_storage_definition->getSetting('target_type') == 'paragraph') {
         $paragraph_fields[$field_storage_definition->get('field_name')] = $field_definition->getLabel();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 7 files have been changed by Rector                                       

