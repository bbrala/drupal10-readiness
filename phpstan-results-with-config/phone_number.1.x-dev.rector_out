modules/contrib/phone_number/modules/sms_phone_number/sms_phone_number.api.php
modules/contrib/phone_number/modules/sms_phone_number/sms_phone_number.install
modules/contrib/phone_number/modules/sms_phone_number/sms_phone_number.module
modules/contrib/phone_number/modules/sms_phone_number/sms_phone_number.views.inc
modules/contrib/phone_number/modules/sms_phone_number/src/Element/SmsPhoneNumber.php
modules/contrib/phone_number/modules/sms_phone_number/src/Feeds/Target/SmsPhoneNumber.php
modules/contrib/phone_number/modules/sms_phone_number/src/Plugin/Field/FieldFormatter/SmsPhoneNumberCountryFormatter.php
modules/contrib/phone_number/modules/sms_phone_number/src/Plugin/Field/FieldFormatter/SmsPhoneNumberInternationalFormatter.php
modules/contrib/phone_number/modules/sms_phone_number/src/Plugin/Field/FieldFormatter/SmsPhoneNumberLocalFormatter.php
modules/contrib/phone_number/modules/sms_phone_number/src/Plugin/Field/FieldFormatter/SmsPhoneNumberVerifiedFormatter.php
modules/contrib/phone_number/modules/sms_phone_number/src/Plugin/Field/FieldType/SmsPhoneNumberItem.php
modules/contrib/phone_number/modules/sms_phone_number/src/Plugin/Field/FieldWidget/SmsPhoneNumberWidget.php
modules/contrib/phone_number/modules/sms_phone_number/src/Plugin/TfaValidation/SmsPhoneNumberTfa.php
modules/contrib/phone_number/modules/sms_phone_number/src/Plugin/Validation/Constraint/SmsPhoneNumberConstraint.php
modules/contrib/phone_number/modules/sms_phone_number/src/Plugin/Validation/Constraint/SmsPhoneNumberValidator.php
modules/contrib/phone_number/modules/sms_phone_number/src/Plugin/rest/resource/RequestVerificationCodeResource.php
modules/contrib/phone_number/modules/sms_phone_number/src/SmsPhoneNumberUtil.php
modules/contrib/phone_number/modules/sms_phone_number/src/SmsPhoneNumberUtilInterface.php
modules/contrib/phone_number/phone_number.install
modules/contrib/phone_number/phone_number.module
modules/contrib/phone_number/phone_number.views.inc
modules/contrib/phone_number/src/Element/PhoneNumber.php
modules/contrib/phone_number/src/Exception/CountryException.php
modules/contrib/phone_number/src/Exception/ParseException.php
modules/contrib/phone_number/src/Exception/PhoneNumberException.php
modules/contrib/phone_number/src/Exception/TypeException.php
modules/contrib/phone_number/src/Feeds/Target/PhoneNumber.php
modules/contrib/phone_number/src/PhoneNumberUtil.php
modules/contrib/phone_number/src/PhoneNumberUtilInterface.php
modules/contrib/phone_number/src/Plugin/Field/FieldFormatter/PhoneNumberCountryFormatter.php
modules/contrib/phone_number/src/Plugin/Field/FieldFormatter/PhoneNumberInternationalFormatter.php
modules/contrib/phone_number/src/Plugin/Field/FieldFormatter/PhoneNumberLocalFormatter.php
modules/contrib/phone_number/src/Plugin/Field/FieldType/PhoneNumberItem.php
modules/contrib/phone_number/src/Plugin/Field/FieldWidget/PhoneNumberWidget.php
modules/contrib/phone_number/src/Plugin/Validation/Constraint/PhoneNumberConstraint.php
modules/contrib/phone_number/src/Plugin/Validation/Constraint/PhoneNumberValidator.php
modules/contrib/phone_number/src/Plugin/WebformElement/PhoneNumber.php

15 files with changes
=====================

1) modules/contrib/phone_number/src/Plugin/Validation/Constraint/PhoneNumberValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\phone_number\Plugin\Validation\Constraint;

+use Drupal\phone_number\Plugin\Field\FieldType\PhoneNumberItem;
+use Drupal\phone_number\PhoneNumberUtilInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\phone_number\Exception\PhoneNumberException;
 use libphonenumber\PhoneNumberFormat;
@@ @@
    * {@inheritdoc}
    */
   public function validate($item, Constraint $constraint) {
-    /** @var \Drupal\phone_number\Plugin\Field\FieldType\PhoneNumberItem $item */
+    /** @var PhoneNumberItem $item */
     $values = $item->getValue();
     if ((empty($values['value']) && empty($values['local_number']))) {
       return;
     }

-    /** @var \Drupal\phone_number\PhoneNumberUtilInterface $util */
+    /** @var PhoneNumberUtilInterface $util */
     $util = \Drupal::service('phone_number.util');

     $field_label = $item->getFieldDefinition()->getLabel();
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $item->getEntity();
     $entity_type = $entity->getEntityType()->getSingularLabel();
     $allowed_countries = $item->getFieldDefinition()->getSetting('allowed_countries');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/phone_number/src/Plugin/Field/FieldType/PhoneNumberItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\phone_number\Plugin\Field\FieldType;

+use libphonenumber\PhoneNumber;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Field\FieldItemBase;
@@ @@
    * {@inheritdoc}
    */
   public function preSave() {
-    /** @var \Drupal\phone_number\PhoneNumberUtilInterface $util */
+    /** @var PhoneNumberUtilInterface $util */
     $util = \Drupal::service('phone_number.util');
     $values = $this->getValue();

@@ @@
    * {@inheritdoc}
    */
   public function storageSettingsForm(array &$form, FormStateInterface $form_state, $has_data) {
-    /** @var \Drupal\phone_number\PhoneNumberUtilInterface $util */
+    /** @var PhoneNumberUtilInterface $util */
     $util = \Drupal::service('phone_number.util');

     $settings = $this->getSettings();
@@ @@
    * {@inheritdoc}
    */
   public function fieldSettingsForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\phone_number\PhoneNumberUtilInterface $util */
+    /** @var PhoneNumberUtilInterface $util */
     $util = \Drupal::service('phone_number.util');

     $settings = $this->getSettings();
@@ @@
    * {@inheritdoc}
    */
   public static function generateSampleValue(FieldDefinitionInterface $field_definition) {
-    /** @var \Drupal\phone_number\PhoneNumberUtilInterface $util */
+    /** @var PhoneNumberUtilInterface $util */
     $util = \Drupal::service('phone_number.util');

     $settings = $field_definition
@@ @@
    * @param bool $throw_exception
    *   Whether to throw phone number validity exceptions.
    *
-   * @return \libphonenumber\PhoneNumber|null
+   * @return PhoneNumber|null
    *   Phone number object, or null if not valid.
    */
   public function getPhoneNumber($throw_exception = FALSE) {
-    /** @var \Drupal\phone_number\PhoneNumberUtilInterface $util */
+    /** @var PhoneNumberUtilInterface $util */
     $util = \Drupal::service('phone_number.util');
     $values = $this->getValue();
     $number = '';
@@ @@
    *   TRUE for is unique, false otherwise. Null if phone number is not valid.
    */
   public function isUnique() {
-    /** @var \Drupal\phone_number\PhoneNumberUtilInterface $util */
+    /** @var PhoneNumberUtilInterface $util */
     $util = \Drupal::service('phone_number.util');

     $entity = $this->getEntity();
@@ @@
    *   prefix as labels.
    */
   public static function countryOptions() {
-    /** @var \Drupal\phone_number\PhoneNumberUtilInterface $util */
+    /** @var PhoneNumberUtilInterface $util */
     $util = \Drupal::service('phone_number.util');
     return $util->getCountryOptions(NULL, TRUE);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/phone_number/src/Plugin/Field/FieldFormatter/PhoneNumberInternationalFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\phone_number\Plugin\Field\FieldFormatter;

+use Drupal\phone_number\PhoneNumberUtilInterface;
+use Drupal\phone_number\Plugin\Field\FieldType\PhoneNumberItem;
 use Drupal\Core\Field\FormatterBase;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * {@inheritdoc}
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
-    /** @var \Drupal\phone_number\PhoneNumberUtilInterface $util */
+    /** @var PhoneNumberUtilInterface $util */
     $util = \Drupal::service('phone_number.util');
     $element = [];
     $settings = $this->getSettings() + static::defaultSettings();

     foreach ($items as $delta => $item) {
-      /** @var \Drupal\phone_number\Plugin\Field\FieldType\PhoneNumberItem $item */
+      /** @var PhoneNumberItem $item */
       if ($phone_number = $util->getPhoneNumber($item->getValue()['value'], NULL, $item->getValue()['extension'])) {
         if (!empty($settings['as_link'])) {
           $element[$delta] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/phone_number/src/Plugin/Field/FieldFormatter/PhoneNumberCountryFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\phone_number\Plugin\Field\FieldFormatter;

+use Drupal\phone_number\PhoneNumberUtilInterface;
+use Drupal\phone_number\Plugin\Field\FieldType\PhoneNumberItem;
 use Drupal\Core\Field\FormatterBase;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * {@inheritdoc}
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
-    /** @var \Drupal\phone_number\PhoneNumberUtilInterface $util */
+    /** @var PhoneNumberUtilInterface $util */
     $util = \Drupal::service('phone_number.util');
     $element = [];
     $settings = $this->getSettings() + static::defaultSettings();

     foreach ($items as $delta => $item) {
-      /** @var \Drupal\phone_number\Plugin\Field\FieldType\PhoneNumberItem $item */
+      /** @var PhoneNumberItem $item */
       if ($phone_number = $util->getPhoneNumber($item->getValue()['value'])) {
         if ($settings['type'] == 'code') {
           $element[$delta] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/phone_number/src/PhoneNumberUtilInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\phone_number;

+use libphonenumber\PhoneNumberUtil;
+use Drupal\phone_number\Exception\CountryException;
+use Drupal\phone_number\Exception\ParseException;
+use Drupal\phone_number\Exception\TypeException;
 use libphonenumber\PhoneNumber;

 /**
@@ @@
   /**
    * Get libphonenumber Util instance.
    *
-   * @return \libphonenumber\PhoneNumberUtil
+   * @return PhoneNumberUtil
    *   Libphonenumber utility instance.
    */
   public function libUtil();
@@ @@
    * @param null|string $extension
    *   Extension.
    *
-   * @return \libphonenumber\PhoneNumber|null
+   * @return PhoneNumber|null
    *   Phone Number object if successful.
    */
   public function getPhoneNumber($number, $country = NULL, $extension = NULL);
@@ @@
    *   Only consider number valid if it is one of these types.
    *   See \libphonenumber\PhoneNumberType for available type contants.
    *
-   * @throws \Drupal\phone_number\Exception\CountryException
+   * @throws CountryException
    *   Thrown if phone number is not valid because its country and the country
    *   provided do not match.
-   * @throws \Drupal\phone_number\Exception\ParseException
+   * @throws ParseException
    *   Thrown if phone number could not be parsed, and is thus invalid.
-   * @throws \Drupal\phone_number\Exception\TypeException
+   * @throws TypeException
    *   Thrown if phone number is an invalid type.
    *
-   * @return \libphonenumber\PhoneNumber
+   * @return PhoneNumber
    *   Libphonenumber Phone number object.
    */
   public function testPhoneNumber($number, $country = NULL, $extension = NULL, $types = NULL);
@@ @@
   /**
    * Get country code.
    *
-   * @param \libphonenumber\PhoneNumber $phone_number
+   * @param PhoneNumber $phone_number
    *   Phone number object.
    *
    * @return string
@@ @@
    *
    * Callable number is an E.164-formatted, international number.
    *
-   * @param \libphonenumber\PhoneNumber $phone_number
+   * @param PhoneNumber $phone_number
    *   Phone number object.
    * @param bool $strip_non_digits
    *   Strip non-digits from the callable number.  Optioinal, defaults to FALSE.
@@ @@
    *
    * This is an RFC3966-formatted, international number URI.
    *
-   * @param \libphonenumber\PhoneNumber $phone_number
+   * @param PhoneNumber $phone_number
    *   Phone number object.
    * @param bool $strip_extension
    *   Strip extension from the callable number.  Optioinal, defaults to FALSE.
@@ @@
    * National dialing prefix is used for certain types of numbers in some
    * regions.
    *
-   * @param \libphonenumber\PhoneNumber $phone_number
+   * @param PhoneNumber $phone_number
    *   Phone number object.
    * @param bool $strip_non_digits
    *   Strip non-digits from the national dialing prefix.  Optioinal, defaults
@@ @@
    * National number is the National (significant) Number as defined in ITU
    * Recommendation E.164.
    *
-   * @param \libphonenumber\PhoneNumber $phone_number
+   * @param PhoneNumber $phone_number
    *   Phone number object.
    * @param bool $strip_non_digits
    *   Strip non-digits from the national number.  Optioinal, defaults to FALSE.
@@ @@
    * Local number is the national number with the national dialling prefix
    * prepended when required/appropriate.
    *
-   * @param \libphonenumber\PhoneNumber $phone_number
+   * @param PhoneNumber $phone_number
    *   Phone number object.
    * @param bool $strip_non_digits
    *   Strip non-digits from the local number.  Optioinal, defaults to FALSE.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/phone_number/src/PhoneNumberUtil.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   public $moduleHandler;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   public $configFactory;

@@ @@
   /**
    * The field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   public $fieldMananger;

@@ @@
   /**
    * The country manager service.
    *
-   * @var \Drupal\Core\Locale\CountryManagerInterface
+   * @var CountryManagerInterface
    */
   public $countryManager;

@@ @@
   /**
    * PhoneNumberUtil constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   Field manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler.
-   * @param \Drupal\Core\Locale\CountryManagerInterface $country_manager
+   * @param CountryManagerInterface $country_manager
    *   Country manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityFieldManagerInterface $field_manager, ModuleHandlerInterface $module_handler, CountryManagerInterface $country_manager) {
@@ @@
    */
   public function testPhoneNumber($number, $country = NULL, $extension = NULL, $types = NULL) {
     try {
-      /** @var \libphonenumber\PhoneNumber $phone_number */
+      /** @var PhoneNumber $phone_number */
       $phone_number = $this->libUtil->parse($number, $country);
       if ($extension) {
         $phone_number->setExtension($extension);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/phone_number/src/Element/PhoneNumber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\phone_number\Element;

+use Drupal\phone_number\PhoneNumberUtilInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\phone_number\Exception\CountryException;
 use Drupal\phone_number\Exception\ParseException;
@@ @@
    * {@inheritdoc}
    */
   public static function valueCallback(&$element, $input, FormStateInterface $form_state) {
-    /** @var \Drupal\phone_number\PhoneNumberUtilInterface $util */
+    /** @var PhoneNumberUtilInterface $util */
     $util = \Drupal::service('phone_number.util');
     $result = [];
     if ($input) {
@@ @@
    *
    * @param array $element
    *   Element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    * @param array $complete_form
    *   Complete form.
@@ @@
    *   Processed array.
    */
   public function phoneNumberProcess(array $element, FormStateInterface $form_state, array $complete_form) {
-    /** @var \Drupal\phone_number\PhoneNumberUtilInterface $util */
+    /** @var PhoneNumberUtilInterface $util */
     $util = \Drupal::service('phone_number.util');
     $element['#tree'] = TRUE;
     $field_name = $element['#name'];
@@ @@
    *
    * @param array $element
    *   Element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    * @param array $complete_form
    *   Complete form.
@@ @@
    *   Element.
    */
   public function phoneNumberValidate(array $element, FormStateInterface $form_state, array &$complete_form) {
-    /** @var \Drupal\phone_number\PhoneNumberUtilInterface $util */
+    /** @var PhoneNumberUtilInterface $util */
     $util = \Drupal::service('phone_number.util');
     $settings = $element['#phone_number'];
     $field_label = !empty($element['#field_title']) ? $element['#field_title'] : $element['#title'];
@@ @@
    *   Phone number. Null if empty, or not valid, phone number.
    */
   public static function getPhoneNumber(array $element, $input_value = TRUE) {
-    /** @var \Drupal\phone_number\PhoneNumberUtilInterface $util */
+    /** @var PhoneNumberUtilInterface $util */
     $util = \Drupal::service('phone_number.util');

     if ($input_value) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/phone_number/phone_number.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\phone_number\PhoneNumberUtilInterface;
 /**
  * @file
  * phone_number.module
  */
-
 /**
  * Helper function to get all supported countries for views.
  *
@@ @@
  * @todo This may not be used.
  */
 function phone_number_views_country_options($allowed_countries = []) {
-  /** @var \Drupal\phone_number\PhoneNumberUtilInterface $util */
+  /** @var PhoneNumberUtilInterface $util */
   $util = \Drupal::service('phone_number.util');
   return $util->getCountryOptions($allowed_countries, TRUE);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


9) modules/contrib/phone_number/modules/sms_phone_number/src/SmsPhoneNumberUtilInterface.php:46

    ---------- begin diff ----------
@@ @@
   /**
    * Checks whether there are too many verification attempts against the number.
    *
-   * @param \libphonenumber\PhoneNumber $phone_number
+   * @param PhoneNumber $phone_number
    *   Phone number object.
    * @param string $type
    *   Flood type, 'sms' or 'verification'.
@@ @@
   /**
    * Gets token generated if verification code was sent.
    *
-   * @param \libphonenumber\PhoneNumber $phone_number
+   * @param PhoneNumber $phone_number
    *   Phone number object.
    *
    * @return string|null
@@ @@
   /**
    * Verifies input code matches code sent to user.
    *
-   * @param \libphonenumber\PhoneNumber $phone_number
+   * @param PhoneNumber $phone_number
    *   Phone number object.
    * @param string $code
    *   Input code.
@@ @@
   /**
    * Send verification code to sms_phone number.
    *
-   * @param \libphonenumber\PhoneNumber $phone_number
+   * @param PhoneNumber $phone_number
    *   Phone number object.
    * @param string $message
    *   Drupal translatable string.
@@ @@
   /**
    * Is the number already verified.
    *
-   * @param \libphonenumber\PhoneNumber $phone_number
+   * @param PhoneNumber $phone_number
    *   Phone number object.
    *
    * @return bool
@@ @@
   /**
    * Registers code for sms_phone number and returns it's token.
    *
-   * @param \libphonenumber\PhoneNumber $phone_number
+   * @param PhoneNumber $phone_number
    *   Phone number object.
    * @param string $code
    *   Access code.
@@ @@
   /**
    * Generate hash given token and code.
    *
-   * @param \libphonenumber\PhoneNumber $phone_number
+   * @param PhoneNumber $phone_number
    *   Phone number object.
    * @param string $token
    *   Token.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/phone_number/modules/sms_phone_number/src/SmsPhoneNumberUtil.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   public $token;

@@ @@
   /**
    * The flood service.
    *
-   * @var \Drupal\Core\Flood\FloodInterface
+   * @var FloodInterface
    */
   public $flood;

@@ @@
   /**
    * SmsPhoneNumberUtil constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   Field manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler.
-   * @param \Drupal\Core\Locale\CountryManagerInterface $country_manager
+   * @param CountryManagerInterface $country_manager
    *   Country manager.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Token service.
-   * @param \Drupal\Core\Flood\FloodInterface $flood
+   * @param FloodInterface $flood
    *   Flood manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityFieldManagerInterface $field_manager, ModuleHandlerInterface $module_handler, CountryManagerInterface $country_manager, Token $token, FloodInterface $flood) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/phone_number/modules/sms_phone_number/src/Plugin/rest/resource/RequestVerificationCodeResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sms_phone_number\Plugin\rest\resource;

+use Drupal\rest\ResourceResponse;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\sms_phone_number\SmsPhoneNumberUtilInterface;
 use Drupal\rest\Plugin\ResourceBase;
@@ @@
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * SMS Phone Number util.
    *
-   * @var \Drupal\sms_phone_number\SmsPhoneNumberUtilInterface
+   * @var SmsPhoneNumberUtilInterface
    */
   protected $util;

@@ @@
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
-   * @param \Drupal\sms_phone_number\SmsPhoneNumberUtilInterface $util
+   * @param SmsPhoneNumberUtilInterface $util
    *   SMS Phone Number utility service.
    */
   public function __construct(
@@ @@
    * @param string|null $number
    *   Callable phone number.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
-   * @throws \Symfony\Component\HttpKernel\Exception\BadRequestHttpException
+   * @throws HttpException
+   * @throws BadRequestHttpException
    * @throws PhoneNumberException
    */
   public function get($number = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/phone_number/modules/sms_phone_number/src/Plugin/Validation/Constraint/SmsPhoneNumberValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sms_phone_number\Plugin\Validation\Constraint;

+use Drupal\sms_phone_number\Plugin\Field\FieldType\SmsPhoneNumberItem;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\phone_number\Exception\PhoneNumberException;
 use Drupal\sms_phone_number\SmsPhoneNumberUtilInterface;
@@ @@
    * {@inheritdoc}
    */
   public function validate($item, Constraint $constraint) {
-    /** @var \Drupal\sms_phone_number\Plugin\Field\FieldType\SmsPhoneNumberItem $item */
+    /** @var SmsPhoneNumberItem $item */
     $values = $item->getValue();
     if ((empty($values['value']) && empty($values['local_number']))) {
       return;
     }

-    /** @var \Drupal\sms_phone_number\SmsPhoneNumberUtilInterface $util */
+    /** @var SmsPhoneNumberUtilInterface $util */
     $util = \Drupal::service('sms_phone_number.util');

     $field_label = $item->getFieldDefinition()->getLabel();
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $item->getEntity();
     $entity_type = $entity->getEntityType()->getSingularLabel();
     $allowed_countries = $item->getFieldDefinition()->getSetting('allowed_countries');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/phone_number/modules/sms_phone_number/src/Plugin/Field/FieldType/SmsPhoneNumberItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sms_phone_number\Plugin\Field\FieldType;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\user\Entity\User;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * {@inheritdoc}
    */
   public static function defaultFieldSettings() {
-    /** @var \Drupal\sms_phone_number\SmsPhoneNumberUtilInterface $util */
+    /** @var SmsPhoneNumberUtilInterface $util */
     $util = \Drupal::service('sms_phone_number.util');
     return parent::defaultFieldSettings() + [
       'verify' => $util->isSmsEnabled() ? $util::PHONE_NUMBER_VERIFY_OPTIONAL : SmsPhoneNumberUtilInterface::PHONE_NUMBER_VERIFY_NONE,
@@ @@
    * {@inheritdoc}
    */
   public function preSave() {
-    /** @var \Drupal\sms_phone_number\SmsPhoneNumberUtilInterface $util */
+    /** @var SmsPhoneNumberUtilInterface $util */
     $util = \Drupal::service('sms_phone_number.util');
     $values = $this->getValue();

@@ @@
    */
   public function fieldSettingsForm(array $form, FormStateInterface $form_state) {
     $element = parent::fieldSettingsForm($form, $form_state);
-    /** @var \Drupal\sms_phone_number\SmsPhoneNumberUtilInterface $util */
+    /** @var SmsPhoneNumberUtilInterface $util */
     $util = \Drupal::service('sms_phone_number.util');
     $field = $this->getFieldDefinition();
     $settings = $this->getSettings() + $this->defaultFieldSettings();
@@ @@
    *
    * @param array $form
    *   Complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function fieldSettingsFormValidate(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   Complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function fieldSettingsFormSubmit(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\sms_phone_number\SmsPhoneNumberUtilInterface $util */
+    /** @var SmsPhoneNumberUtilInterface $util */
     $util = \Drupal::service('sms_phone_number.util');
     $settings = $this->getSettings();
     if (!empty(['message'])) {
@@ @@
     $value = parent::generateSampleValue($field_definition);

     if (!empty($value)) {
-      /** @var \Drupal\sms_phone_number\SmsPhoneNumberUtilInterface $util */
+      /** @var SmsPhoneNumberUtilInterface $util */
       $util = \Drupal::service('sms_phone_number.util');

       $settings = [
@@ @@
    *   True or false.
    */
   public function tfaAllowed() {
-    /** @var \Drupal\sms_phone_number\SmsPhoneNumberUtilInterface $util */
+    /** @var SmsPhoneNumberUtilInterface $util */
     $util = \Drupal::service('sms_phone_number.util');
     return $util->isTfaEnabled() && ($this->getFieldDefinition()
       ->getFieldStorageDefinition()
@@ @@
    *   TRUE if verified, else FALSE.
    */
   public function isVerified() {
-    /** @var \Drupal\sms_phone_number\SmsPhoneNumberUtilInterface $util */
+    /** @var SmsPhoneNumberUtilInterface $util */
     $util = \Drupal::service('sms_phone_number.util');
     $field_name = $this->getFieldDefinition()->getName();
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
     $entity_type_id = $entity->getEntityTypeId();
     $id_key = $entity->getEntityType()->getKey('id');
@@ @@
    *   code or token not provided, and -1 if does not pass flood check.
    */
   public function verify() {
-    /** @var \Drupal\sms_phone_number\SmsPhoneNumberUtilInterface $util */
+    /** @var SmsPhoneNumberUtilInterface $util */
     $util = \Drupal::service('sms_phone_number.util');
     $values = $this->getValue();
     $token = !empty($values['verification_token']) ? $values['verification_token'] : NULL;
@@ @@
    *   TRUE for is unique, FALSE otherwise. NULL if phone number is not valid.
    */
   public function isUnique($unique_type = SmsPhoneNumberUtilInterface::PHONE_NUMBER_UNIQUE_YES) {
-    /** @var \Drupal\sms_phone_number\SmsPhoneNumberUtilInterface $util */
+    /** @var SmsPhoneNumberUtilInterface $util */
     $util = \Drupal::service('sms_phone_number.util');

     $entity = $this->getEntity();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/phone_number/modules/sms_phone_number/src/Plugin/Field/FieldFormatter/SmsPhoneNumberVerifiedFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sms_phone_number\Plugin\Field\FieldFormatter;

+use Drupal\sms_phone_number\SmsPhoneNumberUtilInterface;
+use Drupal\sms_phone_number\Plugin\Field\FieldType\SmsPhoneNumberItem;
 use Drupal\Core\Field\FormatterBase;
 use Drupal\Core\Field\FieldItemListInterface;

@@ @@
    * {@inheritdoc}
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
-    /** @var \Drupal\sms_phone_number\SmsPhoneNumberUtilInterface $util */
+    /** @var SmsPhoneNumberUtilInterface $util */
     $util = \Drupal::service('sms_phone_number.util');
     $element = [];

     foreach ($items as $delta => $item) {
-      /** @var \Drupal\sms_phone_number\Plugin\Field\FieldType\SmsPhoneNumberItem $item */
+      /** @var SmsPhoneNumberItem $item */
       if ($util->getPhoneNumber($item->getValue()['value'])) {
         $element[$delta] = [
           '#markup' => '<span class="verified-status' . (!empty($item->verified) ? ' verified' : '') . '">' . (!empty($item->verified) ? (string) $this->t('Verified') : (string) $this->t('Not verified')) . '</span>',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/phone_number/modules/sms_phone_number/src/Element/SmsPhoneNumber.php:57

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   Element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    * @param array $complete_form
    *   Complete form.
@@ @@
    */
   public function smsPhoneNumberProcess(array $element, FormStateInterface $form_state, array $complete_form) {
     $element = parent::phoneNumberProcess($element, $form_state, $complete_form);
-    /** @var \Drupal\sms_phone_number\SmsPhoneNumberUtilInterface $util */
+    /** @var SmsPhoneNumberUtilInterface $util */
     $util = \Drupal::service('sms_phone_number.util');
     $field_name = $element['#name'];
     $field_path = implode('][', $element['#parents']);
@@ @@
    *
    * @param array $element
    *   Element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    * @param array $complete_form
    *   Complete form.
@@ @@
    */
   public function smsPhoneNumberValidate(array $element, FormStateInterface $form_state, array &$complete_form) {
     $element = parent::phoneNumberValidate($element, $form_state, $complete_form);
-    /** @var \Drupal\sms_phone_number\SmsPhoneNumberUtilInterface $util */
+    /** @var SmsPhoneNumberUtilInterface $util */
     $util = \Drupal::service('sms_phone_number.util');
     $settings = $element['#phone_number'];
     $op = $this->getOp($element, $form_state);
@@ @@
    *
    * @param array $complete_form
    *   Complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax response.
    */
   public static function verifyAjax(array $complete_form, FormStateInterface $form_state) {
-    /** @var \Drupal\sms_phone_number\SmsPhoneNumberUtilInterface $util */
+    /** @var SmsPhoneNumberUtilInterface $util */
     $util = \Drupal::service('sms_phone_number.util');

     $element = static::getTriggeringElementParent($complete_form, $form_state);
@@ @@
    *
    * @param array $element
    *   SMS Phone Number element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return null|string
@@ @@
    *
    * @param array $complete_form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return mixed
@@ @@
    *   True if verified, false otherwise.
    */
   public static function isVerified(array $element) {
-    /** @var \Drupal\sms_phone_number\SmsPhoneNumberUtilInterface $util */
+    /** @var SmsPhoneNumberUtilInterface $util */
     $util = \Drupal::service('sms_phone_number.util');

     $phone_number = static::getPhoneNumber($element);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/phone_number/src/Plugin/WebformElement/PhoneNumber.php"
         file, due to:                                                          
         "Analyze error: "Class Drupal\webform\Plugin\WebformElementBase not    
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/phone_number/src/Feeds/Target/PhoneNumber.php" file, due
         to:                                                                    
         "Analyze error: "Class Drupal\feeds\Plugin\Type\Target\FieldTargetBase 
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/phone_number/modules/sms_phone_number/src/Plugin/TfaVali
         dation/SmsPhoneNumberTfa.php" file, due to:                            
         "Analyze error: "Class Drupal\tfa\Plugin\TfaBasePlugin not found.".    
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/phone_number/modules/sms_phone_number/src/Feeds/Target/S
         msPhoneNumber.php" file, due to:                                       
         "Analyze error: "Class Drupal\feeds\Plugin\Type\Target\FieldTargetBase 
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

