modules/contrib/sqrl/sqrl.module
modules/contrib/sqrl/src/Annotation/SqrlAction.php
modules/contrib/sqrl/src/Assets.php
modules/contrib/sqrl/src/Client.php
modules/contrib/sqrl/src/Controller/Ajax.php
modules/contrib/sqrl/src/Controller/Base.php
modules/contrib/sqrl/src/Controller/CPS.php
modules/contrib/sqrl/src/Controller/Client.php
modules/contrib/sqrl/src/Controller/Image.php
modules/contrib/sqrl/src/Controller/Link.php
modules/contrib/sqrl/src/Controller/ProfileConfirm.php
modules/contrib/sqrl/src/Controller/Unlink.php
modules/contrib/sqrl/src/Controller/View.php
modules/contrib/sqrl/src/Entity/Identity.php
modules/contrib/sqrl/src/Entity/IdentityInterface.php
modules/contrib/sqrl/src/Exception/ClientException.php
modules/contrib/sqrl/src/Exception/NutException.php
modules/contrib/sqrl/src/Form/ProfileEdit.php
modules/contrib/sqrl/src/Form/SelectAccount.php
modules/contrib/sqrl/src/Form/Settings.php
modules/contrib/sqrl/src/FormAlter.php
modules/contrib/sqrl/src/Identities.php
modules/contrib/sqrl/src/Log.php
modules/contrib/sqrl/src/Nut.php
modules/contrib/sqrl/src/Plugin/SqrlAction/Disable.php
modules/contrib/sqrl/src/Plugin/SqrlAction/Enable.php
modules/contrib/sqrl/src/Plugin/SqrlAction/Ident.php
modules/contrib/sqrl/src/Plugin/SqrlAction/Remove.php
modules/contrib/sqrl/src/Response/ClientResponse.php
modules/contrib/sqrl/src/Response/QrCodeResponse.php
modules/contrib/sqrl/src/Sqrl.php
modules/contrib/sqrl/src/SqrlActionInterface.php
modules/contrib/sqrl/src/SqrlActionPluginBase.php
modules/contrib/sqrl/src/SqrlActionPluginManager.php
modules/contrib/sqrl/src/State.php
modules/contrib/sqrl/src/StringManipulation.php

29 files with changes
=====================

1) modules/contrib/sqrl/src/State.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sqrl;

+use Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface;
+use Drupal\user\UserInterface;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\KeyValueStore\KeyValueExpirableFactory;
 use Drupal\Core\Messenger\MessengerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   public const EXPIRE_NUT = 600;

   /**
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface
+   * @var KeyValueStoreExpirableInterface
    */
   protected $auth;

   /**
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface
+   * @var KeyValueStoreExpirableInterface
    */
   protected $nut;

   /**
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface
+   * @var KeyValueStoreExpirableInterface
    */
   protected $messages;

@@ @@

   /**
    * @param string $nut
-   * @param \Drupal\user\UserInterface[]|int $users
+   * @param UserInterface[]|int $users
    *
    * @return \Drupal\sqrl\State
    */
@@ @@

   /**
    * @param string $nut
-   * @param string|\Drupal\Component\Render\MarkupInterface $message
+   * @param string|MarkupInterface $message
    * @param string $type
    *
    * @return \Drupal\sqrl\State
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/sqrl/src/SqrlActionPluginManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/sqrl/src/SqrlActionPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sqrl;

+use Drupal\user\UserInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Component\Utility\Random;
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\sqrl\Sqrl
+   * @var Sqrl
    */
   protected $sqrl;

   /**
-   * @var \Drupal\sqrl\Client
+   * @var Client
    */
   protected $client;

   /**
-   * @var \Drupal\sqrl\State
+   * @var State
    */
   protected $state;

   /**
-   * @var \Drupal\sqrl\Log
+   * @var Log
    */
   protected $log;

   /**
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

   /**
-   * @var \Drupal\Component\Utility\Random
+   * @var Random
    */
   protected $random;

   /**
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

   /**
-   * @var \Drupal\sqrl\Identities
+   * @var Identities
    */
   protected $identities;

   /**
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $account;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/sqrl/src/SqrlActionInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sqrl;

+use Drupal\sqrl\Exception\ClientException;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;

 /**
@@ @@

   /**
    * @return bool
-   * @throws \Drupal\sqrl\Exception\ClientException
+   * @throws ClientException
    */
   public function run(): bool;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/sqrl/src/Sqrl.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sqrl;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   use StringManipulation;

   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

   /**
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;

   /**
-   * @var \Drupal\sqrl\Nut
+   * @var Nut
    */
   protected $nut;

   /**
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;

   /**
-   * @var \Drupal\sqrl\Log
+   * @var Log
    */
   protected $log;

@@ @@
   protected $nutBasePath = '/';

   /**
-   * @var \Drupal\sqrl\Assets
+   * @var Assets
    */
   protected $assets;

   /**
-   * @var \Drupal\Core\PageCache\ResponsePolicy\KillSwitch
+   * @var KillSwitch
    */
   protected $killSwitch;

@@ @@
   /**
    * Constructs a FormAlter object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Session\AccountProxy $current_user
+   * @param AccountProxy $current_user
    *   The current user.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
-   * @param \Drupal\Core\PageCache\ResponsePolicy\KillSwitch $kill_switch
-   * @param \Drupal\sqrl\Assets $assets
-   * @param \Drupal\sqrl\Log $log
+   * @param ContainerInterface $container
+   * @param KillSwitch $kill_switch
+   * @param Assets $assets
+   * @param Log $log
    */
   public function __construct(ConfigFactoryInterface $config_factory, AccountProxy $current_user, ContainerInterface $container, KillSwitch $kill_switch, Assets $assets, Log $log) {
     $this->config = $config_factory->get('sqrl.settings');
@@ @@
   }

   /**
-   * @param \Drupal\sqrl\Nut $nut
+   * @param Nut $nut
    *
    * @return $this
    */
@@ @@
   }

   /**
-   * @return \Drupal\sqrl\Nut
+   * @return Nut
    */
   public function getNut(): Nut {
     if ($this->nut === NULL) {
@@ @@
   }

   /**
-   * @return \Drupal\sqrl\Nut
+   * @return Nut
    */
   public function getNewNut(): Nut {
     return Nut::create($this->container);
@@ @@
       '#operation' => $op,
       '#nuturl' => $nuturl,
       '#encodednuturl' => $this->base64_encode($nuturl),
-      '#logourl' => Url::fromUserInput('/' . drupal_get_path('module', 'sqrl') . '/image/icon.png'),
+      '#logourl' => Url::fromUserInput('/' . \Drupal::service('extension.list.module')->getPath('sqrl') . '/image/icon.png'),
       '#qrcodeurl' => $this->getPath('sqrl.img'),
       '#qrcodesize' => $this->config->get('qr_size'),
       '#description' => $this->assets->getOperationDescription($op),
@@ @@
       '#theme' => 'sqrl_widget_cached',
       '#title' => $this->assets->getOperationTitle($op),
       '#url' => $this->getPath('sqrl.view', ['op' => $op], FALSE),
-      '#logourl' => Url::fromUserInput('/' . drupal_get_path('module', 'sqrl') . '/image/icon.png'),
+      '#logourl' => Url::fromUserInput('/' . \Drupal::service('extension.list.module')->getPath('sqrl') . '/image/icon.png'),
       '#description' => $this->assets->getOtherDescription('click'),
       '#attached' => [
         'library' => [
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/sqrl/src/Response/QrCodeResponse.php:10

    ---------- begin diff ----------
@@ @@
 class QrCodeResponse extends Response {

   /**
-   * @var \Endroid\QrCode\QrCode
+   * @var QrCode
    */
   protected $qrCode;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/sqrl/src/Plugin/SqrlAction/Ident.php:51

    ---------- begin diff ----------
@@ @@

   /**
    * @return bool
-   * @throws \Drupal\sqrl\Exception\ClientException
+   * @throws ClientException
    */
   private function login(): bool {
     if ($this->client->getIdentity() === NULL) {
@@ @@

   /**
    * @return bool
-   * @throws \Drupal\sqrl\Exception\ClientException
+   * @throws ClientException
    */
   private function register(): bool {
     if ($this->client->getIdentity() !== NULL) {
@@ @@

   /**
    * @return bool
-   * @throws \Drupal\sqrl\Exception\ClientException
+   * @throws ClientException
    */
   private function setkey(): bool {
     if ($this->account === NULL && $this->client->getIdentity() === NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/sqrl/src/Nut.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sqrl;

+use Symfony\Component\HttpFoundation\Request;
+use Drupal\user\UserInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
   protected $clientCancelToken;

   /**
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

   /**
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

   /**
-   * @var \Drupal\sqrl\State
+   * @var State
    */
   protected $state;

   /**
-   * @var \Drupal\sqrl\Sqrl
+   * @var Sqrl
    */
   protected $sqrl;

   /**
-   * @var \Drupal\sqrl\Log
+   * @var Log
    */
   protected $log;

   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a FormAlter object.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
-   * @param \Drupal\Component\Datetime\TimeInterface $time
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
-   * @param \Drupal\sqrl\State $state
-   * @param \Drupal\sqrl\Sqrl $sqrl
-   * @param \Drupal\sqrl\Log $log
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param AccountInterface $current_user
+   * @param TimeInterface $time
+   * @param RequestStack $request
+   * @param State $state
+   * @param Sqrl $sqrl
+   * @param Log $log
+   * @param MessengerInterface $messenger
    */
   public function __construct(AccountInterface $current_user, TimeInterface $time, RequestStack $request, State $state, Sqrl $sqrl, Log $log, MessengerInterface $messenger) {
     $this->currentUser = $current_user;
@@ @@
   public function getAccountsForSelect(): array {
     $result = [];
     foreach ($this->state->getAuth($this->getPublicNut(), FALSE) as $uid) {
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       $user = User::load($uid);
       if ($user->isActive()) {
         $result[$uid] = $user->label();
@@ @@
       switch ($op) {
         case 'login':
         case 'register':
-          /** @var \Drupal\user\UserInterface[] $users */
+          /** @var UserInterface[] $users */
           $users = [];
           foreach ($uids as $uid) {
-            /** @var \Drupal\user\UserInterface $user */
+            /** @var UserInterface $user */
             $user = User::load($uid);
             if ($user->isActive()) {
               $users[] = $user;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/sqrl/src/Log.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sqrl;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;

@@ @@
 class Log {

   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a FormAlter object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    */
   public function __construct(ConfigFactoryInterface $config_factory, LoggerChannelFactoryInterface $logger) {
     $this->config = $config_factory->get('sqrl.settings');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/sqrl/src/Identities.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sqrl;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\Random;
@@ @@
   protected $pidk;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

   /**
-   * @var \Drupal\Component\Utility\Random
+   * @var Random
    */
   protected $random;

   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

   /**
-   * @var \Drupal\sqrl\Log
+   * @var Log
    */
   protected $logger;

@@ @@
   /**
    * Identities constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\user\UserDataInterface $user_data
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\sqrl\Log $logger
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param UserDataInterface $user_data
+   * @param ConfigFactoryInterface $config_factory
+   * @param Log $logger
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, UserDataInterface $user_data, ConfigFactoryInterface $config_factory, Log $logger) {
     $this->entityTypeManager = $entity_type_manager;
@@ @@
    * @param string $key
    * @param int|null $uid
    *
-   * @return \Drupal\sqrl\Entity\IdentityInterface|null
+   * @return IdentityInterface|null
    */
   protected function getIdentity($key, $uid = NULL): ?IdentityInterface {
     if (empty($key)) {
@@ @@
       $conditions['user'] = $uid;
     }
     try {
-      /** @var \Drupal\sqrl\Entity\IdentityInterface[] $identities */
+      /** @var IdentityInterface[] $identities */
       $identities = $this->entityTypeManager->getStorage('sqrl_identity')->loadByProperties($conditions);
     }
     catch (InvalidPluginDefinitionException $e) {
@@ @@
   /**
    * @param int $uid
    *
-   * @return \Drupal\sqrl\Entity\IdentityInterface[]
+   * @return IdentityInterface[]
    */
   public function getIdentities($uid): array {
     try {
-      /** @var \Drupal\sqrl\Entity\IdentityInterface[] $identities */
+      /** @var IdentityInterface[] $identities */
       $identities = $this->entityTypeManager->getStorage('sqrl_identity')->loadByProperties([
         'user' => $uid,
       ]);
@@ @@
   /**
    * @param int@null $uid
    *
-   * @return \Drupal\sqrl\Entity\IdentityInterface|null
+   * @return IdentityInterface|null
    */
   public function getIdentityByIdk($uid = NULL): ?IdentityInterface {
     return $this->getIdentity($this->idk, $uid);
@@ @@
   /**
    * @param int|null $uid
    *
-   * @return \Drupal\sqrl\Entity\IdentityInterface|null
+   * @return IdentityInterface|null
    */
   public function getIdentityByPidk($uid = NULL): ?IdentityInterface {
     return $this->getIdentity($this->pidk, $uid);
@@ @@
   }

   /**
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    */
   public function cancel(UserInterface $account): void {
     foreach ($this->getIdentities($account->id()) as $identity) {
@@ @@
   }

   /**
-   * @param \Drupal\sqrl\Entity\IdentityInterface $identity
+   * @param IdentityInterface $identity
    * @param string $secret
    * @param bool $encrypt
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/sqrl/src/FormAlter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sqrl;

+use Drupal\user\UserInterface;
+use Drupal\sqrl\Entity\IdentityInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;

   /**
-   * @var \Drupal\sqrl\Sqrl
+   * @var Sqrl
    */
   protected $sqrl;

   /**
-   * @var \Drupal\sqrl\Log
+   * @var Log
    */
   protected $log;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\sqrl\Identities
+   * @var Identities
    */
   protected $identities;

@@ @@
   /**
    * Constructs a FormAlter object.
    *
-   * @param \Drupal\Core\Session\AccountProxy $current_user
+   * @param AccountProxy $current_user
    *   The current user.
-   * @param \Drupal\sqrl\Sqrl $sqrl
+   * @param Sqrl $sqrl
    *   The SQRL handler.
-   * @param \Drupal\sqrl\Log $log
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\sqrl\Identities $identities
+   * @param Log $log
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param Identities $identities
    */
   public function __construct(AccountProxy $current_user, Sqrl $sqrl, Log $log, EntityTypeManagerInterface $entity_type_manager, Identities $identities) {
     $this->currentUser = $current_user;
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function userForm(array &$form, FormStateInterface $form_state): void {
     if (!isset($form_state->getStorage()['user'])) {
@@ @@
       // This is the registration form.
       return;
     }
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $form_state->getStorage()['user'];
     if ($user->id() !== $this->currentUser->id() || !$this->identities->hasUserEnabledIdentities($user->id())) {
       return;
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @noinspection PhpUnusedParameterInspection
    */
   public function loginFormValidate(array $form, FormStateInterface $form_state): void {
     if ($account = $this->findAccountFromFormInput($form_state)) {
-      /** @var \Drupal\sqrl\Entity\IdentityInterface $identity */
+      /** @var IdentityInterface $identity */
       foreach ($this->identities->getIdentities($account->id()) as $identity) {
         if ($identity->isSqrlOnly()) {
           $form_state->setErrorByName('name', $this->t('%name can only login with SQRL.', ['%name' => $account->label()]));
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @noinspection PhpUnusedParameterInspection
    */
   public function passwordFormValidate(array $form, FormStateInterface $form_state): void {
     if ($account = $this->findAccountFromFormInput($form_state)) {
-      /** @var \Drupal\sqrl\Entity\IdentityInterface $identity */
+      /** @var IdentityInterface $identity */
       foreach ($this->identities->getIdentities($account->id()) as $identity) {
         if ($identity->isHardLocked()) {
           $form_state->setErrorByName('name', $this->t('%name is hard locked by SQRL client request.', ['%name' => $account->label()]));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/sqrl/src/Form/Settings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sqrl\Form;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     $config = $this->config('sqrl.settings');
     $config
       ->set('account_name_pattern', $form_state->getValue('account_name_pattern'))
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/sqrl/src/Form/SelectAccount.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sqrl\Form;

+use Drupal\sqrl\Nut;
+use Drupal\sqrl\State;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
 class SelectAccount extends FormBase {

   /**
-   * @var \Drupal\sqrl\Sqrl
+   * @var Sqrl
    */
   protected $sqrl;

   /**
-   * @var \Drupal\sqrl\Nut
+   * @var Nut
    */
   protected $nut;

   /**
-   * @var \Drupal\sqrl\State
+   * @var State
    */
   protected $state;

@@ @@
   /**
    * Link constructor.
    *
-   * @param \Drupal\sqrl\Sqrl $sqrl
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param Sqrl $sqrl
+   * @param MessengerInterface $messenger
    */
   public function __construct(Sqrl $sqrl, MessengerInterface $messenger) {
     $this->sqrl = $sqrl;
@@ @@
   /**
    * @param $token
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    */
   public function access($token): AccessResult {
     if ($this->nut->isValid() && $this->nut->getLoginToken() === $token) {
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/sqrl/src/Form/ProfileEdit.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sqrl\Form;

+use Drupal\sqrl\Nut;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\Random;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityStorageException;
@@ @@
   use StringManipulation;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\sqrl\Identities
+   * @var Identities
    */
   protected $identities;

   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

   /**
-   * @var \Drupal\sqrl\Nut
+   * @var Nut
    */
   protected $nut;

   /**
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;

   /**
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

   /**
-   * @var \Drupal\Component\Utility\Random
+   * @var Random
    */
   protected $random;

@@ @@
   /**
    * Link constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\sqrl\Sqrl $sqrl
-   * @param \Drupal\sqrl\Identities $identities
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param Sqrl $sqrl
+   * @param Identities $identities
+   * @param AccountProxyInterface $current_user
+   * @param MessengerInterface $messenger
+   * @param MailManagerInterface $mail_manager
+   * @param UserDataInterface $user_data
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, Sqrl $sqrl, Identities $identities, AccountProxyInterface $current_user, MessengerInterface $messenger, MailManagerInterface $mail_manager, UserDataInterface $user_data) {
     $this->entityTypeManager = $entity_type_manager;
@@ @@
   }

   /**
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    * @param string $token
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    */
   public function access(UserInterface $user, $token): AccessResult {
     if ($this->nut->isValid() && $this->nut->getLoginToken() === $token && $this->currentUser->id() === $user->id()) {
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   * @param \Drupal\user\UserInterface $user
+   * @param FormStateInterface $form_state
+   * @param UserInterface $user
    * @param string $token
    *
    * @return array
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @noinspection PhpUnusedParameterInspection
    */
   public function validateMail($form, FormStateInterface $form_state): void {
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state): void {
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = User::load($this->currentUser->id());

     if ($form_state->getValue('unset')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/sqrl/src/Entity/IdentityInterface.php:99

    ---------- begin diff ----------
@@ @@
   public function hasSuccessor(): bool;

   /**
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    */
   public function getFirstUser(): UserInterface;

@@ @@
   /**
    * @param int $uid
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    */
   public function getUser($uid): ?UserInterface;

   /**
-   * @return \Drupal\user\UserInterface[]
+   * @return UserInterface[]
    */
   public function getUsers(): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/sqrl/src/Entity/Identity.php:178

    ---------- begin diff ----------
@@ @@
    */
   public function deleteAll(): bool {
     if ($this->hasSuccessor()) {
-      /** @var \Drupal\sqrl\Entity\IdentityInterface $successor */
+      /** @var IdentityInterface $successor */
       $successor = $this->get('sid')->entity;
       return $successor->deleteAll();
     }
@@ @@
     $id = $this->id();
     try {
       $this->delete();
-      /** @var \Drupal\sqrl\Entity\IdentityInterface $next */
+      /** @var IdentityInterface $next */
       while ($next = $this->entityTypeManager()->getStorage('sqrl_entity')->loadByProperties(['sid' => $id])) {
         $id = $next->id();
         $next->delete();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/sqrl/src/Controller/View.php:14

    ---------- begin diff ----------
@@ @@
 class View implements ContainerInjectionInterface {

   /**
-   * @var \Drupal\sqrl\Assets
+   * @var Assets
    */
   protected $assets;

   /**
-   * @var \Drupal\sqrl\Sqrl
+   * @var Sqrl
    */
   protected $sqrl;

@@ @@
   /**
    * Link constructor.
    *
-   * @param \Drupal\sqrl\Assets $assets
-   * @param \Drupal\sqrl\Sqrl $sqrl
+   * @param Assets $assets
+   * @param Sqrl $sqrl
    */
   public function __construct(Assets $assets, Sqrl $sqrl) {
     $this->assets = $assets;
@@ @@
   /**
    * @param string $op
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    */
   public function access($op = NULL): AccessResult {
     // TODO: check context like anonymous user etc.
@@ @@
   /**
    * @param $op
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    */
   public function getTitle($op): TranslatableMarkup {
     return $this->assets->getOperationTitle($op);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/sqrl/src/Controller/Unlink.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sqrl\Controller;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
 class Unlink implements ContainerInjectionInterface {

   /**
-   * @var \Drupal\sqrl\Sqrl
+   * @var Sqrl
    */
   protected $sqrl;

   /**
-   * @var \Drupal\sqrl\Identities
+   * @var Identities
    */
   protected $identities;

   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Link constructor.
    *
-   * @param \Drupal\sqrl\Sqrl $sqrl
-   * @param \Drupal\sqrl\Identities $identities
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param Sqrl $sqrl
+   * @param Identities $identities
+   * @param AccountProxyInterface $current_user
+   * @param ConfigFactoryInterface $config_factory
    */
   public function __construct(Sqrl $sqrl, Identities $identities, AccountProxyInterface $current_user, ConfigFactoryInterface $config_factory) {
     $this->sqrl = $sqrl;
@@ @@
   }

   /**
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    */
   public function access(UserInterface $user): AccessResult {
     if ($this->currentUser->isAuthenticated() && $this->currentUser->id() === $user->id() && !empty($this->identities->getIdentities($user->id()))) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/sqrl/src/Controller/ProfileConfirm.php:21

    ---------- begin diff ----------
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

   /**
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * Link constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param MessengerInterface $messenger
+   * @param UserDataInterface $user_data
    */
   public function __construct(MessengerInterface $messenger, UserDataInterface $user_data) {
     $this->messenger = $messenger;
@@ @@
   }

   /**
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    * @param string $token
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    */
   public function access(UserInterface $user, $token): AccessResult {
     if ($data = $this->userData->get('sqrl', $user->id(), $token)) {
@@ @@
   }

   /**
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    * @param string $token
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    */
   public function execute(UserInterface $user, $token): RedirectResponse {
     if ($mail = $this->userData->get('sqrl', $user->id(), $token)) {
-      /** @var \Drupal\user\UserInterface $account */
+      /** @var UserInterface $account */
       $account = User::load($user->id());
       try {
         $account
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/sqrl/src/Controller/Link.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sqrl\Controller;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
 class Link implements ContainerInjectionInterface {

   /**
-   * @var \Drupal\sqrl\Sqrl
+   * @var Sqrl
    */
   protected $sqrl;

   /**
-   * @var \Drupal\sqrl\Identities
+   * @var Identities
    */
   protected $identities;

   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Link constructor.
    *
-   * @param \Drupal\sqrl\Sqrl $sqrl
-   * @param \Drupal\sqrl\Identities $identities
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param Sqrl $sqrl
+   * @param Identities $identities
+   * @param AccountProxyInterface $current_user
+   * @param ConfigFactoryInterface $config_factory
    */
   public function __construct(Sqrl $sqrl, Identities $identities, AccountProxyInterface $current_user, ConfigFactoryInterface $config_factory) {
     $this->sqrl = $sqrl;
@@ @@
   }

   /**
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    */
   public function access(UserInterface $user): AccessResult {
     if ($this->currentUser->isAuthenticated() && $this->currentUser->id() === $user->id()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/sqrl/src/Controller/Image.php:10

    ---------- begin diff ----------
@@ @@
 class Image extends Base {

   /**
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    */
   public function access(): AccessResult {
     return AccessResult::allowedIf($this->client->getNut()->isValid());
@@ @@
   }

   /**
-   * @return \Drupal\sqrl\Response\QrCodeResponse
+   * @return QrCodeResponse
    */
   public function request(): QrCodeResponse {
     $response = new QrCodeResponse();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


22) modules/contrib/sqrl/src/Controller/Client.php:10

    ---------- begin diff ----------
@@ @@
 class Client extends Base {

   /**
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    */
   public function access(): AccessResult {
     return AccessResult::allowedIf($this->client->getNut()->isValid());
@@ @@
   }

   /**
-   * @return \Drupal\sqrl\Response\ClientResponse
+   * @return ClientResponse
    */
   public function request(): ClientResponse {
     $content = $this->client->process();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


23) modules/contrib/sqrl/src/Controller/CPS.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sqrl\Controller;

+use Drupal\sqrl\Nut;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\sqrl\Assets
+   * @var Assets
    */
   protected $assets;

   /**
-   * @var \Drupal\sqrl\Sqrl
+   * @var Sqrl
    */
   protected $sqrl;

   /**
-   * @var \Drupal\sqrl\Log
+   * @var Log
    */
   protected $log;

   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

   /**
-   * @var \Drupal\sqrl\Nut
+   * @var Nut
    */
   private $nut;

@@ @@
   /**
    * Link constructor.
    *
-   * @param \Drupal\sqrl\Assets $assets
-   * @param \Drupal\sqrl\Sqrl $sqrl
-   * @param \Drupal\sqrl\Log $log
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param Assets $assets
+   * @param Sqrl $sqrl
+   * @param Log $log
+   * @param AccountProxyInterface $current_user
+   * @param MessengerInterface $messenger
    */
   public function __construct(Assets $assets, Sqrl $sqrl, Log $log, AccountProxyInterface $current_user, MessengerInterface $messenger) {
     $this->assets = $assets;
@@ @@
   /**
    * @param $token
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    */
   public function accessLogin($token): AccessResult {
     if ($this->nut->isValid() && $this->nut->getLoginToken() === $token) {
@@ @@
   /**
    * @param $token
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    */
   public function accessCancel($token): AccessResult {
     if ($this->nut->isValid() && $this->nut->getCancelToken() === $token) {
@@ @@
   /**
    * @param $token
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    */
   public function login($token): RedirectResponse {
     if ($url = $this->nut->poll($token)) {
@@ @@
   }

   /**
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    */
   public function cancel(): RedirectResponse {
     $this->messenger->addWarning($this->t('SQRL action canceled.'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/sqrl/src/Controller/Base.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sqrl\Controller;

+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManager;
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\sqrl\Sqrl
+   * @var Sqrl
    */
   protected $sqrl;

   /**
-   * @var \Drupal\sqrl\Client
+   * @var Client
    */
   protected $client;

   /**
-   * @var \Drupal\sqrl\Log
+   * @var Log
    */
   protected $log;

   /**
-   * @var \Drupal\sqrl\State
+   * @var State
    */
   protected $state;

   /**
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Base constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
-   * @param \Drupal\sqrl\Sqrl $sqrl
-   * @param \Drupal\sqrl\Client $client
-   * @param \Drupal\sqrl\Log $log
-   * @param \Drupal\sqrl\State $state
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param RequestStack $request
+   * @param EntityTypeManager $entity_type_manager
+   * @param Sqrl $sqrl
+   * @param Client $client
+   * @param Log $log
+   * @param State $state
+   * @param ConfigFactory $config_factory
+   * @param AccountProxyInterface $current_user
    */
   public function __construct(RequestStack $request, EntityTypeManager $entity_type_manager, Sqrl $sqrl, Client $client, Log $log, State $state, ConfigFactory $config_factory, AccountProxyInterface $current_user) {
     $this->request = $request->getCurrentRequest();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


25) modules/contrib/sqrl/src/Controller/Ajax.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * @param null $op
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    */
   public function access($op = NULL): AccessResult {
     if (!$this->client->getNut()->isValid()) {
@@ @@
   /**
    * @param $op
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function request($op): AjaxResponse {
     $response = new AjaxResponse();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/sqrl/src/Client.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sqrl;

+use Drupal\Core\Config\ImmutableConfig;
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\Random;
@@ @@
   ];

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\sqrl\Identities
+   * @var Identities
    */
   protected $identities;

   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

   /**
-   * @var \Drupal\sqrl\State
+   * @var State
    */
   protected $state;

   /**
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

   /**
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;

   /**
-   * @var \Drupal\sqrl\Sqrl
+   * @var Sqrl
    */
   protected $sqrl;

   /**
-   * @var \Drupal\sqrl\Log
+   * @var Log
    */
   protected $log;

   /**
-   * @var \Drupal\Component\Utility\Random
+   * @var Random
    */
   protected $random;

   /**
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

   /**
-   * @var \Drupal\sqrl\SqrlActionPluginManager
+   * @var SqrlActionPluginManager
    */
   protected $actionPluginManager;

   /**
-   * @var \Drupal\sqrl\Entity\IdentityInterface
+   * @var IdentityInterface
    */
   protected $identity;

   /**
-   * @var \Drupal\sqrl\Nut
+   * @var Nut
    */
   private $nut;

@@ @@
   private $fields = [];

   /**
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   private $account;

@@ @@
   /**
    * Constructs a FormAlter object.
    *
-   * @param \Drupal\Core\Session\AccountProxy $current_user
-   * @param \Drupal\sqrl\Sqrl $sqrl
-   * @param \Drupal\sqrl\Log $log
-   * @param \Drupal\Component\Datetime\TimeInterface $time
-   * @param \Drupal\sqrl\SqrlActionPluginManager $sqrl_action_plugin_manager
-   * @param \Drupal\sqrl\State $state
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
-   * @param \Drupal\sqrl\Identities $identities
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param AccountProxy $current_user
+   * @param Sqrl $sqrl
+   * @param Log $log
+   * @param TimeInterface $time
+   * @param SqrlActionPluginManager $sqrl_action_plugin_manager
+   * @param State $state
+   * @param RequestStack $request
+   * @param EntityTypeManager $entity_type_manager
+   * @param Identities $identities
+   * @param ConfigFactoryInterface $config_factory
    */
   public function __construct(AccountProxy $current_user, Sqrl $sqrl, Log $log, TimeInterface $time, SqrlActionPluginManager $sqrl_action_plugin_manager, State $state, RequestStack $request, EntityTypeManager $entity_type_manager, Identities $identities, ConfigFactoryInterface $config_factory) {
     $this->currentUser = $current_user;
@@ @@
   }

   /**
-   * @return \Drupal\sqrl\Entity\IdentityInterface|null
+   * @return IdentityInterface|null
    */
   public function getIdentity(): ?IdentityInterface {
     return $this->identity;
@@ @@
   }

   /**
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    */
   public function getAccount(): ?UserInterface {
     return $this->account;
@@ @@
   }

   /**
-   * @return \Drupal\sqrl\Nut
+   * @return Nut
    */
   public function getNut(): Nut {
     return $this->nut;
@@ @@
   }

   /**
-   * @throws \Drupal\sqrl\Exception\ClientException
+   * @throws ClientException
    */
   private function validate(): void {
     $this->validateSignatures();
@@ @@
   }

   /**
-   * @throws \Drupal\sqrl\Exception\ClientException
+   * @throws ClientException
    */
   private function validateSignatures(): void {
     $msg = $this->validationString;
@@ @@
    * @param string $pk
    *  base64url-encoded Public Key
    *
-   * @throws \Drupal\sqrl\Exception\ClientException
+   * @throws ClientException
    */
   private function validateSignature($msg, $sig, $pk): void {
     $this->log->debug('Validate signature %values', ['%values' => json_encode([
@@ @@
   /**
    * Validate required client values.
    *
-   * @throws \Drupal\sqrl\Exception\ClientException
+   * @throws ClientException
    */
   private function validateClientVars(): void {
     if ($this->clientVars['ver'] !== self::VERSION) {
@@ @@
   /**
    * Validate nut.
    *
-   * @throws \Drupal\sqrl\Exception\ClientException
+   * @throws ClientException
    */
   private function validateNut(): void {
     if (!$this->getNut()->isValid()) {
@@ @@
   /**
    * Validate IP address.
    *
-   * @throws \Drupal\sqrl\Exception\ClientException
+   * @throws ClientException
    */
   private function validateIpAddress(): void {
     if ($this->getNut()->isIpValid()) {
@@ @@
   }

   /**
-   * @param \Drupal\sqrl\Entity\IdentityInterface $identity
+   * @param IdentityInterface $identity
    *
-   * @throws \Drupal\sqrl\Exception\ClientException
+   * @throws ClientException
    */
   private function validateIdentity(IdentityInterface $identity): void {
     if (!$identity->isEnabled()) {
@@ @@
     $this->log->debug('Client operation: ' . $this->getNut()->getClientOperation());
     try {
       $this->log->debug('Execute ' . $command);
-      /** @var \Drupal\sqrl\SqrlActionInterface $plugin */
+      /** @var SqrlActionInterface $plugin */
       $plugin = $this->actionPluginManager->createInstance($command);
       if ($plugin->requiresSignatureRevalidation()) {
         $this->validateSignatures();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


27) modules/contrib/sqrl/src/Assets.php:10

    ---------- begin diff ----------
@@ @@
   /**
    * @param string $op
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    */
   public function getOperationTitle($op): TranslatableMarkup {
     switch ($op) {
@@ @@
   /**
    * @param string $op
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    */
   public function getOperationDescription($op): TranslatableMarkup {
     switch ($op) {
@@ @@
   /**
    * @param string $type
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    */
   public function getOtherDescription($type): TranslatableMarkup {
     /** @noinspection DegradedSwitchInspection */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


28) modules/contrib/sqrl/src/Annotation/SqrlAction.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sqrl\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


29) modules/contrib/sqrl/sqrl.module:22

    ---------- begin diff ----------
@@ @@
  * Implements hook_user_cancel().
  *
  * @param array $edit
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *
  * @noinspection PhpUnusedParameterInspection
  */
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function sqrl_form_user_form_alter(array &$form, FormStateInterface $form_state) {
   Drupal::service('sqrl.form_alter')->userForm($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 29 files have been changed by Rector                                      

