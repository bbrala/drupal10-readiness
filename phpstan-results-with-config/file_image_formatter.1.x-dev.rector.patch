diff --git a/file_image_formatter.info.yml b/file_image_formatter.info.yml
index 240fb5d..6cc7670 100644
--- a/file_image_formatter.info.yml
+++ b/file_image_formatter.info.yml
@@ -1,7 +1,7 @@
 name: 'File Image Formatter'
 type: module
 description: 'Provides a field formatter for file fields that may be images. Useful for Drupal 6 migrated sites.'
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^9.3 || ^10
 category: 'Field Formatters'
 dependencies:
   - drupal:file
diff --git a/src/Plugin/Field/FieldFormatter/FileImageFormatter.php b/src/Plugin/Field/FieldFormatter/FileImageFormatter.php
index 2758f0c..7e5afb8 100644
--- a/src/Plugin/Field/FieldFormatter/FileImageFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/FileImageFormatter.php
@@ -60,7 +60,7 @@ class FileImageFormatter extends ImageFormatter {
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $elements = [];
-    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $items */
+    /** @var EntityReferenceFieldItemListInterface $items */
     $files = $this->getEntitiesToView($items, $langcode);
 
     if (empty($files)) {
@@ -95,7 +95,7 @@ class FileImageFormatter extends ImageFormatter {
         $cache_contexts = [];
         if (isset($link_file)) {
           $image_uri = $file->getFileUri();
-          $url = Url::fromUri(file_create_url($image_uri));
+          $url = \Drupal::service('file_url_generator')->generate($image_uri);
           $cache_contexts[] = 'url.site';
         }
         $cache_tags = Cache::mergeTags($base_cache_tags, $file->getCacheTags());
@@ -126,7 +126,7 @@ class FileImageFormatter extends ImageFormatter {
   /**
    * Detect that a file item matches an image mimetype.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file item to check.
    *
    * @return bool
diff --git a/tests/src/Unit/Plugin/Field/FieldFormatter/FileImageFormatterTest.php b/tests/src/Unit/Plugin/Field/FieldFormatter/FileImageFormatterTest.php
index 93a2f28..fb0f97f 100644
--- a/tests/src/Unit/Plugin/Field/FieldFormatter/FileImageFormatterTest.php
+++ b/tests/src/Unit/Plugin/Field/FieldFormatter/FileImageFormatterTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\file_image_formatter\Unit\Plugin\Field\FieldFormatter;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Language\LanguageInterface;
@@ -15,10 +16,11 @@ use Drupal\Tests\UnitTestCase;
  */
 class FileImageFormatterTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
 
     $fileType = $this->prophesize('\Drupal\Core\Entity\EntityTypeInterface');
     $fileType->getHandlerClass('access')->willReturn(NULL);
@@ -71,9 +73,7 @@ class FileImageFormatterTest extends UnitTestCase {
       $account->reveal(),
       $image_style_storage->reveal());
 
-    $referenceItem = $this->getMockBuilder('\Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $referenceItem = $this->createMock('\Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem');
     $referenceItem->expects($this->any())
       ->method('__get')
       ->will($this->returnValueMap([
