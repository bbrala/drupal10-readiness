diff --git a/src/Event/StripeWebformWebhookEvent.php b/src/Event/StripeWebformWebhookEvent.php
index 411350a..0c02be7 100644
--- a/src/Event/StripeWebformWebhookEvent.php
+++ b/src/Event/StripeWebformWebhookEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\stripe_webform\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\webform\WebformSubmissionInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event that is fired when a webhook related to a webform submission is received
@@ -22,7 +22,7 @@ class StripeWebformWebhookEvent extends Event {
   /**
    * Webform submission entity
    *
-   * @var \Drupal\webform\WebformSubmissionInterface
+   * @var WebformSubmissionInterface
    */
   public $webform_submission;
 
@@ -36,7 +36,7 @@ class StripeWebformWebhookEvent extends Event {
   /**
    * Constructs the object.
    *
-   * @param \Drupal\webform\WebformSubmissionInterface $entity
+   * @param WebformSubmissionInterface $entity
    *   The webform submission entity
    */
   public function __construct($type, WebformSubmissionInterface $webform_submission, \Stripe\Event $event) {
diff --git a/src/EventSubscriber/StripeWebformEventSubscriber.php b/src/EventSubscriber/StripeWebformEventSubscriber.php
index e6cad37..15cdb91 100644
--- a/src/EventSubscriber/StripeWebformEventSubscriber.php
+++ b/src/EventSubscriber/StripeWebformEventSubscriber.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\stripe_webform\EventSubscriber;
 
+use Stripe\Customer;
+use Stripe\Error\Base;
+use Drupal\webform\WebformSubmissionInterface;
 use Drupal\stripe_webform\Event\StripeWebformWebhookEvent;
 use Drupal\stripe\Event\StripeEvents;
 use Drupal\stripe\Event\StripeWebhookEvent;
@@ -18,28 +21,28 @@ class StripeWebformEventSubscriber implements EventSubscriberInterface {
   /**
    * The configuration object factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config_factory;
 
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entity_type_manager;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface;
+   * @var EventDispatcherInterface ;
    */
   protected $event_dispatcher;
 
   /**
    * The iogger interface
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -49,7 +52,7 @@ class StripeWebformEventSubscriber implements EventSubscriberInterface {
    *
    * @param EventDispatcherInterface $dispatcher
    *   An EventDispatcherInterface instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EventDispatcherInterface $dispatcher, ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, LoggerInterface $logger) {
@@ -69,12 +72,12 @@ class StripeWebformEventSubscriber implements EventSubscriberInterface {
     elseif (!empty($stripe_event['data']['object']['customer'])) {
       $customer = $stripe_event['data']['object']['customer'];
       try {
-        $customer = \Stripe\Customer::retrieve($customer);
+        $customer = Customer::retrieve($customer);
 
         if (isset($customer['metadata']['webform_submission_id'])) {
           $metadata = $customer['metadata'];
         }
-      } catch (\Stripe\Error\Base $e) {
+      } catch (Base $e) {
         $this->logger->error('Stripe API Error: ' . $e->getMessage());
       }
     }
@@ -87,7 +90,7 @@ class StripeWebformEventSubscriber implements EventSubscriberInterface {
       if ($webform_submission) {
         $webhook_event = new StripeWebformWebhookEvent($stripe_event['type'], $webform_submission, $stripe_event);
         $this->event_dispatcher
-          ->dispatch(StripeWebformWebhookEvent::EVENT_NAME, $webhook_event);
+          ->dispatch($webhook_event, StripeWebformWebhookEvent::EVENT_NAME);
       }
     }
 
@@ -98,7 +101,7 @@ class StripeWebformEventSubscriber implements EventSubscriberInterface {
     $form_state = $event->getFormState();
     $form_object = $form_state->getFormObject();
     if ($form_object instanceof WebformSubmissionForm) {
-      /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
+      /** @var WebformSubmissionInterface $webform_submission */
       $webform_submission = $form_object->getEntity();
       $form_object->copyFormValuesToEntity($webform_submission, $form, $form_state);
 
diff --git a/src/Plugin/WebformElement/StripeWebformElementBase.php b/src/Plugin/WebformElement/StripeWebformElementBase.php
index b55f11b..f867f41 100644
--- a/src/Plugin/WebformElement/StripeWebformElementBase.php
+++ b/src/Plugin/WebformElement/StripeWebformElementBase.php
@@ -92,7 +92,7 @@ abstract class StripeWebformElementBase extends WebformElementBase {
    *
    * @param array $element
    *   The form element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $complete_form
    *   The complete form structure.
diff --git a/src/Plugin/WebformHandler/StripeWebformHandler.php b/src/Plugin/WebformHandler/StripeWebformHandler.php
index a806c97..f936457 100644
--- a/src/Plugin/WebformHandler/StripeWebformHandler.php
+++ b/src/Plugin/WebformHandler/StripeWebformHandler.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\stripe_webform\Plugin\WebformHandler;
 
+use Stripe\StripeClient;
+use Stripe\Exception\ExceptionInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -32,14 +34,14 @@ class StripeWebformHandler extends WebformHandlerBase {
     /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The token manager.
    *
-   * @var \Drupal\webform\WebformTokenManagerInterface
+   * @var WebformTokenManagerInterface
    */
   protected $tokenManager;
 
@@ -192,7 +194,7 @@ class StripeWebformHandler extends WebformHandlerBase {
     $data = $this->tokenManager->replace($this->configuration, $webform_submission);
 
     try {
-      $stripe = new \Stripe\StripeClient($apikeySecret);
+      $stripe = new StripeClient($apikeySecret);
 
       $metadata = [
         'uuid' => $uuid,
@@ -258,7 +260,7 @@ class StripeWebformHandler extends WebformHandlerBase {
         }
       }
     }
-    catch (\Stripe\Exception\ExceptionInterface $e) {
+    catch (ExceptionInterface $e) {
       $this->messenger()->addError($this->t('Stripe error: %error', ['%error' => $e->getMessage()]), 'error');
     }
  }
diff --git a/stripe_webform.info.yml b/stripe_webform.info.yml
index e669606..7272caf 100644
--- a/stripe_webform.info.yml
+++ b/stripe_webform.info.yml
@@ -1,7 +1,7 @@
 name: 'Stripe webform'
 type: module
 description: 'Provides a stripe webform element and default handlers'
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^8.8 || ^9 || ^10
 package: Stripe
 dependencies:
   - stripe:stripe (>=2.0.0)
diff --git a/stripe_webform.module b/stripe_webform.module
index e35b948..3f87294 100644
--- a/stripe_webform.module
+++ b/stripe_webform.module
@@ -1,4 +1,5 @@
 <?php
+use Drupal\Core\Form\FormStateInterface;
 /**
  * @file
  * Provides a Stripe webform element and handler.
@@ -20,7 +21,7 @@ function stripe_webform_theme() {
  *
  * Adds a warning about using wizard webforms.
  */
-function stripe_webform_form_webform_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function stripe_webform_form_webform_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   $webform = $form_state->getFormObject()->getEntity();
 
   if ($webform->hasWizardPages()) {
@@ -34,7 +35,7 @@ function stripe_webform_form_webform_edit_form_alter(&$form, \Drupal\Core\Form\F
  * Disables AJAX on webforms, as it doesn't work nicely with the current stripe
  * implementation.
  */
-function stripe_webform_form_webform_settings_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function stripe_webform_form_webform_settings_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   $webform = $form_state->getFormObject()->getEntity();
 
   $elements = $webform->getElementsInitializedAndFlattened();
