modules/contrib/photoshelter/photoshelter.batch.inc
modules/contrib/photoshelter/photoshelter.module
modules/contrib/photoshelter/src/Form/PhotoShelterConfigForm.php
modules/contrib/photoshelter/src/PhotoShelterService.php
modules/contrib/photoshelter/src/Plugin/QueueWorker/PhotoShelterSyncNewGallery.php
modules/contrib/photoshelter/src/Plugin/QueueWorker/PhotoShelterSyncNewPhoto.php

2 files with changes
====================

1) modules/contrib/photoshelter/src/PhotoShelterService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photoshelter;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use DateTime;
 use DateTimeZone;
 use Drupal\Core\Config\Config;
@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
    * @param bool $update
    *   If update or full sync.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function getData(DateTime $time, $update = FALSE) {

@@ @@
       'title' => t('galleries import'),
       'operations' => $operations,
       'finished' => 'photoshelter_sync_finished',
-      'file' => drupal_get_path('module', 'photoshelter') . '/photoshelter.batch.inc',
+      'file' => \Drupal::service('extension.list.module')->getPath('photoshelter') . '/photoshelter.batch.inc',
     );
     if ($update) {
       \Drupal::logger('photoshelter')->notice(t('Start photoshelter synchronization of new additions'));
@@ @@
    * @return array
    *   Array of operations for batch or array of data for queue.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function getCollections(DateTime $time, $update, $process) {
     $collections = $this->collections;
@@ @@
    * @return array
    *   Array of operations for batch or array of data for queue.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function curlOneCollection($collectionId, DateTime $time, $update, $process, $parentId = NULL) {
     $endpoint = 'collection/' . $collectionId;
@@ @@
    * @return array
    *   Array of operations for batch or array of data for queue.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function saveOneCollection(array $collection, DateTime $time, $update, $collectionVisibility, $process, $parentId = NULL) {
     $collectionId   = $collection['collection_id'];
@@ @@
    * @param string|null $parentId
    *   Parent collection ID.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function getGallery(array $gallery, DateTime $time, $update, $process, $parentId = NULL) {
     $galleryVisibility  = $gallery['Visibility']['mode'];
@@ @@
         'title' => t('photos import'),
         'operations' => $operations,
         'finished' => 'photoshelter_sync_photo_finished',
-        'file' => drupal_get_path('module', 'photoshelter') . '/photoshelter.batch.inc',
+        'file' => \Drupal::service('extension.list.module')->getPath('photoshelter') . '/photoshelter.batch.inc',
       );

       batch_set($batch);
@@ @@
    * @param string $parentVisibility
    *   Parent gallery visibility.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function getPhoto(array $image, $parentVisibility) {
     // Skip if image isn't public.
@@ @@
    * @return bool
    *   True or False.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function termExists($name = NULL, $vid = NULL) {
     $properties = [];
@@ @@
   /**
    * Update the photoshelter config last synchronization date.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The configuration object.
    * @param bool $isFullSync
    *   If it's a full sync or an update.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/photoshelter/src/Form/PhotoShelterConfigForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photoshelter\Form;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
 use DateTime;
 use DateTimeZone;
 use Drupal\Core\Form\ConfigFormBase;
@@ @@
    * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @return Config|ImmutableConfig
    *   The configuration object.
    */
   private function saveConfig(FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 2 files have been changed by Rector                                       

