modules/contrib/base_field_override_ui/base_field_override_ui.module
modules/contrib/base_field_override_ui/src/BaseFieldOverrideListBuilder.php
modules/contrib/base_field_override_ui/src/BaseFieldOverrideUI.php
modules/contrib/base_field_override_ui/src/ConfigTranslation/BaseFieldOverrideMapper.php
modules/contrib/base_field_override_ui/src/ConfigTranslation/ConfigTranslationBaseFieldOverrideListBuilder.php
modules/contrib/base_field_override_ui/src/Controller/BaseFieldOverrideController.php
modules/contrib/base_field_override_ui/src/Form/BaseFieldOverrideDeleteForm.php
modules/contrib/base_field_override_ui/src/Form/BaseFieldOverrideForm.php
modules/contrib/base_field_override_ui/src/Plugin/Derivative/BaseFieldOverrideUiLocalTask.php
modules/contrib/base_field_override_ui/src/Routing/RouteSubscriber.php
modules/contrib/base_field_override_ui/tests/src/Functional/BaseFieldOverrideUIDeleteTest.php
modules/contrib/base_field_override_ui/tests/src/Traits/BaseFieldOverrideUiTestTrait.php

7 files with changes
====================

1) modules/contrib/base_field_override_ui/src/Routing/RouteSubscriber.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/base_field_override_ui/src/Plugin/Derivative/BaseFieldOverrideUiLocalTask.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Creates an BaseFieldOverrideUiLocalTask object.
    *
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(RouteProviderInterface $route_provider, EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/base_field_override_ui/src/Form/BaseFieldOverrideForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\base_field_override_ui\Form;

+use Drupal\field\FieldConfigInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Field\Entity\BaseFieldOverride;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\field\FieldConfigInterface
+   * @var FieldConfigInterface
    */
   protected $entity;

@@ @@
   /**
    * The _title_callback for the field settings form.
    *
-   * @param \Drupal\Core\Field\Entity\BaseFieldOverride $base_field_override
+   * @param BaseFieldOverride $base_field_override
    *   The base field override.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/base_field_override_ui/src/Controller/BaseFieldOverrideController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\base_field_override_ui\Controller;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\Controller\EntityListController;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Constructs the BaseFieldOverrideController object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager) {
@@ @@
    * @param string $bundle
    *   The bundle.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The label of the field.
    */
   public function getAddTitle($base_field_name, $entity_type_id, $bundle) {
@@ @@
   /**
    * The _access_callback for add a base field override form.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    * @param string $base_field_name
    *   The machine name of the base field.
@@ @@
    * @param string $entity_type_id
    *   The entity type id.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function addAccess(RouteMatchInterface $route_match, AccountInterface $account, $base_field_name, $entity_type_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/base_field_override_ui/src/ConfigTranslation/BaseFieldOverrideMapper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\base_field_override_ui\ConfigTranslation;

+use Drupal\field\FieldConfigInterface;
 use Drupal\config_translation\ConfigEntityMapper;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;

@@ @@
   /**
    * Loaded entity instance to help produce the translation interface.
    *
-   * @var \Drupal\field\FieldConfigInterface
+   * @var FieldConfigInterface
    */
   protected $entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/base_field_override_ui/src/BaseFieldOverrideUI.php:18

    ---------- begin diff ----------
@@ @@
    * @param string $bundle
    *   The entity bundle.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public static function getOverviewRouteInfo($entity_type_id, $bundle) {
@@ @@
   /**
    * Returns the route info for add a new configuration.
    *
-   * @param \Drupal\Core\Field\Entity\BaseFieldOverride $config
+   * @param BaseFieldOverride $config
    *   The base field override entity.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public static function getAddRouteInfo(BaseFieldOverride $config) {
@@ @@
   /**
    * Returns the route info for edit the configuration.
    *
-   * @param \Drupal\Core\Field\Entity\BaseFieldOverride $config
+   * @param BaseFieldOverride $config
    *   The base field override entity.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public static function getEditRouteInfo(BaseFieldOverride $config) {
@@ @@
   /**
    * Returns the route info for delete the configuration.
    *
-   * @param \Drupal\Core\Field\Entity\BaseFieldOverride $config
+   * @param BaseFieldOverride $config
    *   The base field override entity.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public static function getDeleteRouteInfo(BaseFieldOverride $config) {
@@ @@
   /**
    * Returns the route info for translate the configuration.
    *
-   * @param \Drupal\Core\Field\Entity\BaseFieldOverride $config
+   * @param BaseFieldOverride $config
    *   The base field override entity.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public static function getTranslateRouteInfo(BaseFieldOverride $config) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/base_field_override_ui/src/BaseFieldOverrideListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\base_field_override_ui;

+use Drupal\Core\Field\Entity\BaseFieldOverride;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, ModuleHandlerInterface $module_handler) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $base_field_override) {
-    /** @var \Drupal\Core\Field\Entity\BaseFieldOverride $base_field_override */
+    /** @var BaseFieldOverride $base_field_override */
     $row = [
       'id' => Html::getClass($base_field_override->getName()),
       'data' => [
@@ @@
    * {@inheritdoc}
    */
   public function getDefaultOperations(EntityInterface $entity) {
-    /** @var \Drupal\Core\Field\Entity\BaseFieldOverride $entity */
+    /** @var BaseFieldOverride $entity */
     $operations = parent::getDefaultOperations($entity);

     if ($entity->access('update')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

