diff --git a/drush/config_devel.drush.inc b/drush/config_devel.drush.inc
index 346f87c..d61a24b 100644
--- a/drush/config_devel.drush.inc
+++ b/drush/config_devel.drush.inc
@@ -161,7 +161,9 @@ function drush_config_devel_import_one($path) {
  *   TRUE when the configuration was successfully exported. FALSE otherwise.
  */
 function drush_config_devel_process_config($config_list, $type, $extension, $directory) {
-  $config_path = drupal_get_path($type, $extension) . "/$directory";
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // Unsupported extension type encountered, using extension.path.resolver instead of extension.list
+  $config_path = \Drupal::service('extension.path.resolver')->getPath($type, $extension) . "/$directory";
 
   // Ensure the directory always exists.
   if (!file_exists($config_path) && !\Drupal::service('file_system')->mkdir($config_path, NULL, TRUE)) {
@@ -192,7 +194,9 @@ function drush_config_devel_process_config($config_list, $type, $extension, $dir
  *   The directory we're exporting to.
  */
 function drush_config_devel_import_config($config_list, $type, $extension, $directory) {
-  $config_path = drupal_get_path($type, $extension) . "/$directory";
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // Unsupported extension type encountered, using extension.path.resolver instead of extension.list
+  $config_path = \Drupal::service('extension.path.resolver')->getPath($type, $extension) . "/$directory";
   foreach ($config_list as $name) {
     $file_name = $config_path . '/' . $name . '.yml';
     drush_config_devel_import_one($file_name);
@@ -210,7 +214,9 @@ function drush_config_devel_import_config($config_list, $type, $extension, $dire
  *   An array containing install and optional config
  */
 function drush_config_devel_get_config($type, $extension) {
-  $filename = drupal_get_path($type, $extension) . '/' . $extension .'.info.yml';
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // Unsupported extension type encountered, using extension.path.resolver instead of extension.list
+  $filename = \Drupal::service('extension.path.resolver')->getPath($type, $extension) . '/' . $extension .'.info.yml';
   $info = \Drupal::service('info_parser')->parse($filename);
 
   $config = array();
diff --git a/src/Commands/ConfigDevelCommands.php b/src/Commands/ConfigDevelCommands.php
index a99098a..68fb761 100644
--- a/src/Commands/ConfigDevelCommands.php
+++ b/src/Commands/ConfigDevelCommands.php
@@ -20,72 +20,72 @@ class ConfigDevelCommands extends DrushCommands {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * The parser for info.yml files.
    *
-   * @var \Drupal\Core\Extension\InfoParserInterface
+   * @var InfoParserInterface
    */
   protected $infoParser;
 
   /**
    * The configuration object factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The config importer and exporter.
    *
-   * @var \Drupal\config_devel\ConfigImporterExporter
+   * @var ConfigImporterExporter
    */
   protected $configImportExport;
 
   /**
    * The event subscriber that listens to config change events.
    *
-   * @var \Drupal\config_devel\EventSubscriber\ConfigDevelAutoImportSubscriber
+   * @var ConfigDevelAutoImportSubscriber
    */
   protected $autoImportSubscriber;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * Constructs a new ConfigDevelCommands object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $themeHandler
+   * @param ThemeHandlerInterface $themeHandler
    *   The theme handler.
-   * @param \Drupal\Core\Extension\InfoParserInterface $infoParser
+   * @param InfoParserInterface $infoParser
    *   The parser for info.yml files.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration object factory.
-   * @param \Drupal\config_devel\ConfigImporterExporter $autoExportSubscriber
+   * @param ConfigImporterExporter $autoExportSubscriber
    *   The event subscriber that listens to config change events, and happens to
    *   contain some code that we depend on which should be factored out into a
    *   separate service.
-   * @param \Drupal\config_devel\EventSubscriber\ConfigDevelAutoImportSubscriber $autoImportSubscriber
+   * @param ConfigDevelAutoImportSubscriber $autoImportSubscriber
    *   The event subscriber that listens to config change events, and happens to
    *   contain some code that we depend on which should be factored out into a
    *   separate service.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file system service.
    */
   public function __construct(ModuleHandlerInterface $moduleHandler, ThemeHandlerInterface $themeHandler, InfoParserInterface $infoParser, ConfigFactoryInterface $configFactory, ConfigImporterExporter $config_import_export, ConfigDevelAutoImportSubscriber $autoImportSubscriber, FileSystemInterface $fileSystem) {
@@ -287,7 +287,9 @@ class ConfigDevelCommands extends DrushCommands {
    *   An array containing install and optional config.
    */
   protected function getExtensionConfig($type, $extension) {
-    $filename = drupal_get_path($type, $extension) . '/' . $extension .'.info.yml';
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Unsupported extension type encountered, using extension.path.resolver instead of extension.list
+    $filename = \Drupal::service('extension.path.resolver')->getPath($type, $extension) . '/' . $extension .'.info.yml';
     $info = $this->infoParser->parse($filename);
 
     $config = [];
@@ -331,7 +333,9 @@ class ConfigDevelCommands extends DrushCommands {
    *   created.
    */
   protected function exportConfig($config_list, $type, $extension, $directory) {
-    $config_path = drupal_get_path($type, $extension) . "/$directory";
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Unsupported extension type encountered, using extension.path.resolver instead of extension.list
+    $config_path = \Drupal::service('extension.path.resolver')->getPath($type, $extension) . "/$directory";
     // Ensure the directory always exists.
     if (!file_exists($config_path) && !$this->fileSystem->mkdir($config_path, NULL, TRUE)) {
       throw new \Exception(sprintf('The %s directory could not be created', $config_path));
@@ -372,7 +376,9 @@ class ConfigDevelCommands extends DrushCommands {
    *   or \Drupal\Core\Config\InstallStorage\InstallStorage::CONFIG_OPTIONAL_DIRECTORY.
    */
   protected function importConfig($config_list, $type, $extension, $directory) {
-    $config_path = drupal_get_path($type, $extension) . "/$directory";
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Unsupported extension type encountered, using extension.path.resolver instead of extension.list
+    $config_path = \Drupal::service('extension.path.resolver')->getPath($type, $extension) . "/$directory";
     foreach ($config_list as $name) {
       $file_name = $config_path . '/' . $name . '.yml';
       $this->importSingle($file_name);
diff --git a/src/ConfigImporterExporter.php b/src/ConfigImporterExporter.php
index 1c01961..6b530c7 100644
--- a/src/ConfigImporterExporter.php
+++ b/src/ConfigImporterExporter.php
@@ -32,104 +32,104 @@ class ConfigImporterExporter {
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The config storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configStorage;
 
   /**
    * The config manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The lock service.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $persistentLockBackend;
 
   /**
    * The typed config manager.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfigManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The module installer.
    *
-   * @var \Drupal\Core\Extension\ModuleInstallerInterface
+   * @var ModuleInstallerInterface
    */
   protected $moduleInstaller;
 
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * The string translation service.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected $stringTranslation;
 
   /**
    * The module extension list service.
    *
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    */
   protected $moduleExtensionList;
 
   /**
    * Creates a ConfigImporterExporter instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Config\StorageInterface $config_storage
+   * @param StorageInterface $config_storage
    *   The config storage.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The config manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Lock\LockBackendInterface $persistent_lock_backend
+   * @param LockBackendInterface $persistent_lock_backend
    *   The lock.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config_manager
+   * @param TypedConfigManagerInterface $typed_config_manager
    *   The typed config manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ModuleInstallerInterface $module_installer
+   * @param ModuleInstallerInterface $module_installer
    *   The module installer.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
-   * @param \Drupal\Core\Extension\ModuleExtensionList $module_extension_list
+   * @param ModuleExtensionList $module_extension_list
    *   The module extension list service.
    */
   public function __construct(
@@ -218,7 +218,7 @@ class ConfigImporterExporter {
   /**
    * Write a configuration item to files.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The config object.
    * @param array $file_names
    *   The file names to which the configuration should be written.
@@ -239,7 +239,7 @@ class ConfigImporterExporter {
 
       // Let everyone else have a change to update the exported data.
       $event = new ConfigDevelSaveEvent($file_names, $data);
-      $this->eventDispatcher->dispatch(ConfigDevelEvents::SAVE, $event);
+      $this->eventDispatcher->dispatch($event, ConfigDevelEvents::SAVE);
       $data = $event->getData();
       $file_names = $event->getFileNames();
 
@@ -263,14 +263,14 @@ class ConfigImporterExporter {
   /**
    * @param string $entity_type_id
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @return ConfigEntityStorageInterface
    */
   protected function getStorage($entity_type_id) {
     return $this->configManager->getEntityTypeManager()->getStorage($entity_type_id);
   }
 
   /**
-   * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $entity_storage
+   * @param ConfigEntityStorageInterface $entity_storage
    * @param string $config_name
    *
    * @return string
@@ -281,7 +281,7 @@ class ConfigImporterExporter {
   }
 
   /**
-   * @return \Drupal\Core\Config\Config
+   * @return Config
    */
   protected function getSettings() {
     return $this->configFactory->get('config_devel.settings');
diff --git a/src/Event/ConfigDevelSaveEvent.php b/src/Event/ConfigDevelSaveEvent.php
index 26a2afd..27fbbb6 100644
--- a/src/Event/ConfigDevelSaveEvent.php
+++ b/src/Event/ConfigDevelSaveEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\config_devel\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * The ConfigDevelSaveEvent class.
diff --git a/src/EventSubscriber/ConfigDevelAutoExportSubscriber.php b/src/EventSubscriber/ConfigDevelAutoExportSubscriber.php
index 44dc76e..fef0c45 100644
--- a/src/EventSubscriber/ConfigDevelAutoExportSubscriber.php
+++ b/src/EventSubscriber/ConfigDevelAutoExportSubscriber.php
@@ -9,7 +9,6 @@ use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ConfigManagerInterface;
 use Drupal\Core\Config\FileStorage;
 use Drupal\Core\Config\InstallStorage;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\Yaml\Exception\DumpException;
@@ -25,18 +24,18 @@ class ConfigDevelAutoExportSubscriber extends ConfigDevelSubscriberBase implemen
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Constructs the ConfigDevelAutoExportSubscriber object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The configuration manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ConfigManagerInterface $config_manager, EventDispatcherInterface $event_dispatcher) {
@@ -56,7 +55,7 @@ class ConfigDevelAutoExportSubscriber extends ConfigDevelSubscriberBase implemen
   /**
    * React to configuration ConfigEvent::SAVE events.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The event to process.
    */
   public function onConfigSave(ConfigCrudEvent $event) {
@@ -66,7 +65,7 @@ class ConfigDevelAutoExportSubscriber extends ConfigDevelSubscriberBase implemen
   /**
    * React to configuration ConfigEvent::RENAME events.
    *
-   * @param \Drupal\Core\Config\ConfigRenameEvent $event
+   * @param ConfigRenameEvent $event
    *   The event to process.
    */
   public function onConfigRename(ConfigRenameEvent $event) {
@@ -90,7 +89,7 @@ class ConfigDevelAutoExportSubscriber extends ConfigDevelSubscriberBase implemen
   /**
    * write configuration back to files.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The config object.
    * @param array $file_names
    *   The file names to which the configuration should be written.
@@ -107,7 +106,7 @@ class ConfigDevelAutoExportSubscriber extends ConfigDevelSubscriberBase implemen
 
       // Let everyone else have a change to update the exported data.
       $event = new ConfigDevelSaveEvent($file_names, $data);
-      $this->eventDispatcher->dispatch(ConfigDevelEvents::SAVE, $event);
+      $this->eventDispatcher->dispatch($event, ConfigDevelEvents::SAVE);
       $data = $event->getData();
       $file_names = $event->getFileNames();
 
diff --git a/src/EventSubscriber/ConfigDevelAutoImportSubscriber.php b/src/EventSubscriber/ConfigDevelAutoImportSubscriber.php
index 18ebbcd..678162b 100644
--- a/src/EventSubscriber/ConfigDevelAutoImportSubscriber.php
+++ b/src/EventSubscriber/ConfigDevelAutoImportSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\config_devel\EventSubscriber;
 
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Config\InstallStorage;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ -65,7 +66,7 @@ class ConfigDevelAutoImportSubscriber extends ConfigDevelSubscriberBase implemen
         $entity_type = $entity_storage->getEntityType();
         $id_key = $entity_type->getKey('id');
         $data[$id_key] = $entity_id;
-        /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+        /** @var ConfigEntityInterface $entity */
         $entity = $entity_storage->createFromStorageRecord($data);
         if ($existing_entity = $entity_storage->load($entity_id)) {
           $entity
diff --git a/src/EventSubscriber/ConfigDevelSubscriberBase.php b/src/EventSubscriber/ConfigDevelSubscriberBase.php
index 7757c58..9f033ed 100644
--- a/src/EventSubscriber/ConfigDevelSubscriberBase.php
+++ b/src/EventSubscriber/ConfigDevelSubscriberBase.php
@@ -3,6 +3,7 @@
 namespace Drupal\config_devel\EventSubscriber;
 
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ConfigManagerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
@@ -12,23 +13,23 @@ class ConfigDevelSubscriberBase {
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The configuration manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;
 
   /**
    * Constructs the ConfigDevelAutoExportSubscriber object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The configuration manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ConfigManagerInterface $config_manager) {
@@ -39,14 +40,14 @@ class ConfigDevelSubscriberBase {
   /**
    * @param string $entity_type_id
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @return ConfigEntityStorageInterface
    */
   protected function getStorage($entity_type_id) {
     return $this->configManager->getEntityTypeManager()->getStorage($entity_type_id);
   }
 
   /**
-   * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $entity_storage
+   * @param ConfigEntityStorageInterface $entity_storage
    * @param string $config_name
    *
    * @return string
@@ -57,7 +58,7 @@ class ConfigDevelSubscriberBase {
   }
 
   /**
-   * @return \Drupal\Core\Config\Config
+   * @return Config
    */
   protected function getSettings() {
     return $this->configFactory->get('config_devel.settings');
diff --git a/tests/src/Kernel/ConfigDevelSubscriberEntityTest.php b/tests/src/Kernel/ConfigDevelSubscriberEntityTest.php
index 22c5f84..6e46f29 100644
--- a/tests/src/Kernel/ConfigDevelSubscriberEntityTest.php
+++ b/tests/src/Kernel/ConfigDevelSubscriberEntityTest.php
@@ -24,9 +24,9 @@ class ConfigDevelSubscriberEntityTest extends ConfigDevelSubscriberTestBase {
    */
   protected function doAssert(array $data, array $exported_data) {
     $entity = \Drupal::entityTypeManager()->getStorage('config_test')->load('test');
-    $this->assertIdentical($data['label'], $entity->get('label'));
-    $this->assertIdentical($exported_data['label'], $data['label']);
-    $this->assertIdentical($exported_data['id'], 'test');
+    $this->assertSame($data['label'], $entity->get('label'));
+    $this->assertSame($exported_data['label'], $data['label']);
+    $this->assertSame($exported_data['id'], 'test');
     $this->assertFalse(isset($exported_data['uuid']));
   }
 }
diff --git a/tests/src/Kernel/ConfigDevelSubscriberRawTest.php b/tests/src/Kernel/ConfigDevelSubscriberRawTest.php
index 99ff6ba..4298bde 100644
--- a/tests/src/Kernel/ConfigDevelSubscriberRawTest.php
+++ b/tests/src/Kernel/ConfigDevelSubscriberRawTest.php
@@ -18,8 +18,8 @@ class ConfigDevelSubscriberRawTest extends ConfigDevelSubscriberTestBase {
    * {@inheritdoc}
    */
   protected function doAssert(array $data, array $exported_data) {
-    $this->assertIdentical($data, $this->storage->read(static::CONFIGNAME));
-    $this->assertIdentical($data, $exported_data);
+    $this->assertSame($data, $this->storage->read(static::CONFIGNAME));
+    $this->assertSame($data, $exported_data);
   }
 
 }
diff --git a/tests/src/Kernel/ConfigDevelSubscriberTestBase.php b/tests/src/Kernel/ConfigDevelSubscriberTestBase.php
index 5211d08..652497f 100644
--- a/tests/src/Kernel/ConfigDevelSubscriberTestBase.php
+++ b/tests/src/Kernel/ConfigDevelSubscriberTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\config_devel\Kernel;
 
+use Drupal\Core\Config\StorageInterface;
 use Drupal\Component\Serialization\Yaml;
 use Drupal\KernelTests\KernelTestBase;
 
@@ -18,7 +19,7 @@ abstract class ConfigDevelSubscriberTestBase extends KernelTestBase {
   const CONFIGNAME = '';
 
   /**
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $storage;
 
diff --git a/tests/src/Unit/ConfigDevelAutoExportSubscriberTest.php b/tests/src/Unit/ConfigDevelAutoExportSubscriberTest.php
index 1eead96..dbd62d0 100644
--- a/tests/src/Unit/ConfigDevelAutoExportSubscriberTest.php
+++ b/tests/src/Unit/ConfigDevelAutoExportSubscriberTest.php
@@ -23,9 +23,7 @@ class ConfigDevelAutoExportSubscriberTest extends ConfigDevelTestBase {
       'uuid' => '836769f4-6791-402d-9046-cc06e20be87f',
     );
 
-    $config = $this->getMockBuilder('\Drupal\Core\Config\Config')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock('\Drupal\Core\Config\Config');
     $config->expects($this->any())
       ->method('getName')
       ->will($this->returnValue($this->randomMachineName()));
diff --git a/tests/src/Unit/ConfigDevelTestBase.php b/tests/src/Unit/ConfigDevelTestBase.php
index e42b717..f727922 100644
--- a/tests/src/Unit/ConfigDevelTestBase.php
+++ b/tests/src/Unit/ConfigDevelTestBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\config_devel\Unit;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\Core\Config\ConfigManagerInterface;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use org\bovigo\vfs\vfsStream;
 use Drupal\Tests\UnitTestCase;
 
@@ -11,24 +15,24 @@ use Drupal\Tests\UnitTestCase;
 abstract class ConfigDevelTestBase extends UnitTestCase {
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var ConfigFactoryInterface|MockObject
    */
   protected $configFactory;
 
   /**
-   * @var \Drupal\Core\Config\ConfigManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var ConfigManagerInterface|MockObject
    */
   protected $configManager;
 
   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->configFactory = $this->createMock('Drupal\Core\Config\ConfigFactoryInterface');
 
diff --git a/tests/src/Unit/ConfigImporterExporterTest.php b/tests/src/Unit/ConfigImporterExporterTest.php
index e66e022..5ae3dc9 100644
--- a/tests/src/Unit/ConfigImporterExporterTest.php
+++ b/tests/src/Unit/ConfigImporterExporterTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\config_devel\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\StorageInterface;
 use Drupal\Core\ProxyClass\Lock\PersistentDatabaseLockBackend;
 use Drupal\Core\Config\TypedConfigManagerInterface;
@@ -21,6 +22,7 @@ use Drupal\config_devel\ConfigImporterExporter;
  */
 class ConfigImporterExporterTest extends ConfigDevelTestBase {
 
+  use ProphecyTrait;
   /**
    * Test ConfigImporterExporter::writeBackConfig().
    */
@@ -31,9 +33,7 @@ class ConfigImporterExporterTest extends ConfigDevelTestBase {
       'uuid' => '836769f4-6791-402d-9046-cc06e20be87f',
     );
 
-    $config = $this->getMockBuilder('\Drupal\Core\Config\Config')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock('\Drupal\Core\Config\Config');
     $config->expects($this->any())
       ->method('getName')
       ->will($this->returnValue($this->randomMachineName()));
