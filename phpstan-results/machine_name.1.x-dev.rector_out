[parsing] modules/contrib/machine_name/src/Plugin/Field/FieldFormatter/MachineName.php
[refactoring] modules/contrib/machine_name/src/Plugin/Field/FieldFormatter/MachineName.php
[post rectors] modules/contrib/machine_name/src/Plugin/Field/FieldFormatter/MachineName.php
[print] modules/contrib/machine_name/src/Plugin/Field/FieldFormatter/MachineName.php
[parsing] modules/contrib/machine_name/src/Plugin/Field/FieldType/MachineName.php
[refactoring] modules/contrib/machine_name/src/Plugin/Field/FieldType/MachineName.php
[post rectors] modules/contrib/machine_name/src/Plugin/Field/FieldType/MachineName.php
[print] modules/contrib/machine_name/src/Plugin/Field/FieldType/MachineName.php
[parsing] modules/contrib/machine_name/src/Plugin/Field/FieldWidget/MachineName.php
[refactoring] modules/contrib/machine_name/src/Plugin/Field/FieldWidget/MachineName.php
[post rectors] modules/contrib/machine_name/src/Plugin/Field/FieldWidget/MachineName.php
[print] modules/contrib/machine_name/src/Plugin/Field/FieldWidget/MachineName.php
[parsing] modules/contrib/machine_name/src/Plugin/Validation/Constraint/MachineNameUniqueConstraint.php
[refactoring] modules/contrib/machine_name/src/Plugin/Validation/Constraint/MachineNameUniqueConstraint.php
[post rectors] modules/contrib/machine_name/src/Plugin/Validation/Constraint/MachineNameUniqueConstraint.php
[print] modules/contrib/machine_name/src/Plugin/Validation/Constraint/MachineNameUniqueConstraint.php
[parsing] modules/contrib/machine_name/src/Plugin/Validation/Constraint/MachineNameUniqueValidator.php
[refactoring] modules/contrib/machine_name/src/Plugin/Validation/Constraint/MachineNameUniqueValidator.php
[post rectors] modules/contrib/machine_name/src/Plugin/Validation/Constraint/MachineNameUniqueValidator.php
[print] modules/contrib/machine_name/src/Plugin/Validation/Constraint/MachineNameUniqueValidator.php
[parsing] modules/contrib/machine_name/tests/src/Kernel/MachineNameFormWidgetTest.php
[refactoring] modules/contrib/machine_name/tests/src/Kernel/MachineNameFormWidgetTest.php
[post rectors] modules/contrib/machine_name/tests/src/Kernel/MachineNameFormWidgetTest.php
[print] modules/contrib/machine_name/tests/src/Kernel/MachineNameFormWidgetTest.php
[parsing] modules/contrib/machine_name/tests/src/Kernel/MachineNameItemTest.php
[refactoring] modules/contrib/machine_name/tests/src/Kernel/MachineNameItemTest.php
[post rectors] modules/contrib/machine_name/tests/src/Kernel/MachineNameItemTest.php
[print] modules/contrib/machine_name/tests/src/Kernel/MachineNameItemTest.php
[refactoring] modules/contrib/machine_name/tests/src/Kernel/MachineNameItemTest.php
[post rectors] modules/contrib/machine_name/tests/src/Kernel/MachineNameItemTest.php
[print] modules/contrib/machine_name/tests/src/Kernel/MachineNameItemTest.php
[parsing] modules/contrib/machine_name/tests/src/Kernel/MachineNameUniqueValueTest.php
[refactoring] modules/contrib/machine_name/tests/src/Kernel/MachineNameUniqueValueTest.php
[post rectors] modules/contrib/machine_name/tests/src/Kernel/MachineNameUniqueValueTest.php
[print] modules/contrib/machine_name/tests/src/Kernel/MachineNameUniqueValueTest.php

1 file with changes
===================

1) modules/contrib/machine_name/tests/src/Kernel/MachineNameItemTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Sets the test up.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Create a machine_name field storage and field for validation.
     FieldStorageConfig::create([
@@ @@
     $entity = EntityTest::load($id);
     $this->assertTrue($entity->field_test instanceof FieldItemListInterface, 'Field implements interface.');
     $this->assertTrue($entity->field_test[0] instanceof FieldItemInterface, 'Field item implements interface.');
-    $this->assertEqual($entity->field_test->value, $value);
-    $this->assertEqual($entity->field_test[0]->value, $value);
+    $this->assertEquals($entity->field_test->value, $value);
+    $this->assertEquals($entity->field_test[0]->value, $value);

     // Verify changing the field value.
     $new_value = 'changed_machine_name';
     $entity->field_test->value = $new_value;
-    $this->assertEqual($entity->field_test->value, $new_value);
+    $this->assertEquals($entity->field_test->value, $new_value);

     // Read changed entity and assert changed values.
     $entity->save();
     $entity = EntityTest::load($id);
-    $this->assertEqual($entity->field_test->value, $new_value);
+    $this->assertEquals($entity->field_test->value, $new_value);

     // Test sample item generation.
     $entity = EntityTest::create();
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 1 file has been changed by Rector                                         

