diff --git a/src/Event/PolicyAlterEvent.php b/src/Event/PolicyAlterEvent.php
index b1a99e0..e79bc2c 100644
--- a/src/Event/PolicyAlterEvent.php
+++ b/src/Event/PolicyAlterEvent.php
@@ -9,7 +9,7 @@ use Symfony\Component\HttpFoundation\Response;
 /**
  * Event for altering a response Permissions Policy.
  */
-class PolicyAlterEvent extends Event {
+class PolicyAlterEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * A Permissions policy.
diff --git a/src/EventSubscriber/ResponseSubscriber.php b/src/EventSubscriber/ResponseSubscriber.php
index 6817f4a..fda4b12 100644
--- a/src/EventSubscriber/ResponseSubscriber.php
+++ b/src/EventSubscriber/ResponseSubscriber.php
@@ -58,10 +58,10 @@ class ResponseSubscriber implements EventSubscriberInterface {
   /**
    * Add Permissions-Policy header to response.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The Response event.
    */
-  public function onKernelResponse(FilterResponseEvent $event) {
+  public function onKernelResponse(\Symfony\Component\HttpKernel\Event\ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
@@ -108,8 +108,8 @@ class ResponseSubscriber implements EventSubscriberInterface {
       }
 
       $this->eventDispatcher->dispatch(
-        PermissionsPolicyEvents::POLICY_ALTER,
-        new PolicyAlterEvent($policy, $response)
+        new PolicyAlterEvent($policy, $response),
+        PermissionsPolicyEvents::POLICY_ALTER
       );
 
       if (($headerValue = $policy->getHeaderValue())) {
diff --git a/tests/src/Unit/EventSubscriber/ResponseSubscriberTest.php b/tests/src/Unit/EventSubscriber/ResponseSubscriberTest.php
index e962b78..9b29a8d 100644
--- a/tests/src/Unit/EventSubscriber/ResponseSubscriberTest.php
+++ b/tests/src/Unit/EventSubscriber/ResponseSubscriberTest.php
@@ -20,14 +20,14 @@ class ResponseSubscriberTest extends UnitTestCase {
   /**
    * Mock HTTP Response.
    *
-   * @var \Drupal\Core\Render\HtmlResponse|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Render\HtmlResponse|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $response;
 
   /**
    * Mock Response Event.
    *
-   * @var \Symfony\Component\HttpKernel\Event\FilterResponseEvent|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\HttpKernel\Event\ResponseEvent|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $event;
 
@@ -44,21 +44,14 @@ class ResponseSubscriberTest extends UnitTestCase {
   public function setUp(): void {
     parent::setUp();
 
-    $this->response = $this->getMockBuilder(HtmlResponse::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->response->headers = $this->getMockBuilder(ResponseHeaderBag::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $responseCacheableMetadata = $this->getMockBuilder(CacheableMetadata::class)
-      ->getMock();
+    $this->response = $this->createMock(HtmlResponse::class);
+    $this->response->headers = $this->createMock(ResponseHeaderBag::class);
+    $responseCacheableMetadata = $this->createMock(CacheableMetadata::class);
     $this->response->method('getCacheableMetadata')
       ->willReturn($responseCacheableMetadata);
 
-    /** @var \Symfony\Component\HttpKernel\Event\FilterResponseEvent|\PHPUnit_Framework_MockObject_MockObject $event */
-    $this->event = $this->getMockBuilder(FilterResponseEvent::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var \Symfony\Component\HttpKernel\Event\ResponseEvent|\PHPUnit\Framework\MockObject\MockObject $event */
+    $this->event = $this->createMock(\Symfony\Component\HttpKernel\Event\ResponseEvent::class);
     $this->event->expects($this->any())
       ->method('isMasterRequest')
       ->willReturn(TRUE);
@@ -66,9 +59,7 @@ class ResponseSubscriberTest extends UnitTestCase {
       ->method('getResponse')
       ->willReturn($this->response);
 
-    $this->eventDispatcher = $this->getMockBuilder(EventDispatcher::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->eventDispatcher = $this->createMock(EventDispatcher::class);
   }
 
   /**
@@ -84,9 +75,10 @@ class ResponseSubscriberTest extends UnitTestCase {
    * An empty or missing feature list should not output a header.
    *
    * @covers ::onKernelResponse
+   * @doesNotPerformAssertions
    */
   public function testEmptyPolicy() {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'permissionspolicy.settings' => [
         'enforce' => [
@@ -111,10 +103,11 @@ class ResponseSubscriberTest extends UnitTestCase {
    * Header shouldn't be applied if policy is disabled.
    *
    * @covers ::onKernelResponse
+   * @doesNotPerformAssertions
    */
   public function testDisabledPolicy() {
 
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'permissionspolicy.settings' => [
         'enforce' => [
@@ -144,10 +137,11 @@ class ResponseSubscriberTest extends UnitTestCase {
    * Test a single feature.
    *
    * @covers ::onKernelResponse
+   * @doesNotPerformAssertions
    */
   public function testSingleDirective() {
 
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'permissionspolicy.settings' => [
         'enforce' => [
@@ -177,10 +171,11 @@ class ResponseSubscriberTest extends UnitTestCase {
    * Test a multiple features.
    *
    * @covers ::onKernelResponse
+   * @doesNotPerformAssertions
    */
   public function testMultipleDirectives() {
 
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'permissionspolicy.settings' => [
         'enforce' => [
@@ -213,10 +208,11 @@ class ResponseSubscriberTest extends UnitTestCase {
    * A previously set header should be removed if policy is enabled but empty.
    *
    * @covers ::onKernelResponse
+   * @doesNotPerformAssertions
    */
   public function testOverrideWhenEmpty() {
 
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'permissionspolicy.settings' => [
         'enforce' => [
@@ -249,10 +245,11 @@ class ResponseSubscriberTest extends UnitTestCase {
    * A previously set header should not be removed if policy is disabled.
    *
    * @covers ::onKernelResponse
+   * @doesNotPerformAssertions
    */
   public function testNoOverrideWhenDisabled() {
 
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'permissionspolicy.settings' => [
         'enforce' => [
