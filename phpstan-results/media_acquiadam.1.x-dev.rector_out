[parsing] modules/contrib/media_acquiadam/media_acquiadam.install
[refactoring] modules/contrib/media_acquiadam/media_acquiadam.install
[post rectors] modules/contrib/media_acquiadam/media_acquiadam.install
[print] modules/contrib/media_acquiadam/media_acquiadam.install
[parsing] modules/contrib/media_acquiadam/media_acquiadam.module
[refactoring] modules/contrib/media_acquiadam/media_acquiadam.module
[post rectors] modules/contrib/media_acquiadam/media_acquiadam.module
[print] modules/contrib/media_acquiadam/media_acquiadam.module
[parsing] modules/contrib/media_acquiadam/modules/lightning_acquiadam/lightning_acquiadam.install
[refactoring] modules/contrib/media_acquiadam/modules/lightning_acquiadam/lightning_acquiadam.install
[post rectors] modules/contrib/media_acquiadam/modules/lightning_acquiadam/lightning_acquiadam.install
[print] modules/contrib/media_acquiadam/modules/lightning_acquiadam/lightning_acquiadam.install
[parsing] modules/contrib/media_acquiadam/modules/media_acquiadam_example/media_acquiadam_example.install
[refactoring] modules/contrib/media_acquiadam/modules/media_acquiadam_example/media_acquiadam_example.install
[post rectors] modules/contrib/media_acquiadam/modules/media_acquiadam_example/media_acquiadam_example.install
[print] modules/contrib/media_acquiadam/modules/media_acquiadam_example/media_acquiadam_example.install
[parsing] modules/contrib/media_acquiadam/modules/media_acquiadam_report/media_acquiadam_report.module
[refactoring] modules/contrib/media_acquiadam/modules/media_acquiadam_report/media_acquiadam_report.module
[post rectors] modules/contrib/media_acquiadam/modules/media_acquiadam_report/media_acquiadam_report.module
[print] modules/contrib/media_acquiadam/modules/media_acquiadam_report/media_acquiadam_report.module
[refactoring] modules/contrib/media_acquiadam/modules/media_acquiadam_report/media_acquiadam_report.module
[post rectors] modules/contrib/media_acquiadam/modules/media_acquiadam_report/media_acquiadam_report.module
[print] modules/contrib/media_acquiadam/modules/media_acquiadam_report/media_acquiadam_report.module
[parsing] modules/contrib/media_acquiadam/modules/media_acquiadam_report/src/EventSubscriber/AcquiadamUsageSubscriber.php
[refactoring] modules/contrib/media_acquiadam/modules/media_acquiadam_report/src/EventSubscriber/AcquiadamUsageSubscriber.php
[post rectors] modules/contrib/media_acquiadam/modules/media_acquiadam_report/src/EventSubscriber/AcquiadamUsageSubscriber.php
[print] modules/contrib/media_acquiadam/modules/media_acquiadam_report/src/EventSubscriber/AcquiadamUsageSubscriber.php
[parsing] modules/contrib/media_acquiadam/modules/media_acquiadam_report/src/Routing/RouteSubscriber.php
[refactoring] modules/contrib/media_acquiadam/modules/media_acquiadam_report/src/Routing/RouteSubscriber.php
[post rectors] modules/contrib/media_acquiadam/modules/media_acquiadam_report/src/Routing/RouteSubscriber.php
[print] modules/contrib/media_acquiadam/modules/media_acquiadam_report/src/Routing/RouteSubscriber.php
[parsing] modules/contrib/media_acquiadam/src/Acquiadam.php
[refactoring] modules/contrib/media_acquiadam/src/Acquiadam.php
[post rectors] modules/contrib/media_acquiadam/src/Acquiadam.php
[print] modules/contrib/media_acquiadam/src/Acquiadam.php
[parsing] modules/contrib/media_acquiadam/src/AcquiadamInterface.php
[refactoring] modules/contrib/media_acquiadam/src/AcquiadamInterface.php
[post rectors] modules/contrib/media_acquiadam/src/AcquiadamInterface.php
[print] modules/contrib/media_acquiadam/src/AcquiadamInterface.php
[parsing] modules/contrib/media_acquiadam/src/AssetData.php
[refactoring] modules/contrib/media_acquiadam/src/AssetData.php
[post rectors] modules/contrib/media_acquiadam/src/AssetData.php
[print] modules/contrib/media_acquiadam/src/AssetData.php
[parsing] modules/contrib/media_acquiadam/src/AssetDataInterface.php
[refactoring] modules/contrib/media_acquiadam/src/AssetDataInterface.php
[post rectors] modules/contrib/media_acquiadam/src/AssetDataInterface.php
[print] modules/contrib/media_acquiadam/src/AssetDataInterface.php
[parsing] modules/contrib/media_acquiadam/src/Client.php
[refactoring] modules/contrib/media_acquiadam/src/Client.php
[post rectors] modules/contrib/media_acquiadam/src/Client.php
[print] modules/contrib/media_acquiadam/src/Client.php
[parsing] modules/contrib/media_acquiadam/src/ClientFactory.php
[refactoring] modules/contrib/media_acquiadam/src/ClientFactory.php
[post rectors] modules/contrib/media_acquiadam/src/ClientFactory.php
[print] modules/contrib/media_acquiadam/src/ClientFactory.php
[parsing] modules/contrib/media_acquiadam/src/Controller/AcquiadamController.php
[refactoring] modules/contrib/media_acquiadam/src/Controller/AcquiadamController.php
[post rectors] modules/contrib/media_acquiadam/src/Controller/AcquiadamController.php
[print] modules/contrib/media_acquiadam/src/Controller/AcquiadamController.php
[parsing] modules/contrib/media_acquiadam/src/Controller/OauthController.php
[refactoring] modules/contrib/media_acquiadam/src/Controller/OauthController.php
[post rectors] modules/contrib/media_acquiadam/src/Controller/OauthController.php
[print] modules/contrib/media_acquiadam/src/Controller/OauthController.php
[parsing] modules/contrib/media_acquiadam/src/Form/AcquiadamConfig.php
[refactoring] modules/contrib/media_acquiadam/src/Form/AcquiadamConfig.php
[post rectors] modules/contrib/media_acquiadam/src/Form/AcquiadamConfig.php
[print] modules/contrib/media_acquiadam/src/Form/AcquiadamConfig.php
[parsing] modules/contrib/media_acquiadam/src/MediaEntityHelper.php
[refactoring] modules/contrib/media_acquiadam/src/MediaEntityHelper.php
[post rectors] modules/contrib/media_acquiadam/src/MediaEntityHelper.php
[print] modules/contrib/media_acquiadam/src/MediaEntityHelper.php
[parsing] modules/contrib/media_acquiadam/src/Oauth.php
[refactoring] modules/contrib/media_acquiadam/src/Oauth.php
[post rectors] modules/contrib/media_acquiadam/src/Oauth.php
[print] modules/contrib/media_acquiadam/src/Oauth.php
[parsing] modules/contrib/media_acquiadam/src/OauthInterface.php
[refactoring] modules/contrib/media_acquiadam/src/OauthInterface.php
[post rectors] modules/contrib/media_acquiadam/src/OauthInterface.php
[print] modules/contrib/media_acquiadam/src/OauthInterface.php
[parsing] modules/contrib/media_acquiadam/src/Plugin/EntityBrowser/Widget/Acquiadam.php
[printing skipped due error] modules/contrib/media_acquiadam/src/Plugin/EntityBrowser/Widget/Acquiadam.php
[parsing] modules/contrib/media_acquiadam/src/Plugin/Linkit/Substitution/DAMAsset.php
[printing skipped due error] modules/contrib/media_acquiadam/src/Plugin/Linkit/Substitution/DAMAsset.php
[parsing] modules/contrib/media_acquiadam/src/Plugin/QueueWorker/AssetRefresh.php
[refactoring] modules/contrib/media_acquiadam/src/Plugin/QueueWorker/AssetRefresh.php
[post rectors] modules/contrib/media_acquiadam/src/Plugin/QueueWorker/AssetRefresh.php
[print] modules/contrib/media_acquiadam/src/Plugin/QueueWorker/AssetRefresh.php
[parsing] modules/contrib/media_acquiadam/src/Plugin/media/Source/AcquiadamAsset.php
[refactoring] modules/contrib/media_acquiadam/src/Plugin/media/Source/AcquiadamAsset.php
[post rectors] modules/contrib/media_acquiadam/src/Plugin/media/Source/AcquiadamAsset.php
[print] modules/contrib/media_acquiadam/src/Plugin/media/Source/AcquiadamAsset.php
[parsing] modules/contrib/media_acquiadam/src/Service/AssetFileEntityHelper.php
[refactoring] modules/contrib/media_acquiadam/src/Service/AssetFileEntityHelper.php
[post rectors] modules/contrib/media_acquiadam/src/Service/AssetFileEntityHelper.php
[print] modules/contrib/media_acquiadam/src/Service/AssetFileEntityHelper.php
[refactoring] modules/contrib/media_acquiadam/src/Service/AssetFileEntityHelper.php
[post rectors] modules/contrib/media_acquiadam/src/Service/AssetFileEntityHelper.php
[print] modules/contrib/media_acquiadam/src/Service/AssetFileEntityHelper.php
[parsing] modules/contrib/media_acquiadam/src/Service/AssetImageHelper.php
[refactoring] modules/contrib/media_acquiadam/src/Service/AssetImageHelper.php
[post rectors] modules/contrib/media_acquiadam/src/Service/AssetImageHelper.php
[print] modules/contrib/media_acquiadam/src/Service/AssetImageHelper.php
[refactoring] modules/contrib/media_acquiadam/src/Service/AssetImageHelper.php
[post rectors] modules/contrib/media_acquiadam/src/Service/AssetImageHelper.php
[print] modules/contrib/media_acquiadam/src/Service/AssetImageHelper.php
[parsing] modules/contrib/media_acquiadam/src/Service/AssetMediaFactory.php
[refactoring] modules/contrib/media_acquiadam/src/Service/AssetMediaFactory.php
[post rectors] modules/contrib/media_acquiadam/src/Service/AssetMediaFactory.php
[print] modules/contrib/media_acquiadam/src/Service/AssetMediaFactory.php
[parsing] modules/contrib/media_acquiadam/src/Service/AssetMetadataHelper.php
[refactoring] modules/contrib/media_acquiadam/src/Service/AssetMetadataHelper.php
[post rectors] modules/contrib/media_acquiadam/src/Service/AssetMetadataHelper.php
[print] modules/contrib/media_acquiadam/src/Service/AssetMetadataHelper.php
[parsing] modules/contrib/media_acquiadam/src/Service/AssetRefreshManager.php
[refactoring] modules/contrib/media_acquiadam/src/Service/AssetRefreshManager.php
[post rectors] modules/contrib/media_acquiadam/src/Service/AssetRefreshManager.php
[print] modules/contrib/media_acquiadam/src/Service/AssetRefreshManager.php
[parsing] modules/contrib/media_acquiadam/src/Service/AssetRefreshManagerInterface.php
[refactoring] modules/contrib/media_acquiadam/src/Service/AssetRefreshManagerInterface.php
[post rectors] modules/contrib/media_acquiadam/src/Service/AssetRefreshManagerInterface.php
[print] modules/contrib/media_acquiadam/src/Service/AssetRefreshManagerInterface.php
[parsing] modules/contrib/media_acquiadam/src/Session/CookieSameSiteSessionConfiguration.php
[refactoring] modules/contrib/media_acquiadam/src/Session/CookieSameSiteSessionConfiguration.php
[post rectors] modules/contrib/media_acquiadam/src/Session/CookieSameSiteSessionConfiguration.php
[print] modules/contrib/media_acquiadam/src/Session/CookieSameSiteSessionConfiguration.php
[parsing] modules/contrib/media_acquiadam/tests/modules/media_acquiadam_test/src/TestClient.php
[refactoring] modules/contrib/media_acquiadam/tests/modules/media_acquiadam_test/src/TestClient.php
[post rectors] modules/contrib/media_acquiadam/tests/modules/media_acquiadam_test/src/TestClient.php
[print] modules/contrib/media_acquiadam/tests/modules/media_acquiadam_test/src/TestClient.php
[parsing] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamKernelTestBase.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamKernelTestBase.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamKernelTestBase.php
[print] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamKernelTestBase.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamKernelTestBase.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamKernelTestBase.php
[print] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamKernelTestBase.php
[parsing] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamMediaTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamMediaTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamMediaTest.php
[print] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamMediaTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamMediaTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamMediaTest.php
[print] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamMediaTest.php
[parsing] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamNotificationTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamNotificationTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamNotificationTest.php
[print] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamNotificationTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamNotificationTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamNotificationTest.php
[print] modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamNotificationTest.php
[parsing] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamAssetDataTrait.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamAssetDataTrait.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamAssetDataTrait.php
[print] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamAssetDataTrait.php
[parsing] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamAssetImageHelperTrait.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamAssetImageHelperTrait.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamAssetImageHelperTrait.php
[print] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamAssetImageHelperTrait.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamAssetImageHelperTrait.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamAssetImageHelperTrait.php
[print] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamAssetImageHelperTrait.php
[parsing] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamConfigTrait.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamConfigTrait.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamConfigTrait.php
[print] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamConfigTrait.php
[parsing] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamLoggerFactoryTrait.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamLoggerFactoryTrait.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamLoggerFactoryTrait.php
[print] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamLoggerFactoryTrait.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamLoggerFactoryTrait.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamLoggerFactoryTrait.php
[print] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamLoggerFactoryTrait.php
[parsing] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamMockedMediaEntityTrait.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamMockedMediaEntityTrait.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamMockedMediaEntityTrait.php
[print] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamMockedMediaEntityTrait.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamMockedMediaEntityTrait.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamMockedMediaEntityTrait.php
[print] modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamMockedMediaEntityTrait.php
[parsing] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamAssetTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamAssetTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamAssetTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamAssetTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamAssetTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamAssetTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamAssetTest.php
[parsing] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamClientFactoryTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamClientFactoryTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamClientFactoryTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamClientFactoryTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamClientFactoryTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamClientFactoryTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamClientFactoryTest.php
[parsing] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamConfigFormTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamConfigFormTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamConfigFormTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamConfigFormTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamConfigFormTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamConfigFormTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamConfigFormTest.php
[parsing] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamServiceTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamServiceTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamServiceTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamServiceTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamServiceTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamServiceTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamServiceTest.php
[parsing] modules/contrib/media_acquiadam/tests/src/Unit/AssetDataTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/AssetDataTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/AssetDataTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/AssetDataTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/AssetDataTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/AssetDataTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/AssetDataTest.php
[parsing] modules/contrib/media_acquiadam/tests/src/Unit/AssetFileEntityHelperTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/AssetFileEntityHelperTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/AssetFileEntityHelperTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/AssetFileEntityHelperTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/AssetFileEntityHelperTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/AssetFileEntityHelperTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/AssetFileEntityHelperTest.php
[parsing] modules/contrib/media_acquiadam/tests/src/Unit/AssetImageHelperTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/AssetImageHelperTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/AssetImageHelperTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/AssetImageHelperTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/AssetImageHelperTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/AssetImageHelperTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/AssetImageHelperTest.php
[parsing] modules/contrib/media_acquiadam/tests/src/Unit/AssetMediaFactoryTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/AssetMediaFactoryTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/AssetMediaFactoryTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/AssetMediaFactoryTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/AssetMediaFactoryTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/AssetMediaFactoryTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/AssetMediaFactoryTest.php
[parsing] modules/contrib/media_acquiadam/tests/src/Unit/AssetMetadataHelperTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/AssetMetadataHelperTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/AssetMetadataHelperTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/AssetMetadataHelperTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/AssetMetadataHelperTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/AssetMetadataHelperTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/AssetMetadataHelperTest.php
[parsing] modules/contrib/media_acquiadam/tests/src/Unit/AssetRefreshManagerTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/AssetRefreshManagerTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/AssetRefreshManagerTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/AssetRefreshManagerTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/AssetRefreshManagerTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/AssetRefreshManagerTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/AssetRefreshManagerTest.php
[parsing] modules/contrib/media_acquiadam/tests/src/Unit/MediaEntityHelperTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/MediaEntityHelperTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/MediaEntityHelperTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/MediaEntityHelperTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/MediaEntityHelperTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/MediaEntityHelperTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/MediaEntityHelperTest.php
[parsing] modules/contrib/media_acquiadam/tests/src/Unit/OauthTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/OauthTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/OauthTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/OauthTest.php
[refactoring] modules/contrib/media_acquiadam/tests/src/Unit/OauthTest.php
[post rectors] modules/contrib/media_acquiadam/tests/src/Unit/OauthTest.php
[print] modules/contrib/media_acquiadam/tests/src/Unit/OauthTest.php

21 files with changes
=====================

1) modules/contrib/media_acquiadam/tests/src/Unit/OauthTest.php:73

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

-    $csrf_token = $this->getMockBuilder(CsrfTokenGenerator::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $csrf_token = $this->createMock(CsrfTokenGenerator::class);
     $csrf_token->expects($this->any())
       ->method('get')
       ->willReturn('testToken112233');
@@ @@
       ->with('testToken112233')
       ->willReturn(TRUE);

-    $url_generator = $this->getMockBuilder(UrlGeneratorInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url_generator = $this->createMock(UrlGeneratorInterface::class);
     $url_generator->expects($this->any())
       ->method('generateFromRoute')
       ->willReturn('some/url/test');

-    $unrouted_url_assembler = $this->getMockBuilder(UnroutedUrlAssemblerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $unrouted_url_assembler = $this->createMock(UnroutedUrlAssemblerInterface::class);
     // @BUG: Forcing the UnroutedUrlAssembler return here forces a pass.
     // UnroutedUrlAssembler is called by toString() in setAuthFinishRedirect
     // and is overly complicated to mock/replace.
@@ @@
       ->method('assemble')
       ->willReturn('https://example.com/sub/path?extra=1');

-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getBody')
       ->willReturn('{"access_token":"ACCESS_TOKEN", "token_type":"bearer", "expires_in":3600, "refresh_token": "refresh_token"}');
@@ @@
       ->getMock();
     $http_client->expects($this->any())->method('post')->willReturn($response);

-    $current_user = $this->getMockBuilder(AccountProxyInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $current_user = $this->createMock(AccountProxyInterface::class);

     $this->container = new ContainerBuilder();
     $this->container->set('string_translation',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/media_acquiadam/tests/src/Unit/MediaEntityHelperTest.php:52

    ---------- begin diff ----------
@@ @@
     $this->assertInstanceOf(FileInterface::class,
       $this->getNewMediaEntityHelper()->getExistingFile());

-    $media = $this->getMockBuilder(MediaInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $media = $this->createMock(MediaInterface::class);

     /** @var \Drupal\media\MediaInterface|\PHPUnit\Framework\MockObject\MockObject $media */
     $this->assertFalse($this->getNewMediaEntityHelper($media)
@@ @@
       $this->getNewMediaEntityHelper()->getExistingFileId());

     /** @var \Drupal\media\MediaInterface|\PHPUnit\Framework\MockObject\MockObject $media */
-    $media = $this->getMockBuilder(MediaInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $media = $this->createMock(MediaInterface::class);

     $this->assertFalse($this->getNewMediaEntityHelper($media)
       ->getExistingFileId());
@@ @@
       $this->getNewMediaEntityHelper()->getAssetFileField());

     /** @var \Drupal\media\MediaInterface|\PHPUnit\Framework\MockObject\MockObject $media */
-    $media = $this->getMockBuilder(MediaInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $media = $this->createMock(MediaInterface::class);

     $this->assertFalse($this->getNewMediaEntityHelper($media)
       ->getAssetFileField());
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->container = new ContainerBuilder();
@@ @@
     $media_bundle->method('getFieldMap')
       ->willReturn(['file' => 'phpunit_file_field']);

-    $entity_storage = $this->getMockBuilder(EntityStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_storage = $this->createMock(EntityStorageInterface::class);
     $entity_storage->method('load')->willReturnMap([
       [$this->getMockedFileEntity()->id(), $this->getMockedFileEntity()],
       ['acquiadam', $media_bundle],
@@ @@
       ],
     ]);

-    $entity_type_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManagerInterface::class);
     $entity_type_manager->method('getStorage')->willReturnMap([
       ['file', $entity_storage],
       ['media_type', $entity_storage],
@@ @@
    *   The container to set mocks into.
    */
   protected function setMockedAcquiaDamServices(ContainerBuilder $container) {
-    $asset_data = $this->getMockBuilder(AssetData::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_data = $this->createMock(AssetData::class);
     $asset_data->method('isUpdatedAsset')->willReturnOnConsecutiveCalls(FALSE,
       TRUE);

-    $acquiadam = $this->getMockBuilder(Acquiadam::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $acquiadam = $this->createMock(Acquiadam::class);
     $acquiadam->method('getAsset')->willReturnMap([
       [$this->getAssetData()->id, TRUE, $this->getAssetData()],
     ]);

-    $asset_file_helper = $this->getMockBuilder(AssetFileEntityHelper::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_file_helper = $this->createMock(AssetFileEntityHelper::class);
     $asset_file_helper->method('getDestinationFromEntity')
       ->willReturn('private://assets/replaced');
     $asset_file_helper->method('createNewFile')->with($this->anything(),
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/media_acquiadam/tests/src/Unit/AssetRefreshManagerTest.php:561

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->acquiadamClient = $this->getMockBuilder(Acquiadam::class)
@@ @@
       ->disableOriginalConstructor()
       ->getMock();

-    $this->state = $this->getMockBuilder(State::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->state = $this->createMock(State::class);

-    $this->queue = $this->getMockBuilder(DatabaseQueue::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->queue = $this->createMock(DatabaseQueue::class);
     /** @var \Drupal\Core\Queue\QueueFactory|\PHPUnit\Framework\MockObject\MockObject $queue_factory */
-    $queue_factory = $this->getMockBuilder(QueueFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $queue_factory = $this->createMock(QueueFactory::class);
     $queue_factory->method('get')
       ->willReturn($this->queue);

@@ @@
       ->disableOriginalConstructor()
       ->getMock();

-    $entity_storage = $this->getMockBuilder(EntityStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_storage = $this->createMock(EntityStorageInterface::class);
     $entity_storage->method('getQuery')->willReturn($this->entityQuery);

-    $entity_type_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManagerInterface::class);
     $entity_type_manager->method('getStorage')->willReturnMap([
       ['media', $entity_storage],
     ]);

     /** @var \Drupal\Component\Datetime\Time|\PHPUnit\Framework\MockObject\MockObject $time */
-    $time = $this->getMockBuilder(Time::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $time = $this->createMock(Time::class);
     $time->method('getRequestTime')
       ->willReturn(self::REQUEST_TIME);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/media_acquiadam/tests/src/Unit/AssetMetadataHelperTest.php:164

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

-    $date_formatter = $this->getMockBuilder(DateFormatterInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $date_formatter = $this->createMock(DateFormatterInterface::class);
     $date_formatter->method('format')
       ->willReturnCallback(function ($timestamp, $type, $format) {
         if ('custom' == $type) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/media_acquiadam/tests/src/Unit/AssetMediaFactoryTest.php:185

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $asset = $this->getAssetData();
@@ @@

     $this->mediaEntity = $this->getMockedMediaEntity($asset->id);

-    $media_bundle = $this->getMockBuilder(MediaTypeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $media_bundle = $this->createMock(MediaTypeInterface::class);
     $media_bundle->method('getSource')->willReturn($this->mediaEntity->getSource());
     $media_bundle->method('getFieldMap')
       ->willReturn(['file' => 'phpunit_file_field']);

-    $entity_storage = $this->getMockBuilder(EntityStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_storage = $this->createMock(EntityStorageInterface::class);
     $entity_storage->method('loadByProperties')
       ->with(['source' => 'acquiadam_asset'])
       ->willReturn([
@@ @@
       ['acquiadam', $media_bundle],
     ]);

-    $entity_type_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManagerInterface::class);
     $entity_type_manager->method('getStorage')->willReturnMap([
       ['media_type', $entity_storage],
       ['media', $entity_storage],
@@ @@
       ['file', $entity_storage],
     ]);

-    $asset_data = $this->getMockBuilder(AssetDataInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_data = $this->createMock(AssetDataInterface::class);

-    $acquiadam_client = $this->getMockBuilder(AcquiadamInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $acquiadam_client = $this->createMock(AcquiadamInterface::class);

-    $asset_file_helper = $this->getMockBuilder(AssetFileEntityHelper::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_file_helper = $this->createMock(AssetFileEntityHelper::class);

     $this->container = new ContainerBuilder();
     $this->container->set('entity_type.manager', $entity_type_manager);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/media_acquiadam/tests/src/Unit/AssetImageHelperTest.php:186

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

-    $http_client = $this->getMockBuilder(GuzzleClient::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_client = $this->createMock(GuzzleClient::class);

     $file_system = $this->getMockBuilder(FileSystem::class)
       ->disableOriginalConstructor()
@@ @@
         return is_string($target) ? $target . '_copy' : $target . '_blah';
       });

-    $mime_type_guesser = $this->getMockBuilder(MimeTypeGuesserInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mime_type_guesser = $this->createMock(\Symfony\Component\Mime\MimeTypesInterface::class);
     $mime_type_guesser->method('guess')->willReturnCallback(function ($uri) {
       $map = [
         'public://nothing.jpg' => 'image/jpg',
@@ @@
       return $map[$uri] ?? FALSE;
     });

-    $image_factory = $this->getMockBuilder(ImageFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $image_factory = $this->createMock(ImageFactory::class);

     $this->container = new ContainerBuilder();
     $this->container->set('http_client', $http_client);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/media_acquiadam/tests/src/Unit/AssetFileEntityHelperTest.php:82

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->mockedFileEntity = $this->getMockBuilder(FileInterface::class)
@@ @@
       ->getMockForAbstractClass();
     $this->mockedFileEntity->method('id')->willReturn(333);

-    $acquiadam = $this->getMockBuilder(Acquiadam::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $acquiadam = $this->createMock(Acquiadam::class);

-    $asset_media_factory = $this->getMockBuilder(AssetMediaFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_media_factory = $this->createMock(AssetMediaFactory::class);
     $asset_media_factory->method('getFileEntity')
       ->willReturn($this->mockedFileEntity->id());

@@ @@
    *   The container to set mocks into.
    */
   protected function setMockedDrupalServices(ContainerBuilder $container) {
-    $file_storage = $this->getMockBuilder(EntityStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $file_storage = $this->createMock(EntityStorageInterface::class);
     $file_storage->method('load')
       ->with($this->mockedFileEntity->id())
       ->willReturn($this->mockedFileEntity);
@@ @@
       ],
     ]);

-    $entity_type_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManagerInterface::class);
     $entity_type_manager->method('getStorage')->willReturnMap([
       ['file', $file_storage],
     ]);

-    $data_definition = $this->getMockBuilder(DataDefinitionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $data_definition = $this->createMock(DataDefinitionInterface::class);
     $data_definition->method('getSetting')->willReturnMap([
       ['uri_scheme', 'private'],
       ['file_directory', 'assets/[token]'],
     ]);

-    $field_definition = $this->getMockBuilder(FieldDefinitionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $field_definition = $this->createMock(FieldDefinitionInterface::class);
     $field_definition->method('getItemDefinition')
       ->willReturn($data_definition);

-    $entity_field_manager = $this->getMockBuilder(EntityFieldManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_field_manager = $this->createMock(EntityFieldManagerInterface::class);
     $entity_field_manager->method('getFieldDefinitions')->willReturnMap([
       ['media', 'acquiadam', ['phpunit_file_field' => $field_definition]],
     ]);

-    $token = $this->getMockBuilder(Token::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $token = $this->createMock(Token::class);
     $token->method('replace')
       ->willReturnCallback(function ($string, $a, $b, $c) {
         return ('assets/[token]' == $string) ? 'assets/replaced' : $string;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/media_acquiadam/tests/src/Unit/AssetDataTest.php:45

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

-    $connection = $this->getMockBuilder(Connection::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $connection = $this->createMock(Connection::class);

     $asset_data = $this->getMockBuilder(AssetData::class)
       ->disableOriginalConstructor()
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamServiceTest.php:223

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

-    $dam_client = $this->getMockBuilder(Client::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dam_client = $this->createMock(Client::class);
     $dam_client->expects($this->any())
       ->method('getFolder')
       ->willReturnCallback(function ($folderId) {
@@ @@
     ]);

     // We need to make sure we get our mocked class instead of the original.
-    $acquiadam_client_factory = $this->getMockBuilder(ClientFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $acquiadam_client_factory = $this->createMock(ClientFactory::class);
     $acquiadam_client_factory->expects($this->any())
       ->method('get')
       ->willReturn($dam_client);

-    $acquiadam_asset_data = $this->getMockBuilder(AssetDataInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $acquiadam_asset_data = $this->createMock(AssetDataInterface::class);

     $this->container = new ContainerBuilder();
     $this->container->set('string_translation',
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function tearDown() {
+  public function tearDown(): void {
     // Reset the static cache because it will persist between tests.
     $this->acquiaDamClient->staticAssetCache('clear');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamConfigFormTest.php:107

    ---------- begin diff ----------
@@ @@
    */
   public function testPerformManualSync() {
     $form = [];
-    $form_state = $this->getMockBuilder(FormStateInterface::class)
-      ->getMock();
+    $form_state = $this->createMock(FormStateInterface::class);

     $this->assertFalse($this->acquiaDamConfig->performManualSync($form, $form_state));

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // We need to override the DAM client so that we can fake authentication.
-    $dam_client = $this->getMockBuilder(Client::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dam_client = $this->createMock(Client::class);

     // We do not actually care about validating anything at this point, but
     // the validateForm method does a basic "does authentication work" check.
@@ @@
       ->willReturn([]);

     // We need to make sure we get our mocked class instead of the original.
-    $acquiadam_client_factory = $this->getMockBuilder(ClientFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $acquiadam_client_factory = $this->createMock(ClientFactory::class);
     $acquiadam_client_factory->expects($this->any())
       ->method('getWithCredentials')
       ->willReturn($dam_client);

-    $time = $this->getMockBuilder(Time::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $time = $this->createMock(Time::class);
     $time->method('getRequestTime')
       ->willReturn(1560000000);

-    $this->queueWorker = $this->getMockBuilder(AssetRefresh::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $queue_worker_manager = $this->getMockBuilder(QueueWorkerManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->queueWorker = $this->createMock(AssetRefresh::class);
+    $queue_worker_manager = $this->createMock(QueueWorkerManager::class);
     $queue_worker_manager->expects($this->any())
       ->method('createInstance')
       ->willReturn($this->queueWorker);

-    $this->state = $this->getMockBuilder(State::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->state = $this->createMock(State::class);

     $this->container = new ContainerBuilder();
     $this->container->set('string_translation',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamClientFactoryTest.php:63

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

-    $current_user = $this->getMockBuilder(AccountProxyInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $current_user = $this->createMock(AccountProxyInterface::class);

-    $http_client = $this->getMockBuilder(ClientInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_client = $this->createMock(ClientInterface::class);

-    $user_data = $this->getMockBuilder(UserDataInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user_data = $this->createMock(UserDataInterface::class);

     $this->container = new ContainerBuilder();
     $this->container->set('string_translation',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamAssetTest.php:53

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

-    $entity_type_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManagerInterface::class);

-    $entity_field_manager = $this->getMockBuilder(EntityFieldManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_field_manager = $this->createMock(EntityFieldManagerInterface::class);

-    $field_type_plugin_manager = $this->getMockBuilder(FieldTypePluginManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $field_type_plugin_manager = $this->createMock(FieldTypePluginManagerInterface::class);

-    $asset_image_helper = $this->getMockBuilder(AssetImageHelper::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_image_helper = $this->createMock(AssetImageHelper::class);

-    $asset_metadata_helper = $this->getMockBuilder(AssetMetadataHelper::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_metadata_helper = $this->createMock(AssetMetadataHelper::class);

-    $asset_media_helper = $this->getMockBuilder(MediaEntityHelper::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_media_helper = $this->createMock(MediaEntityHelper::class);
     $asset_media_helper->method('getAsset')->willReturn($this->getAssetData());
     $asset_media_helper->method('getFile')
       ->willReturn($this->getMockedFileEntity());

-    $asset_media_factory = $this->getMockBuilder(AssetMediaFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_media_factory = $this->createMock(AssetMediaFactory::class);
     $asset_media_factory->method('get')->willReturn($asset_media_helper);

     $this->container = new ContainerBuilder();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamMockedMediaEntityTrait.php:28

    ---------- begin diff ----------
@@ @@
   protected function getMockedMediaEntity($assetId, $sourceField = NULL, $mediaEntityId = 47247625) {
     $sourceField = $sourceField ?? 'phpunit_asset_id_field';

-    $source_field_definition = $this->getMockBuilder(FieldDefinitionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $source_field_definition = $this->createMock(FieldDefinitionInterface::class);
     $source_field_definition->method('getName')
       ->willReturn($sourceField);

-    $media_source = $this->getMockBuilder(MediaSourceInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $media_source = $this->createMock(MediaSourceInterface::class);
     $media_source->method('getSourceFieldDefinition')
       ->willReturn($source_field_definition);

-    $media_bundle = $this->getMockBuilder(MediaTypeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $bundle_definition = $this->getMockBuilder(EntityReferenceFieldItemListInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $media_bundle = $this->createMock(MediaTypeInterface::class);
+    $bundle_definition = $this->createMock(EntityReferenceFieldItemListInterface::class);
     $bundle_definition->entity = $media_bundle;

-    $media = $this->getMockBuilder(MediaInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $media = $this->createMock(MediaInterface::class);

     $media->method('getSource')->willReturn($media_source);
     $media->method('uuid')->willReturn('e63ce44d-4cfe-44d4-af7d-0692821d52cc');
@@ @@
    *   A mocked file entity.
    */
   protected function getMockedFileEntity() {
-    $file_entity = $this->getMockBuilder(FileInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $file_entity = $this->createMock(FileInterface::class);
     $file_entity->method('id')->willReturn(894782578);

     return $file_entity;
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamLoggerFactoryTrait.php:16

    ---------- begin diff ----------
@@ @@
    *   A mock LoggerChannelFactoryInstance with a media_acquiadam channel.
    */
   protected function getLoggerFactoryStub() {
-    $logger_channel = $this->getMockBuilder(LoggerChannelInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger_channel = $this->createMock(LoggerChannelInterface::class);

-    $logger_factory = $this->getMockBuilder(LoggerChannelFactoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger_factory = $this->createMock(LoggerChannelFactoryInterface::class);
     $logger_factory->method('get')
       ->with('media_acquiadam')
       ->willReturn($logger_channel);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamAssetImageHelperTrait.php:15

    ---------- begin diff ----------
@@ @@
    *   The stubbed service.
    */
   public function getAssetImageHelperStub() {
-    $asset_image_helper = $this->getMockBuilder(AssetImageHelper::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_image_helper = $this->createMock(AssetImageHelper::class);
     $asset_image_helper->method('getMimeTypeFromFileType')->willReturnMap([
       ['jpg', ['discrete' => 'image', 'sub' => 'jpg']],
       ['mov', ['discrete' => 'quicktime', 'sub' => 'mov']],
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamNotificationTest.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->enableNotificationSync();
   }
@@ @@
     foreach (Media::loadMultiple($mids) as $media) {
       $asset_id = (int) $media->get('field_acquiadam_asset_id')->getString();
       $asset = $this->testClient->getAsset($asset_id);
-      $this->assertEqual($media->label(), $asset->filename, 'Media entity updated correctly.');
+      $this->assertEquals($media->label(), $asset->filename, 'Media entity updated correctly.');
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamMediaTest.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->sourceReflectionClass = new \ReflectionClass(AcquiadamAsset::class);
@@ @@
     $dir_path = 'public://acquiadam/';
     $contents = 'test';
     $this->container->get('file_system')->prepareDirectory($dir_path, FileSystemInterface::CREATE_DIRECTORY);
-    file_save_data($contents, $dir_path . $this->asset->filename);
+    \Drupal::service('file.repository')->writeData($contents, $dir_path . $this->asset->filename);

     $this->testClient->addAsset($this->asset);
     $this->media = $this->createMedia($this->asset->id);
@@ @@
     $media_file_uri = $this->getAssetFileEntity($this->media)->getFileUri();
     $expected_asset_uri = $this->getAssetUri($this->asset, $this->media);

-    $this->assertEqual($this->media->label(), $this->asset->filename, 'Media name mapped to asset filename as expected.');
-    $this->assertEqual($media_description, $this->asset->description, 'Media description mapped to asset description as expected.');
-    $this->assertEqual($media_file_uri, $expected_asset_uri, 'Media file URI mapped as expected.');
+    $this->assertEquals($this->media->label(), $this->asset->filename, 'Media name mapped to asset filename as expected.');
+    $this->assertEquals($media_description, $this->asset->description, 'Media description mapped to asset description as expected.');
+    $this->assertEquals($media_file_uri, $expected_asset_uri, 'Media file URI mapped as expected.');
   }

   /**
@@ @@
     $expected_asset_uri = $this->getAssetUri($this->asset, $this->media);
     $new_version = $asset_data->get($this->asset->id, 'version');

-    $this->assertEqual($this->media->label(), $this->asset->filename, 'Media name updated as expected.');
-    $this->assertEqual($file_uri, $expected_asset_uri, 'Media asset file updated as expected.');
-    $this->assertEqual($file->label(), $this->asset->filename, 'File entity label updated as expected.');
-    $this->assertEqual($this->asset->version, $new_version, 'Asset version updated as expected.');
+    $this->assertEquals($this->media->label(), $this->asset->filename, 'Media name updated as expected.');
+    $this->assertEquals($file_uri, $expected_asset_uri, 'Media asset file updated as expected.');
+    $this->assertEquals($file->label(), $this->asset->filename, 'File entity label updated as expected.');
+    $this->assertEquals($this->asset->version, $new_version, 'Asset version updated as expected.');
   }

   /**
@@ @@
     $this->saveNewVersion();
     $new_version = $asset_data->get($this->asset->id, 'version');

-    $this->assertEqual($old_version, $new_version, 'Asset version unchanged as expected.');
+    $this->assertEquals($old_version, $new_version, 'Asset version unchanged as expected.');

     // Restore permissions to directory and resave entity.
     $file_system->chmod($directory, FileSystem::CHMOD_DIRECTORY);
@@ @@
     $this->reSaveMedia();
     $new_version = $asset_data->get($this->asset->id, 'version');

-    $this->assertNotEqual($old_version, $new_version, 'New version different from old version.');
-    $this->assertEqual($this->asset->version, $new_version, 'Asset version updated as expected.');
+    $this->assertNotEquals($old_version, $new_version, 'New version different from old version.');
+    $this->assertEquals($this->asset->version, $new_version, 'Asset version updated as expected.');
   }

   /**
@@ @@

     // Re-loads FID to assert it's unchanged.
     $actual_fid = $this->getAssetFileEntity($this->media)->id();
-    $this->assertEqual($actual_fid, $expected_fid, 'First media entity still has reference to the expected file.');
+    $this->assertEquals($actual_fid, $expected_fid, 'First media entity still has reference to the expected file.');

     // Asserts second media file is still correct.
-    $this->assertEqual($other_file->getFileUri(), $this->getAssetUri($other_asset, $other_media), 'Second media entity still has the expected URI.');
+    $this->assertEquals($other_file->getFileUri(), $this->getAssetUri($other_asset, $other_media), 'Second media entity still has the expected URI.');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNotEqualRector
 * FileSaveDataRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamKernelTestBase.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {

     parent::setUp();

@@ @@
   protected function setTestClient() {
     $this->testClient = new TestClient();

-    $acquiadam_client_factory = $this->getMockBuilder(ClientFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $acquiadam_client_factory = $this->createMock(ClientFactory::class);
     $acquiadam_client_factory->expects($this->any())
       ->method('get')
       ->willReturn($this->testClient);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/media_acquiadam/src/Service/AssetImageHelper.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal MIME type guesser.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var \Symfony\Component\Mime\MimeTypesInterface
    */
   protected $mimeTypeGuesser;

@@ @@
    *   Drupal filesystem wrapper.
    * @param \GuzzleHttp\ClientInterface $httpClient
    *   Guzzle HTTP Client.
-   * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $mimeTypeGuesser
+   * @param \Symfony\Component\Mime\MimeTypesInterface $mimeTypeGuesser
    *   Drupal MIME type guesser.
    * @param \Drupal\Core\Image\ImageFactory $imageFactory
    *   Drupal ImageFactory service.
    */
-  public function __construct(ConfigFactoryInterface $configFactory, FileSystemInterface $fileSystem, ClientInterface $httpClient, MimeTypeGuesserInterface $mimeTypeGuesser, ImageFactory $imageFactory) {
+  public function __construct(ConfigFactoryInterface $configFactory, FileSystemInterface $fileSystem, ClientInterface $httpClient, \Symfony\Component\Mime\MimeTypesInterface $mimeTypeGuesser, ImageFactory $imageFactory) {
     $this->httpClient = $httpClient;
     $this->configFactory = $configFactory;
     $this->fileSystem = $fileSystem;
@@ @@
    *   The path to the Media: Acquia DAM module.
    */
   protected function getAcquiaDamModulePath() {
-    return drupal_get_path('module', 'media_acquiadam');
+    return \Drupal::service('extension.list.module')->getPath('media_acquiadam');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/media_acquiadam/src/Service/AssetFileEntityHelper.php:362

    ---------- begin diff ----------
@@ @@
    *   A file entity, or FALSE on error.
    */
   protected function drupalFileSaveData($data, $destination = NULL) {
-    return file_save_data($data, $destination, FileSystemInterface::EXISTS_REPLACE);
+    return \Drupal::service('file.repository')->writeData($data, $destination, FileSystemInterface::EXISTS_REPLACE);
   }

 }
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/media_acquiadam/modules/media_acquiadam_report/media_acquiadam_report.module:69

    ---------- begin diff ----------
@@ @@
   $theme_registry[$template] = $theme_registry['views_view_field'];
   $theme_registry[$template]['template'] = $template_hyphen;
   $theme_registry[$template]['variables']['acquiadam_asset_url'] = $dam_asset_url;
-  $theme_registry[$template]['path'] = drupal_get_path(
-      'module',
-      'media_acquiadam_report'
-    ) . '/templates';
+  $theme_registry[$template]['path'] = \Drupal::service('extension.list.module')->getPath('media_acquiadam_report') . '/templates';
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/media_acquiadam/src/Plugin/Linkit/Substitution/DAMAsset.
         php" file, due to:                                                     
         "Analyze error: "Class Drupal\linkit\Plugin\Linkit\Substitution\Media not
         found.". Include your files in "$parameters->set(Option::AUTOLOAD_PATHS,
         [...]);" or "$parameters->set(Option::BOOTSTRAP_FILES, [...]);" in     
         "rector.php" config.                                                   
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/media_acquiadam/src/Plugin/EntityBrowser/Widget/Acquiada
         m.php" file, due to:                                                   
         "Analyze error: "Class Drupal\entity_browser\WidgetBase not found.".   
         Include your files in "$parameters->set(Option::AUTOLOAD_PATHS, [...]);"
         or "$parameters->set(Option::BOOTSTRAP_FILES, [...]);" in "rector.php" 
         config.                                                                
         See https://github.com/rectorphp/rector#configuration".                

