diff --git a/google_analytics.module b/google_analytics.module
index df3be4b..39b158a 100644
--- a/google_analytics.module
+++ b/google_analytics.module
@@ -532,7 +532,7 @@ function _google_analytics_cache($location, $synchronize = FALSE) {
           \Drupal::logger('google_analytics')->info('Locally cached tracking code file has been saved.');
 
           // Return the local JS file path.
-          return file_url_transform_relative(file_create_url($file_destination));
+          return \Drupal::service('file_url_generator')->generateString($file_destination);
         }
       }
     }
@@ -542,7 +542,7 @@ function _google_analytics_cache($location, $synchronize = FALSE) {
   }
   else {
     // Return the local JS file path.
-    return file_url_transform_relative(file_create_url($file_destination));
+    return \Drupal::service('file_url_generator')->generateString($file_destination);
   }
 }
 
diff --git a/tests/src/Functional/GoogleAnalyticsBasicTest.php b/tests/src/Functional/GoogleAnalyticsBasicTest.php
index 1054a8b..c786f50 100644
--- a/tests/src/Functional/GoogleAnalyticsBasicTest.php
+++ b/tests/src/Functional/GoogleAnalyticsBasicTest.php
@@ -39,7 +39,7 @@ class GoogleAnalyticsBasicTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $permissions = [
@@ -80,13 +80,14 @@ class GoogleAnalyticsBasicTest extends BrowserTestBase {
 
     // Check for account code validation.
     $edit['google_analytics_account'] = $this->randomMachineName(2);
-    $this->drupalPostForm('admin/config/system/google-analytics', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/system/google-analytics');
+    $this->submitForm($edit, t('Save configuration'));
     $this->assertSession()->responseContains(t('A valid Google Analytics Web Property ID is case sensitive and formatted like UA-xxxxxxx-yy.'));
 
     // User should have access to code snippets.
-    $this->assertFieldByName('google_analytics_codesnippet_create');
-    $this->assertFieldByName('google_analytics_codesnippet_before');
-    $this->assertFieldByName('google_analytics_codesnippet_after');
+    $this->assertSession()->fieldExists('google_analytics_codesnippet_create');
+    $this->assertSession()->fieldExists('google_analytics_codesnippet_before');
+    $this->assertSession()->fieldExists('google_analytics_codesnippet_after');
     $this->assertNoFieldByXPath("//textarea[@name='google_analytics_codesnippet_create' and @disabled='disabled']", NULL, '"Create only fields" is enabled.');
     $this->assertNoFieldByXPath("//textarea[@name='google_analytics_codesnippet_before' and @disabled='disabled']", NULL, '"Code snippet (before)" is enabled.');
     $this->assertNoFieldByXPath("//textarea[@name='google_analytics_codesnippet_after' and @disabled='disabled']", NULL, '"Code snippet (after)" is enabled.');
@@ -96,9 +97,9 @@ class GoogleAnalyticsBasicTest extends BrowserTestBase {
     $this->drupalGet('admin/config/system/google-analytics');
 
     // User should *not* have access to snippets, but create fields.
-    $this->assertFieldByName('google_analytics_codesnippet_create');
-    $this->assertFieldByName('google_analytics_codesnippet_before');
-    $this->assertFieldByName('google_analytics_codesnippet_after');
+    $this->assertSession()->fieldExists('google_analytics_codesnippet_create');
+    $this->assertSession()->fieldExists('google_analytics_codesnippet_before');
+    $this->assertSession()->fieldExists('google_analytics_codesnippet_after');
     $this->assertNoFieldByXPath("//textarea[@name='google_analytics_codesnippet_create' and @disabled='disabled']", NULL, '"Create only fields" is enabled.');
     $this->assertFieldByXPath("//textarea[@name='google_analytics_codesnippet_before' and @disabled='disabled']", NULL, '"Code snippet (before)" is disabled.');
     $this->assertFieldByXPath("//textarea[@name='google_analytics_codesnippet_after' and @disabled='disabled']", NULL, '"Code snippet (after)" is disabled.');
@@ -110,11 +111,17 @@ class GoogleAnalyticsBasicTest extends BrowserTestBase {
   public function testGoogleAnalyticsHelp() {
     // Requires help and block module and help block placement.
     $this->drupalGet('admin/config/system/google-analytics');
-    $this->assertText('Google Analytics is a free (registration required) website traffic and marketing effectiveness service.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Google Analytics is a free (registration required) website traffic and marketing effectiveness service.');
 
     // Requires help.module.
     $this->drupalGet('admin/help/google_analytics');
-    $this->assertText('Google Analytics adds a web statistics tracking system to your website.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Google Analytics adds a web statistics tracking system to your website.');
   }
 
   /**
diff --git a/tests/src/Functional/GoogleAnalyticsCustomDimensionsAndMetricsTest.php b/tests/src/Functional/GoogleAnalyticsCustomDimensionsAndMetricsTest.php
index 143f5c7..9805006 100644
--- a/tests/src/Functional/GoogleAnalyticsCustomDimensionsAndMetricsTest.php
+++ b/tests/src/Functional/GoogleAnalyticsCustomDimensionsAndMetricsTest.php
@@ -29,7 +29,7 @@ class GoogleAnalyticsCustomDimensionsAndMetricsTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $permissions = [
@@ -142,7 +142,10 @@ class GoogleAnalyticsCustomDimensionsAndMetricsTest extends BrowserTestBase {
 
     // Test on a node.
     $this->drupalGet('node/' . $node->id());
-    $this->assertText($node->getTitle());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($node->getTitle());
     $this->assertSession()->responseContains('ga("set", ' . Json::encode('dimension5') . ', ' . Json::encode('article') . ');');
   }
 
@@ -228,8 +231,9 @@ class GoogleAnalyticsCustomDimensionsAndMetricsTest extends BrowserTestBase {
     $edit['google_analytics_custom_dimension[indexes][3][value]'] = '[user:name]';
     $edit['google_analytics_custom_dimension[indexes][4][value]'] = '[term:name]';
     $edit['google_analytics_custom_dimension[indexes][5][value]'] = '[term:tid]';
+    $this->drupalGet('admin/config/system/google-analytics');
 
-    $this->drupalPostForm('admin/config/system/google-analytics', $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));
 
     $this->assertSession()->responseContains(t('The %element-title is using the following forbidden tokens with personal identifying information: @invalid-tokens.', ['%element-title' => t('Custom dimension value #@index', ['@index' => 1]), '@invalid-tokens' => implode(', ', ['[current-user:name]'])]));
     $this->assertSession()->responseContains(t('The %element-title is using the following forbidden tokens with personal identifying information: @invalid-tokens.', ['%element-title' => t('Custom dimension value #@index', ['@index' => 2]), '@invalid-tokens' => implode(', ', ['[current-user:edit-url]'])]));
diff --git a/tests/src/Functional/GoogleAnalyticsCustomUrls.php b/tests/src/Functional/GoogleAnalyticsCustomUrls.php
index 07faca5..31f2390 100644
--- a/tests/src/Functional/GoogleAnalyticsCustomUrls.php
+++ b/tests/src/Functional/GoogleAnalyticsCustomUrls.php
@@ -26,7 +26,7 @@ class GoogleAnalyticsCustomUrls extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $permissions = [
diff --git a/tests/src/Functional/GoogleAnalyticsRolesTest.php b/tests/src/Functional/GoogleAnalyticsRolesTest.php
index 4202b0f..80876c8 100644
--- a/tests/src/Functional/GoogleAnalyticsRolesTest.php
+++ b/tests/src/Functional/GoogleAnalyticsRolesTest.php
@@ -27,7 +27,7 @@ class GoogleAnalyticsRolesTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $permissions = [
diff --git a/tests/src/Functional/GoogleAnalyticsSearchTest.php b/tests/src/Functional/GoogleAnalyticsSearchTest.php
index de4542d..2ec5c83 100644
--- a/tests/src/Functional/GoogleAnalyticsSearchTest.php
+++ b/tests/src/Functional/GoogleAnalyticsSearchTest.php
@@ -27,7 +27,7 @@ class GoogleAnalyticsSearchTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'page', 'name' => 'Basic page']);
@@ -54,31 +54,34 @@ class GoogleAnalyticsSearchTest extends BrowserTestBase {
 
     // Check tracking code visibility.
     $this->drupalGet('');
-    $this->assertRaw($ua_code);
+    $this->assertSession()->responseContains($ua_code);
 
     $this->drupalGet('search/node');
-    $this->assertNoRaw('ga("set", "page",');
+    $this->assertSession()->responseNotContains('ga("set", "page",');
 
     // Enable site search support.
     $this->config('google_analytics.settings')->set('track.site_search', 1)->save();
 
     // Search for random string.
     $search = ['keys' => $this->randomMachineName(8)];
+    $this->drupalGet('search/node');
 
     // Fire a search, it's expected to get 0 results.
-    $this->drupalPostForm('search/node', $search, t('Search'));
+    $this->submitForm($search, t('Search'));
     $this->assertSession()->responseContains('ga("set", "page", (window.google_analytics_search_results) ?');
     $this->assertSession()->responseContains('window.google_analytics_search_results = 0;');
 
     // Create a node and reindex.
     $this->createNodeAndIndex($search['keys']);
-    $this->drupalPostForm('search/node', $search, t('Search'));
+    $this->drupalGet('search/node');
+    $this->submitForm($search, t('Search'));
     $this->assertSession()->responseContains('ga("set", "page", (window.google_analytics_search_results) ?');
     $this->assertSession()->responseContains('window.google_analytics_search_results = 1;');
 
     // Create a second node with same values and reindex.
     $this->createNodeAndIndex($search['keys']);
-    $this->drupalPostForm('search/node', $search, t('Search'));
+    $this->drupalGet('search/node');
+    $this->submitForm($search, t('Search'));
     $this->assertSession()->responseContains('ga("set", "page", (window.google_analytics_search_results) ?');
     $this->assertSession()->responseContains('window.google_analytics_search_results = 2;');
   }
diff --git a/tests/src/Functional/GoogleAnalyticsStatusMessagesTest.php b/tests/src/Functional/GoogleAnalyticsStatusMessagesTest.php
index e1ac0cf..a6b0e6b 100644
--- a/tests/src/Functional/GoogleAnalyticsStatusMessagesTest.php
+++ b/tests/src/Functional/GoogleAnalyticsStatusMessagesTest.php
@@ -26,7 +26,7 @@ class GoogleAnalyticsStatusMessagesTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $permissions = [
@@ -47,8 +47,9 @@ class GoogleAnalyticsStatusMessagesTest extends BrowserTestBase {
 
     // Enable logging of errors only.
     $this->config('google_analytics.settings')->set('track.messages', ['error' => 'error'])->save();
+    $this->drupalGet('user/login');
 
-    $this->drupalPostForm('user/login', [], t('Log in'));
+    $this->submitForm([], t('Log in'));
     $this->assertSession()->responseContains('ga("send", "event", "Messages", "Error message", "Username field is required.");');
     $this->assertSession()->responseContains('ga("send", "event", "Messages", "Error message", "Password field is required.");');
 
