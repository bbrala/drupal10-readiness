diff --git a/tests/src/Functional/UserRestrictionsBasicTest.php b/tests/src/Functional/UserRestrictionsBasicTest.php
index 3933c70..fe43221 100644
--- a/tests/src/Functional/UserRestrictionsBasicTest.php
+++ b/tests/src/Functional/UserRestrictionsBasicTest.php
@@ -41,8 +41,8 @@ class UserRestrictionsBasicTest extends UserRestrictionsTestBase {
   public function testUserRestrictionsRecordExists() {
     $restriction = $this->storage->load($this->id);
     $this->assertTrue($restriction, 'User restriction exists in the database');
-    $this->assertEqual($restriction->label(), $this->label, 'User restriction name matches');
-    $this->assertEqual($restriction->getRuleType(), $this->type, 'User restriction type matches');
+    $this->assertEquals($restriction->label(), $this->label, 'User restriction name matches');
+    $this->assertEquals($restriction->getRuleType(), $this->type, 'User restriction type matches');
   }
 
 }
diff --git a/tests/src/Functional/UserRestrictionsExpireTest.php b/tests/src/Functional/UserRestrictionsExpireTest.php
index debdb49..beb9b14 100644
--- a/tests/src/Functional/UserRestrictionsExpireTest.php
+++ b/tests/src/Functional/UserRestrictionsExpireTest.php
@@ -24,7 +24,7 @@ class UserRestrictionsExpireTest extends UserRestrictionsTestBase {
   public function testUserRestrictionsRecordExists() {
     $restriction = $this->storage->load($this->id);
     $this->assertNotNull($restriction, 'User Restriction exists in the database');
-    $this->assertEqual($restriction->label(), $this->name, 'User restriction exists');
+    $this->assertEquals($restriction->label(), $this->name, 'User restriction exists');
   }
 
   /**
diff --git a/tests/src/Functional/UserRestrictionsLoginTest.php b/tests/src/Functional/UserRestrictionsLoginTest.php
index e3ee5c0..7b4afb8 100644
--- a/tests/src/Functional/UserRestrictionsLoginTest.php
+++ b/tests/src/Functional/UserRestrictionsLoginTest.php
@@ -26,9 +26,10 @@ class UserRestrictionsLoginTest extends UserRestrictionsTestBase {
     $edit = [];
     $edit['name'] = $name;
     $edit['mail'] = $this->randomMachineName() . '@example.com';
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, t('Create new account'));
     $text = (string) new FormattableMarkup('The name <em class="placeholder">@name</em> is reserved, and cannot be used.', ['@name' => $name]);
-    $this->assertRaw((string) $text, 'User "name" restricted.');
+    $this->assertSession()->responseContains((string) $text);
   }
 
   /**
@@ -40,8 +41,12 @@ class UserRestrictionsLoginTest extends UserRestrictionsTestBase {
     $edit = [];
     $edit['name'] = 'lolcats';
     $edit['mail'] = $this->randomMachineName() . '@example.com';
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
-    $this->assertText(t('A welcome message with further instructions has been sent to your email address.'), 'User registered successfully.');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, t('Create new account'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('A welcome message with further instructions has been sent to your email address.'));
   }
 
   /**
@@ -54,9 +59,10 @@ class UserRestrictionsLoginTest extends UserRestrictionsTestBase {
     $edit = [];
     $edit['name'] = $this->randomMachineName();
     $edit['mail'] = $mail;
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, t('Create new account'));
     $text = (string) new FormattableMarkup('The email <em class="placeholder">@mail</em> is reserved, and cannot be used.', ['@mail' => $mail]);
-    $this->assertRaw((string) $text, 'User "email" restricted.');
+    $this->assertSession()->responseContains((string) $text);
   }
 
   /**
@@ -68,8 +74,12 @@ class UserRestrictionsLoginTest extends UserRestrictionsTestBase {
     $edit = [];
     $edit['name'] = $this->randomMachineName();
     $edit['mail'] = 'typhonius@mail.ru';
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
-    $this->assertText(t('A welcome message with further instructions has been sent to your email address.'), 'User registered successfully.');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, t('Create new account'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('A welcome message with further instructions has been sent to your email address.'));
   }
 
   /**
@@ -82,8 +92,12 @@ class UserRestrictionsLoginTest extends UserRestrictionsTestBase {
     $edit = [];
     $edit['name'] = 'ilikecoffee';
     $edit['mail'] = $mail;
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
-    $this->assertText(t('A welcome message with further instructions has been sent to your email address.'), 'User registered successfully.');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, t('Create new account'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('A welcome message with further instructions has been sent to your email address.'));
   }
 
   /**
@@ -96,9 +110,10 @@ class UserRestrictionsLoginTest extends UserRestrictionsTestBase {
     $edit = [];
     $edit['name'] = $name;
     $edit['mail'] = $this->randomMachineName() . '@' . $this->randomMachineName() . '.com';
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, t('Create new account'));
     $text = (string) new FormattableMarkup('The name <em class="placeholder">@name</em> is reserved, and cannot be used.', ['@name' => $name]);
-    $this->assertRaw((string) $text, 'User "name" restricted.');
+    $this->assertSession()->responseContains((string) $text);
   }
 
 }
diff --git a/tests/src/Functional/UserRestrictionsTestBase.php b/tests/src/Functional/UserRestrictionsTestBase.php
index 33eeba5..a9f100a 100644
--- a/tests/src/Functional/UserRestrictionsTestBase.php
+++ b/tests/src/Functional/UserRestrictionsTestBase.php
@@ -28,7 +28,7 @@ abstract class UserRestrictionsTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->storage = \Drupal::service('entity_type.manager')
