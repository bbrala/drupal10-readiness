[parsing] modules/contrib/permissionspolicy/src/Event/PolicyAlterEvent.php
[refactoring] modules/contrib/permissionspolicy/src/Event/PolicyAlterEvent.php
[post rectors] modules/contrib/permissionspolicy/src/Event/PolicyAlterEvent.php
[print] modules/contrib/permissionspolicy/src/Event/PolicyAlterEvent.php
[refactoring] modules/contrib/permissionspolicy/src/Event/PolicyAlterEvent.php
[post rectors] modules/contrib/permissionspolicy/src/Event/PolicyAlterEvent.php
[print] modules/contrib/permissionspolicy/src/Event/PolicyAlterEvent.php
[parsing] modules/contrib/permissionspolicy/src/EventSubscriber/ResponseSubscriber.php
[refactoring] modules/contrib/permissionspolicy/src/EventSubscriber/ResponseSubscriber.php
[post rectors] modules/contrib/permissionspolicy/src/EventSubscriber/ResponseSubscriber.php
[print] modules/contrib/permissionspolicy/src/EventSubscriber/ResponseSubscriber.php
[refactoring] modules/contrib/permissionspolicy/src/EventSubscriber/ResponseSubscriber.php
[post rectors] modules/contrib/permissionspolicy/src/EventSubscriber/ResponseSubscriber.php
[print] modules/contrib/permissionspolicy/src/EventSubscriber/ResponseSubscriber.php
[parsing] modules/contrib/permissionspolicy/src/Form/PermissionsPolicySettingsForm.php
[refactoring] modules/contrib/permissionspolicy/src/Form/PermissionsPolicySettingsForm.php
[post rectors] modules/contrib/permissionspolicy/src/Form/PermissionsPolicySettingsForm.php
[print] modules/contrib/permissionspolicy/src/Form/PermissionsPolicySettingsForm.php
[parsing] modules/contrib/permissionspolicy/src/PermissionsPolicy.php
[refactoring] modules/contrib/permissionspolicy/src/PermissionsPolicy.php
[post rectors] modules/contrib/permissionspolicy/src/PermissionsPolicy.php
[print] modules/contrib/permissionspolicy/src/PermissionsPolicy.php
[parsing] modules/contrib/permissionspolicy/src/PermissionsPolicyEvents.php
[refactoring] modules/contrib/permissionspolicy/src/PermissionsPolicyEvents.php
[post rectors] modules/contrib/permissionspolicy/src/PermissionsPolicyEvents.php
[print] modules/contrib/permissionspolicy/src/PermissionsPolicyEvents.php
[parsing] modules/contrib/permissionspolicy/tests/src/Unit/EventSubscriber/ResponseSubscriberTest.php
[refactoring] modules/contrib/permissionspolicy/tests/src/Unit/EventSubscriber/ResponseSubscriberTest.php
[post rectors] modules/contrib/permissionspolicy/tests/src/Unit/EventSubscriber/ResponseSubscriberTest.php
[print] modules/contrib/permissionspolicy/tests/src/Unit/EventSubscriber/ResponseSubscriberTest.php
[refactoring] modules/contrib/permissionspolicy/tests/src/Unit/EventSubscriber/ResponseSubscriberTest.php
[post rectors] modules/contrib/permissionspolicy/tests/src/Unit/EventSubscriber/ResponseSubscriberTest.php
[print] modules/contrib/permissionspolicy/tests/src/Unit/EventSubscriber/ResponseSubscriberTest.php
[parsing] modules/contrib/permissionspolicy/tests/src/Unit/PermissionsPolicyTest.php
[refactoring] modules/contrib/permissionspolicy/tests/src/Unit/PermissionsPolicyTest.php
[post rectors] modules/contrib/permissionspolicy/tests/src/Unit/PermissionsPolicyTest.php
[print] modules/contrib/permissionspolicy/tests/src/Unit/PermissionsPolicyTest.php

3 files with changes
====================

1) modules/contrib/permissionspolicy/tests/src/Unit/EventSubscriber/ResponseSubscriberTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Mock HTTP Response.
    *
-   * @var \Drupal\Core\Render\HtmlResponse|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Render\HtmlResponse|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $response;

@@ @@
   /**
    * Mock Response Event.
    *
-   * @var \Symfony\Component\HttpKernel\Event\FilterResponseEvent|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\HttpKernel\Event\ResponseEvent|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $event;

@@ @@
   public function setUp(): void {
     parent::setUp();

-    $this->response = $this->getMockBuilder(HtmlResponse::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->response->headers = $this->getMockBuilder(ResponseHeaderBag::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $responseCacheableMetadata = $this->getMockBuilder(CacheableMetadata::class)
-      ->getMock();
+    $this->response = $this->createMock(HtmlResponse::class);
+    $this->response->headers = $this->createMock(ResponseHeaderBag::class);
+    $responseCacheableMetadata = $this->createMock(CacheableMetadata::class);
     $this->response->method('getCacheableMetadata')
       ->willReturn($responseCacheableMetadata);

-    /** @var \Symfony\Component\HttpKernel\Event\FilterResponseEvent|\PHPUnit_Framework_MockObject_MockObject $event */
-    $this->event = $this->getMockBuilder(FilterResponseEvent::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var \Symfony\Component\HttpKernel\Event\ResponseEvent|\PHPUnit\Framework\MockObject\MockObject $event */
+    $this->event = $this->createMock(\Symfony\Component\HttpKernel\Event\ResponseEvent::class);
     $this->event->expects($this->any())
       ->method('isMasterRequest')
       ->willReturn(TRUE);
@@ @@
       ->method('getResponse')
       ->willReturn($this->response);

-    $this->eventDispatcher = $this->getMockBuilder(EventDispatcher::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->eventDispatcher = $this->createMock(EventDispatcher::class);
   }

   /**
@@ @@
    * @covers ::onKernelResponse
    */
   public function testEmptyPolicy() {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'permissionspolicy.settings' => [
         'enforce' => [
@@ @@
    */
   public function testDisabledPolicy() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'permissionspolicy.settings' => [
         'enforce' => [
@@ @@
    */
   public function testSingleDirective() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'permissionspolicy.settings' => [
         'enforce' => [
@@ @@
    */
   public function testMultipleDirectives() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'permissionspolicy.settings' => [
         'enforce' => [
@@ @@
    */
   public function testOverrideWhenEmpty() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'permissionspolicy.settings' => [
         'enforce' => [
@@ @@
    */
   public function testNoOverrideWhenDisabled() {

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject $configFactory */
+    /** @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject $configFactory */
     $configFactory = $this->getConfigFactoryStub([
       'permissionspolicy.settings' => [
         'enforce' => [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/permissionspolicy/src/EventSubscriber/ResponseSubscriber.php:57

    ---------- begin diff ----------
@@ @@
   /**
    * Add Permissions-Policy header to response.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The Response event.
    */
-  public function onKernelResponse(FilterResponseEvent $event) {
+  public function onKernelResponse(\Symfony\Component\HttpKernel\Event\ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
@@ @@
       }

       $this->eventDispatcher->dispatch(
-        PermissionsPolicyEvents::POLICY_ALTER,
-        new PolicyAlterEvent($policy, $response)
+        new PolicyAlterEvent($policy, $response),
+        PermissionsPolicyEvents::POLICY_ALTER
       );

       if (($headerValue = $policy->getHeaderValue())) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/permissionspolicy/src/Event/PolicyAlterEvent.php:8

    ---------- begin diff ----------
@@ @@
 /**
  * Event for altering a response Permissions Policy.
  */
-class PolicyAlterEvent extends Event {
+class PolicyAlterEvent extends \Symfony\Contracts\EventDispatcher\Event {

   /**
    * A Permissions policy.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

