[parsing] modules/contrib/mimeinfo/src/File/MimeType/MimeTypeGuesser.php
[refactoring] modules/contrib/mimeinfo/src/File/MimeType/MimeTypeGuesser.php
[post rectors] modules/contrib/mimeinfo/src/File/MimeType/MimeTypeGuesser.php
[print] modules/contrib/mimeinfo/src/File/MimeType/MimeTypeGuesser.php
[refactoring] modules/contrib/mimeinfo/src/File/MimeType/MimeTypeGuesser.php
[post rectors] modules/contrib/mimeinfo/src/File/MimeType/MimeTypeGuesser.php
[print] modules/contrib/mimeinfo/src/File/MimeType/MimeTypeGuesser.php
[parsing] modules/contrib/mimeinfo/src/MimeInfoServiceProvider.php
[refactoring] modules/contrib/mimeinfo/src/MimeInfoServiceProvider.php
[post rectors] modules/contrib/mimeinfo/src/MimeInfoServiceProvider.php
[print] modules/contrib/mimeinfo/src/MimeInfoServiceProvider.php
[refactoring] modules/contrib/mimeinfo/src/MimeInfoServiceProvider.php
[post rectors] modules/contrib/mimeinfo/src/MimeInfoServiceProvider.php
[print] modules/contrib/mimeinfo/src/MimeInfoServiceProvider.php
[parsing] modules/contrib/mimeinfo/src/ProxyClass/File/MimeType/MimeTypeGuesser.php
[refactoring] modules/contrib/mimeinfo/src/ProxyClass/File/MimeType/MimeTypeGuesser.php
[post rectors] modules/contrib/mimeinfo/src/ProxyClass/File/MimeType/MimeTypeGuesser.php
[print] modules/contrib/mimeinfo/src/ProxyClass/File/MimeType/MimeTypeGuesser.php
[refactoring] modules/contrib/mimeinfo/src/ProxyClass/File/MimeType/MimeTypeGuesser.php
[post rectors] modules/contrib/mimeinfo/src/ProxyClass/File/MimeType/MimeTypeGuesser.php
[print] modules/contrib/mimeinfo/src/ProxyClass/File/MimeType/MimeTypeGuesser.php
[parsing] modules/contrib/mimeinfo/tests/src/Unit/File/MimeType/MimeTypeGuesserTest.php
[refactoring] modules/contrib/mimeinfo/tests/src/Unit/File/MimeType/MimeTypeGuesserTest.php
[post rectors] modules/contrib/mimeinfo/tests/src/Unit/File/MimeType/MimeTypeGuesserTest.php
[print] modules/contrib/mimeinfo/tests/src/Unit/File/MimeType/MimeTypeGuesserTest.php
[parsing] modules/contrib/mimeinfo/tests/src/Unit/File/MimeType/SupportedMimeTypeGuesser.php
[refactoring] modules/contrib/mimeinfo/tests/src/Unit/File/MimeType/SupportedMimeTypeGuesser.php
[post rectors] modules/contrib/mimeinfo/tests/src/Unit/File/MimeType/SupportedMimeTypeGuesser.php
[print] modules/contrib/mimeinfo/tests/src/Unit/File/MimeType/SupportedMimeTypeGuesser.php
[parsing] modules/contrib/mimeinfo/tests/src/Unit/File/MimeType/UnsupportedMimeTypeGuesser.php
[refactoring] modules/contrib/mimeinfo/tests/src/Unit/File/MimeType/UnsupportedMimeTypeGuesser.php
[post rectors] modules/contrib/mimeinfo/tests/src/Unit/File/MimeType/UnsupportedMimeTypeGuesser.php
[print] modules/contrib/mimeinfo/tests/src/Unit/File/MimeType/UnsupportedMimeTypeGuesser.php
[refactoring] modules/contrib/mimeinfo/tests/src/Unit/File/MimeType/UnsupportedMimeTypeGuesser.php
[post rectors] modules/contrib/mimeinfo/tests/src/Unit/File/MimeType/UnsupportedMimeTypeGuesser.php
[print] modules/contrib/mimeinfo/tests/src/Unit/File/MimeType/UnsupportedMimeTypeGuesser.php

4 files with changes
====================

1) modules/contrib/mimeinfo/tests/src/Unit/File/MimeType/UnsupportedMimeTypeGuesser.php:9

    ---------- begin diff ----------
@@ @@
  * Dummy guesser implementation to test that unsupported guesser will not
  * be used for guessing the MIME type of file.
  */
-class UnsupportedMimeTypeGuesser implements MimeTypeGuesserInterface {
+class UnsupportedMimeTypeGuesser implements \Symfony\Component\Mime\MimeTypesInterface {

   /**
    * Check that environment supports guessing mechanism.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/mimeinfo/src/ProxyClass/File/MimeType/MimeTypeGuesser.php:11

    ---------- begin diff ----------
@@ @@
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class MimeTypeGuesser implements \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+    class MimeTypeGuesser implements \Symfony\Component\Mime\MimeTypesInterface
     {

         use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
@@ @@
         /**
          * {@inheritdoc}
          */
-        public function addGuesser(\Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $guesser, $priority = 0)
+        public function addGuesser(\Symfony\Component\Mime\MimeTypesInterface $guesser, $priority = 0)
         {
             return $this->lazyLoadItself()->addGuesser($guesser, $priority);
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/mimeinfo/src/MimeInfoServiceProvider.php:23

    ---------- begin diff ----------
@@ @@
     $mime_type_guesser_definition->setClass(MimeTypeGuesser::class);

     foreach ([
-      'fileinfo' => FileinfoMimeTypeGuesser::class,
-      'filebinary' => FileBinaryMimeTypeGuesser::class,
+      'fileinfo' => \Symfony\Component\Mime\FileinfoMimeTypeGuesser::class,
+      'filebinary' => \Symfony\Component\Mime\FileBinaryMimeTypeGuesser::class,
     ] as $guesser => $class) {
       $service_id = "file.mime_type.guesser.$guesser";
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/mimeinfo/src/File/MimeType/MimeTypeGuesser.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function addGuesser(MimeTypeGuesserInterface $guesser, $priority = 0) {
+  public function addGuesser(\Symfony\Component\Mime\MimeTypesInterface $guesser, $priority = 0) {
     // Symfony's guessers has non-interfaced "isSupported" method to check that
     // environment supports guessing mechanism. Allow all guessers define same
     // the method for same purposes. Otherwise consider that guesser is allowed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

