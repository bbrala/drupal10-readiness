diff --git a/src/MigrateExecutable.php b/src/MigrateExecutable.php
index 5a8b987..275213e 100644
--- a/src/MigrateExecutable.php
+++ b/src/MigrateExecutable.php
@@ -29,7 +29,7 @@ class MigrateExecutable extends \Drupal\migrate\MigrateExecutable {
         ]), 'error');
       return MigrationInterface::RESULT_FAILED;
     }
-    $this->getEventDispatcher()->dispatch(MigrateEvents::PRE_IMPORT, new MigrateImportEvent($this->migration, $this->message));
+    $this->getEventDispatcher()->dispatch(new MigrateImportEvent($this->migration, $this->message), MigrateEvents::PRE_IMPORT);
 
     // Knock off migration if the requirements haven't been met.
     try {
@@ -79,7 +79,7 @@ class MigrateExecutable extends \Drupal\migrate\MigrateExecutable {
       return MigrationInterface::RESULT_FAILED;
     }
 
-    $this->getEventDispatcher()->dispatch(MigrateEvents::POST_IMPORT, new MigrateImportEvent($this->migration, $this->message));
+    $this->getEventDispatcher()->dispatch(new MigrateImportEvent($this->migration, $this->message), MigrateEvents::POST_IMPORT);
     $this->migration->setStatus(MigrationInterface::STATUS_IDLE);
     return $return;
   }
@@ -99,11 +99,11 @@ class MigrateExecutable extends \Drupal\migrate\MigrateExecutable {
 
     try {
       $this->processRow($row);
-      $this->getEventDispatcher()->dispatch(MigrateEvents::PRE_ROW_SAVE, new MigratePreRowSaveEvent($this->migration, $this->message, $row));
+      $this->getEventDispatcher()->dispatch(new MigratePreRowSaveEvent($this->migration, $this->message, $row), MigrateEvents::PRE_ROW_SAVE);
       $destination_ids = $id_map->lookupDestinationIds($this->sourceIdValues);
       $destination_id_values = $destination_ids ? reset($destination_ids) : [];
       $destination_id_values = $destination->import($row, $destination_id_values);
-      $this->getEventDispatcher()->dispatch(MigrateEvents::POST_ROW_SAVE, new MigratePostRowSaveEvent($this->migration, $this->message, $row, $destination_id_values));
+      $this->getEventDispatcher()->dispatch(new MigratePostRowSaveEvent($this->migration, $this->message, $row, $destination_id_values), MigrateEvents::POST_ROW_SAVE);
       if ($destination_id_values) {
         // We do not save an idMap entry for config.
         if ($destination_id_values !== TRUE) {
diff --git a/tests/src/Unit/MigrateManifestTest.php b/tests/src/Unit/MigrateManifestTest.php
index 3d28425..70a47f8 100644
--- a/tests/src/Unit/MigrateManifestTest.php
+++ b/tests/src/Unit/MigrateManifestTest.php
@@ -13,6 +13,7 @@ class MigrateManifestTest extends UnitTestCase {
 
   /**
    * Test thing foo...
+   * @doesNotPerformAssertions
    */
   public function testExecution() {
     $this->markTestIncomplete('Write tests');
