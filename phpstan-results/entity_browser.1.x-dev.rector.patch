diff --git a/modules/entity_form/src/Tests/InlineEntityIntegrationTest.php b/modules/entity_form/src/Tests/InlineEntityIntegrationTest.php
index 59e3687..4ad82c1 100644
--- a/modules/entity_form/src/Tests/InlineEntityIntegrationTest.php
+++ b/modules/entity_form/src/Tests/InlineEntityIntegrationTest.php
@@ -32,7 +32,7 @@ class InlineEntityIntegrationTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Delete unnecessary entity browser.
     $browser = $this->container->get('entity_type.manager')->getStorage('entity_browser')->load('entity_browser_test_entity_form');
diff --git a/modules/entity_form/tests/src/FunctionalJavascript/EntityFormWidgetTest.php b/modules/entity_form/tests/src/FunctionalJavascript/EntityFormWidgetTest.php
index 80269bb..db53f66 100644
--- a/modules/entity_form/tests/src/FunctionalJavascript/EntityFormWidgetTest.php
+++ b/modules/entity_form/tests/src/FunctionalJavascript/EntityFormWidgetTest.php
@@ -39,7 +39,7 @@ class EntityFormWidgetTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'foo', 'name' => 'Foo']);
diff --git a/modules/example/tests/src/FunctionalJavascript/EntityBrowserExampleTest.php b/modules/example/tests/src/FunctionalJavascript/EntityBrowserExampleTest.php
index b415c2d..5cb8f32 100644
--- a/modules/example/tests/src/FunctionalJavascript/EntityBrowserExampleTest.php
+++ b/modules/example/tests/src/FunctionalJavascript/EntityBrowserExampleTest.php
@@ -25,6 +25,7 @@ class EntityBrowserExampleTest extends BrowserTestBase {
 
   /**
    * Tests Entity Browser example module.
+   * @doesNotPerformAssertions
    */
   public function testExampleInstall() {
     // If we came this far example module installed successfully.
diff --git a/src/Events/EventBase.php b/src/Events/EventBase.php
index 9346731..4739266 100644
--- a/src/Events/EventBase.php
+++ b/src/Events/EventBase.php
@@ -7,7 +7,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Base implementation of entity browser events.
  */
-class EventBase extends Event {
+class EventBase extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * Entity browser id.
diff --git a/src/Plugin/EntityBrowser/Display/IFrame.php b/src/Plugin/EntityBrowser/Display/IFrame.php
index 3eda8aa..454a112 100644
--- a/src/Plugin/EntityBrowser/Display/IFrame.php
+++ b/src/Plugin/EntityBrowser/Display/IFrame.php
@@ -142,7 +142,7 @@ class IFrame extends DisplayBase implements DisplayRouterInterface {
     /** @var \Drupal\entity_browser\Events\RegisterJSCallbacks $event */
     $js_event_object = new RegisterJSCallbacks($this->configuration['entity_browser_id'], $this->getUuid());
     $js_event_object->registerCallback('Drupal.entityBrowser.selectionCompleted');
-    $callback_event = $this->eventDispatcher->dispatch(Events::REGISTER_JS_CALLBACKS, $js_event_object);
+    $callback_event = $this->eventDispatcher->dispatch($js_event_object, Events::REGISTER_JS_CALLBACKS);
     $original_path = $this->currentPath->getPath();
 
     $data = [
@@ -160,7 +160,7 @@ class IFrame extends DisplayBase implements DisplayRouterInterface {
       ],
     ];
     $event_object = new AlterEntityBrowserDisplayData($this->configuration['entity_browser_id'], $this->getUuid(), $this->getPluginDefinition(), $form_state, $data);
-    $event = $this->eventDispatcher->dispatch(Events::ALTER_BROWSER_DISPLAY_DATA, $event_object);
+    $event = $this->eventDispatcher->dispatch($event_object, Events::ALTER_BROWSER_DISPLAY_DATA);
     $data = $event->getData();
     return [
       '#theme_wrappers' => ['container'],
@@ -205,10 +205,10 @@ class IFrame extends DisplayBase implements DisplayRouterInterface {
    * Intercepts default response and injects response that will trigger JS to
    * propagate selected entities upstream.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   Response event.
    */
-  public function propagateSelection(FilterResponseEvent $event) {
+  public function propagateSelection(\Symfony\Component\HttpKernel\Event\ResponseEvent $event) {
     $render = [
       '#attached' => [
         'library' => ['entity_browser/' . $this->pluginDefinition['id'] . '_selection'],
diff --git a/src/Plugin/EntityBrowser/Display/Modal.php b/src/Plugin/EntityBrowser/Display/Modal.php
index 01562b2..b7885a5 100644
--- a/src/Plugin/EntityBrowser/Display/Modal.php
+++ b/src/Plugin/EntityBrowser/Display/Modal.php
@@ -32,7 +32,7 @@ class Modal extends IFrame {
     DisplayBase::displayEntityBrowser($element, $form_state, $complete_form, $persistent_data);
     $js_event_object = new RegisterJSCallbacks($this->configuration['entity_browser_id'], $this->getUuid());
     $js_event_object->registerCallback('Drupal.entityBrowser.selectionCompleted');
-    $js_event = $this->eventDispatcher->dispatch(Events::REGISTER_JS_CALLBACKS, $js_event_object);
+    $js_event = $this->eventDispatcher->dispatch($js_event_object, Events::REGISTER_JS_CALLBACKS);
     $original_path = $this->currentPath->getPath();
 
     $data = [
@@ -47,7 +47,7 @@ class Modal extends IFrame {
       ],
     ];
     $event_object = new AlterEntityBrowserDisplayData($this->configuration['entity_browser_id'], $this->getUuid(), $this->getPluginDefinition(), $form_state, $data);
-    $event = $this->eventDispatcher->dispatch(Events::ALTER_BROWSER_DISPLAY_DATA, $event_object);
+    $event = $this->eventDispatcher->dispatch($event_object, Events::ALTER_BROWSER_DISPLAY_DATA);
     $data = $event->getData();
     return [
       '#theme_wrappers' => ['container'],
diff --git a/src/Plugin/Field/FieldWidget/FileBrowserWidget.php b/src/Plugin/Field/FieldWidget/FileBrowserWidget.php
index e298ab1..42787ad 100644
--- a/src/Plugin/Field/FieldWidget/FileBrowserWidget.php
+++ b/src/Plugin/Field/FieldWidget/FileBrowserWidget.php
@@ -67,7 +67,7 @@ class FileBrowserWidget extends EntityReferenceBrowserWidget {
   /**
    * The mime type guesser service.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var \Symfony\Component\Mime\MimeTypesInterface
    */
   protected $mimeTypeGuesser;
 
@@ -98,10 +98,10 @@ class FileBrowserWidget extends EntityReferenceBrowserWidget {
    *   The current user.
    * @param \Drupal\Core\Messenger\MessengerInterface $messenger
    *   The messenger.
-   * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $mime_type_guesser
+   * @param \Symfony\Component\Mime\MimeTypesInterface $mime_type_guesser
    *   The mime type guesser service.
    */
-  public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager, FieldWidgetDisplayManager $field_display_manager, ConfigFactoryInterface $config_factory, EntityDisplayRepositoryInterface $display_repository, ModuleHandlerInterface $module_handler, AccountInterface $current_user, MimeTypeGuesserInterface $mime_type_guesser, MessengerInterface $messenger) {
+  public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager, FieldWidgetDisplayManager $field_display_manager, ConfigFactoryInterface $config_factory, EntityDisplayRepositoryInterface $display_repository, ModuleHandlerInterface $module_handler, AccountInterface $current_user, \Symfony\Component\Mime\MimeTypesInterface $mime_type_guesser, MessengerInterface $messenger) {
     parent::__construct($plugin_id, $plugin_definition, $field_definition, $settings, $third_party_settings, $entity_type_manager, $field_display_manager, $module_handler, $current_user, $messenger);
     $this->entityTypeManager = $entity_type_manager;
     $this->fieldDisplayManager = $field_display_manager;
diff --git a/src/SelectionDisplayBase.php b/src/SelectionDisplayBase.php
index 7591acb..338060e 100644
--- a/src/SelectionDisplayBase.php
+++ b/src/SelectionDisplayBase.php
@@ -156,11 +156,11 @@ abstract class SelectionDisplayBase extends PluginBase implements SelectionDispl
   protected function selectionDone(FormStateInterface $form_state) {
     $form_state->set(['entity_browser', 'selection_completed'], TRUE);
     $this->eventDispatcher->dispatch(
-      Events::DONE,
       new SelectionDoneEvent(
         $this->configuration['entity_browser_id'],
         $form_state->get(['entity_browser', 'instance_uuid'])
-      ));
+      ),
+      Events::DONE);
   }
 
 }
diff --git a/src/WidgetBase.php b/src/WidgetBase.php
index f5d2ea7..e869db3 100644
--- a/src/WidgetBase.php
+++ b/src/WidgetBase.php
@@ -340,12 +340,12 @@ abstract class WidgetBase extends PluginBase implements WidgetInterface, Contain
     $selected_entities = array_merge($selected_entities, $entities);
 
     $this->eventDispatcher->dispatch(
-      Events::SELECTED,
       new EntitySelectionEvent(
         $this->configuration['entity_browser_id'],
         $form_state->get(['entity_browser', 'instance_uuid']),
         $entities
-      ));
+      ),
+      Events::SELECTED);
   }
 
   /**
