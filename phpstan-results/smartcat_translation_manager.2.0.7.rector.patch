diff --git a/src/CronHandler.php b/src/CronHandler.php
index aac6964..3f90c50 100644
--- a/src/CronHandler.php
+++ b/src/CronHandler.php
@@ -38,8 +38,8 @@ class CronHandler {
   public static function create() {
     $last_run = \Drupal::state()->get(self::KEY_LAST_RUN, 0);
 
-    if ((REQUEST_TIME - $last_run) > self::CRON_PERIOD) {
-      \Drupal::state()->set(self::KEY_LAST_RUN, REQUEST_TIME);
+    if ((\Drupal::time()->getRequestTime() - $last_run) > self::CRON_PERIOD) {
+      \Drupal::state()->set(self::KEY_LAST_RUN, \Drupal::time()->getRequestTime());
       return new static();
     }
     return;
diff --git a/src/Event/EntityEvent.php b/src/Event/EntityEvent.php
index 42fb786..b2a1e26 100644
--- a/src/Event/EntityEvent.php
+++ b/src/Event/EntityEvent.php
@@ -8,7 +8,7 @@ use Drupal\Core\Entity\EntityInterface;
 /**
  * Wraps a node insertion demo event for event listeners.
  */
-class EntityEvent extends Event {
+class EntityEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   const ENTITY_INSERT = 'smartcat_translation_manager.entity.insert';
   const ENTITY_UPDATE = 'smartcat_translation_manager.entity.update';
diff --git a/vendor/nesbot/carbon/src/Carbon/CarbonInterface.php b/vendor/nesbot/carbon/src/Carbon/CarbonInterface.php
index 8f09507..0860c93 100644
--- a/vendor/nesbot/carbon/src/Carbon/CarbonInterface.php
+++ b/vendor/nesbot/carbon/src/Carbon/CarbonInterface.php
@@ -1089,7 +1089,7 @@ interface CarbonInterface extends DateTimeInterface, JsonSerializable
      * @param string                                             $time
      * @param DateTimeZone|string|false|null                     $tz         optional timezone
      * @param string|null                                        $locale     locale to be used for LTS, LT, LL, LLL, etc. macro-formats (en by fault, unneeded if no such macro-format in use)
-     * @param \Symfony\Component\Translation\TranslatorInterface $translator optional custom translator to use for macro-formats
+     * @param \Symfony\Contracts\Translation\TranslatorInterface $translator optional custom translator to use for macro-formats
      *
      * @throws InvalidFormatException
      *
@@ -2164,7 +2164,7 @@ interface CarbonInterface extends DateTimeInterface, JsonSerializable
     /**
      * Get the translator of the current instance or the default if none set.
      *
-     * @return \Symfony\Component\Translation\TranslatorInterface
+     * @return \Symfony\Contracts\Translation\TranslatorInterface
      */
     public function getLocalTranslator();
 
@@ -2314,7 +2314,7 @@ interface CarbonInterface extends DateTimeInterface, JsonSerializable
      * @param string                                             $key        key to find
      * @param string|null                                        $locale     current locale used if null
      * @param string|null                                        $default    default value if translation returns the key
-     * @param \Symfony\Component\Translation\TranslatorInterface $translator an optional translator to use
+     * @param \Symfony\Contracts\Translation\TranslatorInterface $translator an optional translator to use
      *
      * @return string
      */
@@ -2323,7 +2323,7 @@ interface CarbonInterface extends DateTimeInterface, JsonSerializable
     /**
      * Returns raw translation message for a given key.
      *
-     * @param \Symfony\Component\Translation\TranslatorInterface $translator the translator to use
+     * @param \Symfony\Contracts\Translation\TranslatorInterface $translator the translator to use
      * @param string                                             $key        key to find
      * @param string|null                                        $locale     current locale used if null
      * @param string|null                                        $default    default value if translation returns the key
@@ -2335,7 +2335,7 @@ interface CarbonInterface extends DateTimeInterface, JsonSerializable
     /**
      * Get the default translator instance in use.
      *
-     * @return \Symfony\Component\Translation\TranslatorInterface
+     * @return \Symfony\Contracts\Translation\TranslatorInterface
      */
     public static function getTranslator();
 
@@ -3788,11 +3788,11 @@ interface CarbonInterface extends DateTimeInterface, JsonSerializable
     /**
      * Set the translator for the current instance.
      *
-     * @param \Symfony\Component\Translation\TranslatorInterface $translator
+     * @param \Symfony\Contracts\Translation\TranslatorInterface $translator
      *
      * @return $this
      */
-    public function setLocalTranslator(\Symfony\Component\Translation\TranslatorInterface $translator);
+    public function setLocalTranslator(\Symfony\Contracts\Translation\TranslatorInterface $translator);
 
     /**
      * Set the current translator locale and indicate if the source locale file exists.
@@ -3913,11 +3913,11 @@ interface CarbonInterface extends DateTimeInterface, JsonSerializable
     /**
      * Set the default translator instance to use.
      *
-     * @param \Symfony\Component\Translation\TranslatorInterface $translator
+     * @param \Symfony\Contracts\Translation\TranslatorInterface $translator
      *
      * @return void
      */
-    public static function setTranslator(\Symfony\Component\Translation\TranslatorInterface $translator);
+    public static function setTranslator(\Symfony\Contracts\Translation\TranslatorInterface $translator);
 
     /**
      * Set specified unit to new given value.
@@ -4775,11 +4775,11 @@ interface CarbonInterface extends DateTimeInterface, JsonSerializable
      * @param string                                             $key
      * @param array                                              $parameters
      * @param string|int|float|null                              $number
-     * @param \Symfony\Component\Translation\TranslatorInterface $translator
+     * @param \Symfony\Contracts\Translation\TranslatorInterface $translator
      *
      * @return string
      */
-    public function translate(string $key, array $parameters = [], $number = null, ?\Symfony\Component\Translation\TranslatorInterface $translator = null, bool $altNumbers = false): string;
+    public function translate(string $key, array $parameters = [], $number = null, ?\Symfony\Contracts\Translation\TranslatorInterface $translator = null, bool $altNumbers = false): string;
 
     /**
      * Returns the alternative number for a given integer if available in the current locale.
@@ -4821,14 +4821,14 @@ interface CarbonInterface extends DateTimeInterface, JsonSerializable
     /**
      * Translate using translation string or callback available.
      *
-     * @param \Symfony\Component\Translation\TranslatorInterface $translator
+     * @param \Symfony\Contracts\Translation\TranslatorInterface $translator
      * @param string                                             $key
      * @param array                                              $parameters
      * @param null                                               $number
      *
      * @return string
      */
-    public static function translateWith(\Symfony\Component\Translation\TranslatorInterface $translator, string $key, array $parameters = [], $number = null): string;
+    public static function translateWith(\Symfony\Contracts\Translation\TranslatorInterface $translator, string $key, array $parameters = [], $number = null): string;
 
     /**
      * Format as ->format() do (using date replacements patterns from https://php.net/manual/en/function.date.php)
diff --git a/vendor/nesbot/carbon/src/Carbon/CarbonInterval.php b/vendor/nesbot/carbon/src/Carbon/CarbonInterval.php
index 76c162d..54b0194 100644
--- a/vendor/nesbot/carbon/src/Carbon/CarbonInterval.php
+++ b/vendor/nesbot/carbon/src/Carbon/CarbonInterval.php
@@ -203,7 +203,7 @@ class CarbonInterval extends DateInterval implements CarbonConverterInterface
     /**
      * A translator to ... er ... translate stuff
      *
-     * @var \Symfony\Component\Translation\TranslatorInterface
+     * @var \Symfony\Contracts\Translation\TranslatorInterface
      */
     protected static $translator;
 
diff --git a/vendor/nesbot/carbon/src/Carbon/Traits/Creator.php b/vendor/nesbot/carbon/src/Carbon/Traits/Creator.php
index ad19078..86b7b27 100644
--- a/vendor/nesbot/carbon/src/Carbon/Traits/Creator.php
+++ b/vendor/nesbot/carbon/src/Carbon/Traits/Creator.php
@@ -712,7 +712,7 @@ trait Creator
      * @param string                                             $time
      * @param DateTimeZone|string|false|null                     $tz         optional timezone
      * @param string|null                                        $locale     locale to be used for LTS, LT, LL, LLL, etc. macro-formats (en by fault, unneeded if no such macro-format in use)
-     * @param \Symfony\Component\Translation\TranslatorInterface $translator optional custom translator to use for macro-formats
+     * @param \Symfony\Contracts\Translation\TranslatorInterface $translator optional custom translator to use for macro-formats
      *
      * @throws InvalidFormatException
      *
diff --git a/vendor/nesbot/carbon/src/Carbon/Traits/Localization.php b/vendor/nesbot/carbon/src/Carbon/Traits/Localization.php
index 9162dc9..d0e0ec3 100644
--- a/vendor/nesbot/carbon/src/Carbon/Traits/Localization.php
+++ b/vendor/nesbot/carbon/src/Carbon/Traits/Localization.php
@@ -38,14 +38,14 @@ trait Localization
     /**
      * Default translator.
      *
-     * @var \Symfony\Component\Translation\TranslatorInterface
+     * @var \Symfony\Contracts\Translation\TranslatorInterface
      */
     protected static $translator;
 
     /**
      * Specific translator of the current instance.
      *
-     * @var \Symfony\Component\Translation\TranslatorInterface
+     * @var \Symfony\Contracts\Translation\TranslatorInterface
      */
     protected $localTranslator;
 
@@ -105,7 +105,7 @@ trait Localization
     /**
      * Get the default translator instance in use.
      *
-     * @return \Symfony\Component\Translation\TranslatorInterface
+     * @return \Symfony\Contracts\Translation\TranslatorInterface
      */
     public static function getTranslator()
     {
@@ -115,11 +115,11 @@ trait Localization
     /**
      * Set the default translator instance to use.
      *
-     * @param \Symfony\Component\Translation\TranslatorInterface $translator
+     * @param \Symfony\Contracts\Translation\TranslatorInterface $translator
      *
      * @return void
      */
-    public static function setTranslator(TranslatorInterface $translator)
+    public static function setTranslator(\Symfony\Contracts\Translation\TranslatorInterface $translator)
     {
         static::$translator = $translator;
     }
@@ -137,7 +137,7 @@ trait Localization
     /**
      * Get the translator of the current instance or the default if none set.
      *
-     * @return \Symfony\Component\Translation\TranslatorInterface
+     * @return \Symfony\Contracts\Translation\TranslatorInterface
      */
     public function getLocalTranslator()
     {
@@ -147,11 +147,11 @@ trait Localization
     /**
      * Set the translator for the current instance.
      *
-     * @param \Symfony\Component\Translation\TranslatorInterface $translator
+     * @param \Symfony\Contracts\Translation\TranslatorInterface $translator
      *
      * @return $this
      */
-    public function setLocalTranslator(TranslatorInterface $translator)
+    public function setLocalTranslator(\Symfony\Contracts\Translation\TranslatorInterface $translator)
     {
         $this->localTranslator = $translator;
 
@@ -161,7 +161,7 @@ trait Localization
     /**
      * Returns raw translation message for a given key.
      *
-     * @param \Symfony\Component\Translation\TranslatorInterface $translator the translator to use
+     * @param \Symfony\Contracts\Translation\TranslatorInterface $translator the translator to use
      * @param string                                             $key        key to find
      * @param string|null                                        $locale     current locale used if null
      * @param string|null                                        $default    default value if translation returns the key
@@ -170,9 +170,9 @@ trait Localization
      */
     public static function getTranslationMessageWith($translator, string $key, ?string $locale = null, ?string $default = null)
     {
-        if (!($translator instanceof TranslatorBagInterface && $translator instanceof TranslatorInterface)) {
+        if (!($translator instanceof TranslatorBagInterface && $translator instanceof \Symfony\Contracts\Translation\TranslatorInterface)) {
             throw new InvalidTypeException(
-                'Translator does not implement '.TranslatorInterface::class.' and '.TranslatorBagInterface::class.'. '.
+                'Translator does not implement '.\Symfony\Contracts\Translation\TranslatorInterface::class.' and '.TranslatorBagInterface::class.'. '.
                 (\is_object($translator) ? \get_class($translator) : \gettype($translator)).' has been given.'
             );
         }
@@ -192,7 +192,7 @@ trait Localization
      * @param string                                             $key        key to find
      * @param string|null                                        $locale     current locale used if null
      * @param string|null                                        $default    default value if translation returns the key
-     * @param \Symfony\Component\Translation\TranslatorInterface $translator an optional translator to use
+     * @param \Symfony\Contracts\Translation\TranslatorInterface $translator an optional translator to use
      *
      * @return string
      */
@@ -204,14 +204,14 @@ trait Localization
     /**
      * Translate using translation string or callback available.
      *
-     * @param \Symfony\Component\Translation\TranslatorInterface $translator
+     * @param \Symfony\Contracts\Translation\TranslatorInterface $translator
      * @param string                                             $key
      * @param array                                              $parameters
      * @param null                                               $number
      *
      * @return string
      */
-    public static function translateWith(TranslatorInterface $translator, string $key, array $parameters = [], $number = null): string
+    public static function translateWith(\Symfony\Contracts\Translation\TranslatorInterface $translator, string $key, array $parameters = [], $number = null): string
     {
         $message = static::getTranslationMessageWith($translator, $key, null, $key);
         if ($message instanceof Closure) {
@@ -240,11 +240,11 @@ trait Localization
      * @param string                                             $key
      * @param array                                              $parameters
      * @param string|int|float|null                              $number
-     * @param \Symfony\Component\Translation\TranslatorInterface $translator
+     * @param \Symfony\Contracts\Translation\TranslatorInterface $translator
      *
      * @return string
      */
-    public function translate(string $key, array $parameters = [], $number = null, ?TranslatorInterface $translator = null, bool $altNumbers = false): string
+    public function translate(string $key, array $parameters = [], $number = null, ?\Symfony\Contracts\Translation\TranslatorInterface $translator = null, bool $altNumbers = false): string
     {
         $translation = static::translateWith($translator ?: $this->getLocalTranslator(), $key, $parameters, $number);
 
@@ -551,7 +551,7 @@ trait Localization
      */
     public static function localeHasShortUnits($locale)
     {
-        return static::executeWithLocale($locale, function ($newLocale, TranslatorInterface $translator) {
+        return static::executeWithLocale($locale, function ($newLocale, \Symfony\Contracts\Translation\TranslatorInterface $translator) {
             return $newLocale &&
                 (
                     ($y = static::translateWith($translator, 'y')) !== 'y' &&
@@ -576,7 +576,7 @@ trait Localization
      */
     public static function localeHasDiffSyntax($locale)
     {
-        return static::executeWithLocale($locale, function ($newLocale, TranslatorInterface $translator) {
+        return static::executeWithLocale($locale, function ($newLocale, \Symfony\Contracts\Translation\TranslatorInterface $translator) {
             if (!$newLocale) {
                 return false;
             }
@@ -605,7 +605,7 @@ trait Localization
      */
     public static function localeHasDiffOneDayWords($locale)
     {
-        return static::executeWithLocale($locale, function ($newLocale, TranslatorInterface $translator) {
+        return static::executeWithLocale($locale, function ($newLocale, \Symfony\Contracts\Translation\TranslatorInterface $translator) {
             return $newLocale &&
                 $translator->trans('diff_now') !== 'diff_now' &&
                 $translator->trans('diff_yesterday') !== 'diff_yesterday' &&
@@ -623,7 +623,7 @@ trait Localization
      */
     public static function localeHasDiffTwoDayWords($locale)
     {
-        return static::executeWithLocale($locale, function ($newLocale, TranslatorInterface $translator) {
+        return static::executeWithLocale($locale, function ($newLocale, \Symfony\Contracts\Translation\TranslatorInterface $translator) {
             return $newLocale &&
                 $translator->trans('diff_before_yesterday') !== 'diff_before_yesterday' &&
                 $translator->trans('diff_after_tomorrow') !== 'diff_after_tomorrow';
@@ -640,7 +640,7 @@ trait Localization
      */
     public static function localeHasPeriodSyntax($locale)
     {
-        return static::executeWithLocale($locale, function ($newLocale, TranslatorInterface $translator) {
+        return static::executeWithLocale($locale, function ($newLocale, \Symfony\Contracts\Translation\TranslatorInterface $translator) {
             return $newLocale &&
                 $translator->trans('period_recurrences') !== 'period_recurrences' &&
                 $translator->trans('period_interval') !== 'period_interval' &&
@@ -683,7 +683,7 @@ trait Localization
     /**
      * Initialize the default translator instance if necessary.
      *
-     * @return \Symfony\Component\Translation\TranslatorInterface
+     * @return \Symfony\Contracts\Translation\TranslatorInterface
      */
     protected static function translator()
     {
diff --git a/vendor/symfony/translation-contracts/Test/TranslatorTest.php b/vendor/symfony/translation-contracts/Test/TranslatorTest.php
index aac9d68..699fba6 100644
--- a/vendor/symfony/translation-contracts/Test/TranslatorTest.php
+++ b/vendor/symfony/translation-contracts/Test/TranslatorTest.php
@@ -274,6 +274,7 @@ class TranslatorTest extends TestCase
 
     /**
      * @dataProvider failingLangcodes
+     * @doesNotPerformAssertions
      */
     public function testFailedLangcodes($nplural, $langCodes)
     {
diff --git a/vendor/symfony/translation/Command/XliffLintCommand.php b/vendor/symfony/translation/Command/XliffLintCommand.php
index 4117d87..c48eae3 100644
--- a/vendor/symfony/translation/Command/XliffLintCommand.php
+++ b/vendor/symfony/translation/Command/XliffLintCommand.php
@@ -79,7 +79,7 @@ EOF
         ;
     }
 
-    protected function execute(InputInterface $input, OutputInterface $output)
+    protected function execute(InputInterface $input, OutputInterface $output): int
     {
         $io = new SymfonyStyle($input, $output);
         $filenames = (array) $input->getArgument('filename');
@@ -87,7 +87,7 @@ EOF
         $this->displayCorrectFiles = $output->isVerbose();
 
         if (['-'] === $filenames) {
-            return $this->display($io, [$this->validate(file_get_contents('php://stdin'))]);
+            return (int) $this->display($io, [$this->validate(file_get_contents('php://stdin'))]);
         }
 
         if (!$filenames) {
@@ -105,7 +105,7 @@ EOF
             }
         }
 
-        return $this->display($io, $filesInfo);
+        return (int) $this->display($io, $filesInfo);
     }
 
     private function validate(string $content, string $file = null): array
