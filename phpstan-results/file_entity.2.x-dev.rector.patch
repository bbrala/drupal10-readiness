diff --git a/file_entity.api.php b/file_entity.api.php
index bdee6ef..21a1a74 100644
--- a/file_entity.api.php
+++ b/file_entity.api.php
@@ -43,7 +43,7 @@ function hook_file_download_headers_alter(array &$headers, $file) {
 function hook_file_transfer($uri, array $headers) {
   // Redirect a download for an S3 file to the actual location.
   if (StreamWrapperManager::getScheme($uri) == 's3') {
-    $url = file_create_url($uri);
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
     drupal_goto($url);
   }
 }
diff --git a/src/Form/FileAddForm.php b/src/Form/FileAddForm.php
index 7b47cfc..3d96054 100644
--- a/src/Form/FileAddForm.php
+++ b/src/Form/FileAddForm.php
@@ -446,7 +446,7 @@ class FileAddForm extends FormBase {
     if ($save) {
       if (StreamWrapperManager::getScheme($file->getFileUri()) != $form_state->get('scheme')) {
         // @TODO: Users should not be allowed to create private files without permission ('view private files')
-        if ($moved_file = file_move($file, $form_state->get('scheme') . '://' . StreamWrapperManager::getTarget($file->getFileUri()), FileSystemInterface::EXISTS_RENAME)) {
+        if ($moved_file = \Drupal::service('file.repository')->move($file, $form_state->get('scheme') . '://' . StreamWrapperManager::getTarget($file->getFileUri()), FileSystemInterface::EXISTS_RENAME)) {
           // Only re-assign the file object if file_move() did not fail.
           $moved_file->setFilename($file->getFilename());
 
diff --git a/src/Plugin/Field/FieldFormatter/FileImageResponsiveFormatter.php b/src/Plugin/Field/FieldFormatter/FileImageResponsiveFormatter.php
index 0a22fbd..f28c190 100644
--- a/src/Plugin/Field/FieldFormatter/FileImageResponsiveFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/FileImageResponsiveFormatter.php
@@ -145,7 +145,7 @@ class FileImageResponsiveFormatter extends ImageFormatter {
     unset($item->_attributes);
 
     if ($this->getSetting('image_link')) {
-      $url = file_url_transform_relative(file_create_url($file->getFileUri()));
+      $url = \Drupal::service('file_url_generator')->generateString($file->getFileUri());
     }
 
     $elements[] = array(
diff --git a/tests/src/Functional/FileEntityAccessTest.php b/tests/src/Functional/FileEntityAccessTest.php
index 431876c..31621a2 100644
--- a/tests/src/Functional/FileEntityAccessTest.php
+++ b/tests/src/Functional/FileEntityAccessTest.php
@@ -28,7 +28,7 @@ class FileEntityAccessTest extends FileEntityTestBase {
    */
   protected $accessControlHandler;
 
-  function setUp() {
+  function setUp(): void {
     parent::setUp();
     $this->setUpFiles(array('uid' => 0));
     $this->accessControlHandler = $this->container->get('entity_type.manager')->getAccessControlHandler('file');
@@ -48,12 +48,9 @@ class FileEntityAccessTest extends FileEntityTestBase {
   function assertFileEntityAccess($ops, $file, $account) {
     $this->accessControlHandler->resetCache();
     foreach ($ops as $op => $expected) {
-      $this->assertEqual(
-        $expected,
-        $op === 'create' ?
-          $this->accessControlHandler->createAccess($file, $account) :
-          $this->accessControlHandler->access($file, $op, $account)
-      );
+      $this->assertEquals($expected, $op === 'create' ?
+        $this->accessControlHandler->createAccess($file, $account) :
+        $this->accessControlHandler->access($file, $op, $account));
     }
   }
 
@@ -134,11 +131,11 @@ class FileEntityAccessTest extends FileEntityTestBase {
     $web_user = $this->drupalCreateUser(array());
     $this->drupalLogin($web_user);
     $this->drupalGet('file/add');
-    $this->assertResponse(403, 'Users without access can not access the file add page');
+    $this->assertSession()->statusCodeEquals(403, 'Users without access can not access the file add page');
     $web_user = $this->drupalCreateUser(array('create files'));
     $this->drupalLogin($web_user);
     $this->drupalGet('file/add');
-    $this->assertResponse(200, 'Users with access can access the file add page');
+    $this->assertSession()->statusCodeEquals(200, 'Users with access can access the file add page');
 
     $file = reset($this->files['text']);
 
@@ -146,11 +143,11 @@ class FileEntityAccessTest extends FileEntityTestBase {
     $web_user = $this->drupalCreateUser(array('view own files'));
     $this->drupalLogin($web_user);
     $this->drupalGet("file/{$file->id()}");
-    $this->assertResponse(403, 'Users without access can not access the file view page');
+    $this->assertSession()->statusCodeEquals(403, 'Users without access can not access the file view page');
     $web_user = $this->drupalCreateUser(array('view files'));
     $this->drupalLogin($web_user);
     $this->drupalGet("file/{$file->id()}");
-    $this->assertResponse(200, 'Users with access can access the file view page');
+    $this->assertSession()->statusCodeEquals(200, 'Users with access can access the file view page');
 
     $url = "file/{$file->id()}/download";
     $web_user = $this->drupalCreateUser(array());
@@ -160,32 +157,32 @@ class FileEntityAccessTest extends FileEntityTestBase {
     $web_user = $this->drupalCreateUser(array('download any document files'));
     $this->drupalLogin($web_user);
     $this->drupalGet($url, array('query' => array('token' => $file->getDownloadToken())));
-    $this->assertResponse(200, 'Users with access can download the file');
+    $this->assertSession()->statusCodeEquals(200, 'Users with access can download the file');
     $this->drupalGet($url, array('query' => array('token' => 'invalid-token')));
-    $this->assertResponse(403, 'Cannot download file with in invalid token.');
+    $this->assertSession()->statusCodeEquals(403, 'Cannot download file with in invalid token.');
     $this->drupalGet($url);
-    $this->assertResponse(403, 'Cannot download file without a token.');
+    $this->assertSession()->statusCodeEquals(403, 'Cannot download file without a token.');
     $this->config->set('allow_insecure_download', TRUE)->save();
     $this->drupalGet($url);
-    $this->assertResponse(200, 'Users with access can download the file without a token when allow_insecure_download is set.');
+    $this->assertSession()->statusCodeEquals(200, 'Users with access can download the file without a token when allow_insecure_download is set.');
 
     $web_user = $this->drupalCreateUser(array());
     $this->drupalLogin($web_user);
     $this->drupalGet("file/{$file->id()}/edit");
-    $this->assertResponse(403, 'Users without access can not access the file edit page');
+    $this->assertSession()->statusCodeEquals(403, 'Users without access can not access the file edit page');
     $web_user = $this->drupalCreateUser(array('edit any document files'));
     $this->drupalLogin($web_user);
     $this->drupalGet("file/{$file->id()}/edit");
-    $this->assertResponse(200, 'Users with access can access the file edit page');
+    $this->assertSession()->statusCodeEquals(200, 'Users with access can access the file edit page');
 
     $web_user = $this->drupalCreateUser(array());
     $this->drupalLogin($web_user);
     $this->drupalGet("file/{$file->id()}/delete");
-    $this->assertResponse(403, 'Users without access can not access the file delete page');
+    $this->assertSession()->statusCodeEquals(403, 'Users without access can not access the file delete page');
     $web_user = $this->drupalCreateUser(array('delete any document files'));
     $this->drupalLogin($web_user);
     $this->drupalGet("file/{$file->id()}/delete");
-    $this->assertResponse(200, 'Users with access can access the file delete page');
+    $this->assertSession()->statusCodeEquals(200, 'Users with access can access the file delete page');
   }
 
   /**
@@ -196,7 +193,7 @@ class FileEntityAccessTest extends FileEntityTestBase {
 
     foreach ($this->getPrivateDownloadAccessCases() as $case) {
       /** @var FileInterface $file */
-      $file = file_copy($original_file, 'private://');
+      $file = \Drupal::service('file.repository')->copy($original_file, 'private://');
       $user_name = 'anonymous';
 
       // Create users and login only if non-anonymous.
@@ -217,12 +214,12 @@ class FileEntityAccessTest extends FileEntityTestBase {
         '%uri' => $file->getFileUri(),
       );
       $this->assertTrue(is_file($file->getFileUri()), new FormattableMarkup('File %name owned by %username successfully created at %uri.', $arguments));
-      $url = file_create_url($file->getFileUri());
+      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
       $message_file_info = ' ' . new FormattableMarkup('File %uri was checked.', array('%uri' => $file->getFileUri()));
 
       // Try to download the file.
       $this->drupalGet($url);
-      $this->assertResponse($case['expect'], $case['message'] . $message_file_info);
+      $this->assertSession()->statusCodeEquals($case['expect'], $case['message'] . $message_file_info);
 
       // Logout authenticated users.
       if ($authenticated_user) {
@@ -270,7 +267,7 @@ class FileEntityAccessTest extends FileEntityTestBase {
     $image = current($this->files['image']);
 
     // Use a private file to check download access.
-    $image = \file_copy($image, 'private://' . $image->getFilename());
+    $image = \Drupal::service('file.repository')->copy($image, 'private://' . $image->getFilename());
 
     $node = Node::create([
       'title' => 'Title',
@@ -283,12 +280,15 @@ class FileEntityAccessTest extends FileEntityTestBase {
     $node->save();
     $this->drupalGet('node/' . $node->id());
 
-    $this->assertRaw('file/' . $image->id() . '/download', 'Download link available.');
-    $this->assertLink('Download image-test.png');
+    $this->assertSession()->responseContains('file/' . $image->id() . '/download');
+    $this->assertSession()->linkExists('Download image-test.png');
 
     $this->drupalLogout();
     $this->drupalGet('node/' . $node->id());
-    $this->assertText("You don't have access to download this file.", 'No access message displays correctly.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("You don't have access to download this file.");
     $view_display->setComponent('image', [
       'type' => 'file_download_link',
       'settings' => [
@@ -296,7 +296,10 @@ class FileEntityAccessTest extends FileEntityTestBase {
       ],
     ])->save();
     $this->drupalGet('node/' . $node->id());
-    $this->assertText('Another message.', 'No access message updated.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Another message.');
   }
 
 }
