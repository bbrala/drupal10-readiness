[parsing] modules/contrib/anonymous_login/anonymous_login.api.php
[refactoring] modules/contrib/anonymous_login/anonymous_login.api.php
[post rectors] modules/contrib/anonymous_login/anonymous_login.api.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/anonymous_login/anonymous_login.api.php
[parsing] modules/contrib/anonymous_login/anonymous_login.module
[refactoring] modules/contrib/anonymous_login/anonymous_login.module
[post rectors] modules/contrib/anonymous_login/anonymous_login.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/anonymous_login/anonymous_login.module
[parsing] modules/contrib/anonymous_login/src/EventSubscriber/AnonymousLoginSubscriber.php
[refactoring] modules/contrib/anonymous_login/src/EventSubscriber/AnonymousLoginSubscriber.php
[post rectors] modules/contrib/anonymous_login/src/EventSubscriber/AnonymousLoginSubscriber.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/anonymous_login/src/EventSubscriber/AnonymousLoginSubscriber.php
[refactoring] modules/contrib/anonymous_login/src/EventSubscriber/AnonymousLoginSubscriber.php
[post rectors] modules/contrib/anonymous_login/src/EventSubscriber/AnonymousLoginSubscriber.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/anonymous_login/src/EventSubscriber/AnonymousLoginSubscriber.php
[parsing] modules/contrib/anonymous_login/src/Form/AnonymousLoginSettings.php
[refactoring] modules/contrib/anonymous_login/src/Form/AnonymousLoginSettings.php
[post rectors] modules/contrib/anonymous_login/src/Form/AnonymousLoginSettings.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/anonymous_login/src/Form/AnonymousLoginSettings.php
[parsing] modules/contrib/anonymous_login/tests/src/Functional/AnonymousLoginSettingsFormTest.php
[refactoring] modules/contrib/anonymous_login/tests/src/Functional/AnonymousLoginSettingsFormTest.php
[post rectors] modules/contrib/anonymous_login/tests/src/Functional/AnonymousLoginSettingsFormTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/anonymous_login/tests/src/Functional/AnonymousLoginSettingsFormTest.php
[refactoring] modules/contrib/anonymous_login/tests/src/Functional/AnonymousLoginSettingsFormTest.php
[post rectors] modules/contrib/anonymous_login/tests/src/Functional/AnonymousLoginSettingsFormTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/anonymous_login/tests/src/Functional/AnonymousLoginSettingsFormTest.php
[parsing] modules/contrib/anonymous_login/tests/src/Unit/AnonymousLoginSubscriberTest.php
[refactoring] modules/contrib/anonymous_login/tests/src/Unit/AnonymousLoginSubscriberTest.php
[post rectors] modules/contrib/anonymous_login/tests/src/Unit/AnonymousLoginSubscriberTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/anonymous_login/tests/src/Unit/AnonymousLoginSubscriberTest.php
[refactoring] modules/contrib/anonymous_login/tests/src/Unit/AnonymousLoginSubscriberTest.php
[post rectors] modules/contrib/anonymous_login/tests/src/Unit/AnonymousLoginSubscriberTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/anonymous_login/tests/src/Unit/AnonymousLoginSubscriberTest.php

3 files with changes
====================

1) modules/contrib/anonymous_login/tests/src/Unit/AnonymousLoginSubscriberTest.php:65

    ---------- begin diff ----------
@@ @@
    * @param string $request_uri
    *   The URI of the request.
    *
-   * @return \Symfony\Component\HttpKernel\Event\GetResponseEvent
+   * @return \Symfony\Component\HttpKernel\Event\RequestEvent
    *   THe response event.
    */
   protected function callOnKernelRequestCheckRedirect($request_uri) {
@@ @@
     $event = $this->getGetResponseEventStub($request_uri);
     $request = $event->getRequest();

-    $state = $this->getMockBuilder('Drupal\Core\State\StateInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $state = $this->createMock('Drupal\Core\State\StateInterface');
     $state->expects($this->any())
       ->method('get')
       ->with('system.maintenance_mode')
       ->will($this->returnValue(FALSE));

-    $current_user = $this->getMockBuilder('Drupal\Core\Session\AccountProxyInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $current_user = $this->createMock('Drupal\Core\Session\AccountProxyInterface');
     $current_user->expects($this->any())
       ->method('isAnonymous')
       ->will($this->returnValue(TRUE));

-    $alias_manager = $this->getMockBuilder('Drupal\path_alias\AliasManagerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $alias_manager = $this->createMock('Drupal\path_alias\AliasManagerInterface');
     $alias_manager->expects($this->any())
       ->method('getPathByAlias')
       ->with($this->anything())
@@ @@
         'sites/default/files/*',
       ],
     ];
-    $path_matcher = $this->getMockBuilder('Drupal\Core\Path\PathMatcherInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $path_matcher = $this->createMock('Drupal\Core\Path\PathMatcherInterface');
     $path_matcher->expects($this->any())
       ->method('matchPath')
       ->with($this->anything(), $this->anything())
@@ @@

           return (bool) preg_match($search, $path);
       }));
-    $module_handler = $this->getMockBuilder('Drupal\Core\Extension\ModuleHandlerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $module_handler = $this->createMock('Drupal\Core\Extension\ModuleHandlerInterface');
     $module_handler->expects($this->any())
       ->method('alter')
       ->will($this->returnValue($paths));
-    $path_validator = $this->getMockBuilder('Drupal\Core\Path\PathValidatorInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $path_validator = $this->createMock('Drupal\Core\Path\PathValidatorInterface');
     $path_validator->expects($this->any())
       ->method('getUrlIfValidWithoutAccessCheck')
       ->will($this->returnValue(FALSE));
-    $current_path = $this->getMockBuilder('Drupal\Core\Path\CurrentPathStack')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $current_path = $this->createMock('Drupal\Core\Path\CurrentPathStack');
     $current_path->expects($this->any())
       ->method('getPath')
       ->with($request)
@@ @@
    * @param string $request_uri
    *   The URI of the request.
    *
-   * @return \Symfony\Component\HttpKernel\Event\GetResponseEvent
+   * @return \Symfony\Component\HttpKernel\Event\RequestEvent
    *   The get response event object.
    */
   protected function getGetResponseEventStub($request_uri) {
     $request = Request::create($request_uri, 'GET', [], [], [], ['SCRIPT_NAME' => 'index.php']);

-    $http_kernel = $this->getMockBuilder('\Symfony\Component\HttpKernel\HttpKernelInterface')
-      ->getMock();
-    return new GetResponseEvent($http_kernel, $request, 'test');
+    $http_kernel = $this->createMock('\Symfony\Component\HttpKernel\HttpKernelInterface');
+    return new \Symfony\Component\HttpKernel\Event\RequestEvent($http_kernel, $request, 'test');
   }

 }
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector
 * RenameClassRector


2) modules/contrib/anonymous_login/tests/src/Functional/AnonymousLoginSettingsFormTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->moduleConfig = $this->config('anonymous_login.settings');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/anonymous_login/src/EventSubscriber/AnonymousLoginSubscriber.php:145

    ---------- begin diff ----------
@@ @@
    * This method is called whenever the KernelEvents::REQUEST event is
    * dispatched.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The Event to process.
    */
-  public function redirect(GetResponseEvent $event) {
+  public function redirect(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     // Skip if maintenance mode is enabled.
     if ($this->state->get('system.maintenance_mode')) {
       return;
    ----------- end diff -----------

Applied rules:
 * RenameClassRector


 [OK] 3 files have been changed by Rector                                       

