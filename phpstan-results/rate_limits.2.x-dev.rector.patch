diff --git a/src/EventSubscriber/RequestSubscriberCheckLimits.php b/src/EventSubscriber/RequestSubscriberCheckLimits.php
index 9712aa7..16074a0 100644
--- a/src/EventSubscriber/RequestSubscriberCheckLimits.php
+++ b/src/EventSubscriber/RequestSubscriberCheckLimits.php
@@ -60,7 +60,7 @@ class RequestSubscriberCheckLimits implements EventSubscriberInterface {
   /**
    * Check the limits on the request.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The request event.
    *
    * @throws \Symfony\Component\HttpKernel\Exception\HttpException
@@ -68,7 +68,7 @@ class RequestSubscriberCheckLimits implements EventSubscriberInterface {
    * @throws \Exception
    *   When the flood table does not exist.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     $request = $event->getRequest();
     try {
       $route_data = $this->router->matchRequest($request);
@@ -157,7 +157,7 @@ class RequestSubscriberCheckLimits implements EventSubscriberInterface {
    *   The event name.
    * @param array $flood_config
    *   The configuration with the limits.
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The request event.
    *
    * @return bool
@@ -166,7 +166,7 @@ class RequestSubscriberCheckLimits implements EventSubscriberInterface {
    * @throws \Exception
    *   When the flood table is not created.
    */
-  protected function checkIp($event_name, $flood_config, GetResponseEvent $event) {
+  protected function checkIp($event_name, $flood_config, \Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     $allowed = $this->flood->isAllowed(
       $event_name,
       $flood_config['ip_limit'],
@@ -189,7 +189,7 @@ class RequestSubscriberCheckLimits implements EventSubscriberInterface {
    *   The event name.
    * @param array $flood_config
    *   The configuration with the limits.
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The request event.
    *
    * @return bool
@@ -198,7 +198,7 @@ class RequestSubscriberCheckLimits implements EventSubscriberInterface {
    * @throws \Exception
    *   When the flood table is not created.
    */
-  protected function checkUser($event_name, $flood_config, GetResponseEvent $event) {
+  protected function checkUser($event_name, $flood_config, \Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     if ($this->currentUser->isAnonymous()) {
       // The user check does not apply to anonymous.
       return TRUE;
diff --git a/tests/src/Functional/RateLimitsApiFunctionalTest.php b/tests/src/Functional/RateLimitsApiFunctionalTest.php
index 4c5b07b..a081e3a 100644
--- a/tests/src/Functional/RateLimitsApiFunctionalTest.php
+++ b/tests/src/Functional/RateLimitsApiFunctionalTest.php
@@ -32,7 +32,7 @@ class RateLimitsApiFunctionalTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $config = RateLimitConfig::create([
       'label' => $this->randomGenerator->name(),
