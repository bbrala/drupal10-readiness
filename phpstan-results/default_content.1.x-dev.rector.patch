diff --git a/src/Event/ExportEvent.php b/src/Event/ExportEvent.php
index d70b130..a80cda8 100644
--- a/src/Event/ExportEvent.php
+++ b/src/Event/ExportEvent.php
@@ -10,7 +10,7 @@ use Symfony\Component\EventDispatcher\Event;
  *
  * @see \Drupal\default_content\Event\DefaultContentEvents
  */
-class ExportEvent extends Event {
+class ExportEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The entity we're exporting.
diff --git a/src/Event/ImportEvent.php b/src/Event/ImportEvent.php
index 0b486f4..7327543 100644
--- a/src/Event/ImportEvent.php
+++ b/src/Event/ImportEvent.php
@@ -9,7 +9,7 @@ use Symfony\Component\EventDispatcher\Event;
  *
  * @see \Drupal\default_content\Event\DefaultContentEvents
  */
-class ImportEvent extends Event {
+class ImportEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * An array of content entities that were imported.
diff --git a/src/Exporter.php b/src/Exporter.php
index e7d062b..43a424b 100644
--- a/src/Exporter.php
+++ b/src/Exporter.php
@@ -150,7 +150,7 @@ class Exporter implements ExporterInterface {
     $this->linkManager->setLinkDomain($this->linkDomain);
 
     $return = $this->serializer->serialize($entity, 'hal_json', ['json_encode_options' => JSON_PRETTY_PRINT]);
-    $this->eventDispatcher->dispatch(DefaultContentEvents::EXPORT, new ExportEvent($entity));
+    $this->eventDispatcher->dispatch(new ExportEvent($entity), DefaultContentEvents::EXPORT);
 
     // Reset the link domain and the current user, if needed.
     $this->linkManager->setLinkDomain(FALSE);
diff --git a/src/Importer.php b/src/Importer.php
index 600ed5c..28ec2c2 100644
--- a/src/Importer.php
+++ b/src/Importer.php
@@ -190,7 +190,7 @@ class Importer implements ImporterInterface {
           $created[$entity->uuid()] = $entity;
         }
       }
-      $this->eventDispatcher->dispatch(DefaultContentEvents::IMPORT, new ImportEvent($created, $module));
+      $this->eventDispatcher->dispatch(new ImportEvent($created, $module), DefaultContentEvents::IMPORT);
       $this->accountSwitcher->switchBack();
     }
     // Reset the tree.
diff --git a/tests/src/Functional/DefaultContentTest.php b/tests/src/Functional/DefaultContentTest.php
index d468668..00a9c59 100644
--- a/tests/src/Functional/DefaultContentTest.php
+++ b/tests/src/Functional/DefaultContentTest.php
@@ -33,7 +33,7 @@ class DefaultContentTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Create user 2 with the correct UUID.
     User::create([
@@ -48,6 +48,7 @@ class DefaultContentTest extends BrowserTestBase {
 
   /**
    * Test importing default content.
+   * @doesNotPerformAssertions
    */
   public function testImport() {
     // Enable the module and import the content.
@@ -59,6 +60,7 @@ class DefaultContentTest extends BrowserTestBase {
 
   /**
    * Test importing default content via ConfigImporter.
+   * @doesNotPerformAssertions
    */
   public function testImportViaConfigImporter() {
     $sync = $this->container->get('config.storage.sync');
diff --git a/tests/src/Kernel/ExporterIntegrationTest.php b/tests/src/Kernel/ExporterIntegrationTest.php
index b6fb8a4..c8d8639 100644
--- a/tests/src/Kernel/ExporterIntegrationTest.php
+++ b/tests/src/Kernel/ExporterIntegrationTest.php
@@ -35,7 +35,7 @@ class ExporterIntegrationTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('system', ['sequences']);
@@ -68,8 +68,8 @@ class ExporterIntegrationTest extends KernelTestBase {
     $exported_decoded = json_decode($exported);
 
     // Ensure the proper UUID is part of it.
-    $this->assertEqual($exported_decoded->uuid[0]->value, $term->uuid());
-    $this->assertEqual($exported, $expected);
+    $this->assertEquals($exported_decoded->uuid[0]->value, $term->uuid());
+    $this->assertEquals($exported, $expected);
 
     // Tests export of taxonomy parent field.
     // @todo Get rid of after https://www.drupal.org/node/2543726
@@ -122,15 +122,15 @@ class ExporterIntegrationTest extends KernelTestBase {
     $exported_by_entity_type = $this->exporter->exportContentWithReferences('node', $node->id());
 
     // Ensure that the node type is not tryed to be exported.
-    $this->assertEqual(array_keys($exported_by_entity_type), ['node', 'user']);
+    $this->assertEquals(array_keys($exported_by_entity_type), ['node', 'user']);
 
     // Ensure the right UUIDs are exported.
-    $this->assertEqual([$node->uuid()], array_keys($exported_by_entity_type['node']));
-    $this->assertEqual([$user->uuid()], array_keys($exported_by_entity_type['user']));
+    $this->assertEquals([$node->uuid()], array_keys($exported_by_entity_type['node']));
+    $this->assertEquals([$user->uuid()], array_keys($exported_by_entity_type['user']));
 
     // Compare the actual serialized data.
-    $this->assertEqual(reset($exported_by_entity_type['node']), $expected_node);
-    $this->assertEqual(reset($exported_by_entity_type['user']), $expected_user);
+    $this->assertEquals(reset($exported_by_entity_type['node']), $expected_node);
+    $this->assertEquals(reset($exported_by_entity_type['user']), $expected_user);
 
     // Ensure no recursion on export.
     $field_name = 'field_test_self_ref';
@@ -183,7 +183,7 @@ class ExporterIntegrationTest extends KernelTestBase {
     $expected_node = $serializer->serialize($node, 'hal_json', ['json_encode_options' => JSON_PRETTY_PRINT]);
 
     $content = $this->exporter->exportModuleContent('default_content_export_test');
-    $this->assertEqual($content['node'][$test_uuid], $expected_node);
+    $this->assertEquals($content['node'][$test_uuid], $expected_node);
   }
 
   /**
