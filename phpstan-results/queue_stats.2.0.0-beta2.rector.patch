diff --git a/queue_stats.info.yml b/queue_stats.info.yml
index 75a1cab..af450a7 100644
--- a/queue_stats.info.yml
+++ b/queue_stats.info.yml
@@ -1,7 +1,7 @@
 name: 'Queue Statistics'
 type: module
 description: 'Calculate statistics about queues'
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 package: 'Queues'
 configure: 'queue_stats.admin_form'
 
diff --git a/src/Event/QueueItemEvent.php b/src/Event/QueueItemEvent.php
index a7920f5..622896d 100644
--- a/src/Event/QueueItemEvent.php
+++ b/src/Event/QueueItemEvent.php
@@ -10,7 +10,7 @@ use Symfony\Component\EventDispatcher\Event;
  *
  * This will be dispatched at different stages of the item lifecycle.
  */
-class QueueItemEvent extends Event {
+class QueueItemEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   const PROCESSING_STARTED = 'queue_stats_item_processing_started';
   const PROCESSING_ABORTED = 'queue_stats_item_processing_stopped';
diff --git a/src/MonitoredQueue.php b/src/MonitoredQueue.php
index 3df5f7a..27296af 100644
--- a/src/MonitoredQueue.php
+++ b/src/MonitoredQueue.php
@@ -70,7 +70,7 @@ class MonitoredQueue implements MonitoredQueueInterface, QueueInterface, QueueGa
    */
   public function deleteItem($item) {
     $event = new QueueItemEvent(QueueItemEvent::PROCESSING_COMPLETED, $this, $item, $this->time->getCurrentMicroTime());
-    $this->dispatcher->dispatch($event->getName(), $event);
+    $this->dispatcher->dispatch($event, $event->getName());
 
     $this->queue->deleteItem($item);
   }
@@ -82,7 +82,7 @@ class MonitoredQueue implements MonitoredQueueInterface, QueueInterface, QueueGa
     $item = $this->queue->claimItem($lease_time);
     if ($item !== FALSE) {
       $event = new QueueItemEvent(QueueItemEvent::PROCESSING_STARTED, $this, $item, $this->time->getCurrentMicroTime());
-      $this->dispatcher->dispatch($event->getName(), $event);
+      $this->dispatcher->dispatch($event, $event->getName());
     }
     return $item;
   }
@@ -108,7 +108,7 @@ class MonitoredQueue implements MonitoredQueueInterface, QueueInterface, QueueGa
     $released = $this->queue->releaseItem($item);
     if ($released) {
       $event = new QueueItemEvent(QueueItemEvent::PROCESSING_ABORTED, $this, $item, $this->time->getCurrentMicroTime());
-      $this->dispatcher->dispatch($event->getName(), $event);
+      $this->dispatcher->dispatch($event, $event->getName());
     }
     return $released;
   }
diff --git a/src/Plugin/QueueStatisticManager.php b/src/Plugin/QueueStatisticManager.php
index 5943031..c33fdf1 100644
--- a/src/Plugin/QueueStatisticManager.php
+++ b/src/Plugin/QueueStatisticManager.php
@@ -119,7 +119,7 @@ class QueueStatisticManager extends DefaultPluginManager implements EventSubscri
    *   Queue event.
    */
   public function onEvent(QueueItemEvent $event) {
-    $this->eventDispatcher->dispatch($event->getName(), $event);
+    $this->eventDispatcher->dispatch($event, $event->getName());
   }
 
   /**
