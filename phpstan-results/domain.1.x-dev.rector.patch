diff --git a/domain/src/EventSubscriber/DomainSubscriber.php b/domain/src/EventSubscriber/DomainSubscriber.php
index a170d3bc..1c43f0f6 100644
--- a/domain/src/EventSubscriber/DomainSubscriber.php
+++ b/domain/src/EventSubscriber/DomainSubscriber.php
@@ -82,12 +82,12 @@ class DomainSubscriber implements EventSubscriberInterface {
    * in one of two cases: an unauthorized request to an inactive domain is made;
    * a domain alias is set to redirect to its primary domain record.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The Event to process.
    *
    * @see domain_alias_domain_request_alter
    */
-  public function onKernelRequestDomain(GetResponseEvent $event) {
+  public function onKernelRequestDomain(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     // Negotiate the request and set domain context.
     /** @var \Drupal\domain\DomainInterface $domain */
     if ($domain = $this->domainNegotiator->getActiveDomain(TRUE)) {
diff --git a/domain/tests/src/Functional/Condition/DomainConditionTest.php b/domain/tests/src/Functional/Condition/DomainConditionTest.php
index 8096918d..df04cf0e 100644
--- a/domain/tests/src/Functional/Condition/DomainConditionTest.php
+++ b/domain/tests/src/Functional/Condition/DomainConditionTest.php
@@ -42,7 +42,7 @@ class DomainConditionTest extends DomainTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Set the condition manager.
@@ -79,11 +79,11 @@ class DomainConditionTest extends DomainTestBase {
 
     // Check for the proper summary.
     // Summaries require an extra space due to negate handling in summary().
-    $this->assertEqual($condition->summary(), 'Active domain is ' . $this->testDomain->label());
+    $this->assertEquals($condition->summary(), 'Active domain is ' . $this->testDomain->label());
 
     // Check the negated summary.
     $condition->setConfig('negate', TRUE);
-    $this->assertEqual($condition->summary(), 'Active domain is not ' . $this->testDomain->label());
+    $this->assertEquals($condition->summary(), 'Active domain is not ' . $this->testDomain->label());
 
     // Check the negated condition.
     $this->assertFalse($condition->execute(), 'Domain request condition fails when condition negated.');
diff --git a/domain/tests/src/Functional/DomainActionsTest.php b/domain/tests/src/Functional/DomainActionsTest.php
index b170f550..614efb8b 100644
--- a/domain/tests/src/Functional/DomainActionsTest.php
+++ b/domain/tests/src/Functional/DomainActionsTest.php
@@ -23,7 +23,7 @@ class DomainActionsTest extends DomainTestBase {
 
     // Visit the domain overview administration page.
     $this->drupalGet($path);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Test the domains.
     $storage = \Drupal::entityTypeManager()->getStorage('domain');
@@ -38,23 +38,26 @@ class DomainActionsTest extends DomainTestBase {
     // Test some text on the page.
     foreach ($domains as $domain) {
       $name = $domain->label();
-      $this->assertText($name, 'Name found properly.');
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains($name);
     }
     // Test the list of actions.
     $actions = ['delete', 'disable', 'default'];
     foreach ($actions as $action) {
-      $this->assertRaw("/domain/{$action}/", 'Actions found properly.');
+      $this->assertSession()->responseContains("/domain/{$action}/");
     }
     // Check that all domains are active.
-    $this->assertNoRaw('Inactive', 'Inactive domain not found.');
+    $this->assertSession()->responseNotContains('Inactive');
 
     // Disable a domain and test the enable link.
     $this->clickLink('Disable', 0);
-    $this->assertRaw('Inactive', 'Inactive domain found.');
+    $this->assertSession()->responseContains('Inactive');
 
     // Visit the domain overview administration page to clear cache.
     $this->drupalGet($path);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     foreach ($storage->loadMultiple() as $domain) {
       if ($domain->id() == 'one_example_com') {
@@ -68,15 +71,15 @@ class DomainActionsTest extends DomainTestBase {
     // Test the list of actions.
     $actions = ['enable', 'delete', 'disable', 'default'];
     foreach ($actions as $action) {
-      $this->assertRaw("/domain/{$action}/", 'Actions found properly.');
+      $this->assertSession()->responseContains("/domain/{$action}/");
     }
     // Re-enable the domain.
     $this->clickLink('Enable', 0);
-    $this->assertNoRaw('Inactive', 'Inactive domain not found.');
+    $this->assertSession()->responseNotContains('Inactive');
 
     // Visit the domain overview administration page to clear cache.
     $this->drupalGet($path);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     foreach ($storage->loadMultiple() as $domain) {
       $this->assertNotEmpty($domain->status(), 'All domains active.');
@@ -87,7 +90,7 @@ class DomainActionsTest extends DomainTestBase {
 
     // Visit the domain overview administration page to clear cache.
     $this->drupalGet($path);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Check the default domain.
     $storage->resetCache();
diff --git a/domain/tests/src/Functional/DomainAdminElementTest.php b/domain/tests/src/Functional/DomainAdminElementTest.php
index 59b54c9c..2e4c3db7 100644
--- a/domain/tests/src/Functional/DomainAdminElementTest.php
+++ b/domain/tests/src/Functional/DomainAdminElementTest.php
@@ -22,7 +22,7 @@ class DomainAdminElementTest extends DomainTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create 5 domains.
@@ -71,7 +71,7 @@ class DomainAdminElementTest extends DomainTestBase {
     // Check that two values are set.
     $manager = \Drupal::service('domain.element_manager');
     $values = $manager->getFieldValues($user, DomainInterface::DOMAIN_ADMIN_FIELD);
-    $this->assert(count($values) == 3, 'User saved with three domain records.');
+    $this->assertTrue(count($values) == 3, 'User saved with three domain records.');
 
     // Now login as a user with limited rights.
     $account = $this->drupalCreateUser([
@@ -82,7 +82,7 @@ class DomainAdminElementTest extends DomainTestBase {
     $this->addDomainsToEntity('user', $account->id(), $ids, DomainInterface::DOMAIN_ADMIN_FIELD);
     $tester = $storage->load($account->id());
     $values = $manager->getFieldValues($tester, DomainInterface::DOMAIN_ADMIN_FIELD);
-    $this->assert(count($values) == 2, 'User saved with two domain records.');
+    $this->assertTrue(count($values) == 2, 'User saved with two domain records.');
     $storage->resetCache([$account->id()]);
     $this->drupalLogin($account);
 
@@ -112,7 +112,7 @@ class DomainAdminElementTest extends DomainTestBase {
     $user = $storage->load($user->id());
     // Check that two values are set.
     $values = $manager->getFieldValues($user, DomainInterface::DOMAIN_ADMIN_FIELD);
-    $this->assert(count($values) == 2, 'User saved with two domain records.');
+    $this->assertTrue(count($values) == 2, 'User saved with two domain records.');
 
     // Test the case presented in https://www.drupal.org/node/2841962.
     $config = \Drupal::configFactory()->getEditable('user.settings');
diff --git a/domain/tests/src/Functional/DomainCSSTest.php b/domain/tests/src/Functional/DomainCSSTest.php
index 853e4919..5b09ece0 100644
--- a/domain/tests/src/Functional/DomainCSSTest.php
+++ b/domain/tests/src/Functional/DomainCSSTest.php
@@ -21,7 +21,7 @@ class DomainCSSTest extends DomainTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     \Drupal::service('theme_installer')->install(['bartik']);
   }
@@ -45,7 +45,7 @@ class DomainCSSTest extends DomainTestBase {
     foreach (\Drupal::entityTypeManager()->getStorage('domain')->loadMultiple() as $domain) {
       $this->drupalGet($domain->getPath());
       $text = '<body class="' . Html::getClass($domain->id() . '-class');
-      $this->assertNoRaw($text, 'No custom CSS present.');
+      $this->assertSession()->responseNotContains($text);
     }
     // Set the css classes.
     $config = $this->config('domain.settings');
@@ -58,7 +58,7 @@ class DomainCSSTest extends DomainTestBase {
       drupal_flush_all_caches();
       $this->drupalGet($domain->getPath());
       $text = '<body class="' . Html::getClass($domain->id() . '-class');
-      $this->assertRaw($text, 'Custom CSS present.' . $text);
+      $this->assertSession()->responseContains($text);
     }
 
     // Set the css classes.
@@ -71,7 +71,7 @@ class DomainCSSTest extends DomainTestBase {
       drupal_flush_all_caches();
       $this->drupalGet($domain->getPath());
       $text = '<body class="' . Html::getClass($domain->id() . '-class') . ' ' . Html::getClass($domain->label() . '-class');
-      $this->assertRaw($text, 'Custom CSS present.' . $text);
+      $this->assertSession()->responseContains($text);
     }
 
   }
diff --git a/domain/tests/src/Functional/DomainCheckResponseTest.php b/domain/tests/src/Functional/DomainCheckResponseTest.php
index 5d234cdc..9606da65 100644
--- a/domain/tests/src/Functional/DomainCheckResponseTest.php
+++ b/domain/tests/src/Functional/DomainCheckResponseTest.php
@@ -25,7 +25,7 @@ class DomainCheckResponseTest extends DomainTestBase {
     $this->drupalGet('admin/config/domain/add');
     $this->submitForm($edit, 'Save');
     // Did it save correctly?
-    $this->assertNoRaw('The server request to');
+    $this->assertSession()->responseNotContains('The server request to');
     $domains = $storage->loadMultiple();
     $this->assertCount(1, $domains, 'Domain record saved via form.');
 
@@ -43,7 +43,7 @@ class DomainCheckResponseTest extends DomainTestBase {
       // Ensure no test errors.
     }
     // The domain should not save.
-    $this->assertRaw('The server request to');
+    $this->assertSession()->responseContains('The server request to');
     $domains = $storage->loadMultiple();
     $this->assertCount(1, $domains, 'Domain record not saved via form.');
 
@@ -53,7 +53,7 @@ class DomainCheckResponseTest extends DomainTestBase {
     $this->submitForm($edit, 'Save');
 
     // The domain should save.
-    $this->assertNoRaw('The server request to');
+    $this->assertSession()->responseNotContains('The server request to');
     $domains = $storage->loadMultiple();
     $this->assertCount(2, $domains, 'Domain record saved via form.');
   }
diff --git a/domain/tests/src/Functional/DomainEntityAccessTest.php b/domain/tests/src/Functional/DomainEntityAccessTest.php
index 9928e103..527f3a71 100644
--- a/domain/tests/src/Functional/DomainEntityAccessTest.php
+++ b/domain/tests/src/Functional/DomainEntityAccessTest.php
@@ -29,7 +29,10 @@ class DomainEntityAccessTest extends DomainTestBase {
     $this->drupalGet('admin/config/domain');
 
     // Check for the add message.
-    $this->assertText('There are no domain record entities yet.', 'Text for no domains found.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There are no domain record entities yet.');
 
     // Visit the add domain administration page.
     $this->drupalGet('admin/config/domain/add');
@@ -60,7 +63,7 @@ class DomainEntityAccessTest extends DomainTestBase {
 
     // Visit the add domain add page.
     $this->drupalGet('admin/config/domain/add');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Make a POST request on admin/config/domain/add.
     $edit = $this->domainPostValues();
     // Use hostname with dot (.) to avoid validation error.
@@ -81,7 +84,7 @@ class DomainEntityAccessTest extends DomainTestBase {
     $this->drupalLogin($noneditor);
     // Visit the add domain administration page.
     $this->drupalGet('admin/config/domain/add');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }
 
 }
diff --git a/domain/tests/src/Functional/DomainEntityReferenceTest.php b/domain/tests/src/Functional/DomainEntityReferenceTest.php
index 22b24fda..2b9abff0 100644
--- a/domain/tests/src/Functional/DomainEntityReferenceTest.php
+++ b/domain/tests/src/Functional/DomainEntityReferenceTest.php
@@ -30,17 +30,23 @@ class DomainEntityReferenceTest extends DomainTestBase {
 
     // Visit the article field administration page.
     $this->drupalGet('admin/structure/types/manage/article/fields');
-    $this->assertResponse(200, 'Manage fields page accessed.');
+    $this->assertSession()->statusCodeEquals(200, 'Manage fields page accessed.');
 
     // Check for a domain field.
-    $this->assertNoText('Domain test field', 'Domain form field not found.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Domain test field');
 
     // Visit the article field display administration page.
     $this->drupalGet('admin/structure/types/manage/article/display');
-    $this->assertResponse(200, 'Manage field display page accessed.');
+    $this->assertSession()->statusCodeEquals(200, 'Manage field display page accessed.');
 
     // Check for a domain field.
-    $this->assertNoText('Domain test field', 'Domain form field not found.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Domain test field');
 
     // Create test domain field.
     $this->domainCreateTestField();
@@ -49,13 +55,19 @@ class DomainEntityReferenceTest extends DomainTestBase {
     $this->drupalGet('admin/structure/types/manage/article/fields');
 
     // Check the new field.
-    $this->assertText('Domain test field', 'Added a test field instance.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Domain test field');
 
     // Visit the article field display administration page.
     $this->drupalGet('admin/structure/types/manage/article/display');
 
     // Check the new field.
-    $this->assertText('Domain test field', 'Added a test field display instance.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Domain test field');
 
     // Visit the field config page.
     $this->drupalGet('admin/config/people/accounts/fields/user.user.field_domain_access');
@@ -82,16 +94,19 @@ class DomainEntityReferenceTest extends DomainTestBase {
 
     // Visit the article field display administration page.
     $this->drupalGet('node/add/article');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Check the new field exists on the page.
-    $this->assertText('Domain test field', 'Found the domain field instance.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Domain test field');
 
     // We expect to find 5 domain options.
     $domains = \Drupal::entityTypeManager()->getStorage('domain')->loadMultiple();
     foreach ($domains as $domain) {
       $string = 'value="' . $domain->id() . '"';
-      $this->assertRaw($string, 'Found the domain option');
+      $this->assertSession()->responseContains($string);
       if (!isset($one)) {
         $one = $domain->id();
         continue;
@@ -107,7 +122,7 @@ class DomainEntityReferenceTest extends DomainTestBase {
     $edit["field_domain[{$two}]"] = TRUE;
     $this->drupalGet('node/add/article');
     $this->submitForm($edit, 'Save');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $node = \Drupal::entityTypeManager()->getStorage('node')->load(1);
     $values = $node->get('field_domain');
 
diff --git a/domain/tests/src/Functional/DomainFormsTest.php b/domain/tests/src/Functional/DomainFormsTest.php
index eceab646..d0b68f3f 100644
--- a/domain/tests/src/Functional/DomainFormsTest.php
+++ b/domain/tests/src/Functional/DomainFormsTest.php
@@ -25,7 +25,10 @@ class DomainFormsTest extends DomainTestBase {
     $this->drupalGet('admin/config/domain');
 
     // Check for the add message.
-    $this->assertText('There are no domain record entities yet.', 'Text for no domains found.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There are no domain record entities yet.');
 
     // Visit the add domain administration page.
     $this->drupalGet('admin/config/domain/add');
diff --git a/domain/tests/src/Functional/DomainGetResponseTest.php b/domain/tests/src/Functional/DomainGetResponseTest.php
index 35128bce..4f9244be 100644
--- a/domain/tests/src/Functional/DomainGetResponseTest.php
+++ b/domain/tests/src/Functional/DomainGetResponseTest.php
@@ -25,7 +25,7 @@ class DomainGetResponseTest extends DomainTestBase {
     $domain = \Drupal::entityTypeManager()->getStorage('domain')->load($key);
 
     // Our testing server should be able to access the test PNG file.
-    $this->assert($domain->getResponse() == 200, 'Server returned a 200 response.');
+    $this->assertTrue($domain->getResponse() == 200, 'Server returned a 200 response.');
 
     // Now create a bad domain.
     $values = [
@@ -36,7 +36,7 @@ class DomainGetResponseTest extends DomainTestBase {
     $domain = \Drupal::entityTypeManager()->getStorage('domain')->create($values);
 
     $domain->save();
-    $this->assert($domain->getResponse() == 500, 'Server test returned a 500 response.');
+    $this->assertTrue($domain->getResponse() == 500, 'Server test returned a 500 response.');
   }
 
 }
diff --git a/domain/tests/src/Functional/DomainInactiveTest.php b/domain/tests/src/Functional/DomainInactiveTest.php
index b2af33a7..9cc743ce 100644
--- a/domain/tests/src/Functional/DomainInactiveTest.php
+++ b/domain/tests/src/Functional/DomainInactiveTest.php
@@ -49,11 +49,11 @@ class DomainInactiveTest extends DomainTestBase {
     // Check to see if the user can login.
     $url = $domain->getPath() . 'user/login';
     $this->drupalGet($url);
-    $this->assertResponse(200, 'Request to login on inactive domain allowed.');
+    $this->assertSession()->statusCodeEquals(200, 'Request to login on inactive domain allowed.');
     // Check to see if the user can reset password.
     $url = $domain->getPath() . 'user/password';
     $this->drupalGet($url);
-    $this->assertResponse(200, 'Request to reset password on inactive domain allowed.');
+    $this->assertSession()->statusCodeEquals(200, 'Request to reset password on inactive domain allowed.');
 
     // Try to access with the proper permission.
     user_role_grant_permissions(AccountInterface::ANONYMOUS_ROLE, ['access inactive domains']);
@@ -83,7 +83,7 @@ class DomainInactiveTest extends DomainTestBase {
     // Test the trusted host, which should redirect to default.
     $this->drupalGet($domain->getPath());
     $this->assertTrue($domain2->getPath() == $this->getUrl(), 'Redirected from the inactive domain.');
-    $this->assertResponse(200, 'Request to trusted host allowed.');
+    $this->assertSession()->statusCodeEquals(200, 'Request to trusted host allowed.');
 
     // The redirect is cached, so we must flush cache to test again.
     drupal_flush_all_caches();
@@ -92,7 +92,7 @@ class DomainInactiveTest extends DomainTestBase {
     // Disable the domain and test for redirect.
     $domain3->saveDefault();
     $this->drupalGet($domain->getPath());
-    $this->assertRaw('The provided host name is not a valid redirect.');
+    $this->assertSession()->responseContains('The provided host name is not a valid redirect.');
   }
 
 }
diff --git a/domain/tests/src/Functional/DomainListBuilderTest.php b/domain/tests/src/Functional/DomainListBuilderTest.php
index 05c4437e..6f7d40c2 100644
--- a/domain/tests/src/Functional/DomainListBuilderTest.php
+++ b/domain/tests/src/Functional/DomainListBuilderTest.php
@@ -21,7 +21,7 @@ class DomainListBuilderTest extends DomainTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create 150 domains.
@@ -76,7 +76,7 @@ class DomainListBuilderTest extends DomainTestBase {
     $user = $user_storage->load($account->id());
     $manager = \Drupal::service('domain.element_manager');
     $values = $manager->getFieldValues($user, DomainInterface::DOMAIN_ADMIN_FIELD);
-    $this->assert(count($values) == 2, 'User saved with two domain records.');
+    $this->assertTrue(count($values) == 2, 'User saved with two domain records.');
 
     $this->drupalLogin($account);
 
@@ -142,7 +142,7 @@ class DomainListBuilderTest extends DomainTestBase {
     $user = $user_storage->load($account2->id());
     $manager = \Drupal::service('domain.element_manager');
     $values = $manager->getFieldValues($user, DomainInterface::DOMAIN_ADMIN_FIELD);
-    $this->assert(count($values) == 2, 'User saved with two domain records.');
+    $this->assertTrue(count($values) == 2, 'User saved with two domain records.');
 
     $this->drupalLogin($account2);
 
