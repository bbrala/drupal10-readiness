diff --git a/modules/samlauth_user_fields/src/Form/SamlauthMappingListForm.php b/modules/samlauth_user_fields/src/Form/SamlauthMappingListForm.php
index 553b4f4..80961a9 100644
--- a/modules/samlauth_user_fields/src/Form/SamlauthMappingListForm.php
+++ b/modules/samlauth_user_fields/src/Form/SamlauthMappingListForm.php
@@ -198,7 +198,7 @@ class SamlauthMappingListForm extends ConfigFormBase {
         $output['table']['#rows'][$id] = [
           $mapping['attribute_name'],
           $user_field,
-          render($operations),
+          \Drupal::service('renderer')->render($operations),
         ];
         if ($linking_enabled) {
           array_splice($output['table']['#rows'][$id], 2, 0, [$mapping['link_user_order'] ?? '']);
diff --git a/src/Event/SamlauthUserLinkEvent.php b/src/Event/SamlauthUserLinkEvent.php
index ea91f1c..b1ccb88 100644
--- a/src/Event/SamlauthUserLinkEvent.php
+++ b/src/Event/SamlauthUserLinkEvent.php
@@ -8,7 +8,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Wraps a samlauth user link event for event listeners.
  */
-class SamlauthUserLinkEvent extends Event {
+class SamlauthUserLinkEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The Drupal user account to link.
diff --git a/src/Event/SamlauthUserSyncEvent.php b/src/Event/SamlauthUserSyncEvent.php
index 970928e..dbc1c6c 100644
--- a/src/Event/SamlauthUserSyncEvent.php
+++ b/src/Event/SamlauthUserSyncEvent.php
@@ -8,7 +8,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Wraps a samlauth user sync event for event listeners.
  */
-class SamlauthUserSyncEvent extends Event {
+class SamlauthUserSyncEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The Drupal user account.
diff --git a/src/EventSubscriber/AccessDeniedSubscriber.php b/src/EventSubscriber/AccessDeniedSubscriber.php
index 0e99c97..614ed35 100644
--- a/src/EventSubscriber/AccessDeniedSubscriber.php
+++ b/src/EventSubscriber/AccessDeniedSubscriber.php
@@ -49,11 +49,11 @@ class AccessDeniedSubscriber implements EventSubscriberInterface {
   /**
    * Redirects users when access is denied.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *   The event to process.
    */
-  public function onException(GetResponseForExceptionEvent $event) {
-    $exception = $event->getException();
+  public function onException(\Symfony\Component\HttpKernel\Event\ExceptionEvent $event) {
+    $exception = $event->getThrowable();
     // If our own routes threw a TooManyRequestsHttpException, don't spend time
     // redirecting to another page and rendering that. (Rendering would need to
     // be done from scratch because the page needs to include includes the
diff --git a/src/SamlService.php b/src/SamlService.php
index 5d4f090..e9bd68a 100644
--- a/src/SamlService.php
+++ b/src/SamlService.php
@@ -441,7 +441,7 @@ class SamlService {
       // then by name, then by email.
       if ($config->get('map_users')) {
         $event = new SamlauthUserLinkEvent($this->getAttributes());
-        $this->eventDispatcher->dispatch(SamlauthEvents::USER_LINK, $event);
+        $this->eventDispatcher->dispatch($event, SamlauthEvents::USER_LINK);
         $account = $event->getLinkedAccount();
         if ($account) {
           $this->logger->info('Existing user @name (@uid) was newly matched to SAML login attributes; linking user and logging in.', [
@@ -749,7 +749,7 @@ class SamlService {
   public function synchronizeUserAttributes(UserInterface $account, $skip_save = FALSE, $first_saml_login = FALSE) {
     // Dispatch a user_sync event.
     $event = new SamlauthUserSyncEvent($account, $this->getAttributes(), $first_saml_login);
-    $this->eventDispatcher->dispatch(SamlauthEvents::USER_SYNC, $event);
+    $this->eventDispatcher->dispatch($event, SamlauthEvents::USER_SYNC);
 
     if (!$skip_save && $event->isAccountChanged()) {
       $account->save();
diff --git a/src/Tests/SamlTest.php b/src/Tests/SamlTest.php
index b143885..00506fc 100644
--- a/src/Tests/SamlTest.php
+++ b/src/Tests/SamlTest.php
@@ -48,11 +48,11 @@ class SamlTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Import testshib config.
-    $config = drupal_get_path('module', 'samlauth') . '/test_resources/samlauth.authentication.yml';
+    $config = \Drupal::service('extension.list.module')->getPath('samlauth') . '/test_resources/samlauth.authentication.yml';
     $config = file_get_contents($config);
     $config = Yaml::decode($config);
     \Drupal::configFactory()->getEditable('samlauth.authentication')->setData($config)->save();
@@ -68,12 +68,30 @@ class SamlTest extends BrowserTestBase {
     $web_user = $this->drupalCreateUser(['configure saml']);
     $this->drupalLogin($web_user);
     $this->drupalGet('admin/config/people/saml');
-    $this->assertText('Login / Logout', 'Login / Logout fieldset present');
-    $this->assertText('Service Provider', 'SP fieldset present');
-    $this->assertText('Identity Provider', 'iDP fieldset present');
-    $this->assertText('User Info and Syncing', 'User Info and Syncing fieldset present');
-    $this->assertText('SAML Message Construction', 'SAML Message Construction fieldset present');
-    $this->assertText('SAML Message Validation', 'SAML Message Validation fieldset present');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Login / Logout');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Service Provider');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Identity Provider');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('User Info and Syncing');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('SAML Message Construction');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('SAML Message Validation');
   }
 
   /**
@@ -85,8 +103,8 @@ class SamlTest extends BrowserTestBase {
 
     // Test that we get metadata.
     $this->drupalGet('saml/metadata');
-    $this->assertResponse(200, 'SP metadata is accessible');
-    $this->assertRaw('entityID="samlauth"', 'Entity ID found in the metadata');
+    $this->assertSession()->statusCodeEquals(200, 'SP metadata is accessible');
+    $this->assertSession()->responseContains('entityID="samlauth"');
   }
 
   /**
