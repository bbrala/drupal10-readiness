diff --git a/src/EventSubscriber/RequireLoginSubscriber.php b/src/EventSubscriber/RequireLoginSubscriber.php
index 344a7df..2347753 100644
--- a/src/EventSubscriber/RequireLoginSubscriber.php
+++ b/src/EventSubscriber/RequireLoginSubscriber.php
@@ -135,7 +135,7 @@ class RequireLoginSubscriber implements EventSubscriberInterface {
   /**
    * Check login authentication enforcement for current request.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event response.
    * @param \Drupal\Core\Config\ImmutableConfig $config
    *   The configuration object.
@@ -145,11 +145,11 @@ class RequireLoginSubscriber implements EventSubscriberInterface {
    * @return bool
    *   Return FALSE if authentication isn't required. Otherwise TRUE.
    */
-  private function checkLogin(GetResponseEvent $event, ImmutableConfig $config, Request $request) {
+  private function checkLogin(\Symfony\Component\HttpKernel\Event\RequestEvent $event, ImmutableConfig $config, Request $request) {
     // Check event exception status codes.
-    if ($event instanceof GetResponseForExceptionEvent) {
+    if ($event instanceof \Symfony\Component\HttpKernel\Event\ExceptionEvent) {
       /** @var \Symfony\Component\HttpKernel\Exception\HttpException $exception */
-      $exception = $event->getException();
+      $exception = $event->getThrowable();
       switch ($exception->getStatusCode()) {
         case '403':
           if ($config->get('excluded_403')) {
@@ -238,13 +238,13 @@ class RequireLoginSubscriber implements EventSubscriberInterface {
   /**
    * Prepare login redirect response.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event response.
    *
    * @return string|null
    *   The redirect URL.
    */
-  private function loginRedirect(GetResponseEvent $event) {
+  private function loginRedirect(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     if ($this->accountProxy->getAccount()->isAuthenticated()) {
       // Stop if user is authenticated.
       return NULL;
@@ -279,10 +279,10 @@ class RequireLoginSubscriber implements EventSubscriberInterface {
   /**
    * Login redirect on KernelEvents::EXCEPTION.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event response.
    */
-  public function exceptionRedirect(GetResponseEvent $event) {
+  public function exceptionRedirect(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     // Boolean indicating event exception. Prevents potential infinite
     // redirect loop on KernelEvents::REQUEST.
     $this->eventException = TRUE;
@@ -296,10 +296,10 @@ class RequireLoginSubscriber implements EventSubscriberInterface {
   /**
    * Login redirect on KernelEvents::REQUEST.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event response.
    */
-  public function requestRedirect(GetResponseEvent $event) {
+  public function requestRedirect(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     if (!$this->eventException && ($redirect = $this->loginRedirect($event))) {
       $response = new RedirectResponse($redirect);
       $event->setResponse($response);
