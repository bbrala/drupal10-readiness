diff --git a/modules/flag_bookmark/tests/src/FunctionalJavascript/FlagBookmarkUITest.php b/modules/flag_bookmark/tests/src/FunctionalJavascript/FlagBookmarkUITest.php
index 4fb9b27..557a8ac 100644
--- a/modules/flag_bookmark/tests/src/FunctionalJavascript/FlagBookmarkUITest.php
+++ b/modules/flag_bookmark/tests/src/FunctionalJavascript/FlagBookmarkUITest.php
@@ -30,7 +30,7 @@ class FlagBookmarkUITest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
   }
diff --git a/modules/flag_follower/tests/src/Functional/FlagFollowerUITest.php b/modules/flag_follower/tests/src/Functional/FlagFollowerUITest.php
index 7197d80..83e11fa 100644
--- a/modules/flag_follower/tests/src/Functional/FlagFollowerUITest.php
+++ b/modules/flag_follower/tests/src/Functional/FlagFollowerUITest.php
@@ -80,7 +80,7 @@ class FlagFollowerUITest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
@@ -169,21 +169,48 @@ class FlagFollowerUITest extends BrowserTestBase {
   public function doFollowerView() {
     $this->drupalLogin($this->userA);
     $this->drupalGet('flag-followers');
-    $this->assertNoText($this->userB->getAccountName());
-    $this->assertText($this->userC->getAccountName());
-    $this->assertText('2', 'A sees C has two followers.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->userB->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->userC->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('2');
 
     $this->drupalLogin($this->userB);
     $this->drupalGet('flag-followers');
-    $this->assertText($this->userA->getAccountName());
-    $this->assertText($this->userC->getAccountName());
-    $this->assertText('2', 'B sees C has two followers.');
-    $this->assertText('1', 'B sees A has one follower.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->userA->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->userC->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('2');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('1');
 
     $this->drupalLogin($this->userC);
     $this->drupalGet('flag-followers');
-    $this->assertNoText($this->userA->getAccountName());
-    $this->assertNoText($this->userB->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->userA->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->userB->getAccountName());
   }
 
   /**
@@ -192,18 +219,36 @@ class FlagFollowerUITest extends BrowserTestBase {
   public function doContentView() {
     $this->drupalLogin($this->userA);
     $this->drupalGet('flag-followers/content');
-    $this->assertText($this->nodeC->label());
-    $this->assertNoText($this->nodeB->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->nodeC->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->nodeB->label());
 
     $this->drupalLogin($this->userB);
     $this->drupalGet('flag-followers/content');
-    $this->assertText($this->nodeA->label());
-    $this->assertText($this->nodeC->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->nodeA->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->nodeC->label());
 
     $this->drupalLogin($this->userC);
     $this->drupalGet('flag-followers/content');
-    $this->assertNoText($this->nodeA->label());
-    $this->assertNoText($this->nodeB->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->nodeA->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->nodeB->label());
   }
 
 }
diff --git a/src/Event/FlagEventBase.php b/src/Event/FlagEventBase.php
index ca2bda6..a9df22c 100644
--- a/src/Event/FlagEventBase.php
+++ b/src/Event/FlagEventBase.php
@@ -9,7 +9,7 @@ use Symfony\Component\EventDispatcher\Event;
  * Base Event from which other flag event are defined.
  */
 
-abstract class FlagEventBase extends Event {
+abstract class FlagEventBase extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The Flag in question.
diff --git a/src/Event/FlaggingEvent.php b/src/Event/FlaggingEvent.php
index 5e437a3..193e3a7 100644
--- a/src/Event/FlaggingEvent.php
+++ b/src/Event/FlaggingEvent.php
@@ -8,7 +8,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Event for when a flagging is created.
  */
-class FlaggingEvent extends Event {
+class FlaggingEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The flagging in question.
diff --git a/src/Event/UnflaggingEvent.php b/src/Event/UnflaggingEvent.php
index 8ad086f..a30305b 100644
--- a/src/Event/UnflaggingEvent.php
+++ b/src/Event/UnflaggingEvent.php
@@ -7,7 +7,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Event for when a flagging is deleted.
  */
-class UnflaggingEvent extends Event {
+class UnflaggingEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * An array of flaggings.
diff --git a/tests/src/Functional/AdminUITest.php b/tests/src/Functional/AdminUITest.php
index 6e20240..43c06d8 100644
--- a/tests/src/Functional/AdminUITest.php
+++ b/tests/src/Functional/AdminUITest.php
@@ -69,7 +69,7 @@ class AdminUITest extends FlagTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->entityTypeManager = $this->container->get('entity_type.manager');
@@ -106,9 +106,18 @@ class AdminUITest extends FlagTestBase {
     $this->drupalGet('admin/structure/flags/add');
     $this->submitForm([], 'Continue');
     // Check for fieldset titles.
-    $this->assertText(t('Messages'));
-    $this->assertText(t('Flag access'));
-    $this->assertText(t('Display options'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Messages'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Flag access'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Display options'));
 
     $edit = [
       'label' => $this->label,
@@ -119,7 +128,10 @@ class AdminUITest extends FlagTestBase {
     ];
     $this->submitForm($edit, 'Create Flag');
 
-    $this->assertText(t('Flag @this_label has been added.', ['@this_label' => $this->label]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Flag @this_label has been added.', ['@this_label' => $this->label]));
 
     $this->flag = $this->flagService->getFlagById($this->flagId);
 
@@ -142,17 +154,26 @@ class AdminUITest extends FlagTestBase {
    */
   public function doFlagDisable() {
     $this->drupalGet('admin/structure/flags');
-    $this->assertText(t('Enabled'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Enabled'));
 
     $this->drupalGet('admin/structure/flags/manage/' . $this->flagId . '/disable');
     $this->submitForm([], 'Disable');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet('admin/structure/flags');
-    $this->assertText(t('Disabled'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Disabled'));
 
     $this->drupalGet('node/' . $this->nodeId);
-    $this->assertNoText($this->flagShortText);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->flagShortText);
   }
 
   /**
@@ -160,17 +181,26 @@ class AdminUITest extends FlagTestBase {
    */
   public function doFlagEnable() {
     $this->drupalGet('admin/structure/flags');
-    $this->assertText(t('Disabled'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Disabled'));
 
     $this->drupalGet('admin/structure/flags/manage/' . $this->flagId . '/enable');
     $this->submitForm([], 'Enable');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet('admin/structure/flags');
-    $this->assertText(t('Enabled'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Enabled'));
 
     $this->drupalGet('node/' . $this->nodeId);
-    $this->assertText($this->flagShortText);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->flagShortText);
   }
 
   /**
@@ -186,12 +216,15 @@ class AdminUITest extends FlagTestBase {
       ->condition('entity_id', $this->node->id());
     $ids_before = $query_before->execute();
 
-    $this->assertEqual(count($ids_before), 1, "The flag has one flagging.");
+    $this->assertEquals(count($ids_before), 1, "The flag has one flagging.");
 
     // Go to the reset form for the flag.
     $this->drupalGet('admin/structure/flags/manage/' . $this->flag->id() . '/reset');
 
-    $this->assertText($this->t('Are you sure you want to reset the Flag'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to reset the Flag'));
 
     $this->submitForm([], 'Reset');
 
@@ -201,7 +234,7 @@ class AdminUITest extends FlagTestBase {
       ->condition('entity_id', $this->node->id());
     $ids_after = $query_after->execute();
 
-    $this->assertEqual(count($ids_after), 0, "The flag has no flaggings after being reset.");
+    $this->assertEquals(count($ids_after), 0, "The flag has no flaggings after being reset.");
   }
 
   /**
@@ -235,7 +268,7 @@ class AdminUITest extends FlagTestBase {
 
     // Check that the weights for each flag are saved in the database correctly.
     foreach ($all_flags as $id => $flag) {
-      $this->assertEqual($all_flags[$id]->get('weight'), $flag_weights_to_set[$id], 'The flag weight was changed.');
+      $this->assertEquals($all_flags[$id]->get('weight'), $flag_weights_to_set[$id], 'The flag weight was changed.');
     }
   }
 
@@ -245,11 +278,14 @@ class AdminUITest extends FlagTestBase {
   public function doFlagDelete() {
     // Flag node.
     $this->drupalGet('node/' . $this->nodeId);
-    $this->assertLink($this->flagShortText);
+    $this->assertSession()->linkExists($this->flagShortText);
     // Go to the delete form for the flag.
     $this->drupalGet('admin/structure/flags/manage/' . $this->flag->id() . '/delete');
 
-    $this->assertText($this->t('Are you sure you want to delete the flag @this_label?', ['@this_label' => $this->label]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to delete the flag @this_label?', ['@this_label' => $this->label]));
 
     $this->submitForm([], 'Delete');
 
@@ -258,8 +294,11 @@ class AdminUITest extends FlagTestBase {
 
     $this->assertNull($result, 'The flag was deleted.');
     $this->drupalGet('node/' . $this->nodeId);
-    $this->assertText($this->node->label());
-    $this->assertNoLink($this->flagShortText);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->node->label());
+    $this->assertSession()->linkNotExists($this->flagShortText);
   }
 
 }
diff --git a/tests/src/Functional/AjaxLinkNoJsTest.php b/tests/src/Functional/AjaxLinkNoJsTest.php
index 9ff224d..d34709a 100644
--- a/tests/src/Functional/AjaxLinkNoJsTest.php
+++ b/tests/src/Functional/AjaxLinkNoJsTest.php
@@ -67,7 +67,7 @@ class AjaxLinkNoJsTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // A article to test with.
diff --git a/tests/src/Functional/AnonymousFlagTest.php b/tests/src/Functional/AnonymousFlagTest.php
index 0e10e8a..298ec74 100644
--- a/tests/src/Functional/AnonymousFlagTest.php
+++ b/tests/src/Functional/AnonymousFlagTest.php
@@ -39,7 +39,7 @@ class AnonymousFlagTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     NodeType::create(['type' => 'page', 'name' => 'page'])->save();
diff --git a/tests/src/Functional/FlagPermissionsTest.php b/tests/src/Functional/FlagPermissionsTest.php
index 7ce61f3..a41a426 100644
--- a/tests/src/Functional/FlagPermissionsTest.php
+++ b/tests/src/Functional/FlagPermissionsTest.php
@@ -66,7 +66,7 @@ class FlagPermissionsTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create content type.
diff --git a/tests/src/Functional/FlagTestBase.php b/tests/src/Functional/FlagTestBase.php
index 7e8c534..26c7378 100644
--- a/tests/src/Functional/FlagTestBase.php
+++ b/tests/src/Functional/FlagTestBase.php
@@ -46,7 +46,7 @@ abstract class FlagTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Get the Flag Service.
diff --git a/tests/src/Functional/LinkHtmlTest.php b/tests/src/Functional/LinkHtmlTest.php
index bcd888e..c3fbf32 100644
--- a/tests/src/Functional/LinkHtmlTest.php
+++ b/tests/src/Functional/LinkHtmlTest.php
@@ -67,7 +67,7 @@ class LinkHtmlTest extends FlagTestBase {
     // Click the flag link.
     $this->drupalGet('node/' . $node_id);
     // Find the marked-up flag short text in the raw HTML.
-    $this->assertRaw(Xss::filterAdmin($this->flag->getShortText('flag')));
+    $this->assertSession()->responseContains(Xss::filterAdmin($this->flag->getShortText('flag')));
     // Xss::filter() is used to strip all HTML tags from the short text
     // because clickLink() looks for text as it appears in the brower, and that
     // does not include the unescaped HTML tags. Note that the stripped tags
@@ -78,7 +78,7 @@ class LinkHtmlTest extends FlagTestBase {
 
     // Check that the node is flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertRaw(Xss::filterAdmin($this->flag->getShortText('unflag')));
+    $this->assertSession()->responseContains(Xss::filterAdmin($this->flag->getShortText('unflag')));
 
     // Unflag the node.
     $this->drupalGet('node/' . $node_id);
@@ -86,7 +86,7 @@ class LinkHtmlTest extends FlagTestBase {
 
     // Check that the node is no longer flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertRaw(Xss::filterAdmin($this->flag->getShortText('flag')));
+    $this->assertSession()->responseContains(Xss::filterAdmin($this->flag->getShortText('flag')));
   }
 
 }
diff --git a/tests/src/Functional/LinkOutputLocationTest.php b/tests/src/Functional/LinkOutputLocationTest.php
index 704a062..be00d51 100644
--- a/tests/src/Functional/LinkOutputLocationTest.php
+++ b/tests/src/Functional/LinkOutputLocationTest.php
@@ -44,7 +44,7 @@ class LinkOutputLocationTest extends FlagTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a flag.
@@ -119,7 +119,10 @@ class LinkOutputLocationTest extends FlagTestBase {
     $this->drupalGet('admin/structure/types/manage/article/display/teaser');
     $this->submitForm($edit, 'Save');
     // Check the form was saved successfully.
-    $this->assertText('Your settings have been saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your settings have been saved.');
 
     // Check the full node still shows the flag link as a field.
     $this->drupalGet('node/' . $this->node->id());
@@ -161,7 +164,9 @@ class LinkOutputLocationTest extends FlagTestBase {
     // TODO: check no entity field link.
 
     $this->drupalGet('node/' . $this->node->id() . '/edit');
-    $this->assertNoField('flag[' . $this->flag->id() . ']');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldNotExists('flag[' . $this->flag->id() . ']');
     $this->assertNoContextualLinkPlaceholder($contextual_links_id);
   }
 
@@ -211,7 +216,7 @@ class LinkOutputLocationTest extends FlagTestBase {
     $xpath = $this->xpath("//*[contains(@class, 'node__content')]//div[contains(@class, :id)]", [
       ':id' => 'flag-' . $flag->id() . '-' . $entity->id(),
     ]);
-    $this->assert(count($xpath) == ($exists ? 1 : 0), $message);
+    $this->assertTrue(count($xpath) == ($exists ? 1 : 0), $message);
   }
 
   /**
diff --git a/tests/src/Functional/LinkOwnershipAccessTest.php b/tests/src/Functional/LinkOwnershipAccessTest.php
index fd826b6..d5ad895 100644
--- a/tests/src/Functional/LinkOwnershipAccessTest.php
+++ b/tests/src/Functional/LinkOwnershipAccessTest.php
@@ -19,7 +19,7 @@ class LinkOwnershipAccessTest extends FlagTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->entityTypeManager = $this->container->get('entity_type.manager');
@@ -51,14 +51,14 @@ class LinkOwnershipAccessTest extends FlagTestBase {
     // Flag the node with user 1.
     $this->drupalGet($this->node->toUrl());
     $this->clickLink($flag->getShortText('flag'));
-    $this->assertResponse(200);
-    $this->assertLink($flag->getShortText('unflag'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->linkExists($flag->getShortText('unflag'));
 
     // Switch to user 2. They should see the link to flag.
     $user_2 = $this->drupalCreateUser();
     $this->drupalLogin($user_2);
     $this->drupalGet($this->node->toUrl());
-    $this->assertLink($flag->getShortText('flag'), 0, "A flag link is found on the page for user 2.");
+    $this->assertSession()->linkExists($flag->getShortText('flag'), 0, "A flag link is found on the page for user 2.");
 
   }
 
@@ -77,14 +77,14 @@ class LinkOwnershipAccessTest extends FlagTestBase {
     // Flag the node with user 1.
     $this->drupalGet($this->node->toUrl());
     $this->clickLink($flag->getShortText('flag'));
-    $this->assertResponse(200);
-    $this->assertLink($flag->getShortText('unflag'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->linkExists($flag->getShortText('unflag'));
 
     // Switch to user 2. They should see the unflag link too.
     $user_2 = $this->drupalCreateUser();
     $this->drupalLogin($user_2);
     $this->drupalGet($this->node->toUrl());
-    $this->assertLink($flag->getShortText('unflag'), 0, "The unflag link is found on the page for user 2.");
+    $this->assertSession()->linkExists($flag->getShortText('unflag'), 0, "The unflag link is found on the page for user 2.");
   }
 
 }
diff --git a/tests/src/Functional/LinkTypeAjaxTest.php b/tests/src/Functional/LinkTypeAjaxTest.php
index 920bac2..96c6c70 100644
--- a/tests/src/Functional/LinkTypeAjaxTest.php
+++ b/tests/src/Functional/LinkTypeAjaxTest.php
@@ -31,7 +31,7 @@ class LinkTypeAjaxTest extends FlagTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a node to flag.
@@ -61,18 +61,18 @@ class LinkTypeAjaxTest extends FlagTestBase {
     $this->drupalGet($node_url);
 
     // Confirm the flag link exists.
-    $this->assertLink($this->flag->getShortText('flag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('flag'));
 
     // Click the flag link. This ensures that the non-JS fallback works we are
     // redirected to back to the page and the node is flagged.
     $this->clickLink($this->flag->getShortText('flag'));
-    $this->assertUrl($node_url);
-    $this->assertLink($this->flag->getShortText('unflag'));
+    $this->assertSession()->addressEquals($node_url);
+    $this->assertSession()->linkExists($this->flag->getShortText('unflag'));
 
     // Click the unflag link, repeat the check.
     $this->clickLink($this->flag->getShortText('unflag'));
-    $this->assertUrl($node_url);
-    $this->assertLink($this->flag->getShortText('flag'));
+    $this->assertSession()->addressEquals($node_url);
+    $this->assertSession()->linkExists($this->flag->getShortText('flag'));
   }
 
 }
diff --git a/tests/src/Functional/LinkTypeConfirmFormTest.php b/tests/src/Functional/LinkTypeConfirmFormTest.php
index b59ee2b..0ca567d 100644
--- a/tests/src/Functional/LinkTypeConfirmFormTest.php
+++ b/tests/src/Functional/LinkTypeConfirmFormTest.php
@@ -84,7 +84,7 @@ class LinkTypeConfirmFormTest extends FlagTestBase {
 
     // Check that the node is flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertLink($this->flag->getShortText('unflag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('unflag'));
 
     // Check the flag count was incremented.
     $flag_count_flagged = \Drupal::database()->query('SELECT count FROM {flag_counts}
@@ -93,7 +93,7 @@ class LinkTypeConfirmFormTest extends FlagTestBase {
       ':entity_type' => 'node',
       ':entity_id' => $node_id,
     ])->fetchField();
-    $this->assertEqual($flag_count_flagged, $flag_count_pre + 1, "The flag count was incremented.");
+    $this->assertEquals($flag_count_flagged, $flag_count_pre + 1, "The flag count was incremented.");
 
     // Unflag the node.
     $this->clickLink($this->flag->getShortText('unflag'));
@@ -106,7 +106,7 @@ class LinkTypeConfirmFormTest extends FlagTestBase {
 
     // Check that the node is no longer flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertLink($this->flag->getShortText('flag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('flag'));
 
     // Check the flag count was decremented.
     $flag_count_unflagged = \Drupal::database()->query('SELECT count FROM {flag_counts}
@@ -115,7 +115,7 @@ class LinkTypeConfirmFormTest extends FlagTestBase {
       ':entity_type' => 'node',
       ':entity_id' => $node_id,
     ])->fetchField();
-    $this->assertEqual($flag_count_unflagged, $flag_count_flagged - 1, "The flag count was decremented.");
+    $this->assertEquals($flag_count_unflagged, $flag_count_flagged - 1, "The flag count was decremented.");
   }
 
 }
diff --git a/tests/src/Functional/LinkTypeFieldEntryTest.php b/tests/src/Functional/LinkTypeFieldEntryTest.php
index bc2d885..f2977fc 100644
--- a/tests/src/Functional/LinkTypeFieldEntryTest.php
+++ b/tests/src/Functional/LinkTypeFieldEntryTest.php
@@ -37,7 +37,7 @@ class LinkTypeFieldEntryTest extends FlagTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // The breadcrumb block is needed for FieldUiTestTrait's tests.
@@ -73,9 +73,18 @@ class LinkTypeFieldEntryTest extends FlagTestBase {
     $this->drupalPostAjaxForm(NULL, $edit, 'link_type');
 
     // Check confirm form field entry.
-    $this->assertText(t('Flag confirmation message'));
-    $this->assertText(t('Enter flagging details message'));
-    $this->assertText(t('Unflag confirmation message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Flag confirmation message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Enter flagging details message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Unflag confirmation message'));
   }
 
   /**
@@ -105,7 +114,10 @@ class LinkTypeFieldEntryTest extends FlagTestBase {
 
     // Check the Field UI tabs appear on the flag edit page.
     $this->drupalGet('admin/structure/flags/manage/' . $flag_id);
-    $this->assertText(t("Manage fields"), "The Field UI tabs appear on the flag edit form page.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t("Manage fields"));
 
     $this->fieldUIAddNewField('admin/structure/flags/manage/' . $flag_id, $this->flagFieldId, $this->flagFieldLabel, 'text');
   }
@@ -130,7 +142,10 @@ class LinkTypeFieldEntryTest extends FlagTestBase {
     $this->clickLink($this->flag->getShortText('flag'));
 
     // Check if we have the confirm form message displayed.
-    $this->assertText($this->flagConfirmMessage);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->flagConfirmMessage);
 
     // Enter the field value and submit it.
     $this->flagFieldValue = $this->randomString();
@@ -140,7 +155,7 @@ class LinkTypeFieldEntryTest extends FlagTestBase {
     $this->submitForm($edit, $this->createButtonText);
 
     // Check that the node is flagged.
-    $this->assertLink($this->flag->getShortText('unflag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('unflag'));
   }
 
   /**
@@ -155,17 +170,20 @@ class LinkTypeFieldEntryTest extends FlagTestBase {
     $this->clickLink($this->flag->getShortText('unflag'));
 
     $node_url = Url::fromRoute('entity.node.canonical', ['node' => $this->nodeId]);
-    $this->assertUrl('flag/details/edit/' . $flag_id . '/' . $this->nodeId, [
+    $this->assertSession()->addressEquals('flag/details/edit/' . $flag_id . '/' . $this->nodeId, [
       'query' => [
         'destination' => $node_url->toString(),
       ],
     ]);
 
     // See if the details message is displayed.
-    $this->assertText($this->flagDetailsMessage);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->flagDetailsMessage);
 
     // See if the field value was preserved.
-    $this->assertFieldByName('field_' . $this->flagFieldId . '[0][value]', $this->flagFieldValue);
+    $this->assertSession()->fieldValueEquals('field_' . $this->flagFieldId . '[0][value]', $this->flagFieldValue);
 
     // Update the field value.
     $this->flagFieldValue = $this->randomString();
@@ -178,7 +196,7 @@ class LinkTypeFieldEntryTest extends FlagTestBase {
     $this->drupalGet('flag/details/edit/' . $flag_id . '/' . $this->nodeId);
 
     // See if the field value was preserved.
-    $this->assertFieldByName('field_' . $this->flagFieldId . '[0][value]', $this->flagFieldValue);
+    $this->assertSession()->fieldValueEquals('field_' . $this->flagFieldId . '[0][value]', $this->flagFieldValue);
   }
 
   /**
@@ -189,16 +207,16 @@ class LinkTypeFieldEntryTest extends FlagTestBase {
 
     // Test a good flag ID param, but a bad flaggable ID param.
     $this->drupalGet('flag/details/edit/' . $flag_id . '/-9999');
-    $this->assertResponse('404', 'Editing an invalid flagging path: good flag, bad entity.');
+    $this->assertSession()->statusCodeEquals('404', 'Editing an invalid flagging path: good flag, bad entity.');
 
     // Test a bad flag ID param, but a good flaggable ID param.
     $this->drupalGet('flag/details/edit/jibberish/' . $this->nodeId);
-    $this->assertResponse('404', 'Editing an invalid flagging path: bad flag, good entity');
+    $this->assertSession()->statusCodeEquals('404', 'Editing an invalid flagging path: bad flag, good entity');
 
     // Test editing a unflagged entity.
     $unlinked_node = $this->drupalCreateNode(['type' => $this->nodeType]);
     $this->drupalGet('flag/details/edit/' . $flag_id . '/' . $unlinked_node->id());
-    $this->assertResponse('404', 'Editing an invalid flagging path: good flag, good entity, but not flagged');
+    $this->assertSession()->statusCodeEquals('404', 'Editing an invalid flagging path: good flag, good entity, but not flagged');
   }
 
   /**
@@ -216,15 +234,18 @@ class LinkTypeFieldEntryTest extends FlagTestBase {
     $this->clickLink($this->deleteButtonText);
 
     // Check if we have the confirm form message displayed.
-    $this->assertText($this->unflagConfirmMessage);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->unflagConfirmMessage);
 
     // Submit the confirm form.
     $this->submitForm([], $this->deleteButtonText);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Check that the node is no longer flagged.
     $this->drupalGet('node/' . $this->nodeId);
-    $this->assertLink($this->flag->getShortText('flag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('flag'));
   }
 
 }
diff --git a/tests/src/Functional/LinkTypeReloadTest.php b/tests/src/Functional/LinkTypeReloadTest.php
index 994ceee..05e6128 100644
--- a/tests/src/Functional/LinkTypeReloadTest.php
+++ b/tests/src/Functional/LinkTypeReloadTest.php
@@ -66,7 +66,7 @@ class LinkTypeReloadTest extends FlagTestBase {
     // We (probably) can't obtain the URL from the route rather than hardcoding
     // it, as that would probably give us the token too.
     $this->drupalGet("flag/flag/$flag_id/$node_id");
-    $this->assertResponse(403, "Access to the flag reload link is denied when no token is supplied.");
+    $this->assertSession()->statusCodeEquals(403, "Access to the flag reload link is denied when no token is supplied.");
 
     // Click the flag link.
     $this->drupalGet('node/' . $node_id);
@@ -74,7 +74,7 @@ class LinkTypeReloadTest extends FlagTestBase {
 
     // Check that the node is flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertLink($this->flag->getShortText('unflag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('unflag'));
 
     // Check the flag count was incremented.
     $flag_count_flagged = \Drupal::database()->query('SELECT count FROM {flag_counts}
@@ -83,11 +83,11 @@ class LinkTypeReloadTest extends FlagTestBase {
       ':entity_type' => 'node',
       ':entity_id' => $node_id,
     ])->fetchField();
-    $this->assertEqual($flag_count_flagged, $flag_count_pre + 1, "The flag count was incremented.");
+    $this->assertEquals($flag_count_flagged, $flag_count_pre + 1, "The flag count was incremented.");
 
     // Attempt to load the reload link URL without the token.
     $this->drupalGet("flag/unflag/$flag_id/$node_id");
-    $this->assertResponse(403, "Access to the unflag reload link is denied when no token is supplied.");
+    $this->assertSession()->statusCodeEquals(403, "Access to the unflag reload link is denied when no token is supplied.");
 
     // Unflag the node.
     $this->drupalGet('node/' . $node_id);
@@ -95,7 +95,7 @@ class LinkTypeReloadTest extends FlagTestBase {
 
     // Check that the node is no longer flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertLink($this->flag->getShortText('flag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('flag'));
 
     // Check the flag count was decremented.
     $flag_count_unflagged = \Drupal::database()->query('SELECT count FROM {flag_counts}
@@ -104,7 +104,7 @@ class LinkTypeReloadTest extends FlagTestBase {
       ':entity_type' => 'node',
       ':entity_id' => $node_id,
     ])->fetchField();
-    $this->assertEqual($flag_count_unflagged, $flag_count_flagged - 1, "The flag count was decremented.");
+    $this->assertEquals($flag_count_unflagged, $flag_count_flagged - 1, "The flag count was decremented.");
   }
 
 }
diff --git a/tests/src/Functional/OutputLocationEntityFormAccessTest.php b/tests/src/Functional/OutputLocationEntityFormAccessTest.php
index 9fb86c4..2c43f57 100644
--- a/tests/src/Functional/OutputLocationEntityFormAccessTest.php
+++ b/tests/src/Functional/OutputLocationEntityFormAccessTest.php
@@ -54,7 +54,7 @@ class OutputLocationEntityFormAccessTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     NodeType::create(['type' => 'page', 'name' => 'page'])->save();
diff --git a/tests/src/Functional/ShowOnEntityFormTest.php b/tests/src/Functional/ShowOnEntityFormTest.php
index c3edf04..35dd476 100644
--- a/tests/src/Functional/ShowOnEntityFormTest.php
+++ b/tests/src/Functional/ShowOnEntityFormTest.php
@@ -55,7 +55,7 @@ class ShowOnEntityFormTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create content type.
@@ -121,7 +121,7 @@ class ShowOnEntityFormTest extends BrowserTestBase {
 
     // Go back to the node edit page and check if the flag checkbox is updated.
     $this->drupalGet($node_edit_path);
-    $this->assertNoFieldChecked($flag_checkbox_id, 'The flag checkbox is unchecked on the entity form.');
+    $this->assertSession()->checkboxNotChecked($flag_checkbox_id, 'The flag checkbox is unchecked on the entity form.');
 
     // Verify link is on the add form.
     $this->drupalGet('node/add/' . $this->nodeType);
@@ -149,7 +149,9 @@ class ShowOnEntityFormTest extends BrowserTestBase {
 
     // Form element should not appear on the delete form.
     $this->drupalGet($node->toUrl('delete-form'));
-    $this->assertNoField($flag_checkbox_id);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldNotExists($flag_checkbox_id);
   }
 
 }
diff --git a/tests/src/Functional/UserFlagTypeTest.php b/tests/src/Functional/UserFlagTypeTest.php
index 27c69ae..24260b9 100644
--- a/tests/src/Functional/UserFlagTypeTest.php
+++ b/tests/src/Functional/UserFlagTypeTest.php
@@ -28,9 +28,15 @@ class UserFlagTypeTest extends FlagTestBase {
       'flag_entity_type' => 'entity:user',
     ], $this->t('Continue'));
 
-    $this->assertText($this->t('Permissions for users to flag themselves.'));
-
-    $this->assertText($this->t('Display link on user profile page'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Permissions for users to flag themselves.'));
+
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Display link on user profile page'));
   }
 
   /**
@@ -65,11 +71,11 @@ class UserFlagTypeTest extends FlagTestBase {
 
     // Check the state of the extra permssions checkbox.
     $this->drupalGet('admin/structure/flags/manage/' . $flag->id());
-    $this->assertFieldChecked('edit-extra-permissions-owner');
+    $this->assertSession()->checkboxChecked('edit-extra-permissions-owner');
 
     // Assert flag appears on the profile page.
     $this->drupalGet('user/' . $user->id());
-    $this->assertLink($flag->getShortText('flag'));
+    $this->assertSession()->linkExists($flag->getShortText('flag'));
 
     // Uncheck extra permssions.
     $edit = [
@@ -80,11 +86,11 @@ class UserFlagTypeTest extends FlagTestBase {
 
     // Confirm extra permissions is unchecked.
     $this->drupalGet('admin/structure/flags/manage/' . $flag->id());
-    $this->assertNoFieldChecked('edit-extra-permissions-owner');
+    $this->assertSession()->checkboxNotChecked('edit-extra-permissions-owner');
 
     // Assert the flag disapears from the profile page.
     $this->drupalGet('user/' . $user->id());
-    $this->assertNoLink($flag->getShortText('flag'));
+    $this->assertSession()->linkNotExists($flag->getShortText('flag'));
   }
 
 }
diff --git a/tests/src/FunctionalJavascript/AjaxLinkTest.php b/tests/src/FunctionalJavascript/AjaxLinkTest.php
index c72ec3a..c4e4472 100644
--- a/tests/src/FunctionalJavascript/AjaxLinkTest.php
+++ b/tests/src/FunctionalJavascript/AjaxLinkTest.php
@@ -74,7 +74,7 @@ class AjaxLinkTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // A article to test with.
diff --git a/tests/src/FunctionalJavascript/FlagContextualLinksTest.php b/tests/src/FunctionalJavascript/FlagContextualLinksTest.php
index f3214e3..abb4fa2 100755
--- a/tests/src/FunctionalJavascript/FlagContextualLinksTest.php
+++ b/tests/src/FunctionalJavascript/FlagContextualLinksTest.php
@@ -88,7 +88,7 @@ class FlagContextualLinksTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Get the Flag Service.
diff --git a/tests/src/FunctionalJavascript/FlagCountExtensionTest.php b/tests/src/FunctionalJavascript/FlagCountExtensionTest.php
index 7092c71..662e3c4 100644
--- a/tests/src/FunctionalJavascript/FlagCountExtensionTest.php
+++ b/tests/src/FunctionalJavascript/FlagCountExtensionTest.php
@@ -33,7 +33,7 @@ class FlagCountExtensionTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
     // Set the linkTypePlugin of the flag to count_link for running the tests.
diff --git a/tests/src/FunctionalJavascript/FlagJsTestBase.php b/tests/src/FunctionalJavascript/FlagJsTestBase.php
index 5eab0cf..12e5c11 100644
--- a/tests/src/FunctionalJavascript/FlagJsTestBase.php
+++ b/tests/src/FunctionalJavascript/FlagJsTestBase.php
@@ -45,7 +45,7 @@ abstract class FlagJsTestBase extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Get the Flag Service.
diff --git a/tests/src/FunctionalJavascript/LinkTypeAjaxTest.php b/tests/src/FunctionalJavascript/LinkTypeAjaxTest.php
index 8b96ecf..c782fce 100644
--- a/tests/src/FunctionalJavascript/LinkTypeAjaxTest.php
+++ b/tests/src/FunctionalJavascript/LinkTypeAjaxTest.php
@@ -62,7 +62,7 @@ class LinkTypeAjaxTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Get the Flag Service.
diff --git a/tests/src/FunctionalJavascript/ModalFormTest.php b/tests/src/FunctionalJavascript/ModalFormTest.php
index 45dd782..d576a1f 100644
--- a/tests/src/FunctionalJavascript/ModalFormTest.php
+++ b/tests/src/FunctionalJavascript/ModalFormTest.php
@@ -63,7 +63,7 @@ class ModalFormTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // A test flag.
diff --git a/tests/src/Kernel/AccessTest.php b/tests/src/Kernel/AccessTest.php
index 3ea79fe..f4c9c04 100644
--- a/tests/src/Kernel/AccessTest.php
+++ b/tests/src/Kernel/AccessTest.php
@@ -20,7 +20,7 @@ class AccessTest extends FlagKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('user', 'users_data', 'flag');
diff --git a/tests/src/Kernel/FlagActionTest.php b/tests/src/Kernel/FlagActionTest.php
index 173ecc3..c5d5762 100644
--- a/tests/src/Kernel/FlagActionTest.php
+++ b/tests/src/Kernel/FlagActionTest.php
@@ -42,7 +42,7 @@ class FlagActionTest extends FlagKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('entity_test');
diff --git a/tests/src/Kernel/FlagCountsTest.php b/tests/src/Kernel/FlagCountsTest.php
index d24c49a..23401dc 100644
--- a/tests/src/Kernel/FlagCountsTest.php
+++ b/tests/src/Kernel/FlagCountsTest.php
@@ -74,7 +74,7 @@ class FlagCountsTest extends FlagKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('user', 'users_data');
@@ -166,23 +166,23 @@ class FlagCountsTest extends FlagKernelTestBase {
     // Get the count of flaggings for the flag. The other flag also has
     // flaggings, which should not be included in the count.
     $flag_get_entity_flag_counts = $this->flagCountService->getFlagFlaggingCount($this->flag);
-    $this->assertEqual($flag_get_entity_flag_counts, 3, "getFlagFlaggingCount() returns the expected count.");
+    $this->assertEquals($flag_get_entity_flag_counts, 3, "getFlagFlaggingCount() returns the expected count.");
 
     // Get the counts of all flaggings on the entity. The other node is also
     // flagged, but should not be included in the count.
     $flag_get_counts = $this->flagCountService->getEntityFlagCounts($this->node);
-    $this->assertEqual($flag_get_counts[$this->flag->id()], 2, "getEntityFlagCounts() returns the expected count.");
-    $this->assertEqual($flag_get_counts[$this->otherFlag->id()], 1, "getEntityFlagCounts() returns the expected count.");
+    $this->assertEquals($flag_get_counts[$this->flag->id()], 2, "getEntityFlagCounts() returns the expected count.");
+    $this->assertEquals($flag_get_counts[$this->otherFlag->id()], 1, "getEntityFlagCounts() returns the expected count.");
 
     // Get the number of entities for the flag. Two users have flagged one node
     // with the flag, but that should count only once.
     $flag_get_flag_counts = $this->flagCountService->getFlagEntityCount($this->flag);
-    $this->assertEqual($flag_get_flag_counts, 2, "getFlagEntityCount() returns the expected count.");
+    $this->assertEquals($flag_get_flag_counts, 2, "getFlagEntityCount() returns the expected count.");
 
     // Unflag everything with the main flag.
     $this->flagService->unflagAllByFlag($this->flag);
     $flag_get_flag_counts = $this->flagCountService->getFlagEntityCount($this->flag);
-    $this->assertEqual($flag_get_flag_counts, 0, "getFlagEntityCount() on reset flag returns the expected count.");
+    $this->assertEquals($flag_get_flag_counts, 0, "getFlagEntityCount() on reset flag returns the expected count.");
   }
 
   /**
@@ -203,9 +203,9 @@ class FlagCountsTest extends FlagKernelTestBase {
     // For non-global flags anonymous users can uniquely identified by
     // session_id.
     $anon1_count = $this->flagCountService->getUserFlagFlaggingCount($this->flag, $this->anonymousUser, $anon1_session_id);
-    $this->assertEqual($anon1_count, 1, "getUserFlagFlaggingCount() counts only the first user.");
+    $this->assertEquals($anon1_count, 1, "getUserFlagFlaggingCount() counts only the first user.");
     $anon2_count = $this->flagCountService->getUserFlagFlaggingCount($this->flag, $this->anonymousUser, $anon2_session_id);
-    $this->assertEqual($anon2_count, 1, "getUserFlagFlaggingCount() counts only the second user.");
+    $this->assertEquals($anon2_count, 1, "getUserFlagFlaggingCount() counts only the second user.");
 
     // Switch to a global flag, the accounting rules.
     $this->flag->setGlobal(TRUE);
@@ -214,7 +214,7 @@ class FlagCountsTest extends FlagKernelTestBase {
     // Despite being a global flag, queries about specific anonymous users can
     // still be made.
     $rejected_count = $this->flagCountService->getUserFlagFlaggingCount($this->flag, $this->anonymousUser, $anon1_session_id);
-    $this->assertEqual($rejected_count, 1, "getUserFlagFlaggingCount() ignores the session id.");
+    $this->assertEquals($rejected_count, 1, "getUserFlagFlaggingCount() ignores the session id.");
   }
 
   /**
@@ -241,13 +241,13 @@ class FlagCountsTest extends FlagKernelTestBase {
 
     // Confirm the counts have been incremented.
     $article1_count_before = $this->flagCountService->getEntityFlagCounts($article1);
-    $this->assertEqual($article1_count_before[$this->flag->id()], 1, 'The article1 has been flagged.');
+    $this->assertEquals($article1_count_before[$this->flag->id()], 1, 'The article1 has been flagged.');
     $article2_count_before = $this->flagCountService->getEntityFlagCounts($article2);
-    $this->assertEqual($article2_count_before[$this->flag->id()], 1, 'The article2 has been flagged.');
+    $this->assertEquals($article2_count_before[$this->flag->id()], 1, 'The article2 has been flagged.');
 
     // Confirm the flagging have been created.
     $flaggings_before = $this->getFlagFlaggings($this->flag);
-    $this->assertEqual(count($flaggings_before), 2, 'There are two flaggings associated with the flag');
+    $this->assertEquals(count($flaggings_before), 2, 'There are two flaggings associated with the flag');
 
     // Delete the flag.
     $this->flag->delete();
@@ -288,13 +288,13 @@ class FlagCountsTest extends FlagKernelTestBase {
 
     // Confirm the counts have been incremented.
     $article1_count_before = $this->flagCountService->getEntityFlagCounts($article1);
-    $this->assertEqual($article1_count_before[$this->flag->id()], 1, 'The article1 has been flagged.');
+    $this->assertEquals($article1_count_before[$this->flag->id()], 1, 'The article1 has been flagged.');
     $article2_count_before = $this->flagCountService->getEntityFlagCounts($article2);
-    $this->assertEqual($article2_count_before[$this->flag->id()], 1, 'The article2 has been flagged.');
+    $this->assertEquals($article2_count_before[$this->flag->id()], 1, 'The article2 has been flagged.');
 
     // Confirm the flagging have been created.
     $flaggings_before = $this->getFlagFlaggings($this->flag);
-    $this->assertEqual(count($flaggings_before), 2, 'There are two flaggings associated with the flag');
+    $this->assertEquals(count($flaggings_before), 2, 'There are two flaggings associated with the flag');
 
     // Delete the entities.
     $article1->delete();
@@ -302,7 +302,7 @@ class FlagCountsTest extends FlagKernelTestBase {
 
     // The list of all flaggings MUST now be empty.
     $flaggings_after = $this->getFlagFlaggings($this->flag);
-    $this->assert(empty($flaggings_after), 'The flaggings were removed, when the flag was deleted');
+    $this->assertTrue(empty($flaggings_after), 'The flaggings were removed, when the flag was deleted');
 
     // Confirm the counts have been removed.
     $article1_count_after = $this->flagCountService->getEntityFlagCounts($article1);
@@ -339,10 +339,10 @@ class FlagCountsTest extends FlagKernelTestBase {
     $this->flagService->flag($this->flag, $article, $auth_user);
 
     $user_before_count = $this->flagCountService->getEntityFlagCounts($auth_user);
-    $this->assertEqual($user_before_count[$user_flag->id()], 1, 'The user has been flagged.');
+    $this->assertEquals($user_before_count[$user_flag->id()], 1, 'The user has been flagged.');
 
     $article_count_before = $this->flagCountService->getEntityFlagCounts($article);
-    $this->assertEqual($article_count_before[$this->flag->id()], 1, 'The article has been flagged by the user.');
+    $this->assertEquals($article_count_before[$this->flag->id()], 1, 'The article has been flagged by the user.');
 
     $auth_user->delete();
 
@@ -350,7 +350,7 @@ class FlagCountsTest extends FlagKernelTestBase {
     $this->assertEmpty($flaggings_after, 'The user flaggings were removed when the user was deleted.');
 
     $flaggings_after = $this->getFlagFlaggings($this->flag);
-    $this->assert(empty($flaggings_after), 'The node flaggings were removed when the user was deleted');
+    $this->assertTrue(empty($flaggings_after), 'The node flaggings were removed when the user was deleted');
   }
 
 }
diff --git a/tests/src/Kernel/FlagKernelTestBase.php b/tests/src/Kernel/FlagKernelTestBase.php
index 397b033..b810542 100644
--- a/tests/src/Kernel/FlagKernelTestBase.php
+++ b/tests/src/Kernel/FlagKernelTestBase.php
@@ -40,7 +40,7 @@ abstract class FlagKernelTestBase extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('user');
diff --git a/tests/src/Kernel/FlagServiceTest.php b/tests/src/Kernel/FlagServiceTest.php
index 894ee58..0b191ba 100644
--- a/tests/src/Kernel/FlagServiceTest.php
+++ b/tests/src/Kernel/FlagServiceTest.php
@@ -33,12 +33,13 @@ class FlagServiceTest extends FlagKernelTestBase {
     // Search for flag.
     $user_with_access = $this->createUser(['flag ' . $flag->id()]);
     $result = $this->flagService->getAllFlags('node', 'article');
-    $this->assertIdentical(count($result), 1, 'Found flag type');
+    $this->assertSame(count($result), 1, 'Found flag type');
     $this->assertEquals([$flag->id()], array_keys($result));
   }
 
   /**
    * Test exceptions are thrown when flagging and unflagging.
+   * @doesNotPerformAssertions
    */
   public function testFlagServiceFlagExceptions() {
     $not_article = NodeType::create(['type' => 'not_article']);
@@ -72,7 +73,6 @@ class FlagServiceTest extends FlagKernelTestBase {
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The flag() method throws an exception when the flag does not apply to the entity type of the flaggable entity.");
     }
 
     // Try flagging a node of the wrong bundle.
@@ -87,7 +87,6 @@ class FlagServiceTest extends FlagKernelTestBase {
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The flag() method throws an exception when the flag does not apply to the bundle of the flaggable entity.");
     }
 
     // Flag the node, then try to flag it again.
@@ -104,7 +103,6 @@ class FlagServiceTest extends FlagKernelTestBase {
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The flag() method throws an exception when the flaggable entity is already flagged by the user with the flag.");
     }
 
     try {
@@ -112,7 +110,6 @@ class FlagServiceTest extends FlagKernelTestBase {
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The flag() method throws an exception when a non-global flag is associated with a poorly specified anonymous user.");
     }
 
     // Test unflagging.
@@ -122,7 +119,6 @@ class FlagServiceTest extends FlagKernelTestBase {
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The unflag() method throws an exception when the flag does not apply to the entity type of the flaggable entity.");
     }
 
     // Try unflagging a node of the wrong bundle.
@@ -131,7 +127,6 @@ class FlagServiceTest extends FlagKernelTestBase {
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The unflag() method throws an exception when the flag does not apply to the bundle of the flaggable entity.");
     }
 
     // Create a new node that's not flagged, and try to unflag it.
@@ -146,7 +141,6 @@ class FlagServiceTest extends FlagKernelTestBase {
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The unflag() method throws an exception when the flaggable entity is not flagged by the user with the flag.");
     }
 
     try {
@@ -154,14 +148,12 @@ class FlagServiceTest extends FlagKernelTestBase {
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The unflag() method throws an exception when a non-global flag is associated with a poorly specified anonymous user.");
     }
 
     // Demonstrate a valid combination can be unflagged without throwing an
     // exception.
     try {
       $this->flagService->unflag($flag, $flaggable_node, $account, $session_id);
-      $this->pass('The unflag() method throws no exception when the flaggable entity and user is correct');
     }
     catch (\LogicException $e) {
       $this->fail('The unfag() method threw an exception where processing a valid unflag request.');
diff --git a/tests/src/Kernel/FlaggingStorageTest.php b/tests/src/Kernel/FlaggingStorageTest.php
index ebf25f8..7afaae1 100644
--- a/tests/src/Kernel/FlaggingStorageTest.php
+++ b/tests/src/Kernel/FlaggingStorageTest.php
@@ -39,7 +39,7 @@ class FlaggingStorageTest extends FlagKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->account = $this->createUser();
diff --git a/tests/src/Unit/Ajax/ActionLinkFlashCommandTest.php b/tests/src/Unit/Ajax/ActionLinkFlashCommandTest.php
index dde3215..6617427 100644
--- a/tests/src/Unit/Ajax/ActionLinkFlashCommandTest.php
+++ b/tests/src/Unit/Ajax/ActionLinkFlashCommandTest.php
@@ -21,7 +21,7 @@ class ActionLinkFlashCommandTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->random = $this->getRandomGenerator();
   }
diff --git a/tests/src/Unit/Plugin/Action/FlagActionTest.php b/tests/src/Unit/Plugin/Action/FlagActionTest.php
index 4624454..d493e4f 100644
--- a/tests/src/Unit/Plugin/Action/FlagActionTest.php
+++ b/tests/src/Unit/Plugin/Action/FlagActionTest.php
@@ -20,6 +20,7 @@ use Drupal\user\UserInterface;
  */
 class FlagActionTest extends UnitTestCase {
 
+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * Mock flag.
    *
@@ -30,7 +31,7 @@ class FlagActionTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $flag = $this->prophesize(FlagInterface::class);
@@ -42,6 +43,7 @@ class FlagActionTest extends UnitTestCase {
    * Tests the execute method.
    *
    * @covers ::execute
+   * @doesNotPerformAssertions
    */
   public function testExecute() {
     // Test 'flag' op.
