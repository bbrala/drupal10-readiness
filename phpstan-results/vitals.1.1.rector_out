[parsing] modules/contrib/vitals/src/Controller/VitalsController.php
[refactoring] modules/contrib/vitals/src/Controller/VitalsController.php
[post rectors] modules/contrib/vitals/src/Controller/VitalsController.php
[print] modules/contrib/vitals/src/Controller/VitalsController.php
[parsing] modules/contrib/vitals/src/Form/VitalsAdminForm.php
[refactoring] modules/contrib/vitals/src/Form/VitalsAdminForm.php
[post rectors] modules/contrib/vitals/src/Form/VitalsAdminForm.php
[print] modules/contrib/vitals/src/Form/VitalsAdminForm.php
[parsing] modules/contrib/vitals/src/Vitals.php
[refactoring] modules/contrib/vitals/src/Vitals.php
[post rectors] modules/contrib/vitals/src/Vitals.php
[print] modules/contrib/vitals/src/Vitals.php
[parsing] modules/contrib/vitals/tests/src/Functional/VitalsTest.php
[refactoring] modules/contrib/vitals/tests/src/Functional/VitalsTest.php
[post rectors] modules/contrib/vitals/tests/src/Functional/VitalsTest.php
[print] modules/contrib/vitals/tests/src/Functional/VitalsTest.php
[refactoring] modules/contrib/vitals/tests/src/Functional/VitalsTest.php
[post rectors] modules/contrib/vitals/tests/src/Functional/VitalsTest.php
[print] modules/contrib/vitals/tests/src/Functional/VitalsTest.php
[parsing] modules/contrib/vitals/vitals.install
[refactoring] modules/contrib/vitals/vitals.install
[post rectors] modules/contrib/vitals/vitals.install
[print] modules/contrib/vitals/vitals.install
[parsing] modules/contrib/vitals/vitals.module
[refactoring] modules/contrib/vitals/vitals.module
[post rectors] modules/contrib/vitals/vitals.module
[print] modules/contrib/vitals/vitals.module

1 file with changes
===================

1) modules/contrib/vitals/tests/src/Functional/VitalsTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $user = $this->drupalCreateUser(['access content']);
     $this->drupalLogin($user);
@@ @@
     $this->drupalGet($url);

     // Checking for the keys we know should exist.
-    $this->assertResponse(200);
-    $this->assertText('php_version');
-    $this->assertText('cms_version');
-    $this->assertText('security_updates');
-    $this->assertText('pending_updates');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('php_version');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('cms_version');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('security_updates');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('pending_updates');
   }

   /**
@@ @@
     $config->set('vitals_unauthorized_action', Vitals::VITALS_404)->save();

     $this->drupalGet('vitals/invalid-token');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
   }

   /**
@@ @@
     // Simulate and check several invalid requests.
     for ($i = 0; $i < 11; $i++) {
       $this->drupalGet('vitals/invalid-token');
-      $this->assertResponse(403);
+      $this->assertSession()->statusCodeEquals(403);
     }

     // Simulate a valid request and ensure it is rejected.
@@ @@
     $url = Url::fromRoute('vitals.content', ['token' => $token])->toString();

     $this->drupalGet($url);
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }

   /**
@@ @@
     // Simulate and check several invalid requests.
     for ($i = 0; $i < 11; $i++) {
       $this->drupalGet('vitals/invalid-token');
-      $this->assertResponse(404);
+      $this->assertSession()->statusCodeEquals(404);
     }

     // Simulate a valid request and ensure it is rejected.
@@ @@
     $url = Url::fromRoute('vitals.content', ['token' => $token])->toString();

     $this->drupalGet($url);
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
   }

   /**
@@ @@
     // Simulate and check several invalid requests.
     for ($i = 0; $i < 5; $i++) {
       $this->drupalGet('vitals/invalid-token');
-      $this->assertResponse(404);
+      $this->assertSession()->statusCodeEquals(404);
     }

     // Simulate a valid request and ensure it is rejected.
@@ @@
     $url = Url::fromRoute('vitals.content', ['token' => $token])->toString();

     $this->drupalGet($url);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 1 file has been changed by Rector                                         

