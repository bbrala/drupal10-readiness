[parsing] modules/contrib/splash_redirect/splash_redirect.install
[refactoring] modules/contrib/splash_redirect/splash_redirect.install
[post rectors] modules/contrib/splash_redirect/splash_redirect.install
[print] modules/contrib/splash_redirect/splash_redirect.install
[parsing] modules/contrib/splash_redirect/splash_redirect.module
[refactoring] modules/contrib/splash_redirect/splash_redirect.module
[post rectors] modules/contrib/splash_redirect/splash_redirect.module
[print] modules/contrib/splash_redirect/splash_redirect.module
[parsing] modules/contrib/splash_redirect/src/EventSubscriber/SplashRedirectEventSubscriber.php
[refactoring] modules/contrib/splash_redirect/src/EventSubscriber/SplashRedirectEventSubscriber.php
[post rectors] modules/contrib/splash_redirect/src/EventSubscriber/SplashRedirectEventSubscriber.php
[print] modules/contrib/splash_redirect/src/EventSubscriber/SplashRedirectEventSubscriber.php
[refactoring] modules/contrib/splash_redirect/src/EventSubscriber/SplashRedirectEventSubscriber.php
[post rectors] modules/contrib/splash_redirect/src/EventSubscriber/SplashRedirectEventSubscriber.php
[print] modules/contrib/splash_redirect/src/EventSubscriber/SplashRedirectEventSubscriber.php
[parsing] modules/contrib/splash_redirect/src/Form/SplashRedirectSettingsForm.php
[refactoring] modules/contrib/splash_redirect/src/Form/SplashRedirectSettingsForm.php
[post rectors] modules/contrib/splash_redirect/src/Form/SplashRedirectSettingsForm.php
[print] modules/contrib/splash_redirect/src/Form/SplashRedirectSettingsForm.php
[parsing] modules/contrib/splash_redirect/tests/src/Functional/LoadTest.php
[refactoring] modules/contrib/splash_redirect/tests/src/Functional/LoadTest.php
[post rectors] modules/contrib/splash_redirect/tests/src/Functional/LoadTest.php
[print] modules/contrib/splash_redirect/tests/src/Functional/LoadTest.php
[refactoring] modules/contrib/splash_redirect/tests/src/Functional/LoadTest.php
[post rectors] modules/contrib/splash_redirect/tests/src/Functional/LoadTest.php
[print] modules/contrib/splash_redirect/tests/src/Functional/LoadTest.php

2 files with changes
====================

1) modules/contrib/splash_redirect/tests/src/Functional/LoadTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/splash_redirect/src/EventSubscriber/SplashRedirectEventSubscriber.php:60

    ---------- begin diff ----------
@@ @@
   /**
    * Kernel request event handler.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   Response event.
    */
-  public function onKernelRequest(GetResponseEvent $event) {
+  public function onKernelRequest(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     $config = $this->configFactory->get('splash_redirect.settings');
     $config_enabled = $config->get('splash_redirect.is_enabled');
     $config_source = $config->get('splash_redirect.source');
@@ @@
         // or else anonymous users will not ever be able to reach source page.
         $this->killSwitch->trigger();
         $redir = new TrustedRedirectResponse($destination->setAbsolute()->toString(), '302');
-        $cookie = new Cookie($config_cookie, 'true', strtotime('now + ' . $config_duration . 'days'), '/', '.' . $http_host, FALSE, FALSE);
+        $cookie = \Symfony\Component\HttpFoundation\Cookie::create($config_cookie, 'true', strtotime('now + ' . $config_duration . 'days'), '/', '.' . $http_host, FALSE, FALSE);
         $redir->headers->setCookie($cookie);
         $redir->headers->set('Cache-Control', 'public, max-age=0');
         $redir->addCacheableDependency($destination);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * NewToStaticCallRector
 * AddParamTypeDeclarationRector


 [OK] 2 files have been changed by Rector                                       

