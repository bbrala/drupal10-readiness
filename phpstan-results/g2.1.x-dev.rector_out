[parsing] modules/contrib/g2/g2.admin.inc
[refactoring] modules/contrib/g2/g2.admin.inc
[post rectors] modules/contrib/g2/g2.admin.inc
[print] modules/contrib/g2/g2.admin.inc
[refactoring] modules/contrib/g2/g2.admin.inc
[post rectors] modules/contrib/g2/g2.admin.inc
[print] modules/contrib/g2/g2.admin.inc
[parsing] modules/contrib/g2/g2.install
[refactoring] modules/contrib/g2/g2.install
[post rectors] modules/contrib/g2/g2.install
[print] modules/contrib/g2/g2.install
[parsing] modules/contrib/g2/g2.install.php
[refactoring] modules/contrib/g2/g2.install.php
[post rectors] modules/contrib/g2/g2.install.php
[print] modules/contrib/g2/g2.install.php
[refactoring] modules/contrib/g2/g2.install.php
[post rectors] modules/contrib/g2/g2.install.php
[print] modules/contrib/g2/g2.install.php
[parsing] modules/contrib/g2/g2.module
[refactoring] modules/contrib/g2/g2.module
[post rectors] modules/contrib/g2/g2.module
[print] modules/contrib/g2/g2.module
[refactoring] modules/contrib/g2/g2.module
[post rectors] modules/contrib/g2/g2.module
[print] modules/contrib/g2/g2.module
[parsing] modules/contrib/g2/src/Alphabar.php
[refactoring] modules/contrib/g2/src/Alphabar.php
[post rectors] modules/contrib/g2/src/Alphabar.php
[print] modules/contrib/g2/src/Alphabar.php
[refactoring] modules/contrib/g2/src/Alphabar.php
[post rectors] modules/contrib/g2/src/Alphabar.php
[print] modules/contrib/g2/src/Alphabar.php
[parsing] modules/contrib/g2/src/Controller/Feed.php
[refactoring] modules/contrib/g2/src/Controller/Feed.php
[post rectors] modules/contrib/g2/src/Controller/Feed.php
[print] modules/contrib/g2/src/Controller/Feed.php
[parsing] modules/contrib/g2/src/Controller/Homonyms.php
[refactoring] modules/contrib/g2/src/Controller/Homonyms.php
[post rectors] modules/contrib/g2/src/Controller/Homonyms.php
[print] modules/contrib/g2/src/Controller/Homonyms.php
[parsing] modules/contrib/g2/src/Controller/Initial.php
[refactoring] modules/contrib/g2/src/Controller/Initial.php
[post rectors] modules/contrib/g2/src/Controller/Initial.php
[print] modules/contrib/g2/src/Controller/Initial.php
[parsing] modules/contrib/g2/src/Controller/Main.php
[refactoring] modules/contrib/g2/src/Controller/Main.php
[post rectors] modules/contrib/g2/src/Controller/Main.php
[print] modules/contrib/g2/src/Controller/Main.php
[parsing] modules/contrib/g2/src/Form/RefererWipe.php
[refactoring] modules/contrib/g2/src/Form/RefererWipe.php
[post rectors] modules/contrib/g2/src/Form/RefererWipe.php
[print] modules/contrib/g2/src/Form/RefererWipe.php
[parsing] modules/contrib/g2/src/Form/SettingsForm.php
[refactoring] modules/contrib/g2/src/Form/SettingsForm.php
[post rectors] modules/contrib/g2/src/Form/SettingsForm.php
[print] modules/contrib/g2/src/Form/SettingsForm.php
[refactoring] modules/contrib/g2/src/Form/SettingsForm.php
[post rectors] modules/contrib/g2/src/Form/SettingsForm.php
[print] modules/contrib/g2/src/Form/SettingsForm.php
[parsing] modules/contrib/g2/src/G2.php
[refactoring] modules/contrib/g2/src/G2.php
[post rectors] modules/contrib/g2/src/G2.php
[print] modules/contrib/g2/src/G2.php
[parsing] modules/contrib/g2/src/Latest.php
[refactoring] modules/contrib/g2/src/Latest.php
[post rectors] modules/contrib/g2/src/Latest.php
[print] modules/contrib/g2/src/Latest.php
[parsing] modules/contrib/g2/src/ParamConverter/NodeMatch.php
[refactoring] modules/contrib/g2/src/ParamConverter/NodeMatch.php
[post rectors] modules/contrib/g2/src/ParamConverter/NodeMatch.php
[print] modules/contrib/g2/src/ParamConverter/NodeMatch.php
[parsing] modules/contrib/g2/src/Plugin/Block/AlphabarBlock.php
[refactoring] modules/contrib/g2/src/Plugin/Block/AlphabarBlock.php
[post rectors] modules/contrib/g2/src/Plugin/Block/AlphabarBlock.php
[print] modules/contrib/g2/src/Plugin/Block/AlphabarBlock.php
[parsing] modules/contrib/g2/src/Plugin/Block/LatestBlock.php
[refactoring] modules/contrib/g2/src/Plugin/Block/LatestBlock.php
[post rectors] modules/contrib/g2/src/Plugin/Block/LatestBlock.php
[print] modules/contrib/g2/src/Plugin/Block/LatestBlock.php
[parsing] modules/contrib/g2/src/Plugin/Block/Random.php
[refactoring] modules/contrib/g2/src/Plugin/Block/Random.php
[post rectors] modules/contrib/g2/src/Plugin/Block/Random.php
[print] modules/contrib/g2/src/Plugin/Block/Random.php
[parsing] modules/contrib/g2/src/Plugin/Block/TopBlock.php
[refactoring] modules/contrib/g2/src/Plugin/Block/TopBlock.php
[post rectors] modules/contrib/g2/src/Plugin/Block/TopBlock.php
[print] modules/contrib/g2/src/Plugin/Block/TopBlock.php
[parsing] modules/contrib/g2/src/Plugin/Block/Wotd.php
[refactoring] modules/contrib/g2/src/Plugin/Block/Wotd.php
[post rectors] modules/contrib/g2/src/Plugin/Block/Wotd.php
[print] modules/contrib/g2/src/Plugin/Block/Wotd.php
[parsing] modules/contrib/g2/src/Requirements.php
[refactoring] modules/contrib/g2/src/Requirements.php
[post rectors] modules/contrib/g2/src/Requirements.php
[print] modules/contrib/g2/src/Requirements.php
[parsing] modules/contrib/g2/src/Tests/AlphabarTest.php
[refactoring] modules/contrib/g2/src/Tests/AlphabarTest.php
[post rectors] modules/contrib/g2/src/Tests/AlphabarTest.php
[print] modules/contrib/g2/src/Tests/AlphabarTest.php
[refactoring] modules/contrib/g2/src/Tests/AlphabarTest.php
[post rectors] modules/contrib/g2/src/Tests/AlphabarTest.php
[print] modules/contrib/g2/src/Tests/AlphabarTest.php
[parsing] modules/contrib/g2/src/Tests/G2UnitTest.php
[refactoring] modules/contrib/g2/src/Tests/G2UnitTest.php
[post rectors] modules/contrib/g2/src/Tests/G2UnitTest.php
[print] modules/contrib/g2/src/Tests/G2UnitTest.php
[parsing] modules/contrib/g2/src/Top.php
[refactoring] modules/contrib/g2/src/Top.php
[post rectors] modules/contrib/g2/src/Top.php
[print] modules/contrib/g2/src/Top.php
[parsing] modules/contrib/g2/src/TopRecord.php
[refactoring] modules/contrib/g2/src/TopRecord.php
[post rectors] modules/contrib/g2/src/TopRecord.php
[print] modules/contrib/g2/src/TopRecord.php
[parsing] modules/contrib/g2/views/g2.views.inc
[refactoring] modules/contrib/g2/views/g2.views.inc
[post rectors] modules/contrib/g2/views/g2.views.inc
[print] modules/contrib/g2/views/g2.views.inc

6 files with changes
====================

1) modules/contrib/g2/src/Tests/AlphabarTest.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installConfig(static::MODULES);
     $this->installSchema('system', 'router');
@@ @@
     $links = $this->alphabar->getLinks();
     $this->assertTrue(is_array($links));

-    $expected = Unicode::strlen($this->alphabar->getContents());
+    $expected = mb_strlen($this->alphabar->getContents());
     $actual = count($links);
     $this->assertEquals($expected, $actual, 'The number of links matches the number of runes in alphabar.contents');
   }
    ----------- end diff -----------

Applied rules:
 * UnicodeStrlenRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/g2/src/Form/SettingsForm.php:499

    ---------- begin diff ----------
@@ @@
   public function submitControllerForm() {
     // @TODO Really necessary ? We change selected routes, not modifying them.
     $this->routerBuilder->rebuild();
-    drupal_set_message($this->t('The router has been rebuilt.'));
+    $this->messenger()->addStatus($this->t('The router has been rebuilt.'));
   }

   /**
@@ @@
       $this->{$handler}();
     }

-    drupal_set_message($this->t('The configuration options have been saved.'));
+    $this->messenger()->addStatus($this->t('The configuration options have been saved.'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/g2/src/Alphabar.php:84

    ---------- begin diff ----------
@@ @@
     $initials = $this->config['contents'];
     $route_name = $this->routeName;

-    for ($i = 0; $i < Unicode::strlen($initials); $i++) {
-      $initial = Unicode::substr($initials, $i, 1);
+    for ($i = 0; $i < mb_strlen($initials); $i++) {
+      $initial = mb_substr($initials, $i, 1);
       $path = G2::encodeTerminal($initial);
       $parameters = ['g2_initial' => $path];
       $url = Url::fromRoute($route_name, $parameters, $options);
    ----------- end diff -----------

Applied rules:
 * UnicodeStrlenRector
 * UnicodeSubstrRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/g2/g2.module:154

    ---------- begin diff ----------
@@ @@
       $definition = $block->getPlugin()->getPluginDefinition();
       if ($definition['provider'] === 'g2') {
         $id = $block->getPluginId();
-        $delta = \Drupal\Component\Utility\Unicode::substr($id, 3);
+        $delta = mb_substr($id, 3);
         $helps = [
           G2::DELTA_ALPHABAR => t('This block displays a clickable list of initials from the G2 glossary.'),
           G2::DELTA_RANDOM => t('This block displays a pseudo-random entry from the G2 glossary.'),
@@ @@
     . "WHERE n.type = '%s' AND (n.status = 1) "
     . "  AND NOT (n.title = '%s' OR n.nid = %d)";
   $sq = db_rewrite_sql($sq);
-  $q = db_query($sq, G2NODETYPE, $random, $wotd_nid);
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // If your `options` argument contains a `target` key, you will need to use `\Drupal\core\Database\Database::getConnection('my_database'). Drupal Rector could not yet evaluate the `options` argument since it was a variable.
+  $q = \Drupal::database()->query($sq, G2NODETYPE, $random, $wotd_nid);
   $n = db_result($q);

   $rand = mt_rand(0, $n - 1); // no need to mt_srand() since PHP 4.2
@@ @@
   $sq = db_rewrite_sql($sq);
   $q = db_query_range($sq, G2NODETYPE, $random, $wotd_nid, $rand, 1);
   $nid = db_result($q);
-  $node = node_load($nid);
+  $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($nid);
   $node->taxonomy = variable_get(G2VARRANDOMTERMS, G2DEFRANDOMTERMS)
     ? _g2_comb_taxonomy($node->taxonomy)
     : [];
@@ @@
     . "WHERE gr.nid = %d "
     . tablesort_sql($header);
   $sq = db_rewrite_sql($sq);
-  $q = db_query($sq, $nid);
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $q = \Drupal::database()->query($sq, $nid);
   $rows = [];
   while (is_object($o = db_fetch_object($q))) {
     $sts = preg_match('/node\/(\d+)/', $o->referer, $matches);
     if ($sts) {
-      $node = node_load($matches[1]);
+      $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($matches[1]);
       $title = l($node->title, 'node/' . $node->nid);
     }
     else {
@@ @@
 function _g2_referer_wipe($nid = NULL) {
   if (isset($nid)) {
     $sq = 'DELETE from {g2_referer} WHERE nid = %d';
-    db_query($sq, $nid);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    \Drupal::database()->query($sq, $nid);
     drupal_goto('node/' . $nid);
   }
   else {
     $sq = 'DELETE from {g2_referer}';
-    db_query($sq);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    \Drupal::database()->query($sq);
   }
 }

@@ @@
 function _g2_wotd($bodysize = 0) {
   // No need for a static: this function is normally never called twice.
   $nid = variable_get(G2VARWOTDENTRY, G2DEFWOTDENTRY);
-  $node = node_load($nid);
+  $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($nid);
   if (empty($node)) {
     return NULL;
   }
@@ @@
          * @see _g2_autocomplete()
          */
         $nid = variable_get(G2VARWOTDENTRY, G2DEFWOTDENTRY);
-        $node = node_load($nid);
+        $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($nid);
         if (empty($node)) {
           $node = new stdClass();
           $node->nid = 0;
@@ @@
  * Implement hook_delete().
  */
 function g2_delete(&$node) {
-  db_query('DELETE FROM {g2_node} WHERE nid = %d', $node->nid);
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  \Drupal::database()->query('DELETE FROM {g2_node} WHERE nid = %d', $node->nid);
 }

 /**
@@ @@
   $min_status = user_access('administer nodes')
     ? NODE_NOT_PUBLISHED
     : NODE_PUBLISHED;
-  $q = db_query($sq, G2NODETYPE, $min_status, $title);
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // If your `options` argument contains a `target` key, you will need to use `\Drupal\core\Database\Database::getConnection('my_database'). Drupal Rector could not yet evaluate the `options` argument since it was a variable.
+  $q = \Drupal::database()->query($sq, G2NODETYPE, $min_status, $title);
   $nodes = [];
   while (is_object($node = db_fetch_object($q))) {
-    $nodes[$node->nid] = node_load($node->nid);
+    $nodes[$node->nid] = \Drupal::service('entity_type.manager')->getStorage('node')->load($node->nid);
   }
   return $nodes;
 }
@@ @@
  * @XXX New feature to add: make extra node info revision-aware
  */
 function g2_load($node) {
-  $ret = db_fetch_object(db_query('SELECT * FROM {g2_node} WHERE nid = %s', $node->nid));
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $ret = db_fetch_object(\Drupal::database()->query('SELECT * FROM {g2_node} WHERE nid = %s', $node->nid));
   return $ret;
 }

@@ @@
  */
 function g2_referer_wipe_confirm_form_submit($form, &$form_state) {
   _g2_referer_wipe();
-  drupal_set_message(t('Referer information has been erased on all G2 entries'));
+  \Drupal::messenger()->addStatus(t('Referer information has been erased on all G2 entries'));
   $form_state['redirect'] = G2PATHSETTINGS;
 }

@@ @@
     $sq = 'UPDATE {g2_referer} '
       . 'SET incoming = incoming + 1 '
       . "WHERE nid = %d AND referer = '%s'";
-    db_query($sq, $node->nid, $referer);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // If your `options` argument contains a `target` key, you will need to use `\Drupal\core\Database\Database::getConnection('my_database'). Drupal Rector could not yet evaluate the `options` argument since it was a variable.
+    \Drupal::database()->query($sq, $node->nid, $referer);
     if (!db_affected_rows()) {
       $sq = 'INSERT INTO {g2_referer} '
         . '  (nid, referer, incoming) '
         . "VALUES (%d, '%s', 1) ";
-      db_query($sq, $node->nid, $referer);
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // If your `options` argument contains a `target` key, you will need to use `\Drupal\core\Database\Database::getConnection('my_database'). Drupal Rector could not yet evaluate the `options` argument since it was a variable.
+      \Drupal::database()->query($sq, $node->nid, $referer);
     }
   }
   else {
@@ @@
 function g2_views_api() {
   return [
     'api' => '2.0',
-    'path' => drupal_get_path('module', 'g2') . '/views',
+    'path' => \Drupal::service('extension.list.module')->getPath('g2') . '/views',
   ];
 }

@@ @@
       // Convert nid to "title [<nid>]" even if missing.
       // @see autocomplete()
       $nid = variable_get(G2\VARWOTDENTRY, G2\DEFWOTDENTRY);
-      $node = node_load($nid);
+      $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($nid);
       if (empty($node)) {
         $node = new stdClass();
         $node->nid = 0;
@@ @@
       variable_set(G2\VARWOTDENTRY, $nid);
       variable_set(G2\VARWOTDBODYSIZE, $edit[G2\VARWOTDBODYSIZE]);
       variable_set(G2\VARWOTDAUTOCHANGE, $edit[G2\VARWOTDAUTOCHANGE]);
-      variable_set(G2\VARWOTDDATE, REQUEST_TIME);
+      variable_set(G2\VARWOTDDATE, \Drupal::time()->getRequestTime());
       variable_set(G2\VARWOTDTERMS, $edit[G2\VARWOTDTERMS]);
       variable_set(G2\VARWOTDFEEDLINK, $edit[G2\VARWOTDFEEDLINK]);
       variable_set(G2\VARWOTDFEEDTITLE, $edit[G2\VARWOTDFEEDTITLE]);
@@ @@
  */
 function Zg2_cron() {
   if (variable_get(G2\VARWOTDAUTOCHANGE, G2\DEFWOTDAUTOCHANGE)) {
-    $date0 = date('z', variable_get(G2\VARWOTDDATE, REQUEST_TIME));
+    $date0 = date('z', variable_get(G2\VARWOTDDATE, \Drupal::time()->getRequestTime()));
     $date1 = date('z');
     if ($date1 <> $date0) {
       $random = G2\random();
@@ @@
   if ($module == 'context' && $api == 'context') {
     $ret = [
       'version' => 3,
-      'path' => drupal_get_path('module', 'g2') . '/context',
+      'path' => \Drupal::service('extension.list.module')->getPath('g2') . '/context',
       // Not until http://drupal.org/node/1242632 is fixed
       // 'file' => 'g2.context_defaults.inc',
     ];
@@ @@
  */
 function Zg2_delete($node) {
   // dsm($node, __FUNCTION__);
-  db_delete('g2_node')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  \Drupal::database()->delete('g2_node')
     ->condition('nid', $node->nid)
     ->execute();
 }
@@ @@
     '#weight' => -5,
     '#access' => $admin,
     '#attached' => [
-      'js' => [drupal_get_path('module', 'g2') . '/g2.js'],
+      'js' => [\Drupal::service('extension.list.module')->getPath('g2') . '/g2.js'],
     ],
   ];
   $form['publishing']['complement'] = [
@@ @@
  * XXX New feature to add: make extra node info revision-aware.
  */
 function Zg2_load($nodes) {
-  $q = db_select('g2_node', 'gn');
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $q = \Drupal::database()->select('g2_node', 'gn');
   $result = $q->fields('gn')
     ->condition('gn.nid', array_keys($nodes), 'IN')
     ->execute();
@@ @@
  *   - FALSE otherwise
  */
 function Zg2_nid_load($us_nid = 0) {
-  $node = node_load($us_nid);
+  $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($us_nid);
   if ($node->type != G2\NODETYPE) {
     $node = NULL;
   }
@@ @@
  */
 function Zg2_node_view($node, $view_mode, $langcode) {
   if ($view_mode == 'rss' && $node->type == G2\NODETYPE && ($_GET['q'] == G2\PATHWOTDFEED)) {
-    $node->created = variable_get(G2\VARWOTDDATE, REQUEST_TIME);
+    $node->created = variable_get(G2\VARWOTDDATE, \Drupal::time()->getRequestTime());
     $node->name = filter_xss_admin(
       strtr(
         variable_get(G2\VARWOTDFEEDAUTHOR, '@author'),
@@ @@
  * Implements hook_user_load().
  */
 function Zg2_user_load($users) {
-  $q = db_select('node', 'n');
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $q = \Drupal::database()->select('node', 'n');
   $result = $q->fields('n', ['nid', 'title', 'uid', 'type'])
     ->condition('n.type', G2\NODETYPE)
     ->condition('n.status', 1)
@@ @@
 function Zg2_views_api() {
   return [
     'api' => '3.0',
-    'path' => drupal_get_path('module', 'g2') . '/views',
+    'path' => \Drupal::service('extension.list.module')->getPath('g2') . '/views',
   ];
 }
    ----------- end diff -----------

Applied rules:
 * DBDeleteRector
 * DBQueryRector
 * DBSelectRector
 * DrupalGetPathRector
 * DrupalSetMessageRector
 * NodeLoadRector
 * RequestTimeConstRector
 * UnicodeSubstrRector
 * ArgumentRemoverRector


5) modules/contrib/g2/g2.install.php:130

    ---------- begin diff ----------
@@ @@
   OR v.name LIKE 'g2/%%'
 SQL;

-  $result = db_query($sql);
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $result = \Drupal::database()->query($sql);

   $count = 0;
   while (is_object($row = db_fetch_object($result))) {
@@ @@
   else {
     $message = t('No obsolete variable to clean.');
   }
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // This needs to be replaced, but Rector was not yet able to replace this because the type of message was set with a variable. If you need to continue to use a variable, you might consider using a switch statement.
+  // @noRector
   drupal_set_message($message, status);

   /* Convert Drupal 4.7.x/5.x block deltas
@@ @@
   $sql = "UPDATE {blocks} b SET delta = '%s' WHERE module = '%s' AND delta = %d ";
   $count = 0;
   foreach ($delta_changes as $old => $new) {
-    db_query($sql, $new, 'g2', $old);
+    \Drupal::database()->query($sql, $new, 'g2', $old);
     $count += db_affected_rows();
   }

@@ @@
     $message = t('No obsolete delta to convert.');
   }

-  drupal_set_message($message, 'status');
+  \Drupal::messenger()->addStatus($message);
   return array();
 }

@@ @@
   else {
     $message = t('No old token to convert for the WOTD feed settings.');
   }
-  drupal_set_message($message, 'status');
+  \Drupal::messenger()->addStatus($message);
   return array();
 }

@@ @@
   else {
     $message = t('g2_referer table was there. No need to recreate it.');
   }
-  drupal_set_message($message, 'status');
+  \Drupal::messenger()->addStatus($message);
   return $ret;
 }
    ----------- end diff -----------

Applied rules:
 * DBQueryRector
 * DrupalSetMessageRector
 * ArgumentRemoverRector


6) modules/contrib/g2/g2.admin.inc:229

    ---------- begin diff ----------
@@ @@
 function g2_admin_settings_validate($form, &$form_state) {
   $main = $form_state['values']['g2_main'];
   if (is_numeric($main)) {
-    if ($main != 0 && !is_object(node_load($main))) {
+    if ($main != 0 && !is_object(\Drupal::service('entity_type.manager')->getStorage('node')->load($main))) {
       form_set_error('g2_main', t('The node chosen for the main page must be a valid one, or 0: "@nid" is not a valid node id.',
         array('@nid' => $main)));
     }
@@ @@
   }

   $nid = $form_state['values']['g2_homonyms'];
-  if ($nid != 0 && !is_object(node_load($nid))) {
+  if ($nid != 0 && !is_object(\Drupal::service('entity_type.manager')->getStorage('node')->load($nid))) {
     form_set_error('g2_homonyms', t('The node chosen for the homonyms disambiguation page must be a valid one, or 0: "@nid" is not a valid node id.',
       array('@nid' => $nid)));
   }
    ----------- end diff -----------

Applied rules:
 * NodeLoadRector
 * ArgumentRemoverRector


 [OK] 6 files have been changed by Rector                                       

