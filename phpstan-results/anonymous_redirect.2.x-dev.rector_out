[parsing] modules/contrib/anonymous_redirect/anonymous_redirect.module
[refactoring] modules/contrib/anonymous_redirect/anonymous_redirect.module
[post rectors] modules/contrib/anonymous_redirect/anonymous_redirect.module
[print] modules/contrib/anonymous_redirect/anonymous_redirect.module
[parsing] modules/contrib/anonymous_redirect/src/EventSubscriber/AnonymousRedirectSubscriber.php
[refactoring] modules/contrib/anonymous_redirect/src/EventSubscriber/AnonymousRedirectSubscriber.php
[post rectors] modules/contrib/anonymous_redirect/src/EventSubscriber/AnonymousRedirectSubscriber.php
[print] modules/contrib/anonymous_redirect/src/EventSubscriber/AnonymousRedirectSubscriber.php
[refactoring] modules/contrib/anonymous_redirect/src/EventSubscriber/AnonymousRedirectSubscriber.php
[post rectors] modules/contrib/anonymous_redirect/src/EventSubscriber/AnonymousRedirectSubscriber.php
[print] modules/contrib/anonymous_redirect/src/EventSubscriber/AnonymousRedirectSubscriber.php
[parsing] modules/contrib/anonymous_redirect/src/Form/AnonymousRedirectSettingsForm.php
[refactoring] modules/contrib/anonymous_redirect/src/Form/AnonymousRedirectSettingsForm.php
[post rectors] modules/contrib/anonymous_redirect/src/Form/AnonymousRedirectSettingsForm.php
[print] modules/contrib/anonymous_redirect/src/Form/AnonymousRedirectSettingsForm.php
[parsing] modules/contrib/anonymous_redirect/src/Tests/AnonymousRedirectConfigTest.php
[refactoring] modules/contrib/anonymous_redirect/src/Tests/AnonymousRedirectConfigTest.php
[post rectors] modules/contrib/anonymous_redirect/src/Tests/AnonymousRedirectConfigTest.php
[print] modules/contrib/anonymous_redirect/src/Tests/AnonymousRedirectConfigTest.php
[refactoring] modules/contrib/anonymous_redirect/src/Tests/AnonymousRedirectConfigTest.php
[post rectors] modules/contrib/anonymous_redirect/src/Tests/AnonymousRedirectConfigTest.php
[print] modules/contrib/anonymous_redirect/src/Tests/AnonymousRedirectConfigTest.php

2 files with changes
====================

1) modules/contrib/anonymous_redirect/src/Tests/AnonymousRedirectConfigTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // @todo Change the autogenerated stub.
     parent::setUp();

@@ @@
     // Test that config form exists at specified route.
     $this->drupalLogin($this->user);
     $this->drupalGet('/admin/config/system/anonymous-redirect');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $config = $this->config('anonymous_redirect.settings');

     // Check that enable_anonymous_redirect field exists with an appropriate
     // value.
-    $this->assertFieldByName('enable_anonymous_redirect', $config->get('enable_redirect'), 'The Enable Redirect field was found with the correct value');
+    $this->assertSession()->fieldValueEquals('enable_anonymous_redirect', $config->get('enable_redirect'));

     // Check that redirect_base_url field exist with an appropriate value.
-    $this->assertFieldByName('redirect_base_url', $config->get('redirect_url'), 'The redirect_base_url field exists and holds an appropriate value');
+    $this->assertSession()->fieldValueEquals('redirect_base_url', $config->get('redirect_url'));

     // Check that redirect_url_overrides field exists with an appropriate value.
-    $this->assertFieldByName('redirect_url_overrides', $config->get('redirect_url_overrides'), 'The redirect_url_overrides field exists and holds an appropriate value');
+    $this->assertSession()->fieldValueEquals('redirect_url_overrides', $config->get('redirect_url_overrides'));
+    $this->drupalGet('/admin/config/system/anonymous-redirect');

     // Check that the form saves correctly with appropriate values.
-    $this->drupalPostForm('/admin/config/system/anonymous-redirect', [
+    $this->submitForm([
       'enable_anonymous_redirect' => TRUE,
       'redirect_base_url' => '<front>',
       'redirect_url_overrides' => '/test',
     ], $this->t('Save configuration'));
-    $this->assertText('The configuration options have been saved.', 'The form was saved correctly.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');

     $this->drupalGet('/admin/config/system/anonymous-redirect');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Check to see if the values were set correctly.
-    $this->assertFieldByName('enable_anonymous_redirect', TRUE, 'Value for the  enable_redirect field was set successfully');
-    $this->assertFieldByName('redirect_base_url', '<front>', 'Value for the redirect_base_url field was set successfully');
-    $this->assertFieldByName('redirect_url_overrides', '/test', 'Value for the redirect_url_overrides field was set successfully');
+    $this->assertSession()->fieldValueEquals('enable_anonymous_redirect', TRUE);
+    $this->assertSession()->fieldValueEquals('redirect_base_url', '<front>');
+    $this->assertSession()->fieldValueEquals('redirect_url_overrides', '/test');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/anonymous_redirect/src/EventSubscriber/AnonymousRedirectSubscriber.php:65

    ---------- begin diff ----------
@@ @@
   /**
    * Redirects anonymous users to the /user route.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The response event.
    */
-  public function redirectAnonymous(GetResponseEvent $event) {
+  public function redirectAnonymous(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     // Initialize the minimum amount of values since this runs on every request.
     $config = $this->config('anonymous_redirect.settings');
     $redirectEnabled = $config->get('enable_redirect');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 2 files have been changed by Rector                                       

