diff --git a/modules/demo/tests/src/Functional/MonitoringDemoTest.php b/modules/demo/tests/src/Functional/MonitoringDemoTest.php
index 49a5043..f5e3b77 100644
--- a/modules/demo/tests/src/Functional/MonitoringDemoTest.php
+++ b/modules/demo/tests/src/Functional/MonitoringDemoTest.php
@@ -23,15 +23,27 @@ class MonitoringDemoTest extends MonitoringTestBase {
    */
   public function testInstalled() {
     $this->drupalGet('');
-    $this->assertText('Monitoring');
-    $this->assertText(t('Welcome to the Monitoring demo installation.'));
-    $this->assertLink(t('Monitoring sensors overview'));
-    $this->assertLink(t('Monitoring sensors settings'));
-    $this->assertText(t('Sensor example: "Installed modules"'));
-    $this->assertLink(t('Configure'));
-    $this->assertLink(t('Uninstall'), 0);
-    $this->assertLink(t('Uninstall'), 1);
-    $this->assertText(t('Drush integration - open up your console and type in # drush monitoring-sensor-config'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Monitoring');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Welcome to the Monitoring demo installation.'));
+    $this->assertSession()->linkExists(t('Monitoring sensors overview'));
+    $this->assertSession()->linkExists(t('Monitoring sensors settings'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Sensor example: "Installed modules"'));
+    $this->assertSession()->linkExists(t('Configure'));
+    $this->assertSession()->linkExists(t('Uninstall'), 0);
+    $this->assertSession()->linkExists(t('Uninstall'), 1);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Drush integration - open up your console and type in # drush monitoring-sensor-config'));
   }
 
 }
diff --git a/modules/monitoring_mail/tests/src/Kernel/MonitoringMailKernelTest.php b/modules/monitoring_mail/tests/src/Kernel/MonitoringMailKernelTest.php
index 517854a..fc0a98c 100644
--- a/modules/monitoring_mail/tests/src/Kernel/MonitoringMailKernelTest.php
+++ b/modules/monitoring_mail/tests/src/Kernel/MonitoringMailKernelTest.php
@@ -30,7 +30,7 @@ class MonitoringMailKernelTest extends MonitoringUnitTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('dblog', ['watchdog']);
diff --git a/modules/multigraph/tests/src/Functional/MultigraphServicesTest.php b/modules/multigraph/tests/src/Functional/MultigraphServicesTest.php
index 4712183..c77137d 100644
--- a/modules/multigraph/tests/src/Functional/MultigraphServicesTest.php
+++ b/modules/multigraph/tests/src/Functional/MultigraphServicesTest.php
@@ -40,7 +40,7 @@ class MultigraphServicesTest extends MonitoringTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->servicesAccount = $this->drupalCreateUser([
@@ -55,7 +55,7 @@ class MultigraphServicesTest extends MonitoringTestBase {
     $this->drupalLogin($this->servicesAccount);
 
     $response_data = $this->doJsonRequest('monitoring-multigraph');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     /** @var \Drupal\monitoring_multigraph\MultigraphInterface[] $multigraphs */
     $multigraphs = \Drupal::entityTypeManager()
@@ -64,28 +64,28 @@ class MultigraphServicesTest extends MonitoringTestBase {
 
     // Test the list of multigraphs.
     foreach ($multigraphs as $name => $multigraph) {
-      $this->assertEqual($response_data[$name]['id'], $multigraph->id());
-      $this->assertEqual($response_data[$name]['label'], $multigraph->label());
-      $this->assertEqual($response_data[$name]['description'], $multigraph->getDescription());
-      $this->assertEqual($response_data[$name]['sensors'], $multigraph->getSensorsRaw());
-      $this->assertEqual($response_data[$name]['uri'], Url::fromRoute('rest.monitoring-multigraph.GET' , ['id' => $multigraph->id(), '_format' => 'json'])->setAbsolute()->toString());
+      $this->assertEquals($response_data[$name]['id'], $multigraph->id());
+      $this->assertEquals($response_data[$name]['label'], $multigraph->label());
+      $this->assertEquals($response_data[$name]['description'], $multigraph->getDescription());
+      $this->assertEquals($response_data[$name]['sensors'], $multigraph->getSensorsRaw());
+      $this->assertEquals($response_data[$name]['uri'], Url::fromRoute('rest.monitoring-multigraph.GET' , ['id' => $multigraph->id(), '_format' => 'json'])->setAbsolute()->toString());
     }
 
     // Test response for non-existing multigraph.
     $name = 'multigraph_that_does_not_exist';
     $this->doJsonRequest('monitoring-multigraph/' . $name);
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     // Test the predefined multigraph.
     $name = 'watchdog_severe_entries';
     $response_data = $this->doJsonRequest('monitoring-multigraph/' . $name);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $multigraph = $multigraphs[$name];
-    $this->assertEqual($response_data['id'], $multigraph->id());
-    $this->assertEqual($response_data['label'], $multigraph->label());
-    $this->assertEqual($response_data['description'], $multigraph->getDescription());
-    $this->assertEqual($response_data['sensors'], $multigraph->getSensorsRaw());
-    $this->assertEqual($response_data['uri'], Url::fromRoute('rest.monitoring-multigraph.GET' , ['id' => $multigraph->id(), '_format' => 'json'])->setAbsolute()->toString());
+    $this->assertEquals($response_data['id'], $multigraph->id());
+    $this->assertEquals($response_data['label'], $multigraph->label());
+    $this->assertEquals($response_data['description'], $multigraph->getDescription());
+    $this->assertEquals($response_data['sensors'], $multigraph->getSensorsRaw());
+    $this->assertEquals($response_data['uri'], Url::fromRoute('rest.monitoring-multigraph.GET' , ['id' => $multigraph->id(), '_format' => 'json'])->setAbsolute()->toString());
   }
 
 }
