diff --git a/tests/src/Functional/PrivateTaxonomyPermissionsTest.php b/tests/src/Functional/PrivateTaxonomyPermissionsTest.php
index 76d4a40..ee46185 100644
--- a/tests/src/Functional/PrivateTaxonomyPermissionsTest.php
+++ b/tests/src/Functional/PrivateTaxonomyPermissionsTest.php
@@ -34,16 +34,26 @@ class PrivateTaxonomyPermissionsTest extends PrivateTaxonomyTestBase {
 
     // Test to see what vocabularies are visible.
     $this->drupalGet('admin/structure/taxonomy');
-    $this->assertNoText($public_vocabulary->label(),
-      $this->t('Public vocabulary not visible.'));
-    $this->assertText($private_vocabulary->label(),
-      $this->t('Private vocabulary visible.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($public_vocabulary->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_vocabulary->label());
 
     // Test to see what terms are visible.
     $this->drupalGet('admin/structure/taxonomy/manage/' .
       $private_vocabulary->id() . '/overview');
-    $this->assertText($private_term->getName(), $this->t('Private term visible.'));
-    $this->assertNoText($admin_term->getName(), $this->t('Admin term not visible.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_term->getName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($admin_term->getName());
 
     // Test to verify what vocabularies we can add terms to.
     $this->drupalGet('admin/structure/taxonomy/manage/' . $private_vocabulary->id() . '/add');
@@ -93,16 +103,26 @@ class PrivateTaxonomyPermissionsTest extends PrivateTaxonomyTestBase {
 
     // Test to see what vocabularies are visible.
     $this->drupalGet('admin/structure/taxonomy');
-    $this->assertNoText($public_vocabulary->label(),
-      $this->t('Public vocabulary not visible.'));
-    $this->assertText($private_vocabulary->label(),
-      $this->t('Private vocabulary visible.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($public_vocabulary->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_vocabulary->label());
 
     // Test to see what terms are visible.
     $this->drupalGet('admin/structure/taxonomy/manage/' .
       $private_vocabulary->id() . '/overview');
-    $this->assertText($private_term->getName(), $this->t('Private term visible.'));
-    $this->assertText($admin_term->getName(), $this->t('Admin term visible.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_term->getName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($admin_term->getName());
 
     $this->drupalLogin($admin_user);
     $edit = [
@@ -110,40 +130,48 @@ class PrivateTaxonomyPermissionsTest extends PrivateTaxonomyTestBase {
       'label' => 'Private',
       'field_name' => 'private',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/add-field',
-      $edit, $this->t('Save and continue'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/add-field');
+    $this->submitForm($edit, $this->t('Save and continue'));
     $edit = [
       'fields[field_private][type]' => 'options_select',
       'fields[field_private][region]' => 'content',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/form-display',
-      $edit, $this->t('Save'));
+    $this->drupalGet('admin/structure/types/manage/page/form-display');
+    $this->submitForm($edit, $this->t('Save'));
     $edit = [
       'fields[field_private][type]' => 'private_taxonomy_term_reference_link',
       'fields[field_private][region]' => 'content',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/display',
-      $edit, $this->t('Save'));
+    $this->drupalGet('admin/structure/types/manage/page/display');
+    $this->submitForm($edit, $this->t('Save'));
     $edit = [
       'settings[allowed_values][0][vocabulary]' => $private_vocabulary->id(),
       'settings[allowed_values][0][users]' => 'all',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_private/storage', $edit, $this->t('Save field settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_private/storage');
+    $this->submitForm($edit, $this->t('Save field settings'));
 
     $this->drupalGet('node/add/page');
-    $this->assertText($admin_term->getName(), $this->t('Found term'));
-    $this->assertText($private_term->getName(), $this->t('Found term'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($admin_term->getName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_term->getName());
 
     $edit = [
       'title[0][value]' => $this->randomMachineName(),
       'field_private' => $admin_term->id(),
     ];
-    $this->drupalPostForm('node/add/page', $edit, $this->t('Save'));
+    $this->drupalGet('node/add/page');
+    $this->submitForm($edit, $this->t('Save'));
     // Should find the owner's term and use it.
-    $this->assertRaw('taxonomy/term/' . $admin_term->id(), $this->t('Found term'));
+    $this->assertSession()->responseContains('taxonomy/term/' . $admin_term->id());
     // Check taxonomy index.
     $this->drupalGet('taxonomy/term/' . $admin_term->id());
-    $this->assertRaw($admin_term->getName(), $this->t('Found term'));
+    $this->assertSession()->responseContains($admin_term->getName());
   }
 
   /**
@@ -181,16 +209,26 @@ class PrivateTaxonomyPermissionsTest extends PrivateTaxonomyTestBase {
 
     // Test to see what vocabularies are visible.
     $this->drupalGet('admin/structure/taxonomy');
-    $this->assertNoText($public_vocabulary->label(),
-      $this->t('Public vocabulary not visible.'));
-    $this->assertText($private_vocabulary->label(),
-      $this->t('Private vocabulary visible.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($public_vocabulary->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_vocabulary->label());
 
     // Test to see what terms are visible.
     $this->drupalGet('admin/structure/taxonomy/manage/' .
       $private_vocabulary->id() . '/overview');
-    $this->assertText($private_term->getName(), $this->t('Private term visible.'));
-    $this->assertText($admin_term->getName(), $this->t('Admin term visible.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_term->getName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($admin_term->getName());
 
     $this->drupalLogin($admin_user);
     $edit = [
@@ -198,42 +236,53 @@ class PrivateTaxonomyPermissionsTest extends PrivateTaxonomyTestBase {
       'label' => 'Private',
       'field_name' => 'private',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/add-field',
-      $edit, $this->t('Save and continue'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/add-field');
+    $this->submitForm($edit, $this->t('Save and continue'));
     $edit = [
       'fields[field_private][type]' => 'options_select',
       'fields[field_private][region]' => 'content',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/form-display',
-      $edit, $this->t('Save'));
+    $this->drupalGet('admin/structure/types/manage/page/form-display');
+    $this->submitForm($edit, $this->t('Save'));
     $edit = [
       'fields[field_private][type]' => 'private_taxonomy_term_reference_plain',
       'fields[field_private][region]' => 'content',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/display',
-      $edit, $this->t('Save'));
+    $this->drupalGet('admin/structure/types/manage/page/display');
+    $this->submitForm($edit, $this->t('Save'));
     $edit = [
       'settings[allowed_values][0][vocabulary]' => $private_vocabulary->id(),
       'settings[allowed_values][0][users]' => 'owner',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_private/storage', $edit, $this->t('Save field settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_private/storage');
+    $this->submitForm($edit, $this->t('Save field settings'));
 
     $this->drupalLogin($user);
     $this->drupalGet('node/add/page');
-    $this->assertNoText($admin_term->getName(), $this->t('Term not found'));
-    $this->assertText($private_term->getName(), $this->t('Found term'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($admin_term->getName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_term->getName());
 
     $edit = [
       'title[0][value]' => $this->randomMachineName(),
       'field_private' => $private_term->id(),
     ];
-    $this->drupalPostForm('node/add/page', $edit, $this->t('Save'));
+    $this->drupalGet('node/add/page');
+    $this->submitForm($edit, $this->t('Save'));
 
     // Should find the owner's term and use it.
-    $this->assertText($private_term->getName(), $this->t('Found term'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_term->getName());
     // Check taxonomy index.
     $this->drupalGet('taxonomy/term/' . $private_term->id());
-    $this->assertRaw($private_term->getName(), $this->t('Found term'));
+    $this->assertSession()->responseContains($private_term->getName());
   }
 
   /**
@@ -262,16 +311,26 @@ class PrivateTaxonomyPermissionsTest extends PrivateTaxonomyTestBase {
 
     // Test to see what vocabularies are visible.
     $this->drupalGet('admin/structure/taxonomy');
-    $this->assertNoText($public_vocabulary->label(),
-      $this->t('Public vocabulary not visible.'));
-    $this->assertText($private_vocabulary->label(),
-      $this->t('Private vocabulary visible.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($public_vocabulary->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_vocabulary->label());
 
     // Test to see what terms are visible.
     $this->drupalGet('admin/structure/taxonomy/manage/' .
       $private_vocabulary->id() . '/overview');
-    $this->assertText($private_term->getName(), $this->t('Private term visible.'));
-    $this->assertText($admin_term->getName(), $this->t('Admin term visible.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_term->getName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($admin_term->getName());
   }
 
   /**
