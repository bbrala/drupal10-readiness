diff --git a/modules/crm_core_activity/legacy/CRMFeedsActivityProcessor.inc b/modules/crm_core_activity/legacy/CRMFeedsActivityProcessor.inc
index 05ee489..61940ed 100644
--- a/modules/crm_core_activity/legacy/CRMFeedsActivityProcessor.inc
+++ b/modules/crm_core_activity/legacy/CRMFeedsActivityProcessor.inc
@@ -43,7 +43,7 @@ class CRMFeedsActivityProcessor extends FeedsProcessor {
       'uid' => $this->config['author'],
     ];
 
-    return entity_create('crm_core_activity', $values);
+    return \Drupal::service('entity_type.manager')->getStorage('crm_core_activity')->create($values);
   }
 
   /**
@@ -58,7 +58,9 @@ class CRMFeedsActivityProcessor extends FeedsProcessor {
     }
     else {
       // We're replacing the existing activity. Only save the necessary.
-      $activity = db_query("SELECT created, activity_id, type FROM {crm_core_activity} WHERE activity_id = :activity_id", [':activity_id' => $activity_id])->fetchObject();
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      $activity = \Drupal::database()->query("SELECT created, activity_id, type FROM {crm_core_activity} WHERE activity_id = :activity_id", [':activity_id' => $activity_id])->fetchObject();
       $activity->uid = $this->config['author'];
     }
     // Populate properties that are set by activity_object_prepare().
@@ -98,13 +100,13 @@ class CRMFeedsActivityProcessor extends FeedsProcessor {
       return;
     }
     $count = $this->getLimit();
-    $activitys = db_query_range("SELECT a.activity_id FROM {crm_core_activity} a JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_activity' AND a.activity_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, $count, [':id' => $this->id, ':created' => REQUEST_TIME - $time]);
+    $activitys = db_query_range("SELECT a.activity_id FROM {crm_core_activity} a JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_activity' AND a.activity_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, $count, [':id' => $this->id, ':created' => \Drupal::time()->getRequestTime() - $time]);
     $activity_ids = [];
     foreach ($activitys as $activity) {
       $activity_ids[$activity->activity_id] = $activity->activity_id;
     }
     $this->entityDeleteMultiple($activity_ids);
-    if (db_query_range("SELECT 1 FROM {crm_core_activity} a JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_activity' AND a.activity_id = fi.entity_id WHERE fi.id = :id AND a.created < :created", 0, 1, [':id' => $this->id, ':created' => REQUEST_TIME - $time])->fetchField()) {
+    if (db_query_range("SELECT 1 FROM {crm_core_activity} a JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_activity' AND a.activity_id = fi.entity_id WHERE fi.id = :id AND a.created < :created", 0, 1, [':id' => $this->id, ':created' => \Drupal::time()->getRequestTime() - $time])->fetchField()) {
       return FEEDS_BATCH_ACTIVE;
     }
     return FEEDS_BATCH_COMPLETE;
@@ -160,7 +162,7 @@ class CRMFeedsActivityProcessor extends FeedsProcessor {
       '#options' => $types,
       '#default_value' => $this->config['activity_type'],
     ];
-    $author = user_load($this->config['author']);
+    $author = \Drupal::service('entity_type.manager')->getStorage('user')->load($this->config['author']);
     $form['author'] = [
       '#type' => 'textfield',
       '#title' => t('Author'),
@@ -215,7 +217,7 @@ class CRMFeedsActivityProcessor extends FeedsProcessor {
   public function setTargetElement(FeedsSource $source, $target_activity, $target_element, $value) {
     switch ($target_element) {
       case 'created':
-        $target_activity->created = feeds_to_unixtime($value, REQUEST_TIME);
+        $target_activity->created = feeds_to_unixtime($value, \Drupal::time()->getRequestTime());
         break;
 
       case 'feeds_source':
@@ -295,12 +297,16 @@ class CRMFeedsActivityProcessor extends FeedsProcessor {
     foreach ($this->uniqueTargets($source, $result) as $target => $value) {
       switch ($target) {
         case 'activity_id':
-          $activity_id = db_query("SELECT activity_id FROM {crm_core_activity} WHERE activity_id = :activity_id", [':activity_id' => $value])->fetchField();
+          // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+          // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+          $activity_id = \Drupal::database()->query("SELECT activity_id FROM {crm_core_activity} WHERE activity_id = :activity_id", [':activity_id' => $value])->fetchField();
           break;
 
         case 'feeds_source':
           if ($id = feeds_get_importer_id($this->config['activity_type'])) {
-            $activity_id = db_query("SELECT fs.feed_activity_id FROM {crm_core_activity} c JOIN {feeds_source} fs ON c.activity_id = fs.feed_activity_id WHERE fs.id = :id AND fs.source = :source", [':id' => $id, ':source' => $value])->fetchField();
+            // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+            // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+            $activity_id = \Drupal::database()->query("SELECT fs.feed_activity_id FROM {crm_core_activity} c JOIN {feeds_source} fs ON c.activity_id = fs.feed_activity_id WHERE fs.id = :id AND fs.source = :source", [':id' => $id, ':source' => $value])->fetchField();
           }
           break;
       }
diff --git a/modules/crm_core_contact/legacy/CRMFeedsContactProcessor.inc b/modules/crm_core_contact/legacy/CRMFeedsContactProcessor.inc
index 27134b6..cd16a84 100644
--- a/modules/crm_core_contact/legacy/CRMFeedsContactProcessor.inc
+++ b/modules/crm_core_contact/legacy/CRMFeedsContactProcessor.inc
@@ -40,8 +40,8 @@ class CRMFeedsContactProcessor extends FeedsProcessor {
   protected function newEntity(FeedsSource $source) {
     $contact = new stdClass();
     $contact->type = $this->config['contact_type'];
-    $contact->changed = REQUEST_TIME;
-    $contact->created = REQUEST_TIME;
+    $contact->changed = \Drupal::time()->getRequestTime();
+    $contact->created = \Drupal::time()->getRequestTime();
     $contact->language = LANGUAGE_NONE;
     $contact->revision_log = t('Imported by feeds.');
     $contact->uid = $this->config['author'];
@@ -60,7 +60,9 @@ class CRMFeedsContactProcessor extends FeedsProcessor {
     }
     else {
       // We're replacing the existing contact. Only save the absolutely necessary.
-      $contact = db_query("SELECT created, contact_id, vid, type FROM {crm_core_contact} WHERE contact_id = :contact_id", [':contact_id' => $contact_id])->fetchObject();
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      $contact = \Drupal::database()->query("SELECT created, contact_id, vid, type FROM {crm_core_contact} WHERE contact_id = :contact_id", [':contact_id' => $contact_id])->fetchObject();
       $contact->uid = $this->config['author'];
     }
     // Populate properties that are set by contact_object_prepare().
@@ -100,13 +102,13 @@ class CRMFeedsContactProcessor extends FeedsProcessor {
       return;
     }
     $count = $this->getLimit();
-    $contacts = db_query_range("SELECT c.contact_id FROM {crm_core_contact} c JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_contact' AND c.contact_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, $count, [':id' => $this->id, ':created' => REQUEST_TIME - $time]);
+    $contacts = db_query_range("SELECT c.contact_id FROM {crm_core_contact} c JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_contact' AND c.contact_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, $count, [':id' => $this->id, ':created' => \Drupal::time()->getRequestTime() - $time]);
     $contact_ids = [];
     foreach ($contacts as $contact) {
       $contact_ids[$contact->contact_id] = $contact->contact_id;
     }
     $this->entityDeleteMultiple($contact_ids);
-    if (db_query_range("SELECT 1 FROM {crm_core_contact} c JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_contact' AND c.contact_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, 1, [':id' => $this->id, ':created' => REQUEST_TIME - $time])->fetchField()) {
+    if (db_query_range("SELECT 1 FROM {crm_core_contact} c JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_contact' AND c.contact_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, 1, [':id' => $this->id, ':created' => \Drupal::time()->getRequestTime() - $time])->fetchField()) {
       return FEEDS_BATCH_ACTIVE;
     }
     return FEEDS_BATCH_COMPLETE;
@@ -146,7 +148,7 @@ class CRMFeedsContactProcessor extends FeedsProcessor {
       '#options' => $types,
       '#default_value' => $this->config['contact_type'],
     ];
-    $author = user_load($this->config['author']);
+    $author = \Drupal::service('entity_type.manager')->getStorage('user')->load($this->config['author']);
     $form['author'] = [
       '#type' => 'textfield',
       '#title' => t('Author'),
@@ -198,7 +200,7 @@ class CRMFeedsContactProcessor extends FeedsProcessor {
   public function setTargetElement(FeedsSource $source, $target_contact, $target_element, $value) {
     switch ($target_element) {
       case 'created':
-        $target_contact->created = feeds_to_unixtime($value, REQUEST_TIME);
+        $target_contact->created = feeds_to_unixtime($value, \Drupal::time()->getRequestTime());
         break;
 
       case 'feeds_source':
@@ -273,12 +275,16 @@ class CRMFeedsContactProcessor extends FeedsProcessor {
     foreach ($this->uniqueTargets($source, $result) as $target => $value) {
       switch ($target) {
         case 'contact_id':
-          $contact_id = db_query("SELECT contact_id FROM {crm_core_contact} WHERE contact_id = :contact_id", [':contact_id' => $value])->fetchField();
+          // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+          // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+          $contact_id = \Drupal::database()->query("SELECT contact_id FROM {crm_core_contact} WHERE contact_id = :contact_id", [':contact_id' => $value])->fetchField();
           break;
 
         case 'feeds_source':
           if ($id = feeds_get_importer_id($this->config['contact_type'])) {
-            $contact_id = db_query("SELECT fs.feed_contact_id FROM {crm_core_contact} c JOIN {feeds_source} fs ON c.contact_id = fs.feed_contact_id WHERE fs.id = :id AND fs.source = :source", [':id' => $id, ':source' => $value])->fetchField();
+            // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+            // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+            $contact_id = \Drupal::database()->query("SELECT fs.feed_contact_id FROM {crm_core_contact} c JOIN {feeds_source} fs ON c.contact_id = fs.feed_contact_id WHERE fs.id = :id AND fs.source = :source", [':id' => $id, ':source' => $value])->fetchField();
           }
           break;
       }
