[parsing] modules/contrib/lang_dropdown/lang_dropdown.module
[refactoring] modules/contrib/lang_dropdown/lang_dropdown.module
[post rectors] modules/contrib/lang_dropdown/lang_dropdown.module
[print] modules/contrib/lang_dropdown/lang_dropdown.module
[refactoring] modules/contrib/lang_dropdown/lang_dropdown.module
[post rectors] modules/contrib/lang_dropdown/lang_dropdown.module
[print] modules/contrib/lang_dropdown/lang_dropdown.module
[parsing] modules/contrib/lang_dropdown/src/Form/LanguageDropdownForm.php
[refactoring] modules/contrib/lang_dropdown/src/Form/LanguageDropdownForm.php
[post rectors] modules/contrib/lang_dropdown/src/Form/LanguageDropdownForm.php
[print] modules/contrib/lang_dropdown/src/Form/LanguageDropdownForm.php
[refactoring] modules/contrib/lang_dropdown/src/Form/LanguageDropdownForm.php
[post rectors] modules/contrib/lang_dropdown/src/Form/LanguageDropdownForm.php
[print] modules/contrib/lang_dropdown/src/Form/LanguageDropdownForm.php
[parsing] modules/contrib/lang_dropdown/src/Plugin/Block/LanguageDropdownBlock.php
[refactoring] modules/contrib/lang_dropdown/src/Plugin/Block/LanguageDropdownBlock.php
[post rectors] modules/contrib/lang_dropdown/src/Plugin/Block/LanguageDropdownBlock.php
[print] modules/contrib/lang_dropdown/src/Plugin/Block/LanguageDropdownBlock.php
[parsing] modules/contrib/lang_dropdown/src/Plugin/Derivative/LanguageDropdownBlock.php
[refactoring] modules/contrib/lang_dropdown/src/Plugin/Derivative/LanguageDropdownBlock.php
[post rectors] modules/contrib/lang_dropdown/src/Plugin/Derivative/LanguageDropdownBlock.php
[print] modules/contrib/lang_dropdown/src/Plugin/Derivative/LanguageDropdownBlock.php
[parsing] modules/contrib/lang_dropdown/tests/src/Functional/LanguageSwitchingTest.php
[refactoring] modules/contrib/lang_dropdown/tests/src/Functional/LanguageSwitchingTest.php
[post rectors] modules/contrib/lang_dropdown/tests/src/Functional/LanguageSwitchingTest.php
[print] modules/contrib/lang_dropdown/tests/src/Functional/LanguageSwitchingTest.php
[refactoring] modules/contrib/lang_dropdown/tests/src/Functional/LanguageSwitchingTest.php
[post rectors] modules/contrib/lang_dropdown/tests/src/Functional/LanguageSwitchingTest.php
[print] modules/contrib/lang_dropdown/tests/src/Functional/LanguageSwitchingTest.php

3 files with changes
====================

1) modules/contrib/lang_dropdown/tests/src/Functional/LanguageSwitchingTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create and log in user.
@@ @@
     $edit = [
       'predefined_langcode' => 'fr',
     ];
-    $this->drupalPostForm('admin/config/regional/language/add', $edit, t('Add language'));
+    $this->drupalGet('admin/config/regional/language/add');
+    $this->submitForm($edit, t('Add language'));

     // Enable session language detection and selection.
     $edit = [
@@ @@
       'language_interface[enabled][language-url]' => FALSE,
       'language_interface[enabled][language-session]' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/regional/language/detection', $edit, t('Save settings'));
+    $this->drupalGet('admin/config/regional/language/detection');
+    $this->submitForm($edit, t('Save settings'));

     // Enable the language switching block.
     $this->placeBlock('language_dropdown_block:' . LanguageInterface::TYPE_INTERFACE, [
@@ @@
     // Go to the homepage.
     $this->drupalGet('');
     // Make sure default language selected is English.
-    $this->assertEqual(1, count($this->cssSelect('#edit-lang-dropdown-select option[selected=selected]:contains(English)')));
+    $this->assertEquals(1, count($this->cssSelect('#edit-lang-dropdown-select option[selected=selected]:contains(English)')));
     // Go to the homepage for French language.
     $this->drupalGet('', ['query' => ['language' => 'fr']]);
     // Make sure default language selected is French.
-    $this->assertEqual(1, count($this->cssSelect('#edit-lang-dropdown-select option[selected=selected]:contains(French)')));
+    $this->assertEquals(1, count($this->cssSelect('#edit-lang-dropdown-select option[selected=selected]:contains(French)')));
     // @todo Add Ajax testing of language switching.
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/lang_dropdown/src/Form/LanguageDropdownForm.php:192

    ---------- begin diff ----------
@@ @@
       if (isset($this->settings['widget']) && $this->moduleHandler->moduleExists('languageicons')) {
         $languageicons_config = $this->configFactory()->get('languageicons.settings');
         $languageicons_path = $languageicons_config->get('path');
-        $js_settings['languageicons'][$lang_code] = file_create_url(str_replace('*', $lang_code, $languageicons_path));
+        $js_settings['languageicons'][$lang_code] = \Drupal::service('file_url_generator')->generateAbsoluteString(str_replace('*', $lang_code, $languageicons_path));
       }
     }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/lang_dropdown/lang_dropdown.module:75

    ---------- begin diff ----------
@@ @@
  * Helper function to handle msdropdown skins data.
  */
 function _lang_dropdown_get_msdropdown_skins() {
-  $module_path = drupal_get_path('module', 'lang_dropdown');
+  $module_path = \Drupal::service('extension.list.module')->getPath('lang_dropdown');
   return [
     'ldsSkin' => [
       'text' => t('Default skin'),
@@ @@
  * Helper function to handle ddSlick skins data.
  */
 function _lang_dropdown_get_ddslick_skins() {
-  $module_path = drupal_get_path('module', 'lang_dropdown');
+  $module_path = \Drupal::service('extension.list.module')->getPath('lang_dropdown');
   return [
     'ddsDefault' => [
       'text' => t('Default skin'),
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

