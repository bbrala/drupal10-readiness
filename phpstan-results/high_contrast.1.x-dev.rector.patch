diff --git a/src/HighContrastConfigOverride.php b/src/HighContrastConfigOverride.php
index 65c1e40..87538d2 100644
--- a/src/HighContrastConfigOverride.php
+++ b/src/HighContrastConfigOverride.php
@@ -105,7 +105,7 @@ class HighContrastConfigOverride implements ConfigFactoryOverrideInterface {
       // If the default logo is desired, scan the theme dir for a logo-hg file.
       // Not using dependency injection to prevent circular references.
       $theme = \Drupal::theme()->getActiveTheme()->getName();
-      $theme_path = drupal_get_path('theme', $theme);
+      $theme_path = \Drupal::service('extension.list.theme')->getPath($theme);
 
       $candidates = [];
       try {
diff --git a/tests/src/FunctionalJavascript/HighContrastStyleSheetTest.php b/tests/src/FunctionalJavascript/HighContrastStyleSheetTest.php
index 9b8910b..e40ce7a 100644
--- a/tests/src/FunctionalJavascript/HighContrastStyleSheetTest.php
+++ b/tests/src/FunctionalJavascript/HighContrastStyleSheetTest.php
@@ -35,7 +35,7 @@ class HighContrastStyleSheetTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Store the values for later comparison.
@@ -61,7 +61,7 @@ class HighContrastStyleSheetTest extends WebDriverTestBase {
     // Assert all defined colors are present in the file.
     $css_file = file_get_contents($file_path);
     foreach ($this->values as $definition => $color) {
-      $this->assertContains($color, $css_file, "Color $color has been applied for $definition.");
+      $this->assertStringContainsString($color, $css_file, "Color $color has been applied for $definition.");
     }
 
     // Generate some new values.
@@ -76,11 +76,11 @@ class HighContrastStyleSheetTest extends WebDriverTestBase {
     // Assert all previous colors are gone.
     $css_file = file_get_contents($file_path);
     foreach ($this->values as $definition => $color) {
-      $this->assertNotContains($color, $css_file, "Color $color has not been applied for $definition.");
+      $this->assertStringNotContainsString($color, $css_file, "Color $color has not been applied for $definition.");
     }
     // Assert all new colors are present.
     foreach ($new_values as $definition => $color) {
-      $this->assertContains($color, $css_file, "Color $color has been applied for $definition.");
+      $this->assertStringContainsString($color, $css_file, "Color $color has been applied for $definition.");
     }
   }
 
