[parsing] modules/contrib/jsonapi_menu_items/src/Plugin/Derivative/MenuItemsLinkProviderDeriver.php
[refactoring] modules/contrib/jsonapi_menu_items/src/Plugin/Derivative/MenuItemsLinkProviderDeriver.php
[post rectors] modules/contrib/jsonapi_menu_items/src/Plugin/Derivative/MenuItemsLinkProviderDeriver.php
[print] modules/contrib/jsonapi_menu_items/src/Plugin/Derivative/MenuItemsLinkProviderDeriver.php
[parsing] modules/contrib/jsonapi_menu_items/src/Plugin/jsonapi_hypermedia/LinkProvider/MenuItemsLinkProvider.php
[refactoring] modules/contrib/jsonapi_menu_items/src/Plugin/jsonapi_hypermedia/LinkProvider/MenuItemsLinkProvider.php
[post rectors] modules/contrib/jsonapi_menu_items/src/Plugin/jsonapi_hypermedia/LinkProvider/MenuItemsLinkProvider.php
[print] modules/contrib/jsonapi_menu_items/src/Plugin/jsonapi_hypermedia/LinkProvider/MenuItemsLinkProvider.php
[parsing] modules/contrib/jsonapi_menu_items/src/Resource/MenuItemsResource.php
[refactoring] modules/contrib/jsonapi_menu_items/src/Resource/MenuItemsResource.php
[post rectors] modules/contrib/jsonapi_menu_items/src/Resource/MenuItemsResource.php
[print] modules/contrib/jsonapi_menu_items/src/Resource/MenuItemsResource.php
[parsing] modules/contrib/jsonapi_menu_items/src/Routing/Routes.php
[refactoring] modules/contrib/jsonapi_menu_items/src/Routing/Routes.php
[post rectors] modules/contrib/jsonapi_menu_items/src/Routing/Routes.php
[print] modules/contrib/jsonapi_menu_items/src/Routing/Routes.php
[parsing] modules/contrib/jsonapi_menu_items/tests/src/Functional/HypermediaIntegrationTest.php
[refactoring] modules/contrib/jsonapi_menu_items/tests/src/Functional/HypermediaIntegrationTest.php
[post rectors] modules/contrib/jsonapi_menu_items/tests/src/Functional/HypermediaIntegrationTest.php
[print] modules/contrib/jsonapi_menu_items/tests/src/Functional/HypermediaIntegrationTest.php
[parsing] modules/contrib/jsonapi_menu_items/tests/src/Functional/JsonapiMenuItemsTest.php
[refactoring] modules/contrib/jsonapi_menu_items/tests/src/Functional/JsonapiMenuItemsTest.php
[post rectors] modules/contrib/jsonapi_menu_items/tests/src/Functional/JsonapiMenuItemsTest.php
[print] modules/contrib/jsonapi_menu_items/tests/src/Functional/JsonapiMenuItemsTest.php
[refactoring] modules/contrib/jsonapi_menu_items/tests/src/Functional/JsonapiMenuItemsTest.php
[post rectors] modules/contrib/jsonapi_menu_items/tests/src/Functional/JsonapiMenuItemsTest.php
[print] modules/contrib/jsonapi_menu_items/tests/src/Functional/JsonapiMenuItemsTest.php

1 file with changes
===================

1) modules/contrib/jsonapi_menu_items/tests/src/Functional/JsonapiMenuItemsTest.php:83

    ---------- begin diff ----------
@@ @@
       '%title' => $link_title,
       '%base_path' => Url::fromRoute('<front>')->toString(),
     ]));
-    $this->assertEqual($expected_items['data'], $content['data']);
+    $this->assertEquals($expected_items['data'], $content['data']);

     // Assert response is cached with appropriate cacheability metadata such
     // that re-saving the link with a new title yields the new title in a
@@ @@
     $match = array_filter($content['data'], function (array $item) use ($content_link) {
       return $item['id'] === 'menu_link_content:' . $content_link->uuid();
     });
-    $this->assertEqual($new_title, reset($match)['attributes']['title']);
+    $this->assertEquals($new_title, reset($match)['attributes']['title']);

     // Add another link and ensue cacheability metadata ensures the new item
     // appears in a subsequent request.
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 1 file has been changed by Rector                                         

