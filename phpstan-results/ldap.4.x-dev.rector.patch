diff --git a/ldap_authentication/src/Routing/EmailTemplateService.php b/ldap_authentication/src/Routing/EmailTemplateService.php
index d9195873..f7789b64 100644
--- a/ldap_authentication/src/Routing/EmailTemplateService.php
+++ b/ldap_authentication/src/Routing/EmailTemplateService.php
@@ -36,10 +36,10 @@ class EmailTemplateService implements EventSubscriberInterface {
   /**
    * Check for template if enabled.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   Response event.
    */
-  public function checkTemplate(GetResponseEvent $event): void {
+  public function checkTemplate(\Symfony\Component\HttpKernel\Event\RequestEvent $event): void {
     if ($this->config->get('emailTemplateUsagePromptUser') === TRUE) {
       $this->checkForEmailTemplate();
     }
diff --git a/ldap_user/ldap_user.module b/ldap_user/ldap_user.module
index c7bac801..539ea52c 100644
--- a/ldap_user/ldap_user.module
+++ b/ldap_user/ldap_user.module
@@ -107,7 +107,7 @@ function ldap_user_user_insert($account) {
     $dispatcher->dispatch($event, LdapNewUserCreatedEvent::EVENT_NAME);
   }
   else {
-    $dispatcher->dispatch(LdapNewUserCreatedEvent::EVENT_NAME, $event);
+    $dispatcher->dispatch($event, LdapNewUserCreatedEvent::EVENT_NAME);
   }
 }
 
@@ -138,7 +138,7 @@ function ldap_user_user_update($account) {
     $dispatcher->dispatch($event, LdapUserUpdatedEvent::EVENT_NAME);
   }
   else {
-    $dispatcher->dispatch(LdapUserUpdatedEvent::EVENT_NAME, $event);
+    $dispatcher->dispatch($event, LdapUserUpdatedEvent::EVENT_NAME);
   }
 }
 
@@ -153,7 +153,7 @@ function ldap_user_user_delete($account) {
     $dispatcher->dispatch($event, LdapUserDeletedEvent::EVENT_NAME);
   }
   else {
-    $dispatcher->dispatch(LdapUserDeletedEvent::EVENT_NAME, $event);
+    $dispatcher->dispatch($event, LdapUserDeletedEvent::EVENT_NAME);
   }
 }
 
diff --git a/ldap_user/src/Processor/DrupalUserProcessor.php b/ldap_user/src/Processor/DrupalUserProcessor.php
index f0766c65..6d3f7b8f 100644
--- a/ldap_user/src/Processor/DrupalUserProcessor.php
+++ b/ldap_user/src/Processor/DrupalUserProcessor.php
@@ -445,7 +445,7 @@ class DrupalUserProcessor implements LdapUserAttributesInterface {
       $this->eventDispatcher->dispatch($event, LdapUserLoginEvent::EVENT_NAME);
     }
     else {
-      $this->eventDispatcher->dispatch(LdapUserLoginEvent::EVENT_NAME, $event);
+      $this->eventDispatcher->dispatch($event, LdapUserLoginEvent::EVENT_NAME);
     }
   }
 
@@ -566,7 +566,7 @@ class DrupalUserProcessor implements LdapUserAttributesInterface {
       $this->fileSystem->mkdir($fullDirectoryPath, NULL, TRUE);
     }
 
-    $managed_file = file_save_data($ldapUserPicture, $fullDirectoryPath . '/' . $fileName . '.' . $extension);
+    $managed_file = \Drupal::service('file.repository')->writeData($ldapUserPicture, $fullDirectoryPath . '/' . $fileName . '.' . $extension);
 
     $validators = [
       'file_validate_is_image' => [],
diff --git a/ldap_user/tests/src/Kernel/DrupalUserProcessorTest.php b/ldap_user/tests/src/Kernel/DrupalUserProcessorTest.php
index 64fdbea7..e09e401d 100644
--- a/ldap_user/tests/src/Kernel/DrupalUserProcessorTest.php
+++ b/ldap_user/tests/src/Kernel/DrupalUserProcessorTest.php
@@ -22,6 +22,7 @@ use Symfony\Component\Ldap\Entry;
  */
 class DrupalUserProcessorTest extends EntityKernelTestBase implements LdapUserAttributesInterface {
 
+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * {@inheritdoc}
    */
diff --git a/ldap_user/tests/src/Kernel/LdapEntryProvisionTest.php b/ldap_user/tests/src/Kernel/LdapEntryProvisionTest.php
index 1366f08d..9500a431 100644
--- a/ldap_user/tests/src/Kernel/LdapEntryProvisionTest.php
+++ b/ldap_user/tests/src/Kernel/LdapEntryProvisionTest.php
@@ -133,9 +133,7 @@ class LdapEntryProvisionTest extends KernelTestBase {
   public function testLoginCreate(): void {
     /** @var \Drupal\ldap_servers_dummy\FakeLdap $ldap */
     $ldap = $this->container->get('ldap.bridge')->get();
-    $response = $this->getMockBuilder(EntryManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(EntryManager::class);
     $response
       ->expects(self::once())
       ->method('add')
