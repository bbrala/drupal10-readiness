[parsing] modules/contrib/json_feed/json_feed.module
[refactoring] modules/contrib/json_feed/json_feed.module
[post rectors] modules/contrib/json_feed/json_feed.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/json_feed/json_feed.module
[parsing] modules/contrib/json_feed/src/Plugin/views/display/JsonFeed.php
[refactoring] modules/contrib/json_feed/src/Plugin/views/display/JsonFeed.php
[post rectors] modules/contrib/json_feed/src/Plugin/views/display/JsonFeed.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/json_feed/src/Plugin/views/display/JsonFeed.php
[parsing] modules/contrib/json_feed/src/Plugin/views/row/JsonFeedFields.php
[refactoring] modules/contrib/json_feed/src/Plugin/views/row/JsonFeedFields.php
[post rectors] modules/contrib/json_feed/src/Plugin/views/row/JsonFeedFields.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/json_feed/src/Plugin/views/row/JsonFeedFields.php
[parsing] modules/contrib/json_feed/src/Plugin/views/style/JsonFeedSerializer.php
[refactoring] modules/contrib/json_feed/src/Plugin/views/style/JsonFeedSerializer.php
[post rectors] modules/contrib/json_feed/src/Plugin/views/style/JsonFeedSerializer.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/json_feed/src/Plugin/views/style/JsonFeedSerializer.php
[parsing] modules/contrib/json_feed/tests/src/Functional/DisplayJsonFeedTest.php
[refactoring] modules/contrib/json_feed/tests/src/Functional/DisplayJsonFeedTest.php
[post rectors] modules/contrib/json_feed/tests/src/Functional/DisplayJsonFeedTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/json_feed/tests/src/Functional/DisplayJsonFeedTest.php
[refactoring] modules/contrib/json_feed/tests/src/Functional/DisplayJsonFeedTest.php
[post rectors] modules/contrib/json_feed/tests/src/Functional/DisplayJsonFeedTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/json_feed/tests/src/Functional/DisplayJsonFeedTest.php

1 file with changes
===================

1) modules/contrib/json_feed/tests/src/Functional/DisplayJsonFeedTest.php:75

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp();

     ViewTestData::createTestViews(get_class($this), ['json_feed_test_views']);
@@ @@
    */
   public function testFeedOutput() {
     $json_response = Json::decode($this->drupalGet($this->feedPath, ['query' => ['_format' => 'json']]));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->assertTrue(array_key_exists('version', $json_response), 'JSON Feed version present.');
-    $this->assertEqual('https://jsonfeed.org/version/1', $json_response['version'], 'JSON Feed version set correctly.');
+    $this->assertEquals('https://jsonfeed.org/version/1', $json_response['version'], 'JSON Feed version set correctly.');

     $this->assertTrue(array_key_exists('title', $json_response), 'JSON Feed title present.');
-    $this->assertEqual('test_display_json_feed', $json_response['title'], 'JSON Feed title set correctly.');
+    $this->assertEquals('test_display_json_feed', $json_response['title'], 'JSON Feed title set correctly.');

     $this->assertTrue(array_key_exists('description', $json_response), 'JSON Feed description present.');
-    $this->assertEqual('Test feed description.', $json_response['description'], 'JSON Feed description set correctly.');
+    $this->assertEquals('Test feed description.', $json_response['description'], 'JSON Feed description set correctly.');

     $this->assertTrue(array_key_exists('home_page_url', $json_response), 'JSON Feed home_page_url present.');
     // @TODO: Implement test for home_page_url attribute value.
@@ @@

     $this->assertTrue(array_key_exists('favicon', $json_response), 'JSON Feed favicon present.');
     $favicon_path = Url::fromUserInput(theme_get_setting('favicon.url'))->setAbsolute()->toString();
-    $this->assertEqual($favicon_path, $json_response['favicon'], 'JSON Feed favicon set correctly.');
+    $this->assertEquals($favicon_path, $json_response['favicon'], 'JSON Feed favicon set correctly.');

     $this->assertTrue(array_key_exists('expired', $json_response), 'JSON Feed expired attribute present.');
-    $this->assertEqual(FALSE, $json_response['expired'], 'JSON Feed expired attribute set to FALSE.');
+    $this->assertEquals(FALSE, $json_response['expired'], 'JSON Feed expired attribute set to FALSE.');
   }

   /**
@@ @@
    */
   public function testFeedItems() {
     $json_response = Json::decode($this->drupalGet($this->feedPath, ['query' => ['_format' => 'json']]));
-    $this->assertEqual($this->expectedFirstPageItems(), count($json_response['items']), 'JSON Feed returned ' . $this->expectedFirstPageItems() . ' items.');
+    $this->assertEquals($this->expectedFirstPageItems(), count($json_response['items']), 'JSON Feed returned ' . $this->expectedFirstPageItems() . ' items.');
     $item = $json_response['items'][0];

     $this->assertTrue(array_key_exists('date_published', $item), 'JSON Feed item date_published attribute present.');
@@ @@
     $this->assertTrue(array_key_exists('author', $item), 'JSON Feed item author attribute present.');
     $author_info = $item['author'];
     $this->assertTrue(array_key_exists('name', $author_info), 'JSON Feed item author name attribute present.');
-    $this->assertEqual(self::ADMIN_NAME, $author_info['name'], 'JSON Feed item author name set correctly.');
+    $this->assertEquals(self::ADMIN_NAME, $author_info['name'], 'JSON Feed item author name set correctly.');
   }

   /**
@@ @@
     $json_response = Json::decode($this->drupalGet($this->feedPath, ['query' => ['_format' => 'json']]));
     array_walk_recursive($json_response, function ($item, $key) {
       if (!is_array($item) && !in_array($key, $this->htmlAllowedAttributes)) {
-        $this->assertEqual(strip_tags($item), $item, 'JSON Feed item: \'' . $key . '\' does not contain HTML.');
+        $this->assertEquals(strip_tags($item), $item, 'JSON Feed item: \'' . $key . '\' does not contain HTML.');
       }
     });
   }
@@ @@
     else {
       $this->assertFalse(array_key_exists('next_url', $feed_content), 'JSON Feed next_url attribute not present.');
     }
-    $this->assertEqual($this->expectedFirstPageItems(), count($feed_content['items']), 'JSON Feed first page returned ' . $this->expectedFirstPageItems() . ' items.');
+    $this->assertEquals($this->expectedFirstPageItems(), count($feed_content['items']), 'JSON Feed first page returned ' . $this->expectedFirstPageItems() . ' items.');
   }

   /**
@@ @@

     $this->assertFalse(array_key_exists('next_url', $feed_content), 'JSON Feed next_url attribute not present on last page.');
     $expectedLastPageItemsCount = $this->nodesToCreate % $this->feedItemsPerPage;
-    $this->assertEqual($expectedLastPageItemsCount, count($feed_content['items']), 'JSON Feed last page returned ' . $expectedLastPageItemsCount . ' items.');
+    $this->assertEquals($expectedLastPageItemsCount, count($feed_content['items']), 'JSON Feed last page returned ' . $expectedLastPageItemsCount . ' items.');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertResponseRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 1 file has been changed by Rector                                         

