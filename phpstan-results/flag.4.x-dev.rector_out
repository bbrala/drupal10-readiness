[parsing] modules/contrib/flag/flag.api.php
[refactoring] modules/contrib/flag/flag.api.php
[post rectors] modules/contrib/flag/flag.api.php
[print] modules/contrib/flag/flag.api.php
[parsing] modules/contrib/flag/flag.install
[refactoring] modules/contrib/flag/flag.install
[post rectors] modules/contrib/flag/flag.install
[print] modules/contrib/flag/flag.install
[parsing] modules/contrib/flag/flag.module
[refactoring] modules/contrib/flag/flag.module
[post rectors] modules/contrib/flag/flag.module
[print] modules/contrib/flag/flag.module
[parsing] modules/contrib/flag/flag.post_update.php
[refactoring] modules/contrib/flag/flag.post_update.php
[post rectors] modules/contrib/flag/flag.post_update.php
[print] modules/contrib/flag/flag.post_update.php
[parsing] modules/contrib/flag/flag.tokens.inc
[refactoring] modules/contrib/flag/flag.tokens.inc
[post rectors] modules/contrib/flag/flag.tokens.inc
[print] modules/contrib/flag/flag.tokens.inc
[parsing] modules/contrib/flag/flag.views.inc
[refactoring] modules/contrib/flag/flag.views.inc
[post rectors] modules/contrib/flag/flag.views.inc
[print] modules/contrib/flag/flag.views.inc
[parsing] modules/contrib/flag/flag.views_execution.inc
[refactoring] modules/contrib/flag/flag.views_execution.inc
[post rectors] modules/contrib/flag/flag.views_execution.inc
[print] modules/contrib/flag/flag.views_execution.inc
[parsing] modules/contrib/flag/modules/flag_bookmark/flag_bookmark.module
[refactoring] modules/contrib/flag/modules/flag_bookmark/flag_bookmark.module
[post rectors] modules/contrib/flag/modules/flag_bookmark/flag_bookmark.module
[print] modules/contrib/flag/modules/flag_bookmark/flag_bookmark.module
[parsing] modules/contrib/flag/modules/flag_bookmark/tests/src/FunctionalJavascript/FlagBookmarkUITest.php
[refactoring] modules/contrib/flag/modules/flag_bookmark/tests/src/FunctionalJavascript/FlagBookmarkUITest.php
[post rectors] modules/contrib/flag/modules/flag_bookmark/tests/src/FunctionalJavascript/FlagBookmarkUITest.php
[print] modules/contrib/flag/modules/flag_bookmark/tests/src/FunctionalJavascript/FlagBookmarkUITest.php
[refactoring] modules/contrib/flag/modules/flag_bookmark/tests/src/FunctionalJavascript/FlagBookmarkUITest.php
[post rectors] modules/contrib/flag/modules/flag_bookmark/tests/src/FunctionalJavascript/FlagBookmarkUITest.php
[print] modules/contrib/flag/modules/flag_bookmark/tests/src/FunctionalJavascript/FlagBookmarkUITest.php
[parsing] modules/contrib/flag/modules/flag_bookmark/tests/src/Kernel/FlagBookmarkInstallUninstallTest.php
[refactoring] modules/contrib/flag/modules/flag_bookmark/tests/src/Kernel/FlagBookmarkInstallUninstallTest.php
[post rectors] modules/contrib/flag/modules/flag_bookmark/tests/src/Kernel/FlagBookmarkInstallUninstallTest.php
[print] modules/contrib/flag/modules/flag_bookmark/tests/src/Kernel/FlagBookmarkInstallUninstallTest.php
[parsing] modules/contrib/flag/modules/flag_count/flag_count.module
[refactoring] modules/contrib/flag/modules/flag_count/flag_count.module
[post rectors] modules/contrib/flag/modules/flag_count/flag_count.module
[print] modules/contrib/flag/modules/flag_count/flag_count.module
[parsing] modules/contrib/flag/modules/flag_count/src/Plugin/ActionLink/CountLink.php
[refactoring] modules/contrib/flag/modules/flag_count/src/Plugin/ActionLink/CountLink.php
[post rectors] modules/contrib/flag/modules/flag_count/src/Plugin/ActionLink/CountLink.php
[print] modules/contrib/flag/modules/flag_count/src/Plugin/ActionLink/CountLink.php
[parsing] modules/contrib/flag/modules/flag_follower/flag_follower.module
[refactoring] modules/contrib/flag/modules/flag_follower/flag_follower.module
[post rectors] modules/contrib/flag/modules/flag_follower/flag_follower.module
[print] modules/contrib/flag/modules/flag_follower/flag_follower.module
[parsing] modules/contrib/flag/modules/flag_follower/tests/src/Functional/FlagFollowerUITest.php
[refactoring] modules/contrib/flag/modules/flag_follower/tests/src/Functional/FlagFollowerUITest.php
[post rectors] modules/contrib/flag/modules/flag_follower/tests/src/Functional/FlagFollowerUITest.php
[print] modules/contrib/flag/modules/flag_follower/tests/src/Functional/FlagFollowerUITest.php
[refactoring] modules/contrib/flag/modules/flag_follower/tests/src/Functional/FlagFollowerUITest.php
[post rectors] modules/contrib/flag/modules/flag_follower/tests/src/Functional/FlagFollowerUITest.php
[print] modules/contrib/flag/modules/flag_follower/tests/src/Functional/FlagFollowerUITest.php
[parsing] modules/contrib/flag/modules/flag_follower/tests/src/Kernel/FlagFollowerInstallUninstallTest.php
[refactoring] modules/contrib/flag/modules/flag_follower/tests/src/Kernel/FlagFollowerInstallUninstallTest.php
[post rectors] modules/contrib/flag/modules/flag_follower/tests/src/Kernel/FlagFollowerInstallUninstallTest.php
[print] modules/contrib/flag/modules/flag_follower/tests/src/Kernel/FlagFollowerInstallUninstallTest.php
[parsing] modules/contrib/flag/src/Access/CsrfAccessCheck.php
[refactoring] modules/contrib/flag/src/Access/CsrfAccessCheck.php
[post rectors] modules/contrib/flag/src/Access/CsrfAccessCheck.php
[print] modules/contrib/flag/src/Access/CsrfAccessCheck.php
[parsing] modules/contrib/flag/src/Access/FlagAccessCheck.php
[refactoring] modules/contrib/flag/src/Access/FlagAccessCheck.php
[post rectors] modules/contrib/flag/src/Access/FlagAccessCheck.php
[print] modules/contrib/flag/src/Access/FlagAccessCheck.php
[parsing] modules/contrib/flag/src/Access/UnFlagAccessCheck.php
[refactoring] modules/contrib/flag/src/Access/UnFlagAccessCheck.php
[post rectors] modules/contrib/flag/src/Access/UnFlagAccessCheck.php
[print] modules/contrib/flag/src/Access/UnFlagAccessCheck.php
[parsing] modules/contrib/flag/src/ActionLink/ActionLinkPluginManager.php
[refactoring] modules/contrib/flag/src/ActionLink/ActionLinkPluginManager.php
[post rectors] modules/contrib/flag/src/ActionLink/ActionLinkPluginManager.php
[print] modules/contrib/flag/src/ActionLink/ActionLinkPluginManager.php
[parsing] modules/contrib/flag/src/ActionLink/ActionLinkTypeBase.php
[refactoring] modules/contrib/flag/src/ActionLink/ActionLinkTypeBase.php
[post rectors] modules/contrib/flag/src/ActionLink/ActionLinkTypeBase.php
[print] modules/contrib/flag/src/ActionLink/ActionLinkTypeBase.php
[parsing] modules/contrib/flag/src/ActionLink/ActionLinkTypePluginInterface.php
[refactoring] modules/contrib/flag/src/ActionLink/ActionLinkTypePluginInterface.php
[post rectors] modules/contrib/flag/src/ActionLink/ActionLinkTypePluginInterface.php
[print] modules/contrib/flag/src/ActionLink/ActionLinkTypePluginInterface.php
[parsing] modules/contrib/flag/src/Ajax/ActionLinkFlashCommand.php
[refactoring] modules/contrib/flag/src/Ajax/ActionLinkFlashCommand.php
[post rectors] modules/contrib/flag/src/Ajax/ActionLinkFlashCommand.php
[print] modules/contrib/flag/src/Ajax/ActionLinkFlashCommand.php
[parsing] modules/contrib/flag/src/Annotation/ActionLinkType.php
[refactoring] modules/contrib/flag/src/Annotation/ActionLinkType.php
[post rectors] modules/contrib/flag/src/Annotation/ActionLinkType.php
[print] modules/contrib/flag/src/Annotation/ActionLinkType.php
[parsing] modules/contrib/flag/src/Annotation/FlagType.php
[refactoring] modules/contrib/flag/src/Annotation/FlagType.php
[post rectors] modules/contrib/flag/src/Annotation/FlagType.php
[print] modules/contrib/flag/src/Annotation/FlagType.php
[parsing] modules/contrib/flag/src/Controller/ActionLinkController.php
[refactoring] modules/contrib/flag/src/Controller/ActionLinkController.php
[post rectors] modules/contrib/flag/src/Controller/ActionLinkController.php
[print] modules/contrib/flag/src/Controller/ActionLinkController.php
[parsing] modules/contrib/flag/src/Controller/ActionLinkNoJsController.php
[refactoring] modules/contrib/flag/src/Controller/ActionLinkNoJsController.php
[post rectors] modules/contrib/flag/src/Controller/ActionLinkNoJsController.php
[print] modules/contrib/flag/src/Controller/ActionLinkNoJsController.php
[parsing] modules/contrib/flag/src/Controller/FieldEntryFormController.php
[refactoring] modules/contrib/flag/src/Controller/FieldEntryFormController.php
[post rectors] modules/contrib/flag/src/Controller/FieldEntryFormController.php
[print] modules/contrib/flag/src/Controller/FieldEntryFormController.php
[parsing] modules/contrib/flag/src/Controller/FlagListBuilder.php
[refactoring] modules/contrib/flag/src/Controller/FlagListBuilder.php
[post rectors] modules/contrib/flag/src/Controller/FlagListBuilder.php
[print] modules/contrib/flag/src/Controller/FlagListBuilder.php
[parsing] modules/contrib/flag/src/Entity/Flag.php
[refactoring] modules/contrib/flag/src/Entity/Flag.php
[post rectors] modules/contrib/flag/src/Entity/Flag.php
[print] modules/contrib/flag/src/Entity/Flag.php
[parsing] modules/contrib/flag/src/Entity/Flagging.php
[refactoring] modules/contrib/flag/src/Entity/Flagging.php
[post rectors] modules/contrib/flag/src/Entity/Flagging.php
[print] modules/contrib/flag/src/Entity/Flagging.php
[parsing] modules/contrib/flag/src/Entity/Storage/FlaggingStorage.php
[refactoring] modules/contrib/flag/src/Entity/Storage/FlaggingStorage.php
[post rectors] modules/contrib/flag/src/Entity/Storage/FlaggingStorage.php
[print] modules/contrib/flag/src/Entity/Storage/FlaggingStorage.php
[parsing] modules/contrib/flag/src/Entity/Storage/FlaggingStorageInterface.php
[refactoring] modules/contrib/flag/src/Entity/Storage/FlaggingStorageInterface.php
[post rectors] modules/contrib/flag/src/Entity/Storage/FlaggingStorageInterface.php
[print] modules/contrib/flag/src/Entity/Storage/FlaggingStorageInterface.php
[parsing] modules/contrib/flag/src/Entity/Storage/FlaggingStorageSchema.php
[refactoring] modules/contrib/flag/src/Entity/Storage/FlaggingStorageSchema.php
[post rectors] modules/contrib/flag/src/Entity/Storage/FlaggingStorageSchema.php
[print] modules/contrib/flag/src/Entity/Storage/FlaggingStorageSchema.php
[parsing] modules/contrib/flag/src/Event/FlagEventBase.php
[refactoring] modules/contrib/flag/src/Event/FlagEventBase.php
[post rectors] modules/contrib/flag/src/Event/FlagEventBase.php
[print] modules/contrib/flag/src/Event/FlagEventBase.php
[refactoring] modules/contrib/flag/src/Event/FlagEventBase.php
[post rectors] modules/contrib/flag/src/Event/FlagEventBase.php
[print] modules/contrib/flag/src/Event/FlagEventBase.php
[parsing] modules/contrib/flag/src/Event/FlagEvents.php
[refactoring] modules/contrib/flag/src/Event/FlagEvents.php
[post rectors] modules/contrib/flag/src/Event/FlagEvents.php
[print] modules/contrib/flag/src/Event/FlagEvents.php
[parsing] modules/contrib/flag/src/Event/FlaggingEvent.php
[refactoring] modules/contrib/flag/src/Event/FlaggingEvent.php
[post rectors] modules/contrib/flag/src/Event/FlaggingEvent.php
[print] modules/contrib/flag/src/Event/FlaggingEvent.php
[refactoring] modules/contrib/flag/src/Event/FlaggingEvent.php
[post rectors] modules/contrib/flag/src/Event/FlaggingEvent.php
[print] modules/contrib/flag/src/Event/FlaggingEvent.php
[parsing] modules/contrib/flag/src/Event/UnflaggingEvent.php
[refactoring] modules/contrib/flag/src/Event/UnflaggingEvent.php
[post rectors] modules/contrib/flag/src/Event/UnflaggingEvent.php
[print] modules/contrib/flag/src/Event/UnflaggingEvent.php
[refactoring] modules/contrib/flag/src/Event/UnflaggingEvent.php
[post rectors] modules/contrib/flag/src/Event/UnflaggingEvent.php
[print] modules/contrib/flag/src/Event/UnflaggingEvent.php
[parsing] modules/contrib/flag/src/FlagCountManager.php
[refactoring] modules/contrib/flag/src/FlagCountManager.php
[post rectors] modules/contrib/flag/src/FlagCountManager.php
[print] modules/contrib/flag/src/FlagCountManager.php
[parsing] modules/contrib/flag/src/FlagCountManagerInterface.php
[refactoring] modules/contrib/flag/src/FlagCountManagerInterface.php
[post rectors] modules/contrib/flag/src/FlagCountManagerInterface.php
[print] modules/contrib/flag/src/FlagCountManagerInterface.php
[parsing] modules/contrib/flag/src/FlagInterface.php
[refactoring] modules/contrib/flag/src/FlagInterface.php
[post rectors] modules/contrib/flag/src/FlagInterface.php
[print] modules/contrib/flag/src/FlagInterface.php
[parsing] modules/contrib/flag/src/FlagLinkBuilder.php
[refactoring] modules/contrib/flag/src/FlagLinkBuilder.php
[post rectors] modules/contrib/flag/src/FlagLinkBuilder.php
[print] modules/contrib/flag/src/FlagLinkBuilder.php
[parsing] modules/contrib/flag/src/FlagLinkBuilderInterface.php
[refactoring] modules/contrib/flag/src/FlagLinkBuilderInterface.php
[post rectors] modules/contrib/flag/src/FlagLinkBuilderInterface.php
[print] modules/contrib/flag/src/FlagLinkBuilderInterface.php
[parsing] modules/contrib/flag/src/FlagService.php
[refactoring] modules/contrib/flag/src/FlagService.php
[post rectors] modules/contrib/flag/src/FlagService.php
[print] modules/contrib/flag/src/FlagService.php
[parsing] modules/contrib/flag/src/FlagServiceInterface.php
[refactoring] modules/contrib/flag/src/FlagServiceInterface.php
[post rectors] modules/contrib/flag/src/FlagServiceInterface.php
[print] modules/contrib/flag/src/FlagServiceInterface.php
[parsing] modules/contrib/flag/src/FlagServiceProvider.php
[refactoring] modules/contrib/flag/src/FlagServiceProvider.php
[post rectors] modules/contrib/flag/src/FlagServiceProvider.php
[print] modules/contrib/flag/src/FlagServiceProvider.php
[parsing] modules/contrib/flag/src/FlagType/FlagTypeBase.php
[refactoring] modules/contrib/flag/src/FlagType/FlagTypeBase.php
[post rectors] modules/contrib/flag/src/FlagType/FlagTypeBase.php
[print] modules/contrib/flag/src/FlagType/FlagTypeBase.php
[parsing] modules/contrib/flag/src/FlagType/FlagTypePluginInterface.php
[refactoring] modules/contrib/flag/src/FlagType/FlagTypePluginInterface.php
[post rectors] modules/contrib/flag/src/FlagType/FlagTypePluginInterface.php
[print] modules/contrib/flag/src/FlagType/FlagTypePluginInterface.php
[parsing] modules/contrib/flag/src/FlagType/FlagTypePluginManager.php
[refactoring] modules/contrib/flag/src/FlagType/FlagTypePluginManager.php
[post rectors] modules/contrib/flag/src/FlagType/FlagTypePluginManager.php
[print] modules/contrib/flag/src/FlagType/FlagTypePluginManager.php
[parsing] modules/contrib/flag/src/FlaggingInterface.php
[refactoring] modules/contrib/flag/src/FlaggingInterface.php
[post rectors] modules/contrib/flag/src/FlaggingInterface.php
[print] modules/contrib/flag/src/FlaggingInterface.php
[parsing] modules/contrib/flag/src/FlaggingViewsData.php
[refactoring] modules/contrib/flag/src/FlaggingViewsData.php
[post rectors] modules/contrib/flag/src/FlaggingViewsData.php
[print] modules/contrib/flag/src/FlaggingViewsData.php
[parsing] modules/contrib/flag/src/Form/FlagAddForm.php
[refactoring] modules/contrib/flag/src/Form/FlagAddForm.php
[post rectors] modules/contrib/flag/src/Form/FlagAddForm.php
[print] modules/contrib/flag/src/Form/FlagAddForm.php
[parsing] modules/contrib/flag/src/Form/FlagAddPageForm.php
[refactoring] modules/contrib/flag/src/Form/FlagAddPageForm.php
[post rectors] modules/contrib/flag/src/Form/FlagAddPageForm.php
[print] modules/contrib/flag/src/Form/FlagAddPageForm.php
[parsing] modules/contrib/flag/src/Form/FlagConfirmForm.php
[refactoring] modules/contrib/flag/src/Form/FlagConfirmForm.php
[post rectors] modules/contrib/flag/src/Form/FlagConfirmForm.php
[print] modules/contrib/flag/src/Form/FlagConfirmForm.php
[parsing] modules/contrib/flag/src/Form/FlagConfirmFormBase.php
[refactoring] modules/contrib/flag/src/Form/FlagConfirmFormBase.php
[post rectors] modules/contrib/flag/src/Form/FlagConfirmFormBase.php
[print] modules/contrib/flag/src/Form/FlagConfirmFormBase.php
[parsing] modules/contrib/flag/src/Form/FlagDisableConfirmForm.php
[refactoring] modules/contrib/flag/src/Form/FlagDisableConfirmForm.php
[post rectors] modules/contrib/flag/src/Form/FlagDisableConfirmForm.php
[print] modules/contrib/flag/src/Form/FlagDisableConfirmForm.php
[parsing] modules/contrib/flag/src/Form/FlagEditForm.php
[refactoring] modules/contrib/flag/src/Form/FlagEditForm.php
[post rectors] modules/contrib/flag/src/Form/FlagEditForm.php
[print] modules/contrib/flag/src/Form/FlagEditForm.php
[parsing] modules/contrib/flag/src/Form/FlagFormBase.php
[refactoring] modules/contrib/flag/src/Form/FlagFormBase.php
[post rectors] modules/contrib/flag/src/Form/FlagFormBase.php
[print] modules/contrib/flag/src/Form/FlagFormBase.php
[parsing] modules/contrib/flag/src/Form/FlagResetForm.php
[refactoring] modules/contrib/flag/src/Form/FlagResetForm.php
[post rectors] modules/contrib/flag/src/Form/FlagResetForm.php
[print] modules/contrib/flag/src/Form/FlagResetForm.php
[parsing] modules/contrib/flag/src/Form/FlaggingForm.php
[refactoring] modules/contrib/flag/src/Form/FlaggingForm.php
[post rectors] modules/contrib/flag/src/Form/FlaggingForm.php
[print] modules/contrib/flag/src/Form/FlaggingForm.php
[parsing] modules/contrib/flag/src/Form/UnflagConfirmForm.php
[refactoring] modules/contrib/flag/src/Form/UnflagConfirmForm.php
[post rectors] modules/contrib/flag/src/Form/UnflagConfirmForm.php
[print] modules/contrib/flag/src/Form/UnflagConfirmForm.php
[parsing] modules/contrib/flag/src/Form/UnflaggingForm.php
[refactoring] modules/contrib/flag/src/Form/UnflaggingForm.php
[post rectors] modules/contrib/flag/src/Form/UnflaggingForm.php
[print] modules/contrib/flag/src/Form/UnflaggingForm.php
[parsing] modules/contrib/flag/src/Permissions/FlagPermissions.php
[refactoring] modules/contrib/flag/src/Permissions/FlagPermissions.php
[post rectors] modules/contrib/flag/src/Permissions/FlagPermissions.php
[print] modules/contrib/flag/src/Permissions/FlagPermissions.php
[parsing] modules/contrib/flag/src/Plugin/Action/DeleteFlaggingAction.php
[refactoring] modules/contrib/flag/src/Plugin/Action/DeleteFlaggingAction.php
[post rectors] modules/contrib/flag/src/Plugin/Action/DeleteFlaggingAction.php
[print] modules/contrib/flag/src/Plugin/Action/DeleteFlaggingAction.php
[parsing] modules/contrib/flag/src/Plugin/Action/FlagAction.php
[refactoring] modules/contrib/flag/src/Plugin/Action/FlagAction.php
[post rectors] modules/contrib/flag/src/Plugin/Action/FlagAction.php
[print] modules/contrib/flag/src/Plugin/Action/FlagAction.php
[parsing] modules/contrib/flag/src/Plugin/ActionLink/AJAXactionLink.php
[refactoring] modules/contrib/flag/src/Plugin/ActionLink/AJAXactionLink.php
[post rectors] modules/contrib/flag/src/Plugin/ActionLink/AJAXactionLink.php
[print] modules/contrib/flag/src/Plugin/ActionLink/AJAXactionLink.php
[parsing] modules/contrib/flag/src/Plugin/ActionLink/ConfirmForm.php
[refactoring] modules/contrib/flag/src/Plugin/ActionLink/ConfirmForm.php
[post rectors] modules/contrib/flag/src/Plugin/ActionLink/ConfirmForm.php
[print] modules/contrib/flag/src/Plugin/ActionLink/ConfirmForm.php
[parsing] modules/contrib/flag/src/Plugin/ActionLink/FieldEntry.php
[refactoring] modules/contrib/flag/src/Plugin/ActionLink/FieldEntry.php
[post rectors] modules/contrib/flag/src/Plugin/ActionLink/FieldEntry.php
[print] modules/contrib/flag/src/Plugin/ActionLink/FieldEntry.php
[parsing] modules/contrib/flag/src/Plugin/ActionLink/FormEntryInterface.php
[refactoring] modules/contrib/flag/src/Plugin/ActionLink/FormEntryInterface.php
[post rectors] modules/contrib/flag/src/Plugin/ActionLink/FormEntryInterface.php
[print] modules/contrib/flag/src/Plugin/ActionLink/FormEntryInterface.php
[parsing] modules/contrib/flag/src/Plugin/ActionLink/FormEntryTypeBase.php
[refactoring] modules/contrib/flag/src/Plugin/ActionLink/FormEntryTypeBase.php
[post rectors] modules/contrib/flag/src/Plugin/ActionLink/FormEntryTypeBase.php
[print] modules/contrib/flag/src/Plugin/ActionLink/FormEntryTypeBase.php
[parsing] modules/contrib/flag/src/Plugin/ActionLink/Reload.php
[refactoring] modules/contrib/flag/src/Plugin/ActionLink/Reload.php
[post rectors] modules/contrib/flag/src/Plugin/ActionLink/Reload.php
[print] modules/contrib/flag/src/Plugin/ActionLink/Reload.php
[parsing] modules/contrib/flag/src/Plugin/Derivative/EntityFlagActionDeriver.php
[refactoring] modules/contrib/flag/src/Plugin/Derivative/EntityFlagActionDeriver.php
[post rectors] modules/contrib/flag/src/Plugin/Derivative/EntityFlagActionDeriver.php
[print] modules/contrib/flag/src/Plugin/Derivative/EntityFlagActionDeriver.php
[parsing] modules/contrib/flag/src/Plugin/Derivative/EntityFlagTypeDeriver.php
[refactoring] modules/contrib/flag/src/Plugin/Derivative/EntityFlagTypeDeriver.php
[post rectors] modules/contrib/flag/src/Plugin/Derivative/EntityFlagTypeDeriver.php
[print] modules/contrib/flag/src/Plugin/Derivative/EntityFlagTypeDeriver.php
[parsing] modules/contrib/flag/src/Plugin/Field/FlaggedEntityFieldItemList.php
[refactoring] modules/contrib/flag/src/Plugin/Field/FlaggedEntityFieldItemList.php
[post rectors] modules/contrib/flag/src/Plugin/Field/FlaggedEntityFieldItemList.php
[print] modules/contrib/flag/src/Plugin/Field/FlaggedEntityFieldItemList.php
[parsing] modules/contrib/flag/src/Plugin/Flag/CommentFlagType.php
[refactoring] modules/contrib/flag/src/Plugin/Flag/CommentFlagType.php
[post rectors] modules/contrib/flag/src/Plugin/Flag/CommentFlagType.php
[print] modules/contrib/flag/src/Plugin/Flag/CommentFlagType.php
[parsing] modules/contrib/flag/src/Plugin/Flag/EntityFlagType.php
[refactoring] modules/contrib/flag/src/Plugin/Flag/EntityFlagType.php
[post rectors] modules/contrib/flag/src/Plugin/Flag/EntityFlagType.php
[print] modules/contrib/flag/src/Plugin/Flag/EntityFlagType.php
[parsing] modules/contrib/flag/src/Plugin/Flag/UserFlagType.php
[refactoring] modules/contrib/flag/src/Plugin/Flag/UserFlagType.php
[post rectors] modules/contrib/flag/src/Plugin/Flag/UserFlagType.php
[print] modules/contrib/flag/src/Plugin/Flag/UserFlagType.php
[parsing] modules/contrib/flag/src/Plugin/views/field/FlagViewsFlaggedField.php
[refactoring] modules/contrib/flag/src/Plugin/views/field/FlagViewsFlaggedField.php
[post rectors] modules/contrib/flag/src/Plugin/views/field/FlagViewsFlaggedField.php
[print] modules/contrib/flag/src/Plugin/views/field/FlagViewsFlaggedField.php
[parsing] modules/contrib/flag/src/Plugin/views/field/FlagViewsLinkField.php
[refactoring] modules/contrib/flag/src/Plugin/views/field/FlagViewsLinkField.php
[post rectors] modules/contrib/flag/src/Plugin/views/field/FlagViewsLinkField.php
[print] modules/contrib/flag/src/Plugin/views/field/FlagViewsLinkField.php
[parsing] modules/contrib/flag/src/Plugin/views/filter/FlagViewsFilter.php
[refactoring] modules/contrib/flag/src/Plugin/views/filter/FlagViewsFilter.php
[post rectors] modules/contrib/flag/src/Plugin/views/filter/FlagViewsFilter.php
[print] modules/contrib/flag/src/Plugin/views/filter/FlagViewsFilter.php
[parsing] modules/contrib/flag/src/Plugin/views/relationship/FlagViewsRelationship.php
[refactoring] modules/contrib/flag/src/Plugin/views/relationship/FlagViewsRelationship.php
[post rectors] modules/contrib/flag/src/Plugin/views/relationship/FlagViewsRelationship.php
[print] modules/contrib/flag/src/Plugin/views/relationship/FlagViewsRelationship.php
[parsing] modules/contrib/flag/src/Plugin/views/sort/FlagViewsSortFlagged.php
[refactoring] modules/contrib/flag/src/Plugin/views/sort/FlagViewsSortFlagged.php
[post rectors] modules/contrib/flag/src/Plugin/views/sort/FlagViewsSortFlagged.php
[print] modules/contrib/flag/src/Plugin/views/sort/FlagViewsSortFlagged.php
[parsing] modules/contrib/flag/src/TwigExtension/FlagCount.php
[refactoring] modules/contrib/flag/src/TwigExtension/FlagCount.php
[post rectors] modules/contrib/flag/src/TwigExtension/FlagCount.php
[print] modules/contrib/flag/src/TwigExtension/FlagCount.php
[parsing] modules/contrib/flag/tests/modules/flag_event_test/src/EventSubscriber/FlagEvents.php
[refactoring] modules/contrib/flag/tests/modules/flag_event_test/src/EventSubscriber/FlagEvents.php
[post rectors] modules/contrib/flag/tests/modules/flag_event_test/src/EventSubscriber/FlagEvents.php
[print] modules/contrib/flag/tests/modules/flag_event_test/src/EventSubscriber/FlagEvents.php
[parsing] modules/contrib/flag/tests/modules/flag_test_plugins/src/Plugin/Flag/AccessDenied.php
[refactoring] modules/contrib/flag/tests/modules/flag_test_plugins/src/Plugin/Flag/AccessDenied.php
[post rectors] modules/contrib/flag/tests/modules/flag_test_plugins/src/Plugin/Flag/AccessDenied.php
[print] modules/contrib/flag/tests/modules/flag_test_plugins/src/Plugin/Flag/AccessDenied.php
[parsing] modules/contrib/flag/tests/modules/flag_test_plugins/src/Plugin/Flag/AccessGranted.php
[refactoring] modules/contrib/flag/tests/modules/flag_test_plugins/src/Plugin/Flag/AccessGranted.php
[post rectors] modules/contrib/flag/tests/modules/flag_test_plugins/src/Plugin/Flag/AccessGranted.php
[print] modules/contrib/flag/tests/modules/flag_test_plugins/src/Plugin/Flag/AccessGranted.php
[parsing] modules/contrib/flag/tests/src/Functional/AdminUITest.php
[refactoring] modules/contrib/flag/tests/src/Functional/AdminUITest.php
[post rectors] modules/contrib/flag/tests/src/Functional/AdminUITest.php
[print] modules/contrib/flag/tests/src/Functional/AdminUITest.php
[refactoring] modules/contrib/flag/tests/src/Functional/AdminUITest.php
[post rectors] modules/contrib/flag/tests/src/Functional/AdminUITest.php
[print] modules/contrib/flag/tests/src/Functional/AdminUITest.php
[parsing] modules/contrib/flag/tests/src/Functional/AjaxLinkNoJsTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/AjaxLinkNoJsTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/AjaxLinkNoJsTest.php
[print] modules/contrib/flag/tests/src/Functional/AjaxLinkNoJsTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/AjaxLinkNoJsTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/AjaxLinkNoJsTest.php
[print] modules/contrib/flag/tests/src/Functional/AjaxLinkNoJsTest.php
[parsing] modules/contrib/flag/tests/src/Functional/AnonymousFlagTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/AnonymousFlagTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/AnonymousFlagTest.php
[print] modules/contrib/flag/tests/src/Functional/AnonymousFlagTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/AnonymousFlagTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/AnonymousFlagTest.php
[print] modules/contrib/flag/tests/src/Functional/AnonymousFlagTest.php
[parsing] modules/contrib/flag/tests/src/Functional/FlagPermissionsTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/FlagPermissionsTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/FlagPermissionsTest.php
[print] modules/contrib/flag/tests/src/Functional/FlagPermissionsTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/FlagPermissionsTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/FlagPermissionsTest.php
[print] modules/contrib/flag/tests/src/Functional/FlagPermissionsTest.php
[parsing] modules/contrib/flag/tests/src/Functional/FlagTestBase.php
[refactoring] modules/contrib/flag/tests/src/Functional/FlagTestBase.php
[post rectors] modules/contrib/flag/tests/src/Functional/FlagTestBase.php
[print] modules/contrib/flag/tests/src/Functional/FlagTestBase.php
[refactoring] modules/contrib/flag/tests/src/Functional/FlagTestBase.php
[post rectors] modules/contrib/flag/tests/src/Functional/FlagTestBase.php
[print] modules/contrib/flag/tests/src/Functional/FlagTestBase.php
[parsing] modules/contrib/flag/tests/src/Functional/LinkHtmlTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/LinkHtmlTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/LinkHtmlTest.php
[print] modules/contrib/flag/tests/src/Functional/LinkHtmlTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/LinkHtmlTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/LinkHtmlTest.php
[print] modules/contrib/flag/tests/src/Functional/LinkHtmlTest.php
[parsing] modules/contrib/flag/tests/src/Functional/LinkOutputLocationTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/LinkOutputLocationTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/LinkOutputLocationTest.php
[print] modules/contrib/flag/tests/src/Functional/LinkOutputLocationTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/LinkOutputLocationTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/LinkOutputLocationTest.php
[print] modules/contrib/flag/tests/src/Functional/LinkOutputLocationTest.php
[parsing] modules/contrib/flag/tests/src/Functional/LinkOwnershipAccessTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/LinkOwnershipAccessTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/LinkOwnershipAccessTest.php
[print] modules/contrib/flag/tests/src/Functional/LinkOwnershipAccessTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/LinkOwnershipAccessTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/LinkOwnershipAccessTest.php
[print] modules/contrib/flag/tests/src/Functional/LinkOwnershipAccessTest.php
[parsing] modules/contrib/flag/tests/src/Functional/LinkTypeAjaxTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/LinkTypeAjaxTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/LinkTypeAjaxTest.php
[print] modules/contrib/flag/tests/src/Functional/LinkTypeAjaxTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/LinkTypeAjaxTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/LinkTypeAjaxTest.php
[print] modules/contrib/flag/tests/src/Functional/LinkTypeAjaxTest.php
[parsing] modules/contrib/flag/tests/src/Functional/LinkTypeConfirmFormTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/LinkTypeConfirmFormTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/LinkTypeConfirmFormTest.php
[print] modules/contrib/flag/tests/src/Functional/LinkTypeConfirmFormTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/LinkTypeConfirmFormTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/LinkTypeConfirmFormTest.php
[print] modules/contrib/flag/tests/src/Functional/LinkTypeConfirmFormTest.php
[parsing] modules/contrib/flag/tests/src/Functional/LinkTypeFieldEntryTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/LinkTypeFieldEntryTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/LinkTypeFieldEntryTest.php
[print] modules/contrib/flag/tests/src/Functional/LinkTypeFieldEntryTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/LinkTypeFieldEntryTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/LinkTypeFieldEntryTest.php
[print] modules/contrib/flag/tests/src/Functional/LinkTypeFieldEntryTest.php
[parsing] modules/contrib/flag/tests/src/Functional/LinkTypeReloadTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/LinkTypeReloadTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/LinkTypeReloadTest.php
[print] modules/contrib/flag/tests/src/Functional/LinkTypeReloadTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/LinkTypeReloadTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/LinkTypeReloadTest.php
[print] modules/contrib/flag/tests/src/Functional/LinkTypeReloadTest.php
[parsing] modules/contrib/flag/tests/src/Functional/OutputLocationEntityFormAccessTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/OutputLocationEntityFormAccessTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/OutputLocationEntityFormAccessTest.php
[print] modules/contrib/flag/tests/src/Functional/OutputLocationEntityFormAccessTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/OutputLocationEntityFormAccessTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/OutputLocationEntityFormAccessTest.php
[print] modules/contrib/flag/tests/src/Functional/OutputLocationEntityFormAccessTest.php
[parsing] modules/contrib/flag/tests/src/Functional/ShowOnEntityFormTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/ShowOnEntityFormTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/ShowOnEntityFormTest.php
[print] modules/contrib/flag/tests/src/Functional/ShowOnEntityFormTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/ShowOnEntityFormTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/ShowOnEntityFormTest.php
[print] modules/contrib/flag/tests/src/Functional/ShowOnEntityFormTest.php
[parsing] modules/contrib/flag/tests/src/Functional/UserFlagTypeTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/UserFlagTypeTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/UserFlagTypeTest.php
[print] modules/contrib/flag/tests/src/Functional/UserFlagTypeTest.php
[refactoring] modules/contrib/flag/tests/src/Functional/UserFlagTypeTest.php
[post rectors] modules/contrib/flag/tests/src/Functional/UserFlagTypeTest.php
[print] modules/contrib/flag/tests/src/Functional/UserFlagTypeTest.php
[parsing] modules/contrib/flag/tests/src/FunctionalJavascript/AjaxLinkTest.php
[refactoring] modules/contrib/flag/tests/src/FunctionalJavascript/AjaxLinkTest.php
[post rectors] modules/contrib/flag/tests/src/FunctionalJavascript/AjaxLinkTest.php
[print] modules/contrib/flag/tests/src/FunctionalJavascript/AjaxLinkTest.php
[refactoring] modules/contrib/flag/tests/src/FunctionalJavascript/AjaxLinkTest.php
[post rectors] modules/contrib/flag/tests/src/FunctionalJavascript/AjaxLinkTest.php
[print] modules/contrib/flag/tests/src/FunctionalJavascript/AjaxLinkTest.php
[parsing] modules/contrib/flag/tests/src/FunctionalJavascript/FlagContextualLinksTest.php
[refactoring] modules/contrib/flag/tests/src/FunctionalJavascript/FlagContextualLinksTest.php
[post rectors] modules/contrib/flag/tests/src/FunctionalJavascript/FlagContextualLinksTest.php
[print] modules/contrib/flag/tests/src/FunctionalJavascript/FlagContextualLinksTest.php
[refactoring] modules/contrib/flag/tests/src/FunctionalJavascript/FlagContextualLinksTest.php
[post rectors] modules/contrib/flag/tests/src/FunctionalJavascript/FlagContextualLinksTest.php
[print] modules/contrib/flag/tests/src/FunctionalJavascript/FlagContextualLinksTest.php
[parsing] modules/contrib/flag/tests/src/FunctionalJavascript/FlagCountExtensionTest.php
[refactoring] modules/contrib/flag/tests/src/FunctionalJavascript/FlagCountExtensionTest.php
[post rectors] modules/contrib/flag/tests/src/FunctionalJavascript/FlagCountExtensionTest.php
[print] modules/contrib/flag/tests/src/FunctionalJavascript/FlagCountExtensionTest.php
[refactoring] modules/contrib/flag/tests/src/FunctionalJavascript/FlagCountExtensionTest.php
[post rectors] modules/contrib/flag/tests/src/FunctionalJavascript/FlagCountExtensionTest.php
[print] modules/contrib/flag/tests/src/FunctionalJavascript/FlagCountExtensionTest.php
[parsing] modules/contrib/flag/tests/src/FunctionalJavascript/FlagJsTestBase.php
[refactoring] modules/contrib/flag/tests/src/FunctionalJavascript/FlagJsTestBase.php
[post rectors] modules/contrib/flag/tests/src/FunctionalJavascript/FlagJsTestBase.php
[print] modules/contrib/flag/tests/src/FunctionalJavascript/FlagJsTestBase.php
[refactoring] modules/contrib/flag/tests/src/FunctionalJavascript/FlagJsTestBase.php
[post rectors] modules/contrib/flag/tests/src/FunctionalJavascript/FlagJsTestBase.php
[print] modules/contrib/flag/tests/src/FunctionalJavascript/FlagJsTestBase.php
[parsing] modules/contrib/flag/tests/src/FunctionalJavascript/LinkTypeAjaxTest.php
[refactoring] modules/contrib/flag/tests/src/FunctionalJavascript/LinkTypeAjaxTest.php
[post rectors] modules/contrib/flag/tests/src/FunctionalJavascript/LinkTypeAjaxTest.php
[print] modules/contrib/flag/tests/src/FunctionalJavascript/LinkTypeAjaxTest.php
[refactoring] modules/contrib/flag/tests/src/FunctionalJavascript/LinkTypeAjaxTest.php
[post rectors] modules/contrib/flag/tests/src/FunctionalJavascript/LinkTypeAjaxTest.php
[print] modules/contrib/flag/tests/src/FunctionalJavascript/LinkTypeAjaxTest.php
[parsing] modules/contrib/flag/tests/src/FunctionalJavascript/LinkTypeConfirmFormTest.php
[refactoring] modules/contrib/flag/tests/src/FunctionalJavascript/LinkTypeConfirmFormTest.php
[post rectors] modules/contrib/flag/tests/src/FunctionalJavascript/LinkTypeConfirmFormTest.php
[print] modules/contrib/flag/tests/src/FunctionalJavascript/LinkTypeConfirmFormTest.php
[parsing] modules/contrib/flag/tests/src/FunctionalJavascript/ModalFormTest.php
[refactoring] modules/contrib/flag/tests/src/FunctionalJavascript/ModalFormTest.php
[post rectors] modules/contrib/flag/tests/src/FunctionalJavascript/ModalFormTest.php
[print] modules/contrib/flag/tests/src/FunctionalJavascript/ModalFormTest.php
[refactoring] modules/contrib/flag/tests/src/FunctionalJavascript/ModalFormTest.php
[post rectors] modules/contrib/flag/tests/src/FunctionalJavascript/ModalFormTest.php
[print] modules/contrib/flag/tests/src/FunctionalJavascript/ModalFormTest.php
[parsing] modules/contrib/flag/tests/src/Kernel/AccessTest.php
[refactoring] modules/contrib/flag/tests/src/Kernel/AccessTest.php
[post rectors] modules/contrib/flag/tests/src/Kernel/AccessTest.php
[print] modules/contrib/flag/tests/src/Kernel/AccessTest.php
[refactoring] modules/contrib/flag/tests/src/Kernel/AccessTest.php
[post rectors] modules/contrib/flag/tests/src/Kernel/AccessTest.php
[print] modules/contrib/flag/tests/src/Kernel/AccessTest.php
[parsing] modules/contrib/flag/tests/src/Kernel/FlagActionTest.php
[refactoring] modules/contrib/flag/tests/src/Kernel/FlagActionTest.php
[post rectors] modules/contrib/flag/tests/src/Kernel/FlagActionTest.php
[print] modules/contrib/flag/tests/src/Kernel/FlagActionTest.php
[refactoring] modules/contrib/flag/tests/src/Kernel/FlagActionTest.php
[post rectors] modules/contrib/flag/tests/src/Kernel/FlagActionTest.php
[print] modules/contrib/flag/tests/src/Kernel/FlagActionTest.php
[parsing] modules/contrib/flag/tests/src/Kernel/FlagCountsTest.php
[refactoring] modules/contrib/flag/tests/src/Kernel/FlagCountsTest.php
[post rectors] modules/contrib/flag/tests/src/Kernel/FlagCountsTest.php
[print] modules/contrib/flag/tests/src/Kernel/FlagCountsTest.php
[refactoring] modules/contrib/flag/tests/src/Kernel/FlagCountsTest.php
[post rectors] modules/contrib/flag/tests/src/Kernel/FlagCountsTest.php
[print] modules/contrib/flag/tests/src/Kernel/FlagCountsTest.php
[parsing] modules/contrib/flag/tests/src/Kernel/FlagKernelTestBase.php
[refactoring] modules/contrib/flag/tests/src/Kernel/FlagKernelTestBase.php
[post rectors] modules/contrib/flag/tests/src/Kernel/FlagKernelTestBase.php
[print] modules/contrib/flag/tests/src/Kernel/FlagKernelTestBase.php
[refactoring] modules/contrib/flag/tests/src/Kernel/FlagKernelTestBase.php
[post rectors] modules/contrib/flag/tests/src/Kernel/FlagKernelTestBase.php
[print] modules/contrib/flag/tests/src/Kernel/FlagKernelTestBase.php
[parsing] modules/contrib/flag/tests/src/Kernel/FlagServiceTest.php
[refactoring] modules/contrib/flag/tests/src/Kernel/FlagServiceTest.php
[post rectors] modules/contrib/flag/tests/src/Kernel/FlagServiceTest.php
[print] modules/contrib/flag/tests/src/Kernel/FlagServiceTest.php
[refactoring] modules/contrib/flag/tests/src/Kernel/FlagServiceTest.php
[post rectors] modules/contrib/flag/tests/src/Kernel/FlagServiceTest.php
[print] modules/contrib/flag/tests/src/Kernel/FlagServiceTest.php
[parsing] modules/contrib/flag/tests/src/Kernel/FlaggingStorageTest.php
[refactoring] modules/contrib/flag/tests/src/Kernel/FlaggingStorageTest.php
[post rectors] modules/contrib/flag/tests/src/Kernel/FlaggingStorageTest.php
[print] modules/contrib/flag/tests/src/Kernel/FlaggingStorageTest.php
[refactoring] modules/contrib/flag/tests/src/Kernel/FlaggingStorageTest.php
[post rectors] modules/contrib/flag/tests/src/Kernel/FlaggingStorageTest.php
[print] modules/contrib/flag/tests/src/Kernel/FlaggingStorageTest.php
[parsing] modules/contrib/flag/tests/src/Traits/FlagCreateTrait.php
[refactoring] modules/contrib/flag/tests/src/Traits/FlagCreateTrait.php
[post rectors] modules/contrib/flag/tests/src/Traits/FlagCreateTrait.php
[print] modules/contrib/flag/tests/src/Traits/FlagCreateTrait.php
[parsing] modules/contrib/flag/tests/src/Traits/FlagPermissionsTrait.php
[refactoring] modules/contrib/flag/tests/src/Traits/FlagPermissionsTrait.php
[post rectors] modules/contrib/flag/tests/src/Traits/FlagPermissionsTrait.php
[print] modules/contrib/flag/tests/src/Traits/FlagPermissionsTrait.php
[parsing] modules/contrib/flag/tests/src/Unit/Ajax/ActionLinkFlashCommandTest.php
[refactoring] modules/contrib/flag/tests/src/Unit/Ajax/ActionLinkFlashCommandTest.php
[post rectors] modules/contrib/flag/tests/src/Unit/Ajax/ActionLinkFlashCommandTest.php
[print] modules/contrib/flag/tests/src/Unit/Ajax/ActionLinkFlashCommandTest.php
[refactoring] modules/contrib/flag/tests/src/Unit/Ajax/ActionLinkFlashCommandTest.php
[post rectors] modules/contrib/flag/tests/src/Unit/Ajax/ActionLinkFlashCommandTest.php
[print] modules/contrib/flag/tests/src/Unit/Ajax/ActionLinkFlashCommandTest.php
[parsing] modules/contrib/flag/tests/src/Unit/Plugin/Action/FlagActionTest.php
[refactoring] modules/contrib/flag/tests/src/Unit/Plugin/Action/FlagActionTest.php
[post rectors] modules/contrib/flag/tests/src/Unit/Plugin/Action/FlagActionTest.php
[print] modules/contrib/flag/tests/src/Unit/Plugin/Action/FlagActionTest.php
[refactoring] modules/contrib/flag/tests/src/Unit/Plugin/Action/FlagActionTest.php
[post rectors] modules/contrib/flag/tests/src/Unit/Plugin/Action/FlagActionTest.php
[print] modules/contrib/flag/tests/src/Unit/Plugin/Action/FlagActionTest.php

34 files with changes
=====================

1) modules/contrib/flag/tests/src/Unit/Plugin/Action/FlagActionTest.php:19

    ---------- begin diff ----------
@@ @@
  */
 class FlagActionTest extends UnitTestCase {

+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * Mock flag.
    *
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $flag = $this->prophesize(FlagInterface::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/flag/tests/src/Unit/Ajax/ActionLinkFlashCommandTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->random = $this->getRandomGenerator();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/flag/tests/src/Kernel/FlaggingStorageTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->account = $this->createUser();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/flag/tests/src/Kernel/FlagServiceTest.php:32

    ---------- begin diff ----------
@@ @@
     // Search for flag.
     $user_with_access = $this->createUser(['flag ' . $flag->id()]);
     $result = $this->flagService->getAllFlags('node', 'article');
-    $this->assertIdentical(count($result), 1, 'Found flag type');
+    $this->assertSame(count($result), 1, 'Found flag type');
     $this->assertEquals([$flag->id()], array_keys($result));
   }

   /**
    * Test exceptions are thrown when flagging and unflagging.
+   * @doesNotPerformAssertions
    */
   public function testFlagServiceFlagExceptions() {
     $not_article = NodeType::create(['type' => 'not_article']);
@@ @@
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The flag() method throws an exception when the flag does not apply to the entity type of the flaggable entity.");
     }

     // Try flagging a node of the wrong bundle.
@@ @@
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The flag() method throws an exception when the flag does not apply to the bundle of the flaggable entity.");
     }

     // Flag the node, then try to flag it again.
@@ @@
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The flag() method throws an exception when the flaggable entity is already flagged by the user with the flag.");
     }

     try {
@@ @@
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The flag() method throws an exception when a non-global flag is associated with a poorly specified anonymous user.");
     }

     // Test unflagging.
@@ @@
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The unflag() method throws an exception when the flag does not apply to the entity type of the flaggable entity.");
     }

     // Try unflagging a node of the wrong bundle.
@@ @@
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The unflag() method throws an exception when the flag does not apply to the bundle of the flaggable entity.");
     }

     // Create a new node that's not flagged, and try to unflag it.
@@ @@
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The unflag() method throws an exception when the flaggable entity is not flagged by the user with the flag.");
     }

     try {
@@ @@
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The unflag() method throws an exception when a non-global flag is associated with a poorly specified anonymous user.");
     }

     // Demonstrate a valid combination can be unflagged without throwing an
@@ @@
     // exception.
     try {
       $this->flagService->unflag($flag, $flaggable_node, $account, $session_id);
-      $this->pass('The unflag() method throws no exception when the flaggable entity and user is correct');
     }
     catch (\LogicException $e) {
       $this->fail('The unfag() method threw an exception where processing a valid unflag request.');
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * PassRector
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/flag/tests/src/Kernel/FlagKernelTestBase.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('user');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/flag/tests/src/Kernel/FlagCountsTest.php:73

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('user', 'users_data');
@@ @@
     // Get the count of flaggings for the flag. The other flag also has
     // flaggings, which should not be included in the count.
     $flag_get_entity_flag_counts = $this->flagCountService->getFlagFlaggingCount($this->flag);
-    $this->assertEqual($flag_get_entity_flag_counts, 3, "getFlagFlaggingCount() returns the expected count.");
+    $this->assertEquals($flag_get_entity_flag_counts, 3, "getFlagFlaggingCount() returns the expected count.");

     // Get the counts of all flaggings on the entity. The other node is also
     // flagged, but should not be included in the count.
     $flag_get_counts = $this->flagCountService->getEntityFlagCounts($this->node);
-    $this->assertEqual($flag_get_counts[$this->flag->id()], 2, "getEntityFlagCounts() returns the expected count.");
-    $this->assertEqual($flag_get_counts[$this->otherFlag->id()], 1, "getEntityFlagCounts() returns the expected count.");
+    $this->assertEquals($flag_get_counts[$this->flag->id()], 2, "getEntityFlagCounts() returns the expected count.");
+    $this->assertEquals($flag_get_counts[$this->otherFlag->id()], 1, "getEntityFlagCounts() returns the expected count.");

     // Get the number of entities for the flag. Two users have flagged one node
     // with the flag, but that should count only once.
     $flag_get_flag_counts = $this->flagCountService->getFlagEntityCount($this->flag);
-    $this->assertEqual($flag_get_flag_counts, 2, "getFlagEntityCount() returns the expected count.");
+    $this->assertEquals($flag_get_flag_counts, 2, "getFlagEntityCount() returns the expected count.");

     // Unflag everything with the main flag.
     $this->flagService->unflagAllByFlag($this->flag);
     $flag_get_flag_counts = $this->flagCountService->getFlagEntityCount($this->flag);
-    $this->assertEqual($flag_get_flag_counts, 0, "getFlagEntityCount() on reset flag returns the expected count.");
+    $this->assertEquals($flag_get_flag_counts, 0, "getFlagEntityCount() on reset flag returns the expected count.");
   }

   /**
@@ @@
     // For non-global flags anonymous users can uniquely identified by
     // session_id.
     $anon1_count = $this->flagCountService->getUserFlagFlaggingCount($this->flag, $this->anonymousUser, $anon1_session_id);
-    $this->assertEqual($anon1_count, 1, "getUserFlagFlaggingCount() counts only the first user.");
+    $this->assertEquals($anon1_count, 1, "getUserFlagFlaggingCount() counts only the first user.");
     $anon2_count = $this->flagCountService->getUserFlagFlaggingCount($this->flag, $this->anonymousUser, $anon2_session_id);
-    $this->assertEqual($anon2_count, 1, "getUserFlagFlaggingCount() counts only the second user.");
+    $this->assertEquals($anon2_count, 1, "getUserFlagFlaggingCount() counts only the second user.");

     // Switch to a global flag, the accounting rules.
     $this->flag->setGlobal(TRUE);
@@ @@
     // Despite being a global flag, queries about specific anonymous users can
     // still be made.
     $rejected_count = $this->flagCountService->getUserFlagFlaggingCount($this->flag, $this->anonymousUser, $anon1_session_id);
-    $this->assertEqual($rejected_count, 1, "getUserFlagFlaggingCount() ignores the session id.");
+    $this->assertEquals($rejected_count, 1, "getUserFlagFlaggingCount() ignores the session id.");
   }

   /**
@@ @@

     // Confirm the counts have been incremented.
     $article1_count_before = $this->flagCountService->getEntityFlagCounts($article1);
-    $this->assertEqual($article1_count_before[$this->flag->id()], 1, 'The article1 has been flagged.');
+    $this->assertEquals($article1_count_before[$this->flag->id()], 1, 'The article1 has been flagged.');
     $article2_count_before = $this->flagCountService->getEntityFlagCounts($article2);
-    $this->assertEqual($article2_count_before[$this->flag->id()], 1, 'The article2 has been flagged.');
+    $this->assertEquals($article2_count_before[$this->flag->id()], 1, 'The article2 has been flagged.');

     // Confirm the flagging have been created.
     $flaggings_before = $this->getFlagFlaggings($this->flag);
-    $this->assertEqual(count($flaggings_before), 2, 'There are two flaggings associated with the flag');
+    $this->assertEquals(count($flaggings_before), 2, 'There are two flaggings associated with the flag');

     // Delete the flag.
     $this->flag->delete();
@@ @@

     // Confirm the counts have been incremented.
     $article1_count_before = $this->flagCountService->getEntityFlagCounts($article1);
-    $this->assertEqual($article1_count_before[$this->flag->id()], 1, 'The article1 has been flagged.');
+    $this->assertEquals($article1_count_before[$this->flag->id()], 1, 'The article1 has been flagged.');
     $article2_count_before = $this->flagCountService->getEntityFlagCounts($article2);
-    $this->assertEqual($article2_count_before[$this->flag->id()], 1, 'The article2 has been flagged.');
+    $this->assertEquals($article2_count_before[$this->flag->id()], 1, 'The article2 has been flagged.');

     // Confirm the flagging have been created.
     $flaggings_before = $this->getFlagFlaggings($this->flag);
-    $this->assertEqual(count($flaggings_before), 2, 'There are two flaggings associated with the flag');
+    $this->assertEquals(count($flaggings_before), 2, 'There are two flaggings associated with the flag');

     // Delete the entities.
     $article1->delete();
@@ @@

     // The list of all flaggings MUST now be empty.
     $flaggings_after = $this->getFlagFlaggings($this->flag);
-    $this->assert(empty($flaggings_after), 'The flaggings were removed, when the flag was deleted');
+    $this->assertTrue(empty($flaggings_after), 'The flaggings were removed, when the flag was deleted');

     // Confirm the counts have been removed.
     $article1_count_after = $this->flagCountService->getEntityFlagCounts($article1);
@@ @@
     $this->flagService->flag($this->flag, $article, $auth_user);

     $user_before_count = $this->flagCountService->getEntityFlagCounts($auth_user);
-    $this->assertEqual($user_before_count[$user_flag->id()], 1, 'The user has been flagged.');
+    $this->assertEquals($user_before_count[$user_flag->id()], 1, 'The user has been flagged.');

     $article_count_before = $this->flagCountService->getEntityFlagCounts($article);
-    $this->assertEqual($article_count_before[$this->flag->id()], 1, 'The article has been flagged by the user.');
+    $this->assertEquals($article_count_before[$this->flag->id()], 1, 'The article has been flagged by the user.');

     $auth_user->delete();

@@ @@
     $this->assertEmpty($flaggings_after, 'The user flaggings were removed when the user was deleted.');

     $flaggings_after = $this->getFlagFlaggings($this->flag);
-    $this->assert(empty($flaggings_after), 'The node flaggings were removed when the user was deleted');
+    $this->assertTrue(empty($flaggings_after), 'The node flaggings were removed when the user was deleted');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/flag/tests/src/Kernel/FlagActionTest.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('entity_test');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/flag/tests/src/Kernel/AccessTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('user', 'users_data', 'flag');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/flag/tests/src/FunctionalJavascript/ModalFormTest.php:62

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // A test flag.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/flag/tests/src/FunctionalJavascript/LinkTypeAjaxTest.php:61

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Get the Flag Service.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/flag/tests/src/FunctionalJavascript/FlagJsTestBase.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Get the Flag Service.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/flag/tests/src/FunctionalJavascript/FlagCountExtensionTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
     // Set the linkTypePlugin of the flag to count_link for running the tests.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/flag/tests/src/FunctionalJavascript/FlagContextualLinksTest.php:87

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Get the Flag Service.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/flag/tests/src/FunctionalJavascript/AjaxLinkTest.php:73

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // A article to test with.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/flag/tests/src/Functional/UserFlagTypeTest.php:27

    ---------- begin diff ----------
@@ @@
       'flag_entity_type' => 'entity:user',
     ], $this->t('Continue'));

-    $this->assertText($this->t('Permissions for users to flag themselves.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Permissions for users to flag themselves.'));

-    $this->assertText($this->t('Display link on user profile page'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Display link on user profile page'));
   }

   /**
@@ @@

     // Check the state of the extra permssions checkbox.
     $this->drupalGet('admin/structure/flags/manage/' . $flag->id());
-    $this->assertFieldChecked('edit-extra-permissions-owner');
+    $this->assertSession()->checkboxChecked('edit-extra-permissions-owner');

     // Assert flag appears on the profile page.
     $this->drupalGet('user/' . $user->id());
-    $this->assertLink($flag->getShortText('flag'));
+    $this->assertSession()->linkExists($flag->getShortText('flag'));

     // Uncheck extra permssions.
     $edit = [
@@ @@

     // Confirm extra permissions is unchecked.
     $this->drupalGet('admin/structure/flags/manage/' . $flag->id());
-    $this->assertNoFieldChecked('edit-extra-permissions-owner');
+    $this->assertSession()->checkboxNotChecked('edit-extra-permissions-owner');

     // Assert the flag disapears from the profile page.
     $this->drupalGet('user/' . $user->id());
-    $this->assertNoLink($flag->getShortText('flag'));
+    $this->assertSession()->linkNotExists($flag->getShortText('flag'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertLinkRector
 * AssertNoFieldCheckedRector
 * AssertNoLinkRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


16) modules/contrib/flag/tests/src/Functional/ShowOnEntityFormTest.php:54

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create content type.
@@ @@

     // Go back to the node edit page and check if the flag checkbox is updated.
     $this->drupalGet($node_edit_path);
-    $this->assertNoFieldChecked($flag_checkbox_id, 'The flag checkbox is unchecked on the entity form.');
+    $this->assertSession()->checkboxNotChecked($flag_checkbox_id, 'The flag checkbox is unchecked on the entity form.');

     // Verify link is on the add form.
     $this->drupalGet('node/add/' . $this->nodeType);
@@ @@

     // Form element should not appear on the delete form.
     $this->drupalGet($node->toUrl('delete-form'));
-    $this->assertNoField($flag_checkbox_id);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldNotExists($flag_checkbox_id);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoFieldCheckedRector
 * AssertNoFieldRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/flag/tests/src/Functional/OutputLocationEntityFormAccessTest.php:53

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     NodeType::create(['type' => 'page', 'name' => 'page'])->save();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/flag/tests/src/Functional/LinkTypeReloadTest.php:65

    ---------- begin diff ----------
@@ @@
     // We (probably) can't obtain the URL from the route rather than hardcoding
     // it, as that would probably give us the token too.
     $this->drupalGet("flag/flag/$flag_id/$node_id");
-    $this->assertResponse(403, "Access to the flag reload link is denied when no token is supplied.");
+    $this->assertSession()->statusCodeEquals(403, "Access to the flag reload link is denied when no token is supplied.");

     // Click the flag link.
     $this->drupalGet('node/' . $node_id);
@@ @@

     // Check that the node is flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertLink($this->flag->getShortText('unflag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('unflag'));

     // Check the flag count was incremented.
     $flag_count_flagged = \Drupal::database()->query('SELECT count FROM {flag_counts}
@@ @@
       ':entity_type' => 'node',
       ':entity_id' => $node_id,
     ])->fetchField();
-    $this->assertEqual($flag_count_flagged, $flag_count_pre + 1, "The flag count was incremented.");
+    $this->assertEquals($flag_count_flagged, $flag_count_pre + 1, "The flag count was incremented.");

     // Attempt to load the reload link URL without the token.
     $this->drupalGet("flag/unflag/$flag_id/$node_id");
-    $this->assertResponse(403, "Access to the unflag reload link is denied when no token is supplied.");
+    $this->assertSession()->statusCodeEquals(403, "Access to the unflag reload link is denied when no token is supplied.");

     // Unflag the node.
     $this->drupalGet('node/' . $node_id);
@@ @@

     // Check that the node is no longer flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertLink($this->flag->getShortText('flag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('flag'));

     // Check the flag count was decremented.
     $flag_count_unflagged = \Drupal::database()->query('SELECT count FROM {flag_counts}
@@ @@
       ':entity_type' => 'node',
       ':entity_id' => $node_id,
     ])->fetchField();
-    $this->assertEqual($flag_count_unflagged, $flag_count_flagged - 1, "The flag count was decremented.");
+    $this->assertEquals($flag_count_unflagged, $flag_count_flagged - 1, "The flag count was decremented.");
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertLinkRector
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


19) modules/contrib/flag/tests/src/Functional/LinkTypeFieldEntryTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // The breadcrumb block is needed for FieldUiTestTrait's tests.
@@ @@
     $this->drupalPostAjaxForm(NULL, $edit, 'link_type');

     // Check confirm form field entry.
-    $this->assertText(t('Flag confirmation message'));
-    $this->assertText(t('Enter flagging details message'));
-    $this->assertText(t('Unflag confirmation message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Flag confirmation message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Enter flagging details message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Unflag confirmation message'));
   }

   /**
@@ @@

     // Check the Field UI tabs appear on the flag edit page.
     $this->drupalGet('admin/structure/flags/manage/' . $flag_id);
-    $this->assertText(t("Manage fields"), "The Field UI tabs appear on the flag edit form page.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t("Manage fields"));

     $this->fieldUIAddNewField('admin/structure/flags/manage/' . $flag_id, $this->flagFieldId, $this->flagFieldLabel, 'text');
   }
@@ @@
     $this->clickLink($this->flag->getShortText('flag'));

     // Check if we have the confirm form message displayed.
-    $this->assertText($this->flagConfirmMessage);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->flagConfirmMessage);

     // Enter the field value and submit it.
     $this->flagFieldValue = $this->randomString();
@@ @@
     $this->submitForm($edit, $this->createButtonText);

     // Check that the node is flagged.
-    $this->assertLink($this->flag->getShortText('unflag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('unflag'));
   }

   /**
@@ @@
     $this->clickLink($this->flag->getShortText('unflag'));

     $node_url = Url::fromRoute('entity.node.canonical', ['node' => $this->nodeId]);
-    $this->assertUrl('flag/details/edit/' . $flag_id . '/' . $this->nodeId, [
+    $this->assertSession()->addressEquals('flag/details/edit/' . $flag_id . '/' . $this->nodeId, [
       'query' => [
         'destination' => $node_url->toString(),
       ],
@@ @@
     ]);

     // See if the details message is displayed.
-    $this->assertText($this->flagDetailsMessage);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->flagDetailsMessage);

     // See if the field value was preserved.
-    $this->assertFieldByName('field_' . $this->flagFieldId . '[0][value]', $this->flagFieldValue);
+    $this->assertSession()->fieldValueEquals('field_' . $this->flagFieldId . '[0][value]', $this->flagFieldValue);

     // Update the field value.
     $this->flagFieldValue = $this->randomString();
@@ @@
     $this->drupalGet('flag/details/edit/' . $flag_id . '/' . $this->nodeId);

     // See if the field value was preserved.
-    $this->assertFieldByName('field_' . $this->flagFieldId . '[0][value]', $this->flagFieldValue);
+    $this->assertSession()->fieldValueEquals('field_' . $this->flagFieldId . '[0][value]', $this->flagFieldValue);
   }

   /**
@@ @@

     // Test a good flag ID param, but a bad flaggable ID param.
     $this->drupalGet('flag/details/edit/' . $flag_id . '/-9999');
-    $this->assertResponse('404', 'Editing an invalid flagging path: good flag, bad entity.');
+    $this->assertSession()->statusCodeEquals('404', 'Editing an invalid flagging path: good flag, bad entity.');

     // Test a bad flag ID param, but a good flaggable ID param.
     $this->drupalGet('flag/details/edit/jibberish/' . $this->nodeId);
-    $this->assertResponse('404', 'Editing an invalid flagging path: bad flag, good entity');
+    $this->assertSession()->statusCodeEquals('404', 'Editing an invalid flagging path: bad flag, good entity');

     // Test editing a unflagged entity.
     $unlinked_node = $this->drupalCreateNode(['type' => $this->nodeType]);
     $this->drupalGet('flag/details/edit/' . $flag_id . '/' . $unlinked_node->id());
-    $this->assertResponse('404', 'Editing an invalid flagging path: good flag, good entity, but not flagged');
+    $this->assertSession()->statusCodeEquals('404', 'Editing an invalid flagging path: good flag, good entity, but not flagged');
   }

   /**
@@ @@
     $this->clickLink($this->deleteButtonText);

     // Check if we have the confirm form message displayed.
-    $this->assertText($this->unflagConfirmMessage);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->unflagConfirmMessage);

     // Submit the confirm form.
     $this->submitForm([], $this->deleteButtonText);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Check that the node is no longer flagged.
     $this->drupalGet('node/' . $this->nodeId);
-    $this->assertLink($this->flag->getShortText('flag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('flag'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertLinkRector
 * AssertResponseRector
 * AssertTextRector
 * AssertUrlRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/flag/tests/src/Functional/LinkTypeConfirmFormTest.php:83

    ---------- begin diff ----------
@@ @@

     // Check that the node is flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertLink($this->flag->getShortText('unflag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('unflag'));

     // Check the flag count was incremented.
     $flag_count_flagged = \Drupal::database()->query('SELECT count FROM {flag_counts}
@@ @@
       ':entity_type' => 'node',
       ':entity_id' => $node_id,
     ])->fetchField();
-    $this->assertEqual($flag_count_flagged, $flag_count_pre + 1, "The flag count was incremented.");
+    $this->assertEquals($flag_count_flagged, $flag_count_pre + 1, "The flag count was incremented.");

     // Unflag the node.
     $this->clickLink($this->flag->getShortText('unflag'));
@@ @@

     // Check that the node is no longer flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertLink($this->flag->getShortText('flag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('flag'));

     // Check the flag count was decremented.
     $flag_count_unflagged = \Drupal::database()->query('SELECT count FROM {flag_counts}
@@ @@
       ':entity_type' => 'node',
       ':entity_id' => $node_id,
     ])->fetchField();
-    $this->assertEqual($flag_count_unflagged, $flag_count_flagged - 1, "The flag count was decremented.");
+    $this->assertEquals($flag_count_unflagged, $flag_count_flagged - 1, "The flag count was decremented.");
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertLinkRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/flag/tests/src/Functional/LinkTypeAjaxTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a node to flag.
@@ @@
     $this->drupalGet($node_url);

     // Confirm the flag link exists.
-    $this->assertLink($this->flag->getShortText('flag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('flag'));

     // Click the flag link. This ensures that the non-JS fallback works we are
     // redirected to back to the page and the node is flagged.
     $this->clickLink($this->flag->getShortText('flag'));
-    $this->assertUrl($node_url);
-    $this->assertLink($this->flag->getShortText('unflag'));
+    $this->assertSession()->addressEquals($node_url);
+    $this->assertSession()->linkExists($this->flag->getShortText('unflag'));

     // Click the unflag link, repeat the check.
     $this->clickLink($this->flag->getShortText('unflag'));
-    $this->assertUrl($node_url);
-    $this->assertLink($this->flag->getShortText('flag'));
+    $this->assertSession()->addressEquals($node_url);
+    $this->assertSession()->linkExists($this->flag->getShortText('flag'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertLinkRector
 * AssertUrlRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/flag/tests/src/Functional/LinkOwnershipAccessTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->entityTypeManager = $this->container->get('entity_type.manager');
@@ @@
     // Flag the node with user 1.
     $this->drupalGet($this->node->toUrl());
     $this->clickLink($flag->getShortText('flag'));
-    $this->assertResponse(200);
-    $this->assertLink($flag->getShortText('unflag'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->linkExists($flag->getShortText('unflag'));

     // Switch to user 2. They should see the link to flag.
     $user_2 = $this->drupalCreateUser();
     $this->drupalLogin($user_2);
     $this->drupalGet($this->node->toUrl());
-    $this->assertLink($flag->getShortText('flag'), 0, "A flag link is found on the page for user 2.");
+    $this->assertSession()->linkExists($flag->getShortText('flag'), 0, "A flag link is found on the page for user 2.");

   }

@@ @@
     // Flag the node with user 1.
     $this->drupalGet($this->node->toUrl());
     $this->clickLink($flag->getShortText('flag'));
-    $this->assertResponse(200);
-    $this->assertLink($flag->getShortText('unflag'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->linkExists($flag->getShortText('unflag'));

     // Switch to user 2. They should see the unflag link too.
     $user_2 = $this->drupalCreateUser();
     $this->drupalLogin($user_2);
     $this->drupalGet($this->node->toUrl());
-    $this->assertLink($flag->getShortText('unflag'), 0, "The unflag link is found on the page for user 2.");
+    $this->assertSession()->linkExists($flag->getShortText('unflag'), 0, "The unflag link is found on the page for user 2.");
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertLinkRector
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/flag/tests/src/Functional/LinkOutputLocationTest.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a flag.
@@ @@
     $this->drupalGet('admin/structure/types/manage/article/display/teaser');
     $this->submitForm($edit, 'Save');
     // Check the form was saved successfully.
-    $this->assertText('Your settings have been saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your settings have been saved.');

     // Check the full node still shows the flag link as a field.
     $this->drupalGet('node/' . $this->node->id());
@@ @@
     // TODO: check no entity field link.

     $this->drupalGet('node/' . $this->node->id() . '/edit');
-    $this->assertNoField('flag[' . $this->flag->id() . ']');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldNotExists('flag[' . $this->flag->id() . ']');
     $this->assertNoContextualLinkPlaceholder($contextual_links_id);
   }

@@ @@
     $xpath = $this->xpath("//*[contains(@class, 'node__content')]//div[contains(@class, :id)]", [
       ':id' => 'flag-' . $flag->id() . '-' . $entity->id(),
     ]);
-    $this->assert(count($xpath) == ($exists ? 1 : 0), $message);
+    $this->assertTrue(count($xpath) == ($exists ? 1 : 0), $message);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertNoFieldRector
 * AssertRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/flag/tests/src/Functional/LinkHtmlTest.php:66

    ---------- begin diff ----------
@@ @@
     // Click the flag link.
     $this->drupalGet('node/' . $node_id);
     // Find the marked-up flag short text in the raw HTML.
-    $this->assertRaw(Xss::filterAdmin($this->flag->getShortText('flag')));
+    $this->assertSession()->responseContains(Xss::filterAdmin($this->flag->getShortText('flag')));
     // Xss::filter() is used to strip all HTML tags from the short text
     // because clickLink() looks for text as it appears in the brower, and that
     // does not include the unescaped HTML tags. Note that the stripped tags
@@ @@

     // Check that the node is flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertRaw(Xss::filterAdmin($this->flag->getShortText('unflag')));
+    $this->assertSession()->responseContains(Xss::filterAdmin($this->flag->getShortText('unflag')));

     // Unflag the node.
     $this->drupalGet('node/' . $node_id);
@@ @@

     // Check that the node is no longer flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertRaw(Xss::filterAdmin($this->flag->getShortText('flag')));
+    $this->assertSession()->responseContains(Xss::filterAdmin($this->flag->getShortText('flag')));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


25) modules/contrib/flag/tests/src/Functional/FlagTestBase.php:45

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Get the Flag Service.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/flag/tests/src/Functional/FlagPermissionsTest.php:65

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create content type.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/flag/tests/src/Functional/AnonymousFlagTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     NodeType::create(['type' => 'page', 'name' => 'page'])->save();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/flag/tests/src/Functional/AjaxLinkNoJsTest.php:66

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // A article to test with.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/flag/tests/src/Functional/AdminUITest.php:68

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->entityTypeManager = $this->container->get('entity_type.manager');
@@ @@
     $this->drupalGet('admin/structure/flags/add');
     $this->submitForm([], 'Continue');
     // Check for fieldset titles.
-    $this->assertText(t('Messages'));
-    $this->assertText(t('Flag access'));
-    $this->assertText(t('Display options'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Messages'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Flag access'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Display options'));

     $edit = [
       'label' => $this->label,
@@ @@
     ];
     $this->submitForm($edit, 'Create Flag');

-    $this->assertText(t('Flag @this_label has been added.', ['@this_label' => $this->label]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Flag @this_label has been added.', ['@this_label' => $this->label]));

     $this->flag = $this->flagService->getFlagById($this->flagId);

@@ @@
    */
   public function doFlagDisable() {
     $this->drupalGet('admin/structure/flags');
-    $this->assertText(t('Enabled'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Enabled'));

     $this->drupalGet('admin/structure/flags/manage/' . $this->flagId . '/disable');
     $this->submitForm([], 'Disable');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalGet('admin/structure/flags');
-    $this->assertText(t('Disabled'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Disabled'));

     $this->drupalGet('node/' . $this->nodeId);
-    $this->assertNoText($this->flagShortText);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->flagShortText);
   }

   /**
@@ @@
    */
   public function doFlagEnable() {
     $this->drupalGet('admin/structure/flags');
-    $this->assertText(t('Disabled'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Disabled'));

     $this->drupalGet('admin/structure/flags/manage/' . $this->flagId . '/enable');
     $this->submitForm([], 'Enable');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalGet('admin/structure/flags');
-    $this->assertText(t('Enabled'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Enabled'));

     $this->drupalGet('node/' . $this->nodeId);
-    $this->assertText($this->flagShortText);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->flagShortText);
   }

   /**
@@ @@
       ->condition('entity_id', $this->node->id());
     $ids_before = $query_before->execute();

-    $this->assertEqual(count($ids_before), 1, "The flag has one flagging.");
+    $this->assertEquals(count($ids_before), 1, "The flag has one flagging.");

     // Go to the reset form for the flag.
     $this->drupalGet('admin/structure/flags/manage/' . $this->flag->id() . '/reset');

-    $this->assertText($this->t('Are you sure you want to reset the Flag'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to reset the Flag'));

     $this->submitForm([], 'Reset');

@@ @@
       ->condition('entity_id', $this->node->id());
     $ids_after = $query_after->execute();

-    $this->assertEqual(count($ids_after), 0, "The flag has no flaggings after being reset.");
+    $this->assertEquals(count($ids_after), 0, "The flag has no flaggings after being reset.");
   }

   /**
@@ @@

     // Check that the weights for each flag are saved in the database correctly.
     foreach ($all_flags as $id => $flag) {
-      $this->assertEqual($all_flags[$id]->get('weight'), $flag_weights_to_set[$id], 'The flag weight was changed.');
+      $this->assertEquals($all_flags[$id]->get('weight'), $flag_weights_to_set[$id], 'The flag weight was changed.');
     }
   }

@@ @@
   public function doFlagDelete() {
     // Flag node.
     $this->drupalGet('node/' . $this->nodeId);
-    $this->assertLink($this->flagShortText);
+    $this->assertSession()->linkExists($this->flagShortText);
     // Go to the delete form for the flag.
     $this->drupalGet('admin/structure/flags/manage/' . $this->flag->id() . '/delete');

-    $this->assertText($this->t('Are you sure you want to delete the flag @this_label?', ['@this_label' => $this->label]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to delete the flag @this_label?', ['@this_label' => $this->label]));

     $this->submitForm([], 'Delete');

@@ @@

     $this->assertNull($result, 'The flag was deleted.');
     $this->drupalGet('node/' . $this->nodeId);
-    $this->assertText($this->node->label());
-    $this->assertNoLink($this->flagShortText);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->node->label());
+    $this->assertSession()->linkNotExists($this->flagShortText);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertLinkRector
 * AssertNoLinkRector
 * AssertNoTextRector
 * AssertResponseRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/flag/src/Event/UnflaggingEvent.php:6

    ---------- begin diff ----------
@@ @@
 /**
  * Event for when a flagging is deleted.
  */
-class UnflaggingEvent extends Event {
+class UnflaggingEvent extends \Symfony\Contracts\EventDispatcher\Event {

   /**
    * An array of flaggings.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/flag/src/Event/FlaggingEvent.php:7

    ---------- begin diff ----------
@@ @@
 /**
  * Event for when a flagging is created.
  */
-class FlaggingEvent extends Event {
+class FlaggingEvent extends \Symfony\Contracts\EventDispatcher\Event {

   /**
    * The flagging in question.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/flag/src/Event/FlagEventBase.php:8

    ---------- begin diff ----------
@@ @@
  * Base Event from which other flag event are defined.
  */

-abstract class FlagEventBase extends Event {
+abstract class FlagEventBase extends \Symfony\Contracts\EventDispatcher\Event {

   /**
    * The Flag in question.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/flag/modules/flag_follower/tests/src/Functional/FlagFollowerUITest.php:79

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
@@ @@
   public function doFollowerView() {
     $this->drupalLogin($this->userA);
     $this->drupalGet('flag-followers');
-    $this->assertNoText($this->userB->getAccountName());
-    $this->assertText($this->userC->getAccountName());
-    $this->assertText('2', 'A sees C has two followers.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->userB->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->userC->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('2');

     $this->drupalLogin($this->userB);
     $this->drupalGet('flag-followers');
-    $this->assertText($this->userA->getAccountName());
-    $this->assertText($this->userC->getAccountName());
-    $this->assertText('2', 'B sees C has two followers.');
-    $this->assertText('1', 'B sees A has one follower.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->userA->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->userC->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('2');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('1');

     $this->drupalLogin($this->userC);
     $this->drupalGet('flag-followers');
-    $this->assertNoText($this->userA->getAccountName());
-    $this->assertNoText($this->userB->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->userA->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->userB->getAccountName());
   }

   /**
@@ @@
   public function doContentView() {
     $this->drupalLogin($this->userA);
     $this->drupalGet('flag-followers/content');
-    $this->assertText($this->nodeC->label());
-    $this->assertNoText($this->nodeB->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->nodeC->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->nodeB->label());

     $this->drupalLogin($this->userB);
     $this->drupalGet('flag-followers/content');
-    $this->assertText($this->nodeA->label());
-    $this->assertText($this->nodeC->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->nodeA->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->nodeC->label());

     $this->drupalLogin($this->userC);
     $this->drupalGet('flag-followers/content');
-    $this->assertNoText($this->nodeA->label());
-    $this->assertNoText($this->nodeB->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->nodeA->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->nodeB->label());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/flag/modules/flag_bookmark/tests/src/FunctionalJavascript/FlagBookmarkUITest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 34 files have been changed by Rector                                      

