diff --git a/tests/src/Kernel/AcquiadamKernelTestBase.php b/tests/src/Kernel/AcquiadamKernelTestBase.php
index 5e86e8b..d4d68da 100644
--- a/tests/src/Kernel/AcquiadamKernelTestBase.php
+++ b/tests/src/Kernel/AcquiadamKernelTestBase.php
@@ -73,9 +73,7 @@ abstract class AcquiadamKernelTestBase extends EntityKernelTestBase {
   protected function setTestClient() {
     $this->testClient = new TestClient();
 
-    $acquiadam_client_factory = $this->getMockBuilder(Client::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $acquiadam_client_factory = $this->createMock(Client::class);
     $acquiadam_client_factory->expects($this->any())
       ->method('getAsset')
       ->willReturnCallback(function ($assetId) {
diff --git a/tests/src/Traits/AcquiadamAssetImageHelperTrait.php b/tests/src/Traits/AcquiadamAssetImageHelperTrait.php
index bf32d38..1d0ee98 100644
--- a/tests/src/Traits/AcquiadamAssetImageHelperTrait.php
+++ b/tests/src/Traits/AcquiadamAssetImageHelperTrait.php
@@ -16,9 +16,7 @@ trait AcquiadamAssetImageHelperTrait {
    *   The stubbed service.
    */
   public function getAssetImageHelperStub() {
-    $asset_image_helper = $this->getMockBuilder(AssetImageHelper::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_image_helper = $this->createMock(AssetImageHelper::class);
     $asset_image_helper->method('getMimeTypeFromFileUri')->willReturnMap([
       ['public://test.jpg', ['discrete' => 'image', 'sub' => 'jpg']],
       ['public://test.mov', ['discrete' => 'quicktime', 'sub' => 'mov']],
diff --git a/tests/src/Traits/AcquiadamLoggerFactoryTrait.php b/tests/src/Traits/AcquiadamLoggerFactoryTrait.php
index 5359050..9cbaa9b 100644
--- a/tests/src/Traits/AcquiadamLoggerFactoryTrait.php
+++ b/tests/src/Traits/AcquiadamLoggerFactoryTrait.php
@@ -17,13 +17,9 @@ trait AcquiadamLoggerFactoryTrait {
    *   A mock LoggerChannelFactoryInstance with a acquiadam channel.
    */
   protected function getLoggerFactoryStub() {
-    $logger_channel = $this->getMockBuilder(LoggerChannelInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger_channel = $this->createMock(LoggerChannelInterface::class);
 
-    $logger_factory = $this->getMockBuilder(LoggerChannelFactoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger_factory = $this->createMock(LoggerChannelFactoryInterface::class);
     $logger_factory->method('get')
       ->with('media_acquiadam')
       ->willReturn($logger_channel);
diff --git a/tests/src/Traits/AcquiadamMockedMediaEntityTrait.php b/tests/src/Traits/AcquiadamMockedMediaEntityTrait.php
index 5009abd..3c80a19 100644
--- a/tests/src/Traits/AcquiadamMockedMediaEntityTrait.php
+++ b/tests/src/Traits/AcquiadamMockedMediaEntityTrait.php
@@ -29,29 +29,19 @@ trait AcquiadamMockedMediaEntityTrait {
   protected function getMockedMediaEntity($assetId, $sourceField = NULL, $mediaEntityId = 47247625) {
     $sourceField = $sourceField ?? 'phpunit_asset_id_field';
 
-    $source_field_definition = $this->getMockBuilder(FieldDefinitionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $source_field_definition = $this->createMock(FieldDefinitionInterface::class);
     $source_field_definition->method('getName')
       ->willReturn($sourceField);
 
-    $media_source = $this->getMockBuilder(MediaSourceInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $media_source = $this->createMock(MediaSourceInterface::class);
     $media_source->method('getSourceFieldDefinition')
       ->willReturn($source_field_definition);
 
-    $media_bundle = $this->getMockBuilder(MediaTypeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $bundle_definition = $this->getMockBuilder(EntityReferenceFieldItemListInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $media_bundle = $this->createMock(MediaTypeInterface::class);
+    $bundle_definition = $this->createMock(EntityReferenceFieldItemListInterface::class);
     $bundle_definition->entity = $media_bundle;
 
-    $media = $this->getMockBuilder(MediaInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $media = $this->createMock(MediaInterface::class);
 
     $media->method('getSource')->willReturn($media_source);
     $media->method('uuid')->willReturn('e63ce44d-4cfe-44d4-af7d-0692821d52cc');
@@ -98,9 +88,7 @@ trait AcquiadamMockedMediaEntityTrait {
    *   A mocked file entity.
    */
   protected function getMockedFileEntity() {
-    $file_entity = $this->getMockBuilder(FileInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $file_entity = $this->createMock(FileInterface::class);
     $file_entity->method('id')->willReturn(894782578);
 
     return $file_entity;
diff --git a/tests/src/Unit/AcquiadamAssetTest.php b/tests/src/Unit/AcquiadamAssetTest.php
index 140100a..cb6aa39 100644
--- a/tests/src/Unit/AcquiadamAssetTest.php
+++ b/tests/src/Unit/AcquiadamAssetTest.php
@@ -57,36 +57,22 @@ class AcquiadamAssetTest extends UnitTestCase {
   protected function setUp(): void {
     parent::setUp();
 
-    $entity_type_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManagerInterface::class);
 
-    $entity_field_manager = $this->getMockBuilder(EntityFieldManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_field_manager = $this->createMock(EntityFieldManagerInterface::class);
 
-    $field_type_plugin_manager = $this->getMockBuilder(FieldTypePluginManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $field_type_plugin_manager = $this->createMock(FieldTypePluginManagerInterface::class);
 
-    $asset_image_helper = $this->getMockBuilder(AssetImageHelper::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_image_helper = $this->createMock(AssetImageHelper::class);
 
-    $asset_metadata_helper = $this->getMockBuilder(AssetMetadataHelper::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_metadata_helper = $this->createMock(AssetMetadataHelper::class);
 
-    $asset_media_helper = $this->getMockBuilder(MediaEntityHelper::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_media_helper = $this->createMock(MediaEntityHelper::class);
     $asset_media_helper->method('getAsset')->willReturn($this->getAssetData());
     $asset_media_helper->method('getFile')
       ->willReturn($this->getMockedFileEntity());
 
-    $asset_media_factory = $this->getMockBuilder(AssetMediaFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_media_factory = $this->createMock(AssetMediaFactory::class);
     $asset_media_factory->method('get')->willReturn($asset_media_helper);
 
     $this->container = new ContainerBuilder();
diff --git a/tests/src/Unit/AcquiadamAuthTest.php b/tests/src/Unit/AcquiadamAuthTest.php
index f93a1fa..20e4d91 100644
--- a/tests/src/Unit/AcquiadamAuthTest.php
+++ b/tests/src/Unit/AcquiadamAuthTest.php
@@ -84,9 +84,7 @@ class AcquiadamAuthTest extends UnitTestCase {
     parent::setUp();
 
     $acquidamAuth = new AcquiadamAuthService();
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getBody')
       ->willReturn('{"access_token":"subdomain/l0p94ab7m05646d0a7f2dc023b94nm90", "username":"abc@abc.com"}');
@@ -101,9 +99,7 @@ class AcquiadamAuthTest extends UnitTestCase {
       ->getMock();
     $http_client->expects($this->any())->method('post')->willReturn($response);
 
-    $messenger = $this->getMockBuilder(Messenger::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $messenger = $this->createMock(Messenger::class);
 
     $this->container = new ContainerBuilder();
     \Drupal::setContainer($this->container);
diff --git a/tests/src/Unit/AcquiadamClientTest.php b/tests/src/Unit/AcquiadamClientTest.php
index 0b4cf4d..5f1be7c 100644
--- a/tests/src/Unit/AcquiadamClientTest.php
+++ b/tests/src/Unit/AcquiadamClientTest.php
@@ -54,21 +54,13 @@ class AcquiadamClientTest extends UnitTestCase {
   protected function setUp(): void {
     parent::setUp();
 
-    $current_user = $this->getMockBuilder(AccountProxyInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $current_user = $this->createMock(AccountProxyInterface::class);
 
-    $http_client = $this->getMockBuilder(ClientInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_client = $this->createMock(ClientInterface::class);
 
-    $user_data = $this->getMockBuilder(UserDataInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user_data = $this->createMock(UserDataInterface::class);
 
-    $request_stack = $this->getMockBuilder(RequestStack::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $request_stack = $this->createMock(RequestStack::class);
 
     $client = new Client($http_client, $user_data, $current_user, $this->getDefaultConfigFactoryStub(), $request_stack);
 
diff --git a/tests/src/Unit/AcquiadamConfigFormTest.php b/tests/src/Unit/AcquiadamConfigFormTest.php
index cea8b18..003f31b 100644
--- a/tests/src/Unit/AcquiadamConfigFormTest.php
+++ b/tests/src/Unit/AcquiadamConfigFormTest.php
@@ -103,8 +103,7 @@ class AcquiadamConfigFormTest extends UnitTestCase {
    */
   public function testPerformManualSync() {
     $form = [];
-    $form_state = $this->getMockBuilder(FormStateInterface::class)
-      ->getMock();
+    $form_state = $this->createMock(FormStateInterface::class);
 
     $this->assertFalse($this->acquiaDamConfig->performManualSync($form, $form_state));
 
@@ -186,28 +185,18 @@ class AcquiadamConfigFormTest extends UnitTestCase {
   protected function setUp(): void {
     parent::setUp();
 
-    $http_client = $this->getMockBuilder(ClientInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $time = $this->getMockBuilder(Time::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_client = $this->createMock(ClientInterface::class);
+    $time = $this->createMock(Time::class);
     $time->method('getRequestTime')
       ->willReturn(1560000000);
 
-    $this->queueWorker = $this->getMockBuilder(AssetRefresh::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $queue_worker_manager = $this->getMockBuilder(QueueWorkerManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->queueWorker = $this->createMock(AssetRefresh::class);
+    $queue_worker_manager = $this->createMock(QueueWorkerManager::class);
     $queue_worker_manager->expects($this->any())
       ->method('createInstance')
       ->willReturn($this->queueWorker);
 
-    $this->state = $this->getMockBuilder(State::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->state = $this->createMock(State::class);
 
     $this->container = new ContainerBuilder();
     $this->container->set('string_translation',
diff --git a/tests/src/Unit/AcquiadamServiceTest.php b/tests/src/Unit/AcquiadamServiceTest.php
index 7d5f3bc..877120e 100644
--- a/tests/src/Unit/AcquiadamServiceTest.php
+++ b/tests/src/Unit/AcquiadamServiceTest.php
@@ -85,9 +85,7 @@ class AcquiadamServiceTest extends UnitTestCase {
   protected function setUp() :void {
     parent::setUp();
 
-    $dam_client = $this->getMockBuilder(Client::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dam_client = $this->createMock(Client::class);
     $dam_client->expects($this->any())
       ->method('getCategoryData')
       ->willReturnCallback(function ($category) {
@@ -99,9 +97,7 @@ class AcquiadamServiceTest extends UnitTestCase {
       ->willReturnCallback(function () {
         return $this->getAssetData();
       });
-    $acquiadam_asset_data = $this->getMockBuilder(AssetDataInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $acquiadam_asset_data = $this->createMock(AssetDataInterface::class);
 
     $this->container = new ContainerBuilder();
     $this->container->set('logger.factory', $this->getLoggerFactoryStub());
diff --git a/tests/src/Unit/AssetDataTest.php b/tests/src/Unit/AssetDataTest.php
index baa64fc..fbe8323 100644
--- a/tests/src/Unit/AssetDataTest.php
+++ b/tests/src/Unit/AssetDataTest.php
@@ -49,9 +49,7 @@ class AssetDataTest extends UnitTestCase {
   protected function setUp() :void {
     parent::setUp();
 
-    $connection = $this->getMockBuilder(Connection::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $connection = $this->createMock(Connection::class);
 
     $asset_data = $this->getMockBuilder(AssetData::class)
       ->disableOriginalConstructor()
diff --git a/tests/src/Unit/AssetFileEntityHelperTest.php b/tests/src/Unit/AssetFileEntityHelperTest.php
index 42b370c..d16810b 100644
--- a/tests/src/Unit/AssetFileEntityHelperTest.php
+++ b/tests/src/Unit/AssetFileEntityHelperTest.php
@@ -92,13 +92,9 @@ class AssetFileEntityHelperTest extends UnitTestCase {
       ->getMockForAbstractClass();
     $this->mockedFileEntity->method('id')->willReturn(333);
 
-    $acquiadam = $this->getMockBuilder(Acquiadam::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $acquiadam = $this->createMock(Acquiadam::class);
 
-    $asset_media_factory = $this->getMockBuilder(AssetMediaFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_media_factory = $this->createMock(AssetMediaFactory::class);
     $asset_media_factory->method('getFileEntity')
       ->willReturn($this->mockedFileEntity->id());
 
@@ -123,9 +119,7 @@ class AssetFileEntityHelperTest extends UnitTestCase {
    *   The container to set mocks into.
    */
   protected function setMockedDrupalServices(ContainerBuilder $container) {
-    $file_storage = $this->getMockBuilder(EntityStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $file_storage = $this->createMock(EntityStorageInterface::class);
     $file_storage->method('load')
       ->with($this->mockedFileEntity->id())
       ->willReturn($this->mockedFileEntity);
@@ -141,37 +135,27 @@ class AssetFileEntityHelperTest extends UnitTestCase {
       ],
     ]);
 
-    $entity_type_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManagerInterface::class);
     $entity_type_manager->method('getStorage')->willReturnMap([
       ['file', $file_storage],
     ]);
 
-    $data_definition = $this->getMockBuilder(DataDefinitionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $data_definition = $this->createMock(DataDefinitionInterface::class);
     $data_definition->method('getSetting')->willReturnMap([
       ['uri_scheme', 'private'],
       ['file_directory', 'assets/[token]'],
     ]);
 
-    $field_definition = $this->getMockBuilder(FieldDefinitionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $field_definition = $this->createMock(FieldDefinitionInterface::class);
     $field_definition->method('getItemDefinition')
       ->willReturn($data_definition);
 
-    $entity_field_manager = $this->getMockBuilder(EntityFieldManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_field_manager = $this->createMock(EntityFieldManagerInterface::class);
     $entity_field_manager->method('getFieldDefinitions')->willReturnMap([
       ['media', 'media_acquiadam', ['phpunit_file_field' => $field_definition]],
     ]);
 
-    $token = $this->getMockBuilder(Token::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $token = $this->createMock(Token::class);
     $token->method('replace')
       ->willReturnCallback(function ($string, $a, $b, $c) {
         return ('assets/[token]' == $string) ? 'assets/replaced' : $string;
diff --git a/tests/src/Unit/AssetImageHelperTest.php b/tests/src/Unit/AssetImageHelperTest.php
index 5b47ccb..ccb275f 100644
--- a/tests/src/Unit/AssetImageHelperTest.php
+++ b/tests/src/Unit/AssetImageHelperTest.php
@@ -228,9 +228,7 @@ class AssetImageHelperTest extends UnitTestCase {
   protected function setUp(): void {
     parent::setUp();
 
-    $http_client = $this->getMockBuilder(GuzzleClient::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_client = $this->createMock(GuzzleClient::class);
 
     $file_system = $this->getMockBuilder(FileSystem::class)
       ->disableOriginalConstructor()
@@ -241,9 +239,7 @@ class AssetImageHelperTest extends UnitTestCase {
         return is_string($target) ? $target . '_copy' : $target . '_blah';
       });
 
-    $mime_type_guesser = $this->getMockBuilder(MimeTypeGuesser::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mime_type_guesser = $this->createMock(MimeTypeGuesser::class);
     $mime_type_guesser->method('guessMimeType')->willReturnCallback(function ($uri) {
       $map = [
         'public://test.jpg' => 'image/jpg',
@@ -254,13 +250,9 @@ class AssetImageHelperTest extends UnitTestCase {
       return $map[$uri] ?? '';
     });
 
-    $image_factory = $this->getMockBuilder(ImageFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $image_factory = $this->createMock(ImageFactory::class);
 
-    $url_assembler = $this->getMockBuilder(UnroutedUrlAssemblerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url_assembler = $this->createMock(UnroutedUrlAssemblerInterface::class);
 
     $url_assembler
       ->expects($this->any())
@@ -274,9 +266,7 @@ class AssetImageHelperTest extends UnitTestCase {
         ['https://demo.widen.net/content/demoextid/original/theHumanRaceMakesSense.jpg?u=lv0nkk&download=true', ['query' => ['h' => 650, 'q' => 80], 'external' => TRUE], FALSE, 'https://demo.widen.net/content/demoextid/original/theHumanRaceMakesSense.jpg?u=lv0nkk&download=true&h=650&q=80'],
       ]);
 
-    $entity_type_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManagerInterface::class);
 
     $this->container = new ContainerBuilder();
     $this->container->set('http_client', $http_client);
diff --git a/tests/src/Unit/AssetMediaFactoryTest.php b/tests/src/Unit/AssetMediaFactoryTest.php
index 07ab509..65f5ea8 100644
--- a/tests/src/Unit/AssetMediaFactoryTest.php
+++ b/tests/src/Unit/AssetMediaFactoryTest.php
@@ -193,16 +193,12 @@ class AssetMediaFactoryTest extends UnitTestCase {
 
     $this->mediaEntity = $this->getMockedMediaEntity($asset->id);
 
-    $media_bundle = $this->getMockBuilder(MediaTypeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $media_bundle = $this->createMock(MediaTypeInterface::class);
     $media_bundle->method('getSource')->willReturn($this->mediaEntity->getSource());
     $media_bundle->method('getFieldMap')
       ->willReturn(['file' => 'phpunit_file_field']);
 
-    $entity_storage = $this->getMockBuilder(EntityStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_storage = $this->createMock(EntityStorageInterface::class);
     $entity_storage->method('loadByProperties')
       ->with(['source' => 'acquiadam_asset'])
       ->willReturn([
@@ -215,26 +211,18 @@ class AssetMediaFactoryTest extends UnitTestCase {
       ['media_acquiadam', $media_bundle],
     ]);
 
-    $entity_type_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManagerInterface::class);
     $entity_type_manager->method('getStorage')->willReturnMap([
       ['media_type', $entity_storage],
       ['media', $entity_storage],
       ['file', $entity_storage],
     ]);
 
-    $asset_data = $this->getMockBuilder(AssetDataInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_data = $this->createMock(AssetDataInterface::class);
 
-    $acquiadam_client = $this->getMockBuilder(AcquiadamInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $acquiadam_client = $this->createMock(AcquiadamInterface::class);
 
-    $asset_file_helper = $this->getMockBuilder(AssetFileEntityHelper::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_file_helper = $this->createMock(AssetFileEntityHelper::class);
 
     $this->container = new ContainerBuilder();
     $this->container->set('entity_type.manager', $entity_type_manager);
diff --git a/tests/src/Unit/AssetMetadataHelperTest.php b/tests/src/Unit/AssetMetadataHelperTest.php
index b5750e5..8446699 100644
--- a/tests/src/Unit/AssetMetadataHelperTest.php
+++ b/tests/src/Unit/AssetMetadataHelperTest.php
@@ -123,9 +123,7 @@ class AssetMetadataHelperTest extends UnitTestCase {
   protected function setUp(): void {
     parent::setUp();
 
-    $date_formatter = $this->getMockBuilder(DateFormatterInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $date_formatter = $this->createMock(DateFormatterInterface::class);
     $date_formatter->method('format')
       ->willReturnCallback(function ($timestamp, $type, $format) {
         if ('custom' == $type) {
@@ -136,9 +134,7 @@ class AssetMetadataHelperTest extends UnitTestCase {
         return FALSE;
       });
 
-    $acquiadam_client = $this->getMockBuilder(Acquiadam::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $acquiadam_client = $this->createMock(Acquiadam::class);
 
     $this->container = new ContainerBuilder();
     $this->container->set('string_translation',
diff --git a/tests/src/Unit/AssetRefreshManagerTest.php b/tests/src/Unit/AssetRefreshManagerTest.php
index 833f934..22e6859 100644
--- a/tests/src/Unit/AssetRefreshManagerTest.php
+++ b/tests/src/Unit/AssetRefreshManagerTest.php
@@ -170,15 +170,11 @@ class AssetRefreshManagerTest extends UnitTestCase {
     $real_time = new \DateTime('now');
     $sync_time = new \DateTime('now');
     $sync_time->modify($last_sync_offset);
-    $state = $this->getMockBuilder(State::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $state = $this->createMock(State::class);
     $state->method('get')
       ->with('media_acquiadam.last_sync')
       ->willReturn($sync_time->getTimestamp());
-    $time = $this->getMockBuilder(TimeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $time = $this->createMock(TimeInterface::class);
     $time->method('getCurrentTime')
       ->willReturn($real_time->getTimestamp());
     $asset_before_time = $real_time->modify('-1 hour');
@@ -508,21 +504,15 @@ class AssetRefreshManagerTest extends UnitTestCase {
       ->disableOriginalConstructor()
       ->getMock();
 
-    $this->state = $this->getMockBuilder(State::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->state = $this->createMock(State::class);
     $this->state->method('get')
       ->with('media_acquiadam.last_sync')
       // 2022-05-24T09:14:42Z UTC.
       ->willReturn('1653383682');
 
-    $this->queue = $this->getMockBuilder(DatabaseQueue::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->queue = $this->createMock(DatabaseQueue::class);
     /** @var \Drupal\Core\Queue\QueueFactory|\PHPUnit\Framework\MockObject\MockObject $queue_factory */
-    $queue_factory = $this->getMockBuilder(QueueFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $queue_factory = $this->createMock(QueueFactory::class);
     $queue_factory->method('get')
       ->willReturn($this->queue);
 
@@ -531,27 +521,19 @@ class AssetRefreshManagerTest extends UnitTestCase {
       ->disableOriginalConstructor()
       ->getMock();
 
-    $entity_storage = $this->getMockBuilder(EntityStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_storage = $this->createMock(EntityStorageInterface::class);
     $entity_storage->method('getQuery')->willReturn($this->entityQuery);
 
-    $entity_type_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManagerInterface::class);
     $entity_type_manager->method('getStorage')->willReturnMap([
       ['media', $entity_storage],
     ]);
 
-    $language_manager = $this->getMockBuilder(LanguageManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $language_manager = $this->createMock(LanguageManagerInterface::class);
     $language_manager->method('getCurrentLanguage')
       ->willReturn(new Language(Language::$defaultValues));
 
-    $time = $this->getMockBuilder(TimeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $time = $this->createMock(TimeInterface::class);
     $time->method('getCurrentTime')
       // 2022-05-24T15:17:00Z UTC.
       ->willReturn('1653405420');
diff --git a/tests/src/Unit/MediaEntityHelperTest.php b/tests/src/Unit/MediaEntityHelperTest.php
index bed2334..b57d7df 100644
--- a/tests/src/Unit/MediaEntityHelperTest.php
+++ b/tests/src/Unit/MediaEntityHelperTest.php
@@ -48,9 +48,7 @@ class MediaEntityHelperTest extends UnitTestCase {
     $this->assertInstanceOf(FileInterface::class,
       $this->getNewMediaEntityHelper()->getExistingFile());
 
-    $media = $this->getMockBuilder(MediaInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $media = $this->createMock(MediaInterface::class);
 
     /** @var \Drupal\media\MediaInterface|\PHPUnit\Framework\MockObject\MockObject $media */
     $this->assertFalse($this->getNewMediaEntityHelper($media)
@@ -65,9 +63,7 @@ class MediaEntityHelperTest extends UnitTestCase {
       $this->getNewMediaEntityHelper()->getExistingFileId());
 
     /** @var \Drupal\media\MediaInterface|\PHPUnit\Framework\MockObject\MockObject $media */
-    $media = $this->getMockBuilder(MediaInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $media = $this->createMock(MediaInterface::class);
 
     $this->assertFalse($this->getNewMediaEntityHelper($media)
       ->getExistingFileId());
@@ -81,9 +77,7 @@ class MediaEntityHelperTest extends UnitTestCase {
       $this->getNewMediaEntityHelper()->getAssetFileField());
 
     /** @var \Drupal\media\MediaInterface|\PHPUnit\Framework\MockObject\MockObject $media */
-    $media = $this->getMockBuilder(MediaInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $media = $this->createMock(MediaInterface::class);
 
     $this->assertFalse($this->getNewMediaEntityHelper($media)
       ->getAssetFileField());
@@ -185,9 +179,7 @@ class MediaEntityHelperTest extends UnitTestCase {
     $media_bundle->method('getFieldMap')
       ->willReturn(['file' => 'phpunit_file_field']);
 
-    $entity_storage = $this->getMockBuilder(EntityStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_storage = $this->createMock(EntityStorageInterface::class);
     $entity_storage->method('load')->willReturnMap([
       [$this->getMockedFileEntity()->id(), $this->getMockedFileEntity()],
       ['media_acquiadam', $media_bundle],
@@ -203,9 +195,7 @@ class MediaEntityHelperTest extends UnitTestCase {
       ],
     ]);
 
-    $entity_type_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManagerInterface::class);
     $entity_type_manager->method('getStorage')->willReturnMap([
       ['file', $entity_storage],
       ['media_type', $entity_storage],
@@ -221,22 +211,16 @@ class MediaEntityHelperTest extends UnitTestCase {
    *   The container to set mocks into.
    */
   protected function setMockedAcquiaDamServices(ContainerBuilder $container) {
-    $asset_data = $this->getMockBuilder(AssetData::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_data = $this->createMock(AssetData::class);
     $asset_data->method('isUpdatedAsset')->willReturnOnConsecutiveCalls(FALSE,
       TRUE);
 
-    $acquiadam = $this->getMockBuilder(Acquiadam::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $acquiadam = $this->createMock(Acquiadam::class);
     $acquiadam->method('getAsset')->willReturnMap([
       [$this->getAssetData()->id, TRUE, $this->getAssetData()],
     ]);
 
-    $asset_file_helper = $this->getMockBuilder(AssetFileEntityHelper::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_file_helper = $this->createMock(AssetFileEntityHelper::class);
     $asset_file_helper->method('getDestinationFromEntity')
       ->willReturn('private://assets/replaced');
     $asset_file_helper->method('createNewFile')->with($this->anything(),
