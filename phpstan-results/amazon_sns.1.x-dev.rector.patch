diff --git a/src/Event/MessageEventDispatcher.php b/src/Event/MessageEventDispatcher.php
index 194b665..bfdc4dd 100644
--- a/src/Event/MessageEventDispatcher.php
+++ b/src/Event/MessageEventDispatcher.php
@@ -53,15 +53,15 @@ class MessageEventDispatcher implements ContainerInjectionInterface {
     $event = new SnsMessageEvent($message);
     switch ($message['Type']) {
       case 'SubscriptionConfirmation':
-        $this->eventDispatcher->dispatch(SnsEvents::SUBSCRIPTION_CONFIRMATION, $event);
+        $this->eventDispatcher->dispatch($event, SnsEvents::SUBSCRIPTION_CONFIRMATION);
         break;
 
       case 'Notification':
-        $this->eventDispatcher->dispatch(SnsEvents::NOTIFICATION, $event);
+        $this->eventDispatcher->dispatch($event, SnsEvents::NOTIFICATION);
         break;
 
       case 'UnsubscribeConfirmation':
-        $this->eventDispatcher->dispatch(SnsEvents::UNSUBSCRIBE_CONFIRMATION, $event);
+        $this->eventDispatcher->dispatch($event, SnsEvents::UNSUBSCRIBE_CONFIRMATION);
         break;
 
       default:
diff --git a/src/Event/SnsMessageEvent.php b/src/Event/SnsMessageEvent.php
index df6c4d5..3d3857d 100644
--- a/src/Event/SnsMessageEvent.php
+++ b/src/Event/SnsMessageEvent.php
@@ -11,7 +11,7 @@ use Symfony\Component\EventDispatcher\Event;
  * As the Symfony Event system doesn't have an 'EventInterface', we have to
  * extend the class to wrap our SNS event.
  */
-class SnsMessageEvent extends Event {
+class SnsMessageEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The notification from SNS.
diff --git a/tests/src/Functional/SnsSettingsFormTest.php b/tests/src/Functional/SnsSettingsFormTest.php
index b82e5d7..4272b5a 100644
--- a/tests/src/Functional/SnsSettingsFormTest.php
+++ b/tests/src/Functional/SnsSettingsFormTest.php
@@ -26,7 +26,7 @@ class SnsSettingsFormTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->rootUser);
   }
diff --git a/tests/src/Unit/NotificationControllerTest.php b/tests/src/Unit/NotificationControllerTest.php
index 00deb9d..78f59cf 100644
--- a/tests/src/Unit/NotificationControllerTest.php
+++ b/tests/src/Unit/NotificationControllerTest.php
@@ -22,15 +22,11 @@ class NotificationControllerTest extends UnitTestCase {
   public function testReceive() {
     $this->mockGuzzleCertRequest();
     /** @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\amazon_sns\Event\MessageEventDispatcher $dispatcher */
-    $dispatcher = $this->getMockBuilder(MessageEventDispatcher::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dispatcher = $this->createMock(MessageEventDispatcher::class);
     $dispatcher->expects($this->once())->method('dispatch');
 
     /** @var \PHPUnit\Framework\MockObject\MockObject|\Psr\Log\LoggerInterface $logger */
-    $logger = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger = $this->createMock(LoggerInterface::class);
     $logger->expects($this->never())->method($this->anything());
 
     $controller = new NotificationController($dispatcher, $logger);
@@ -45,15 +41,11 @@ class NotificationControllerTest extends UnitTestCase {
    */
   public function testMissingRequiredHeaders() {
     /** @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\amazon_sns\Event\MessageEventDispatcher $dispatcher */
-    $dispatcher = $this->getMockBuilder(MessageEventDispatcher::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dispatcher = $this->createMock(MessageEventDispatcher::class);
     $dispatcher->expects($this->never())->method('dispatch');
 
     /** @var \PHPUnit\Framework\MockObject\MockObject|\Psr\Log\LoggerInterface $logger */
-    $logger = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger = $this->createMock(LoggerInterface::class);
     $logger->expects($this->once())->method('log');
 
     $controller = new NotificationController($dispatcher, $logger);
@@ -73,15 +65,11 @@ class NotificationControllerTest extends UnitTestCase {
     $this->mockGuzzleCertRequest();
 
     /** @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\amazon_sns\Event\MessageEventDispatcher $dispatcher */
-    $dispatcher = $this->getMockBuilder(MessageEventDispatcher::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dispatcher = $this->createMock(MessageEventDispatcher::class);
     $dispatcher->expects($this->never())->method('dispatch');
 
     /** @var \PHPUnit\Framework\MockObject\MockObject|\Psr\Log\LoggerInterface $logger */
-    $logger = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger = $this->createMock(LoggerInterface::class);
     $logger->expects($this->once())->method('log');
 
     $controller = new NotificationController($dispatcher, $logger);
diff --git a/tests/src/Unit/SnsSubscriptionConfirmationSubscriberTest.php b/tests/src/Unit/SnsSubscriptionConfirmationSubscriberTest.php
index 708b564..93253bc 100644
--- a/tests/src/Unit/SnsSubscriptionConfirmationSubscriberTest.php
+++ b/tests/src/Unit/SnsSubscriptionConfirmationSubscriberTest.php
@@ -18,6 +18,7 @@ class SnsSubscriptionConfirmationSubscriberTest extends UnitTestCase {
 
   /**
    * Test subscription confirmation.
+   * @doesNotPerformAssertions
    */
   public function testConfirm() {
     // This message does not have a valid signature.
@@ -36,17 +37,13 @@ class SnsSubscriptionConfirmationSubscriberTest extends UnitTestCase {
     ];
 
     $message = new Message($data);
-    /** @var \PHPUnit_Framework_MockObject_MockObject|\GuzzleHttp\Client $client */
-    $client = $this->getMockBuilder(Client::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var \PHPUnit\Framework\MockObject\MockObject|\GuzzleHttp\Client $client */
+    $client = $this->createMock(Client::class);
     $client->expects($this->once())->method('request')
       ->with('GET', $message['SubscribeURL']);
 
-    /** @var \PHPUnit_Framework_MockObject_MockObject|\Psr\Log\LoggerInterface $logger */
-    $logger = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var \PHPUnit\Framework\MockObject\MockObject|\Psr\Log\LoggerInterface $logger */
+    $logger = $this->createMock(LoggerInterface::class);
     $logger->expects($this->once())->method('info');
 
     $subscriber = new SnsSubscriptionConfirmationSubscriber($client, $logger);
