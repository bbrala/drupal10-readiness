[parsing] modules/contrib/user_registrationpassword/UserRegistrationPasswordUserRegisterForm.php
[refactoring] modules/contrib/user_registrationpassword/UserRegistrationPasswordUserRegisterForm.php
[post rectors] modules/contrib/user_registrationpassword/UserRegistrationPasswordUserRegisterForm.php
[print] modules/contrib/user_registrationpassword/UserRegistrationPasswordUserRegisterForm.php
[refactoring] modules/contrib/user_registrationpassword/UserRegistrationPasswordUserRegisterForm.php
[post rectors] modules/contrib/user_registrationpassword/UserRegistrationPasswordUserRegisterForm.php
[print] modules/contrib/user_registrationpassword/UserRegistrationPasswordUserRegisterForm.php
[parsing] modules/contrib/user_registrationpassword/src/Controller/RegistrationController.php
[refactoring] modules/contrib/user_registrationpassword/src/Controller/RegistrationController.php
[post rectors] modules/contrib/user_registrationpassword/src/Controller/RegistrationController.php
[print] modules/contrib/user_registrationpassword/src/Controller/RegistrationController.php
[parsing] modules/contrib/user_registrationpassword/src/UserRegistrationPassword.php
[refactoring] modules/contrib/user_registrationpassword/src/UserRegistrationPassword.php
[post rectors] modules/contrib/user_registrationpassword/src/UserRegistrationPassword.php
[print] modules/contrib/user_registrationpassword/src/UserRegistrationPassword.php
[parsing] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPassword.php
[refactoring] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPassword.php
[post rectors] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPassword.php
[print] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPassword.php
[refactoring] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPassword.php
[post rectors] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPassword.php
[print] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPassword.php
[parsing] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAccountSettingFormTest.php
[refactoring] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAccountSettingFormTest.php
[post rectors] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAccountSettingFormTest.php
[print] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAccountSettingFormTest.php
[refactoring] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAccountSettingFormTest.php
[post rectors] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAccountSettingFormTest.php
[print] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAccountSettingFormTest.php
[parsing] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAdmin.php
[refactoring] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAdmin.php
[post rectors] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAdmin.php
[print] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAdmin.php
[refactoring] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAdmin.php
[post rectors] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAdmin.php
[print] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAdmin.php
[parsing] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAdminApproval.php
[refactoring] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAdminApproval.php
[post rectors] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAdminApproval.php
[print] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAdminApproval.php
[parsing] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordUserPasswordResetForm.php
[refactoring] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordUserPasswordResetForm.php
[post rectors] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordUserPasswordResetForm.php
[print] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordUserPasswordResetForm.php
[refactoring] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordUserPasswordResetForm.php
[post rectors] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordUserPasswordResetForm.php
[print] modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordUserPasswordResetForm.php
[parsing] modules/contrib/user_registrationpassword/tests/src/Kernel/UserRegistrationPasswordMailNotifyTest.php
[refactoring] modules/contrib/user_registrationpassword/tests/src/Kernel/UserRegistrationPasswordMailNotifyTest.php
[post rectors] modules/contrib/user_registrationpassword/tests/src/Kernel/UserRegistrationPasswordMailNotifyTest.php
[print] modules/contrib/user_registrationpassword/tests/src/Kernel/UserRegistrationPasswordMailNotifyTest.php
[parsing] modules/contrib/user_registrationpassword/user_registrationpassword.install
[refactoring] modules/contrib/user_registrationpassword/user_registrationpassword.install
[post rectors] modules/contrib/user_registrationpassword/user_registrationpassword.install
[print] modules/contrib/user_registrationpassword/user_registrationpassword.install
[parsing] modules/contrib/user_registrationpassword/user_registrationpassword.module
[refactoring] modules/contrib/user_registrationpassword/user_registrationpassword.module
[post rectors] modules/contrib/user_registrationpassword/user_registrationpassword.module
[print] modules/contrib/user_registrationpassword/user_registrationpassword.module
[parsing] modules/contrib/user_registrationpassword/user_registrationpassword.tokens.inc
[refactoring] modules/contrib/user_registrationpassword/user_registrationpassword.tokens.inc
[post rectors] modules/contrib/user_registrationpassword/user_registrationpassword.tokens.inc
[print] modules/contrib/user_registrationpassword/user_registrationpassword.tokens.inc

5 files with changes
====================

1) modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordUserPasswordResetForm.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     global $base_url;
     $this->base_url = $base_url;
@@ @@
     $edit1['mail'] = $edit1['name'] . '@example.com';
     $edit1['pass[pass1]'] = $new_pass = $this->randomMachineName();
     $edit1['pass[pass2]'] = $new_pass;
-    $this->drupalPostForm('user/register', $edit1, 'Create new account');
-    $this->assertText('A welcome message with further instructions has been sent to your email address.', 'User registered successfully.');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit1, 'Create new account');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('A welcome message with further instructions has been sent to your email address.');

     // Request a new activation email.
     $edit2 = [];
     $edit2['name'] = $edit1['name'];
-    $this->drupalPostForm('user/password', $edit2, 'Submit');
-    $this->assertText('Further instructions have been sent to your email address.', 'Password reset form submitted successfully.');
+    $this->drupalGet('user/password');
+    $this->submitForm($edit2, 'Submit');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');

     $_emails = $this->getMails();
     $email = end($_emails);
     $this->assertNotEmpty($email['subject']);
     $this->assertNotEmpty($email['body']);
-    $this->assertNotEqual($email['send'], 0);
+    $this->assertNotEquals($email['send'], 0);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNotEqualRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAdmin.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // User to add and remove language.
     $this->adminUser = $this->drupalCreateUser(['administer account settings', 'administer users']);
@@ @@
     // Test the default options.
     $this->drupalGet('admin/config/people/accounts');
     $edit_first = ['user_register' => UserInterface::REGISTER_VISITORS, 'user_registrationpassword_registration' => UserRegistrationPassword::VERIFICATION_PASS];
-    $this->drupalPostForm('admin/config/people/accounts', $edit_first, 'Save configuration');
+    $this->drupalGet('admin/config/people/accounts');
+    $this->submitForm($edit_first, 'Save configuration');

     // Load config.
     $user_config = \Drupal::configFactory()->get('user.settings');
@@ @@
       'user_register' => UserInterface::REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL,
       'user_registrationpassword_registration' => UserRegistrationPassword::VERIFICATION_PASS,
     ];
-    $this->drupalPostForm('admin/config/people/accounts', $edit_second, 'Save configuration');
+    $this->drupalGet('admin/config/people/accounts');
+    $this->submitForm($edit_second, 'Save configuration');

     // Load config.
     $user_config = \Drupal::configFactory()->get('user.settings');
@@ @@
       'user_register' => UserInterface::REGISTER_ADMINISTRATORS_ONLY,
       'user_registrationpassword_registration' => UserRegistrationPassword::VERIFICATION_PASS,
     ];
-    $this->drupalPostForm('admin/config/people/accounts', $edit_third, 'Save configuration');
+    $this->drupalGet('admin/config/people/accounts');
+    $this->submitForm($edit_third, 'Save configuration');

     // Load config.
     $user_config = \Drupal::configFactory()->get('user.settings');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAccountSettingFormTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser(['administer account settings']);
     $this->drupalLogin($this->adminUser);
@@ @@
     ] as $option) {
       $edit = [];
       $edit['user_registrationpassword_registration'] = $option;
-      $this->drupalPostForm('admin/config/people/accounts', $edit, 'Save configuration');
+      $this->drupalGet('admin/config/people/accounts');
+      $this->submitForm($edit, 'Save configuration');

       $this->assertSession()->pageTextNotContains('An illegal choice has been detected. Please contact the site administrator.');
       $this->assertSession()->pageTextContains('The configuration options have been saved.');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPassword.php:33

    ---------- begin diff ----------
@@ @@
     $edit['pass[pass1]'] = $new_pass = $this->randomMachineName();
     $edit['pass[pass2]'] = $new_pass;
     $pass = $new_pass;
-    $this->drupalPostForm('user/register', $edit, 'Create new account');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, 'Create new account');
     $this->assertSession()->pageTextContains('A welcome message with further instructions has been sent to your email address.');

     // Load the new user.
@@ @@
       'name' => $name,
       'pass' => $pass,
     ];
-    $this->drupalPostForm('user/login', $auth, 'Log in');
+    $this->drupalGet('user/login');
+    $this->submitForm($auth, 'Log in');
     $this->assertSession()->pageTextContains('The username ' . $name . ' has not been activated or is blocked.');

     // Timestamp can not be smaller then current. (== registration time).
@@ @@
       'name' => $name,
       'pass' => $pass,
     ];
-    $this->drupalPostForm('user/login', $auth, 'Log in');
+    $this->drupalGet('user/login');
+    $this->submitForm($auth, 'Log in');
     $this->assertSession()->pageTextContains('Member for');
   }

@@ @@
     $edit1['mail'] = $edit1['name'] . '@example.com';
     $edit1['pass[pass1]'] = $new_pass = $this->randomMachineName();
     $edit1['pass[pass2]'] = $new_pass;
-    $this->drupalPostForm('user/register', $edit1, 'Create new account');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit1, 'Create new account');
     $this->assertSession()->pageTextContains('A welcome message with further instructions has been sent to your email address.');

     // Request a new activation email.
     $edit2 = [];
     $edit2['name'] = $edit1['name'];
-    $this->drupalPostForm('user/password', $edit2, 'Submit');
+    $this->drupalGet('user/password');
+    $this->submitForm($edit2, 'Submit');
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');

     // Request a new activation email for a non-existing user name.
     $edit3 = [];
     $edit3['name'] = $this->randomMachineName();
-    $this->drupalPostForm('user/password', $edit3, 'Submit');
+    $this->drupalGet('user/password');
+    $this->submitForm($edit3, 'Submit');
     $this->assertSession()->pageTextContains($edit3['name'] . ' is not recognized as a username or an email address.');

     // Request a new activation email for a non-existing user email.
     $edit4 = [];
     $edit4['name'] = $this->randomMachineName() . '@example.com';
-    $this->drupalPostForm('user/password', $edit4, 'Submit');
+    $this->drupalGet('user/password');
+    $this->submitForm($edit4, 'Submit');
     $this->assertSession()->pageTextContains($edit4['name'] . ' is not recognized as a username or an email address.');
   }

@@ @@
     $edit['mail'] = $mail = $edit['name'] . '@example.com';
     $edit['pass[pass1]'] = $new_pass = $this->randomMachineName();
     $edit['pass[pass2]'] = $new_pass;
-    $this->drupalPostForm('user/register', $edit, 'Create new account');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, 'Create new account');

     // Load the new user.
     $accounts = \Drupal::entityQuery('user')
@@ @@

     // Try to request a new activation email.
     $edit2['name'] = $edit['name'];
-    $this->drupalPostForm('user/password', $edit2, 'Submit');
+    $this->drupalGet('user/password');
+    $this->submitForm($edit2, 'Submit');
     $this->assertSession()->pageTextContains($edit2['name'] . ' is blocked or has not been activated yet.');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/user_registrationpassword/UserRegistrationPasswordUserRegisterForm.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $user_config = \Drupal::configFactory()->getEditable('user.settings');
@@ @@
    */
   public function testUserRegisterFormCompatibility() {
     // Test submit callback.
-    $this->assertEqual($this->registerForm['actions']['submit']['#submit'][2], 'user_registrationpassword_form_user_register_submit', 'Submit handler correctly changed.');
+    $this->assertEquals($this->registerForm['actions']['submit']['#submit'][2], 'user_registrationpassword_form_user_register_submit', 'Submit handler correctly changed.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 5 files have been changed by Rector                                       

