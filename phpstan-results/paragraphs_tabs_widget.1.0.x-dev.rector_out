[parsing] modules/contrib/paragraphs_tabs_widget/src/Plugin/Field/FieldWidget/ParagraphsTabWidgetVerticalTabs.php
[refactoring] modules/contrib/paragraphs_tabs_widget/src/Plugin/Field/FieldWidget/ParagraphsTabWidgetVerticalTabs.php
[post rectors] modules/contrib/paragraphs_tabs_widget/src/Plugin/Field/FieldWidget/ParagraphsTabWidgetVerticalTabs.php
[print] modules/contrib/paragraphs_tabs_widget/src/Plugin/Field/FieldWidget/ParagraphsTabWidgetVerticalTabs.php
[parsing] modules/contrib/paragraphs_tabs_widget/tests/src/Functional/VerticalTabConfigurationTest.php
[refactoring] modules/contrib/paragraphs_tabs_widget/tests/src/Functional/VerticalTabConfigurationTest.php
[post rectors] modules/contrib/paragraphs_tabs_widget/tests/src/Functional/VerticalTabConfigurationTest.php
[print] modules/contrib/paragraphs_tabs_widget/tests/src/Functional/VerticalTabConfigurationTest.php
[refactoring] modules/contrib/paragraphs_tabs_widget/tests/src/Functional/VerticalTabConfigurationTest.php
[post rectors] modules/contrib/paragraphs_tabs_widget/tests/src/Functional/VerticalTabConfigurationTest.php
[print] modules/contrib/paragraphs_tabs_widget/tests/src/Functional/VerticalTabConfigurationTest.php
[parsing] modules/contrib/paragraphs_tabs_widget/tests/src/Functional/VerticalTabWidgetHtmlOutputTest.php
[refactoring] modules/contrib/paragraphs_tabs_widget/tests/src/Functional/VerticalTabWidgetHtmlOutputTest.php
[post rectors] modules/contrib/paragraphs_tabs_widget/tests/src/Functional/VerticalTabWidgetHtmlOutputTest.php
[print] modules/contrib/paragraphs_tabs_widget/tests/src/Functional/VerticalTabWidgetHtmlOutputTest.php
[refactoring] modules/contrib/paragraphs_tabs_widget/tests/src/Functional/VerticalTabWidgetHtmlOutputTest.php
[post rectors] modules/contrib/paragraphs_tabs_widget/tests/src/Functional/VerticalTabWidgetHtmlOutputTest.php
[print] modules/contrib/paragraphs_tabs_widget/tests/src/Functional/VerticalTabWidgetHtmlOutputTest.php
[parsing] modules/contrib/paragraphs_tabs_widget/tests/src/FunctionalJavascript/VerticalTabWidgetJsTest.php
[refactoring] modules/contrib/paragraphs_tabs_widget/tests/src/FunctionalJavascript/VerticalTabWidgetJsTest.php
[post rectors] modules/contrib/paragraphs_tabs_widget/tests/src/FunctionalJavascript/VerticalTabWidgetJsTest.php
[print] modules/contrib/paragraphs_tabs_widget/tests/src/FunctionalJavascript/VerticalTabWidgetJsTest.php
[refactoring] modules/contrib/paragraphs_tabs_widget/tests/src/FunctionalJavascript/VerticalTabWidgetJsTest.php
[post rectors] modules/contrib/paragraphs_tabs_widget/tests/src/FunctionalJavascript/VerticalTabWidgetJsTest.php
[print] modules/contrib/paragraphs_tabs_widget/tests/src/FunctionalJavascript/VerticalTabWidgetJsTest.php
[parsing] modules/contrib/paragraphs_tabs_widget/tests/src/Traits/VerticalTabsTestTrait.php
[refactoring] modules/contrib/paragraphs_tabs_widget/tests/src/Traits/VerticalTabsTestTrait.php
[post rectors] modules/contrib/paragraphs_tabs_widget/tests/src/Traits/VerticalTabsTestTrait.php
[print] modules/contrib/paragraphs_tabs_widget/tests/src/Traits/VerticalTabsTestTrait.php

3 files with changes
====================

1) modules/contrib/paragraphs_tabs_widget/tests/src/FunctionalJavascript/VerticalTabWidgetJsTest.php:58

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->setUpRandomParagraphTypeWithRandomTextField();
@@ @@
     // list.
     $this->drupalGet(Url::fromRoute('node.add', ['node_type' => $this->sutNodeType->id()])->toString());
     $page = $this->getSession()->getPage();
-    $vtAddButton = $page->findAll('xpath', $as->buildXPathQuery('//*[contains(@class,:jsVtWrapperClass)]/*[contains(@class,:vtWrapperClass)]/ul[contains(@class,:vtMenuClass)]/*[@data-paragraphs-tabs-widget-addmore-group=:fieldName]', [
+    $vtAddButton = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[contains(@class,:jsVtWrapperClass)]/*[contains(@class,:vtWrapperClass)]/ul[contains(@class,:vtMenuClass)]/*[@data-paragraphs-tabs-widget-addmore-group=:fieldName]', [
       ':jsVtWrapperClass' => 'js-form-type-vertical-tabs',
       ':vtWrapperClass' => 'vertical-tabs',
       ':vtMenuClass' => 'vertical-tabs__menu',
@@ @@
     // vertical tabs menu list.
     $this->drupalGet($this->sutNode->toUrl('edit-form')->toString());
     $page = $this->getSession()->getPage();
-    $vtAddButton = $page->findAll('xpath', $as->buildXPathQuery('//*[contains(@class,:jsVtWrapperClass)]/*[contains(@class,:vtWrapperClass)]/ul[contains(@class,:vtMenuClass)]/*[@data-paragraphs-tabs-widget-addmore-group=:fieldName]', [
+    $vtAddButton = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[contains(@class,:jsVtWrapperClass)]/*[contains(@class,:vtWrapperClass)]/ul[contains(@class,:vtMenuClass)]/*[@data-paragraphs-tabs-widget-addmore-group=:fieldName]', [
       ':jsVtWrapperClass' => 'js-form-type-vertical-tabs',
       ':vtWrapperClass' => 'vertical-tabs',
       ':vtMenuClass' => 'vertical-tabs__menu',
@@ @@

     // Node/add: Find evidence that JavaScript ran on the page by looking for a
     // class not sent in the initial page response.
-    $fieldLabel = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[contains(@class,:jsVtWrapperClass)]/label[text()=:fieldLabelText]', [
+    $fieldLabel = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[contains(@class,:jsVtWrapperClass)]/label[text()=:fieldLabelText]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':jsVtWrapperClass' => 'js-form-type-vertical-tabs',
       ':fieldLabelText' => $this->sutParagraphNodeFieldLabel,
@@ @@
     $this->assertNotEmpty($fieldLabel, "On the node/add page, the field's label's parent shows vertical-tabs class added by JavaScript.");

     // Node/add: Verify we can find a tab menu for the field.
-    $verticalTabsMenu = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//ul[contains(@class,:vtMenuClass)]', [
+    $verticalTabsMenu = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//ul[contains(@class,:vtMenuClass)]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':vtMenuClass' => 'vertical-tabs__menu',
     ]));
@@ @@
     // Node/add: Verify there is only one vertical tab menu item for the field,
     // i.e.: for the empty paragraph created by the base
     // entity_reference_paragraphs widget for new entities.
-    $verticalTabsMenuItems = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//li[contains(@class,:vtMenuItemClass)]', [
+    $verticalTabsMenuItems = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//li[contains(@class,:vtMenuItemClass)]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':vtMenuItemClass' => 'vertical-tabs__menu-item',
     ]));
@@ @@

     // Node/add: Verify we can find a container for vertical tab panes for the
     // field.
-    $verticalTabsPanesWrapper = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[contains(@class,:vtPanesWrapperClass)][@data-paragraphs-tabs-widget-group=:nodeFieldMachName][@data-vertical-tabs-panes]', [
+    $verticalTabsPanesWrapper = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[contains(@class,:vtPanesWrapperClass)][@data-paragraphs-tabs-widget-group=:nodeFieldMachName][@data-vertical-tabs-panes]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':vtPanesWrapperClass' => 'vertical-tabs__panes',
     ]));
@@ @@
     // Node/add: Verify there is only one vertical tab pane for the field, i.e.:
     // for the empty paragraph created by the base entity_reference_paragraphs
     // widget for new entities. Verify this tab pane is visible.
-    $verticalTabsPanes = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[contains(@class,:vtPanesWrapperClass)]/*[contains(@class,:vtPaneClass)]', [
+    $verticalTabsPanes = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[contains(@class,:vtPanesWrapperClass)]/*[contains(@class,:vtPaneClass)]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':vtPanesWrapperClass' => 'vertical-tabs__panes',
       ':vtPaneClass' => 'vertical-tabs__pane',
@@ @@

     // Node/edit: Find evidence that JavaScript ran on the page by looking for a
     // class not sent in the initial page response.
-    $fieldLabel = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[contains(@class,:jsVtWrapperClass)]/label[text()=:fieldLabelText]', [
+    $fieldLabel = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[contains(@class,:jsVtWrapperClass)]/label[text()=:fieldLabelText]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':jsVtWrapperClass' => 'js-form-type-vertical-tabs',
       ':fieldLabelText' => $this->sutParagraphNodeFieldLabel,
@@ @@
     $this->assertNotEmpty($fieldLabel, "On the node/edit page, the field's label's parent shows vertical-tabs class added by JavaScript.");

     // Node/edit: Verify we can find a tab menu for the field.
-    $verticalTabsMenu = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//ul[contains(@class,:vtMenuClass)]', [
+    $verticalTabsMenu = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//ul[contains(@class,:vtMenuClass)]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':vtMenuClass' => 'vertical-tabs__menu',
     ]));
@@ @@

     // Node/edit: Verify there are two vertical tab menu items for the field,
     // i.e.: one for each of the paragraphs we created in the setUp().
-    $verticalTabsMenuItems = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//li[contains(@class,:vtMenuItemClass)]', [
+    $verticalTabsMenuItems = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//li[contains(@class,:vtMenuItemClass)]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':vtMenuItemClass' => 'vertical-tabs__menu-item',
     ]));
@@ @@

     // Node/edit: Verify we can find a container for vertical tab panes for the
     // field.
-    $verticalTabsPanesWrapper = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[contains(@class,:vtPanesWrapperClass)][@data-paragraphs-tabs-widget-group=:nodeFieldMachName][@data-vertical-tabs-panes]', [
+    $verticalTabsPanesWrapper = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[contains(@class,:vtPanesWrapperClass)][@data-paragraphs-tabs-widget-group=:nodeFieldMachName][@data-vertical-tabs-panes]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':vtPanesWrapperClass' => 'vertical-tabs__panes',
     ]));
@@ @@
     // one for each of the paragraphs we created in the setUp(). Verify the
     // first one is visible and the second one is not visible, i.e.: acting like
     // tabs.
-    $verticalTabsPanes = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[contains(@class,:vtPanesWrapperClass)]/*[contains(@class,:vtPaneClass)]', [
+    $verticalTabsPanes = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[contains(@class,:vtPanesWrapperClass)]/*[contains(@class,:vtPaneClass)]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':vtPanesWrapperClass' => 'vertical-tabs__panes',
       ':vtPaneClass' => 'vertical-tabs__pane',
@@ @@
     $this->drupalLogin($this->sutAdminUser);

     // Build any xpath queries we will use multiple times.
-    $xpathQueryMenuItemSummary = $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//li[contains(@class,:vtMenuItemClass)]//*[contains(@class,:vtMenuItemSummaryClass)]', [
+    $xpathQueryMenuItemSummary = $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//li[contains(@class,:vtMenuItemClass)]//*[contains(@class,:vtMenuItemSummaryClass)]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':vtMenuItemClass' => 'vertical-tabs__menu-item',
       ':vtMenuItemSummaryClass' => 'vertical-tabs__menu-item-summary',
@@ @@
     // one tab summary, and verify the first tab summary is now the random
     // string.
     $randomFieldValue = $this->randomString();
-    $field = $page->find('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//input[contains(@name,:paragraphFieldMachName)]', [
+    $field = $page->find('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//input[contains(@name,:paragraphFieldMachName)]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':paragraphFieldMachName' => $this->sutParagraphParagraphFieldName,
     ]));
@@ @@
     $this->drupalLogin($this->sutAdminUser);

     // Build any xpath queries we will use multiple times.
-    $xpathQueryMenuItemSummary = $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//li[contains(@class,:vtMenuItemClass)]//*[contains(@class,:vtMenuItemSummaryClass)]', [
+    $xpathQueryMenuItemSummary = $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//li[contains(@class,:vtMenuItemClass)]//*[contains(@class,:vtMenuItemSummaryClass)]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':vtMenuItemClass' => 'vertical-tabs__menu-item',
       ':vtMenuItemSummaryClass' => 'vertical-tabs__menu-item-summary',
@@ @@
     // two random strings.
     $vtMenuItemSummariesBefore = $page->findAll('xpath', $xpathQueryMenuItemSummary);
     $this->assertCount(2, $vtMenuItemSummariesBefore, 'There is initially two menu item summaries on the node/edit page.');
-    $this->assertEqual($vtMenuItemSummariesBefore[0]->getText(), $this->sutParagraph1RandomValue, 'The first menu item summary on the node/edit page is the value of the first paragraph field.');
-    $this->assertEqual($vtMenuItemSummariesBefore[1]->getText(), $this->sutParagraph2RandomValue, 'The second menu item summary on the node/edit page is the value of the second paragraph field.');
+    $this->assertEquals($vtMenuItemSummariesBefore[0]->getText(), $this->sutParagraph1RandomValue, 'The first menu item summary on the node/edit page is the value of the first paragraph field.');
+    $this->assertEquals($vtMenuItemSummariesBefore[1]->getText(), $this->sutParagraph2RandomValue, 'The second menu item summary on the node/edit page is the value of the second paragraph field.');

     // Node/edit: Generate a random string. Click the second tab summary to
     // make the contents of that tab visible. Find the summary-controlling field
@@ @@
     // random string we just generated.
     $newParagraph2RandomValue = $this->randomString();
     $vtMenuItemSummariesBefore[1]->click();
-    $fields = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//input[contains(@name,:paragraphFieldMachName)]', [
+    $fields = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//input[contains(@name,:paragraphFieldMachName)]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':paragraphFieldMachName' => $this->sutParagraphParagraphFieldName,
     ]));
@@ @@
     });
     $vtMenuItemSummariesAfter = $page->findAll('xpath', $xpathQueryMenuItemSummary);
     $this->assertCount(2, $vtMenuItemSummariesAfter, 'There are still two menu item summaries on the node/edit page.');
-    $this->assertEqual($vtMenuItemSummariesBefore[0]->getText(), $this->sutParagraph1RandomValue, 'The first menu item summary on the node/edit page is still the value of the first paragraph field.');
-    $this->assertEqual($vtMenuItemSummariesBefore[1]->getText(), $newParagraph2RandomValue, 'The second menu item summary on the node/edit page now matches the random value we set.');
+    $this->assertEquals($vtMenuItemSummariesBefore[0]->getText(), $this->sutParagraph1RandomValue, 'The first menu item summary on the node/edit page is still the value of the first paragraph field.');
+    $this->assertEquals($vtMenuItemSummariesBefore[1]->getText(), $newParagraph2RandomValue, 'The second menu item summary on the node/edit page now matches the random value we set.');
   }

   /**
@@ @@
     $this->drupalLogin($this->sutAdminUser);

     // Prepare any xpath queries we will use multiple times.
-    $xpathQueryVtPanes = $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[contains(@class,:vtPanesWrapperClass)]/*[contains(@class,:vtPaneClass)]', [
+    $xpathQueryVtPanes = $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[contains(@class,:vtPanesWrapperClass)]/*[contains(@class,:vtPaneClass)]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':vtPanesWrapperClass' => 'vertical-tabs__panes',
       ':vtPaneClass' => 'vertical-tabs__pane',
     ]);
-    $xpathQueryConfirmRemoveButton = $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[@data-paragraph-tabs-widget-tab-group=:nodeFieldMachName]//input[contains(@data-drupal-selector,:confirmButtonSelector)]', [
+    $xpathQueryConfirmRemoveButton = $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[@data-paragraph-tabs-widget-tab-group=:nodeFieldMachName]//input[contains(@data-drupal-selector,:confirmButtonSelector)]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':confirmButtonSelector' => '-top-links-confirm-remove-button',
     ]);
@@ @@
     $this->assertCount(1, $verticalTabsPanesPageLoad, 'There is initially 1 vertical tab pane on the node/add page.');

     // Find and click the add button. Wait for AJAX to finish.
-    $addButton = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[@data-paragraphs-tabs-widget-addmore-group]//input[contains(@class,:addMoreSubmit)]', [
+    $addButton = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[@data-paragraphs-tabs-widget-addmore-group]//input[contains(@class,:addMoreSubmit)]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':addMoreSubmit' => 'field-add-more-submit',
     ]));
@@ @@

     // Find and click the remove button for the first pane. Wait for AJAX to
     // finish. Click the confirm button. Wait for AJAX to finish.
-    $removeButtons = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[@data-paragraph-tabs-widget-tab-group=:nodeFieldMachName]//input[contains(@data-drupal-selector,:removeButtonSelector)]', [
+    $removeButtons = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[@data-paragraph-tabs-widget-tab-group=:nodeFieldMachName]//input[contains(@data-drupal-selector,:removeButtonSelector)]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':removeButtonSelector' => '-top-links-remove-button',
     ]));
@@ @@
     $this->drupalLogin($this->sutAdminUser);

     // Prepare any xpath queries we will use multiple times.
-    $xpathQueryVtPanes = $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[contains(@class,:vtPanesWrapperClass)]/*[contains(@class,:vtPaneClass)]', [
+    $xpathQueryVtPanes = $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[contains(@class,:vtPanesWrapperClass)]/*[contains(@class,:vtPaneClass)]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':vtPanesWrapperClass' => 'vertical-tabs__panes',
       ':vtPaneClass' => 'vertical-tabs__pane',
     ]);
-    $xpathQueryConfirmRemoveButton = $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[@data-paragraph-tabs-widget-tab-group=:nodeFieldMachName]//input[contains(@data-drupal-selector,:confirmButtonSelector)]', [
+    $xpathQueryConfirmRemoveButton = $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[@data-paragraph-tabs-widget-tab-group=:nodeFieldMachName]//input[contains(@data-drupal-selector,:confirmButtonSelector)]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':confirmButtonSelector' => '-top-links-confirm-remove-button',
     ]);
@@ @@
     $this->assertCount(2, $verticalTabsPanesPageLoad, 'There are initially 2 vertical tab panes on the node/edit page.');

     // Find and click the add button. Wait for AJAX to finish.
-    $addButton = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[@data-paragraphs-tabs-widget-addmore-group]//input[contains(@class,:addMoreSubmit)]', [
+    $addButton = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[@data-paragraphs-tabs-widget-addmore-group]//input[contains(@class,:addMoreSubmit)]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':addMoreSubmit' => 'field-add-more-submit',
     ]));
@@ @@

     // Find and click the remove button for the first pane. Wait for AJAX to
     // finish. Click the confirm button. Wait for AJAX to finish.
-    $removeButtons = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[@data-paragraph-tabs-widget-tab-group=:nodeFieldMachName]//input[contains(@data-drupal-selector,:removeButtonSelector)]', [
+    $removeButtons = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[@data-paragraph-tabs-widget-tab-group=:nodeFieldMachName]//input[contains(@data-drupal-selector,:removeButtonSelector)]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':removeButtonSelector' => '-top-links-remove-button',
     ]));
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * BuildXPathQueryRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/paragraphs_tabs_widget/tests/src/Functional/VerticalTabWidgetHtmlOutputTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->setUpRandomParagraphTypeWithRandomTextField();
@@ @@
     $page->hasField($this->sutParagraphNodeFieldName);

     // Validate there is a label for the field/wrapper.
-    $label = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//label[text()=:fieldLabelText]', [
+    $label = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//label[text()=:fieldLabelText]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':fieldLabelText' => $this->sutParagraphNodeFieldLabel,
     ]));
@@ @@
     $this->assertCount(1, $label, 'There is exactly one field label on the create node form.');

     // Validate the field/wrapper has the correct HTML attributes.
-    $vtWrapper = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[@data-paragraphs-tabs-widget-group=:nodeFieldMachName][@data-vertical-tabs-panes]', [
+    $vtWrapper = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[@data-paragraphs-tabs-widget-group=:nodeFieldMachName][@data-vertical-tabs-panes]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
     ]));
     $this->assertNotEmpty($vtWrapper, 'Vertical tab wrapper is present.');
@@ @@
     $this->assertCount(1, $vtWrapper, 'There is exactly one vertical tab wrapper on the create node form.');

     // Validate the label is adjacent to the field/wrapper.
-    $labelAndVtWrapper = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//label[text()=:fieldLabelText]/following-sibling::*[1][@data-paragraphs-tabs-widget-group=:nodeFieldMachName][@data-vertical-tabs-panes]', [
+    $labelAndVtWrapper = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//label[text()=:fieldLabelText]/following-sibling::*[1][@data-paragraphs-tabs-widget-group=:nodeFieldMachName][@data-vertical-tabs-panes]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       ':fieldLabelText' => $this->sutParagraphNodeFieldLabel,
     ]));
@@ @@
     // Validate the field/wrapper has a "tab" detail element as a child element
     // (important because the JavaScript won't work if tabs are grandchildren or
     // later descendants).
-    $detailsTabIsChildOfVtWrapper = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[@data-paragraphs-tabs-widget-group=:nodeFieldMachName][@data-vertical-tabs-panes]/details[@data-paragraph-tabs-widget-tab-group=:nodeFieldMachName]', [
+    $detailsTabIsChildOfVtWrapper = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[@data-paragraphs-tabs-widget-group=:nodeFieldMachName][@data-vertical-tabs-panes]/details[@data-paragraph-tabs-widget-tab-group=:nodeFieldMachName]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
     ]));
     $this->assertNotEmpty($detailsTabIsChildOfVtWrapper, 'Details tab element is a child (i.e.: not a later descendant) of the vertical tab wrapper.');
@@ @@

     // Validate that the paragraph's field is a descendant of a tab. This proves
     // the paragraph's form is inside the tab.
-    $paragraphFieldIsDescendantOfTab = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//details[@data-paragraph-tabs-widget-tab-group=:nodeFieldMachName]//input[contains(@name,:paraFieldMachName)]', [
+    $paragraphFieldIsDescendantOfTab = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//details[@data-paragraph-tabs-widget-tab-group=:nodeFieldMachName]//input[contains(@name,:paraFieldMachName)]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       // The name of the field in the paragraph will be in square brackets
       // somewhere in the input element's name attribute according to Drupal's
@@ @@
     // Validate the field/wrapper has an "add more" button as a child element
     // (important because the JavaScript won't work if the add more element is a
     // grandchild or later descendant).
-    $addMoreIsChildOfVtWrapper = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[@data-paragraphs-tabs-widget-group=:nodeFieldMachName][@data-vertical-tabs-panes]/div[@data-paragraphs-tabs-widget-addmore-group=:nodeFieldMachName]', [
+    $addMoreIsChildOfVtWrapper = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group-wrapper=:nodeFieldMachName]//*[@data-paragraphs-tabs-widget-group=:nodeFieldMachName][@data-vertical-tabs-panes]/div[@data-paragraphs-tabs-widget-addmore-group=:nodeFieldMachName]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
     ]));
     $this->assertNotEmpty($addMoreIsChildOfVtWrapper, 'Add more element is a child (i.e.: not a later descendant) of the vertical tab wrapper.');
@@ @@
     $page = $this->getSession()->getPage();

     // Validate there is a label for the field/wrapper.
-    $label = $page->findAll('xpath', $as->buildXPathQuery('//label[text()=:fieldLabelText]', [
+    $label = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//label[text()=:fieldLabelText]', [
       ':fieldLabelText' => $this->sutParagraphNodeFieldLabel,
     ]));
     $this->assertNotEmpty($label, 'Field label is present.');
@@ @@
     $this->assertCount(1, $label, 'There is exactly one field label on the edit node form.');

     // Validate the field/wrapper has the correct HTML attributes.
-    $vtWrapper = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group=:nodeFieldMachName][@data-vertical-tabs-panes]', [
+    $vtWrapper = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group=:nodeFieldMachName][@data-vertical-tabs-panes]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
     ]));
     $this->assertNotEmpty($vtWrapper, 'Vertical tab wrapper is present.');
@@ @@
     $this->assertCount(1, $vtWrapper, 'There is exactly one vertical tab wrapper on the edit node form.');

     // Validate the label is adjacent to the field/wrapper.
-    $labelAndVtWrapper = $page->findAll('xpath', $as->buildXPathQuery('//label[text()=:fieldLabelText]/following-sibling::*[1][@data-paragraphs-tabs-widget-group=:nodeFieldMachName][@data-vertical-tabs-panes]', [
+    $labelAndVtWrapper = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//label[text()=:fieldLabelText]/following-sibling::*[1][@data-paragraphs-tabs-widget-group=:nodeFieldMachName][@data-vertical-tabs-panes]', [
       ':fieldLabelText' => $this->sutParagraphNodeFieldLabel,
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
     ]));
@@ @@
     // Validate the field/wrapper has a "tab" detail element as a child element
     // (important because the JavaScript won't work if tabs are grandchildren or
     // later descendants).
-    $detailsTabIsChildOfVtWrapper = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group=:nodeFieldMachName][@data-vertical-tabs-panes]/details[@data-paragraph-tabs-widget-tab-group=:nodeFieldMachName]', [
+    $detailsTabIsChildOfVtWrapper = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group=:nodeFieldMachName][@data-vertical-tabs-panes]/details[@data-paragraph-tabs-widget-tab-group=:nodeFieldMachName]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
     ]));
     $this->assertNotEmpty($detailsTabIsChildOfVtWrapper, 'Details tab element is a child (i.e.: not a later descendant) of the vertical tab wrapper.');
@@ @@

     // Validate that the paragraph's field is a descendant of a tab. This proves
     // the paragraph's form is inside the tab.
-    $paragraphFieldIsDescendantOfTab = $page->findAll('xpath', $as->buildXPathQuery('//details[@data-paragraph-tabs-widget-tab-group=:nodeFieldMachName]//input[contains(@name,:paraFieldMachName)]', [
+    $paragraphFieldIsDescendantOfTab = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//details[@data-paragraph-tabs-widget-tab-group=:nodeFieldMachName]//input[contains(@name,:paraFieldMachName)]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
       // The name of the field in the paragraph will be in square brackets
       // somewhere in the input element's name attribute according to Drupal's
@@ @@

     // Validate the paragraph field values we saved at the start of this test
     // are shown in the correct fields.
-    $this->assertEqual($paragraphFieldIsDescendantOfTab[0]->getValue(), $sutParagraphParagraphFieldValue1, 'Paragraph 1 field value matches what we saved.');
-    $this->assertEqual($paragraphFieldIsDescendantOfTab[1]->getValue(), $sutParagraphParagraphFieldValue2, 'Paragraph 2 field value matches what we saved.');
-    $this->assertEqual($paragraphFieldIsDescendantOfTab[2]->getValue(), $sutParagraphParagraphFieldValue3, 'Paragraph 3 field value matches what we saved.');
+    $this->assertEquals($paragraphFieldIsDescendantOfTab[0]->getValue(), $sutParagraphParagraphFieldValue1, 'Paragraph 1 field value matches what we saved.');
+    $this->assertEquals($paragraphFieldIsDescendantOfTab[1]->getValue(), $sutParagraphParagraphFieldValue2, 'Paragraph 2 field value matches what we saved.');
+    $this->assertEquals($paragraphFieldIsDescendantOfTab[2]->getValue(), $sutParagraphParagraphFieldValue3, 'Paragraph 3 field value matches what we saved.');

     // Validate the field/wrapper has an "add more" button as a child element
     // (important because the JavaScript won't work if the add more element is a
     // grandchild or later descendant).
-    $addMoreIsChildOfVtWrapper = $page->findAll('xpath', $as->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group=:nodeFieldMachName][@data-vertical-tabs-panes]/div[@data-paragraphs-tabs-widget-addmore-group=:nodeFieldMachName]', [
+    $addMoreIsChildOfVtWrapper = $page->findAll('xpath', $this->assertSession()->buildXPathQuery('//*[@data-paragraphs-tabs-widget-group=:nodeFieldMachName][@data-vertical-tabs-panes]/div[@data-paragraphs-tabs-widget-addmore-group=:nodeFieldMachName]', [
       ':nodeFieldMachName' => $this->sutParagraphNodeFieldName,
     ]));
     $this->assertNotEmpty($addMoreIsChildOfVtWrapper, 'Add more element is a child (i.e.: not a later descendant) of the vertical tab wrapper.');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * BuildXPathQueryRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/paragraphs_tabs_widget/tests/src/Functional/VerticalTabConfigurationTest.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->setUpRandomParagraphTypeWithRandomTextField();
@@ @@
     $this->sutNonAdminUser = $this->createUser(['administer node form display']);

     $as = $this->assertSession();
-    $this->xpathQuerySettingsButton = $as->buildXPathQuery('//input[@name=:settingsName]', [
+    $this->xpathQuerySettingsButton = $this->assertSession()->buildXPathQuery('//input[@name=:settingsName]', [
       ':settingsName' => $this->sutParagraphNodeFieldName . '_settings_edit',
     ]);
   }
@@ @@
     $settingsButton->click();

     // Check the field is not visible.
-    $this->assertNoField("fields[{$this->sutParagraphNodeFieldName}][settings_edit_form][settings][summary_selector]");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldNotExists("fields[{$this->sutParagraphNodeFieldName}][settings_edit_form][settings][summary_selector]");
   }

   /**
@@ @@
     $settingsButton->click();

     // Check the field is visible.
-    $this->assertField("fields[{$this->sutParagraphNodeFieldName}][settings_edit_form][settings][summary_selector]");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists("fields[{$this->sutParagraphNodeFieldName}][settings_edit_form][settings][summary_selector]");
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldRector
 * AssertNoFieldRector
 * BuildXPathQueryRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

