diff --git a/photos_access/tests/src/Functional/PhotosAccessTest.php b/photos_access/tests/src/Functional/PhotosAccessTest.php
index 1195ab1..5121249 100644
--- a/photos_access/tests/src/Functional/PhotosAccessTest.php
+++ b/photos_access/tests/src/Functional/PhotosAccessTest.php
@@ -66,7 +66,7 @@ class PhotosAccessTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create admin user and adjust photos admin settings. This user will also
@@ -134,7 +134,7 @@ class PhotosAccessTest extends BrowserTestBase {
     $storage = $this->container->get('entity_type.manager')->getStorage('node');
     // Create a locked photos node.
     $this->drupalGet('/node/add/photos');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $edit = [
       'title[0][value]' => $this->randomMachineName(),
       'privacy[viewid]' => 1,
@@ -145,7 +145,7 @@ class PhotosAccessTest extends BrowserTestBase {
     $storage = $this->container->get('entity_type.manager')->getStorage('node');
     $this->album = $storage->load(1);
     $this->assertNotNull($this->album->privacy);
-    $this->assertEqual($this->album->privacy['viewid'], 1, 'Album is set to locked.');
+    $this->assertEquals($this->album->privacy['viewid'], 1, 'Album is set to locked.');
 
     // Get test image file.
     /** @var \Drupal\Core\File\FileSystemInterface $fileSystem */
@@ -156,7 +156,7 @@ class PhotosAccessTest extends BrowserTestBase {
       'files[images_0]' => $fileSystem->realpath($testImageFile),
     ];
     $this->drupalGet('node/' . $this->album->id() . '/photos');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->submitForm($edit, 'Confirm upload');
   }
 
@@ -206,37 +206,55 @@ class PhotosAccessTest extends BrowserTestBase {
 
     // Node page should redirect to password required page.
     $this->drupalGet('node/' . $photosImage->getAlbumId());
-    $this->assertResponse(200);
-    $this->assertText('Please enter password');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Please enter password');
     // Image page should redirect to password required page.
     $this->drupalGet('photos/' . $photosImage->getAlbumId() . '/' . $photosImage->id());
-    $this->assertResponse(200);
-    $this->assertText('Please enter password');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Please enter password');
     // Raw image path should redirect to password required page.
     $this->drupalGet($file->createFileUrl());
-    $this->assertResponse(200);
-    $this->assertText('Please enter password');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Please enter password');
     // Album views page should redirect to password required page.
     $this->drupalGet('photos/views-test/' . $photosImage->getAlbumId());
-    $this->assertResponse(200);
-    $this->assertText('Please enter password');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Please enter password');
     // Test wrong password.
     $edit = [
       'pass' => 'wrong password',
     ];
     $this->submitForm($edit, 'Submit');
-    $this->assertText('Password required');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Password required');
     // Test correct password.
     $edit = [
       'pass' => 'test',
     ];
     $this->submitForm($edit, 'Submit');
     // Check if album page is visible.
-    $this->assertResponse(200);
-    $this->assertText($this->album->getTitle());
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->album->getTitle());
     // Node edit page should be access denied.
     $this->drupalGet('node/' . $photosImage->getAlbumId() . '/edit');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Test role access.
     $edit = [
@@ -293,7 +311,10 @@ class PhotosAccessTest extends BrowserTestBase {
     $this->drupalGet('node/' . $this->album->id() . '/edit');
     if (isset($edit['privacy[viewid]']) && $edit['privacy[viewid]'] == 4) {
       // Check if role access option is enabled.
-      $this->assertText('Role access');
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains('Role access');
     }
     $this->submitForm($edit, 'Save');
     /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
@@ -306,7 +327,7 @@ class PhotosAccessTest extends BrowserTestBase {
     // Update album variable.
     $this->album = $storage->load($this->album->id());
     if (isset($edit['privacy[viewid]'])) {
-      $this->assertEqual($this->album->privacy['viewid'], $edit['privacy[viewid]'], 'Album privacy settings updated successfully.');
+      $this->assertEquals($this->album->privacy['viewid'], $edit['privacy[viewid]'], 'Album privacy settings updated successfully.');
     }
   }
 
@@ -325,20 +346,20 @@ class PhotosAccessTest extends BrowserTestBase {
   public function checkAlbumAccess(PhotosImage $photosImage, $viewCode = 200, $editCode = 403, $fileUrl = NULL) {
     if ($fileUrl) {
       $this->drupalGet($fileUrl);
-      $this->assertResponse($viewCode);
+      $this->assertSession()->statusCodeEquals($viewCode);
     }
     // View image page.
     $this->drupalGet('photos/' . $photosImage->getAlbumId() . '/' . $photosImage->id());
-    $this->assertResponse($viewCode);
+    $this->assertSession()->statusCodeEquals($viewCode);
     // Views album page.
     $this->drupalGet('photos/views-test/' . $photosImage->getAlbumId());
-    $this->assertResponse($viewCode);
+    $this->assertSession()->statusCodeEquals($viewCode);
     // View node page.
     $this->drupalGet('node/' . $photosImage->getAlbumId());
-    $this->assertResponse($viewCode);
+    $this->assertSession()->statusCodeEquals($viewCode);
     // Edit node page.
     $this->drupalGet('node/' . $photosImage->getAlbumId() . '/edit');
-    $this->assertResponse($editCode);
+    $this->assertSession()->statusCodeEquals($editCode);
   }
 
 }
diff --git a/tests/src/Functional/AddPhotosAlbumImageTest.php b/tests/src/Functional/AddPhotosAlbumImageTest.php
index 47254f2..0a3eebb 100644
--- a/tests/src/Functional/AddPhotosAlbumImageTest.php
+++ b/tests/src/Functional/AddPhotosAlbumImageTest.php
@@ -42,7 +42,7 @@ class AddPhotosAlbumImageTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Create user with permissions to edit own photos.
     $this->account = $this->drupalCreateUser([
@@ -107,8 +107,11 @@ class AddPhotosAlbumImageTest extends BrowserTestBase {
 
     // Test recent albums content overview.
     $this->drupalGet('photos');
-    $this->assertResponse(200);
-    $this->assertText($albumTitle);
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($albumTitle);
 
   }
 
diff --git a/tests/src/Kernel/CreatePhotosAlbumTest.php b/tests/src/Kernel/CreatePhotosAlbumTest.php
index 3d21a96..56e9aa5 100644
--- a/tests/src/Kernel/CreatePhotosAlbumTest.php
+++ b/tests/src/Kernel/CreatePhotosAlbumTest.php
@@ -31,7 +31,7 @@ class CreatePhotosAlbumTest extends EntityKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installConfig(['system']);
