[parsing] modules/contrib/quiz/modules/ajax_quiz/ajax_quiz.module
[refactoring] modules/contrib/quiz/modules/ajax_quiz/ajax_quiz.module
[post rectors] modules/contrib/quiz/modules/ajax_quiz/ajax_quiz.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/modules/ajax_quiz/ajax_quiz.module
[parsing] modules/contrib/quiz/modules/quiz_stats/quiz_stats.admin.inc
[refactoring] modules/contrib/quiz/modules/quiz_stats/quiz_stats.admin.inc
[post rectors] modules/contrib/quiz/modules/quiz_stats/quiz_stats.admin.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/modules/quiz_stats/quiz_stats.admin.inc
[parsing] modules/contrib/quiz/modules/quiz_stats/quiz_stats.module
[refactoring] modules/contrib/quiz/modules/quiz_stats/quiz_stats.module
[post rectors] modules/contrib/quiz/modules/quiz_stats/quiz_stats.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/modules/quiz_stats/quiz_stats.module
[parsing] modules/contrib/quiz/modules/quiz_stats/theme/quiz_stats_charts.tpl.php
[refactoring] modules/contrib/quiz/modules/quiz_stats/theme/quiz_stats_charts.tpl.php
[post rectors] modules/contrib/quiz/modules/quiz_stats/theme/quiz_stats_charts.tpl.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/modules/quiz_stats/theme/quiz_stats_charts.tpl.php
[parsing] modules/contrib/quiz/modules/quiz_stats/theme/quiz_stats_revision_selector.tpl.php
[refactoring] modules/contrib/quiz/modules/quiz_stats/theme/quiz_stats_revision_selector.tpl.php
[post rectors] modules/contrib/quiz/modules/quiz_stats/theme/quiz_stats_revision_selector.tpl.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/modules/quiz_stats/theme/quiz_stats_revision_selector.tpl.php
[parsing] modules/contrib/quiz/question_types/quiz_directions/quiz_directions.module
[refactoring] modules/contrib/quiz/question_types/quiz_directions/quiz_directions.module
[post rectors] modules/contrib/quiz/question_types/quiz_directions/quiz_directions.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_directions/quiz_directions.module
[parsing] modules/contrib/quiz/question_types/quiz_directions/src/Plugin/quiz/QuizQuestion/QuizDirectionsQuestion.php
[refactoring] modules/contrib/quiz/question_types/quiz_directions/src/Plugin/quiz/QuizQuestion/QuizDirectionsQuestion.php
[post rectors] modules/contrib/quiz/question_types/quiz_directions/src/Plugin/quiz/QuizQuestion/QuizDirectionsQuestion.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_directions/src/Plugin/quiz/QuizQuestion/QuizDirectionsQuestion.php
[parsing] modules/contrib/quiz/question_types/quiz_directions/src/Plugin/quiz/QuizQuestion/QuizDirectionsResponse.php
[refactoring] modules/contrib/quiz/question_types/quiz_directions/src/Plugin/quiz/QuizQuestion/QuizDirectionsResponse.php
[post rectors] modules/contrib/quiz/question_types/quiz_directions/src/Plugin/quiz/QuizQuestion/QuizDirectionsResponse.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_directions/src/Plugin/quiz/QuizQuestion/QuizDirectionsResponse.php
[parsing] modules/contrib/quiz/question_types/quiz_directions/tests/src/Functional/QuizDirectionsTestCase.php
[refactoring] modules/contrib/quiz/question_types/quiz_directions/tests/src/Functional/QuizDirectionsTestCase.php
[post rectors] modules/contrib/quiz/question_types/quiz_directions/tests/src/Functional/QuizDirectionsTestCase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_directions/tests/src/Functional/QuizDirectionsTestCase.php
[refactoring] modules/contrib/quiz/question_types/quiz_directions/tests/src/Functional/QuizDirectionsTestCase.php
[post rectors] modules/contrib/quiz/question_types/quiz_directions/tests/src/Functional/QuizDirectionsTestCase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_directions/tests/src/Functional/QuizDirectionsTestCase.php
[parsing] modules/contrib/quiz/question_types/quiz_long_answer/quiz_long_answer.module
[refactoring] modules/contrib/quiz/question_types/quiz_long_answer/quiz_long_answer.module
[post rectors] modules/contrib/quiz/question_types/quiz_long_answer/quiz_long_answer.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_long_answer/quiz_long_answer.module
[parsing] modules/contrib/quiz/question_types/quiz_long_answer/src/Plugin/quiz/QuizQuestion/LongAnswerQuestion.php
[refactoring] modules/contrib/quiz/question_types/quiz_long_answer/src/Plugin/quiz/QuizQuestion/LongAnswerQuestion.php
[post rectors] modules/contrib/quiz/question_types/quiz_long_answer/src/Plugin/quiz/QuizQuestion/LongAnswerQuestion.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_long_answer/src/Plugin/quiz/QuizQuestion/LongAnswerQuestion.php
[parsing] modules/contrib/quiz/question_types/quiz_long_answer/src/Plugin/quiz/QuizQuestion/LongAnswerResponse.php
[refactoring] modules/contrib/quiz/question_types/quiz_long_answer/src/Plugin/quiz/QuizQuestion/LongAnswerResponse.php
[post rectors] modules/contrib/quiz/question_types/quiz_long_answer/src/Plugin/quiz/QuizQuestion/LongAnswerResponse.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_long_answer/src/Plugin/quiz/QuizQuestion/LongAnswerResponse.php
[parsing] modules/contrib/quiz/question_types/quiz_long_answer/tests/src/Functional/LongAnswerTestCase.php
[refactoring] modules/contrib/quiz/question_types/quiz_long_answer/tests/src/Functional/LongAnswerTestCase.php
[post rectors] modules/contrib/quiz/question_types/quiz_long_answer/tests/src/Functional/LongAnswerTestCase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_long_answer/tests/src/Functional/LongAnswerTestCase.php
[refactoring] modules/contrib/quiz/question_types/quiz_long_answer/tests/src/Functional/LongAnswerTestCase.php
[post rectors] modules/contrib/quiz/question_types/quiz_long_answer/tests/src/Functional/LongAnswerTestCase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_long_answer/tests/src/Functional/LongAnswerTestCase.php
[parsing] modules/contrib/quiz/question_types/quiz_matching/quiz_matching.module
[refactoring] modules/contrib/quiz/question_types/quiz_matching/quiz_matching.module
[post rectors] modules/contrib/quiz/question_types/quiz_matching/quiz_matching.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_matching/quiz_matching.module
[parsing] modules/contrib/quiz/question_types/quiz_matching/src/Plugin/quiz/QuizQuestion/MatchingQuestion.php
[refactoring] modules/contrib/quiz/question_types/quiz_matching/src/Plugin/quiz/QuizQuestion/MatchingQuestion.php
[post rectors] modules/contrib/quiz/question_types/quiz_matching/src/Plugin/quiz/QuizQuestion/MatchingQuestion.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_matching/src/Plugin/quiz/QuizQuestion/MatchingQuestion.php
[parsing] modules/contrib/quiz/question_types/quiz_matching/src/Plugin/quiz/QuizQuestion/MatchingResponse.php
[refactoring] modules/contrib/quiz/question_types/quiz_matching/src/Plugin/quiz/QuizQuestion/MatchingResponse.php
[post rectors] modules/contrib/quiz/question_types/quiz_matching/src/Plugin/quiz/QuizQuestion/MatchingResponse.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_matching/src/Plugin/quiz/QuizQuestion/MatchingResponse.php
[parsing] modules/contrib/quiz/question_types/quiz_matching/tests/src/Functional/MatchingTestCase.php
[refactoring] modules/contrib/quiz/question_types/quiz_matching/tests/src/Functional/MatchingTestCase.php
[post rectors] modules/contrib/quiz/question_types/quiz_matching/tests/src/Functional/MatchingTestCase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_matching/tests/src/Functional/MatchingTestCase.php
[refactoring] modules/contrib/quiz/question_types/quiz_matching/tests/src/Functional/MatchingTestCase.php
[post rectors] modules/contrib/quiz/question_types/quiz_matching/tests/src/Functional/MatchingTestCase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_matching/tests/src/Functional/MatchingTestCase.php
[parsing] modules/contrib/quiz/question_types/quiz_multichoice/quiz_multichoice.module
[refactoring] modules/contrib/quiz/question_types/quiz_multichoice/quiz_multichoice.module
[post rectors] modules/contrib/quiz/question_types/quiz_multichoice/quiz_multichoice.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_multichoice/quiz_multichoice.module
[parsing] modules/contrib/quiz/question_types/quiz_multichoice/src/Plugin/quiz/QuizQuestion/MultichoiceQuestion.php
[refactoring] modules/contrib/quiz/question_types/quiz_multichoice/src/Plugin/quiz/QuizQuestion/MultichoiceQuestion.php
[post rectors] modules/contrib/quiz/question_types/quiz_multichoice/src/Plugin/quiz/QuizQuestion/MultichoiceQuestion.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_multichoice/src/Plugin/quiz/QuizQuestion/MultichoiceQuestion.php
[parsing] modules/contrib/quiz/question_types/quiz_multichoice/src/Plugin/quiz/QuizQuestion/MultichoiceResponse.php
[refactoring] modules/contrib/quiz/question_types/quiz_multichoice/src/Plugin/quiz/QuizQuestion/MultichoiceResponse.php
[post rectors] modules/contrib/quiz/question_types/quiz_multichoice/src/Plugin/quiz/QuizQuestion/MultichoiceResponse.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_multichoice/src/Plugin/quiz/QuizQuestion/MultichoiceResponse.php
[parsing] modules/contrib/quiz/question_types/quiz_multichoice/tests/src/Functional/QuizMultichoiceTestCase.php
[refactoring] modules/contrib/quiz/question_types/quiz_multichoice/tests/src/Functional/QuizMultichoiceTestCase.php
[post rectors] modules/contrib/quiz/question_types/quiz_multichoice/tests/src/Functional/QuizMultichoiceTestCase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_multichoice/tests/src/Functional/QuizMultichoiceTestCase.php
[refactoring] modules/contrib/quiz/question_types/quiz_multichoice/tests/src/Functional/QuizMultichoiceTestCase.php
[post rectors] modules/contrib/quiz/question_types/quiz_multichoice/tests/src/Functional/QuizMultichoiceTestCase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_multichoice/tests/src/Functional/QuizMultichoiceTestCase.php
[parsing] modules/contrib/quiz/question_types/quiz_page/quiz_page.module
[refactoring] modules/contrib/quiz/question_types/quiz_page/quiz_page.module
[post rectors] modules/contrib/quiz/question_types/quiz_page/quiz_page.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_page/quiz_page.module
[parsing] modules/contrib/quiz/question_types/quiz_page/src/Plugin/quiz/QuizQuestion/QuizPageQuestion.php
[refactoring] modules/contrib/quiz/question_types/quiz_page/src/Plugin/quiz/QuizQuestion/QuizPageQuestion.php
[post rectors] modules/contrib/quiz/question_types/quiz_page/src/Plugin/quiz/QuizQuestion/QuizPageQuestion.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_page/src/Plugin/quiz/QuizQuestion/QuizPageQuestion.php
[parsing] modules/contrib/quiz/question_types/quiz_page/src/Plugin/quiz/QuizQuestion/QuizPageResponse.php
[refactoring] modules/contrib/quiz/question_types/quiz_page/src/Plugin/quiz/QuizQuestion/QuizPageResponse.php
[post rectors] modules/contrib/quiz/question_types/quiz_page/src/Plugin/quiz/QuizQuestion/QuizPageResponse.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_page/src/Plugin/quiz/QuizQuestion/QuizPageResponse.php
[parsing] modules/contrib/quiz/question_types/quiz_page/tests/src/Functional/QuizPageTestCase.php
[refactoring] modules/contrib/quiz/question_types/quiz_page/tests/src/Functional/QuizPageTestCase.php
[post rectors] modules/contrib/quiz/question_types/quiz_page/tests/src/Functional/QuizPageTestCase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_page/tests/src/Functional/QuizPageTestCase.php
[refactoring] modules/contrib/quiz/question_types/quiz_page/tests/src/Functional/QuizPageTestCase.php
[post rectors] modules/contrib/quiz/question_types/quiz_page/tests/src/Functional/QuizPageTestCase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_page/tests/src/Functional/QuizPageTestCase.php
[parsing] modules/contrib/quiz/question_types/quiz_short_answer/quiz_short_answer.module
[refactoring] modules/contrib/quiz/question_types/quiz_short_answer/quiz_short_answer.module
[post rectors] modules/contrib/quiz/question_types/quiz_short_answer/quiz_short_answer.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_short_answer/quiz_short_answer.module
[parsing] modules/contrib/quiz/question_types/quiz_short_answer/src/Plugin/quiz/QuizQuestion/ShortAnswerQuestion.php
[refactoring] modules/contrib/quiz/question_types/quiz_short_answer/src/Plugin/quiz/QuizQuestion/ShortAnswerQuestion.php
[post rectors] modules/contrib/quiz/question_types/quiz_short_answer/src/Plugin/quiz/QuizQuestion/ShortAnswerQuestion.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_short_answer/src/Plugin/quiz/QuizQuestion/ShortAnswerQuestion.php
[parsing] modules/contrib/quiz/question_types/quiz_short_answer/src/Plugin/quiz/QuizQuestion/ShortAnswerResponse.php
[refactoring] modules/contrib/quiz/question_types/quiz_short_answer/src/Plugin/quiz/QuizQuestion/ShortAnswerResponse.php
[post rectors] modules/contrib/quiz/question_types/quiz_short_answer/src/Plugin/quiz/QuizQuestion/ShortAnswerResponse.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_short_answer/src/Plugin/quiz/QuizQuestion/ShortAnswerResponse.php
[parsing] modules/contrib/quiz/question_types/quiz_short_answer/tests/src/Functional/ShortAnswerTestCase.php
[refactoring] modules/contrib/quiz/question_types/quiz_short_answer/tests/src/Functional/ShortAnswerTestCase.php
[post rectors] modules/contrib/quiz/question_types/quiz_short_answer/tests/src/Functional/ShortAnswerTestCase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_short_answer/tests/src/Functional/ShortAnswerTestCase.php
[refactoring] modules/contrib/quiz/question_types/quiz_short_answer/tests/src/Functional/ShortAnswerTestCase.php
[post rectors] modules/contrib/quiz/question_types/quiz_short_answer/tests/src/Functional/ShortAnswerTestCase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_short_answer/tests/src/Functional/ShortAnswerTestCase.php
[parsing] modules/contrib/quiz/question_types/quiz_truefalse/src/Plugin/quiz/QuizQuestion/TrueFalseQuestion.php
[refactoring] modules/contrib/quiz/question_types/quiz_truefalse/src/Plugin/quiz/QuizQuestion/TrueFalseQuestion.php
[post rectors] modules/contrib/quiz/question_types/quiz_truefalse/src/Plugin/quiz/QuizQuestion/TrueFalseQuestion.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_truefalse/src/Plugin/quiz/QuizQuestion/TrueFalseQuestion.php
[parsing] modules/contrib/quiz/question_types/quiz_truefalse/src/Plugin/quiz/QuizQuestion/TrueFalseResponse.php
[refactoring] modules/contrib/quiz/question_types/quiz_truefalse/src/Plugin/quiz/QuizQuestion/TrueFalseResponse.php
[post rectors] modules/contrib/quiz/question_types/quiz_truefalse/src/Plugin/quiz/QuizQuestion/TrueFalseResponse.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_truefalse/src/Plugin/quiz/QuizQuestion/TrueFalseResponse.php
[parsing] modules/contrib/quiz/question_types/quiz_truefalse/tests/src/Functional/QuizTrueFalseTestCase.php
[refactoring] modules/contrib/quiz/question_types/quiz_truefalse/tests/src/Functional/QuizTrueFalseTestCase.php
[post rectors] modules/contrib/quiz/question_types/quiz_truefalse/tests/src/Functional/QuizTrueFalseTestCase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_truefalse/tests/src/Functional/QuizTrueFalseTestCase.php
[refactoring] modules/contrib/quiz/question_types/quiz_truefalse/tests/src/Functional/QuizTrueFalseTestCase.php
[post rectors] modules/contrib/quiz/question_types/quiz_truefalse/tests/src/Functional/QuizTrueFalseTestCase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/question_types/quiz_truefalse/tests/src/Functional/QuizTrueFalseTestCase.php
[parsing] modules/contrib/quiz/quiz.admin.inc
[refactoring] modules/contrib/quiz/quiz.admin.inc
[post rectors] modules/contrib/quiz/quiz.admin.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/quiz.admin.inc
[parsing] modules/contrib/quiz/quiz.api.php
[refactoring] modules/contrib/quiz/quiz.api.php
[post rectors] modules/contrib/quiz/quiz.api.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/quiz.api.php
[parsing] modules/contrib/quiz/quiz.devel.inc
[refactoring] modules/contrib/quiz/quiz.devel.inc
[post rectors] modules/contrib/quiz/quiz.devel.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/quiz.devel.inc
[parsing] modules/contrib/quiz/quiz.install
[refactoring] modules/contrib/quiz/quiz.install
[post rectors] modules/contrib/quiz/quiz.install
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/quiz.install
[parsing] modules/contrib/quiz/quiz.module
[refactoring] modules/contrib/quiz/quiz.module
[post rectors] modules/contrib/quiz/quiz.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/quiz.module
[parsing] modules/contrib/quiz/quiz.rules_defaults.inc
[refactoring] modules/contrib/quiz/quiz.rules_defaults.inc
[post rectors] modules/contrib/quiz/quiz.rules_defaults.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/quiz.rules_defaults.inc
[parsing] modules/contrib/quiz/src/Access/QuizAccessControlHandler.php
[refactoring] modules/contrib/quiz/src/Access/QuizAccessControlHandler.php
[post rectors] modules/contrib/quiz/src/Access/QuizAccessControlHandler.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Access/QuizAccessControlHandler.php
[parsing] modules/contrib/quiz/src/Access/QuizResultAccessControlHandler.php
[refactoring] modules/contrib/quiz/src/Access/QuizResultAccessControlHandler.php
[post rectors] modules/contrib/quiz/src/Access/QuizResultAccessControlHandler.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Access/QuizResultAccessControlHandler.php
[parsing] modules/contrib/quiz/src/Access/QuizResultAnswerAccessControlHandler.php
[refactoring] modules/contrib/quiz/src/Access/QuizResultAnswerAccessControlHandler.php
[post rectors] modules/contrib/quiz/src/Access/QuizResultAnswerAccessControlHandler.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Access/QuizResultAnswerAccessControlHandler.php
[parsing] modules/contrib/quiz/src/Annotation/QuizQuestion.php
[refactoring] modules/contrib/quiz/src/Annotation/QuizQuestion.php
[post rectors] modules/contrib/quiz/src/Annotation/QuizQuestion.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Annotation/QuizQuestion.php
[parsing] modules/contrib/quiz/src/Config/Entity/QuizFeedbackTypeListBuilder.php
[refactoring] modules/contrib/quiz/src/Config/Entity/QuizFeedbackTypeListBuilder.php
[post rectors] modules/contrib/quiz/src/Config/Entity/QuizFeedbackTypeListBuilder.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Config/Entity/QuizFeedbackTypeListBuilder.php
[parsing] modules/contrib/quiz/src/Config/Entity/QuizListBuilder.php
[refactoring] modules/contrib/quiz/src/Config/Entity/QuizListBuilder.php
[post rectors] modules/contrib/quiz/src/Config/Entity/QuizListBuilder.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Config/Entity/QuizListBuilder.php
[parsing] modules/contrib/quiz/src/Config/Entity/QuizQuestionListBuilder.php
[refactoring] modules/contrib/quiz/src/Config/Entity/QuizQuestionListBuilder.php
[post rectors] modules/contrib/quiz/src/Config/Entity/QuizQuestionListBuilder.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Config/Entity/QuizQuestionListBuilder.php
[parsing] modules/contrib/quiz/src/Config/Entity/QuizQuestionTypeListBuilder.php
[refactoring] modules/contrib/quiz/src/Config/Entity/QuizQuestionTypeListBuilder.php
[post rectors] modules/contrib/quiz/src/Config/Entity/QuizQuestionTypeListBuilder.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Config/Entity/QuizQuestionTypeListBuilder.php
[parsing] modules/contrib/quiz/src/Config/Entity/QuizResultAnswerTypeListBuilder.php
[refactoring] modules/contrib/quiz/src/Config/Entity/QuizResultAnswerTypeListBuilder.php
[post rectors] modules/contrib/quiz/src/Config/Entity/QuizResultAnswerTypeListBuilder.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Config/Entity/QuizResultAnswerTypeListBuilder.php
[parsing] modules/contrib/quiz/src/Config/Entity/QuizResultTypeListBuilder.php
[refactoring] modules/contrib/quiz/src/Config/Entity/QuizResultTypeListBuilder.php
[post rectors] modules/contrib/quiz/src/Config/Entity/QuizResultTypeListBuilder.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Config/Entity/QuizResultTypeListBuilder.php
[parsing] modules/contrib/quiz/src/Config/Entity/QuizTypeListBuilder.php
[refactoring] modules/contrib/quiz/src/Config/Entity/QuizTypeListBuilder.php
[post rectors] modules/contrib/quiz/src/Config/Entity/QuizTypeListBuilder.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Config/Entity/QuizTypeListBuilder.php
[parsing] modules/contrib/quiz/src/ContextProvider/QuizRouteContext.php
[refactoring] modules/contrib/quiz/src/ContextProvider/QuizRouteContext.php
[post rectors] modules/contrib/quiz/src/ContextProvider/QuizRouteContext.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/ContextProvider/QuizRouteContext.php
[parsing] modules/contrib/quiz/src/Controller/QuizController.php
[refactoring] modules/contrib/quiz/src/Controller/QuizController.php
[post rectors] modules/contrib/quiz/src/Controller/QuizController.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Controller/QuizController.php
[parsing] modules/contrib/quiz/src/Controller/QuizQuestionController.php
[refactoring] modules/contrib/quiz/src/Controller/QuizQuestionController.php
[post rectors] modules/contrib/quiz/src/Controller/QuizQuestionController.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Controller/QuizQuestionController.php
[parsing] modules/contrib/quiz/src/Entity/Quiz.php
[refactoring] modules/contrib/quiz/src/Entity/Quiz.php
[post rectors] modules/contrib/quiz/src/Entity/Quiz.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Entity/Quiz.php
[parsing] modules/contrib/quiz/src/Entity/QuizFeedbackType.php
[refactoring] modules/contrib/quiz/src/Entity/QuizFeedbackType.php
[post rectors] modules/contrib/quiz/src/Entity/QuizFeedbackType.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Entity/QuizFeedbackType.php
[parsing] modules/contrib/quiz/src/Entity/QuizQuestion.php
[refactoring] modules/contrib/quiz/src/Entity/QuizQuestion.php
[post rectors] modules/contrib/quiz/src/Entity/QuizQuestion.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Entity/QuizQuestion.php
[parsing] modules/contrib/quiz/src/Entity/QuizQuestionBroken.php
[refactoring] modules/contrib/quiz/src/Entity/QuizQuestionBroken.php
[post rectors] modules/contrib/quiz/src/Entity/QuizQuestionBroken.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Entity/QuizQuestionBroken.php
[parsing] modules/contrib/quiz/src/Entity/QuizQuestionEntityTrait.php
[refactoring] modules/contrib/quiz/src/Entity/QuizQuestionEntityTrait.php
[post rectors] modules/contrib/quiz/src/Entity/QuizQuestionEntityTrait.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Entity/QuizQuestionEntityTrait.php
[parsing] modules/contrib/quiz/src/Entity/QuizQuestionRelationship.php
[refactoring] modules/contrib/quiz/src/Entity/QuizQuestionRelationship.php
[post rectors] modules/contrib/quiz/src/Entity/QuizQuestionRelationship.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Entity/QuizQuestionRelationship.php
[parsing] modules/contrib/quiz/src/Entity/QuizQuestionType.php
[refactoring] modules/contrib/quiz/src/Entity/QuizQuestionType.php
[post rectors] modules/contrib/quiz/src/Entity/QuizQuestionType.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Entity/QuizQuestionType.php
[parsing] modules/contrib/quiz/src/Entity/QuizResult.php
[refactoring] modules/contrib/quiz/src/Entity/QuizResult.php
[post rectors] modules/contrib/quiz/src/Entity/QuizResult.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Entity/QuizResult.php
[parsing] modules/contrib/quiz/src/Entity/QuizResultAnswer.php
[refactoring] modules/contrib/quiz/src/Entity/QuizResultAnswer.php
[post rectors] modules/contrib/quiz/src/Entity/QuizResultAnswer.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Entity/QuizResultAnswer.php
[parsing] modules/contrib/quiz/src/Entity/QuizResultAnswerBroken.php
[refactoring] modules/contrib/quiz/src/Entity/QuizResultAnswerBroken.php
[post rectors] modules/contrib/quiz/src/Entity/QuizResultAnswerBroken.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Entity/QuizResultAnswerBroken.php
[parsing] modules/contrib/quiz/src/Entity/QuizResultAnswerEntityTrait.php
[refactoring] modules/contrib/quiz/src/Entity/QuizResultAnswerEntityTrait.php
[post rectors] modules/contrib/quiz/src/Entity/QuizResultAnswerEntityTrait.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Entity/QuizResultAnswerEntityTrait.php
[parsing] modules/contrib/quiz/src/Entity/QuizResultAnswerType.php
[refactoring] modules/contrib/quiz/src/Entity/QuizResultAnswerType.php
[post rectors] modules/contrib/quiz/src/Entity/QuizResultAnswerType.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Entity/QuizResultAnswerType.php
[parsing] modules/contrib/quiz/src/Entity/QuizResultListBuilder.php
[refactoring] modules/contrib/quiz/src/Entity/QuizResultListBuilder.php
[post rectors] modules/contrib/quiz/src/Entity/QuizResultListBuilder.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Entity/QuizResultListBuilder.php
[parsing] modules/contrib/quiz/src/Entity/QuizResultType.php
[refactoring] modules/contrib/quiz/src/Entity/QuizResultType.php
[post rectors] modules/contrib/quiz/src/Entity/QuizResultType.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Entity/QuizResultType.php
[parsing] modules/contrib/quiz/src/Entity/QuizType.php
[refactoring] modules/contrib/quiz/src/Entity/QuizType.php
[post rectors] modules/contrib/quiz/src/Entity/QuizType.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Entity/QuizType.php
[parsing] modules/contrib/quiz/src/Entity/QuizViewsData.php
[refactoring] modules/contrib/quiz/src/Entity/QuizViewsData.php
[post rectors] modules/contrib/quiz/src/Entity/QuizViewsData.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Entity/QuizViewsData.php
[parsing] modules/contrib/quiz/src/EventSubscriber/QuizEventSubscriber.php
[refactoring] modules/contrib/quiz/src/EventSubscriber/QuizEventSubscriber.php
[post rectors] modules/contrib/quiz/src/EventSubscriber/QuizEventSubscriber.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/EventSubscriber/QuizEventSubscriber.php
[parsing] modules/contrib/quiz/src/Form/QuizAdminForm.php
[refactoring] modules/contrib/quiz/src/Form/QuizAdminForm.php
[post rectors] modules/contrib/quiz/src/Form/QuizAdminForm.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Form/QuizAdminForm.php
[parsing] modules/contrib/quiz/src/Form/QuizEntityForm.php
[refactoring] modules/contrib/quiz/src/Form/QuizEntityForm.php
[post rectors] modules/contrib/quiz/src/Form/QuizEntityForm.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Form/QuizEntityForm.php
[parsing] modules/contrib/quiz/src/Form/QuizFeedbackConditionsForm.php
[refactoring] modules/contrib/quiz/src/Form/QuizFeedbackConditionsForm.php
[post rectors] modules/contrib/quiz/src/Form/QuizFeedbackConditionsForm.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Form/QuizFeedbackConditionsForm.php
[parsing] modules/contrib/quiz/src/Form/QuizFeedbackTypeForm.php
[refactoring] modules/contrib/quiz/src/Form/QuizFeedbackTypeForm.php
[post rectors] modules/contrib/quiz/src/Form/QuizFeedbackTypeForm.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Form/QuizFeedbackTypeForm.php
[parsing] modules/contrib/quiz/src/Form/QuizJumperForm.php
[refactoring] modules/contrib/quiz/src/Form/QuizJumperForm.php
[post rectors] modules/contrib/quiz/src/Form/QuizJumperForm.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Form/QuizJumperForm.php
[parsing] modules/contrib/quiz/src/Form/QuizQuestionAnsweringForm.php
[refactoring] modules/contrib/quiz/src/Form/QuizQuestionAnsweringForm.php
[post rectors] modules/contrib/quiz/src/Form/QuizQuestionAnsweringForm.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Form/QuizQuestionAnsweringForm.php
[parsing] modules/contrib/quiz/src/Form/QuizQuestionEntityForm.php
[refactoring] modules/contrib/quiz/src/Form/QuizQuestionEntityForm.php
[post rectors] modules/contrib/quiz/src/Form/QuizQuestionEntityForm.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Form/QuizQuestionEntityForm.php
[parsing] modules/contrib/quiz/src/Form/QuizQuestionFeedbackForm.php
[refactoring] modules/contrib/quiz/src/Form/QuizQuestionFeedbackForm.php
[post rectors] modules/contrib/quiz/src/Form/QuizQuestionFeedbackForm.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Form/QuizQuestionFeedbackForm.php
[parsing] modules/contrib/quiz/src/Form/QuizQuestionsForm.php
[refactoring] modules/contrib/quiz/src/Form/QuizQuestionsForm.php
[post rectors] modules/contrib/quiz/src/Form/QuizQuestionsForm.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Form/QuizQuestionsForm.php
[parsing] modules/contrib/quiz/src/Form/QuizResultEntityForm.php
[refactoring] modules/contrib/quiz/src/Form/QuizResultEntityForm.php
[post rectors] modules/contrib/quiz/src/Form/QuizResultEntityForm.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Form/QuizResultEntityForm.php
[parsing] modules/contrib/quiz/src/Form/QuizResultTypeForm.php
[refactoring] modules/contrib/quiz/src/Form/QuizResultTypeForm.php
[post rectors] modules/contrib/quiz/src/Form/QuizResultTypeForm.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Form/QuizResultTypeForm.php
[parsing] modules/contrib/quiz/src/Form/QuizTypeEntityForm.php
[refactoring] modules/contrib/quiz/src/Form/QuizTypeEntityForm.php
[post rectors] modules/contrib/quiz/src/Form/QuizTypeEntityForm.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Form/QuizTypeEntityForm.php
[parsing] modules/contrib/quiz/src/Plugin/Action/QuizAddQuestionAction.php
[refactoring] modules/contrib/quiz/src/Plugin/Action/QuizAddQuestionAction.php
[post rectors] modules/contrib/quiz/src/Plugin/Action/QuizAddQuestionAction.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Plugin/Action/QuizAddQuestionAction.php
[parsing] modules/contrib/quiz/src/Plugin/QuizQuestionInterface.php
[refactoring] modules/contrib/quiz/src/Plugin/QuizQuestionInterface.php
[post rectors] modules/contrib/quiz/src/Plugin/QuizQuestionInterface.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Plugin/QuizQuestionInterface.php
[parsing] modules/contrib/quiz/src/Plugin/QuizQuestionPluginBase.php
[refactoring] modules/contrib/quiz/src/Plugin/QuizQuestionPluginBase.php
[post rectors] modules/contrib/quiz/src/Plugin/QuizQuestionPluginBase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Plugin/QuizQuestionPluginBase.php
[parsing] modules/contrib/quiz/src/Plugin/QuizQuestionPluginManager.php
[refactoring] modules/contrib/quiz/src/Plugin/QuizQuestionPluginManager.php
[post rectors] modules/contrib/quiz/src/Plugin/QuizQuestionPluginManager.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Plugin/QuizQuestionPluginManager.php
[parsing] modules/contrib/quiz/src/Plugin/views/field/QuizResultAnswerField.php
[refactoring] modules/contrib/quiz/src/Plugin/views/field/QuizResultAnswerField.php
[post rectors] modules/contrib/quiz/src/Plugin/views/field/QuizResultAnswerField.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Plugin/views/field/QuizResultAnswerField.php
[parsing] modules/contrib/quiz/src/Plugin/views/field/QuizResultAnswersField.php
[refactoring] modules/contrib/quiz/src/Plugin/views/field/QuizResultAnswersField.php
[post rectors] modules/contrib/quiz/src/Plugin/views/field/QuizResultAnswersField.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Plugin/views/field/QuizResultAnswersField.php
[parsing] modules/contrib/quiz/src/QuizAnswerInterface.php
[refactoring] modules/contrib/quiz/src/QuizAnswerInterface.php
[post rectors] modules/contrib/quiz/src/QuizAnswerInterface.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/QuizAnswerInterface.php
[parsing] modules/contrib/quiz/src/QuizQuestionInterface.php
[refactoring] modules/contrib/quiz/src/QuizQuestionInterface.php
[post rectors] modules/contrib/quiz/src/QuizQuestionInterface.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/QuizQuestionInterface.php
[parsing] modules/contrib/quiz/src/Services/QuizSession.php
[refactoring] modules/contrib/quiz/src/Services/QuizSession.php
[post rectors] modules/contrib/quiz/src/Services/QuizSession.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Services/QuizSession.php
[parsing] modules/contrib/quiz/src/Services/QuizSessionInterface.php
[refactoring] modules/contrib/quiz/src/Services/QuizSessionInterface.php
[post rectors] modules/contrib/quiz/src/Services/QuizSessionInterface.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Services/QuizSessionInterface.php
[parsing] modules/contrib/quiz/src/Storage/QuizStorage.php
[refactoring] modules/contrib/quiz/src/Storage/QuizStorage.php
[post rectors] modules/contrib/quiz/src/Storage/QuizStorage.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Storage/QuizStorage.php
[parsing] modules/contrib/quiz/src/Util/QuizUtil.php
[refactoring] modules/contrib/quiz/src/Util/QuizUtil.php
[post rectors] modules/contrib/quiz/src/Util/QuizUtil.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/Util/QuizUtil.php
[parsing] modules/contrib/quiz/src/View/QuizResultAnswerViewBuilder.php
[refactoring] modules/contrib/quiz/src/View/QuizResultAnswerViewBuilder.php
[post rectors] modules/contrib/quiz/src/View/QuizResultAnswerViewBuilder.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/View/QuizResultAnswerViewBuilder.php
[parsing] modules/contrib/quiz/src/View/QuizResultViewBuilder.php
[refactoring] modules/contrib/quiz/src/View/QuizResultViewBuilder.php
[post rectors] modules/contrib/quiz/src/View/QuizResultViewBuilder.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/View/QuizResultViewBuilder.php
[parsing] modules/contrib/quiz/src/View/QuizViewBuilder.php
[refactoring] modules/contrib/quiz/src/View/QuizViewBuilder.php
[post rectors] modules/contrib/quiz/src/View/QuizViewBuilder.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/src/View/QuizViewBuilder.php
[parsing] modules/contrib/quiz/templates/quiz-report-form.tpl.php
[refactoring] modules/contrib/quiz/templates/quiz-report-form.tpl.php
[post rectors] modules/contrib/quiz/templates/quiz-report-form.tpl.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/templates/quiz-report-form.tpl.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizAccessTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizAccessTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizAccessTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizAccessTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizAccessTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizAccessTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizAccessTest.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizAnonymousTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizAnonymousTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizAnonymousTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizAnonymousTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizAnonymousTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizAnonymousTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizAnonymousTest.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizBuildOnLastTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizBuildOnLastTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizBuildOnLastTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizBuildOnLastTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizBuildOnLastTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizBuildOnLastTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizBuildOnLastTest.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizCategorizedRandomTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizCategorizedRandomTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizCategorizedRandomTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizCategorizedRandomTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizCategorizedRandomTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizCategorizedRandomTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizCategorizedRandomTest.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizCreationTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizCreationTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizCreationTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizCreationTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizCreationTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizCreationTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizCreationTest.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizDeleteTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizDeleteTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizDeleteTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizDeleteTest.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizEvaluationTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizEvaluationTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizEvaluationTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizEvaluationTest.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizFeedbackTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizFeedbackTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizFeedbackTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizFeedbackTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizFeedbackTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizFeedbackTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizFeedbackTest.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizGradingTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizGradingTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizGradingTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizGradingTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizGradingTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizGradingTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizGradingTest.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizNavigationTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizNavigationTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizNavigationTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizNavigationTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizNavigationTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizNavigationTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizNavigationTest.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizQuestionNumberingTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizQuestionNumberingTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizQuestionNumberingTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizQuestionNumberingTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizQuestionNumberingTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizQuestionNumberingTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizQuestionNumberingTest.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizQuestionTestBase.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizQuestionTestBase.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizQuestionTestBase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizQuestionTestBase.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizQuestionTestBase.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizQuestionTestBase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizQuestionTestBase.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizRandomTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizRandomTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizRandomTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizRandomTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizRandomTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizRandomTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizRandomTest.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizRepeatUntilCorrectTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizRepeatUntilCorrectTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizRepeatUntilCorrectTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizRepeatUntilCorrectTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizRepeatUntilCorrectTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizRepeatUntilCorrectTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizRepeatUntilCorrectTest.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizResultBundleTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizResultBundleTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizResultBundleTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizResultBundleTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizResultBundleTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizResultBundleTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizResultBundleTest.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizResultPruningTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizResultPruningTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizResultPruningTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizResultPruningTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizResultPruningTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizResultPruningTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizResultPruningTest.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizResultTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizResultTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizResultTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizResultTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizResultTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizResultTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizResultTest.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizResumeTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizResumeTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizResumeTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizResumeTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizResumeTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizResumeTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizResumeTest.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizRevisioningTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizRevisioningTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizRevisioningTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizRevisioningTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizRevisioningTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizRevisioningTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizRevisioningTest.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizShuffleTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizShuffleTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizShuffleTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizShuffleTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizShuffleTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizShuffleTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizShuffleTest.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizTakingTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizTakingTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizTakingTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizTakingTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizTakingTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizTakingTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizTakingTest.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizTestBase.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizTestBase.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizTestBase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizTestBase.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizTestBase.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizTestBase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizTestBase.php
[parsing] modules/contrib/quiz/tests/src/Functional/QuizTimerTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizTimerTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizTimerTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizTimerTest.php
[refactoring] modules/contrib/quiz/tests/src/Functional/QuizTimerTest.php
[post rectors] modules/contrib/quiz/tests/src/Functional/QuizTimerTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Functional/QuizTimerTest.php
[parsing] modules/contrib/quiz/tests/src/Kernel/ContextProvider/QuizContextTest.php
[refactoring] modules/contrib/quiz/tests/src/Kernel/ContextProvider/QuizContextTest.php
[post rectors] modules/contrib/quiz/tests/src/Kernel/ContextProvider/QuizContextTest.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Kernel/ContextProvider/QuizContextTest.php
[parsing] modules/contrib/quiz/tests/src/Traits/QuizTestTrait.php
[refactoring] modules/contrib/quiz/tests/src/Traits/QuizTestTrait.php
[post rectors] modules/contrib/quiz/tests/src/Traits/QuizTestTrait.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/quiz/tests/src/Traits/QuizTestTrait.php

28 files with changes
=====================

1) modules/contrib/quiz/tests/src/Functional/QuizTimerTest.php:47

    ---------- begin diff ----------
@@ @@
     $this->submitForm([
       "question[{$question1->id()}][answer]" => 1,
     ], $this->t('Next'));
-    $this->assertNoText($this->t('The last answer was not submitted, as the time ran out.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->t('The last answer was not submitted, as the time ran out.'));
     $this->submitForm([
       "question[{$question2->id()}][answer]" => 1,
     ], $this->t('Next'));
-    $this->assertNoText($this->t('The last answer was not submitted, as the time ran out.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->t('The last answer was not submitted, as the time ran out.'));

     // Set the quiz result to have started 31 seconds ago.
     \Drupal::database()
@@ @@
     $this->submitForm([
       "question[{$question3->id()}][answer]" => 1,
     ], $this->t('Finish'));
-    $this->assertText($this->t('The last answer was not submitted, as the time ran out.'));
-    $this->assertText('You got 2 of 3 possible points.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('The last answer was not submitted, as the time ran out.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got 2 of 3 possible points.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector


2) modules/contrib/quiz/tests/src/Functional/QuizTestBase.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp($admin_permissions = [], $user_permissions = []) {
+  public function setUp($admin_permissions = [], $user_permissions = []): void {
     parent::setUp();

     $admin_permissions[] = 'administer quiz configuration';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/quiz/tests/src/Functional/QuizTakingTest.php:37

    ---------- begin diff ----------
@@ @@
       ],
     ]);
     $this->drupalGet("quiz/{$quiz_node_open->id()}");
-    $this->assertNoText($this->t('This @quiz is closed.', ['@quiz' => QuizUtil::getQuizName()]));
-    $this->assertNoText($this->t('You are not allowed to take this @quiz.', ['@quiz' => QuizUtil::getQuizName()]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->t('This @quiz is closed.', ['@quiz' => QuizUtil::getQuizName()]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->t('You are not allowed to take this @quiz.', ['@quiz' => QuizUtil::getQuizName()]));

     // Starts in the future.
     $quiz_node_future = $this->createQuiz([
@@ @@
       ],
     ]);
     $this->drupalGet("quiz/{$quiz_node_future->id()}");
-    $this->assertText($this->t('This @quiz is not yet open.', ['@quiz' => QuizUtil::getQuizName()]));
-    $this->assertNoText($this->t('You are not allowed to take this @quiz.', ['@quiz' => QuizUtil::getQuizName()]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('This @quiz is not yet open.', ['@quiz' => QuizUtil::getQuizName()]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->t('You are not allowed to take this @quiz.', ['@quiz' => QuizUtil::getQuizName()]));
     $this->drupalGet("quiz/{$quiz_node_future->id()}/take");
-    $this->assertText($this->t('This @quiz is not yet open.', ['@quiz' => QuizUtil::getQuizName()]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('This @quiz is not yet open.', ['@quiz' => QuizUtil::getQuizName()]));

     // Ends in the past.
     $quiz_node_past = $this->createQuiz([
@@ @@
       ],
     ]);
     $this->drupalGet("quiz/{$quiz_node_past->id()}");
-    $this->assertText($this->t('This @quiz is closed.', ['@quiz' => QuizUtil::getQuizName()]));
-    $this->assertNoText($this->t('You are not allowed to take this @quiz.', ['@quiz' => QuizUtil::getQuizName()]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('This @quiz is closed.', ['@quiz' => QuizUtil::getQuizName()]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->t('You are not allowed to take this @quiz.', ['@quiz' => QuizUtil::getQuizName()]));
     $this->drupalGet("quiz/{$quiz_node_past->id()}/take");
-    $this->assertText($this->t('This @quiz is closed.', ['@quiz' => QuizUtil::getQuizName()]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('This @quiz is closed.', ['@quiz' => QuizUtil::getQuizName()]));

     // Always available.
     $quiz = $this->createQuiz([]);
     $this->drupalGet("quiz/{$quiz->id()}");
-    $this->assertNoText($this->t('This @quiz is closed.', ['@quiz' => QuizUtil::getQuizName()]));
-    $this->assertNoText($this->t('You are not allowed to take this @quiz.', ['@quiz' => QuizUtil::getQuizName()]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->t('This @quiz is closed.', ['@quiz' => QuizUtil::getQuizName()]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->t('You are not allowed to take this @quiz.', ['@quiz' => QuizUtil::getQuizName()]));
   }

   /**
@@ @@

     $this->drupalLogin($this->user);
     $this->drupalGet("quiz-question/{$question1->id()}");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $user_with_privs = $this->drupalCreateUser([
       'view any quiz_question',
@@ @@
     ]);
     $this->drupalLogin($user_with_privs);
     $this->drupalGet("quiz-question/{$question1->id()}");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

   /**
@@ @@
     $this->submitForm([
       "question[{$question1->id()}][answer]" => 0,
     ], $this->t('Next'));
-    $this->assertText('Score: 0 of 1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Score: 0 of 1');

     // Go back and correct the answer.
     $this->drupalGet("quiz/{$quiz_node->id()}/take/1");
@@ @@
     $this->submitForm([
       "question[{$question1->id()}][answer]" => 1,
     ], $this->t('Next'));
-    $this->assertText('Score: 1 of 1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Score: 1 of 1');

     // Go back and incorrect the answer.
     $this->drupalGet("quiz/{$quiz_node->id()}/take/1");
@@ @@
     $this->submitForm([
       "question[{$question1->id()}][answer]" => 0,
     ], $this->t('Next'));
-    $this->assertText('Score: 0 of 1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Score: 0 of 1');

     $quiz_node->set('allow_change', 0);
     $quiz_node->save();
@@ @@
     $this->drupalGet("quiz/{$quiz_node->id()}/take/1");
     $this->assertSession()->fieldDisabled('edit-question-1-answer-1');
     $this->submitForm([], $this->t('Next'));
-    $this->assertText('Score: 0 of 1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Score: 0 of 1');

     // Check allow change/blank behavior.
     $this->drupalGet("quiz/{$quiz_node->id()}/take/2");
@@ @@

     $this->drupalLogin($this->user);
     $this->drupalGet("quiz/{$quiz_node->id()}");
-    $this->assertText('You can only take this Quiz 2 times. You have taken it 1 time.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You can only take this Quiz 2 times. You have taken it 1 time.');

     $quiz_node->set('show_attempt_stats', 0)->save();

     $this->drupalGet("quiz/{$quiz_node->id()}");
-    $this->assertNoText('You can only take this Quiz 2 times. You have taken it 1 time.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('You can only take this Quiz 2 times. You have taken it 1 time.');
   }

   public function testQuizMaxAttempts() {
@@ @@

     $this->drupalLogin($this->user);
     $this->drupalGet("quiz/{$quiz_node->id()}");
-    $this->assertText('You can only take this Quiz 2 times. You have taken it 1 time.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You can only take this Quiz 2 times. You have taken it 1 time.');
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
     $this->submitForm([
       "question[{$question1->id()}][answer]" => 0,
@@ @@

     // Make sure we can get back.
     $this->drupalGet("quiz/{$quiz_node->id()}");
-    $this->assertNoText('You can only take this Quiz 2 times. You have taken it 1 time.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('You can only take this Quiz 2 times. You have taken it 1 time.');
     $this->drupalGet("quiz/{$quiz_node->id()}/take/2");
     $this->submitForm([
       "question[{$question2->id()}][answer]" => 0,
@@ @@

     // No more attempts.
     $this->drupalGet("quiz/{$quiz_node->id()}");
-    $this->assertText('You have already taken this Quiz 2 times. You may not take it again.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You have already taken this Quiz 2 times. You may not take it again.');
   }

   /**
@@ @@
       "question[{$question2->id()}][answer]" => 1,
     ], $this->t('Finish'));

-    $this->assertText("Your score: 100%");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Your score: 100%");
   }

   /**
@@ @@
     $this->drupalGet("quiz/{$quiz_node->id()}");

     // @todo check the pager, this isn't reliable
-    $this->assertText("4");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("4");
   }

   /**
@@ @@

     // Ensure it is on truefalse.
     $this->drupalGet("quiz/{$quiz_node->id()}/take/1");
-    $this->assertField("edit-question-{$question1->id()}-is-doubtful");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists("edit-question-{$question1->id()}-is-doubtful");

     $this->submitForm([
       "question[{$question1->id()}][answer]" => 1,
@@ @@
     ], $this->t('Next'));
     // Go back and verify it was saved.
     $this->drupalGet("quiz/{$quiz_node->id()}/take/1");
-    $this->assertFieldChecked("edit-question-{$question1->id()}-is-doubtful");
+    $this->assertSession()->checkboxChecked("edit-question-{$question1->id()}-is-doubtful");

     // Ensure it is not on quiz directions.
     $this->drupalGet("quiz/{$quiz_node->id()}/take/2");
-    $this->assertNoField("edit-question-{$question2->id()}-is-doubtful");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldNotExists("edit-question-{$question2->id()}-is-doubtful");
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertFieldRector
 * AssertNoFieldRector
 * AssertNoTextRector
 * AssertResponseRector
 * AssertTextRector


4) modules/contrib/quiz/tests/src/Functional/QuizShuffleTest.php:67

    ---------- begin diff ----------
@@ @@
     }

     // Check that at least one of the orders is different.
-    $this->assertNotEqual(count(array_unique($out)), 1, $this->t('At least one set of questions was different.'));
+    $this->assertNotEquals(count(array_unique($out)), 1, $this->t('At least one set of questions was different.'));

     // Start the quiz.
     $this->drupalLogin($this->user);
@@ @@
     }

     // Check that at least one of the orders is different.
-    $this->assertNotEqual(count(array_unique($out)), 1, $this->t('At least one set of questions was different.'));
+    $this->assertNotEquals(count(array_unique($out)), 1, $this->t('At least one set of questions was different.'));

     // Start the quiz, make sure the questions stayed put on their pages.
     $this->drupalLogin($this->user);
     $this->drupalGet("quiz/{$quiz->id()}/take");
-    $this->assertText('TF 1 body text');
-    $this->assertText('TF 2 body text');
-    $this->assertText('TF 3 body text');
-    $this->assertNoText('TF 4 body text');
-    $this->assertNoText('TF 5 body text');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('TF 1 body text');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('TF 2 body text');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('TF 3 body text');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('TF 4 body text');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('TF 5 body text');

     // We know the 3 questions on the page.
     $this->submitForm([
@@ @@
       "question[{$question3->id()}][answer]" => TRUE,
     ], $this->t('Next'));

-    $this->assertNoText('TF 1 body text');
-    $this->assertNoText('TF 2 body text');
-    $this->assertNoText('TF 3 body text');
-    $this->assertText('TF 4 body text');
-    $this->assertText('TF 5 body text');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('TF 1 body text');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('TF 2 body text');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('TF 3 body text');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('TF 4 body text');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('TF 5 body text');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertNotEqualRector
 * AssertTextRector


5) modules/contrib/quiz/tests/src/Functional/QuizRevisioningTest.php:38

    ---------- begin diff ----------
@@ @@
     // Check for first revision.
     $this->drupalLogin($this->user);
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
-    $this->assertText("Revision 1");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Revision 1");

     // Attempt to update question. We have to create a new revision.
     $this->drupalLogin($this->admin);
     $this->drupalGet("quiz-question/{$question->id()}/edit");
-    $this->assertText('Warning: This question has attempts.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Warning: This question has attempts.');
     $this->submitForm([
     ], $this->t('Save'));
-    $this->assertText('Create new revision field is required.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Create new revision field is required.');
     $this->submitForm([
       'title[0][value]' => 'Revision 2',
       'body[0][value]' => 'Revision 2',
@@ @@
     // As the quiz taker, finish out the attempt.
     $this->drupalLogin($this->user);
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
-    $this->assertText("Revision 1");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Revision 1");
     $this->submitForm([
       "question[{$question->id()}][answer]" => 1,
     ], $this->t('Finish'));
-    $this->assertText('You got 1 of 1 possible points.');
-    $this->assertText('Question feedback for Revision 1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got 1 of 1 possible points.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Question feedback for Revision 1');

     // Take quiz again. Should be on SAME revision of the question. We have not
     // yet updated the Quiz with the new revision of the Question.
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
-    $this->assertText("Revision 1");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Revision 1");

     // We have an updated question and one Quiz revision with an attempt. We
     // need to update the quiz to use the new question. But there are attempts
@@ @@
     // on the quiz. Update the quiz to use the latest revision.
     $this->drupalLogin($this->admin);
     $this->drupalGet("quiz/{$quiz_node->id()}/questions");
-    $this->assertText('This quiz has been answered.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('This quiz has been answered.');
     $this->clickLink('create a new revision');
-    $this->assertText('Warning: This quiz has attempts.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Warning: This quiz has attempts.');
     $this->submitForm([
       'revision' => TRUE,
     ], $this->t('Save'));
-    $this->assertNoText('This quiz has been answered.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('This quiz has been answered.');
     $this->submitForm([
       "question_list[{$question->getRevisionId()}][question_vid]" => TRUE,
     ], $this->t('Submit'));
@@ @@
     // this attempt.
     $this->drupalLogin($this->user);
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
-    $this->assertText("Revision 1");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Revision 1");
     // Finish the attempt.
     $this->submitForm([
       "question[{$question->id()}][answer]" => 1,
     ], $this->t('Finish'));
-    $this->assertText('You got 1 of 1 possible points.');
-    $this->assertText('Question feedback for Revision 1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got 1 of 1 possible points.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Question feedback for Revision 1');

     // Take quiz again we should be on the new result, finally.
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
-    $this->assertText("Revision 2");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Revision 2");
     // Finish the attempt.
     $this->submitForm([
       "question[{$question->id()}][answer]" => 1,
     ], $this->t('Finish'));
-    $this->assertText('You got 0 of 1 possible points.');
-    $this->assertText('Question feedback for Revision 2');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got 0 of 1 possible points.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Question feedback for Revision 2');

     // Check admin override.
     $mega_admin = $this->createUser([
@@ @@
     $quiz_node = $this->linkQuestionToQuiz($question_node);

     $this->drupalGet("quiz/{$quiz_node->id()}/take");
-    $this->assertText("Revision 1");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Revision 1");
     // Finish the attempt.
     $this->submitForm([
       "question[{$question_node->id()}][answer]" => 1,
@@ @@

     // Check blocked access to update quiz and question.
     $this->drupalGet("quiz/{$quiz_node->id()}/edit");
-    $this->assertText('You must delete all attempts on this quiz before editing.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You must delete all attempts on this quiz before editing.');
     $this->assertSession()
       ->elementAttributeExists('css', '#edit-submit', 'disabled');

     $this->drupalGet("quiz-question/{$question_node->id()}/edit");
-    $this->assertText('You must delete all attempts on this question before editing.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You must delete all attempts on this question before editing.');
     $this->assertSession()
       ->elementAttributeExists('css', '#edit-submit', 'disabled');

@@ @@
     $this->drupalLogin($mega_admin);

     $this->drupalGet("quiz/{$quiz_node->id()}/edit");
-    $this->assertText('You should delete all attempts on this quiz before editing.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You should delete all attempts on this quiz before editing.');
     $this->submitForm([
     ], $this->t('Save'));

     $this->drupalGet("quiz-question/{$question_node->id()}/edit");
-    $this->assertText('You should delete all attempts on this question before editing.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You should delete all attempts on this question before editing.');
     $this->submitForm([
     ], $this->t('Save'));
   }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector


6) modules/contrib/quiz/tests/src/Functional/QuizResumeTest.php:39

    ---------- begin diff ----------
@@ @@
     $this->drupalLogin($this->user);
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
     $this->drupalGet("quiz/{$quiz_node->id()}/take/2");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("quiz/{$quiz_node->id()}/take/1");
     $this->submitForm([
       "question[{$question1->id()}][answer]" => 1,
@@ @@
     // Login again.
     $this->drupalLogin($this->user);
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
-    $this->assertText('Resuming');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Resuming');

     // We should have been advanced to the next question.
-    $this->assertUrl("quiz/{$quiz_node->id()}/take/2");
+    $this->assertSession()->addressEquals("quiz/{$quiz_node->id()}/take/2");

     // Assert 2nd question is accessible (indicating the answer to #1 was
     // saved.)
     $this->drupalGet("quiz/{$quiz_node->id()}/take/2");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

   /**
@@ @@
     $this->drupalLogin($this->user);
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
     $this->drupalGet("quiz/{$quiz_node->id()}/take/2");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("quiz/{$quiz_node->id()}/take/1");
     $this->submitForm([
       "question[{$question1->id()}][answer]" => 1,
@@ @@
     // Login again.
     $this->drupalLogin($this->user);
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
-    $this->assertNoText('Resuming');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Resuming');

     // Assert 2nd question is not accessible (indicating the answer to #1 was
     // not saved.)
     $this->drupalGet("quiz/{$quiz_node->id()}/take/2");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertResponseRector
 * AssertTextRector
 * AssertUrlRector


7) modules/contrib/quiz/tests/src/Functional/QuizResultTest.php:101

    ---------- begin diff ----------
@@ @@
     $this->submitForm([
       "question[{$question3->id()}][answer]" => 1,
     ], $this->t('Finish'));
-    $this->assertText('You got 90 or more on the quiz');
-    $this->assertText('This is the summary if passed');
-    $this->assertNoText('This is the default summary text');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got 90 or more on the quiz');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('This is the summary if passed');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('This is the default summary text');

     // Test 66%.
     $this->drupalGet("quiz/{$quiz->id()}/take");
@@ @@
     $this->submitForm([
       "question[{$question3->id()}][answer]" => 0,
     ], $this->t('Finish'));
-    $this->assertText('You got between 50 and 89');
-    $this->assertNoText('This is the summary if passed');
-    $this->assertText('This is the default summary text');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got between 50 and 89');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('This is the summary if passed');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('This is the default summary text');

     // Test 33%.
     $this->drupalGet("quiz/{$quiz->id()}/take");
@@ @@
     $this->submitForm([
       "question[{$question3->id()}][answer]" => 0,
     ], $this->t('Finish'));
-    $this->assertText('You failed bro');
-    $this->assertNoText('This is the summary if passed');
-    $this->assertText('This is the default summary text');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You failed bro');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('This is the summary if passed');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('This is the default summary text');
   }

   /**
@@ @@
     $resultsUrl = $this->getUrl();

     $this->drupalGet($resultsUrl);
-    $this->assertResponse(200, $this->t('User can view own result'));
+    $this->assertSession()->statusCodeEquals(200, $this->t('User can view own result'));
     $this->drupalLogout();
     $this->drupalGet($resultsUrl);
     $this->assertSession()->statusCodeEquals(403);
@@ @@

     // Verify the user's answer appears on our modified report.
     $this->drupalGet("quiz/{$quiz->id()}/quiz-result-export-test");
-    $this->assertText('1. MCQ 1 Title');
-    $this->assertText('This is the A answer');
-    $this->assertNoText('This is the B answer');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('1. MCQ 1 Title');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('This is the A answer');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('This is the B answer');
   }

   /**
@@ @@

     // And there should not be a fatal error.
     $this->drupalGet("quiz/{$quiz_node->id()}/result/1");
-    $this->assertResponse(200, 'Saw the results page.');
+    $this->assertSession()->statusCodeEquals(200, 'Saw the results page.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertResponseRector
 * AssertTextRector


8) modules/contrib/quiz/tests/src/Functional/QuizResultPruningTest.php:72

    ---------- begin diff ----------
@@ @@

     // Storing all results.
     $results = QuizResult::loadMultiple();
-    $this->assertEqual(count($results), 2, 'Found 2 quiz results.');
+    $this->assertEquals(count($results), 2, 'Found 2 quiz results.');

     $quiz_node->keep_results = Quiz::KEEP_LATEST;
     $quiz_node->save();
@@ @@
     $results = Drupal::entityTypeManager()
       ->getStorage('quiz_result')
       ->loadByProperties(['is_invalid' => 1]);
-    $this->assertEqual(count($results), 2, 'Found 2 invalid quiz results');
+    $this->assertEquals(count($results), 2, 'Found 2 invalid quiz results');

     // We should only have one valid 50% result.
     $results = Drupal::entityTypeManager()
       ->getStorage('quiz_result')
       ->loadByProperties(['is_invalid' => 0]);
-    $this->assertEqual(count($results), 1, 'Found only one quiz result');
+    $this->assertEquals(count($results), 1, 'Found only one quiz result');
     $quiz_result = reset($results);
-    $this->assertEqual($quiz_result->get('score')->value, 50, 'Quiz result was 50%');
+    $this->assertEquals($quiz_result->get('score')->value, 50, 'Quiz result was 50%');

     $quiz_node->keep_results = Quiz::KEEP_BEST;
     $quiz_node->save();
@@ @@
       "question[{$question4->id()}][answer]" => 0,
     ], $this->t('Finish'));

-    $this->assertText('Your previous score on this Quiz was equal or better. This result will not be saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your previous score on this Quiz was equal or better. This result will not be saved.');

     // We should now have 3 invalid results.
     $results = Drupal::entityTypeManager()
       ->getStorage('quiz_result')
       ->loadByProperties(['is_invalid' => 1]);
-    $this->assertEqual(count($results), 3, 'Found 3 invalid quiz results');
+    $this->assertEquals(count($results), 3, 'Found 3 invalid quiz results');

     // And since we failed we should still have a valid 50% result.
     $results = Drupal::entityTypeManager()
@@ @@
       ->loadByProperties(['is_invalid' => 0]);
     $this->assertTrue(count($results) == 1, 'Found only one quiz result');
     $quiz_result = reset($results);
-    $this->assertEqual($quiz_result->get('score')->value, 50, 'Quiz score was 50%');
+    $this->assertEquals($quiz_result->get('score')->value, 50, 'Quiz score was 50%');

     $this->drupalGet("quiz/{$quiz_node->id()}/take");
     $this->submitForm([
@@ @@
     $results = Drupal::entityTypeManager()
       ->getStorage('quiz_result')
       ->loadByProperties(['is_invalid' => 1]);
-    $this->assertEqual(count($results), 4, 'Found 4 invalid quiz results');
+    $this->assertEquals(count($results), 4, 'Found 4 invalid quiz results');

     // And we should have one valid 75% result.
     $results = Drupal::entityTypeManager()
       ->getStorage('quiz_result')
       ->loadByProperties(['is_invalid' => 0]);
-    $this->assertEqual(count($results), 1, 'Found only one quiz result');
+    $this->assertEquals(count($results), 1, 'Found only one quiz result');
     $quiz_result = reset($results);
-    $this->assertEqual($quiz_result->get('score')->value, 75, 'Quiz score was 75%');
+    $this->assertEquals($quiz_result->get('score')->value, 75, 'Quiz score was 75%');

     $config = \Drupal::service('config.factory')->getEditable('quiz.settings');

@@ @@
     $results = Drupal::entityTypeManager()
       ->getStorage('quiz_result')
       ->loadByProperties(['is_invalid' => 1]);
-    $this->assertEqual(count($results), 4, 'Found 4 invalid quiz results');
+    $this->assertEquals(count($results), 4, 'Found 4 invalid quiz results');
     $results = Drupal::entityTypeManager()
       ->getStorage('quiz_result')
       ->loadByProperties(['is_invalid' => 0]);
-    $this->assertEqual(count($results), 1, 'Found only one quiz result');
+    $this->assertEquals(count($results), 1, 'Found only one quiz result');
     $quiz_result = reset($results);
-    $this->assertEqual($quiz_result->get('score')->value, 75, 'Quiz score was 75%');
+    $this->assertEquals($quiz_result->get('score')->value, 75, 'Quiz score was 75%');

     // Set quiz_remove_invalid_quiz_record with a negative value to ensure
     // purging invalid results and run the cron itself. After this purge we
@@ @@
     $this->cronRun();

     $results = QuizResult::loadMultiple();
-    $this->assertEqual(count($results), 1, 'Found only one quiz result');
+    $this->assertEquals(count($results), 1, 'Found only one quiz result');
     $quiz_result = reset($results);
-    $this->assertEqual($quiz_result->get('score')->value, 75, 'Quiz score was 75%');
-    $this->assertEqual($quiz_result->get('is_invalid')->value, 0, 'Quiz score was valid');
+    $this->assertEquals($quiz_result->get('score')->value, 75, 'Quiz score was 75%');
+    $this->assertEquals($quiz_result->get('is_invalid')->value, 0, 'Quiz score was valid');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertTextRector


9) modules/contrib/quiz/tests/src/Functional/QuizResultBundleTest.php:64

    ---------- begin diff ----------
@@ @@

     // Check if field shows up and user is not yet started.
     $this->drupalGet("quiz/{$quizNodeA->id()}/take");
-    $this->assertFieldById('edit-quiz-result-field-a-0-value');
+    $this->assertSession()->fieldValueEquals('edit-quiz-result-field-a-0-value', '');

     // We haven't submitted the form so we should not have a Quiz result yet.
     $quiz_result = $quizNodeA->getResumeableResult($this->user);
@@ @@
     // Submit the form.
     $this->submitForm([], $this->t('Start Quiz'));
     // Check that we hooked into Form API correctly.
-    $this->assertText('field is required');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('field is required');

     // SUbmit the form with data.
     $this->submitForm(['quiz_result_field_a[0][value]' => 'test 123'], $this->t('Start Quiz'));
     $this->assertNotEmpty($quizNodeA->getResumeableResult($this->user), $this->t('Found quiz result.'));
     // Check the result exists now.
-    $this->assertText('Question 1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Question 1');
   }

   /**
@@ @@

     // Check if field shows up and user is not yet started.
     $this->drupalGet("quiz/{$quizNodeA->id()}/take");
-    $this->assertFieldById('edit-result-field-a-0-value');
-    $this->assertNoFieldById('edit-result-field-b-0-value');
+    $this->assertSession()->fieldValueEquals('edit-result-field-a-0-value', '');
+    $this->assertSession()->fieldValueNotEquals('edit-result-field-b-0-value', '');
     $results = Drupal::entityQuery('quiz_result')
       ->condition('qid', $quizNodeA->id())
       ->condition('uid', $this->user->id())
@@ @@
     $this->submitForm([], $this->t('Start Quiz'));

     // Check that form API is working.
-    $this->assertText('field is required');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('field is required');
     $this->submitForm(['result_field_a[0][value]' => 'test 123'], $this->t('Start Quiz'));

     // Check that a different field is on quiz B.
     $this->drupalGet("quiz/{$quizNodeB->id()}/take");
-    $this->assertFieldById('edit-result-field-b-0-value');
-    $this->assertNoFieldById('edit-result-field-a-0-value');
+    $this->assertSession()->fieldValueEquals('edit-result-field-b-0-value', '');
+    $this->assertSession()->fieldValueNotEquals('edit-result-field-a-0-value', '');

     // Mark field B to not show on result.
     $instanceb->setThirdPartySetting('quiz', 'show_field', FALSE);
     $instanceb->save();
     $this->drupalGet("quiz/{$quizNodeB->id()}/take");
-    $this->assertNoFieldById('edit-result-field-a-0-value');
-    $this->assertNoFieldById('edit-result-field-b-0-value');
+    $this->assertSession()->fieldValueNotEquals('edit-result-field-a-0-value', '');
+    $this->assertSession()->fieldValueNotEquals('edit-result-field-b-0-value', '');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByIdRector
 * AssertNoFieldByIdRector
 * AssertTextRector


10) modules/contrib/quiz/tests/src/Functional/QuizRepeatUntilCorrectTest.php:71

    ---------- begin diff ----------
@@ @@
     $this->submitForm([
       "question[{$question->id()}][answer][user_answer]" => 2,
     ], $this->t('Finish'));
-    $this->assertText('The answer was incorrect. Please try again.');
-    $this->assertText('You chose B');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The answer was incorrect. Please try again.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You chose B');

     // Check that we are still on the question.
-    $this->assertUrl("quiz/{$quiz->id()}/take/1");
+    $this->assertSession()->addressEquals("quiz/{$quiz->id()}/take/1");
     $this->submitForm([
       "question[{$question->id()}][answer][user_answer]" => 1,
     ], $this->t('Finish'));
-    $this->assertNoText('The answer was incorrect. Please try again.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('The answer was incorrect. Please try again.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * AssertUrlRector


11) modules/contrib/quiz/tests/src/Functional/QuizRandomTest.php:69

    ---------- begin diff ----------
@@ @@

     for ($i = 1; $i <= 10; $i++) {
       $questions = $quiz->buildLayout();
-      $this->assertEqual(count($questions), 3, $this->t('Quiz has 3 questions.'));
+      $this->assertEquals(count($questions), 3, $this->t('Quiz has 3 questions.'));
       // Concatenate question IDs to build a hash to check.
       $out[$i] = '';
       foreach ($questions as $question) {
         $out[$i] .= $question['qqid'];
       }
-      $this->assert(strpos($out[$i], $question['qqid']) !== FALSE, $this->t('Quiz always contains required question 1'));
+      $this->assertTrue(strpos($out[$i], $question['qqid']) !== FALSE, $this->t('Quiz always contains required question 1'));
     }

     // Also check that at least one of the orders is different.
-    $this->assertNotEqual(count(array_unique($out)), 1, $this->t('At least one set of questions were different.'));
+    $this->assertNotEquals(count(array_unique($out)), 1, $this->t('At least one set of questions were different.'));

     // Test number of questions.
     $num_questions = $quiz->getNumberOfQuestions();
-    $this->assertEqual($num_questions, 3);
+    $this->assertEquals($num_questions, 3);

     // Start the quiz.
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNotEqualRector
 * AssertRector


12) modules/contrib/quiz/tests/src/Functional/QuizQuestionTestBase.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @return void|false
    */
-  public function setUp($admin_permissions = [], $user_permissions = []) {
+  public function setUp($admin_permissions = [], $user_permissions = []): void {
     $admin_permissions[] = "create {$this->getQuestionType()} quiz_question";
     $admin_permissions[] = "update any {$this->getQuestionType()} quiz_question";
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/quiz/tests/src/Functional/QuizQuestionNumberingTest.php:62

    ---------- begin diff ----------
@@ @@
     $this->drupalLogin($this->user);
     $this->drupalGet("quiz/{$quiz->id()}/take");

-    $this->assertText("PG 1 body text");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("PG 1 body text");

-    $this->assertText("Question 1");
-    $this->assertText("TF 1 body text");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Question 1");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("TF 1 body text");

-    $this->assertText("Question 2");
-    $this->assertText("TF 2 body text");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Question 2");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("TF 2 body text");

     // There we only 2 real questions. Verify another question is present
     // but we stopped numbering at 2.
-    $this->assertNoText("Question 3");
-    $this->assertText("QD 3 body text");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains("Question 3");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("QD 3 body text");
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector


14) modules/contrib/quiz/tests/src/Functional/QuizNavigationTest.php:42

    ---------- begin diff ----------
@@ @@
     $this->drupalLogin($this->user);
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
     $this->drupalGet("quiz/{$quiz_node->id()}/take/1");
-    $this->assertText("Page 1 of 3");
-    $this->assertResponse(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Page 1 of 3");
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("quiz/{$quiz_node->id()}/take/2");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("quiz/{$quiz_node->id()}/take/3");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Answer a question, ensure next question is available.
     $this->drupalGet("quiz/{$quiz_node->id()}/take/1");
@@ @@
       "question[{$question1->id()}][answer]" => 1,
     ], $this->t('Next'));
     $this->drupalGet("quiz/{$quiz_node->id()}/take/2");
-    $this->assertText("Page 2 of 3");
-    $this->assertResponse(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Page 2 of 3");
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("quiz/{$quiz_node->id()}/take/3");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }

   /**
@@ @@
     // We should not have a selectbox
     $quiz_node->set('allow_jumping', 0)->save();
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
-    $this->assertNoFieldById('edit-question-number', NULL);
+    $this->assertSession()->fieldNotExists('edit-question-number');

     // Now we should have a selectbox
     $quiz_node->set('allow_jumping', 1)->save();
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
-    $this->assertFieldById('edit-question-number', NULL);
+    $this->assertSession()->fieldExists('edit-question-number');

     $this->drupalGet("quiz/{$quiz_node->id()}/take");
     $this->drupalGet("quiz/{$quiz_node->id()}/take/1");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("quiz/{$quiz_node->id()}/take/2");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("quiz/{$quiz_node->id()}/take/3");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // We should have a selectbox right now.
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
-    $this->assertFieldById('edit-question-number', NULL);
+    $this->assertSession()->fieldExists('edit-question-number');
     // Check that the "first" pager link does not appear.
-    $this->assertNoLinkByHref("quiz/{$quiz_node->id()}/take/1");
+    $this->assertSession()->linkByHrefNotExists("quiz/{$quiz_node->id()}/take/1");

     // Test the switch between select/pager.
     $config = \Drupal::configFactory()->getEditable('quiz.settings');
@@ @@
     $config->set('pager_siblings', 2);
     $config->save();
     $this->drupalGet("quiz/{$quiz_node->id()}/take/3");
-    $this->assertNoFieldById('edit-question-number');
-    $this->assertNoLink('1');
-    $this->assertLinkByHref("quiz/{$quiz_node->id()}/take/2");
-    $this->assertNoLinkByHref("quiz/{$quiz_node->id()}/take/3");
-    $this->assertLinkByHref("quiz/{$quiz_node->id()}/take/4");
-    $this->assertNoLink('5');
+    $this->assertSession()->fieldValueNotEquals('edit-question-number', '');
+    $this->assertSession()->linkNotExists('1');
+    $this->assertSession()->linkByHrefExists("quiz/{$quiz_node->id()}/take/2");
+    $this->assertSession()->linkByHrefNotExists("quiz/{$quiz_node->id()}/take/3");
+    $this->assertSession()->linkByHrefExists("quiz/{$quiz_node->id()}/take/4");
+    $this->assertSession()->linkNotExists('5');
   }

   /**
@@ @@
     $this->drupalLogin($this->user);
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
     $this->drupalGet("quiz/{$quiz_node->id()}/take/1");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("quiz/{$quiz_node->id()}/take/2");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("quiz/{$quiz_node->id()}/take/3");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Leave a question blank.
     $this->drupalGet("quiz/{$quiz_node->id()}/take/1");
@@ @@
     $this->submitForm([], $this->t('Leave blank'));
     // Now question 2 is accessible.
     $this->drupalGet("quiz/{$quiz_node->id()}/take/2");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("quiz/{$quiz_node->id()}/take/3");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }

   /**
@@ @@
     $this->drupalLogin($this->user);
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
     $this->drupalGet("quiz/{$quiz_node->id()}/take/1");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("quiz/{$quiz_node->id()}/take/2");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("quiz/{$quiz_node->id()}/take/3");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Answer a question, ensure next question is available. Ensure previous
     // question is not.
@@ @@
       "question[{$question1->id()}][answer]" => 1,
     ], $this->t('Next'));
     $this->drupalGet("quiz/{$quiz_node->id()}/take/2");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("quiz/{$quiz_node->id()}/take/1");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByIdRector
 * AssertLinkByHrefRector
 * AssertNoFieldByIdRector
 * AssertNoLinkByHrefRector
 * AssertNoLinkRector
 * AssertResponseRector
 * AssertTextRector


15) modules/contrib/quiz/tests/src/Functional/QuizGradingTest.php:68

    ---------- begin diff ----------
@@ @@
     $this->submitForm([
       "question[{$question3->id()}][answer]" => 1,
     ], $this->t('Finish'));
-    $this->assertText('You got 20 of 26 possible points.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got 20 of 26 possible points.');

     $quiz_result = QuizResult::load(1);
     $layout = $quiz_result->getLayout();

     // Make sure the values in the database are correct.
-    $this->assertEqual($layout[1]->get('points_awarded')->getString(), 0);
-    $this->assertEqual($layout[2]->get('points_awarded')->getString(), 0);
-    $this->assertEqual($layout[3]->get('points_awarded')->getString(), 20);
-    $this->assertEqual($layout[1]->get('is_correct')->getString(), 0);
-    $this->assertEqual($layout[2]->get('is_correct')->getString(), 0);
-    $this->assertEqual($layout[3]->get('is_correct')->getString(), 1);
+    $this->assertEquals($layout[1]->get('points_awarded')->getString(), 0);
+    $this->assertEquals($layout[2]->get('points_awarded')->getString(), 0);
+    $this->assertEquals($layout[3]->get('points_awarded')->getString(), 20);
+    $this->assertEquals($layout[1]->get('is_correct')->getString(), 0);
+    $this->assertEquals($layout[2]->get('is_correct')->getString(), 0);
+    $this->assertEquals($layout[3]->get('is_correct')->getString(), 1);

     // Total score is 20/26.
-    $this->assertEqual($quiz_result->get('score')->getString(), 77);
+    $this->assertEquals($quiz_result->get('score')->getString(), 77);
   }

   /**
@@ @@
     $this->submitForm([
       "question[{$question2->id()}][answer]" => 1,
     ], $this->t('Finish'));
-    $this->assertText('You got 3 of 10 possible points.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got 3 of 10 possible points.');

     // Test grading the question.
     $this->drupalLogin($this->admin);
@@ @@
     $quiz_result = QuizResult::load(1);
     $layout = $quiz_result->getLayout();

-    $this->assertEqual($layout[1]->get('points_awarded')->getString(), 3);
-    $this->assertEqual($layout[2]->get('points_awarded')->getString(), 3);
+    $this->assertEquals($layout[1]->get('points_awarded')->getString(), 3);
+    $this->assertEquals($layout[2]->get('points_awarded')->getString(), 3);

     // We got 3 + 3 points out of 10.
     // Unweighted we would have received 2.14 + 1 point.
-    $this->assertEqual($quiz_result->get('score')->getString(), 60);
+    $this->assertEquals($quiz_result->get('score')->getString(), 60);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertTextRector


16) modules/contrib/quiz/tests/src/Functional/QuizFeedbackTest.php:65

    ---------- begin diff ----------
@@ @@

       // As long as there is some feedback there should be a question title
       // header.
-      $this->assertText('Question 1');
-      $this->assertNoText('Question 2');
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains('Question 1');
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains('Question 2');

-      $this->assertRaw('<th>' . $text . '</th>');
+      $this->assertSession()->responseContains('<th>' . $text . '</th>');
       foreach ($review_options as $option2 => $text2) {
         if ($option != $option2) {
-          $this->assertNoRaw('<th>' . $text2 . '</th>');
+          $this->assertSession()->responseNotContains('<th>' . $text2 . '</th>');
         }
       }
     }
@@ @@

     // Check that we can access the feedback for the final question before quiz
     // feedback is shown. Verify the first question feedback is not shown.
-    $this->assertNoText('Question 1');
-    $this->assertText('Question 2');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Question 1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Question 2');

     // Press the finish button on the last question's feedback page.
     $this->submitForm([
@@ @@

       // Verify both questions appear. As long as there is some feedback there
       //should be a question title header.
-      $this->assertText('Question 1');
-      $this->assertText('Question 2');
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains('Question 1');
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains('Question 2');

-      $this->assertRaw('<th>' . $text . '</th>');
+      $this->assertSession()->responseContains('<th>' . $text . '</th>');
       foreach ($review_options as $option2 => $text2) {
         if ($option != $option2) {
-          $this->assertNoRaw('<th>' . $text2 . '</th>');
+          $this->assertSession()->responseNotContains('<th>' . $text2 . '</th>');
         }
       }
     }
@@ @@
     $this->submitForm([
       "question[{$question1->id()}][answer]" => 1,
     ], $this->t('Next'));
-    $this->assertNoText('Feedback for TF test.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Feedback for TF test.');
     $this->submitForm([
       "question[{$question2->id()}][answer]" => 1,
     ], $this->t('Finish'));
-    $this->assertText('Feedback for TF test.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Feedback for TF test.');
   }

   /**
@@ @@
     $this->submitForm([
       "question[{$question2->id()}][answer]" => 1,
     ], $this->t('Finish'));
-    $this->assertText('You have finished this Quiz');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You have finished this Quiz');
   }

   /**
@@ @@
     $this->submitForm([
       "question[{$question1->id()}][answer]" => 1,
     ], $this->t('Finish'));
-    $this->assertNoText('TF 1 body text');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('TF 1 body text');

     // Test full feedback.
     $quiz->review_options = ['end' => ['quiz_question_view_full' => 'quiz_question_view_full']];
@@ @@
     $this->submitForm([
       "question[{$question1->id()}][answer]" => 1,
     ], $this->t('Finish'));
-    $this->assertText('TF 1 body text');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('TF 1 body text');
   }

   /**
@@ @@
     $this->submitForm([
       "question[{$question1->id()}][answer]" => 1,
     ], $this->t('Finish'));
-    $this->assertNoText('Correct answer');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Correct answer');

     // Take again.
     $this->drupalGet("quiz/{$quiz->id()}/take");
@@ @@
     $this->submitForm([
       "question[{$question1->id()}][answer]" => 1,
     ], $this->t('Finish'));
-    $this->assertText('Correct answer');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Correct answer');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertNoRawRector
 * AssertNoTextRector
 * AssertRawRector
 * AssertTextRector


17) modules/contrib/quiz/tests/src/Functional/QuizCreationTest.php:22

    ---------- begin diff ----------
@@ @@
     $this->drupalGet("quiz/add/quiz");

     // These are the basic system defaults.
-    $this->assertFieldChecked('edit-allow-resume-value');
-    $this->assertFieldChecked('edit-allow-skipping-value');
-    $this->assertNoFieldChecked('edit-allow-jumping-value');
-    $this->assertFieldChecked('edit-allow-change-value');
-    $this->assertFieldChecked('edit-backwards-navigation-value');
-    $this->assertNoFieldChecked('edit-repeat-until-correct-value');
-    $this->assertNoFieldChecked('edit-mark-doubtful-value');
-    $this->assertFieldChecked('edit-show-passed-value');
-    $this->assertFieldChecked('edit-status-value');
+    $this->assertSession()->checkboxChecked('edit-allow-resume-value');
+    $this->assertSession()->checkboxChecked('edit-allow-skipping-value');
+    $this->assertSession()->checkboxNotChecked('edit-allow-jumping-value');
+    $this->assertSession()->checkboxChecked('edit-allow-change-value');
+    $this->assertSession()->checkboxChecked('edit-backwards-navigation-value');
+    $this->assertSession()->checkboxNotChecked('edit-repeat-until-correct-value');
+    $this->assertSession()->checkboxNotChecked('edit-mark-doubtful-value');
+    $this->assertSession()->checkboxChecked('edit-show-passed-value');
+    $this->assertSession()->checkboxChecked('edit-status-value');

     $this->submitForm([
       'title[0][value]' => 'Test quiz creation',
       'body[0][value]' => 'Test quiz description',
     ], $this->t('Save'));
-    $this->assertText('Manage questions');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Manage questions');
   }

   /**
@@ @@

     $this->drupalLogin($this->user);
     $this->drupalGet("quiz/{$quiz->id()}/take");
-    $this->assertText('TF 1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('TF 1');
     $this->drupalGet("quiz/{$new_quiz->id()}/take");
-    $this->assertText('TF 1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('TF 1');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertNoFieldCheckedRector
 * AssertTextRector


18) modules/contrib/quiz/tests/src/Functional/QuizCategorizedRandomTest.php:128

    ---------- begin diff ----------
@@ @@
     ])->id();

     $list = $quiz->buildLayout();
-    $this->assertEqual(count($list), 4, 'Quiz had 4 questions.');
+    $this->assertEquals(count($list), 4, 'Quiz had 4 questions.');
     foreach ($list as $qinfo) {
       $qq_ids[] = $qinfo['qqid'];
     }
-    $this->assertEqual(count(array_intersect($qq_ids, $questions)), 4, 'Questions were from the terms excluding 2.');
+    $this->assertEquals(count(array_intersect($qq_ids, $questions)), 4, 'Questions were from the terms excluding 2.');

     // Test number of questions.
     $num_questions = $quiz->getNumberOfQuestions();
-    $this->assertEqual($num_questions, 4);
+    $this->assertEquals($num_questions, 4);

     // Start the quiz.
     $this->drupalLogin($this->user);
     $this->drupalGet("quiz/{$quiz->id()}/take");
-    $this->assertText('Page 1 of 4');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Page 1 of 4');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertTextRector


19) modules/contrib/quiz/tests/src/Functional/QuizBuildOnLastTest.php:70

    ---------- begin diff ----------
@@ @@
     $this->submitForm([
       'build_on_last' => 'correct',
     ], $this->t('Start @quiz', ['@quiz' => QuizUtil::getQuizName()]));
-    $this->assertFieldChecked("edit-question-{$question1->id()}-answer-1");
+    $this->assertSession()->checkboxChecked("edit-question-{$question1->id()}-answer-1");
     $this->submitForm([
       "question[{$question1->id()}][answer]" => 1,
     ], $this->t('Next'));
-    $this->assertNoFieldChecked("edit-question-{$question2->id()}-answer-1");
+    $this->assertSession()->checkboxNotChecked("edit-question-{$question2->id()}-answer-1");
     $this->submitForm([
       "question[{$question2->id()}][answer]" => 0,
     ], $this->t('Next'));
-    $this->assertFieldChecked("edit-question-{$question3->id()}-answer-1");
+    $this->assertSession()->checkboxChecked("edit-question-{$question3->id()}-answer-1");
     $this->submitForm([
       "question[{$question3->id()}][answer]" => 1,
     ], $this->t('Next'));
-    $this->assertNoFieldChecked("edit-question-{$question4->id()}-answer-1");
+    $this->assertSession()->checkboxNotChecked("edit-question-{$question4->id()}-answer-1");
     $this->submitForm([
       "question[{$question4->id()}][answer]" => 0,
     ], $this->t('Finish'));
@@ @@
     $this->submitForm([
       'build_on_last' => 'all',
     ], $this->t('Start @quiz', ['@quiz' => QuizUtil::getQuizName()]));
-    $this->assertNoFieldChecked("edit-question-{$question1->id()}-answer-1");
-    $this->assertNoFieldChecked("edit-question-{$question1->id()}-answer-0");
+    $this->assertSession()->checkboxNotChecked("edit-question-{$question1->id()}-answer-1");
+    $this->assertSession()->checkboxNotChecked("edit-question-{$question1->id()}-answer-0");
     $this->submitForm([
       "question[{$question1->id()}][answer]" => 1,
     ], $this->t('Next'));
-    $this->assertFieldChecked("edit-question-{$question2->id()}-answer-0");
+    $this->assertSession()->checkboxChecked("edit-question-{$question2->id()}-answer-0");
     $this->submitForm([
       "question[{$question2->id()}][answer]" => 0,
     ], $this->t('Next'));
-    $this->assertFieldChecked("edit-question-{$question3->id()}-answer-1");
+    $this->assertSession()->checkboxChecked("edit-question-{$question3->id()}-answer-1");
     $this->submitForm([
       "question[{$question3->id()}][answer]" => 1,
     ], $this->t('Next'));
-    $this->assertFieldChecked("edit-question-{$question4->id()}-answer-0");
+    $this->assertSession()->checkboxChecked("edit-question-{$question4->id()}-answer-0");
     $this->submitForm([
       "question[{$question4->id()}][answer]" => 0,
     ], $this->t('Finish'));
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertNoFieldCheckedRector


20) modules/contrib/quiz/tests/src/Functional/QuizAnonymousTest.php:66

    ---------- begin diff ----------
@@ @@
       "question[{$question2->id()}][answer]" => 1,
     ], $this->t('Finish'));

-    $this->assertText('You got 1 of 2 possible points.');
-    $this->assertText('Your score: 50%');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got 1 of 2 possible points.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your score: 50%');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector


21) modules/contrib/quiz/tests/src/Functional/QuizAccessTest.php:22

    ---------- begin diff ----------
@@ @@

   /**
    * Test quiz authors being able to score results for own quiz.
+   * @doesNotPerformAssertions
    */
   public function testQuizOwnerResultEdit() {
     $grader = $this->drupalCreateUser(['score own quiz']);
@@ @@
     $this->drupalLogin($other);
     // Check unevaluated quiz results view.
     $this->drupalGet("user/{$other->id()}/quiz-result-score");
-    $this->assertNoLink($this->t('Score'));
+    $this->assertSession()->linkNotExists($this->t('Score'));
     $this->drupalGet("quiz/{$quiz->id()}/result/1/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Score.
     $this->drupalLogin($grader);
    ----------- end diff -----------

Applied rules:
 * AssertNoLinkRector
 * AssertResponseRector
 * AddDoesNotPerformAssertionToNonAssertingTestRector


22) modules/contrib/quiz/question_types/quiz_truefalse/tests/src/Functional/QuizTrueFalseTestCase.php:47

    ---------- begin diff ----------
@@ @@

     // Test that question appears in lists.
     $this->drupalGet("quiz/{$quiz->id()}/questions");
-    $this->assertText('TF 1 title');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('TF 1 title');

     // Login as non-admin.
     $this->drupalLogin($this->user);
@@ @@

     // Take the quiz.
     $this->drupalGet("quiz/{$quiz->id()}/take");
-    $this->assertNoText('TF 1 title');
-    $this->assertText('TF 1 body text');
-    $this->assertText('True');
-    $this->assertText('False');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('TF 1 title');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('TF 1 body text');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('True');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('False');

     // Test validation.
     $this->submitForm([], $this->t('Finish'));
-    $this->assertText('You must provide an answer.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You must provide an answer.');

     // Test correct question.
     $this->drupalGet("quiz/{$quiz->id()}/take");
@@ @@
     $this->submitForm([
       "question[{$question->id()}][answer]" => 1,
     ], $this->t('Finish'));
-    $this->assertText('You got 1 of 1 possible points.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got 1 of 1 possible points.');

     // Test incorrect question.
     $this->drupalGet("quiz/{$quiz->id()}/take");
@@ @@
     $this->submitForm([
       "question[{$question->id()}][answer]" => 0,
     ], $this->t('Finish'));
-    $this->assertText('You got 0 of 1 possible points.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got 0 of 1 possible points.');
   }

   /**
@@ @@
     $this->submitForm([
       "question[{$question->id()}][answer]" => 1,
     ], $this->t('Finish'));
-    $this->assertRaw('quiz-score-icon correct');
-    $this->assertRaw('quiz-score-icon should');
+    $this->assertSession()->responseContains('quiz-score-icon correct');
+    $this->assertSession()->responseContains('quiz-score-icon should');
     // Take the quiz.
     $this->drupalGet("quiz/{$quiz->id()}/take");
     $this->submitForm([
       "question[{$question->id()}][answer]" => 0,
     ], $this->t('Finish'));
-    $this->assertRaw('quiz-score-icon incorrect');
-    $this->assertRaw('quiz-score-icon should');
+    $this->assertSession()->responseContains('quiz-score-icon incorrect');
+    $this->assertSession()->responseContains('quiz-score-icon should');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertRawRector
 * AssertTextRector


23) modules/contrib/quiz/question_types/quiz_short_answer/tests/src/Functional/ShortAnswerTestCase.php:26

    ---------- begin diff ----------
@@ @@

   /**
    * Test creating a short answer question.
+   * @doesNotPerformAssertions
    */
   public function testCreateQuizQuestion($settings = []) {
     $question = QuizQuestion::create($settings + [
@@ @@
     $this->submitForm([
       "question[{$question->id()}][answer]" => 'This is an incorrect answer.',
     ], $this->t('Finish'));
-    $this->assertText('Your score: 0%');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your score: 0%');

     // Test correct.
     $this->drupalGet("quiz/{$quiz->id()}/take");
@@ @@
     $this->submitForm([
       "question[{$question->id()}][answer]" => 'the Zero One Infinity rule',
     ], $this->t('Finish'));
-    $this->assertText('Your score: 100%');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your score: 100%');

     // Test correct.
     $this->drupalGet("quiz/{$quiz->id()}/take");
@@ @@
     $this->submitForm([
       "question[{$question->id()}][answer]" => 'the zero one Infinity rule',
     ], $this->t('Finish'));
-    $this->assertText('Your score: 100%');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your score: 100%');
   }

   /**
@@ @@
     $this->submitForm([
       "question[{$question->id()}][answer]" => 'the zero one Infinity rule',
     ], $this->t('Finish'));
-    $this->assertText('Your score: 0%');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your score: 0%');

     // Test correct.
     $this->drupalGet("quiz/{$quiz->id()}/take");
@@ @@
     $this->submitForm([
       "question[{$question->id()}][answer]" => 'the Zero One Infinity rule',
     ], $this->t('Finish'));
-    $this->assertText('Your score: 100%');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your score: 100%');
   }

   /**
@@ @@
     $this->submitForm([
       "question[{$question->id()}][answer]" => 'um some rule, I forget',
     ], $this->t('Finish'));
-    $this->assertText('Your score: 0%');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your score: 0%');

     // Test correct.
     $this->drupalGet("quiz/{$quiz->id()}/take");
@@ @@
     $this->submitForm([
       "question[{$question->id()}][answer]" => 'the answer is the zero one infinity rule',
     ], $this->t('Finish'));
-    $this->assertText('Your score: 100%');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your score: 100%');
   }

   /**
@@ @@
     $this->submitForm([
       "question[{$question2->id()}][answer]" => 'the number two really is ridiculous',
     ], $this->t('Finish'));
-    $this->assertText('Your score: 0%');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your score: 0%');
     // Strange behavior - extra spaces in HTML.
     //$this->assertText('Score ? of 10');
-    $this->assertText('This answer has not yet been scored.');
-    $this->assertNoFieldByName('question[1][score]');
-    $this->assertNoFieldByName('question[2][score]');
-    $this->assertNoFieldByName('question[1][answer_feedback][value]');
-    $this->assertNoFieldByName('question[2][answer_feedback][value]');
-    $this->assertNoRaw($this->t('Save score'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('This answer has not yet been scored.');
+    $this->assertSession()->fieldValueNotEquals('question[1][score]', '');
+    $this->assertSession()->fieldValueNotEquals('question[2][score]', '');
+    $this->assertSession()->fieldValueNotEquals('question[1][answer_feedback][value]', '');
+    $this->assertSession()->fieldValueNotEquals('question[2][answer_feedback][value]', '');
+    $this->assertSession()->responseNotContains($this->t('Save score'));
     $url_of_result = $this->getUrl();

     // Test grading the question.
@@ @@
     $this->drupalLogin($this->admin);
     $this->drupalGet('admin/quiz/reports/unevaluated');
     $this->clickLink($this->t('Score'));
-    $this->assertFieldByName('question[1][score]');
-    $this->assertFieldByName('question[2][score]');
+    $this->assertSession()->fieldExists('question[1][score]');
+    $this->assertSession()->fieldExists('question[2][score]');
     $this->submitForm([
       "question[1][score]" => 2,
       "question[2][score]" => 3,
@@ @@
       "question[1][answer_feedback][format]" => 'basic_html',
       "question[2][answer_feedback][format]" => 'basic_html',
     ], $this->t('Save score'));
-    $this->assertText('The scoring data you provided has been saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The scoring data you provided has been saved.');

     // Test the score is visible to the user.
     $this->drupalLogin($this->user);
     $this->drupalGet($url_of_result);
-    $this->assertText('You got 5 of 10 possible points.');
-    $this->assertText('Your score: 50%');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got 5 of 10 possible points.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your score: 50%');
     // Strange behavior - extra spaces in HTML.
     //$this->assertText('Score 2 of 5');
     //$this->assertText('Score 3 of 5');
-    $this->assertText('Feedback for answer 1.');
-    $this->assertText('Feedback for answer 2.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Feedback for answer 1.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Feedback for answer 2.');
   }

   /**
@@ @@
     ], $this->t('Finish'));

     $this->drupalGet("quiz/{$quiz->id()}/quiz-result-export-test");
-    $this->assertText('um some rule, I forget');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('um some rule, I forget');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * AssertNoRawRector
 * AssertTextRector
 * AddDoesNotPerformAssertionToNonAssertingTestRector


24) modules/contrib/quiz/question_types/quiz_page/tests/src/Functional/QuizPageTestCase.php:79

    ---------- begin diff ----------
@@ @@
       switch ($qnr_id) {
         case 1:
         case 2:
-          $this->assertEqual($rel->qqr_pid, 4);
+          $this->assertEquals($rel->qqr_pid, 4);
           break;

         case 3:
-          $this->assertEqual($rel->qqr_pid, 5);
+          $this->assertEquals($rel->qqr_pid, 5);
           break;

         case 4:
@@ @@
     $this->drupalLogin($this->user);
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
     // Questions 1 and 2 are present. Question 3 is hidden.
-    $this->assertFieldByName("question[{$question_node1->id()}][answer]");
-    $this->assertFieldByName("question[{$question_node2->id()}][answer]");
-    $this->assertNoFieldByName("question[{$question_node3->id()}][answer]");
+    $this->assertSession()->fieldExists("question[{$question_node1->id()}][answer]");
+    $this->assertSession()->fieldExists("question[{$question_node2->id()}][answer]");
+    $this->assertSession()->fieldValueNotEquals("question[{$question_node3->id()}][answer]", '');
     $this->submitForm([
       "question[{$question_node1->id()}][answer]" => 1,
       "question[{$question_node2->id()}][answer]" => 1,
     ], $this->t('Next'));
     // Questions 1 and 2 are gone. Question 3 is present.
-    $this->assertNoFieldByName("question[{$question_node1->id()}][answer]");
-    $this->assertNoFieldByName("question[{$question_node2->id()}][answer]");
-    $this->assertFieldByName("question[{$question_node3->id()}][answer]");
+    $this->assertSession()->fieldValueNotEquals("question[{$question_node1->id()}][answer]", '');
+    $this->assertSession()->fieldValueNotEquals("question[{$question_node2->id()}][answer]", '');
+    $this->assertSession()->fieldExists("question[{$question_node3->id()}][answer]");
     $this->submitForm([
       "question[{$question_node3->id()}][answer]" => 1,
     ], $this->t('Finish'));

     // Check that the results page contains all the questions.
-    $this->assertText('You got 3 of 3 possible points.');
-    $this->assertText('TF 1 body text');
-    $this->assertText('TF 2 body text');
-    $this->assertText('TF 3 body text');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got 3 of 3 possible points.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('TF 1 body text');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('TF 2 body text');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('TF 3 body text');

     foreach (QuizResult::loadMultiple() as $quiz_result) {
       $quiz_result->delete();
@@ @@
     $this->drupalLogin($this->user);
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
     // Questions 1 and 2 are present. Question 3 is hidden.
-    $this->assertText("Page 1 of 2");
-    $this->assertFieldByName("question[{$question_node1->id()}][answer]");
-    $this->assertFieldByName("question[{$question_node2->id()}][answer]");
-    $this->assertNoFieldByName("question[{$question_node3->id()}][answer]");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Page 1 of 2");
+    $this->assertSession()->fieldExists("question[{$question_node1->id()}][answer]");
+    $this->assertSession()->fieldExists("question[{$question_node2->id()}][answer]");
+    $this->assertSession()->fieldValueNotEquals("question[{$question_node3->id()}][answer]", '');
     $this->submitForm([
       "question[{$question_node1->id()}][answer]" => 1,
       "question[{$question_node2->id()}][answer]" => 1,
@@ @@
     ], $this->t('Next'));

     // Questions 1 and 2 are gone. Question 3 is present.
-    $this->assertText("Page 2 of 2");
-    $this->assertNoFieldByName("question[{$question_node1->id()}][answer]");
-    $this->assertNoFieldByName("question[{$question_node2->id()}][answer]");
-    $this->assertFieldByName("question[{$question_node3->id()}][answer]");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Page 2 of 2");
+    $this->assertSession()->fieldValueNotEquals("question[{$question_node1->id()}][answer]", '');
+    $this->assertSession()->fieldValueNotEquals("question[{$question_node2->id()}][answer]", '');
+    $this->assertSession()->fieldExists("question[{$question_node3->id()}][answer]");

     // Test backwards navigation.
     $this->submitForm([
     ], $this->t('Back'));
-    $this->assertText("Page 1 of 2");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Page 1 of 2");
     $this->submitForm([
     ], $this->t('Next'));

@@ @@
       "question[{$question_node2->id()}][answer]" => 1,
     ], $this->t('Next'));

-    $this->assertText('This is the feedback for question 1.');
-    $this->assertText('This is the feedback for question 2.');
-    $this->assertNoText('This is the feedback for question 3.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('This is the feedback for question 1.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('This is the feedback for question 2.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('This is the feedback for question 3.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * AssertNoTextRector
 * AssertTextRector


25) modules/contrib/quiz/question_types/quiz_multichoice/tests/src/Functional/QuizMultichoiceTestCase.php:20

    ---------- begin diff ----------
@@ @@

   /**
    * Create a default MCQ with default settings.
+   * @doesNotPerformAssertions
    */
   public function testCreateQuizQuestion($settings = []) {

@@ @@
     $this->submitForm([
       "question[{$question->id()}][answer][user_answer]" => 2,
     ], $this->t('Finish'));
-    $this->assertPattern('/quiz-score-icon selected/', 'Found selected answer.');
-    $this->assertPattern('/quiz-score-icon should/', 'Found should answer.');
-    $this->assertPattern('/quiz-score-icon incorrect/', 'Found incorrect answer.');
-    $this->assertText('You did not choose A');
-    $this->assertText('You chose B');
-    $this->assertText('You did not choose C');
+    $this->assertSession()->responseMatches('/quiz-score-icon selected/', 'Found selected answer.');
+    $this->assertSession()->responseMatches('/quiz-score-icon should/', 'Found should answer.');
+    $this->assertSession()->responseMatches('/quiz-score-icon incorrect/', 'Found incorrect answer.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You did not choose A');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You chose B');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You did not choose C');
   }

   /**
@@ @@
       "question[{$question->id()}][answer][user_answer][3]" => 3,
     ], $this->t('Finish'));
     // 0 of 1, because user picked a correct answer and an incorrect answer.
-    $this->assertText('You got 0 of 1 possible points.');
-    $this->assertText('Your score: 0%');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got 0 of 1 possible points.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your score: 0%');

     $this->drupalGet("quiz/{$quiz->id()}/take");
     $this->submitForm([
@@ @@
       "question[{$question->id()}][answer][user_answer][1]" => 1,
     ], $this->t('Finish'));
     // 1 of 1, because user picked a correct answer and not an incorrect answer.
-    $this->assertText('You got 1 of 1 possible points.');
-    $this->assertText('Your score: 100%');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got 1 of 1 possible points.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your score: 100%');
   }

   /**
@@ @@
       "question[{$question->id()}][answer][user_answer][1]" => 1,
     ], $this->t('Next'));
     $this->drupalGet("quiz/{$quiz->id()}/take/1");
-    $this->assertFieldChecked('edit-question-1-answer-user-answer-1');
+    $this->assertSession()->checkboxChecked('edit-question-1-answer-user-answer-1');
   }

   /**
@@ @@
       "question[{$question->id()}][answer][user_answer]" => 1,
     ], $this->t('Next'));
     $this->drupalGet("quiz/{$quiz->id()}/take/1");
-    $this->assertFieldChecked('edit-question-1-answer-user-answer-1');
+    $this->assertSession()->checkboxChecked('edit-question-1-answer-user-answer-1');
   }

   /**
@@ @@
       "question[{$question->id()}][answer][user_answer][1]" => 1,
       "question[{$question->id()}][answer][user_answer][3]" => 3,
     ], $this->t('Finish'));
-    $this->assertText('You got 0 of 1 possible points.');
-    $this->assertText('Your score: 0%');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got 0 of 1 possible points.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your score: 0%');
     // Get the last result and make sure it is 0%.
     $efq = \Drupal::entityQuery('quiz_result');
     $result = $efq->range(0, 1)
@@ @@
       "question[{$question->id()}][answer][user_answer][1]" => 1,
       "question[{$question->id()}][answer][user_answer][2]" => 1,
     ], $this->t('Finish'));
-    $this->assertText('You got 1 of 1 possible points.');
-    $this->assertText('Your score: 100%');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got 1 of 1 possible points.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your score: 100%');

     // Get the last result and make sure it is 100%, not 200%.
     $efq = \Drupal::entityQuery('quiz_result');
@@ @@

   /**
    * Test that the question response can be edited.
+   * @doesNotPerformAssertions
    */
   public function testEditQuestionResponse() {
     // Create & link a question.
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertPatternRector
 * AssertTextRector
 * AddDoesNotPerformAssertionToNonAssertingTestRector


26) modules/contrib/quiz/question_types/quiz_matching/tests/src/Functional/MatchingTestCase.php:69

    ---------- begin diff ----------
@@ @@

     // Test that question appears in lists.
     $this->drupalGet("quiz/{$quiz_node->id()}/questions");
-    $this->assertText('MA 1 title');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('MA 1 title');

     // Login as non-admin.
     $this->drupalLogin($this->user);
@@ @@

     // Take the quiz.
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
-    $this->assertNoText('MA 1 title');
-    $this->assertText('MA 1 body text');
-    $this->assertText('MAQ 1');
-    $this->assertText('MAQ 2');
-    $this->assertText('MAQ 3');
-    $this->assertText('MAA 1');
-    $this->assertText('MAA 2');
-    $this->assertText('MAA 3');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('MA 1 title');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('MA 1 body text');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('MAQ 1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('MAQ 2');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('MAQ 3');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('MAA 1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('MAA 2');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('MAA 3');

     // Test validation.
     $this->submitForm([], $this->t('Finish'));
-    $this->assertText('You need to match at least one of the items.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You need to match at least one of the items.');

     // Test correct question.
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
@@ @@
     //$this->assertText('MAF 1');
     //$this->assertText('MAF 2');
     //$this->assertText('MAF 3');
-    $this->assertText('You got 3 of 3 possible points.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got 3 of 3 possible points.');

     // Test incorrect question.
     $this->drupalGet("quiz/{$quiz_node->id()}/take");
@@ @@
     //$this->assertText('MAF 2');
     // The behavior right now is that all the feedback shows.
     //$this->assertText('MAF 3');
-    $this->assertText('You got 2 of 3 possible points.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got 2 of 3 possible points.');
   }

   /**
@@ @@
       "question[{$question_node->id()}][answer][user_answer][2]" => 1,
       "question[{$question_node->id()}][answer][user_answer][3]" => 3,
     ], $this->t('Finish'));
-    $this->assertText('You got 1 of 3 possible points.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got 1 of 3 possible points.');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector


27) modules/contrib/quiz/question_types/quiz_long_answer/tests/src/Functional/LongAnswerTestCase.php:54

    ---------- begin diff ----------
@@ @@
     $this->submitForm([
       "question[{$question2->id()}][answer]" => 'the number two really is ridiculous',
     ], $this->t('Finish'));
-    $this->assertText('Your score: 0%');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your score: 0%');
     // Strange behavior - extra spacing in the HTML.
     //$this->assertText('Score ? of 10');
-    $this->assertText('This answer has not yet been scored.');
-    $this->assertNoFieldByName('question[0][score]');
-    $this->assertNoFieldByName('question[1][score]');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('This answer has not yet been scored.');
+    $this->assertSession()->fieldValueNotEquals('question[0][score]', '');
+    $this->assertSession()->fieldValueNotEquals('question[1][score]', '');
     $url_of_result = $this->getUrl();

     // Test grading the question.
@@ @@
       "question[1][answer_feedback][format]" => 'basic_html',
       "question[2][answer_feedback][format]" => 'basic_html',
     ], $this->t('Save score'));
-    $this->assertText('The scoring data you provided has been saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The scoring data you provided has been saved.');

     // Test the score and feedback are visible to the user.
     $this->drupalLogin($this->user);
     $this->drupalGet($url_of_result);
-    $this->assertText('You got 10 of 20 possible points.');
-    $this->assertText('Your score: 50%');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You got 10 of 20 possible points.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your score: 50%');
     // Strange behavior - extra spacing in the HTML.
     //$this->assertText('Score 3 of 10');
     //$this->assertText('Score 7 of 10');
-    $this->assertText('Feedback for answer 1.');
-    $this->assertText('Feedback for answer 2.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Feedback for answer 1.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Feedback for answer 2.');
   }

   /**
@@ @@
     // Login as a user and check the result.
     $this->drupalLogin($this->admin);
     $this->drupalGet("quiz/{$quiz->id()}/result/1");
-    $this->assertText('&lt;img src', 'Plain text rubric image tag did not get rendered on page');
-    $this->assertNoText('findmeRubricFiltered', 'Filtered text rubric image tag got stripped');
-    $this->assertText('findmeAnswerPlaintext', 'Plain text answer image tag did not get rendered on page');
-    $this->assertNoText('findmeAnswerFiltered', 'Filtered text answer image tag got stripped');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('&lt;img src');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('findmeRubricFiltered');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('findmeAnswerPlaintext');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('findmeAnswerFiltered');
   }

   /**
@@ @@
     ], $this->t('Finish'));

     $this->drupalGet("quiz/{$quiz->id()}/quiz-result-export-test");
-    $this->assertText('um some rule, I forget');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('um some rule, I forget');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoFieldByNameRector
 * AssertNoTextRector
 * AssertTextRector


28) modules/contrib/quiz/question_types/quiz_directions/tests/src/Functional/QuizDirectionsTestCase.php:40

    ---------- begin diff ----------
@@ @@

     $this->drupalLogin($this->user);
     $this->drupalGet("quiz/{$quiz->id()}/take");
-    $this->assertText('QD 1 body text.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('QD 1 body text.');

     return $question;
   }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector


 [OK] 28 files have been changed by Rector                                      

