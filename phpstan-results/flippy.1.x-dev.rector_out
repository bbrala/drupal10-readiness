[parsing] modules/contrib/flippy/flippy.install
[refactoring] modules/contrib/flippy/flippy.install
[post rectors] modules/contrib/flippy/flippy.install
[print] modules/contrib/flippy/flippy.install
[parsing] modules/contrib/flippy/flippy.module
[refactoring] modules/contrib/flippy/flippy.module
[post rectors] modules/contrib/flippy/flippy.module
[print] modules/contrib/flippy/flippy.module
[parsing] modules/contrib/flippy/src/FlippyEvent.php
[refactoring] modules/contrib/flippy/src/FlippyEvent.php
[post rectors] modules/contrib/flippy/src/FlippyEvent.php
[print] modules/contrib/flippy/src/FlippyEvent.php
[refactoring] modules/contrib/flippy/src/FlippyEvent.php
[post rectors] modules/contrib/flippy/src/FlippyEvent.php
[print] modules/contrib/flippy/src/FlippyEvent.php
[parsing] modules/contrib/flippy/src/FlippyPager.php
[refactoring] modules/contrib/flippy/src/FlippyPager.php
[post rectors] modules/contrib/flippy/src/FlippyPager.php
[print] modules/contrib/flippy/src/FlippyPager.php
[refactoring] modules/contrib/flippy/src/FlippyPager.php
[post rectors] modules/contrib/flippy/src/FlippyPager.php
[print] modules/contrib/flippy/src/FlippyPager.php
[parsing] modules/contrib/flippy/src/Plugin/Block/FlippyBlock.php
[refactoring] modules/contrib/flippy/src/Plugin/Block/FlippyBlock.php
[post rectors] modules/contrib/flippy/src/Plugin/Block/FlippyBlock.php
[print] modules/contrib/flippy/src/Plugin/Block/FlippyBlock.php
[parsing] modules/contrib/flippy/tests/src/Functional/FlippyTest.php
[refactoring] modules/contrib/flippy/tests/src/Functional/FlippyTest.php
[post rectors] modules/contrib/flippy/tests/src/Functional/FlippyTest.php
[print] modules/contrib/flippy/tests/src/Functional/FlippyTest.php
[refactoring] modules/contrib/flippy/tests/src/Functional/FlippyTest.php
[post rectors] modules/contrib/flippy/tests/src/Functional/FlippyTest.php
[print] modules/contrib/flippy/tests/src/Functional/FlippyTest.php

3 files with changes
====================

1) modules/contrib/flippy/tests/src/Functional/FlippyTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create an article content type that we will use for testing.
@@ @@
     $this->assertSession()->statusCodeEquals(200);

     // Confirm that the front page contains the standard text.
-    $this->assertNoText('Previous');
-    $this->assertText('Next');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Previous');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Next');

     // Load the second page.
     $this->drupalGet('/node/2');
@@ @@
     $this->assertSession()->statusCodeEquals(200);

     // Confirm that the front page contains the standard text.
-    $this->assertText('Previous');
-    $this->assertText('Next');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Previous');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Next');

     // Load the last page.
     $this->drupalGet('/node/3');
@@ @@
     $this->assertSession()->statusCodeEquals(200);

     // Confirm that the front page contains the standard text.
-    $this->assertText('Previous');
-    $this->assertNoText('Next');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Previous');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Next');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/flippy/src/FlippyPager.php:303

    ---------- begin diff ----------
@@ @@
         'last' => $last,
       ];
       $event = new FlippyEvent($queries, $node);
-      $this->eventDispatcher->dispatch('buildFlippyQuery', $event);
+      $this->eventDispatcher->dispatch($event, 'buildFlippyQuery');
       $queries = $event->getQueries();

       // Execute the queries.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


3) modules/contrib/flippy/src/FlippyEvent.php:7

    ---------- begin diff ----------
@@ @@
 /**
  * Defines a Flippy Node event.
  */
-class FlippyEvent extends Event {
+class FlippyEvent extends \Symfony\Contracts\EventDispatcher\Event {

   protected $queries;
   protected $node;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

