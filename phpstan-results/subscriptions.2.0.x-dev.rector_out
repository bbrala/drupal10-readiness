[parsing] modules/contrib/subscriptions/src/Entity/Handlers/SubscriptionStorageSchema.php
[refactoring] modules/contrib/subscriptions/src/Entity/Handlers/SubscriptionStorageSchema.php
[post rectors] modules/contrib/subscriptions/src/Entity/Handlers/SubscriptionStorageSchema.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/src/Entity/Handlers/SubscriptionStorageSchema.php
[parsing] modules/contrib/subscriptions/src/Entity/Subscription.php
[refactoring] modules/contrib/subscriptions/src/Entity/Subscription.php
[post rectors] modules/contrib/subscriptions/src/Entity/Subscription.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/src/Entity/Subscription.php
[parsing] modules/contrib/subscriptions/src/Entity/SubscriptionInterface.php
[refactoring] modules/contrib/subscriptions/src/Entity/SubscriptionInterface.php
[post rectors] modules/contrib/subscriptions/src/Entity/SubscriptionInterface.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/src/Entity/SubscriptionInterface.php
[parsing] modules/contrib/subscriptions/src/Event/QueueEvent.php
[refactoring] modules/contrib/subscriptions/src/Event/QueueEvent.php
[post rectors] modules/contrib/subscriptions/src/Event/QueueEvent.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/src/Event/QueueEvent.php
[parsing] modules/contrib/subscriptions/src/Form/ConfigForm.php
[refactoring] modules/contrib/subscriptions/src/Form/ConfigForm.php
[post rectors] modules/contrib/subscriptions/src/Form/ConfigForm.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/src/Form/ConfigForm.php
[parsing] modules/contrib/subscriptions/src/Form/IntervalsForm.php
[refactoring] modules/contrib/subscriptions/src/Form/IntervalsForm.php
[post rectors] modules/contrib/subscriptions/src/Form/IntervalsForm.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/src/Form/IntervalsForm.php
[parsing] modules/contrib/subscriptions/src/Form/UserDefaultsBulkForm.php
[refactoring] modules/contrib/subscriptions/src/Form/UserDefaultsBulkForm.php
[post rectors] modules/contrib/subscriptions/src/Form/UserDefaultsBulkForm.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/src/Form/UserDefaultsBulkForm.php
[parsing] modules/contrib/subscriptions/src/Form/UserDefaultsForm.php
[refactoring] modules/contrib/subscriptions/src/Form/UserDefaultsForm.php
[post rectors] modules/contrib/subscriptions/src/Form/UserDefaultsForm.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/src/Form/UserDefaultsForm.php
[parsing] modules/contrib/subscriptions/src/Plugin/Action/SubscribeUsers.php
[refactoring] modules/contrib/subscriptions/src/Plugin/Action/SubscribeUsers.php
[post rectors] modules/contrib/subscriptions/src/Plugin/Action/SubscribeUsers.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/src/Plugin/Action/SubscribeUsers.php
[parsing] modules/contrib/subscriptions/src/Plugin/Action/UnsubscribeUsers.php
[refactoring] modules/contrib/subscriptions/src/Plugin/Action/UnsubscribeUsers.php
[post rectors] modules/contrib/subscriptions/src/Plugin/Action/UnsubscribeUsers.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/src/Plugin/Action/UnsubscribeUsers.php
[parsing] modules/contrib/subscriptions/src/Plugin/Annotation/SubscriptionType.php
[refactoring] modules/contrib/subscriptions/src/Plugin/Annotation/SubscriptionType.php
[post rectors] modules/contrib/subscriptions/src/Plugin/Annotation/SubscriptionType.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/src/Plugin/Annotation/SubscriptionType.php
[parsing] modules/contrib/subscriptions/src/Plugin/Manager/SubscriptionTypeManager.php
[refactoring] modules/contrib/subscriptions/src/Plugin/Manager/SubscriptionTypeManager.php
[post rectors] modules/contrib/subscriptions/src/Plugin/Manager/SubscriptionTypeManager.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/src/Plugin/Manager/SubscriptionTypeManager.php
[parsing] modules/contrib/subscriptions/src/Plugin/SubscriptionType/Node.php
[refactoring] modules/contrib/subscriptions/src/Plugin/SubscriptionType/Node.php
[post rectors] modules/contrib/subscriptions/src/Plugin/SubscriptionType/Node.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/src/Plugin/SubscriptionType/Node.php
[parsing] modules/contrib/subscriptions/src/Plugin/SubscriptionType/NodeType.php
[refactoring] modules/contrib/subscriptions/src/Plugin/SubscriptionType/NodeType.php
[post rectors] modules/contrib/subscriptions/src/Plugin/SubscriptionType/NodeType.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/src/Plugin/SubscriptionType/NodeType.php
[parsing] modules/contrib/subscriptions/src/Plugin/SubscriptionType/SubscriptionTypeBase.php
[refactoring] modules/contrib/subscriptions/src/Plugin/SubscriptionType/SubscriptionTypeBase.php
[post rectors] modules/contrib/subscriptions/src/Plugin/SubscriptionType/SubscriptionTypeBase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/src/Plugin/SubscriptionType/SubscriptionTypeBase.php
[parsing] modules/contrib/subscriptions/src/Plugin/SubscriptionType/SubscriptionTypeInterface.php
[refactoring] modules/contrib/subscriptions/src/Plugin/SubscriptionType/SubscriptionTypeInterface.php
[post rectors] modules/contrib/subscriptions/src/Plugin/SubscriptionType/SubscriptionTypeInterface.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/src/Plugin/SubscriptionType/SubscriptionTypeInterface.php
[parsing] modules/contrib/subscriptions/src/Plugin/SubscriptionType/SubscriptionTypePermissionAccessBase.php
[refactoring] modules/contrib/subscriptions/src/Plugin/SubscriptionType/SubscriptionTypePermissionAccessBase.php
[post rectors] modules/contrib/subscriptions/src/Plugin/SubscriptionType/SubscriptionTypePermissionAccessBase.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/src/Plugin/SubscriptionType/SubscriptionTypePermissionAccessBase.php
[parsing] modules/contrib/subscriptions/src/Service/SubscriptionManager.php
[refactoring] modules/contrib/subscriptions/src/Service/SubscriptionManager.php
[post rectors] modules/contrib/subscriptions/src/Service/SubscriptionManager.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/src/Service/SubscriptionManager.php
[parsing] modules/contrib/subscriptions/src/Service/SubscriptionManagerInterface.php
[refactoring] modules/contrib/subscriptions/src/Service/SubscriptionManagerInterface.php
[post rectors] modules/contrib/subscriptions/src/Service/SubscriptionManagerInterface.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/src/Service/SubscriptionManagerInterface.php
[parsing] modules/contrib/subscriptions/subscriptions.admin.old.php
[refactoring] modules/contrib/subscriptions/subscriptions.admin.old.php
[post rectors] modules/contrib/subscriptions/subscriptions.admin.old.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions.admin.old.php
[refactoring] modules/contrib/subscriptions/subscriptions.admin.old.php
[post rectors] modules/contrib/subscriptions/subscriptions.admin.old.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions.admin.old.php
[parsing] modules/contrib/subscriptions/subscriptions.api.php
[refactoring] modules/contrib/subscriptions/subscriptions.api.php
[post rectors] modules/contrib/subscriptions/subscriptions.api.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions.api.php
[parsing] modules/contrib/subscriptions/subscriptions.install
[refactoring] modules/contrib/subscriptions/subscriptions.install
[post rectors] modules/contrib/subscriptions/subscriptions.install
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions.install
[parsing] modules/contrib/subscriptions/subscriptions.module
[refactoring] modules/contrib/subscriptions/subscriptions.module
[post rectors] modules/contrib/subscriptions/subscriptions.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions.module
[parsing] modules/contrib/subscriptions/subscriptions.module.old.php
[refactoring] modules/contrib/subscriptions/subscriptions.module.old.php
[post rectors] modules/contrib/subscriptions/subscriptions.module.old.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions.module.old.php
[refactoring] modules/contrib/subscriptions/subscriptions.module.old.php
[post rectors] modules/contrib/subscriptions/subscriptions.module.old.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions.module.old.php
[parsing] modules/contrib/subscriptions/subscriptions.tokens.old.php
[refactoring] modules/contrib/subscriptions/subscriptions.tokens.old.php
[post rectors] modules/contrib/subscriptions/subscriptions.tokens.old.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions.tokens.old.php
[parsing] modules/contrib/subscriptions/subscriptions_blog_ui/subscriptions_blog_ui.module
[refactoring] modules/contrib/subscriptions/subscriptions_blog_ui/subscriptions_blog_ui.module
[post rectors] modules/contrib/subscriptions/subscriptions_blog_ui/subscriptions_blog_ui.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_blog_ui/subscriptions_blog_ui.module
[refactoring] modules/contrib/subscriptions/subscriptions_blog_ui/subscriptions_blog_ui.module
[post rectors] modules/contrib/subscriptions/subscriptions_blog_ui/subscriptions_blog_ui.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_blog_ui/subscriptions_blog_ui.module
[parsing] modules/contrib/subscriptions/subscriptions_content/src/Form/ConfigForm.php
[refactoring] modules/contrib/subscriptions/subscriptions_content/src/Form/ConfigForm.php
[post rectors] modules/contrib/subscriptions/subscriptions_content/src/Form/ConfigForm.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_content/src/Form/ConfigForm.php
[parsing] modules/contrib/subscriptions/subscriptions_content/subscriptions_content.api.php
[refactoring] modules/contrib/subscriptions/subscriptions_content/subscriptions_content.api.php
[post rectors] modules/contrib/subscriptions/subscriptions_content/subscriptions_content.api.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_content/subscriptions_content.api.php
[parsing] modules/contrib/subscriptions/subscriptions_content/subscriptions_content.install
[refactoring] modules/contrib/subscriptions/subscriptions_content/subscriptions_content.install
[post rectors] modules/contrib/subscriptions/subscriptions_content/subscriptions_content.install
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_content/subscriptions_content.install
[parsing] modules/contrib/subscriptions/subscriptions_content/subscriptions_content.module
[refactoring] modules/contrib/subscriptions/subscriptions_content/subscriptions_content.module
[post rectors] modules/contrib/subscriptions/subscriptions_content/subscriptions_content.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_content/subscriptions_content.module
[parsing] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.admin.inc
[refactoring] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.admin.inc
[post rectors] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.admin.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.admin.inc
[refactoring] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.admin.inc
[post rectors] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.admin.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.admin.inc
[parsing] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.module
[refactoring] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.module
[post rectors] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.module
[refactoring] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.module
[post rectors] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.module
[parsing] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.notify.inc
[refactoring] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.notify.inc
[post rectors] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.notify.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.notify.inc
[refactoring] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.notify.inc
[post rectors] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.notify.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.notify.inc
[parsing] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.tokens.inc
[refactoring] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.tokens.inc
[post rectors] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.tokens.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.tokens.inc
[parsing] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.admin.inc
[refactoring] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.admin.inc
[post rectors] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.admin.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.admin.inc
[refactoring] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.admin.inc
[post rectors] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.admin.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.admin.inc
[parsing] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.api.php
[refactoring] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.api.php
[post rectors] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.api.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.api.php
[parsing] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.cron.inc
[refactoring] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.cron.inc
[post rectors] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.cron.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.cron.inc
[refactoring] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.cron.inc
[post rectors] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.cron.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.cron.inc
[parsing] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.install
[refactoring] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.install
[post rectors] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.install
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.install
[parsing] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.mail_edit.inc
[refactoring] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.mail_edit.inc
[post rectors] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.mail_edit.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.mail_edit.inc
[refactoring] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.mail_edit.inc
[post rectors] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.mail_edit.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.mail_edit.inc
[parsing] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.module
[refactoring] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.module
[post rectors] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.module
[refactoring] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.module
[post rectors] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.module
[parsing] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.templates.inc
[refactoring] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.templates.inc
[post rectors] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.templates.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.templates.inc
[refactoring] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.templates.inc
[post rectors] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.templates.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.templates.inc
[parsing] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.tokens.inc
[refactoring] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.tokens.inc
[post rectors] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.tokens.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.tokens.inc
[parsing] modules/contrib/subscriptions/subscriptions_og/subscriptions_og.install
[refactoring] modules/contrib/subscriptions/subscriptions_og/subscriptions_og.install
[post rectors] modules/contrib/subscriptions/subscriptions_og/subscriptions_og.install
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_og/subscriptions_og.install
[refactoring] modules/contrib/subscriptions/subscriptions_og/subscriptions_og.install
[post rectors] modules/contrib/subscriptions/subscriptions_og/subscriptions_og.install
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_og/subscriptions_og.install
[parsing] modules/contrib/subscriptions/subscriptions_og/subscriptions_og.module
[refactoring] modules/contrib/subscriptions/subscriptions_og/subscriptions_og.module
[post rectors] modules/contrib/subscriptions/subscriptions_og/subscriptions_og.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_og/subscriptions_og.module
[refactoring] modules/contrib/subscriptions/subscriptions_og/subscriptions_og.module
[post rectors] modules/contrib/subscriptions/subscriptions_og/subscriptions_og.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_og/subscriptions_og.module
[parsing] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.admin.inc
[refactoring] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.admin.inc
[post rectors] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.admin.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.admin.inc
[refactoring] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.admin.inc
[post rectors] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.admin.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.admin.inc
[parsing] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.install
[refactoring] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.install
[post rectors] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.install
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.install
[refactoring] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.install
[post rectors] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.install
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.install
[parsing] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.module
[refactoring] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.module
[post rectors] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.module
[refactoring] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.module
[post rectors] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.module
[parsing] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.tokens.inc
[refactoring] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.tokens.inc
[post rectors] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.tokens.inc
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.tokens.inc
[parsing] modules/contrib/subscriptions/subscriptions_ui/src/Form/SubscriptionsUINodeForm.php
[refactoring] modules/contrib/subscriptions/subscriptions_ui/src/Form/SubscriptionsUINodeForm.php
[post rectors] modules/contrib/subscriptions/subscriptions_ui/src/Form/SubscriptionsUINodeForm.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_ui/src/Form/SubscriptionsUINodeForm.php
[parsing] modules/contrib/subscriptions/subscriptions_ui/src/Plugin/Block/SubscriptionsInterface.php
[refactoring] modules/contrib/subscriptions/subscriptions_ui/src/Plugin/Block/SubscriptionsInterface.php
[post rectors] modules/contrib/subscriptions/subscriptions_ui/src/Plugin/Block/SubscriptionsInterface.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_ui/src/Plugin/Block/SubscriptionsInterface.php
[parsing] modules/contrib/subscriptions/subscriptions_ui/subscriptions_ui.api.php
[refactoring] modules/contrib/subscriptions/subscriptions_ui/subscriptions_ui.api.php
[post rectors] modules/contrib/subscriptions/subscriptions_ui/subscriptions_ui.api.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_ui/subscriptions_ui.api.php
[parsing] modules/contrib/subscriptions/subscriptions_ui/subscriptions_ui.module
[refactoring] modules/contrib/subscriptions/subscriptions_ui/subscriptions_ui.module
[post rectors] modules/contrib/subscriptions/subscriptions_ui/subscriptions_ui.module
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_ui/subscriptions_ui.module
[parsing] modules/contrib/subscriptions/subscriptions_ui/subscriptions_ui.module.old.php
[refactoring] modules/contrib/subscriptions/subscriptions_ui/subscriptions_ui.module.old.php
[post rectors] modules/contrib/subscriptions/subscriptions_ui/subscriptions_ui.module.old.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_ui/subscriptions_ui.module.old.php
[refactoring] modules/contrib/subscriptions/subscriptions_ui/subscriptions_ui.module.old.php
[post rectors] modules/contrib/subscriptions/subscriptions_ui/subscriptions_ui.module.old.php
    [post rector] Rector\PostRector\Rector\NodeToReplacePostRector
    [post rector] Rector\PostRector\Rector\NodeAddingPostRector
    [post rector] Rector\PostRector\Rector\PropertyAddingPostRector
    [post rector] Ssch\TYPO3Rector\Rector\PostRector\FullQualifiedNamePostRector
    [post rector] Rector\PostRector\Rector\NodeRemovingPostRector
    [post rector] Rector\PostRector\Rector\ClassRenamingPostRector
    [post rector] Rector\PostRector\Rector\NameImportingPostRector
    [post rector] Rector\PostRector\Rector\UseAddingPostRector
[print] modules/contrib/subscriptions/subscriptions_ui/subscriptions_ui.module.old.php

17 files with changes
=====================

1) modules/contrib/subscriptions/subscriptions_ui/subscriptions_ui.module.old.php:151

    ---------- begin diff ----------
@@ @@
   uasort($node_options, '_subscriptions_cmp_by_weight');

   foreach (array(
-    db_query("SELECT sid, module, field, value, author_uid, send_interval, send_updates, send_comments FROM {subscriptions} WHERE module = :module AND field = :field AND value = :value AND recipient_uid = :recipient_uid", array(
+    \Drupal::database()->query("SELECT sid, module, field, value, author_uid, send_interval, send_updates, send_comments FROM {subscriptions} WHERE module = :module AND field = :field AND value = :value AND recipient_uid = :recipient_uid", array(
       ':module' => 'node',
       ':field' => 'nid',
       ':value' => $node->nid,
       ':recipient_uid' => $account->uid
     ), array('fetch' => PDO::FETCH_ASSOC)),
-    db_query("SELECT sid, module, field, value, author_uid, send_interval, send_updates, send_comments FROM {subscriptions} WHERE module = :module AND field <> :field AND recipient_uid = :recipient_uid", array(
+    \Drupal::database()->query("SELECT sid, module, field, value, author_uid, send_interval, send_updates, send_comments FROM {subscriptions} WHERE module = :module AND field <> :field AND recipient_uid = :recipient_uid", array(
       ':module' => 'node',
       ':field' => 'nid',
       ':recipient_uid' => $account->uid
@@ @@
     $row = array();
     foreach (array('subscriptions', 'updates', 'comments') as $eli => $elv) {
       if (isset($element[$elv]) && $element[$elv]['#access']) {
-        $row[] = drupal_render($element[$elv][$key]);
+        $row[] = \Drupal::service('renderer')->render($element[$elv][$key]);
         $headers[$eli] = $header_strings[$eli];
       }
     }
@@ @@
 function subscriptions_ui_field_extra_fields() {
   $extra = array();
   if (variable_get('subscriptions_form_in_block', 0)) {
-    $types = db_query("SELECT type FROM {block_node_type} WHERE module = :module AND delta = :delta", array(
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $types = \Drupal::database()->query("SELECT type FROM {block_node_type} WHERE module = :module AND delta = :delta", array(
       ':module' => 'subscriptions_ui',
       ':delta' => 0,
     ))->fetchCol();
    ----------- end diff -----------

Applied rules:
 * DBQueryRector
 * DrupalRenderRector


2) modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.module:127

    ---------- begin diff ----------
@@ @@
                 'link'   => 'taxa/' . $tid,
               ) + $hidden;
               $options['tid'][] = array(
-                'name'   => t('To content in %term by %name', array('%term' => $term->name, '%name' => format_username(user_load($node->uid)))) . $unavailable,
+                'name'   => t('To content in %term by %name', array('%term' => $term->name, '%name' => format_username(\Drupal::service('entity_type.manager')->getStorage('user')->load($node->uid)))) . $unavailable,
                 'params' => array('module' => 'node', 'field' => 'tid', 'value' => $tid, 'author_uid' => $node->uid),
                 'link'   => 'taxa/' . $tid . '/' . $node->uid,
               ) + $hidden;
@@ @@
  * @ingroup hooks
  */
 function subscriptions_taxonomy_disable() {
-  db_delete('subscriptions_queue')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  \Drupal::database()->delete('subscriptions_queue')
     ->condition('module', 'node')
     ->condition('field', 'tid')
     ->execute();
@@ @@
  */
 function subscriptions_taxonomy_taxonomy_term_delete($term) {
   foreach (array('subscriptions', 'subscriptions_queue') as $table) {
-    db_delete($table)
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    \Drupal::database()->delete($table)
       ->condition('module', 'node')
       ->condition('field', 'tid')
       ->condition('value', $term->tid)
    ----------- end diff -----------

Applied rules:
 * DBDeleteRector
 * UserLoadRector


3) modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.install:30

    ---------- begin diff ----------
@@ @@
  */
 function subscriptions_taxonomy_update_7001() {
   // Fetch all existing term ids.
-  $taxonomy_tids = db_select('taxonomy_term_data', 'ttd')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $taxonomy_tids = \Drupal::database()->select('taxonomy_term_data', 'ttd')
     ->fields('ttd', array('tid'))
     ->execute()
     ->fetchCol();

   // Fetch all tids from subscriptions table.
-  $subscriptions_tids = db_select('subscriptions', 'sub')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $subscriptions_tids = \Drupal::database()->select('subscriptions', 'sub')
     ->fields('sub', array('value'))
     ->distinct('sub.value')
     ->condition('module', 'node')
@@ @@
     ->fetchCol();

   // Fetch all tids from subscriptions_queue table.
-  $subscriptions_queue_tids = db_select('subscriptions_queue', 'subq')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $subscriptions_queue_tids = \Drupal::database()->select('subscriptions_queue', 'subq')
     ->fields('subq', array('value'))
     ->distinct('subq.value')
     ->condition('module', 'node')
@@ @@
   // Delete orphaned entries from subscriptions table.
   $subscriptions_tids_diff = array_diff($subscriptions_tids, $taxonomy_tids);
   if (!empty($subscriptions_tids_diff)) {
-    db_delete('subscriptions')
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    \Drupal::database()->delete('subscriptions')
       ->condition('module', 'node')
       ->condition('field', 'tid')
       ->condition('value', $subscriptions_tids_diff)
@@ @@
   // Delete orphaned entries from subscriptions_queue table.
   $subscriptions_queue_tids_diff = array_diff($subscriptions_queue_tids, $taxonomy_tids);
   if (!empty($subscriptions_queue_tids_diff)) {
-    db_delete('subscriptions_queue')
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    \Drupal::database()->delete('subscriptions_queue')
       ->condition('module', 'node')
       ->condition('field', 'tid')
       ->condition('value', $subscriptions_tids_diff)
    ----------- end diff -----------

Applied rules:
 * DBDeleteRector
 * DBSelectRector


4) modules/contrib/subscriptions/subscriptions_taxonomy/subscriptions_taxonomy.admin.inc:74

    ---------- begin diff ----------
@@ @@
  * @ingroup form
  */
 function _subscriptions_taxonomy_taxa_form(array $form, $uid, array $vocabularies) {
-  $query = db_select('taxonomy_term_data', 't', array('fetch' => PDO::FETCH_ASSOC));
+  $query = \Drupal::database()->select('taxonomy_term_data', 't', array('fetch' => PDO::FETCH_ASSOC));
   $query->join('subscriptions', 's', (db_driver() != 'pgsql' ? 't.tid = s.value' : 'CAST(t.tid AS VARCHAR) = s.value'));
   $result = $query
     ->fields('s', array('value', 'send_interval', 'author_uid', 'send_comments', 'send_updates'))
    ----------- end diff -----------

Applied rules:
 * DBSelectRector


5) modules/contrib/subscriptions/subscriptions_og/subscriptions_og.module:106

    ---------- begin diff ----------
@@ @@
         // We take only the first group to which this node is posted. This won't
         // be correct if this node is posted to multiple, different group types.
         if (!empty($groups) && !empty($groups['node'])) {
-          $group = node_load(current($groups['node']));
+          $group = \Drupal::service('entity_type.manager')->getStorage('node')->load(current($groups['node']));
           return 'group-type-' . $group->type;
         }
       }
@@ @@
  *   The form array.
  */
 function subscriptions_og_page(array $form, $uid) {
-  $account = user_load($uid);
+  $account = \Drupal::service('entity_type.manager')->getStorage('user')->load($uid);

   // Load all active OG subscriptions for this user.
-  $query = db_select('subscriptions', 's', array('fetch' => PDO::FETCH_ASSOC));
+  $query = \Drupal::database()->select('subscriptions', 's', array('fetch' => PDO::FETCH_ASSOC));
   $result = $query
     ->fields('s', array(
       'value',
    ----------- end diff -----------

Applied rules:
 * DBSelectRector
 * NodeLoadRector
 * UserLoadRector


6) modules/contrib/subscriptions/subscriptions_og/subscriptions_og.install:9

    ---------- begin diff ----------
@@ @@
  */
 function subscriptions_og_disable() {
   // Removes our queue items.
-  db_delete('subscriptions_queue')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  \Drupal::database()->delete('subscriptions_queue')
     ->condition('module', 'node')
     ->condition('field', 'group_audience')
     ->execute();
    ----------- end diff -----------

Applied rules:
 * DBDeleteRector


7) modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.templates.inc:123

    ---------- begin diff ----------
@@ @@
     $id = $mailmod . '_' . $mailkey;
     static $cache = array();
     if (!isset($cache[$langcode][$id])) {
-      $query = db_select('mail_edit', 'me')
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      $query = \Drupal::database()->select('mail_edit', 'me')
         ->fields('me')
         ->condition('me.id', $id)
         ->condition('me.language', $langcode);
    ----------- end diff -----------

Applied rules:
 * DBSelectRector


8) modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.module:106

    ---------- begin diff ----------
@@ @@
  * Purge the Subscriptions queue.
  */
 function subscriptions_purge_queue() {
-  $count = db_delete('subscriptions_queue')->execute();
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $count = \Drupal::database()->delete('subscriptions_queue')->execute();
   $variables = array('@Subscriptions' => 'Subscriptions', '%count' => $count);
-  drupal_set_message(t('All %count items have been purged.', $variables));
+  \Drupal::messenger()->addStatus(t('All %count items have been purged.', $variables));
   $watchdog = 'watchdog';  // keep potx from translating 'cron'
   $watchdog('cron', t('@Subscriptions: all %count items have been purged.', $variables), NULL, WATCHDOG_WARNING);
 }
@@ @@
   if (empty($_POST) && preg_match('!//($|/|localhost/|([0-9]{1,3}\.){3}[0-9]{1,3}/)!', $url)) {
     $msg = t('Your installation returns %url as the base URL of the site. This is probably not what you want, and it can usually be fixed by setting the %variable variable in your %file file.', array('%url' => $url, '%variable' => '$base_url', '%file' => 'settings.php'));
     if ($interactive) {
-      drupal_set_message($msg, 'error');
+      \Drupal::messenger()->addError($msg);
     }
     else {
       $watchdog = 'watchdog';  // keep potx from translating 'cron'
    ----------- end diff -----------

Applied rules:
 * DBDeleteRector
 * DrupalSetMessageRector


9) modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.mail_edit.inc:232

    ---------- begin diff ----------
@@ @@
   $preview_mode = variable_get('subscriptions_preview_mode', 'text');
   $digest_data = array('subs' => array('type' => 'digest'));

-  $query = db_select('node', 'n')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $query = \Drupal::database()->select('node', 'n')
     ->fields('n', array('nid', 'comment'));
   if (isset($values['content_type'])) {
     $query
@@ @@
             'subs-field'       => 'FIELD',
             'subs-value'       => 'VALUE',
           ),
-          'user' => user_load(!empty($node->revision_uid) ? $node->revision_uid : $node->uid),
+          'user' => \Drupal::service('entity_type.manager')->getStorage('user')->load(!empty($node->revision_uid) ? $node->revision_uid : $node->uid),
         );
         $data_function($data, $node, $queue_item);
         drupal_alter('subscriptions_data', $data, $node, $queue_item);
    ----------- end diff -----------

Applied rules:
 * DBSelectRector
 * UserLoadRector


10) modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.cron.inc:47

    ---------- begin diff ----------
@@ @@
       break;  // No more ready queue items, terminate loop.
     }

-    if (!$subscriber = user_load($queue_item['uid'])) {
+    if (!$subscriber = \Drupal::service('entity_type.manager')->getStorage('user')->load($queue_item['uid'])) {
       $watchdog('subscriptions', t('Subscriber %uid not found.', array('%uid' => $queue_item['uid'])), NULL, WATCHDOG_WARNING);
       continue;
     }
@@ @@
     $saved_language = $language;
     drupal_save_session(FALSE);
     // Clear the term cache to avoid getting a different user's set of terms.
-    entity_load('taxonomy_term', array(), array(), TRUE);
+    \Drupal::service('entity_type.manager')->getStorage('taxonomy_term')->load(array());
     $lang_code = $language->language;
     $user      = $subscriber;

@@ @@
               'type'             => $fields[$lang_code][$module][$field]['subs_type'],
               'unsubscribe_path' => "s/del/$module/$ori_field/$ori_value/" . $queue_item['author_uid'] . '/' . $queue_item['uid'] . '/' . md5(drupal_get_private_key() . $module . $ori_field . $ori_value . $queue_item['author_uid'] . $queue_item['uid']),
             ),
-            'user' => user_load(!empty($object->revision_uid) ? $object->revision_uid : $object->uid),
+            'user' => \Drupal::service('entity_type.manager')->getStorage('user')->load(!empty($object->revision_uid) ? $object->revision_uid : $object->uid),
           );
           $data_function($data, $object, $queue_item);
           drupal_alter('subscriptions_data', $data, $object, $queue_item);
@@ @@
           }
         }
       }
-      db_delete('subscriptions_queue')
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      \Drupal::database()->delete('subscriptions_queue')
         ->condition('load_function', $queue_item['load_function'])
         ->condition('load_args', $queue_item['load_args'])
         ->condition('uid', $queue_item['uid'])
@@ @@

   if (module_exists('taxonomy')) {
     // Clear the term cache again for the next cron client.
-    entity_load('taxonomy_term', array(), array(), TRUE);
+    \Drupal::service('entity_type.manager')->getStorage('taxonomy_term')->load(array());
   }

   if ($single_count + $digest_count + $single_failed + $digest_failed > 0) {
     $current_seconds = timer_read('page')/1000;
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
     $variables = $watchdog_variables + array(
       '!single_count'      => $single_count,
       '!digest_count'      => $digest_count,
@@ @@
       '!digest_failed'     => $digest_failed,
       '!used_seconds'      => round($current_seconds - $lost_seconds),
       '!total_seconds'     => $total_seconds,
-      '!remaining_items'   => db_query("SELECT COUNT(*) FROM {subscriptions_queue} WHERE last_sent + send_interval < :send_interval AND suspended = 0", array(':send_interval' => REQUEST_TIME))->fetchField(),
-      '!suspended_items'   => db_query("SELECT COUNT(*) FROM {subscriptions_queue} WHERE last_sent + send_interval < :send_interval AND suspended <> 0", array(':send_interval' => REQUEST_TIME))->fetchField(),
+      '!remaining_items'   => \Drupal::database()->query("SELECT COUNT(*) FROM {subscriptions_queue} WHERE last_sent + send_interval < :send_interval AND suspended = 0", array(':send_interval' => \Drupal::time()->getRequestTime()))->fetchField(),
+      '!suspended_items'   => \Drupal::database()->query("SELECT COUNT(*) FROM {subscriptions_queue} WHERE last_sent + send_interval < :send_interval AND suspended <> 0", array(':send_interval' => \Drupal::time()->getRequestTime()))->fetchField(),
       '!remaining_seconds' => round($total_seconds - $current_seconds),
       '%varname'           => 'subscriptions_mail_trash_silently',
       '!cron'              => 'cron',
@@ @@
           'send_interval' => $send_interval,
         ))
         ->fields(array(
-          'last_sent'     => REQUEST_TIME,
+          'last_sent'     => \Drupal::time()->getRequestTime(),
         ))
         ->execute();
     }
    ----------- end diff -----------

Applied rules:
 * DBDeleteRector
 * DBQueryRector
 * EntityLoadRector
 * RequestTimeConstRector
 * UserLoadRector


11) modules/contrib/subscriptions/subscriptions_mail/subscriptions_mail.admin.inc:14

    ---------- begin diff ----------
@@ @@
  */
 function _subscriptions_mail_form_subscriptions_settings_form_alter(array &$form, array &$form_state) {
   if (variable_get('subscriptions_mail_trash_silently', 0)) {
-    drupal_set_message(t('All notification mails are discarded because the %varname variable is set &mdash; see the @filename file for more information.', array('%varname' => 'subscriptions_mail_trash_silently', '@filename' => 'README.txt')), 'error');
+    \Drupal::messenger()->addError(t('All notification mails are discarded because the %varname variable is set &mdash; see the @filename file for more information.', array('%varname' => 'subscriptions_mail_trash_silently', '@filename' => 'README.txt')));
   }
   _subscriptions_mail_check_baseurl(TRUE);

@@ @@
   );
   if (empty($_POST) && $cron_percentage <= 0) {
     $message = t('@Subscriptions cannot send any notifications because its <a href="@link">cron job time</a> is 0!', $variables + array('@link' => '#edit-subscriptions-cron-percent'));
-    drupal_set_message(filter_xss(t('Warning: !message', array('!message' => $message))), 'error');
+    \Drupal::messenger()->addError(filter_xss(t('Warning: !message', array('!message' => $message))));
     $form['mail_settings']['subscriptions_cron_percent']['#attributes'] = array('class' => array('error'));
   }
-  $result = db_query("SELECT COUNT(sqid) AS count, suspended FROM {subscriptions_queue} GROUP BY suspended", array(), array('fetch' => PDO::FETCH_ASSOC));
+  $result = \Drupal::database()->query("SELECT COUNT(sqid) AS count, suspended FROM {subscriptions_queue} GROUP BY suspended", array(), array('fetch' => PDO::FETCH_ASSOC));
   $active_count = $suspended_count = 0;
   foreach ($result as $record) {
     if (!$record['suspended']) {
    ----------- end diff -----------

Applied rules:
 * DBQueryRector
 * DrupalSetMessageRector


12) modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.notify.inc:18

    ---------- begin diff ----------
@@ @@
 function _subscriptions_content_load($nid, $comment_load_sqid = NULL) {
   global $user;

-  $node = node_load($nid, NULL, TRUE);
+  $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($nid);
   // Note: we must not cache across users (access checking), and we take care
   // not to process the same node more than once (except for multiple batches
   // of comments), so we don't gain from caching nodes; on the contrary: we
@@ @@
   else {
     if (module_exists('comment')) {
       // Load comments like comment_get_thread().
-      $query = db_select('comment', 'c');
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      $query = \Drupal::database()->select('comment', 'c');
       $query->addField('c', 'cid');
       $query
         ->condition('c.nid', $nid)
@@ @@
         $sqids[] = $comment_info->_subscriptions_sqid;
       }
       if ($sqids) {
-        db_delete('subscriptions_queue')
+        // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+        // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+        \Drupal::database()->delete('subscriptions_queue')
           ->condition('sqid', $sqids, 'IN')
           ->execute();
       }
    ----------- end diff -----------

Applied rules:
 * DBDeleteRector
 * DBSelectRector
 * NodeLoadRector


13) modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.module:152

    ---------- begin diff ----------
@@ @@
       ];
       // Content type and author.
       $options['type'][] = [
-        'name' => t('To %type content by %name', ['%type' => $type_name, '%name' => format_username(user_load($node->uid))]) . $unlisted_tag,
+        'name' => t('To %type content by %name', ['%type' => $type_name, '%name' => format_username(\Drupal::service('entity_type.manager')->getStorage('user')->load($node->uid))]) . $unlisted_tag,
         'params' => ['module' => 'node', 'field' => 'type', 'value' => $node->type, 'author_uid' => $node->uid],
         'link' => 'type/' . $node->type . '/' . $node->uid,
       ];
@@ @@
  *   Returns TRUE if the node is unpublished by workbench_moderation standards.
  */
 function subscriptions_content_workbench_moderation_check_is_unpublished($node) {
-  $states = db_select('workbench_moderation_node_history', 'wbmnh')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $states = \Drupal::database()->select('workbench_moderation_node_history', 'wbmnh')
     ->condition('nid', $node->nid)
     ->fields('wbmnh', ['state'])
     ->execute()->fetchCol();
@@ @@
  * @param object $comment
  */
 function subscriptions_content_comment_insert($comment) {
-  $node = node_load($comment->nid);
+  $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($comment->nid);
   if (!isset($comment->subscriptions_notify) || $comment->subscriptions_notify) {
     $event = [
       'module' => 'node',
@@ @@
  * @param object $comment
  */
 function subscriptions_content_comment_update($comment) {
-  $node = node_load($comment->nid);
+  $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($comment->nid);
   if (!isset($comment->subscriptions_notify) || $comment->subscriptions_notify) {
     $event = [
       'module' => 'node',
@@ @@
       '#title' => t('Send subscriptions notifications'),
     ];

-    $node = node_load($form['nid']['#value']);
+    $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($form['nid']['#value']);
     $default_workflow = subscriptions_content_get_default_workflow($node->type);
     if ($is_update && $is_unpublished) {
       $item['#description'] = t('Subscriptions notifications are not sent for unpublished comments (except to users who have the %administer_comments permission), but when you change !Status to %Published, Subscriptions will send out "new" notifications, unless you suppress this here. ', [
@@ @@
   }
   elseif ($form_state['values']['operation'] == 'publish') {
     foreach ($form_state['values']['nodes'] as $nid) {
-      if ($nid != 0 && ($node = node_load($nid)) && !$node->status) {
+      if ($nid != 0 && ($node = \Drupal::service('entity_type.manager')->getStorage('node')->load($nid)) && !$node->status) {
         subscriptions_content_node_prepare($node);
         subscriptions_content_node_update($node);
       }
@@ @@
     $cid = $subs['load_args'];
     $sqid = $subs['sqid'];
     /** @var int $nid */
-    if ($nid = db_query('SELECT nid FROM {comment} WHERE cid = :cid', [':cid' => $cid])->fetchField()) {
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    if ($nid = \Drupal::database()->query('SELECT nid FROM {comment} WHERE cid = :cid', [':cid' => $cid])->fetchField()) {
       if ($subs['module'] != 'node' || $subs['field'] != 'nid') {
         // Only if we're processing a node/nid queue item should we cut off
         // the comments at an update item, otherwise not.
@@ @@
  */
 function subscriptions_content_node_type_delete($info) {
   $type = $info->type;
-  db_delete('subscriptions_queue')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  \Drupal::database()->delete('subscriptions_queue')
     ->condition('module', 'node')
     ->condition('field', 'type')
     ->condition('value', $type)
@@ @@
  * @ingroup hooks
  */
 function subscriptions_content_cron() {
-  $result = db_query("SELECT name, weight FROM {system} WHERE name IN ('taxonomy', 'subscriptions_content') AND type = 'module'");
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $result = \Drupal::database()->query("SELECT name, weight FROM {system} WHERE name IN ('taxonomy', 'subscriptions_content') AND type = 'module'");
   $weights = [];
   foreach ($result as $module) {
     $weights[$module->name] = $module->weight;
   }
   if ($weights['subscriptions_content'] <= $weights['taxonomy']) {
-    db_update('system')
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    \Drupal::database()->update('system')
       ->fields([
         'weight' => $weights['taxonomy'] + 1,
       ])
@@ @@
  * @ingroup hooks
  */
 function subscriptions_content_disable() {
-  db_delete('subscriptions_queue')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  \Drupal::database()->delete('subscriptions_queue')
     ->condition('load_function', 'subscriptions_content_%', 'LIKE')
     ->execute();
 }
    ----------- end diff -----------

Applied rules:
 * DBDeleteRector
 * DBQueryRector
 * DBSelectRector
 * DBUpdateRector
 * NodeLoadRector
 * UserLoadRector


14) modules/contrib/subscriptions/subscriptions_content/subscriptions_content_old.admin.inc:120

    ---------- begin diff ----------
@@ @@
 function _subscriptions_content_node_form(array $form, $uid) {
   $tr = 't';
   $subscriptions = [];
-  $query = db_select('node', 'n', ['fetch' => PDO::FETCH_ASSOC])
+  $query = \Drupal::database()->select('node', 'n', ['fetch' => PDO::FETCH_ASSOC])
     ->extend('PagerDefault')
     ->limit(50);
   $query
@@ @@
   if (module_exists('comment')) {
     // Check whether we've commented:
     if (db_driver() == 'pgsql') {
-      $select = db_select('subscriptions', 's');
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      $select = \Drupal::database()->select('subscriptions', 's');
       $select->addExpression('CAST(s.value AS decimal)', 'value');
       $select = $select
         ->condition('s.module', 'node')
@@ @@
         ->condition('s.recipient_uid', $uid);
     }
     else {
-      $select = db_select('subscriptions', 's')
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      $select = \Drupal::database()->select('subscriptions', 's')
         ->fields('s', ['value'])
         ->condition('s.module', 'node')
         ->condition('s.field', 'nid')
         ->condition('s.recipient_uid', $uid);
     }
-    $result = db_select('comment', 'c')
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $result = \Drupal::database()->select('comment', 'c')
       ->fields('c', ['nid'])
       ->condition('c.nid', $select, 'IN')
       ->condition('c.uid', $uid)
@@ @@
     $uid = -DRUPAL_AUTHENTICATED_RID;
   }
   else {
-    $query = db_select('subscriptions', 's', ['fetch' => PDO::FETCH_ASSOC]);
+    $query = \Drupal::database()->select('subscriptions', 's', ['fetch' => PDO::FETCH_ASSOC]);
     $nt_alias = $query->join('node_type', 'nt', 's.value = nt.type');
     $result = $query
       ->fields('s', ['value', 'send_interval', 'author_uid', 'send_comments', 'send_updates'])
    ----------- end diff -----------

Applied rules:
 * DBSelectRector


15) modules/contrib/subscriptions/subscriptions_blog_ui/subscriptions_blog_ui.module:70

    ---------- begin diff ----------
@@ @@
 function subscriptions_blog_ui_page_blog(array $form, $uid) {
   $blogs = array();
   // get the blogs
-  $query = db_select('node', 'n');
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $query = \Drupal::database()->select('node', 'n');
   $user_alias = $query->join('users', 'u', 'n.uid = u.uid');
   $uids = $query
     ->fields($user_alias, array('uid'))
@@ @@
   $all_uids = $uids;
   if ($uid > 0) {
     // possibly additional blog subscription entries (no blog nodes)
-    $entries = db_select('subscriptions', 's')
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $entries = \Drupal::database()->select('subscriptions', 's')
       ->fields('s', array('author_uid'))
       ->condition('s.module', 'node')
       ->condition('s.field', 'type')
@@ @@
     $uid = -DRUPAL_AUTHENTICATED_RID;
   }
   else {
-    $result = db_query("
+    $result = \Drupal::database()->query("
       SELECT s.value, s.send_interval, s.author_uid, s.send_comments, s.send_updates, u.name
       FROM {subscriptions} s
       INNER JOIN {users} u ON s.author_uid = u.uid
@@ @@
  * @ingroup hooks
  */
 function subscriptions_blog_ui_subscriptions_counts_alter(array &$counts, $uid) {
-  $counts['node']['blog'] = db_query("SELECT count(*) FROM {subscriptions} WHERE module = 'node' AND field = 'type' AND value = 'blog' AND author_uid <> -1 AND recipient_uid = :recipient_uid", array(':recipient_uid' => $uid))->fetchField();
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $counts['node']['blog'] = \Drupal::database()->query("SELECT count(*) FROM {subscriptions} WHERE module = 'node' AND field = 'type' AND value = 'blog' AND author_uid <> -1 AND recipient_uid = :recipient_uid", array(':recipient_uid' => $uid))->fetchField();
 }
    ----------- end diff -----------

Applied rules:
 * DBQueryRector
 * DBSelectRector


16) modules/contrib/subscriptions/subscriptions.module.old.php:321

    ---------- begin diff ----------
@@ @@
  */
 function subscriptions_user_insert(array $edit, &$account, $category) {
   $new_uid = &drupal_static('subscriptions_user_insert', 0);
-  db_insert('subscriptions_user')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  \Drupal::database()->insert('subscriptions_user')
     ->fields(array(
       'uid' => $account->uid,
     ))
@@ @@
   foreach (array_keys($account->roles) as $rid) {
     $rids[] = -$rid;
   }
-  $query = db_select('subscriptions', 's')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $query = \Drupal::database()->select('subscriptions', 's')
     ->fields('s', array('module', 'field', 'value'));
   $query->addExpression($new_uid, 'recipient_uid');
   $query
     ->fields('s', array('send_interval', 'author_uid', 'send_updates', 'send_comments'))
     ->condition('s.recipient_uid', $rids, 'IN');
-  db_insert('subscriptions', array('return' => Database::RETURN_NULL))
+  \Drupal::database()->insert('subscriptions', array('return' => Database::RETURN_NULL))
     ->from($query)
     ->execute();
 }
@@ @@
  * @ingroup hooks
  */
 function subscriptions_user_delete($account) {
-  db_delete('subscriptions_queue')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  \Drupal::database()->delete('subscriptions_queue')
     ->condition('uid', $account->uid)
     ->execute();
-  db_delete('subscriptions_user')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  \Drupal::database()->delete('subscriptions_user')
     ->condition('uid', $account->uid)
     ->execute();
   subscriptions_delete($account->uid);
-  db_delete('subscriptions_last_sent')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  \Drupal::database()->delete('subscriptions_last_sent')
     ->condition('uid', $account->uid)
     ->execute();
 }
@@ @@
  *   The number of deleted rows or a database connection-dependent value.
  */
 function subscriptions_delete($recipient_uid, $module = NULL, $field = NULL, $value = NULL, $author_uid = NULL) {
-  $query = db_delete('subscriptions');
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $query = \Drupal::database()->delete('subscriptions');
   foreach (array('module', 'field', 'value', 'author_uid', 'recipient_uid') as $column) {
     if (!empty($$column)) {
       $query->condition($column, $$column);
@@ @@
     }
     foreach ($subs_module_query as $module => $module_query) {
       foreach ($module_query as $field => $query) {
-        $select = db_select('subscriptions', 's');
+        // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+        // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+        $select = \Drupal::database()->select('subscriptions', 's');
         $select->innerJoin('subscriptions_user', 'su', 's.recipient_uid = su.uid');
         $select->innerJoin('users', 'u', 'su.uid = u.uid');
         $select->leftJoin('subscriptions_last_sent', 'sls', 'su.uid = sls.uid AND s.send_interval = sls.send_interval');
@@ @@
           $select
             ->groupBy($query['groupby']);
         }
-        $insert = db_insert('subscriptions_queue', array('return' => Database::RETURN_NULL))
+        $insert = \Drupal::database()->insert('subscriptions_queue', array('return' => Database::RETURN_NULL))
           ->from($select);
         /*  for debugging:
         $sqid = $insert->execute();
@@ @@
   static $subscriptions;

   if (!isset($subscriptions[$uid][$module][$field][$value][$author_uid])) {
-    $subscriptions[$uid][$module][$field][$value][$author_uid] = db_query("SELECT sid FROM {subscriptions} WHERE module = :module AND field = :field AND value = :value AND author_uid = :author_uid AND recipient_uid = :recipient_uid", array(
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $subscriptions[$uid][$module][$field][$value][$author_uid] = \Drupal::database()->query("SELECT sid FROM {subscriptions} WHERE module = :module AND field = :field AND value = :value AND author_uid = :author_uid AND recipient_uid = :recipient_uid", array(
       ':module' => $module,
       ':field' => $field,
       ':value' => $value,
@@ @@
 function subscriptions_delete_form_submit(array $form, array &$form_state) {
   $data = $form_state['values']['data'];
   subscriptions_delete($data['4'], $data['0'], $data['1'], $data['2'], $data['3']);
-  drupal_set_message(t('Your subscription was deactivated.'));
+  \Drupal::messenger()->addStatus(t('Your subscription was deactivated.'));
   $form_state['redirect'] = '<front>';
 }

@@ @@
 function subscriptions_get(array $params) {
   $subscriptions = array();
   // Build query
-  $query = db_select('subscriptions', 's');
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $query = \Drupal::database()->select('subscriptions', 's');
   $query->fields('s');
   foreach ($params as $field => $value) {
     $query->condition($field, $value);
@@ @@
         }
       }
     }
-    drupal_set_message(t('The following modules return invalid data from %hook: !modules   Either they are buggy !Subscriptions add-ons, or they are unrelated to !Subscriptions and should not define %hook!', array('%hook' => 'hook_subscriptions()', '!modules' => '<ul><li>' . implode($modules, '</li><li>') . '</li></ul>', '!Subscriptions' => 'Subscriptions')), 'error', FALSE);
+    \Drupal::messenger()->addError(t('The following modules return invalid data from %hook: !modules   Either they are buggy !Subscriptions add-ons, or they are unrelated to !Subscriptions and should not define %hook!', array('%hook' => 'hook_subscriptions()', '!modules' => '<ul><li>' . implode($modules, '</li><li>') . '</li></ul>', '!Subscriptions' => 'Subscriptions')), FALSE);
   }
   return FALSE;
 }
@@ @@

   static $defaults = array();
   if (!isset($defaults[$uid][$name])) {
-    $result = db_select('subscriptions_user', 'su', array('fetch' => PDO::FETCH_ASSOC))
+    $result = \Drupal::database()->select('subscriptions_user', 'su', array('fetch' => PDO::FETCH_ASSOC))
       ->fields('su', array('uid', 'digest', 'secure_links', 'send_interval', 'send_updates', 'send_comments', 'send_interval_visible', 'send_updates_visible', 'send_comments_visible', 'autosub_on_post', 'autosub_on_update', 'autosub_on_comment', 'send_self'))
       ->condition('su.uid', array(-DRUPAL_AUTHENTICATED_RID, $uid), 'IN')
       ->orderBy('su.uid')
@@ @@
       // Let's add the missing records, as if the user were being created just
       // now, with the expected hook_user() invocations:
       if ($uid > 0) {
-        $account = user_load($uid);
+        $account = \Drupal::service('entity_type.manager')->getStorage('user')->load($uid);
         subscriptions_user_insert(array(), $account, NULL);
       }
       else {
-        db_insert('subscriptions_user')
+        // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+        // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+        \Drupal::database()->insert('subscriptions_user')
           ->fields(array(
             'uid' => $uid,
           ))
@@ @@
  */
 function subscriptions_suspended($uid, $alert = FALSE) {
   /** @var $result bool */
-  $result = db_query("SELECT suspended FROM {subscriptions_user} WHERE uid = :uid", array(':uid' => $uid))->fetchField();
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $result = \Drupal::database()->query("SELECT suspended FROM {subscriptions_user} WHERE uid = :uid", array(':uid' => $uid))->fetchField();
   if ($result && $alert && empty($_POST)) {
     _subscriptions_module_load_include('subscriptions', 'admin.inc');
     _subscriptions_suspended_alert($uid, $result);
    ----------- end diff -----------

Applied rules:
 * DBDeleteRector
 * DBInsertRector
 * DBQueryRector
 * DBSelectRector
 * DrupalSetMessageRector
 * UserLoadRector


17) modules/contrib/subscriptions/subscriptions.admin.old.php:74

    ---------- begin diff ----------
@@ @@
         !module_exists('subscriptions_content') ||
         !module_exists('subscriptions_taxonomy'))) {
     if (empty($_POST)) {
-      drupal_set_message(t('Note: For standard Subscriptions functionality you need to enable the following modules:')
+      \Drupal::messenger()->addWarning(t('Note: For standard Subscriptions functionality you need to enable the following modules:')
                          . '<ul><li>' . $tr('Subscriptions UI') . '</li><li>' . $tr('Subscriptions Mail ')
-                         . '</li><li>' . $tr('Content Subscriptions') . '</li><li>' . $tr('Taxonomy Subscriptions') . '</li></ul>', 'warning', FALSE);
+                         . '</li><li>' . $tr('Content Subscriptions') . '</li><li>' . $tr('Taxonomy Subscriptions') . '</li></ul>', FALSE);
     }
     $form['subscriptions_show_install_info'] = array(
       '#type'          => 'checkbox',
@@ @@
         }
         $row = array();
         foreach ($column_keys as $colkey) {
-          $row[] = drupal_render($element[$colkey][$key][$key1]);
+          $row[] = \Drupal::service('renderer')->render($element[$colkey][$key][$key1]);
         }
         $rows[] = $row;
       }
@@ @@
       }
     }
     if (!empty($changed)) {
-      drupal_set_message(t('Your subscriptions were updated.'));
+      \Drupal::messenger()->addStatus(t('Your subscriptions were updated.'));
     }
   }
   if (!empty($rid0)) {
@@ @@
   // Build summary
   $uid = (!empty($account) ? $account->uid : -DRUPAL_AUTHENTICATED_RID);
   $counts = array();
-  $result = db_query("SELECT module, field, COUNT(1) AS number FROM {subscriptions} WHERE recipient_uid = :recipient_uid GROUP BY module, field", array(':recipient_uid' => $uid));
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $result = \Drupal::database()->query("SELECT module, field, COUNT(1) AS number FROM {subscriptions} WHERE recipient_uid = :recipient_uid GROUP BY module, field", array(':recipient_uid' => $uid));
   foreach ($result as $subs) {
     if (!empty($subs->module)) {
       $counts[$subs->module][$subs->field] = $subs->number;
@@ @@
   );
   $count = 0;
   if ($suspended) {
-    $count = db_query("SELECT COUNT(*) FROM {subscriptions_queue} WHERE uid = :uid AND suspended <> 0", array(':uid' => $uid))->fetchField();
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $count = \Drupal::database()->query("SELECT COUNT(*) FROM {subscriptions_queue} WHERE uid = :uid AND suspended <> 0", array(':uid' => $uid))->fetchField();
   }
   $tr = 't';
   $options[] = $tr('Yes');
@@ @@
     $uid = $form_values['uid'];
     $suspended = $form_values['state'];
     if ($suspended == -1) {
-      db_delete('subscriptions_queue')
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      \Drupal::database()->delete('subscriptions_queue')
         ->condition('uid', $uid)
         ->condition('suspended', 0, '<>')
         ->execute();
@@ @@
       $suspended = 0;
     }
     _subscriptions_user_suspend($uid, $suspended);
-    drupal_set_message(t('The changes have been saved.'));
+    \Drupal::messenger()->addStatus(t('The changes have been saved.'));
   }
 }

@@ @@
  * @param int $suspend
  */
 function _subscriptions_user_suspend($uid, $suspended) {
-  db_update('subscriptions_user')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  \Drupal::database()->update('subscriptions_user')
     ->fields(array(
         'suspended' => $suspended,
       ))
     ->condition('uid', $uid)
     ->execute();
-  db_update('subscriptions_queue')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  \Drupal::database()->update('subscriptions_queue')
     ->fields(array(
         'suspended' => $suspended,
       ))
@@ @@
     case 2:
       $msg = t('Your subscriptions have been suspended because your e-mail address did not work anymore!');
       if (!(subscriptions_arg(0) == 'user' && subscriptions_arg(1, 'uid') == $uid && subscriptions_arg(2) == 'edit')) {
-        drupal_set_message($msg . '<br />' . t('Please go <a href="@path1">here</a> to update your e-mail address and then <a href="@path2">here</a> to resume delivery of your notifications.', array('@path1' => url("user/$uid/edit"), '@path2' => $path2)), 'error', FALSE);
+        \Drupal::messenger()->addError($msg . '<br />' . t('Please go <a href="@path1">here</a> to update your e-mail address and then <a href="@path2">here</a> to resume delivery of your notifications.', array('@path1' => url("user/$uid/edit"), '@path2' => $path2)), FALSE);
       }
       else {
-        drupal_set_message($msg . '<br />' . t('Please correct/verify your e-mail address below and then go <a href="@path2">here</a> to resume delivery of your notifications.', array('@path2' => $path2)), 'error', FALSE);
+        \Drupal::messenger()->addError($msg . '<br />' . t('Please correct/verify your e-mail address below and then go <a href="@path2">here</a> to resume delivery of your notifications.', array('@path2' => $path2)), FALSE);
       }
       break;
     case 1:
-      drupal_set_message(t('Your subscriptions are suspended. Please go <a href="@path2">here</a> to resume delivery of your notifications.', array('@path2' => $path2)), 'warning', FALSE);
+      \Drupal::messenger()->addWarning(t('Your subscriptions are suspended. Please go <a href="@path2">here</a> to resume delivery of your notifications.', array('@path2' => $path2)), FALSE);
       break;
   }
 }
@@ @@
   $uid = subscriptions_arg(1, 'uid');
   if (isset($form_state['values']['reset']) && $form_state['values']['op'] == $form_state['values']['reset']) {
     if ($uid > 0) {
-      db_update('subscriptions_user')
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      \Drupal::database()->update('subscriptions_user')
         ->fields(array(
           'digest' => -1,
           'secure_links' => -1,
@@ @@
         ))
         ->condition('uid', $uid)
         ->execute();
-      drupal_set_message(t('The site defaults were restored.'));
+      \Drupal::messenger()->addStatus(t('The site defaults were restored.'));
     }
   }
   elseif ($form_state['values']['op'] == $form_state['values']['save_settings']) {
@@ @@
     $send_interval_visible = 1 - $form_state['values']['send_interval_visible'];
     $send_updates_visible = 1 - $form_state['values']['send_updates_visible'];
     $send_comments_visible = 1 - $form_state['values']['send_comments_visible'];
-    db_update('subscriptions_user')
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    \Drupal::database()->update('subscriptions_user')
       ->fields(array(
         'digest' => $form_state['values']['digest'],
         'secure_links' => (isset($form_state['values']['secure_links']) ? $form_state['values']['secure_links'] : 0),
@@ @@
       ))
       ->condition('uid', $uid)
       ->execute();
-    drupal_set_message(t('The changes have been saved.'));
+    \Drupal::messenger()->addStatus(t('The changes have been saved.'));
   }
 }

@@ @@
     }
   }
   variable_set('subscriptions_send_intervals', $intervals);
-  drupal_set_message(t('The changes have been saved.'));
+  \Drupal::messenger()->addStatus(t('The changes have been saved.'));
 }

 /**
@@ @@
     list($module, $field, $value, $author_uid) = $a;
     $uid = $form_state['values']['uid'];
     subscriptions_write_subscription($module, $field, $value, $author_uid, $uid, $form_state['values']['send_interval'], $form_state['values']['updates'], $form_state['values']['comments']);
-    drupal_set_message(t('Your subscription was activated.'));
+    \Drupal::messenger()->addStatus(t('Your subscription was activated.'));
     $form_state['redirect'] = '<front>';
   }
   else {
-    drupal_set_message(t('Your subscription could not be activated.'));
+    \Drupal::messenger()->addStatus(t('Your subscription could not be activated.'));
   }
 }

@@ @@
     list($module, $field, $value, $author_uid) = $a;
     return subscriptions_delete_form($form, $form_state, $module, $field, $value, $author_uid, $user->uid);
   }
-  drupal_set_message(t('Your subscription could not be deactivated.'));
+  \Drupal::messenger()->addStatus(t('Your subscription could not be deactivated.'));
   return NULL;
 }

@@ @@
     $defaults['send_updates'][$key][$author_uid] = 1;
   }
   if (isset($subscription['author_uid']) && $subscription['author_uid'] > 0) {
-    $author_value = format_username(user_load($subscription['author_uid']));
+    $author_value = format_username(\Drupal::service('entity_type.manager')->getStorage('user')->load($subscription['author_uid']));
   }
   elseif ($author_uid == 0) {
     $author_value = format_username(NULL);
    ----------- end diff -----------

Applied rules:
 * DBDeleteRector
 * DBQueryRector
 * DBUpdateRector
 * DrupalRenderRector
 * DrupalSetMessageRector
 * UserLoadRector


 [OK] 17 files have been changed by Rector                                      

