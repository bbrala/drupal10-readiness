[parsing] modules/contrib/rename_admin_paths/rename_admin_paths.module
[refactoring] modules/contrib/rename_admin_paths/rename_admin_paths.module
[post rectors] modules/contrib/rename_admin_paths/rename_admin_paths.module
[print] modules/contrib/rename_admin_paths/rename_admin_paths.module
[parsing] modules/contrib/rename_admin_paths/src/Config.php
[refactoring] modules/contrib/rename_admin_paths/src/Config.php
[post rectors] modules/contrib/rename_admin_paths/src/Config.php
[print] modules/contrib/rename_admin_paths/src/Config.php
[parsing] modules/contrib/rename_admin_paths/src/EventSubscriber/RenameAdminPathsEventSubscriber.php
[refactoring] modules/contrib/rename_admin_paths/src/EventSubscriber/RenameAdminPathsEventSubscriber.php
[post rectors] modules/contrib/rename_admin_paths/src/EventSubscriber/RenameAdminPathsEventSubscriber.php
[print] modules/contrib/rename_admin_paths/src/EventSubscriber/RenameAdminPathsEventSubscriber.php
[parsing] modules/contrib/rename_admin_paths/src/Form/RenameAdminPathsSettingsForm.php
[refactoring] modules/contrib/rename_admin_paths/src/Form/RenameAdminPathsSettingsForm.php
[post rectors] modules/contrib/rename_admin_paths/src/Form/RenameAdminPathsSettingsForm.php
[print] modules/contrib/rename_admin_paths/src/Form/RenameAdminPathsSettingsForm.php
[refactoring] modules/contrib/rename_admin_paths/src/Form/RenameAdminPathsSettingsForm.php
[post rectors] modules/contrib/rename_admin_paths/src/Form/RenameAdminPathsSettingsForm.php
[print] modules/contrib/rename_admin_paths/src/Form/RenameAdminPathsSettingsForm.php
[parsing] modules/contrib/rename_admin_paths/src/Form/RenameAdminPathsValidator.php
[refactoring] modules/contrib/rename_admin_paths/src/Form/RenameAdminPathsValidator.php
[post rectors] modules/contrib/rename_admin_paths/src/Form/RenameAdminPathsValidator.php
[print] modules/contrib/rename_admin_paths/src/Form/RenameAdminPathsValidator.php
[parsing] modules/contrib/rename_admin_paths/tests/src/Functional/AccessTest.php
[refactoring] modules/contrib/rename_admin_paths/tests/src/Functional/AccessTest.php
[post rectors] modules/contrib/rename_admin_paths/tests/src/Functional/AccessTest.php
[print] modules/contrib/rename_admin_paths/tests/src/Functional/AccessTest.php
[refactoring] modules/contrib/rename_admin_paths/tests/src/Functional/AccessTest.php
[post rectors] modules/contrib/rename_admin_paths/tests/src/Functional/AccessTest.php
[print] modules/contrib/rename_admin_paths/tests/src/Functional/AccessTest.php
[parsing] modules/contrib/rename_admin_paths/tests/src/Functional/AdminFormTest.php
[refactoring] modules/contrib/rename_admin_paths/tests/src/Functional/AdminFormTest.php
[post rectors] modules/contrib/rename_admin_paths/tests/src/Functional/AdminFormTest.php
[print] modules/contrib/rename_admin_paths/tests/src/Functional/AdminFormTest.php
[refactoring] modules/contrib/rename_admin_paths/tests/src/Functional/AdminFormTest.php
[post rectors] modules/contrib/rename_admin_paths/tests/src/Functional/AdminFormTest.php
[print] modules/contrib/rename_admin_paths/tests/src/Functional/AdminFormTest.php
[parsing] modules/contrib/rename_admin_paths/tests/src/Unit/EventSubscriber/RenameAdminPathEventSubscriberTest.php
[refactoring] modules/contrib/rename_admin_paths/tests/src/Unit/EventSubscriber/RenameAdminPathEventSubscriberTest.php
[post rectors] modules/contrib/rename_admin_paths/tests/src/Unit/EventSubscriber/RenameAdminPathEventSubscriberTest.php
[print] modules/contrib/rename_admin_paths/tests/src/Unit/EventSubscriber/RenameAdminPathEventSubscriberTest.php
[refactoring] modules/contrib/rename_admin_paths/tests/src/Unit/EventSubscriber/RenameAdminPathEventSubscriberTest.php
[post rectors] modules/contrib/rename_admin_paths/tests/src/Unit/EventSubscriber/RenameAdminPathEventSubscriberTest.php
[print] modules/contrib/rename_admin_paths/tests/src/Unit/EventSubscriber/RenameAdminPathEventSubscriberTest.php
[parsing] modules/contrib/rename_admin_paths/tests/src/Unit/Form/RenameAdminPathsSettingsFormTest.php
[refactoring] modules/contrib/rename_admin_paths/tests/src/Unit/Form/RenameAdminPathsSettingsFormTest.php
[post rectors] modules/contrib/rename_admin_paths/tests/src/Unit/Form/RenameAdminPathsSettingsFormTest.php
[print] modules/contrib/rename_admin_paths/tests/src/Unit/Form/RenameAdminPathsSettingsFormTest.php
[refactoring] modules/contrib/rename_admin_paths/tests/src/Unit/Form/RenameAdminPathsSettingsFormTest.php
[post rectors] modules/contrib/rename_admin_paths/tests/src/Unit/Form/RenameAdminPathsSettingsFormTest.php
[print] modules/contrib/rename_admin_paths/tests/src/Unit/Form/RenameAdminPathsSettingsFormTest.php
[parsing] modules/contrib/rename_admin_paths/tests/src/Unit/Form/RenameAdminPathsValidatorTest.php
[refactoring] modules/contrib/rename_admin_paths/tests/src/Unit/Form/RenameAdminPathsValidatorTest.php
[post rectors] modules/contrib/rename_admin_paths/tests/src/Unit/Form/RenameAdminPathsValidatorTest.php
[print] modules/contrib/rename_admin_paths/tests/src/Unit/Form/RenameAdminPathsValidatorTest.php

5 files with changes
====================

1) modules/contrib/rename_admin_paths/tests/src/Unit/Form/RenameAdminPathsSettingsFormTest.php:14

    ---------- begin diff ----------
@@ @@
  */
 class RenameAdminPathsSettingsFormTest extends UnitTestCase {

+  use \Prophecy\PhpUnit\ProphecyTrait;
+  /**
+   * @doesNotPerformAssertions
+   */
   public function testValidatePathWithoutValue() {
     $element = [];
     $this->getForm()->validate($element, $this->getInvalidFormState());
@@ @@
    * @dataProvider validValues
    *
    * @param string $value
+   * @doesNotPerformAssertions
    */
   public function testWithValidValue(string $value) {
     $element = ['#value' => $value];
@@ @@
    * @dataProvider invalidValues
    *
    * @param string $value
+   * @doesNotPerformAssertions
    */
   public function testWithInvalidValue(string $value) {
     $element = ['#value' => $value];
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/rename_admin_paths/tests/src/Unit/EventSubscriber/RenameAdminPathEventSubscriberTest.php:16

    ---------- begin diff ----------
@@ @@
   public function testGetSubscribedEvents() {
     $events = RenameAdminPathsEventSubscriber::getSubscribedEvents();

-    $this->assertInternalType('array', $events);
+    $this->assertIsArray($events);
     $this->assertCount(1, $events);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * SpecificAssertInternalTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/rename_admin_paths/tests/src/Functional/AdminFormTest.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Setup admin user.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $admin = $this->drupalCreateUser(['administer modules', 'administer site configuration'], 'administrator', TRUE);
@@ @@
    */
   public function testEnablePathReplacements() {
     $output = $this->drupalGet('user/1');
-    $this->assertContains('Member for', $output);
+    $this->assertStringContainsString('Member for', $output);

     $this->drupalGet('admin/config/system/rename-admin-paths');

@@ @@
     $this->assertSession()->fieldValueEquals('user_path_value', 'member');

     $output = $this->drupalGet('user/1');
-    $this->assertContains('The requested page could not be found.', $output);
+    $this->assertStringContainsString('The requested page could not be found.', $output);

     $output = $this->drupalGet('member/1');
-    $this->assertContains('Member for', $output);
+    $this->assertStringContainsString('Member for', $output);
   }

   private function assertRenameAdminPathFormIsVisible() {
     $output = $this->getSession()->getPage()->getContent();
-    $this->assertContains('Rename admin path', $output);
-    $this->assertContains('Replace "admin" in admin path by', $output);
-    $this->assertContains('Rename user path', $output);
-    $this->assertContains('Replace "user" in user path by', $output);
+    $this->assertStringContainsString('Rename admin path', $output);
+    $this->assertStringContainsString('Replace "admin" in admin path by', $output);
+    $this->assertStringContainsString('Rename user path', $output);
+    $this->assertStringContainsString('Replace "user" in user path by', $output);
   }
 }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * SpecificAssertContainsRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/rename_admin_paths/tests/src/Functional/AccessTest.php:15

    ---------- begin diff ----------
@@ @@
    */
   public function testAdminNotAccessibleAfterRenaming() {
     $output = $this->drupalGet('admin');
-    $this->assertContains('You are not authorized to access this page.', $output);
+    $this->assertStringContainsString('You are not authorized to access this page.', $output);

     $output = $this->drupalGet('admin/modules');
-    $this->assertContains('You are not authorized to access this page.', $output);
+    $this->assertStringContainsString('You are not authorized to access this page.', $output);

     $admin = $this->drupalCreateUser(['administer modules', 'administer site configuration'], 'administrator', TRUE);
     $this->drupalLogin($admin);
@@ @@
     $this->drupalLogout();

     $output = $this->drupalGet('backend');
-    $this->assertContains('You are not authorized to access this page.', $output);
+    $this->assertStringContainsString('You are not authorized to access this page.', $output);

     $output = $this->drupalGet('backend/modules');
-    $this->assertContains('You are not authorized to access this page.', $output);
+    $this->assertStringContainsString('You are not authorized to access this page.', $output);
   }
 }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * SpecificAssertContainsRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/rename_admin_paths/src/Form/RenameAdminPathsSettingsForm.php:62

    ---------- begin diff ----------
@@ @@
    */
   public static function create(ContainerInterface $container): self {
     return new static(
-      $container->get(Config::class),
+      $this->config,
       $container->get('router.builder'),
       $container->get('string_translation')
     );
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 5 files have been changed by Rector                                       

