diff --git a/composer.json b/composer.json
index 836327f..50e18ee 100644
--- a/composer.json
+++ b/composer.json
@@ -12,6 +12,6 @@
     "license": "GPL-2.0+",
     "minimum-stability": "dev",
     "require": {
-        "drupal/core": "^8 || ^9"
+        "drupal/core": "^9.3 || ^10"
     }
 }
diff --git a/taxonomy_import.info.yml b/taxonomy_import.info.yml
index 8c5db17..f05bfd3 100644
--- a/taxonomy_import.info.yml
+++ b/taxonomy_import.info.yml
@@ -2,6 +2,5 @@ name: Taxonomy Import
 description: A module to import taxonomy using CSV or XML file to a user defined vocabulary
 package: Taxonomy
 type: module
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 configure: taxonomy_import.config
diff --git a/taxonomy_import.module b/taxonomy_import.module
index 21453b6..22e688a 100644
--- a/taxonomy_import.module
+++ b/taxonomy_import.module
@@ -26,8 +26,8 @@ function taxonomy_import_help($route_name, RouteMatchInterface $route_match) {
   switch ($route_name) {
     case 'help.page.taxonomy_import':
       global $base_url;
-      $sample_csv = $base_url . '/' . drupal_get_path('module', 'taxonomy_import') . '/CSV_Test.csv';
-      $sample_xml = $base_url . '/' . drupal_get_path('module', 'taxonomy_import') . '/XML_Test.xml';
+      $sample_csv = $base_url . '/' . \Drupal::service('extension.list.module')->getPath('taxonomy_import') . '/CSV_Test.csv';
+      $sample_xml = $base_url . '/' . \Drupal::service('extension.list.module')->getPath('taxonomy_import') . '/XML_Test.xml';
       $output = '<h3>' . t('Introduction') . '</h3>';
       $output .= '<p>' . t('This module can be used to create taxonomy terms by importing data from
       CSV or XML file to a specified Vocabulary.') . '</p>';
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index 3aac025..c47a9cf 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -34,7 +34,7 @@ class LoadTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
