diff --git a/tests/src/Functional/ReCaptchaBasicTest.php b/tests/src/Functional/ReCaptchaBasicTest.php
index 71e7c28..120ade3 100644
--- a/tests/src/Functional/ReCaptchaBasicTest.php
+++ b/tests/src/Functional/ReCaptchaBasicTest.php
@@ -47,7 +47,7 @@ class ReCaptchaBasicTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     module_load_include('inc', 'captcha');
 
@@ -90,7 +90,8 @@ class ReCaptchaBasicTest extends BrowserTestBase {
     // Check form validation.
     $edit['recaptcha_site_key'] = '';
     $edit['recaptcha_secret_key'] = '';
-    $this->drupalPostForm('admin/config/people/captcha/recaptcha', $edit, $this->t('Save configuration'));
+    $this->drupalGet('admin/config/people/captcha/recaptcha');
+    $this->submitForm($edit, $this->t('Save configuration'));
 
     $this->assertSession()->responseContains($this->t('Site key field is required.'), '[testReCaptchaConfiguration]: Empty site key detected.');
     $this->assertSession()->responseContains($this->t('Secret key field is required.'), '[testReCaptchaConfiguration]: Empty secret key detected.');
@@ -99,7 +100,8 @@ class ReCaptchaBasicTest extends BrowserTestBase {
     $edit['recaptcha_site_key'] = $site_key;
     $edit['recaptcha_secret_key'] = $secret_key;
     $edit['recaptcha_tabindex'] = 0;
-    $this->drupalPostForm('admin/config/people/captcha/recaptcha', $edit, $this->t('Save configuration'));
+    $this->drupalGet('admin/config/people/captcha/recaptcha');
+    $this->submitForm($edit, $this->t('Save configuration'));
     $this->assertSession()->responseContains($this->t('The configuration options have been saved.'), '[testReCaptchaConfiguration]: The configuration options have been saved.');
 
     $this->assertSession()->responseNotContains($this->t('Site key field is required.'), '[testReCaptchaConfiguration]: Site key was not empty.');
@@ -203,8 +205,9 @@ class ReCaptchaBasicTest extends BrowserTestBase {
     $this->assertSession()
       ->hiddenFieldExists('captcha_response')
       ->setValue('?');
+    $this->drupalGet('user/login');
 
-    $this->drupalPostForm('user/login', $edit, $this->t('Log in'));
+    $this->submitForm($edit, $this->t('Log in'));
     // Check for error message.
     $this->assertSession()->pageTextContains($this->t('The answer you entered for the CAPTCHA was not correct.'), 'CAPTCHA should block user login form', 'reCAPTCHA');
 
