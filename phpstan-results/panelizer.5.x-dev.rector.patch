diff --git a/panelizer_quickedit/tests/src/FunctionalJavascript/PanelizerQuickEditTest.php b/panelizer_quickedit/tests/src/FunctionalJavascript/PanelizerQuickEditTest.php
index 10a6989..03bec98 100644
--- a/panelizer_quickedit/tests/src/FunctionalJavascript/PanelizerQuickEditTest.php
+++ b/panelizer_quickedit/tests/src/FunctionalJavascript/PanelizerQuickEditTest.php
@@ -31,7 +31,7 @@ class PanelizerQuickEditTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'page', 'name' => 'Page']);
diff --git a/tests/src/Functional/PanelizerDefaultsTest.php b/tests/src/Functional/PanelizerDefaultsTest.php
index 8fb3e27..49dc012 100644
--- a/tests/src/Functional/PanelizerDefaultsTest.php
+++ b/tests/src/Functional/PanelizerDefaultsTest.php
@@ -29,7 +29,7 @@ class PanelizerDefaultsTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->createContentType(['type' => 'page']);
   }
diff --git a/tests/src/Functional/PanelizerIpeTest.php b/tests/src/Functional/PanelizerIpeTest.php
index 0b3d8c3..b124708 100644
--- a/tests/src/Functional/PanelizerIpeTest.php
+++ b/tests/src/Functional/PanelizerIpeTest.php
@@ -33,7 +33,7 @@ class PanelizerIpeTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->createContentType(['type' => $this->content_type]);
@@ -101,12 +101,12 @@ class PanelizerIpeTest extends BrowserTestBase {
 
     // Load the test node.
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Confirm the JSON Drupal settings are appropriate.
     $drupalSettings = NULL;
     $matches = [];
-    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getRawContent(), $matches)) {
+    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getSession()->getPage()->getContent(), $matches)) {
       $drupalSettings = Json::decode($matches[1]);
       $this->verbose('<pre>' . print_r($drupalSettings, TRUE) . '</pre>');
     }
@@ -121,9 +121,9 @@ class PanelizerIpeTest extends BrowserTestBase {
       $this->assertArrayHasKey('panelizer', $drupalSettings);
       $this->assertArrayHasKey('entity', $drupalSettings['panelizer']);
       $this->assertArrayHasKey('entity_type_id', $drupalSettings['panelizer']['entity']);
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
       $this->assertArrayHasKey('entity_id', $drupalSettings['panelizer']['entity']);
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
       $this->assertArrayHasKey('user_permission', $drupalSettings['panelizer']);
       $this->assertArrayHasKey('revert', $drupalSettings['panelizer']['user_permission']);
       $this->assertArrayHasKey('save_default', $drupalSettings['panelizer']['user_permission']);
@@ -146,12 +146,12 @@ class PanelizerIpeTest extends BrowserTestBase {
 
     // Load the test node.
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Confirm the appropriate DOM structures are present for the IPE.
     $drupalSettings = NULL;
     $matches = [];
-    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getRawContent(), $matches)) {
+    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getSession()->getPage()->getContent(), $matches)) {
       $drupalSettings = Json::decode($matches[1]);
       $this->verbose('<pre>' . print_r($drupalSettings, TRUE) . '</pre>');
     }
@@ -166,9 +166,9 @@ class PanelizerIpeTest extends BrowserTestBase {
       $this->assertArrayHasKey('panelizer', $drupalSettings);
       $this->assertArrayHasKey('entity', $drupalSettings['panelizer']);
       $this->assertArrayHasKey('entity_type_id', $drupalSettings['panelizer']['entity']);
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
       $this->assertArrayHasKey('entity_id', $drupalSettings['panelizer']['entity']);
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
       $this->assertArrayHasKey('user_permission', $drupalSettings['panelizer']);
       $this->assertArrayHasKey('revert', $drupalSettings['panelizer']['user_permission']);
       $this->assertArrayHasKey('save_default', $drupalSettings['panelizer']['user_permission']);
@@ -216,9 +216,9 @@ class PanelizerIpeTest extends BrowserTestBase {
       $this->assertArrayHasKey('panelizer', $drupalSettings);
       $this->assertArrayHasKey('entity', $drupalSettings['panelizer']);
       $this->assertArrayHasKey('entity_type_id', $drupalSettings['panelizer']['entity']);
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
       $this->assertArrayHasKey('entity_id', $drupalSettings['panelizer']['entity']);
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
       $this->assertArrayHasKey('user_permission', $drupalSettings['panelizer']);
       $this->assertArrayHasKey('revert', $drupalSettings['panelizer']['user_permission']);
       $this->assertArrayHasKey('save_default', $drupalSettings['panelizer']['user_permission']);
@@ -269,9 +269,9 @@ class PanelizerIpeTest extends BrowserTestBase {
       $this->assertArrayHasKey('panelizer', $drupalSettings);
       $this->assertArrayHasKey('entity', $drupalSettings['panelizer']);
       $this->assertArrayHasKey('entity_type_id', $drupalSettings['panelizer']['entity']);
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
       $this->assertArrayHasKey('entity_id', $drupalSettings['panelizer']['entity']);
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
       $this->assertArrayHasKey('user_permission', $drupalSettings['panelizer']);
       $this->assertArrayHasKey('revert', $drupalSettings['panelizer']['user_permission']);
       $this->assertArrayHasKey('save_default', $drupalSettings['panelizer']['user_permission']);
@@ -323,9 +323,9 @@ class PanelizerIpeTest extends BrowserTestBase {
       $this->assertArrayHasKey('panelizer', $drupalSettings);
       $this->assertArrayHasKey('entity', $drupalSettings['panelizer']);
       $this->assertArrayHasKey('entity_type_id', $drupalSettings['panelizer']['entity']);
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
       $this->assertArrayHasKey('entity_id', $drupalSettings['panelizer']['entity']);
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
       $this->assertArrayHasKey('user_permission', $drupalSettings['panelizer']);
       $this->assertArrayHasKey('revert', $drupalSettings['panelizer']['user_permission']);
       $this->assertArrayHasKey('save_default', $drupalSettings['panelizer']['user_permission']);
@@ -357,12 +357,12 @@ class PanelizerIpeTest extends BrowserTestBase {
 
     // Load the test node.
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Extract the drupalSettings structure and return it.
     $drupalSettings = NULL;
     $matches = [];
-    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getRawContent(), $matches)) {
+    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getSession()->getPage()->getContent(), $matches)) {
       $drupalSettings = Json::decode($matches[1]);
       $this->verbose('<pre>' . print_r($drupalSettings, TRUE) . '</pre>');
     }
diff --git a/tests/src/Functional/PanelizerNodeFunctionalTest.php b/tests/src/Functional/PanelizerNodeFunctionalTest.php
index d640d8a..609e274 100644
--- a/tests/src/Functional/PanelizerNodeFunctionalTest.php
+++ b/tests/src/Functional/PanelizerNodeFunctionalTest.php
@@ -40,7 +40,7 @@ class PanelizerNodeFunctionalTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
 
@@ -362,13 +362,21 @@ class PanelizerNodeFunctionalTest extends BrowserTestBase {
 
     // Enter the wizard.
     $this->drupalGet('admin/structure/panelizer/edit/node__page__default__default');
-    $this->assertResponse(200);
-    $this->assertText('Wizard Information');
-    $this->assertField('edit-label');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Wizard Information');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('edit-label');
 
     // Contexts step.
     $this->clickLink('Contexts');
-    $this->assertText('@panelizer.entity_context:entity', 'The current entity context is present.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('@panelizer.entity_context:entity');
 
     // Layout selection step.
     $this->clickLink('Layout');
@@ -382,22 +390,27 @@ class PanelizerNodeFunctionalTest extends BrowserTestBase {
       'region' => 'content',
     ];
     $this->submitForm($edit, 'Add block');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Finish the wizard.
     $this->submitForm([], 'Update and save');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Confirm this returned to the main wizard page.
-    $this->assertText('Wizard Information');
-    $this->assertField('edit-label');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Wizard Information');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('edit-label');
 
     // Return to the Manage Display page, which is where the Cancel button
     // currently sends you. That's a UX WTF and should be fixed...
     $this->submitForm([], 'Cancel');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Confirm the page is back to the content type settings page.
-    $this->assertFieldChecked('edit-panelizer-custom');
+    $this->assertSession()->checkboxChecked('edit-panelizer-custom');
 
     // Now change and save the general setting.
     $edit = [
@@ -409,30 +422,36 @@ class PanelizerNodeFunctionalTest extends BrowserTestBase {
 
     // Add another block at the Content step and then save changes.
     $this->drupalGet('admin/structure/panelizer/edit/node__page__default__default/content');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->clickLink('Add new block');
     $this->clickLink('Body');
     $edit = [
       'region' => 'content',
     ];
     $this->submitForm($edit, 'Add block');
-    $this->assertResponse(200);
-    $this->assertText('entity_field:node:body', 'The body block was added successfully.');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('entity_field:node:body');
     $this->submitForm([], 'Save');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->clickLink('Content');
-    $this->assertText('entity_field:node:body', 'The body block was saved successfully.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('entity_field:node:body');
 
     // Check that the Manage Display tab changed now that Panelizer is set up.
     // Also, the field display table should be hidden.
-    $this->assertNoRaw('<div id="field-display-overview-wrapper">');
+    $this->assertSession()->responseNotContains('<div id="field-display-overview-wrapper">');
 
     // Disable Panelizer for the default display mode. This should bring back
     // the field overview table at Manage Display and not display the link to
     // edit the default Panelizer layout.
     $this->unpanelize('page');
-    $this->assertNoLinkByHref('admin/structure/panelizer/edit/node__page__default');
-    $this->assertRaw('<div id="field-display-overview-wrapper">');
+    $this->assertSession()->linkByHrefNotExists('admin/structure/panelizer/edit/node__page__default');
+    $this->assertSession()->responseContains('<div id="field-display-overview-wrapper">');
   }
 
   /**
@@ -454,19 +473,25 @@ class PanelizerNodeFunctionalTest extends BrowserTestBase {
     // Create a node, and check that the IPE is visible on it.
     $node = $this->drupalCreateNode(['type' => 'page']);
     $out = $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->verbose($out);
     $elements = $this->xpath('//*[@id="panels-ipe-content"]');
     if (is_array($elements)) {
-      $this->assertIdentical(count($elements), 1);
+      $this->assertSame(count($elements), 1);
     }
     else {
       $this->fail('Could not parse page content.');
     }
 
     // Check that the block we added is visible.
-    $this->assertText('Panelizer test');
-    $this->assertText('Abracadabra');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Panelizer test');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Abracadabra');
   }
 
 }
diff --git a/tests/src/Functional/PanelizerNodeTranslationsTest.php b/tests/src/Functional/PanelizerNodeTranslationsTest.php
index 8a10317..063c95d 100644
--- a/tests/src/Functional/PanelizerNodeTranslationsTest.php
+++ b/tests/src/Functional/PanelizerNodeTranslationsTest.php
@@ -34,7 +34,7 @@ class PanelizerNodeTranslationsTest extends ContentTranslationTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->loginUser1();
@@ -68,13 +68,21 @@ class PanelizerNodeTranslationsTest extends ContentTranslationTestBase {
 
     // Enter the wizard.
     $this->drupalGet("admin/structure/panelizer/edit/{$this->entityTypeId}__{$this->bundle}__default__default");
-    $this->assertResponse(200);
-    $this->assertText('Wizard Information');
-    $this->assertField('edit-label');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Wizard Information');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('edit-label');
 
     // Contexts step.
     $this->clickLink('Contexts');
-    $this->assertText('@panelizer.entity_context:entity', 'The current entity context is present.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('@panelizer.entity_context:entity');
 
     // Layout selection step.
     $this->clickLink('Layout');
@@ -89,57 +97,68 @@ class PanelizerNodeTranslationsTest extends ContentTranslationTestBase {
       'region' => 'content',
     ];
     $this->submitForm($edit, 'Add block');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Finish the wizard.
     $this->submitForm([], 'Update and save');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Confirm this returned to the main wizard page.
-    $this->assertText('Wizard Information');
-    $this->assertField('edit-label');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Wizard Information');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('edit-label');
 
     // Return to the Manage Display page, which is where the Cancel button
     // currently sends you. That's a UX WTF and should be fixed...
     $this->submitForm([], 'Cancel');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Confirm the page is back to the content type settings page.
-    $this->assertFieldChecked('edit-panelizer-custom');
+    $this->assertSession()->checkboxChecked('edit-panelizer-custom');
 
     // Now change and save the general setting.
     $edit = [
       'panelizer[custom]' => FALSE,
     ];
     $this->submitForm($edit, 'Save');
-    $this->assertResponse(200);
-    $this->assertNoFieldChecked('edit-panelizer-custom');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->checkboxNotChecked('edit-panelizer-custom');
 
     // Add another block at the Content step and then save changes.
     $this->drupalGet("admin/structure/panelizer/edit/{$this->entityTypeId}__{$this->bundle}__default__default/content");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->clickLink('Add new block');
     $this->clickLink('Body');
     $edit = [
       'region' => 'content',
     ];
     $this->submitForm($edit, 'Add block');
-    $this->assertResponse(200);
-    $this->assertText("entity_field:{$this->entityTypeId}:body", 'The body block was added successfully.');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("entity_field:{$this->entityTypeId}:body");
     $this->submitForm([], 'Save');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->clickLink('Content', 1);
-    $this->assertText("entity_field:{$this->entityTypeId}:body", 'The body block was saved successfully.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("entity_field:{$this->entityTypeId}:body");
 
     // Check that the Manage Display tab changed now that Panelizer is set up.
     // Also, the field display table should be hidden.
-    $this->assertNoRaw('<div id="field-display-overview-wrapper">');
+    $this->assertSession()->responseNotContains('<div id="field-display-overview-wrapper">');
 
     // Disable Panelizer for the default display mode. This should bring back
     // the field overview table at Manage Display and not display the link to
     // edit the default Panelizer layout.
     $this->unpanelize($this->bundle);
-    $this->assertNoLinkByHref("admin/structure/panelizer/edit/{$this->entityTypeId}__{$this->bundle}__default");
-    $this->assertRaw('<div id="field-display-overview-wrapper">');
+    $this->assertSession()->linkByHrefNotExists("admin/structure/panelizer/edit/{$this->entityTypeId}__{$this->bundle}__default");
+    $this->assertSession()->responseContains('<div id="field-display-overview-wrapper">');
   }
 
   /**
@@ -176,25 +195,40 @@ class PanelizerNodeTranslationsTest extends ContentTranslationTestBase {
       ],
     ]);
     $out = $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->verbose($out);
     $elements = $this->xpath('//*[@id="panels-ipe-content"]');
     if (is_array($elements)) {
-      $this->assertIdentical(count($elements), 1);
+      $this->assertSame(count($elements), 1);
     }
     else {
       $this->fail('Could not parse page content.');
     }
 
     // Check that the block we added is visible.
-    $this->assertText('Panelizer test');
-    $this->assertText('Abracadabra');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Panelizer test');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Abracadabra');
 
     // Load the translation page.
     $this->clickLink('Translate');
-    $this->assertText('English (Original language)');
-    $this->assertText('Published');
-    $this->assertText('Not translated');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('English (Original language)');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Published');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Not translated');
   }
 
   // @todo Confirm that the different languages of a translated node are loaded properly when using a default display.
diff --git a/tests/src/Functional/PanelizerTermFunctionalTest.php b/tests/src/Functional/PanelizerTermFunctionalTest.php
index 149254d..c31ab9a 100644
--- a/tests/src/Functional/PanelizerTermFunctionalTest.php
+++ b/tests/src/Functional/PanelizerTermFunctionalTest.php
@@ -44,7 +44,7 @@ class PanelizerTermFunctionalTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
 
