diff --git a/panels_ipe/tests/src/FunctionalJavascript/PageManagerIntegrationTest.php b/panels_ipe/tests/src/FunctionalJavascript/PageManagerIntegrationTest.php
index bddba88..599e7a7 100644
--- a/panels_ipe/tests/src/FunctionalJavascript/PageManagerIntegrationTest.php
+++ b/panels_ipe/tests/src/FunctionalJavascript/PageManagerIntegrationTest.php
@@ -38,7 +38,7 @@ class PageManagerIntegrationTest extends PanelsIPETestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a user with appropriate permissions to use Panels IPE.
diff --git a/panels_ipe/tests/src/FunctionalJavascript/PanelsIPETestBase.php b/panels_ipe/tests/src/FunctionalJavascript/PanelsIPETestBase.php
index d0ab4c5..fea2c83 100644
--- a/panels_ipe/tests/src/FunctionalJavascript/PanelsIPETestBase.php
+++ b/panels_ipe/tests/src/FunctionalJavascript/PanelsIPETestBase.php
@@ -32,6 +32,7 @@ abstract class PanelsIPETestBase extends WebDriverTestBase {
 
   /**
    * Tests that adding a block with default configuration works.
+   * @doesNotPerformAssertions
    */
   public function testIPEAddBlock() {
     $this->visitIPERoute();
@@ -41,6 +42,7 @@ abstract class PanelsIPETestBase extends WebDriverTestBase {
 
   /**
    * Tests that changing layout from one (default) to two columns works.
+   * @doesNotPerformAssertions
    */
   public function testIPEChangeLayout() {
     $this->visitIPERoute();
diff --git a/panels_ipe/tests/src/Unit/RemoveBlockRequestHandlerTest.php b/panels_ipe/tests/src/Unit/RemoveBlockRequestHandlerTest.php
index 8d8e966..71ccffe 100644
--- a/panels_ipe/tests/src/Unit/RemoveBlockRequestHandlerTest.php
+++ b/panels_ipe/tests/src/Unit/RemoveBlockRequestHandlerTest.php
@@ -12,7 +12,7 @@ use Symfony\Component\HttpFoundation\JsonResponse;
  */
 class RemoveBlockRequestHandlerTest extends RequestHandlerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->sut = new RemoveBlockRequestHandler($this->moduleHandler, $this->panelsStore, $this->tempStore);
   }
@@ -28,6 +28,7 @@ class RemoveBlockRequestHandlerTest extends RequestHandlerTestBase {
 
   /**
    * @test
+   * @doesNotPerformAssertions
    */
   public function panelsDisplayIsSavedAfterBlockRemoval() {
     $this->panelsStore->expects($this->once())->method('save');
@@ -36,6 +37,7 @@ class RemoveBlockRequestHandlerTest extends RequestHandlerTestBase {
 
   /**
    * @test
+   * @doesNotPerformAssertions
    */
   public function panelsDisplayIsSavedToTempstoreAfterBlockRemoval() {
     $this->tempStore->expects($this->once())->method('set');
diff --git a/panels_ipe/tests/src/Unit/RequestHandlerTestBase.php b/panels_ipe/tests/src/Unit/RequestHandlerTestBase.php
index 547eb3c..d749378 100644
--- a/panels_ipe/tests/src/Unit/RequestHandlerTestBase.php
+++ b/panels_ipe/tests/src/Unit/RequestHandlerTestBase.php
@@ -21,35 +21,31 @@ abstract class RequestHandlerTestBase extends TestCase {
   protected $sut;
 
   /**
-   * @var PHPUnit_Framework_MockObject_MockObject */
+   * @var \PHPUnit\Framework\MockObject\MockObject */
   protected $moduleHandler;
 
   /**
-   * @var PHPUnit_Framework_MockObject_MockObject */
+   * @var \PHPUnit\Framework\MockObject\MockObject */
   protected $panelsStore;
 
   /**
-   * @var PHPUnit_Framework_MockObject_MockObject */
+   * @var \PHPUnit\Framework\MockObject\MockObject */
   protected $tempStore;
 
   /**
-   * @var PHPUnit_Framework_MockObject_MockObject */
+   * @var \PHPUnit\Framework\MockObject\MockObject */
   protected $panelsDisplay;
 
   /**
    *
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->moduleHandler = $this->getMockForAbstractClass(ModuleHandlerInterface::class);
     $this->panelsStore = $this->getMockForAbstractClass(PanelsStorageManagerInterface::class);
-    $this->tempStore = $this->getMockBuilder(SharedTempStore::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->tempStore = $this->createMock(SharedTempStore::class);
 
-    $this->panelsDisplay = $this->getMockBuilder(PanelsDisplayVariant::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->panelsDisplay = $this->createMock(PanelsDisplayVariant::class);
   }
 
   protected function createRequest($content = NULL) {
diff --git a/panels_ipe/tests/src/Unit/UpdateLayoutRequestHandlerTest.php b/panels_ipe/tests/src/Unit/UpdateLayoutRequestHandlerTest.php
index 499a75d..95b2701 100644
--- a/panels_ipe/tests/src/Unit/UpdateLayoutRequestHandlerTest.php
+++ b/panels_ipe/tests/src/Unit/UpdateLayoutRequestHandlerTest.php
@@ -14,7 +14,7 @@ use Symfony\Component\HttpFoundation\JsonResponse;
  */
 class UpdateLayoutRequestHandlerTest extends RequestHandlerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->sut = new UpdateLayoutRequestHandler($this->moduleHandler, $this->panelsStore, $this->tempStore);
   }
@@ -34,9 +34,7 @@ class UpdateLayoutRequestHandlerTest extends RequestHandlerTestBase {
   }
 
   private function setPanelsDisplayExpectations() {
-    $block = $this->getMockBuilder(BlockBase::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $block = $this->createMock(BlockBase::class);
     $block->expects($this->exactly(4))->method('setConfigurationValue');
     $block->expects($this->exactly(2))
       ->method('getConfiguration')
@@ -66,6 +64,7 @@ class UpdateLayoutRequestHandlerTest extends RequestHandlerTestBase {
 
   /**
    * @test
+   * @doesNotPerformAssertions
    */
   public function updatedLayoutGetsSaved() {
     $this->setPanelsDisplayExpectations();
@@ -78,6 +77,7 @@ class UpdateLayoutRequestHandlerTest extends RequestHandlerTestBase {
 
   /**
    * @test
+   * @doesNotPerformAssertions
    */
   public function updatedLayoutGetsSavedToTempStore() {
     $this->setPanelsDisplayExpectations();
@@ -89,6 +89,7 @@ class UpdateLayoutRequestHandlerTest extends RequestHandlerTestBase {
 
   /**
    * @test
+   * @doesNotPerformAssertions
    */
   public function hookPreSaveGetsCalledBeforeSave() {
     $this->setPanelsDisplayExpectations();
diff --git a/src/PanelsVariantEvent.php b/src/PanelsVariantEvent.php
index 104f803..4cda70a 100644
--- a/src/PanelsVariantEvent.php
+++ b/src/PanelsVariantEvent.php
@@ -8,7 +8,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Event object for events relating to Panels display variants.
  */
-class PanelsVariantEvent extends Event {
+class PanelsVariantEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The Panels display variant.
diff --git a/src/Storage/PanelsStorageManager.php b/src/Storage/PanelsStorageManager.php
index 8ddaa71..c307a34 100644
--- a/src/Storage/PanelsStorageManager.php
+++ b/src/Storage/PanelsStorageManager.php
@@ -98,10 +98,10 @@ class PanelsStorageManager extends DefaultPluginManager implements PanelsStorage
     // Allow event subscribers to react to the variant being saved.
     $event = new PanelsVariantEvent($panels_display);
 
-    $this->eventDispatcher->dispatch(PanelsEvents::VARIANT_PRE_SAVE, $event);
+    $this->eventDispatcher->dispatch($event, PanelsEvents::VARIANT_PRE_SAVE);
     $storage = $this->getStorage($panels_display->getStorageType());
     $storage->save($panels_display);
-    $this->eventDispatcher->dispatch(PanelsEvents::VARIANT_POST_SAVE, $event);
+    $this->eventDispatcher->dispatch($event, PanelsEvents::VARIANT_POST_SAVE);
   }
 
   /**
