diff --git a/digital_signage_framework.install b/digital_signage_framework.install
index 456197d..57c2a07 100644
--- a/digital_signage_framework.install
+++ b/digital_signage_framework.install
@@ -102,7 +102,7 @@ function digital_signage_framework_update_8004() {
       ->execute();
   }
 
-  $config_path = drupal_get_path('module', 'digital_signage_framework') . '/config/optional';
+  $config_path = \Drupal::service('extension.list.module')->getPath('digital_signage_framework') . '/config/optional';
   $source = new FileStorage($config_path);
   $config_storage = Drupal::service('config.storage');
   $config_storage->write('views.view.emergency_entities', $source->read('views.view.emergency_entities'));
diff --git a/modules/computed_content/src/Form/ComputedContentForm.php b/modules/computed_content/src/Form/ComputedContentForm.php
index 6c120c5..98898cf 100644
--- a/modules/computed_content/src/Form/ComputedContentForm.php
+++ b/modules/computed_content/src/Form/ComputedContentForm.php
@@ -20,7 +20,7 @@ class ComputedContentForm extends ContentEntityForm {
     $link = $entity->toLink($this->t('View'))->toRenderable();
 
     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];
 
     if ($result === SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New computed content %label has been created.', $message_arguments));
diff --git a/src/Controller/Api.php b/src/Controller/Api.php
index bb8d388..93355bd 100644
--- a/src/Controller/Api.php
+++ b/src/Controller/Api.php
@@ -352,7 +352,7 @@ class Api implements ContainerInjectionInterface {
     }
 
     $event = new Rendered($response, $this->device);
-    $this->eventDispatcher->dispatch(DigitalSignageFrameworkEvents::RENDERED, $event);
+    $this->eventDispatcher->dispatch($event, DigitalSignageFrameworkEvents::RENDERED);
 
     return $event->getResponse();
   }
@@ -455,12 +455,12 @@ class Api implements ContainerInjectionInterface {
    */
   private function getSchedule(): JsonResponse {
     $underlays = new Underlays($this->device);
-    $this->eventDispatcher->dispatch(DigitalSignageFrameworkEvents::UNDERLAYS, $underlays);
+    $this->eventDispatcher->dispatch($underlays, DigitalSignageFrameworkEvents::UNDERLAYS);
     $overlays = new Overlays($this->device);
-    $this->eventDispatcher->dispatch(DigitalSignageFrameworkEvents::OVERLAYS, $overlays);
+    $this->eventDispatcher->dispatch($overlays, DigitalSignageFrameworkEvents::OVERLAYS);
 
     $event = new Libraries($this->device);
-    $this->eventDispatcher->dispatch(DigitalSignageFrameworkEvents::LIBRARIES, $event);
+    $this->eventDispatcher->dispatch($event, DigitalSignageFrameworkEvents::LIBRARIES);
     $libraries = $event->getLibraries();
     $libraries[] = 'digital_signage_framework/schedule.content';
     $libraries[] = 'digital_signage_framework/schedule.timer';
@@ -625,7 +625,7 @@ class Api implements ContainerInjectionInterface {
       }
     }
 
-    $this->eventDispatcher->dispatch(DigitalSignageFrameworkEvents::LIBRARIES, $event);
+    $this->eventDispatcher->dispatch($event, DigitalSignageFrameworkEvents::LIBRARIES);
     return $this->renderAssets($event->getLibraries(), $event->getSettings(), TRUE, $this->prepareHtmlHead($build));
   }
 
@@ -646,8 +646,8 @@ class Api implements ContainerInjectionInterface {
         }
       }
     }
-    $cssFiles[] = drupal_get_path('module', 'digital_signage_framework') . '/css/digital-signage.css';
-    $cssFiles[] = drupal_get_path('module', 'digital_signage_framework') . '/css/overlays.css';
+    $cssFiles[] = \Drupal::service('extension.list.module')->getPath('digital_signage_framework') . '/css/digital-signage.css';
+    $cssFiles[] = \Drupal::service('extension.list.module')->getPath('digital_signage_framework') . '/css/overlays.css';
     foreach (explode(PHP_EOL, str_replace("\r", '', $this->config->get('css'))) as $file) {
       $cssFiles[] = $file;
     }
@@ -726,9 +726,9 @@ class Api implements ContainerInjectionInterface {
    */
   private function popupContent($output): AjaxResponse {
     $underlays = new Underlays($this->device);
-    $this->eventDispatcher->dispatch(DigitalSignageFrameworkEvents::UNDERLAYS, $underlays);
+    $this->eventDispatcher->dispatch($underlays, DigitalSignageFrameworkEvents::UNDERLAYS);
     $overlays = new Overlays($this->device);
-    $this->eventDispatcher->dispatch(DigitalSignageFrameworkEvents::OVERLAYS, $overlays);
+    $this->eventDispatcher->dispatch($overlays, DigitalSignageFrameworkEvents::OVERLAYS);
 
     $content = is_array($output) ? $this->renderer->renderRoot($output) : $output;
     /** @var array $build */
@@ -767,7 +767,7 @@ class Api implements ContainerInjectionInterface {
    * @return \Drupal\Core\Ajax\AjaxResponse
    */
   private function previewBinary(): AjaxResponse {
-    $file_uri = file_create_url($this->getFileUri());
+    $file_uri = \Drupal::service('file_url_generator')->generateAbsoluteString($this->getFileUri());
     switch ($this->request->query->get('type')) {
       case 'image':
         $output = '<img src="' . $file_uri . '" alt="" />';
diff --git a/src/Entity/Device.php b/src/Entity/Device.php
index 6aaa12f..1290736 100644
--- a/src/Entity/Device.php
+++ b/src/Entity/Device.php
@@ -148,7 +148,7 @@ class Device extends RevisionableContentEntityBase implements DeviceInterface {
         if ($js_asset['type'] === 'file' && $name !== 'core/misc/drupalSettingsLoader.js') {
           $scriptIndex++;
           $scripts[] = [
-            'uri' => file_create_url($js_asset['data']),
+            'uri' => \Drupal::service('file_url_generator')->generateAbsoluteString($js_asset['data']),
             'uid' => 'ajs-' . $scriptIndex . '.js',
           ];
         }
diff --git a/src/Event/Libraries.php b/src/Event/Libraries.php
index 9f1fc2c..208a013 100644
--- a/src/Event/Libraries.php
+++ b/src/Event/Libraries.php
@@ -10,7 +10,7 @@ use Symfony\Component\EventDispatcher\Event;
  *
  * @package Drupal\digital_signage_framework\Event
  */
-class Libraries extends Event {
+class Libraries extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * @var array
diff --git a/src/Event/Overlays.php b/src/Event/Overlays.php
index bcac9f3..2901f69 100644
--- a/src/Event/Overlays.php
+++ b/src/Event/Overlays.php
@@ -11,7 +11,7 @@ use Symfony\Component\EventDispatcher\Event;
  *
  * @package Drupal\digital_signage_framework\Event
  */
-class Overlays extends Event {
+class Overlays extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * @var array
diff --git a/src/Event/Rendered.php b/src/Event/Rendered.php
index add624f..6025d7f 100644
--- a/src/Event/Rendered.php
+++ b/src/Event/Rendered.php
@@ -11,7 +11,7 @@ use Symfony\Component\HttpFoundation\Response;
  *
  * @package Drupal\digital_signage_framework\Event
  */
-class Rendered extends Event {
+class Rendered extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * @var \Symfony\Component\HttpFoundation\Response
diff --git a/src/Event/Underlays.php b/src/Event/Underlays.php
index daf73dd..8387ee6 100644
--- a/src/Event/Underlays.php
+++ b/src/Event/Underlays.php
@@ -11,7 +11,7 @@ use Symfony\Component\EventDispatcher\Event;
  *
  * @package Drupal\digital_signage_framework\Event
  */
-class Underlays extends Event {
+class Underlays extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * @var array
diff --git a/src/Form/Device.php b/src/Form/Device.php
index 0cf6126..91cf7ae 100644
--- a/src/Form/Device.php
+++ b/src/Form/Device.php
@@ -20,7 +20,7 @@ class Device extends ContentEntityForm {
     $link = $entity->toLink($this->t('View'))->toRenderable();
 
     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];
 
     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New device %label has been created.', $message_arguments));
