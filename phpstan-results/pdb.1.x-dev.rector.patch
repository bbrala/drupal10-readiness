diff --git a/modules/pdb_ng2/src/Plugin/Block/Ng2Block.php b/modules/pdb_ng2/src/Plugin/Block/Ng2Block.php
index dfe34b2..3abcff3 100644
--- a/modules/pdb_ng2/src/Plugin/Block/Ng2Block.php
+++ b/modules/pdb_ng2/src/Plugin/Block/Ng2Block.php
@@ -59,7 +59,7 @@ class Ng2Block extends PdbBlock {
         'ngClassName' => $component['ng_class_name'],
       ];
     }
-    $attached['drupalSettings']['pdb']['ng2']['module_path'] = drupal_get_path('module', 'pdb_ng2');
+    $attached['drupalSettings']['pdb']['ng2']['module_path'] = \Drupal::service('extension.list.module')->getPath('pdb_ng2');
 
     $config_settings = \Drupal::config('pdb_ng2.settings');
     if (isset($config_settings)) {
diff --git a/src/ComponentDiscovery.php b/src/ComponentDiscovery.php
index 46d7a4e..56dcdd4 100644
--- a/src/ComponentDiscovery.php
+++ b/src/ComponentDiscovery.php
@@ -108,7 +108,7 @@ class ComponentDiscovery extends ExtensionDiscovery implements ComponentDiscover
 
     // Try to get search dirs from subscribers.
     $event = new PdbDiscoveryEvent($search_dirs);
-    $this->eventDispatcher->dispatch(PdbDiscoveryEvent::SEARCH_DIRS, $event);
+    $this->eventDispatcher->dispatch($event, PdbDiscoveryEvent::SEARCH_DIRS);
 
     // Get the updated dicovery path from subscribers.
     $search_dirs = $event->getDirs();
diff --git a/src/Event/PdbDiscoveryEvent.php b/src/Event/PdbDiscoveryEvent.php
index e651039..f12d5ab 100644
--- a/src/Event/PdbDiscoveryEvent.php
+++ b/src/Event/PdbDiscoveryEvent.php
@@ -7,7 +7,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Provides an event to handle user custom search dirs.
  */
-class PdbDiscoveryEvent extends Event {
+class PdbDiscoveryEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * Name of the PDB discovery search dirs event.
diff --git a/tests/src/Unit/Plugin/Block/PdbBlockTest.php b/tests/src/Unit/Plugin/Block/PdbBlockTest.php
index 53abff2..7313aac 100644
--- a/tests/src/Unit/Plugin/Block/PdbBlockTest.php
+++ b/tests/src/Unit/Plugin/Block/PdbBlockTest.php
@@ -16,6 +16,7 @@ use Drupal\Component\Uuid\UuidInterface;
  */
 class PdbBlockTest extends UnitTestCase {
 
+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * Instance of the Plugin.
    *
@@ -26,7 +27,7 @@ class PdbBlockTest extends UnitTestCase {
   /**
    * Create the setup for constants and plugin instance.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Mock the UUID service.
diff --git a/tests/src/Unit/Plugin/Derivative/PdbBlockDeriverTest.php b/tests/src/Unit/Plugin/Derivative/PdbBlockDeriverTest.php
index 213d76b..9ec1021 100644
--- a/tests/src/Unit/Plugin/Derivative/PdbBlockDeriverTest.php
+++ b/tests/src/Unit/Plugin/Derivative/PdbBlockDeriverTest.php
@@ -13,6 +13,7 @@ use Drupal\pdb\ComponentDiscoveryInterface;
  */
 class PdbBlockDeriverTest extends UnitTestCase {
 
+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * Mocked Component Discovery.
    *
@@ -30,7 +31,7 @@ class PdbBlockDeriverTest extends UnitTestCase {
   /**
    * Create the setup for constants.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Mock the UUID service.
