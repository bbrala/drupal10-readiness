diff --git a/prometheus_metrics.info.yml b/prometheus_metrics.info.yml
index e0c3742..b9e38b8 100644
--- a/prometheus_metrics.info.yml
+++ b/prometheus_metrics.info.yml
@@ -1,8 +1,7 @@
 name: 'Prometheus Metrics'
 type: module
 description: 'Provide metrics to Prometheus service'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 package: 'Statistics'
 configure: prometheus_metrics.configuration_form
 
diff --git a/src/EventSubscriber/PrometheusRequestSubscriber.php b/src/EventSubscriber/PrometheusRequestSubscriber.php
index f891ba9..346a962 100644
--- a/src/EventSubscriber/PrometheusRequestSubscriber.php
+++ b/src/EventSubscriber/PrometheusRequestSubscriber.php
@@ -94,10 +94,10 @@ class PrometheusRequestSubscriber implements EventSubscriberInterface {
   /**
    * Start timer for the request.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The start of request event.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     Timer::start(PrometheusDefaults::TIMER_NAME);
   }
 
@@ -107,10 +107,10 @@ class PrometheusRequestSubscriber implements EventSubscriberInterface {
    * Stores a histogram timer and counter for the request
    * by method, route and status.
    *
-   * @param \Symfony\Component\HttpKernel\Event\PostResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\TerminateEvent $event
    *   The event.
    */
-  public function onTerminate(PostResponseEvent $event) {
+  public function onTerminate(\Symfony\Component\HttpKernel\Event\TerminateEvent $event) {
     if (PHP_SAPI === 'cli') {
       // In CLI context there is no request to trace
       return;
diff --git a/src/Events/EntityCRUDEvent.php b/src/Events/EntityCRUDEvent.php
index 59f1b2d..7bd164d 100644
--- a/src/Events/EntityCRUDEvent.php
+++ b/src/Events/EntityCRUDEvent.php
@@ -8,7 +8,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Stores details about the event.
  */
-class EntityCRUDEvent extends Event {
+class EntityCRUDEvent extends \Symfony\Contracts\EventDispatcher\Event {
   /**
    * The entity being affected.
    *
diff --git a/tests/Controller/MetricsControllerTest.php b/tests/Controller/MetricsControllerTest.php
index e68fd8d..ba79b0c 100644
--- a/tests/Controller/MetricsControllerTest.php
+++ b/tests/Controller/MetricsControllerTest.php
@@ -24,7 +24,7 @@ class MetricsControllerTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
   }
 
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index c2a646a..c2e4cf3 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -29,7 +29,7 @@ class LoadTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
