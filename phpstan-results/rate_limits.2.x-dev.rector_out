[parsing] modules/contrib/rate_limits/rate_limits.api.php
[refactoring] modules/contrib/rate_limits/rate_limits.api.php
[post rectors] modules/contrib/rate_limits/rate_limits.api.php
[print] modules/contrib/rate_limits/rate_limits.api.php
[parsing] modules/contrib/rate_limits/src/Entity/RateLimitConfig.php
[refactoring] modules/contrib/rate_limits/src/Entity/RateLimitConfig.php
[post rectors] modules/contrib/rate_limits/src/Entity/RateLimitConfig.php
[print] modules/contrib/rate_limits/src/Entity/RateLimitConfig.php
[parsing] modules/contrib/rate_limits/src/Entity/RateLimitConfigInterface.php
[refactoring] modules/contrib/rate_limits/src/Entity/RateLimitConfigInterface.php
[post rectors] modules/contrib/rate_limits/src/Entity/RateLimitConfigInterface.php
[print] modules/contrib/rate_limits/src/Entity/RateLimitConfigInterface.php
[parsing] modules/contrib/rate_limits/src/EventSubscriber/RequestSubscriberCheckLimits.php
[refactoring] modules/contrib/rate_limits/src/EventSubscriber/RequestSubscriberCheckLimits.php
[post rectors] modules/contrib/rate_limits/src/EventSubscriber/RequestSubscriberCheckLimits.php
[print] modules/contrib/rate_limits/src/EventSubscriber/RequestSubscriberCheckLimits.php
[refactoring] modules/contrib/rate_limits/src/EventSubscriber/RequestSubscriberCheckLimits.php
[post rectors] modules/contrib/rate_limits/src/EventSubscriber/RequestSubscriberCheckLimits.php
[print] modules/contrib/rate_limits/src/EventSubscriber/RequestSubscriberCheckLimits.php
[parsing] modules/contrib/rate_limits/src/Form/RateLimitConfigDeleteForm.php
[refactoring] modules/contrib/rate_limits/src/Form/RateLimitConfigDeleteForm.php
[post rectors] modules/contrib/rate_limits/src/Form/RateLimitConfigDeleteForm.php
[print] modules/contrib/rate_limits/src/Form/RateLimitConfigDeleteForm.php
[parsing] modules/contrib/rate_limits/src/Form/RateLimitConfigForm.php
[refactoring] modules/contrib/rate_limits/src/Form/RateLimitConfigForm.php
[post rectors] modules/contrib/rate_limits/src/Form/RateLimitConfigForm.php
[print] modules/contrib/rate_limits/src/Form/RateLimitConfigForm.php
[parsing] modules/contrib/rate_limits/src/RateLimitConfigHtmlRouteProvider.php
[refactoring] modules/contrib/rate_limits/src/RateLimitConfigHtmlRouteProvider.php
[post rectors] modules/contrib/rate_limits/src/RateLimitConfigHtmlRouteProvider.php
[print] modules/contrib/rate_limits/src/RateLimitConfigHtmlRouteProvider.php
[parsing] modules/contrib/rate_limits/src/RateLimitConfigListBuilder.php
[refactoring] modules/contrib/rate_limits/src/RateLimitConfigListBuilder.php
[post rectors] modules/contrib/rate_limits/src/RateLimitConfigListBuilder.php
[print] modules/contrib/rate_limits/src/RateLimitConfigListBuilder.php
[parsing] modules/contrib/rate_limits/tests/modules/rate_limits_test/src/RateLimitsTestController.php
[refactoring] modules/contrib/rate_limits/tests/modules/rate_limits_test/src/RateLimitsTestController.php
[post rectors] modules/contrib/rate_limits/tests/modules/rate_limits_test/src/RateLimitsTestController.php
[print] modules/contrib/rate_limits/tests/modules/rate_limits_test/src/RateLimitsTestController.php
[parsing] modules/contrib/rate_limits/tests/src/Functional/RateLimitsApiFunctionalTest.php
[refactoring] modules/contrib/rate_limits/tests/src/Functional/RateLimitsApiFunctionalTest.php
[post rectors] modules/contrib/rate_limits/tests/src/Functional/RateLimitsApiFunctionalTest.php
[print] modules/contrib/rate_limits/tests/src/Functional/RateLimitsApiFunctionalTest.php
[refactoring] modules/contrib/rate_limits/tests/src/Functional/RateLimitsApiFunctionalTest.php
[post rectors] modules/contrib/rate_limits/tests/src/Functional/RateLimitsApiFunctionalTest.php
[print] modules/contrib/rate_limits/tests/src/Functional/RateLimitsApiFunctionalTest.php

2 files with changes
====================

1) modules/contrib/rate_limits/tests/src/Functional/RateLimitsApiFunctionalTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $config = RateLimitConfig::create([
       'label' => $this->randomGenerator->name(),
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/rate_limits/src/EventSubscriber/RequestSubscriberCheckLimits.php:59

    ---------- begin diff ----------
@@ @@
   /**
    * Check the limits on the request.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The request event.
    *
    * @throws \Symfony\Component\HttpKernel\Exception\HttpException
@@ @@
    * @throws \Exception
    *   When the flood table does not exist.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     $request = $event->getRequest();
     try {
       $route_data = $this->router->matchRequest($request);
@@ @@
    *   The event name.
    * @param array $flood_config
    *   The configuration with the limits.
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The request event.
    *
    * @return bool
@@ @@
    * @throws \Exception
    *   When the flood table is not created.
    */
-  protected function checkIp($event_name, $flood_config, GetResponseEvent $event) {
+  protected function checkIp($event_name, $flood_config, \Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     $allowed = $this->flood->isAllowed(
       $event_name,
       $flood_config['ip_limit'],
@@ @@
    *   The event name.
    * @param array $flood_config
    *   The configuration with the limits.
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The request event.
    *
    * @return bool
@@ @@
    * @throws \Exception
    *   When the flood table is not created.
    */
-  protected function checkUser($event_name, $flood_config, GetResponseEvent $event) {
+  protected function checkUser($event_name, $flood_config, \Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     if ($this->currentUser->isAnonymous()) {
       // The user check does not apply to anonymous.
       return TRUE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 2 files have been changed by Rector                                       

