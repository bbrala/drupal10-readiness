diff --git a/src/EventSubscriber/ExceptionSubscriber.php b/src/EventSubscriber/ExceptionSubscriber.php
index 27269a5..96e0b39 100644
--- a/src/EventSubscriber/ExceptionSubscriber.php
+++ b/src/EventSubscriber/ExceptionSubscriber.php
@@ -43,17 +43,17 @@ class ExceptionSubscriber implements EventSubscriberInterface {
   /**
    * Handles errors for this subscriber.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *   The event to process.
    */
-  public function onException(GetResponseForExceptionEvent $event) {
+  public function onException(\Symfony\Component\HttpKernel\Event\ExceptionEvent $event) {
     // Don't log http exceptions.
-    if ($event->getException() instanceof HttpExceptionInterface) {
+    if ($event->getThrowable() instanceof HttpExceptionInterface) {
       return;
     }
     if (\Drupal::config('new_relic_rpm.settings')->get('override_exception_handler')) {
       // Forward the exception to New Relic.
-      $this->adapter->logException($event->getException());
+      $this->adapter->logException($event->getThrowable());
     }
   }
 
diff --git a/src/EventSubscriber/NewRelicRequestSubscriber.php b/src/EventSubscriber/NewRelicRequestSubscriber.php
index ba3ca62..0166800 100644
--- a/src/EventSubscriber/NewRelicRequestSubscriber.php
+++ b/src/EventSubscriber/NewRelicRequestSubscriber.php
@@ -95,10 +95,10 @@ class NewRelicRequestSubscriber implements EventSubscriberInterface {
    *
    * Naming is based on the current path and route.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The current response event for the page.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
 
     // If this is a sub request, only process it if there was no master
     // request yet. In that case, it is probably a page not found or access
diff --git a/tests/src/Functional/AdminUiTest.php b/tests/src/Functional/AdminUiTest.php
index 3af735f..63bf69b 100644
--- a/tests/src/Functional/AdminUiTest.php
+++ b/tests/src/Functional/AdminUiTest.php
@@ -36,7 +36,7 @@ class AdminUiTest extends BrowserTestBase {
    *
    * @throws \Drupal\Core\Entity\EntityStorageException
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $admin = $this->createUser([], NULL, TRUE);
@@ -52,6 +52,7 @@ class AdminUiTest extends BrowserTestBase {
 
   /**
    * Tests the settings page elements.
+   * @doesNotPerformAssertions
    */
   public function testSettingsPage() {
     $this->drupalGet('/admin/config/development/new-relic');
diff --git a/tests/src/Unit/EventListener/RoutingTransactionNameSubscriberTest.php b/tests/src/Unit/EventListener/RoutingTransactionNameSubscriberTest.php
index 2516d2f..3579e59 100644
--- a/tests/src/Unit/EventListener/RoutingTransactionNameSubscriberTest.php
+++ b/tests/src/Unit/EventListener/RoutingTransactionNameSubscriberTest.php
@@ -17,6 +17,7 @@ use Symfony\Component\Routing\RouteCollection;
  */
 class RoutingTransactionNameSubscriberTest extends UnitTestCase {
 
+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * @covers ::addTransactionNamesToRoutes
    */
diff --git a/tests/src/Unit/Logger/NewRelicLoggerTest.php b/tests/src/Unit/Logger/NewRelicLoggerTest.php
index 6f25b85..87e9d08 100644
--- a/tests/src/Unit/Logger/NewRelicLoggerTest.php
+++ b/tests/src/Unit/Logger/NewRelicLoggerTest.php
@@ -15,6 +15,7 @@ use Prophecy\Argument;
  */
 class NewRelicLoggerTest extends UnitTestCase {
 
+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * The default request context for tests.
    *
@@ -51,6 +52,7 @@ class NewRelicLoggerTest extends UnitTestCase {
 
   /**
    * Test that log levels requested are logged.
+   * @doesNotPerformAssertions
    */
   public function testLogsSelectedLevelMessages() {
     $adapter = $this->prophesize(NewRelicAdapterInterface::class);
@@ -63,6 +65,7 @@ class NewRelicLoggerTest extends UnitTestCase {
 
   /**
    * Test that log levels not requested are ignored.
+   * @doesNotPerformAssertions
    */
   public function testIgnoresUnselectedLevelMessages() {
     $adapter = $this->prophesize(NewRelicAdapterInterface::class);
@@ -92,6 +95,7 @@ class NewRelicLoggerTest extends UnitTestCase {
    * Test that we log a message.
    *
    * @dataProvider getMessageTests
+   * @doesNotPerformAssertions
    */
   public function testCreatesMessage($expectedPart) {
     $adapter = $this->prophesize(NewRelicAdapterInterface::class);
@@ -105,6 +109,7 @@ class NewRelicLoggerTest extends UnitTestCase {
 
   /**
    * Test that an unknown log level is handled.
+   * @doesNotPerformAssertions
    */
   public function testHandlesUnknownLevel() {
     $adapter = $this->prophesize(NewRelicAdapterInterface::class);
@@ -118,6 +123,7 @@ class NewRelicLoggerTest extends UnitTestCase {
 
   /**
    * Test that exceptions are being passed to the adapter.
+   * @doesNotPerformAssertions
    */
   public function testExceptionPassing() {
     $exception = new \Exception('Some exception to be logged.');
diff --git a/tests/src/Unit/RouteEnhancer/TransactionNameEnhancerTest.php b/tests/src/Unit/RouteEnhancer/TransactionNameEnhancerTest.php
index 82df44b..ad4f149 100644
--- a/tests/src/Unit/RouteEnhancer/TransactionNameEnhancerTest.php
+++ b/tests/src/Unit/RouteEnhancer/TransactionNameEnhancerTest.php
@@ -17,6 +17,7 @@ use Symfony\Component\Routing\Route;
  */
 class TransactionNameEnhancerTest extends UnitTestCase {
 
+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * Test callback for _translation_name_callback with known response.
    *
