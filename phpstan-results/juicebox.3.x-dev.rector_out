[parsing] modules/contrib/juicebox/juicebox.api.php
[refactoring] modules/contrib/juicebox/juicebox.api.php
[post rectors] modules/contrib/juicebox/juicebox.api.php
[print] modules/contrib/juicebox/juicebox.api.php
[parsing] modules/contrib/juicebox/juicebox.install
[refactoring] modules/contrib/juicebox/juicebox.install
[post rectors] modules/contrib/juicebox/juicebox.install
[print] modules/contrib/juicebox/juicebox.install
[parsing] modules/contrib/juicebox/juicebox.module
[refactoring] modules/contrib/juicebox/juicebox.module
[post rectors] modules/contrib/juicebox/juicebox.module
[print] modules/contrib/juicebox/juicebox.module
[parsing] modules/contrib/juicebox/src/Controller/JuiceboxXmlControllerBase.php
[refactoring] modules/contrib/juicebox/src/Controller/JuiceboxXmlControllerBase.php
[post rectors] modules/contrib/juicebox/src/Controller/JuiceboxXmlControllerBase.php
[print] modules/contrib/juicebox/src/Controller/JuiceboxXmlControllerBase.php
[parsing] modules/contrib/juicebox/src/Controller/JuiceboxXmlControllerField.php
[refactoring] modules/contrib/juicebox/src/Controller/JuiceboxXmlControllerField.php
[post rectors] modules/contrib/juicebox/src/Controller/JuiceboxXmlControllerField.php
[print] modules/contrib/juicebox/src/Controller/JuiceboxXmlControllerField.php
[parsing] modules/contrib/juicebox/src/Controller/JuiceboxXmlControllerViewsStyle.php
[refactoring] modules/contrib/juicebox/src/Controller/JuiceboxXmlControllerViewsStyle.php
[post rectors] modules/contrib/juicebox/src/Controller/JuiceboxXmlControllerViewsStyle.php
[print] modules/contrib/juicebox/src/Controller/JuiceboxXmlControllerViewsStyle.php
[parsing] modules/contrib/juicebox/src/Form/SettingsForm.php
[refactoring] modules/contrib/juicebox/src/Form/SettingsForm.php
[post rectors] modules/contrib/juicebox/src/Form/SettingsForm.php
[print] modules/contrib/juicebox/src/Form/SettingsForm.php
[parsing] modules/contrib/juicebox/src/JuiceboxFormatter.php
[refactoring] modules/contrib/juicebox/src/JuiceboxFormatter.php
[post rectors] modules/contrib/juicebox/src/JuiceboxFormatter.php
[print] modules/contrib/juicebox/src/JuiceboxFormatter.php
[refactoring] modules/contrib/juicebox/src/JuiceboxFormatter.php
[post rectors] modules/contrib/juicebox/src/JuiceboxFormatter.php
[print] modules/contrib/juicebox/src/JuiceboxFormatter.php
[parsing] modules/contrib/juicebox/src/JuiceboxFormatterInterface.php
[refactoring] modules/contrib/juicebox/src/JuiceboxFormatterInterface.php
[post rectors] modules/contrib/juicebox/src/JuiceboxFormatterInterface.php
[print] modules/contrib/juicebox/src/JuiceboxFormatterInterface.php
[parsing] modules/contrib/juicebox/src/JuiceboxGallery.php
[refactoring] modules/contrib/juicebox/src/JuiceboxGallery.php
[post rectors] modules/contrib/juicebox/src/JuiceboxGallery.php
[print] modules/contrib/juicebox/src/JuiceboxGallery.php
[parsing] modules/contrib/juicebox/src/JuiceboxGalleryInterface.php
[refactoring] modules/contrib/juicebox/src/JuiceboxGalleryInterface.php
[post rectors] modules/contrib/juicebox/src/JuiceboxGalleryInterface.php
[print] modules/contrib/juicebox/src/JuiceboxGalleryInterface.php
[parsing] modules/contrib/juicebox/src/Plugin/Derivative/JuiceboxConfFieldContextualLinks.php
[refactoring] modules/contrib/juicebox/src/Plugin/Derivative/JuiceboxConfFieldContextualLinks.php
[post rectors] modules/contrib/juicebox/src/Plugin/Derivative/JuiceboxConfFieldContextualLinks.php
[print] modules/contrib/juicebox/src/Plugin/Derivative/JuiceboxConfFieldContextualLinks.php
[parsing] modules/contrib/juicebox/src/Plugin/Field/FieldFormatter/JuiceboxFieldFormatter.php
[refactoring] modules/contrib/juicebox/src/Plugin/Field/FieldFormatter/JuiceboxFieldFormatter.php
[post rectors] modules/contrib/juicebox/src/Plugin/Field/FieldFormatter/JuiceboxFieldFormatter.php
[print] modules/contrib/juicebox/src/Plugin/Field/FieldFormatter/JuiceboxFieldFormatter.php
[parsing] modules/contrib/juicebox/src/Plugin/views/style/JuiceboxDisplayStyle.php
[refactoring] modules/contrib/juicebox/src/Plugin/views/style/JuiceboxDisplayStyle.php
[post rectors] modules/contrib/juicebox/src/Plugin/views/style/JuiceboxDisplayStyle.php
[print] modules/contrib/juicebox/src/Plugin/views/style/JuiceboxDisplayStyle.php
[parsing] modules/contrib/juicebox/templates/juicebox.theme.inc
[refactoring] modules/contrib/juicebox/templates/juicebox.theme.inc
[post rectors] modules/contrib/juicebox/templates/juicebox.theme.inc
[print] modules/contrib/juicebox/templates/juicebox.theme.inc
[parsing] modules/contrib/juicebox/tests/src/Functional/JuiceboxCaseTestBase.php
[refactoring] modules/contrib/juicebox/tests/src/Functional/JuiceboxCaseTestBase.php
[post rectors] modules/contrib/juicebox/tests/src/Functional/JuiceboxCaseTestBase.php
[print] modules/contrib/juicebox/tests/src/Functional/JuiceboxCaseTestBase.php
[refactoring] modules/contrib/juicebox/tests/src/Functional/JuiceboxCaseTestBase.php
[post rectors] modules/contrib/juicebox/tests/src/Functional/JuiceboxCaseTestBase.php
[print] modules/contrib/juicebox/tests/src/Functional/JuiceboxCaseTestBase.php
[parsing] modules/contrib/juicebox/tests/src/Functional/JuiceboxConfCase.php
[refactoring] modules/contrib/juicebox/tests/src/Functional/JuiceboxConfCase.php
[post rectors] modules/contrib/juicebox/tests/src/Functional/JuiceboxConfCase.php
[print] modules/contrib/juicebox/tests/src/Functional/JuiceboxConfCase.php
[refactoring] modules/contrib/juicebox/tests/src/Functional/JuiceboxConfCase.php
[post rectors] modules/contrib/juicebox/tests/src/Functional/JuiceboxConfCase.php
[print] modules/contrib/juicebox/tests/src/Functional/JuiceboxConfCase.php
[parsing] modules/contrib/juicebox/tests/src/Functional/JuiceboxConfGlobalCase.php
[refactoring] modules/contrib/juicebox/tests/src/Functional/JuiceboxConfGlobalCase.php
[post rectors] modules/contrib/juicebox/tests/src/Functional/JuiceboxConfGlobalCase.php
[print] modules/contrib/juicebox/tests/src/Functional/JuiceboxConfGlobalCase.php
[refactoring] modules/contrib/juicebox/tests/src/Functional/JuiceboxConfGlobalCase.php
[post rectors] modules/contrib/juicebox/tests/src/Functional/JuiceboxConfGlobalCase.php
[print] modules/contrib/juicebox/tests/src/Functional/JuiceboxConfGlobalCase.php
[parsing] modules/contrib/juicebox/tests/src/Functional/JuiceboxFieldFormatterCase.php
[refactoring] modules/contrib/juicebox/tests/src/Functional/JuiceboxFieldFormatterCase.php
[post rectors] modules/contrib/juicebox/tests/src/Functional/JuiceboxFieldFormatterCase.php
[print] modules/contrib/juicebox/tests/src/Functional/JuiceboxFieldFormatterCase.php
[refactoring] modules/contrib/juicebox/tests/src/Functional/JuiceboxFieldFormatterCase.php
[post rectors] modules/contrib/juicebox/tests/src/Functional/JuiceboxFieldFormatterCase.php
[print] modules/contrib/juicebox/tests/src/Functional/JuiceboxFieldFormatterCase.php
[parsing] modules/contrib/juicebox/tests/src/Functional/JuiceboxFileCase.php
[refactoring] modules/contrib/juicebox/tests/src/Functional/JuiceboxFileCase.php
[post rectors] modules/contrib/juicebox/tests/src/Functional/JuiceboxFileCase.php
[print] modules/contrib/juicebox/tests/src/Functional/JuiceboxFileCase.php
[refactoring] modules/contrib/juicebox/tests/src/Functional/JuiceboxFileCase.php
[post rectors] modules/contrib/juicebox/tests/src/Functional/JuiceboxFileCase.php
[print] modules/contrib/juicebox/tests/src/Functional/JuiceboxFileCase.php
[parsing] modules/contrib/juicebox/tests/src/Functional/JuiceboxSubRequestCase.php
[refactoring] modules/contrib/juicebox/tests/src/Functional/JuiceboxSubRequestCase.php
[post rectors] modules/contrib/juicebox/tests/src/Functional/JuiceboxSubRequestCase.php
[print] modules/contrib/juicebox/tests/src/Functional/JuiceboxSubRequestCase.php
[refactoring] modules/contrib/juicebox/tests/src/Functional/JuiceboxSubRequestCase.php
[post rectors] modules/contrib/juicebox/tests/src/Functional/JuiceboxSubRequestCase.php
[print] modules/contrib/juicebox/tests/src/Functional/JuiceboxSubRequestCase.php
[parsing] modules/contrib/juicebox/tests/src/Functional/JuiceboxViewsCase.php
[refactoring] modules/contrib/juicebox/tests/src/Functional/JuiceboxViewsCase.php
[post rectors] modules/contrib/juicebox/tests/src/Functional/JuiceboxViewsCase.php
[print] modules/contrib/juicebox/tests/src/Functional/JuiceboxViewsCase.php
[refactoring] modules/contrib/juicebox/tests/src/Functional/JuiceboxViewsCase.php
[post rectors] modules/contrib/juicebox/tests/src/Functional/JuiceboxViewsCase.php
[print] modules/contrib/juicebox/tests/src/Functional/JuiceboxViewsCase.php

8 files with changes
====================

1) modules/contrib/juicebox/tests/src/Functional/JuiceboxViewsCase.php:49

    ---------- begin diff ----------
@@ @@
   /**
    * Define setup tasks.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create and login user.
@@ @@
     $this->drupalLogin($this->webUser);
     $node = $this->node;
     $xml_path = 'juicebox/xml/viewsstyle/juicebox_views_test/page_2';
-    $xml_url = \Drupal::url('juicebox.xml_viewsstyle',
-     ['viewName' => 'juicebox_views_test', 'displayName' => 'page_2']);
+    $xml_url = \Drupal\Core\Url::fromRoute('juicebox.xml_viewsstyle', ['viewName' => 'juicebox_views_test', 'displayName' => 'page_2'])->toString();
     // Get the urls to the test image and thumb derivative used by default.
     $uri = File::load($node->{$this->instFieldName}[0]->target_id)->getFileUri();
-    $test_image_url = entity_load('image_style', 'juicebox_medium')->buildUrl($uri);
-    $test_thumb_url = entity_load('image_style', 'juicebox_square_thumb')->buildUrl($uri);
+    $test_image_url = \Drupal::service('entity_type.manager')->getStorage('image_style')->load('juicebox_medium')->buildUrl($uri);
+    $test_thumb_url = \Drupal::service('entity_type.manager')->getStorage('image_style')->load('juicebox_square_thumb')->buildUrl($uri);
     // Check for correct embed markup.
     $this->drupalGet('juicebox-views-test-advanced');
-    $this->assertRaw(trim(json_encode(['configUrl' => $xml_url]), '{}"'), 'Gallery setting found in Drupal.settings.');
-    $this->assertRaw('juicebox-views-test--page-2', 'Embed code wrapper found.');
-    $this->assertRaw(Html::escape(file_url_transform_relative($test_image_url)), 'Test image found in embed code');
+    $this->assertSession()->responseContains(trim(json_encode(['configUrl' => $xml_url]), '{}"'));
+    $this->assertSession()->responseContains('juicebox-views-test--page-2');
+    $this->assertSession()->responseContains(Html::escape(\Drupal::service('file_url_generator')->transformRelative($test_image_url)));
     // Check for correct XML.
     $this->drupalGet($xml_path);
-    $this->assertRaw('<?xml version="1.0" encoding="UTF-8"?>', 'Valid XML detected.');
-    $this->assertRaw('imageURL="' . Html::escape($test_image_url), 'Test image found in XML.');
-    $this->assertRaw('thumbURL="' . Html::escape($test_thumb_url), 'Test thumbnail found in XML.');
+    $this->assertSession()->responseContains('<?xml version="1.0" encoding="UTF-8"?>');
+    $this->assertSession()->responseContains('imageURL="' . Html::escape($test_image_url));
+    $this->assertSession()->responseContains('thumbURL="' . Html::escape($test_thumb_url));
     // Logout and test that XML access is restricted. Note that this test view
     // is setup to limit view access only to admins.
     $this->drupalLogout();
     $this->drupalGet('juicebox/xml/viewsstyle/juicebox_views_test/page_2');
-    $this->assertResponse(403, 'XML access blocked for access-restricted view.');
+    $this->assertSession()->statusCodeEquals(403, 'XML access blocked for access-restricted view.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * AssertResponseRector
 * DrupalURLRector
 * EntityLoadRector
 * FileUrlTransformRelativeRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/juicebox/tests/src/Functional/JuiceboxSubRequestCase.php:61

    ---------- begin diff ----------
@@ @@
   /**
    * Define setup tasks.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // Create and login user.
     $this->webUser = $this->drupalCreateUser([
@@ @@
   public function testSubRequestDependent() {
     $node = $this->node;
     $xml_path = 'juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/_custom';
-    $xml_url = \Drupal::url('juicebox.xml_field', [
+    $xml_url = \Drupal\Core\Url::fromRoute('juicebox.xml_field', [
       'entityType' => 'node',
       'entityId' => $node->id(),
       'fieldName' => $this->instFieldName,
       'displayName' => '_custom',
-    ]);
+    ])->toString();
     // Get the urls to the test image and thumb derivative used by default.
     $uri = File::load($node->{$this->instFieldName}[0]->target_id)->getFileUri();
-    $test_image_url = entity_load('image_style', 'juicebox_medium')->buildUrl($uri);
-    $test_thumb_url = entity_load('image_style', 'juicebox_square_thumb')->buildUrl($uri);
+    $test_image_url = \Drupal::service('entity_type.manager')->getStorage('image_style')->load('juicebox_medium')->buildUrl($uri);
+    $test_thumb_url = \Drupal::service('entity_type.manager')->getStorage('image_style')->load('juicebox_square_thumb')->buildUrl($uri);
     // Check for correct embed markup. This will also prime the cache.
     $content = $this->drupalGet('juicebox_test_row_formatter');
-    $this->assertRaw(trim(json_encode(['configUrl' => $xml_url]), '{}"'), 'Gallery setting found in Drupal.settings.');
-    $this->assertRaw('id="node--' . $node->id() . '--' . str_replace('_', '-', $this->instFieldName) . '---custom"', 'Embed code wrapper found.');
-    $this->assertRaw(Html::escape($test_image_url), 'Test image found in embed code');
+    $this->assertSession()->responseContains(trim(json_encode(['configUrl' => $xml_url]), '{}"'));
+    $this->assertSession()->responseContains('id="node--' . $node->id() . '--' . str_replace('_', '-', $this->instFieldName) . '---custom"');
+    $this->assertSession()->responseContains(Html::escape($test_image_url));
     // Extract the xml-source values from the XML.
     $matches = [];
     // In the pattern below we have to use four (yeah, FOUR) backslashes to
@@ @@
         'xml-source-id' => $matches[2],
       ],
     ]);
-    $this->assertRaw('<?xml version="1.0" encoding="UTF-8"?>', 'Valid XML detected.');
-    $this->assertRaw('imageURL="' . Html::escape($test_image_url), 'Test image found in XML.' . $test_image_url);
-    $this->assertRaw('thumbURL="' . Html::escape($test_thumb_url), 'Test thumbnail found in XML.' . $test_thumb_url);
-    $this->assertRaw('backgroundcolor="green"', 'Custom background setting from pseudo field instance config found in XML.');
+    $this->assertSession()->responseContains('<?xml version="1.0" encoding="UTF-8"?>');
+    $this->assertSession()->responseContains('imageURL="' . Html::escape($test_image_url));
+    $this->assertSession()->responseContains('thumbURL="' . Html::escape($test_thumb_url));
+    $this->assertSession()->responseContains('backgroundcolor="green"');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * DrupalURLRector
 * EntityLoadRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/juicebox/tests/src/Functional/JuiceboxFileCase.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Define setup tasks.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // Create and login user.
     $this->webUser = $this->drupalCreateUser([
@@ @@
     $this->createNodeWithFile();
     $node = $this->node;
     $xml_path = 'juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full';
-    $xml_url = \Drupal::url('juicebox.xml_field', [
+    $xml_url = \Drupal\Core\Url::fromRoute('juicebox.xml_field', [
       'entityType' => 'node',
       'entityId' => $node->id(),
       'fieldName' => $this->instFieldName,
       'displayName' => 'full',
-    ]);
+    ])->toString();
     // Get the urls to the test image and thumb derivative used by default.
     $uri = File::load($node->{$this->instFieldName}[0]->target_id)->getFileUri();
-    $test_image_url = entity_load('image_style', 'juicebox_medium')->buildUrl($uri);
-    $test_thumb_url = entity_load('image_style', 'juicebox_square_thumb')->buildUrl($uri);
+    $test_image_url = \Drupal::service('entity_type.manager')->getStorage('image_style')->load('juicebox_medium')->buildUrl($uri);
+    $test_thumb_url = \Drupal::service('entity_type.manager')->getStorage('image_style')->load('juicebox_square_thumb')->buildUrl($uri);
     // Check for correct embed markup as anon user.
     $this->drupalLogout();
     $this->drupalGet('node/' . $node->id());
-    $this->assertRaw(trim(json_encode(['configUrl' => $xml_url]), '{}"'), 'Gallery setting found in Drupal.settings.');
-    $this->assertRaw('id="node--' . $node->id() . '--' . str_replace('_', '-', $this->instFieldName) . '--full"', 'Embed code wrapper found.');
-    $this->assertRaw(Html::escape(file_url_transform_relative($test_image_url)), 'Test image found in embed code');
+    $this->assertSession()->responseContains(trim(json_encode(['configUrl' => $xml_url]), '{}"'));
+    $this->assertSession()->responseContains('id="node--' . $node->id() . '--' . str_replace('_', '-', $this->instFieldName) . '--full"');
+    $this->assertSession()->responseContains(Html::escape(\Drupal::service('file_url_generator')->transformRelative($test_image_url)));
     // Check for correct XML.
     $this->drupalGet($xml_path);
-    $this->assertRaw('<?xml version="1.0" encoding="UTF-8"?>', 'Valid XML detected.');
-    $this->assertRaw('imageURL="' . Html::escape($test_image_url), 'Test image found in XML.');
-    $this->assertRaw('thumbURL="' . Html::escape($test_thumb_url), 'Test thumbnail found in XML.');
-    $this->assertRaw('<juicebox gallerywidth="100%" galleryheight="100%" backgroundcolor="#222222" textcolor="rgba(255,255,255,1)" thumbframecolor="rgba(255,255,255,.5)" showopenbutton="TRUE" showexpandbutton="TRUE" showthumbsbutton="TRUE" usethumbdots="FALSE" usefullscreenexpand="FALSE">', 'Expected default configuration options set in XML.');
+    $this->assertSession()->responseContains('<?xml version="1.0" encoding="UTF-8"?>');
+    $this->assertSession()->responseContains('imageURL="' . Html::escape($test_image_url));
+    $this->assertSession()->responseContains('thumbURL="' . Html::escape($test_thumb_url));
+    $this->assertSession()->responseContains('<juicebox gallerywidth="100%" galleryheight="100%" backgroundcolor="#222222" textcolor="rgba(255,255,255,1)" thumbframecolor="rgba(255,255,255,.5)" showopenbutton="TRUE" showexpandbutton="TRUE" showthumbsbutton="TRUE" usethumbdots="FALSE" usefullscreenexpand="FALSE">');
   }

   /**
@@ @@
     $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
     // With the default settings we expect an "application-octet-stream.png"
     // value for both the image and the thumbnail.
-    $this->assertPattern('|imageURL=.*text.png.*thumbURL=.*text.png|', 'Non-image mimetype placeholder found for image and thumbnail.');
+    $this->assertSession()->responseMatches('|imageURL=.*text.png.*thumbURL=.*text.png|', 'Non-image mimetype placeholder found for image and thumbnail.');
     // Change the file handling option to "skip".
     $this->drupalLogin($this->webUser);
     $this->drupalGet('admin/structure/types/manage/' . $this->instBundle . '/display');
@@ @@
     ];
     $this->submitForm($edit, 'Save');
     $savemsg = $this->t('Gallery configuration changes saved.');
-    $this->assertText($savemsg);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($savemsg);
     // Re-check the XML. This time no image should appear at all.
     $this->drupalLogout();
     $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
-    $this->assertRaw('<?xml version="1.0" encoding="UTF-8"?>', 'Valid XML detected.');
-    $this->assertNoRaw('<image', 'Non-image items was skipped.');
+    $this->assertSession()->responseContains('<?xml version="1.0" encoding="UTF-8"?>');
+    $this->assertSession()->responseNotContains('<image');
     // @todo , Check other incompatible_file_action combinations.
   }
    ----------- end diff -----------

Applied rules:
 * AssertNoRawRector
 * AssertPatternRector
 * AssertRawRector
 * AssertTextRector
 * DrupalURLRector
 * EntityLoadRector
 * FileUrlTransformRelativeRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/juicebox/tests/src/Functional/JuiceboxFieldFormatterCase.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Define setup tasks.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // Create and login user.
     $this->webUser = $this->drupalCreateUser([
@@ @@
     // Do a set of control requests as an anon user that will also prime any
     // caches.
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200, 'Control request of test node was successful.');
+    $this->assertSession()->statusCodeEquals(200, 'Control request of test node was successful.');
     $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
-    $this->assertResponse(200, 'Control request of XML was successful.');
+    $this->assertSession()->statusCodeEquals(200, 'Control request of XML was successful.');
     // Alter field formatter specific settings to contain custom values.
     $this->drupalLogin($this->webUser);
     $this->drupalGet('admin/structure/types/manage/' . $this->instBundle . '/display');
@@ @@
       'fields[' . $this->instFieldName . '][settings_edit_form][settings][title_source]' => 'title',
     ];
     $this->submitForm($edit, 'Save');
-    $this->assertText($this->t('Your settings have been saved.'), 'Gallery configuration changes saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Your settings have been saved.'));
     // Get the urls to the image and thumb derivatives expected.
     $uri = File::load($node->{$this->instFieldName}[0]->target_id)->getFileUri();
-    $test_formatted_image_url = file_create_url($uri);
-    $test_formatted_thumb_url = entity_load('image_style', 'thumbnail')->buildUrl($uri);
+    $test_formatted_image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
+    $test_formatted_thumb_url = \Drupal::service('entity_type.manager')->getStorage('image_style')->load('thumbnail')->buildUrl($uri);
     // Check for correct embed markup as anon user.
     $this->drupalLogout();
     $this->drupalGet('node/' . $node->id());
-    $this->assertRaw(Html::escape(file_url_transform_relative($test_formatted_image_url)), 'Test styled image found in embed code');
+    $this->assertSession()->responseContains(Html::escape(\Drupal::service('file_url_generator')->transformRelative($test_formatted_image_url)));
     // Check for correct XML.
     $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
-    $this->assertRaw('imageURL="' . Html::escape($test_formatted_image_url), 'Test styled image found in XML.');
-    $this->assertRaw('thumbURL="' . Html::escape($test_formatted_thumb_url), 'Test styled thumbnail found in XML.');
+    $this->assertSession()->responseContains('imageURL="' . Html::escape($test_formatted_image_url));
+    $this->assertSession()->responseContains('thumbURL="' . Html::escape($test_formatted_thumb_url));
     // Note the intended title and caption text does not contain any block-level
     // tags as long as the global title and caption output filter is working.
     // So this acts as a test for that feature as well.
-    $this->assertRaw('<title><![CDATA[Some title text for field ' . $this->instFieldName . ' on node ' . $node->id() . ']]></title>', 'Image title text found in XML');
-    $this->assertRaw('<caption><![CDATA[Some alt text for field ' . $this->instFieldName . ' on node ' . $node->id() . ' &lt;strong&gt;with formatting&lt;/strong&gt;]]></caption>', 'Image caption text found in XML');
+    $this->assertSession()->responseContains('<title><![CDATA[Some title text for field ' . $this->instFieldName . ' on node ' . $node->id() . ']]></title>');
+    $this->assertSession()->responseContains('<caption><![CDATA[Some alt text for field ' . $this->instFieldName . ' on node ' . $node->id() . ' &lt;strong&gt;with formatting&lt;/strong&gt;]]></caption>');
     // Now that we have title and caption data set, also ensure this text can
     // be found in search results. First we update the search index by marking
     // our test node as dirty and running cron.
@@ @@
     $this->cronRun();
     $this->drupalGet('search');
     $this->submitForm(['keys' => '"Some title text"'], 'Search');
-    $this->assertText('Test Juicebox Gallery Node', 'Juicebox node found in search for title text.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Test Juicebox Gallery Node');
     // The Juicebox javascript should have been excluded from the search results
     // page.
-    $this->assertNoRaw('"configUrl":"', 'Juicebox Drupal.settings vars not included on search result page.');
+    $this->assertSession()->responseNotContains('"configUrl":"');
   }

   /**
@@ @@
     $node = $this->node;
     // The node and XML should be initially accessible (control test).
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200, 'Access allowed for published node.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed for published node.');
     $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
-    $this->assertRaw('<?xml version="1.0" encoding="UTF-8"', 'XML access allowed to published node (valid XML detected).');
+    $this->assertSession()->responseContains('<?xml version="1.0" encoding="UTF-8"');
     // Now unpublish the node as a way of making it inaccessible to
     // non-privileged users. There are unlimited ways that access can be
     // restricted, such as other perm settings, contrb module controls for
@@ @@
     $node->save();
     // Re-check access.
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(403, 'Access blocked for unpublished node.');
+    $this->assertSession()->statusCodeEquals(403, 'Access blocked for unpublished node.');
     $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
-    $this->assertResponse(403, 'XML access blocked for unpublished node.');
+    $this->assertSession()->statusCodeEquals(403, 'XML access blocked for unpublished node.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoRawRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * EntityLoadRector
 * FileCreateUrlRector
 * FileUrlTransformRelativeRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/juicebox/tests/src/Functional/JuiceboxConfGlobalCase.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Define setup tasks.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // Create and login user.
     // @todo Reactivate translation perms when issue #2573975 is resolved.
@@ @@
     // Do a control request of the XML as an anon user that will also prime any
     // caches.
     $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
-    $this->assertResponse(200, 'Control request of XML was successful.');
+    $this->assertSession()->statusCodeEquals(200, 'Control request of XML was successful.');
     // Enable optional global settings.
     $this->drupalLogin($this->webUser);
     $edit = [
@@ @@
     ];
     $this->drupalGet('admin/config/media/juicebox');
     $this->submitForm($edit, 'Save configuration');
-    $this->assertText($this->t('The Juicebox configuration options have been saved'), 'Custom global options saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('The Juicebox configuration options have been saved'));
     // Now check the resulting XML again as an anon user.
     $this->drupalLogout();
     $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
     // Check the the XML now returns an 'Access-Control-Allow-Origin' header
     // for CORS support.
-    $this->assertEqual($this->drupalGetHeader('Access-Control-Allow-Origin'), '*', 'Expected CORS header found.');
+    $this->assertEquals($this->drupalGetHeader('Access-Control-Allow-Origin'), '*', 'Expected CORS header found.');
   }

   /**
@@ @@
     // Do a control request of the XML as an anon user that will also prime any
     // caches.
     $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
-    $this->assertResponse(200, 'Control request of XML was successful.');
+    $this->assertSession()->statusCodeEquals(200, 'Control request of XML was successful.');
     // We want to be able to set translations.
     $this->drupalLogin($this->webUser);
     $edit = [
@@ @@
     ];
     $this->drupalGet('admin/config/media/juicebox');
     $this->submitForm($edit, 'Save configuration');
-    $this->assertText($this->t('The Juicebox configuration options have been saved'), 'Custom global options saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('The Juicebox configuration options have been saved'));
     // We need to set a translation for our languagelist string. There is
     // probably a good way to do this directly in code, but for now it's fairly
     // easy to just brute-force it via the UI. First we need to visit the
@@ @@
     $this->drupalGet('admin/config/media/juicebox');
     $this->submitForm($edit, 'Filter');
     $matches = [];
-    $this->assertTrue(preg_match('/name="strings\[([0-9]+)\]\[translations\]\[0\]"/', $this->getRawContent(), $matches), 'Languagelist base string is available for translation.');
+    $this->assertTrue(preg_match('/name="strings\[([0-9]+)\]\[translations\]\[0\]"/', $this->getSession()->getPage()->getContent(), $matches), 'Languagelist base string is available for translation.');
     $edit = [
       'strings[' . $matches[1] . '][translations][0]' => 'Translated|Lang|List',
     ];
     $this->submitForm($edit, 'Save translations');
-    $this->assertText($this->t('The strings have been saved'), 'Languagelist translation saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('The strings have been saved'));
     // Now check the resulting XML again as an anon user.
     $this->drupalLogout();
     $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
     // Check that the languagelist configuration option was both included and
     // translated in the XML.
-    $this->assertRaw('languagelist="Translated|Lang|List"', 'Translated languagelist value found in XML.');
+    $this->assertSession()->responseContains('languagelist="Translated|Lang|List"');
   }

   /**
@@ @@
     // Do a control request of the XML as an anon user that will also prime any
     // caches.
     $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
-    $this->assertResponse(200, 'Control request of XML was successful.');
+    $this->assertSession()->statusCodeEquals(200, 'Control request of XML was successful.');
     // Customize one of our global multi-size settings from the default for a
     // true end-to-end test.
     $this->drupalLogin($this->webUser);
@@ @@
     ];
     $this->drupalGet('admin/config/media/juicebox');
     $this->submitForm($edit, 'Save configuration');
-    $this->assertText($this->t('The Juicebox configuration options have been saved'), 'Custom global options saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('The Juicebox configuration options have been saved'));
     // Alter field formatter specific settings to use multi-size style.
     $this->drupalGet('admin/structure/types/manage/' . $this->instBundle . '/display');
     $this->submitForm([], $this->instFieldName . '_settings_edit', 'entity-view-display-edit-form');
@@ @@
       'fields[' . $this->instFieldName . '][settings_edit_form][settings][image_style]' => 'juicebox_multisize',
     ];
     $this->submitForm($edit, 'Save');
-    $this->assertText($this->t('Your settings have been saved.'), 'Gallery configuration changes saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Your settings have been saved.'));
     // Calculate the multi-size styles that should be found in the XML.
     $uri = File::load($node->{$this->instFieldName}[0]->target_id)->getFileUri();
-    $formatted_image_small = entity_load('image_style', 'juicebox_small')->buildUrl($uri);
-    $formatted_image_medium = entity_load('image_style', 'juicebox_medium')->buildUrl($uri);
-    $formatted_image_large = entity_load('image_style', 'large')->buildUrl($uri);
+    $formatted_image_small = \Drupal::service('entity_type.manager')->getStorage('image_style')->load('juicebox_small')->buildUrl($uri);
+    $formatted_image_medium = \Drupal::service('entity_type.manager')->getStorage('image_style')->load('juicebox_medium')->buildUrl($uri);
+    $formatted_image_large = \Drupal::service('entity_type.manager')->getStorage('image_style')->load('large')->buildUrl($uri);
     // Now check the resulting XML again as an anon user.
     $this->drupalLogout();
     $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
     // Check that the expected images are found in the XML.
-    $this->assertRaw('smallImageURL="' . Html::escape($formatted_image_small), 'Test small image found in XML.');
-    $this->assertRaw('imageURL="' . Html::escape($formatted_image_medium), 'Test medium image found in XML.');
-    $this->assertRaw('largeImageURL="' . Html::escape($formatted_image_large), 'Test large image found in XML.');
+    $this->assertSession()->responseContains('smallImageURL="' . Html::escape($formatted_image_small));
+    $this->assertSession()->responseContains('imageURL="' . Html::escape($formatted_image_medium));
+    $this->assertSession()->responseContains('largeImageURL="' . Html::escape($formatted_image_large));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * EntityLoadRector
 * GetRawContentRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/juicebox/tests/src/Functional/JuiceboxConfCase.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Define setup tasks.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // Create and login user.
     $this->webUser = $this->drupalCreateUser([
@@ @@
     // also prime the cache in order to test cache tag invalidation once the
     // settings are altered.
     $this->drupalGet('node/' . $node->id());
-    $this->assertRaw(trim(json_encode([
+    $this->assertSession()->responseContains(trim(json_encode([
       'gallerywidth' => '100%',
       'galleryheight' => '100%',
       'backgroundcolor' => '#222222',
-    ]), '{}'), 'Expected default configuration options found in Drupal.settings.');
+    ]), '{}'));
     $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
-    $this->assertRaw('<juicebox gallerywidth="100%" galleryheight="100%" backgroundcolor="#222222" textcolor="rgba(255,255,255,1)" thumbframecolor="rgba(255,255,255,.5)" showopenbutton="TRUE" showexpandbutton="TRUE" showthumbsbutton="TRUE" usethumbdots="FALSE" usefullscreenexpand="FALSE">', 'Expected default configuration options set in XML.');
+    $this->assertSession()->responseContains('<juicebox gallerywidth="100%" galleryheight="100%" backgroundcolor="#222222" textcolor="rgba(255,255,255,1)" thumbframecolor="rgba(255,255,255,.5)" showopenbutton="TRUE" showexpandbutton="TRUE" showthumbsbutton="TRUE" usethumbdots="FALSE" usefullscreenexpand="FALSE">');
     // Alter settings to contain custom values.
     $this->drupalLogin($this->webUser);
     $this->drupalGet('admin/structure/types/manage/' . $this->instBundle . '/display');
@@ @@
       'fields[' . $this->instFieldName . '][settings_edit_form][settings][jlib_useFullscreenExpand]' => TRUE,
     ];
     $this->submitForm($edit, 'Save');
-    $this->assertText($this->t('Your settings have been saved.'), 'Gallery configuration changes saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Your settings have been saved.'));
     // Now check the resulting XML again as an anon user.
     $this->drupalLogout();
     // Check for correct embed markup.
     $this->drupalGet('node/' . $node->id());
-    $this->assertRaw(trim(json_encode([
+    $this->assertSession()->responseContains(trim(json_encode([
       'gallerywidth' => '50%',
       'galleryheight' => '200px',
       'backgroundcolor' => 'red',
-    ]), '{}'), 'Expected custom Lite configuration options found in Drupal.settings.');
+    ]), '{}'));
     // Check for correct XML.
     $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
-    $this->assertRaw('<juicebox gallerywidth="50%" galleryheight="200px" backgroundcolor="red" textcolor="green" thumbframecolor="blue" showopenbutton="FALSE" showexpandbutton="FALSE" showthumbsbutton="FALSE" usethumbdots="TRUE" usefullscreenexpand="TRUE">', 'Expected custom Lite configuration options set in XML.');
+    $this->assertSession()->responseContains('<juicebox gallerywidth="50%" galleryheight="200px" backgroundcolor="red" textcolor="green" thumbframecolor="blue" showopenbutton="FALSE" showexpandbutton="FALSE" showthumbsbutton="FALSE" usethumbdots="TRUE" usefullscreenexpand="TRUE">');
   }

   /**
@@ @@
     // Do a set of control requests as an anon user that will also prime any
     // caches.
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200, 'Control request of test node was successful.');
+    $this->assertSession()->statusCodeEquals(200, 'Control request of test node was successful.');
     $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
-    $this->assertResponse(200, 'Control request of XML was successful.');
+    $this->assertSession()->statusCodeEquals(200, 'Control request of XML was successful.');
     // Set new manual options and also add a manual customization that's
     // intended to override a custom Lite option.
     $this->drupalLogin($this->webUser);
@@ @@
       'fields[' . $this->instFieldName . '][settings_edit_form][settings][manual_config]' => "sHoWoPeNbUtToN=\"FALSE\"\nshowexpandbutton=\"TRUE\"\ngallerywidth=\"50%\"\nmyCustomSetting=\"boomsauce\"",
     ];
     $this->submitForm($edit, 'Save');
-    $this->assertText($this->t('Your settings have been saved.'), 'Gallery configuration changes saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Your settings have been saved.'));
     $this->drupalLogout();
     // Check for correct embed markup.
     $this->drupalGet('node/' . $node->id());
-    $this->assertRaw(trim(json_encode([
+    $this->assertSession()->responseContains(trim(json_encode([
       'gallerywidth' => '50%',
       'galleryheight' => '100%',
       'backgroundcolor' => '#222222',
-    ]), '{}'), 'Expected custom configuration options found in Drupal.settings.');
+    ]), '{}'));
     // Check for correct XML.
     $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
-    $this->assertRaw('<juicebox gallerywidth="50%" galleryheight="100%" backgroundcolor="#222222" textcolor="rgba(255,255,255,1)" thumbframecolor="rgba(255,255,255,.5)" showopenbutton="FALSE" showexpandbutton="TRUE" showthumbsbutton="TRUE" usethumbdots="FALSE" usefullscreenexpand="FALSE" mycustomsetting="boomsauce">', 'Expected custom Pro configuration options set in XML.');
+    $this->assertSession()->responseContains('<juicebox gallerywidth="50%" galleryheight="100%" backgroundcolor="#222222" textcolor="rgba(255,255,255,1)" thumbframecolor="rgba(255,255,255,.5)" showopenbutton="FALSE" showexpandbutton="TRUE" showthumbsbutton="TRUE" usethumbdots="FALSE" usefullscreenexpand="FALSE" mycustomsetting="boomsauce">');
   }

   /**
@@ @@
     $node = $this->node;
     // Get the urls to the main image with and without "large" styling.
     $uri = File::load($node->{$this->instFieldName}[0]->target_id)->getFileUri();
-    $test_image_url = file_create_url($uri);
-    $test_image_url_formatted = entity_load('image_style', 'juicebox_medium')->buildUrl($uri);
+    $test_image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
+    $test_image_url_formatted = \Drupal::service('entity_type.manager')->getStorage('image_style')->load('juicebox_medium')->buildUrl($uri);
     // Check control case without custom configuration.
     $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
-    $this->assertRaw('linkTarget="_blank"', 'Default linkTarget setting found.');
-    $this->assertRaw('linkURL="' . $test_image_url, 'Test unstyled image found in XML');
+    $this->assertSession()->responseContains('linkTarget="_blank"');
+    $this->assertSession()->responseContains('linkURL="' . $test_image_url);
     // Set new advanced options.
     $this->drupalLogin($this->webUser);
     $this->drupalGet('admin/structure/types/manage/' . $this->instBundle . '/display');
@@ @@
       'fields[' . $this->instFieldName . '][settings_edit_form][settings][custom_parent_classes]' => 'my-custom-wrapper',
     ];
     $this->submitForm($edit, 'Save');
-    $this->assertText($this->t('Your settings have been saved.'), 'Gallery configuration changes saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Your settings have been saved.'));
     $this->drupalLogout();
     // Check case with custom configuration.
     $this->drupalGet('juicebox/xml/field/node/' . $node->id() . '/' . $this->instFieldName . '/full');
-    $this->assertRaw('linkTarget="_self"', 'Updated linkTarget setting found in XML.');
-    $this->assertRaw('linkURL="' . Html::escape($test_image_url_formatted), 'Test styled image found in XML for linkURL.');
+    $this->assertSession()->responseContains('linkTarget="_self"');
+    $this->assertSession()->responseContains('linkURL="' . Html::escape($test_image_url_formatted));
     // Also check for custom class in embed code.
     $this->drupalGet('node/' . $node->id());
-    $this->assertRaw('class="juicebox-parent my-custom-wrapper"', 'Custom class found in embed code.');
+    $this->assertSession()->responseContains('class="juicebox-parent my-custom-wrapper"');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * EntityLoadRector
 * FileCreateUrlRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/juicebox/tests/src/Functional/JuiceboxCaseTestBase.php:71

    ---------- begin diff ----------
@@ @@
       'settings' => $field_storage_settings,
       'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,
     ];
-    entity_create('field_storage_config', $field_storage)->save();
+    \Drupal::service('entity_type.manager')->getStorage('field_storage_config')->create($field_storage)->save();
     // Prep a field instance.
     $field_settings = [];
     if ($this->instFieldType == 'image') {
@@ @@
       'required' => FALSE,
       'settings' => $field_settings,
     ];
-    entity_create('field_config', $field)->save();
+    \Drupal::service('entity_type.manager')->getStorage('field_config')->create($field)->save();
     // Setup widget.
-    entity_get_form_display('node', $this->instBundle, 'default')
+    \Drupal::service('entity_display.repository')->getFormDisplay('node', $this->instBundle, 'default')
       ->setComponent($this->instFieldName, [
         'type' => 'file_generic',
         'settings' => [],
@@ @@
    * Helper to activate a Juicebox field formatter on a field.
    */
   protected function activateJuiceboxFieldFormatter() {
-    entity_get_display('node', $this->instBundle, 'default')
+    \Drupal::service('entity_display.repository')->getViewDisplay('node', $this->instBundle, 'default')
       ->setComponent($this->instFieldName, [
         'type' => 'juicebox_formatter',
         'settings' => [],
    ----------- end diff -----------

Applied rules:
 * EntityCreateRector
 * EntityGetDisplayRector
 * EntityGetFormDisplayRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/juicebox/src/JuiceboxFormatter.php:358

    ---------- begin diff ----------
@@ @@
     $image_data = [];
     $image_data['juicebox_compatible'] = TRUE;
     // Set the normal, unstyled, url for reference.
-    $image_data['unstyled_src'] = file_create_url($file->getFileUri());
+    $image_data['unstyled_src'] = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
     // Check compatibility if configured and if the library info contains
     // mimetype compatibitly information.
     if ($check_compatible && !empty($library['compatible_mimetypes']) && !in_array($mimetype, $library['compatible_mimetypes'])) {
       // If the item is not compatible, find the substitute mimetype icon.
       $image_data['juicebox_compatible'] = FALSE;
-      $icon_dir = drupal_get_path('module', 'juicebox') . '/images/mimetypes';
+      $icon_dir = \Drupal::service('extension.list.module')->getPath('juicebox') . '/images/mimetypes';
       // We only have icons for each major type, so simplify accordingly.
       // file_icon_class() could also be useful here but would require
       // supporting icons for more package types.
@@ @@
       $type_parts = explode('/', $mimetype);
       $icon_path = $icon_dir . '/' . reset($type_parts) . '.png';
       if (file_exists($icon_path)) {
-        $image_data['imageURL'] = file_create_url($icon_path);
+        $image_data['imageURL'] = \Drupal::service('file_url_generator')->generateAbsoluteString($icon_path);
       }
       else {
-        $image_data['imageURL'] = file_create_url($icon_dir . '/general.png');
+        $image_data['imageURL'] = \Drupal::service('file_url_generator')->generateAbsoluteString($icon_dir . '/general.png');
       }
     }
     // If the item is compatible, style it.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 8 files have been changed by Rector                                       

