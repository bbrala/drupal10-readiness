diff --git a/fusion_connector.info.yml b/fusion_connector.info.yml
index cc6eb9c..1e51300 100644
--- a/fusion_connector.info.yml
+++ b/fusion_connector.info.yml
@@ -1,8 +1,7 @@
 name: 'Fusion Connector'
 type: module
 description: 'Fusion connector Implementation'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
 package: 'Web services'
 configure: fusion_connector.settings
 dependencies:
diff --git a/src/EventSubscriber/ConfigSubscriber.php b/src/EventSubscriber/ConfigSubscriber.php
index d123a2f..f05c371 100644
--- a/src/EventSubscriber/ConfigSubscriber.php
+++ b/src/EventSubscriber/ConfigSubscriber.php
@@ -72,10 +72,10 @@ class ConfigSubscriber implements EventSubscriberInterface {
   /**
    * Associates JSON:API Extras' config cache tag with all JSON:API responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The response event.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(\Symfony\Component\HttpKernel\Event\ResponseEvent $event) {
     if ($event->getRequest()->getRequestFormat() !== 'api_json') {
       return;
     }
diff --git a/src/EventSubscriber/ResourceResponseSubscriber.php b/src/EventSubscriber/ResourceResponseSubscriber.php
index 5bd2976..7495000 100644
--- a/src/EventSubscriber/ResourceResponseSubscriber.php
+++ b/src/EventSubscriber/ResourceResponseSubscriber.php
@@ -37,10 +37,10 @@ class ResourceResponseSubscriber extends JsonApiResourceResponseSubscriber {
   /**
    * Serializes ResourceResponse responses' data, and removes that data.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(\Symfony\Component\HttpKernel\Event\ResponseEvent $event) {
     $response = $event->getResponse();
     if (!$response instanceof ResourceResponse) {
       return;
diff --git a/tests/src/Functional/EntityAccessTest.php b/tests/src/Functional/EntityAccessTest.php
index ee5ab9d..1f7d052 100644
--- a/tests/src/Functional/EntityAccessTest.php
+++ b/tests/src/Functional/EntityAccessTest.php
@@ -34,7 +34,7 @@ class EntityAccessTest extends JsonApiFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(
       ['view fusion_connector node--article'],
@@ -70,10 +70,7 @@ class EntityAccessTest extends JsonApiFunctionalTestBase {
     $this->assertNotNull($response);
     $this->assertNotNull($response['data']);
     $this->assertTrue(count($response['data']) > 0);
-    $this->assertEqual(
-      $response['data'][0]['attributes']['title'],
-      'Hello World'
-    );
+    $this->assertEquals($response['data'][0]['attributes']['title'], 'Hello World');
   }
 
   /**
diff --git a/tests/src/Functional/FusionConnectorConfigFormsTest.php b/tests/src/Functional/FusionConnectorConfigFormsTest.php
index 4f4595c..c43f566 100644
--- a/tests/src/Functional/FusionConnectorConfigFormsTest.php
+++ b/tests/src/Functional/FusionConnectorConfigFormsTest.php
@@ -39,7 +39,7 @@ class FusionConnectorConfigFormsTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $permissions = [
@@ -63,21 +63,25 @@ class FusionConnectorConfigFormsTest extends BrowserTestBase {
     // Check if the fusion connector settings page is available.
     $this->drupalGet('admin/config/services/fusion_connector');
 
-    $this->assertField('fusion_connector_types[node--page]', 'Basic page');
-    $this->assertField('fusion_connector_types[node--article]', 'Article');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('fusion_connector_types[node--page]', 'Basic page');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('fusion_connector_types[node--article]', 'Article');
 
     // Disable the page entity from indexing.
     $edit = [
       'fusion_connector_types[node--article]' => 0,
     ];
-    $this->drupalPostForm(
-      'admin/config/services/fusion_connector',
-      $edit,
-      t('Save configuration')
-    );
-    $this->assertText('The configuration options have been saved.');
-    $this->assertFieldChecked('fusion_connector_types[node--page]');
-    $this->assertNoFieldChecked('fusion_connector_types[node--article]');
+    $this->drupalGet('admin/config/services/fusion_connector');
+    $this->submitForm($edit, t('Save configuration'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
+    $this->assertSession()->checkboxChecked('fusion_connector_types[node--page]');
+    $this->assertSession()->checkboxNotChecked('fusion_connector_types[node--article]');
 
     $config = $this->config('fusion_connector.settings');
     $disabledEntities = $config->get('disabled_entities');
@@ -94,21 +98,25 @@ class FusionConnectorConfigFormsTest extends BrowserTestBase {
     // Check if the visibility setting is available.
     $this->drupalGet('admin/config/services/fusion_connector/access/node/page');
 
-    $this->assertField('fusion_connector_fieldsaccess[nid][0]', 'nid');
-    $this->assertField('fusion_connector_fieldsaccess[uid][0]', 'uid');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('fusion_connector_fieldsaccess[nid][0]', 'nid');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('fusion_connector_fieldsaccess[uid][0]', 'uid');
 
     // Disable the page entity fields from indexing.
     $edit = [
       'fusion_connector_fieldsaccess[uid][0]' => 0,
     ];
-    $this->drupalPostForm(
-      'admin/config/services/fusion_connector/access/node/page',
-      $edit,
-      t('Save configuration')
-    );
-    $this->assertText('The configuration options have been saved.');
-    $this->assertFieldChecked('fusion_connector_fieldsaccess[nid][0]');
-    $this->assertNoFieldChecked('fusion_connector_fieldsaccess[uid][0]');
+    $this->drupalGet('admin/config/services/fusion_connector/access/node/page');
+    $this->submitForm($edit, t('Save configuration'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
+    $this->assertSession()->checkboxChecked('fusion_connector_fieldsaccess[nid][0]');
+    $this->assertSession()->checkboxNotChecked('fusion_connector_fieldsaccess[uid][0]');
 
     $config = $this->config('fusion_connector.settings');
     $disabledFields = $config->get('disabled_fields');
@@ -137,20 +145,16 @@ class FusionConnectorConfigFormsTest extends BrowserTestBase {
       'admin/config/services/fusion_connector/type_language_access/node/page'
     );
 
-    $this->assertField(
-      'fusion_connector_entity_type_languages[ca][checked]',
-      'Catalan'
-    );
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('fusion_connector_entity_type_languages[ca][checked]', 'Catalan');
 
     // Disable the page entity from indexing on the ca language.
     $edit = [
       'fusion_connector_entity_type_languages[ca][checked]' => 0,
     ];
-    $this->drupalPostForm(
-      'admin/config/services/fusion_connector/type_language_access/node/page',
-      $edit,
-      t('Save configuration')
-    );
+    $this->drupalGet('admin/config/services/fusion_connector/type_language_access/node/page');
+    $this->submitForm($edit, t('Save configuration'));
 
     $config = $this->config('fusion_connector.settings');
     $disabledLanguages = $config->get('disabled_entity_type_languages');
@@ -176,17 +180,16 @@ class FusionConnectorConfigFormsTest extends BrowserTestBase {
     // Check if the language setting is available.
     $this->drupalGet('admin/config/services/fusion_connector/languages');
 
-    $this->assertField('fusion_connector_languages[ca][checked]', 'Catalan');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('fusion_connector_languages[ca][checked]', 'Catalan');
 
     // Disable a language from being indexed.
     $edit = [
       'fusion_connector_languages[ca][checked]' => 0,
     ];
-    $this->drupalPostForm(
-      'admin/config/services/fusion_connector/languages',
-      $edit,
-      t('Save configuration')
-    );
+    $this->drupalGet('admin/config/services/fusion_connector/languages');
+    $this->submitForm($edit, t('Save configuration'));
 
     $config = $this->config('fusion_connector.settings');
     $disabledLanguages = $config->get('disabled_languages');
diff --git a/tests/src/Functional/FusionConnectorPermissionsTest.php b/tests/src/Functional/FusionConnectorPermissionsTest.php
index 2155138..9a67fb1 100644
--- a/tests/src/Functional/FusionConnectorPermissionsTest.php
+++ b/tests/src/Functional/FusionConnectorPermissionsTest.php
@@ -57,7 +57,7 @@ class FusionConnectorPermissionsTest extends JsonApiFunctionalTestBase {
 
     $this->assertNotNull($response);
     $this->assertIsArray($response['data']);
-    $this->assertEqual(count($response['data']), 0);
+    $this->assertEquals(count($response['data']), 0);
   }
 
   /**
@@ -85,11 +85,8 @@ class FusionConnectorPermissionsTest extends JsonApiFunctionalTestBase {
     $this->assertNotNull($response);
     $this->assertIsArray($response['data']);
     // Check that we have one element in array.
-    $this->assertEqual(count($response['data']), 1);
-    $this->assertEqual(
-      $response['data'][0]['attributes']['name'],
-      $this->tags[0]->getName()
-    );
+    $this->assertEquals(count($response['data']), 1);
+    $this->assertEquals($response['data'][0]['attributes']['name'], $this->tags[0]->getName());
 
     // Get the available articles.
     $response = Json::decode($this->drupalGet('/fusion/node/article'));
@@ -97,7 +94,7 @@ class FusionConnectorPermissionsTest extends JsonApiFunctionalTestBase {
     $this->assertNotNull($response);
     $this->assertIsArray($response['data']);
     // Check that we have response,
-    $this->assertEqual(count($response['data']), 3);
+    $this->assertEquals(count($response['data']), 3);
     $this->assertArrayHasKey('title', $response['data'][0]['attributes']);
     $this->drupalLogout();
 
@@ -114,13 +111,10 @@ class FusionConnectorPermissionsTest extends JsonApiFunctionalTestBase {
     $this->assertNotNull($response);
     $this->assertIsArray($response['data']);
     // Check that we have one element in array.
-    $this->assertEqual(count($response['data']), 3);
+    $this->assertEquals(count($response['data']), 3);
     $this->assertArrayHasKey('field_sort1', $response['data'][0]['attributes']);
     $this->assertArrayHasKey('title', $response['data'][0]['attributes']);
-    $this->assertEqual(
-      $response['data'][0]['attributes']['title'],
-      $this->nodes[0]->getTitle()
-    );
+    $this->assertEquals($response['data'][0]['attributes']['title'], $this->nodes[0]->getTitle());
 
     // Get the available tags.
     $response = Json::decode($this->drupalGet('/fusion/taxonomy_term/tags'));
@@ -128,7 +122,7 @@ class FusionConnectorPermissionsTest extends JsonApiFunctionalTestBase {
     $this->assertNotNull($response);
     $this->assertIsArray($response['data']);
     // Check that we have no response,
-    $this->assertEqual(count($response['data']), 0);
+    $this->assertEquals(count($response['data']), 0);
     $this->drupalLogout();
   }
 
diff --git a/tests/src/Functional/MultilangualTest.php b/tests/src/Functional/MultilangualTest.php
index 2f2f75a..6b76767 100644
--- a/tests/src/Functional/MultilangualTest.php
+++ b/tests/src/Functional/MultilangualTest.php
@@ -40,7 +40,7 @@ class MultilangualTest extends JsonApiFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalCreateContentType(
       [
