diff --git a/composer.json b/composer.json
index fd590d2..b942b11 100644
--- a/composer.json
+++ b/composer.json
@@ -11,7 +11,7 @@
     "source": "http://cgit.drupalcode.org/micro_node"
   },
   "require": {
-      "drupal/core": "^8.8 || ^9"
+    "drupal/core": "^9.3 || ^10"
   },
   "require-dev": {
       "drupal/micro_site": "1.x-dev"
diff --git a/micro_node.info.yml b/micro_node.info.yml
index 8ba538d..c83e95f 100644
--- a/micro_node.info.yml
+++ b/micro_node.info.yml
@@ -1,7 +1,7 @@
 name: Micro Node
 type: module
 description: 'Provide node integration for micro site.'
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^9.3 || ^10
 package: 'Micro Site'
 dependencies:
   - drupal:node
diff --git a/micro_node.install b/micro_node.install
index a08ebb3..79e7b5e 100644
--- a/micro_node.install
+++ b/micro_node.install
@@ -67,7 +67,7 @@ function micro_node_update_8104() {
  * Add the new field "Publish on master" on bundles enabled.
  */
 function micro_node_update_8105() {
-  $config_path = drupal_get_path('module', 'micro_node') . '/config/install';
+  $config_path = \Drupal::service('extension.list.module')->getPath('micro_node') . '/config/install';
   $source = new FileStorage($config_path);
   $id = 'field.storage.node.field_publish_master';
   $field_storage = \Drupal::entityTypeManager()->getStorage('field_storage_config');
diff --git a/tests/src/Functional/NodeAccessAndUrlTest.php b/tests/src/Functional/NodeAccessAndUrlTest.php
index 1d3b147..2136bcf 100644
--- a/tests/src/Functional/NodeAccessAndUrlTest.php
+++ b/tests/src/Functional/NodeAccessAndUrlTest.php
@@ -42,7 +42,7 @@ class NodeAccessAndUrlTest extends MicroSiteBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->configFactory->getEditable('micro_node.settings')->set('node_types', ['article', 'page'])->save(TRUE);
     foreach (['article', 'page'] as $bundle) {
@@ -56,7 +56,7 @@ class NodeAccessAndUrlTest extends MicroSiteBase {
    */
   public function testAccess() {
     $this->drupalGet(Url::fromUri($this->masterUrl));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $generic = $this->createSiteType('generic', 'Generic', 'Generic site type');
     $settings = ['user_id' => $this->microSiteOwnerUser->id(), 'registered' => TRUE, 'status' => TRUE];
@@ -108,9 +108,9 @@ class NodeAccessAndUrlTest extends MicroSiteBase {
     $views_url = '/micro-node-content';
     // Check on master.
     $this->drupalGet($this->masterUrl . $views_url);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $xpath = $this->xpath('//article[contains(@class, "node--type-article")]');
-    $this->assertEqual(count($xpath), 3, '3 articles found on master.');
+    $this->assertEquals(count($xpath), 3, '3 articles found on master.');
     $this->assertSession()->pageTextContains('Article 1 master');
     $this->assertSession()->pageTextContains('Article 2 master and site one');
     $this->assertSession()->pageTextContains('Article 3 master and all sites');
@@ -119,26 +119,26 @@ class NodeAccessAndUrlTest extends MicroSiteBase {
     $this->assertSession()->pageTextNotContains('Article 6 site two');
     // Check URLs
     $xpath = $this->xpath("//h2/a[@href='/node/" . $node1->id() . "']");
-    $this->assertEqual(count($xpath), 1, 'Correct URL found.');
+    $this->assertEquals(count($xpath), 1, 'Correct URL found.');
     $xpath = $this->xpath("//h2/a[@href='/node/" . $node2->id() . "']");
-    $this->assertEqual(count($xpath), 1, 'Correct URL found.');
+    $this->assertEquals(count($xpath), 1, 'Correct URL found.');
     $xpath = $this->xpath("//h2/a[@href='/node/" . $node3->id() . "']");
-    $this->assertEqual(count($xpath), 1, 'Correct URL found.');
+    $this->assertEquals(count($xpath), 1, 'Correct URL found.');
     // Click response.
     $this->clickLink($node1->label());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet($this->masterUrl . $views_url);
     $this->clickLink($node2->label());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet($this->masterUrl . $views_url);
     $this->clickLink($node3->label());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Check on site one.
     $this->drupalGet($site_one->getSitePath() . $views_url);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $xpath = $this->xpath('//article[contains(@class, "node--type-article")]');
-    $this->assertEqual(count($xpath), 4, '4 articles found on site one.');
+    $this->assertEquals(count($xpath), 4, '4 articles found on site one.');
     $this->assertSession()->pageTextNotContains('Article 1 master');
     $this->assertSession()->pageTextContains('Article 2 master and site one');
     $this->assertSession()->pageTextContains('Article 3 master and all sites');
@@ -147,31 +147,31 @@ class NodeAccessAndUrlTest extends MicroSiteBase {
     $this->assertSession()->pageTextNotContains('Article 6 site two');
     // Check URLs
     $xpath = $this->xpath("//h2/a[@href='" . $this->masterUrl . "/node/" . $node2->id() . "']");
-    $this->assertEqual(count($xpath), 1, 'Correct URL found.');
+    $this->assertEquals(count($xpath), 1, 'Correct URL found.');
     $xpath = $this->xpath("//h2/a[@href='" . $this->masterUrl . "/node/" . $node3->id() . "']");
-    $this->assertEqual(count($xpath), 1, 'Correct URL found.');
+    $this->assertEquals(count($xpath), 1, 'Correct URL found.');
     $xpath = $this->xpath("//h2/a[@href='" . $site_one->getSitePath() . "/node/" . $node4->id() . "']");
-    $this->assertEqual(count($xpath), 1, 'Correct URL found.');
+    $this->assertEquals(count($xpath), 1, 'Correct URL found.');
     $xpath = $this->xpath("//h2/a[@href='" . $site_one->getSitePath() . "/node/" . $node5->id() . "']");
-    $this->assertEqual(count($xpath), 1, 'Correct URL found.');
+    $this->assertEquals(count($xpath), 1, 'Correct URL found.');
     // Click response.
     $this->clickLink($node2->label());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet($site_one->getSitePath() . $views_url);
     $this->clickLink($node3->label());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet($site_one->getSitePath() . $views_url);
     $this->clickLink($node4->label());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet($site_one->getSitePath() . $views_url);
     $this->clickLink($node5->label());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Check on site two.
     $this->drupalGet($site_two->getSitePath() . $views_url);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $xpath = $this->xpath('//article[contains(@class, "node--type-article")]');
-    $this->assertEqual(count($xpath), 3, '3 articles found on site two.');
+    $this->assertEquals(count($xpath), 3, '3 articles found on site two.');
     $this->assertSession()->pageTextNotContains('Article 1 master');
     $this->assertSession()->pageTextNotContains('Article 2 master and site one');
     $this->assertSession()->pageTextContains('Article 3 master and all sites');
@@ -180,36 +180,36 @@ class NodeAccessAndUrlTest extends MicroSiteBase {
     $this->assertSession()->pageTextContains('Article 6 site two');
     // Check URLs
     $xpath = $this->xpath("//h2/a[@href='" . $this->masterUrl . "/node/" . $node3->id() . "']");
-    $this->assertEqual(count($xpath), 1, 'Correct URL found.');
+    $this->assertEquals(count($xpath), 1, 'Correct URL found.');
     $xpath = $this->xpath("//h2/a[@href='" . $site_one->getSitePath() . "/node/" . $node5->id() . "']");
-    $this->assertEqual(count($xpath), 1, 'Correct URL found.');
+    $this->assertEquals(count($xpath), 1, 'Correct URL found.');
     $xpath = $this->xpath("//h2/a[@href='" . $site_two->getSitePath() . "/node/" . $node6->id() . "']");
-    $this->assertEqual(count($xpath), 1, 'Correct URL found.');
+    $this->assertEquals(count($xpath), 1, 'Correct URL found.');
     // Click response.
     $this->clickLink($node3->label());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet($site_two->getSitePath() . $views_url);
     $this->clickLink($node5->label());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet($site_two->getSitePath() . $views_url);
     $this->clickLink($node6->label());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Test publish on master.
     $node6->set(MicroNodeFields::NODE_SITES_PUBLISH_MASTER, TRUE);
     $node6->save();
 
     $this->drupalGet($this->masterUrl . $views_url);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $xpath = $this->xpath('//article[contains(@class, "node--type-article")]');
-    $this->assertEqual(count($xpath), 4, '4 articles found on master.');
+    $this->assertEquals(count($xpath), 4, '4 articles found on master.');
     $this->assertSession()->pageTextContains('Article 6 site two');
     // Check URLs
     $xpath = $this->xpath("//h2/a[@href='" . $site_two->getSitePath() . "/node/" . $node6->id() . "']");
-    $this->assertEqual(count($xpath), 1, 'Correct URL found.');
+    $this->assertEquals(count($xpath), 1, 'Correct URL found.');
     // Click response.
     $this->clickLink($node6->label());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }
 
 }
diff --git a/tests/src/Functional/NodeAccessRecordsTest.php b/tests/src/Functional/NodeAccessRecordsTest.php
index 6908012..7629467 100644
--- a/tests/src/Functional/NodeAccessRecordsTest.php
+++ b/tests/src/Functional/NodeAccessRecordsTest.php
@@ -42,7 +42,7 @@ class NodeAccessRecordsTest extends MicroSiteBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->configFactory->getEditable('micro_node.settings')->set('node_types', ['article', 'page'])->save(TRUE);
     foreach (['article', 'page'] as $bundle) {
@@ -56,7 +56,7 @@ class NodeAccessRecordsTest extends MicroSiteBase {
    */
   public function testAccessRecords() {
     $this->drupalGet(Url::fromUri($this->masterUrl));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $generic = $this->createSiteType('generic', 'Generic', 'Generic site type');
     $settings = ['user_id' => $this->microSiteOwnerUser->id(), 'registered' => TRUE, 'status' => TRUE];
@@ -80,16 +80,16 @@ class NodeAccessRecordsTest extends MicroSiteBase {
       ->fetchAll();
 
     $this->assertCount(2, $records, 'Returned the correct number of rows.');
-    $this->assertEqual($records[0]->realm, 'site_id', 'Grant with site_id acquired for node.');
-    $this->assertEqual($records[0]->gid, $site_one->id(), 'Grant with proper id acquired for node.');
-    $this->assertEqual($records[0]->grant_view, 1, 'Grant view stored.');
-    $this->assertEqual($records[0]->grant_update, 1, 'Grant update stored.');
-    $this->assertEqual($records[0]->grant_delete, 1, 'Grant delete stored.');
-    $this->assertEqual($records[1]->realm, 'site_node_owner', 'Grant with site_node_owner acquired for node.');
-    $this->assertEqual($records[1]->gid, $node1->getOwnerId(), 'Grant with proper id acquired for node.');
-    $this->assertEqual($records[1]->grant_view, 1, 'Grant view stored.');
-    $this->assertEqual($records[1]->grant_update, 1, 'Grant update stored.');
-    $this->assertEqual($records[1]->grant_delete, 1, 'Grant delete stored.');
+    $this->assertEquals($records[0]->realm, 'site_id', 'Grant with site_id acquired for node.');
+    $this->assertEquals($records[0]->gid, $site_one->id(), 'Grant with proper id acquired for node.');
+    $this->assertEquals($records[0]->grant_view, 1, 'Grant view stored.');
+    $this->assertEquals($records[0]->grant_update, 1, 'Grant update stored.');
+    $this->assertEquals($records[0]->grant_delete, 1, 'Grant delete stored.');
+    $this->assertEquals($records[1]->realm, 'site_node_owner', 'Grant with site_node_owner acquired for node.');
+    $this->assertEquals($records[1]->gid, $node1->getOwnerId(), 'Grant with proper id acquired for node.');
+    $this->assertEquals($records[1]->grant_view, 1, 'Grant view stored.');
+    $this->assertEquals($records[1]->grant_update, 1, 'Grant update stored.');
+    $this->assertEquals($records[1]->grant_delete, 1, 'Grant delete stored.');
 
     $node2 = $this->drupalCreateNode([
       'type' => 'article',
@@ -105,21 +105,21 @@ class NodeAccessRecordsTest extends MicroSiteBase {
       ->fetchAll();
 
     $this->assertCount(3, $records, 'Returned the correct number of rows.');
-    $this->assertEqual($records[0]->realm, 'site_id', 'Grant with site_id acquired for node.');
-    $this->assertEqual($records[0]->gid, $site_one->id(), 'Grant with proper id acquired for node.');
-    $this->assertEqual($records[0]->grant_view, 1, 'Grant view stored.');
-    $this->assertEqual($records[0]->grant_update, 1, 'Grant update stored.');
-    $this->assertEqual($records[0]->grant_delete, 1, 'Grant delete stored.');
-    $this->assertEqual($records[1]->realm, 'site_id', 'Grant with site_id acquired for node.');
-    $this->assertEqual($records[1]->gid, $site_two->id(), 'Grant with proper id acquired for node.');
-    $this->assertEqual($records[1]->grant_view, 1, 'Grant view stored.');
-    $this->assertEqual($records[1]->grant_update, 1, 'Grant update stored.');
-    $this->assertEqual($records[1]->grant_delete, 1, 'Grant delete stored.');
-    $this->assertEqual($records[2]->realm, 'site_node_owner', 'Grant with site_node_owner acquired for node.');
-    $this->assertEqual($records[2]->gid, $node2->getOwnerId(), 'Grant with proper id acquired for node.');
-    $this->assertEqual($records[2]->grant_view, 1, 'Grant view stored.');
-    $this->assertEqual($records[2]->grant_update, 1, 'Grant update stored.');
-    $this->assertEqual($records[2]->grant_delete, 1, 'Grant delete stored.');
+    $this->assertEquals($records[0]->realm, 'site_id', 'Grant with site_id acquired for node.');
+    $this->assertEquals($records[0]->gid, $site_one->id(), 'Grant with proper id acquired for node.');
+    $this->assertEquals($records[0]->grant_view, 1, 'Grant view stored.');
+    $this->assertEquals($records[0]->grant_update, 1, 'Grant update stored.');
+    $this->assertEquals($records[0]->grant_delete, 1, 'Grant delete stored.');
+    $this->assertEquals($records[1]->realm, 'site_id', 'Grant with site_id acquired for node.');
+    $this->assertEquals($records[1]->gid, $site_two->id(), 'Grant with proper id acquired for node.');
+    $this->assertEquals($records[1]->grant_view, 1, 'Grant view stored.');
+    $this->assertEquals($records[1]->grant_update, 1, 'Grant update stored.');
+    $this->assertEquals($records[1]->grant_delete, 1, 'Grant delete stored.');
+    $this->assertEquals($records[2]->realm, 'site_node_owner', 'Grant with site_node_owner acquired for node.');
+    $this->assertEquals($records[2]->gid, $node2->getOwnerId(), 'Grant with proper id acquired for node.');
+    $this->assertEquals($records[2]->grant_view, 1, 'Grant view stored.');
+    $this->assertEquals($records[2]->grant_update, 1, 'Grant update stored.');
+    $this->assertEquals($records[2]->grant_delete, 1, 'Grant delete stored.');
 
     // On master
     $node3 = $this->drupalCreateNode([
@@ -134,26 +134,26 @@ class NodeAccessRecordsTest extends MicroSiteBase {
       ->fetchAll();
 
     $this->assertCount(4, $records, 'Returned the correct number of rows.');
-    $this->assertEqual($records[0]->realm, 'master', 'Grant with master acquired for node.');
-    $this->assertEqual($records[0]->gid, 0, 'Grant with proper id acquired for node.');
-    $this->assertEqual($records[0]->grant_view, 1, 'Grant view stored.');
-    $this->assertEqual($records[0]->grant_update, 1, 'Grant update stored.');
-    $this->assertEqual($records[0]->grant_delete, 1, 'Grant delete stored.');
-    $this->assertEqual($records[1]->realm, 'master_article', 'Grant with master_article acquired for node.');
-    $this->assertEqual($records[1]->gid, 0, 'Grant with proper id acquired for node.');
-    $this->assertEqual($records[1]->grant_view, 1, 'Grant view stored.');
-    $this->assertEqual($records[1]->grant_update, 1, 'Grant update stored.');
-    $this->assertEqual($records[1]->grant_delete, 1, 'Grant delete stored.');
-    $this->assertEqual($records[2]->realm, 'master_own_article', 'Grant with master_own_article acquired for node.');
-    $this->assertEqual($records[2]->gid, $node3->getOwnerId(), 'Grant with proper id acquired for node.');
-    $this->assertEqual($records[2]->grant_view, 1, 'Grant view stored.');
-    $this->assertEqual($records[2]->grant_update, 1, 'Grant update stored.');
-    $this->assertEqual($records[2]->grant_delete, 1, 'Grant delete stored.');
-    $this->assertEqual($records[3]->realm, 'master_own_unpublished', 'Grant with master_own_unpublished acquired for node.');
-    $this->assertEqual($records[3]->gid, $node3->getOwnerId(), 'Grant with proper id acquired for node.');
-    $this->assertEqual($records[3]->grant_view, 1, 'Grant view stored.');
-    $this->assertEqual($records[3]->grant_update, 1, 'Grant update stored.');
-    $this->assertEqual($records[3]->grant_delete, 1, 'Grant delete stored.');
+    $this->assertEquals($records[0]->realm, 'master', 'Grant with master acquired for node.');
+    $this->assertEquals($records[0]->gid, 0, 'Grant with proper id acquired for node.');
+    $this->assertEquals($records[0]->grant_view, 1, 'Grant view stored.');
+    $this->assertEquals($records[0]->grant_update, 1, 'Grant update stored.');
+    $this->assertEquals($records[0]->grant_delete, 1, 'Grant delete stored.');
+    $this->assertEquals($records[1]->realm, 'master_article', 'Grant with master_article acquired for node.');
+    $this->assertEquals($records[1]->gid, 0, 'Grant with proper id acquired for node.');
+    $this->assertEquals($records[1]->grant_view, 1, 'Grant view stored.');
+    $this->assertEquals($records[1]->grant_update, 1, 'Grant update stored.');
+    $this->assertEquals($records[1]->grant_delete, 1, 'Grant delete stored.');
+    $this->assertEquals($records[2]->realm, 'master_own_article', 'Grant with master_own_article acquired for node.');
+    $this->assertEquals($records[2]->gid, $node3->getOwnerId(), 'Grant with proper id acquired for node.');
+    $this->assertEquals($records[2]->grant_view, 1, 'Grant view stored.');
+    $this->assertEquals($records[2]->grant_update, 1, 'Grant update stored.');
+    $this->assertEquals($records[2]->grant_delete, 1, 'Grant delete stored.');
+    $this->assertEquals($records[3]->realm, 'master_own_unpublished', 'Grant with master_own_unpublished acquired for node.');
+    $this->assertEquals($records[3]->gid, $node3->getOwnerId(), 'Grant with proper id acquired for node.');
+    $this->assertEquals($records[3]->grant_view, 1, 'Grant view stored.');
+    $this->assertEquals($records[3]->grant_update, 1, 'Grant update stored.');
+    $this->assertEquals($records[3]->grant_delete, 1, 'Grant delete stored.');
 
     // On master and all sites
     $node4 = $this->drupalCreateNode([
@@ -169,31 +169,31 @@ class NodeAccessRecordsTest extends MicroSiteBase {
       ->fetchAll();
 
     $this->assertCount(5, $records, 'Returned the correct number of rows.');
-    $this->assertEqual($records[0]->realm, 'master', 'Grant with master acquired for node.');
-    $this->assertEqual($records[0]->gid, 0, 'Grant with proper id acquired for node.');
-    $this->assertEqual($records[0]->grant_view, 1, 'Grant view stored.');
-    $this->assertEqual($records[0]->grant_update, 1, 'Grant update stored.');
-    $this->assertEqual($records[0]->grant_delete, 1, 'Grant delete stored.');
-    $this->assertEqual($records[1]->realm, 'master_article', 'Grant with master_article acquired for node.');
-    $this->assertEqual($records[1]->gid, 0, 'Grant with proper id acquired for node.');
-    $this->assertEqual($records[1]->grant_view, 1, 'Grant view stored.');
-    $this->assertEqual($records[1]->grant_update, 1, 'Grant update stored.');
-    $this->assertEqual($records[1]->grant_delete, 1, 'Grant delete stored.');
-    $this->assertEqual($records[2]->realm, 'master_own_article', 'Grant with master_own_article acquired for node.');
-    $this->assertEqual($records[2]->gid, $node4->getOwnerId(), 'Grant with proper id acquired for node.');
-    $this->assertEqual($records[2]->grant_view, 1, 'Grant view stored.');
-    $this->assertEqual($records[2]->grant_update, 1, 'Grant update stored.');
-    $this->assertEqual($records[2]->grant_delete, 1, 'Grant delete stored.');
-    $this->assertEqual($records[3]->realm, 'master_own_unpublished', 'Grant with master_own_unpublished acquired for node.');
-    $this->assertEqual($records[3]->gid, $node4->getOwnerId(), 'Grant with proper id acquired for node.');
-    $this->assertEqual($records[3]->grant_view, 1, 'Grant view stored.');
-    $this->assertEqual($records[3]->grant_update, 1, 'Grant update stored.');
-    $this->assertEqual($records[3]->grant_delete, 1, 'Grant delete stored.');
-    $this->assertEqual($records[4]->realm, 'site_all', 'Grant with site_all acquired for node.');
-    $this->assertEqual($records[4]->gid, 0, 'Grant with proper id acquired for node.');
-    $this->assertEqual($records[4]->grant_view, 1, 'Grant view stored.');
-    $this->assertEqual($records[4]->grant_update, 0, 'Grant update stored.');
-    $this->assertEqual($records[4]->grant_delete, 0, 'Grant delete stored.');
+    $this->assertEquals($records[0]->realm, 'master', 'Grant with master acquired for node.');
+    $this->assertEquals($records[0]->gid, 0, 'Grant with proper id acquired for node.');
+    $this->assertEquals($records[0]->grant_view, 1, 'Grant view stored.');
+    $this->assertEquals($records[0]->grant_update, 1, 'Grant update stored.');
+    $this->assertEquals($records[0]->grant_delete, 1, 'Grant delete stored.');
+    $this->assertEquals($records[1]->realm, 'master_article', 'Grant with master_article acquired for node.');
+    $this->assertEquals($records[1]->gid, 0, 'Grant with proper id acquired for node.');
+    $this->assertEquals($records[1]->grant_view, 1, 'Grant view stored.');
+    $this->assertEquals($records[1]->grant_update, 1, 'Grant update stored.');
+    $this->assertEquals($records[1]->grant_delete, 1, 'Grant delete stored.');
+    $this->assertEquals($records[2]->realm, 'master_own_article', 'Grant with master_own_article acquired for node.');
+    $this->assertEquals($records[2]->gid, $node4->getOwnerId(), 'Grant with proper id acquired for node.');
+    $this->assertEquals($records[2]->grant_view, 1, 'Grant view stored.');
+    $this->assertEquals($records[2]->grant_update, 1, 'Grant update stored.');
+    $this->assertEquals($records[2]->grant_delete, 1, 'Grant delete stored.');
+    $this->assertEquals($records[3]->realm, 'master_own_unpublished', 'Grant with master_own_unpublished acquired for node.');
+    $this->assertEquals($records[3]->gid, $node4->getOwnerId(), 'Grant with proper id acquired for node.');
+    $this->assertEquals($records[3]->grant_view, 1, 'Grant view stored.');
+    $this->assertEquals($records[3]->grant_update, 1, 'Grant update stored.');
+    $this->assertEquals($records[3]->grant_delete, 1, 'Grant delete stored.');
+    $this->assertEquals($records[4]->realm, 'site_all', 'Grant with site_all acquired for node.');
+    $this->assertEquals($records[4]->gid, 0, 'Grant with proper id acquired for node.');
+    $this->assertEquals($records[4]->grant_view, 1, 'Grant view stored.');
+    $this->assertEquals($records[4]->grant_update, 0, 'Grant update stored.');
+    $this->assertEquals($records[4]->grant_delete, 0, 'Grant delete stored.');
 
     // Create an article node on site one and publish on master.
     $node5 = $this->drupalCreateNode([
@@ -211,36 +211,36 @@ class NodeAccessRecordsTest extends MicroSiteBase {
 
     $this->assertCount(6, $records, 'Returned the correct number of rows.');
 
-    $this->assertEqual($records[0]->realm, 'master', 'Grant with master acquired for node.');
-    $this->assertEqual($records[0]->gid, 0, 'Grant with proper id acquired for node.');
-    $this->assertEqual($records[0]->grant_view, 1, 'Grant view stored.');
-    $this->assertEqual($records[0]->grant_update, 1, 'Grant update stored.');
-    $this->assertEqual($records[0]->grant_delete, 1, 'Grant delete stored.');
-    $this->assertEqual($records[1]->realm, 'master_article', 'Grant with master_article acquired for node.');
-    $this->assertEqual($records[1]->gid, 0, 'Grant with proper id acquired for node.');
-    $this->assertEqual($records[1]->grant_view, 1, 'Grant view stored.');
-    $this->assertEqual($records[1]->grant_update, 1, 'Grant update stored.');
-    $this->assertEqual($records[1]->grant_delete, 1, 'Grant delete stored.');
-    $this->assertEqual($records[2]->realm, 'master_own_article', 'Grant with master_own_article acquired for node.');
-    $this->assertEqual($records[2]->gid, $node5->getOwnerId(), 'Grant with proper id acquired for node.');
-    $this->assertEqual($records[2]->grant_view, 1, 'Grant view stored.');
-    $this->assertEqual($records[2]->grant_update, 1, 'Grant update stored.');
-    $this->assertEqual($records[2]->grant_delete, 1, 'Grant delete stored.');
-    $this->assertEqual($records[3]->realm, 'master_own_unpublished', 'Grant with master_own_unpublished acquired for node.');
-    $this->assertEqual($records[3]->gid, $node5->getOwnerId(), 'Grant with proper id acquired for node.');
-    $this->assertEqual($records[3]->grant_view, 1, 'Grant view stored.');
-    $this->assertEqual($records[3]->grant_update, 1, 'Grant update stored.');
-    $this->assertEqual($records[3]->grant_delete, 1, 'Grant delete stored.');
-    $this->assertEqual($records[4]->realm, 'site_id', 'Grant with site_id acquired for node.');
-    $this->assertEqual($records[4]->gid, $site_one->id(), 'Grant with proper id acquired for node.');
-    $this->assertEqual($records[4]->grant_view, 1, 'Grant view stored.');
-    $this->assertEqual($records[4]->grant_update, 1, 'Grant update stored.');
-    $this->assertEqual($records[4]->grant_delete, 1, 'Grant delete stored.');
-    $this->assertEqual($records[5]->realm, 'site_node_owner', 'Grant with site_node_owner acquired for node.');
-    $this->assertEqual($records[5]->gid, $node5->getOwnerId(), 'Grant with proper id acquired for node.');
-    $this->assertEqual($records[5]->grant_view, 1, 'Grant view stored.');
-    $this->assertEqual($records[5]->grant_update, 1, 'Grant update stored.');
-    $this->assertEqual($records[5]->grant_delete, 1, 'Grant delete stored.');
+    $this->assertEquals($records[0]->realm, 'master', 'Grant with master acquired for node.');
+    $this->assertEquals($records[0]->gid, 0, 'Grant with proper id acquired for node.');
+    $this->assertEquals($records[0]->grant_view, 1, 'Grant view stored.');
+    $this->assertEquals($records[0]->grant_update, 1, 'Grant update stored.');
+    $this->assertEquals($records[0]->grant_delete, 1, 'Grant delete stored.');
+    $this->assertEquals($records[1]->realm, 'master_article', 'Grant with master_article acquired for node.');
+    $this->assertEquals($records[1]->gid, 0, 'Grant with proper id acquired for node.');
+    $this->assertEquals($records[1]->grant_view, 1, 'Grant view stored.');
+    $this->assertEquals($records[1]->grant_update, 1, 'Grant update stored.');
+    $this->assertEquals($records[1]->grant_delete, 1, 'Grant delete stored.');
+    $this->assertEquals($records[2]->realm, 'master_own_article', 'Grant with master_own_article acquired for node.');
+    $this->assertEquals($records[2]->gid, $node5->getOwnerId(), 'Grant with proper id acquired for node.');
+    $this->assertEquals($records[2]->grant_view, 1, 'Grant view stored.');
+    $this->assertEquals($records[2]->grant_update, 1, 'Grant update stored.');
+    $this->assertEquals($records[2]->grant_delete, 1, 'Grant delete stored.');
+    $this->assertEquals($records[3]->realm, 'master_own_unpublished', 'Grant with master_own_unpublished acquired for node.');
+    $this->assertEquals($records[3]->gid, $node5->getOwnerId(), 'Grant with proper id acquired for node.');
+    $this->assertEquals($records[3]->grant_view, 1, 'Grant view stored.');
+    $this->assertEquals($records[3]->grant_update, 1, 'Grant update stored.');
+    $this->assertEquals($records[3]->grant_delete, 1, 'Grant delete stored.');
+    $this->assertEquals($records[4]->realm, 'site_id', 'Grant with site_id acquired for node.');
+    $this->assertEquals($records[4]->gid, $site_one->id(), 'Grant with proper id acquired for node.');
+    $this->assertEquals($records[4]->grant_view, 1, 'Grant view stored.');
+    $this->assertEquals($records[4]->grant_update, 1, 'Grant update stored.');
+    $this->assertEquals($records[4]->grant_delete, 1, 'Grant delete stored.');
+    $this->assertEquals($records[5]->realm, 'site_node_owner', 'Grant with site_node_owner acquired for node.');
+    $this->assertEquals($records[5]->gid, $node5->getOwnerId(), 'Grant with proper id acquired for node.');
+    $this->assertEquals($records[5]->grant_view, 1, 'Grant view stored.');
+    $this->assertEquals($records[5]->grant_update, 1, 'Grant update stored.');
+    $this->assertEquals($records[5]->grant_delete, 1, 'Grant delete stored.');
   }
 
 
diff --git a/tests/src/Functional/NodeCreateTest.php b/tests/src/Functional/NodeCreateTest.php
index 408ccf7..3f2f3a7 100644
--- a/tests/src/Functional/NodeCreateTest.php
+++ b/tests/src/Functional/NodeCreateTest.php
@@ -43,7 +43,7 @@ class NodeCreateTest extends MicroSiteBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
   }
 
@@ -52,7 +52,7 @@ class NodeCreateTest extends MicroSiteBase {
    */
   public function testNodeAccess() {
     $this->drupalGet(Url::fromUri($this->masterUrl));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $generic = $this->createSiteType('generic', 'Generic', 'Generic site type');
     $settings = ['user_id' => $this->microSiteOwnerUser->id()];
@@ -65,21 +65,21 @@ class NodeCreateTest extends MicroSiteBase {
     $site_one->setRegistered(TRUE);
     $site_one->save();
     $this->drupalGet(Url::fromUri($site_one->getSitePath()));
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->logInUser($this->globalAdminUser);
     $this->drupalGet(Url::fromUri($site_one->getSitePath()));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $xpath = $this->xpath("//a[contains(@href, '/site/" . $site_one->id() . "/content')]");
-    $this->assertEqual(count($xpath), 0, 'Tab content not found on the micro site home.');
+    $this->assertEquals(count($xpath), 0, 'Tab content not found on the micro site home.');
 
     $this->drupalGet(Url::fromUri($this->masterUrl));
     $this->logInUser($this->globalAdminUser);
     $config_url = $this->masterUrl . '/admin/config/micro_site/node';
     $this->drupalGet(Url::fromUri($config_url));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->checkField('node_types[page]');
     $this->pressButton('Save configuration');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
 
     $generic->setTypes(['page']);
@@ -87,20 +87,20 @@ class NodeCreateTest extends MicroSiteBase {
 
     $this->drupalGet(Url::fromUri($site_one->getSitePath()));
     $xpath = $this->xpath("//a[contains(@href, '/site/" . $site_one->id() . "/content')]");
-    $this->assertEqual(count($xpath), 1, 'Tab content found on the micro site home.');
+    $this->assertEquals(count($xpath), 1, 'Tab content found on the micro site home.');
 
     $this->clickLink('Content');
     $this->assertSession()->pageTextContains('Add Basic page');
     $this->assertSession()->pageTextNotContains('Add Article');
     $xpath = $this->xpath("//a[contains(@href, '/site/" . $site_one->id() . "/add/page')]");
-    $this->assertEqual(count($xpath), 1, 'Add Basic page link found.');
+    $this->assertEquals(count($xpath), 1, 'Add Basic page link found.');
     $xpath = $this->xpath("//a[contains(@href, '/site/" . $site_one->id() . "/add/article')]");
-    $this->assertEqual(count($xpath), 0, 'Add Article link not found.');
+    $this->assertEquals(count($xpath), 0, 'Add Article link not found.');
 
     $this->drupalGet(Url::fromUri($config_url));
     $this->checkField('node_types[article]');
     $this->pressButton('Save configuration');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
 
     $this->drupalGet(Url::fromUri($site_one->getSitePath()));
@@ -115,54 +115,54 @@ class NodeCreateTest extends MicroSiteBase {
     $this->assertSession()->pageTextContains('Add Article');
     $this->assertSession()->pageTextContains('Add Basic page');
     $xpath = $this->xpath("//a[contains(@href, '/site/" . $site_one->id() . "/add/article')]");
-    $this->assertEqual(count($xpath), 1, 'Add Article link found.');
+    $this->assertEquals(count($xpath), 1, 'Add Article link found.');
 
     $this->clickLink('Add Article');
     $target_id = $site_one->label() . ' (' . $site_one->id() . ')';
     $this->assertSession()->fieldValueEquals('site_id[0][target_id]', $target_id);
     $this->fillField('title[0][value]', 'Article 1');
     $this->pressButton('Save');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->pageTextContains('Article Article 1 has been created.');
     $articles = $this->entityTypeManager->getStorage('node')->loadByProperties(['title' => 'Article 1']);
-    $this->assertEqual(count($articles), 1, 'One article found.');
+    $this->assertEquals(count($articles), 1, 'One article found.');
     $article = reset($articles);
     $article_url = '/node/' . $article->id();
     $article_url_edit = '/node/' . $article->id() . '/edit';
 
     // Admin user have access to the node
     $this->drupalGet($this->masterUrl . $article_url);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet($this->masterUrl);
     $this->clickLink('Log out');
 
     $this->drupalGet($this->masterUrl . $article_url);
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $this->drupalGet($site_two->getSitePath() . $article_url);
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet($site_three->getSitePath() . $article_url);
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Global admin is logged in on site one.
     $this->drupalGet($site_one->getSitePath() . $article_url);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet($site_one->getSitePath());
     $this->clickLink('Log out');
     $this->drupalGet($site_one->getSitePath() . $article_url);
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $user = $this->createUserWithPassword(['access content', 'view own unpublished site entity', 'view published site entities', 'publish on any assigned site']);
     $this->drupalGet($site_one->getSitePath());
     $this->logInUser($user, FALSE);
     $this->drupalGet($site_one->getSitePath() . $article_url);
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $site_one->set(SiteUsers::MICRO_SITE_MEMBER, $user);
     $site_one->save();
     $this->drupalGet($site_one->getSitePath() . $article_url);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $site_one->setPublished(TRUE);
     $site_one->save();
@@ -170,26 +170,26 @@ class NodeCreateTest extends MicroSiteBase {
     $this->drupalGet($site_one->getSitePath());
     $this->clickLink('Log out');
     $this->drupalGet($site_one->getSitePath() . $article_url);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet($site_one->getSitePath());
     $this->logInUser($user);
     $xpath = $this->xpath("//a[contains(@href, '/site/" . $site_one->id() . "/content')]");
-    $this->assertEqual(count($xpath), 0, 'Tab content not accessible by member.');
+    $this->assertEquals(count($xpath), 0, 'Tab content not accessible by member.');
     $site_one->set(SiteUsers::MICRO_SITE_CONTRIBUTOR, $user);
     $site_one->set(SiteUsers::MICRO_SITE_MEMBER, []);
     $site_one->save();
 
     $this->drupalGet($site_one->getSitePath());
     $xpath = $this->xpath("//a[contains(@href, '/site/" . $site_one->id() . "/content')]");
-    $this->assertEqual(count($xpath), 1, 'Tab content accessible by contributor.');
+    $this->assertEquals(count($xpath), 1, 'Tab content accessible by contributor.');
     $this->clickLink('Content');
     $this->assertSession()->pageTextContains('Article 1');
     $xpath = $this->xpath("//a[contains(@href, '/node/" . $article->id() . "/edit')]");
-    $this->assertEqual(count($xpath), 0, 'Article not editable by member.');
+    $this->assertEquals(count($xpath), 0, 'Article not editable by member.');
 
     $this->drupalGet($site_one->getSitePath() . $article_url_edit);
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $site_one->set(SiteUsers::MICRO_SITE_MANAGER, [$user]);
     $site_one->set(SiteUsers::MICRO_SITE_CONTRIBUTOR, []);
@@ -204,9 +204,9 @@ class NodeCreateTest extends MicroSiteBase {
     $this->drupalGet($site_one->getSitePath());
     $this->clickLink('Content');
     $xpath = $this->xpath("//a[contains(@href, '/node/" . $article->id() . "/edit')]");
-    $this->assertEqual(count($xpath), 1, 'Article editable by manager.');
+    $this->assertEquals(count($xpath), 1, 'Article editable by manager.');
     $this->drupalGet($site_one->getSitePath() . $article_url_edit);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->pageTextContains('Others sites');
     $this->assertSession()->pageTextContains('Disable main site canonical url');
     $this->assertSession()->pageTextNotContains('Publish on master');
@@ -218,7 +218,7 @@ class NodeCreateTest extends MicroSiteBase {
     $site_one->save();
     $this->logInUser($new_user);
     $this->drupalGet($site_one->getSitePath() . $article_url_edit);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->pageTextContains('Others sites');
     $this->assertSession()->pageTextContains('Disable main site canonical url');
     $this->assertSession()->pageTextContains('Publish on master');
diff --git a/tests/src/Functional/NodeEditRedirectTest.php b/tests/src/Functional/NodeEditRedirectTest.php
index 61f1d5f..1668022 100644
--- a/tests/src/Functional/NodeEditRedirectTest.php
+++ b/tests/src/Functional/NodeEditRedirectTest.php
@@ -45,7 +45,7 @@ class NodeEditRedirectTest extends MicroSiteBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->configFactory->getEditable('micro_node.settings')->set('node_types', ['article', 'page'])->save(TRUE);
     foreach (['article', 'page'] as $bundle) {
