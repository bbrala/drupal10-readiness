diff --git a/tests/src/Functional/FieldEncryptCacheTest.php b/tests/src/Functional/FieldEncryptCacheTest.php
index 86e333f..f72dd9d 100644
--- a/tests/src/Functional/FieldEncryptCacheTest.php
+++ b/tests/src/Functional/FieldEncryptCacheTest.php
@@ -29,7 +29,7 @@ class FieldEncryptCacheTest extends FieldEncryptTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->entityTypeManager = $this->container->get('entity_type.manager');
diff --git a/tests/src/Functional/FieldEncryptTest.php b/tests/src/Functional/FieldEncryptTest.php
index e97fd88..6f031f3 100644
--- a/tests/src/Functional/FieldEncryptTest.php
+++ b/tests/src/Functional/FieldEncryptTest.php
@@ -51,17 +51,29 @@ class FieldEncryptTest extends FieldEncryptTestBase {
 
     // Check existence of EncryptedFieldValue entities.
     $encrypted_field_values = EncryptedFieldValue::loadMultiple();
-    $this->assertEqual(5, count($encrypted_field_values));
+    $this->assertEquals(5, count($encrypted_field_values));
 
     // Check if text is displayed unencrypted.
     $this->drupalGet('node/' . $this->testNode->id());
-    $this->assertText("Lorem ipsum dolor sit amet.");
-    $this->assertText("one");
-    $this->assertText("two");
-    $this->assertText("three");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Lorem ipsum dolor sit amet.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("one");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("two");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("three");
 
     $result = \Drupal::database()->query("SELECT field_test_single_value FROM {node__field_test_single} WHERE entity_id = :entity_id", [':entity_id' => $this->testNode->id()])->fetchField();
-    $this->assertEqual("[ENCRYPTED]", $result);
+    $this->assertEquals("[ENCRYPTED]", $result);
 
     $result = \Drupal::database()->query("SELECT field_test_multi_value FROM {node__field_test_multi} WHERE entity_id = :entity_id", [':entity_id' => $this->testNode->id()])->fetchAll();
     foreach ($result as $record) {
@@ -71,23 +83,41 @@ class FieldEncryptTest extends FieldEncryptTestBase {
     // Test updating entities with alternative encryption settings.
     $this->setFieldStorageSettings(TRUE, TRUE);
     // Update existing data with new field encryption settings.
-    $this->assertLinkByHref('admin/config/system/field-encrypt/field-update');
+    $this->assertSession()->linkByHrefExists('admin/config/system/field-encrypt/field-update');
     $this->drupalGet('admin/config/system/field-encrypt/field-update');
-    $this->assertText('There are 2 fields queued for encryption updates.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There are 2 fields queued for encryption updates.');
     $this->cronRun();
     $this->drupalGet('admin/config/system/field-encrypt/field-update');
-    $this->assertText('There are 0 fields queued for encryption updates.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There are 0 fields queued for encryption updates.');
 
     // Check existence of EncryptedFieldValue entities.
     $encrypted_field_values = EncryptedFieldValue::loadMultiple();
-    $this->assertEqual(5, count($encrypted_field_values));
+    $this->assertEquals(5, count($encrypted_field_values));
 
     // Check if text is displayed unencrypted.
     $this->drupalGet('node/' . $this->testNode->id());
-    $this->assertText("Lorem ipsum dolor sit amet.");
-    $this->assertText("one");
-    $this->assertText("two");
-    $this->assertText("three");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Lorem ipsum dolor sit amet.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("one");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("two");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("three");
 
     // Check values saved in the database.
     $result = \Drupal::database()->query("SELECT field_test_single_value FROM {node__field_test_single} WHERE entity_id = :entity_id", [':entity_id' => $this->testNode->id()])->fetchField();
@@ -101,12 +131,18 @@ class FieldEncryptTest extends FieldEncryptTestBase {
     // Test updating entities to remove field encryption.
     $this->setFieldStorageSettings(FALSE);
     // Update existing data with new field encryption settings.
-    $this->assertLinkByHref('admin/config/system/field-encrypt/field-update');
+    $this->assertSession()->linkByHrefExists('admin/config/system/field-encrypt/field-update');
     $this->drupalGet('admin/config/system/field-encrypt/field-update');
-    $this->assertText('There are 2 fields queued for encryption updates.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There are 2 fields queued for encryption updates.');
     $this->cronRun();
     $this->drupalGet('admin/config/system/field-encrypt/field-update');
-    $this->assertText('There are 0 fields queued for encryption updates.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There are 0 fields queued for encryption updates.');
 
     // Check removal of EncryptedFieldValue entities.
     $encrypted_field_values = EncryptedFieldValue::loadMultiple();
@@ -114,10 +150,22 @@ class FieldEncryptTest extends FieldEncryptTestBase {
 
     // Check if text is displayed unencrypted.
     $this->drupalGet('node/' . $this->testNode->id());
-    $this->assertText("Lorem ipsum dolor sit amet.");
-    $this->assertText("one");
-    $this->assertText("two");
-    $this->assertText("three");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Lorem ipsum dolor sit amet.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("one");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("two");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("three");
 
     $result = \Drupal::database()->query("SELECT field_test_single_value FROM {node__field_test_single} WHERE entity_id = :entity_id", [':entity_id' => $this->testNode->id()])->fetchField();
     $this->assertEquals("Lorem ipsum dolor sit amet.", $result);
@@ -155,7 +203,7 @@ class FieldEncryptTest extends FieldEncryptTestBase {
 
     // Ensure that the node revision has been created.
     $this->entityTypeManager->getStorage('node')->resetCache([$this->testNode->id()]);
-    $this->assertNotIdentical($this->testNode->getRevisionId(), $old_revision_id, 'A new revision has been created.');
+    $this->assertNotSame($this->testNode->getRevisionId(), $old_revision_id, 'A new revision has been created.');
 
     // Check existence of EncryptedFieldValue entities.
     $encrypted_field_values = EncryptedFieldValue::loadMultiple();
@@ -163,17 +211,41 @@ class FieldEncryptTest extends FieldEncryptTestBase {
 
     // Check if revisioned text is displayed unencrypted.
     $this->drupalGet('node/' . $this->testNode->id());
-    $this->assertText("Lorem ipsum dolor sit amet revisioned.");
-    $this->assertText("four");
-    $this->assertText("five");
-    $this->assertText("six");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Lorem ipsum dolor sit amet revisioned.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("four");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("five");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("six");
 
     // Check if original text is displayed unencrypted.
     $this->drupalGet('node/' . $this->testNode->id() . '/revisions/' . $old_revision_id . '/view');
-    $this->assertText("Lorem ipsum dolor sit amet.");
-    $this->assertText("one");
-    $this->assertText("two");
-    $this->assertText("three");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Lorem ipsum dolor sit amet.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("one");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("two");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("three");
 
     // Check values saved in the database.
     $result = \Drupal::database()->query("SELECT field_test_single_value FROM {node_revision__field_test_single} WHERE entity_id = :entity_id", [':entity_id' => $this->testNode->id()])->fetchField();
@@ -183,8 +255,9 @@ class FieldEncryptTest extends FieldEncryptTestBase {
     foreach ($result as $record) {
       $this->assertEquals("[ENCRYPTED]", $record->field_test_multi_value);
     }
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_test_multi/delete');
 
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_test_multi/delete', [], 'Delete');
+    $this->submitForm([], 'Delete');
 
     // Test if EncryptedFieldValue entities got deleted.
     $encrypted_field_values = EncryptedFieldValue::loadMultiple();
@@ -231,17 +304,41 @@ class FieldEncryptTest extends FieldEncryptTestBase {
 
     // Check if English text is displayed unencrypted.
     $this->drupalGet('node/' . $this->testNode->id());
-    $this->assertText("Lorem ipsum dolor sit amet.");
-    $this->assertText("one");
-    $this->assertText("two");
-    $this->assertText("three");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Lorem ipsum dolor sit amet.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("one");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("two");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("three");
 
     // Check if French text is displayed unencrypted.
     $this->drupalGet('fr/node/' . $this->testNode->id());
-    $this->assertText("Ceci est un text francais.");
-    $this->assertText("un");
-    $this->assertText("deux");
-    $this->assertText("trois");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Ceci est un text francais.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("un");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("deux");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("trois");
 
     // Check values saved in the database.
     $result = \Drupal::database()->query("SELECT field_test_single_value FROM {node__field_test_single} WHERE entity_id = :entity_id", [':entity_id' => $this->testNode->id()])->fetchAll();
