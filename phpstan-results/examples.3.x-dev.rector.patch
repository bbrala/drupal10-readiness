diff --git a/modules/ajax_example/tests/src/Functional/DynamicFormSectionsTest.php b/modules/ajax_example/tests/src/Functional/DynamicFormSectionsTest.php
index a06fece..13244f7 100644
--- a/modules/ajax_example/tests/src/Functional/DynamicFormSectionsTest.php
+++ b/modules/ajax_example/tests/src/Functional/DynamicFormSectionsTest.php
@@ -49,7 +49,7 @@ class DynamicFormSectionsTest extends BrowserTestBase {
     $this->drupalGet($dropdown_url);
     $this->submitForm(['question_type_select' => 'Choose question style'], 'Choose');
     $detail_children = $page->findAll('css', 'div.details-wrapper *');
-    $this->assertEqual(count($detail_children), 0);
+    $this->assertEquals(count($detail_children), 0);
 
     // Cycle through the other dropdown values.
     $question_styles = [
@@ -62,7 +62,7 @@ class DynamicFormSectionsTest extends BrowserTestBase {
       $this->drupalGet($dropdown_url);
       $this->submitForm(['question_type_select' => $question_style], 'Choose');
       $detail_children = $page->findAll('css', 'div.details-wrapper *');
-      $this->assertNotEqual($this->count($detail_children), 0);
+      $this->assertNotEquals($this->count($detail_children), 0);
       $this->submitForm(['question' => 'George Washington'], 'Submit your answer');
       $assert->pageTextContains('You got the right answer: George Washington');
     }
@@ -70,7 +70,7 @@ class DynamicFormSectionsTest extends BrowserTestBase {
     $this->drupalGet($dropdown_url);
     $this->submitForm(['question_type_select' => 'Multiple Choice'], 'Choose');
     $detail_children = $page->findAll('css', 'div.details-wrapper *');
-    $this->assertNotEqual($this->count($detail_children), 0);
+    $this->assertNotEquals($this->count($detail_children), 0);
     $this->submitForm(['question' => 'Abraham Lincoln'], 'Submit your answer');
     $assert->pageTextContains('Sorry, your answer (Abraham Lincoln) is wrong');
   }
diff --git a/modules/batch_example/tests/src/Functional/BatchExampleWebTest.php b/modules/batch_example/tests/src/Functional/BatchExampleWebTest.php
index 0a79a43..9b5ef89 100644
--- a/modules/batch_example/tests/src/Functional/BatchExampleWebTest.php
+++ b/modules/batch_example/tests/src/Functional/BatchExampleWebTest.php
@@ -35,13 +35,19 @@ class BatchExampleWebTest extends BrowserTestBase {
     $this->drupalGet('examples/batch_example');
     $this->submitForm(['batch' => 'batch_1'], 'Go');
     // Check that 1000 operations were performed.
-    $this->assertText('1000 results processed');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('1000 results processed');
 
     // Launch Batch 2.
     $this->drupalGet('examples/batch_example');
     $this->submitForm(['batch' => 'batch_2'], 'Go');
     // Check that 600 operations were performed.
-    $this->assertText('600 results processed');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('600 results processed');
   }
 
 }
diff --git a/modules/block_example/tests/src/Functional/BlockExampleMenuTest.php b/modules/block_example/tests/src/Functional/BlockExampleMenuTest.php
index 2b5fd2f..08a3b56 100644
--- a/modules/block_example/tests/src/Functional/BlockExampleMenuTest.php
+++ b/modules/block_example/tests/src/Functional/BlockExampleMenuTest.php
@@ -40,16 +40,16 @@ class BlockExampleMenuTest extends BrowserTestBase {
    */
   public function testBlockExampleLink() {
     $this->drupalGet('');
-    $this->assertLinkByHref('examples/block-example');
+    $this->assertSession()->linkByHrefExists('examples/block-example');
 
     $this->drupalGet('examples/block-example');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Verify that the block admin page link works.
     $this->clickLink('the block admin page');
     // Since it links to the admin page, we should get a permissions error and
     // not 404.
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }
 
 }
diff --git a/modules/config_entity_example/tests/src/Functional/ConfigEntityExampleTest.php b/modules/config_entity_example/tests/src/Functional/ConfigEntityExampleTest.php
index 137f640..ed4e806 100644
--- a/modules/config_entity_example/tests/src/Functional/ConfigEntityExampleTest.php
+++ b/modules/config_entity_example/tests/src/Functional/ConfigEntityExampleTest.php
@@ -130,9 +130,9 @@ class ConfigEntityExampleTest extends BrowserTestBase {
 
     // 6) Verify that required links are present on respective paths.
     $this->drupalGet(Url::fromRoute('entity.robot.list'));
-    $this->assertLinkByHref('/examples/config-entity-example/add');
-    $this->assertLinkByHref('/examples/config-entity-example/manage/robby_machine_name');
-    $this->assertLinkByHref('/examples/config-entity-example/manage/robby_machine_name/delete');
+    $this->assertSession()->linkByHrefExists('/examples/config-entity-example/add');
+    $this->assertSession()->linkByHrefExists('/examples/config-entity-example/manage/robby_machine_name');
+    $this->assertSession()->linkByHrefExists('/examples/config-entity-example/manage/robby_machine_name/delete');
 
     // Verify links on Add Robot.
     $this->drupalGet('/examples/config-entity-example/add');
@@ -140,7 +140,7 @@ class ConfigEntityExampleTest extends BrowserTestBase {
 
     // Verify links on Edit Robot.
     $this->drupalGet('/examples/config-entity-example/manage/robby_machine_name');
-    $this->assertLinkByHref('/examples/config-entity-example/manage/robby_machine_name/delete');
+    $this->assertSession()->linkByHrefExists('/examples/config-entity-example/manage/robby_machine_name/delete');
     $this->assertActionButton('examples/config-entity-example');
 
     // Verify links on Delete Robot.
@@ -150,7 +150,7 @@ class ConfigEntityExampleTest extends BrowserTestBase {
       '//a[@id="edit-cancel" and contains(@href, :path)]',
       [':path' => '/examples/config-entity-example']
     );
-    $this->assertEqual(count($cancel_button), 1, 'Found cancel button linking to list page.');
+    $this->assertEquals(count($cancel_button), 1, 'Found cancel button linking to list page.');
 
     // Try to submit a robot with a machine name of 'custom'. This is a reserved
     // keyword we've disallowed in the form.
@@ -171,7 +171,7 @@ class ConfigEntityExampleTest extends BrowserTestBase {
       '//a[contains(@class, "button-action") and contains(@data-drupal-link-system-path, :path)]',
       [':path' => $path]
     );
-    $this->assertEqual(count($button_element), 1, 'Found action button for path: ' . $path);
+    $this->assertEquals(count($button_element), 1, 'Found action button for path: ' . $path);
   }
 
 }
diff --git a/modules/cron_example/tests/src/Functional/CronExampleTest.php b/modules/cron_example/tests/src/Functional/CronExampleTest.php
index 1447361..d162700 100644
--- a/modules/cron_example/tests/src/Functional/CronExampleTest.php
+++ b/modules/cron_example/tests/src/Functional/CronExampleTest.php
@@ -30,7 +30,7 @@ class CronExampleTest extends ExamplesBrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // Create user. Search content permission granted for the search block to
     // be shown.
diff --git a/modules/dbtng_example/tests/src/Kernel/DbtngExampleRepositoryTest.php b/modules/dbtng_example/tests/src/Kernel/DbtngExampleRepositoryTest.php
index 152e061..f2a0fd0 100644
--- a/modules/dbtng_example/tests/src/Kernel/DbtngExampleRepositoryTest.php
+++ b/modules/dbtng_example/tests/src/Kernel/DbtngExampleRepositoryTest.php
@@ -34,7 +34,7 @@ class DbtngExampleRepositoryTest extends KernelTestBase {
    * Kernel tests do not invoke hook_schema() or hook_install(). Therefore we
    * have to do it if our tests expect them to have been run.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Install the schema we defined in hook_schema().
     $this->installSchema('dbtng_example', 'dbtng_example');
diff --git a/modules/events_example/events_example.services.yml b/modules/events_example/events_example.services.yml
index 8140164..ca89477 100644
--- a/modules/events_example/events_example.services.yml
+++ b/modules/events_example/events_example.services.yml
@@ -1,16 +1,6 @@
-# Subscribing to an event requires you to create a new service tagged with the
-# 'event_subscriber' tag. This tells the service container, and by proxy the
-# event dispatcher service, that the class registered here can be queried to get
-# a list of events that it would like to be notified about.
-#
-# For more on defining and tagging services see
-# https://api.drupal.org/api/drupal/core%21core.api.php/group/container/8.2.x
 services:
-  # Give your service a unique name, convention is to prefix service names with
-  # the name of the module that implements them.
   events_example_subscriber:
-    # Point to the class that will contain your implementation of
-    # \Symfony\Component\EventDispatcher\EventSubscriberInterface
     class: Drupal\events_example\EventSubscriber\EventsExampleSubscriber
     tags:
-      - {name: event_subscriber}
+      -
+        name: event_subscriber
diff --git a/modules/events_example/src/Event/IncidentReportEvent.php b/modules/events_example/src/Event/IncidentReportEvent.php
index 03dce0d..2c49964 100644
--- a/modules/events_example/src/Event/IncidentReportEvent.php
+++ b/modules/events_example/src/Event/IncidentReportEvent.php
@@ -17,7 +17,7 @@ use Symfony\Component\EventDispatcher\Event;
  *
  * @ingroup events_example
  */
-class IncidentReportEvent extends Event {
+class IncidentReportEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * Incident type.
diff --git a/modules/events_example/src/Form/EventsExampleForm.php b/modules/events_example/src/Form/EventsExampleForm.php
index fb0759d..a1e2b61 100644
--- a/modules/events_example/src/Form/EventsExampleForm.php
+++ b/modules/events_example/src/Form/EventsExampleForm.php
@@ -124,7 +124,7 @@ class EventsExampleForm extends FormBase {
     // to represent the event being dispatched. The constant serves as a
     // location for documentation of the event, and ensures your code is future
     // proofed against event name changes.
-    $this->eventDispatcher->dispatch(IncidentEvents::NEW_REPORT, $event);
+    $this->eventDispatcher->dispatch($event, IncidentEvents::NEW_REPORT);
   }
 
 }
diff --git a/modules/field_example/tests/src/Functional/FieldExampleBrowserTestBase.php b/modules/field_example/tests/src/Functional/FieldExampleBrowserTestBase.php
index a4fc78b..8ddc6b8 100644
--- a/modules/field_example/tests/src/Functional/FieldExampleBrowserTestBase.php
+++ b/modules/field_example/tests/src/Functional/FieldExampleBrowserTestBase.php
@@ -58,7 +58,7 @@ abstract class FieldExampleBrowserTestBase extends ExamplesBrowserTestBase {
    *
    * Once installed, a content type with the desired field is created.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // Install Drupal.
     parent::setUp();
 
@@ -80,7 +80,10 @@ abstract class FieldExampleBrowserTestBase extends ExamplesBrowserTestBase {
       'type' => $this->contentTypeName,
     ];
     $this->submitForm($edit, 'Save and manage fields');
-    $this->assertText((string) new FormattableMarkup('The content type @name has been added.', ['@name' => $this->contentTypeName]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains((string) new FormattableMarkup('The content type @name has been added.', ['@name' => $this->contentTypeName]));
 
     // Reset the permission cache.
     $create_permission = 'create ' . $this->contentTypeName . ' content';
diff --git a/modules/field_permission_example/tests/src/Kernel/FieldNoteItemTest.php b/modules/field_permission_example/tests/src/Kernel/FieldNoteItemTest.php
index 397d0d2..2135d0a 100644
--- a/modules/field_permission_example/tests/src/Kernel/FieldNoteItemTest.php
+++ b/modules/field_permission_example/tests/src/Kernel/FieldNoteItemTest.php
@@ -42,7 +42,7 @@ class FieldNoteItemTest extends FieldKernelTestBase {
    * This sets up the entity_test and user types to use our example
    * field plugins.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $type_manager = $this->container->get('entity_type.manager');
 
@@ -144,13 +144,13 @@ class FieldNoteItemTest extends FieldKernelTestBase {
 
     $this->assertTrue($entity->field_fieldnote instanceof FieldItemListInterface, 'Field implements interface.');
     $this->assertTrue($entity->field_fieldnote[0] instanceof FieldItemInterface, 'Field item implements interface.');
-    $this->assertEqual($entity->field_fieldnote->value, $value);
-    $this->assertEqual($entity->field_fieldnote[0]->value, $value);
+    $this->assertEquals($entity->field_fieldnote->value, $value);
+    $this->assertEquals($entity->field_fieldnote[0]->value, $value);
 
     // Verify changing the field's value.
     $new_value = $this->randomMachineName();
     $entity->field_fieldnote->value = $new_value;
-    $this->assertEqual($entity->field_fieldnote->value, $new_value);
+    $this->assertEquals($entity->field_fieldnote->value, $new_value);
 
     // Read changed entity and assert changed values.
     $entity->save();
@@ -160,7 +160,7 @@ class FieldNoteItemTest extends FieldKernelTestBase {
         ->getStorage('entity_test')
         ->load($id);
 
-    $this->assertEqual($entity->field_fieldnote->value, $new_value);
+    $this->assertEquals($entity->field_fieldnote->value, $new_value);
 
     // Test sample item generation.
     $entity
diff --git a/modules/form_api_example/src/Form/InputDemo.php b/modules/form_api_example/src/Form/InputDemo.php
index fcb8c3a..5345f71 100644
--- a/modules/form_api_example/src/Form/InputDemo.php
+++ b/modules/form_api_example/src/Form/InputDemo.php
@@ -260,7 +260,7 @@ class InputDemo extends FormBase {
     $form['image_button'] = [
       '#type' => 'image_button',
       '#value' => 'Image button',
-      '#src' => drupal_get_path('module', 'examples') . '/images/100x30.svg',
+      '#src' => \Drupal::service('extension.list.module')->getPath('examples') . '/images/100x30.svg',
       '#description' => $this->t('image file, #type = image_button'),
     ];
 
diff --git a/modules/form_api_example/tests/src/Functional/FapiExampleTest.php b/modules/form_api_example/tests/src/Functional/FapiExampleTest.php
index 2379611..07822fd 100644
--- a/modules/form_api_example/tests/src/Functional/FapiExampleTest.php
+++ b/modules/form_api_example/tests/src/Functional/FapiExampleTest.php
@@ -293,7 +293,7 @@ class FapiExampleTest extends ExamplesBrowserTestBase {
 
     // Verify that anonymous can access the ajax_add_more page.
     $this->drupalGet($ajax_addmore_url);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Verify that there is no remove button.
     $this->assertEmpty($this->xpath($button_xpath));
 
@@ -334,7 +334,10 @@ class FapiExampleTest extends ExamplesBrowserTestBase {
 
     // Submit the form and verify the results.
     $this->submitForm([], 'Submit');
-    $this->assertText('These people are coming to the picnic: ' . $name_one . ', ' . $name_two);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('These people are coming to the picnic: ' . $name_one . ', ' . $name_two);
 
   }
 
diff --git a/modules/hooks_example/tests/src/Functional/HooksExampleTest.php b/modules/hooks_example/tests/src/Functional/HooksExampleTest.php
index 78b6c10..e63edcf 100644
--- a/modules/hooks_example/tests/src/Functional/HooksExampleTest.php
+++ b/modules/hooks_example/tests/src/Functional/HooksExampleTest.php
@@ -32,7 +32,7 @@ class HooksExampleTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->createContentType(['type' => 'page']);
diff --git a/modules/menu_example/tests/src/Functional/MenuExampleTest.php b/modules/menu_example/tests/src/Functional/MenuExampleTest.php
index 862cd61..f058333 100644
--- a/modules/menu_example/tests/src/Functional/MenuExampleTest.php
+++ b/modules/menu_example/tests/src/Functional/MenuExampleTest.php
@@ -39,7 +39,7 @@ class MenuExampleTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // Always call the parent setUp().
     parent::setUp();
     // Add the main menu block, as provided by the Block module.
diff --git a/modules/node_type_example/tests/src/Functional/NodeTypeExampleTest.php b/modules/node_type_example/tests/src/Functional/NodeTypeExampleTest.php
index 8998421..a212108 100644
--- a/modules/node_type_example/tests/src/Functional/NodeTypeExampleTest.php
+++ b/modules/node_type_example/tests/src/Functional/NodeTypeExampleTest.php
@@ -153,15 +153,27 @@ class NodeTypeExampleTest extends ExamplesBrowserTestBase {
     $this->drupalGet('/node/add/basic_content_type');
     $this->submitForm($edit, 'Save');
     // Verify all fields and data of created content is shown.
-    $this->assertText($title);
-    $this->assertText($body);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($title);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($body);
 
     // Create a locked_content_type content.
     $this->drupalGet('/node/add/locked_content_type');
     $this->submitForm($edit, 'Save');
     // Verify all fields and data of created content is shown.
-    $this->assertText($title);
-    $this->assertText($body);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($title);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($body);
   }
 
   /**
diff --git a/modules/pager_example/tests/src/Functional/PagerExampleTest.php b/modules/pager_example/tests/src/Functional/PagerExampleTest.php
index 7c059d6..bc00470 100644
--- a/modules/pager_example/tests/src/Functional/PagerExampleTest.php
+++ b/modules/pager_example/tests/src/Functional/PagerExampleTest.php
@@ -25,7 +25,7 @@ class PagerExampleTest extends ExamplesBrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Log in a user to prevent caching from affecting the results.
diff --git a/modules/plugin_type_example/tests/src/Functional/PluginTypeExampleTest.php b/modules/plugin_type_example/tests/src/Functional/PluginTypeExampleTest.php
index 8473c36..9eee19b 100644
--- a/modules/plugin_type_example/tests/src/Functional/PluginTypeExampleTest.php
+++ b/modules/plugin_type_example/tests/src/Functional/PluginTypeExampleTest.php
@@ -65,7 +65,7 @@ class PluginTypeExampleTest extends ExamplesBrowserTestBase {
     $ref_day->setAccessible(TRUE);
     $ref_day->setValue($meatball, 'Sun');
     // Check the special description on Sunday.
-    $this->assertEqual($meatball->description(), 'Italian style meatballs drenched in irresistible marinara sauce, served on day old bread.');
+    $this->assertEquals($meatball->description(), 'Italian style meatballs drenched in irresistible marinara sauce, served on day old bread.');
   }
 
   /**
diff --git a/modules/queue_example/tests/src/Functional/QueueExampleTest.php b/modules/queue_example/tests/src/Functional/QueueExampleTest.php
index 25a34a1..9ab6da8 100644
--- a/modules/queue_example/tests/src/Functional/QueueExampleTest.php
+++ b/modules/queue_example/tests/src/Functional/QueueExampleTest.php
@@ -43,17 +43,23 @@ class QueueExampleTest extends BrowserTestBase {
     for ($i = 1; $i <= 5; $i++) {
       $edit = ['queue_name' => 'queue_example_first_queue', 'string_to_add' => 'boogie' . $i];
       $this->submitForm($edit, 'Insert into queue');
-      $this->assertText((string) new FormattableMarkup('There are now @number items in the queue', ['@number' => $i]));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains((string) new FormattableMarkup('There are now @number items in the queue', ['@number' => $i]));
     }
     // Claim each of the 5 items with a claim time of 0 seconds.
     for ($i = 1; $i <= 5; $i++) {
       $edit = ['queue_name' => 'queue_example_first_queue', 'claim_time' => 0];
       $this->submitForm($edit, 'Claim the next item from the queue');
-      $this->assertPattern((string) new FormattableMarkup('%Claimed item id=.*string=@string for 0 seconds.%', ['@string' => 'boogie' . $i]));
+      $this->assertSession()->responseMatches((string) new FormattableMarkup('%Claimed item id=.*string=@string for 0 seconds.%', ['@string' => 'boogie' . $i]));
     }
     $edit = ['queue_name' => 'queue_example_first_queue', 'claim_time' => 0];
     $this->submitForm($edit, 'Claim the next item from the queue');
-    $this->assertText('There were no items in the queue available to claim');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There were no items in the queue available to claim');
 
     // Sleep a second so we can make sure that the timeouts actually time out.
     // Local systems work fine with this but apparently the PIFR server is so
@@ -67,12 +73,15 @@ class QueueExampleTest extends BrowserTestBase {
     for ($i = 1; $i <= 5; $i++) {
       $edit = ['queue_name' => 'queue_example_first_queue', 'claim_time' => 0];
       $this->submitForm($edit, 'Claim the next item and delete it');
-      $this->assertPattern((string) new FormattableMarkup('%Claimed and deleted item id=.*string=@string for 0 seconds.%', ['@string' => 'boogie' . $i]));
+      $this->assertSession()->responseMatches((string) new FormattableMarkup('%Claimed and deleted item id=.*string=@string for 0 seconds.%', ['@string' => 'boogie' . $i]));
     }
     // Verify that nothing is left to claim.
     $edit = ['queue_name' => 'queue_example_first_queue', 'claim_time' => 0];
     $this->submitForm($edit, 'Claim the next item from the queue');
-    $this->assertText('There were no items in the queue available to claim');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There were no items in the queue available to claim');
   }
 
 }
diff --git a/modules/rest_example/tests/src/Functional/RestExampleActionTest.php b/modules/rest_example/tests/src/Functional/RestExampleActionTest.php
index ab074ca..3317189 100644
--- a/modules/rest_example/tests/src/Functional/RestExampleActionTest.php
+++ b/modules/rest_example/tests/src/Functional/RestExampleActionTest.php
@@ -32,7 +32,7 @@ class RestExampleActionTest extends BrowserTestBase {
    *
    * @throws \Drupal\Core\Entity\EntityStorageException
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setup();
 
     global $base_url;
diff --git a/modules/rest_example/tests/src/Functional/RestExampleSettingsTest.php b/modules/rest_example/tests/src/Functional/RestExampleSettingsTest.php
index c51e893..e57f687 100644
--- a/modules/rest_example/tests/src/Functional/RestExampleSettingsTest.php
+++ b/modules/rest_example/tests/src/Functional/RestExampleSettingsTest.php
@@ -48,7 +48,10 @@ class RestExampleSettingsTest extends BrowserTestBase {
 
     $this->drupalGet(base_path() . 'examples/rest-client-settings');
     $this->submitForm($edit, t('Save configuration'));
-    $this->assertText('The configuration options have been saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
 
     $config_factory = \Drupal::configFactory();
 
diff --git a/modules/session_example/tests/src/Functional/SessionExampleTest.php b/modules/session_example/tests/src/Functional/SessionExampleTest.php
index 4068960..0b2c037 100644
--- a/modules/session_example/tests/src/Functional/SessionExampleTest.php
+++ b/modules/session_example/tests/src/Functional/SessionExampleTest.php
@@ -28,7 +28,7 @@ class SessionExampleTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Place our blocks.
     $this->drupalPlaceBlock('local_tasks_block', ['region' => 'content']);
diff --git a/modules/stream_wrapper_example/tests/src/Kernel/StreamWrapperTest.php b/modules/stream_wrapper_example/tests/src/Kernel/StreamWrapperTest.php
index 0d92546..5d8b6a2 100644
--- a/modules/stream_wrapper_example/tests/src/Kernel/StreamWrapperTest.php
+++ b/modules/stream_wrapper_example/tests/src/Kernel/StreamWrapperTest.php
@@ -34,7 +34,7 @@ class StreamWrapperTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // We use a mock session here so that our session-based stream wrapper is
     // able to operate. Kernel tests don't normally have a logged-in user, so
@@ -60,7 +60,7 @@ class StreamWrapperTest extends KernelTestBase {
 
     $uri = 'session://drupal.txt';
 
-    $this->assertFileNotExists($uri, "File $uri should not exist yet.");
+    $this->assertFileDoesNotExist($uri, "File $uri should not exist yet.");
     $handle = fopen($uri, 'wb');
     $this->assertNotEmpty($handle, "Handle for $uri should be non-empty.");
     $buffer = "Ain't seen nothin' yet!\n";
@@ -76,7 +76,7 @@ class StreamWrapperTest extends KernelTestBase {
     $result = fclose($handle);
     $this->assertNotFalse($result, "Closed $uri.");
     $this->assertFileExists($uri, "File $uri should now exist.");
-    $this->assertDirectoryNotExists($uri, "$uri is not a directory.");
+    $this->assertDirectoryDoesNotExist($uri, "$uri is not a directory.");
     $this->assertTrue(is_file($uri), "$uri is a file.");
 
     $contents = file_get_contents($uri);
@@ -97,7 +97,7 @@ class StreamWrapperTest extends KernelTestBase {
 
     $dir = dirname($dir_uri);
 
-    $this->assertFileNotExists($dir, "The outer dir $dir should not exist yet.");
+    $this->assertFileDoesNotExist($dir, "The outer dir $dir should not exist yet.");
     // We don't care about mode, since we don't support it.
     $worked = mkdir($dir);
     $this->assertDirectoryExists($dir, "Directory $dir was created.");
@@ -121,7 +121,7 @@ class StreamWrapperTest extends KernelTestBase {
     $this->assertSame($content, $got_back, 'Data in subdir made round trip.');
     $worked = unlink($file_in_sub);
     $this->assertTrue($worked, 'Deleted file in subdir.');
-    $this->assertFileNotExists($file_in_sub, 'File in subdir should not exist.');
+    $this->assertFileDoesNotExist($file_in_sub, 'File in subdir should not exist.');
   }
 
   /**
diff --git a/modules/stream_wrapper_example/tests/src/Unit/SessionHelperTest.php b/modules/stream_wrapper_example/tests/src/Unit/SessionHelperTest.php
index bc711b5..9218fce 100644
--- a/modules/stream_wrapper_example/tests/src/Unit/SessionHelperTest.php
+++ b/modules/stream_wrapper_example/tests/src/Unit/SessionHelperTest.php
@@ -32,7 +32,7 @@ class SessionHelperTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Mock the session service.
diff --git a/modules/testing_example/src/Controller/TestingExampleController.php b/modules/testing_example/src/Controller/TestingExampleController.php
index 5620d56..07a3f52 100644
--- a/modules/testing_example/src/Controller/TestingExampleController.php
+++ b/modules/testing_example/src/Controller/TestingExampleController.php
@@ -30,7 +30,7 @@ class TestingExampleController {
    *   A render array.
    */
   public function simpletestDescription() {
-    $template_file = drupal_get_path('module', 'testing_example') . '/templates/simpletest.description.html.twig';
+    $template_file = \Drupal::service('extension.list.module')->getPath('testing_example') . '/templates/simpletest.description.html.twig';
     $build = [
       'description' => [
         '#type' => 'inline_template',
diff --git a/modules/testing_example/tests/src/Functional/ExampleFunctionalTest.php b/modules/testing_example/tests/src/Functional/ExampleFunctionalTest.php
index 3629d95..4f4e1b1 100644
--- a/modules/testing_example/tests/src/Functional/ExampleFunctionalTest.php
+++ b/modules/testing_example/tests/src/Functional/ExampleFunctionalTest.php
@@ -49,7 +49,7 @@ class ExampleFunctionalTest extends ExamplesBrowserTestBase {
    * The setUp() method is run before every other test method, so commonalities
    * should go here.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create users.
diff --git a/modules/testing_example/tests/src/Functional/FrontPageLinkDependenciesTest.php b/modules/testing_example/tests/src/Functional/FrontPageLinkDependenciesTest.php
index f4fea44..2292b57 100644
--- a/modules/testing_example/tests/src/Functional/FrontPageLinkDependenciesTest.php
+++ b/modules/testing_example/tests/src/Functional/FrontPageLinkDependenciesTest.php
@@ -42,7 +42,7 @@ class FrontPageLinkDependenciesTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // Always call the parent setUp().
     parent::setUp();
     // Add the Tools menu block, as provided by the Block module.
diff --git a/modules/testing_example/tests/src/Functional/TestingExampleMenuTest.php b/modules/testing_example/tests/src/Functional/TestingExampleMenuTest.php
index 1727c3a..8a74d89 100644
--- a/modules/testing_example/tests/src/Functional/TestingExampleMenuTest.php
+++ b/modules/testing_example/tests/src/Functional/TestingExampleMenuTest.php
@@ -45,10 +45,10 @@ class TestingExampleMenuTest extends BrowserTestBase {
   public function testTestingNavigation() {
     foreach (['' => '/examples/testing-example'] as $page => $path) {
       $this->drupalGet($page);
-      $this->assertLinkByHref($path);
+      $this->assertSession()->linkByHrefExists($path);
     }
     $this->drupalGet('/examples/testing-example');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }
 
 }
diff --git a/modules/testing_example/tests/src/Kernel/ExampleFixtureManagementTest.php b/modules/testing_example/tests/src/Kernel/ExampleFixtureManagementTest.php
index 1472424..dacb7b8 100644
--- a/modules/testing_example/tests/src/Kernel/ExampleFixtureManagementTest.php
+++ b/modules/testing_example/tests/src/Kernel/ExampleFixtureManagementTest.php
@@ -58,7 +58,7 @@ class ExampleFixtureManagementTest extends KernelTestBase {
    * In a Kernel test, setUp() can be responsible for creating any schema or
    * database configuration which must exist for the test.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Since kernel tests do not install modules, we have to install whatever
diff --git a/modules/testing_example/tests/src/Unit/Controller/ContrivedControllerTest.php b/modules/testing_example/tests/src/Unit/Controller/ContrivedControllerTest.php
index abcd1b0..eb0a01e 100644
--- a/modules/testing_example/tests/src/Unit/Controller/ContrivedControllerTest.php
+++ b/modules/testing_example/tests/src/Unit/Controller/ContrivedControllerTest.php
@@ -27,9 +27,7 @@ class ContrivedControllerTest extends UnitTestCase {
    * @dataProvider provideTestAdd
    */
   public function testAdd($expected, $first, $second) {
-    $controller = $this->getMockBuilder(ContrivedController::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $controller = $this->createMock(ContrivedController::class);
     $ref_add = new \ReflectionMethod($controller, 'add');
     $ref_add->setAccessible(TRUE);
     $this->assertEquals($expected, $ref_add->invokeArgs($controller, [$first, $second]));
diff --git a/modules/theming_example/tests/src/Functional/ThemingExampleTest.php b/modules/theming_example/tests/src/Functional/ThemingExampleTest.php
index 1703c31..bbd43c1 100644
--- a/modules/theming_example/tests/src/Functional/ThemingExampleTest.php
+++ b/modules/theming_example/tests/src/Functional/ThemingExampleTest.php
@@ -41,9 +41,9 @@ class ThemingExampleTest extends ExamplesBrowserTestBase {
     // Check that the main page has been themed (first line with <b>) and has
     // content.
     $this->drupalGet('/examples/theming_example');
-    $this->assertRaw('Some examples of pages and forms that are run through theme functions.</h1>');
-    $this->assertRaw('examples/theming_example/form_select">Simple form 1</a>');
-    $this->assertRaw('examples/theming_example/form_text">Simple form 2</a>');
+    $this->assertSession()->responseContains('Some examples of pages and forms that are run through theme functions.</h1>');
+    $this->assertSession()->responseContains('examples/theming_example/form_select">Simple form 1</a>');
+    $this->assertSession()->responseContains('examples/theming_example/form_text">Simple form 2</a>');
 
     // Visit the list demonstration page and check that css gets loaded
     // and do some spot checks on how the two lists were themed.
@@ -58,16 +58,19 @@ class ThemingExampleTest extends ExamplesBrowserTestBase {
     // Visit the select form page to do spot checks.
     $this->drupalGet('/examples/theming_example/form_select');
     // Choice element title should be output separately, as h3 header.
-    $this->assertRaw('<h3 data-drupal-selector="edit-title">Choose which ordering you want</h3>');
+    $this->assertSession()->responseContains('<h3 data-drupal-selector="edit-title">Choose which ordering you want</h3>');
     // Choice element should be wrapped with <strong> tag.
-    $this->assertRaw('<strong>Choose which ordering you want</strong>');
+    $this->assertSession()->responseContains('<strong>Choose which ordering you want</strong>');
     // Form elements should be wrapped with container-inline div.
     $this->assertSession()->responseMatches('/<div class="container-inline choice-wrapper"><div class="[a-zA-Z- ]* form-item-choice/');
     $this->assertSession()->responseNotMatches('/<link rel="stylesheet".*theming_example.css/');
 
     // Visit the text form page and do spot checks.
     $this->drupalGet('/examples/theming_example/form_text');
-    $this->assertText('Please input something!');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Please input something!');
   }
 
 }
diff --git a/tests/src/Functional/ExamplesBrowserTestBase.php b/tests/src/Functional/ExamplesBrowserTestBase.php
index 70c599d..85f0ce6 100644
--- a/tests/src/Functional/ExamplesBrowserTestBase.php
+++ b/tests/src/Functional/ExamplesBrowserTestBase.php
@@ -22,7 +22,7 @@ abstract class ExamplesBrowserTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Add the system menu blocks to appropriate regions.
     $this->setupExamplesMenus();
