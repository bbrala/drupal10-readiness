modules/contrib/activitypub/activitypub.install
modules/contrib/activitypub/src/Entity/ActivityPubType.php
modules/contrib/activitypub/src/Annotation/ActivityPubType.php
modules/contrib/activitypub/src/Plugin/activitypub/type/DirectMessageTypes.php
modules/contrib/activitypub/tests/src/Functional/ActivityPubTestBase.php
modules/contrib/activitypub/src/Commands/ActivityPubCommands.php
modules/contrib/activitypub/activitypub.module
modules/contrib/activitypub/src/Plugin/activitypub/type/DynamicTypes.php
modules/contrib/activitypub/src/Entity/ActivityPubTypeAccessControlHandler.php
modules/contrib/activitypub/src/Entity/ActivityPubTypeInterface.php
modules/contrib/activitypub/src/Entity/ActivityPubTypeListBuilder.php
modules/contrib/activitypub/activitypub.post_update.php
modules/contrib/activitypub/src/Entity/Storage/ActivityPubActivityStorage.php
modules/contrib/activitypub/src/Controller/ActivityController.php
modules/contrib/activitypub/src/Plugin/activitypub/type/StaticTypes.php
modules/contrib/activitypub/src/Controller/ActivityTypeController.php
modules/contrib/activitypub/src/Entity/Storage/ActivityPubActivityStorageInterface.php
modules/contrib/activitypub/src/Entity/Storage/ActivityPubActivityStorageSchema.php
modules/contrib/activitypub/src/Controller/BaseController.php
modules/contrib/activitypub/src/Entity/Storage/ActivityPubActorStorage.php
modules/contrib/activitypub/src/Controller/EntityController.php
modules/contrib/activitypub/src/Entity/Storage/ActivityPubActorStorageInterface.php
modules/contrib/activitypub/src/Entity/Storage/ActivityPubActorStorageSchema.php
modules/contrib/activitypub/src/Controller/FollowController.php
modules/contrib/activitypub/src/EventSubscriber/WebfingerProfileSubscriber.php
modules/contrib/activitypub/tests/src/Functional/ActorTest.php
modules/contrib/activitypub/src/Controller/InboxController.php
modules/contrib/activitypub/src/Form/ActivityPubActivityForm.php
modules/contrib/activitypub/src/ProxyClass/ParamConverter/ActivityPubActorConverter.php
modules/contrib/activitypub/src/Services/ActivityPubFormAlter.php
modules/contrib/activitypub/src/Controller/OutboxController.php
modules/contrib/activitypub/src/Form/ActivityPubSettingsForm.php
modules/contrib/activitypub/tests/src/Functional/CommentTest.php
modules/contrib/activitypub/src/Controller/UserController.php
modules/contrib/activitypub/src/Services/ActivityPubFormAlterInterface.php
modules/contrib/activitypub/src/Services/ActivityPubMediaCache.php
modules/contrib/activitypub/tests/src/Functional/DirectMessageTest.php
modules/contrib/activitypub/src/Form/ActivityPubTypeForm.php
modules/contrib/activitypub/src/Entity/ActivityPubActivity.php
modules/contrib/activitypub/src/Services/ActivityPubMediaCacheInterface.php
modules/contrib/activitypub/src/Services/ActivityPubProcessClient.php
modules/contrib/activitypub/src/Form/ActivityPubUserForm.php
modules/contrib/activitypub/tests/src/Functional/FollowTest.php
modules/contrib/activitypub/src/Form/ConfirmActivityPubActorDeleteForm.php
modules/contrib/activitypub/src/Form/FollowForm.php
modules/contrib/activitypub/src/ParamConverter/ActivityPubActorConverter.php
modules/contrib/activitypub/src/Plugin/Block/FollowBlock.php
modules/contrib/activitypub/src/Plugin/activitypub/type/Context.php
modules/contrib/activitypub/src/Entity/ActivityPubActivityAccessControlHandler.php
modules/contrib/activitypub/src/Entity/ActivityPubActivityInterface.php
modules/contrib/activitypub/src/Entity/ActivityPubActivityListBuilder.php
modules/contrib/activitypub/src/Services/ActivityPubProcessClientInterface.php
modules/contrib/activitypub/src/Services/ActivityPubUtility.php
modules/contrib/activitypub/src/Entity/ActivityPubActivityRouteProvider.php
modules/contrib/activitypub/tests/src/Functional/LikeTest.php
modules/contrib/activitypub/src/Entity/ActivityPubActor.php
modules/contrib/activitypub/tests/src/Functional/OutboxTest.php
modules/contrib/activitypub/src/Entity/ActivityPubActorInterface.php
modules/contrib/activitypub/src/Services/ActivityPubUtilityInterface.php
modules/contrib/activitypub/src/Services/Reader.php
modules/contrib/activitypub/tests/src/Functional/WebfingerTest.php
modules/contrib/activitypub/src/Services/Type/TypePluginBase.php
modules/contrib/activitypub/src/Services/Type/TypePluginInterface.php
modules/contrib/activitypub/src/Services/Type/TypePluginManager.php
modules/contrib/activitypub/src/StackMiddleware/FormatSetter.php

9 files with changes
====================

1) modules/contrib/activitypub/tests/src/Functional/OutboxTest.php:47

    ---------- begin diff ----------
@@ @@
       'body[0][value]' => 'Hello world!',
       'activitypub_type' => 'map',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $assert_session->addressEquals('node/1');
     $this->drupalGet('node/1/edit');
     $assert_session->pageTextContains('This post has been sent to the outbox.');
@@ @@
       'body[0][value]' => 'Hello world!',
       'activitypub_type' => 'map',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $assert_session->addressEquals('node/2');
     $this->drupalGet('node/2/edit');
     $assert_session->pageTextContains('This post has been sent to the outbox.');
@@ @@
       'activitypub_to' => $object_href,
       'status[value]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $count = \Drupal::queue(ACTIVITYPUB_OUTBOX_QUEUE)->numberOfItems();
     self::assertEquals(0, $count);

@@ @@
       'activitypub_type' => 'map',
       'activitypub_to' => $object_href,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->drupalLogout();

     /** @var \Drupal\node\NodeInterface $node */
@@ @@
       'body[0][value]' => 'Hello world!',
       'activitypub_type' => 'map',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->drupalLogout();

     /** @var \Drupal\node\NodeInterface $node */
@@ @@
     self::assertEquals($node->get('body')->value, $json['object']['content']);

     $this->drupalLogin($this->authenticatedUserOne);
-    $this->drupalPostForm('node/' . $node->id() . '/delete', [], 'Delete');
+    $this->drupalGet('node/' . $node->id() . '/delete');
+    $this->submitForm([], 'Delete');
     $count = \Drupal::queue(ACTIVITYPUB_OUTBOX_QUEUE)->numberOfItems();
     self::assertEquals(1, $count);
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/activitypub/tests/src/Functional/FollowTest.php:88

    ---------- begin diff ----------
@@ @@
     $edit = [
       'activitypub_blocked_domains' => 'http://blocked.domain*',
     ];
-    $this->drupalPostForm('user/' . $this->authenticatedUserTwo->id() . '/activitypub/settings', $edit, 'Save');
+    $this->drupalGet('user/' . $this->authenticatedUserTwo->id() . '/activitypub/settings');
+    $this->submitForm($edit, 'Save');
     $assert_session->responseContains('http://blocked.domain*');
     $this->drupalLogout();
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/activitypub/tests/src/Functional/CommentTest.php:45

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp(){
+  protected function setUp(): void{
     parent::setUp();

     /** @var \Drupal\user\RoleInterface $role */
@@ @@
       'process_inbox_handler' => 'drush',
       'comment_create_enable' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/services/activitypub', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/services/activitypub');
+    $this->submitForm($edit, 'Save configuration');
     $edit = ['existing_storage_name' => 'activitypub_activity', 'existing_storage_label' => 'Activity reference'];
-    $this->drupalPostForm('admin/structure/comment/manage/comment/fields/add-field', $edit, 'Save and continue');
-    $this->drupalPostForm('admin/structure/comment/manage/comment/display', ['fields[activitypub_activity][region]' => 'hidden'], 'Save');
+    $this->drupalGet('admin/structure/comment/manage/comment/fields/add-field');
+    $this->submitForm($edit, 'Save and continue');
+    $this->drupalGet('admin/structure/comment/manage/comment/display');
+    $this->submitForm(['fields[activitypub_activity][region]' => 'hidden'], 'Save');

     $node_content = 'But who will read it?';
     $node_values = [
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/activitypub/tests/src/Functional/ActorTest.php:30

    ---------- begin diff ----------
@@ @@
       'activitypub_name' => 'fediverse accountname',
     ];
     $this->drupalLogin($this->authenticatedUserTwo);
-    $this->drupalPostForm('user/' . $this->authenticatedUserTwo->id() . '/activitypub/settings', $edit, 'Save');
+    $this->drupalGet('user/' . $this->authenticatedUserTwo->id() . '/activitypub/settings');
+    $this->submitForm($edit, 'Save');
     $assert_session->responseContains('The username can only contain letters and numbers.');

     $edit['activitypub_name'] = 'fediverseaccountname_';
-    $this->drupalPostForm('user/' . $this->authenticatedUserTwo->id() . '/activitypub/settings', $edit, 'Save');
+    $this->drupalGet('user/' . $this->authenticatedUserTwo->id() . '/activitypub/settings');
+    $this->submitForm($edit, 'Save');
     $assert_session->responseContains('The username can only contain letters and numbers.');

     $edit['activitypub_name'] = $this->accountNameOne;
-    $this->drupalPostForm('user/' . $this->authenticatedUserTwo->id() . '/activitypub/settings', $edit, 'Save');
+    $this->drupalGet('user/' . $this->authenticatedUserTwo->id() . '/activitypub/settings');
+    $this->submitForm($edit, 'Save');
     $assert_session->responseContains('This username is already taken.');
     $edit['activitypub_name'] = $this->accountNameTwo;
-    $this->drupalPostForm('user/' . $this->authenticatedUserTwo->id() . '/activitypub/settings', $edit, 'Save');
+    $this->drupalGet('user/' . $this->authenticatedUserTwo->id() . '/activitypub/settings');
+    $this->submitForm($edit, 'Save');
     $this->drupalLogout();

     $this->drupalGet(Url::fromRoute('activitypub.inbox', ['user' => $this->authenticatedUserOne->id(), 'activitypub_actor' => $this->accountNameOne])->toString());
@@ @@
     $assert_session->statusCodeEquals(404);
     $this->drupalGet('user/' . $this->authenticatedUserOne->id() . '/activitypub/delete/' . $this->accountNameTwo);
     $assert_session->statusCodeEquals(403);
-    $this->drupalPostForm('user/' . $this->authenticatedUserOne->id() . '/activitypub/delete/' . $this->accountNameOne, array(), 'Confirm');
+    $this->drupalGet('user/' . $this->authenticatedUserOne->id() . '/activitypub/delete/' . $this->accountNameOne);
+    $this->submitForm(array(), 'Confirm');
     self::assertTrue(!file_exists('private://activitypub/keys/' . $this->accountNameOne . '/public.pem'));
     $this->drupalGet('user/' . $this->authenticatedUserOne->id() . '/activitypub');
     $assert_session->responseNotContains('ActivityPub is enabled.');
@@ @@
     $edit = [
       'activitypub_summary' => 'Hi, I am just testing the Drupal integration',
     ];
-    $this->drupalPostForm('user/' . $this->authenticatedUserOne->id() . '/activitypub/settings', $edit, 'Save');
+    $this->drupalGet('user/' . $this->authenticatedUserOne->id() . '/activitypub/settings');
+    $this->submitForm($edit, 'Save');
     $this->drupalLogout();
     $this->drupalGet(Url::fromRoute('activitypub.user.self', ['user' => $this->authenticatedUserOne->id(), 'activitypub_actor' => $this->accountNameOne])->toString());
     $assert_session->statusCodeEquals(200);
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/activitypub/tests/src/Functional/ActivityPubTestBase.php:98

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     /** @var \Drupal\user\RoleInterface $role */
@@ @@

     $this->drupalGet('user/' . $this->authenticatedUserOne->id() . '/activitypub');
     $assert_session->responseContains('ActivityPub is not enabled for your account.');
+    $this->drupalGet('user/' . $this->authenticatedUserOne->id() . '/activitypub/settings');

-    $this->drupalPostForm('user/' . $this->authenticatedUserOne->id() . '/activitypub/settings', $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $assert_session->responseContains('Please enter your ActivityPub username.');
     $edit = [
       'activitypub_enable' => TRUE,
       'activitypub_name' => $this->accountNameOne,
     ];
-    $this->drupalPostForm('user/' . $this->authenticatedUserOne->id() . '/activitypub/settings', $edit, 'Save');
+    $this->drupalGet('user/' . $this->authenticatedUserOne->id() . '/activitypub/settings');
+    $this->submitForm($edit, 'Save');

     if ($enable_second_account) {
       $this->drupalLogin($this->authenticatedUserTwo);
@@ @@
         'activitypub_enable' => TRUE,
         'activitypub_name' => $this->accountNameTwo,
       ];
-      $this->drupalPostForm('user/' . $this->authenticatedUserTwo->id() . '/activitypub/settings', $edit, 'Save');
+      $this->drupalGet('user/' . $this->authenticatedUserTwo->id() . '/activitypub/settings');
+      $this->submitForm($edit, 'Save');
     }
   }

@@ @@
       'collection' => 'outbox',
       'status' => 0,
     ];
-    $this->drupalPostForm('activitypub/add', $edit, 'Save');
+    $this->drupalGet('activitypub/add');
+    $this->submitForm($edit, 'Save');
     $this->drupalLogout();

     if ($run_queue) {
@@ @@
     $edit = [
       'process_outbox_handler' => 'drush',
     ];
-    $this->drupalPostForm('admin/config/services/activitypub', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/services/activitypub');
+    $this->submitForm($edit, 'Save configuration');
     $this->drupalLogout();;
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/activitypub/src/Services/Type/TypePluginBase.php:244

    ---------- begin diff ----------
@@ @@
       return $image_style->buildUrl($file->getFileUri());
     }
     else {
-      return file_create_url($file->getFileUri());
+      return \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
     }
   }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/activitypub/src/Services/ActivityPubUtility.php:121

    ---------- begin diff ----------
@@ @@
     else {
       $avatar_path = activitypub_default_avatar_path();
       if ($avatar_path == 'assets/avatar.png') {
-        $avatar_path = drupal_get_path('module', 'activitypub') . '/' . $avatar_path;
+        $avatar_path = \Drupal::service('extension.list.module')->getPath('activitypub') . '/' . $avatar_path;
       }
-      $image_url = file_create_url($avatar_path);
+      $image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($avatar_path);
     }

     return $image_url;
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector


8) modules/contrib/activitypub/src/Services/ActivityPubMediaCache.php:71

    ---------- begin diff ----------
@@ @@
           $filename = $style->buildUrl($filename);
         }
         else {
-          $filename = file_create_url($filename);
+          $filename = \Drupal::service('file_url_generator')->generateAbsoluteString($filename);
         }
       }
       else {
-        $filename = file_create_url($filename);
+        $filename = \Drupal::service('file_url_generator')->generateAbsoluteString($filename);
       }
     }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector


9) modules/contrib/activitypub/src/ProxyClass/ParamConverter/ActivityPubActorConverter.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\activitypub\ProxyClass\ParamConverter {

+    use Drupal\Core\ParamConverter\ParamConverterInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
+    use Symfony\Component\Routing\Route;
     /**
      * Provides a proxy class for \Drupal\activitypub\ParamConverter\ActivityPubActorConverter.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class ActivityPubActorConverter implements \Drupal\Core\ParamConverter\ParamConverterInterface
+    class ActivityPubActorConverter implements ParamConverterInterface
     {

-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;

         /**
          * The id of the original proxied service.
@@ @@
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
@@ @@
         /**
          * {@inheritdoc}
          */
-        public function applies($definition, $name, \Symfony\Component\Routing\Route $route)
+        public function applies($definition, $name, Route $route)
         {
             return $this->lazyLoadItself()->applies($definition, $name, $route);
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


 [OK] 9 files have been changed by Rector                                       

