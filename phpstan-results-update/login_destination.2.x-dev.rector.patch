diff --git a/composer.json b/composer.json
index bfb09ab..75ea8f8 100644
--- a/composer.json
+++ b/composer.json
@@ -21,7 +21,7 @@
     "source": "https://git.drupalcode.org/project/login_destination"
   },
   "require": {
-    "drupal/core": "^8.7.10 || ^9"
+    "drupal/core": "^9.1 || ^10"
   },
   "require-dev": {
     "drupal/admin_toolbar": "^1.23"
diff --git a/login_destination.info.yml b/login_destination.info.yml
index 97aff6e..a6e7694 100644
--- a/login_destination.info.yml
+++ b/login_destination.info.yml
@@ -2,7 +2,7 @@ name: Login Destination
 type: module
 description: Customizes the destination the user is redirected to after login/logout/registration/one-time login.
 package: User
-core_version_requirement: "^8.7.10 || ^9"
+core_version_requirement: ^9.1 || ^10
 configure: login_destination.list
 
 dependencies:
diff --git a/tests/src/Functional/InstallTest.php b/tests/src/Functional/InstallTest.php
index 4c3594d..d0afb42 100644
--- a/tests/src/Functional/InstallTest.php
+++ b/tests/src/Functional/InstallTest.php
@@ -33,7 +33,7 @@ class InstallTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->moduleHandler = $this->container->get('module_handler');
     $this->moduleInstaller = $this->container->get('module_installer');
@@ -79,7 +79,7 @@ class InstallTest extends BrowserTestBase {
     $this->drupalLogin($admin);
 
     // Assert that expanded links are present in the HTML.
-    $this->assertRaw('class="toolbar-icon toolbar-icon-user-admin-index"');
+    $this->assertSession()->responseContains('class="toolbar-icon toolbar-icon-user-admin-index"');
   }
 
 }
diff --git a/tests/src/Functional/RedirectTest.php b/tests/src/Functional/RedirectTest.php
index d8c5533..7bd8590 100644
--- a/tests/src/Functional/RedirectTest.php
+++ b/tests/src/Functional/RedirectTest.php
@@ -32,7 +32,7 @@ class RedirectTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create a node page to redirect to.
@@ -101,7 +101,8 @@ class RedirectTest extends BrowserTestBase {
         'pass[pass2]' => $password,
       ];
     }
-    $this->drupalPostForm('user/register', $edit, 'Create new account');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, 'Create new account');
 
     $storage = $this->container->get('entity_type.manager')->getStorage('user');
     $storage->resetCache();
@@ -155,7 +156,7 @@ class RedirectTest extends BrowserTestBase {
 
     $this->createLoginDestinationToNode1([LoginDestination::TRIGGER_REGISTRATION]);
 
-    $this->register(user_password());
+    $this->register(\Drupal::service('password_generator')->generate());
     $this->assertSession()->pageTextContains('Registration successful. You are now logged in.');
 
     // Ensure that the redirect happened.
@@ -182,7 +183,7 @@ class RedirectTest extends BrowserTestBase {
       LoginDestination::TRIGGER_LOGOUT,
     ]);
 
-    $this->register(user_password());
+    $this->register(\Drupal::service('password_generator')->generate());
     $this->assertSession()->pageTextContains('Registration successful. You are now logged in.');
 
     // Ensure that no login destination redirect happened.
@@ -197,8 +198,9 @@ class RedirectTest extends BrowserTestBase {
 
     // Generate password reset URL.
     $url = user_pass_reset_url($this->account);
+    $this->drupalGet($url);
     // And use the one-time login link.
-    $this->drupalPostForm($url, NULL, 'Log in');
+    $this->submitForm(NULL, 'Log in');
     $this->assertSession()->pageTextContains('You have just used your one-time login link. It is no longer necessary to use this link to log in. Please change your password.');
     $this->assertSession()->titleEquals(strtr('@name | @site', [
       '@name' => $this->account->getAccountName(),
@@ -206,12 +208,12 @@ class RedirectTest extends BrowserTestBase {
     ]));
 
     // Set a new password.
-    $password = user_password();
+    $password = \Drupal::service('password_generator')->generate();
     $edit = [
       'pass[pass1]' => $password,
       'pass[pass2]' => $password,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('The changes have been saved.');
 
     // Assert that the redirect has happened now.
@@ -235,8 +237,9 @@ class RedirectTest extends BrowserTestBase {
 
     // Generate password reset URL.
     $url = user_pass_reset_url($this->account);
+    $this->drupalGet($url);
     // And use the one-time login link.
-    $this->drupalPostForm($url, NULL, 'Log in');
+    $this->submitForm(NULL, 'Log in');
     $this->assertSession()->pageTextContains('You have just used your one-time login link. It is no longer necessary to use this link to log in. Please change your password.');
     $this->assertSession()->titleEquals(strtr('@name | @site', [
       '@name' => $this->account->getAccountName(),
@@ -244,12 +247,12 @@ class RedirectTest extends BrowserTestBase {
     ]));
 
     // Set a new password.
-    $password = user_password();
+    $password = \Drupal::service('password_generator')->generate();
     $edit = [
       'pass[pass1]' => $password,
       'pass[pass2]' => $password,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('The changes have been saved.');
 
     // Ensure that no login destination redirect happened.
@@ -268,8 +271,9 @@ class RedirectTest extends BrowserTestBase {
 
     // Generate password reset URL.
     $url = user_pass_reset_url($this->account);
+    $this->drupalGet($url);
     // And use the one-time login link.
-    $this->drupalPostForm($url, NULL, 'Log in');
+    $this->submitForm(NULL, 'Log in');
 
     // Assert that the redirect happened immediately.
     $this->assertSession()->statusCodeEquals(200);
@@ -297,8 +301,9 @@ class RedirectTest extends BrowserTestBase {
 
     // Generate password reset URL.
     $url = user_pass_reset_url($this->account);
+    $this->drupalGet($url);
     // And use the one-time login link.
-    $this->drupalPostForm($url, NULL, 'Log in');
+    $this->submitForm(NULL, 'Log in');
 
     // Ensure that no login destination redirect happened.
     $this->assertSession()->addressEquals('/user/2/edit');
@@ -315,13 +320,14 @@ class RedirectTest extends BrowserTestBase {
     $this->drupalLogin($this->account);
 
     // Set password on account edit page.
-    $password = user_password();
+    $password = \Drupal::service('password_generator')->generate();
     $edit = [
       'current_pass' => $this->account->passRaw,
       'pass[pass1]' => $password,
       'pass[pass2]' => $password,
     ];
-    $this->drupalPostForm('user/2/edit', $edit, 'Save');
+    $this->drupalGet('user/2/edit');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('The changes have been saved.');
 
     // Assert that the user is still on their account edit page.
