diff --git a/src/Controller/XmlSitemapController.php b/src/Controller/XmlSitemapController.php
index ccd7535..c72641b 100644
--- a/src/Controller/XmlSitemapController.php
+++ b/src/Controller/XmlSitemapController.php
@@ -159,7 +159,7 @@ class XmlSitemapController extends ControllerBase {
    */
   public function renderSitemapXsl() {
     // Read the XSL content from the file.
-    $module_path = drupal_get_path('module', 'xmlsitemap');
+    $module_path = \Drupal::service('extension.list.module')->getPath('xmlsitemap');
     $xsl_content = file_get_contents($module_path . '/xsl/xmlsitemap.xsl');
 
     // Make sure the strings in the XSL content are translated properly.
diff --git a/src/Form/XmlSitemapSettingsForm.php b/src/Form/XmlSitemapSettingsForm.php
index 8c4fb42..c02d5e2 100644
--- a/src/Form/XmlSitemapSettingsForm.php
+++ b/src/Form/XmlSitemapSettingsForm.php
@@ -197,7 +197,7 @@ class XmlSitemapSettingsForm extends ConfigFormBase {
       '#size' => 30,
       '#maxlength' => 255,
       '#description' => $this->t('Subdirectory where the sitemap data will be stored. This folder <strong>must not be shared</strong> with any other Drupal site or install using XML Sitemap.'),
-      '#field_prefix' => file_build_uri(''),
+      '#field_prefix' => \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . '')),
       '#required' => TRUE,
     ];
     $base_url_override = Settings::get('xmlsitemap_base_url', FALSE);
diff --git a/src/XmlSitemapLinkStorage.php b/src/XmlSitemapLinkStorage.php
index 2a641c6..3614227 100644
--- a/src/XmlSitemapLinkStorage.php
+++ b/src/XmlSitemapLinkStorage.php
@@ -108,7 +108,7 @@ class XmlSitemapLinkStorage implements XmlSitemapLinkStorageInterface {
         }
         else {
           // Attempt to transform this to a relative URL.
-          $loc = file_url_transform_relative($url->toString());
+          $loc = \Drupal::service('file_url_generator')->transformRelative($url->toString());
           // If it could not be transformed into a relative path, disregard it
           // since we cannot store external URLs in the sitemap.
           if (UrlHelper::isExternal($loc)) {
diff --git a/tests/src/Functional/XmlSitemapEntityFunctionalTest.php b/tests/src/Functional/XmlSitemapEntityFunctionalTest.php
index a24cecd..39d9848 100644
--- a/tests/src/Functional/XmlSitemapEntityFunctionalTest.php
+++ b/tests/src/Functional/XmlSitemapEntityFunctionalTest.php
@@ -21,7 +21,7 @@ class XmlSitemapEntityFunctionalTest extends XmlSitemapTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->admin_user = $this->drupalCreateUser(['administer entity_test content', 'administer xmlsitemap']);
@@ -45,7 +45,7 @@ class XmlSitemapEntityFunctionalTest extends XmlSitemapTestBase {
       'entity_types[entity_test_mul]' => 1,
       'settings[entity_test_mul][types][entity_test_mul]' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $entity = EntityTestMul::create();
     $entity->save();
@@ -77,7 +77,7 @@ class XmlSitemapEntityFunctionalTest extends XmlSitemapTestBase {
       'xmlsitemap[priority]' => 0.3,
       'xmlsitemap[changefreq]' => XMLSITEMAP_FREQUENCY_WEEKLY,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));
     $entity = EntityTestMul::create();
     $entity->save();
     $this->assertSitemapLinkValues('entity_test_mul', $entity->id(), [
@@ -100,7 +100,8 @@ class XmlSitemapEntityFunctionalTest extends XmlSitemapTestBase {
       'xmlsitemap[priority]' => 0.6,
       'xmlsitemap[changefreq]' => XMLSITEMAP_FREQUENCY_YEARLY,
     ];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/settings/entity_test_mul/entity_test_mul', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/search/xmlsitemap/settings/entity_test_mul/entity_test_mul');
+    $this->submitForm($edit, t('Save configuration'));
     $entity = EntityTestMul::create();
     $entity->save();
     $this->assertSitemapLinkValues('entity_test_mul', $entity->id(), [
diff --git a/tests/src/Functional/XmlSitemapFunctionalTest.php b/tests/src/Functional/XmlSitemapFunctionalTest.php
index f4f11d4..ea54f0e 100644
--- a/tests/src/Functional/XmlSitemapFunctionalTest.php
+++ b/tests/src/Functional/XmlSitemapFunctionalTest.php
@@ -17,7 +17,7 @@ class XmlSitemapFunctionalTest extends XmlSitemapTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->admin_user = $this->drupalCreateUser([
@@ -54,18 +54,22 @@ class XmlSitemapFunctionalTest extends XmlSitemapTestBase {
     // @codingStandardsIgnoreEnd
     $this->drupalLogin($this->admin_user);
     $edit = ['xmlsitemap_base_url' => ''];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/settings', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/search/xmlsitemap/settings');
+    $this->submitForm($edit, 'Save configuration');
 
     $edit = ['xmlsitemap_base_url' => 'invalid'];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/settings', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/search/xmlsitemap/settings');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->pageTextContains('Invalid base URL.');
 
     $edit = ['xmlsitemap_base_url' => 'http://example.com/ '];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/settings', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/search/xmlsitemap/settings');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->pageTextContains('Invalid base URL.');
 
     $edit = ['xmlsitemap_base_url' => 'http://example.com/'];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/settings', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/search/xmlsitemap/settings');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
 
     $this->regenerateSitemap();
diff --git a/tests/src/Functional/XmlSitemapListBuilderTest.php b/tests/src/Functional/XmlSitemapListBuilderTest.php
index 115e8a4..b2fd5a7 100644
--- a/tests/src/Functional/XmlSitemapListBuilderTest.php
+++ b/tests/src/Functional/XmlSitemapListBuilderTest.php
@@ -28,7 +28,7 @@ class XmlSitemapListBuilderTest extends XmlSitemapTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->entityTypeManager = $this->container->get('entity_type.manager');
@@ -55,11 +55,13 @@ class XmlSitemapListBuilderTest extends XmlSitemapTestBase {
     $edit = [
       'site_default_language' => 'en',
     ];
-    $this->drupalPostForm('admin/config/regional/language', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/regional/language');
+    $this->submitForm($edit, t('Save configuration'));
 
     // Enable URL language detection and selection.
     $edit = ['language_interface[enabled][language-url]' => '1'];
-    $this->drupalPostForm('admin/config/regional/language/detection', $edit, t('Save settings'));
+    $this->drupalGet('admin/config/regional/language/detection');
+    $this->submitForm($edit, t('Save settings'));
   }
 
   /**
@@ -83,7 +85,8 @@ class XmlSitemapListBuilderTest extends XmlSitemapTestBase {
       'label' => 'English',
       'context[language]' => 'en',
     ];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/search/xmlsitemap/add');
+    $this->submitForm($edit, t('Save'));
     $context = ['language' => 'en'];
     $id = xmlsitemap_sitemap_get_context_hash($context);
     $this->assertSession()->pageTextContains('Saved the English sitemap.');
@@ -93,19 +96,22 @@ class XmlSitemapListBuilderTest extends XmlSitemapTestBase {
       'label' => 'French',
       'context[language]' => 'fr',
     ];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/add', $edit, 'Save');
+    $this->drupalGet('admin/config/search/xmlsitemap/add');
+    $this->submitForm($edit, 'Save');
     $context = ['language' => 'fr'];
     $id = xmlsitemap_sitemap_get_context_hash($context);
     $this->assertSession()->pageTextContains('Saved the French sitemap.');
     $this->assertSession()->pageTextContains($id);
+    $this->drupalGet('admin/config/search/xmlsitemap/add');
 
-    $this->drupalPostForm('admin/config/search/xmlsitemap/add', $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains('There is another sitemap saved with the same context.');
 
     $sitemaps = XmlSitemap::loadMultiple();
     foreach ($sitemaps as $sitemap) {
       $label = $sitemap->label();
-      $this->drupalPostForm("admin/config/search/xmlsitemap/{$sitemap->id()}/delete", [], t('Delete'));
+      $this->drupalGet("admin/config/search/xmlsitemap/{$sitemap->id()}/delete");
+      $this->submitForm([], t('Delete'));
       $this->assertSession()->responseContains((string) new FormattableMarkup('Sitemap %label has been deleted.', ['%label' => $label]));
     }
 
diff --git a/tests/src/Functional/XmlSitemapMenuFunctionalTest.php b/tests/src/Functional/XmlSitemapMenuFunctionalTest.php
index 1c4d4b2..0d91a71 100644
--- a/tests/src/Functional/XmlSitemapMenuFunctionalTest.php
+++ b/tests/src/Functional/XmlSitemapMenuFunctionalTest.php
@@ -27,7 +27,7 @@ class XmlSitemapMenuFunctionalTest extends XmlSitemapTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->entityTypeBundleInfo = $this->container->get('entity_type.bundle.info');
@@ -93,7 +93,7 @@ class XmlSitemapMenuFunctionalTest extends XmlSitemapTestBase {
   /**
    * {@inheritdoc}
    */
-  public function tearDown() {
+  public function tearDown(): void {
     $bundles = $this->entityTypeBundleInfo->getAllBundleInfo();
     foreach ($bundles['menu_link_content'] as $bundle_id => $bundle) {
       xmlsitemap_link_bundle_delete('menu_link_content', $bundle_id);
diff --git a/tests/src/Functional/XmlSitemapMultilingualNodeTest.php b/tests/src/Functional/XmlSitemapMultilingualNodeTest.php
index 3391306..2c4f5f5 100644
--- a/tests/src/Functional/XmlSitemapMultilingualNodeTest.php
+++ b/tests/src/Functional/XmlSitemapMultilingualNodeTest.php
@@ -21,7 +21,7 @@ class XmlSitemapMultilingualNodeTest extends XmlSitemapMultilingualTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->admin_user = $this->drupalCreateUser([
@@ -47,7 +47,8 @@ class XmlSitemapMultilingualNodeTest extends XmlSitemapMultilingualTestBase {
     $edit = [
       'language_configuration[language_alterable]' => TRUE,
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page', $edit, 'Save content type');
+    $this->drupalGet('admin/structure/types/manage/page');
+    $this->submitForm($edit, 'Save content type');
     $this->assertSession()->responseContains((string) new FormattableMarkup('The content type %content_type has been updated.', [
       '%content_type' => 'Basic page',
     ]));
@@ -59,14 +60,16 @@ class XmlSitemapMultilingualNodeTest extends XmlSitemapMultilingualTestBase {
   public function testNodeLanguageData() {
     $this->drupalLogin($this->admin_user);
     $node = $this->drupalCreateNode([]);
+    $this->drupalGet('node/' . $node->id() . '/edit');
 
-    $this->drupalPostForm('node/' . $node->id() . '/edit', [
+    $this->submitForm([
       'langcode[0][value]' => 'en',
     ], t('Save'));
     $link = $this->assertSitemapLink('node', $node->id(), ['status' => 0, 'access' => 1]);
     $this->assertSame('en', $link['language']);
+    $this->drupalGet('node/' . $node->id() . '/edit');
 
-    $this->drupalPostForm('node/' . $node->id() . '/edit', ['langcode[0][value]' => 'fr'], t('Save'));
+    $this->submitForm(['langcode[0][value]' => 'fr'], t('Save'));
     $link = $this->assertSitemapLink('node', $node->id(), ['status' => 0, 'access' => 1]);
     $this->assertSame('fr', $link['language']);
   }
diff --git a/tests/src/Functional/XmlSitemapMultilingualTest.php b/tests/src/Functional/XmlSitemapMultilingualTest.php
index d867ba4..a081d5a 100644
--- a/tests/src/Functional/XmlSitemapMultilingualTest.php
+++ b/tests/src/Functional/XmlSitemapMultilingualTest.php
@@ -15,18 +15,20 @@ class XmlSitemapMultilingualTest extends XmlSitemapMultilingualTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalLogin($this->admin_user);
     $edit = [
       'site_default_language' => 'en',
     ];
-    $this->drupalPostForm('admin/config/regional/language', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/regional/language');
+    $this->submitForm($edit, t('Save configuration'));
 
     // Enable URL language detection and selection.
     $edit = ['language_interface[enabled][language-url]' => '1'];
-    $this->drupalPostForm('admin/config/regional/language/detection', $edit, t('Save settings'));
+    $this->drupalGet('admin/config/regional/language/detection');
+    $this->submitForm($edit, t('Save settings'));
   }
 
   /**
diff --git a/tests/src/Functional/XmlSitemapMultilingualTestBase.php b/tests/src/Functional/XmlSitemapMultilingualTestBase.php
index f03efd8..162122a 100644
--- a/tests/src/Functional/XmlSitemapMultilingualTestBase.php
+++ b/tests/src/Functional/XmlSitemapMultilingualTestBase.php
@@ -18,7 +18,7 @@ abstract class XmlSitemapMultilingualTestBase extends XmlSitemapTestBase {
   /**
    * Set up an administrative user account and testing keys.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // Call parent::setUp() allowing test cases to pass further modules.
     parent::setUp();
 
diff --git a/tests/src/Functional/XmlSitemapNodeFunctionalTest.php b/tests/src/Functional/XmlSitemapNodeFunctionalTest.php
index 2c30a67..4ecd764 100644
--- a/tests/src/Functional/XmlSitemapNodeFunctionalTest.php
+++ b/tests/src/Functional/XmlSitemapNodeFunctionalTest.php
@@ -42,7 +42,7 @@ class XmlSitemapNodeFunctionalTest extends XmlSitemapTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->entityTypeManager = $this->container->get('entity_type.manager');
@@ -136,7 +136,8 @@ class XmlSitemapNodeFunctionalTest extends XmlSitemapTestBase {
     $edit[$body_key] = $this->randomMachineName(16);
     $edit['tags[target_id]'] = 'tag1, tag2, tag3';
     $edit['status[value]'] = TRUE;
-    $this->drupalPostForm('node/add/page', $edit, t('Save'));
+    $this->drupalGet('node/add/page');
+    $this->submitForm($edit, t('Save'));
 
     $tags = Term::loadMultiple();
     foreach ($tags as $tag) {
@@ -153,8 +154,9 @@ class XmlSitemapNodeFunctionalTest extends XmlSitemapTestBase {
       'priority' => 0.2,
       'changefreq' => XMLSITEMAP_FREQUENCY_HOURLY,
     ]);
+    $this->drupalGet('node/add/page');
 
-    $this->drupalPostForm('node/add/page', $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
 
     $tags = Term::loadMultiple();
     foreach ($tags as $tag) {
@@ -190,7 +192,8 @@ class XmlSitemapNodeFunctionalTest extends XmlSitemapTestBase {
       'title[0][value]' => 'Test node title',
       'body[0][value]' => 'Test node body',
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains('Basic page Test node title has been updated.');
     $this->assertSitemapLinkValues('node', $node->id(), [
       'access' => 1,
@@ -215,7 +218,8 @@ class XmlSitemapNodeFunctionalTest extends XmlSitemapTestBase {
       'xmlsitemap[priority]' => 0.9,
       'xmlsitemap[changefreq]' => XMLSITEMAP_FREQUENCY_ALWAYS,
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains('Basic page Test node title has been updated.');
     $this->assertSitemapLinkValues('node', $node->id(), [
       'access' => 1,
@@ -230,7 +234,8 @@ class XmlSitemapNodeFunctionalTest extends XmlSitemapTestBase {
       'xmlsitemap[status]' => 'default',
       'xmlsitemap[priority]' => 'default',
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains('Basic page Test node title has been updated.');
     $this->assertSitemapLinkValues('node', $node->id(), [
       'access' => 1,
@@ -258,7 +263,8 @@ class XmlSitemapNodeFunctionalTest extends XmlSitemapTestBase {
       'xmlsitemap[status]' => 0,
       'xmlsitemap[priority]' => '0.0',
     ];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/settings/node/page', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/search/xmlsitemap/settings/node/page');
+    $this->submitForm($edit, t('Save configuration'));
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $node = $this->drupalCreateNode();
     $this->assertSitemapLinkValues('node', $node->id(), ['status' => 0, 'priority' => 0.0]);
@@ -267,8 +273,9 @@ class XmlSitemapNodeFunctionalTest extends XmlSitemapTestBase {
     // Delete all pages in order to allow content type deletion.
     $node->delete();
     $node_old->delete();
+    $this->drupalGet('admin/structure/types/manage/page/delete');
 
-    $this->drupalPostForm('admin/structure/types/manage/page/delete', [], t('Delete'));
+    $this->submitForm([], t('Delete'));
     $this->assertSession()->pageTextContains('The content type Basic page has been deleted.');
     $this->assertEmpty($this->linkStorage->loadMultiple(['type' => 'node', 'subtype' => 'page']), 'Nodes with deleted node type removed from {xmlsitemap}.');
   }
diff --git a/tests/src/Functional/XmlSitemapRebuildTest.php b/tests/src/Functional/XmlSitemapRebuildTest.php
index 44b21cb..f67452a 100644
--- a/tests/src/Functional/XmlSitemapRebuildTest.php
+++ b/tests/src/Functional/XmlSitemapRebuildTest.php
@@ -20,7 +20,7 @@ class XmlSitemapRebuildTest extends XmlSitemapTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->admin_user = $this->drupalCreateUser([
@@ -44,7 +44,7 @@ class XmlSitemapRebuildTest extends XmlSitemapTestBase {
     $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->pageTextContains("This action rebuilds your site's XML Sitemap and regenerates the cached files, and may be a lengthy process. If you just installed XML Sitemap, this can be helpful to import all your site's content into the sitemap. Otherwise, this should only be used in emergencies.");
 
-    $this->drupalPostForm(NULL, [], 'Save configuration');
+    $this->submitForm([], 'Save configuration');
     $this->assertSession()->pageTextContains('The sitemap links were rebuilt.');
   }
 
@@ -60,7 +60,8 @@ class XmlSitemapRebuildTest extends XmlSitemapTestBase {
 
     $dummy_user = $this->drupalCreateUser([]);
     $this->drupalLogin($this->admin_user);
-    $this->drupalPostForm('admin/config/search/xmlsitemap/rebuild', [], t('Save configuration'));
+    $this->drupalGet('admin/config/search/xmlsitemap/rebuild');
+    $this->submitForm([], t('Save configuration'));
     $this->assertSession()->pageTextContains('The sitemap links were rebuilt.');
     $this->assertSitemapLinkValues('user', $dummy_user->id(), [
       'status' => 1,
diff --git a/tests/src/Functional/XmlSitemapTaxonomyFunctionalTest.php b/tests/src/Functional/XmlSitemapTaxonomyFunctionalTest.php
index 97d1269..edd7f9b 100644
--- a/tests/src/Functional/XmlSitemapTaxonomyFunctionalTest.php
+++ b/tests/src/Functional/XmlSitemapTaxonomyFunctionalTest.php
@@ -20,7 +20,7 @@ class XmlSitemapTaxonomyFunctionalTest extends XmlSitemapTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Add a vocabulary.
@@ -62,7 +62,7 @@ class XmlSitemapTaxonomyFunctionalTest extends XmlSitemapTestBase {
       'xmlsitemap[status]' => 'default',
       'xmlsitemap[priority]' => 'default',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
 
     $term = taxonomy_term_load_multiple_by_name($term_name, 'tags')[1];
     $link = $this->linkStorage->load('taxonomy_term', $term->id());
diff --git a/tests/src/Functional/XmlSitemapTestBase.php b/tests/src/Functional/XmlSitemapTestBase.php
index 405578f..12a276c 100644
--- a/tests/src/Functional/XmlSitemapTestBase.php
+++ b/tests/src/Functional/XmlSitemapTestBase.php
@@ -96,7 +96,7 @@ abstract class XmlSitemapTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->entityTypeManager = $this->container->get('entity_type.manager');
@@ -131,7 +131,7 @@ abstract class XmlSitemapTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function tearDown() {
+  public function tearDown(): void {
     // Capture any (remaining) watchdog errors.
     $this->assertNoWatchdogErrors();
 
@@ -511,7 +511,7 @@ abstract class XmlSitemapTestBase extends BrowserTestBase {
    */
   protected function verbose($verbose_message, $message = 'Verbose message') {
     if ($id = parent::verbose($verbose_message)) {
-      $url = file_create_url($this->originalFileDirectory . '/simpletest/verbose/' . get_class($this) . '-' . $id . '.html');
+      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($this->originalFileDirectory . '/simpletest/verbose/' . get_class($this) . '-' . $id . '.html');
       $message_url = Url::fromUri($url, ['attributes' => ['target' => '_blank']]);
       $this->error(\Drupal::linkGenerator()->generate($message, $message_url), 'User notice');
     }
diff --git a/tests/src/Functional/XmlSitemapUnitTest.php b/tests/src/Functional/XmlSitemapUnitTest.php
index 0cad2a1..1970a3d 100644
--- a/tests/src/Functional/XmlSitemapUnitTest.php
+++ b/tests/src/Functional/XmlSitemapUnitTest.php
@@ -12,7 +12,7 @@ class XmlSitemapUnitTest extends XmlSitemapTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->admin_user = $this->drupalCreateUser([
diff --git a/tests/src/Functional/XmlSitemapUserFunctionalTest.php b/tests/src/Functional/XmlSitemapUserFunctionalTest.php
index 7a44b75..04ca7ba 100644
--- a/tests/src/Functional/XmlSitemapUserFunctionalTest.php
+++ b/tests/src/Functional/XmlSitemapUserFunctionalTest.php
@@ -20,7 +20,7 @@ class XmlSitemapUserFunctionalTest extends XmlSitemapTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Allow anonymous user to view user profiles.
diff --git a/tests/src/Kernel/DirectoryTest.php b/tests/src/Kernel/DirectoryTest.php
index 451b7be..1be7e5b 100644
--- a/tests/src/Kernel/DirectoryTest.php
+++ b/tests/src/Kernel/DirectoryTest.php
@@ -31,7 +31,7 @@ class DirectoryTest extends KernelTestBase {
 
     // Test that only the xmlsitemap directory was deleted.
     $result = xmlsitemap_clear_directory(NULL, TRUE);
-    $this->assertDirectoryNotExists('public://xmlsitemap/test');
+    $this->assertDirectoryDoesNotExist('public://xmlsitemap/test');
     $this->assertDirectoryExists('public://not-xmlsitemap');
     $this->assertFileExists('public://file.txt');
     $this->assertTrue($result);
diff --git a/tests/src/Kernel/KernelTestBase.php b/tests/src/Kernel/KernelTestBase.php
index 759390a..0d34f07 100644
--- a/tests/src/Kernel/KernelTestBase.php
+++ b/tests/src/Kernel/KernelTestBase.php
@@ -28,7 +28,7 @@ abstract class KernelTestBase extends CoreKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public static function setUpBeforeClass() {
+  public static function setUpBeforeClass(): void {
     parent::setUpBeforeClass();
 
     // This is required to not fail the @covers for global functions.
diff --git a/xmlsitemap.api.php b/xmlsitemap.api.php
index c14f854..1326ccc 100644
--- a/xmlsitemap.api.php
+++ b/xmlsitemap.api.php
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\xmlsitemap\XmlSitemapInterface;
+use Drupal\Component\Utility\Html;
 /**
  * @file
  * Hooks provided by the XML Sitemap module.
@@ -209,12 +211,12 @@ function hook_xmlsitemap_context_url_options_alter(array &$options, array $conte
  * @param \Drupal\xmlsitemap\XmlSitemapInterface $sitemap
  *   The sitemap that is currently being generated.
  */
-function hook_xmlsitemap_element_alter(array &$element, array $link, \Drupal\xmlsitemap\XmlSitemapInterface $sitemap) {
+function hook_xmlsitemap_element_alter(array &$element, array $link, XmlSitemapInterface $sitemap) {
   if ($link['subtype'] === 'video') {
     $video = video_load($link['id']);
     $element['video:video'] = [
-      'video:title' => \Drupal\Component\Utility\Html::escape($video->title),
-      'video:description' => \Drupal\Component\Utility\Html::escape($video->description),
+      'video:title' => Html::escape($video->title),
+      'video:description' => Html::escape($video->description),
       'video:live' => 'no',
     ];
   }
@@ -235,7 +237,7 @@ function hook_xmlsitemap_element_alter(array &$element, array $link, \Drupal\xml
  * @param \Drupal\xmlsitemap\XmlSitemapInterface $sitemap
  *   The sitemap that is currently being generated.
  */
-function hook_xmlsitemap_root_attributes_alter(array &$attributes, \Drupal\xmlsitemap\XmlSitemapInterface $sitemap) {
+function hook_xmlsitemap_root_attributes_alter(array &$attributes, XmlSitemapInterface $sitemap) {
   $attributes['xmlns:video'] = 'https://www.google.com/schemas/sitemap-video/1.1';
 }
 
@@ -278,7 +280,7 @@ function hook_xmlsitemap_sitemap_operations() {
  * @param \Drupal\xmlsitemap\XmlSitemapInterface $sitemap
  *   The XML Sitemap object that was deleted.
  */
-function hook_xmlsitemap_sitemap_delete(\Drupal\xmlsitemap\XmlSitemapInterface $sitemap) {
+function hook_xmlsitemap_sitemap_delete(XmlSitemapInterface $sitemap) {
   \Drupal::database()->query("DELETE FROM {mytable} WHERE smid = '%s'", $sitemap->smid);
 }
 
diff --git a/xmlsitemap.module b/xmlsitemap.module
index 58f1d05..d6866b7 100644
--- a/xmlsitemap.module
+++ b/xmlsitemap.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\Query\Sql\Query;
 /**
  * @file
  * @defgroup xmlsitemap XML Sitemap
@@ -491,10 +492,10 @@ function xmlsitemap_get_directory(XmlSitemapInterface $sitemap = NULL) {
   }
 
   if ($sitemap != NULL && !empty($sitemap->id)) {
-    return file_build_uri($directory . '/' . $sitemap->id);
+    return \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . ($directory . '/' . $sitemap->id)));
   }
   else {
-    return file_build_uri($directory);
+    return \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . $directory));
   }
 }
 
@@ -1625,7 +1626,7 @@ function xmlsitemap_xmlsitemap_index_links($limit) {
       $subquery->condition('type', $entity_type_id);
       // If the storage for this entity type is against a SQL backend, perform
       // a direct subquery condition to avoid needing to load all the IDs.
-      if ($query instanceof \Drupal\Core\Entity\Query\Sql\Query) {
+      if ($query instanceof Query) {
         $query->condition($info['entity keys']['id'], $subquery, 'NOT IN');
       }
       else {
@@ -2541,7 +2542,7 @@ function xmlsitemap_rebuild_batch(array $entity_type_ids, $save_custom = FALSE)
     'operations' => [],
     'finished' => 'xmlsitemap_rebuild_batch_finished',
     'title' => t('Rebuilding Sitemap'),
-    'file' => drupal_get_path('module', 'xmlsitemap') . '/xmlsitemap.generate.inc',
+    'file' => \Drupal::service('extension.list.module')->getPath('xmlsitemap') . '/xmlsitemap.generate.inc',
   ];
 
   // Set the rebuild flag in case something fails during the rebuild.
diff --git a/xmlsitemap_custom/tests/src/Functional/XmlSitemapCustomFunctionalTest.php b/xmlsitemap_custom/tests/src/Functional/XmlSitemapCustomFunctionalTest.php
index 118bdbb..4eae1e3 100644
--- a/xmlsitemap_custom/tests/src/Functional/XmlSitemapCustomFunctionalTest.php
+++ b/xmlsitemap_custom/tests/src/Functional/XmlSitemapCustomFunctionalTest.php
@@ -26,7 +26,7 @@ class XmlSitemapCustomFunctionalTest extends XmlSitemapTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->aliasStorage = $this->entityTypeManager->getStorage('path_alias');
@@ -53,20 +53,20 @@ class XmlSitemapCustomFunctionalTest extends XmlSitemapTestBase {
 
     // Test an invalid path.
     $edit['loc'] = '/invalid-testing-path';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains(t('The custom link @link is either invalid or it cannot be accessed by anonymous users.', ['@link' => $edit['loc']]));
     $this->assertNoSitemapLink(['type' => 'custom', 'loc' => $edit['loc']]);
 
     // Test a path not accessible to anonymous user.
     $edit['loc'] = '/admin/people';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains(t('The custom link @link is either invalid or it cannot be accessed by anonymous users.', ['@link' => $edit['loc']]));
     $this->assertNoSitemapLink(['type' => 'custom', 'loc' => $edit['loc']]);
 
     // Test that the current page, which should not give a false positive for
     // $menu_item['access'] since the result has been cached already.
     $edit['loc'] = '/admin/config/search/xmlsitemap/custom/add';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains(t('The custom link @link is either invalid or it cannot be accessed by anonymous users.', ['@link' => $edit['loc']]));
     $this->assertNoSitemapLink(['type' => 'custom', 'loc' => $edit['loc']]);
   }
@@ -77,26 +77,30 @@ class XmlSitemapCustomFunctionalTest extends XmlSitemapTestBase {
   public function testCustomFileLinks() {
     // Test an invalid file.
     $edit['loc'] = '/' . $this->randomMachineName();
-    $this->drupalPostForm('admin/config/search/xmlsitemap/custom/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/search/xmlsitemap/custom/add');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains(t('The custom link @link is either invalid or it cannot be accessed by anonymous users.', ['@link' => $edit['loc']]));
     $this->assertNoSitemapLink(['type' => 'custom', 'loc' => $edit['loc']]);
 
     // Test an inaccessible file.
     $edit['loc'] = '/.htaccess';
-    $this->drupalPostForm('admin/config/search/xmlsitemap/custom/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/search/xmlsitemap/custom/add');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains(t('The custom link @link is either invalid or it cannot be accessed by anonymous users.', ['@link' => $edit['loc']]));
     $this->assertNoSitemapLink(['type' => 'custom', 'loc' => $edit['loc']]);
 
     // Test a valid file.
     $edit['loc'] = '/core/misc/drupal.js';
-    $this->drupalPostForm('admin/config/search/xmlsitemap/custom/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/search/xmlsitemap/custom/add');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains(t('The custom link for @link was saved.', ['@link' => $edit['loc']]));
     $links = $this->linkStorage->loadMultiple(['type' => 'custom', 'loc' => $edit['loc']]);
     $this->assertEquals(1, count($links), t('Custom link saved in the database.'));
 
     // Test a duplicate url.
     $edit['loc'] = '/core/misc/drupal.js';
-    $this->drupalPostForm('admin/config/search/xmlsitemap/custom/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/search/xmlsitemap/custom/add');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains(t('There is already an existing link in the sitemap with the path @link.', ['@link' => $edit['loc']]));
     $links = $this->linkStorage->loadMultiple(['type' => 'custom', 'loc' => $edit['loc']]);
     $this->assertEquals(1, count($links), t('Custom link saved in the database.'));
diff --git a/xmlsitemap_engines/tests/src/Functional/XmlSitemapEnginesFunctionalTest.php b/xmlsitemap_engines/tests/src/Functional/XmlSitemapEnginesFunctionalTest.php
index 73c6e2a..369e64f 100644
--- a/xmlsitemap_engines/tests/src/Functional/XmlSitemapEnginesFunctionalTest.php
+++ b/xmlsitemap_engines/tests/src/Functional/XmlSitemapEnginesFunctionalTest.php
@@ -37,7 +37,7 @@ class XmlSitemapEnginesFunctionalTest extends XmlSitemapTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->admin_user = $this->drupalCreateUser(['access content', 'administer xmlsitemap']);
     $this->config = $this->container->get('config.factory')->getEditable('xmlsitemap_engines.settings');
@@ -130,7 +130,8 @@ class XmlSitemapEnginesFunctionalTest extends XmlSitemapTestBase {
    */
   public function testPing() {
     $edit = ['engines[simpletest]' => TRUE];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/engines', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/search/xmlsitemap/engines');
+    $this->submitForm($edit, t('Save configuration'));
     $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));
 
     $this->submitEngines();
@@ -146,17 +147,20 @@ class XmlSitemapEnginesFunctionalTest extends XmlSitemapTestBase {
   public function testCustomURL() {
     // @codingStandardsIgnoreEnd
     $edit = ['custom_urls' => 'an-invalid-url'];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/engines', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/search/xmlsitemap/engines');
+    $this->submitForm($edit, t('Save configuration'));
     $this->assertSession()->pageTextContains('Invalid URL an-invalid-url.');
     $this->assertSession()->pageTextNotContains('The configuration options have been saved.');
 
     $url = Url::fromUri('base://ping', ['absolute' => TRUE])->toString();
     $edit = ['custom_urls' => $url];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/engines', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/search/xmlsitemap/engines');
+    $this->submitForm($edit, t('Save configuration'));
     $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));
 
     $edit = ['custom_urls' => $this->submit_url];
-    $this->drupalPostForm('admin/config/search/xmlsitemap/engines', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/search/xmlsitemap/engines');
+    $this->submitForm($edit, t('Save configuration'));
     $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));
 
     $this->submitEngines();
