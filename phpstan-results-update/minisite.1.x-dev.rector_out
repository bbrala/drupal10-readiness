modules/contrib/minisite/minisite.install
modules/contrib/minisite/src/Exception/MissingArchiveException.php
modules/contrib/minisite/tests/src/Functional/FieldValidationTest.php
modules/contrib/minisite/src/Exception/PageProcessorException.php
modules/contrib/minisite/src/Exception/UrlBagException.php
modules/contrib/minisite/src/FileValidator.php
modules/contrib/minisite/src/LegacyWrapper.php
modules/contrib/minisite/minisite.module
modules/contrib/minisite/src/Minisite.php
modules/contrib/minisite/tests/src/Functional/MinisiteTest.php
modules/contrib/minisite/minisite.theme.inc
modules/contrib/minisite/src/ArchiveValidator.php
modules/contrib/minisite/src/ArchiverManager.php
modules/contrib/minisite/src/Asset.php
modules/contrib/minisite/src/MinisiteInterface.php
modules/contrib/minisite/tests/src/Functional/MinisiteTestBase.php
modules/contrib/minisite/src/PageProcessor.php
modules/contrib/minisite/src/PageProcessorInterface.php
modules/contrib/minisite/src/Plugin/Field/FieldFormatter/MinisiteFormatter.php
modules/contrib/minisite/src/AssetContainer.php
modules/contrib/minisite/src/AssetInterface.php
modules/contrib/minisite/src/Controller/AliasController.php
modules/contrib/minisite/src/Plugin/Field/FieldType/MinisiteItem.php
modules/contrib/minisite/src/EventSubscriber/AliasSubscriber.php
modules/contrib/minisite/src/Exception/ArchiveException.php
modules/contrib/minisite/src/Exception/AssetException.php
modules/contrib/minisite/src/Exception/InvalidContentArchiveException.php
modules/contrib/minisite/src/Exception/InvalidExtensionValidatorException.php
modules/contrib/minisite/src/Exception/InvalidFormatArchiveException.php
modules/contrib/minisite/src/Exception/InvalidPathLengthValidatorException.php
modules/contrib/minisite/src/Plugin/Field/FieldType/MinisiteItemList.php
modules/contrib/minisite/src/Plugin/Field/FieldWidget/MinisiteWidget.php
modules/contrib/minisite/src/UrlBag.php
modules/contrib/minisite/src/UrlValidator.php
modules/contrib/minisite/tests/src/Functional/AssetTest.php
modules/contrib/minisite/tests/src/Functional/UploadBrowseAliasPathautoTest.php
modules/contrib/minisite/tests/src/Functional/UploadBrowseAliasTest.php
modules/contrib/minisite/tests/src/Functional/UploadBrowseTest.php
modules/contrib/minisite/tests/src/Functional/FieldCardinalityTest.php
modules/contrib/minisite/tests/src/Kernel/PageProcessorTest.php
modules/contrib/minisite/tests/src/Functional/FieldCreationTrait.php
modules/contrib/minisite/tests/src/Kernel/UrlBagTest.php
modules/contrib/minisite/tests/src/Kernel/UrlValidatorTest.php
modules/contrib/minisite/tests/src/Traits/FixtureTrait.php
modules/contrib/minisite/tests/src/Traits/MockHelperTrait.php
modules/contrib/minisite/tests/src/Unit/ArchiveValidatorTest.php
modules/contrib/minisite/tests/src/Unit/FileValidatorTest.php
modules/contrib/minisite/tests/src/Unit/FixtureTest.php

15 files with changes
=====================

1) modules/contrib/minisite/src/EventSubscriber/AliasSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\minisite\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\minisite\Asset;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Set Minisite delivery controller if request URI matches asset alias.
    *
-   * @param Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   Event that is created to create a response for a request.
    */
-  public function onRequestSetController(GetResponseEvent $event) {
+  public function onRequestSetController(RequestEvent $event) {
     // Do not alter non-master request (this is a case when an exception is
     // thrown in controller).
     if (!$event->isMasterRequest()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


2) modules/contrib/minisite/minisite.theme.inc:96

    ---------- begin diff ----------
@@ @@
   if (isset($variables['asset_path'])) {
     // Asset path is a file.
     if (LegacyWrapper::isValidUri($variables['asset_path'])) {
-      $url = file_create_url($variables['asset_path']);
+      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($variables['asset_path']);
     }
     // Asset path is an alias to a path.
     else {
@@ @@
   }
   // Falling back to the archive file.
   else {
-    $url = file_create_url($file_entity->getFileUri());
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file_entity->getFileUri());

     $mime_type = $file->getMimeType();
     // Set options as per anchor format described at
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector


3) modules/contrib/minisite/tests/src/Functional/FieldCardinalityTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('system_breadcrumb_block');
@@ @@
       'label' => $field_label,
       'field_name' => $field_name,
     ];
-    $this->drupalPostForm("admin/structure/types/manage/$type_name/fields/add-field", $initial_edit, $this->t('Save and continue'));
-    $this->assertRaw($this->t('These settings apply to the %label field everywhere it is used.', ['%label' => $field_label]), 'Storage settings page was displayed.');
+    $this->drupalGet("admin/structure/types/manage/$type_name/fields/add-field");
+    $this->submitForm($initial_edit, $this->t('Save and continue'));
+    $this->assertSession()->responseContains($this->t('These settings apply to the %label field everywhere it is used.', ['%label' => $field_label]));

-    $this->assertRaw($this->t('This field cardinality is set to 1 and cannot be configured.'), 'Cardinality is restricted to 1.');
+    $this->assertSession()->responseContains($this->t('This field cardinality is set to 1 and cannot be configured.'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/minisite/tests/src/Functional/AssetTest.php:31

    ---------- begin diff ----------
@@ @@
     );

     // Assert getters without alias set.
-    $this->assertEqual('public://minisite/static/24c22dd1-2cf1-47ae-ac8a-23a7ff8b86c5/rootpath/subpath/page1.html', $asset->getUri());
-    $this->assertContains('minisite/static/24c22dd1-2cf1-47ae-ac8a-23a7ff8b86c5/rootpath/subpath/page1.html', $asset->getUrl());
+    $this->assertEquals('public://minisite/static/24c22dd1-2cf1-47ae-ac8a-23a7ff8b86c5/rootpath/subpath/page1.html', $asset->getUri());
+    $this->assertStringContainsString('minisite/static/24c22dd1-2cf1-47ae-ac8a-23a7ff8b86c5/rootpath/subpath/page1.html', $asset->getUrl());

     // Assert getters with alias set.
     $asset->setAliasPrefix('some/alias');
-    $this->assertEqual('public://minisite/static/24c22dd1-2cf1-47ae-ac8a-23a7ff8b86c5/rootpath/subpath/page1.html', $asset->getUri());
-    $this->assertContains('/some/alias/rootpath/subpath/page1.html', $asset->getUrl());
-    $this->assertNotContains('minisite/static/24c22dd1-2cf1-47ae-ac8a-23a7ff8b86c5', $asset->getUrl());
+    $this->assertEquals('public://minisite/static/24c22dd1-2cf1-47ae-ac8a-23a7ff8b86c5/rootpath/subpath/page1.html', $asset->getUri());
+    $this->assertStringContainsString('/some/alias/rootpath/subpath/page1.html', $asset->getUrl());
+    $this->assertStringNotContainsString('minisite/static/24c22dd1-2cf1-47ae-ac8a-23a7ff8b86c5', $asset->getUrl());

     // Assert other getters.
     $this->assertEquals(Language::LANGCODE_DEFAULT, $asset->getLanguage());
@@ @@
       $path
     );

-    $this->assertEqual($instance->isIndex(), $is_index);
+    $this->assertEquals($instance->isIndex(), $is_index);
   }

   /**
@@ @@
     $alias_prefix = '/' . $randomizer->name(2048 - (strlen($file_path)) - 2);
     $full_alias = $alias_prefix . '/' . $dir_path . $file_path;
     $asset->setAliasPrefix($alias_prefix);
-    $this->assertEqual($asset->getUrl(), $full_alias);
+    $this->assertEquals($asset->getUrl(), $full_alias);

     $asset->save();
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * SpecificAssertContainsRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/minisite/src/UrlValidator.php:90

    ---------- begin diff ----------
@@ @@
     // path.
     $url = str_replace('../', '', $url);
     $url = rtrim($parent, '/') . '/' . ltrim($url, '/');
-    $url = LegacyWrapper::isValidUri($url) ? file_url_transform_relative(file_create_url($url)) : $url;
+    $url = LegacyWrapper::isValidUri($url) ? \Drupal::service('file_url_generator')->generateString($url) : $url;
     // Decode URL encoded in file_create_url().
     $url = rawurldecode($url);
     $url = '/' . ltrim($url, '/');
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * WrapReturnRector


6) modules/contrib/minisite/src/UrlBag.php:83

    ---------- begin diff ----------
@@ @@
    * Get URL as a relative path.
    */
   public function getUrl() {
-    return file_url_transform_relative(file_create_url($this->uri));
+    return \Drupal::service('file_url_generator')->generateString($this->uri);
   }

   /**
@@ @@
     if (!empty($parsed['scheme'])) {
       if (in_array($parsed['scheme'], static::getLocalWrapperSchemas())) {
         // Files never get their URLs aliased, so return as-is.
-        return file_create_url($url);
+        return \Drupal::service('file_url_generator')->generateAbsoluteString($url);
       }
     }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * WrapReturnRector


7) modules/contrib/minisite/src/LegacyWrapper.php:30

    ---------- begin diff ----------
@@ @@
     }

     if (function_exists('file_scan_directory')) {
-      return file_scan_directory($dir, $mask, $options);
+      return \Drupal::service('file_system')->scanDirectory($dir, $mask, $options);
     }

     throw new \RuntimeException('Unable to find compatible function');
@@ @@
     }

     if (function_exists('entity_get_display')) {
-      return entity_get_display($entity_type, $bundle, $view_mode);
+      return \Drupal::service('entity_display.repository')->getViewDisplay($entity_type, $bundle, $view_mode);
     }

     throw new \RuntimeException('Unable to find compatible function');
@@ @@
     }

     if (function_exists('entity_get_display')) {
-      return entity_get_form_display($entity_type, $bundle, $form_mode);
+      return \Drupal::service('entity_display.repository')->getFormDisplay($entity_type, $bundle, $form_mode);
     }

     throw new \RuntimeException('Unable to find compatible function');
@@ @@
     }

     if (function_exists('file_uri_target')) {
-      return file_uri_target($uri);
+      return \Drupal::service('stream_wrapper_manager')->getTarget($uri);
     }

     throw new \RuntimeException('Unable to find compatible function');
    ----------- end diff -----------

Applied rules:
 * EntityGetDisplayRector
 * EntityGetFormDisplayRector
 * FileScanDirectoryRector
 * FileUriTargetRector
 * ArgumentRemoverRector
 * WrapReturnRector


8) modules/contrib/minisite/tests/src/Unit/FixtureTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->fixtureSetUp();
   }
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     parent::tearDown();
     $this->fixtureTearDown();
   }
@@ @@
     $this->assertNotEquals($first_dir, $second_dir, 'fixtureSetUp() creates new directory on every call');

     $this->fixtureTearDown();
-    $this->assertDirectoryNotExists($second_dir, 'fixtureTearDown() removes directory');
+    $this->assertDirectoryDoesNotExist($second_dir, 'fixtureTearDown() removes directory');
     $this->assertEmpty($this->fixtureDir, 'fixtureTearDown() removes the value from $fixtureDir');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/minisite/tests/src/Kernel/UrlBagTest.php:311

    ---------- begin diff ----------
@@ @@
     // With parent alias.
     $bag->setParentAlias('/parent/alias');
     $this->assertEquals('/parent/alias/rootpath/subpath/file.txt', $bag->getAlias());
-    $this->assertContains('/parent/alias/rootpath/subpath/file.txt', $bag->getAliasAbsolute());
+    $this->assertStringContainsString('/parent/alias/rootpath/subpath/file.txt', $bag->getAliasAbsolute());
     $this->assertEquals('/parent/alias', $bag->getParentAlias());
     $this->assertContains('/parent/alias', $bag->getParentAliasAbsolute());
     $this->assertNotContains('rootpath/subpath/file.txt', $bag->getParentAlias());
@@ @@
     // With alias autodiscovery.
     $bag->setAlias('/parent/alias/rootpath/subpath/file.txt');
     $this->assertEquals('/parent/alias/rootpath/subpath/file.txt', $bag->getAlias());
-    $this->assertContains('/parent/alias/rootpath/subpath/file.txt', $bag->getAliasAbsolute());
+    $this->assertStringContainsString('/parent/alias/rootpath/subpath/file.txt', $bag->getAliasAbsolute());
     $this->assertEquals('/parent/alias', $bag->getParentAlias());
     $this->assertContains('/parent/alias', $bag->getParentAliasAbsolute());
     $this->assertNotContains('rootpath/subpath/file.txt', $bag->getParentAlias());
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * SpecificAssertContainsRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/minisite/tests/src/Functional/UploadBrowseTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('system_breadcrumb_block');
@@ @@

     $test_archive = $this->getUploadedArchiveFile($node, $field_name);
     $this->browseFixtureMinisite($node, $test_archive->getFilename());
+    $this->drupalGet("node/$nid/delete");

     // Delete node.
-    $this->drupalPostForm("node/$nid/delete", [], $this->t('Delete'));
-    $this->assertResponse(200);
+    $this->submitForm([], $this->t('Delete'));
+    $this->assertSession()->statusCodeEquals(200);

     // Assert that Minisite assets were removed.
     $this->assertMinisiteRemoved($node, $field_name, $test_archive_assets);
@@ @@

     $test_archive = $this->getUploadedArchiveFile($node, $field_name);
     $this->browseFixtureMinisite($node, $test_archive->getFilename());
+    $this->drupalGet("node/$nid/edit");

     // Remove the uploaded file and save the node.
-    $this->drupalPostForm("node/$nid/edit", [], $this->t('Remove'));
-    $this->drupalPostForm(NULL, [], $this->t('Save'));
-    $this->assertResponse(200);
+    $this->submitForm([], $this->t('Remove'));
+    $this->submitForm([], $this->t('Save'));
+    $this->assertSession()->statusCodeEquals(200);

     // Assert that Minisite assets were removed.
     $this->assertMinisiteRemoved($node, $field_name, $test_archive_assets);
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/minisite/tests/src/Functional/UploadBrowseAliasTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('system_breadcrumb_block');
@@ @@
     $edit = [
       'path[0][alias]' => $node_alias_updated,
     ];
-    $this->drupalPostForm("node/$nid/edit", $edit, $this->t('Save'));
+    $this->drupalGet("node/$nid/edit");
+    $this->submitForm($edit, $this->t('Save'));

     // Browse fixture minisite using updated manually provided alias.
     $this->browseFixtureMinisiteAliased($node_alias_updated, $minisite_description, $test_archive_assets);
@@ @@
     $edit = [
       'path[0][alias]' => '',
     ];
-    $this->drupalPostForm("node/$nid/edit", $edit, $this->t('Save'));
+    $this->drupalGet("node/$nid/edit");
+    $this->submitForm($edit, $this->t('Save'));
     $this->browseFixtureMinisite($node, $minisite_description);
+    $this->drupalGet("node/$nid/delete");

     // Delete node.
-    $this->drupalPostForm("node/$nid/delete", [], $this->t('Delete'));
-    $this->assertResponse(200);
+    $this->submitForm([], $this->t('Delete'));
+    $this->assertSession()->statusCodeEquals(200);

     // Assert that Minisite assets were removed.
     $this->assertMinisiteRemoved($node, $field_name, $test_archive_assets);
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/minisite/tests/src/Functional/UploadBrowseAliasPathautoTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('system_breadcrumb_block');
@@ @@
       'path[0][pathauto]' => FALSE,
       'path[0][alias]' => $node_alias_updated,
     ];
-    $this->drupalPostForm("node/$nid/edit", $edit, $this->t('Save'));
+    $this->drupalGet("node/$nid/edit");
+    $this->submitForm($edit, $this->t('Save'));

     // Browse fixture minisite using updated manual alias.
     $this->browseFixtureMinisiteAliased($node_alias_updated, $minisite_description, $test_archive_assets);
@@ @@
     $edit = [
       'path[0][pathauto]' => TRUE,
     ];
-    $this->drupalPostForm("node/$nid/edit", $edit, $this->t('Save'));
+    $this->drupalGet("node/$nid/edit");
+    $this->submitForm($edit, $this->t('Save'));
     $node = Node::load($nid);
     $this->assertEntityAliasExists($node);

     // Browse fixture minisite using updated Pathauto-generated alias.
     $this->browseFixtureMinisiteAliased($node_alias, $minisite_description, $test_archive_assets);
+    $this->drupalGet("node/$nid/delete");

     // Delete node.
-    $this->drupalPostForm("node/$nid/delete", [], $this->t('Delete'));
-    $this->assertResponse(200);
+    $this->submitForm([], $this->t('Delete'));
+    $this->assertSession()->statusCodeEquals(200);

     // Assert that Minisite assets were removed.
     $this->assertMinisiteRemoved($node, $field_name, $test_archive_assets);
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/minisite/tests/src/Functional/MinisiteTestBase.php:81

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->fixtureSetUp();
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     parent::tearDown();

     $this->fixtureTearDown();
@@ @@
       $node->save();
       $node_storage->resetCache([$nid]);
       $node = $node_storage->load($nid);
-      $this->assertNotEqual($nid, $node->getRevisionId(), 'Node revision exists.');
+      $this->assertNotEquals($nid, $node->getRevisionId(), 'Node revision exists.');
     }
     $this->drupalGet("node/$nid/edit");
     $page = $this->getSession()->getPage();
@@ @@
       }
       else {
         $page->attachFileToField($name, $file_path);
-        $this->drupalPostForm(NULL, [], $this->t('Upload'));
+        $this->submitForm([], $this->t('Upload'));
       }
     }

-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
+    $this->submitForm($edit, $this->t('Save'));

     return $nid;
   }
@@ @@
     $this->container->get('entity_type.manager')->getStorage('file')->resetCache();
     $db_file = File::load($file->id());
     $message = isset($message) ? $message : new FormattableMarkup('File %file exists in database at the correct path.', ['%file' => $file->getFileUri()]);
-    $this->assertEqual($db_file->getFileUri(), $file->getFileUri(), $message);
+    $this->assertEquals($db_file->getFileUri(), $file->getFileUri(), $message);
   }

   /**
@@ @@
    */
   public function assertArchiveFileNotExist(FileInterface $file) {
     $this->assertFileEntryNotExists($file, 'Archive file entry does not');
-    $this->assertFileNotExists(Minisite::getCommonArchiveDir() . DIRECTORY_SEPARATOR . $file->getFilename(), 'Archive file does not exist');
+    $this->assertFileDoesNotExist(Minisite::getCommonArchiveDir() . DIRECTORY_SEPARATOR . $file->getFilename(), 'Archive file does not exist');
   }

   /**
@@ @@
     $edit1 = [
       'files[field_' . $field_name . '_' . 0 . ']' => $test_archive->getFileUri(),
     ];
-    $this->drupalPostForm("node/add/$node_type", $edit1, $this->t('Save'));
+    $this->drupalGet("node/add/$node_type");
+    $this->submitForm($edit1, $this->t('Save'));
     $edit2 = [
       'title[0][value]' => $node_title,
       'field_' . $field_name . '[' . 0 . '][options][alias_status]' => TRUE,
@@ @@
       $edit['field_' . $field_name . '[' . 0 . '][description]'] = $description;
     }

-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
+    $this->submitForm($edit, $this->t('Save'));

     return $field_name;
   }
@@ @@
   public function browseFixtureMinisite($node, $description) {
     // Visit node and start browsing minisite.
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
-    $this->assertLink($description);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->linkExists($description);
     $this->clickLink($description);

     // Brose minisite pages starting from index page.
-    $this->assertText('Index page');
-    $this->assertLink('Go to Page 1');
+    $this->assertSession()->pageTextContains('Index page');
+    $this->assertSession()->linkExists('Go to Page 1');
     $this->clickLink('Go to Page 1');

-    $this->assertText('Page 1');
-    $this->assertLink('Go to Page 2');
+    $this->assertSession()->pageTextContains('Page 1');
+    $this->assertSession()->linkExists('Go to Page 2');
     $this->clickLink('Go to Page 2');
-    $this->assertResponse(200);
-    $this->assertHeader('Content-Type', 'text/html; charset=UTF-8');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseHeaderEquals('Content-Type', 'text/html; charset=UTF-8');

-    $this->assertText('Page 2');
+    $this->assertSession()->pageTextContains('Page 2');
   }

   /**
@@ @@
    */
   public function browseFixtureMinisiteAliased($alias, $description, $assets_paths) {
     $this->drupalGet($alias);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Assert that a link to a minisite is present.
-    $this->assertLink($description);
-    $this->assertLinkByHref($alias . '/' . $assets_paths[0]);
+    $this->assertSession()->linkExists($description);
+    $this->assertSession()->linkByHrefExists($alias . '/' . $assets_paths[0]);

     // Start browsing the minisite.
     $this->clickLink($description);

     // Assert first index path as aliased.
-    $this->assertUrl($alias . '/' . $assets_paths[0]);
-    $this->assertResponse(200);
-    $this->assertHeader('Content-Type', 'text/html; charset=UTF-8');
+    $this->assertSession()->addressEquals($alias . '/' . $assets_paths[0]);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseHeaderEquals('Content-Type', 'text/html; charset=UTF-8');

     // Brose minisite pages starting from index page.
-    $this->assertText('Index page');
-    $this->assertLink('Go to Page 1');
+    $this->assertSession()->pageTextContains('Index page');
+    $this->assertSession()->linkExists('Go to Page 1');
     $this->clickLink('Go to Page 1');
-    $this->assertResponse(200);
-    $this->assertHeader('Content-Type', 'text/html; charset=UTF-8');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseHeaderEquals('Content-Type', 'text/html; charset=UTF-8');

-    $this->assertText('Page 1');
-    $this->assertUrl($alias . '/' . $assets_paths[1]);
+    $this->assertSession()->pageTextContains('Page 1');
+    $this->assertSession()->addressEquals($alias . '/' . $assets_paths[1]);

-    $this->assertLink('Go to Page 2');
+    $this->assertSession()->linkExists('Go to Page 2');
     $this->clickLink('Go to Page 2');
-    $this->assertResponse(200);
-    $this->assertHeader('Content-Type', 'text/html; charset=UTF-8');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseHeaderEquals('Content-Type', 'text/html; charset=UTF-8');

-    $this->assertText('Page 2');
-    $this->assertUrl($alias . '/' . $assets_paths[2]);
+    $this->assertSession()->pageTextContains('Page 2');
+    $this->assertSession()->addressEquals($alias . '/' . $assets_paths[2]);

     // Navigate to the page using URL with a query.
     $this->drupalGet($alias . '/' . $assets_paths[1], [
@@ @@
       ],
       'fragment' => 'someid',
     ]);
-    $this->assertResponse(200);
-    $this->assertHeader('Content-Type', 'text/html; charset=UTF-8');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseHeaderEquals('Content-Type', 'text/html; charset=UTF-8');

     // Get non-document file through an alias.
     $this->drupalGet($alias . '/' . $assets_paths[3]);
-    $this->assertResponse(200);
-    $this->assertHeader('Content-Type', 'image/jpeg');
-    $this->assertHeader('Content-Length', (string) filesize($this->getFixtureFileDir() . DIRECTORY_SEPARATOR . 'example.jpeg'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseHeaderEquals('Content-Type', 'image/jpeg');
+    $this->assertSession()->responseHeaderEquals('Content-Length', (string) filesize($this->getFixtureFileDir() . DIRECTORY_SEPARATOR . 'example.jpeg'));
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertHeaderRector
 * AssertLinkByHrefRector
 * AssertLinkRector
 * AssertNotEqualRector
 * AssertResponseRector
 * AssertTextRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/minisite/tests/src/Functional/MinisiteTest.php:65

    ---------- begin diff ----------
@@ @@
     $this->assertEquals($index_uri, $minisite->getIndexAssetUri(), 'getIndexAssetUri() returns correct URI of the index asset');
     $this->assertTrue(is_readable($index_uri), 'Asset file exists');

-    $index_url = file_url_transform_relative(file_create_url($asset_dir2 . DIRECTORY_SEPARATOR . $test_archive_assets[0]));
+    $index_url = \Drupal::service('file_url_generator')->generateString($asset_dir2 . DIRECTORY_SEPARATOR . $test_archive_assets[0]);
     $this->assertEquals($index_url, $minisite->getIndexAssetUrl(), 'getIndexAssetUrl() returns correct URI of the index asset');

     // Idempotence tests.
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/minisite/tests/src/Functional/FieldValidationTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('system_breadcrumb_block');
@@ @@
     // Try to post a new node without uploading a file.
     $edit = [];
     $edit['title[0][value]'] = $this->randomMachineName();
-    $this->drupalPostForm('node/add/' . $this->contentType, $edit, $this->t('Save'));
-    $this->assertRaw($this->t('@title field is required.', ['@title' => $field->getLabel()]));
+    $this->drupalGet('node/add/' . $this->contentType);
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->responseContains($this->t('@title field is required.', ['@title' => $field->getLabel()]));

     // Create a new node with the uploaded file.
     $test_file = $this->getTestArchiveValid();
@@ @@
     // Try uploading a file with correct extension, but invalid format.
     $test_file = $this->getTestArchiveInvalidFormat();
     $this->uploadNodeFile($test_file, $field_name, $this->contentType);
-    $this->assertRaw($this->t('The specified file %filename could not be uploaded.', ['%filename' => $test_file->getFilename()]));
-    $this->assertRaw($this->t('File @filename is not an archive file.', ['@filename' => $test_file->getFilename()]));
+    $this->assertSession()->responseContains($this->t('The specified file %filename could not be uploaded.', ['%filename' => $test_file->getFilename()]));
+    $this->assertSession()->responseContains($this->t('File @filename is not an archive file.', ['@filename' => $test_file->getFilename()]));
   }

   /**
@@ @@
     // Valid extensions.
     $allowed_extensions = 'html, htm, js, css, png';
     $edit['settings[minisite_extensions]'] = $allowed_extensions;
-    $this->drupalPostForm($path, $edit, $this->t('Save settings'));
-    $this->assertRaw($this->t('Saved %field configuration.', [
+    $this->drupalGet($path);
+    $this->submitForm($edit, $this->t('Save settings'));
+    $this->assertSession()->responseContains($this->t('Saved %field configuration.', [
       '%field' => $field_name,
     ]));

@@ @@
     // Single denied extensions entered.
     $denied_extensions = 'scr';
     $edit['settings[minisite_extensions]'] = $allowed_extensions . ' ' . $denied_extensions;
-    $this->drupalPostForm($path, $edit, $this->t('Save settings'));
-    $this->assertRaw($this->t('The list of allowed extensions is not valid, be sure to not include %ext extension(s).', [
+    $this->drupalGet($path);
+    $this->submitForm($edit, $this->t('Save settings'));
+    $this->assertSession()->responseContains($this->t('The list of allowed extensions is not valid, be sure to not include %ext extension(s).', [
       '%ext' => $denied_extensions,
     ]));

@@ @@
     // Multiple denied extensions entered.
     $denied_extensions = 'scr exe';
     $edit['settings[minisite_extensions]'] = $allowed_extensions . ' ' . $denied_extensions;
-    $this->drupalPostForm($path, $edit, $this->t('Save settings'));
-    $this->assertRaw($this->t('The list of allowed extensions is not valid, be sure to not include %ext extension(s).', [
+    $this->drupalGet($path);
+    $this->submitForm($edit, $this->t('Save settings'));
+    $this->assertSession()->responseContains($this->t('The list of allowed extensions is not valid, be sure to not include %ext extension(s).', [
       '%ext' => str_replace(' ', ', ', $denied_extensions),
     ]));
   }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 15 files have been changed by Rector                                      

