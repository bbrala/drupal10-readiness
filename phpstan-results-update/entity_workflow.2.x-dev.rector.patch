diff --git a/entity_workflow.api.php b/entity_workflow.api.php
index dca18a7..15c481b 100644
--- a/entity_workflow.api.php
+++ b/entity_workflow.api.php
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\workflows\WorkflowInterface;
+use Drupal\workflows\Transition;
+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Entity Workflow API documentation.
@@ -36,7 +40,7 @@
  *   An array containing additional information about the transition, as
  *   defined by the initiator of the transition.
  */
-function hook_workflows_pre_transition(\Drupal\workflows\WorkflowInterface $workflow, \Drupal\workflows\Transition $transition, \Drupal\Core\Entity\FieldableEntityInterface $entity, $field_name, $context = []) {
+function hook_workflows_pre_transition(WorkflowInterface $workflow, Transition $transition, FieldableEntityInterface $entity, $field_name, $context = []) {
   // @todo
 }
 
@@ -57,7 +61,7 @@ function hook_workflows_pre_transition(\Drupal\workflows\WorkflowInterface $work
  *   An array containing additional information about the transition, as
  *   defined by the initiator of the transition.
  */
-function hook_workflows_post_transition(\Drupal\workflows\WorkflowInterface $workflow, \Drupal\workflows\Transition $transition, \Drupal\Core\Entity\FieldableEntityInterface $entity, $field_name, $context = []) {
+function hook_workflows_post_transition(WorkflowInterface $workflow, Transition $transition, FieldableEntityInterface $entity, $field_name, $context = []) {
   // @todo
 }
 
@@ -102,7 +106,7 @@ function hook_entity_workflow_state_label_alter(&$label, array $context) {
  * @param \Drupal\Core\Entity\EntityInterface $entity
  *   The entity.
  */
-function hook_entity_workflow_has_bulk_workflow_alter(&$access, \Drupal\workflows\WorkflowInterface $workflow, \Drupal\Core\Entity\EntityInterface $entity) {
+function hook_entity_workflow_has_bulk_workflow_alter(&$access, WorkflowInterface $workflow, EntityInterface $entity) {
   $access = TRUE;
 }
 
@@ -118,7 +122,7 @@ function hook_entity_workflow_has_bulk_workflow_alter(&$access, \Drupal\workflow
  *   An array of entities. The key for each entity MUST be $entity_type . '--' .
  *   $entity_id.
  */
-function hook_entity_workflow_bulk_workflow_entities(\Drupal\workflows\WorkflowInterface $workflow, \Drupal\Core\Entity\EntityInterface $entity) {
+function hook_entity_workflow_bulk_workflow_entities(WorkflowInterface $workflow, EntityInterface $entity) {
   return [];
 }
 
diff --git a/entity_workflow.module b/entity_workflow.module
index bd94b75..903ad81 100644
--- a/entity_workflow.module
+++ b/entity_workflow.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -196,7 +197,7 @@ function entity_workflow_entity_revision_delete(EntityInterface $entity) {
 /**
  * Implements hook_form_FORM_ID_alter() for 'workflow_edit_form'.
  */
-function entity_workflow_form_workflow_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function entity_workflow_form_workflow_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   // Entity workflows are not configurable from the UI.
   $form['states_container']['states']['#tabledrag'] = NULL;
   unset($form['states_container']['states']['#header']['weight']);
diff --git a/modules/entity_workflow_workspace/entity_workflow_workspace.module b/modules/entity_workflow_workspace/entity_workflow_workspace.module
index a256b5e..c1f27e8 100644
--- a/modules/entity_workflow_workspace/entity_workflow_workspace.module
+++ b/modules/entity_workflow_workspace/entity_workflow_workspace.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\workflows\Entity\Workflow;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
@@ -70,7 +71,7 @@ function entity_workflow_workspace_workspace_access(EntityInterface $entity, $op
   // Don't alter access for standard ops (like view, create, edit, delete)
   // where this module doesn't define any state transition permissions; see
   // \Drupal\entity_workflow_workspace\Plugin\WorkflowType\EntityWorkflowWorkspace::getPermissions().
-  $workspace_workflow = \Drupal\workflows\Entity\Workflow::load('workspace')->getTypePlugin();
+  $workspace_workflow = Workflow::load('workspace')->getTypePlugin();
   if (!in_array($operation, array_keys($workspace_workflow->getConfiguration()['transitions']), TRUE)) {
     return AccessResult::neutral();
   }
diff --git a/src/Event/InitiateTransitionEvent.php b/src/Event/InitiateTransitionEvent.php
index a3e8a8e..66c5ecd 100644
--- a/src/Event/InitiateTransitionEvent.php
+++ b/src/Event/InitiateTransitionEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\entity_workflow\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines the initiate transition event.
