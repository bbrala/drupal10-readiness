diff --git a/src/Event/HttpClientCallPreExecuteEvent.php b/src/Event/HttpClientCallPreExecuteEvent.php
index 5f5482b..821a728 100644
--- a/src/Event/HttpClientCallPreExecuteEvent.php
+++ b/src/Event/HttpClientCallPreExecuteEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\http_client_manager\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use GuzzleHttp\Command\Command;
 use GuzzleHttp\Command\Guzzle\GuzzleClient;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Class HttpClientCallPreExecuteEvent.
diff --git a/src/Event/HttpClientHandlerStackEvent.php b/src/Event/HttpClientHandlerStackEvent.php
index 85ca8d4..0137866 100644
--- a/src/Event/HttpClientHandlerStackEvent.php
+++ b/src/Event/HttpClientHandlerStackEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\http_client_manager\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use GuzzleHttp\HandlerStack;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Class HttpClientHandlerStackEvent.
diff --git a/src/HttpClient.php b/src/HttpClient.php
index 41f9415..1b2512b 100644
--- a/src/HttpClient.php
+++ b/src/HttpClient.php
@@ -234,7 +234,7 @@ class HttpClient implements HttpClientInterface {
     }
 
     $event = new HttpClientHandlerStackEvent($config['handler'], $this->serviceApi);
-    $this->eventDispatcher->dispatch(HttpClientEvents::HANDLER_STACK, $event);
+    $this->eventDispatcher->dispatch($event, HttpClientEvents::HANDLER_STACK);
     return $config;
   }
 
@@ -354,7 +354,7 @@ class HttpClient implements HttpClientInterface {
     $client = $this->getClientByCommand($commandName);
     $command = $client->getCommand($commandName, $params);
     $event = new HttpClientCallPreExecuteEvent($client, $command);
-    $this->eventDispatcher->dispatch(HttpClientEvents::CALL_PRE_EXECUTE, $event);
+    $this->eventDispatcher->dispatch($event, HttpClientEvents::CALL_PRE_EXECUTE);
     return $client->execute($command);
   }
 
diff --git a/tests/src/Unit/HttpClientManagerFactoryTest.php b/tests/src/Unit/HttpClientManagerFactoryTest.php
index b7a6a15..faf3ce1 100644
--- a/tests/src/Unit/HttpClientManagerFactoryTest.php
+++ b/tests/src/Unit/HttpClientManagerFactoryTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\http_client_manager\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\http_client_manager\HttpServiceApiHandlerInterface;
 use Drupal\Tests\UnitTestCase;
@@ -18,6 +19,7 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
  */
 class HttpClientManagerFactoryTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests HttpClientManagerFactory::get().
    *
diff --git a/tests/src/Unit/HttpClientTest.php b/tests/src/Unit/HttpClientTest.php
index 0576449..64e07fe 100644
--- a/tests/src/Unit/HttpClientTest.php
+++ b/tests/src/Unit/HttpClientTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\http_client_manager\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\http_client_manager\HttpClient;
 use Drupal\http_client_manager\HttpServiceApiHandlerInterface;
 use Drupal\Tests\UnitTestCase;
@@ -17,6 +18,7 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
  */
 class HttpClientTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The client.
    *
@@ -27,7 +29,7 @@ class HttpClientTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->initClient('test', $this->getServiceApiInfo());
   }
@@ -73,11 +75,10 @@ class HttpClientTest extends UnitTestCase {
    * Tests HttpClient::getCommand() with wrong argument.
    *
    * @covers ::getCommand
-   *
-   * @expectedException \InvalidArgumentException
-   * @expectedExceptionMessage No operation found named Missing
    */
   public function testGetCommandWhichDoesNotExists() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('No operation found named Missing');
     $command = $this->client->getCommand('Missing');
     $this->assertEmpty($command);
   }
@@ -113,11 +114,10 @@ class HttpClientTest extends UnitTestCase {
    * Tests HttpClient::call() with wrong command name.
    *
    * @covers ::call
-   *
-   * @expectedException \InvalidArgumentException
-   * @expectedExceptionMessage No operation found named Missing
    */
   public function testCallWithWrongCommandName() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('No operation found named Missing');
     $this->client->call('Missing');
   }
 
@@ -152,11 +152,10 @@ class HttpClientTest extends UnitTestCase {
    * Tests HttpClient::__call() with wrong command name.
    *
    * @covers ::__call
-   *
-   * @expectedException \InvalidArgumentException
-   * @expectedExceptionMessage No operation found named Missing
    */
   public function testMagicMethodCallWithWrongCommandName() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('No operation found named Missing');
     $this->client->missing();
   }
 
