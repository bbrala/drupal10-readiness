modules/contrib/userprotect/src/Plugin/UserProtection/UserProtectionPluginCollection.php
modules/contrib/userprotect/tests/src/Traits/UserProtectCreationTrait.php
modules/contrib/userprotect/src/Access/UserProtectRoleAccessCheck.php
modules/contrib/userprotect/tests/src/Unit/Plugin/UserProtection/UserProtectionBaseUnitTest.php
modules/contrib/userprotect/src/Annotation/UserProtection.php
modules/contrib/userprotect/src/Controller/ProtectionRuleListBuilder.php
modules/contrib/userprotect/src/Plugin/UserProtection/Username.php
modules/contrib/userprotect/src/Entity/ProtectionRule.php
modules/contrib/userprotect/tests/src/Unit/UserProtectUnitTest.php
modules/contrib/userprotect/src/Routing/RouteSubscriber.php
modules/contrib/userprotect/userprotect.install
modules/contrib/userprotect/src/UserProtect.php
modules/contrib/userprotect/userprotect.module
modules/contrib/userprotect/src/UserProtectPermissions.php
modules/contrib/userprotect/tests/modules/userprotect_test/userprotect_test.module
modules/contrib/userprotect/tests/src/Functional/InstallTest.php
modules/contrib/userprotect/src/Entity/ProtectionRuleInterface.php
modules/contrib/userprotect/tests/src/Functional/ProtectedEntityDeleteTest.php
modules/contrib/userprotect/src/Form/ProtectionRuleAddForm.php
modules/contrib/userprotect/tests/src/Functional/ProtectionRuleCrudTest.php
modules/contrib/userprotect/src/Form/ProtectionRuleDeleteForm.php
modules/contrib/userprotect/src/Form/ProtectionRuleEditForm.php
modules/contrib/userprotect/src/Form/ProtectionRuleFormBase.php
modules/contrib/userprotect/src/Plugin/UserProtection/Delete.php
modules/contrib/userprotect/src/Plugin/UserProtection/Edit.php
modules/contrib/userprotect/src/Plugin/UserProtection/Mail.php
modules/contrib/userprotect/src/Plugin/UserProtection/Password.php
modules/contrib/userprotect/src/Plugin/UserProtection/Roles.php
modules/contrib/userprotect/src/Plugin/UserProtection/Status.php
modules/contrib/userprotect/tests/src/Functional/RoleDelegation/RoleDelegationIntegrationTest.php
modules/contrib/userprotect/src/Plugin/UserProtection/UserProtectionBase.php
modules/contrib/userprotect/src/Plugin/UserProtection/UserProtectionInterface.php
modules/contrib/userprotect/src/Plugin/UserProtection/UserProtectionManager.php
modules/contrib/userprotect/tests/src/Functional/UnsavedUserFieldAccessTest.php
modules/contrib/userprotect/tests/src/Functional/UserProtectBrowserTestBase.php
modules/contrib/userprotect/tests/src/Functional/UserProtectionPermissionsTest.php
modules/contrib/userprotect/tests/src/Functional/UserProtectionTest.php
modules/contrib/userprotect/tests/src/Kernel/Entity/ProtectionRuleUnitTest.php
modules/contrib/userprotect/tests/src/Kernel/FieldAccessTest.php
modules/contrib/userprotect/tests/src/Kernel/ProtectedEntityDeleteTest.php
modules/contrib/userprotect/tests/src/Kernel/ProtectionRuleBypassTest.php
modules/contrib/userprotect/tests/src/Kernel/UserProtectKernelTestBase.php

11 files with changes
=====================

1) modules/contrib/userprotect/tests/src/Unit/Plugin/UserProtection/UserProtectionBaseUnitTest.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->moduleHandler = $this->createMock('\Drupal\Core\Extension\ModuleHandlerInterface');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/userprotect/tests/src/Kernel/UserProtectKernelTestBase.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installSchema('user', ['users_data']);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/userprotect/tests/src/Kernel/ProtectionRuleBypassTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->accessController = \Drupal::entityTypeManager()->getAccessControlHandler('user');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/userprotect/tests/src/Kernel/FieldAccessTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create an user who administer users. Explicitly set user ID to '2'
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/userprotect/tests/src/Kernel/Entity/ProtectionRuleUnitTest.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->manager = UserProtect::pluginManager();
     $this->protectionRule = ProtectionRule::create([
@@ @@
    * Tests id().
    */
   public function testId() {
-    $this->assertIdentical('dummy', $this->protectionRule->id());
+    $this->assertSame('dummy', $this->protectionRule->id());
   }

   /**
@@ @@
    * Tests setProtectedEntityTypeId() and getProtectedEntityTypeId().
    */
   public function testProtectedEntityTypeId() {
-    $this->assertIdentical('user_role', $this->protectionRule->getProtectedEntityTypeId());
+    $this->assertSame('user_role', $this->protectionRule->getProtectedEntityTypeId());
     $entity_type = 'user';
     $this->assertInstanceOf(ProtectionRuleInterface::class, $this->protectionRule->setProtectedEntityTypeId($entity_type));
-    $this->assertIdentical($entity_type, $this->protectionRule->getProtectedEntityTypeId());
+    $this->assertSame($entity_type, $this->protectionRule->getProtectedEntityTypeId());
   }

   /**
@@ @@
    * Tests setProtectedEntityId() and getProtectedEntityId().
    */
   public function testProtectedEntityId() {
-    $this->assertIdentical('administrator', $this->protectionRule->getProtectedEntityId());
+    $this->assertSame('administrator', $this->protectionRule->getProtectedEntityId());
     $entity_id = 'authenticated';
     $this->assertInstanceOf(ProtectionRuleInterface::class, $this->protectionRule->setProtectedEntityId($entity_id));
-    $this->assertIdentical($entity_id, $this->protectionRule->getProtectedEntityId());
+    $this->assertSame($entity_id, $this->protectionRule->getProtectedEntityId());
   }

   /**
@@ @@
    * Tests setBypassRoles() and getBypassRoles().
    */
   public function testBypassRoles() {
-    $this->assertIdentical([], $this->protectionRule->getBypassRoles());
+    $this->assertSame([], $this->protectionRule->getBypassRoles());
     $roles = ['administrator'];
     $this->assertInstanceOf(ProtectionRuleInterface::class, $this->protectionRule->setBypassRoles($roles));
-    $this->assertIdentical($roles, $this->protectionRule->getBypassRoles());
+    $this->assertSame($roles, $this->protectionRule->getBypassRoles());
   }

   /**
@@ @@
    */
   public function testToArray() {
     $array = $this->protectionRule->toArray();
-    $this->assertIdentical('dummy', $array['name']);
-    $this->assertIdentical('Dummy', $array['label']);
+    $this->assertSame('dummy', $array['name']);
+    $this->assertSame('Dummy', $array['label']);
     $expected_protections = [
       'user_mail' => [
         'status' => TRUE,
       ],
     ];
-    $this->assertIdentical($expected_protections, $array['protections']);
-    $this->assertIdentical('user_role', $array['protectedEntityTypeId']);
-    $this->assertIdentical('administrator', $array['protectedEntityId']);
+    $this->assertSame($expected_protections, $array['protections']);
+    $this->assertSame('user_role', $array['protectedEntityTypeId']);
+    $this->assertSame('administrator', $array['protectedEntityId']);
   }

   /**
@@ @@
    * Tests getPermissionName().
    */
   public function testGetPermissionName() {
-    $this->assertIdentical('userprotect.dummy.bypass', $this->protectionRule->getPermissionName());
+    $this->assertSame('userprotect.dummy.bypass', $this->protectionRule->getPermissionName());
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/userprotect/tests/src/Functional/UserProtectionTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->account = $this->drupalCreateUser(['administer users', 'administer permissions']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/userprotect/tests/src/Functional/UserProtectionPermissionsTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Revoke default permissions on the authenticated user role that are
@@ @@
     $edit = [
       'mail' => $this->randomMachineName() . '@example.com',
     ];
-    $this->drupalPostForm('user/' . $account->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('user/' . $account->id() . '/edit');
+    $this->submitForm($edit, t('Save'));

     // Assert the mail address changed.
     $account = $this->reloadEntity($account);
@@ @@
       'pass[pass1]' => $new_pass,
       'pass[pass2]' => $new_pass,
     ];
-    $this->drupalPostForm('user/' . $account->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('user/' . $account->id() . '/edit');
+    $this->submitForm($edit, t('Save'));

     // Assert the password changed.
     $account = $this->reloadEntity($account);
@@ @@

     // Assert the user can edit its own account.
     $this->drupalGet('user/' . $account->id() . '/edit');
-    $this->assertResponse(200, "The user may edit its own account.");
+    $this->assertSession()->statusCodeEquals(200, "The user may edit its own account.");
   }

   /**
@@ @@

     // Assert the user can edit its own account.
     $this->drupalGet('user/' . $account->id() . '/edit');
-    $this->assertResponse(403, "The user may NOT edit its own account.");
+    $this->assertSession()->statusCodeEquals(403, "The user may NOT edit its own account.");
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/userprotect/tests/src/Functional/UnsavedUserFieldAccessTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->account = $this->drupalCreateUser(['administer users', 'administer permissions']);
@@ @@
       'pass[pass2]' => $pass,
       'notify' => FALSE,
     ];
-    $this->drupalPostForm('admin/people/create', $edit, t('Create new account'));
+    $this->drupalGet('admin/people/create');
+    $this->submitForm($edit, t('Create new account'));
     $this->assertSession()->pageTextContains(t('Created a new user account for @name. No email has been sent.', ['@name' => $edit['name']]), 'User created');

     // Try to create an user with the same name and assert that it doesn't
@@ @@
       'pass[pass2]' => $pass,
       'notify' => FALSE,
     ];
-    $this->drupalPostForm('admin/people/create', $edit, t('Create new account'));
+    $this->drupalGet('admin/people/create');
+    $this->submitForm($edit, t('Create new account'));
     $this->assertSession()->pageTextContains(t('The username @name is already taken.', ['@name' => $edit['name']]));
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/userprotect/tests/src/Functional/RoleDelegation/RoleDelegationIntegrationTest.php:61

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $admin_role = $this->createAdminRole();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/userprotect/tests/src/Functional/ProtectionRuleCrudTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->account = $this->drupalCreateUser(['userprotect.administer']);
@@ @@
       'entity_id' => $rid,
       'protection[user_mail]' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/people/userprotect/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/people/userprotect/add');
+    $this->submitForm($edit, t('Save'));

     // Assert that the rule was created.
     $protection_rule = ProtectionRule::load($rule_id);
@@ @@
       'protection[user_name]' => TRUE,
       'protection[user_mail]' => FALSE,
     ];
-    $this->drupalPostForm('admin/config/people/userprotect/manage/' . $rule_id, $edit, t('Save'));
+    $this->drupalGet('admin/config/people/userprotect/manage/' . $rule_id);
+    $this->submitForm($edit, t('Save'));

     // Assert that the rule was updated with the expected values.
     $protection_rule = ProtectionRule::load($rule_id);
@@ @@
       'entity_id' => $rid,
       'protection[user_mail]' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/people/userprotect/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/people/userprotect/add');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains('The machine-readable name is already in use. It must be unique.');

     // Assert only one protection rule exists.
     $entities = ProtectionRule::loadMultiple(NULL);
     $this->assertCount(1, $entities, 'Only one protection rule exists.');
+    $this->drupalGet('admin/config/people/userprotect/manage/' . $rule_id . '/delete');

     // Delete rule.
-    $this->drupalPostForm('admin/config/people/userprotect/manage/' . $rule_id . '/delete', [], t('Delete'));
+    $this->submitForm([], t('Delete'));
     // Assert the rule no longer exists.
     $protection_rule = ProtectionRule::load($rule_id);
     $this->assertEmpty($protection_rule, 'The protection rule was deleted.');
@@ @@
       'entity_id' => $account->getAccountName(),
       'protection[user_mail]' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/people/userprotect/add/user', $edit, t('Save'));
+    $this->drupalGet('admin/config/people/userprotect/add/user');
+    $this->submitForm($edit, t('Save'));

     // Assert that the rule was created.
     $protection_rule = ProtectionRule::load($rule_id);
@@ @@
       'protection[user_name]' => TRUE,
       'protection[user_mail]' => FALSE,
     ];
-    $this->drupalPostForm('admin/config/people/userprotect/manage/' . $rule_id, $edit, t('Save'));
+    $this->drupalGet('admin/config/people/userprotect/manage/' . $rule_id);
+    $this->submitForm($edit, t('Save'));

     // Assert that the rule was updated with the expected values.
     $protection_rule = ProtectionRule::load($rule_id);
@@ @@
       'entity_id' => $account->getAccountName(),
       'protection[user_mail]' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/people/userprotect/add/user', $edit, t('Save'));
+    $this->drupalGet('admin/config/people/userprotect/add/user');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains('The machine-readable name is already in use. It must be unique.');

     // Assert only one protection rule exists.
     $entities = ProtectionRule::loadMultiple(NULL);
     $this->assertCount(1, $entities, 'Only one protection rule exists.');
+    $this->drupalGet('admin/config/people/userprotect/manage/' . $rule_id . '/delete');

     // Delete rule.
-    $this->drupalPostForm('admin/config/people/userprotect/manage/' . $rule_id . '/delete', [], t('Delete'));
+    $this->submitForm([], t('Delete'));
     // Assert the rule no longer exists.
     $protection_rule = ProtectionRule::load($rule_id);
     $this->assertEmpty($protection_rule, 'The protection rule was deleted.');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/userprotect/tests/src/Functional/InstallTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->moduleHandler = $this->container->get('module_handler');
     $this->moduleInstaller = $this->container->get('module_installer');
@@ @@
     // Ensure an authenticated user can edit its own account.
     $this->drupalLogin($account);
     $this->drupalGet('user/' . $account->id() . '/edit');
-    $this->assertResponse(200, 'Authenticated user has access to edit page of own account.');
+    $this->assertSession()->statusCodeEquals(200, 'Authenticated user has access to edit page of own account.');

     // Uninstall userprotect.
     $this->moduleInstaller->uninstall(['userprotect']);
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 11 files have been changed by Rector                                      

