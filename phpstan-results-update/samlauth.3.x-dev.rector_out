modules/contrib/samlauth/modules/samlauth_user_roles/src/EventSubscriber/UserRolesEventSubscriber.php
modules/contrib/samlauth/modules/samlauth_user_fields/samlauth_user_fields.module
modules/contrib/samlauth/src/EventSubscriber/UserSyncEventSubscriber.php
modules/contrib/samlauth/modules/samlauth_user_fields/src/EventSubscriber/UserFieldsEventSubscriber.php
modules/contrib/samlauth/modules/samlauth_user_roles/src/Form/SamlauthRoleMappingForm.php
modules/contrib/samlauth/src/Form/SamlauthAuthmapDeleteForm.php
modules/contrib/samlauth/modules/samlauth_user_fields/src/Form/SamlauthMappingDeleteForm.php
modules/contrib/samlauth/src/Form/SamlauthConfigureForm.php
modules/contrib/samlauth/modules/samlauth_user_fields/src/Form/SamlauthMappingEditForm.php
modules/contrib/samlauth/samlauth.install
modules/contrib/samlauth/samlauth.module
modules/contrib/samlauth/modules/samlauth_user_fields/src/Form/SamlauthMappingListForm.php
modules/contrib/samlauth/samlauth.post_update.php
modules/contrib/samlauth/src/AuthVolatile.php
modules/contrib/samlauth/src/Controller/ExecuteInRenderContextTrait.php
modules/contrib/samlauth/src/Controller/SamlController.php
modules/contrib/samlauth/src/Element/MultiValue.php
modules/contrib/samlauth/src/Event/SamlauthEvents.php
modules/contrib/samlauth/src/Event/SamlauthUserLinkEvent.php
modules/contrib/samlauth/src/Event/SamlauthUserSyncEvent.php
modules/contrib/samlauth/src/EventSubscriber/AccessDeniedSubscriber.php
modules/contrib/samlauth/src/Plugin/Menu/LoginLogoutMenuLink.php
modules/contrib/samlauth/src/Plugin/views/field/AuthmapDeleteLink.php
modules/contrib/samlauth/src/SamlService.php
modules/contrib/samlauth/src/Tests/SamlTest.php
modules/contrib/samlauth/src/UserVisibleException.php
modules/contrib/samlauth/test_resources/samlauth_test/samlauth_test.module
modules/contrib/samlauth/test_resources/samlauth_test/src/EventSubscriber/TestSamlauthEventSubscriber.php

6 files with changes
====================

1) modules/contrib/samlauth/modules/samlauth_user_fields/src/Form/SamlauthMappingListForm.php:197

    ---------- begin diff ----------
@@ @@
         $output['table']['#rows'][$id] = [
           $mapping['attribute_name'],
           $user_field,
-          render($operations),
+          \Drupal::service('renderer')->render($operations),
         ];
         if ($linking_enabled) {
           array_splice($output['table']['#rows'][$id], 2, 0, [$mapping['link_user_order'] ?? '']);
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/samlauth/src/EventSubscriber/AccessDeniedSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\samlauth\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Routing\RouteMatch;
 use Drupal\Core\Url;
@@ @@
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Event\KernelEvent;
 use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 use Symfony\Component\HttpKernel\Exception\TooManyRequestsHttpException;
@@ @@
   /**
    * Redirects users when access is denied.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *   The event to process.
    */
-  public function onException(GetResponseForExceptionEvent $event) {
-    $exception = $event->getException();
+  public function onException(ExceptionEvent $event) {
+    $exception = $event->getThrowable();
     // If our own routes threw a TooManyRequestsHttpException, don't spend time
     // redirecting to another page and rendering that. (Rendering would need to
     // be done from scratch because the page needs to include includes the
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameMethodRector
 * RenameClassRector
 * WrapReturnRector


3) modules/contrib/samlauth/src/Event/SamlauthUserSyncEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\samlauth\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Wraps a samlauth user sync event for event listeners.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/samlauth/src/Event/SamlauthUserLinkEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\samlauth\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Wraps a samlauth user link event for event listeners.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/samlauth/src/Tests/SamlTest.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Import testshib config.
-    $config = drupal_get_path('module', 'samlauth') . '/test_resources/samlauth.authentication.yml';
+    $config = \Drupal::service('extension.list.module')->getPath('samlauth') . '/test_resources/samlauth.authentication.yml';
     $config = file_get_contents($config);
     $config = Yaml::decode($config);
     \Drupal::configFactory()->getEditable('samlauth.authentication')->setData($config)->save();
@@ @@
     $web_user = $this->drupalCreateUser(['configure saml']);
     $this->drupalLogin($web_user);
     $this->drupalGet('admin/config/people/saml');
-    $this->assertText('Login / Logout', 'Login / Logout fieldset present');
-    $this->assertText('Service Provider', 'SP fieldset present');
-    $this->assertText('Identity Provider', 'iDP fieldset present');
-    $this->assertText('User Info and Syncing', 'User Info and Syncing fieldset present');
-    $this->assertText('SAML Message Construction', 'SAML Message Construction fieldset present');
-    $this->assertText('SAML Message Validation', 'SAML Message Validation fieldset present');
+    $this->assertSession()->pageTextContains('Login / Logout');
+    $this->assertSession()->pageTextContains('Service Provider');
+    $this->assertSession()->pageTextContains('Identity Provider');
+    $this->assertSession()->pageTextContains('User Info and Syncing');
+    $this->assertSession()->pageTextContains('SAML Message Construction');
+    $this->assertSession()->pageTextContains('SAML Message Validation');
   }

   /**
@@ @@

     // Test that we get metadata.
     $this->drupalGet('saml/metadata');
-    $this->assertResponse(200, 'SP metadata is accessible');
-    $this->assertRaw('entityID="samlauth"', 'Entity ID found in the metadata');
+    $this->assertSession()->statusCodeEquals(200, 'SP metadata is accessible');
+    $this->assertSession()->responseContains('entityID="samlauth"');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/samlauth/src/SamlService.php:440

    ---------- begin diff ----------
@@ @@
       // then by name, then by email.
       if ($config->get('map_users')) {
         $event = new SamlauthUserLinkEvent($this->getAttributes());
-        $this->eventDispatcher->dispatch(SamlauthEvents::USER_LINK, $event);
+        $this->eventDispatcher->dispatch($event, SamlauthEvents::USER_LINK);
         $account = $event->getLinkedAccount();
         if ($account) {
           $this->logger->info('Existing user @name (@uid) was newly matched to SAML login attributes; linking user and logging in.', [
@@ @@
   public function synchronizeUserAttributes(UserInterface $account, $skip_save = FALSE, $first_saml_login = FALSE) {
     // Dispatch a user_sync event.
     $event = new SamlauthUserSyncEvent($account, $this->getAttributes(), $first_saml_login);
-    $this->eventDispatcher->dispatch(SamlauthEvents::USER_SYNC, $event);
+    $this->eventDispatcher->dispatch($event, SamlauthEvents::USER_SYNC);

     if (!$skip_save && $event->isAccountChanged()) {
       $account->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


 [OK] 6 files have been changed by Rector                                       

