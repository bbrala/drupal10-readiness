modules/contrib/hidden_language/Form/HiddenLanguageForm.php
modules/contrib/hidden_language/hidden_language.module
modules/contrib/hidden_language/src/EventSubscriber/HiddenLanguageSubscriber.php
modules/contrib/hidden_language/src/Form/HiddenLanguageForm.php
modules/contrib/hidden_language/src/HiddenLanguageManager.php
modules/contrib/hidden_language/src/HiddenLanguagePermissions.php

1 file with changes
===================

1) modules/contrib/hidden_language/src/EventSubscriber/HiddenLanguageSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\hidden_language\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Routing\RouteMatch;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Symfony\Component\HttpKernel\HttpKernelInterface;
@@ @@
   /**
    * Disallow access to hidden language.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    */
-  public function onKernelRequestCheckLanguageAccess(GetResponseEvent $event) {
+  public function onKernelRequestCheckLanguageAccess(RequestEvent $event) {
     if ($event->getRequestType() === HttpKernelInterface::MASTER_REQUEST) {
       $route_name = RouteMatch::createFromRequest($event->getRequest())->getRouteName();
       $path = $event->getRequest()->getPathInfo();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


 [OK] 1 file has been changed by Rector                                         

