diff --git a/field_tokens.info.yml b/field_tokens.info.yml
index 11273db..fd35963 100644
--- a/field_tokens.info.yml
+++ b/field_tokens.info.yml
@@ -1,7 +1,7 @@
 name: Field Tokens
 description: Adds formatted field and field property tokens.
 type: module
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
 dependencies:
   - token:token
 
diff --git a/src/Tests/FieldTokensFormattedTest.php b/src/Tests/FieldTokensFormattedTest.php
index 6229801..55e3448 100644
--- a/src/Tests/FieldTokensFormattedTest.php
+++ b/src/Tests/FieldTokensFormattedTest.php
@@ -36,7 +36,7 @@ class FieldTokensFormattedTest extends FieldTokensTestBase {
     $value = \Drupal::service('token')->replace($token, ['node' => $node]);
 
     // Check the token is rendered correctly.
-    $this->assertEqual($value, $output, $token . ' matches rendered Image formatter for provided Image field.');
+    $this->assertEquals($value, $output, $token . ' matches rendered Image formatter for provided Image field.');
   }
 
 }
diff --git a/src/Tests/FieldTokensGeneralTest.php b/src/Tests/FieldTokensGeneralTest.php
index f258552..2327fd0 100644
--- a/src/Tests/FieldTokensGeneralTest.php
+++ b/src/Tests/FieldTokensGeneralTest.php
@@ -26,7 +26,8 @@ class FieldTokensGeneralTest extends FieldTokensTestBase {
     // Set second image field to hidden.
     $edit = [];
     $edit["fields[{$field_name}][type]"] = 'hidden';
-    $this->drupalPostForm("admin/structure/types/manage/{$this->contentType->id()}/display", $edit, t('Save'));
+    $this->drupalGet("admin/structure/types/manage/{$this->contentType->id()}/display");
+    $this->submitForm($edit, t('Save'));
 
     // Create node with two images attached.
     $test_image = current($this->drupalGetTestFiles('image'));
@@ -34,13 +35,14 @@ class FieldTokensGeneralTest extends FieldTokensTestBase {
     $edit['title[0][value]'] = $this->randomMachineName();
     $edit["files[{$this->field->get('field_name')}_0]"] = $file_system->realpath($test_image->uri);
     $edit["files[{$field_name}_0]"] = $file_system->realpath($test_image->uri);
-    $this->drupalPostForm('node/add/' . $this->contentType->id(), $edit, t('Save and publish'));
+    $this->drupalGet('node/add/' . $this->contentType->id());
+    $this->submitForm($edit, t('Save and publish'));
 
     // Add Alt text.
     $edit = [];
     $edit["{$this->field->get('field_name')}[0][alt]"] = $this->randomString();
     $edit["{$field_name}[0][alt]"] = $this->randomString();
-    $this->drupalPostForm(NULL, $edit, t('Save and publish'));
+    $this->submitForm($edit, t('Save and publish'));
 
     // Retrieve ID of the newly created node from the current URL.
     $matches = [];
diff --git a/src/Tests/FieldTokensPropertyTest.php b/src/Tests/FieldTokensPropertyTest.php
index 86fc09e..c6fb011 100644
--- a/src/Tests/FieldTokensPropertyTest.php
+++ b/src/Tests/FieldTokensPropertyTest.php
@@ -25,7 +25,7 @@ class FieldTokensPropertyTest extends FieldTokensTestBase {
     $value = \Drupal::service('token')->replace($token, ['node' => $node]);
 
     // Check the token is rendered correctly.
-    $this->assertEqual($value, $node->{$this->field->get('field_name')}[0]->target_id, $token . ' matches provided Image field target_id property.');
+    $this->assertEquals($value, $node->{$this->field->get('field_name')}[0]->target_id, $token . ' matches provided Image field target_id property.');
   }
 
 }
diff --git a/src/Tests/FieldTokensTestBase.php b/src/Tests/FieldTokensTestBase.php
index 4d90a97..7ac189c 100644
--- a/src/Tests/FieldTokensTestBase.php
+++ b/src/Tests/FieldTokensTestBase.php
@@ -33,7 +33,7 @@ abstract class FieldTokensTestBase extends ImageFieldTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a content type.
