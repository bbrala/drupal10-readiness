diff --git a/ip_login.info.yml b/ip_login.info.yml
index 10a8b13..06e52a3 100644
--- a/ip_login.info.yml
+++ b/ip_login.info.yml
@@ -1,7 +1,7 @@
 name: 'IP Login'
 type: module
 description: 'Allows users to be automatically logged in in by matching IP address, range or wildcards.'
-core_version_requirement: ^8.9 || ^9
+core_version_requirement: ^8.9 || ^9 || ^10
 dependencies:
   - drupal:user
   - field_ipaddress:field_ipaddress
diff --git a/src/EventSubscriber/IpLoginSubscriber.php b/src/EventSubscriber/IpLoginSubscriber.php
index 68a882a..c787ade 100644
--- a/src/EventSubscriber/IpLoginSubscriber.php
+++ b/src/EventSubscriber/IpLoginSubscriber.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\ip_login\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Cookie;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -15,23 +15,23 @@ class IpLoginSubscriber implements EventSubscriberInterface {
   /**
    * Clears various IP Login cookies if needed.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The response event.
    */
-  public function onKernelResponse(FilterResponseEvent $event) {
+  public function onKernelResponse(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
 
     $response = $event->getResponse();
     if ($event->getRequest()->attributes->get('ip_login_user_login')) {
-      $response->headers->setCookie(new Cookie('ipLoginAttempted', '', 1));
-      $response->headers->setCookie(new Cookie('ipLoginAsDifferentUser', '', 1));
+      $response->headers->setCookie(Cookie::create('ipLoginAttempted', '', 1));
+      $response->headers->setCookie(Cookie::create('ipLoginAsDifferentUser', '', 1));
     }
 
     $can_login_as_another_user = $event->getRequest()->attributes->get('ip_login_can_login_as_another_user');
     if ($can_login_as_another_user !== NULL) {
-      $response->headers->setCookie(new Cookie('ipLoginAsDifferentUser', $can_login_as_another_user));
+      $response->headers->setCookie(Cookie::create('ipLoginAsDifferentUser', $can_login_as_another_user));
     }
   }
 
diff --git a/src/StackMiddleware/EarlyIpLoginMiddleware.php b/src/StackMiddleware/EarlyIpLoginMiddleware.php
index 6ad1b95..9f6c6af 100644
--- a/src/StackMiddleware/EarlyIpLoginMiddleware.php
+++ b/src/StackMiddleware/EarlyIpLoginMiddleware.php
@@ -105,7 +105,7 @@ class EarlyIpLoginMiddleware implements HttpKernelInterface {
     // If we determined that we can't auto-login the user, set a session cookie
     // so we don't repeat the user IP check for this browser session.
     if (empty($matched_uid)) {
-      $response->headers->setCookie(new Cookie('ipLoginAttempted', 1));
+      $response->headers->setCookie(Cookie::create('ipLoginAttempted', 1));
     }
     return $response;
   }
