diff --git a/includes/smart_ip.country_list.inc b/includes/smart_ip.country_list.inc
index df05717..f69fa3e 100644
--- a/includes/smart_ip.country_list.inc
+++ b/includes/smart_ip.country_list.inc
@@ -1,10 +1,10 @@
 <?php
 
+use Drupal\Core\Locale\CountryManager;
 /**
  * @file
  * Provides a list of countries based on ISO standards.
  */
-
 /**
  * Get an array of all country code => country name pairs.
  *
@@ -14,11 +14,11 @@
  *   An array of all country code => country name pairs.
  */
 function country_get_predefined_list() {
-  $countries = \Drupal\Core\Locale\CountryManager::getStandardList();
+  $countries = CountryManager::getStandardList();
 
   // Allow other modules to modify country list via
   // hook_smart_ip_country_predefined_list_alter()
   \Drupal::moduleHandler()->alter('smart_ip_country_predefined_list', $countries);
 
   return $countries;
-}
\ No newline at end of file
+}
diff --git a/modules/device_geolocation/device_geolocation.module b/modules/device_geolocation/device_geolocation.module
index 89e7775..9e23a39 100644
--- a/modules/device_geolocation/device_geolocation.module
+++ b/modules/device_geolocation/device_geolocation.module
@@ -90,7 +90,7 @@ function template_preprocess_device_geolocation_visitor_info(&$variables) {
  * Implements hook_page_attachments().
  */
 function device_geolocation_page_attachments(array &$page) {
-  if (!\Drupal\smart_ip\SmartIp::checkAllowedPage()) {
+  if (!SmartIp::checkAllowedPage()) {
     // This page is not on the list to access user's geolocation
     return;
   }
diff --git a/modules/smart_ip_ip2location_bin_db/smart_ip_ip2location_bin_db.install b/modules/smart_ip_ip2location_bin_db/smart_ip_ip2location_bin_db.install
index 22c4f16..66f1f6d 100644
--- a/modules/smart_ip_ip2location_bin_db/smart_ip_ip2location_bin_db.install
+++ b/modules/smart_ip_ip2location_bin_db/smart_ip_ip2location_bin_db.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\smart_ip_ip2location_bin_db\EventSubscriber\SmartIpEventSubscriber;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
 
@@ -43,7 +44,7 @@ function smart_ip_ip2location_bin_db_uninstall() {
  * path. Change the default value of db_auto_update to FALSE.
  */
 function smart_ip_ip2location_bin_db_update_8301() {
-  $configName = \Drupal\smart_ip_ip2location_bin_db\EventSubscriber\SmartIpEventSubscriber::configName();
+  $configName = SmartIpEventSubscriber::configName();
   $config     = \Drupal::configFactory()->getEditable($configName);
   $filesystem = \Drupal::service('file_system');
   $path       = $filesystem->dirname($config->get('ip2location_bin_db_ipv4_custom_path'));
@@ -52,4 +53,4 @@ function smart_ip_ip2location_bin_db_update_8301() {
     ->clear('ip2location_bin_db_ipv4_custom_path')
     ->clear('ip2location_bin_db_ipv6_custom_path')
     ->save();
-}
\ No newline at end of file
+}
diff --git a/modules/smart_ip_ip2location_bin_db/src/EventSubscriber/SmartIpEventSubscriber.php b/modules/smart_ip_ip2location_bin_db/src/EventSubscriber/SmartIpEventSubscriber.php
index ba58760..61ee2b9 100644
--- a/modules/smart_ip_ip2location_bin_db/src/EventSubscriber/SmartIpEventSubscriber.php
+++ b/modules/smart_ip_ip2location_bin_db/src/EventSubscriber/SmartIpEventSubscriber.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\smart_ip_ip2location_bin_db\EventSubscriber;
 
+use IP2Location\Database;
 use Drupal\smart_ip_ip2location_bin_db\DatabaseFileUtility;
 use Drupal\smart_ip_ip2location_bin_db\Ip2locationBinDb;
 use Drupal\smart_ip\DatabaseFileUtilityBase;
@@ -64,17 +65,17 @@ class SmartIpEventSubscriber extends SmartIpEventSubscriberBase {
         return;
       }
       if ($config->get('caching_method') == Ip2locationBinDb::NO_CACHE) {
-        $cachingMethod = \IP2Location\Database::FILE_IO;
+        $cachingMethod = Database::FILE_IO;
       }
       elseif ($config->get('caching_method') == Ip2locationBinDb::MEMORY_CACHE) {
-        $cachingMethod = \IP2Location\Database::MEMORY_CACHE;
+        $cachingMethod = Database::MEMORY_CACHE;
       }
       elseif ($config->get('caching_method') == Ip2locationBinDb::SHARED_MEMORY) {
-        $cachingMethod = \IP2Location\Database::SHARED_MEMORY;
+        $cachingMethod = Database::SHARED_MEMORY;
       }
       if (!empty($dbFile) && !empty($cachingMethod)) {
-        $reader = new \IP2Location\Database($dbFile, $cachingMethod);
-        $record = $reader->lookup($ipAddress, \IP2Location\Database::ALL);
+        $reader = new Database($dbFile, $cachingMethod);
+        $record = $reader->lookup($ipAddress, Database::ALL);
         foreach ($record as &$item) {
           if (strpos($item, 'Please upgrade') !== FALSE || strpos($item, 'Invalid IP address') !== FALSE || $item == '-') {
             // Make the value "This parameter is unavailable in selected .BIN
@@ -548,8 +549,8 @@ class SmartIpEventSubscriber extends SmartIpEventSubscriberBase {
         else {
           $ip = '2001:4860:4860::8888';
         }
-        $reader = new \IP2Location\Database($file, \IP2Location\Database::FILE_IO);
-        $record = $reader->lookup($ip, \IP2Location\Database::COUNTRY);
+        $reader = new Database($file, Database::FILE_IO);
+        $record = $reader->lookup($ip, Database::COUNTRY);
         if (strtotime($reader->getDate()) <= 0 || empty($record['countryCode'])) {
           $error['code'] = Ip2locationBinDb::DB_READ_ERROR;
         }
diff --git a/modules/smart_ip_maxmind_geoip2_bin_db/src/EventSubscriber/SmartIpEventSubscriber.php b/modules/smart_ip_maxmind_geoip2_bin_db/src/EventSubscriber/SmartIpEventSubscriber.php
index f22dcfe..69bddae 100644
--- a/modules/smart_ip_maxmind_geoip2_bin_db/src/EventSubscriber/SmartIpEventSubscriber.php
+++ b/modules/smart_ip_maxmind_geoip2_bin_db/src/EventSubscriber/SmartIpEventSubscriber.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\smart_ip_maxmind_geoip2_bin_db\EventSubscriber;
 
+use MaxMind\Db\Reader;
 use Drupal\smart_ip_maxmind_geoip2_bin_db\DatabaseFileUtility;
 use Drupal\smart_ip_maxmind_geoip2_bin_db\MaxmindGeoip2BinDb;
 use Drupal\smart_ip\DatabaseFileUtilityBase;
@@ -63,7 +64,7 @@ class SmartIpEventSubscriber extends SmartIpEventSubscriberBase {
         return;
       }
       if (class_exists('\MaxMind\Db\Reader')) {
-        $reader = new \MaxMind\Db\Reader($dbFile);
+        $reader = new Reader($dbFile);
         $raw    = $reader->get($ipAddress);
       }
       else {
diff --git a/smart_ip.install b/smart_ip.install
index e9ea7af..aae26fa 100644
--- a/smart_ip.install
+++ b/smart_ip.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\user\Entity\Role;
 /**
  * @file
  * Install, update and uninstall functions for the image module.
@@ -28,7 +29,7 @@ function smart_ip_update_8301() {
   $config = \Drupal::configFactory()->getEditable('smart_ip.settings');
   if ($config->get('debug_mode')) {
     $debugIp      = $config->get('debug_mode_ip');
-    $roles        = \Drupal\user\Entity\Role::loadMultiple();
+    $roles        = Role::loadMultiple();
     $rolesDebug   = [];
     $rolesDebugIp = [];
     /** @var \Drupal\user\Entity\Role $role */
diff --git a/smart_ip.module b/smart_ip.module
index bbef5ac..aaae464 100644
--- a/smart_ip.module
+++ b/smart_ip.module
@@ -92,7 +92,7 @@ function smart_ip_cron() {
  * Implements hook_page_attachments().
  */
 function smart_ip_page_attachments(array &$page) {
-  if (!\Drupal\smart_ip\SmartIp::checkAllowedPage()) {
+  if (!SmartIp::checkAllowedPage()) {
     // This page is not on the list to access user's geolocation.
     return;
   }
diff --git a/src/AdminSettingsEvent.php b/src/AdminSettingsEvent.php
index e25663b..9df5ed1 100644
--- a/src/AdminSettingsEvent.php
+++ b/src/AdminSettingsEvent.php
@@ -7,7 +7,7 @@
 
 namespace Drupal\smart_ip;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Form\FormStateInterface;
 
 /**
diff --git a/src/DatabaseFileEvent.php b/src/DatabaseFileEvent.php
index 3ba4a8d..9bcda23 100644
--- a/src/DatabaseFileEvent.php
+++ b/src/DatabaseFileEvent.php
@@ -7,7 +7,7 @@
 
 namespace Drupal\smart_ip;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Form\FormStateInterface;
 
 /**
diff --git a/src/EventSubscriber/GeolocateUserSubscriber.php b/src/EventSubscriber/GeolocateUserSubscriber.php
index 3b001eb..f62debb 100644
--- a/src/EventSubscriber/GeolocateUserSubscriber.php
+++ b/src/EventSubscriber/GeolocateUserSubscriber.php
@@ -7,10 +7,10 @@
 
 namespace Drupal\smart_ip\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\smart_ip\SmartIp;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 
 /**
  * Allows Smart IP to act on HTTP request event.
@@ -22,10 +22,10 @@ class GeolocateUserSubscriber implements EventSubscriberInterface {
   /**
    * Initiate user geolocation.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The response event, which contains the current request.
    */
-  public function geolocateUser(GetResponseEvent $event) {
+  public function geolocateUser(RequestEvent $event) {
     // Check to see if the page is one of those allowed for geolocation.
     if (!SmartIp::checkAllowedPage()) {
       // This page is not on the list to acquire/update user's geolocation.
diff --git a/src/GetLocationEvent.php b/src/GetLocationEvent.php
index 5a7a5b5..024f2b1 100644
--- a/src/GetLocationEvent.php
+++ b/src/GetLocationEvent.php
@@ -6,7 +6,7 @@
 
 namespace Drupal\smart_ip;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Provides Smart IP query location override event for event listeners.
