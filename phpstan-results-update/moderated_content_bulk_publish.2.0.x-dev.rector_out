modules/contrib/moderated_content_bulk_publish/moderated_content_bulk_publish.api.php
modules/contrib/moderated_content_bulk_publish/src/Form/SettingsForm.php
modules/contrib/moderated_content_bulk_publish/moderated_content_bulk_publish.install
modules/contrib/moderated_content_bulk_publish/moderated_content_bulk_publish.module
modules/contrib/moderated_content_bulk_publish/src/HookObject.php
modules/contrib/moderated_content_bulk_publish/src/Plugin/Action/ArchiveCurrentRevisionAction.php
modules/contrib/moderated_content_bulk_publish/src/AdminHelper.php
modules/contrib/moderated_content_bulk_publish/src/Plugin/Action/PinContentAction.php
modules/contrib/moderated_content_bulk_publish/src/AdminModeration.php
modules/contrib/moderated_content_bulk_publish/src/Plugin/Action/PublishLatestRevisionAction.php
modules/contrib/moderated_content_bulk_publish/src/Plugin/Action/UnpinContentAction.php
modules/contrib/moderated_content_bulk_publish/src/Plugin/Action/UnpublishCurrentRevisionAction.php
modules/contrib/moderated_content_bulk_publish/src/AdminPin.php
modules/contrib/moderated_content_bulk_publish/src/EventSubscriber/HandlerFor403AccessDenied.php

4 files with changes
====================

1) modules/contrib/moderated_content_bulk_publish/src/Plugin/Action/UnpublishCurrentRevisionAction.php:3

    ---------- begin diff ----------
@@ @@

 //use Drupal\views_bulk_operations\Action\ViewsBulkOperationsActionBase;
 //use Drupal\views_bulk_operations\Action\ViewsBulkOperationsPreconfigurationInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
     if ($user->hasPermission('moderated content bulk unpublish')) {
       \Drupal::logger('moderated_content_bulk_publish')->notice("Executing unpublish latest revision of ".$entity->label());

-      $adminModeration = new AdminModeration($entity, \Drupal\node\NodeInterface::NOT_PUBLISHED);
+      $adminModeration = new AdminModeration($entity, NodeInterface::NOT_PUBLISHED);
       $entity = $adminModeration->unpublish();

       //check if published
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/moderated_content_bulk_publish/src/Plugin/Action/PublishLatestRevisionAction.php:3

    ---------- begin diff ----------
@@ @@

 //use Drupal\views_bulk_operations\Action\ViewsBulkOperationsActionBase;
 //use Drupal\views_bulk_operations\Action\ViewsBulkOperationsPreconfigurationInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
     if ($user->hasPermission('moderated content bulk publish')) {
       \Drupal::logger('moderated_content_bulk_publish')->notice("Executing publish latest revision of ".$entity->label());

-      $adminModeration = new AdminModeration($entity, \Drupal\node\NodeInterface::PUBLISHED);
+      $adminModeration = new AdminModeration($entity, NodeInterface::PUBLISHED);
       $entity = $adminModeration->publish($error_message, $msgdetail_isToken, $msgdetail_isPublished, $msgdetail_isAbsoluteURL);
       if (!isset($entity) && !empty($error_message)) {
         // When publish () return NULL, we output messages and to stop the process.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/moderated_content_bulk_publish/src/Plugin/Action/ArchiveCurrentRevisionAction.php:3

    ---------- begin diff ----------
@@ @@

 //use Drupal\views_bulk_operations\Action\ViewsBulkOperationsActionBase;
 //use Drupal\views_bulk_operations\Action\ViewsBulkOperationsPreconfigurationInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
     if ($user->hasPermission('moderated content bulk archive')) {
       \Drupal::logger('moderated_content_bulk_publish')->notice("Executing archive latest revision of ".$entity->label());

-      $adminModeration = new AdminModeration($entity, \Drupal\node\NodeInterface::NOT_PUBLISHED);
+      $adminModeration = new AdminModeration($entity, NodeInterface::NOT_PUBLISHED);
       $entity = $adminModeration->archive($error_message, $markup);
       if (!isset($entity) && !empty($error_message)) {
         \Drupal::Messenger()->addWarning(utf8_encode($error_message));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/moderated_content_bulk_publish/src/EventSubscriber/HandlerFor403AccessDenied.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\moderated_content_bulk_publish\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
+use Drupal\Core\Routing\TrustedRedirectResponse;
 use Drupal\Core\EventSubscriber\HttpExceptionSubscriberBase;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Url;
@@ @@
     return ['html'];
   }

-  public function on403(\Symfony\Component\HttpKernel\Event\ExceptionEvent $event) {
+  public function on403(ExceptionEvent $event) {
     $request = $event->getRequest();
     $is_anonymous = $this->currentUser->isAnonymous();
     $route_name = $request->attributes->get('_route');
@@ @@
       $new_path = str_replace('/latest', '', $current_path);
       \Drupal::logger('moderated_content_bulk_publish')->notice(utf8_encode('HandlerFor403AccessDenied: Redirecting from ' . $current_path . ' to ' . $new_path));
       $base_url = \Drupal::request()->getSchemeAndHttpHost();
-      $returnResponse = new \Drupal\Core\Routing\TrustedRedirectResponse($base_url . '/' . $langId . $new_path); // TODO: figure out how to do this the Drupal 8 way for internal path but didn't because of language afterthought in Drupal 8.
+      $returnResponse = new TrustedRedirectResponse($base_url . '/' . $langId . $new_path); // TODO: figure out how to do this the Drupal 8 way for internal path but didn't because of language afterthought in Drupal 8.
       $event->setResponse($returnResponse);

       return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

