modules/contrib/crop/crop.api.php
modules/contrib/crop/src/CropTypeListBuilder.php
modules/contrib/crop/tests/fixtures/crop-1.0-alpha2-installed.php
modules/contrib/crop/crop.install
modules/contrib/crop/crop.module
modules/contrib/crop/tests/src/Functional/CropFunctionalTest.php
modules/contrib/crop/src/Entity/Crop.php
modules/contrib/crop/modules/crop_media_entity/crop_media_entity.module
modules/contrib/crop/src/Annotation/CropEntityProvider.php
modules/contrib/crop/src/CropInterface.php
modules/contrib/crop/src/CropStorage.php
modules/contrib/crop/src/CropStorageInterface.php
modules/contrib/crop/src/CropStorageSchema.php
modules/contrib/crop/src/CropTypeInterface.php
modules/contrib/crop/tests/src/Functional/UpdatePathTest.php
modules/contrib/crop/src/Entity/CropType.php
modules/contrib/crop/tests/src/Kernel/CropCRUDTest.php
modules/contrib/crop/src/EntityProviderBase.php
modules/contrib/crop/src/EntityProviderInterface.php
modules/contrib/crop/src/EntityProviderManager.php
modules/contrib/crop/src/EntityProviderNotFoundException.php
modules/contrib/crop/src/Events/AutomaticCrop.php
modules/contrib/crop/src/Events/AutomaticCropProviders.php
modules/contrib/crop/src/Events/Events.php
modules/contrib/crop/src/Form/CropTypeDeleteForm.php
modules/contrib/crop/src/Form/CropTypeForm.php
modules/contrib/crop/tests/src/Kernel/CropEffectTest.php
modules/contrib/crop/src/Plugin/Crop/EntityProvider/File.php
modules/contrib/crop/src/Plugin/Crop/EntityProvider/Media.php
modules/contrib/crop/tests/src/Kernel/CropEntityProvidersTest.php
modules/contrib/crop/tests/src/Kernel/CropUnitTestBase.php
modules/contrib/crop/src/Plugin/ImageEffect/CropEffect.php
modules/contrib/crop/src/Plugin/Validation/Constraint/CropTypeAspectRatioValidationConstraint.php
modules/contrib/crop/src/Plugin/Validation/Constraint/CropTypeAspectRatioValidationConstraintValidator.php
modules/contrib/crop/src/Plugin/Validation/Constraint/CropTypeMachineNameValidationConstraint.php
modules/contrib/crop/src/Plugin/Validation/Constraint/CropTypeMachineNameValidationConstraintValidator.php

5 files with changes
====================

1) modules/contrib/crop/tests/src/Kernel/CropUnitTestBase.php:61

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
@@ @@
    *   File object.
    */
   protected function getTestFile() {
-    \Drupal::service('file_system')->copy(drupal_get_path('module', 'crop') . '/tests/files/sarajevo.png', PublicStream::basePath());
+    \Drupal::service('file_system')->copy(\Drupal::service('extension.list.module')->getPath('crop') . '/tests/files/sarajevo.png', PublicStream::basePath());
     return $this->fileStorage->create([
       'uri' => 'public://sarajevo.png',
       'status' => FILE_STATUS_PERMANENT,
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/crop/tests/src/Functional/CropFunctionalTest.php:50

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser(['administer crop types', 'administer image styles']);
@@ @@
    */
   protected function doTestFileUriAlter() {
     // Get the test file.
-    \Drupal::service('file_system')->copy(drupal_get_path('module', 'crop') . '/tests/files/sarajevo.png', PublicStream::basePath());
+    \Drupal::service('file_system')->copy(\Drupal::service('extension.list.module')->getPath('crop') . '/tests/files/sarajevo.png', PublicStream::basePath());
     $file_uri = 'public://sarajevo.png';
     $file = File::create(['uri' => $file_uri, 'status' => FILE_STATUS_PERMANENT]);
     $file->save();
@@ @@
     // Build an image style derivative for the file URI.
     $image_style_uri = $this->testStyle->buildUri($file_uri);

-    $image_style_uri_url = file_create_url($image_style_uri);
+    $image_style_uri_url = \Drupal::service('file_url_generator')->generateAbsoluteString($image_style_uri);
     $this->assertTrue(strpos($image_style_uri_url, $shortened_hash) !== FALSE, 'The image style URL contains a shortened hash.');

     $image_style_url = $this->testStyle->buildUrl($file_uri);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/crop/src/Plugin/ImageEffect/CropEffect.php:221

    ---------- begin diff ----------
@@ @@
       /** @var \Drupal\crop\Entity\CropType $crop_type */
       $crop_type = $this->typeStorage->load($this->configuration['crop_type']);
       $automatic_crop_event = new AutomaticCrop($image, $crop_type, $this->configuration);
-      $this->eventDispatcher->dispatch(Events::AUTOMATIC_CROP, $automatic_crop_event);
+      $this->eventDispatcher->dispatch($automatic_crop_event, Events::AUTOMATIC_CROP);
       $this->crop = $automatic_crop_event->getCrop();
     }

@@ @@
    */
   public function getAutomaticCropProvidersList() {
     $event = new AutomaticCropProviders();
-    $this->eventDispatcher->dispatch(Events::AUTOMATIC_CROP_PROVIDERS, $event);
+    $this->eventDispatcher->dispatch($event, Events::AUTOMATIC_CROP_PROVIDERS);

     return $event->getProviders();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/crop/src/Events/AutomaticCropProviders.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crop\Events;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Collects "Automatic crop" providers.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/crop/src/Events/AutomaticCrop.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crop\Events;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Image\ImageInterface;
 use Drupal\crop\CropInterface;
 use Drupal\crop\Entity\CropType;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Represents automatic crop action as event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 5 files have been changed by Rector                                       

