modules/contrib/stage_file_proxy/src/Commands/StageFileProxyCommands.php
modules/contrib/stage_file_proxy/src/EventDispatcher/AlterExcludedPathsEvent.php
modules/contrib/stage_file_proxy/src/EventSubscriber/ProxySubscriber.php
modules/contrib/stage_file_proxy/src/FetchManager.php
modules/contrib/stage_file_proxy/src/FetchManagerInterface.php
modules/contrib/stage_file_proxy/src/Form/SettingsForm.php
modules/contrib/stage_file_proxy/stage_file_proxy.drush8.inc
modules/contrib/stage_file_proxy/stage_file_proxy.install
modules/contrib/stage_file_proxy/stage_file_proxy.module
modules/contrib/stage_file_proxy/tests/src/Functional/SettingsFormTest.php
modules/contrib/stage_file_proxy/tests/src/Kernel/FetchManagerTest.php

4 files with changes
====================

1) modules/contrib/stage_file_proxy/tests/src/Kernel/FetchManagerTest.php:61

    ---------- begin diff ----------
@@ @@
    *
    * Create new fetchManager object.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->fileSystem = $this->container->get('file_system');
@@ @@
    * Once test method has finished running, whether it succeeded or failed,
    * tearDown() will be invoked. Unset the $fetchManager object.
    */
-  public function tearDown() {
+  public function tearDown(): void {
     unset($this->fetchManager);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/stage_file_proxy/tests/src/Functional/SettingsFormTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser(['administer stage_file_proxy settings']);
@@ @@
       // Test with adding a slash.
       'origin' => $testOrigin . '/',
     ];
-    $this->drupalPostForm($settings_path, $edit, 'Save configuration');
+    $this->drupalGet($settings_path);
+    $this->submitForm($edit, 'Save configuration');

     // Test if the form was saved without error.
-    $this->assertText('Your settings have been saved.');
+    $this->assertSession()->pageTextContains('Your settings have been saved.');

     // Test if the stored value has the trailing slash removed.
     $newOrigin = $this->config('stage_file_proxy.settings')->get('origin');
-    $this->assertIdentical($newOrigin, $testOrigin);
+    $this->assertSame($newOrigin, $testOrigin);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/stage_file_proxy/src/EventSubscriber/ProxySubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stage_file_proxy\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\StreamWrapper\StreamWrapperManager;
@@ @@
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RequestStack;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Fetch the file from it's origin.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event to process.
    */
-  public function checkFileOrigin(GetResponseEvent $event) {
+  public function checkFileOrigin(RequestEvent $event) {
     $config = $this->configFactory->get('stage_file_proxy.settings');

     // Get the origin server.
@@ @@
     }

     $alter_excluded_paths_event = new AlterExcludedPathsEvent([]);
-    $this->eventDispatcher->dispatch('stage_file_proxy.alter_excluded_paths', $alter_excluded_paths_event);
+    $this->eventDispatcher->dispatch($alter_excluded_paths_event, 'stage_file_proxy.alter_excluded_paths');
     $excluded_paths = $alter_excluded_paths_event->getExcludedPaths();
     foreach ($excluded_paths as $excluded_path) {
       if (strpos($request_path, $excluded_path) !== FALSE) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


4) modules/contrib/stage_file_proxy/src/EventDispatcher/AlterExcludedPathsEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stage_file_proxy\EventDispatcher;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Class AlterExcludedPathsEvent.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

