diff --git a/apigee_edge.api.php b/apigee_edge.api.php
index 656d28b..ef37ed9 100644
--- a/apigee_edge.api.php
+++ b/apigee_edge.api.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * @file
  * Copyright 2020 Google Inc.
@@ -33,7 +34,7 @@
  * @param \Drupal\Core\StringTranslation\TranslatableMarkup $title
  *   The menu link/page title.
  */
-function hook_apigee_edge_app_listing_page_title_alter(\Drupal\Core\StringTranslation\TranslatableMarkup &$title) {
+function hook_apigee_edge_app_listing_page_title_alter(TranslatableMarkup &$title) {
 }
 
 /**
diff --git a/modules/apigee_edge_actions/modules/apigee_edge_actions_debug/src/EventSubscriber/ApigeeEdgeActionsDebugEventSubscriber.php b/modules/apigee_edge_actions/modules/apigee_edge_actions_debug/src/EventSubscriber/ApigeeEdgeActionsDebugEventSubscriber.php
index aa46647..ce69ea5 100644
--- a/modules/apigee_edge_actions/modules/apigee_edge_actions_debug/src/EventSubscriber/ApigeeEdgeActionsDebugEventSubscriber.php
+++ b/modules/apigee_edge_actions/modules/apigee_edge_actions_debug/src/EventSubscriber/ApigeeEdgeActionsDebugEventSubscriber.php
@@ -20,9 +20,9 @@
 
 namespace Drupal\apigee_edge_actions_debug\EventSubscriber;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\apigee_edge_actions\Event\ApigeeEdgeActionsEventInterface;
 use Drupal\Core\Logger\LoggerChannelInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
 /**
@@ -50,7 +50,7 @@ class ApigeeEdgeActionsDebugEventSubscriber implements EventSubscriberInterface
   /**
    * Responds to rules events.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   The event object.
    * @param string $event_name
    *   The event name.
diff --git a/modules/apigee_edge_actions/src/EventSubscriber/AppCredentialEventSubscriber.php b/modules/apigee_edge_actions/src/EventSubscriber/AppCredentialEventSubscriber.php
index 5ea4bca..6e58c67 100644
--- a/modules/apigee_edge_actions/src/EventSubscriber/AppCredentialEventSubscriber.php
+++ b/modules/apigee_edge_actions/src/EventSubscriber/AppCredentialEventSubscriber.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_actions\EventSubscriber;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\apigee_edge_actions\Event\EdgeEntityEventEdge;
 use Drupal\apigee_edge\Entity\AppInterface;
 use Drupal\apigee_edge\Event\AppCredentialAddApiProductEvent;
@@ -28,7 +29,6 @@ use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Session\AccountInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
@@ -121,7 +121,7 @@ class AppCredentialEventSubscriber implements EventSubscriberInterface {
    *
    * @param string $rules_event_name
    *   The name of the rules event.
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   The api credential event.
    * @param array $api_products
    *   An array of api products.
@@ -150,12 +150,13 @@ class AppCredentialEventSubscriber implements EventSubscriberInterface {
         $api_product = $this->entityTypeManger
           ->getStorage('api_product')
           ->load($product);
-        $this->eventDispatcher->dispatch($rules_event_name, new EdgeEntityEventEdge($app, [
+        $this->eventDispatcher->dispatch(new EdgeEntityEventEdge($app, [
           $app_type => $app,
           'developer' => $developer,
           'api_product_name' => $api_product->getName(),
           'api_product_display_name' => $api_product->getDisplayName(),
-        ]));
+        ]),
+        $rules_event_name);
       }
     }
     catch (PluginException $exception) {
diff --git a/modules/apigee_edge_actions/src/TeamMembershipManager.php b/modules/apigee_edge_actions/src/TeamMembershipManager.php
index 03a7ebc..6f532c7 100644
--- a/modules/apigee_edge_actions/src/TeamMembershipManager.php
+++ b/modules/apigee_edge_actions/src/TeamMembershipManager.php
@@ -177,10 +177,11 @@ class TeamMembershipManager implements TeamMembershipManagerInterface {
 
     // Dispatch an event for each developer.
     foreach ($developers as $developer) {
-      $this->eventDispatcher->dispatch($event, new EdgeEntityEventEdge($team, [
+      $this->eventDispatcher->dispatch(new EdgeEntityEventEdge($team, [
         'team' => $team,
         'member' => $users_by_mail[$developer],
-      ]));
+      ]),
+      $event);
     }
   }
 
diff --git a/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessAnonymousAuthenticatedTest.php b/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessAnonymousAuthenticatedTest.php
index 941397b..4e4b373 100644
--- a/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessAnonymousAuthenticatedTest.php
+++ b/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessAnonymousAuthenticatedTest.php
@@ -38,7 +38,7 @@ class ApiProductRoleBasedAccessAnonymousAuthenticatedTest extends ApiProductRole
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->ridCombinations = $this->calculateRidCombinations([AccountInterface::ANONYMOUS_ROLE, AccountInterface::AUTHENTICATED_ROLE]);
   }
diff --git a/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessAnonymousInternalTest.php b/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessAnonymousInternalTest.php
index 045bcc8..d52d480 100644
--- a/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessAnonymousInternalTest.php
+++ b/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessAnonymousInternalTest.php
@@ -38,7 +38,7 @@ class ApiProductRoleBasedAccessAnonymousInternalTest extends ApiProductRoleBased
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->ridCombinations = $this->calculateRidCombinations([AccountInterface::ANONYMOUS_ROLE, self::INTERNAL_ROLE]);
   }
diff --git a/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessAuthenticatedInternalTest.php b/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessAuthenticatedInternalTest.php
index 2e19f81..30412e4 100644
--- a/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessAuthenticatedInternalTest.php
+++ b/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessAuthenticatedInternalTest.php
@@ -38,7 +38,7 @@ class ApiProductRoleBasedAccessAuthenticatedInternalTest extends ApiProductRoleB
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->ridCombinations = $this->calculateRidCombinations([AccountInterface::ANONYMOUS_ROLE, AccountInterface::AUTHENTICATED_ROLE]);
   }
diff --git a/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessTestBase.php b/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessTestBase.php
index 0f4c7e8..9a501a2 100644
--- a/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessTestBase.php
+++ b/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessTestBase.php
@@ -53,7 +53,7 @@ abstract class ApiProductRoleBasedAccessTestBase extends ApiProductAccessTest {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->users[self::USER_WITH_ADMIN_PERM] = $this->createAccount(['administer apigee edge']);
@@ -87,7 +87,8 @@ abstract class ApiProductRoleBasedAccessTestBase extends ApiProductAccessTest {
       }
     }
     $this->drupalLogin($this->users[self::USER_WITH_ADMIN_PERM]);
-    $this->drupalPostForm(Url::fromRoute('apigee_edge.settings.developer.api_product_access'), $post, 'Save configuration');
+    $this->drupalGet(Url::fromRoute('apigee_edge.settings.developer.api_product_access'));
+    $this->submitForm($post, 'Save configuration');
     $this->drupalLogout();
   }
 
diff --git a/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/DebugMessageFormatterPluginBase.php b/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/DebugMessageFormatterPluginBase.php
index 7d46673..70d1bf7 100644
--- a/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/DebugMessageFormatterPluginBase.php
+++ b/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/DebugMessageFormatterPluginBase.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_debug\Plugin\DebugMessageFormatter;
 
+use function GuzzleHttp\Psr7\stream_for;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\PluginBase;
@@ -101,7 +102,7 @@ abstract class DebugMessageFormatterPluginBase extends PluginBase implements Con
         $body = preg_replace('/(.*mfa_token=)([^\&]+)(.*)/', '$1***mfa-token***$3', $body);
         $body = preg_replace('/(.*username=)([^\&]+)(.*)/', '$1***username***$3', $body);
         $body = preg_replace('/(.*password=)([^\&]+)(.*)/', '$1***password***$3', $body);
-        $request = $request->withBody(Psr7\stream_for($body));
+        $request = $request->withBody(stream_for($body));
       }
     }
     if ($this->maskOrganization) {
@@ -139,7 +140,7 @@ abstract class DebugMessageFormatterPluginBase extends PluginBase implements Con
             $value = $masks[$key];
           }
         });
-        $response = $response->withBody(Psr7\stream_for(json_encode((object) $json, JSON_PRETTY_PRINT)));
+        $response = $response->withBody(stream_for(json_encode((object) $json, JSON_PRETTY_PRINT)));
       }
 
       if ($request->getMethod() === 'POST' && $request->getUri()->getPath() === '/oauth/token') {
@@ -151,7 +152,7 @@ abstract class DebugMessageFormatterPluginBase extends PluginBase implements Con
           if (isset($json['refresh_token'])) {
             $json['refresh_token'] = '***refresh-token***';
           }
-          $response = $response->withBody(Psr7\stream_for(json_encode((object) $json)));
+          $response = $response->withBody(stream_for(json_encode((object) $json)));
         }
       }
     }
diff --git a/modules/apigee_edge_teams/apigee_edge_teams.api.php b/modules/apigee_edge_teams/apigee_edge_teams.api.php
index 24f1b0d..a1dd4eb 100644
--- a/modules/apigee_edge_teams/apigee_edge_teams.api.php
+++ b/modules/apigee_edge_teams/apigee_edge_teams.api.php
@@ -1,5 +1,10 @@
 <?php
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\apigee_edge\Entity\ApiProductInterface;
+use Drupal\apigee_edge_teams\Entity\TeamInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Access\AccessResult;
 /**
  * @file
  * Copyright 2018 Google Inc.
@@ -33,7 +38,7 @@
  * @param \Drupal\Core\StringTranslation\TranslatableMarkup $title
  *   The menu link/page title.
  */
-function hook_apigee_edge_teams_team_listing_page_title_alter(\Drupal\Core\StringTranslation\TranslatableMarkup &$title) {
+function hook_apigee_edge_teams_team_listing_page_title_alter(TranslatableMarkup &$title) {
 }
 
 /**
@@ -54,9 +59,9 @@ function hook_apigee_edge_teams_team_listing_page_title_alter(\Drupal\Core\Strin
  *
  * @see \Drupal\apigee_edge_teams\TeamMemberApiProductAccessHandler
  */
-function hook_apigee_edge_teams_team_api_product_access(\Drupal\apigee_edge\Entity\ApiProductInterface $api_product, string $operation, \Drupal\apigee_edge_teams\Entity\TeamInterface $team, \Drupal\Core\Session\AccountInterface $account) {
+function hook_apigee_edge_teams_team_api_product_access(ApiProductInterface $api_product, string $operation, TeamInterface $team, AccountInterface $account) {
   // Grant access if API product's name is prefixed with the team's name.
-  return \Drupal\Core\Access\AccessResult::allowedIf(mb_strpos($api_product->id(), $team->id()) === 0);
+  return AccessResult::allowedIf(mb_strpos($api_product->id(), $team->id()) === 0);
 }
 
 /**
@@ -75,7 +80,7 @@ function hook_apigee_edge_teams_team_api_product_access(\Drupal\apigee_edge\Enti
  * @param \Drupal\Core\Session\AccountInterface $account
  *   The Drupal user of the developer.
  */
-function hook_apigee_edge_teams_developer_permissions_by_team_alter(array &$permissions, \Drupal\apigee_edge_teams\Entity\TeamInterface $team, \Drupal\Core\Session\AccountInterface $account) {
+function hook_apigee_edge_teams_developer_permissions_by_team_alter(array &$permissions, TeamInterface $team, AccountInterface $account) {
   // @see apigee_edge_teams_test_apigee_edge_teams_developer_permissions_by_team_alter()
 }
 
diff --git a/modules/apigee_edge_teams/apigee_edge_teams.install b/modules/apigee_edge_teams/apigee_edge_teams.install
index 69c3532..3680b75 100644
--- a/modules/apigee_edge_teams/apigee_edge_teams.install
+++ b/modules/apigee_edge_teams/apigee_edge_teams.install
@@ -113,7 +113,7 @@ function apigee_edge_teams_update_8702() {
   ];
   /** @var \Drupal\Core\Config\StorageInterface $config_storage */
   $config_storage = \Drupal::service('config.storage');
-  $module_path = drupal_get_path('module', 'apigee_edge_teams');
+  $module_path = \Drupal::service('extension.list.module')->getPath('apigee_edge_teams');
   $source = new FileStorage("$module_path/config/install");
   $new_team_settings = $source->read('apigee_edge_teams.team_settings');
   $team_settings = $config_storage->read('apigee_edge_teams.team_settings');
diff --git a/modules/apigee_edge_teams/src/Entity/Storage/TeamInvitationStorage.php b/modules/apigee_edge_teams/src/Entity/Storage/TeamInvitationStorage.php
index c1c5062..ad477e3 100644
--- a/modules/apigee_edge_teams/src/Entity/Storage/TeamInvitationStorage.php
+++ b/modules/apigee_edge_teams/src/Entity/Storage/TeamInvitationStorage.php
@@ -113,7 +113,7 @@ class TeamInvitationStorage extends SqlContentEntityStorage implements TeamInvit
 
     switch ($hook) {
       case 'insert':
-        $this->eventDispatcher->dispatch(TeamInvitationEvents::CREATED, new TeamInvitationEvent($entity));
+        $this->eventDispatcher->dispatch(new TeamInvitationEvent($entity), TeamInvitationEvents::CREATED);
         break;
 
       case 'update':
@@ -128,11 +128,11 @@ class TeamInvitationStorage extends SqlContentEntityStorage implements TeamInvit
         unset($entity->original);
 
         if (!$original->isDeclined() && $entity->isDeclined()) {
-          $this->eventDispatcher->dispatch(TeamInvitationEvents::DECLINED, new TeamInvitationEvent($entity));
+          $this->eventDispatcher->dispatch(new TeamInvitationEvent($entity), TeamInvitationEvents::DECLINED);
         }
 
         if (!$original->isAccepted() && $entity->isAccepted()) {
-          $this->eventDispatcher->dispatch(TeamInvitationEvents::ACCEPTED, new TeamInvitationEvent($entity));
+          $this->eventDispatcher->dispatch(new TeamInvitationEvent($entity), TeamInvitationEvents::ACCEPTED);
         }
         break;
     }
diff --git a/modules/apigee_edge_teams/src/Event/TeamInvitationEvent.php b/modules/apigee_edge_teams/src/Event/TeamInvitationEvent.php
index b5c1ac9..4568666 100644
--- a/modules/apigee_edge_teams/src/Event/TeamInvitationEvent.php
+++ b/modules/apigee_edge_teams/src/Event/TeamInvitationEvent.php
@@ -20,8 +20,8 @@
 
 namespace Drupal\apigee_edge_teams\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\apigee_edge_teams\Entity\TeamInvitationInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines the team_invitation event.
diff --git a/modules/apigee_edge_teams/src/EventSubscriber/TeamInactiveStatusSubscriber.php b/modules/apigee_edge_teams/src/EventSubscriber/TeamInactiveStatusSubscriber.php
index 17743ad..684639e 100644
--- a/modules/apigee_edge_teams/src/EventSubscriber/TeamInactiveStatusSubscriber.php
+++ b/modules/apigee_edge_teams/src/EventSubscriber/TeamInactiveStatusSubscriber.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\Core\DependencyInjection\ClassResolverInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -27,7 +28,6 @@ use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -87,10 +87,10 @@ class TeamInactiveStatusSubscriber implements EventSubscriberInterface {
   /**
    * Display an error message on inactive team routes.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     if ($this->currentUser->isAnonymous() || !in_array($this->routeMatch->getRouteName(), $this->getDisabledRoutes())) {
       return;
     }
diff --git a/modules/apigee_edge_teams/src/EventSubscriber/TeamMemberApiProductAccessHandlerCacheReset.php b/modules/apigee_edge_teams/src/EventSubscriber/TeamMemberApiProductAccessHandlerCacheReset.php
index 3949968..6bfe264 100644
--- a/modules/apigee_edge_teams/src/EventSubscriber/TeamMemberApiProductAccessHandlerCacheReset.php
+++ b/modules/apigee_edge_teams/src/EventSubscriber/TeamMemberApiProductAccessHandlerCacheReset.php
@@ -20,13 +20,13 @@
 
 namespace Drupal\apigee_edge_teams\EventSubscriber;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\apigee_edge\Event\AppCredentialAddApiProductEvent;
 use Drupal\apigee_edge\Event\AppCredentialCreateEvent;
 use Drupal\apigee_edge\Event\AppCredentialDeleteApiProductEvent;
 use Drupal\apigee_edge\Event\AppCredentialDeleteEvent;
 use Drupal\apigee_edge\Event\AppCredentialGenerateEvent;
 use Drupal\apigee_edge_teams\TeamMemberApiProductAccessHandlerInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
 /**
@@ -67,7 +67,7 @@ final class TeamMemberApiProductAccessHandlerCacheReset implements EventSubscrib
   /**
    * Clears API product entity access cache.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   Event that triggered this subscriber.
    */
   public function clearApiProductCache(Event $event): void {
diff --git a/modules/apigee_edge_teams/src/EventSubscriber/TeamStatusWarningSubscriber.php b/modules/apigee_edge_teams/src/EventSubscriber/TeamStatusWarningSubscriber.php
index 15634a0..96082d8 100644
--- a/modules/apigee_edge_teams/src/EventSubscriber/TeamStatusWarningSubscriber.php
+++ b/modules/apigee_edge_teams/src/EventSubscriber/TeamStatusWarningSubscriber.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\apigee_edge_teams\TeamMembershipManagerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ -29,7 +30,6 @@ use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\StringTranslation\TranslationInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -94,10 +94,10 @@ class TeamStatusWarningSubscriber implements EventSubscriberInterface {
   /**
    * Display's a warning message if team's status is inactive.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     // Anonymous user's does not have access to these routes.
     if ($this->currentUser->isAuthenticated() && strpos($this->routeMatch->getRouteName(), 'entity.team_app.') === 0) {
       // Team is available in most of the team app routes as a route parameter.
diff --git a/modules/apigee_edge_teams/tests/src/Functional/AccessTest.php b/modules/apigee_edge_teams/tests/src/Functional/AccessTest.php
index 33e5904..9f1295c 100644
--- a/modules/apigee_edge_teams/tests/src/Functional/AccessTest.php
+++ b/modules/apigee_edge_teams/tests/src/Functional/AccessTest.php
@@ -199,7 +199,7 @@ class AccessTest extends ApigeeEdgeTeamsFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->teamStorage = $this->container->get('entity_type.manager')->getStorage('team');
@@ -260,7 +260,7 @@ class AccessTest extends ApigeeEdgeTeamsFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     if ($this->team !== NULL) {
       try {
         $this->teamStorage->delete([$this->team]);
@@ -404,7 +404,8 @@ class AccessTest extends ApigeeEdgeTeamsFunctionalTestBase {
     // Create roles for every team membership level permission.
     $this->drupalLogin($this->rootUser);
     foreach (array_keys(self::TEAM_MEMBER_PERMISSION_MATRIX) as $permission) {
-      $this->drupalPostForm(Url::fromRoute('entity.team_role.add_form'), [
+      $this->drupalGet(Url::fromRoute('entity.team_role.add_form'));
+      $this->submitForm([
         'label' => $permission,
         'id' => $permission,
       ], 'Save');
@@ -676,8 +677,9 @@ class AccessTest extends ApigeeEdgeTeamsFunctionalTestBase {
     foreach (array_keys(self::TEAM_MEMBER_PERMISSION_MATRIX) as $permission) {
       $permission_changes["{$role_name}[{$permission}]"] = in_array($permission, $permissions);
     }
+    $this->drupalGet(Url::fromRoute('apigee_edge_teams.settings.team.permissions'));
 
-    $this->drupalPostForm(Url::fromRoute('apigee_edge_teams.settings.team.permissions'), $permission_changes, 'Save permissions');
+    $this->submitForm($permission_changes, 'Save permissions');
     // Dump permission configuration to the HTML output.
     $this->drupalGet(Url::fromRoute('apigee_edge_teams.settings.team.permissions'));
     // Because changes made on the UI therefore _this_ instance of the team role
diff --git a/modules/apigee_edge_teams/tests/src/Functional/TeamApiProductAccessTest.php b/modules/apigee_edge_teams/tests/src/Functional/TeamApiProductAccessTest.php
index 79eb1c9..83e195e 100644
--- a/modules/apigee_edge_teams/tests/src/Functional/TeamApiProductAccessTest.php
+++ b/modules/apigee_edge_teams/tests/src/Functional/TeamApiProductAccessTest.php
@@ -116,7 +116,7 @@ class TeamApiProductAccessTest extends ApigeeEdgeTeamsFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->apiProductStorage = $this->container->get('entity_type.manager')->getStorage('api_product');
@@ -165,7 +165,7 @@ class TeamApiProductAccessTest extends ApigeeEdgeTeamsFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     try {
       if ($this->team !== NULL) {
         $this->teamStorage->delete([$this->team]);
diff --git a/modules/apigee_edge_teams/tests/src/Functional/TeamInvitationsTest.php b/modules/apigee_edge_teams/tests/src/Functional/TeamInvitationsTest.php
index a689cc3..f366ff3 100644
--- a/modules/apigee_edge_teams/tests/src/Functional/TeamInvitationsTest.php
+++ b/modules/apigee_edge_teams/tests/src/Functional/TeamInvitationsTest.php
@@ -80,7 +80,7 @@ class TeamInvitationsTest extends ApigeeEdgeTeamsFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->addOrganizationMatchedResponse();
@@ -104,7 +104,7 @@ class TeamInvitationsTest extends ApigeeEdgeTeamsFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     if (!$this->integration_enabled) {
       return;
     }
diff --git a/modules/apigee_edge_teams/tests/src/Functional/TeamListBuilderTest.php b/modules/apigee_edge_teams/tests/src/Functional/TeamListBuilderTest.php
index e357bfb..86cd927 100644
--- a/modules/apigee_edge_teams/tests/src/Functional/TeamListBuilderTest.php
+++ b/modules/apigee_edge_teams/tests/src/Functional/TeamListBuilderTest.php
@@ -110,7 +110,7 @@ class TeamListBuilderTest extends ApigeeEdgeTeamsFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->addOrganizationMatchedResponse();
@@ -142,7 +142,7 @@ class TeamListBuilderTest extends ApigeeEdgeTeamsFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     try {
       $this->teamStorage->delete([$this->teamA, $this->teamB]);
       $this->account->delete();
diff --git a/modules/apigee_edge_teams/tests/src/Functional/TeamMembershipManagerTest.php b/modules/apigee_edge_teams/tests/src/Functional/TeamMembershipManagerTest.php
index 3b456f8..f7a0524 100644
--- a/modules/apigee_edge_teams/tests/src/Functional/TeamMembershipManagerTest.php
+++ b/modules/apigee_edge_teams/tests/src/Functional/TeamMembershipManagerTest.php
@@ -58,7 +58,7 @@ class TeamMembershipManagerTest extends ApigeeEdgeTeamsFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->developerStorage = $this->container->get('entity_type.manager')->getStorage('developer');
@@ -86,7 +86,7 @@ class TeamMembershipManagerTest extends ApigeeEdgeTeamsFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     foreach ($this->developers as $developer) {
       try {
         $this->developerStorage->delete([$developer]);
diff --git a/modules/apigee_edge_teams/tests/src/Functional/UiTest.php b/modules/apigee_edge_teams/tests/src/Functional/UiTest.php
index aadd9cd..af401b4 100644
--- a/modules/apigee_edge_teams/tests/src/Functional/UiTest.php
+++ b/modules/apigee_edge_teams/tests/src/Functional/UiTest.php
@@ -87,7 +87,7 @@ class UiTest extends ApigeeEdgeTeamsFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->teamStorage = $this->container->get('entity_type.manager')->getStorage('team');
@@ -109,7 +109,7 @@ class UiTest extends ApigeeEdgeTeamsFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     if ($this->account !== NULL) {
       try {
         $this->account->delete();
@@ -204,9 +204,10 @@ class UiTest extends ApigeeEdgeTeamsFunctionalTestBase {
     $teamMembershipManager->addMembers($this->team->id(), [
       $this->otherAccount->getEmail(),
     ]);
+    $this->drupalGet(Url::fromRoute('apigee_edge_teams.settings.team.permissions'));
 
     // Team members have access to every team app and membership operations.
-    $this->drupalPostForm(Url::fromRoute('apigee_edge_teams.settings.team.permissions'), [
+    $this->submitForm([
       'member[team_manage_members]' => TRUE,
       'member[team_app_create]' => TRUE,
       'member[team_app_update]' => TRUE,
diff --git a/modules/apigee_edge_teams/tests/src/FunctionalJavascript/ManageTeamAppsApiProductAccessTest.php b/modules/apigee_edge_teams/tests/src/FunctionalJavascript/ManageTeamAppsApiProductAccessTest.php
index 2dca0ac..bb05dbf 100644
--- a/modules/apigee_edge_teams/tests/src/FunctionalJavascript/ManageTeamAppsApiProductAccessTest.php
+++ b/modules/apigee_edge_teams/tests/src/FunctionalJavascript/ManageTeamAppsApiProductAccessTest.php
@@ -85,7 +85,7 @@ class ManageTeamAppsApiProductAccessTest extends ApigeeEdgeFunctionalJavascriptT
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Users with manage team apps permissions can see private API products.
     $this->config('apigee_edge_teams.team_settings')->set('non_member_team_apps_visible_api_products', ['private'])->save();
@@ -159,7 +159,7 @@ class ManageTeamAppsApiProductAccessTest extends ApigeeEdgeFunctionalJavascriptT
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     if ($this->account !== NULL) {
       try {
         $this->account->delete();
diff --git a/modules/apigee_edge_teams/tests/src/Kernel/Entity/TeamViewBuilderTest.php b/modules/apigee_edge_teams/tests/src/Kernel/Entity/TeamViewBuilderTest.php
index 10bb417..da45a18 100644
--- a/modules/apigee_edge_teams/tests/src/Kernel/Entity/TeamViewBuilderTest.php
+++ b/modules/apigee_edge_teams/tests/src/Kernel/Entity/TeamViewBuilderTest.php
@@ -73,7 +73,7 @@ class TeamViewBuilderTest extends KernelTestBase {
    *
    * @throws \Exception
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installConfig(['apigee_edge']);
diff --git a/modules/apigee_edge_teams/tests/src/Kernel/Event/TeamInvitationEventsTest.php b/modules/apigee_edge_teams/tests/src/Kernel/Event/TeamInvitationEventsTest.php
index 5cd53e5..55e53ab 100644
--- a/modules/apigee_edge_teams/tests/src/Kernel/Event/TeamInvitationEventsTest.php
+++ b/modules/apigee_edge_teams/tests/src/Kernel/Event/TeamInvitationEventsTest.php
@@ -59,7 +59,7 @@ class TeamInvitationEventsTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installConfig(['apigee_edge']);
diff --git a/src/Controller/DeveloperSyncController.php b/src/Controller/DeveloperSyncController.php
index a89c993..fa01e2b 100644
--- a/src/Controller/DeveloperSyncController.php
+++ b/src/Controller/DeveloperSyncController.php
@@ -80,7 +80,7 @@ class DeveloperSyncController extends ControllerBase {
    *   Job tag.
    */
   protected static function generateTag(string $type): string {
-    return "developer_sync_{$type}_" . user_password();
+    return "developer_sync_{$type}_" . \Drupal::service('password_generator')->generate();
   }
 
   /**
diff --git a/src/Controller/EdgeEntityFieldConfigListController.php b/src/Controller/EdgeEntityFieldConfigListController.php
index 0a05823..be3b406 100644
--- a/src/Controller/EdgeEntityFieldConfigListController.php
+++ b/src/Controller/EdgeEntityFieldConfigListController.php
@@ -63,7 +63,7 @@ class EdgeEntityFieldConfigListController extends FieldConfigListController {
   public function listing($entity_type_id = NULL, $bundle = NULL, RouteMatchInterface $route_match = NULL) {
     $page = parent::listing($entity_type_id, $bundle, $route_match);
     $event = new EdgeEntityFieldConfigListAlterEvent($entity_type_id, $page);
-    $this->eventDispatcher->dispatch(EdgeEntityFieldConfigListAlterEvent::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, EdgeEntityFieldConfigListAlterEvent::EVENT_NAME);
     return $event->getPage();
   }
 
diff --git a/src/Entity/Controller/AppCredentialControllerBase.php b/src/Entity/Controller/AppCredentialControllerBase.php
index d93743d..0f922ff 100644
--- a/src/Entity/Controller/AppCredentialControllerBase.php
+++ b/src/Entity/Controller/AppCredentialControllerBase.php
@@ -117,7 +117,7 @@ abstract class AppCredentialControllerBase implements AppCredentialControllerInt
    */
   public function addProducts(string $consumer_key, array $api_products): AppCredentialInterface {
     $credential = $this->decorated()->addProducts($consumer_key, $api_products);
-    $this->eventDispatcher->dispatch(AppCredentialAddApiProductEvent::EVENT_NAME, new AppCredentialAddApiProductEvent($this->getAppType(), $this->owner, $this->appName, $credential, $api_products));
+    $this->eventDispatcher->dispatch(new AppCredentialAddApiProductEvent($this->getAppType(), $this->owner, $this->appName, $credential, $api_products), AppCredentialAddApiProductEvent::EVENT_NAME);
     // By removing app from cache we force reload the credentials as well.
     $this->appCacheByOwner->removeEntities([$this->appName]);
     return $credential;
@@ -128,7 +128,7 @@ abstract class AppCredentialControllerBase implements AppCredentialControllerInt
    */
   public function create(string $consumer_key, string $consumer_secret): AppCredentialInterface {
     $credential = $this->decorated()->create($consumer_key, $consumer_secret);
-    $this->eventDispatcher->dispatch(AppCredentialCreateEvent::EVENT_NAME, new AppCredentialCreateEvent($this->getAppType(), $this->owner, $this->appName, $credential));
+    $this->eventDispatcher->dispatch(new AppCredentialCreateEvent($this->getAppType(), $this->owner, $this->appName, $credential), AppCredentialCreateEvent::EVENT_NAME);
     // By removing app from cache we force reload the credentials as well.
     $this->appCacheByOwner->removeEntities([$this->appName]);
     return $credential;
@@ -147,7 +147,7 @@ abstract class AppCredentialControllerBase implements AppCredentialControllerInt
    */
   public function delete(string $consumer_key): AppCredentialInterface {
     $credential = $this->decorated()->delete($consumer_key);
-    $this->eventDispatcher->dispatch(AppCredentialDeleteEvent::EVENT_NAME, new AppCredentialDeleteEvent($this->getAppType(), $this->owner, $this->appName, $credential));
+    $this->eventDispatcher->dispatch(new AppCredentialDeleteEvent($this->getAppType(), $this->owner, $this->appName, $credential), AppCredentialDeleteEvent::EVENT_NAME);
     // By removing app from cache we force reload the credentials as well.
     $this->appCacheByOwner->removeEntities([$this->appName]);
     return $credential;
@@ -158,7 +158,7 @@ abstract class AppCredentialControllerBase implements AppCredentialControllerInt
    */
   public function deleteApiProduct(string $consumer_key, string $api_product): AppCredentialInterface {
     $credential = $this->decorated()->deleteApiProduct($consumer_key, $api_product);
-    $this->eventDispatcher->dispatch(AppCredentialDeleteApiProductEvent::EVENT_NAME, new AppCredentialDeleteApiProductEvent($this->getAppType(), $this->owner, $this->appName, $credential, $api_product));
+    $this->eventDispatcher->dispatch(new AppCredentialDeleteApiProductEvent($this->getAppType(), $this->owner, $this->appName, $credential, $api_product), AppCredentialDeleteApiProductEvent::EVENT_NAME);
     // By removing app from cache we force reload the credentials as well.
     $this->appCacheByOwner->removeEntities([$this->appName]);
     return $credential;
@@ -178,7 +178,7 @@ abstract class AppCredentialControllerBase implements AppCredentialControllerInt
    */
   public function generate(array $api_products, AttributesProperty $app_attributes, string $callback_url, array $scopes = [], string $key_expires_in = '-1'): AppCredentialInterface {
     $credential = $this->decorated()->generate($api_products, $app_attributes, $callback_url, $scopes, $key_expires_in);
-    $this->eventDispatcher->dispatch(AppCredentialGenerateEvent::EVENT_NAME, new AppCredentialGenerateEvent($this->getAppType(), $this->owner, $this->appName, $credential));
+    $this->eventDispatcher->dispatch(new AppCredentialGenerateEvent($this->getAppType(), $this->owner, $this->appName, $credential), AppCredentialGenerateEvent::EVENT_NAME);
     // By removing app from cache we force reload the credentials as well.
     $this->appCacheByOwner->removeEntities([$this->appName]);
     return $credential;
diff --git a/src/Event/AbstractAppCredentialEvent.php b/src/Event/AbstractAppCredentialEvent.php
index 9d9a23d..501b833 100644
--- a/src/Event/AbstractAppCredentialEvent.php
+++ b/src/Event/AbstractAppCredentialEvent.php
@@ -20,8 +20,8 @@
 
 namespace Drupal\apigee_edge\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Apigee\Edge\Api\Management\Entity\AppCredentialInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Base class for app credential create, generate and add products events.
diff --git a/src/Event/EdgeEntityFieldConfigListAlterEvent.php b/src/Event/EdgeEntityFieldConfigListAlterEvent.php
index 208197a..f3fbebb 100644
--- a/src/Event/EdgeEntityFieldConfigListAlterEvent.php
+++ b/src/Event/EdgeEntityFieldConfigListAlterEvent.php
@@ -20,7 +20,7 @@
 
 namespace Drupal\apigee_edge\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Triggered when an Apigee Edge entity's field config UI gets built.
diff --git a/src/EventSubscriber/ApiProductEntityAccessCacheReset.php b/src/EventSubscriber/ApiProductEntityAccessCacheReset.php
index 17a56bc..04dc6a4 100644
--- a/src/EventSubscriber/ApiProductEntityAccessCacheReset.php
+++ b/src/EventSubscriber/ApiProductEntityAccessCacheReset.php
@@ -20,13 +20,13 @@
 
 namespace Drupal\apigee_edge\EventSubscriber;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\apigee_edge\Event\AppCredentialAddApiProductEvent;
 use Drupal\apigee_edge\Event\AppCredentialCreateEvent;
 use Drupal\apigee_edge\Event\AppCredentialDeleteApiProductEvent;
 use Drupal\apigee_edge\Event\AppCredentialDeleteEvent;
 use Drupal\apigee_edge\Event\AppCredentialGenerateEvent;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
 /**
@@ -71,7 +71,7 @@ final class ApiProductEntityAccessCacheReset implements EventSubscriberInterface
   /**
    * Clears API product entity access cache.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   Event that triggered this subscriber.
    */
   public function clearApiProductCache(Event $event): void {
diff --git a/src/EventSubscriber/DeveloperStatusWarningSubscriber.php b/src/EventSubscriber/DeveloperStatusWarningSubscriber.php
index 258a890..8295297 100644
--- a/src/EventSubscriber/DeveloperStatusWarningSubscriber.php
+++ b/src/EventSubscriber/DeveloperStatusWarningSubscriber.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\apigee_edge\Entity\DeveloperInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -29,7 +30,6 @@ use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\Core\Url;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -92,10 +92,10 @@ final class DeveloperStatusWarningSubscriber implements EventSubscriberInterface
   /**
    * Display's a warning message if developer's status is inactive.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     // Anonymous user's does not have access to these routes.
     if ($this->currentUser->isAuthenticated() && strpos($this->routeMatch->getRouteName(), 'entity.developer_app.') === 0) {
       $developer_storage = $this->entityTypeManager->getStorage('developer');
diff --git a/src/EventSubscriber/EdgeExceptionSubscriber.php b/src/EventSubscriber/EdgeExceptionSubscriber.php
index af57151..66b5aea 100644
--- a/src/EventSubscriber/EdgeExceptionSubscriber.php
+++ b/src/EventSubscriber/EdgeExceptionSubscriber.php
@@ -118,11 +118,11 @@ final class EdgeExceptionSubscriber implements EventSubscriberInterface {
   /**
    * Displays the Edge connection error page.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent|\Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent|\Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *   The exception event.
    */
   public function onException($event) {
-    $exception = ($event instanceof ExceptionEvent) ? $event->getThrowable() : $event->getException();
+    $exception = ($event instanceof ExceptionEvent) ? $event->getThrowable() : $event->getThrowable();
     if ($exception instanceof ApiException || $exception->getPrevious() instanceof ApiException) {
       $context = Error::decodeException($exception);
       $this->logger->critical('@message %function (line %line of %file). <pre>@backtrace_string</pre>', $context);
diff --git a/src/UserDeveloperConverter.php b/src/UserDeveloperConverter.php
index a8fb6da..059697c 100644
--- a/src/UserDeveloperConverter.php
+++ b/src/UserDeveloperConverter.php
@@ -180,7 +180,7 @@ class UserDeveloperConverter implements UserDeveloperConverterInterface {
     if (!$user) {
       // Initialize new user object with minimum data.
       $user = $user_storage->create([
-        'pass' => user_password(),
+        'pass' => \Drupal::service('password_generator')->generate(),
       ]);
       // Suppress invalid email validation errors.
       DeveloperEmailUniqueValidator::whitelist($developer->id());
diff --git a/tests/src/Functional/ApigeeEdgeFunctionalTestBase.php b/tests/src/Functional/ApigeeEdgeFunctionalTestBase.php
index 36a012f..08f32c1 100644
--- a/tests/src/Functional/ApigeeEdgeFunctionalTestBase.php
+++ b/tests/src/Functional/ApigeeEdgeFunctionalTestBase.php
@@ -39,7 +39,7 @@ abstract class ApigeeEdgeFunctionalTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->initTestEnv();
   }
diff --git a/tests/src/Functional/ConfigurationPermissionTest.php b/tests/src/Functional/ConfigurationPermissionTest.php
index 8e6ebf5..0f5dcd9 100644
--- a/tests/src/Functional/ConfigurationPermissionTest.php
+++ b/tests/src/Functional/ConfigurationPermissionTest.php
@@ -41,7 +41,7 @@ class ConfigurationPermissionTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_actions_block');
   }
diff --git a/tests/src/Functional/DeveloperAppAnalyticsTest.php b/tests/src/Functional/DeveloperAppAnalyticsTest.php
index 1dc957f..646ea53 100644
--- a/tests/src/Functional/DeveloperAppAnalyticsTest.php
+++ b/tests/src/Functional/DeveloperAppAnalyticsTest.php
@@ -70,7 +70,7 @@ class DeveloperAppAnalyticsTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->account = $this->createAccount([
@@ -108,7 +108,7 @@ class DeveloperAppAnalyticsTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     try {
       if ($this->developer !== NULL) {
         $this->developer->delete();
diff --git a/tests/src/Functional/DeveloperAppApiKeyTest.php b/tests/src/Functional/DeveloperAppApiKeyTest.php
index 2eb0c2f..cf08296 100644
--- a/tests/src/Functional/DeveloperAppApiKeyTest.php
+++ b/tests/src/Functional/DeveloperAppApiKeyTest.php
@@ -84,7 +84,7 @@ class DeveloperAppApiKeyTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->appCredentialController = \Drupal::service('apigee_edge.controller.developer_app_credential_factory');
@@ -145,7 +145,7 @@ class DeveloperAppApiKeyTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $this->stack->reset();
     try {
       if ($this->account) {
@@ -255,7 +255,7 @@ class DeveloperAppApiKeyTest extends ApigeeEdgeFunctionalTestBase {
         'product' => $this->apiProducts[0],
       ],
     ]);
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'expiry' => 'date',
       'expiry_date' => "07/20/2030",
     ], 'Confirm');
@@ -314,7 +314,7 @@ class DeveloperAppApiKeyTest extends ApigeeEdgeFunctionalTestBase {
         'product' => $this->apiProducts[1],
       ],
     ]);
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'expiry' => 'date',
       'expiry_date' => "07/20/2030",
     ], 'Confirm');
@@ -359,7 +359,7 @@ class DeveloperAppApiKeyTest extends ApigeeEdgeFunctionalTestBase {
     $this->stack->queueMockResponse('no_content');
 
     $this->queueDeveloperAppResponse($this->developerApp, 200, $credentials);
-    $this->drupalPostForm(NULL, [], 'Revoke');
+    $this->submitForm([], 'Revoke');
     $this->assertSession()->pageTextContains('API key ' . $this->consumer_key . ' revoked from ' . $this->developerApp->getName() . '.');
 
     // Access denied for the only active key.
@@ -413,7 +413,7 @@ class DeveloperAppApiKeyTest extends ApigeeEdgeFunctionalTestBase {
     $this->queueDeveloperAppResponse($this->developerApp, 200, $credentials);
     $this->queueDeveloperAppResponse($this->developerApp, 200, $credentials);
     $this->stack->queueMockResponse('no_content');
-    $this->drupalPostForm(NULL, [], 'Delete');
+    $this->submitForm([], 'Delete');
     $this->assertSession()->pageTextContains('API key ' . $this->consumer_key . ' deleted from ' . $this->developerApp->getName() . '.');
 
     // Access denied for the only active key.
diff --git a/tests/src/Functional/DeveloperAppApiKeysPermissionTest.php b/tests/src/Functional/DeveloperAppApiKeysPermissionTest.php
index c4980bf..7a5bfe7 100644
--- a/tests/src/Functional/DeveloperAppApiKeysPermissionTest.php
+++ b/tests/src/Functional/DeveloperAppApiKeysPermissionTest.php
@@ -83,7 +83,7 @@ class DeveloperAppApiKeysPermissionTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->addOrganizationMatchedResponse();
@@ -128,7 +128,7 @@ class DeveloperAppApiKeysPermissionTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $this->stack->reset();
     try {
       if ($this->account) {
diff --git a/tests/src/Functional/DeveloperAppCredentialEventTest.php b/tests/src/Functional/DeveloperAppCredentialEventTest.php
index 1a487cc..b5d3f6a 100644
--- a/tests/src/Functional/DeveloperAppCredentialEventTest.php
+++ b/tests/src/Functional/DeveloperAppCredentialEventTest.php
@@ -67,7 +67,7 @@ class DeveloperAppCredentialEventTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installExtraModules(['apigee_edge_test_app_keys']);
@@ -94,7 +94,7 @@ class DeveloperAppCredentialEventTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     try {
       if ($this->developer !== NULL) {
         $this->developer->delete();
diff --git a/tests/src/Functional/DeveloperAppFieldTest.php b/tests/src/Functional/DeveloperAppFieldTest.php
index c5e2089..e37c973 100644
--- a/tests/src/Functional/DeveloperAppFieldTest.php
+++ b/tests/src/Functional/DeveloperAppFieldTest.php
@@ -73,7 +73,7 @@ class DeveloperAppFieldTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalPlaceBlock('system_breadcrumb_block');
@@ -102,7 +102,7 @@ class DeveloperAppFieldTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     try {
       if ($this->account !== NULL) {
         $this->account->delete();
@@ -474,7 +474,8 @@ class DeveloperAppFieldTest extends ApigeeEdgeFunctionalTestBase {
    *   Whether to expect success or a validation error.
    */
   protected function submitBaseFieldConfigForm(bool $description_required = FALSE, bool $callback_url_required = FALSE, bool $expect_success = TRUE) {
-    $this->drupalPostForm(Url::fromRoute('entity.developer_app.field_ui_fields'), [
+    $this->drupalGet(Url::fromRoute('entity.developer_app.field_ui_fields'));
+    $this->submitForm([
       'table[description][required]' => $description_required,
       'table[callbackUrl][required]' => $callback_url_required,
     ], 'Save');
@@ -501,7 +502,8 @@ class DeveloperAppFieldTest extends ApigeeEdgeFunctionalTestBase {
     foreach ($region_overrides as $field => $region) {
       $edit["fields[{$field}][region]"] = $region;
     }
-    $this->drupalPostForm(Url::fromRoute('entity.entity_form_display.developer_app.default'), $edit, 'Save');
+    $this->drupalGet(Url::fromRoute('entity.entity_form_display.developer_app.default'));
+    $this->submitForm($edit, 'Save');
 
     if ($expect_success) {
       $this->assertSession()->pageTextContains('Your settings have been saved.');
@@ -523,7 +525,8 @@ class DeveloperAppFieldTest extends ApigeeEdgeFunctionalTestBase {
     foreach ($region_overrides as $field => $region) {
       $edit["fields[{$field}][region]"] = $region;
     }
-    $this->drupalPostForm(Url::fromRoute('entity.entity_view_display.developer_app.default'), $edit, 'Save');
+    $this->drupalGet(Url::fromRoute('entity.entity_view_display.developer_app.default'));
+    $this->submitForm($edit, 'Save');
 
     $this->assertSession()->pageTextContains('Your settings have been saved.');
   }
diff --git a/tests/src/Functional/DeveloperAppPermissionTest.php b/tests/src/Functional/DeveloperAppPermissionTest.php
index e03e5a6..8802d4b 100644
--- a/tests/src/Functional/DeveloperAppPermissionTest.php
+++ b/tests/src/Functional/DeveloperAppPermissionTest.php
@@ -120,7 +120,7 @@ class DeveloperAppPermissionTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->entityType = $this->container->get('entity_type.manager')->getDefinition('developer_app');
@@ -165,7 +165,7 @@ class DeveloperAppPermissionTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     try {
       if ($this->otherAccount !== NULL) {
         $this->otherAccount->delete();
diff --git a/tests/src/Functional/DeveloperAppUITest.php b/tests/src/Functional/DeveloperAppUITest.php
index 1d7d28b..f5418fe 100644
--- a/tests/src/Functional/DeveloperAppUITest.php
+++ b/tests/src/Functional/DeveloperAppUITest.php
@@ -48,7 +48,7 @@ class DeveloperAppUITest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // We can not override self::$modules in this trait because that would
@@ -71,7 +71,7 @@ class DeveloperAppUITest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     try {
       if ($this->account !== NULL) {
         $this->account->delete();
@@ -107,7 +107,7 @@ class DeveloperAppUITest extends ApigeeEdgeFunctionalTestBase {
     $this->assertSession()->elementContains('css', 'title', $type->getPluralLabel());
 
     // Assert link to "Apps" is changed.
-    $this->assertLink($type->getPluralLabel());
+    $this->assertSession()->linkExists($type->getPluralLabel());
   }
 
   /**
@@ -251,8 +251,9 @@ class DeveloperAppUITest extends ApigeeEdgeFunctionalTestBase {
    */
   public function testCreateAppWithModifiedCredentialLifetime() {
     $url = Url::fromRoute('apigee_edge.settings.developer_app.credentials');
+    $this->drupalGet($url);
     // Change credential lifetime to 10 days from 0.
-    $this->drupalPostForm($url, [
+    $this->submitForm([
       'credential_lifetime' => 10,
     ], 'Save configuration');
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
@@ -268,9 +269,10 @@ class DeveloperAppUITest extends ApigeeEdgeFunctionalTestBase {
     $this->clickLink($name);
     // Result depends on how fast the response was.
     $this->assertSession()->pageTextMatches('/1 week (2|3) days hence/');
+    $this->drupalGet($url);
 
     // Change credential lifetime to 0 (Never) days from 10.
-    $this->drupalPostForm($url, [
+    $this->submitForm([
       'credential_lifetime' => 0,
     ], 'Save configuration');
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
@@ -538,11 +540,14 @@ class DeveloperAppUITest extends ApigeeEdgeFunctionalTestBase {
     $this->drupalGet($app_edit_url);
     // Also test field description.
     $this->assertSession()->pageTextContains($description);
-    $this->drupalPostForm($app_edit_url, [], 'Save');
+    $this->drupalGet($app_edit_url);
+    $this->submitForm([], 'Save');
     $this->assertSession()->pageTextContains("The URL {$callback_url} is not valid.");
-    $this->drupalPostForm($app_edit_url, ['callbackUrl[0][value]' => 'http://example.com'], 'Save');
+    $this->drupalGet($app_edit_url);
+    $this->submitForm(['callbackUrl[0][value]' => 'http://example.com'], 'Save');
     $this->assertSession()->pageTextContains("Callback URL field is not in the right format.");
-    $this->drupalPostForm($app_edit_url, ['callbackUrl[0][value]' => 'https://example.com'], 'Save');
+    $this->drupalGet($app_edit_url);
+    $this->submitForm(['callbackUrl[0][value]' => 'https://example.com'], 'Save');
     $this->assertSession()->pageTextContains('App has been successfully updated.');
     $this->assertSession()->pageTextContains('https://example.com');
   }
@@ -581,9 +586,11 @@ class DeveloperAppUITest extends ApigeeEdgeFunctionalTestBase {
     $this->assertSession()->fieldValueEquals('callbackUrl[0][value]', $callback_url);
     $this->drupalGet($app_edit_form_for_developer_url);
     $this->assertSession()->fieldValueEquals('callbackUrl[0][value]', $callback_url);
+    $this->drupalGet(Url::fromRoute('entity.entity_view_display.developer_app.default'));
 
-    $this->drupalPostForm(Url::fromRoute('entity.entity_view_display.developer_app.default'), ['fields[callbackUrl][region]' => 'hidden'], 'Save');
-    $this->drupalPostForm(Url::fromRoute('entity.entity_form_display.developer_app.default'), ['fields[callbackUrl][region]' => 'hidden'], 'Save');
+    $this->submitForm(['fields[callbackUrl][region]' => 'hidden'], 'Save');
+    $this->drupalGet(Url::fromRoute('entity.entity_form_display.developer_app.default'));
+    $this->submitForm(['fields[callbackUrl][region]' => 'hidden'], 'Save');
 
     $this->drupalGet($app_view_url);
     $this->assertSession()->pageTextNotContains($callback_url_warning_msg);
diff --git a/tests/src/Functional/DeveloperAppUITestTrait.php b/tests/src/Functional/DeveloperAppUITestTrait.php
index 60c6022..91b8665 100644
--- a/tests/src/Functional/DeveloperAppUITestTrait.php
+++ b/tests/src/Functional/DeveloperAppUITestTrait.php
@@ -99,7 +99,8 @@ trait DeveloperAppUITestTrait {
     $this->config('apigee_edge.common_app_settings')
       ->set('multiple_products', $multiple_products)
       ->save();
-    $this->drupalPostForm($url, $data, 'Save configuration');
+    $this->drupalGet($url);
+    $this->submitForm($data, 'Save configuration');
   }
 
   /**
@@ -114,15 +115,12 @@ trait DeveloperAppUITestTrait {
     if ($account === NULL) {
       $account = $this->account;
     }
+    $this->drupalGet(Url::fromRoute(
+      'entity.developer_app.add_form_for_developer', [
+        'user' => $account->id(),
+      ]));
 
-    $this->drupalPostForm(
-      Url::fromRoute(
-        'entity.developer_app.add_form_for_developer', [
-          'user' => $account->id(),
-        ]),
-      $data,
-      'Add app'
-    );
+    $this->submitForm($data, 'Add app');
   }
 
   /**
@@ -139,8 +137,9 @@ trait DeveloperAppUITestTrait {
     if ($account === NULL) {
       $account = $this->account;
     }
+    $this->drupalGet("/user/{$account->id()}/apps/{$app_name}/edit");
 
-    $this->drupalPostForm("/user/{$account->id()}/apps/{$app_name}/edit", $data, 'Save');
+    $this->submitForm($data, 'Save');
   }
 
   /**
diff --git a/tests/src/Functional/DeveloperSyncTest.php b/tests/src/Functional/DeveloperSyncTest.php
index 41fd7fc..6629836 100644
--- a/tests/src/Functional/DeveloperSyncTest.php
+++ b/tests/src/Functional/DeveloperSyncTest.php
@@ -131,7 +131,7 @@ class DeveloperSyncTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalPlaceBlock('system_breadcrumb_block');
@@ -439,7 +439,7 @@ class DeveloperSyncTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $developers_to_delete = array_merge($this->edgeDevelopers, $this->drupalUsers, $this->modifiedEdgeDevelopers, $this->modifiedDrupalUsers);
     foreach ($developers_to_delete as $email => $entity) {
       try {
diff --git a/tests/src/Functional/DeveloperTest.php b/tests/src/Functional/DeveloperTest.php
index d301b81..29651b0 100644
--- a/tests/src/Functional/DeveloperTest.php
+++ b/tests/src/Functional/DeveloperTest.php
@@ -94,7 +94,7 @@ class DeveloperTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Allow visitor account creation with administrative approval.
     $user_settings = $this->config('user.settings');
@@ -106,7 +106,7 @@ class DeveloperTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $this->stack->reset();
     try {
       if ($this->developer !== NULL) {
@@ -177,7 +177,8 @@ class DeveloperTest extends ApigeeEdgeFunctionalTestBase {
 
     // Try to register with incorrect API credentials.
     $this->invalidateKey();
-    $this->drupalPostForm(Url::fromRoute('user.register'), $formdata, 'Create new account');
+    $this->drupalGet(Url::fromRoute('user.register'));
+    $this->submitForm($formdata, 'Create new account');
     $this->assertSession()->pageTextContains(self::USER_REGISTRATION_UNAVAILABLE);
 
     // Try to register with correct API credentials.
@@ -204,8 +205,9 @@ class DeveloperTest extends ApigeeEdgeFunctionalTestBase {
     $this->stack->queueMockResponse('get_not_found');
     $this->stack->queueMockResponse('get_not_found');
     $this->queueDeveloperResponse($account, 201);
+    $this->drupalGet(Url::fromRoute('user.register'));
 
-    $this->drupalPostForm(Url::fromRoute('user.register'), $formdata, 'Create new account');
+    $this->submitForm($formdata, 'Create new account');
 
     /** @var \Drupal\user\Entity\User $account */
     $account = user_load_by_mail($test_user['email']);
@@ -223,10 +225,11 @@ class DeveloperTest extends ApigeeEdgeFunctionalTestBase {
     $this->assertEquals($this->developerRegistered->getStatus(), DeveloperInterface::STATUS_INACTIVE);
 
     // Attribute is set by mock twig template.
-    $this->assertEqual($this->developerRegistered->getAttributeValue('IS_MOCK_CLIENT'), !$this->integration_enabled);
+    $this->assertEquals($this->developerRegistered->getAttributeValue('IS_MOCK_CLIENT'), !$this->integration_enabled);
 
     $this->drupalLogin($this->rootUser);
-    $this->drupalPostForm(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]), ['status' => '1'], 'Save');
+    $this->drupalGet(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]));
+    $this->submitForm(['status' => '1'], 'Save');
 
     // Ensure status change was saved.
     $this->entityTypeManager->getStorage('user')->resetCache();
@@ -259,7 +262,7 @@ class DeveloperTest extends ApigeeEdgeFunctionalTestBase {
       'first_name' => $this->getRandomGenerator()->word(16),
       'last_name' => $this->getRandomGenerator()->word(16),
       'username' => $this->randomMachineName(),
-      'password' => user_password(),
+      'password' => \Drupal::service('password_generator')->generate(),
       'status' => '0',
     ];
 
@@ -275,7 +278,8 @@ class DeveloperTest extends ApigeeEdgeFunctionalTestBase {
 
     // Try to register with incorrect API credentials.
     $this->invalidateKey();
-    $this->drupalPostForm(Url::fromRoute('user.admin_create'), $formdata, 'Create new account');
+    $this->drupalGet(Url::fromRoute('user.admin_create'));
+    $this->submitForm($formdata, 'Create new account');
     $this->assertSession()->pageTextContains(self::USER_REGISTRATION_UNAVAILABLE);
 
     // Try to register with correct API credentials.
@@ -296,8 +300,9 @@ class DeveloperTest extends ApigeeEdgeFunctionalTestBase {
     $this->stack->queueMockResponse('get_not_found');
     $this->stack->queueMockResponse('get_not_found');
     $this->queueDeveloperResponse($account, 201);
+    $this->drupalGet(Url::fromRoute('user.admin_create'));
 
-    $this->drupalPostForm(Url::fromRoute('user.admin_create'), $formdata, 'Create new account');
+    $this->submitForm($formdata, 'Create new account');
 
     /** @var \Drupal\user\Entity\User $account */
     $account = user_load_by_mail($test_user['email']);
@@ -324,8 +329,9 @@ class DeveloperTest extends ApigeeEdgeFunctionalTestBase {
     $formdata['first_name[0][value]'] = $test_user['first_name'];
     $formdata['last_name[0][value]'] = $test_user['last_name'];
     $formdata['status'] = $test_user['status'];
+    $this->drupalGet(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]));
 
-    $this->drupalPostForm(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]), $formdata, 'Save');
+    $this->submitForm($formdata, 'Save');
 
     // Flush user entity cache to ensure the updated user gets loaded.
     // (Especially in apigee_edge_developer_app_storage_load().)
@@ -372,13 +378,15 @@ class DeveloperTest extends ApigeeEdgeFunctionalTestBase {
       'pass[pass2]' => $test_user['password'],
       'status' => $test_user['status'],
     ];
+    $this->drupalGet(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]));
 
-    $this->drupalPostForm(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]), $formdata, 'Save');
+    $this->submitForm($formdata, 'Save');
 
     $formdata = [
       'user_cancel_method' => 'user_cancel_block',
     ];
-    $this->drupalPostForm($account->toUrl('cancel-form')->toString(), $formdata, 'Cancel account');
+    $this->drupalGet($account->toUrl('cancel-form')->toString());
+    $this->submitForm($formdata, 'Cancel account');
 
     $this->developerCreatedByAdmin = $this->developerStorage->load($test_user['email']);
     $this->assertNotEmpty($this->developerCreatedByAdmin);
@@ -395,12 +403,14 @@ class DeveloperTest extends ApigeeEdgeFunctionalTestBase {
       'pass[pass2]' => $test_user['password'],
       'status' => $test_user['status'],
     ];
-    $this->drupalPostForm(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]), $formdata, 'Save');
+    $this->drupalGet(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]));
+    $this->submitForm($formdata, 'Save');
 
     $formdata = [
       'user_cancel_method' => 'user_cancel_block_unpublish',
     ];
-    $this->drupalPostForm($account->toUrl('cancel-form')->toString(), $formdata, 'Cancel account');
+    $this->drupalGet($account->toUrl('cancel-form')->toString());
+    $this->submitForm($formdata, 'Cancel account');
 
     $this->developerCreatedByAdmin = $this->developerStorage->load($test_user['email']);
     $this->assertNotEmpty($this->developerCreatedByAdmin);
@@ -410,7 +420,8 @@ class DeveloperTest extends ApigeeEdgeFunctionalTestBase {
     $formdata = [
       'user_cancel_method' => 'user_cancel_delete',
     ];
-    $this->drupalPostForm($account->toUrl('cancel-form')->toString(), $formdata, 'Cancel account');
+    $this->drupalGet($account->toUrl('cancel-form')->toString());
+    $this->submitForm($formdata, 'Cancel account');
 
     // Ensure that entity static cache is also invalidated in this scope
     // too.
diff --git a/tests/src/Functional/EmailTest.php b/tests/src/Functional/EmailTest.php
index 9f32337..0d3467c 100644
--- a/tests/src/Functional/EmailTest.php
+++ b/tests/src/Functional/EmailTest.php
@@ -49,7 +49,7 @@ class EmailTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     try {
       if ($this->developer !== NULL) {
 
@@ -101,15 +101,17 @@ class EmailTest extends ApigeeEdgeFunctionalTestBase {
 
     // Stack developer response.
     $this->queueDeveloperResponseFromDeveloper($this->developer);
+    $this->drupalGet(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]));
 
-    $this->drupalPostForm(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]), [
+    $this->submitForm([
       'mail' => $this->developer->getEmail(),
       'current_pass' => $account->passRaw,
     ], 'Save');
     $this->assertSession()->pageTextContains('This email address already exists in our system. You can register a new account if you would like to use it on the Developer Portal.');
 
     $this->drupalLogin($this->rootUser);
-    $this->drupalPostForm(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]), [
+    $this->drupalGet(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]));
+    $this->submitForm([
       'mail' => $this->developer->getEmail(),
     ], 'Save');
     $this->assertSession()->pageTextContains('This email address already belongs to a developer on Apigee Edge.');
@@ -131,25 +133,29 @@ class EmailTest extends ApigeeEdgeFunctionalTestBase {
     // Display only an error message to the user.
     $this->drupalLogin($this->rootUser);
     $error_message = trim($this->getRandomGenerator()->paragraphs(1));
-    $this->drupalPostForm($developer_settings_path, [
+    $this->drupalGet($developer_settings_path);
+    $this->submitForm([
       'verification_action' => DeveloperSettingsForm::VERIFICATION_ACTION_DISPLAY_ERROR_ONLY,
       'display_only_error_message_content[value]' => $error_message,
     ], 'Save configuration');
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $this->drupalLogout();
+    $this->drupalGet($user_register_path);
 
-    $this->drupalPostForm($user_register_path, $edit, 'Create new account');
+    $this->submitForm($edit, 'Create new account');
     $this->assertSession()->pageTextContains($error_message);
 
     // Display an error message and send a verification email to the user.
     $this->drupalLogin($this->rootUser);
-    $this->drupalPostForm($developer_settings_path, [
+    $this->drupalGet($developer_settings_path);
+    $this->submitForm([
       'verification_action' => DeveloperSettingsForm::VERIFICATION_ACTION_VERIFY_EMAIL,
     ], 'Save configuration');
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $this->drupalLogout();
+    $this->drupalGet($user_register_path);
 
-    $this->drupalPostForm($user_register_path, $edit, 'Create new account');
+    $this->submitForm($edit, 'Create new account');
     $this->assertSession()->pageTextContains("This email address already exists in our system. We have sent you an verification email to {$this->developer->getEmail()}.");
 
     $this->assertMail('id', 'apigee_edge_developer_email_verification');
@@ -159,8 +165,9 @@ class EmailTest extends ApigeeEdgeFunctionalTestBase {
     $matches = [];
     preg_match('%https?://[^/]+/user/register\?[^/\s]+%', $mail['body'], $matches);
     $link = $matches[0];
+    $this->drupalGet($link);
 
-    $this->drupalPostForm($link, $edit, 'Create new account');
+    $this->submitForm($edit, 'Create new account');
     $this->assertSession()->pageTextContains('A welcome message with further instructions has been sent to your email address.');
   }
 
diff --git a/tests/src/Functional/ErrorHandlerTest.php b/tests/src/Functional/ErrorHandlerTest.php
index c4684bd..9417311 100644
--- a/tests/src/Functional/ErrorHandlerTest.php
+++ b/tests/src/Functional/ErrorHandlerTest.php
@@ -51,7 +51,7 @@ class ErrorHandlerTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->prefix = $this->randomMachineName();
@@ -71,7 +71,8 @@ class ErrorHandlerTest extends ApigeeEdgeFunctionalTestBase {
   public function testErrorPages() {
     $this->drupalLogin($this->rootUser);
     $errorPageTitle = $this->getRandomGenerator()->word(16);
-    $this->drupalPostForm(Url::fromRoute('apigee_edge.settings.error_page'), [
+    $this->drupalGet(Url::fromRoute('apigee_edge.settings.error_page'));
+    $this->submitForm([
       'error_page_title' => $errorPageTitle,
     ], 'Save configuration');
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
diff --git a/tests/src/Functional/QueryTest.php b/tests/src/Functional/QueryTest.php
index b8c1a48..15a2b7e 100644
--- a/tests/src/Functional/QueryTest.php
+++ b/tests/src/Functional/QueryTest.php
@@ -88,7 +88,7 @@ class QueryTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->developerStorage = $this->container->get('entity_type.manager')->getStorage('developer');
     $this->developerAppStorage = $this->container->get('entity_type.manager')->getStorage('developer_app');
@@ -106,7 +106,7 @@ class QueryTest extends ApigeeEdgeFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     foreach ($this->edgeDevelopers as $developer) {
       try {
         if ($developer !== NULL) {
diff --git a/tests/src/FunctionalJavascript/ApiProductAccessTest.php b/tests/src/FunctionalJavascript/ApiProductAccessTest.php
index 843be3b..b0ede6e 100644
--- a/tests/src/FunctionalJavascript/ApiProductAccessTest.php
+++ b/tests/src/FunctionalJavascript/ApiProductAccessTest.php
@@ -96,7 +96,7 @@ class ApiProductAccessTest extends ApigeeEdgeFunctionalJavascriptTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->roleStorage = $this->container->get('entity_type.manager')->getStorage('user_role');
@@ -130,7 +130,7 @@ class ApiProductAccessTest extends ApigeeEdgeFunctionalJavascriptTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     /** @var \Drupal\Core\Entity\EntityInterface[] $entities */
     $entities = array_merge($this->users, $this->apiProducts);
     foreach ($entities as $entity) {
diff --git a/tests/src/FunctionalJavascript/ApigeeEdgeFunctionalJavascriptTestBase.php b/tests/src/FunctionalJavascript/ApigeeEdgeFunctionalJavascriptTestBase.php
index d3c553f..b6131e2 100644
--- a/tests/src/FunctionalJavascript/ApigeeEdgeFunctionalJavascriptTestBase.php
+++ b/tests/src/FunctionalJavascript/ApigeeEdgeFunctionalJavascriptTestBase.php
@@ -39,7 +39,7 @@ abstract class ApigeeEdgeFunctionalJavascriptTestBase extends WebDriverTestBase
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->initTestEnv();
   }
diff --git a/tests/src/FunctionalJavascript/AppSettingsFormTest.php b/tests/src/FunctionalJavascript/AppSettingsFormTest.php
index b746c0f..0b10b9b 100644
--- a/tests/src/FunctionalJavascript/AppSettingsFormTest.php
+++ b/tests/src/FunctionalJavascript/AppSettingsFormTest.php
@@ -40,7 +40,7 @@ class AppSettingsFormTest extends ApigeeEdgeFunctionalJavascriptTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->defaultApiProduct = $this->createProduct();
   }
@@ -48,7 +48,7 @@ class AppSettingsFormTest extends ApigeeEdgeFunctionalJavascriptTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     try {
       $this->defaultApiProduct->delete();
     }
diff --git a/tests/src/FunctionalJavascript/CacheTest.php b/tests/src/FunctionalJavascript/CacheTest.php
index 232b07d..187d6a6 100644
--- a/tests/src/FunctionalJavascript/CacheTest.php
+++ b/tests/src/FunctionalJavascript/CacheTest.php
@@ -65,7 +65,7 @@ class CacheTest extends ApigeeEdgeFunctionalJavascriptTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->account = $this->createAccount([
       'create developer_app',
@@ -92,7 +92,7 @@ class CacheTest extends ApigeeEdgeFunctionalJavascriptTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     if ($this->developer !== NULL) {
       try {
         $this->developer->delete();
@@ -208,7 +208,8 @@ class CacheTest extends ApigeeEdgeFunctionalJavascriptTestBase {
       "values:developer_app:{$this->developerApp->id()}",
       "app_names:developer_app:{$this->developer->uuid()}:{$this->developerApp->getName()}",
     ], function () {
-      $this->drupalPostForm(Url::fromRoute('entity.user.edit_form', ['user' => $this->account->id()]), [
+      $this->drupalGet(Url::fromRoute('entity.user.edit_form', ['user' => $this->account->id()]));
+      $this->submitForm([
         'first_name[0][value]' => $this->randomMachineName(),
         'last_name[0][value]' => $this->randomMachineName(),
       ], 'Save');
diff --git a/tests/src/FunctionalJavascript/DeveloperAppUITest.php b/tests/src/FunctionalJavascript/DeveloperAppUITest.php
index b67ea8f..7000cd9 100644
--- a/tests/src/FunctionalJavascript/DeveloperAppUITest.php
+++ b/tests/src/FunctionalJavascript/DeveloperAppUITest.php
@@ -36,7 +36,7 @@ class DeveloperAppUITest extends ApigeeEdgeFunctionalJavascriptTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->products[] = $this->createProduct();
     $this->account = $this->createAccount(static::$permissions);
@@ -46,7 +46,7 @@ class DeveloperAppUITest extends ApigeeEdgeFunctionalJavascriptTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     try {
       if ($this->account !== NULL) {
         $this->account->delete();
@@ -94,18 +94,21 @@ class DeveloperAppUITest extends ApigeeEdgeFunctionalJavascriptTestBase {
     $app_edit_url = $app->toUrl('edit-form-for-developer');
 
     $this->drupalGet($app_edit_url);
-    $this->drupalPostForm($app_edit_url, [], 'Save');
+    $this->drupalGet($app_edit_url);
+    $this->submitForm([], 'Save');
     $this->createScreenshot('DeveloperAppUITest-' . __FUNCTION__);
     $this->assertFalse($isValidInput());
     $checkValidationMessage('Please enter a URL.');
-    $this->drupalPostForm($app_edit_url, ['callbackUrl[0][value]' => 'http://example.com'], 'Save');
+    $this->drupalGet($app_edit_url);
+    $this->submitForm(['callbackUrl[0][value]' => 'http://example.com'], 'Save');
     $this->createScreenshot('DeveloperAppUITest-' . __FUNCTION__);
     $this->assertFalse($isValidInput());
     // The format in Firefox is different, it is only one line:
     // "Please match the requested format: {$pattern_description}.".
     $checkValidationMessage('Please match the requested format.');
     $this->assertEquals($pattern_error_message, $this->getSession()->evaluateScript('document.getElementById("edit-callbackurl-0-value").title'));
-    $this->drupalPostForm($app_edit_url, ['callbackUrl[0][value]' => 'https://example.com'], 'Save');
+    $this->drupalGet($app_edit_url);
+    $this->submitForm(['callbackUrl[0][value]' => 'https://example.com'], 'Save');
     $this->assertSession()->pageTextContains('App has been successfully updated.');
     $this->assertSession()->pageTextContains('https://example.com');
   }
diff --git a/tests/src/FunctionalJavascript/Form/AuthenticationFormJsTest.php b/tests/src/FunctionalJavascript/Form/AuthenticationFormJsTest.php
index c9b2431..ceeff47 100644
--- a/tests/src/FunctionalJavascript/Form/AuthenticationFormJsTest.php
+++ b/tests/src/FunctionalJavascript/Form/AuthenticationFormJsTest.php
@@ -84,7 +84,7 @@ class AuthenticationFormJsTest extends ApigeeEdgeFunctionalJavascriptTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Save valid credentials for later use.
     /** @var \Drupal\apigee_edge\Plugin\EdgeKeyTypeInterface $test_key_type */
@@ -329,7 +329,7 @@ class AuthenticationFormJsTest extends ApigeeEdgeFunctionalJavascriptTestBase {
     $web_assert->elementNotExists('css', 'details[data-drupal-selector="edit-debug"]');
     // Make sure the token file has not been left behind.
     $token_file_path = $this->container->get('file_system')->realpath(OauthTokenFileStorage::DEFAULT_DIRECTORY . '/oauth.dat');
-    $this->assertFileNotExists($token_file_path);
+    $this->assertFileDoesNotExist($token_file_path);
 
     // Switch back to basic auth.
     $this->cssSelect('select[name="key_input_settings[auth_type]"]')[0]->setValue('basic');
diff --git a/tests/src/Kernel/Entity/AppWarningsCheckerTest.php b/tests/src/Kernel/Entity/AppWarningsCheckerTest.php
index b0c7479..2e6b384 100644
--- a/tests/src/Kernel/Entity/AppWarningsCheckerTest.php
+++ b/tests/src/Kernel/Entity/AppWarningsCheckerTest.php
@@ -128,7 +128,7 @@ class AppWarningsCheckerTest extends KernelTestBase {
    *
    * @throws \Exception
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('user');
@@ -214,7 +214,7 @@ class AppWarningsCheckerTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $this->stack->reset();
     try {
       if ($this->account) {
@@ -375,7 +375,7 @@ class AppWarningsCheckerTest extends KernelTestBase {
     // One warning for approved app with all credentials revoked.
     $warnings = array_filter($app_warnings_checker->getWarnings($this->approvedAppWithAllRevokedCredential));
     $this->assertCount(1, $warnings);
-    $this->assertEqual('No valid credentials associated with this app.', (string) $warnings['revokedCred']);
+    $this->assertEquals('No valid credentials associated with this app.', (string) $warnings['revokedCred']);
 
     // No warnings to revoked app with revoked credentials.
     $this->assertEmpty(array_filter($app_warnings_checker->getWarnings($this->revokedAppWithRevokedCredential)));
@@ -383,12 +383,12 @@ class AppWarningsCheckerTest extends KernelTestBase {
     // One warning for approved app with expired credentials.
     $warnings = array_filter($app_warnings_checker->getWarnings($this->approvedAppWithExpiredCredential));
     $this->assertCount(1, $warnings);
-    $this->assertEqual('At least one of the credentials associated with this app is expired.', (string) $warnings['expiredCred']);
+    $this->assertEquals('At least one of the credentials associated with this app is expired.', (string) $warnings['expiredCred']);
 
     // One warning for revoked app with expired credentials.
     $warnings = array_filter($app_warnings_checker->getWarnings($this->revokedAppWithExpiredCredential));
     $this->assertCount(1, $warnings);
-    $this->assertEqual('At least one of the credentials associated with this app is expired.', (string) $warnings['expiredCred']);
+    $this->assertEquals('At least one of the credentials associated with this app is expired.', (string) $warnings['expiredCred']);
   }
 
 }
diff --git a/tests/src/Kernel/Entity/ListBuilder/AppListBuilderTest.php b/tests/src/Kernel/Entity/ListBuilder/AppListBuilderTest.php
index e81268f..f92830c 100644
--- a/tests/src/Kernel/Entity/ListBuilder/AppListBuilderTest.php
+++ b/tests/src/Kernel/Entity/ListBuilder/AppListBuilderTest.php
@@ -130,7 +130,7 @@ class AppListBuilderTest extends KernelTestBase {
    *
    * @throws \Exception
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('user');
@@ -216,7 +216,7 @@ class AppListBuilderTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $this->stack->reset();
     try {
       if ($this->account) {
@@ -368,7 +368,7 @@ class AppListBuilderTest extends KernelTestBase {
     // One warning for approved app with all credentials revoked.
     $warnings = $build['table']['#rows'][$this->getStatusRowKey($this->approvedAppWithAllRevokedCredential)]['data'];
     $this->assertCount(1, $warnings);
-    $this->assertEqual('No valid credentials associated with this app.', (string) $warnings['info']['data']['#items'][0]);
+    $this->assertEquals('No valid credentials associated with this app.', (string) $warnings['info']['data']['#items'][0]);
 
     // No warnings to revoked app with revoked credentials.
     $this->assertEmpty($build['table']['#rows'][$this->getStatusRowKey($this->revokedAppWithRevokedCredential)]['data']);
@@ -376,7 +376,7 @@ class AppListBuilderTest extends KernelTestBase {
     // One warning for approved app with expired credentials.
     $warnings = $build['table']['#rows'][$this->getStatusRowKey($this->approvedAppWithExpiredCredential)]['data'];
     $this->assertCount(1, $warnings);
-    $this->assertEqual('At least one of the credentials associated with this app is expired.', (string) $warnings['info']['data']['#items'][0]);
+    $this->assertEquals('At least one of the credentials associated with this app is expired.', (string) $warnings['info']['data']['#items'][0]);
 
     // No warnings for revoked app with expired credentials.
     // Note: \Drupal\apigee_edge\Entity\AppWarningsChecker::getWarnings will
diff --git a/tests/src/Kernel/Entity/ListBuilder/EntityListBuilderTest.php b/tests/src/Kernel/Entity/ListBuilder/EntityListBuilderTest.php
index 4a71397..caa3ef7 100644
--- a/tests/src/Kernel/Entity/ListBuilder/EntityListBuilderTest.php
+++ b/tests/src/Kernel/Entity/ListBuilder/EntityListBuilderTest.php
@@ -82,7 +82,7 @@ class EntityListBuilderTest extends KernelTestBase {
    *
    * @throws \Exception
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('user');
@@ -105,7 +105,7 @@ class EntityListBuilderTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $this->stack->reset();
     try {
       if ($this->account) {
@@ -187,7 +187,7 @@ class EntityListBuilderTest extends KernelTestBase {
     $this->queueDeveloperResponse($this->account);
     /** @var \Drupal\Core\Render\HtmlResponse $response */
     $response = $this->container->get('http_kernel')->handle($request);
-    $this->assertEqual($response->getCacheableMetadata()->getCacheMaxAge(), 900);
+    $this->assertEquals($response->getCacheableMetadata()->getCacheMaxAge(), 900);
 
     // Update the config.
     $config = $this->config('apigee_edge.' . static::ENTITY_TYPE . '_settings');
@@ -202,7 +202,7 @@ class EntityListBuilderTest extends KernelTestBase {
     $this->queueDeveloperResponse($this->account);
     /** @var \Drupal\Core\Render\HtmlResponse $response */
     $response = $this->container->get('http_kernel')->handle($request);
-    $this->assertEqual($response->getCacheableMetadata()->getCacheMaxAge(), 100);
+    $this->assertEquals($response->getCacheableMetadata()->getCacheMaxAge(), 100);
   }
 
 }
diff --git a/tests/src/Kernel/EntityControllerCacheTest.php b/tests/src/Kernel/EntityControllerCacheTest.php
index 2f5125b..8644589 100644
--- a/tests/src/Kernel/EntityControllerCacheTest.php
+++ b/tests/src/Kernel/EntityControllerCacheTest.php
@@ -55,7 +55,7 @@ class EntityControllerCacheTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
   }
diff --git a/tests/src/Kernel/MockIntegrationToggleKernelTest.php b/tests/src/Kernel/MockIntegrationToggleKernelTest.php
index 29ba624..9d4a98f 100644
--- a/tests/src/Kernel/MockIntegrationToggleKernelTest.php
+++ b/tests/src/Kernel/MockIntegrationToggleKernelTest.php
@@ -56,7 +56,7 @@ class MockIntegrationToggleKernelTest extends KernelTestBase {
    *
    * @throws \Exception
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installConfig(['apigee_edge']);
diff --git a/tests/src/Kernel/OauthTokenFileStorageTest.php b/tests/src/Kernel/OauthTokenFileStorageTest.php
index 8dc8c49..73b9272 100644
--- a/tests/src/Kernel/OauthTokenFileStorageTest.php
+++ b/tests/src/Kernel/OauthTokenFileStorageTest.php
@@ -63,7 +63,7 @@ class OauthTokenFileStorageTest extends KernelTestBase {
    *
    * @throws \Exception
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->testTokenData = [
diff --git a/tests/src/Kernel/TestFrameworkKernelTest.php b/tests/src/Kernel/TestFrameworkKernelTest.php
index 51b5ec1..9705bf7 100644
--- a/tests/src/Kernel/TestFrameworkKernelTest.php
+++ b/tests/src/Kernel/TestFrameworkKernelTest.php
@@ -71,7 +71,7 @@ class TestFrameworkKernelTest extends KernelTestBase {
    *
    * @throws \Exception
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installConfig(['apigee_edge']);
@@ -129,7 +129,7 @@ class TestFrameworkKernelTest extends KernelTestBase {
     $org_controller = $this->container->get('apigee_edge.controller.organization');
     $org = $org_controller->load($org_name);
 
-    $this->assertEqual($org->getName(), $org_name);
+    $this->assertEquals($org->getName(), $org_name);
   }
 
   /**
@@ -157,9 +157,9 @@ class TestFrameworkKernelTest extends KernelTestBase {
     /** @var \Drupal\apigee_edge\Entity\Developer $developer */
     $developer = $developerStorage->load($test_user['mail']);
 
-    $this->assertEqual($developer->getEmail(), $test_user['mail']);
+    $this->assertEquals($developer->getEmail(), $test_user['mail']);
     // Attribute is set by mock twig template.
-    $this->assertEqual($developer->getAttributeValue('IS_MOCK_CLIENT'), 1);
+    $this->assertEquals($developer->getAttributeValue('IS_MOCK_CLIENT'), 1);
   }
 
   /**
@@ -201,7 +201,7 @@ class TestFrameworkKernelTest extends KernelTestBase {
     $this->queueDeveloperResponseFromDeveloper($developer);
     $loaded_developer = $developerStorage->load($developer->getEmail());
     $this->assertInstanceOf(Developer::class, $loaded_developer);
-    $this->assertEqual($loaded_developer->getEmail(), $developer->getEmail());
+    $this->assertEquals($loaded_developer->getEmail(), $developer->getEmail());
 
     // This line is what actually tests that the mock is not used since the mock template sets this attribute.
     $this->assertEmpty($developer->getAttributeValue('IS_MOCK_CLIENT'));
@@ -260,15 +260,15 @@ class TestFrameworkKernelTest extends KernelTestBase {
     /** @var \Drupal\apigee_edge\Entity\Developer $developer */
     $developer = $developerStorage->load($test_user['mail']);
 
-    $this->assertEqual($developer->getEmail(), $test_user['mail']);
+    $this->assertEquals($developer->getEmail(), $test_user['mail']);
     // Attribute is set by mock twig template.
-    $this->assertEqual($developer->getAttributeValue('IS_MOCK_CLIENT'), 1);
+    $this->assertEquals($developer->getAttributeValue('IS_MOCK_CLIENT'), 1);
   }
 
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     if ($this->integration_enabled && !empty($this->developers)) {
       foreach ($this->developers as $developer) {
         $developer->delete();
diff --git a/tests/src/Kernel/UserCreateTest.php b/tests/src/Kernel/UserCreateTest.php
index 7a409c7..15fdb5b 100644
--- a/tests/src/Kernel/UserCreateTest.php
+++ b/tests/src/Kernel/UserCreateTest.php
@@ -61,7 +61,7 @@ class UserCreateTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('system', ['sequences']);
@@ -74,7 +74,7 @@ class UserCreateTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $this->stack->reset();
     try {
       if ($this->account) {
diff --git a/tests/src/Kernel/Util/ApigeeEdgeManagementCliServiceTest.php b/tests/src/Kernel/Util/ApigeeEdgeManagementCliServiceTest.php
index d39871d..15cca9a 100644
--- a/tests/src/Kernel/Util/ApigeeEdgeManagementCliServiceTest.php
+++ b/tests/src/Kernel/Util/ApigeeEdgeManagementCliServiceTest.php
@@ -98,7 +98,7 @@ class ApigeeEdgeManagementCliServiceTest extends KernelTestBase implements Servi
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('system', ['sequences']);
@@ -133,7 +133,7 @@ class ApigeeEdgeManagementCliServiceTest extends KernelTestBase implements Servi
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $url = $this->endpoint . '/o/' . $this->organization . '/userroles/' . self::TEST_ROLE_NAME;
     try {
       $this->stack->queueMockResponse('get_not_found');
diff --git a/tests/src/Traits/ApigeeEdgeFunctionalTestTrait.php b/tests/src/Traits/ApigeeEdgeFunctionalTestTrait.php
index 4b45a91..f81cd91 100644
--- a/tests/src/Traits/ApigeeEdgeFunctionalTestTrait.php
+++ b/tests/src/Traits/ApigeeEdgeFunctionalTestTrait.php
@@ -100,7 +100,7 @@ trait ApigeeEdgeFunctionalTestTrait {
       'first_name' => $this->randomMachineName(),
       'last_name' => $this->randomMachineName(),
       'name' => $this->randomMachineName(),
-      'pass' => user_password(),
+      'pass' => \Drupal::service('password_generator')->generate(),
       'status' => $status,
     ];
     if ($rid) {
diff --git a/tests/src/Traits/EntityUtilsTrait.php b/tests/src/Traits/EntityUtilsTrait.php
index 4f16a1f..5b4c6dc 100644
--- a/tests/src/Traits/EntityUtilsTrait.php
+++ b/tests/src/Traits/EntityUtilsTrait.php
@@ -37,7 +37,8 @@ trait EntityUtilsTrait {
   protected function changeEntityAliasesAndValidate(string $entity_type_id, string $entity_settings_route_name) {
     $singular = $this->getRandomGenerator()->word(8);
     $plural = $this->getRandomGenerator()->word(8);
-    $this->drupalPostForm(Url::fromRoute($entity_settings_route_name), [
+    $this->drupalGet(Url::fromRoute($entity_settings_route_name));
+    $this->submitForm([
       'entity_label_singular' => $singular,
       'entity_label_plural' => $plural,
     ], 'Save configuration');
diff --git a/tests/src/Unit/Command/CreateEdgeRoleCommandTest.php b/tests/src/Unit/Command/CreateEdgeRoleCommandTest.php
index 5e8cb72..a043a97 100644
--- a/tests/src/Unit/Command/CreateEdgeRoleCommandTest.php
+++ b/tests/src/Unit/Command/CreateEdgeRoleCommandTest.php
@@ -19,6 +19,7 @@
 
 namespace Drupal\Tests\apigee_edge\Unit\Command {
 
+  use Prophecy\PhpUnit\ProphecyTrait;
   use Drupal\apigee_edge\CliServiceInterface;
   use Drupal\apigee_edge\Command\CreateEdgeRoleCommand;
   use Drupal\Console\Core\Style\DrupalStyle;
@@ -37,6 +38,7 @@ namespace Drupal\Tests\apigee_edge\Unit\Command {
    */
   class CreateEdgeRoleCommandTest extends UnitTestCase {
 
+    use ProphecyTrait;
     /**
      * The system under test.
      *
@@ -96,7 +98,7 @@ namespace Drupal\Tests\apigee_edge\Unit\Command {
     /**
      * {@inheritdoc}
      */
-    protected function setUp() {
+    protected function setUp(): void {
       if (!class_exists('Drupal\Console\Core\Command\Command')) {
         $this->markTestSkipped('Skipping because Drupal Console is not installed.');
       }
diff --git a/tests/src/Unit/Command/Util/ApigeeEdgeManagementCliServiceTest.php b/tests/src/Unit/Command/Util/ApigeeEdgeManagementCliServiceTest.php
index 6d05e40..f7e85eb 100644
--- a/tests/src/Unit/Command/Util/ApigeeEdgeManagementCliServiceTest.php
+++ b/tests/src/Unit/Command/Util/ApigeeEdgeManagementCliServiceTest.php
@@ -19,6 +19,7 @@
 
 namespace Drupal\Tests\apigee_edge\Unit\Command\Util;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Apigee\Edge\ClientInterface as ApigeeClientInterface;
 use Drupal\apigee_edge\Command\Util\ApigeeEdgeManagementCliService;
 use Drupal\apigee_edge\Command\Util\ApigeeEdgeManagementCliServiceInterface;
@@ -40,6 +41,7 @@ use Symfony\Component\Console\Style\StyleInterface;
  */
 class ApigeeEdgeManagementCliServiceTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Test base url.
    *
@@ -85,7 +87,7 @@ class ApigeeEdgeManagementCliServiceTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->httpClient = $this->prophesize(Client::class);
   }
diff --git a/tests/src/Unit/Commands/ApigeeEdgeCommandsTest.php b/tests/src/Unit/Commands/ApigeeEdgeCommandsTest.php
index 84653a0..7a505ea 100644
--- a/tests/src/Unit/Commands/ApigeeEdgeCommandsTest.php
+++ b/tests/src/Unit/Commands/ApigeeEdgeCommandsTest.php
@@ -19,6 +19,7 @@
 
 namespace Drupal\Tests\apigee_edge\Unit\Commands {
 
+  use Prophecy\PhpUnit\ProphecyTrait;
   use Consolidation\AnnotatedCommand\CommandData;
   use Drupal\apigee_edge\CliServiceInterface;
   use Drupal\apigee_edge\Commands\ApigeeEdgeCommands;
@@ -35,6 +36,7 @@ namespace Drupal\Tests\apigee_edge\Unit\Commands {
    */
   class ApigeeEdgeCommandsTest extends UnitTestCase {
 
+    use ProphecyTrait;
     /**
      * The system under test.
      *
@@ -59,7 +61,7 @@ namespace Drupal\Tests\apigee_edge\Unit\Commands {
     /**
      * {@inheritdoc}
      */
-    protected function setUp() {
+    protected function setUp(): void {
       parent::setUp();
       $this->cliService = $this->prophesize(CliServiceInterface::class);
       $this->apigeeEdgeCommands = new ApigeeEdgeCommands($this->cliService->reveal());
diff --git a/tests/src/Unit/ConditionTest.php b/tests/src/Unit/ConditionTest.php
index c17fe7a..ce6296c 100644
--- a/tests/src/Unit/ConditionTest.php
+++ b/tests/src/Unit/ConditionTest.php
@@ -318,7 +318,7 @@ class ConditionTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     for ($i = 0; $i < 1024; $i++) {
diff --git a/tests/src/Unit/Entity/ApiProductTest.php b/tests/src/Unit/Entity/ApiProductTest.php
index 5d1d3e8..d6e500a 100644
--- a/tests/src/Unit/Entity/ApiProductTest.php
+++ b/tests/src/Unit/Entity/ApiProductTest.php
@@ -39,7 +39,7 @@ class ApiProductTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->apiProduct = new ApiProduct([]);
   }
diff --git a/tests/src/Unit/EventSubscriber/EdgeExceptionSubscriberTest.php b/tests/src/Unit/EventSubscriber/EdgeExceptionSubscriberTest.php
index 5637355..2b51851 100644
--- a/tests/src/Unit/EventSubscriber/EdgeExceptionSubscriberTest.php
+++ b/tests/src/Unit/EventSubscriber/EdgeExceptionSubscriberTest.php
@@ -19,6 +19,8 @@
 
 namespace Drupal\Tests\apigee_edge\Unit\EventSubscriber;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Apigee\Edge\Exception\ApiException;
 use Drupal\apigee_edge\Controller\ErrorPageController;
 use Drupal\apigee_edge\EventSubscriber\EdgeExceptionSubscriber;
@@ -33,7 +35,6 @@ use Prophecy\Argument;
 use Psr\Log\LoggerInterface;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 
 /**
  * Test EdgeExceptionSubscriber.
@@ -42,6 +43,7 @@ use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
  */
 class EdgeExceptionSubscriberTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The API Exception class.
    *
@@ -101,7 +103,7 @@ class EdgeExceptionSubscriberTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->exception = new ApiException("API response error message.");
@@ -140,7 +142,7 @@ class EdgeExceptionSubscriberTest extends UnitTestCase {
     }
     // Drupal 8.
     else {
-      $this->getResponseForExceptionEvent = $this->prophesize(GetResponseForExceptionEvent::class);
+      $this->getResponseForExceptionEvent = $this->prophesize(ExceptionEvent::class);
       $this->getResponseForExceptionEvent->getException()
         ->willReturn($this->exception);
     }
