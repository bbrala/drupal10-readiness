diff --git a/api_proxy.info.yml b/api_proxy.info.yml
index a7999ed..eb253e3 100644
--- a/api_proxy.info.yml
+++ b/api_proxy.info.yml
@@ -1,5 +1,4 @@
 name: API Proxy
 description: Puts Drupal between the front-end and the 3rd party API.
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 type: module
diff --git a/src/ApiProxyPermissions.php b/src/ApiProxyPermissions.php
index 111da55..2ee83f2 100644
--- a/src/ApiProxyPermissions.php
+++ b/src/ApiProxyPermissions.php
@@ -25,15 +25,16 @@ final class ApiProxyPermissions implements ContainerInjectionInterface {
    * @param \Drupal\api_proxy\Plugin\HttpApiPluginManager $proxy_plugin_manager
    *   The HTTP API proxy plugin manager.
    */
-  public function __construct(HttpApiPluginManager $proxy_plugin_manager) {
+  public function __construct(HttpApiPluginManager $proxy_plugin_manager, HttpApiPluginManager $proxyPluginManager) {
     $this->proxyPluginManager = $proxy_plugin_manager;
+    $this->proxyPluginManager = $proxyPluginManager;
   }
 
   /**
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    return new static($container->get(HttpApiPluginManager::class));
+    return new static($this->proxyPluginManager);
   }
 
   /**
diff --git a/src/EventSubscriber/OptionsRequestSubscriber.php b/src/EventSubscriber/OptionsRequestSubscriber.php
index 16a1361..cb07f91 100644
--- a/src/EventSubscriber/OptionsRequestSubscriber.php
+++ b/src/EventSubscriber/OptionsRequestSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\api_proxy\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\api_proxy\Controller\Forwarder;
 use Drupal\api_proxy\Plugin\HttpApiPluginBase;
 use Drupal\Core\Cache\CacheableMetadata;
@@ -9,7 +10,6 @@ use Drupal\Core\Cache\CacheableResponse;
 use Drupal\Core\Config\ImmutableConfig;
 use Symfony\Cmf\Component\Routing\RouteProviderInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -59,10 +59,10 @@ class OptionsRequestSubscriber implements EventSubscriberInterface {
   /**
    * Tries to handle the options request.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The request event.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     $request = $event->getRequest();
     $routes = $this->routeProvider->getRouteCollectionForRequest($event->getRequest());
     if ($request->getMethod() !== 'OPTIONS') {
diff --git a/src/Form/ApiProxyForm.php b/src/Form/ApiProxyForm.php
index a05f238..c43d396 100644
--- a/src/Form/ApiProxyForm.php
+++ b/src/Form/ApiProxyForm.php
@@ -18,6 +18,10 @@ final class ApiProxyForm extends FormBase {
    * @var \Drupal\api_proxy\Plugin\HttpApiPluginManager
    */
   private $apiProxyManager;
+  public function __construct(HttpApiPluginManager $apiProxyManager)
+  {
+      $this->apiProxyManager = $apiProxyManager;
+  }
 
   /**
    * {@inheritdoc}
@@ -25,7 +29,7 @@ final class ApiProxyForm extends FormBase {
   public static function create(ContainerInterface $container): self {
     /** @var \Drupal\api_proxy\Form\ApiProxyForm $form_object */
     $form_object = parent::create($container);
-    $form_object->setApiProxyManager($container->get(HttpApiPluginManager::class));
+    $form_object->setApiProxyManager($this->apiProxyManager);
 
     return $form_object;
   }
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index aa3cbc0..b972269 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -27,9 +27,10 @@ final class SettingsForm extends ConfigFormBase {
   /**
    * {@inheritdoc}
    */
-  public function __construct(ConfigFactoryInterface $config_factory, HttpApiPluginManager $api_proxy_manager) {
+  public function __construct(ConfigFactoryInterface $config_factory, HttpApiPluginManager $api_proxy_manager, HttpApiPluginManager $apiProxyManager) {
     $this->setConfigFactory($config_factory);
     $this->apiProxyManager = $api_proxy_manager;
+    $this->apiProxyManager = $apiProxyManager;
   }
 
   /**
@@ -38,7 +39,7 @@ final class SettingsForm extends ConfigFormBase {
   public static function create(ContainerInterface $container) {
     return new static(
       $container->get('config.factory'),
-      $container->get(HttpApiPluginManager::class)
+      $this->apiProxyManager
     );
   }
 
