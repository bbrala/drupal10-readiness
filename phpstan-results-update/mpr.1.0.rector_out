modules/contrib/mpr/multi_peer_review.install
modules/contrib/mpr/src/Controller/ReviewEmailLinkController.php
modules/contrib/mpr/src/Entity/ReviewerInterface.php
modules/contrib/mpr/src/Form/InvitationSendForm.php
modules/contrib/mpr/src/Form/UserPaperForm.php
modules/contrib/mpr/src/Entity/SES.php
modules/contrib/mpr/src/ReviewHtmlRouteProvider.php
modules/contrib/mpr/src/ReviewListBuilder.php
modules/contrib/mpr/src/Entity/SESInterface.php
modules/contrib/mpr/multi_peer_review.module
modules/contrib/mpr/src/Entity/SearchResultItem.php
modules/contrib/mpr/src/Form/PaperDeleteForm.php
modules/contrib/mpr/src/Controller/UserController.php
modules/contrib/mpr/src/Controller/UserInvitationController.php
modules/contrib/mpr/src/ReviewerAccessControlHandler.php
modules/contrib/mpr/src/ReviewerHtmlRouteProvider.php
modules/contrib/mpr/src/Form/PaperForm.php
modules/contrib/mpr/src/ReviewerListBuilder.php
modules/contrib/mpr/src/Entity/SearchResultItemInterface.php
modules/contrib/mpr/src/Entity/WebRequestCacheItem.php
modules/contrib/mpr/src/Entity/WebRequestCacheItemInterface.php
modules/contrib/mpr/src/FilteredEntityListBuilder.php
modules/contrib/mpr/src/Controller/UserPaperController.php
modules/contrib/mpr/multi_peer_review.token.inc
modules/contrib/mpr/src/Controller/UserReviewController.php
modules/contrib/mpr/src/SESAccessControlHandler.php
modules/contrib/mpr/src/SESListBuilder.php
modules/contrib/mpr/src/Controller/InvitationEmailLinkController.php
modules/contrib/mpr/src/SearchResultItemAccessControlHandler.php
modules/contrib/mpr/src/SearchResultItemListBuilder.php
modules/contrib/mpr/src/Form/CommonConfirmForm.php
modules/contrib/mpr/tests/src/Functional/LoadTest.php
modules/contrib/mpr/src/Form/CommonContentEntityForm.php
modules/contrib/mpr/src/Form/CommonFormBase.php
modules/contrib/mpr/src/Form/EmailTemplateDeleteForm.php
modules/contrib/mpr/src/EmailTemplateAccessControlHandler.php
modules/contrib/mpr/src/Form/EmailTemplateForm.php
modules/contrib/mpr/src/EmailTemplateListBuilder.php
modules/contrib/mpr/src/Form/EmailTemplateFormInterface.php
modules/contrib/mpr/src/Form/InvitationAcceptForm.php
modules/contrib/mpr/src/Entity/CommonContentEntity.php
modules/contrib/mpr/src/Entity/CommonContentEntityInterface.php
modules/contrib/mpr/src/Entity/EmailCapableEntity.php
modules/contrib/mpr/src/Form/UserPapersForm.php
modules/contrib/mpr/src/Form/PaperFormInterface.php
modules/contrib/mpr/src/Form/ReviewCancelForm.php
modules/contrib/mpr/src/Form/InvitationDeclineForm.php
modules/contrib/mpr/src/Form/UserProfileForm.php
modules/contrib/mpr/src/Form/InvitationDeleteForm.php
modules/contrib/mpr/src/Form/InvitationForm.php
modules/contrib/mpr/src/Form/UserReviewsForm.php
modules/contrib/mpr/src/Form/ReviewDeleteForm.php
modules/contrib/mpr/src/Form/ReviewForm.php
modules/contrib/mpr/src/Entity/EmailCapableEntityInterface.php
modules/contrib/mpr/src/Entity/EmailTemplate.php
modules/contrib/mpr/src/Entity/EmailTemplateInterface.php
modules/contrib/mpr/src/Entity/Invitation.php
modules/contrib/mpr/src/Form/ReviewFormInterface.php
modules/contrib/mpr/src/Form/ReviewSubmitForm.php
modules/contrib/mpr/src/Form/WebRequestCacheItemDeleteForm.php
modules/contrib/mpr/src/Form/WebRequestCacheItemForm.php
modules/contrib/mpr/src/Form/InvitationFormInterface.php
modules/contrib/mpr/src/Form/InvitationRetractForm.php
modules/contrib/mpr/src/Form/WebRequestCacheItemFormInterface.php
modules/contrib/mpr/src/InvitationAccessControlHandler.php
modules/contrib/mpr/src/InvitationHtmlRouteProvider.php
modules/contrib/mpr/src/Form/ReviewerDeleteForm.php
modules/contrib/mpr/src/Form/ReviewerForm.php
modules/contrib/mpr/src/InvitationListBuilder.php
modules/contrib/mpr/src/MPRBlank.php
modules/contrib/mpr/src/Form/ReviewerFormInterface.php
modules/contrib/mpr/src/Form/ReviewerNewAccountForm.php
modules/contrib/mpr/src/Entity/InvitationInterface.php
modules/contrib/mpr/src/Entity/Paper.php
modules/contrib/mpr/src/Form/SESDeleteForm.php
modules/contrib/mpr/src/Form/SESForm.php
modules/contrib/mpr/src/Form/SESFormInterface.php
modules/contrib/mpr/src/Form/SearchResultItemDeleteForm.php
modules/contrib/mpr/src/Form/SearchResultItemForm.php
modules/contrib/mpr/src/Form/SearchResultItemFormInterface.php
modules/contrib/mpr/src/Form/SettingsForm.php
modules/contrib/mpr/src/Entity/PaperInterface.php
modules/contrib/mpr/src/Entity/Review.php
modules/contrib/mpr/src/MPRCommon.php
modules/contrib/mpr/src/Entity/ReviewInterface.php
modules/contrib/mpr/src/Entity/Reviewer.php
modules/contrib/mpr/src/MPRDropDownListItem.php
modules/contrib/mpr/src/MPREmail.php
modules/contrib/mpr/src/MPRFormHelper.php
modules/contrib/mpr/src/MPRSearchEngineScript.php
modules/contrib/mpr/src/PaperAccessControlHandler.php
modules/contrib/mpr/src/PaperListBuilder.php
modules/contrib/mpr/src/Plugin/Mail/HtmlEnabledPhpMail.php
modules/contrib/mpr/src/ReviewAccessControlHandler.php

29 files with changes
=====================

1) modules/contrib/mpr/src/Controller/InvitationEmailLinkController.php:33

    ---------- begin diff ----------
@@ @@
     $email_hash = \Drupal::request()->query->get('eml');
     if (MPRCommon::isValidEmailHash($email_hash) == TRUE) {
       
-      $invitations = \Drupal\multi_peer_review\Entity\Invitation::getInvitations(NULL, $email_hash);
+      $invitations = Invitation::getInvitations(NULL, $email_hash);
       if (count($invitations) == 1) {
         $invitation = current($invitations);
         $paper = $invitation->fabricateAndLoadPaper();
@@ @@
     $email_hash = \Drupal::request()->query->get('eml');
     if (MPRCommon::isValidEmailHash($email_hash) == TRUE) {
       
-      $invitations = \Drupal\multi_peer_review\Entity\Invitation::getInvitations(NULL, $email_hash);
+      $invitations = Invitation::getInvitations(NULL, $email_hash);
       if (count($invitations) == 1) {
         $invitation = current($invitations);
         $paper = $invitation->fabricateAndLoadPaper();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/mpr/multi_peer_review.token.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\multi_peer_review\Entity\Invitation;
+use Drupal\multi_peer_review\Entity\Reviewer;
+use Drupal\multi_peer_review\Entity\Paper;
+use Drupal\Core\Render\BubbleableMetadata;
+use Drupal\Core\Field\FieldFilteredMarkup;
 use Drupal\multi_peer_review\MPRCommon;

 /* 
@@ @@
    
    // Add token info from entities in this module.
    $entity_token_info = [];
-   array_push($entity_token_info, Drupal\multi_peer_review\Entity\Invitation::getTokenInfo());
-   array_push($entity_token_info, Drupal\multi_peer_review\Entity\Reviewer::getTokenInfo());
-   array_push($entity_token_info, Drupal\multi_peer_review\Entity\Paper::getTokenInfo());   
+   array_push($entity_token_info, Invitation::getTokenInfo());
+   array_push($entity_token_info, Reviewer::getTokenInfo());
+   array_push($entity_token_info, Paper::getTokenInfo());   
    

    // Merge types and tokens.
@@ @@
 /**
 * Implements hook_tokens().
 */
-function multi_peer_review_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
+function multi_peer_review_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
    $replacements = [];
       
    if ($type == 'multi-peer-review') {
@@ @@
                      // that implements MarkupInterface.
                      // @see \Drupal\Component\Render\MarkupInterface
                      if (strpos($html, '<ul>') !== FALSE) {                         
-                         $html = \Drupal\Core\Field\FieldFilteredMarkup::create($html);
+                         $html = FieldFilteredMarkup::create($html);
                      }
                      
                      $replacements[$original] = $html;                 
@@ @@
    }
    
    return $replacements;
-}
+}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/mpr/multi_peer_review.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\multi_peer_review\Entity\Reviewer;
+use Drupal\user\Entity\User;
+use Drupal\multi_peer_review\Entity\Review;
+use Drupal\multi_peer_review\Entity\Invitation;
+use Drupal\multi_peer_review\Entity\Paper;
+use Drupal\multi_peer_review\Entity\SES;
+use Drupal\multi_peer_review\Entity\WebRequestCacheItem;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\multi_peer_review\Entity\EmailTemplate;
 /**
  * @file
  * Contains multi_peer_review.module.
@@ @@
     // Synchronises Reviewer email address.
     $user_id = intval($entity->get('uid')->getValue()[0]['value']);  

-    $reviewer = \Drupal\multi_peer_review\Entity\Reviewer::getReviewerByOwner($user_id);
+    $reviewer = Reviewer::getReviewerByOwner($user_id);
     if (empty($reviewer) == FALSE) {
         
         $email = $entity->get('mail')->getValue()[0]['value'];
@@ @@

     $user_id = intval($entity->get('uid')->getValue()[0]['value']);      

-    $reviewer = \Drupal\multi_peer_review\Entity\Reviewer::getReviewerByOwner($user_id);
+    $reviewer = Reviewer::getReviewerByOwner($user_id);
     if (empty($reviewer) == FALSE) {
         // Use the Reviewer's original owner id if possible.
         $original_owner_id = $reviewer->getOriginalOwner();
-        $original_owner = Drupal\user\Entity\User::load($original_owner_id);
+        $original_owner = User::load($original_owner_id);

         if (empty($original_owner) == FALSE) {
             // Original owner still exists.
@@ @@
     }

     // At this stage, $new_user_id could belong to one of the original owners of the related Reviewer records.
-    foreach (\Drupal\multi_peer_review\Entity\Review::getReviews(NULL, NULL, NULL, NULL, $user_id) as $review) {
+    foreach (Review::getReviews(NULL, NULL, NULL, NULL, $user_id) as $review) {
         $review->set('uid', $new_user_id);
         $review->save();
     }      
@@ @@
 function multi_peer_review_rebuild() {
     
   // Rebuild cache data.
-  \Drupal\multi_peer_review\Entity\Reviewer::rebuildCachedFigures();  
-  \Drupal\multi_peer_review\Entity\Invitation::rebuildCachedFigures();  
-  \Drupal\multi_peer_review\Entity\Review::rebuildCachedFigures();
-  \Drupal\multi_peer_review\Entity\Paper::rebuildCachedFigures();
+  Reviewer::rebuildCachedFigures();  
+  Invitation::rebuildCachedFigures();  
+  Review::rebuildCachedFigures();
+  Paper::rebuildCachedFigures();
   
 }

@@ @@
             case MPRCommon::EXECUTION_INTERVAL_HOURLY:
                 
                 // Auto-retract expired Invitations.
-                Drupal\multi_peer_review\Entity\Invitation::autoRetractExpiredInvitations();
+                Invitation::autoRetractExpiredInvitations();
                 
                 // Send Invitation follow-ups.
-                Drupal\multi_peer_review\Entity\Invitation::sendInvitationFollowUps();
+                Invitation::sendInvitationFollowUps();
                 
                 // Review reminders:
                 // -Review start reminders.
                 // -Upcoming Review deadline reminders.
                 // -Review overdue reminders.
-                Drupal\multi_peer_review\Entity\Review::sendReviewReminders();
+                Review::sendReviewReminders();
                                                 
                 

@@ @@
                 break;          
             case MPRCommon::EXECUTION_INTERVAL_DAILY:
                 // Daily check of Search Engine Script functionality.
-                \Drupal\multi_peer_review\Entity\SES::runSelfTests();                
+                SES::runSelfTests();                

                 break;                
             case MPRCommon::EXECUTION_INTERVAL_SES:
@@ @@
                 // Search Engine Script cache building process.
                 
                 // Clear expired web request cache.
-                \Drupal\multi_peer_review\Entity\WebRequestCacheItem::deleteExpiredWebRequestCacheItems();  
+                WebRequestCacheItem::deleteExpiredWebRequestCacheItems();  

                 // Incrementally build search caches.
-                \Drupal\multi_peer_review\Entity\SES::buildSearchCaches();                
+                SES::buildSearchCaches();                
                 
                 break;            
         }
@@ @@
 /**
  * Implements hook_form_FORM_ID_alter().
  */
-function multi_peer_review_form_user_register_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function multi_peer_review_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   
   // If a user is registering a new account, the roles control that is usually
   // hidden is made visible but modified to only show the Multi Peer Review Guest role.
@@ @@


     $options = [
-        MPRCommon::ROLE_GUEST => new Drupal\Core\StringTranslation\TranslatableMarkup('Sign-up as Guest.'),
+        MPRCommon::ROLE_GUEST => new TranslatableMarkup('Sign-up as Guest.'),
     ];

     $form['account']['roles']['#title'] = '';
     $form['account']['roles']['#access'] = TRUE;
     $form['account']['roles']['#options'] = $options;
-    $form['account']['roles']['#description'] = new Drupal\Core\StringTranslation\TranslatableMarkup(
+    $form['account']['roles']['#description'] = new TranslatableMarkup(
             'Guests can upload papers for @site-name to peer review.', $placeholder_replacements);
   }  
     
@@ @@
     // Load valid keys. 
     // A key is valid if it matches one of the email template ids.
     // If you need to send emails that are not related to an email template, add the keys to $valid_keys.    
-    $valid_keys = \Drupal\multi_peer_review\Entity\EmailTemplate::getEmailTemplateIds();
+    $valid_keys = EmailTemplate::getEmailTemplateIds();
     
     
     // Check if the key is valid for this module.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


4) modules/contrib/mpr/multi_peer_review.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\Entity\Role;
+use Drupal\Core\Datetime\Entity\DateFormat;
+use Drupal\filter\Entity\FilterFormat;
+use Drupal\editor\Entity\Editor;
 /**
  * @file
  * Contains install, update and uninstall functions for the MPR module.
@@ @@
     // Create roles.
     // Guest.
     $data = ['id' => MPRCommon::ROLE_GUEST, 'label' => 'Multi Peer Review Guest'];
-    $role = \Drupal\user\Entity\Role::create($data);
+    $role = Role::create($data);
     $issueAccessPermissions = [
         'access multi_peer_review_manage_own_papers',
     ];    
@@ @@
     
     // Staff.
     $data = ['id' => MPRCommon::ROLE_STAFF, 'label' => 'Multi Peer Review Staff'];
-    $role = \Drupal\user\Entity\Role::create($data);
+    $role = Role::create($data);
     $issueAccessPermissions = [
         'administer multi_peer_review_settings',
         'administer multi_peer_review_menu',
@@ @@
     
     // Reviewer.
     $data = ['id' => MPRCommon::ROLE_REVIEWER, 'label' => 'Multi Peer Review Reviewer'];
-    $role = \Drupal\user\Entity\Role::create($data);
+    $role = Role::create($data);
     $issueAccessPermissions = [
         'access multi_peer_review_manage_own_reviewer_profile',        
         'access multi_peer_review_manage_own_invitations',
@@ @@
     // Default Date/Time.
     // Example: 20/05/2000 13:23:56
     $data = ['id' => MPRCommon::NAMED_DATE_FORMAT_DEFAULT_DATE_TIME, 'label' => 'Multi Peer Review Default Date/Time', 'pattern' => 'd/m/Y H:i:s'];
-    $date_format = \Drupal\Core\Datetime\Entity\DateFormat::create($data);
+    $date_format = DateFormat::create($data);
     $date_format->save();
     
     
@@ @@
     // Short Date.
     // Example: 20/05/2000
     $data = ['id' => MPRCommon::NAMED_DATE_FORMAT_SHORT_DATE, 'label' => 'Multi Peer Review Short Date/Time', 'pattern' => 'd/m/Y'];
-    $date_format = \Drupal\Core\Datetime\Entity\DateFormat::create($data);
+    $date_format = DateFormat::create($data);
     $date_format->save();    
     
     
@@ @@
     // Verbose Date.
     // Example: 11th of March 2000
     $data = ['id' => MPRCommon::NAMED_DATE_FORMAT_VERBOSE_DATE, 'label' => 'Multi Peer Review Verbose Date', 'pattern' => 'jS \of F Y'];
-    $date_format = \Drupal\Core\Datetime\Entity\DateFormat::create($data);
+    $date_format = DateFormat::create($data);
     $date_format->save();    
     
     
@@ @@
     $site_config = \Drupal::configFactory()->getEditable('system.mail');
     $configuration = $site_config->get('interface');    
     $module = 'multi_peer_review';    
-    $keys = \Drupal\multi_peer_review\Entity\EmailTemplate::getEmailTemplateIds();
+    $keys = EmailTemplate::getEmailTemplateIds();
     foreach ($keys as $key) {
         $message_id = $module . '_' . $key;    
         $configuration[$message_id] = 'multi_peer_review_html_enabled_php_mail';    
@@ @@
     
     
     // Create new textarea format specifically for the Multi Peer Review module.
-    $textarea_format = \Drupal\filter\Entity\FilterFormat::create([
+    $textarea_format = FilterFormat::create([
         'format' => 'multi_peer_review_html',   // ID for this record.
         'name' => 'Multi Peer Review HTML',            
         'roles' => [MPRCommon::ROLE_GUEST, MPRCommon::ROLE_STAFF],            
@@ @@
     
     if ($ckeditor_exists == TRUE) {
         // Reload textarea format.
-        $textarea_format = \Drupal\filter\Entity\FilterFormat::load('multi_peer_review_html'); 
+        $textarea_format = FilterFormat::load('multi_peer_review_html'); 
         if (empty($textarea_format) == FALSE) {
             // Link ckeditor (WYSIWYG editor) with the new textarea format.
-            $editor = \Drupal\editor\Entity\Editor::create([
+            $editor = Editor::create([
                 'format' => 'multi_peer_review_html',
                 'editor' => 'ckeditor',
                 'filterFormat' => $textarea_format,
@@ @@
     ];
     foreach ($role_ids as $role_id)
     {
-        $role = \Drupal\user\Entity\Role::load($role_id);
+        $role = Role::load($role_id);
         if (empty($role) == FALSE) {
             $role->delete();
         }
@@ @@
     ];
     foreach ($date_format_ids as $date_format_id)
     {
-        $date_format = \Drupal\Core\Datetime\Entity\DateFormat::load($date_format_id);
+        $date_format = DateFormat::load($date_format_id);
         if (empty($date_format) == FALSE) {
             $date_format->delete();    
         }
@@ @@
     $site_config = \Drupal::configFactory()->getEditable('system.mail');    
     $configuration = $site_config->get('interface');    
     $module = 'multi_peer_review';
-    $keys = \Drupal\multi_peer_review\Entity\EmailTemplate::getEmailTemplateIds();
+    $keys = EmailTemplate::getEmailTemplateIds();
     foreach ($keys as $key) {
         $message_id = $module . '_' . $key;
         if (empty($configuration[$message_id]) == FALSE) {
@@ @@
     
     
     // Remove editor relationship with custom textarea format and then remove format.
-    $editor = \Drupal\editor\Entity\Editor::load('multi_peer_review_html');
+    $editor = Editor::load('multi_peer_review_html');
     if (empty($editor) == FALSE) {
         $editor->delete();    
     }
     
-    $textarea_format = \Drupal\filter\Entity\FilterFormat::load('multi_peer_review_html');
+    $textarea_format = FilterFormat::load('multi_peer_review_html');
     if (empty($textarea_format) == FALSE) {
         $textarea_format->delete();
     }
@@ @@
     
     // Clear cached data.
     \Drupal::cache('data')->deleteAll();
-}
+}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


5) modules/contrib/mpr/tests/src/Functional/LoadTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/mpr/src/Form/InvitationRetractForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\multi_peer_review\Form;

+use Drupal\multi_peer_review\MPREmail;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Entity\EntityConstraintViolationListInterface;
@@ @@
     $paper = $invitation->fabricateAndLoadPaper();
     $reviewer = $invitation->fabricateAndLoadReviewer();
       
-    $email = \Drupal\multi_peer_review\MPREmail::createFromEmailTemplate(
+    $email = MPREmail::createFromEmailTemplate(
                 'invitation_retract',
                 [$invitation, $paper, $reviewer],
                 $reviewer->getEmail(),
@@ @@
     

     if ($email->send() == TRUE) {
-        drupal_set_message(t('The retraction has been sent.'));        
+        $this->messenger()->addStatus(t('The retraction has been sent.'));        
         $invitation->logAction($this->logger('multi_peer_review'), 'retracted');
         
         // Update Invitation status.
@@ @@
         
     } 
     else {
-        drupal_set_message(t('There was a problem sending the retraction. It has not been sent.'), 'error'); 
+        $this->messenger()->addError(t('There was a problem sending the retraction. It has not been sent.')); 
     }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/mpr/src/Form/InvitationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\multi_peer_review\Form;

+use Drupal\multi_peer_review\Entity\EmailTemplate;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityConstraintViolationListInterface;
@@ @@
     ];    
     
     if ($invitation->isNew() == TRUE) {
-        $email_template = \Drupal\multi_peer_review\Entity\EmailTemplate::load('invitation_new');
+        $email_template = EmailTemplate::load('invitation_new');
         $default_values = [
             'email_subject' => $email_template->getSubject(),
             'email_body' => $email_template->getBody(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/mpr/src/Form/InvitationDeclineForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\multi_peer_review\Form;

+use Drupal\multi_peer_review\MPREmail;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Entity\EntityConstraintViolationListInterface;
@@ @@
         $invitation = Invitation::load($invitation->id());
         

-        $email = \Drupal\multi_peer_review\MPREmail::createFromEmailTemplate(
+        $email = MPREmail::createFromEmailTemplate(
             'invitation_declined', 
             [$invitation, $paper, $reviewer], 
             $invitation->getOwner()->getEmail(), 
@@ @@
         $email->send();  
         
         $invitation->logAction($this->logger('multi_peer_review'), 'declined');
-        drupal_set_message(t('Thank you for responding to our invitation.'));  
+        $this->messenger()->addStatus(t('Thank you for responding to our invitation.'));  
          
         // Redirect the user to the home page. $status is typically SAVED_UPDATED.      
         $form_state->setRedirectUrl($this->getCancelUrl());           
     }
     else {
-        drupal_set_message(t('There was a technical problem declining the invitation. Please contact us or try again later.'), 'error'); 
+        $this->messenger()->addError(t('There was a technical problem declining the invitation. Please contact us or try again later.')); 

         // Form will be rebuilt.
         $form_state->setRebuild();
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/mpr/src/Form/InvitationAcceptForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\multi_peer_review\Form;

+use Drupal\multi_peer_review\MPREmail;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Entity\EntityConstraintViolationListInterface;
@@ @@
         

         // Reload Invitation.
-        $invitation = \Drupal\multi_peer_review\Entity\Invitation::load($invitation->id());
+        $invitation = Invitation::load($invitation->id());


         // Create pending Review.
         // Note that email_hash is set by EmailCapableEntity save().
         $new_review_id = MPRCommon::getNewCustomTextId();
-        $review = \Drupal\multi_peer_review\Entity\Review::create([
+        $review = Review::create([
             'id' => $new_review_id, 
             'label' => $new_review_id, 
             'invitation' => $invitation->id(),
@@ @@
             $review = Review::load($new_review_id);

             // Send information to Reviewer.
-            $email = \Drupal\multi_peer_review\MPREmail::createFromEmailTemplate(
+            $email = MPREmail::createFromEmailTemplate(
                 'invitation_accepted_information', 
                 [$invitation, $paper, $reviewer, $review], 
                 $reviewer->getEmail(), 
@@ @@

         
         // Send email to staff.
-        $email = \Drupal\multi_peer_review\MPREmail::createFromEmailTemplate(
+        $email = MPREmail::createFromEmailTemplate(
             'invitation_accepted', 
             [$invitation, $paper, $reviewer], 
             $invitation->getOwner()->getEmail(), 
@@ @@
         Paper::rebuildCachedFigures($paper);            
         
         $invitation->logAction($this->logger('multi_peer_review'), 'accepted');
-        drupal_set_message(t('Thank you for accepting our invitation.'));  
+        $this->messenger()->addStatus(t('Thank you for accepting our invitation.'));  
          
         // Redirect the user to the home page. $status is typically SAVED_UPDATED.      
         $form_state->setRedirectUrl($this->getCancelUrl());           
     }
     else {
-        drupal_set_message(t('There was a technical issue accepting the invitation. Please contact us or try again later.'), 'error'); 
+        $this->messenger()->addError(t('There was a technical issue accepting the invitation. Please contact us or try again later.')); 

         // Form will be rebuilt.
         $form_state->setRebuild();
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/mpr/src/FilteredEntityListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\multi_peer_review;

+use Drupal\user\Entity\User;
+use Drupal\Core\Access\AccessResult;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Ajax\AjaxHelperTrait;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
     }
     else {
         if ($this->accessUser === NULL) {
-            $this->accessUser = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());            
+            $this->accessUser = User::load(\Drupal::currentUser()->id());            
         }
         
-        $res = \Drupal\Core\Access\AccessResult::allowedIfHasPermission($this->accessUser, $permission)->isAllowed();
+        $res = AccessResult::allowedIfHasPermission($this->accessUser, $permission)->isAllowed();
         $this->accessResults[$permission] = $res;        
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/mpr/src/Form/ReviewerNewAccountForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\multi_peer_review\Form;

+use Drupal\Core\Access\AccessResult;
+use Drupal\user\Entity\User;
+use Drupal\multi_peer_review\MPREmail;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Entity\EntityConstraintViolationListInterface;
@@ @@
   public function buildForm(array $form, FormStateInterface $form_state) {
         
     // Access check.
-    if (\Drupal\Core\Access\AccessResult::allowedIfHasPermission($this->currentUser(), 'administer multi_peer_review_users_add')->isAllowed() == TRUE) {
+    if (AccessResult::allowedIfHasPermission($this->currentUser(), 'administer multi_peer_review_users_add')->isAllowed() == TRUE) {
         $res = parent::buildForm($form, $form_state);
     }
     else {
@@ @@
         }
         else {
             // Check uniqueness.
-            foreach (\Drupal\user\Entity\User::loadMultiple() as $user_id => $user) {
+            foreach (User::loadMultiple() as $user_id => $user) {
                 if ($user->getUsername() == $username) {
                     $placeholder_replacements = ['%value' => $username];
                     $form_state->setErrorByName('username', $this->t('The username %value is already taken.', $placeholder_replacements));                    
@@ @@

     
     $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
-    $user = \Drupal\user\Entity\User::create();
+    $user = User::create();
     
     $user->setUsername($form['username']['#value']);
     $user->setPassword($form['password']['#value']);
@@ @@
             }            
                     
                         
-            $email = \Drupal\multi_peer_review\MPREmail::createFromEmailTemplate(
+            $email = MPREmail::createFromEmailTemplate(
                     'reviewer_registered', 
                     [$reviewer], 
                     $reviewer->getEmail(), 
@@ @@
             $reviewer->logAction($this->logger('multi_peer_review'), 'user account generated');
             
             if ($this->isAdmin() == TRUE) {
-                drupal_set_message(t('An account has been created successfully for %reviewer-full-name. An email has been sent to %reviewer-email.', $placeholder_replacements)); 
+                $this->messenger()->addStatus(t('An account has been created successfully for %reviewer-full-name. An email has been sent to %reviewer-email.', $placeholder_replacements)); 
             }
             else {
-                drupal_set_message(t('Thank you for registering an account with us. An email has been sent to %reviewer-email.', $placeholder_replacements)); 
+                $this->messenger()->addStatus(t('Thank you for registering an account with us. An email has been sent to %reviewer-email.', $placeholder_replacements)); 
             }
         }
         else {
             // A technical error has occurred.
             
-            drupal_set_message(t('There was a problem creating the account. It has not been created.'), 'error'); 
+            $this->messenger()->addError(t('There was a problem creating the account. It has not been created.')); 
             
             MPRCommon::sendEmailToTechnicalContact($this->t('A user account was generated but could not be attached to %reviewer-full-name. Please check for orphaned user accounts.', $placeholder_replacements));
         }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/mpr/src/Form/ReviewerForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\multi_peer_review\Form;

+use Drupal\multi_peer_review\Entity\SearchResultItem;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityConstraintViolationListInterface;
@@ @@
         
         $copy_item = \Drupal::request()->query->get('copy_item');
         if (empty($copy_item) == FALSE) {
-            $copy =  \Drupal\multi_peer_review\Entity\SearchResultItem::load($copy_item);
+            $copy =  SearchResultItem::load($copy_item);

             $flexible_defaults['first_name'] = $copy->getFirstName();
             $flexible_defaults['last_name']  = $copy->getLastName();
@@ @@
     if ($reviewer->isNew() == TRUE) {
         $copy_item = \Drupal::request()->query->get('copy_item');
         if (empty($copy_item) == FALSE) {
-            $copied_entity = \Drupal\multi_peer_review\Entity\SearchResultItem::load($copy_item);
+            $copied_entity = SearchResultItem::load($copy_item);
             
             $reviewer->set('source_search_result_item', $copy_item);
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/mpr/src/Form/ReviewSubmitForm.php:173

    ---------- begin diff ----------
@@ @@
     
     if ($status == SAVED_UPDATED) {
         if ($this->isAdmin() == TRUE) {
-            drupal_set_message(t('The Review has been submitted.')); 
+            $this->messenger()->addStatus(t('The Review has been submitted.')); 
         }
         else {
-            drupal_set_message(t('Thank you for submitting your review.')); 
+            $this->messenger()->addStatus(t('Thank you for submitting your review.')); 
         }
         
         $review->logAction($this->logger('multi_peer_review'), 'submitted');
@@ @@
     }
     else {
         if ($this->isAdmin() == TRUE) {
-            drupal_set_message(t('There was a problem submitting the Review. It has not been submitted.'), 'error'); 
+            $this->messenger()->addError(t('There was a problem submitting the Review. It has not been submitted.')); 
         }
         else {
-            drupal_set_message(t('There was a technical issue submitting your review. Please contact us or try again later.'), 'error'); 
+            $this->messenger()->addError(t('There was a technical issue submitting your review. Please contact us or try again later.')); 
         }
     }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/mpr/src/Form/ReviewCancelForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\multi_peer_review\Form;

+use Drupal\multi_peer_review\MPREmail;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Entity\EntityConstraintViolationListInterface;
@@ @@
         
         if ($this->isAdmin() == FALSE) {
             // Send an email to staff regarding the cancellation.
-            $email = \Drupal\multi_peer_review\MPREmail::createFromEmailTemplate(
+            $email = MPREmail::createFromEmailTemplate(
                 'review_cancelled_notify', 
                 [$invitation, $paper, $reviewer, $review],
                 $invitation->getOwner()->getEmail(), 
@@ @@
         }        
         else {
             // Send an email to the Reviewer about the cancellation.
-            $email = \Drupal\multi_peer_review\MPREmail::createFromEmailTemplate(
+            $email = MPREmail::createFromEmailTemplate(
                 'review_cancelled',
                 [$invitation, $paper, $reviewer, $review],
                 $reviewer->getEmail(),
@@ @@
         $review->logAction($this->logger('multi_peer_review'), 'cancelled');

         if ($this->isAdmin() == FALSE) {
-            drupal_set_message(t('Your review of %paper-title has been cancelled.', $placeholder_replacements));  
+            $this->messenger()->addStatus(t('Your review of %paper-title has been cancelled.', $placeholder_replacements));  
         }
         else {
-            drupal_set_message(t('The review of %paper-title has been cancelled.', $placeholder_replacements));  
+            $this->messenger()->addStatus(t('The review of %paper-title has been cancelled.', $placeholder_replacements));  
         }
          
         // Redirect the user.    
@@ @@
         $form_state->setRedirectUrl($this->getCancelUrl());           
     }
     else {
-        drupal_set_message(t('There was a technical problem cancelling the review. Please contact us or try again later.'), 'error'); 
+        $this->messenger()->addError(t('There was a technical problem cancelling the review. Please contact us or try again later.')); 

         // Form will be rebuilt.
         $form_state->setRebuild();
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/mpr/src/Form/InvitationSendForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\multi_peer_review\Form;

+use Drupal\multi_peer_review\MPREmail;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Entity\EntityConstraintViolationListInterface;
@@ @@
       
     
     // Does not include the actual Paper.
-    $email = \Drupal\multi_peer_review\MPREmail::createFromEmailCapableEntity(
+    $email = MPREmail::createFromEmailCapableEntity(
         'invitation_new', 
         [$invitation, $paper, $reviewer], 
         $reviewer->getEmail(), 
@@ @@

     
     if ($email->send() == TRUE) {
-        drupal_set_message(t('The Invitation has been sent.'));             
+        $this->messenger()->addStatus(t('The Invitation has been sent.'));             
         $invitation->logAction($this->logger('multi_peer_review'), 'sent');
         
         // Update Invitation status.
@@ @@
         
     } 
     else {
-        drupal_set_message(t('There was a problem sending the Invitation. It has not been sent.'), 'error'); 
+        $this->messenger()->addError(t('There was a problem sending the Invitation. It has not been sent.')); 
     }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


16) modules/contrib/mpr/src/Entity/Review.php:361

    ---------- begin diff ----------
@@ @@
   public function fabricateAndLoadInvitation() {
     $res = NULL;
     if (empty($this->invitation) == FALSE) {      
-      $res = \Drupal\multi_peer_review\Entity\Invitation::load($this->invitation);                 
+      $res = Invitation::load($this->invitation);                 
     }
     return $res;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/mpr/src/Entity/Paper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\multi_peer_review\Entity;

+use Drupal\file\Entity\File;
+use Drupal\Core\Field\FieldFilteredMarkup;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityChangedTrait;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
     $file = $this->getFile();
     if (empty($file) == FALSE) {
         $fid = $file['target_id'];
-        $file = \Drupal\file\Entity\File::load($fid);
+        $file = File::load($fid);
         if (empty($file) == FALSE) {

             $res = '<a target="_blank" href="' . 
-                    file_create_url($file->getFileUri()) . '">' . 
+                    \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri()) . '">' . 
                     htmlentities($file->getFilename()) . ' (' . format_size($file->getSize()) . ')</a>';

         }
@@ @@
           
           $attachments = [];
           foreach ($fids as $fid) {
-            $file = \Drupal\file\Entity\File::load($fid);
+            $file = File::load($fid);

             $file_info = [
                 'filecontent' => file_get_contents($file->getFileUri()),
@@ @@
       
       // Process file link removal queue
       foreach ($remove_fids as $fid) {
-        $file = \Drupal\file\Entity\File::load($fid);
+        $file = File::load($fid);
         if ($file != NULL) {
             $list = $file_usage->listUsage($file);

@@ @@
     
     $fid = $this->file['target_id'];
     if ($fid != NULL) {
-        $file = \Drupal\file\Entity\File::load($fid);
+        $file = File::load($fid);
         $file_usage = \Drupal::service('file.usage');
         $list = $file_usage->listUsage($file);

@@ @@
             $res = $this->getOwner()->getDisplayName();
             break;   
         case 'abstract':                                         
-            $res = \Drupal\Core\Field\FieldFilteredMarkup::create($this->getAbstract());
+            $res = FieldFilteredMarkup::create($this->getAbstract());
             break;         
     }   
     return ($res);
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


18) modules/contrib/mpr/src/Entity/Invitation.php:186

    ---------- begin diff ----------
@@ @@
   public function fabricateAndLoadPaper() {
     $res = NULL;
     if (empty($this->paper) == FALSE) {      
-      $res = \Drupal\multi_peer_review\Entity\Paper::load($this->paper);                 
+      $res = Paper::load($this->paper);                 
     }
     return $res;
   }  
@@ @@
   public function fabricateAndLoadReviewer() {
     $res = NULL;
     if (empty($this->reviewer) == FALSE) {      
-      $res = \Drupal\multi_peer_review\Entity\Reviewer::load($this->reviewer);                 
+      $res = Reviewer::load($this->reviewer);                 
     }
     return $res;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


19) modules/contrib/mpr/src/Entity/EmailCapableEntity.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace Drupal\multi_peer_review\Entity;

+use Drupal\file\Entity\File;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityChangedTrait;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
           
           $attachments = [];
           foreach ($fids as $fid) {
-            $file = \Drupal\file\Entity\File::load($fid);
+            $file = File::load($fid);

             $file_info = [
                 'filecontent' => file_get_contents($file->getFileUri()),
@@ @@
           foreach ($attachment_fids as $fid) {
               
             $add_to_usage = FALSE;
-            $file = \Drupal\file\Entity\File::load($fid);
+            $file = File::load($fid);
             if ($file != NULL) {                
                 $list = $file_usage->listUsage($file);

@@ @@
       
       // Process file link removal queue
       foreach ($remove_fids as $fid) {
-        $file = \Drupal\file\Entity\File::load($fid);
+        $file = File::load($fid);
         if ($file != NULL) {
             $list = $file_usage->listUsage($file);

@@ @@
         // Process existing attachments
         foreach ($attachment_fids as $fid) {
          
-          $file = \Drupal\file\Entity\File::load($fid);
+          $file = File::load($fid);
           if ($file != NULL) {              
               $list = $file_usage->listUsage($file);

@@ @@
         $delete_file_usage = $value['delete_file_usage'];
         $delete_file = $value['delete_file'];
         
-        $file = \Drupal\file\Entity\File::load($fid);
+        $file = File::load($fid);
         if ($file != NULL) {           
             if ($delete_file_usage == TRUE) {
                 // @see Drupal\file\FileUsage\FileUsageInterface
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


20) modules/contrib/mpr/src/Controller/UserReviewController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\multi_peer_review\Controller;

+use Drupal\file\Entity\File;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@
     $user_id = $current_route->getParameters()->get('user');
     
     if ((empty($review_id) == FALSE) && (empty($user_id) == FALSE)) {
-      $review = \Drupal\multi_peer_review\Entity\Review::load($review_id);
+      $review = Review::load($review_id);
       if (empty($review) == FALSE) {           
         // Check user access.
         if ($review->getOwnerId() == $user_id) {
@@ @@

               $file_links = [];
               foreach ($review->getEmailAttachments() as $fid) {
-                $file = \Drupal\file\Entity\File::load($fid);
+                $file = File::load($fid);
                 if (empty($file) == FALSE) {
                   $file_link = '<a target="_blank" href="' . 
-                      file_create_url($file->getFileUri()) . '">' . 
+                      \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri()) . '">' . 
                       htmlentities($file->getFilename()) . ' (' . format_size($file->getSize()) . ')</a>';

                   array_push($file_links, $file_link);
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/mpr/src/Controller/UserInvitationController.php:48

    ---------- begin diff ----------
@@ @@
       $reviewer = Reviewer::getReviewerByOwner($user_id);        
       if (empty($reviewer) == FALSE) {      

-        $invitation = \Drupal\multi_peer_review\Entity\Invitation::load($invitation_id);
+        $invitation = Invitation::load($invitation_id);
         if (empty($invitation) == FALSE) {           
           // Check if the Invitation is related to the Reviewer.
           if ($invitation->getReviewer() == $reviewer->id()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


22) modules/contrib/mpr/src/Controller/ReviewEmailLinkController.php:33

    ---------- begin diff ----------
@@ @@
     $email_hash = \Drupal::request()->query->get('eml');
     if (MPRCommon::isValidEmailHash($email_hash) == TRUE) {
         
-      $reviews = \Drupal\multi_peer_review\Entity\Review::getReviews(NULL, $email_hash);
+      $reviews = Review::getReviews(NULL, $email_hash);
       if (count($reviews) == 1) {
         $review = current($reviews);
         $invitation = $review->fabricateAndLoadInvitation();
@@ @@
     $email_hash = \Drupal::request()->query->get('eml');
     if (MPRCommon::isValidEmailHash($email_hash) == TRUE) {
         
-      $reviews = \Drupal\multi_peer_review\Entity\Review::getReviews(NULL, $email_hash);
+      $reviews = Review::getReviews(NULL, $email_hash);
       if (count($reviews) == 1) {
         $review = current($reviews);
         $invitation = $review->fabricateAndLoadInvitation();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


23) modules/contrib/mpr/src/Plugin/Mail/HtmlEnabledPhpMail.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\multi_peer_review\Plugin\Mail;

-
+use Drupal\Core\Mail\Plugin\Mail\PhpMail;
 /**
  * Defines the default Multi Peer Review mail back-end, using PHP's native mail() function.
  *
@@ @@
  *   description = @Translation("Sends the message as HTML, using PHP's native mail() function, but without converting it to plain-text.")
  * )
  */
-class HtmlEnabledPhpMail extends \Drupal\Core\Mail\Plugin\Mail\PhpMail {
+class HtmlEnabledPhpMail extends PhpMail {

   
   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


24) modules/contrib/mpr/src/MPRSearchEngineScript.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\multi_peer_review;

+use Drupal\multi_peer_review\Entity\SearchResultItem;
 /**
  * @file
  * This file contains an abstract class that provides a template and helper methods for developing Search Engine Scripts that can be executed by the Multi Peer Review module.
@@ @@
  * Example:
  * class YourSearchEngineScript extends \Drupal\multi_peer_review\MPRSearchEngineScript
  */
-
 /**
  * Class MPRSearchEngineScript
  * @package Drupal\multi_peer_review
@@ @@
     }
     
     public function getSearchResultItems() {
-        return Entity\SearchResultItem::getSearchResultItems($this->storage_handler->id());
+        return SearchResultItem::getSearchResultItems($this->storage_handler->id());
     }
     
     public function getSearchResultItemByRemoteId($remote_id) {
-        return Entity\SearchResultItem::loadByRemoteId($remote_id, $this->storage_handler->id());
+        return SearchResultItem::loadByRemoteId($remote_id, $this->storage_handler->id());
     }
     
     public function clearSearchCache() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


25) modules/contrib/mpr/src/MPREmail.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace Drupal\multi_peer_review;

+use Drupal\file\Entity\File;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\multi_peer_review\Entity\EmailTemplate;
@@ @@
     if (empty($files) == FALSE) {
         foreach ($files as $fid => $file_item) {
           
-            $file = \Drupal\file\Entity\File::load($fid);
+            $file = File::load($fid);

             $file_info = [
                 'filecontent' => file_get_contents($file->getFileUri()),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


26) modules/contrib/mpr/src/MPRCommon.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\multi_peer_review;

+use Drupal\Core\Url;
+use Drupal\multi_peer_review\Entity\WebRequestCacheItem;
+use Drupal\Component\Utility\Xss;
+use Drupal\file\Entity\File;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\StringTranslation\TranslatableMarkup;

@@ @@
         $config = \Drupal::config('system.site');        
         $placeholder_replacements[$placeholder_prefix . 'site-name'] = $config->get('name');        
         
-        $home = \Drupal\Core\Url::fromRoute('<front>');
+        $home = Url::fromRoute('<front>');
         $home->setAbsolute();
         $placeholder_replacements[$placeholder_prefix . 'site-url'] = $home->toString();
         
@@ @@
         
         // Get page source from the cache if possible and requested.
         if ($bypass_cache == FALSE) {
-            $cache_item = Entity\WebRequestCacheItem::load($url_hash);
+            $cache_item = WebRequestCacheItem::load($url_hash);
         }
         else {
             $cache_item = NULL;
@@ @@
                 
                 if ($bypass_cache == FALSE) {
                     // Store response in cache.
-                    $cache_item = Entity\WebRequestCacheItem::create([
+                    $cache_item = WebRequestCacheItem::create([
                         'id' => $url_hash,
                         'label' => $url_hash,
                         'external_url' => $external_url,
@@ @@
         $allowed_html_tags = MPRCommon::getDistinctValues($allowed_html_tags);
     }
     else {
-        $allowed_html_tags = \Drupal\Component\Utility\Xss::getAdminTagList();
+        $allowed_html_tags = Xss::getAdminTagList();
     }
     
     $res = $html;
@@ @@
     }
     
     // Filter HTML to remove cross-site scripts.
-    $res = \Drupal\Component\Utility\Xss::filter($res, $allowed_html_tags);
+    $res = Xss::filter($res, $allowed_html_tags);
     
     // Revert tokens in links to original values.
     // Example: href="[paper|title] to href="[paper:title]
@@ @@
     // Delete files used by the module.    
     $file_usage = \Drupal::service('file.usage');
     $file_system = \Drupal::service('file_system');
-    foreach (\Drupal\file\Entity\File::loadMultiple() as $file_entity) {      
+    foreach (File::loadMultiple() as $file_entity) {      
         
         // Only process files stored in the multi_peer_review directory.
         $file_uri = $file_entity->getFileUri();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


27) modules/contrib/mpr/src/MPRBlank.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\multi_peer_review;

-
+use Drupal\multi_peer_review\Entity\SearchResultItem;
 /**
  * Defines a blank class used during development of the Multi Peer Review module.
  * Should be empty when used in production.
@@ @@
                 case "new":
                     $person["state"] = "cached";

-                    $search_result_item = \Drupal\multi_peer_review\Entity\SearchResultItem::create([
+                    $search_result_item = SearchResultItem::create([
                         "id" => $search_result_item_id,
                         "label" => $search_result_item_id . " " . $person["full_name"],
                         "full_name" => $person["full_name"],
@@ @@
                 case "updated":                                                
                     $person["state"] = "cached";

-                    $search_result_item = \Drupal\multi_peer_review\Entity\SearchResultItem::load($search_result_item_id);
+                    $search_result_item = SearchResultItem::load($search_result_item_id);
                     if (empty($search_result_item) == TRUE) {
                         /* Update the search result. */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


28) modules/contrib/mpr/src/InvitationHtmlRouteProvider.php:28

    ---------- begin diff ----------
@@ @@
     if ($send_form_route = $this->getSendFormRoute($entity_type)) {
       $collection->add("entity.{$entity_type_id}.send_form", $send_form_route);
     }
-    
+
     if ($retract_form_route = $this->getRetractFormRoute($entity_type)) {
       $collection->add("entity.{$entity_type_id}.retract_form", $retract_form_route);
     }    
-    
+
 //    if ($accept_form_route = $this->getAcceptFormRoute($entity_type)) {
 //      $collection->add("entity.{$entity_type_id}.accept_form", $accept_form_route);
 //    }    
-    
+
 //    if ($accept_form_route = $this->getSendFormRoute($entity_type)) {
 //      $collection->add("entity.{$entity_type_id}.cancel_form", $accept_form_route);
 //    }       
@@ @@
     return $collection;
   }

-  
-  
-  

+
+
+
   /**
    * Gets the send form route.
    *
@@ @@
     }
   }

-  
-  
-  
-  

+
+
+
+
   /**
    * Gets the retract form route.
    *
@@ @@
       return $route;
     }
   }
-  
-  
-  
+
+
+
 //  
 //  /**
 //   * Gets the acceptance form route.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


29) modules/contrib/mpr/src/Form/UserPaperForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\multi_peer_review\Form;

+use Drupal\user\Entity\User;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Component\Render\FormattableMarkup;
@@ @@
             ->condition('status', 1)
             ->condition('roles', MPRCommon::ROLE_STAFF)
             ->execute();
-            $staff_users = \Drupal\user\Entity\User::loadMultiple($staff_user_ids);
+            $staff_users = User::loadMultiple($staff_user_ids);
             
             // Compile a list of email addresses.
             $recipients = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 29 files have been changed by Rector                                      

