modules/contrib/fraction/fraction.install
modules/contrib/fraction/src/Plugin/Field/FieldWidget/FractionWidget.php
modules/contrib/fraction/fraction.module
modules/contrib/fraction/fraction.post_update.php
modules/contrib/fraction/src/Plugin/Validation/Constraint/FractionConstraint.php
modules/contrib/fraction/src/Plugin/Validation/Constraint/FractionConstraintValidator.php
modules/contrib/fraction/src/Plugin/migrate/field/d7/FractionField.php
modules/contrib/fraction/src/Plugin/migrate/process/DecimalFraction.php
modules/contrib/fraction/src/Plugin/views/field/Fraction.php
modules/contrib/fraction/fraction.views.inc
modules/contrib/fraction/src/Element/Fraction.php
modules/contrib/fraction/src/Plugin/views/field/FractionField.php
modules/contrib/fraction/src/Plugin/views/filter/Fraction.php
modules/contrib/fraction/src/Element/FractionDecimal.php
modules/contrib/fraction/src/Plugin/views/sort/Fraction.php
modules/contrib/fraction/tests/modules/fraction_test/fraction_test.module
modules/contrib/fraction/tests/src/Functional/FractionFieldTest.php
modules/contrib/fraction/src/Feeds/Target/FractionTarget.php
modules/contrib/fraction/src/Fraction.php
modules/contrib/fraction/src/FractionDecimalProperty.php
modules/contrib/fraction/src/FractionInterface.php
modules/contrib/fraction/src/FractionProperty.php
modules/contrib/fraction/src/Plugin/Field/FieldFormatter/FractionDecimalFormatter.php
modules/contrib/fraction/src/Plugin/Field/FieldFormatter/FractionFormatter.php
modules/contrib/fraction/src/Plugin/Field/FieldFormatter/FractionFormatterBase.php
modules/contrib/fraction/src/Plugin/Field/FieldFormatter/PercentageFormatter.php
modules/contrib/fraction/src/Plugin/Field/FieldType/FractionItem.php
modules/contrib/fraction/src/Plugin/Field/FieldWidget/FractionDecimalWidget.php
modules/contrib/fraction/tests/src/Kernel/FractionFieldTest.php
modules/contrib/fraction/tests/src/Kernel/FractionUpdateTest.php
modules/contrib/fraction/tests/src/Kernel/Plugin/Constraints/FractionConstraintTest.php
modules/contrib/fraction/tests/src/Unit/Feeds/Target/FractionTargetTest.php
modules/contrib/fraction/tests/src/Unit/FractionTest.php
modules/contrib/fraction/tests/src/Unit/process/DecimalFractionTest.php

5 files with changes
====================

1) modules/contrib/fraction/tests/src/Unit/process/DecimalFractionTest.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->plugin = new DecimalFraction([], 'decimal_fraction', []);
     parent::setUp();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/fraction/tests/src/Kernel/Plugin/Constraints/FractionConstraintTest.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritDoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     NodeType::create([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/fraction/tests/src/Kernel/FractionUpdateTest.php:50

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->connection = Database::getConnection();
     $this->schema = $this->connection->schema();
@@ @@
       $this->fail('Failed due to update going through when it should not.');
     }
     catch (UpdateException $e) {
-      $this->pass('Updating with field values higher than the limit thows a message.');
       foreach ($this->fieldsToUpdate as $field) {
         if ($field['table_name'] == 'node_field_data') continue;
         $this->assertFalse($this->tryUnsignedInsert($field['table_name'], $field['columns']), 'Column rejected a negative value.');
    ----------- end diff -----------

Applied rules:
 * PassRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/fraction/tests/src/Kernel/FractionFieldTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('node');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/fraction/tests/src/Functional/FractionFieldTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->drupalCreateUser([
       'view test entity',
@@ @@

     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][decimal]", '', 'Widget is displayed');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][decimal]", '');

     // Submit decimal value.
     $value = '14.5678';
@@ @@
     $edit = [
       "{$field_name}[0][decimal]" => $value,
     ];
-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
+    $this->submitForm($edit, $this->t('Save'));
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
     $id = $match[1];
-    $this->assertText($this->t('entity_test @id has been created.', ['@id' => $id]), 'Entity was created');
-    $this->assertRaw($value, 'Value is displayed.');
+    $this->assertSession()->pageTextContains($this->t('entity_test @id has been created.', ['@id' => $id]));
+    $this->assertSession()->responseContains($value);

     // Try to create entries with more than one decimal separator; assert fail.
     $wrong_entries = [
@@ @@
       $edit = [
         "{$field_name}[0][decimal]" => $wrong_entry,
       ];
-      $this->drupalPostForm(NULL, $edit, $this->t('Save'));
-      $this->assertRaw($this->t('%name must be a number.', ['%name' => $field_name]), 'Correctly failed to save value with more than one decimal point.');
+      $this->submitForm($edit, $this->t('Save'));
+      $this->assertSession()->responseContains($this->t('%name must be a number.', ['%name' => $field_name]));
     }

     // Try to create entries with minus sign not in the first position.
@@ @@
       $edit = [
         "{$field_name}[0][decimal]" => $wrong_entry,
       ];
-      $this->drupalPostForm(NULL, $edit, $this->t('Save'));
-      $this->assertRaw($this->t('%name must be a number.', ['%name' => $field_name]), 'Correctly failed to save value with minus sign in the wrong position.');
+      $this->submitForm($edit, $this->t('Save'));
+      $this->assertSession()->responseContains($this->t('%name must be a number.', ['%name' => $field_name]));
     }

     // Try to set a value above the maximum value.
@@ @@
     $edit = [
       "{$field_name}[0][decimal]" => $max + 0.123,
     ];
-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
-    $this->assertRaw($this->t('%name: the value may be no greater than %maximum.', ['%name' => $field_name, '%maximum' => $max]), 'Correctly failed to save value greater than maximum allowed value.');
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->responseContains($this->t('%name: the value may be no greater than %maximum.', ['%name' => $field_name, '%maximum' => $max]));

     // Try to set a value below the minimum value.
     $this->drupalGet('entity_test/add');
@@ @@
     $edit = [
       "{$field_name}[0][decimal]" => $min - 0.123,
     ];
-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
-    $this->assertRaw($this->t('%name: the value may be no less than %minimum.', ['%name' => $field_name, '%minimum' => $min]), 'Correctly failed to save value less than minimum allowed value.');
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->responseContains($this->t('%name: the value may be no less than %minimum.', ['%name' => $field_name, '%minimum' => $min]));

     // Test the fraction decimal element limits.
     $this->drupalGet('entity_test/add');
@@ @@
     $edit = [
       "{$field_name}[0][decimal]" => 10.1234567891,
     ];
-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
-    $this->assertRaw($this->t('The maximum number of digits after the decimal place is 9.'));
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->responseContains($this->t('The maximum number of digits after the decimal place is 9.'));
   }

   /**
@@ @@

     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][decimal]", '', 'Widget is displayed');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][decimal]", '');

     // Submit negative decimal value.
     $value = '-14.5678';
@@ @@
     $edit = [
       "{$field_name}[0][decimal]" => $value,
     ];
-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
+    $this->submitForm($edit, $this->t('Save'));
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
     $id = $match[1];
-    $this->assertText($this->t('entity_test @id has been created.', ['@id' => $id]), 'Entity was created');
-    $this->assertRaw($value, 'Value is displayed.');
+    $this->assertSession()->pageTextContains($this->t('entity_test @id has been created.', ['@id' => $id]));
+    $this->assertSession()->responseContains($value);
   }

   /**
@@ @@

     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][fraction][numerator]", '', 'Numerator is displayed');
-    $this->assertFieldByName("{$field_name}[0][fraction][denominator]", '', 'Denominator is displayed');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][fraction][numerator]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][fraction][denominator]", '');

     // Submit fraction value.
     $edit = [
@@ @@
       "{$field_name}[0][fraction][numerator]" => 150,
       "{$field_name}[0][fraction][denominator]" => 10,
     ];
-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
+    $this->submitForm($edit, $this->t('Save'));
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
     $id = $match[1];
-    $this->assertText($this->t('entity_test @id has been created.', ['@id' => $id]), 'Entity was created');
-    $this->assertRaw('150', 'Numerator is displayed.');
-    $this->assertRaw('10', 'Denominator is displayed.');
+    $this->assertSession()->pageTextContains($this->t('entity_test @id has been created.', ['@id' => $id]));
+    $this->assertSession()->responseContains('150');
+    $this->assertSession()->responseContains('10');

     // Try to set a value above the maximum value.
     $this->drupalGet('entity_test/add');
@@ @@
       "{$field_name}[0][fraction][numerator]" => 15000,
       "{$field_name}[0][fraction][denominator]" => 10,
     ];
-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
-    $this->assertRaw($this->t('%name: the value may be no greater than %maximum.', ['%name' => $field_name, '%maximum' => $max]), 'Correctly failed to save value greater than maximum allowed value.');
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->responseContains($this->t('%name: the value may be no greater than %maximum.', ['%name' => $field_name, '%maximum' => $max]));

     // Try to set a value below the minimum value.
     $this->drupalGet('entity_test/add');
@@ @@
       "{$field_name}[0][fraction][numerator]" => 1,
       "{$field_name}[0][fraction][denominator]" => 10,
     ];
-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
-    $this->assertRaw($this->t('%name: the value may be no less than %minimum.', ['%name' => $field_name, '%minimum' => $min]), 'Correctly failed to save value less than minimum allowed value.');
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->responseContains($this->t('%name: the value may be no less than %minimum.', ['%name' => $field_name, '%minimum' => $min]));

     // Empty denominator.
     $this->drupalGet('entity_test/add');
@@ @@
     $edit = [
       "{$field_name}[0][fraction][numerator]" => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
-    $this->assertRaw($this->t('The denominator of a fraction cannot be zero or empty (if a numerator is provided).'));
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->responseContains($this->t('The denominator of a fraction cannot be zero or empty (if a numerator is provided).'));

     // Numerators must be between -9223372036854775808 and 9223372036854775807.
     $this->drupalGet('entity_test/add');
@@ @@
       "{$field_name}[0][fraction][numerator]" => '-9223372036854775809',
       "{$field_name}[0][fraction][denominator]" => 10,
     ];
-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
-    $this->assertRaw($this->t('The numerator of a fraction must be between -9223372036854775808 and 9223372036854775807.'));
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->responseContains($this->t('The numerator of a fraction must be between -9223372036854775808 and 9223372036854775807.'));
     $this->drupalGet('entity_test/add');
     $edit = [
       "{$field_name}[0][fraction][numerator]" => '9223372036854775808',
       "{$field_name}[0][fraction][denominator]" => 10,
     ];
-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
-    $this->assertRaw($this->t('The numerator of a fraction must be between -9223372036854775808 and 9223372036854775807.'));
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->responseContains($this->t('The numerator of a fraction must be between -9223372036854775808 and 9223372036854775807.'));

     // Denominators must be between 0 and 2147483647.
     $this->drupalGet('entity_test/add');
@@ @@
       "{$field_name}[0][fraction][numerator]" => 10,
       "{$field_name}[0][fraction][denominator]" => -1,
     ];
-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
-    $this->assertRaw($this->t('The denominator of a fraction must be greater than 0 and less than 2147483647.'));
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->responseContains($this->t('The denominator of a fraction must be greater than 0 and less than 2147483647.'));
     $this->drupalGet('entity_test/add');
     $edit = [
       "{$field_name}[0][fraction][numerator]" => 10,
       "{$field_name}[0][fraction][denominator]" => 2147483648,
     ];
-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
-    $this->assertRaw($this->t('The denominator of a fraction must be greater than 0 and less than 2147483647.'));
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->responseContains($this->t('The denominator of a fraction must be greater than 0 and less than 2147483647.'));
   }

   /**
@@ @@

     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][decimal]", '', 'Widget is displayed');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][decimal]", '');

     // Submit decimal value.
     $value = '1.234';
@@ @@
     $edit = [
       "{$field_name}[0][decimal]" => $value,
     ];
-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
+    $this->submitForm($edit, $this->t('Save'));
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
     $id = $match[1];
-    $this->assertText($this->t('entity_test @id has been created.', ['@id' => $id]), 'Entity was created');
-    $this->assertRaw($value, 'Value is displayed.');
+    $this->assertSession()->pageTextContains($this->t('entity_test @id has been created.', ['@id' => $id]));
+    $this->assertSession()->responseContains($value);

     // Empty the field.
     $edit = [
       "{$field_name}[0][decimal]" => NULL,
     ];
-    $this->drupalPostForm("entity_test/manage/$id/edit", $edit, $this->t('Save'));
-    $this->assertNoRaw($value, 'Value is removed.');
+    $this->drupalGet("entity_test/manage/$id/edit");
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->responseNotContains($value);

     // The field should have no value (not 0, just empty).
     $this->drupalGet("entity_test/manage/$id/edit");
-    $elements = $this->xpath($this->constructFieldXpath('name', "{$field_name}[0][decimal]"));
+    $elements = $this->xpath($this->getSession()->getPage()->findField("{$field_name}[0][decimal]"));
     $element = reset($elements);
-    $this->assertIdentical($element->getValue(), '', 'Field is empty');
+    $this->assertSame($element->getValue(), '', 'Field is empty');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertIdenticalRector
 * AssertNoRawRector
 * AssertRawRector
 * AssertTextRector
 * ConstructFieldXpathRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 5 files have been changed by Rector                                       

