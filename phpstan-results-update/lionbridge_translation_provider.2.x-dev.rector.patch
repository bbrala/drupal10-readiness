diff --git a/tmgmt_contentapi/src/ContentApiTranslatorUI.php b/tmgmt_contentapi/src/ContentApiTranslatorUI.php
index 75829cd..2522c92 100644
--- a/tmgmt_contentapi/src/ContentApiTranslatorUI.php
+++ b/tmgmt_contentapi/src/ContentApiTranslatorUI.php
@@ -531,7 +531,7 @@ class ContentApiTranslatorUI extends TranslatorPluginUiBase {
       $tokenobj = $capi->oauth2TokenPost($tokenrequest);
     }
     $capiVersion = 2;
-    If($job->getState() > \Drupal\tmgmt\Entity\Job::STATE_UNPROCESSED) {
+    If($job->getState() > Job::STATE_UNPROCESSED) {
  
       $jobapi = new JobApi();
 
@@ -596,7 +596,7 @@ class ContentApiTranslatorUI extends TranslatorPluginUiBase {
               }    
             } catch (Exception $e) {
 
-		
+
 				$msg = $e->getMessage();
 		      	if(strlen($msg) > 200){
 		            $msg = substr($msg,0,200);
@@ -608,10 +608,10 @@ class ContentApiTranslatorUI extends TranslatorPluginUiBase {
           }
           
         }
-        \Drupal\tmgmt_contentapi\Util\ConentApiHelper::capiJobSetStoredData($job, ['jobId' => $capijobid ,'jobStatus' => $jobstatus, 'providerId' => $prid, 'jobType' => $capiVersion]);
+        ConentApiHelper::capiJobSetStoredData($job, ['jobId' => $capijobid ,'jobStatus' => $jobstatus, 'providerId' => $prid, 'jobType' => $capiVersion]);
         
         if($jobstatus == StatusCodeEnum::REVIEW_TRANSLATION){
-          $updatedremotejob = \Drupal\tmgmt_contentapi\Util\ConentApiHelper::checkJobFinishAndApproveRemote($job);
+          $updatedremotejob = ConentApiHelper::checkJobFinishAndApproveRemote($job);
           $projectInfo = $updatedremotejob != NULL ? $updatedremotejob:$projectInfo;
         }
       }
diff --git a/tmgmt_contentapi/src/Plugin/tmgmt/Translator/ContentApiTranslator.php b/tmgmt_contentapi/src/Plugin/tmgmt/Translator/ContentApiTranslator.php
index 4ee6949..fe653eb 100644
--- a/tmgmt_contentapi/src/Plugin/tmgmt/Translator/ContentApiTranslator.php
+++ b/tmgmt_contentapi/src/Plugin/tmgmt/Translator/ContentApiTranslator.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\tmgmt_contentapi\Plugin\tmgmt\Translator;
 
+use Drupal\Core\Render\Markup;
+use Drupal\node\Entity\Node;
+use Drupal\file\Entity\File;
 use Drupal\Component\Utility\Xss;
 
 use Drupal\Core\Entity\Entity;
@@ -91,7 +94,7 @@ class ContentApiTranslator extends TranslatorPluginBase{
     if ($jobtranslatorId == 'contentapi') {
       $source = $this->requestTranslationSource($job);
     }
-    
+
     //return $source;
   }
 
@@ -132,7 +135,7 @@ class ContentApiTranslator extends TranslatorPluginBase{
             $labelname = $joblabel;
             $name = $labelname . "_" . $job->id() . "_all_"  . $job->getRemoteSourceLanguage() . '_' . $job->getRemoteTargetLanguage() . '.xlf';
             $jobpath = $allfilespath . "/" . $name;
-            $file = file_save_data($exporter->export($job), $jobpath, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
+            $file = \Drupal::service('file.repository')->writeData($exporter->export($job), $jobpath, FileSystemInterface::EXISTS_REPLACE);
             $filearraytodelte[] = $file;
             $filearrayexportedfiles['all'] = $file;
           }
@@ -142,7 +145,7 @@ class ContentApiTranslator extends TranslatorPluginBase{
               $labelname = GeneralHelper::getStringNoSpeChars($item->label());
               $name = $labelname . "_" . $job->id() . "_" . $item->id() . "_" . $job->getRemoteSourceLanguage() . '_' . $job->getRemoteTargetLanguage() . '.xlf';
               $itempath = $allfilespath . "/" . $name;
-              $file = file_save_data($exporter->exportItem($item), $itempath, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
+              $file = \Drupal::service('file.repository')->writeData($exporter->exportItem($item), $itempath, FileSystemInterface::EXISTS_REPLACE);
               $filearraytodelte[] = $file;
               $filearrayexportedfiles[$item->id()] = $file;
             }
@@ -249,8 +252,8 @@ class ContentApiTranslator extends TranslatorPluginBase{
             // TODO
             // Add content api bundle to job's settings.
             GeneralHelper::addCpaSettingsToJob($job, serialize($contentapibundle));
-            $messageTopass .= '<a href="' . file_create_url($zipPath) . '">' . Xss::filter(GeneralHelper::getJobLabelNoSpeChars($job)) . '</a>';
-            \Drupal::messenger()->addMessage(\Drupal\Core\Render\Markup::create($messageTopass));
+            $messageTopass .= '<a href="' . \Drupal::service('file_url_generator')->generateAbsoluteString($zipPath) . '">' . Xss::filter(GeneralHelper::getJobLabelNoSpeChars($job)) . '</a>';
+            \Drupal::messenger()->addMessage(Markup::create($messageTopass));
             if($job->getSetting('capi-settings')['quote']['is_quote']){
               $job->submitted("This job was submitted for a quote. To submit your job for processing, you must log into your translation provider's system to approve this quote.");
             }
@@ -265,7 +268,7 @@ class ContentApiTranslator extends TranslatorPluginBase{
             }
             $projectInfo = $jobsubmitresult;
 
-            \Drupal\tmgmt_contentapi\Util\ConentApiHelper::capiJobSetStoredData($job, ['jobId' => $projectInfo->getJobId() ,'jobStatus' => $projectInfo->getStatusCode(), 'providerId' => $projectInfo->getProviderId(), 'jobType' => 2]);
+            ConentApiHelper::capiJobSetStoredData($job, ['jobId' => $projectInfo->getJobId() ,'jobStatus' => $projectInfo->getStatusCode(), 'providerId' => $projectInfo->getProviderId(), 'jobType' => 2]);
             
           }
         }
@@ -292,7 +295,7 @@ class ContentApiTranslator extends TranslatorPluginBase{
             $labelname = $joblabel;
             $name = $labelname . "_" . $job->id() . "_all_"  . $job->getRemoteSourceLanguage() . '_' . $job->getRemoteTargetLanguage() . '.xlf';
             $jobpath = $allfilespath . "/" . $name;
-            $file = file_save_data($exporter->export($job), $jobpath, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
+            $file = \Drupal::service('file.repository')->writeData($exporter->export($job), $jobpath, FileSystemInterface::EXISTS_REPLACE);
             $filearraytodelte[] = $file;
             $filearrayexportedfiles['all'] = $file;
           }
@@ -302,7 +305,7 @@ class ContentApiTranslator extends TranslatorPluginBase{
               $labelname = GeneralHelper::getStringNoSpeChars($item->label());
               $name = $labelname . "_" . $job->id() . "_" . $item->id() . "_" . $job->getRemoteSourceLanguage() . '_' . $job->getRemoteTargetLanguage() . '.xlf';
               $itempath = $allfilespath . "/" . $name;
-              $file = file_save_data($exporter->exportItem($item), $itempath, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
+              $file = \Drupal::service('file.repository')->writeData($exporter->exportItem($item), $itempath, FileSystemInterface::EXISTS_REPLACE);
               $filearraytodelte[] = $file;
               $filearrayexportedfiles[$item->id()] = $file;
             }
@@ -382,8 +385,8 @@ class ContentApiTranslator extends TranslatorPluginBase{
           if ($jobsubmitresult) {
             // TODO
             GeneralHelper::addCpaSettingsToJob($job, serialize($contentapibundle));
-            $messageTopass .= '<a href="' . file_create_url($zipPath) . '">' . Xss::filter(GeneralHelper::getJobLabelNoSpeChars($job)) . '</a>';
-            \Drupal::messenger()->addMessage(\Drupal\Core\Render\Markup::create($messageTopass));
+            $messageTopass .= '<a href="' . \Drupal::service('file_url_generator')->generateAbsoluteString($zipPath) . '">' . Xss::filter(GeneralHelper::getJobLabelNoSpeChars($job)) . '</a>';
+            \Drupal::messenger()->addMessage(Markup::create($messageTopass));
             //set job to finished
             $job->setState(Job::STATE_FINISHED);
             foreach ($job->getItems() as $item){
@@ -487,19 +490,19 @@ class ContentApiTranslator extends TranslatorPluginBase{
               //node id
               $nodeid = $item->getFields()["item_id"][0]->getValue()["value"];
               //to get target id
-              if(\Drupal\node\Entity\Node::load($nodeid) == null){
+              if(Node::load($nodeid) == null){
                 continue;
               }
-              if(!\Drupal\node\Entity\Node::load($nodeid)->hasField("field_reference")){
+              if(!Node::load($nodeid)->hasField("field_reference")){
                 continue;
               }
 
-              if(sizeof(\Drupal\node\Entity\Node::load($nodeid)->getFields()["field_reference"]->getValue()) == 0){
+              if(sizeof(Node::load($nodeid)->getFields()["field_reference"]->getValue()) == 0){
                 continue;
               }
               
               //to get target id
-              $targetid = \Drupal\node\Entity\Node::load($nodeid)->getFields()["field_reference"]->getValue()[0]["target_id"];
+              $targetid = Node::load($nodeid)->getFields()["field_reference"]->getValue()[0]["target_id"];
               
               if($targetid == null)
               {
@@ -507,7 +510,7 @@ class ContentApiTranslator extends TranslatorPluginBase{
               }
 
               //ref url
-              $refFile = \Drupal\file\Entity\File::load($targetid);
+              $refFile = File::load($targetid);
 
               //$file = file_save_data($exporter->exportItem($item), $itempath, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
               //$filearraytodelte[] = $file;
@@ -631,7 +634,7 @@ class ContentApiTranslator extends TranslatorPluginBase{
             $labelname = $joblabel;
             $name = $labelname . "_" . $job->id() . "_all_"  . $job->getRemoteSourceLanguage() . '_' . $job->getRemoteTargetLanguage() . '.xlf';
             $jobpath = $allfilespath . "/" . $name;
-            $file = file_save_data($exporter->export($job), $jobpath, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
+            $file = \Drupal::service('file.repository')->writeData($exporter->export($job), $jobpath, FileSystemInterface::EXISTS_REPLACE);
             $filearraytodelte[] = $file;
             $filearrayexportedfiles['all'] = $file;
           }
@@ -641,7 +644,7 @@ class ContentApiTranslator extends TranslatorPluginBase{
               $labelname = GeneralHelper::getStringNoSpeChars($item->label());
               $name = $labelname . "_" . $job->id() . "_" . $item->id() . "_" . $job->getRemoteSourceLanguage() . '_' . $job->getRemoteTargetLanguage() . '.xlf';
               $itempath = $allfilespath . "/" . $name;
-              $file = file_save_data($exporter->exportItem($item), $itempath, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
+              $file = \Drupal::service('file.repository')->writeData($exporter->exportItem($item), $itempath, FileSystemInterface::EXISTS_REPLACE);
               $filearraytodelte[] = $file;
               $filearrayexportedfiles[$item->id()] = $file;
             }
@@ -711,8 +714,8 @@ class ContentApiTranslator extends TranslatorPluginBase{
           if ($jobsubmitresult) {
             // TODO
             GeneralHelper::addCpaSettingsToJob($job, serialize($contentapibundle));
-            $messageTopass .= '<a href="' . file_create_url($zipPath) . '">' . Xss::filter(GeneralHelper::getJobLabelNoSpeChars($job)) . '</a>';
-            \Drupal::messenger()->addMessage(\Drupal\Core\Render\Markup::create($messageTopass));
+            $messageTopass .= '<a href="' . \Drupal::service('file_url_generator')->generateAbsoluteString($zipPath) . '">' . Xss::filter(GeneralHelper::getJobLabelNoSpeChars($job)) . '</a>';
+            \Drupal::messenger()->addMessage(Markup::create($messageTopass));
             //set job to finished
             $job->setState(Job::STATE_FINISHED);
             foreach ($job->getItems() as $item){
@@ -780,9 +783,9 @@ class ContentApiTranslator extends TranslatorPluginBase{
     $dirname = dirname($path);
 
     if (\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY)) {
-      $file = file_save_data($export->export($job), $path);
+      $file = \Drupal::service('file.repository')->writeData($export->export($job), $path);
       \Drupal::service('file.usage')->add($file, 'tmgmt_fwconnector', 'tmgmt_job', $job->id());
-      $job->submitted('Exported file can be downloaded <a href="@link">here</a>.', array('@link' => file_create_url($path)));
+      $job->submitted('Exported file can be downloaded <a href="@link">here</a>.', array('@link' => \Drupal::service('file_url_generator')->generateAbsoluteString($path)));
     }
   }
 
diff --git a/tmgmt_contentapi/src/Plugin/views/field/JobProvideridField.php b/tmgmt_contentapi/src/Plugin/views/field/JobProvideridField.php
index 4c2579d..66dd7eb 100644
--- a/tmgmt_contentapi/src/Plugin/views/field/JobProvideridField.php
+++ b/tmgmt_contentapi/src/Plugin/views/field/JobProvideridField.php
@@ -176,14 +176,14 @@ class JobProvideridField extends FieldPluginBase {
       $capisettings = $translator->getSetting('capi-settings');
       $capi = new TokenApi();
       $token = $capi->getToken($capisettings['capi_username_ctt'],$capisettings['capi_password_ctt']);
-      
-  
+
+
         if(isset($token) && $token != '') {
             $providersarray = array();
             try {
               $providerapi = new ProviderApi();
               $providers = $providerapi->providersGet($token);
-              
+
               foreach ($providers as $provider) {
                 $prid = $provider->getProviderId();
                 $prname = $provider->getProviderName();
diff --git a/tmgmt_contentapi/src/Swagger/Client/Api/FileApi.php b/tmgmt_contentapi/src/Swagger/Client/Api/FileApi.php
index c100d56..9c78a3a 100644
--- a/tmgmt_contentapi/src/Swagger/Client/Api/FileApi.php
+++ b/tmgmt_contentapi/src/Swagger/Client/Api/FileApi.php
@@ -29,6 +29,8 @@
 namespace Drupal\tmgmt_contentapi\Swagger\Client\Api;
 
 
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ -368,7 +370,7 @@ class FileApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -383,11 +385,11 @@ class FileApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -422,7 +424,7 @@ class FileApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -704,7 +706,7 @@ class FileApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -719,11 +721,11 @@ class FileApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -758,7 +760,7 @@ class FileApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost1() . $resourcePath . ($query ? "?{$query}" : ''),
diff --git a/tmgmt_contentapi/src/Swagger/Client/Api/JobApi.php b/tmgmt_contentapi/src/Swagger/Client/Api/JobApi.php
index b808db8..c3384f2 100644
--- a/tmgmt_contentapi/src/Swagger/Client/Api/JobApi.php
+++ b/tmgmt_contentapi/src/Swagger/Client/Api/JobApi.php
@@ -28,6 +28,8 @@
 
 namespace Drupal\tmgmt_contentapi\Swagger\Client\Api;
 
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ -358,7 +360,7 @@ class JobApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -373,11 +375,11 @@ class JobApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -408,7 +410,7 @@ class JobApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -682,7 +684,7 @@ class JobApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -697,11 +699,11 @@ class JobApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -733,7 +735,7 @@ class JobApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -1007,7 +1009,7 @@ class JobApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -1022,11 +1024,11 @@ class JobApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -1058,7 +1060,7 @@ class JobApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost1() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -1332,7 +1334,7 @@ class JobApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -1347,11 +1349,11 @@ class JobApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -1383,7 +1385,7 @@ class JobApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'DELETE',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -1672,7 +1674,7 @@ class JobApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -1687,11 +1689,11 @@ class JobApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -1723,7 +1725,7 @@ class JobApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -2012,7 +2014,7 @@ class JobApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -2027,11 +2029,11 @@ class JobApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -2058,7 +2060,7 @@ class JobApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost1() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -2346,7 +2348,7 @@ class JobApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -2361,11 +2363,11 @@ class JobApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -2396,7 +2398,7 @@ class JobApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -2684,7 +2686,7 @@ class JobApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -2699,11 +2701,11 @@ class JobApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -2735,7 +2737,7 @@ class JobApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -3009,7 +3011,7 @@ class JobApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -3024,11 +3026,11 @@ class JobApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -3060,7 +3062,7 @@ class JobApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -3321,7 +3323,7 @@ class JobApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -3336,11 +3338,11 @@ class JobApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -3371,7 +3373,7 @@ class JobApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
diff --git a/tmgmt_contentapi/src/Swagger/Client/Api/ProviderApi.php b/tmgmt_contentapi/src/Swagger/Client/Api/ProviderApi.php
index 45c4902..34f446c 100644
--- a/tmgmt_contentapi/src/Swagger/Client/Api/ProviderApi.php
+++ b/tmgmt_contentapi/src/Swagger/Client/Api/ProviderApi.php
@@ -28,6 +28,8 @@
 
 namespace Drupal\tmgmt_contentapi\Swagger\Client\Api;
 
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ -200,7 +202,7 @@ class ProviderApi
           $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
         );
       }
-      
+
       $statusCode = $response->getStatusCode();
 
       if ($statusCode < 200 || $statusCode > 299) {
@@ -395,7 +397,7 @@ class ProviderApi
       $httpBody = $_tempBody;
       // \stdClass has no __toString(), so we should encode it manually
       if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-        $httpBody = \GuzzleHttp\json_encode($httpBody);
+        $httpBody = json_encode($httpBody);
       }
     } elseif (count($formParams) > 0) {
       if ($multipart) {
@@ -410,11 +412,11 @@ class ProviderApi
         $httpBody = new MultipartStream($multipartContents);
 
       } elseif ($headers['Content-Type'] === 'application/json') {
-        $httpBody = \GuzzleHttp\json_encode($formParams);
+        $httpBody = json_encode($formParams);
 
       } else {
         // for HTTP post (form)
-        $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+        $httpBody = build_query($formParams);
       }
     }
 
@@ -443,7 +445,7 @@ class ProviderApi
       $headers
     );
 
-    $query = \GuzzleHttp\Psr7\build_query($queryParams);
+    $query = build_query($queryParams);
     return new Request(
       'GET',
       $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -717,7 +719,7 @@ class ProviderApi
       $httpBody = $_tempBody;
       // \stdClass has no __toString(), so we should encode it manually
       if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-        $httpBody = \GuzzleHttp\json_encode($httpBody);
+        $httpBody = json_encode($httpBody);
       }
     } elseif (count($formParams) > 0) {
       if ($multipart) {
@@ -732,11 +734,11 @@ class ProviderApi
         $httpBody = new MultipartStream($multipartContents);
 
       } elseif ($headers['Content-Type'] === 'application/json') {
-        $httpBody = \GuzzleHttp\json_encode($formParams);
+        $httpBody = json_encode($formParams);
 
       } else {
         // for HTTP post (form)
-        $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+        $httpBody = build_query($formParams);
       }
     }
 
@@ -765,7 +767,7 @@ class ProviderApi
       $headers
     );
 
-    $query = \GuzzleHttp\Psr7\build_query($queryParams);
+    $query = build_query($queryParams);
     return new Request(
       'GET',
       $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -1039,7 +1041,7 @@ class ProviderApi
       $httpBody = $_tempBody;
       // \stdClass has no __toString(), so we should encode it manually
       if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-        $httpBody = \GuzzleHttp\json_encode($httpBody);
+        $httpBody = json_encode($httpBody);
       }
     } elseif (count($formParams) > 0) {
       if ($multipart) {
@@ -1054,11 +1056,11 @@ class ProviderApi
         $httpBody = new MultipartStream($multipartContents);
 
       } elseif ($headers['Content-Type'] === 'application/json') {
-        $httpBody = \GuzzleHttp\json_encode($formParams);
+        $httpBody = json_encode($formParams);
 
       } else {
         // for HTTP post (form)
-        $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+        $httpBody = build_query($formParams);
       }
     }
 
@@ -1087,7 +1089,7 @@ class ProviderApi
       $headers
     );
 
-    $query = \GuzzleHttp\Psr7\build_query($queryParams);
+    $query = build_query($queryParams);
     return new Request(
       'GET',
       $this->config->getHost1() . $resourcePath . ($query ? "?{$query}" : ''),
diff --git a/tmgmt_contentapi/src/Swagger/Client/Api/RequestApi.php b/tmgmt_contentapi/src/Swagger/Client/Api/RequestApi.php
index 690aa5c..e848dae 100644
--- a/tmgmt_contentapi/src/Swagger/Client/Api/RequestApi.php
+++ b/tmgmt_contentapi/src/Swagger/Client/Api/RequestApi.php
@@ -28,6 +28,8 @@
 
 namespace Drupal\tmgmt_contentapi\Swagger\Client\Api;
 
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ -381,7 +383,7 @@ class RequestApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -396,11 +398,11 @@ class RequestApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -426,7 +428,7 @@ class RequestApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -743,7 +745,7 @@ class RequestApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -758,11 +760,11 @@ class RequestApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -794,7 +796,7 @@ class RequestApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -1082,7 +1084,7 @@ class RequestApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -1097,11 +1099,11 @@ class RequestApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -1132,7 +1134,7 @@ class RequestApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -1420,7 +1422,7 @@ class RequestApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -1435,11 +1437,11 @@ class RequestApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -1470,7 +1472,7 @@ class RequestApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost1() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -1745,7 +1747,7 @@ class RequestApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -1760,11 +1762,11 @@ class RequestApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -1796,7 +1798,7 @@ class RequestApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -2071,7 +2073,7 @@ class RequestApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -2086,11 +2088,11 @@ class RequestApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -2122,7 +2124,7 @@ class RequestApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost1() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -2410,7 +2412,7 @@ class RequestApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -2425,11 +2427,11 @@ class RequestApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -2461,7 +2463,7 @@ class RequestApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -2749,7 +2751,7 @@ class RequestApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -2764,11 +2766,11 @@ class RequestApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -2800,7 +2802,7 @@ class RequestApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -3093,7 +3095,7 @@ class RequestApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -3108,11 +3110,11 @@ class RequestApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -3144,7 +3146,7 @@ class RequestApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'DELETE',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -3437,7 +3439,7 @@ class RequestApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -3452,11 +3454,11 @@ class RequestApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -3488,7 +3490,7 @@ class RequestApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -3776,7 +3778,7 @@ class RequestApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -3791,11 +3793,11 @@ class RequestApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -3826,7 +3828,7 @@ class RequestApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -4114,7 +4116,7 @@ class RequestApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -4129,11 +4131,11 @@ class RequestApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -4164,7 +4166,7 @@ class RequestApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -4437,7 +4439,7 @@ class RequestApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -4452,11 +4454,11 @@ class RequestApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -4488,7 +4490,7 @@ class RequestApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
diff --git a/tmgmt_contentapi/src/Swagger/Client/Api/SourceFileApi.php b/tmgmt_contentapi/src/Swagger/Client/Api/SourceFileApi.php
index 417433c..5a40380 100644
--- a/tmgmt_contentapi/src/Swagger/Client/Api/SourceFileApi.php
+++ b/tmgmt_contentapi/src/Swagger/Client/Api/SourceFileApi.php
@@ -28,6 +28,8 @@
 
 namespace Drupal\tmgmt_contentapi\Swagger\Client\Api;
 
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ -414,7 +416,7 @@ class SourceFileApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -429,11 +431,11 @@ class SourceFileApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -456,7 +458,7 @@ class SourceFileApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
diff --git a/tmgmt_contentapi/src/Swagger/Client/Api/TokenApi.php b/tmgmt_contentapi/src/Swagger/Client/Api/TokenApi.php
index 9fde9ec..f83cbd2 100644
--- a/tmgmt_contentapi/src/Swagger/Client/Api/TokenApi.php
+++ b/tmgmt_contentapi/src/Swagger/Client/Api/TokenApi.php
@@ -28,6 +28,8 @@
 
 namespace Drupal\tmgmt_contentapi\Swagger\Client\Api;
 
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ -315,7 +317,7 @@ class TokenApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -330,11 +332,11 @@ class TokenApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -350,7 +352,7 @@ class TokenApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost1() . $resourcePath . ($query ? "?{$query}" : ''),
diff --git a/tmgmt_contentapi/src/Swagger/Client/Api/TranslationContentApi.php b/tmgmt_contentapi/src/Swagger/Client/Api/TranslationContentApi.php
index 672eed6..6888f24 100644
--- a/tmgmt_contentapi/src/Swagger/Client/Api/TranslationContentApi.php
+++ b/tmgmt_contentapi/src/Swagger/Client/Api/TranslationContentApi.php
@@ -28,6 +28,8 @@
 
 namespace Drupal\tmgmt_contentapi\Swagger\Client\Api;
 
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ -386,7 +388,7 @@ class TranslationContentApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -401,11 +403,11 @@ class TranslationContentApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -436,7 +438,7 @@ class TranslationContentApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
diff --git a/tmgmt_contentapi/src/Swagger/Client/Api/TranslationMemoryApi.php b/tmgmt_contentapi/src/Swagger/Client/Api/TranslationMemoryApi.php
index 324e743..24299d6 100644
--- a/tmgmt_contentapi/src/Swagger/Client/Api/TranslationMemoryApi.php
+++ b/tmgmt_contentapi/src/Swagger/Client/Api/TranslationMemoryApi.php
@@ -28,6 +28,8 @@
 
 namespace Drupal\tmgmt_contentapi\Swagger\Client\Api;
 
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ -359,7 +361,7 @@ class TranslationMemoryApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -374,11 +376,11 @@ class TranslationMemoryApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -410,7 +412,7 @@ class TranslationMemoryApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
diff --git a/tmgmt_contentapi/src/Util/GeneralHelper.php b/tmgmt_contentapi/src/Util/GeneralHelper.php
index 076381a..acf0b2b 100644
--- a/tmgmt_contentapi/src/Util/GeneralHelper.php
+++ b/tmgmt_contentapi/src/Util/GeneralHelper.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_contentapi\Util;
 
+use Drupal\tmgmt\Entity\JobItem;
 use Drupal\file\FileInterface;
 use Drupal\tmgmt\Entity\Job;
 use Drupal\tmgmt\JobInterface;
@@ -161,7 +162,7 @@ class GeneralHelper {
       $groups = $loadedxml->xpath("//xliff:group[@id='" . $tjiid ."']");
       if(count($groups) == 1){
         $item->setState(Job::STATE_ACTIVE);
-        $job->setState(\Drupal\tmgmt\Entity\JobItem::STATE_ACTIVE);
+        $job->setState(JobItem::STATE_ACTIVE);
       }
     }
   }
diff --git a/tmgmt_contentapi/tmgmt_contentapi.module b/tmgmt_contentapi/tmgmt_contentapi.module
index 5a0550b..094e4b3 100644
--- a/tmgmt_contentapi/tmgmt_contentapi.module
+++ b/tmgmt_contentapi/tmgmt_contentapi.module
@@ -1,4 +1,11 @@
-<?php /** @noinspection PhpUnusedParameterInspection */
+<?php use Drupal\Core\Render\Markup;
+use Drupal\tmgmt_contentapi\Swagger\Client\ApiException;
+use Drupal\views\ViewExecutable;
+use Drupal\Core\Link;
+use Drupal\Core\Url;
+use Drupal\tmgmt\TranslatorPluginInterface;
+use Drupal\Core\Entity\EntityInterface;
+/** @noinspection PhpUnusedParameterInspection */
 
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Component\Utility\Xss;
@@ -135,7 +142,7 @@ function tmgmt_contentapi_update_tm_form_submit(array $form, FormStateInterface
           $labelname = $joblabel;
           $name = $labelname . "_" . $job->id() . "_all_"  . $job->getRemoteSourceLanguage() . '_' . $job->getRemoteTargetLanguage() . '.xlf';
           $jobpath = $allfilespath . "/" . $name;
-          $file = file_save_data($exporter->export($job), $jobpath, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
+          $file = \Drupal::service('file.repository')->writeData($exporter->export($job), $jobpath, FileSystemInterface::EXISTS_REPLACE);
           $filearraytodelte[] = $file;
           $filearrayexportedfiles['all'] = $file;
         }
@@ -145,7 +152,7 @@ function tmgmt_contentapi_update_tm_form_submit(array $form, FormStateInterface
             $labelname = GeneralHelper::getStringNoSpeChars($item->label());
             $name = $labelname . "_" . $job->id() . "_" . $item->id() . "_" . $job->getRemoteSourceLanguage() . '_' . $job->getRemoteTargetLanguage() . '.xlf';
             $itempath = $allfilespath . "/" . $name;
-            $file = file_save_data($exporter->exportItem($item), $itempath, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
+            $file = \Drupal::service('file.repository')->writeData($exporter->exportItem($item), $itempath, FileSystemInterface::EXISTS_REPLACE);
             $filearraytodelte[] = $file;
             $filearrayexportedfiles[$item->id()] = $file;
           }
@@ -217,8 +224,8 @@ function tmgmt_contentapi_update_tm_form_submit(array $form, FormStateInterface
         foreach ($filearraytodelte as $tempfile) {
           \Drupal::service('file_system')->delete($tempfile->getFileUri());
         }
-        $messageTopass .= '<a href="' . file_create_url($zipPath) . '">' . Xss::filter(GeneralHelper::getJobLabelNoSpeChars($job)) . '</a>';
-        \Drupal::messenger()->addMessage(\Drupal\Core\Render\Markup::create($messageTopass));
+        $messageTopass .= '<a href="' . \Drupal::service('file_url_generator')->generateAbsoluteString($zipPath) . '">' . Xss::filter(GeneralHelper::getJobLabelNoSpeChars($job)) . '</a>';
+        \Drupal::messenger()->addMessage(Markup::create($messageTopass));
       }
       else {
         throw new \Exception("Could not create directory for export: " . $allfilespath);
@@ -259,7 +266,7 @@ function tmgmt_contentapi_import(JobInterface $job,$filedatastring,$name){
     $dirname = dirname($path);
     //\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY);
     if (\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY)) {
-      $file = file_save_data($filedatastring, $path, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
+      $file = \Drupal::service('file.repository')->writeData($filedatastring, $path, FileSystemInterface::EXISTS_REPLACE);
       $mimetype = $file->getMimeType();//\Drupal::service('file.mime_type.guesser')->guess($path);
       $filearray = null;
       if ($mimetype == 'application/zip') {
@@ -270,7 +277,7 @@ function tmgmt_contentapi_import(JobInterface $job,$filedatastring,$name){
           if ($ziparchive->extractTo(\Drupal::service('file_system')->realpath($pathtoextract))) {
             $ziparchive->close();
             $file->delete();
-            $filearray = CpcreateFileObjectFromStdClass(file_scan_directory($pathtoextract, '/.*\.xlf$/'));
+            $filearray = CpcreateFileObjectFromStdClass(\Drupal::service('file_system')->scanDirectory($pathtoextract, '/.*\.xlf$/'));
           }
 
         }
@@ -591,13 +598,13 @@ function tmgmt_contentapi_fix_older_jobs($cttToken){
       $capijobid = isset($requestobjs[0]) && count($requestobjs) > 0 ? $requestobjs[0]->getJobId() : NULL;
     }
     
-    if($capijobid != NULL && $job->getState() > \Drupal\tmgmt\Entity\Job::STATE_UNPROCESSED) {
+    if($capijobid != NULL && $job->getState() > Job::STATE_UNPROCESSED) {
      $jobapi = new JobApi();  
      $capiVersion = 1;
      $projectInfo = $jobapi->jobsJobIdGetCtt($cttToken, $capijobid, "fullWithStats");
      $provider = $projectInfo->getProviderId();
      $jobstatus = 'IMPORTED';//$projectInfo->getStatusCode()->getStatusCode();
-     \Drupal\tmgmt_contentapi\Util\ConentApiHelper::capiJobSetStoredData($job, ['jobId' => $capijobid ,'jobStatus' => $jobstatus, 'providerId' => $provider, 'jobType' => $capiVersion]);
+     ConentApiHelper::capiJobSetStoredData($job, ['jobId' => $capijobid ,'jobStatus' => $jobstatus, 'providerId' => $provider, 'jobType' => $capiVersion]);
     }
   }
 }
@@ -674,7 +681,7 @@ function tmgmt_contentapi_downlaod_data_from_contentapi_by_job($capiToken, $cttT
   }
   catch (Exception $exception){
     $respbody = $exception->getMessage();
-    if($exception instanceof \Drupal\tmgmt_contentapi\Swagger\Client\ApiException){
+    if($exception instanceof ApiException){
       $respbody = $exception->getResponseBody();
     }
     $respbody = 'An error occured while fetching and importing files: '.$respbody;
@@ -793,7 +800,7 @@ function tmgtm_contentapi_file_download($uri) {
     ->condition('uri', $uri)
     ->execute();
   if ($fids) {
-    $files = \Drupal\file\Entity\File::loadMultiple($fids);
+    $files = File::loadMultiple($fids);
     foreach ($files as $item) {
       // Since some database servers sometimes use a case-insensitive comparison
       // by default, double check that the filename is an exact match.
@@ -908,7 +915,7 @@ function tmgmt_contentapi_tmgmt_job_delete(JobInterface $job) {
 }
 
 
-function tmgmt_contentapi_views_pre_view(Drupal\views\ViewExecutable $view) {
+function tmgmt_contentapi_views_pre_view(ViewExecutable $view) {
 
   if ($view->id() == 'tmgmt_job_overview') {
     $deliveryhtml = '';
@@ -1020,7 +1027,7 @@ function CpprocessHtmlForJoboverview(&$view){
       global $base_url;
       // Using Id here, as job label returns @title@title and @more more.
       $joblable = GeneralHelper::getJobLabel($job);
-      $pass_link = \Drupal::l(t($joblable), \Drupal\Core\Url::fromUri($base_url . '/admin/tmgmt/jobs/' . $jobid['value']));
+      $pass_link = Link::fromTextAndUrl(t($joblable), Url::fromUri($base_url . '/admin/tmgmt/jobs/' . $jobid['value']));
       $currentlink = $pass_link->getGeneratedLink();
 
       $deliveryhtml .= '<li>'.$currentlink .'</li>';
@@ -1050,7 +1057,7 @@ function CpcreateFileObjectFromStdClass($filearray){
 }
 
 
-function tmgmt_contentapi_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id){
+function tmgmt_contentapi_form_alter(&$form, FormStateInterface $form_state, $form_id){
   /*
   $myForm = $form;
   if($form_id == 'views_exposed_form'){
@@ -1229,7 +1236,7 @@ function setValidator(&$form, FormStateInterface &$form_state){
   }
 }
 
-function canCustomTranslate(TranslatorInterface $translator, JobInterface $job, \Drupal\tmgmt\TranslatorPluginInterface $plugin) {
+function canCustomTranslate(TranslatorInterface $translator, JobInterface $job, TranslatorPluginInterface $plugin) {
   $job_state = $job->getState();
   $capisettings = $translator->getSetting('capi-settings');
   $capi = new TokenApi();
@@ -1317,7 +1324,7 @@ function tmgmt_contentapi_check_empty_file($form,&$form_state){
   }
 }
 
-function tmgmt_contentapi_entity_operation_alter(array &$operations,\Drupal\Core\Entity\EntityInterface  $entity) {
+function tmgmt_contentapi_entity_operation_alter(array &$operations,EntityInterface  $entity) {
   /*
   $newop = $operations['manage'];
   if(!isset($operations['updatestatus'])){
@@ -1471,7 +1478,7 @@ function getProviderCtt($token, $providerId){
             $msg = substr($msg,0,200);
       }
       \Drupal::messenger()->addMessage($msg);
-		
+
       //\Drupal::messenger()->addMessage($e->getMessage());
     }
   }
