diff --git a/give.install b/give.install
index 5aae8dc..f25fbc9 100644
--- a/give.install
+++ b/give.install
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\give\Entity\Donation;
+use Drupal\views\Entity\View;
+use Drupal\user\Entity\Role;
 /**
  * @file
  * Install, update and uninstall functions for the give module.
@@ -383,7 +386,7 @@ function give_update_8009() {
   $donation_ids = $entity_type_manager->getStorage('give_donation')->getQuery()->execute();
   $user_storage = $entity_type_manager->getStorage('user');
   foreach ($donation_ids as $did) {
-    $don = \Drupal\give\Entity\Donation::load($did);
+    $don = Donation::load($did);
     $uids = $user_storage->getQuery()->condition('name', $don->name->value)->execute();
     if ($uid = reset($uids)) {
       $don->set('uid', $uid)->save();
@@ -421,7 +424,7 @@ function give_update_8009() {
 
   // Delete and re-install the give_donations view from file.
   // This needs testing... Maybe cache needs clearing too.
-  if ($view = \Drupal\views\Entity\View::load('give_donations')) {
+  if ($view = View::load('give_donations')) {
     $view->delete();
     // Hattip to https://gist.github.com/mikecrittenden/2d2c6734c506d509505fa79142125757
     $conf_name = 'views.view.give_donations';
@@ -439,7 +442,7 @@ function give_update_8009() {
  * change the permission names.
  */
 function give_update_9000() {
-  foreach (\Drupal\user\Entity\Role::loadMultiple() as $role) {
+  foreach (Role::loadMultiple() as $role) {
     /** @var \Drupal\user\Entity\Role $role */
     if ($role->hasPermission('create and edit give forms')) {
       $role->grantPermission('manage give forms')->save();
diff --git a/give.module b/give.module
index c654ae7..ba02bad 100644
--- a/give.module
+++ b/give.module
@@ -49,9 +49,9 @@ const STRIPE_CURRENCY_SYMBOLS = [
 function give_help($route_name, RouteMatchInterface $route_match) {
   switch ($route_name) {
     case 'help.page.give':
-      $menu_page = \Drupal::moduleHandler()->moduleExists('menu_ui') ? \Drupal::url('entity.menu.collection') : '#';
-      $block_page = \Drupal::moduleHandler()->moduleExists('block') ? \Drupal::url('block.admin_display') : '#';
-      $give_page = \Drupal::url('entity.give_form.collection');
+      $menu_page = \Drupal::moduleHandler()->moduleExists('menu_ui') ? Url::fromRoute('entity.menu.collection')->toString() : '#';
+      $block_page = \Drupal::moduleHandler()->moduleExists('block') ? Url::fromRoute('block.admin_display')->toString() : '#';
+      $give_page = Url::fromRoute('entity.give_form.collection')->toString();
       $output = '';
       $output .= '<h3>' . t('About') . '</h3>';
       $output .= '<p>' . t('The Give module allows anonymous and authenticated members to pay by card (via stripe) or pledge to pay by cheque or bank transfer using configurable donation forms. For more information, see the <a href=":give">online documentation for the Give module</a>.', [':give' => 'https://www.drupal.org/project/give']) . '</p>';
diff --git a/give.tokens.inc b/give.tokens.inc
index a5f4200..a9bea43 100644
--- a/give.tokens.inc
+++ b/give.tokens.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Render\Markup;
 /**
  * Implements hook_tokens().
  * Everything is done automatically, but we need to populate the name, from the donation owner
@@ -8,7 +9,7 @@ function give_tokens($type, $tokens, $data, $options, $bubbleable_metadata) {
   if ($type == 'give_donation') {
     $replacements = [];
     if (isset($tokens['name']) and ($data['give_donation']->getOwnerId())) {
-      $replacements['[give_donation:name]'] = \Drupal\Core\Render\Markup::create($data['give_donation']->getOwner()->getDisplayName());
+      $replacements['[give_donation:name]'] = Markup::create($data['give_donation']->getOwner()->getDisplayName());
     }
     if (isset($tokens['amount'])) {
       $replacements['[give_donation:amount]'] = format_stripe_currency($data['give_donation']->amount->value);
diff --git a/src/Entity/DonationViewBuilder.php b/src/Entity/DonationViewBuilder.php
index 0e2e01e..d63ac12 100644
--- a/src/Entity/DonationViewBuilder.php
+++ b/src/Entity/DonationViewBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\give\Entity;
 
+use Drupal\Core\Field\PluginSettingsInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityViewBuilder;
 use Drupal\give\ProblemLog;
@@ -79,7 +80,7 @@ class DonationViewBuilder extends EntityViewBuilder {
     return $build;
   }
 
-  private function getFieldFormatter(string $field_name, $formatter_id = 'basic_string') : \Drupal\Core\Field\PluginSettingsInterface {
+  private function getFieldFormatter(string $field_name, $formatter_id = 'basic_string') : PluginSettingsInterface {
 
     $definitions = \Drupal::service('entity_field.manager')
       ->getFieldDefinitions('give_donation', $this->bundle);
diff --git a/src/Form/Donation/DonationEditForm.php b/src/Form/Donation/DonationEditForm.php
index 5f67ae6..0bf07b5 100644
--- a/src/Form/Donation/DonationEditForm.php
+++ b/src/Form/Donation/DonationEditForm.php
@@ -70,7 +70,7 @@ class DonationEditForm extends ContentEntityForm {
     $this->entity->save();
     $this->logger('give')->notice('The donation %label has been updated.', [
       '%label' => $this->entity->label(),
-      'link' => $this->entity->link($this->t('Edit'), 'edit-form'),
+      'link' => $this->entity->toLink($this->t('Edit'), 'edit-form')->toString(),
     ]);
   }
 
diff --git a/src/Form/Donation/PaymentForm.php b/src/Form/Donation/PaymentForm.php
index 19ad554..c15c33c 100644
--- a/src/Form/Donation/PaymentForm.php
+++ b/src/Form/Donation/PaymentForm.php
@@ -161,7 +161,7 @@ class PaymentForm extends ContentEntityForm {
       ];
       if ($give_settings->get('log_problems')) {
         if (\Drupal::VERSION < 9.3) {
-          $mod_path = drupal_get_path('module', 'give');// will be deprecated in d10;
+          $mod_path = \Drupal::service('extension.list.module')->getPath('give');// will be deprecated in d10;
         }
         else {
           $mod_path = \Drupal::service('extension.path.resolver')->getPath('module', 'give');
diff --git a/src/Form/GiveForm/GiveSettings.php b/src/Form/GiveForm/GiveSettings.php
index 9d6b1cf..7c23949 100644
--- a/src/Form/GiveForm/GiveSettings.php
+++ b/src/Form/GiveForm/GiveSettings.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\give\Form\GiveForm;
 
+use Drupal\Core\Url;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -29,7 +30,7 @@ class GiveSettings extends ConfigFormBase {
     $form['currency_symbol'] = [
       '#type' => 'select',
       '#title' => $this->t('Currency symbol'),
-      '#description' => $this->t('These are the currencies accepted by Stripe. You need to specify which you accept at :url', [':url' => \Drupal\Core\Url::fromUri('https://dashboard.stripe.com/settings/settlement_currencies')->toString()]),
+      '#description' => $this->t('These are the currencies accepted by Stripe. You need to specify which you accept at :url', [':url' => Url::fromUri('https://dashboard.stripe.com/settings/settlement_currencies')->toString()]),
       '#default_value' => $config->get('currency_symbol'),
       '#options' => [// these should probably be translatable.
         'gbp' => 'British Pound',
diff --git a/src/Plugin/migrate/source/UcOrder.php b/src/Plugin/migrate/source/UcOrder.php
index 59377ca..14bbdba 100644
--- a/src/Plugin/migrate/source/UcOrder.php
+++ b/src/Plugin/migrate/source/UcOrder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\give\Plugin\migrate\source;
 
+use Drupal\migrate_drupal\Plugin\migrate\source\d7\FieldableEntity;
 /**
  * Drupal 7 Ubercart orders
  *
@@ -10,7 +11,7 @@ namespace Drupal\give\Plugin\migrate\source;
  *   source_module = "uc_order"
  * )
  */
-class UcOrder extends \Drupal\migrate_drupal\Plugin\migrate\source\d7\FieldableEntity {
+class UcOrder extends FieldableEntity {
 
   /**
    * {@inheritdoc}
diff --git a/src/Plugin/views/field/ViewsDateFormatSqlField.php b/src/Plugin/views/field/ViewsDateFormatSqlField.php
index bd70376..9782918 100644
--- a/src/Plugin/views/field/ViewsDateFormatSqlField.php
+++ b/src/Plugin/views/field/ViewsDateFormatSqlField.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\give\Plugin\views\field;
 
+use Drupal\Core\Render\Markup;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\ResultRow;
 use Drupal\views\Plugin\views\field\EntityField;
@@ -246,7 +247,7 @@ class ViewsDateFormatSqlField extends EntityField {
       // Render date values from SQL result.
       $alias = $this->aliases[$this->definition['field_name']];
       //return [['rendered' => $values->{$alias}]];
-      return [['rendered' => ['#markup' => \Drupal\Core\Render\Markup::create($values->{$alias})]]];
+      return [['rendered' => ['#markup' => Markup::create($values->{$alias})]]];
     }
     // Code from parent function.
     if (!$build_list) {
diff --git a/tests/src/Functional/DonationTest.php b/tests/src/Functional/DonationTest.php
index 9a359d8..5fc1b22 100644
--- a/tests/src/Functional/DonationTest.php
+++ b/tests/src/Functional/DonationTest.php
@@ -164,12 +164,12 @@ class DonationTest extends GiveTestBase {
     $this->assertSession()->fieldValueEquals('edit-amount', 22);
 
     // Submit should redirect back to listing.
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));
     $this->assertSession()->addressEquals('admin/structure/give/donations');
 
     // Delete the donation.
     $this->clickLink(t('Delete'));
-    $this->drupalPostForm(NULL, [], t('Delete'));
+    $this->submitForm([], t('Delete'));
     // Make sure no donations are available.
     $this->assertSession()->pageTextContains('There are no recorded donations yet.');
   }
diff --git a/tests/src/Functional/GiveTestBase.php b/tests/src/Functional/GiveTestBase.php
index 5d8e004..57eeb67 100644
--- a/tests/src/Functional/GiveTestBase.php
+++ b/tests/src/Functional/GiveTestBase.php
@@ -41,7 +41,7 @@ abstract class GiveTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser([
@@ -103,7 +103,8 @@ abstract class GiveTestBase extends BrowserTestBase {
     $edit['reply'] = $reply;
     $edit['selected'] = ($selected ? TRUE : FALSE);
     $edit['subject'] = $this->randomString();
-    $this->drupalPostForm('admin/structure/give/add', $edit, "edit-submit");
+    $this->drupalGet('admin/structure/give/add');
+    $this->submitForm($edit, "edit-submit");
     $this->assertTrue($this->getSession()->getPage()->hasContent('Give form test_label has been added.'));
   }
 
@@ -125,10 +126,12 @@ abstract class GiveTestBase extends BrowserTestBase {
     $edit['mail'] = $mail;
     $edit['amount'] = $amount;
     if ($id == $this->config('give.settings')->get('default_form')) {
-      $this->drupalPostForm('give', $edit, t('Give'));
+      $this->drupalGet('give');
+      $this->submitForm($edit, t('Give'));
     }
     else {
-      $this->drupalPostForm('give/' . $id, $edit, t('Give'));
+      $this->drupalGet('give/' . $id);
+      $this->submitForm($edit, t('Give'));
     }
   }
 
diff --git a/tests/src/Functional/GiveViewBuilderTest.php b/tests/src/Functional/GiveViewBuilderTest.php
index ac6fb3b..d75713e 100644
--- a/tests/src/Functional/GiveViewBuilderTest.php
+++ b/tests/src/Functional/GiveViewBuilderTest.php
@@ -19,7 +19,7 @@ class GiveViewBuilderTest extends GiveTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create Article node type.
@@ -112,7 +112,8 @@ class GiveViewBuilderTest extends GiveTestBase {
     $edit[$title_key] = $this->randomMachineName(8);
     $edit[$body_key] = $this->randomMachineName(16);
     $edit[$give_key] = 'test_id';
-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, t('Save'));
     // Check that the node exists in the database.
     $node = $this->drupalGetNodeByTitle($edit[$title_key]);
     $this->drupalGet('node/' . $node->id());
diff --git a/tests/src/Functional/SettingsTest.php b/tests/src/Functional/SettingsTest.php
index 1780b39..4feea45 100644
--- a/tests/src/Functional/SettingsTest.php
+++ b/tests/src/Functional/SettingsTest.php
@@ -35,7 +35,7 @@ class SettingsTest extends BrowserTestBase {
   /**
    * Test that the config page is working.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create and login administrative user.
diff --git a/tests/src/Kernel/GiveFormAndDonationEntityTest.php b/tests/src/Kernel/GiveFormAndDonationEntityTest.php
index 72aca23..b87d22e 100644
--- a/tests/src/Kernel/GiveFormAndDonationEntityTest.php
+++ b/tests/src/Kernel/GiveFormAndDonationEntityTest.php
@@ -31,7 +31,7 @@ class GiveFormAndDonationEntityTest extends EntityKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['give', 'give_test']);
   }
diff --git a/tests/src/Unit/MailHandlerTest.php b/tests/src/Unit/MailHandlerTest.php
index 51293ef..31671b0 100644
--- a/tests/src/Unit/MailHandlerTest.php
+++ b/tests/src/Unit/MailHandlerTest.php
@@ -17,62 +17,62 @@ class MailHandlerTest extends UnitTestCase {
   /**
    * Language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $languageManager;
 
   /**
    * Logger service.
    *
-   * @var \Psr\Log\LoggerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Psr\Log\LoggerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $logger;
 
   /**
    * Mail manager service.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Mail\MailManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $mailManager;
 
   /**
    * Give mail donations service.
    *
-   * @var \Drupal\give\MailHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\give\MailHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $giveMailHandler;
 
   /**
    * The give form entity.
    *
-   * @var \Drupal\give\GiveFormInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\give\GiveFormInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $giveForm;
 
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityTypeManager;
 
   /**
    * The user storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityStorageInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $userStorage;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
-    $this->mailManager = $this->getMock('\Drupal\Core\Mail\MailManagerInterface');
-    $this->languageManager = $this->getMock('\Drupal\Core\Language\LanguageManagerInterface');
-    $this->logger = $this->getMock('\Psr\Log\LoggerInterface');
-    $this->entityTypeManager = $this->getMock('\Drupal\Core\Entity\EntityTypeManagerInterface');
-    $this->userStorage = $this->getMock('\Drupal\Core\Entity\EntityStorageInterface');
+    $this->mailManager = $this->createMock('\Drupal\Core\Mail\MailManagerInterface');
+    $this->languageManager = $this->createMock('\Drupal\Core\Language\LanguageManagerInterface');
+    $this->logger = $this->createMock('\Psr\Log\LoggerInterface');
+    $this->entityTypeManager = $this->createMock('\Drupal\Core\Entity\EntityTypeManagerInterface');
+    $this->userStorage = $this->createMock('\Drupal\Core\Entity\EntityStorageInterface');
     $this->entityTypeManager->expects($this->any())
       ->method('getStorage')
       ->with('user')
@@ -257,11 +257,11 @@ class MailHandlerTest extends UnitTestCase {
    * @param string $mail_address
    *   The mail address of the user.
    *
-   * @return \Drupal\Core\Session\AccountInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @return \Drupal\Core\Session\AccountInterface|\PHPUnit\Framework\MockObject\MockObject
    *   Mock donor for testing.
    */
   protected function getMockDonor($anonymous = TRUE, $mail_address = 'anonymous@drupal.org') {
-    $donor = $this->getMock('\Drupal\Core\Session\AccountInterface');
+    $donor = $this->createMock('\Drupal\Core\Session\AccountInterface');
     $donor->expects($this->once())
       ->method('isAnonymous')
       ->willReturn($anonymous);
@@ -294,11 +294,11 @@ class MailHandlerTest extends UnitTestCase {
    * @param bool $recurring
    *   TRUE if a donation should recur monthly, FALSE if not.
    *
-   * @return \Drupal\give\DonationInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @return \Drupal\give\DonationInterface|\PHPUnit\Framework\MockObject\MockObject
    *   Mock donation for testing.
    */
   protected function getAnonymousMockDonation(array $recipients, $auto_reply, $recurring = FALSE) {
-    $donation = $this->getMock('\Drupal\give\DonationInterface');
+    $donation = $this->createMock('\Drupal\give\DonationInterface');
     $donation->expects($this->any())
       ->method('getDonorName')
       ->willReturn('Anonymous');
@@ -320,15 +320,15 @@ class MailHandlerTest extends UnitTestCase {
    * @param bool $recurring
    *   TRUE if a donation should recur monthly, FALSE if not.
    *
-   * @return \Drupal\give\DonationInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @return \Drupal\give\DonationInterface|\PHPUnit\Framework\MockObject\MockObject
    *   Mock donation for testing.
    */
   protected function getAuthenticatedMockDonation($recurring = FALSE) {
-    $donation = $this->getMock('\Drupal\give\DonationInterface');
+    $donation = $this->createMock('\Drupal\give\DonationInterface');
     $donation->expects($this->once())
       ->method('recurring')
       ->willReturn($recurring);
-    $recipient = $this->getMock('\Drupal\user\UserInterface');
+    $recipient = $this->createMock('\Drupal\user\UserInterface');
     $recipient->expects($this->once())
       ->method('getEmail')
       ->willReturn('user2@drupal.org');
@@ -352,11 +352,11 @@ class MailHandlerTest extends UnitTestCase {
    * @param string $reply
    *   A reply receipt to send to the donor.
    *
-   * @return \Drupal\give\GiveFormInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @return \Drupal\give\GiveFormInterface|\PHPUnit\Framework\MockObject\MockObject
    *   Mock donation for testing.
    */
   protected function getMockGiveForm(array $recipients, $reply) {
-    $give_form = $this->getMock('\Drupal\give\GiveFormInterface');
+    $give_form = $this->createMock('\Drupal\give\GiveFormInterface');
     $give_form->expects($this->once())
       ->method('getRecipients')
       ->willReturn($recipients);
