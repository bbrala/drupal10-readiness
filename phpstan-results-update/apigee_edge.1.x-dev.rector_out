modules/contrib/apigee_edge/modules/apigee_edge_actions/apigee_edge_actions.module
modules/contrib/apigee_edge/apigee_edge.api.php
modules/contrib/apigee_edge/modules/apigee_edge_apiproduct_rbac/tests/modules/apigee_edge_apiproduct_rbac_test/apigee_edge_apiproduct_rbac_test.module
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityRemoveProductEventDeriver.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/ApigeeActionsEntityTypeHelper.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Controller/TeamAppKeysController.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Exception/InvalidArgumentException.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/HttpClientMiddleware/ApiClientProfiler.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamAppFormTrait.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/apigee_edge_teams.tokens.inc
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamMemberRoleInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamRoleForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamMembershipManager.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamRoleStorage.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/src/Kernel/EntityControllerCacheTest.php
modules/contrib/apigee_edge/src/Controller/DeveloperSyncController.php
modules/contrib/apigee_edge/apigee_edge.install
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Exception/RuntimeException.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/AddTeamMembersForm.php
modules/contrib/apigee_edge/modules/apigee_edge_apiproduct_rbac/tests/modules/apigee_edge_apiproduct_rbac_test/src/ApiProductController.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamPermissionProvider.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/ApigeeActionsEntityTypeHelperInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityUpdateEventDeriver.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/ApigeeEdgeActionsServiceProvider.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/TeamMembershipManager.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/ParamConverter/TeamAppNameConverter.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/apigee_edge_actions.tokens.inc
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Event/ApigeeEdgeActionsEventInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Event/EdgeEntityEventBase.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Access/ManageTeamMembersAccess.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Event/EdgeEntityEventEdge.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/EventSubscriber/AppCredentialEventSubscriber.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Controller/TeamMembersList.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamRoleStorageInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamStorage.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/src/Kernel/Event/TeamInvitationEventsTest.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamRole.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Access/TeamAppListByTeamAccess.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/modules/apigee_edge_actions_debug/src/EventSubscriber/ApigeeEdgeActionsDebugEventSubscriber.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/CompanyMembersController.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamRoleAccessHandler.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Plugin/Block/TeamContextSwitcherBlock.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/tests/src/Kernel/ApigeeEdgeActionsRulesKernelTestBase.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamRoleInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamRoleRouteProvider.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamMembershipManagerInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamRouteProvider.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/HttpClientMiddleware/DevelKintApiClientProfiler.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/CompanyMembersControllerFactory.php
modules/contrib/apigee_edge/src/Entity/AttributesAwareFieldableEdgeEntityBase.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamPermissionHandler.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/CompanyMembersControllerFactoryInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/CompanyMembersControllerInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/CompanyMembershipObjectCache.php
modules/contrib/apigee_edge/src/Controller/EdgeEntityFieldConfigListController.php
modules/contrib/apigee_edge/src/Access/AppAccessCheckByAppName.php
modules/contrib/apigee_edge/src/Controller/ErrorPageController.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/EditTeamMemberForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamDeleteForm.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesAction/LogMessage.php
modules/contrib/apigee_edge/src/Controller/ExportAnalyticsController.php
modules/contrib/apigee_edge/apigee_edge.module
modules/contrib/apigee_edge/modules/apigee_edge_apiproduct_rbac/tests/modules/apigee_edge_apiproduct_rbac_test/src/ApiProductStorage.php
modules/contrib/apigee_edge/src/Access/AppsPageAccessCheck.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/CurlCommandFormatter.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/tests/src/Kernel/Plugin/RulesAction/SystemEmailToUsersOfRoleTest.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesAction/SystemEmailToUsersOfRole.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/DebugMessageFormatterPluginBase.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/CompanyMembershipObjectCacheInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessAnonymousAuthenticatedTest.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Plugin/EntityReferenceSelection/TeamMembersSelection.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamStorageInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Team.php
modules/contrib/apigee_edge/src/Annotation/ApigeeFieldStorageFormat.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/DefaultTeamPermissionsProvider.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/DeveloperAppNameCacheFactory.php
modules/contrib/apigee_edge/src/Annotation/EdgeEntityType.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityAddMemberEventDeriver.php
modules/contrib/apigee_edge/src/Entity/AttributesAwareFieldableEdgeEntityBaseInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/ApiProductController.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamForm.php
modules/contrib/apigee_edge/src/CliService.php
modules/contrib/apigee_edge/src/Credentials.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/tests/src/Kernel/Plugin/RulesEvent/EdgeEntityAddMemberEventTest.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamRoutingHelperTrait.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityAddProductEventDeriver.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/DynamicTeamPermissionProviderInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppController.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamPermissionHandlerInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityDeleteEventDeriver.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamTitleProvider.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/modules/apigee_edge_teams_invitation_test/src/EventSubscriber/TeamInvitationSubscriber.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityEventDeriverBase.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/DeveloperCache.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/RemoveTeamMemberForm.php
modules/contrib/apigee_edge/src/CredentialsInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamViewBuilder.php
modules/contrib/apigee_edge/src/Element/ApigeeEntityListElement.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/modules/apigee_edge_teams_test/apigee_edge_teams_test.module
modules/contrib/apigee_edge/src/Entity/Controller/ApiProductControllerInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/AppByOwnerController.php
modules/contrib/apigee_edge/src/CliServiceInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppControllerFactory.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/DeveloperIdCache.php
modules/contrib/apigee_edge/src/Command/CommandBase.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityEventDeriverInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/EntityCache.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/tests/src/Kernel/Plugin/RulesEvent/EdgeEntityAddProductEventTest.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/modules/apigee_edge_teams_test/src/TestTeamPermissions.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityInsertEventDeriver.php
modules/contrib/apigee_edge/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessAnonymousInternalTest.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppControllerFactoryInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppControllerInterface.php
modules/contrib/apigee_edge/src/Element/ApigeeSecret.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppCredentialController.php
modules/contrib/apigee_edge/src/Element/AppCredentialElement.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityProductEventDeriverBase.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Event/TeamInvitationEvent.php
modules/contrib/apigee_edge/src/Element/AppCredentialProductListElement.php
modules/contrib/apigee_edge/src/Element/StatusPropertyElement.php
modules/contrib/apigee_edge/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessAuthenticatedInternalTest.php
modules/contrib/apigee_edge/src/Command/CreateEdgeRoleCommand.php
modules/contrib/apigee_edge/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessMissingAttributeTest.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Event/TeamInvitationEventInterface.php
modules/contrib/apigee_edge/src/Entity/ApiProduct.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Event/TeamInvitationEvents.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityRemoveMemberEventDeriver.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppCredentialControllerFactory.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamAppFieldConfigListAlterEventSubscriber.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/src/Functional/AccessTest.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppCredentialControllerInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppCredentialControllerFactoryInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/EntityCacheInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppCredentialControllerInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppEdgeEntityControllerProxy.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppEdgeEntityControllerProxy.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamInactiveStatusSubscriber.php
modules/contrib/apigee_edge/src/Entity/Controller/AppController.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/EntityIdCache.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Plugin/Menu/AddAppForTeamLocalAction.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/DebugMessageFormatterPluginInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/EntityIdCacheInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/FullHttpMessageFormatter.php
modules/contrib/apigee_edge/src/Entity/Controller/CachedAttributesAwareEntityControllerTrait.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAliasForm.php
modules/contrib/apigee_edge/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessTestBase.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamController.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/SimpleFormatter.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationAcceptForm.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/SDKConnector.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Plugin/Menu/TeamAppsLocalTask.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAppAliasForm.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperController.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAppAnalyticsForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/apigee_edge_teams.api.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/tests/src/Kernel/Plugin/RulesEvent/EdgeEntityDeleteEventTest.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Plugin/Menu/TeamsListMenuLink.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamAccessHandler.php
modules/contrib/apigee_edge/src/Command/DeveloperSyncCommand.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamInvitationQueryAccessSubscriber.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAppApiKeyAddForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Plugin/views/access/TeamPermission.php
modules/contrib/apigee_edge/src/Entity/Controller/CachedEntityCrudOperationsControllerTrait.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/apigee_edge_teams.install
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationDeclineForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAppApiKeyDeleteForm.php
modules/contrib/apigee_edge/src/Command/DrupalConsoleLog.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAppApiKeyFormTrait.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamInvitationSubscriber.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperControllerInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/EdgeEntityControllerInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/CachedManagementApiEdgeEntityControllerProxy.php
modules/contrib/apigee_edge/src/Entity/Controller/AppControllerBase.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/tests/src/Kernel/Plugin/RulesEvent/EdgeEntityInsertEventTest.php
modules/contrib/apigee_edge/src/Entity/ApiProductInterface.php
modules/contrib/apigee_edge/src/Entity/App.php
modules/contrib/apigee_edge/src/Entity/Controller/AppControllerInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAppApiKeyRevokeForm.php
modules/contrib/apigee_edge/src/Entity/Controller/AppCredentialControllerBase.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAppBaseFieldConfigForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationDeleteForm.php
modules/contrib/apigee_edge/src/Entity/Controller/EntityCacheAwareControllerInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamControllerInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/EntityCacheAwareControllerTrait.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateForm.php
modules/contrib/apigee_edge/src/Entity/Controller/ManagementApiEdgeEntityControllerProxy.php
modules/contrib/apigee_edge/src/Entity/Controller/CachedPaginatedControllerHelperTrait.php
modules/contrib/apigee_edge/src/Command/Util/ApigeeEdgeManagementCliService.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamApp.php
modules/contrib/apigee_edge/src/Entity/Controller/CachedPaginatedEntityIdListingControllerTrait.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/tests/src/Kernel/Plugin/RulesEvent/EdgeEntityRemoveMemberEventTest.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/apigee_edge_debug.install
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationFormBase.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAppCacheForm.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/Annotation/DebugMessageFormatter.php
modules/contrib/apigee_edge/src/Entity/Controller/OrganizationController.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Plugin/views/filter/TeamInvitationStatusFilter.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/DebugMessageFormatterPluginManager.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAppCredentialsForm.php
modules/contrib/apigee_edge/src/Entity/Controller/CachedPaginatedEntityListingControllerTrait.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamCacheForm.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/Form/ConfigForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamInvitationForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationResendForm.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppController.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Routing/TeamAppByNameRouteAlterSubscriber.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateFormBase.php
modules/contrib/apigee_edge/src/Entity/Controller/OrganizationControllerInterface.php
modules/contrib/apigee_edge/src/Entity/Developer.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamMemberApiProductAccessHandlerCacheReset.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppControllerFactory.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/apigee_edge_teams.module
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamStatusWarningSubscriber.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/tests/src/Kernel/Plugin/RulesEvent/EdgeEntityRemoveProductEventTest.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Routing/TeamAppDevelRouteFixerSubscriber.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppControllerFactoryInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppControllerInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppCredentialController.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Routing/TeamContextSwitcherRouteAlterSubscriber.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateFormForTeam.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamAppListBuilder.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamMembersFormBase.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamAppAccessHandler.php
modules/contrib/apigee_edge/src/Entity/EdgeEntityInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamAppDeleteForm.php
modules/contrib/apigee_edge/src/Entity/EdgeEntityPermissionProviderBase.php
modules/contrib/apigee_edge/src/Entity/Controller/AppCredentialControllerInterface.php
modules/contrib/apigee_edge/src/Entity/EdgeEntityRouteProvider.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Structure/TeamPermission.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamAppEditForm.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppCache.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamPermissionsForm.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppCredentialControllerFactory.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamContextManager.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Exception/ApigeeEdgeTeamsExceptionInterface.php
modules/contrib/apigee_edge/src/Command/Util/ApigeeEdgeManagementCliServiceInterface.php
modules/contrib/apigee_edge/src/Entity/Form/DeveloperAppFormTrait.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppCredentialControllerFactoryInterface.php
modules/contrib/apigee_edge/src/Commands/ApigeeEdgeCommands.php
modules/contrib/apigee_edge/src/Entity/EdgeEntityTitleProvider.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamAppListByTeam.php
modules/contrib/apigee_edge/src/Entity/Storage/DeveloperAppStorage.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppCacheByOwner.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/tests/src/Kernel/Plugin/RulesEvent/EdgeEntityUpdateEventTest.php
modules/contrib/apigee_edge/src/Entity/EdgeEntityType.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamContextManagerInterface.php
modules/contrib/apigee_edge/src/Exception/ApigeeEdgeExceptionInterface.php
modules/contrib/apigee_edge/src/Exception/AuthenticationKeyException.php
modules/contrib/apigee_edge/src/Exception/AuthenticationKeyNotFoundException.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamInvitationNotifierEmail.php
modules/contrib/apigee_edge/src/Entity/Form/EdgeEntityDeleteForm.php
modules/contrib/apigee_edge/src/Connector/GceServiceAccountAuthentication.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppCacheByOwnerFactory.php
modules/contrib/apigee_edge/src/Exception/AuthenticationKeyValueMalformedException.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamAppInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamAppPermissionProvider.php
modules/contrib/apigee_edge/src/Connector/HybridAuthentication.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppCacheByOwnerFactoryInterface.php
modules/contrib/apigee_edge/src/Entity/Storage/DeveloperAppStorageInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamInvitationListBuilder.php
modules/contrib/apigee_edge/src/Entity/Storage/DeveloperStorage.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppCacheByOwnerInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppCacheInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamInvitationNotifierInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamRoleDeleteForm.php
modules/contrib/apigee_edge/src/Connector/HybridCredentials.php
modules/contrib/apigee_edge/src/Exception/DeveloperDoesNotExistException.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppIdCache.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamAppRouteProvider.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamInvitationViewsData.php
modules/contrib/apigee_edge/modules/apigee_edge_apiproduct_rbac/apigee_edge_apiproduct_rbac.module
modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppNameCacheByOwnerFactory.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppNameCacheByOwnerFactoryInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/DeveloperAppCacheFactory.php
modules/contrib/apigee_edge/src/Exception/DeveloperToUserConversationInvalidValueException.php
modules/contrib/apigee_edge/src/Controller/DeveloperAppKeysController.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamMemberApiProductAccessHandler.php
modules/contrib/apigee_edge/src/FieldAttributeConverter.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamListBuilder.php
modules/contrib/apigee_edge/src/Form/DeveloperAppApiKeyAddForm.php
modules/contrib/apigee_edge/src/Entity/Form/EdgeEntityFormInterface.php
modules/contrib/apigee_edge/src/Entity/Form/FieldableEdgeEntityForm.php
modules/contrib/apigee_edge/src/Exception/DeveloperToUserConversionAttributeDoesNotExistException.php
modules/contrib/apigee_edge/src/Entity/AppInterface.php
modules/contrib/apigee_edge/src/Exception/DeveloperToUserConversionException.php
modules/contrib/apigee_edge/src/Entity/AppRouteProvider.php
modules/contrib/apigee_edge/src/Exception/DeveloperToUserConversionUserNameAlreadyTakenException.php
modules/contrib/apigee_edge/src/Form/DeveloperAppApiKeyDeleteForm.php
modules/contrib/apigee_edge/src/Job/Job.php
modules/contrib/apigee_edge/src/Controller/DeveloperAppViewControllerForDeveloper.php
modules/contrib/apigee_edge/src/Form/DeveloperAppApiKeyRevokeForm.php
modules/contrib/apigee_edge/src/Form/DeveloperAppBaseFieldConfigForm.php
modules/contrib/apigee_edge/src/Entity/EdgeEntityTypeInterface.php
modules/contrib/apigee_edge/src/Exception/DeveloperUpdateFailedException.php
modules/contrib/apigee_edge/src/Entity/EdgeEntityViewBuilder.php
modules/contrib/apigee_edge/src/FieldAttributeConverterInterface.php
modules/contrib/apigee_edge/src/Exception/EdgeFieldException.php
modules/contrib/apigee_edge/src/Exception/InvalidArgumentException.php
modules/contrib/apigee_edge/src/Exception/KeyProviderRequirementsException.php
modules/contrib/apigee_edge/src/Plugin/Derivative/DynamicAddEntityLocalActions.php
modules/contrib/apigee_edge/src/Entity/Enhancer/AppRouteEnhancer.php
modules/contrib/apigee_edge/src/Form/ApiProductAccessControlForm.php
modules/contrib/apigee_edge/src/Entity/AppTitleProvider.php
modules/contrib/apigee_edge/src/Exception/OauthTokenStorageException.php
modules/contrib/apigee_edge/src/Exception/RuntimeException.php
modules/contrib/apigee_edge/src/Exception/UserDeveloperConversionException.php
modules/contrib/apigee_edge/src/Entity/FieldableEdgeEntityBase.php
modules/contrib/apigee_edge/src/Exception/UserDeveloperConversionNoStorageFormatterFoundException.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamRoleListBuilder.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamMemberApiProductAccessHandlerInterface.php
modules/contrib/apigee_edge/src/Form/DeveloperAppCachingForm.php
modules/contrib/apigee_edge/src/Form/DeveloperAppCredentialFormTrait.php
modules/contrib/apigee_edge/src/Exception/UserDeveloperConversionUserFieldDoesNotExistException.php
modules/contrib/apigee_edge/src/Plugin/Validation/Constraint/DeveloperEmailUnique.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Query/TeamAppQuery.php
modules/contrib/apigee_edge/modules/apigee_edge_apiproduct_rbac/src/RoleBasedAccessSettingsBatch.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamAppStorage.php
modules/contrib/apigee_edge/src/Form/DeveloperAppCredentialsForm.php
modules/contrib/apigee_edge/src/Job/JobCreatorTrait.php
modules/contrib/apigee_edge/src/Entity/DeveloperApp.php
modules/contrib/apigee_edge/src/Form/DeveloperAttributesSettingsForm.php
modules/contrib/apigee_edge/src/Entity/Storage/DeveloperStorageInterface.php
modules/contrib/apigee_edge/src/Entity/Storage/EdgeEntityStorageBase.php
modules/contrib/apigee_edge/src/Entity/AppViewBuilder.php
modules/contrib/apigee_edge/src/Exception/UserDoesNotExistWithEmail.php
modules/contrib/apigee_edge/src/Job/UserCreate.php
modules/contrib/apigee_edge/src/Plugin/Validation/Constraint/DeveloperEmailUniqueValidator.php
modules/contrib/apigee_edge/src/Exception/UserToDeveloperConversionException.php
modules/contrib/apigee_edge/src/Entity/Form/FieldableEdgeEntityFormInterface.php
modules/contrib/apigee_edge/src/Entity/ListBuilder/AppListBuilder.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInvitation.php
modules/contrib/apigee_edge/tests/modules/apigee_edge_test/apigee_edge_test.module
modules/contrib/apigee_edge/src/Plugin/EdgeKeyTypeBase.php
modules/contrib/apigee_edge/tests/modules/apigee_edge_test/src/Controller/ExceptionController.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamAppStorageInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamInvitationStorage.php
modules/contrib/apigee_edge/src/Entity/AppWarningsChecker.php
modules/contrib/apigee_edge/src/Routing/DeveloperAppByNameRouteAlterSubscriber.php
modules/contrib/apigee_edge/tests/modules/apigee_edge_test/src/Entity/OverriddenApiProduct.php
modules/contrib/apigee_edge/src/Job/UserCreateUpdate.php
modules/contrib/apigee_edge/src/Form/ApiProductAliasForm.php
modules/contrib/apigee_edge/tests/modules/apigee_edge_test/src/Entity/OverriddenDeveloper.php
modules/contrib/apigee_edge/src/Form/ApiProductCachingForm.php
modules/contrib/apigee_edge/src/Routing/EdgeEntityFieldConfigListRouteSubscriber.php
modules/contrib/apigee_edge/tests/modules/apigee_edge_test/src/Entity/OverriddenDeveloperApp.php
modules/contrib/apigee_edge/src/Form/AppAnalyticsFormBase.php
modules/contrib/apigee_edge/src/SDKConnector.php
modules/contrib/apigee_edge/tests/modules/apigee_edge_test/src/Entity/Storage/DeveloperAppStorage.php
modules/contrib/apigee_edge/tests/modules/apigee_mock_api_client/src/ApigeeMockApiClientServiceProvider.php
modules/contrib/apigee_edge/src/Entity/AppWarningsCheckerInterface.php
modules/contrib/apigee_edge/tests/modules/apigee_mock_api_client/tests/src/Traits/ApigeeMockApiClientHelperTrait.php
modules/contrib/apigee_edge/src/Form/DeveloperCachingForm.php
modules/contrib/apigee_edge/tests/modules/apigee_mock_api_client/src/DatabaseMockStorage.php
modules/contrib/apigee_edge/tests/modules/apigee_edge_test/src/Logger/ApigeeEdgeDebugToFileLogger.php
modules/contrib/apigee_edge/src/Form/DeveloperSettingsForm.php
modules/contrib/apigee_edge/src/Plugin/EdgeKeyTypeInterface.php
modules/contrib/apigee_edge/src/Entity/DeveloperAppInterface.php
modules/contrib/apigee_edge/src/Entity/DeveloperAppPermissionProvider.php
modules/contrib/apigee_edge/src/Plugin/Field/FieldFormatter/StatusPropertyFormatter.php
modules/contrib/apigee_edge/tests/modules/apigee_edge_test/src/Logger/SyslogToFileLogger.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamInvitationStorageInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamMemberRoleStorage.php
modules/contrib/apigee_edge/tests/modules/apigee_edge_test/src/SDKConnector.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/src/Functional/ApigeeEdgeTeamsFunctionalTestBase.php
modules/contrib/apigee_edge/src/Entity/DeveloperAppRouteProvider.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/src/Functional/TeamApiProductAccessTest.php
modules/contrib/apigee_edge/tests/modules/apigee_mock_api_client/src/MockHandlerStack.php
modules/contrib/apigee_edge/src/Entity/ListBuilder/DeveloperAppListBuilderForDeveloper.php
modules/contrib/apigee_edge/tests/modules/apigee_edge_test/src/UserDeveloperConverter.php
modules/contrib/apigee_edge/src/Job/UserDeveloperSyncJobTrait.php
modules/contrib/apigee_edge/src/Entity/Storage/EdgeEntityStorageInterface.php
modules/contrib/apigee_edge/src/Entity/Storage/FieldableEdgeEntityStorageBase.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInvitationAccessControlHandler.php
modules/contrib/apigee_edge/src/Job/UserUpdate.php
modules/contrib/apigee_edge/src/Form/DeveloperSyncForm.php
modules/contrib/apigee_edge/src/Plugin/Field/FieldType/ApigeeEdgeDeveloperIdFieldItem.php
modules/contrib/apigee_edge/tests/modules/apigee_edge_test_app_keys/apigee_edge_test_app_keys.module
modules/contrib/apigee_edge/tests/modules/apigee_mock_api_client/src/MockHttpClientFactory.php
modules/contrib/apigee_edge/src/Entity/FieldableEdgeEntityInterface.php
modules/contrib/apigee_edge/src/Entity/Form/AppCreateForm.php
modules/contrib/apigee_edge/src/SDKConnectorInterface.php
modules/contrib/apigee_edge/src/JobExecutor.php
modules/contrib/apigee_edge/tests/modules/apigee_mock_api_client/src/TwigExtension/ResponseTemplateLoader.php
modules/contrib/apigee_edge/src/Structure/DeveloperToUserConversionResult.php
modules/contrib/apigee_edge/tests/modules/apigee_edge_test_app_keys/src/EventSubscriber/CreateDeleteAppKey.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInvitationInterface.php
modules/contrib/apigee_edge/src/Structure/UserDeveloperConversionResult.php
modules/contrib/apigee_edge/src/Plugin/Field/FieldType/AppCallbackUrlItem.php
modules/contrib/apigee_edge/src/Structure/UserToDeveloperConversionResult.php
modules/contrib/apigee_edge/src/Plugin/Field/FieldWidget/AppCallbackUrlWidget.php
modules/contrib/apigee_edge/src/UserDeveloperConverter.php
modules/contrib/apigee_edge/src/Form/EdgeEntityAliasConfigFormBase.php
modules/contrib/apigee_edge/tests/src/Functional/ErrorHandlerTest.php
modules/contrib/apigee_edge/tests/modules/apigee_edge_test_app_keys/src/EventSubscriber/OverrideAppKeysOnGenerate.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInvitationPermissionProvider.php
modules/contrib/apigee_edge/src/Entity/Storage/FieldableEdgeEntityStorageInterface.php
modules/contrib/apigee_edge/src/Event/AbstractAppCredentialEvent.php
modules/contrib/apigee_edge/tests/src/Functional/ApigeeEdgeFunctionalTestBase.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInvitationRouteProvider.php
modules/contrib/apigee_edge/src/Entity/ListBuilder/EdgeEntityListBuilder.php
modules/contrib/apigee_edge/src/Plugin/FieldStorageFormatInterface.php
modules/contrib/apigee_edge/src/Event/AppCredentialAddApiProductEvent.php
modules/contrib/apigee_edge/src/Plugin/FieldStorageFormatManager.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamMemberRoleStorageInterface.php
modules/contrib/apigee_edge/src/Event/AppCredentialCreateEvent.php
modules/contrib/apigee_edge/src/Event/AppCredentialDeleteApiProductEvent.php
modules/contrib/apigee_edge/tests/src/Kernel/Util/ApigeeEdgeManagementCliServiceTest.php
modules/contrib/apigee_edge/src/Event/AppCredentialDeleteEvent.php
modules/contrib/apigee_edge/tests/src/Functional/ConfigurationPermissionTest.php
modules/contrib/apigee_edge/src/Form/EdgeEntityCacheConfigFormBase.php
modules/contrib/apigee_edge/src/Event/AppCredentialGenerateEvent.php
modules/contrib/apigee_edge/src/Event/EdgeEntityFieldConfigListAlterEvent.php
modules/contrib/apigee_edge/src/Plugin/FieldStorageFormatManagerInterface.php
modules/contrib/apigee_edge/src/Plugin/KeyInput/ApigeeAuthKeyInput.php
modules/contrib/apigee_edge/src/Form/EdgeEntityDisplaySettingsForm.php
modules/contrib/apigee_edge/src/Entity/Query/AppQueryBase.php
modules/contrib/apigee_edge/src/Form/AppAnalyticsSettingsForm.php
modules/contrib/apigee_edge/src/EventSubscriber/ApiProductEntityAccessCacheReset.php
modules/contrib/apigee_edge/src/JobExecutorInterface.php
modules/contrib/apigee_edge/src/Entity/DeveloperCompaniesCache.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInvitationTitleProvider.php
modules/contrib/apigee_edge/src/KeyEntityFormEnhancer.php
modules/contrib/apigee_edge/src/EventSubscriber/DeveloperAppFieldConfigListAlterEventSubscriber.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInvitationTitleProviderInterface.php
modules/contrib/apigee_edge/src/EventSubscriber/DeveloperStatusWarningSubscriber.php
modules/contrib/apigee_edge/tests/src/Functional/OverriddenEntityClassTest.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamMemberRole.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/src/Functional/TeamInvitationsTest.php
modules/contrib/apigee_edge/src/Entity/Form/AppDeleteForm.php
modules/contrib/apigee_edge/tests/src/Functional/DeveloperAppAnalyticsTest.php
modules/contrib/apigee_edge/src/Entity/DeveloperCompaniesCacheInterface.php
modules/contrib/apigee_edge/src/Entity/DeveloperInterface.php
modules/contrib/apigee_edge/src/Entity/EdgeEntityAccessControlHandler.php
modules/contrib/apigee_edge/src/Form/AppApiKeyAddFormBase.php
modules/contrib/apigee_edge/tests/src/Functional/QueryTest.php
modules/contrib/apigee_edge/src/Entity/EdgeEntityBase.php
modules/contrib/apigee_edge/src/Form/ErrorPageSettingsForm.php
modules/contrib/apigee_edge/src/Entity/Query/Condition.php
modules/contrib/apigee_edge/src/Entity/Form/AppEditForm.php
modules/contrib/apigee_edge/src/EventSubscriber/EdgeConfigTranslationChangeSubscriber.php
modules/contrib/apigee_edge/src/UserDeveloperConverterInterface.php
modules/contrib/apigee_edge/tests/modules/apigee_edge_test/apigee_edge_test.install
modules/contrib/apigee_edge/src/Job/DeveloperCreate.php
modules/contrib/apigee_edge/src/EventSubscriber/EdgeExceptionSubscriber.php
modules/contrib/apigee_edge/src/Job/DeveloperCreateUpdate.php
modules/contrib/apigee_edge/src/Plugin/KeyProvider/EnvironmentVariablesKeyProvider.php
modules/contrib/apigee_edge/src/Form/AppApiKeyConfirmFormBase.php
modules/contrib/apigee_edge/tests/src/Traits/ApigeeEdgeFunctionalTestTrait.php
modules/contrib/apigee_edge/src/Entity/Query/DeveloperAppQuery.php
modules/contrib/apigee_edge/src/Form/AppApiKeyDeleteFormBase.php
modules/contrib/apigee_edge/src/Entity/Query/DeveloperQuery.php
modules/contrib/apigee_edge/src/Entity/Query/Query.php
modules/contrib/apigee_edge/src/Plugin/KeyProvider/KeyProviderRequirementsBase.php
modules/contrib/apigee_edge/src/Form/AppApiKeyRevokeFormBase.php
modules/contrib/apigee_edge/src/Job/DeveloperSync.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/src/Functional/TeamListBuilderTest.php
modules/contrib/apigee_edge/tests/src/Functional/StatusReportTest.php
modules/contrib/apigee_edge/src/Entity/Query/QueryFactory.php
modules/contrib/apigee_edge/src/Form/AppCallbackUrlSettingsForm.php
modules/contrib/apigee_edge/src/Plugin/KeyProvider/PrivateFileKeyProvider.php
modules/contrib/apigee_edge/src/Entity/RevisioningWorkaroundTrait.php
modules/contrib/apigee_edge/tests/src/Functional/DeveloperAppApiKeyTest.php
modules/contrib/apigee_edge/src/Entity/Storage/ApiProductStorage.php
modules/contrib/apigee_edge/src/Form/AppCredentialsConfigForm.php
modules/contrib/apigee_edge/src/Entity/Form/AppForm.php
modules/contrib/apigee_edge/src/Form/AppSettingsForm.php
modules/contrib/apigee_edge/src/Entity/Storage/ApiProductStorageInterface.php
modules/contrib/apigee_edge/src/Entity/Storage/AppStorage.php
modules/contrib/apigee_edge/src/Plugin/KeyProviderRequirementsInterface.php
modules/contrib/apigee_edge/src/Plugin/KeyType/ApigeeAuthKeyType.php
modules/contrib/apigee_edge/src/Job/DeveloperUpdate.php
modules/contrib/apigee_edge/src/Job/EdgeJob.php
modules/contrib/apigee_edge/src/MemoryCacheFactory.php
modules/contrib/apigee_edge/tests/src/Traits/ApigeeEdgeUtilTestTrait.php
modules/contrib/apigee_edge/tests/src/FunctionalJavascript/ApiProductAccessTest.php
modules/contrib/apigee_edge/src/MemoryCacheFactoryInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/src/Functional/TeamMembershipManagerTest.php
modules/contrib/apigee_edge/src/OauthAuthentication.php
modules/contrib/apigee_edge/src/Plugin/KeyTypeAuthenticationMethodInterface.php
modules/contrib/apigee_edge/src/OauthCredentials.php
modules/contrib/apigee_edge/src/Plugin/Menu/AddAppForDeveloperLocalAction.php
modules/contrib/apigee_edge/src/Entity/Form/DeveloperAppCreateForm.php
modules/contrib/apigee_edge/src/OauthTokenFileStorage.php
modules/contrib/apigee_edge/tests/src/Traits/CredsUtilsTrait.php
modules/contrib/apigee_edge/src/Form/AuthenticationForm.php
modules/contrib/apigee_edge/src/Plugin/Menu/AppsListMenuLink.php
modules/contrib/apigee_edge/src/Entity/Storage/AttributesAwareFieldableEdgeEntityStorageBase.php
modules/contrib/apigee_edge/tests/src/Traits/EntityControllerCacheUtilsTrait.php
modules/contrib/apigee_edge/src/Entity/Storage/AttributesAwareFieldableEdgeEntityStorageInterface.php
modules/contrib/apigee_edge/src/Plugin/QueueWorker/JobQueueWorker.php
modules/contrib/apigee_edge/tests/src/Traits/EntityUtilsTrait.php
modules/contrib/apigee_edge/src/Entity/Form/DeveloperAppCreateFormBase.php
modules/contrib/apigee_edge/tests/src/Unit/Command/CreateEdgeRoleCommandTest.php
modules/contrib/apigee_edge/src/OauthTokenStorageInterface.php
modules/contrib/apigee_edge/src/ParamConverter/ApigeeEdgeLoadUnchangedEntity.php
modules/contrib/apigee_edge/src/Entity/Form/DeveloperAppCreateFormForDeveloper.php
modules/contrib/apigee_edge/src/Form/BaseFieldConfigFromBase.php
modules/contrib/apigee_edge/src/Entity/Form/DeveloperAppDeleteFormForDeveloper.php
modules/contrib/apigee_edge/src/Entity/Form/DeveloperAppEditForm.php
modules/contrib/apigee_edge/src/ParamConverter/DeveloperAppNameConverter.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/src/Functional/UiTest.php
modules/contrib/apigee_edge/src/Entity/Form/DeveloperAppEditFormForDeveloper.php
modules/contrib/apigee_edge/src/Form/ConnectionConfigForm.php
modules/contrib/apigee_edge/src/ParamConverter/DeveloperWithUser.php
modules/contrib/apigee_edge/src/Form/DeveloperAppAliasForm.php
modules/contrib/apigee_edge/src/Plugin/ApigeeFieldStorageFormat/CSV.php
modules/contrib/apigee_edge/src/Form/DeveloperAppAnalyticsForm.php
modules/contrib/apigee_edge/src/Form/DeveloperAppAnalyticsFormForDeveloper.php
modules/contrib/apigee_edge/tests/src/Functional/DeveloperAppApiKeysPermissionTest.php
modules/contrib/apigee_edge/src/Plugin/ApigeeFieldStorageFormat/JSON.php
modules/contrib/apigee_edge/tests/src/Unit/Command/Util/ApigeeEdgeManagementCliServiceTest.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/src/FunctionalJavascript/ManageTeamAppsApiProductAccessTest.php
modules/contrib/apigee_edge/tests/src/Functional/DeveloperAppCredentialEventTest.php
modules/contrib/apigee_edge/tests/src/Functional/DeveloperAppFieldTest.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/src/Kernel/Entity/TeamViewBuilderTest.php
modules/contrib/apigee_edge/tests/src/Functional/DeveloperAppPermissionTest.php
modules/contrib/apigee_edge/tests/src/Unit/Commands/ApigeeEdgeCommandsTest.php
modules/contrib/apigee_edge/tests/src/Functional/DeveloperAppUITest.php
modules/contrib/apigee_edge/tests/src/Unit/ConditionTest.php
modules/contrib/apigee_edge/tests/src/FunctionalJavascript/ApigeeEdgeFunctionalJavascriptTestBase.php
modules/contrib/apigee_edge/tests/src/FunctionalJavascript/AppSettingsFormTest.php
modules/contrib/apigee_edge/tests/src/Unit/Entity/ApiProductTest.php
modules/contrib/apigee_edge/tests/src/FunctionalJavascript/CacheTest.php
modules/contrib/apigee_edge/tests/src/Unit/EventSubscriber/EdgeExceptionSubscriberTest.php
modules/contrib/apigee_edge/tests/src/Functional/DeveloperAppUITestTrait.php
modules/contrib/apigee_edge/tests/src/FunctionalJavascript/DeveloperAppUITest.php
modules/contrib/apigee_edge/tests/src/FunctionalJavascript/Form/AuthenticationFormJsTest.php
modules/contrib/apigee_edge/tests/src/Functional/DeveloperSyncTest.php
modules/contrib/apigee_edge/tests/src/Kernel/ApigeeEdgeKernelTestTrait.php
modules/contrib/apigee_edge/tests/src/Kernel/Entity/AppWarningsCheckerTest.php
modules/contrib/apigee_edge/tests/src/Functional/DeveloperTest.php
modules/contrib/apigee_edge/tests/src/Kernel/Entity/ListBuilder/AppListBuilderTest.php
modules/contrib/apigee_edge/tests/src/Kernel/Entity/ListBuilder/EntityListBuilderTest.php
modules/contrib/apigee_edge/tests/src/Kernel/EntityControllerCacheTest.php
modules/contrib/apigee_edge/tests/src/Functional/EmailTest.php
modules/contrib/apigee_edge/tests/src/Kernel/Form/EdgeEntityDisplaySettingsFormTest.php
modules/contrib/apigee_edge/tests/src/Kernel/MockIntegrationToggleKernelTest.php
modules/contrib/apigee_edge/tests/src/Kernel/OauthTokenFileStorageTest.php
modules/contrib/apigee_edge/tests/src/Kernel/TestFrameworkKernelTest.php
modules/contrib/apigee_edge/tests/src/Kernel/UserCreateTest.php

72 files with changes
=====================

1) modules/contrib/apigee_edge/modules/apigee_edge_actions/modules/apigee_edge_actions_debug/src/EventSubscriber/ApigeeEdgeActionsDebugEventSubscriber.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_actions_debug\EventSubscriber;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\apigee_edge_actions\Event\ApigeeEdgeActionsEventInterface;
 use Drupal\Core\Logger\LoggerChannelInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;

 /**
@@ @@
   /**
    * Responds to rules events.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   The event object.
    * @param string $event_name
    *   The event name.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


2) modules/contrib/apigee_edge/modules/apigee_edge_actions/src/EventSubscriber/AppCredentialEventSubscriber.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_actions\EventSubscriber;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\apigee_edge_actions\Event\EdgeEntityEventEdge;
 use Drupal\apigee_edge\Entity\AppInterface;
 use Drupal\apigee_edge\Event\AppCredentialAddApiProductEvent;
@@ @@
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Session\AccountInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;

@@ @@
    *
    * @param string $rules_event_name
    *   The name of the rules event.
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   The api credential event.
    * @param array $api_products
    *   An array of api products.
@@ @@
         $api_product = $this->entityTypeManger
           ->getStorage('api_product')
           ->load($product);
-        $this->eventDispatcher->dispatch($rules_event_name, new EdgeEntityEventEdge($app, [
+        $this->eventDispatcher->dispatch(new EdgeEntityEventEdge($app, [
           $app_type => $app,
           'developer' => $developer,
           'api_product_name' => $api_product->getName(),
           'api_product_display_name' => $api_product->getDisplayName(),
-        ]));
+        ]),
+        $rules_event_name);
       }
     }
     catch (PluginException $exception) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


3) modules/contrib/apigee_edge/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessTestBase.php:52

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->users[self::USER_WITH_ADMIN_PERM] = $this->createAccount(['administer apigee edge']);
@@ @@
       }
     }
     $this->drupalLogin($this->users[self::USER_WITH_ADMIN_PERM]);
-    $this->drupalPostForm(Url::fromRoute('apigee_edge.settings.developer.api_product_access'), $post, 'Save configuration');
+    $this->drupalGet(Url::fromRoute('apigee_edge.settings.developer.api_product_access'));
+    $this->submitForm($post, 'Save configuration');
     $this->drupalLogout();
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/apigee_edge/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessAuthenticatedInternalTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->ridCombinations = $this->calculateRidCombinations([AccountInterface::ANONYMOUS_ROLE, AccountInterface::AUTHENTICATED_ROLE]);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/apigee_edge/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessAnonymousInternalTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->ridCombinations = $this->calculateRidCombinations([AccountInterface::ANONYMOUS_ROLE, self::INTERNAL_ROLE]);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/apigee_edge/modules/apigee_edge_apiproduct_rbac/tests/src/FunctionalJavascript/ApiProductRoleBasedAccessAnonymousAuthenticatedTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->ridCombinations = $this->calculateRidCombinations([AccountInterface::ANONYMOUS_ROLE, AccountInterface::AUTHENTICATED_ROLE]);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamStatusWarningSubscriber.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\apigee_edge_teams\TeamMembershipManagerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ @@
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\StringTranslation\TranslationInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Display's a warning message if team's status is inactive.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     // Anonymous user's does not have access to these routes.
     if ($this->currentUser->isAuthenticated() && strpos($this->routeMatch->getRouteName(), 'entity.team_app.') === 0) {
       // Team is available in most of the team app routes as a route parameter.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


8) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamMemberApiProductAccessHandlerCacheReset.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\EventSubscriber;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\apigee_edge\Event\AppCredentialAddApiProductEvent;
 use Drupal\apigee_edge\Event\AppCredentialCreateEvent;
 use Drupal\apigee_edge\Event\AppCredentialDeleteApiProductEvent;
@@ @@
 use Drupal\apigee_edge\Event\AppCredentialDeleteEvent;
 use Drupal\apigee_edge\Event\AppCredentialGenerateEvent;
 use Drupal\apigee_edge_teams\TeamMemberApiProductAccessHandlerInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;

 /**
@@ @@
   /**
    * Clears API product entity access cache.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   Event that triggered this subscriber.
    */
   public function clearApiProductCache(Event $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


9) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamInactiveStatusSubscriber.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\Core\DependencyInjection\ClassResolverInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ @@
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Display an error message on inactive team routes.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     if ($this->currentUser->isAnonymous() || !in_array($this->routeMatch->getRouteName(), $this->getDisabledRoutes())) {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


10) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Event/TeamInvitationEvent.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\apigee_edge_teams\Entity\TeamInvitationInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the team_invitation event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/apigee_edge/src/Entity/Controller/AppCredentialControllerBase.php:116

    ---------- begin diff ----------
@@ @@
    */
   public function addProducts(string $consumer_key, array $api_products): AppCredentialInterface {
     $credential = $this->decorated()->addProducts($consumer_key, $api_products);
-    $this->eventDispatcher->dispatch(AppCredentialAddApiProductEvent::EVENT_NAME, new AppCredentialAddApiProductEvent($this->getAppType(), $this->owner, $this->appName, $credential, $api_products));
+    $this->eventDispatcher->dispatch(new AppCredentialAddApiProductEvent($this->getAppType(), $this->owner, $this->appName, $credential, $api_products), AppCredentialAddApiProductEvent::EVENT_NAME);
     // By removing app from cache we force reload the credentials as well.
     $this->appCacheByOwner->removeEntities([$this->appName]);
     return $credential;
@@ @@
    */
   public function create(string $consumer_key, string $consumer_secret): AppCredentialInterface {
     $credential = $this->decorated()->create($consumer_key, $consumer_secret);
-    $this->eventDispatcher->dispatch(AppCredentialCreateEvent::EVENT_NAME, new AppCredentialCreateEvent($this->getAppType(), $this->owner, $this->appName, $credential));
+    $this->eventDispatcher->dispatch(new AppCredentialCreateEvent($this->getAppType(), $this->owner, $this->appName, $credential), AppCredentialCreateEvent::EVENT_NAME);
     // By removing app from cache we force reload the credentials as well.
     $this->appCacheByOwner->removeEntities([$this->appName]);
     return $credential;
@@ @@
    */
   public function delete(string $consumer_key): AppCredentialInterface {
     $credential = $this->decorated()->delete($consumer_key);
-    $this->eventDispatcher->dispatch(AppCredentialDeleteEvent::EVENT_NAME, new AppCredentialDeleteEvent($this->getAppType(), $this->owner, $this->appName, $credential));
+    $this->eventDispatcher->dispatch(new AppCredentialDeleteEvent($this->getAppType(), $this->owner, $this->appName, $credential), AppCredentialDeleteEvent::EVENT_NAME);
     // By removing app from cache we force reload the credentials as well.
     $this->appCacheByOwner->removeEntities([$this->appName]);
     return $credential;
@@ @@
    */
   public function deleteApiProduct(string $consumer_key, string $api_product): AppCredentialInterface {
     $credential = $this->decorated()->deleteApiProduct($consumer_key, $api_product);
-    $this->eventDispatcher->dispatch(AppCredentialDeleteApiProductEvent::EVENT_NAME, new AppCredentialDeleteApiProductEvent($this->getAppType(), $this->owner, $this->appName, $credential, $api_product));
+    $this->eventDispatcher->dispatch(new AppCredentialDeleteApiProductEvent($this->getAppType(), $this->owner, $this->appName, $credential, $api_product), AppCredentialDeleteApiProductEvent::EVENT_NAME);
     // By removing app from cache we force reload the credentials as well.
     $this->appCacheByOwner->removeEntities([$this->appName]);
     return $credential;
@@ @@
    */
   public function generate(array $api_products, AttributesProperty $app_attributes, string $callback_url, array $scopes = [], string $key_expires_in = '-1'): AppCredentialInterface {
     $credential = $this->decorated()->generate($api_products, $app_attributes, $callback_url, $scopes, $key_expires_in);
-    $this->eventDispatcher->dispatch(AppCredentialGenerateEvent::EVENT_NAME, new AppCredentialGenerateEvent($this->getAppType(), $this->owner, $this->appName, $credential));
+    $this->eventDispatcher->dispatch(new AppCredentialGenerateEvent($this->getAppType(), $this->owner, $this->appName, $credential), AppCredentialGenerateEvent::EVENT_NAME);
     // By removing app from cache we force reload the credentials as well.
     $this->appCacheByOwner->removeEntities([$this->appName]);
     return $credential;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


12) modules/contrib/apigee_edge/modules/apigee_edge_teams/apigee_edge_teams.install:112

    ---------- begin diff ----------
@@ @@
   ];
   /** @var \Drupal\Core\Config\StorageInterface $config_storage */
   $config_storage = \Drupal::service('config.storage');
-  $module_path = drupal_get_path('module', 'apigee_edge_teams');
+  $module_path = \Drupal::service('extension.list.module')->getPath('apigee_edge_teams');
   $source = new FileStorage("$module_path/config/install");
   $new_team_settings = $source->read('apigee_edge_teams.team_settings');
   $team_settings = $config_storage->read('apigee_edge_teams.team_settings');
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


13) modules/contrib/apigee_edge/modules/apigee_edge_teams/apigee_edge_teams.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\apigee_edge\Entity\ApiProductInterface;
+use Drupal\apigee_edge_teams\Entity\TeamInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Access\AccessResult;
 /**
  * @file
  * Copyright 2018 Google Inc.
@@ @@
  * @param \Drupal\Core\StringTranslation\TranslatableMarkup $title
  *   The menu link/page title.
  */
-function hook_apigee_edge_teams_team_listing_page_title_alter(\Drupal\Core\StringTranslation\TranslatableMarkup &$title) {
+function hook_apigee_edge_teams_team_listing_page_title_alter(TranslatableMarkup &$title) {
 }

 /**
@@ @@
  *
  * @see \Drupal\apigee_edge_teams\TeamMemberApiProductAccessHandler
  */
-function hook_apigee_edge_teams_team_api_product_access(\Drupal\apigee_edge\Entity\ApiProductInterface $api_product, string $operation, \Drupal\apigee_edge_teams\Entity\TeamInterface $team, \Drupal\Core\Session\AccountInterface $account) {
+function hook_apigee_edge_teams_team_api_product_access(ApiProductInterface $api_product, string $operation, TeamInterface $team, AccountInterface $account) {
   // Grant access if API product's name is prefixed with the team's name.
-  return \Drupal\Core\Access\AccessResult::allowedIf(mb_strpos($api_product->id(), $team->id()) === 0);
+  return AccessResult::allowedIf(mb_strpos($api_product->id(), $team->id()) === 0);
 }

 /**
@@ @@
  * @param \Drupal\Core\Session\AccountInterface $account
  *   The Drupal user of the developer.
  */
-function hook_apigee_edge_teams_developer_permissions_by_team_alter(array &$permissions, \Drupal\apigee_edge_teams\Entity\TeamInterface $team, \Drupal\Core\Session\AccountInterface $account) {
+function hook_apigee_edge_teams_developer_permissions_by_team_alter(array &$permissions, TeamInterface $team, AccountInterface $account) {
   // @see apigee_edge_teams_test_apigee_edge_teams_developer_permissions_by_team_alter()
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


14) modules/contrib/apigee_edge/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/DebugMessageFormatterPluginBase.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_debug\Plugin\DebugMessageFormatter;

+use function GuzzleHttp\Psr7\stream_for;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\PluginBase;
@@ @@
         $body = preg_replace('/(.*mfa_token=)([^\&]+)(.*)/', '$1***mfa-token***$3', $body);
         $body = preg_replace('/(.*username=)([^\&]+)(.*)/', '$1***username***$3', $body);
         $body = preg_replace('/(.*password=)([^\&]+)(.*)/', '$1***password***$3', $body);
-        $request = $request->withBody(Psr7\stream_for($body));
+        $request = $request->withBody(stream_for($body));
       }
     }
     if ($this->maskOrganization) {
@@ @@
             $value = $masks[$key];
           }
         });
-        $response = $response->withBody(Psr7\stream_for(json_encode((object) $json, JSON_PRETTY_PRINT)));
+        $response = $response->withBody(stream_for(json_encode((object) $json, JSON_PRETTY_PRINT)));
       }

       if ($request->getMethod() === 'POST' && $request->getUri()->getPath() === '/oauth/token') {
@@ @@
           if (isset($json['refresh_token'])) {
             $json['refresh_token'] = '***refresh-token***';
           }
-          $response = $response->withBody(Psr7\stream_for(json_encode((object) $json)));
+          $response = $response->withBody(stream_for(json_encode((object) $json)));
         }
       }
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/src/Kernel/Event/TeamInvitationEventsTest.php:58

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['apigee_edge']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/apigee_edge/modules/apigee_edge_actions/src/TeamMembershipManager.php:176

    ---------- begin diff ----------
@@ @@

     // Dispatch an event for each developer.
     foreach ($developers as $developer) {
-      $this->eventDispatcher->dispatch($event, new EdgeEntityEventEdge($team, [
+      $this->eventDispatcher->dispatch(new EdgeEntityEventEdge($team, [
         'team' => $team,
         'member' => $users_by_mail[$developer],
-      ]));
+      ]),
+      $event);
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


17) modules/contrib/apigee_edge/src/Controller/EdgeEntityFieldConfigListController.php:62

    ---------- begin diff ----------
@@ @@
   public function listing($entity_type_id = NULL, $bundle = NULL, RouteMatchInterface $route_match = NULL) {
     $page = parent::listing($entity_type_id, $bundle, $route_match);
     $event = new EdgeEntityFieldConfigListAlterEvent($entity_type_id, $page);
-    $this->eventDispatcher->dispatch(EdgeEntityFieldConfigListAlterEvent::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, EdgeEntityFieldConfigListAlterEvent::EVENT_NAME);
     return $event->getPage();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


18) modules/contrib/apigee_edge/src/Controller/DeveloperSyncController.php:79

    ---------- begin diff ----------
@@ @@
    *   Job tag.
    */
   protected static function generateTag(string $type): string {
-    return "developer_sync_{$type}_" . user_password();
+    return "developer_sync_{$type}_" . \Drupal::service('password_generator')->generate();
   }

   /**
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


19) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamInvitationStorage.php:112

    ---------- begin diff ----------
@@ @@

     switch ($hook) {
       case 'insert':
-        $this->eventDispatcher->dispatch(TeamInvitationEvents::CREATED, new TeamInvitationEvent($entity));
+        $this->eventDispatcher->dispatch(new TeamInvitationEvent($entity), TeamInvitationEvents::CREATED);
         break;

       case 'update':
@@ @@
         unset($entity->original);

         if (!$original->isDeclined() && $entity->isDeclined()) {
-          $this->eventDispatcher->dispatch(TeamInvitationEvents::DECLINED, new TeamInvitationEvent($entity));
+          $this->eventDispatcher->dispatch(new TeamInvitationEvent($entity), TeamInvitationEvents::DECLINED);
         }

         if (!$original->isAccepted() && $entity->isAccepted()) {
-          $this->eventDispatcher->dispatch(TeamInvitationEvents::ACCEPTED, new TeamInvitationEvent($entity));
+          $this->eventDispatcher->dispatch(new TeamInvitationEvent($entity), TeamInvitationEvents::ACCEPTED);
         }
         break;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


20) modules/contrib/apigee_edge/apigee_edge.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * @file
  * Copyright 2020 Google Inc.
@@ @@
  * @param \Drupal\Core\StringTranslation\TranslatableMarkup $title
  *   The menu link/page title.
  */
-function hook_apigee_edge_app_listing_page_title_alter(\Drupal\Core\StringTranslation\TranslatableMarkup &$title) {
+function hook_apigee_edge_app_listing_page_title_alter(TranslatableMarkup &$title) {
 }

 /**
    ----------- end diff -----------

21) modules/contrib/apigee_edge/src/UserDeveloperConverter.php:179

    ---------- begin diff ----------
@@ @@
     if (!$user) {
       // Initialize new user object with minimum data.
       $user = $user_storage->create([
-        'pass' => user_password(),
+        'pass' => \Drupal::service('password_generator')->generate(),
       ]);
       // Suppress invalid email validation errors.
       DeveloperEmailUniqueValidator::whitelist($developer->id());
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * WrapReturnRector


22) modules/contrib/apigee_edge/src/EventSubscriber/EdgeExceptionSubscriber.php:117

    ---------- begin diff ----------
@@ @@
   /**
    * Displays the Edge connection error page.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent|\Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent|\Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *   The exception event.
    */
   public function onException($event) {
-    $exception = ($event instanceof ExceptionEvent) ? $event->getThrowable() : $event->getException();
+    $exception = ($event instanceof ExceptionEvent) ? $event->getThrowable() : $event->getThrowable();
     if ($exception instanceof ApiException || $exception->getPrevious() instanceof ApiException) {
       $context = Error::decodeException($exception);
       $this->logger->critical('@message %function (line %line of %file). <pre>@backtrace_string</pre>', $context);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameMethodRector
 * RenameClassRector
 * WrapReturnRector


23) modules/contrib/apigee_edge/src/EventSubscriber/DeveloperStatusWarningSubscriber.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\apigee_edge\Entity\DeveloperInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\Core\Url;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Display's a warning message if developer's status is inactive.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     // Anonymous user's does not have access to these routes.
     if ($this->currentUser->isAuthenticated() && strpos($this->routeMatch->getRouteName(), 'entity.developer_app.') === 0) {
       $developer_storage = $this->entityTypeManager->getStorage('developer');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


24) modules/contrib/apigee_edge/src/EventSubscriber/ApiProductEntityAccessCacheReset.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\EventSubscriber;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\apigee_edge\Event\AppCredentialAddApiProductEvent;
 use Drupal\apigee_edge\Event\AppCredentialCreateEvent;
 use Drupal\apigee_edge\Event\AppCredentialDeleteApiProductEvent;
@@ @@
 use Drupal\apigee_edge\Event\AppCredentialDeleteEvent;
 use Drupal\apigee_edge\Event\AppCredentialGenerateEvent;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;

 /**
@@ @@
   /**
    * Clears API product entity access cache.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   Event that triggered this subscriber.
    */
   public function clearApiProductCache(Event $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


25) modules/contrib/apigee_edge/src/Event/EdgeEntityFieldConfigListAlterEvent.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Triggered when an Apigee Edge entity's field config UI gets built.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


26) modules/contrib/apigee_edge/src/Event/AbstractAppCredentialEvent.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Apigee\Edge\Api\Management\Entity\AppCredentialInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Base class for app credential create, generate and add products events.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


27) modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/src/Kernel/Entity/TeamViewBuilderTest.php:72

    ---------- begin diff ----------
@@ @@
    *
    * @throws \Exception
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['apigee_edge']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/src/FunctionalJavascript/ManageTeamAppsApiProductAccessTest.php:84

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Users with manage team apps permissions can see private API products.
     $this->config('apigee_edge_teams.team_settings')->set('non_member_team_apps_visible_api_products', ['private'])->save();
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     if ($this->account !== NULL) {
       try {
         $this->account->delete();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/src/Functional/UiTest.php:86

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->teamStorage = $this->container->get('entity_type.manager')->getStorage('team');
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     if ($this->account !== NULL) {
       try {
         $this->account->delete();
@@ @@
     $teamMembershipManager->addMembers($this->team->id(), [
       $this->otherAccount->getEmail(),
     ]);
+    $this->drupalGet(Url::fromRoute('apigee_edge_teams.settings.team.permissions'));

     // Team members have access to every team app and membership operations.
-    $this->drupalPostForm(Url::fromRoute('apigee_edge_teams.settings.team.permissions'), [
+    $this->submitForm([
       'member[team_manage_members]' => TRUE,
       'member[team_app_create]' => TRUE,
       'member[team_app_update]' => TRUE,
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/src/Functional/TeamMembershipManagerTest.php:57

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->developerStorage = $this->container->get('entity_type.manager')->getStorage('developer');
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     foreach ($this->developers as $developer) {
       try {
         $this->developerStorage->delete([$developer]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/src/Functional/TeamListBuilderTest.php:109

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->addOrganizationMatchedResponse();
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     try {
       $this->teamStorage->delete([$this->teamA, $this->teamB]);
       $this->account->delete();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/src/Functional/TeamInvitationsTest.php:79

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->addOrganizationMatchedResponse();
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     if (!$this->integration_enabled) {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/src/Functional/TeamApiProductAccessTest.php:115

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->apiProductStorage = $this->container->get('entity_type.manager')->getStorage('api_product');
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     try {
       if ($this->team !== NULL) {
         $this->teamStorage->delete([$this->team]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/apigee_edge/modules/apigee_edge_teams/tests/src/Functional/AccessTest.php:198

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->teamStorage = $this->container->get('entity_type.manager')->getStorage('team');
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     if ($this->team !== NULL) {
       try {
         $this->teamStorage->delete([$this->team]);
@@ @@
     // Create roles for every team membership level permission.
     $this->drupalLogin($this->rootUser);
     foreach (array_keys(self::TEAM_MEMBER_PERMISSION_MATRIX) as $permission) {
-      $this->drupalPostForm(Url::fromRoute('entity.team_role.add_form'), [
+      $this->drupalGet(Url::fromRoute('entity.team_role.add_form'));
+      $this->submitForm([
         'label' => $permission,
         'id' => $permission,
       ], 'Save');
@@ @@
     foreach (array_keys(self::TEAM_MEMBER_PERMISSION_MATRIX) as $permission) {
       $permission_changes["{$role_name}[{$permission}]"] = in_array($permission, $permissions);
     }
+    $this->drupalGet(Url::fromRoute('apigee_edge_teams.settings.team.permissions'));

-    $this->drupalPostForm(Url::fromRoute('apigee_edge_teams.settings.team.permissions'), $permission_changes, 'Save permissions');
+    $this->submitForm($permission_changes, 'Save permissions');
     // Dump permission configuration to the HTML output.
     $this->drupalGet(Url::fromRoute('apigee_edge_teams.settings.team.permissions'));
     // Because changes made on the UI therefore _this_ instance of the team role
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/apigee_edge/tests/src/Unit/EventSubscriber/EdgeExceptionSubscriberTest.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\apigee_edge\Unit\EventSubscriber;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Apigee\Edge\Exception\ApiException;
 use Drupal\apigee_edge\Controller\ErrorPageController;
 use Drupal\apigee_edge\EventSubscriber\EdgeExceptionSubscriber;
@@ @@
 use Psr\Log\LoggerInterface;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;

 /**
  * Test EdgeExceptionSubscriber.
@@ @@
  */
 class EdgeExceptionSubscriberTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The API Exception class.
    *
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->exception = new ApiException("API response error message.");
@@ @@
     }
     // Drupal 8.
     else {
-      $this->getResponseForExceptionEvent = $this->prophesize(GetResponseForExceptionEvent::class);
+      $this->getResponseForExceptionEvent = $this->prophesize(ExceptionEvent::class);
       $this->getResponseForExceptionEvent->getException()
         ->willReturn($this->exception);
     }
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/apigee_edge/tests/src/Unit/Entity/ApiProductTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->apiProduct = new ApiProduct([]);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/apigee_edge/tests/src/Unit/ConditionTest.php:317

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     for ($i = 0; $i < 1024; $i++) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/apigee_edge/tests/src/Unit/Commands/ApigeeEdgeCommandsTest.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\apigee_edge\Unit\Commands {

+  use Prophecy\PhpUnit\ProphecyTrait;
   use Consolidation\AnnotatedCommand\CommandData;
   use Drupal\apigee_edge\CliServiceInterface;
   use Drupal\apigee_edge\Commands\ApigeeEdgeCommands;
@@ @@
    */
   class ApigeeEdgeCommandsTest extends UnitTestCase {

+    use ProphecyTrait;
     /**
      * The system under test.
      *
@@ @@
     /**
      * {@inheritdoc}
      */
-    protected function setUp() {
+    protected function setUp(): void {
       parent::setUp();
       $this->cliService = $this->prophesize(CliServiceInterface::class);
       $this->apigeeEdgeCommands = new ApigeeEdgeCommands($this->cliService->reveal());
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/apigee_edge/tests/src/Unit/Command/Util/ApigeeEdgeManagementCliServiceTest.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\apigee_edge\Unit\Command\Util;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Apigee\Edge\ClientInterface as ApigeeClientInterface;
 use Drupal\apigee_edge\Command\Util\ApigeeEdgeManagementCliService;
 use Drupal\apigee_edge\Command\Util\ApigeeEdgeManagementCliServiceInterface;
@@ @@
  */
 class ApigeeEdgeManagementCliServiceTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Test base url.
    *
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->httpClient = $this->prophesize(Client::class);
   }
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/apigee_edge/tests/src/Unit/Command/CreateEdgeRoleCommandTest.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\apigee_edge\Unit\Command {

+  use Prophecy\PhpUnit\ProphecyTrait;
   use Drupal\apigee_edge\CliServiceInterface;
   use Drupal\apigee_edge\Command\CreateEdgeRoleCommand;
   use Drupal\Console\Core\Style\DrupalStyle;
@@ @@
    */
   class CreateEdgeRoleCommandTest extends UnitTestCase {

+    use ProphecyTrait;
     /**
      * The system under test.
      *
@@ @@
     /**
      * {@inheritdoc}
      */
-    protected function setUp() {
+    protected function setUp(): void {
       if (!class_exists('Drupal\Console\Core\Command\Command')) {
         $this->markTestSkipped('Skipping because Drupal Console is not installed.');
       }
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/apigee_edge/tests/src/Traits/EntityUtilsTrait.php:36

    ---------- begin diff ----------
@@ @@
   protected function changeEntityAliasesAndValidate(string $entity_type_id, string $entity_settings_route_name) {
     $singular = $this->getRandomGenerator()->word(8);
     $plural = $this->getRandomGenerator()->word(8);
-    $this->drupalPostForm(Url::fromRoute($entity_settings_route_name), [
+    $this->drupalGet(Url::fromRoute($entity_settings_route_name));
+    $this->submitForm([
       'entity_label_singular' => $singular,
       'entity_label_plural' => $plural,
     ], 'Save configuration');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector


42) modules/contrib/apigee_edge/tests/src/Traits/ApigeeEdgeFunctionalTestTrait.php:99

    ---------- begin diff ----------
@@ @@
       'first_name' => $this->randomMachineName(),
       'last_name' => $this->randomMachineName(),
       'name' => $this->randomMachineName(),
-      'pass' => user_password(),
+      'pass' => \Drupal::service('password_generator')->generate(),
       'status' => $status,
     ];
     if ($rid) {
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * WrapReturnRector


43) modules/contrib/apigee_edge/tests/src/Kernel/Util/ApigeeEdgeManagementCliServiceTest.php:97

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('system', ['sequences']);
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $url = $this->endpoint . '/o/' . $this->organization . '/userroles/' . self::TEST_ROLE_NAME;
     try {
       $this->stack->queueMockResponse('get_not_found');
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/apigee_edge/tests/src/Functional/EmailTest.php:48

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     try {
       if ($this->developer !== NULL) {

@@ @@

     // Stack developer response.
     $this->queueDeveloperResponseFromDeveloper($this->developer);
+    $this->drupalGet(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]));

-    $this->drupalPostForm(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]), [
+    $this->submitForm([
       'mail' => $this->developer->getEmail(),
       'current_pass' => $account->passRaw,
     ], 'Save');
@@ @@
     $this->assertSession()->pageTextContains('This email address already exists in our system. You can register a new account if you would like to use it on the Developer Portal.');

     $this->drupalLogin($this->rootUser);
-    $this->drupalPostForm(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]), [
+    $this->drupalGet(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]));
+    $this->submitForm([
       'mail' => $this->developer->getEmail(),
     ], 'Save');
     $this->assertSession()->pageTextContains('This email address already belongs to a developer on Apigee Edge.');
@@ @@
     // Display only an error message to the user.
     $this->drupalLogin($this->rootUser);
     $error_message = trim($this->getRandomGenerator()->paragraphs(1));
-    $this->drupalPostForm($developer_settings_path, [
+    $this->drupalGet($developer_settings_path);
+    $this->submitForm([
       'verification_action' => DeveloperSettingsForm::VERIFICATION_ACTION_DISPLAY_ERROR_ONLY,
       'display_only_error_message_content[value]' => $error_message,
     ], 'Save configuration');
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $this->drupalLogout();
+    $this->drupalGet($user_register_path);

-    $this->drupalPostForm($user_register_path, $edit, 'Create new account');
+    $this->submitForm($edit, 'Create new account');
     $this->assertSession()->pageTextContains($error_message);

     // Display an error message and send a verification email to the user.
     $this->drupalLogin($this->rootUser);
-    $this->drupalPostForm($developer_settings_path, [
+    $this->drupalGet($developer_settings_path);
+    $this->submitForm([
       'verification_action' => DeveloperSettingsForm::VERIFICATION_ACTION_VERIFY_EMAIL,
     ], 'Save configuration');
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $this->drupalLogout();
+    $this->drupalGet($user_register_path);

-    $this->drupalPostForm($user_register_path, $edit, 'Create new account');
+    $this->submitForm($edit, 'Create new account');
     $this->assertSession()->pageTextContains("This email address already exists in our system. We have sent you an verification email to {$this->developer->getEmail()}.");

     $this->assertMail('id', 'apigee_edge_developer_email_verification');
@@ @@
     $matches = [];
     preg_match('%https?://[^/]+/user/register\?[^/\s]+%', $mail['body'], $matches);
     $link = $matches[0];
+    $this->drupalGet($link);

-    $this->drupalPostForm($link, $edit, 'Create new account');
+    $this->submitForm($edit, 'Create new account');
     $this->assertSession()->pageTextContains('A welcome message with further instructions has been sent to your email address.');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/apigee_edge/tests/src/Functional/DeveloperTest.php:93

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Allow visitor account creation with administrative approval.
     $user_settings = $this->config('user.settings');
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $this->stack->reset();
     try {
       if ($this->developer !== NULL) {
@@ @@

     // Try to register with incorrect API credentials.
     $this->invalidateKey();
-    $this->drupalPostForm(Url::fromRoute('user.register'), $formdata, 'Create new account');
+    $this->drupalGet(Url::fromRoute('user.register'));
+    $this->submitForm($formdata, 'Create new account');
     $this->assertSession()->pageTextContains(self::USER_REGISTRATION_UNAVAILABLE);

     // Try to register with correct API credentials.
@@ @@
     $this->stack->queueMockResponse('get_not_found');
     $this->stack->queueMockResponse('get_not_found');
     $this->queueDeveloperResponse($account, 201);
+    $this->drupalGet(Url::fromRoute('user.register'));

-    $this->drupalPostForm(Url::fromRoute('user.register'), $formdata, 'Create new account');
+    $this->submitForm($formdata, 'Create new account');

     /** @var \Drupal\user\Entity\User $account */
     $account = user_load_by_mail($test_user['email']);
@@ @@
     $this->assertEquals($this->developerRegistered->getStatus(), DeveloperInterface::STATUS_INACTIVE);

     // Attribute is set by mock twig template.
-    $this->assertEqual($this->developerRegistered->getAttributeValue('IS_MOCK_CLIENT'), !$this->integration_enabled);
+    $this->assertEquals($this->developerRegistered->getAttributeValue('IS_MOCK_CLIENT'), !$this->integration_enabled);

     $this->drupalLogin($this->rootUser);
-    $this->drupalPostForm(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]), ['status' => '1'], 'Save');
+    $this->drupalGet(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]));
+    $this->submitForm(['status' => '1'], 'Save');

     // Ensure status change was saved.
     $this->entityTypeManager->getStorage('user')->resetCache();
@@ @@
       'first_name' => $this->getRandomGenerator()->word(16),
       'last_name' => $this->getRandomGenerator()->word(16),
       'username' => $this->randomMachineName(),
-      'password' => user_password(),
+      'password' => \Drupal::service('password_generator')->generate(),
       'status' => '0',
     ];

@@ @@

     // Try to register with incorrect API credentials.
     $this->invalidateKey();
-    $this->drupalPostForm(Url::fromRoute('user.admin_create'), $formdata, 'Create new account');
+    $this->drupalGet(Url::fromRoute('user.admin_create'));
+    $this->submitForm($formdata, 'Create new account');
     $this->assertSession()->pageTextContains(self::USER_REGISTRATION_UNAVAILABLE);

     // Try to register with correct API credentials.
@@ @@
     $this->stack->queueMockResponse('get_not_found');
     $this->stack->queueMockResponse('get_not_found');
     $this->queueDeveloperResponse($account, 201);
+    $this->drupalGet(Url::fromRoute('user.admin_create'));

-    $this->drupalPostForm(Url::fromRoute('user.admin_create'), $formdata, 'Create new account');
+    $this->submitForm($formdata, 'Create new account');

     /** @var \Drupal\user\Entity\User $account */
     $account = user_load_by_mail($test_user['email']);
@@ @@
     $formdata['first_name[0][value]'] = $test_user['first_name'];
     $formdata['last_name[0][value]'] = $test_user['last_name'];
     $formdata['status'] = $test_user['status'];
+    $this->drupalGet(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]));

-    $this->drupalPostForm(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]), $formdata, 'Save');
+    $this->submitForm($formdata, 'Save');

     // Flush user entity cache to ensure the updated user gets loaded.
     // (Especially in apigee_edge_developer_app_storage_load().)
@@ @@
       'pass[pass2]' => $test_user['password'],
       'status' => $test_user['status'],
     ];
+    $this->drupalGet(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]));

-    $this->drupalPostForm(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]), $formdata, 'Save');
+    $this->submitForm($formdata, 'Save');

     $formdata = [
       'user_cancel_method' => 'user_cancel_block',
     ];
-    $this->drupalPostForm($account->toUrl('cancel-form')->toString(), $formdata, 'Cancel account');
+    $this->drupalGet($account->toUrl('cancel-form')->toString());
+    $this->submitForm($formdata, 'Cancel account');

     $this->developerCreatedByAdmin = $this->developerStorage->load($test_user['email']);
     $this->assertNotEmpty($this->developerCreatedByAdmin);
@@ @@
       'pass[pass2]' => $test_user['password'],
       'status' => $test_user['status'],
     ];
-    $this->drupalPostForm(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]), $formdata, 'Save');
+    $this->drupalGet(Url::fromRoute('entity.user.edit_form', ['user' => $account->id()]));
+    $this->submitForm($formdata, 'Save');

     $formdata = [
       'user_cancel_method' => 'user_cancel_block_unpublish',
     ];
-    $this->drupalPostForm($account->toUrl('cancel-form')->toString(), $formdata, 'Cancel account');
+    $this->drupalGet($account->toUrl('cancel-form')->toString());
+    $this->submitForm($formdata, 'Cancel account');

     $this->developerCreatedByAdmin = $this->developerStorage->load($test_user['email']);
     $this->assertNotEmpty($this->developerCreatedByAdmin);
@@ @@
     $formdata = [
       'user_cancel_method' => 'user_cancel_delete',
     ];
-    $this->drupalPostForm($account->toUrl('cancel-form')->toString(), $formdata, 'Cancel account');
+    $this->drupalGet($account->toUrl('cancel-form')->toString());
+    $this->submitForm($formdata, 'Cancel account');

     // Ensure that entity static cache is also invalidated in this scope
     // too.
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * UiHelperTraitDrupalPostFormRector
 * UserPasswordRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/apigee_edge/tests/src/Functional/DeveloperSyncTest.php:130

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('system_breadcrumb_block');
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $developers_to_delete = array_merge($this->edgeDevelopers, $this->drupalUsers, $this->modifiedEdgeDevelopers, $this->modifiedDrupalUsers);
     foreach ($developers_to_delete as $email => $entity) {
       try {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/apigee_edge/tests/src/Functional/DeveloperAppUITestTrait.php:98

    ---------- begin diff ----------
@@ @@
     $this->config('apigee_edge.common_app_settings')
       ->set('multiple_products', $multiple_products)
       ->save();
-    $this->drupalPostForm($url, $data, 'Save configuration');
+    $this->drupalGet($url);
+    $this->submitForm($data, 'Save configuration');
   }

   /**
@@ @@
     if ($account === NULL) {
       $account = $this->account;
     }
+    $this->drupalGet(Url::fromRoute(
+      'entity.developer_app.add_form_for_developer', [
+        'user' => $account->id(),
+      ]));

-    $this->drupalPostForm(
-      Url::fromRoute(
-        'entity.developer_app.add_form_for_developer', [
-          'user' => $account->id(),
-        ]),
-      $data,
-      'Add app'
-    );
+    $this->submitForm($data, 'Add app');
   }

   /**
@@ @@
     if ($account === NULL) {
       $account = $this->account;
     }
+    $this->drupalGet("/user/{$account->id()}/apps/{$app_name}/edit");

-    $this->drupalPostForm("/user/{$account->id()}/apps/{$app_name}/edit", $data, 'Save');
+    $this->submitForm($data, 'Save');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector


48) modules/contrib/apigee_edge/tests/src/Functional/DeveloperAppUITest.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // We can not override self::$modules in this trait because that would
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     try {
       if ($this->account !== NULL) {
         $this->account->delete();
@@ @@
     $this->assertSession()->elementContains('css', 'title', $type->getPluralLabel());

     // Assert link to "Apps" is changed.
-    $this->assertLink($type->getPluralLabel());
+    $this->assertSession()->linkExists($type->getPluralLabel());
   }

   /**
@@ @@
    */
   public function testCreateAppWithModifiedCredentialLifetime() {
     $url = Url::fromRoute('apigee_edge.settings.developer_app.credentials');
+    $this->drupalGet($url);
     // Change credential lifetime to 10 days from 0.
-    $this->drupalPostForm($url, [
+    $this->submitForm([
       'credential_lifetime' => 10,
     ], 'Save configuration');
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
@@ @@
     $this->clickLink($name);
     // Result depends on how fast the response was.
     $this->assertSession()->pageTextMatches('/1 week (2|3) days hence/');
+    $this->drupalGet($url);

     // Change credential lifetime to 0 (Never) days from 10.
-    $this->drupalPostForm($url, [
+    $this->submitForm([
       'credential_lifetime' => 0,
     ], 'Save configuration');
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
@@ @@
     $this->drupalGet($app_edit_url);
     // Also test field description.
     $this->assertSession()->pageTextContains($description);
-    $this->drupalPostForm($app_edit_url, [], 'Save');
+    $this->drupalGet($app_edit_url);
+    $this->submitForm([], 'Save');
     $this->assertSession()->pageTextContains("The URL {$callback_url} is not valid.");
-    $this->drupalPostForm($app_edit_url, ['callbackUrl[0][value]' => 'http://example.com'], 'Save');
+    $this->drupalGet($app_edit_url);
+    $this->submitForm(['callbackUrl[0][value]' => 'http://example.com'], 'Save');
     $this->assertSession()->pageTextContains("Callback URL field is not in the right format.");
-    $this->drupalPostForm($app_edit_url, ['callbackUrl[0][value]' => 'https://example.com'], 'Save');
+    $this->drupalGet($app_edit_url);
+    $this->submitForm(['callbackUrl[0][value]' => 'https://example.com'], 'Save');
     $this->assertSession()->pageTextContains('App has been successfully updated.');
     $this->assertSession()->pageTextContains('https://example.com');
   }
@@ @@
     $this->assertSession()->fieldValueEquals('callbackUrl[0][value]', $callback_url);
     $this->drupalGet($app_edit_form_for_developer_url);
     $this->assertSession()->fieldValueEquals('callbackUrl[0][value]', $callback_url);
+    $this->drupalGet(Url::fromRoute('entity.entity_view_display.developer_app.default'));

-    $this->drupalPostForm(Url::fromRoute('entity.entity_view_display.developer_app.default'), ['fields[callbackUrl][region]' => 'hidden'], 'Save');
-    $this->drupalPostForm(Url::fromRoute('entity.entity_form_display.developer_app.default'), ['fields[callbackUrl][region]' => 'hidden'], 'Save');
+    $this->submitForm(['fields[callbackUrl][region]' => 'hidden'], 'Save');
+    $this->drupalGet(Url::fromRoute('entity.entity_form_display.developer_app.default'));
+    $this->submitForm(['fields[callbackUrl][region]' => 'hidden'], 'Save');

     $this->drupalGet($app_view_url);
     $this->assertSession()->pageTextNotContains($callback_url_warning_msg);
    ----------- end diff -----------

Applied rules:
 * AssertLinkRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/apigee_edge/tests/src/Functional/DeveloperAppPermissionTest.php:119

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->entityType = $this->container->get('entity_type.manager')->getDefinition('developer_app');
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     try {
       if ($this->otherAccount !== NULL) {
         $this->otherAccount->delete();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/apigee_edge/tests/src/Functional/DeveloperAppFieldTest.php:72

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('system_breadcrumb_block');
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     try {
       if ($this->account !== NULL) {
         $this->account->delete();
@@ @@
    *   Whether to expect success or a validation error.
    */
   protected function submitBaseFieldConfigForm(bool $description_required = FALSE, bool $callback_url_required = FALSE, bool $expect_success = TRUE) {
-    $this->drupalPostForm(Url::fromRoute('entity.developer_app.field_ui_fields'), [
+    $this->drupalGet(Url::fromRoute('entity.developer_app.field_ui_fields'));
+    $this->submitForm([
       'table[description][required]' => $description_required,
       'table[callbackUrl][required]' => $callback_url_required,
     ], 'Save');
@@ @@
     foreach ($region_overrides as $field => $region) {
       $edit["fields[{$field}][region]"] = $region;
     }
-    $this->drupalPostForm(Url::fromRoute('entity.entity_form_display.developer_app.default'), $edit, 'Save');
+    $this->drupalGet(Url::fromRoute('entity.entity_form_display.developer_app.default'));
+    $this->submitForm($edit, 'Save');

     if ($expect_success) {
       $this->assertSession()->pageTextContains('Your settings have been saved.');
@@ @@
     foreach ($region_overrides as $field => $region) {
       $edit["fields[{$field}][region]"] = $region;
     }
-    $this->drupalPostForm(Url::fromRoute('entity.entity_view_display.developer_app.default'), $edit, 'Save');
+    $this->drupalGet(Url::fromRoute('entity.entity_view_display.developer_app.default'));
+    $this->submitForm($edit, 'Save');

     $this->assertSession()->pageTextContains('Your settings have been saved.');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/apigee_edge/tests/src/Functional/DeveloperAppCredentialEventTest.php:66

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installExtraModules(['apigee_edge_test_app_keys']);
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     try {
       if ($this->developer !== NULL) {
         $this->developer->delete();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/apigee_edge/tests/src/Functional/DeveloperAppApiKeysPermissionTest.php:82

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->addOrganizationMatchedResponse();
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $this->stack->reset();
     try {
       if ($this->account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/apigee_edge/tests/src/Functional/DeveloperAppApiKeyTest.php:83

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->appCredentialController = \Drupal::service('apigee_edge.controller.developer_app_credential_factory');
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $this->stack->reset();
     try {
       if ($this->account) {
@@ @@
         'product' => $this->apiProducts[0],
       ],
     ]);
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'expiry' => 'date',
       'expiry_date' => "07/20/2030",
     ], 'Confirm');
@@ @@
         'product' => $this->apiProducts[1],
       ],
     ]);
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'expiry' => 'date',
       'expiry_date' => "07/20/2030",
     ], 'Confirm');
@@ @@
     $this->stack->queueMockResponse('no_content');

     $this->queueDeveloperAppResponse($this->developerApp, 200, $credentials);
-    $this->drupalPostForm(NULL, [], 'Revoke');
+    $this->submitForm([], 'Revoke');
     $this->assertSession()->pageTextContains('API key ' . $this->consumer_key . ' revoked from ' . $this->developerApp->getName() . '.');

     // Access denied for the only active key.
@@ @@
     $this->queueDeveloperAppResponse($this->developerApp, 200, $credentials);
     $this->queueDeveloperAppResponse($this->developerApp, 200, $credentials);
     $this->stack->queueMockResponse('no_content');
-    $this->drupalPostForm(NULL, [], 'Delete');
+    $this->submitForm([], 'Delete');
     $this->assertSession()->pageTextContains('API key ' . $this->consumer_key . ' deleted from ' . $this->developerApp->getName() . '.');

     // Access denied for the only active key.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


54) modules/contrib/apigee_edge/tests/src/Functional/DeveloperAppAnalyticsTest.php:69

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->account = $this->createAccount([
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     try {
       if ($this->developer !== NULL) {
         $this->developer->delete();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/apigee_edge/tests/src/Functional/ConfigurationPermissionTest.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_actions_block');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


56) modules/contrib/apigee_edge/tests/src/Functional/ApigeeEdgeFunctionalTestBase.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->initTestEnv();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


57) modules/contrib/apigee_edge/tests/src/Kernel/UserCreateTest.php:60

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('system', ['sequences']);
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $this->stack->reset();
     try {
       if ($this->account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


58) modules/contrib/apigee_edge/tests/src/Kernel/TestFrameworkKernelTest.php:70

    ---------- begin diff ----------
@@ @@
    *
    * @throws \Exception
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['apigee_edge']);
@@ @@
     $org_controller = $this->container->get('apigee_edge.controller.organization');
     $org = $org_controller->load($org_name);

-    $this->assertEqual($org->getName(), $org_name);
+    $this->assertEquals($org->getName(), $org_name);
   }

   /**
@@ @@
     /** @var \Drupal\apigee_edge\Entity\Developer $developer */
     $developer = $developerStorage->load($test_user['mail']);

-    $this->assertEqual($developer->getEmail(), $test_user['mail']);
+    $this->assertEquals($developer->getEmail(), $test_user['mail']);
     // Attribute is set by mock twig template.
-    $this->assertEqual($developer->getAttributeValue('IS_MOCK_CLIENT'), 1);
+    $this->assertEquals($developer->getAttributeValue('IS_MOCK_CLIENT'), 1);
   }

   /**
@@ @@
     $this->queueDeveloperResponseFromDeveloper($developer);
     $loaded_developer = $developerStorage->load($developer->getEmail());
     $this->assertInstanceOf(Developer::class, $loaded_developer);
-    $this->assertEqual($loaded_developer->getEmail(), $developer->getEmail());
+    $this->assertEquals($loaded_developer->getEmail(), $developer->getEmail());

     // This line is what actually tests that the mock is not used since the mock template sets this attribute.
     $this->assertEmpty($developer->getAttributeValue('IS_MOCK_CLIENT'));
@@ @@
     /** @var \Drupal\apigee_edge\Entity\Developer $developer */
     $developer = $developerStorage->load($test_user['mail']);

-    $this->assertEqual($developer->getEmail(), $test_user['mail']);
+    $this->assertEquals($developer->getEmail(), $test_user['mail']);
     // Attribute is set by mock twig template.
-    $this->assertEqual($developer->getAttributeValue('IS_MOCK_CLIENT'), 1);
+    $this->assertEquals($developer->getAttributeValue('IS_MOCK_CLIENT'), 1);
   }

   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     if ($this->integration_enabled && !empty($this->developers)) {
       foreach ($this->developers as $developer) {
         $developer->delete();
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


59) modules/contrib/apigee_edge/tests/src/Kernel/OauthTokenFileStorageTest.php:62

    ---------- begin diff ----------
@@ @@
    *
    * @throws \Exception
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->testTokenData = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


60) modules/contrib/apigee_edge/tests/src/Kernel/MockIntegrationToggleKernelTest.php:55

    ---------- begin diff ----------
@@ @@
    *
    * @throws \Exception
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['apigee_edge']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


61) modules/contrib/apigee_edge/tests/src/Kernel/EntityControllerCacheTest.php:54

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


62) modules/contrib/apigee_edge/tests/src/Kernel/Entity/ListBuilder/EntityListBuilderTest.php:81

    ---------- begin diff ----------
@@ @@
    *
    * @throws \Exception
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('user');
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $this->stack->reset();
     try {
       if ($this->account) {
@@ @@
     $this->queueDeveloperResponse($this->account);
     /** @var \Drupal\Core\Render\HtmlResponse $response */
     $response = $this->container->get('http_kernel')->handle($request);
-    $this->assertEqual($response->getCacheableMetadata()->getCacheMaxAge(), 900);
+    $this->assertEquals($response->getCacheableMetadata()->getCacheMaxAge(), 900);

     // Update the config.
     $config = $this->config('apigee_edge.' . static::ENTITY_TYPE . '_settings');
@@ @@
     $this->queueDeveloperResponse($this->account);
     /** @var \Drupal\Core\Render\HtmlResponse $response */
     $response = $this->container->get('http_kernel')->handle($request);
-    $this->assertEqual($response->getCacheableMetadata()->getCacheMaxAge(), 100);
+    $this->assertEquals($response->getCacheableMetadata()->getCacheMaxAge(), 100);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


63) modules/contrib/apigee_edge/tests/src/Kernel/Entity/ListBuilder/AppListBuilderTest.php:129

    ---------- begin diff ----------
@@ @@
    *
    * @throws \Exception
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('user');
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $this->stack->reset();
     try {
       if ($this->account) {
@@ @@
     // One warning for approved app with all credentials revoked.
     $warnings = $build['table']['#rows'][$this->getStatusRowKey($this->approvedAppWithAllRevokedCredential)]['data'];
     $this->assertCount(1, $warnings);
-    $this->assertEqual('No valid credentials associated with this app.', (string) $warnings['info']['data']['#items'][0]);
+    $this->assertEquals('No valid credentials associated with this app.', (string) $warnings['info']['data']['#items'][0]);

     // No warnings to revoked app with revoked credentials.
     $this->assertEmpty($build['table']['#rows'][$this->getStatusRowKey($this->revokedAppWithRevokedCredential)]['data']);
@@ @@
     // One warning for approved app with expired credentials.
     $warnings = $build['table']['#rows'][$this->getStatusRowKey($this->approvedAppWithExpiredCredential)]['data'];
     $this->assertCount(1, $warnings);
-    $this->assertEqual('At least one of the credentials associated with this app is expired.', (string) $warnings['info']['data']['#items'][0]);
+    $this->assertEquals('At least one of the credentials associated with this app is expired.', (string) $warnings['info']['data']['#items'][0]);

     // No warnings for revoked app with expired credentials.
     // Note: \Drupal\apigee_edge\Entity\AppWarningsChecker::getWarnings will
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


64) modules/contrib/apigee_edge/tests/src/Kernel/Entity/AppWarningsCheckerTest.php:127

    ---------- begin diff ----------
@@ @@
    *
    * @throws \Exception
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('user');
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $this->stack->reset();
     try {
       if ($this->account) {
@@ @@
     // One warning for approved app with all credentials revoked.
     $warnings = array_filter($app_warnings_checker->getWarnings($this->approvedAppWithAllRevokedCredential));
     $this->assertCount(1, $warnings);
-    $this->assertEqual('No valid credentials associated with this app.', (string) $warnings['revokedCred']);
+    $this->assertEquals('No valid credentials associated with this app.', (string) $warnings['revokedCred']);

     // No warnings to revoked app with revoked credentials.
     $this->assertEmpty(array_filter($app_warnings_checker->getWarnings($this->revokedAppWithRevokedCredential)));
@@ @@
     // One warning for approved app with expired credentials.
     $warnings = array_filter($app_warnings_checker->getWarnings($this->approvedAppWithExpiredCredential));
     $this->assertCount(1, $warnings);
-    $this->assertEqual('At least one of the credentials associated with this app is expired.', (string) $warnings['expiredCred']);
+    $this->assertEquals('At least one of the credentials associated with this app is expired.', (string) $warnings['expiredCred']);

     // One warning for revoked app with expired credentials.
     $warnings = array_filter($app_warnings_checker->getWarnings($this->revokedAppWithExpiredCredential));
     $this->assertCount(1, $warnings);
-    $this->assertEqual('At least one of the credentials associated with this app is expired.', (string) $warnings['expiredCred']);
+    $this->assertEquals('At least one of the credentials associated with this app is expired.', (string) $warnings['expiredCred']);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


65) modules/contrib/apigee_edge/tests/src/FunctionalJavascript/Form/AuthenticationFormJsTest.php:83

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Save valid credentials for later use.
     /** @var \Drupal\apigee_edge\Plugin\EdgeKeyTypeInterface $test_key_type */
@@ @@
     $web_assert->elementNotExists('css', 'details[data-drupal-selector="edit-debug"]');
     // Make sure the token file has not been left behind.
     $token_file_path = $this->container->get('file_system')->realpath(OauthTokenFileStorage::DEFAULT_DIRECTORY . '/oauth.dat');
-    $this->assertFileNotExists($token_file_path);
+    $this->assertFileDoesNotExist($token_file_path);

     // Switch back to basic auth.
     $this->cssSelect('select[name="key_input_settings[auth_type]"]')[0]->setValue('basic');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


66) modules/contrib/apigee_edge/tests/src/FunctionalJavascript/DeveloperAppUITest.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->products[] = $this->createProduct();
     $this->account = $this->createAccount(static::$permissions);
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     try {
       if ($this->account !== NULL) {
         $this->account->delete();
@@ @@
     $app_edit_url = $app->toUrl('edit-form-for-developer');

     $this->drupalGet($app_edit_url);
-    $this->drupalPostForm($app_edit_url, [], 'Save');
+    $this->drupalGet($app_edit_url);
+    $this->submitForm([], 'Save');
     $this->createScreenshot('DeveloperAppUITest-' . __FUNCTION__);
     $this->assertFalse($isValidInput());
     $checkValidationMessage('Please enter a URL.');
-    $this->drupalPostForm($app_edit_url, ['callbackUrl[0][value]' => 'http://example.com'], 'Save');
+    $this->drupalGet($app_edit_url);
+    $this->submitForm(['callbackUrl[0][value]' => 'http://example.com'], 'Save');
     $this->createScreenshot('DeveloperAppUITest-' . __FUNCTION__);
     $this->assertFalse($isValidInput());
     // The format in Firefox is different, it is only one line:
@@ @@
     // "Please match the requested format: {$pattern_description}.".
     $checkValidationMessage('Please match the requested format.');
     $this->assertEquals($pattern_error_message, $this->getSession()->evaluateScript('document.getElementById("edit-callbackurl-0-value").title'));
-    $this->drupalPostForm($app_edit_url, ['callbackUrl[0][value]' => 'https://example.com'], 'Save');
+    $this->drupalGet($app_edit_url);
+    $this->submitForm(['callbackUrl[0][value]' => 'https://example.com'], 'Save');
     $this->assertSession()->pageTextContains('App has been successfully updated.');
     $this->assertSession()->pageTextContains('https://example.com');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


67) modules/contrib/apigee_edge/tests/src/FunctionalJavascript/CacheTest.php:64

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->account = $this->createAccount([
       'create developer_app',
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     if ($this->developer !== NULL) {
       try {
         $this->developer->delete();
@@ @@
       "values:developer_app:{$this->developerApp->id()}",
       "app_names:developer_app:{$this->developer->uuid()}:{$this->developerApp->getName()}",
     ], function () {
-      $this->drupalPostForm(Url::fromRoute('entity.user.edit_form', ['user' => $this->account->id()]), [
+      $this->drupalGet(Url::fromRoute('entity.user.edit_form', ['user' => $this->account->id()]));
+      $this->submitForm([
         'first_name[0][value]' => $this->randomMachineName(),
         'last_name[0][value]' => $this->randomMachineName(),
       ], 'Save');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


68) modules/contrib/apigee_edge/tests/src/FunctionalJavascript/AppSettingsFormTest.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->defaultApiProduct = $this->createProduct();
   }
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     try {
       $this->defaultApiProduct->delete();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


69) modules/contrib/apigee_edge/tests/src/FunctionalJavascript/ApigeeEdgeFunctionalJavascriptTestBase.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->initTestEnv();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


70) modules/contrib/apigee_edge/tests/src/FunctionalJavascript/ApiProductAccessTest.php:95

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->roleStorage = $this->container->get('entity_type.manager')->getStorage('user_role');
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     /** @var \Drupal\Core\Entity\EntityInterface[] $entities */
     $entities = array_merge($this->users, $this->apiProducts);
     foreach ($entities as $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


71) modules/contrib/apigee_edge/tests/src/Functional/QueryTest.php:87

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->developerStorage = $this->container->get('entity_type.manager')->getStorage('developer');
     $this->developerAppStorage = $this->container->get('entity_type.manager')->getStorage('developer_app');
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     foreach ($this->edgeDevelopers as $developer) {
       try {
         if ($developer !== NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


72) modules/contrib/apigee_edge/tests/src/Functional/ErrorHandlerTest.php:50

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->prefix = $this->randomMachineName();
@@ @@
   public function testErrorPages() {
     $this->drupalLogin($this->rootUser);
     $errorPageTitle = $this->getRandomGenerator()->word(16);
-    $this->drupalPostForm(Url::fromRoute('apigee_edge.settings.error_page'), [
+    $this->drupalGet(Url::fromRoute('apigee_edge.settings.error_page'));
+    $this->submitForm([
       'error_page_title' => $errorPageTitle,
     ], 'Save configuration');
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 72 files have been changed by Rector                                      

