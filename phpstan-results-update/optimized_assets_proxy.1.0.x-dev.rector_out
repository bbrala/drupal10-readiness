modules/contrib/optimized_assets_proxy/optimized_assets_proxy.install
modules/contrib/optimized_assets_proxy/optimized_assets_proxy.module
modules/contrib/optimized_assets_proxy/src/AmpCssCollectionRenderer.php
modules/contrib/optimized_assets_proxy/src/AssetDumper.php
modules/contrib/optimized_assets_proxy/src/EventSubscriber/MissingAsset.php
modules/contrib/optimized_assets_proxy/src/OptimizedAssetsProxyServiceProvider.php

3 files with changes
====================

1) modules/contrib/optimized_assets_proxy/src/EventSubscriber/MissingAsset.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\optimized_assets_proxy\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\File\FileSystemInterface;
@@ @@
 use Psr\Log\LoggerInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;

 class MissingAsset implements EventSubscriberInterface {
@@ @@
     $this->eventDispatcher = $event_dispatcher;
   }

-  public function findAndWrite(GetResponseEvent $event) {
+  public function findAndWrite(RequestEvent $event) {
     $request_path = $event->getRequest()->getPathInfo();

     //$assets_path = file_url_transform_relative(file_create_url('assets://'));
@@ @@
     else {
       $stream_wrapper_uri = 'public://';
     }
-    $assets_path = file_url_transform_relative(file_create_url($stream_wrapper_uri));
+    $assets_path = \Drupal::service('file_url_generator')->generateString($stream_wrapper_uri);

     $matches = [];
     if (preg_match("@^$assets_path(css)/css_|(js)/js_@", $request_path, $matches)) {
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


2) modules/contrib/optimized_assets_proxy/src/AssetDumper.php:14

    ---------- begin diff ----------
@@ @@
       ->fields([
         'file' => basename($uri),
         'data' => $data,
-        'timestamp' => REQUEST_TIME,
+        'timestamp' => \Drupal::time()->getRequestTime(),
       ])
       ->execute();
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/optimized_assets_proxy/optimized_assets_proxy.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\File\FileSystemInterface;
 /**
  * Implements hook_cache_flush().
  */
@@ @@
   if ($data) {
     /** @var \Drupal\Core\File\FileSystemInterface $file_system */
     $file_system = \Drupal::service('file_system');
-    $file_system->prepareDirectory($directory, \Drupal\Core\File\FileSystemInterface::CREATE_DIRECTORY);
+    $file_system->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY);
     if ($result) {
       // Regenerate compressed assets. See Drupal\Core\Asset\AssetDumper::dump().
       if (extension_loaded('zlib') && \Drupal::config('system.performance')->get($asset_type . '.gzip')) {
         $data_gz = gzencode($data, 9, FORCE_GZIP);
-        if (!file_exists($uri . '.gz') && !$file_system->saveData($data_gz, $uri . '.gz', \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE)) {
+        if (!file_exists($uri . '.gz') && !$file_system->saveData($data_gz, $uri . '.gz', FileSystemInterface::EXISTS_REPLACE)) {
           return FALSE;
         }
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

