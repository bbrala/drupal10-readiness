diff --git a/amazon_product_widget.module b/amazon_product_widget.module
index 0a846df..b6aeb7e 100644
--- a/amazon_product_widget.module
+++ b/amazon_product_widget.module
@@ -219,7 +219,7 @@ function amazon_product_widget_validate_product_data(array $data) : bool {
 /**
  * Implements hook_entity_presave().
  */
-function amazon_product_widget_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
+function amazon_product_widget_entity_presave(EntityInterface $entity) {
   /** @var \Drupal\amazon_product_widget\ProductUsageService $productUsage */
   $productUsage = \Drupal::service('amazon_product_widget.usage');
   $productUsage->update($entity);
diff --git a/amazon_product_widget.post_update.php b/amazon_product_widget.post_update.php
index a82717b..cb95ee0 100644
--- a/amazon_product_widget.post_update.php
+++ b/amazon_product_widget.post_update.php
@@ -13,7 +13,7 @@ use Drupal\menu_link_content\Entity\MenuLinkContent;
  */
 function amazon_product_widget_post_update_install_view(&$sandbox) {
   // Import the product overview view.
-  $configPath = drupal_get_path('module', 'amazon_product_widget') . '/config/install';
+  $configPath = \Drupal::service('extension.list.module')->getPath('amazon_product_widget') . '/config/install';
   $source = new FileStorage($configPath);
   /** @var \Drupal\Core\Config\StorageInterface $configStorage */
   $configStorage = \Drupal::service('config.storage');
@@ -43,7 +43,7 @@ function amazon_product_widget_post_update_install_view(&$sandbox) {
  */
 function amazon_product_widget_post_update_install_unavailable_products_view(&$sandbox) {
   // Import the product overview view.
-  $configPath = drupal_get_path('module', 'amazon_product_widget') . '/config/install';
+  $configPath = \Drupal::service('extension.list.module')->getPath('amazon_product_widget') . '/config/install';
   $source = new FileStorage($configPath);
   /** @var \Drupal\Core\Config\StorageInterface $configStorage */
   $configStorage = \Drupal::service('config.storage');
diff --git a/src/EventSubscriber/AmazonApiSubscriber.php b/src/EventSubscriber/AmazonApiSubscriber.php
index 5f3c0e6..30901d6 100644
--- a/src/EventSubscriber/AmazonApiSubscriber.php
+++ b/src/EventSubscriber/AmazonApiSubscriber.php
@@ -2,12 +2,12 @@
 
 namespace Drupal\amazon_product_widget\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -57,12 +57,12 @@ class AmazonApiSubscriber implements EventSubscriberInterface {
   /**
    * Unset cookie so the whole request acts as anonymous for everybody.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event to process.
    *
    * @see \Drupal\Core\EventSubscriber\FinishResponseSubscriber::onRespond()
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
@@ -83,12 +83,12 @@ class AmazonApiSubscriber implements EventSubscriberInterface {
   /**
    * Sets proper cache control header.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    *
    * @see \Drupal\Core\EventSubscriber\FinishResponseSubscriber::onRespond()
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
