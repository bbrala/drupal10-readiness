modules/contrib/filefield_sources/filefield_sources.api.php
modules/contrib/filefield_sources/src/Access/FieldAccessCheck.php
modules/contrib/filefield_sources/tests/src/Functional/EmptyValuesTest.php
modules/contrib/filefield_sources/filefield_sources.install
modules/contrib/filefield_sources/filefield_sources.module
modules/contrib/filefield_sources/src/Annotation/FilefieldSource.php
modules/contrib/filefield_sources/src/Controller/ImceController.php
modules/contrib/filefield_sources/src/File/MimeType/ExtensionMimeTypeGuesser.php
modules/contrib/filefield_sources/tests/src/Functional/FileFieldSourcesTestBase.php
modules/contrib/filefield_sources/src/FilefieldSourceInterface.php
modules/contrib/filefield_sources/src/FilefieldSourceManager.php
modules/contrib/filefield_sources/src/FilefieldSourcesPreRenderCallback.php
modules/contrib/filefield_sources/src/FilefieldSourcesServiceProvider.php
modules/contrib/filefield_sources/src/ImceScanner.php
modules/contrib/filefield_sources/src/Plugin/FilefieldSource/Attach.php
modules/contrib/filefield_sources/src/Plugin/FilefieldSource/Clipboard.php
modules/contrib/filefield_sources/tests/src/Functional/ImceSourceTest.php
modules/contrib/filefield_sources/src/Plugin/FilefieldSource/Imce.php
modules/contrib/filefield_sources/tests/src/Functional/MultipleValuesTest.php
modules/contrib/filefield_sources/src/Plugin/FilefieldSource/Reference.php
modules/contrib/filefield_sources/tests/src/Functional/ReferenceSourceTest.php
modules/contrib/filefield_sources/tests/src/Functional/RemoteSourceTest.php
modules/contrib/filefield_sources/tests/src/Functional/UploadSourceTest.php
modules/contrib/filefield_sources/tests/src/Unit/FieldAccessCheckTest.php
modules/contrib/filefield_sources/src/Plugin/FilefieldSource/Remote.php
modules/contrib/filefield_sources/src/ProxyClass/File/MimeType/ExtensionMimeTypeGuesser.php
modules/contrib/filefield_sources/src/Routing/FilefieldSourcesRoutes.php
modules/contrib/filefield_sources/tests/src/Functional/AttachSourceTest.php
modules/contrib/filefield_sources/tests/src/Functional/ClipboardSourceTest.php

8 files with changes
====================

1) modules/contrib/filefield_sources/tests/src/Functional/ReferenceSourceTest.php:59

    ---------- begin diff ----------
@@ @@
     $query = $this->findCharacterNotInString($first_character);
     $options['query']['q'] = $query;
     $autocomplete_result = Json::decode($this->drupalGet('file/reference/node/' . $this->typeName . '/' . $this->fieldName, $options));
-    $this->assertEqual($autocomplete_result, [], "No files that have name starts with '$query'");
+    $this->assertEquals($autocomplete_result, [], "No files that have name starts with '$query'");

     // STARTS_WITH: not empty results.
     $query = $first_character;
     $options['query']['q'] = $query;
     $autocomplete_result = Json::decode($this->drupalGet('file/reference/node/' . $this->typeName . '/' . $this->fieldName, $options + ['query' => ['q' => $query]]));
-    $this->assertEqual($autocomplete_result[0]['label'], $filename, 'Autocompletion return correct label.');
-    $this->assertEqual($autocomplete_result[0]['value'], $filename . ' [fid:' . $file->id() . ']', 'Autocompletion return correct value.');
+    $this->assertEquals($autocomplete_result[0]['label'], $filename, 'Autocompletion return correct label.');
+    $this->assertEquals($autocomplete_result[0]['value'], $filename . ' [fid:' . $file->id() . ']', 'Autocompletion return correct value.');

     // Switch to 'Contains' match type.
     $this->updateFilefieldSourcesSettings('source_reference', 'autocomplete', '1');
@@ @@
     $query = $this->findCharacterNotInString($filename);
     $options['query']['q'] = $query;
     $autocomplete_result = Json::decode($this->drupalGet('file/reference/node/' . $this->typeName . '/' . $this->fieldName, $options + ['query' => ['q' => $query]]));
-    $this->assertEqual($autocomplete_result, [], "No files that have name contains '$query'");
+    $this->assertEquals($autocomplete_result, [], "No files that have name contains '$query'");

     // CONTAINS: not empty results.
     $query = $second_character;
     $options['query']['q'] = $query;
     $autocomplete_result = Json::decode($this->drupalGet('file/reference/node/' . $this->typeName . '/' . $this->fieldName, $options + ['query' => ['q' => $query]]));
-    $this->assertEqual($autocomplete_result[0]['label'], $filename, 'Autocompletion return correct label.');
-    $this->assertEqual($autocomplete_result[0]['value'], $filename . ' [fid:' . $file->id() . ']', 'Autocompletion return correct value.');
+    $this->assertEquals($autocomplete_result[0]['label'], $filename, 'Autocompletion return correct label.');
+    $this->assertEquals($autocomplete_result[0]['value'], $filename . ' [fid:' . $file->id() . ']', 'Autocompletion return correct value.');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/filefield_sources/tests/src/Functional/MultipleValuesTest.php:55

    ---------- begin diff ----------
@@ @@
   /**
    * Sets up for multiple values test case.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setUpImce();

@@ @@

     $path = \Drupal::config('system.file')->get('default_scheme') . '://' . FILEFIELD_SOURCE_ATTACH_DEFAULT_PATH . '/';
     $this->temporaryFile = $this->createTemporaryFile($path);
+    $this->drupalGet('admin/structure/types/manage/' . $this->typeName . '/fields/node.' . $this->typeName . '.' . $this->fieldName . '/storage');

     // Change allowed number of values.
-    $this->drupalPostForm('admin/structure/types/manage/' . $this->typeName . '/fields/node.' . $this->typeName . '.' . $this->fieldName . '/storage', ['cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED], t('Save field settings'));
+    $this->submitForm(['cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED], t('Save field settings'));

     $this->enableSources([
       'upload' => TRUE,
@@ @@
   public function testUploadFilesThenSaveNode() {
     $this->uploadFiles();

-    $this->drupalPostForm(NULL, ['title[0][value]' => $this->randomMachineName()], t('Save'));
+    $this->submitForm(['title[0][value]' => $this->randomMachineName()], t('Save'));

     // Ensure all files are saved to node.
-    $this->assertLink('INSTALL.txt');
-    $this->assertLink($this->permanentFileEntity1->getFilename());
-    $this->assertLink($this->temporaryFile->filename);
-    $this->assertLink($this->temporaryFileEntity2->getFilename());
-    $this->assertLink($this->temporaryFileEntity1->getFilename());
-    $this->assertLink($this->permanentFileEntity2->getFilename());
+    $this->assertSession()->linkExists('INSTALL.txt');
+    $this->assertSession()->linkExists($this->permanentFileEntity1->getFilename());
+    $this->assertSession()->linkExists($this->temporaryFile->filename);
+    $this->assertSession()->linkExists($this->temporaryFileEntity2->getFilename());
+    $this->assertSession()->linkExists($this->temporaryFileEntity1->getFilename());
+    $this->assertSession()->linkExists($this->permanentFileEntity2->getFilename());
   }

   /**
@@ @@

     // Ensure files have been uploaded.
     $remove_buttons = $this->xpath('//input[@type="submit" and @value="' . t('Remove') . '"]');
-    $this->assertEqual(count($remove_buttons), $uploaded_files, "There are $uploaded_files files have been uploaded.");
+    $this->assertEquals(count($remove_buttons), $uploaded_files, "There are $uploaded_files files have been uploaded.");

     return $uploaded_files;
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertLinkRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/filefield_sources/tests/src/Functional/ImceSourceTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Sets up for imce source test case.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setUpImce();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/filefield_sources/tests/src/Functional/FileFieldSourcesTestBase.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * Sets up for file field sources test cases.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Grant "administer node form display" permission.
@@ @@
       $this->grantPermissions($role, ['administer imce']);
       // Assign member profile to user's role.
       $edit["roles_profiles[$rid][public]"] = 'member';
-      $this->drupalPostForm('admin/config/media/imce', $edit, t('Save configuration'));
+      $this->drupalGet('admin/config/media/imce');
+      $this->submitForm($edit, t('Save configuration'));
     }
   }

@@ @@
     $this->assertSession()->responseContains("File field sources: upload");

     // Click on the widget settings button to open the widget settings form.
-    $this->drupalPostForm(NULL, [], $this->fieldName . "_settings_edit");
+    $this->submitForm([], $this->fieldName . "_settings_edit");

     // Enable sources.
     $prefix = 'fields[' . $this->fieldName . '][settings_edit_form][third_party_settings][filefield_sources][filefield_sources][sources]';
@@ @@
     foreach ($sources as $source => $enabled) {
       $edit[$prefix . '[' . $source . ']'] = $enabled ? TRUE : FALSE;
     }
-    $this->drupalPostForm(NULL, $edit, $this->fieldName . '_plugin_settings_update');
+    $this->submitForm($edit, $this->fieldName . '_plugin_settings_update');
     $this->assertSession()->responseContains("File field sources: " . implode(', ', array_keys($sources)));

     // Save the form to save the third party settings.
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));

     $add_node = 'node/add/' . $this->typeName;
     $this->drupalGet($add_node);
@@ @@
     $this->drupalGet($manage_display);

     // Click on the widget settings button to open the widget settings form.
-    $this->drupalPostForm(NULL, [], $this->fieldName . "_settings_edit");
+    $this->submitForm([], $this->fieldName . "_settings_edit");

     // Update settings.
     $name = 'fields[' . $this->fieldName . '][settings_edit_form][third_party_settings][filefield_sources][filefield_sources]' . "[$source_key][$key]";
     $edit = [$name => $value];
-    $this->drupalPostForm(NULL, $edit, $this->fieldName . '_plugin_settings_update');
+    $this->submitForm($edit, $this->fieldName . '_plugin_settings_update');

     // Save the form to save the third party settings.
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));
   }

   /**
@@ @@
     else {
       $edit = [];
     }
-    $this->drupalPostForm(NULL, $edit, $this->fieldName . '_' . $delta . '_attach');
+    $this->submitForm($edit, $this->fieldName . '_' . $delta . '_attach');

     if ($filename) {
       $this->assertFileUploaded($filename, $delta);
@@ @@
     $name = $this->fieldName . '[' . $delta . '][filefield_reference][autocomplete]';
     $value = $fid ? $filename . ' [fid:' . $fid . ']' : '';
     $edit = [$name => $value];
-    $this->drupalPostForm(NULL, $edit, $this->fieldName . '_' . $delta . '_autocomplete_select');
+    $this->submitForm($edit, $this->fieldName . '_' . $delta . '_autocomplete_select');

     if ($filename) {
       $this->assertFileUploaded($filename, $delta);
@@ @@
   public function uploadFileByRemoteSource($url = '', $filename = '', $delta = 0) {
     $name = $this->fieldName . '[' . $delta . '][filefield_remote][url]';
     $edit = [$name => $url];
-    $this->drupalPostForm(NULL, $edit, $this->fieldName . '_' . $delta . '_transfer');
+    $this->submitForm($edit, $this->fieldName . '_' . $delta . '_transfer');

     if ($filename) {
       $this->assertFileUploaded($filename, $delta);
@@ @@
     $edit = [
       $name => $uri ? \Drupal::getContainer()->get('file_system')->realPath($uri) : '',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->fieldName . '_' . $delta . '_upload_button');
+    $this->submitForm($edit, $this->fieldName . '_' . $delta . '_upload_button');

     if ($filename) {
       $this->assertFileUploaded($filename, $delta);
@@ @@
    *   Delta in multiple values field.
    */
   public function removeFile($filename, $delta = 0) {
-    $this->drupalPostForm(NULL, [], $this->fieldName . '_' . $delta . '_remove_button');
+    $this->submitForm([], $this->fieldName . '_' . $delta . '_remove_button');

     // Ensure file is removed.
     $this->assertFileRemoved($filename);
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/filefield_sources/tests/src/Functional/EmptyValuesTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Sets up for empty values test case.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setUpImce();
   }
@@ @@
    * Tests all sources enabled.
    */
   public function testAllSourcesEnabled() {
+    $this->drupalGet('admin/structure/types/manage/' . $this->typeName . '/fields/node.' . $this->typeName . '.' . $this->fieldName . '/storage');
     // Change allowed number of values.
-    $this->drupalPostForm('admin/structure/types/manage/' . $this->typeName . '/fields/node.' . $this->typeName . '.' . $this->fieldName . '/storage', ['cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED], t('Save field settings'));
+    $this->submitForm(['cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED], t('Save field settings'));

     $this->enableSources([
       'upload' => TRUE,
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/filefield_sources/tests/src/Functional/AttachSourceTest.php:95

    ---------- begin diff ----------
@@ @@
     $this->assertTrue($this->isOptionPresent($file->uri), 'File option is present.');

     // Ensure empty message is not present.
-    $this->assertNoText('There currently are no files to attach.', "Empty message is not present.");
+    $this->assertSession()->pageTextNotContains('There currently are no files to attach.');

     // Attach button is always present.
     $this->assertFieldByXpath('//input[@type="submit"]', t('Attach'), 'Attach button is present.');
@@ @@
     $this->assertFalse($this->isOptionPresent($file->uri), 'File option is not present.');

     // Ensure empty message is present.
-    $this->assertText('There currently are no files to attach.', "Empty message is present.");
+    $this->assertSession()->pageTextContains('There currently are no files to attach.');

     // Attach button is always present.
     $this->assertFieldByXpath('//input[@type="submit"]', t('Attach'), 'Attach button is present.');
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/filefield_sources/src/ProxyClass/File/MimeType/ExtensionMimeTypeGuesser.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\filefield_sources\ProxyClass\File\MimeType {

+    use Symfony\Component\Mime\MimeTypesInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
     /**
      * Provides a proxy class for \Drupal\filefield_sources\File\MimeType\ExtensionMimeTypeGuesser.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class ExtensionMimeTypeGuesser implements \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+    class ExtensionMimeTypeGuesser implements MimeTypesInterface
     {

-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;

         /**
          * The id of the original proxied service.
@@ @@
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


8) modules/contrib/filefield_sources/src/Plugin/FilefieldSource/Clipboard.php:57

    ---------- begin diff ----------
@@ @@

       $filename = trim($input['filefield_clipboard']['filename']);
       $filename = preg_replace('/\.[a-z0-9]{3,4}$/', '', $filename);
-      $filename = (empty($filename) ? 'paste_' . REQUEST_TIME : $filename) . '.' . $extension;
+      $filename = (empty($filename) ? 'paste_' . \Drupal::time()->getRequestTime() : $filename) . '.' . $extension;
       $filepath = \Drupal::service('file_system')->createFilename($filename, $temporary_directory);

       $copy_success = FALSE;
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector


 [OK] 8 files have been changed by Rector                                       

