modules/contrib/ga/ga.install
modules/contrib/ga/src/AnalyticsCommand/Dimension.php
modules/contrib/ga/src/Form/AdminSettingsForm.php
modules/contrib/ga/ga.module
modules/contrib/ga/modules/ga_tokens/src/EventSubscriber/AnalyticsSubscriber.php
modules/contrib/ga/src/AnalyticsCommand/DrupalSettingCommandsInterface.php
modules/contrib/ga/src/AnalyticsCommand/DrupalSettingCommandsTrait.php
modules/contrib/ga/src/AnalyticsCommand/Event.php
modules/contrib/ga/src/AnalyticsCommand/Exception.php
modules/contrib/ga/src/AnalyticsCommand/Generic.php
modules/contrib/ga/src/AnalyticsCommand/Group.php
modules/contrib/ga/modules/ga_tokens/src/Form/GlobalForm.php
modules/contrib/ga/src/AnalyticsCommand/GroupInterface.php
modules/contrib/ga/src/AnalyticsCommand/Linker/AutoLink.php
modules/contrib/ga/src/AnalyticsCommand/Metric.php
modules/contrib/ga/src/AnalyticsCommand/Pageview.php
modules/contrib/ga/src/AnalyticsCommand/RequirePlugin.php
modules/contrib/ga/src/AnalyticsCommand/Send.php
modules/contrib/ga/src/AnalyticsCommand/Set.php
modules/contrib/ga/src/AnalyticsCommand/Timing.php
modules/contrib/ga/tests/src/Unit/AnalyticsCommand/CreateTest.php
modules/contrib/ga/src/AnalyticsEvents.php
modules/contrib/ga/src/CommandRegistryService.php
modules/contrib/ga/src/Event/CollectEvent.php
modules/contrib/ga/src/EventSubscriber/CspSubscriber.php
modules/contrib/ga/tests/src/Unit/AnalyticsCommand/DimensionTest.php
modules/contrib/ga/src/EventSubscriber/DefaultCommandSubscriber.php
modules/contrib/ga/tests/src/Unit/AnalyticsCommand/EventTest.php
modules/contrib/ga/tests/src/Unit/AnalyticsCommand/GenericTest.php
modules/contrib/ga/src/AnalyticsCommand/Create.php
modules/contrib/ga/tests/src/Unit/AnalyticsCommand/Linker/AutoLinkTest.php
modules/contrib/ga/tests/src/Unit/AnalyticsCommand/MetricTest.php
modules/contrib/ga/tests/src/Unit/AnalyticsCommand/PageviewTest.php
modules/contrib/ga/tests/src/Unit/AnalyticsCommand/RequirePluginTest.php
modules/contrib/ga/tests/src/Unit/AnalyticsCommand/SendTest.php
modules/contrib/ga/tests/src/Unit/AnalyticsCommand/SetTest.php
modules/contrib/ga/tests/src/Unit/EventSubscriber/CspSubscriberTest.php

6 files with changes
====================

1) modules/contrib/ga/src/Event/CollectEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ga\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\ga\AnalyticsCommand\DrupalSettingCommandsInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Class CollectEvent.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ga/tests/src/Unit/EventSubscriber/CspSubscriberTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     if (!class_exists(Csp::class)) {
@@ @@
       $this->markTestSkipped('Content Security Policy module is not available.');
     }

-    $this->response = $this->getMockBuilder(HtmlResponse::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->response = $this->createMock(HtmlResponse::class);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/ga/tests/src/Unit/AnalyticsCommand/SendTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Test specifying an invalid hit type.
    *
-   * @expectedException \InvalidArgumentException
    *
-   * @expectedExceptionMessage Invalid hit type specified.
    */
   public function testInvalidHitType() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('Invalid hit type specified.');
     $command = new Send('badtype');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/ga/tests/src/Unit/AnalyticsCommand/MetricTest.php:43

    ---------- begin diff ----------
@@ @@

   /**
    * Test an invalid index of type string.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testStringIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Metric('index', 123);
   }

   /**
    * Test an invalid index of type float.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testFloatIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Metric(4.2, 123);
   }

   /**
    * Test an index greater than the valid range.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testOutOfBoundsIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Metric(420, 123);
   }

   /**
    * Test a string value.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testStringValue() {
+    $this->expectException(\InvalidArgumentException::class);
     new Metric(42, 'value');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/ga/tests/src/Unit/AnalyticsCommand/EventTest.php:82

    ---------- begin diff ----------
@@ @@
   /**
    * Test with a float event value.
    *
-   * @expectedException \InvalidArgumentException
    *
-   * @expectedExceptionMessage Event value must be a positive integer
    */
   public function testWithFloatValue() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('Event value must be a positive integer');
     $command = new Event('category', 'action', NULL, 1.5);
   }

@@ @@
   /**
    * Test with a negative integer event value.
    *
-   * @expectedException \InvalidArgumentException
    *
-   * @expectedExceptionMessage Event value must be a positive integer
    */
   public function testWithNegativeIntegerValue() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('Event value must be a positive integer');
     $command = new Event('category', 'action', NULL, -1);
   }

@@ @@
   /**
    * Test with a string event value.
    *
-   * @expectedException \InvalidArgumentException
    *
-   * @expectedExceptionMessage Event value must be a positive integer
    */
   public function testWithStringValue() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('Event value must be a positive integer');
     $command = new Event('category', 'action', NULL, '1');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/ga/tests/src/Unit/AnalyticsCommand/DimensionTest.php:30

    ---------- begin diff ----------
@@ @@

   /**
    * Test an invalid index of type string.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testStringIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Dimension('index', 'value');
   }

   /**
    * Test an invalid index of type float.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testFloatIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Dimension(4.2, 'value');
   }

   /**
    * Test an index greater than the valid range.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testOutOfBoundsIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Dimension(420, 'value');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

