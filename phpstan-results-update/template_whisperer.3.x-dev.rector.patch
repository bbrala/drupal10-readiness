diff --git a/tests/src/Functional/ConditionalBlockTest.php b/tests/src/Functional/ConditionalBlockTest.php
index 7eb12c9..2a67f7b 100644
--- a/tests/src/Functional/ConditionalBlockTest.php
+++ b/tests/src/Functional/ConditionalBlockTest.php
@@ -274,7 +274,7 @@ class ConditionalBlockTest extends TemplateWhispererTestBase {
     // Update the placed block to be visible only on "Timeline".
     $this->drupalGet('admin/structure/block/manage/' . $this->blocks[0]->id());
     $edit['visibility[template_whisperer][suggestions][' . $this->suggestions[0]->id() . ']'] = TRUE;
-    $this->drupalPostForm(NULL, $edit, 'Save block');
+    $this->submitForm($edit, 'Save block');
 
     // Asserts the configurations has been saved.
     $this->assertSession()->pageTextContains('The block configuration has been saved');
@@ -285,7 +285,7 @@ class ConditionalBlockTest extends TemplateWhispererTestBase {
     $this->drupalGet('admin/structure/block/manage/' . $this->blocks[0]->id());
     $edit['visibility[template_whisperer][suggestions][' . $this->suggestions[0]->id() . ']'] = TRUE;
     $edit['visibility[template_whisperer][suggestions][' . $this->suggestions[1]->id() . ']'] = TRUE;
-    $this->drupalPostForm(NULL, $edit, 'Save block');
+    $this->submitForm($edit, 'Save block');
     // Asserts the configurations has been saved.
     $this->assertSession()->pageTextContains('The block configuration has been saved');
     $this->clickLink('Configure');
diff --git a/tests/src/Functional/SuggestionTokenReplaceTest.php b/tests/src/Functional/SuggestionTokenReplaceTest.php
index 4c7c790..aeda044 100644
--- a/tests/src/Functional/SuggestionTokenReplaceTest.php
+++ b/tests/src/Functional/SuggestionTokenReplaceTest.php
@@ -109,23 +109,23 @@ class SuggestionTokenReplaceTest extends TemplateWhispererTestBase {
 
     // Suggestion tokens.
     $replacement = $token_service->replace('[suggestion:name]', ['suggestion' => $this->suggestions['foo']], $options);
-    $this->assertEqual($replacement, $this->suggestions['foo']->getName());
+    $this->assertEquals($replacement, $this->suggestions['foo']->getName());
 
     // Chainable Lookup -> Suggestion tokens.
     $replacement = $token_service->replace('[suggestion:lookup:foo]', [], $options);
-    $this->assertEqual($replacement, $this->suggestions['foo']->getSuggestion());
+    $this->assertEquals($replacement, $this->suggestions['foo']->getSuggestion());
     $replacement = $token_service->replace('[suggestion:lookup:foo:name]', [], $options);
-    $this->assertEqual($replacement, $this->suggestions['foo']->getName());
+    $this->assertEquals($replacement, $this->suggestions['foo']->getName());
 
     // Chainable Lookup -> Entity tokens.
     $replacement = $token_service->replace('[suggestion:lookup:foo:entity:nid]', [], $options);
-    $this->assertEqual($replacement, $this->testNode->id());
+    $this->assertEquals($replacement, $this->testNode->id());
     $replacement = $token_service->replace('[suggestion:lookup:foo:entity:url]', [], $options);
-    $this->assertEqual($replacement, $this->testNode->toUrl('canonical', ['absolute' => TRUE])->toString());
+    $this->assertEquals($replacement, $this->testNode->toUrl('canonical', ['absolute' => TRUE])->toString());
 
     // Tests invalide token for node.
     $replacement = $token_service->replace('[suggestion:lookup:foo:entity]', [], $options);
-    $this->assertEqual($replacement, '[suggestion:lookup:foo:entity]');
+    $this->assertEquals($replacement, '[suggestion:lookup:foo:entity]');
   }
 
   /**
@@ -140,7 +140,7 @@ class SuggestionTokenReplaceTest extends TemplateWhispererTestBase {
 
     // Tests inexisting suggestion.
     $replacement = $token_service->replace('[suggestion:lookup:baz:entity:id]', [], $options);
-    $this->assertEqual($replacement, '[suggestion:lookup:baz:entity:id]');
+    $this->assertEquals($replacement, '[suggestion:lookup:baz:entity:id]');
   }
 
   /**
@@ -155,7 +155,7 @@ class SuggestionTokenReplaceTest extends TemplateWhispererTestBase {
 
     // Tests existing but non-used suggestion.
     $replacement = $token_service->replace('[suggestion:lookup:bar:entity:id]', [], $options);
-    $this->assertEqual($replacement, '[suggestion:lookup:bar:entity:id]');
+    $this->assertEquals($replacement, '[suggestion:lookup:bar:entity:id]');
   }
 
 }
diff --git a/tests/src/Functional/UiFieldTest.php b/tests/src/Functional/UiFieldTest.php
index e85e7e9..02960a8 100644
--- a/tests/src/Functional/UiFieldTest.php
+++ b/tests/src/Functional/UiFieldTest.php
@@ -76,7 +76,7 @@ class UiFieldTest extends TemplateWhispererTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $this->debugOff();
   }
 
diff --git a/tests/src/Kernel/FieldTemplateWhispererTest.php b/tests/src/Kernel/FieldTemplateWhispererTest.php
index 4e0fa23..95bbfd9 100644
--- a/tests/src/Kernel/FieldTemplateWhispererTest.php
+++ b/tests/src/Kernel/FieldTemplateWhispererTest.php
@@ -109,19 +109,19 @@ class FieldTemplateWhispererTest extends FieldKernelTestBase {
 
     $this->assertTrue($entity->field_template_whisperer instanceof FieldItemListInterface, 'Field implements interface.');
     $this->assertTrue($entity->field_template_whisperer[0] instanceof FieldItemInterface, 'Field item implements interface.');
-    $this->assertEqual($entity->field_template_whisperer->target_id, $target_id);
-    $this->assertEqual($entity->field_template_whisperer[0]->target_id, $target_id);
+    $this->assertEquals($entity->field_template_whisperer->target_id, $target_id);
+    $this->assertEquals($entity->field_template_whisperer[0]->target_id, $target_id);
 
     // Verify changing the field's value.
     $new_target_id = $this->suggestions['bar']->getSuggestion();
     $entity->field_template_whisperer->value = $new_target_id;
-    $this->assertEqual($entity->field_template_whisperer->value, $new_target_id);
+    $this->assertEquals($entity->field_template_whisperer->value, $new_target_id);
 
     // Read changed entity and assert changed values.
     $entity->save();
     $entity = $type_manager->getStorage('entity_test')->load($id);
-    $this->assertEqual($entity->field_template_whisperer->target_id, $target_id);
-    $this->assertEqual($entity->field_template_whisperer[0]->target_id, $target_id);
+    $this->assertEquals($entity->field_template_whisperer->target_id, $target_id);
+    $this->assertEquals($entity->field_template_whisperer[0]->target_id, $target_id);
   }
 
   /**
@@ -141,7 +141,7 @@ class FieldTemplateWhispererTest extends FieldKernelTestBase {
 
     foreach ($scenarios as $operation => $expected) {
       $result = $entity->field_template_whisperer->access($operation, $test_user);
-      $this->assertEqual($result, $expected);
+      $this->assertEquals($result, $expected);
     }
   }
 
diff --git a/tests/src/Kernel/TemplateWhispererManagerTest.php b/tests/src/Kernel/TemplateWhispererManagerTest.php
index 9704864..d28ba4b 100644
--- a/tests/src/Kernel/TemplateWhispererManagerTest.php
+++ b/tests/src/Kernel/TemplateWhispererManagerTest.php
@@ -112,7 +112,7 @@ class TemplateWhispererManagerTest extends KernelTestBase {
       $entity,
       'field_template_whisperer',
     ]);
-    $this->assertEqual('foo', $suggestions);
+    $this->assertEquals('foo', $suggestions);
 
     // Set an none-existing template whisperer.
     // This may happend when an whisperer is deleted but stay on node data.
