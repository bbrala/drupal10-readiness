modules/contrib/paragraphs_collection/modules/paragraphs_collection_demo/paragraphs_collection_demo.api.php
modules/contrib/paragraphs_collection/modules/paragraphs_collection_demo/paragraphs_collection_demo.module
modules/contrib/paragraphs_collection/src/Plugin/paragraphs/Behavior/ParagraphsLanguagePlugin.php
modules/contrib/paragraphs_collection/tests/src/Functional/ParagraphsCollectionStyleTest.php
modules/contrib/paragraphs_collection/paragraphs_collection.api.php
modules/contrib/paragraphs_collection/modules/paragraphs_collection_demo/src/Plugin/paragraphs/Behavior/ParagraphsAccordionPlugin.php
modules/contrib/paragraphs_collection/paragraphs_collection.install
modules/contrib/paragraphs_collection/modules/paragraphs_collection_demo/paragraphs_collection_demo.install
modules/contrib/paragraphs_collection/paragraphs_collection.module
modules/contrib/paragraphs_collection/src/Controller/OverviewController.php
modules/contrib/paragraphs_collection/modules/paragraphs_collection_demo/src/Plugin/paragraphs/Behavior/ParagraphsAnchorPlugin.php
modules/contrib/paragraphs_collection/tests/src/Functional/ParagraphsGridLayoutPluginTest.php
modules/contrib/paragraphs_collection/src/Plugin/paragraphs/Behavior/ParagraphsLockablePlugin.php
modules/contrib/paragraphs_collection/modules/paragraphs_collection_demo/src/Plugin/paragraphs/Behavior/ParagraphsBackgroundPlugin.php
modules/contrib/paragraphs_collection/src/Plugin/paragraphs/Behavior/ParagraphsStylePlugin.php
modules/contrib/paragraphs_collection/modules/paragraphs_collection_demo/src/Plugin/paragraphs/Behavior/ParagraphsSliderPlugin.php
modules/contrib/paragraphs_collection/src/EventSubscriber/ParagraphsCollectionStyleConfigCacheTag.php
modules/contrib/paragraphs_collection/src/Form/StylesOverviewForm.php
modules/contrib/paragraphs_collection/modules/paragraphs_collection_demo/tests/src/Functional/ParagraphsAccordionPluginTest.php
modules/contrib/paragraphs_collection/tests/src/Functional/ParagraphsLanguagePluginTest.php
modules/contrib/paragraphs_collection/src/StyleDiscovery.php
modules/contrib/paragraphs_collection/src/GridLayoutDiscovery.php
modules/contrib/paragraphs_collection/src/GridLayoutDiscoveryInterface.php
modules/contrib/paragraphs_collection/src/InvalidGridLayoutException.php
modules/contrib/paragraphs_collection/src/InvalidStyleException.php
modules/contrib/paragraphs_collection/src/Permissions.php
modules/contrib/paragraphs_collection/src/Plugin/paragraphs/Behavior/ParagraphsGridLayoutPlugin.php
modules/contrib/paragraphs_collection/tests/src/Functional/ParagraphsLockablePluginTest.php
modules/contrib/paragraphs_collection/modules/paragraphs_collection_demo/tests/src/Functional/ParagraphsAnchorPluginTest.php
modules/contrib/paragraphs_collection/src/StyleDiscoveryInterface.php
modules/contrib/paragraphs_collection/tests/src/Functional/ParagraphsCollectionCacheTest.php
modules/contrib/paragraphs_collection/modules/paragraphs_collection_demo/tests/src/Functional/ParagraphsBackgroundPluginTest.php
modules/contrib/paragraphs_collection/tests/src/Functional/ParagraphsTypesTest.php
modules/contrib/paragraphs_collection/tests/src/Functional/ParagraphsCollectionConfigurationTest.php
modules/contrib/paragraphs_collection/tests/src/Functional/ParagraphsCollectionOverviewTest.php
modules/contrib/paragraphs_collection/modules/paragraphs_collection_demo/tests/src/Functional/ParagraphsCollectionDemoTest.php
modules/contrib/paragraphs_collection/tests/src/FunctionalJavascript/ParagraphsCollectionStyleTest.php
modules/contrib/paragraphs_collection/tests/src/FunctionalJavascript/ParagraphsStylePluginTest.php
modules/contrib/paragraphs_collection/modules/paragraphs_collection_demo/tests/src/Functional/ParagraphsSliderPluginTest.php
modules/contrib/paragraphs_collection/modules/paragraphs_collection_test/paragraphs_collection_test.module

12 files with changes
=====================

1) modules/contrib/paragraphs_collection/modules/paragraphs_collection_demo/paragraphs_collection_demo.install:113

    ---------- begin diff ----------
@@ @@
   // PARAGRAPH DEMO ITEM: background image.
   // Image to be used for the background.
   $filename = 'kazuend-32607.jpg';
-  \Drupal::service('file_system')->copy(drupal_get_path('module', 'paragraphs_collection_demo') . '/files/' . $filename, 'public://' . $filename);
+  \Drupal::service('file_system')->copy(\Drupal::service('extension.list.module')->getPath('paragraphs_collection_demo') . '/files/' . $filename, 'public://' . $filename);
   $image = File::create([
     'uri' => 'public://' . $filename,
   ]);
@@ @@

   // Create an image.
   $filename = 'nasa-43566.jpg';
-  \Drupal::service('file_system')->copy(drupal_get_path('module', 'paragraphs_collection_demo') . '/files/' . $filename, 'public://' . $filename);
+  \Drupal::service('file_system')->copy(\Drupal::service('extension.list.module')->getPath('paragraphs_collection_demo') . '/files/' . $filename, 'public://' . $filename);
   $image = File::create([
     'uri' => 'public://' . $filename,
   ]);
@@ @@
  */
 function _paragraphs_collection_demo_create_image_paragraph($filename, $title, $alt = NULL) {
   // Create image from module files.
-  \Drupal::service('file_system')->copy(drupal_get_path('module', 'paragraphs_collection_demo') . '/files/' . $filename, 'public://' . $filename);
+  \Drupal::service('file_system')->copy(\Drupal::service('extension.list.module')->getPath('paragraphs_collection_demo') . '/files/' . $filename, 'public://' . $filename);
   $image = File::create([
     'uri' => 'public://' . $filename,
   ]);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


2) modules/contrib/paragraphs_collection/tests/src/Functional/ParagraphsCollectionOverviewTest.php:43

    ---------- begin diff ----------
@@ @@

     // Check the new link on the reports page.
     $this->drupalGet('/admin/reports');
-    $this->assertText('Overviews of items discoverable by behavior plugins.');
+    $this->assertSession()->pageTextContains('Overviews of items discoverable by behavior plugins.');
     $this->clickLink('Paragraphs Collection');

     // Check the grid layouts overview.
-    $this->assertUrl('/admin/reports/paragraphs_collection/layouts');
-    $this->assertTitle('Available grid layouts | Drupal');
-    $this->assertText('Grid layout label or ID');
-    $this->assertText('Details');
-    $this->assertText('Used in');
+    $this->assertSession()->addressEquals('/admin/reports/paragraphs_collection/layouts');
+    $this->assertSession()->titleEquals('Available grid layouts | Drupal');
+    $this->assertSession()->pageTextContains('Grid layout label or ID');
+    $this->assertSession()->pageTextContains('Details');
+    $this->assertSession()->pageTextContains('Used in');

     // Check that a concrete grid layout is displayed.
-    $this->assertText('Three columns 1 - 1 - 2');
-    $this->assertText('Three columns layout of 1/4, 1/4 and 1/2 width.');
-    $this->assertText('paragraphs_collection_demo_1_1_2_column');
-    $this->assertLink('Grid');
-    $this->assertLinkByHref('/admin/structure/paragraphs_type/grid');
+    $this->assertSession()->pageTextContains('Three columns 1 - 1 - 2');
+    $this->assertSession()->pageTextContains('Three columns layout of 1/4, 1/4 and 1/2 width.');
+    $this->assertSession()->pageTextContains('paragraphs_collection_demo_1_1_2_column');
+    $this->assertSession()->linkExists('Grid');
+    $this->assertSession()->linkByHrefExists('/admin/structure/paragraphs_type/grid');

     // Check the tabs.
-    $this->assertLink('Layouts');
+    $this->assertSession()->linkExists('Layouts');
     $this->clickLink('Styles');

     // Check the styles layouts overview.
-    $this->assertUrl('/admin/reports/paragraphs_collection/styles');
-    $this->assertTitle('Available styles | Drupal');
-    $this->assertText('Group');
-    $this->assertText('Style label or ID');
-    $this->assertText('Details');
-    $this->assertText('Used in');
+    $this->assertSession()->addressEquals('/admin/reports/paragraphs_collection/styles');
+    $this->assertSession()->titleEquals('Available styles | Drupal');
+    $this->assertSession()->pageTextContains('Group');
+    $this->assertSession()->pageTextContains('Style label or ID');
+    $this->assertSession()->pageTextContains('Details');
+    $this->assertSession()->pageTextContains('Used in');

     // Check that a concrete style is displayed.
-    $this->assertText('Blue');
-    $this->assertText('paragraphs-blue');
-    $this->assertText('General Group');
-    $this->assertLink('Container');
-    $this->assertLinkByHref('/admin/structure/paragraphs_type/container');
+    $this->assertSession()->pageTextContains('Blue');
+    $this->assertSession()->pageTextContains('paragraphs-blue');
+    $this->assertSession()->pageTextContains('General Group');
+    $this->assertSession()->linkExists('Container');
+    $this->assertSession()->linkByHrefExists('/admin/structure/paragraphs_type/container');

     // Check the tabs.
-    $this->assertLink('Layouts');
-    $this->assertLink('Styles');
+    $this->assertSession()->linkExists('Layouts');
+    $this->assertSession()->linkExists('Styles');

     // Disable the grid layout and style plugins for all paragraphs types.
     $paragraph_type_ids = \Drupal::entityQuery('paragraphs_type')->execute();
@@ @@
     // Check the grid layouts overview page displays grid layouts but no
     // paragraphs types.
     $this->drupalGet('/admin/reports/paragraphs_collection/layouts');
-    $this->assertText('Three columns 1 - 1 - 2');
-    $this->assertText('Three columns layout of 1/4, 1/4 and 1/2 width.');
-    $this->assertText('paragraphs_collection_demo_1_1_2_column');
-    $this->assertNoLink('Grid');
-    $this->assertNoLinkByHref('/admin/structure/paragraphs_type/grid');
+    $this->assertSession()->pageTextContains('Three columns 1 - 1 - 2');
+    $this->assertSession()->pageTextContains('Three columns layout of 1/4, 1/4 and 1/2 width.');
+    $this->assertSession()->pageTextContains('paragraphs_collection_demo_1_1_2_column');
+    $this->assertSession()->linkNotExists('Grid');
+    $this->assertSession()->linkByHrefNotExists('/admin/structure/paragraphs_type/grid');

     // Check the styles overview page displays styles but no paragraphs types.
     $this->drupalGet('/admin/reports/paragraphs_collection/styles');
-    $this->assertText('Blue');
-    $this->assertText('paragraphs-blue');
-    $this->assertText('General Group');
-    $this->assertNoLink('Container');
-    $this->assertNoLinkByHref('/admin/structure/paragraphs_type/container');
+    $this->assertSession()->pageTextContains('Blue');
+    $this->assertSession()->pageTextContains('paragraphs-blue');
+    $this->assertSession()->pageTextContains('General Group');
+    $this->assertSession()->linkNotExists('Container');
+    $this->assertSession()->linkByHrefNotExists('/admin/structure/paragraphs_type/container');
+    $this->drupalGet('/admin/reports/paragraphs_collection/styles');

     // Assert saved styles are sorted alphabetically.
-    $this->drupalPostForm('/admin/reports/paragraphs_collection/styles', [
+    $this->submitForm([
       'styles[underline][enabled]' => TRUE,
       'styles[advanced][enabled]' => TRUE,
     ], 'Save configuration');
-    $this->assertText('The configuration options have been saved.');
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $this->assertEquals([
       'advanced',
       'underline',
    ----------- end diff -----------

Applied rules:
 * AssertLinkByHrefRector
 * AssertLinkRector
 * AssertNoLinkByHrefRector
 * AssertNoLinkRector
 * AssertTextRector
 * AssertTitleRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/paragraphs_collection/modules/paragraphs_collection_demo/tests/src/Functional/ParagraphsSliderPluginTest.php:41

    ---------- begin diff ----------
@@ @@
    */
   public function testCreatingSliderContent() {
     $this->fieldUIAddExistingField('admin/structure/paragraphs_type/slide_content', 'paragraphs_text', 'slide_content');
-    $this->assertText('Saved slide_content configuration');
+    $this->assertSession()->pageTextContains('Saved slide_content configuration');

     // Add new content.
     $this->drupalGet('node/add/paragraphed_test');
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_slider_add_more');
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_0_subform_field_slides_slide_content_add_more');
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_0_subform_field_slides_text_add_more');
+    $this->submitForm(NULL, 'field_paragraphs_slider_add_more');
+    $this->submitForm(NULL, 'field_paragraphs_0_subform_field_slides_slide_content_add_more');
+    $this->submitForm(NULL, 'field_paragraphs_0_subform_field_slides_text_add_more');
     $edit = [
       'title[0][value]' => 'Slider',
       'field_paragraphs[0][subform][field_slides][0][subform][paragraphs_text][0][value]' => 'First slide.',
@@ @@
       'field_paragraphs[0][subform][field_slides][1][subform][paragraphs_text][0][value]' => 'Second slide.',
       'field_paragraphs[0][behavior_plugins][slider][slick_slider]' => 'default'
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText('paragraphed_test Slider has been created.');
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->pageTextContains('paragraphed_test Slider has been created.');

     $this->drupalGet('node/1');
     $xpath = '//div[@class = "paragraph paragraph--type--slider paragraph--view-mode--default"]//div[contains(@class, "slick")]';
@@ @@
     $this->assertFieldByXPath($xpath, NULL, "Slick class found");

     $this->drupalGet('admin/structure/paragraphs_type/slider/fields');
-    $this->drupalPostForm('admin/structure/paragraphs_type/slider/fields/paragraph.slider.field_slides/delete', [], t('Delete'));
-    $this->assertText('The field Slides has been deleted from the Slider content type.');
+    $this->drupalGet('admin/structure/paragraphs_type/slider/fields/paragraph.slider.field_slides/delete');
+    $this->submitForm([], t('Delete'));
+    $this->assertSession()->pageTextContains('The field Slides has been deleted from the Slider content type.');

     $node = $this->getNodeByTitle('Slider');
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalGet('admin/structure/paragraphs_type/slider');
-    $this->assertResponse(200);
-    $this->assertText('There are no fields available with the cardinality greater than one. Please add at least one in the Manage fields page.');
-    $this->drupalPostForm(NULL, ['behavior_plugins[slider][enabled]' => TRUE], t('Save'));
-    $this->assertText('The Slider plugin cannot be enabled if there is no field to be mapped.');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('There are no fields available with the cardinality greater than one. Please add at least one in the Manage fields page.');
+    $this->submitForm(['behavior_plugins[slider][enabled]' => TRUE], t('Save'));
+    $this->assertSession()->pageTextContains('The Slider plugin cannot be enabled if there is no field to be mapped.');
   }

   /**
@@ @@
         'label' => 'Text',
         'field_name' => 'paragraphs_text',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save and continue'));
+    $this->submitForm($edit, t('Save and continue'));
     $edit = [
       'cardinality' => '-1',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save field settings'));
-    $this->assertText('Updated field Text field settings');
-    $this->drupalPostForm(NULL, NULL, t('Save settings'));
-    $this->assertText('Saved Text configuration');
+    $this->submitForm($edit, t('Save field settings'));
+    $this->assertSession()->pageTextContains('Updated field Text field settings');
+    $this->submitForm(NULL, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Text configuration');

     //Choose the field to be used as slider items
     $this->drupalGet('admin/structure/paragraphs_type/slider');
-    $this->assertText('Slick Optionsets');
-    $this->assertText('Enable the Slick UI from the module list to create more options.');
+    $this->assertSession()->pageTextContains('Slick Optionsets');
+    $this->assertSession()->pageTextContains('Enable the Slick UI from the module list to create more options.');
     $edit = [
       'behavior_plugins[slider][settings][field_name]' => 'field_paragraphs_text',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertText('Saved the Slider Paragraphs type.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains('Saved the Slider Paragraphs type.');

     // Add slider content.
     $this->drupalGet('node/add/paragraphed_test');
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_slider_add_more');
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_text_add_more');
+    $this->submitForm(NULL, 'field_paragraphs_slider_add_more');
+    $this->submitForm(NULL, 'field_paragraphs_text_add_more');
     $edit = [
     'title[0][value]' => 'SldierDemo',
     'field_paragraphs[0][subform][field_paragraphs_text][0][value]' => 'First slide.',
@@ @@
     'field_paragraphs[1][subform][paragraphs_text][0][value]' => 'Second slide',
     'field_paragraphs[0][behavior_plugins][slider][slick_slider]' => 'default',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText('paragraphed_test SldierDemo has been created.');
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->pageTextContains('paragraphed_test SldierDemo has been created.');
   }

   /**
@@ @@
   public function testOptionSetDescription() {
     $this->loginAsAdmin();
     $this->drupalGet('admin/structure/paragraphs_type/slider');
-    $this->assertText('Select none, to show all.');
-    $this->assertNoText('Enable the Slick UI from the module list to create more options.');
+    $this->assertSession()->pageTextContains('Select none, to show all.');
+    $this->assertSession()->pageTextNotContains('Enable the Slick UI from the module list to create more options.');
     $this->loginAsAdmin([
       'administer modules',
     ]);
     $this->drupalGet('admin/structure/paragraphs_type/slider');
-    $this->assertText('Enable the Slick UI from the module list to create more options.');
+    $this->assertSession()->pageTextContains('Enable the Slick UI from the module list to create more options.');
     \Drupal::service('module_installer')->install(['slick_ui']);
     $this->loginAsAdmin([
       'administer modules',
@@ @@
     ]);
     \Drupal::service('module_installer')->install(['slick_ui']);
     $this->drupalGet('admin/structure/paragraphs_type/slider');
-    $this->assertText('To have more options, go to the Slick UI config page and add items there.');
+    $this->assertSession()->pageTextContains('To have more options, go to the Slick UI config page and add items there.');
   }

   /**
@@ @@

     // Node edit: add three slides paragraph type.
     $this->drupalGet('node/add/paragraphed_test');
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_slider_add_more');
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_0_subform_field_slides_slide_content_add_more');
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_0_subform_field_slides_text_add_more');
+    $this->submitForm(NULL, 'field_paragraphs_slider_add_more');
+    $this->submitForm(NULL, 'field_paragraphs_0_subform_field_slides_slide_content_add_more');
+    $this->submitForm(NULL, 'field_paragraphs_0_subform_field_slides_text_add_more');
     $edit = [
       'title[0][value]' => 'Slider plugin summary',
       'field_paragraphs[0][subform][field_slides][0][subform][paragraphs_text][0][value]' => 'First slide',
@@ @@
       'field_paragraphs[0][subform][field_slides][1][subform][paragraphs_text][0][value]' => 'Second slide',
       'field_paragraphs[0][behavior_plugins][slider][slick_slider]' => 'default',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText('paragraphed_test Slider plugin summary has been created.');
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->pageTextContains('paragraphed_test Slider plugin summary has been created.');

     // Assert that the summary includes the text of the behavior plugins.
     $this->clickLink('Edit');
-    $this->assertRaw('<span class="summary-content">First slide</span>, <span class="summary-content">Second slide</span></div><div class="paragraphs-plugin-wrapper"><span class="summary-plugin"><span class="summary-plugin-label">Slider settings</span>Default');
+    $this->assertSession()->responseContains('<span class="summary-content">First slide</span>, <span class="summary-content">Second slide</span></div><div class="paragraphs-plugin-wrapper"><span class="summary-plugin"><span class="summary-plugin-label">Slider settings</span>Default');
     $this->assertFieldByXPath('//*[@id="edit-field-paragraphs-0-top-icons"]/span[@class="paragraphs-badge" and @title="2 children"]');
   }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/paragraphs_collection/modules/paragraphs_collection_demo/tests/src/Functional/ParagraphsBackgroundPluginTest.php:51

    ---------- begin diff ----------
@@ @@
       'settings[alt_field_required]' => FALSE,
     ];
     $edit_path = 'admin/structure/paragraphs_type/container/fields/paragraph.container.field_second_background_image';
-    $this->drupalPostForm($edit_path, $edit, 'Save settings');
+    $this->drupalGet($edit_path);
+    $this->submitForm($edit, 'Save settings');

     // Create a paragraphed content.
     $this->drupalGet('node/add/article');
-    $this->drupalPostForm(NULL, [], 'paragraphs_container_add_more');
+    $this->submitForm([], 'paragraphs_container_add_more');
     // Create image files to be used and upload them.
     $background_image = $this->getTestFiles('image')[0];
     $edit = [
       'files[paragraphs_0_subform_paragraphs_background_image_0]' => $background_image->uri,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Upload'));
+    $this->submitForm($edit, t('Upload'));
     // Add second image.
-    $this->drupalPostForm(NULL, [], 'paragraphs_0_subform_paragraphs_container_paragraphs_text_test_add_more');
+    $this->submitForm([], 'paragraphs_0_subform_paragraphs_container_paragraphs_text_test_add_more');
     $background_image = $this->getTestFiles('image')[1];
     $edit = [
       'files[paragraphs_0_subform_field_second_background_image_0]' => $background_image->uri,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Upload'));
-    $this->drupalPostForm(NULL, [], 'paragraphs_0_subform_paragraphs_container_paragraphs_text_test_add_more');
+    $this->submitForm($edit, t('Upload'));
+    $this->submitForm([], 'paragraphs_0_subform_paragraphs_container_paragraphs_text_test_add_more');
     // Add title and body text to the node and save it.
     $edit = [
       'title[0][value]' => 'Test article',
@@ @@
       'paragraphs[0][subform][paragraphs_container_paragraphs][0][subform][paragraphs_text][0][value]' => "This is a non background element",
       'paragraphs[0][subform][paragraphs_background_image][0][alt]' => 'This is the alternative text',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     $save_url = $this->getUrl();

@@ @@
     $edit = [
       'behavior_plugins[background][settings][background_image_field]' => 'paragraphs_background_image',
     ];
-    $this->drupalPostForm('admin/structure/paragraphs_type/container', $edit, 'Save');
+    $this->drupalGet('admin/structure/paragraphs_type/container');
+    $this->submitForm($edit, 'Save');
     // Check the Background image output.
     $this->drupalGet($save_url);
-    $this->assertRaw('paragraphs-behavior-background--image field field--name-paragraphs-background-image');
-    $this->assertRaw('paragraphs-behavior-background--element field field--name-field-second-background-image');
+    $this->assertSession()->responseContains('paragraphs-behavior-background--image field field--name-paragraphs-background-image');
+    $this->assertSession()->responseContains('paragraphs-behavior-background--element field field--name-field-second-background-image');
     // Set background_image to second background.
     $edit = [
       'behavior_plugins[background][settings][background_image_field]' => 'field_second_background_image',
     ];
-    $this->drupalPostForm('admin/structure/paragraphs_type/container', $edit, 'Save');
+    $this->drupalGet('admin/structure/paragraphs_type/container');
+    $this->submitForm($edit, 'Save');
     // Check the Background image output.
     $this->drupalGet($save_url);
-    $this->assertRaw('paragraphs-behavior-background--image field field--name-field-second-background-image');
-    $this->assertRaw('paragraphs-behavior-background--element field field--name-paragraphs-background-image');
+    $this->assertSession()->responseContains('paragraphs-behavior-background--image field field--name-field-second-background-image');
+    $this->assertSession()->responseContains('paragraphs-behavior-background--element field field--name-paragraphs-background-image');

     // Save paragraph with no image uploaded.
     $this->drupalGet('node/add/article');
-    $this->drupalPostForm(NULL, [], 'paragraphs_container_add_more');
+    $this->submitForm([], 'paragraphs_container_add_more');
     $edit = [
       'title[0][value]' => 'Test article',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Add a text paragraphs type with a single image field.
     $this->addParagraphsType('image_test');
@@ @@

     // Check that the sole available image field is selected.
     $this->drupalGet('admin/structure/paragraphs_type/image_test');
-    $this->assertOption('edit-behavior-plugins-background-settings-background-image-field', '');
-    $this->assertOptionSelected('edit-behavior-plugins-background-settings-background-image-field', 'field_image');
+    $this->assertSession()->optionExists('edit-behavior-plugins-background-settings-background-image-field', '');
+    $this->assertTrue($this->assertSession()->optionExists('edit-behavior-plugins-background-settings-background-image-field', 'field_image')->hasAttribute('selected'));

     // Check that the Background plugin can't be enabled without an image field
     // selected as the background image field.
@@ @@
       'behavior_plugins[background][enabled]' => TRUE,
       'behavior_plugins[background][settings][background_image_field]' => '',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertText('The Background plugin cannot be enabled without an image field.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains('The Background plugin cannot be enabled without an image field.');
   }

   /**
@@ @@
     $edit = [
       'behavior_plugins[background][enabled]' => TRUE,
     ];
+    $this->drupalGet('admin/structure/paragraphs_type/text_test');
     // Assert that the error messages are displayed.
-    $this->drupalPostForm('admin/structure/paragraphs_type/text_test', $edit, t('Save'));
-    $this->assertText('The Background plugin cannot be enabled without an image field.');
-    $this->assertText('No image field type available. Please add at least one in the Manage fields page.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains('The Background plugin cannot be enabled without an image field.');
+    $this->assertSession()->pageTextContains('No image field type available. Please add at least one in the Manage fields page.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertOptionRector
 * AssertOptionSelectedRector
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/paragraphs_collection/modules/paragraphs_collection_demo/tests/src/Functional/ParagraphsAnchorPluginTest.php:27

    ---------- begin diff ----------
@@ @@
     $this->loginAsAdmin(['edit behavior plugin settings']);

     $this->drupalGet('admin/structure/paragraphs_type/add');
-    $this->assertText('Anchor');
-    $this->assertText('Allows to set ID attribute that can be used as jump position in URLs.');
+    $this->assertSession()->pageTextContains('Anchor');
+    $this->assertSession()->pageTextContains('Allows to set ID attribute that can be used as jump position in URLs.');

     $paragraph_type = 'text_test';
     $this->addParagraphsType($paragraph_type);
@@ @@
     $edit = [
       'behavior_plugins[anchor][enabled]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->addParagraphedContentType('paragraphed_test', 'text');
     $this->setParagraphsWidgetMode('paragraphed_test', 'text', 'closed');
@@ @@
       'edit behavior plugin settings',
     ]);
     $this->drupalGet('node/add/paragraphed_test');
-    $this->drupalPostForm(NULL, [], 'text_text_test_add_more');
-    $this->assertText('Anchor');
-    $this->assertText('Sets an ID attribute prefixed with "scrollto-" in the Paragraph so that it can be used as a jump-to link.');
+    $this->submitForm([], 'text_text_test_add_more');
+    $this->assertSession()->pageTextContains('Anchor');
+    $this->assertSession()->pageTextContains('Sets an ID attribute prefixed with "scrollto-" in the Paragraph so that it can be used as a jump-to link.');
     $edit = [
       'title[0][value]' => t('Anchor'),
       'text[0][subform][paragraphs_text][0][value]' => t('Test Anchor'),
@@ @@
       'text[0][behavior_plugins][anchor][anchor]' => 'element-anchor',
     ];

-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertRaw('id="scrollto-element-anchor"');
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->responseContains('id="scrollto-element-anchor"');

     // Test settings summary.
     $this->clickLink('Edit');
-    $this->assertRaw('<span class="summary-content">Test Anchor</span></div><div class="paragraphs-plugin-wrapper"><span class="summary-plugin"><span class="summary-plugin-label">Anchor</span>scrollto-element-anchor');
+    $this->assertSession()->responseContains('<span class="summary-content">Test Anchor</span></div><div class="paragraphs-plugin-wrapper"><span class="summary-plugin"><span class="summary-plugin-label">Anchor</span>scrollto-element-anchor');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/paragraphs_collection/modules/paragraphs_collection_demo/tests/src/Functional/ParagraphsAccordionPluginTest.php:44

    ---------- begin diff ----------
@@ @@
    */
   public function testCreatingAccordionContent() {
     $this->drupalGet('node/add/paragraphed_accordion_test');
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_accordion_add_more');
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_0_subform_paragraphs_accordion_paragraphs_accordion_content_add_more');
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_0_subform_paragraphs_accordion_paragraphs_accordion_content_add_more');
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_0_subform_paragraphs_accordion_paragraphs_accordion_content_add_more');
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_0_subform_paragraphs_accordion_paragraphs_accordion_content_add_more');
+    $this->submitForm(NULL, 'field_paragraphs_accordion_add_more');
+    $this->submitForm(NULL, 'field_paragraphs_0_subform_paragraphs_accordion_paragraphs_accordion_content_add_more');
+    $this->submitForm(NULL, 'field_paragraphs_0_subform_paragraphs_accordion_paragraphs_accordion_content_add_more');
+    $this->submitForm(NULL, 'field_paragraphs_0_subform_paragraphs_accordion_paragraphs_accordion_content_add_more');
+    $this->submitForm(NULL, 'field_paragraphs_0_subform_paragraphs_accordion_paragraphs_accordion_content_add_more');
     $edit = [
       'title[0][value]' => 'Accordion',
       'field_paragraphs[0][subform][paragraphs_accordion_paragraphs][0][subform][field_accordion_content][0][value]' => 'Title',
@@ @@
       'field_paragraphs[0][subform][paragraphs_accordion_paragraphs][2][subform][field_accordion_content][0][value]' => 'Second title',
       'field_paragraphs[0][subform][paragraphs_accordion_paragraphs][3][subform][field_accordion_content][0][value]' => 'Second Body text.',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $node = $this->getNodeByTitle('Accordion');
     $this->drupalGet('node/' . $node->id());
     // Ensure expected markup for an accordion.
@@ @@
       ':items-class' => 'field__items',
     ]);
     $this->assertTrue(!empty($elements), 'The proper accordion markup was found.');
+    $this->drupalGet('admin/structure/paragraphs_type/accordion/fields/paragraph.accordion.paragraphs_accordion_paragraphs/delete');

-    $this->drupalPostForm('admin/structure/paragraphs_type/accordion/fields/paragraph.accordion.paragraphs_accordion_paragraphs/delete', [], t('Delete'));
-    $this->assertText('The field Accordion has been deleted from the Accordion content type.');
+    $this->submitForm([], t('Delete'));
+    $this->assertSession()->pageTextContains('The field Accordion has been deleted from the Accordion content type.');

     $node = $this->getNodeByTitle('Accordion');
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalGet('admin/structure/paragraphs_type/accordion');
-    $this->assertResponse(200);
-    $this->drupalPostForm(NULL, ['behavior_plugins[accordion][enabled]' => TRUE], t('Save'));
-    $this->assertText('The Accordion plugin cannot be enabled if the accordion field is missing.');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->submitForm(['behavior_plugins[accordion][enabled]' => TRUE], t('Save'));
+    $this->assertSession()->pageTextContains('The Accordion plugin cannot be enabled if the accordion field is missing.');
   }

   /**
@@ @@
    */
   public function testConfigurationForm() {
     $this->drupalGet('admin/structure/paragraphs_type/accordion_content');
-    $this->assertText('There are no fields available with the cardinality greater than one. Please add at least one in the Manage fields page.');
+    $this->assertSession()->pageTextContains('There are no fields available with the cardinality greater than one. Please add at least one in the Manage fields page.');

     $this->drupalGet('admin/structure/paragraphs_type/accordion');
-    $this->assertText('Accordion effect for paragraphs.');
-    $this->assertOptionSelected('edit-behavior-plugins-accordion-settings-paragraph-accordion-field', 'paragraphs_accordion_paragraphs');
-    $this->assertText('Choose a field to be used as the accordion container.');
+    $this->assertSession()->pageTextContains('Accordion effect for paragraphs.');
+    $this->assertTrue($this->assertSession()->optionExists('edit-behavior-plugins-accordion-settings-paragraph-accordion-field', 'paragraphs_accordion_paragraphs')->hasAttribute('selected'));
+    $this->assertSession()->pageTextContains('Choose a field to be used as the accordion container.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertOptionSelectedRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/paragraphs_collection/tests/src/FunctionalJavascript/ParagraphsCollectionStyleTest.php:59

    ---------- begin diff ----------
@@ @@
     $edit = [
       'behavior_plugins[style][settings][groups_defaults][regular_test_group][default]' => '',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save and manage fields'));
+    $this->submitForm($edit, t('Save and manage fields'));
     $this->addParagraphedContentType('testcontent', 'testparagraphfield');
     $this->drupalGet('node/add/testcontent');
     $this->click('.dropbutton-toggle');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/paragraphs_collection/tests/src/Functional/ParagraphsTypesTest.php:30

    ---------- begin diff ----------
@@ @@
       'administer paragraphs library',
     ]);
     $this->drupalGet('/node/add/paragraphed_test');
-    $this->drupalPostForm(NULL, [], 'field_paragraphs_intro_add_more');
-    $this->drupalPostForm(NULL, [], 'field_paragraphs_quote_add_more');
-    $this->drupalPostForm(NULL, [], 'field_paragraphs_separator_add_more');
-    $this->drupalPostForm(NULL, [], 'field_paragraphs_subtitle_add_more');
-    $this->drupalPostForm(NULL, [], 'field_paragraphs_title_add_more');
-    $this->drupalPostForm(NULL, [], 'field_paragraphs_user_add_more');
-    $this->drupalPostForm(NULL, [], 'field_paragraphs_footer_add_more');
+    $this->submitForm([], 'field_paragraphs_intro_add_more');
+    $this->submitForm([], 'field_paragraphs_quote_add_more');
+    $this->submitForm([], 'field_paragraphs_separator_add_more');
+    $this->submitForm([], 'field_paragraphs_subtitle_add_more');
+    $this->submitForm([], 'field_paragraphs_title_add_more');
+    $this->submitForm([], 'field_paragraphs_user_add_more');
+    $this->submitForm([], 'field_paragraphs_footer_add_more');

     $edit = [
       'title[0][value]' => 'Paragraph types example',
@@ @@
       'field_paragraphs[6][subform][paragraphs_text][0][value]' => 'Footer test',
     ];

-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Checks content.
-    $this->assertText('Intro test');
-    $this->assertText($this->admin_user->getDisplayName());
-    $this->assertText('Footer test');
-    $this->assertText('Subtitle test');
-    $this->assertText('Title test');
+    $this->assertSession()->pageTextContains('Intro test');
+    $this->assertSession()->pageTextContains($this->admin_user->getDisplayName());
+    $this->assertSession()->pageTextContains('Footer test');
+    $this->assertSession()->pageTextContains('Subtitle test');
+    $this->assertSession()->pageTextContains('Title test');

     // Asserts the quote paragraph type.
     $elements = $this->xpath('//blockquote[contains(@class, class)]', [':class' => 'paragraph--type--quote']);
     $this->assertCount(1, $elements);
-    $this->assertText('Quote test');
-    $this->assertText('Author test');
+    $this->assertSession()->pageTextContains('Quote test');
+    $this->assertSession()->pageTextContains('Author test');

     // Adds the link paragraph type.
     $this->drupalGet('/node/add/paragraphed_test');
-    $this->drupalPostForm(NULL, [], 'field_paragraphs_link_add_more');
+    $this->submitForm([], 'field_paragraphs_link_add_more');
     $edit = [
       'title[0][value]' => 'Link example',
       'field_paragraphs[0][subform][paragraphs_link][0][uri]' => 'Paragraph types example (1)',
       'field_paragraphs[0][subform][paragraphs_link][0][title]' => 'Link test',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Checks if the link type is working properly.
     $this->clickLink('Link test');
-    $this->assertText('Paragraph types example');
+    $this->assertSession()->pageTextContains('Paragraph types example');

   }

@@ @@
       'label' => 'test_paragraph',
       'id' => 'test_paragraph',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save and manage fields'));
-    $this->assertText('Saved the test_paragraph Paragraphs type');
+    $this->submitForm($edit, t('Save and manage fields'));
+    $this->assertSession()->pageTextContains('Saved the test_paragraph Paragraphs type');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/paragraphs_collection/tests/src/Functional/ParagraphsLockablePluginTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\paragraphs_collection\Functional;

+use Drupal\Tests\field_ui\Traits\FieldUiTestTrait;
 use Drupal\Tests\paragraphs\Functional\WidgetStable\ParagraphsTestBase;

 /**
@@ @@
  */
 class ParagraphsLockablePluginTest extends ParagraphsTestBase {

-  use \Drupal\Tests\field_ui\Traits\FieldUiTestTrait;
+  use FieldUiTestTrait;

   /**
    * Required modules to be installed for test to run.
@@ @@
     $this->fieldUIAddExistingField('admin/structure/paragraphs_type/' . $paragraphType, 'paragraphs_text');

     $this->drupalGet($bundlePath);
-    $this->assertFieldByName('behavior_plugins[lockable][enabled]');
+    $this->assertSession()->fieldExists('behavior_plugins[lockable][enabled]');
     $edit = [
       'behavior_plugins[lockable][enabled]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Check that the bundle now has lockable enabled.
     $this->drupalGet($bundlePath);
-    $this->assertFieldChecked('edit-behavior-plugins-lockable-enabled');
+    $this->assertSession()->checkboxChecked('edit-behavior-plugins-lockable-enabled');

     // Create a paragraphed content.
     $this->drupalGet('node/add/' . $contentTypeId);
-    $this->drupalPostForm(NULL, [], 'paragraphs_' . $paragraphType . '_add_more');
+    $this->submitForm([], 'paragraphs_' . $paragraphType . '_add_more');

     // Add title and body text to the node and save it.
     $edit = [
@@ @@
       'paragraphs[0][subform][paragraphs_' . $fieldName . '][0][value]' => 'This is some text',
       'paragraphs[0][behavior_plugins][lockable][locked]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     $nodeUrl = $this->getUrl();

     $this->drupalGet($nodeUrl . '/edit');
-    $this->assertNoText('You are not allowed to edit or remove this Paragraph.');
+    $this->assertSession()->pageTextNotContains('You are not allowed to edit or remove this Paragraph.');

     // Check that a new user without our permission cannot edit.
     $account = $this->drupalCreateUser(['bypass node access']);
     $this->drupalLogin($account);
     $this->drupalGet($nodeUrl . '/edit');
-    $this->assertText('You are not allowed to edit or remove this Paragraph.');
+    $this->assertSession()->pageTextContains('You are not allowed to edit or remove this Paragraph.');

     // Check that a new non admin user who does have the permission can edit.
     $account = $this->drupalCreateUser(['bypass node access', 'administer lockable paragraph']);
     $this->drupalLogin($account);
     $this->drupalGet($nodeUrl . '/edit');
-    $this->assertNoText('You are not allowed to edit or remove this Paragraph.');
+    $this->assertSession()->pageTextNotContains('You are not allowed to edit or remove this Paragraph.');

   }

@@ @@
     $this->setParagraphsWidgetMode($content_type_id, 'paragraphs', 'closed');
     // Enable Lockable plugin for this text paragraph type.
     $edit = ['behavior_plugins[lockable][enabled]' => TRUE];
-    $this->drupalPostForm('admin/structure/paragraphs_type/' . $paragraph_type, $edit, t('Save'));
+    $this->drupalGet('admin/structure/paragraphs_type/' . $paragraph_type);
+    $this->submitForm($edit, t('Save'));

     // Node edit: add two text paragraph type, set the second text as locked.
     $this->drupalGet('node/add/' . $content_type_id);
-    $this->drupalPostForm(NULL, [], 'paragraphs_' . $paragraph_type . '_add_more');
-    $this->drupalPostForm(NULL, [], 'paragraphs_' . $paragraph_type . '_add_more');
+    $this->submitForm([], 'paragraphs_' . $paragraph_type . '_add_more');
+    $this->submitForm([], 'paragraphs_' . $paragraph_type . '_add_more');
     $edit = [
       'title[0][value]' => 'Lockable plugin summary',
       'paragraphs[0][subform][paragraphs_' . $field_name . '][0][value]' => 'Text 1',
@@ @@
       'paragraphs[1][subform][paragraphs_' . $field_name . '][0][value]' => 'Text 2',
       'paragraphs[1][behavior_plugins][lockable][locked]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Assert the paragraph item summaries include the plugin summaries.
     $this->clickLink('Edit');
-    $this->assertRaw('<span class="summary-content">Text 1<');
-    $this->assertRaw('<span class="summary-content">Text 2</span></div><div class="paragraphs-plugin-wrapper"><span class="summary-plugin">Locked<');
+    $this->assertSession()->responseContains('<span class="summary-content">Text 1<');
+    $this->assertSession()->responseContains('<span class="summary-content">Text 2</span></div><div class="paragraphs-plugin-wrapper"><span class="summary-plugin">Locked<');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertFieldCheckedRector
 * AssertNoTextRector
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/paragraphs_collection/tests/src/Functional/ParagraphsLanguagePluginTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\paragraphs_collection\Functional;

+use Drupal\Tests\field_ui\Traits\FieldUiTestTrait;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\Tests\paragraphs\Functional\WidgetStable\ParagraphsTestBase;

@@ @@
  */
 class ParagraphsLanguagePluginTest extends ParagraphsTestBase {

-  use \Drupal\Tests\field_ui\Traits\FieldUiTestTrait;
+  use FieldUiTestTrait;

   /**
    * Modules to be enabled.
@@ @@
     $edit = [
       'behavior_plugins[language][enabled]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Create a paragraphed content node.
     $this->drupalGet('node/add/' . $content_type);
-    $this->drupalPostForm(NULL, [], $paragraphs_field . '_' . $paragraphs_type . '_add_more');
+    $this->submitForm([], $paragraphs_field . '_' . $paragraphs_type . '_add_more');
     $node_title = 'Test Node';
     $node_text = 'This is a text.';
     $edit = [
@@ @@
       'title[0][value]' => $node_title,
       $paragraphs_field . '[0][subform][field_test_text_field][0][value]' => $node_text,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Check that we are on the node page and the text field content is visible.
-    $this->assertTitle($node_title . ' | Drupal');
-    $this->assertText($node_text);
+    $this->assertSession()->titleEquals($node_title . ' | Drupal');
+    $this->assertSession()->pageTextContains($node_text);

     // Check that the site has only one language and that the plugin's behavior
     // form is missing.
@@ @@
     $this->drupalGet($node_edit_path);
     $language_manager = \Drupal::service('language_manager');
     $this->assertFalse($language_manager->isMultilingual(), 'The site is not multilingual.');
-    $this->assertNoText('Language visibility');
+    $this->assertSession()->pageTextNotContains('Language visibility');

     // Add a second language (German) to the site.
     ConfigurableLanguage::createFromLangcode('de')->save();
@@ @@
     $edit = [
       $paragraphs_field . '[0][behavior_plugins][language][container][visibility]' => 'hide',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Check that the plugin's behavior form is now present.
     $this->drupalGet($node_edit_path);
     $this->assertTrue($language_manager->isMultilingual(), 'The site is multilingual.');
-    $this->assertText('Language visibility');
+    $this->assertSession()->pageTextContains('Language visibility');

     // Hide the text field with the Language plugin for English.
     $edit = [
@@ @@
       $paragraphs_field . '[0][behavior_plugins][language][container][visibility]' => 'hide',
       $paragraphs_field . '[0][behavior_plugins][language][container][languages][]' => ['en'],
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Check that we are on the node page and the text field content is not
     // visible.
-    $this->assertTitle($node_title . ' | Drupal');
-    $this->assertNoText($node_text);
+    $this->assertSession()->titleEquals($node_title . ' | Drupal');
+    $this->assertSession()->pageTextNotContains($node_text);

     // Hide the text field with the Language plugin for all languages but
     // German.
     $this->drupalGet($node_edit_path);
-    $this->assertRaw('<span class="summary-plugin-label">Hide for</span>English</span');
+    $this->assertSession()->responseContains('<span class="summary-plugin-label">Hide for</span>English</span');
     $edit = [
       $paragraphs_field . '[0][behavior_plugins][language][container][visibility]' => 'show',
       $paragraphs_field . '[0][behavior_plugins][language][container][languages][]' => ['de'],
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Check that we are on the node page and the text field content is again
     // not visible.
-    $this->assertTitle($node_title . ' | Drupal');
+    $this->assertSession()->titleEquals($node_title . ' | Drupal');
     // The paragraph with visibility conditions is not accessible anymore.
-    $this->assertNoText($node_text);
-    $this->assertNoRaw('paragraph--type--test-paragraphs-type');
-    $this->assertNoRaw('<div class="field__label">test_paragraphs_field</div>');
+    $this->assertSession()->pageTextNotContains($node_text);
+    $this->assertSession()->responseNotContains('paragraph--type--test-paragraphs-type');
+    $this->assertSession()->responseNotContains('<div class="field__label">test_paragraphs_field</div>');

     $this->drupalGet($node_edit_path);
-    $this->assertRaw('<span class="summary-plugin-label">Show for</span>German</span');
+    $this->assertSession()->responseContains('<span class="summary-plugin-label">Show for</span>German</span');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoRawRector
 * AssertNoTextRector
 * AssertRawRector
 * AssertTextRector
 * AssertTitleRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/paragraphs_collection/tests/src/Functional/ParagraphsGridLayoutPluginTest.php:27

    ---------- begin diff ----------
@@ @@

     // Paragraph types add form.
     $this->drupalGet('admin/structure/paragraphs_type/add');
-    $this->assertText('Grid layout');
+    $this->assertSession()->pageTextContains('Grid layout');

     // Paragraph type edit form.
     $this->drupalGet('admin/structure/paragraphs_type/grid');
-    $this->assertFieldChecked('edit-behavior-plugins-grid-layout-enabled');
-    $this->assertText('Grid field');
-    $this->assertOptionSelected('edit-behavior-plugins-grid-layout-settings-paragraph-reference-field', 'paragraphs_container_paragraphs');
-    $this->assertText('Grid layouts');
-    $this->assertText('2 columns');
+    $this->assertSession()->checkboxChecked('edit-behavior-plugins-grid-layout-enabled');
+    $this->assertSession()->pageTextContains('Grid field');
+    $this->assertTrue($this->assertSession()->optionExists('edit-behavior-plugins-grid-layout-settings-paragraph-reference-field', 'paragraphs_container_paragraphs')->hasAttribute('selected'));
+    $this->assertSession()->pageTextContains('Grid layouts');
+    $this->assertSession()->pageTextContains('2 columns');

     // Test that entity reference field is also an option if cardinality is
     // greater than 1.
     static::fieldUIAddNewField('admin/structure/paragraphs_type/grid', 'user_reference', 'User', 'entity_reference', ['settings[target_type]' => 'user'], []);
     $this->drupalGet('admin/structure/paragraphs_type/grid');
-    $this->assertNoOption('edit-behavior-plugins-grid-layout-settings-paragraph-reference-field', 'field_user_reference');
+    $this->assertSession()->optionNotExists('edit-behavior-plugins-grid-layout-settings-paragraph-reference-field', 'field_user_reference');
     $this->drupalGet('admin/structure/paragraphs_type/grid/fields/paragraph.grid.field_user_reference/storage');
     $edit = [
       'cardinality' => '-1',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save field settings'));
+    $this->submitForm($edit, t('Save field settings'));
     $this->drupalGet('admin/structure/paragraphs_type/grid');
-    $this->assertOption('edit-behavior-plugins-grid-layout-settings-paragraph-reference-field', 'field_user_reference');
-    $this->drupalPostForm('admin/structure/paragraphs_type/grid/fields/paragraph.grid.field_user_reference/delete', [], t('Delete'));
-    $this->assertText('The field User has been deleted from the Grid content type.');
+    $this->assertSession()->optionExists('edit-behavior-plugins-grid-layout-settings-paragraph-reference-field', 'field_user_reference');
+    $this->drupalGet('admin/structure/paragraphs_type/grid/fields/paragraph.grid.field_user_reference/delete');
+    $this->submitForm([], t('Delete'));
+    $this->assertSession()->pageTextContains('The field User has been deleted from the Grid content type.');

     // Node creation.
     $this->addParagraphedContentType('paragraphed_test', 'paragraphs_container');
     $this->drupalGet('node/add/paragraphed_test');
-    $this->drupalPostForm(NULL, [], 'paragraphs_container_grid_add_more');
+    $this->submitForm([], 'paragraphs_container_grid_add_more');

     // Check that the grid layout options are sorted alphabetically.
     $options = $this->xpath('//select[contains(@id, :id)]/option', [':id' => 'edit-paragraphs-container-0-behavior-plugins-grid-layout-layout']);
@@ @@
     $this->assertEquals('4 columns', $options[3]->getText());

     // Create a grid of paragraphs.
-    $this->drupalPostForm(NULL, [], 'paragraphs_container_0_subform_paragraphs_container_paragraphs_container_add_more');
-    $this->drupalPostForm(NULL, [], 'paragraphs_container_0_subform_paragraphs_container_paragraphs_container_add_more');
-    $this->drupalPostForm(NULL, [], 'paragraphs_container_0_subform_paragraphs_container_paragraphs_container_add_more');
+    $this->submitForm([], 'paragraphs_container_0_subform_paragraphs_container_paragraphs_container_add_more');
+    $this->submitForm([], 'paragraphs_container_0_subform_paragraphs_container_paragraphs_container_add_more');
+    $this->submitForm([], 'paragraphs_container_0_subform_paragraphs_container_paragraphs_container_add_more');
     $edit = [
       'title[0][value]' => 'Grid',
       'paragraphs_container[0][behavior_plugins][grid_layout][layout_wrapper][layout]' => 'paragraphs_collection_test_two_column',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText('paragraphed_test Grid has been created.');
-    $this->assertRaw('paragraphs_collection_test/css/grid-layout.css');
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->pageTextContains('paragraphed_test Grid has been created.');
+    $this->assertSession()->responseContains('paragraphs_collection_test/css/grid-layout.css');

     $this->drupalGet('node/1');
     // We ship with the grid container label hidden, so we don't have the
@@ @@
       'behavior_plugins[grid_layout][settings][available_grid_layouts][paragraphs_collection_test_three_column]' => TRUE,
       'behavior_plugins[grid_layout][settings][available_grid_layouts][paragraphs_collection_test_four_column]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $enabled_layouts, t('Save'));
+    $this->submitForm($enabled_layouts, t('Save'));

     $this->drupalGet('node/add/paragraphed_test');
-    $this->drupalPostForm(NULL, [], 'paragraphs_container_grid_add_more');
+    $this->submitForm([], 'paragraphs_container_grid_add_more');

     // Check that the grid layout options are sorted alphabetically.
     $options = $this->xpath('//select[contains(@id, :id)]/option', [':id' => 'edit-paragraphs-container-0-behavior-plugins-grid-layout-layout']);
@@ @@
     $this->assertEquals('- None -', $options[0]->getText());
     $this->assertEquals('3 columns', $options[1]->getText());
     $this->assertEquals('4 columns', $options[2]->getText());
+    $this->drupalGet('admin/structure/paragraphs_type/grid/fields/paragraph.grid.paragraphs_container_paragraphs/delete');

-    $this->drupalPostForm('admin/structure/paragraphs_type/grid/fields/paragraph.grid.paragraphs_container_paragraphs/delete', [], t('Delete'));
-    $this->assertText('The field Paragraphs has been deleted from the Grid content type.');
+    $this->submitForm([], t('Delete'));
+    $this->assertSession()->pageTextContains('The field Paragraphs has been deleted from the Grid content type.');

     $node = $this->getNodeByTitle('Grid');
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalGet('admin/structure/paragraphs_type/grid');
-    $this->assertResponse(200);
-    $this->assertText('No paragraph reference field type available. Please add at least one in the Manage fields page.');
-    $this->drupalPostForm(NULL, ['behavior_plugins[grid_layout][enabled]' => TRUE], t('Save'));
-    $this->assertText('The grid layout plugin cannot be enabled if the paragraph reference field is missing.');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('No paragraph reference field type available. Please add at least one in the Manage fields page.');
+    $this->submitForm(['behavior_plugins[grid_layout][enabled]' => TRUE], t('Save'));
+    $this->assertSession()->pageTextContains('The grid layout plugin cannot be enabled if the paragraph reference field is missing.');
   }

   /**
@@ @@

     // Node edit: add three text into the grid paragraph type, set grid layout.
     $this->drupalGet('node/add/paragraphed_test');
-    $this->drupalPostForm(NULL, [], 'paragraphs_container_grid_add_more');
-    $this->drupalPostForm(NULL, [], 'paragraphs_container_0_subform_paragraphs_container_paragraphs_text_paragraph_add_more');
-    $this->drupalPostForm(NULL, [], 'paragraphs_container_0_subform_paragraphs_container_paragraphs_text_paragraph_add_more');
-    $this->drupalPostForm(NULL, [], 'paragraphs_container_0_subform_paragraphs_container_paragraphs_text_paragraph_add_more');
+    $this->submitForm([], 'paragraphs_container_grid_add_more');
+    $this->submitForm([], 'paragraphs_container_0_subform_paragraphs_container_paragraphs_text_paragraph_add_more');
+    $this->submitForm([], 'paragraphs_container_0_subform_paragraphs_container_paragraphs_text_paragraph_add_more');
+    $this->submitForm([], 'paragraphs_container_0_subform_paragraphs_container_paragraphs_text_paragraph_add_more');
     $edit = [
       'title[0][value]' => 'Grid plugin summary',
       'paragraphs_container[0][subform][paragraphs_container_paragraphs][0][subform][paragraphs_text][0][value]' => 'Text 1',
@@ @@
       'paragraphs_container[0][subform][paragraphs_container_paragraphs][2][subform][paragraphs_text][0][value]' => 'Text 3',
       'paragraphs_container[0][behavior_plugins][grid_layout][layout_wrapper][layout]' => 'paragraphs_collection_test_two_column',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText('paragraphed_test Grid plugin summary has been created.');
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->pageTextContains('paragraphed_test Grid plugin summary has been created.');

     // Assert that the summary includes the text of the behavior plugins.
     $this->clickLink('Edit');
-    $this->assertRaw('<span class="summary-content">Text 1</span>, <span class="summary-content">Text 2</span>, <span class="summary-content">Text 3</span></div><div class="paragraphs-plugin-wrapper"><span class="summary-plugin"><span class="summary-plugin-label">Layout</span>2 columns');
+    $this->assertSession()->responseContains('<span class="summary-content">Text 1</span>, <span class="summary-content">Text 2</span>, <span class="summary-content">Text 3</span></div><div class="paragraphs-plugin-wrapper"><span class="summary-plugin"><span class="summary-plugin-label">Layout</span>2 columns');
     $this->assertFieldByXPath('//*[@id="edit-paragraphs-container-0-top-icons"]/span[@class="paragraphs-badge" and @title="3 children"]');
   }

@@ @@

     // Set an empty grid layout in a node.
     $this->drupalGet('node/add/paragraphed_test');
-    $this->drupalPostForm(NULL, [], 'paragraphs_container_grid_add_more');
+    $this->submitForm([], 'paragraphs_container_grid_add_more');
     $edit = [
       'title[0][value]' => 'Grid plugin summary',
       'paragraphs_container[0][behavior_plugins][grid_layout][layout_wrapper][layout]' => 'paragraphs_collection_test_two_column',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Ensure that not selecting layouts will not save any into configuration.
     $edit = [
@@ @@
       'behavior_plugins[grid_layout][settings][available_grid_layouts][paragraphs_collection_test_two_column]' => FALSE,
       'behavior_plugins[grid_layout][settings][available_grid_layouts][paragraphs_collection_test_three_column]' => FALSE,
     ];
-    $this->drupalPostForm('admin/structure/paragraphs_type/grid', $edit, 'Save');
+    $this->drupalGet('admin/structure/paragraphs_type/grid');
+    $this->submitForm($edit, 'Save');
     $saved_grid_layouts = \Drupal::config('paragraphs.paragraphs_type.grid')->get('behavior_plugins.grid_layout.available_grid_layouts');
     $this->assertEquals($saved_grid_layouts, []);

@@ @@
       'behavior_plugins[grid_layout][settings][paragraph_reference_field]' => 'paragraphs_container_paragraphs',
       'behavior_plugins[grid_layout][settings][available_grid_layouts][paragraphs_collection_test_two_column]' => TRUE,
     ];
-    $this->drupalPostForm('admin/structure/paragraphs_type/grid', $edit, 'Save');
+    $this->drupalGet('admin/structure/paragraphs_type/grid');
+    $this->submitForm($edit, 'Save');
     $saved_grid_layouts = \Drupal::config('paragraphs.paragraphs_type.grid')->get('behavior_plugins.grid_layout.available_grid_layouts');
-    $this->assertEqual($saved_grid_layouts, ['paragraphs_collection_test_two_column']);
+    $this->assertEquals($saved_grid_layouts, ['paragraphs_collection_test_two_column']);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldCheckedRector
 * AssertNoOptionRector
 * AssertOptionRector
 * AssertOptionSelectedRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/paragraphs_collection/tests/src/Functional/ParagraphsCollectionStyleTest.php:51

    ---------- begin diff ----------
@@ @@
       'styles[regular][enabled]' => FALSE,
       'styles[underline][enabled]' => FALSE
     ];
-    $this->drupalPostForm('admin/reports/paragraphs_collection/styles', $edit, t('Save configuration'));
+    $this->drupalGet('admin/reports/paragraphs_collection/styles');
+    $this->submitForm($edit, t('Save configuration'));

     $this->addParagraphsType('testplugin');
     $paragraph_type = \Drupal::configFactory()->getEditable('paragraphs.paragraphs_type.testplugin');
@@ @@
     $edit = [
       'title[0][value]' => 'Example title',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains('testcontent Example title has been created.');
     $this->assertSession()->responseContains('paragraphs-behavior-style--bold');
   }
@@ @@
       'styles[regular][enabled]' => FALSE,
       'styles[underline][enabled]' => FALSE
     ];
-    $this->drupalPostForm('admin/reports/paragraphs_collection/styles', $edit, t('Save configuration'));
+    $this->drupalGet('admin/reports/paragraphs_collection/styles');
+    $this->submitForm($edit, t('Save configuration'));
     // Create a paragraph type and enable behavior plugins.
     $this->addParagraphsType('testplugin');
     $paragraph_type = \Drupal::configFactory()->getEditable('paragraphs.paragraphs_type.testplugin');
@@ @@
       'title[0][value]' => 'Example title',
       'testparagraphfield[0][subform][field_text][0][value]' => 'test',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains('testcontent Example title has been created.');
     // Disable the selected plugin.
     $edit = [
       'styles[bold][enabled]' => FALSE,
     ];
-    $this->drupalPostForm('admin/reports/paragraphs_collection/styles', $edit, t('Save configuration'));
+    $this->drupalGet('admin/reports/paragraphs_collection/styles');
+    $this->submitForm($edit, t('Save configuration'));
     // Edit the node and check if the summary is present.
     $node = $this->getNodeByTitle('Example title');
     $this->drupalGet('node/' . $node->id() . '/edit');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/paragraphs_collection/modules/paragraphs_collection_de
         mo/tests/src/Functional/ParagraphsCollectionDemoTest.php" file, due to:
                                                                                
         "System error: "Invalid value"                                         
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 212          

 [ERROR] Could not process                                                      
         "modules/contrib/paragraphs_collection/tests/src/FunctionalJavascript/P
         aragraphsStylePluginTest.php" file, due to:                            
         "System error: "Invalid value"                                         
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 212          

