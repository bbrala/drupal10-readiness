diff --git a/modules/permissions_by_entity/tests/src/Kernel/EntityAccessCheckTest.php b/modules/permissions_by_entity/tests/src/Kernel/EntityAccessCheckTest.php
index 7d3574f..b6af73f 100644
--- a/modules/permissions_by_entity/tests/src/Kernel/EntityAccessCheckTest.php
+++ b/modules/permissions_by_entity/tests/src/Kernel/EntityAccessCheckTest.php
@@ -70,7 +70,7 @@ class EntityAccessCheckTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
     $this->installSchema('system', ['key_value_expire', 'sequences']);
@@ -105,7 +105,7 @@ class EntityAccessCheckTest extends KernelTestBase {
     $dispatcher = $this->getPopulatedDispatcher();
 
     $this->expectException(AccessDeniedHttpException::class);
-    $dispatcher->dispatch(KernelEvents::REQUEST, $this->getRequestEvent());
+    $dispatcher->dispatch($this->getRequestEvent(), KernelEvents::REQUEST);
   }
 
   /**
@@ -115,7 +115,7 @@ class EntityAccessCheckTest extends KernelTestBase {
     $dispatcher = $this->getPopulatedDispatcher();
 
     $this->container->get('current_user')->setAccount($this->terms['term_user_a']['user']);
-    $dispatcher->dispatch(KernelEvents::REQUEST, $this->getRequestEvent());
+    $dispatcher->dispatch($this->getRequestEvent(), KernelEvents::REQUEST);
   }
 
   /**
@@ -126,8 +126,8 @@ class EntityAccessCheckTest extends KernelTestBase {
 
     // Execute first request for allowed user.
     $this->container->get('current_user')->setAccount($this->terms['term_user_a']['user']);
-    $dispatcher->dispatch(KernelEvents::REQUEST, $this->getRequestEvent());
-    $dispatcher->dispatch(KernelEvents::RESPONSE, $this->getCacheableResponseEvent());
+    $dispatcher->dispatch($this->getRequestEvent(), KernelEvents::REQUEST);
+    $dispatcher->dispatch($this->getCacheableResponseEvent(), KernelEvents::RESPONSE);
 
     // Reset the cache to emulate a new request.
     $this->container->get('permissions_by_entity.checked_entity_cache')->clear();
@@ -135,7 +135,7 @@ class EntityAccessCheckTest extends KernelTestBase {
     // Execute second request for disallowed user.
     $this->container->get('current_user')->setAccount($this->terms['term_user_b']['user']);
     $this->expectException(AccessDeniedHttpException::class);
-    $dispatcher->dispatch(KernelEvents::REQUEST, $this->getRequestEvent());
+    $dispatcher->dispatch($this->getRequestEvent(), KernelEvents::REQUEST);
   }
 
   /**
diff --git a/modules/permissions_by_entity/tests/src/Kernel/EntityPublicationTest.php b/modules/permissions_by_entity/tests/src/Kernel/EntityPublicationTest.php
index 3cb7f7e..72a8cbb 100644
--- a/modules/permissions_by_entity/tests/src/Kernel/EntityPublicationTest.php
+++ b/modules/permissions_by_entity/tests/src/Kernel/EntityPublicationTest.php
@@ -45,7 +45,7 @@ class EntityPublicationTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('test_entity');
     $this->installEntitySchema('user');
@@ -74,7 +74,7 @@ class EntityPublicationTest extends KernelTestBase {
   public function testAnonymousCanViewPublishedNodesWithoutTermPermissions(): void {
     $this->assertTrue($this->nodes['node_published']->isPublished());
     $this->assertEquals(AccessResult::neutral(), permissions_by_entity_entity_access($this->nodes['node_published'], 'view', $this->anonymousUser));
-    $this->assertNotEqual(AccessResult::forbidden(), $this->nodes['node_published']->access('view', $this->anonymousUser, TRUE));
+    $this->assertNotEquals(AccessResult::forbidden(), $this->nodes['node_published']->access('view', $this->anonymousUser, TRUE));
   }
 
   /**
diff --git a/permissions_by_term.module b/permissions_by_term.module
index 6597a7a..da7930f 100644
--- a/permissions_by_term.module
+++ b/permissions_by_term.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\user\Entity\User;
 /**
  * @file
  * Allows access to terms in a vocabulary to be limited by user or role.
@@ -165,7 +166,7 @@ function permissions_by_term_form_taxonomy_term_form_alter(&$form, FormStateInte
 
     $aAllowedUsers = $access_storage->getAllowedUserIds($termId, $langcode);
     if (!empty($aAllowedUsers)) {
-      $aAllowedUsers = \Drupal\user\Entity\User::loadMultiple($aAllowedUsers);
+      $aAllowedUsers = User::loadMultiple($aAllowedUsers);
       $sUserFormValue = $access_storage->getUserFormValue($aAllowedUsers);
     }
     else {
@@ -341,7 +342,7 @@ function permissions_by_term_form_alter(&$form, FormStateInterface $formState, $
       }
     }
 
-    $viewFilePath = drupal_get_path('module', 'permissions_by_term') . '/src/View/node-details.html.twig';
+    $viewFilePath = \Drupal::service('extension.list.module')->getPath('permissions_by_term') . '/src/View/node-details.html.twig';
     /**
      * @var \Drupal\permissions_by_term\Service\NodeEntityBundleInfo $nodeEntityBundleInfo
      */
diff --git a/src/Event/PermissionsByTermDeniedEvent.php b/src/Event/PermissionsByTermDeniedEvent.php
index ad9ae58..aa6735c 100644
--- a/src/Event/PermissionsByTermDeniedEvent.php
+++ b/src/Event/PermissionsByTermDeniedEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\permissions_by_term\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class PermissionsByTermDeniedEvent
diff --git a/src/Listener/KernelEventListener.php b/src/Listener/KernelEventListener.php
index 520a70d..260a7bb 100644
--- a/src/Listener/KernelEventListener.php
+++ b/src/Listener/KernelEventListener.php
@@ -164,7 +164,7 @@ class KernelEventListener implements EventSubscriberInterface
       $node = $event->getRequest()->attributes->get('node');
       if (!$this->accessCheckService->canUserAccessByNode($node, false, $this->accessStorageService->getLangCode($node->id()))) {
         $accessDeniedEvent = new PermissionsByTermDeniedEvent($node->id());
-        $this->eventDispatcher->dispatch(PermissionsByTermDeniedEvent::NAME, $accessDeniedEvent);
+        $this->eventDispatcher->dispatch($accessDeniedEvent, PermissionsByTermDeniedEvent::NAME);
 
         if ($this->disabledNodeAccessRecords) {
           $this->pageCacheKillSwitch->trigger();
diff --git a/src/Service/AccessCheck.php b/src/Service/AccessCheck.php
index 4474444..6fc0ad8 100644
--- a/src/Service/AccessCheck.php
+++ b/src/Service/AccessCheck.php
@@ -235,7 +235,7 @@ class AccessCheck {
 
   private function dispatchDeniedEvent($nodeId): void {
     $accessDeniedEvent = new PermissionsByTermDeniedEvent($nodeId);
-    $this->eventDispatcher->dispatch(PermissionsByTermDeniedEvent::NAME, $accessDeniedEvent);
+    $this->eventDispatcher->dispatch($accessDeniedEvent, PermissionsByTermDeniedEvent::NAME);
   }
 
   public function isAnyTaxonomyTermFieldDefinedInNodeType(string $nodeType) {
diff --git a/tests/src/Kernel/AccessStorageTest.php b/tests/src/Kernel/AccessStorageTest.php
index aecb5d6..47e7980 100644
--- a/tests/src/Kernel/AccessStorageTest.php
+++ b/tests/src/Kernel/AccessStorageTest.php
@@ -13,13 +13,12 @@ class AccessStorageTest extends PBTKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
   }
 
   private function mockFormState(string $langcode, array $accessOutput) {
-    $formStateStub = $this->getMockBuilder(FormStateInterface::class)
-      ->getMock();
+    $formStateStub = $this->createMock(FormStateInterface::class);
 
     $map = [
       [
diff --git a/tests/src/Kernel/MultilingualTest.php b/tests/src/Kernel/MultilingualTest.php
index 3ecb68c..e9e5f8c 100644
--- a/tests/src/Kernel/MultilingualTest.php
+++ b/tests/src/Kernel/MultilingualTest.php
@@ -26,7 +26,7 @@ class MultilingualTest extends PBTKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->nodeEntityBundleInfo = $this->container->get('permissions_by_term.node_entity_bundle_info');
   }
diff --git a/tests/src/Kernel/NodeEntityBundleInfoTest.php b/tests/src/Kernel/NodeEntityBundleInfoTest.php
index 12d803c..f191f28 100644
--- a/tests/src/Kernel/NodeEntityBundleInfoTest.php
+++ b/tests/src/Kernel/NodeEntityBundleInfoTest.php
@@ -28,7 +28,7 @@ class NodeEntityBundleInfoTest extends PBTKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->nodeEntityBundleInfo = $this->container->get('permissions_by_term.node_entity_bundle_info');
   }
diff --git a/tests/src/Kernel/PBTKernelTestBase.php b/tests/src/Kernel/PBTKernelTestBase.php
index 9bf4e95..4ebc457 100644
--- a/tests/src/Kernel/PBTKernelTestBase.php
+++ b/tests/src/Kernel/PBTKernelTestBase.php
@@ -61,7 +61,7 @@ abstract class PBTKernelTestBase extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('user');
diff --git a/tests/src/Kernel/TermHandlerTest.php b/tests/src/Kernel/TermHandlerTest.php
index 181677a..10cf0ba 100644
--- a/tests/src/Kernel/TermHandlerTest.php
+++ b/tests/src/Kernel/TermHandlerTest.php
@@ -13,7 +13,7 @@ class TermHandlerTest extends PBTKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
   }
 
