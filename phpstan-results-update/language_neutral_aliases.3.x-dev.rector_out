modules/contrib/language_neutral_aliases/language_neutral_aliases.module
modules/contrib/language_neutral_aliases/language_neutral_aliases.stubs.inc
modules/contrib/language_neutral_aliases/src/AliasRepositoryDecorator.php
modules/contrib/language_neutral_aliases/src/NeutralPathAliasListBuilder.php
modules/contrib/language_neutral_aliases/src/NeutralPathAliasStorage.php
modules/contrib/language_neutral_aliases/tests/src/Kernel/LanguageNeutralAliasesTest.php

1 file with changes
===================

1) modules/contrib/language_neutral_aliases/tests/src/Kernel/LanguageNeutralAliasesTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * Setup test.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('path_alias');
@@ @@
     $storage->save($alias);

     $actual = $storage->load($alias->id());
-    $this->assertEqual(4, $actual->id());
-    $this->assertEqual('/node/4', $actual->getPath());
-    $this->assertEqual('/path/fourth', $actual->getAlias());
-    $this->assertEqual(LanguageInterface::LANGCODE_NOT_SPECIFIED, $actual->get('langcode')->value);
+    $this->assertEquals(4, $actual->id());
+    $this->assertEquals('/node/4', $actual->getPath());
+    $this->assertEquals('/path/fourth', $actual->getAlias());
+    $this->assertEquals(LanguageInterface::LANGCODE_NOT_SPECIFIED, $actual->get('langcode')->value);

     // Non-neutral aliases should be updated. This is not by design, but a side
     // effect of the move to entities. We can't return a clone when saving. But
@@ @@
     $storage->save($alias);

     $actual = $storage->load($alias->id());
-    $this->assertEqual(1, $actual->id());
-    $this->assertEqual('/node/1', $actual->getPath());
-    $this->assertEqual('/path/fifth', $actual->getAlias());
-    $this->assertEqual(LanguageInterface::LANGCODE_NOT_SPECIFIED, $actual->get('langcode')->value);
+    $this->assertEquals(1, $actual->id());
+    $this->assertEquals('/node/1', $actual->getPath());
+    $this->assertEquals('/path/fifth', $actual->getAlias());
+    $this->assertEquals(LanguageInterface::LANGCODE_NOT_SPECIFIED, $actual->get('langcode')->value);

     // Ensure that language neutral aliases can be updated.
     $alias = $storage->load(4);
@@ @@
     $alias->setAlias('/path/sixth');

     $actual = $storage->load(4);
-    $this->assertEqual(4, $actual->id());
-    $this->assertEqual('/node/4', $actual->getPath());
-    $this->assertEqual('/path/sixth', $actual->getAlias());
-    $this->assertEqual(LanguageInterface::LANGCODE_NOT_SPECIFIED, $actual->get('langcode')->value);
+    $this->assertEquals(4, $actual->id());
+    $this->assertEquals('/node/4', $actual->getPath());
+    $this->assertEquals('/path/sixth', $actual->getAlias());
+    $this->assertEquals(LanguageInterface::LANGCODE_NOT_SPECIFIED, $actual->get('langcode')->value);
   }

   /**
@@ @@
   public function testPreloadPathAlias() {
     $repository = $this->container->get('path_alias.repository');

-    $this->assertEqual(
-      ['/node/3' => '/path/third'],
-      $repository->preloadPathAlias(['/node/1', '/node/3'], LanguageInterface::LANGCODE_NOT_SPECIFIED)
-    );
+    $this->assertEquals(['/node/3' => '/path/third'], $repository->preloadPathAlias(['/node/1', '/node/3'], LanguageInterface::LANGCODE_NOT_SPECIFIED));

-    $this->assertEqual(
-      ['/node/3' => '/path/third'],
-      $repository->preloadPathAlias(['/node/1', '/node/3'], 'de')
-    );
+    $this->assertEquals(['/node/3' => '/path/third'], $repository->preloadPathAlias(['/node/1', '/node/3'], 'de'));
   }

   /**
@@ @@
   public function testLookupBySystemPath() {
     $repository = $this->container->get('path_alias.repository');

-    $this->assertEqual(
-      [
-        'id' => 3,
-        'path' => '/node/3',
-        'alias' => '/path/third',
-        'langcode' => LanguageInterface::LANGCODE_NOT_SPECIFIED,
-      ],
-      $repository->lookupBySystemPath('/node/3', LanguageInterface::LANGCODE_NOT_SPECIFIED)
-    );
+    $this->assertEquals([
+      'id' => 3,
+      'path' => '/node/3',
+      'alias' => '/path/third',
+      'langcode' => LanguageInterface::LANGCODE_NOT_SPECIFIED,
+    ], $repository->lookupBySystemPath('/node/3', LanguageInterface::LANGCODE_NOT_SPECIFIED));

-    $this->assertEqual(
-      [
-        'id' => 3,
-        'path' => '/node/3',
-        'alias' => '/path/third',
-        'langcode' => LanguageInterface::LANGCODE_NOT_SPECIFIED,
-      ],
-      $repository->lookupBySystemPath('/node/3', 'de')
-    );
+    $this->assertEquals([
+      'id' => 3,
+      'path' => '/node/3',
+      'alias' => '/path/third',
+      'langcode' => LanguageInterface::LANGCODE_NOT_SPECIFIED,
+    ], $repository->lookupBySystemPath('/node/3', 'de'));

     // Check that non-neutral aliases aren't returned.
     $this->assertNull($repository->lookupBySystemPath('/node/1', LanguageInterface::LANGCODE_NOT_SPECIFIED));
@@ @@
   public function testLookupByAlias() {
     $repository = $this->container->get('path_alias.repository');

-    $this->assertEqual(
-      [
-        'id' => 3,
-        'path' => '/node/3',
-        'alias' => '/path/third',
-        'langcode' => LanguageInterface::LANGCODE_NOT_SPECIFIED,
-      ],
-      $repository->lookupByAlias('/path/third', LanguageInterface::LANGCODE_NOT_SPECIFIED)
-    );
+    $this->assertEquals([
+      'id' => 3,
+      'path' => '/node/3',
+      'alias' => '/path/third',
+      'langcode' => LanguageInterface::LANGCODE_NOT_SPECIFIED,
+    ], $repository->lookupByAlias('/path/third', LanguageInterface::LANGCODE_NOT_SPECIFIED));

-    $this->assertEqual(
-      [
-        'id' => 3,
-        'path' => '/node/3',
-        'alias' => '/path/third',
-        'langcode' => LanguageInterface::LANGCODE_NOT_SPECIFIED,
-      ],
-      $repository->lookupByAlias('/path/third', 'de')
-    );
+    $this->assertEquals([
+      'id' => 3,
+      'path' => '/node/3',
+      'alias' => '/path/third',
+      'langcode' => LanguageInterface::LANGCODE_NOT_SPECIFIED,
+    ], $repository->lookupByAlias('/path/third', 'de'));

     $this->assertNull($repository->lookupByAlias('/path/first', LanguageInterface::LANGCODE_NOT_SPECIFIED));
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 1 file has been changed by Rector                                         

