diff --git a/src/Controller/ServiceController.php b/src/Controller/ServiceController.php
index 9346931..4e54ad7 100644
--- a/src/Controller/ServiceController.php
+++ b/src/Controller/ServiceController.php
@@ -243,7 +243,7 @@ class ServiceController implements ContainerInjectionInterface {
     // Dispatch an event that allows modules to alter any of the CAS data before
     // it's used to lookup a Drupal user account via the authmap table.
     $this->casHelper->log(LogLevel::DEBUG, 'Dispatching EVENT_PRE_USER_LOAD.');
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_USER_LOAD, new CasPreUserLoadEvent($cas_validation_info));
+    $this->eventDispatcher->dispatch(new CasPreUserLoadEvent($cas_validation_info), CasHelper::EVENT_PRE_USER_LOAD);
 
     if ($cas_validation_info->getUsername() !== $cas_validation_info->getOriginalUsername()) {
       $this->casHelper->log(
@@ -260,7 +260,7 @@ class ServiceController implements ContainerInjectionInterface {
     // @see \Drupal\cas\Event\CasPreUserLoadRedirectEvent
     $cas_pre_user_load_redirect_event = new CasPreUserLoadRedirectEvent($ticket, $cas_validation_info, $service_params);
     $this->casHelper->log(LogLevel::DEBUG, 'Dispatching EVENT_PRE_USER_LOAD_REDIRECT.');
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_USER_LOAD_REDIRECT, $cas_pre_user_load_redirect_event);
+    $this->eventDispatcher->dispatch($cas_pre_user_load_redirect_event, CasHelper::EVENT_PRE_USER_LOAD_REDIRECT);
 
     // A subscriber might have set an HTTP redirect response allowing potential
     // user interaction to be injected into the flow.
diff --git a/src/Event/CasPostLoginEvent.php b/src/Event/CasPostLoginEvent.php
index 3da8652..210d709 100644
--- a/src/Event/CasPostLoginEvent.php
+++ b/src/Event/CasPostLoginEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\cas\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;
 
 /**
diff --git a/src/Event/CasPostValidateEvent.php b/src/Event/CasPostValidateEvent.php
index 82dce95..2b25f00 100644
--- a/src/Event/CasPostValidateEvent.php
+++ b/src/Event/CasPostValidateEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\cas\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event fired after CAS validation happens.
diff --git a/src/Event/CasPreLoginEvent.php b/src/Event/CasPreLoginEvent.php
index e77b58b..bd830ba 100644
--- a/src/Event/CasPreLoginEvent.php
+++ b/src/Event/CasPreLoginEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\cas\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;
 
 /**
diff --git a/src/Event/CasPreRedirectEvent.php b/src/Event/CasPreRedirectEvent.php
index fbfeef0..7f80ca2 100644
--- a/src/Event/CasPreRedirectEvent.php
+++ b/src/Event/CasPreRedirectEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\cas\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasRedirectData;
 use Drupal\cas\CasServerConfig;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Class CasPreRedirectEvent.
diff --git a/src/Event/CasPreRegisterEvent.php b/src/Event/CasPreRegisterEvent.php
index 425d8d2..58c5769 100644
--- a/src/Event/CasPreRegisterEvent.php
+++ b/src/Event/CasPreRegisterEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\cas\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;
 
 /**
diff --git a/src/Event/CasPreUserLoadEvent.php b/src/Event/CasPreUserLoadEvent.php
index a91d165..c729d65 100644
--- a/src/Event/CasPreUserLoadEvent.php
+++ b/src/Event/CasPreUserLoadEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\cas\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;
 
 /**
diff --git a/src/Event/CasPreUserLoadRedirectEvent.php b/src/Event/CasPreUserLoadRedirectEvent.php
index c3df7d0..46b3cf9 100644
--- a/src/Event/CasPreUserLoadRedirectEvent.php
+++ b/src/Event/CasPreUserLoadRedirectEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\cas\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 
 /**
diff --git a/src/Event/CasPreValidateEvent.php b/src/Event/CasPreValidateEvent.php
index 0fa660d..25296d2 100644
--- a/src/Event/CasPreValidateEvent.php
+++ b/src/Event/CasPreValidateEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\cas\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class CasPreValidateEvent.
diff --git a/src/Event/CasPreValidateServerConfigEvent.php b/src/Event/CasPreValidateServerConfigEvent.php
index 7c9299f..7fa4c60 100644
--- a/src/Event/CasPreValidateServerConfigEvent.php
+++ b/src/Event/CasPreValidateServerConfigEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\cas\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasServerConfig;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/src/Service/CasRedirector.php b/src/Service/CasRedirector.php
index 24c9698..bcd90fb 100644
--- a/src/Service/CasRedirector.php
+++ b/src/Service/CasRedirector.php
@@ -87,7 +87,7 @@ class CasRedirector {
     // Dispatch an event that allows modules to alter or prevent the redirect,
     // or to change the CAS server that we're redirected to.
     $pre_redirect_event = new CasPreRedirectEvent($data, $casServerConfig);
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_REDIRECT, $pre_redirect_event);
+    $this->eventDispatcher->dispatch($pre_redirect_event, CasHelper::EVENT_PRE_REDIRECT);
 
     // Build the service URL, which is where the CAS server will send users
     // back to after authenticating them. We always send users back to our main
diff --git a/src/Service/CasUserManager.php b/src/Service/CasUserManager.php
index 2cf46ca..c186be6 100644
--- a/src/Service/CasUserManager.php
+++ b/src/Service/CasUserManager.php
@@ -197,7 +197,7 @@ class CasUserManager {
         $cas_pre_register_event = new CasPreRegisterEvent($property_bag);
         $cas_pre_register_event->setPropertyValue('mail', $this->getEmailForNewAccount($property_bag));
         $this->casHelper->log(LogLevel::DEBUG, 'Dispatching EVENT_PRE_REGISTER.');
-        $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_REGISTER, $cas_pre_register_event);
+        $this->eventDispatcher->dispatch($cas_pre_register_event, CasHelper::EVENT_PRE_REGISTER);
         if ($cas_pre_register_event->getAllowAutomaticRegistration()) {
           $account = $this->register($property_bag->getUsername(), $cas_pre_register_event->getPropertyValues(), $cas_pre_register_event->getDrupalUsername());
         }
@@ -219,7 +219,7 @@ class CasUserManager {
     // in and/or alter the user entity before we save it.
     $pre_login_event = new CasPreLoginEvent($account, $property_bag);
     $this->casHelper->log(LogLevel::DEBUG, 'Dispatching EVENT_PRE_LOGIN.');
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_LOGIN, $pre_login_event);
+    $this->eventDispatcher->dispatch($pre_login_event, CasHelper::EVENT_PRE_LOGIN);
 
     // Save user entity since event listeners may have altered it.
     // @todo Don't take it for granted. Find if the account was really altered.
@@ -239,7 +239,7 @@ class CasUserManager {
 
     $postLoginEvent = new CasPostLoginEvent($account, $property_bag);
     $this->casHelper->log(LogLevel::DEBUG, 'Dispatching EVENT_POST_LOGIN.');
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_POST_LOGIN, $postLoginEvent);
+    $this->eventDispatcher->dispatch($postLoginEvent, CasHelper::EVENT_POST_LOGIN);
 
     if ($this->settings->get('proxy.initialize') && $property_bag->getPgt()) {
       $this->casHelper->log(LogLevel::DEBUG, "Storing PGT information for this session.");
@@ -322,7 +322,7 @@ class CasUserManager {
    */
   protected function randomPassword() {
     // Default length is 10, use a higher number that's harder to brute force.
-    return \user_password(30);
+    return \Drupal::service('password_generator')->generate(30);
   }
 
   /**
diff --git a/src/Service/CasValidator.php b/src/Service/CasValidator.php
index c3ac9b9..463eddf 100644
--- a/src/Service/CasValidator.php
+++ b/src/Service/CasValidator.php
@@ -101,7 +101,7 @@ class CasValidator {
     // Allow modules to modify the server config before it's used to validate
     // the login ticket.
     $event = new CasPreValidateServerConfigEvent($casServerConfig);
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_VALIDATE_SERVER_CONFIG, $event);
+    $this->eventDispatcher->dispatch($event, CasHelper::EVENT_PRE_VALIDATE_SERVER_CONFIG);
 
     // Determine the path to send the validation request to on the CAS server.
     $path = '';
@@ -139,7 +139,7 @@ class CasValidator {
     // Dispatch an event that allows modules to alter the validation path or
     // URL parameters.
     $pre_validate_event = new CasPreValidateEvent($path, $params);
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_VALIDATE, $pre_validate_event);
+    $this->eventDispatcher->dispatch($pre_validate_event, CasHelper::EVENT_PRE_VALIDATE);
     $validate_url = $casServerConfig->getServerBaseUrl() . $pre_validate_event->getValidationPath();
     if (!empty($pre_validate_event->getParameters())) {
       $validate_url .= '?' . UrlHelper::buildQuery($pre_validate_event->getParameters());
@@ -178,7 +178,7 @@ class CasValidator {
 
     // Dispatch an event that allows modules to alter the CAS property bag.
     $event = new CasPostValidateEvent($response_data, $cas_property_bag);
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_POST_VALIDATE, $event);
+    $this->eventDispatcher->dispatch($event, CasHelper::EVENT_POST_VALIDATE);
     return $event->getCasPropertyBag();
   }
 
diff --git a/src/Subscriber/CasSubscriber.php b/src/Subscriber/CasSubscriber.php
index 0822ad7..f864084 100644
--- a/src/Subscriber/CasSubscriber.php
+++ b/src/Subscriber/CasSubscriber.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\cas\Subscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\cas\CasRedirectData;
 use Drupal\cas\Service\CasRedirector;
 
@@ -9,9 +11,7 @@ use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\EventSubscriber\HttpExceptionSubscriberBase;
 use Drupal\Core\Session\AccountInterface;
 use Psr\Log\LogLevel;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\HttpKernelInterface;
 use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -147,10 +147,10 @@ class CasSubscriber extends HttpExceptionSubscriberBase {
   /**
    * The entry point for our subscriber.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The response event from the kernel.
    */
-  public function handle(GetResponseEvent $event) {
+  public function handle(RequestEvent $event) {
     // Don't do anything if this is a sub request and not a master request.
     if ($event->getRequestType() != HttpKernelInterface::MASTER_REQUEST) {
       return;
@@ -365,10 +365,10 @@ class CasSubscriber extends HttpExceptionSubscriberBase {
    * instances we handle the forced login redirect if applicable here instead,
    * using an exception subscriber.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *   The event to process.
    */
-  public function on403(GetResponseForExceptionEvent $event) {
+  public function on403(ExceptionEvent $event) {
     if ($this->currentUser->isAnonymous()) {
       $return_to = $this->requestStack->getCurrentRequest()->getUri();
       $redirect_data = new CasRedirectData(['returnto' => $return_to]);
diff --git a/tests/src/Functional/CasAutoAssignedRolesTest.php b/tests/src/Functional/CasAutoAssignedRolesTest.php
index 3285903..a1f708a 100644
--- a/tests/src/Functional/CasAutoAssignedRolesTest.php
+++ b/tests/src/Functional/CasAutoAssignedRolesTest.php
@@ -25,7 +25,8 @@ class CasAutoAssignedRolesTest extends CasBrowserTestBase {
       'user_accounts[auto_assigned_roles][]' => [$role_1, $role_2],
       'user_accounts[email_hostname]' => 'sample.com',
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
 
     $this->assertEquals([$role_1, $role_2], $this->config('cas.settings')->get('user_accounts.auto_assigned_roles'));
 
diff --git a/tests/src/Functional/CasBulkAddCasUsersTest.php b/tests/src/Functional/CasBulkAddCasUsersTest.php
index 61f7733..06ca77c 100644
--- a/tests/src/Functional/CasBulkAddCasUsersTest.php
+++ b/tests/src/Functional/CasBulkAddCasUsersTest.php
@@ -25,8 +25,9 @@ class CasBulkAddCasUsersTest extends CasBrowserTestBase {
       'email_hostname' => 'sample.com',
       'roles[sample_role]' => TRUE,
     ];
+    $this->drupalGet('/admin/people/create/cas-bulk');
 
-    $this->drupalPostForm('/admin/people/create/cas-bulk', $edit, 'Create new accounts');
+    $this->submitForm($edit, 'Create new accounts');
 
     $casUserManager = \Drupal::service('cas.user_manager');
 
@@ -34,12 +35,12 @@ class CasBulkAddCasUsersTest extends CasBrowserTestBase {
     $user_test3 = user_load_by_name('test 3');
     $this->assertNotFalse($user_test3, 'User with username "test 3" exists.');
     $this->assertTrue($user_test3->hasRole('sample_role'), 'The "test 3" user has role "sample_role"');
-    $this->assertEqual('test 3@sample.com', $user_test3->get('mail')->value, 'The "test 3" user has the email "test 3@sample.com".');
+    $this->assertEquals('test 3@sample.com', $user_test3->get('mail')->value, 'The "test 3" user has the email "test 3@sample.com".');
     $this->assertEquals('test 3', $casUserManager->getCasUsernameForAccount($user_test3->id()));
 
     $user_test4 = user_load_by_name('test4');
     $this->assertNotFalse($user_test4, 'User with username "test4" exists.');
-    $this->assertEqual('test4@sample.com', $user_test4->get('mail')->value, 'The "test4" user has the email "test4@sample.com".');
+    $this->assertEquals('test4@sample.com', $user_test4->get('mail')->value, 'The "test4" user has the email "test4@sample.com".');
     $this->assertTrue($user_test4->hasRole('sample_role'), 'The "test4" user has role "sample_role"');
     $this->assertEquals('test4', $casUserManager->getCasUsernameForAccount($user_test4->id()));
 
diff --git a/tests/src/Functional/CasEventsTest.php b/tests/src/Functional/CasEventsTest.php
index e60d5d2..4c65e95 100644
--- a/tests/src/Functional/CasEventsTest.php
+++ b/tests/src/Functional/CasEventsTest.php
@@ -31,7 +31,8 @@ class CasEventsTest extends CasBrowserTestBase {
       'user_accounts[auto_register]' => TRUE,
       'user_accounts[email_hostname]' => 'sample.com',
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
 
     $cas_property_bag = new CasPropertyBag('foo');
     \Drupal::service('cas.user_manager')->login($cas_property_bag, 'fake_ticket_string');
diff --git a/tests/src/Functional/CasForcedLoginControllerTest.php b/tests/src/Functional/CasForcedLoginControllerTest.php
index 5195bd7..4952624 100644
--- a/tests/src/Functional/CasForcedLoginControllerTest.php
+++ b/tests/src/Functional/CasForcedLoginControllerTest.php
@@ -27,7 +27,8 @@ class CasForcedLoginControllerTest extends CasBrowserTestBase {
       'server[hostname]' => 'fakecasserver.localhost',
       'server[path]' => '/auth',
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
 
     $this->drupalLogout();
 
diff --git a/tests/src/Functional/CasLoginFormTest.php b/tests/src/Functional/CasLoginFormTest.php
index f30e4ea..f303003 100644
--- a/tests/src/Functional/CasLoginFormTest.php
+++ b/tests/src/Functional/CasLoginFormTest.php
@@ -31,7 +31,8 @@ class CasLoginFormTest extends CasBrowserTestBase {
       'general[login_link_enabled]' => TRUE,
       'general[login_link_label]' => 'Click here to login!',
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $config = $this->config('cas.settings');
     $this->assertTrue($config->get('login_link_enabled'));
     $this->assertEquals('Click here to login!', $config->get('login_link_label'));
@@ -57,17 +58,19 @@ class CasLoginFormTest extends CasBrowserTestBase {
     $cas_user->setPassword('password');
     $cas_user->save();
     $this->container->get('cas.user_manager')->setCasUsernameForAccount($cas_user, 'cas_user');
+    $this->drupalGet('/user/login');
 
     // Log in in as normal user should work.
-    $this->drupalPostForm('/user/login', [
+    $this->submitForm([
       'name' => 'normal_user',
       'pass' => 'password',
     ], 'Log in');
     $this->assertSession()->addressEquals('/user/' . $normal_user->id());
     $this->drupalLogout();
+    $this->drupalGet('/user/login');
 
     // Log in as CAS user should not work.
-    $this->drupalPostForm('/user/login', [
+    $this->submitForm([
       'name' => 'cas_user',
       'pass' => 'password',
     ], 'Log in');
@@ -79,8 +82,9 @@ class CasLoginFormTest extends CasBrowserTestBase {
     $this->config('cas.settings')
       ->set('error_handling.message_prevent_normal_login', 'Just use the <a href="[cas:login-url]">CAS Login</a>')
       ->save();
+    $this->drupalGet('/user/login');
 
-    $this->drupalPostForm('/user/login', [
+    $this->submitForm([
       'name' => 'cas_user',
       'pass' => 'password',
     ], 'Log in');
@@ -93,11 +97,13 @@ class CasLoginFormTest extends CasBrowserTestBase {
     $edit = [
       'user_accounts[prevent_normal_login]' => FALSE,
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $this->drupalLogout();
+    $this->drupalGet('/user/login');
 
     // Log in as CAS user should work now.
-    $this->drupalPostForm('/user/login', [
+    $this->submitForm([
       'name' => 'cas_user',
       'pass' => 'password',
     ], 'Log in');
diff --git a/tests/src/Functional/CasPasswordResetTest.php b/tests/src/Functional/CasPasswordResetTest.php
index 96ead2a..71dc156 100644
--- a/tests/src/Functional/CasPasswordResetTest.php
+++ b/tests/src/Functional/CasPasswordResetTest.php
@@ -33,7 +33,7 @@ class CasPasswordResetTest extends CasBrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->settings = $this->config('cas.settings');
@@ -49,22 +49,25 @@ class CasPasswordResetTest extends CasBrowserTestBase {
   public function testPasswordResetAsAnonymous() {
     // Test with the 'user_accounts.restrict_password_management' setting off.
     $this->settings->set('user_accounts.restrict_password_management', FALSE)->save();
+    $this->drupalGet('/user/password');
 
     // Check that a CAS user is able to reset their password.
-    $this->drupalPostForm('/user/password', ['name' => 'user_with_cas'], 'Submit');
+    $this->submitForm(['name' => 'user_with_cas'], 'Submit');
     $this->assertSession()->addressEquals('user/login');
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');
+    $this->drupalGet('/user/password');
 
     // Check that a non-CAS user is able to reset their password.
-    $this->drupalPostForm('/user/password', ['name' => 'user_without_cas'], 'Submit');
+    $this->submitForm(['name' => 'user_without_cas'], 'Submit');
     $this->assertSession()->addressEquals('user/login');
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');
 
     // Test with the 'user_accounts.restrict_password_management' setting on.
     $this->settings->set('user_accounts.restrict_password_management', TRUE)->save();
+    $this->drupalGet('/user/password');
 
     // Check that a CAS user is not able to reset their password.
-    $this->drupalPostForm('/user/password', ['name' => 'user_with_cas'], 'Submit');
+    $this->submitForm(['name' => 'user_with_cas'], 'Submit');
     $this->assertSession()->addressEquals('user/password');
     $this->assertSession()->pageTextContains('The requested account is associated with CAS and its password cannot be managed from this website.');
 
@@ -74,9 +77,10 @@ class CasPasswordResetTest extends CasBrowserTestBase {
     $this->getSession()->reload();
     $this->assertSession()->pageTextContains('You cannot manage your password. Back to homepage.');
     $this->assertSession()->linkExists('homepage');
+    $this->drupalGet('/user/password');
 
     // Check that a non-CAS user is able to reset their password.
-    $this->drupalPostForm('/user/password', ['name' => 'user_without_cas'], 'Submit');
+    $this->submitForm(['name' => 'user_without_cas'], 'Submit');
     $this->assertSession()->addressEquals('user/login');
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');
   }
@@ -94,13 +98,15 @@ class CasPasswordResetTest extends CasBrowserTestBase {
 
     // Check that a non-CAS user is able to reset their password.
     $this->drupalLogin($this->nonCasUser);
-    $this->drupalPostForm('/user/password', [], 'Submit');
+    $this->drupalGet('/user/password');
+    $this->submitForm([], 'Submit');
     $this->assertSession()->addressEquals($this->nonCasUser->toUrl());
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');
 
     // Check that a CAS user is able to reset their password.
     $this->drupalLogin($this->casUser);
-    $this->drupalPostForm('/user/password', [], 'Submit');
+    $this->drupalGet('/user/password');
+    $this->submitForm([], 'Submit');
     $this->assertSession()->addressEquals($this->casUser->toUrl());
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');
 
@@ -113,7 +119,8 @@ class CasPasswordResetTest extends CasBrowserTestBase {
 
     // Check that a non-CAS user is able to reset their password.
     $this->drupalLogin($this->nonCasUser);
-    $this->drupalPostForm('/user/password', [], 'Submit');
+    $this->drupalGet('/user/password');
+    $this->submitForm([], 'Submit');
     $this->assertSession()->addressEquals($this->nonCasUser->toUrl());
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');
   }
diff --git a/tests/src/Functional/CasSubscriberTest.php b/tests/src/Functional/CasSubscriberTest.php
index 30f20b4..cafb033 100644
--- a/tests/src/Functional/CasSubscriberTest.php
+++ b/tests/src/Functional/CasSubscriberTest.php
@@ -51,7 +51,8 @@ class CasSubscriberTest extends CasBrowserTestBase {
       'forced_login[enabled]' => TRUE,
       'forced_login[paths][pages]' => "/node/2\n/my/path",
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
 
     $config = $this->config('cas.settings');
     $this->assertTrue($config->get('forced_login.enabled'));
@@ -114,7 +115,8 @@ class CasSubscriberTest extends CasBrowserTestBase {
       'gateway[check_frequency]' => CasHelper::CHECK_ONCE,
       'gateway[paths][pages]' => "/node/1",
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
 
     $config = $this->config('cas.settings');
     $this->assertEquals(CasHelper::CHECK_ONCE, $config->get('gateway.check_frequency'));
diff --git a/tests/src/Functional/CasUserFormFieldTest.php b/tests/src/Functional/CasUserFormFieldTest.php
index 72afcbc..0640287 100644
--- a/tests/src/Functional/CasUserFormFieldTest.php
+++ b/tests/src/Functional/CasUserFormFieldTest.php
@@ -45,7 +45,8 @@ class CasUserFormFieldTest extends CasBrowserTestBase {
       'cas_enabled' => FALSE,
       'cas_username' => 'test_user_1_cas',
     ];
-    $this->drupalPostForm('/user/' . $test_user_1->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('/user/' . $test_user_1->id() . '/edit');
+    $this->submitForm($edit, 'Save');
 
     // Verify the field is empty.
     $cas_username_field = $this->getSession()->getPage()->findField('cas_username');
@@ -56,7 +57,8 @@ class CasUserFormFieldTest extends CasBrowserTestBase {
       'cas_enabled' => TRUE,
       'cas_username' => 'test_user_1_cas',
     ];
-    $this->drupalPostForm('/user/' . $test_user_1->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('/user/' . $test_user_1->id() . '/edit');
+    $this->submitForm($edit, 'Save');
 
     // Check that field is still filled in with the CAS username.
     $cas_username_field = $this->getSession()->getPage()->findField('cas_username');
@@ -75,18 +77,20 @@ class CasUserFormFieldTest extends CasBrowserTestBase {
       'cas_enabled' => TRUE,
       'cas_username' => 'test_user_1_cas',
     ];
-    $this->drupalPostForm('/admin/people/create', $new_user_data, 'Create new account');
+    $this->drupalGet('/admin/people/create');
+    $this->submitForm($new_user_data, 'Create new account');
     $output = $this->getSession()->getPage()->getContent();
 
     $validation_error_message = 'The specified CAS username is already in use by another user.';
-    $this->assertContains($validation_error_message, $output, 'Expected validation error not found on page.');
+    $this->assertStringContainsString($validation_error_message, $output, 'Expected validation error not found on page.');
 
     // Submit with proper CAS username, and verify user was created and has the
     // proper CAS username associated.
     $new_user_data['cas_username'] = 'test_user_2_cas';
-    $this->drupalPostForm('/admin/people/create', $new_user_data, 'Create new account');
+    $this->drupalGet('/admin/people/create');
+    $this->submitForm($new_user_data, 'Create new account');
     $output = $this->getSession()->getPage()->getContent();
-    $this->assertNotContains($validation_error_message, $output, 'Validation error should not be found.');
+    $this->assertStringNotContainsString($validation_error_message, $output, 'Validation error should not be found.');
 
     $test_user_2 = $this->container->get('entity_type.manager')->getStorage('user')->loadByProperties(['name' => 'test_user_2']);
     $test_user_2 = reset($test_user_2);
@@ -97,7 +101,8 @@ class CasUserFormFieldTest extends CasBrowserTestBase {
     // Should be able to clear out the CAS enabled checkbox to remove the
     // authmap entry.
     $edit = ['cas_enabled' => FALSE];
-    $this->drupalPostForm('/user/' . $test_user_2->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('/user/' . $test_user_2->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     $authmap = $this->container->get('externalauth.authmap');
     $this->assertFalse($authmap->get($test_user_2->id(), 'cas'));
     // Visit the edit page for this user to ensure CAS username field empty.
@@ -124,7 +129,8 @@ class CasUserFormFieldTest extends CasBrowserTestBase {
       'user_accounts[restrict_password_management]' => TRUE,
       'user_accounts[prevent_normal_login]' => FALSE,
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertEquals(TRUE, $this->config('cas.settings')->get('user_accounts.restrict_password_management'));
     $this->drupalLogout();
 
@@ -143,13 +149,15 @@ class CasUserFormFieldTest extends CasBrowserTestBase {
       'current_pass' => 'incorrectpassword',
       'mail' => 'new-noncasuser-email@sample.com',
     ];
+    $this->drupalGet('/user/' . $non_cas_user->id() . '/edit');
     // First try changing data with wrong password to ensure the protected
     // password constraint still works.
-    $this->drupalPostForm('/user/' . $non_cas_user->id() . '/edit', $form_data, 'Save');
+    $this->submitForm($form_data, 'Save');
     $this->assertSession()->responseContains('Your current password is missing or incorrect');
     // Now again with the correct current password.
     $form_data['current_pass'] = $non_cas_user->pass_raw;
-    $this->drupalPostForm('/user/' . $non_cas_user->id() . '/edit', $form_data, 'Save');
+    $this->drupalGet('/user/' . $non_cas_user->id() . '/edit');
+    $this->submitForm($form_data, 'Save');
     $this->assertSession()->responseContains('The changes have been saved.');
 
     // For CAS users, we modify the user form to remove the password management
@@ -167,7 +175,8 @@ class CasUserFormFieldTest extends CasBrowserTestBase {
     $form_data = [
       'mail' => 'new-casuser-email@sample.com',
     ];
-    $this->drupalPostForm('/user/' . $cas_user->id() . '/edit', $form_data, 'Save');
+    $this->drupalGet('/user/' . $cas_user->id() . '/edit');
+    $this->submitForm($form_data, 'Save');
     $this->assertSession()->responseContains('The changes have been saved.');
 
     // An admin should still be able to see the password fields the CAS user.
@@ -182,7 +191,8 @@ class CasUserFormFieldTest extends CasBrowserTestBase {
     $edit = [
       'user_accounts[restrict_password_management]' => FALSE,
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertEquals(FALSE, $this->config('cas.settings')->get('user_accounts.restrict_password_management'));
     $this->drupalLogout();
 
@@ -200,12 +210,14 @@ class CasUserFormFieldTest extends CasBrowserTestBase {
       'current_pass' => 'incorrectpassword',
       'mail' => 'another-new-casuser-email@sample.com',
     ];
+    $this->drupalGet('/user/' . $cas_user->id() . '/edit');
     // First try changing data with wrong password.
-    $this->drupalPostForm('/user/' . $cas_user->id() . '/edit', $form_data, 'Save');
+    $this->submitForm($form_data, 'Save');
     $this->assertSession()->responseContains('Your current password is missing or incorrect');
     // Now again with the correct current password.
     $form_data['current_pass'] = $cas_user->pass_raw;
-    $this->drupalPostForm('/user/' . $cas_user->id() . '/edit', $form_data, 'Save');
+    $this->drupalGet('/user/' . $cas_user->id() . '/edit');
+    $this->submitForm($form_data, 'Save');
     $this->assertSession()->responseContains('The changes have been saved.');
   }
 
@@ -228,7 +240,8 @@ class CasUserFormFieldTest extends CasBrowserTestBase {
       'user_accounts[restrict_email_management]' => TRUE,
       'user_accounts[prevent_normal_login]' => FALSE,
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertEquals(TRUE, $this->config('cas.settings')->get('user_accounts.restrict_email_management'));
     $this->drupalLogout();
 
@@ -243,13 +256,15 @@ class CasUserFormFieldTest extends CasBrowserTestBase {
       'current_pass' => 'incorrectpassword',
       'mail' => 'new-noncasuser-email@sample.com',
     ];
+    $this->drupalGet('/user/' . $non_cas_user->id() . '/edit');
     // First try changing data with wrong password to ensure the protected
     // password constraint still works.
-    $this->drupalPostForm('/user/' . $non_cas_user->id() . '/edit', $form_data, 'Save');
+    $this->submitForm($form_data, 'Save');
     $this->assertSession()->responseContains('Your current password is missing or incorrect');
     // Now again with the correct current password.
     $form_data['current_pass'] = $non_cas_user->pass_raw;
-    $this->drupalPostForm('/user/' . $non_cas_user->id() . '/edit', $form_data, 'Save');
+    $this->drupalGet('/user/' . $non_cas_user->id() . '/edit');
+    $this->submitForm($form_data, 'Save');
     $this->assertSession()->responseContains('The changes have been saved.');
 
     // For CAS users, we modify the user form to disable the email field.
@@ -274,7 +289,8 @@ class CasUserFormFieldTest extends CasBrowserTestBase {
     $edit = [
       'user_accounts[restrict_email_management]' => FALSE,
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertEquals(FALSE, $this->config('cas.settings')->get('user_accounts.restrict_email_management'));
     $this->drupalLogout();
 
diff --git a/tests/src/Functional/CasUserInteractionTest.php b/tests/src/Functional/CasUserInteractionTest.php
index aa65bd1..df194f0 100644
--- a/tests/src/Functional/CasUserInteractionTest.php
+++ b/tests/src/Functional/CasUserInteractionTest.php
@@ -28,7 +28,7 @@ class CasUserInteractionTest extends CasBrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a local user.
diff --git a/tests/src/Traits/CasTestTrait.php b/tests/src/Traits/CasTestTrait.php
index 4b0b4dd..11896fc 100644
--- a/tests/src/Traits/CasTestTrait.php
+++ b/tests/src/Traits/CasTestTrait.php
@@ -58,7 +58,8 @@ trait CasTestTrait {
       'email' => $email,
       'password' => $password,
     ];
-    $this->drupalPostForm('/cas-mock-server/login', $edit, 'Log in', ['query' => $query]);
+    $this->drupalGet('/cas-mock-server/login', ['query' => $query]);
+    $this->submitForm($edit, 'Log in');
   }
 
 }
diff --git a/tests/src/Unit/Controller/ServiceControllerTest.php b/tests/src/Unit/Controller/ServiceControllerTest.php
index 57bc97f..54feb66 100644
--- a/tests/src/Unit/Controller/ServiceControllerTest.php
+++ b/tests/src/Unit/Controller/ServiceControllerTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\cas\Unit\Controller;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;
 use Drupal\cas\Controller\ServiceController;
 use Drupal\cas\Event\CasPreUserLoadRedirectEvent;
@@ -15,7 +17,6 @@ use Drupal\Core\Utility\Token;
 use Drupal\externalauth\ExternalAuthInterface;
 use Drupal\Tests\UnitTestCase;
 use Prophecy\Argument;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
@@ -28,45 +29,46 @@ use Symfony\Component\HttpFoundation\Request;
  */
 class ServiceControllerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The mocked CasHelper.
    *
-   * @var \Drupal\cas\Service\CasHelper|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\cas\Service\CasHelper|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $casHelper;
 
   /**
    * The mocked Request Stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\HttpFoundation\RequestStack|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $requestStack;
 
   /**
    * The mocked CasValidator.
    *
-   * @var \Drupal\cas\Service\CasValidator|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\cas\Service\CasValidator|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $casValidator;
 
   /**
    * The mocked CasUserManager.
    *
-   * @var \Drupal\cas\Service\CasUserManager|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\cas\Service\CasUserManager|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $casUserManager;
 
   /**
    * The mocked CasLogout.
    *
-   * @var \Drupal\cas\Service\CasLogout|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\cas\Service\CasLogout|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $casLogout;
 
   /**
    * The mocked Url Generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $urlGenerator;
 
@@ -129,18 +131,12 @@ class ServiceControllerTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
-    $this->casValidator = $this->getMockBuilder('\Drupal\cas\Service\CasValidator')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->casUserManager = $this->getMockBuilder('\Drupal\cas\Service\CasUserManager')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->casLogout = $this->getMockBuilder('\Drupal\cas\Service\CasLogout')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->casValidator = $this->createMock('\Drupal\cas\Service\CasValidator');
+    $this->casUserManager = $this->createMock('\Drupal\cas\Service\CasUserManager');
+    $this->casLogout = $this->createMock('\Drupal\cas\Service\CasLogout');
     $this->configFactory = $this->getConfigFactoryStub([
       'cas.settings' => [
         'server.hostname' => 'example-server.com',
@@ -162,9 +158,7 @@ class ServiceControllerTest extends UnitTestCase {
     $this->requestObject->query = $query_bag;
     $this->requestObject->request = $request_bag;
 
-    $storage = $this->getMockBuilder('\Symfony\Component\HttpFoundation\Session\Storage\MockArraySessionStorage')
-      ->setMethods(NULL)
-      ->getMock();
+    $storage = $this->createMock('\Symfony\Component\HttpFoundation\Session\Storage\MockArraySessionStorage');
     $session = $this->getMockBuilder('\Symfony\Component\HttpFoundation\Session\Session')
       ->setConstructorArgs([$storage])
       ->setMethods(NULL)
diff --git a/tests/src/Unit/Routing/CasRouteEnhancerTest.php b/tests/src/Unit/Routing/CasRouteEnhancerTest.php
index 21571db..594d71c 100644
--- a/tests/src/Unit/Routing/CasRouteEnhancerTest.php
+++ b/tests/src/Unit/Routing/CasRouteEnhancerTest.php
@@ -18,39 +18,33 @@ class CasRouteEnhancerTest extends UnitTestCase {
   /**
    * The mocked CasHelper.
    *
-   * @var \Drupal\cas\Service\CasHelper|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\cas\Service\CasHelper|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $casHelper;
 
   /**
    * The mocked Request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\HttpFoundation\Request|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $request;
 
   /**
    * The mocked Route.
    *
-   * @var \Symfony\Component\Routing\Route|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\Routing\Route|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $route;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
-    $this->casHelper = $this->getMockBuilder('\Drupal\cas\Service\CasHelper')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->request = $this->getMockBuilder('\Symfony\Component\HttpFoundation\Request')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->route = $this->getMockBuilder('\Symfony\Component\Routing\Route')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->casHelper = $this->createMock('\Drupal\cas\Service\CasHelper');
+    $this->request = $this->createMock('\Symfony\Component\HttpFoundation\Request');
+    $this->route = $this->createMock('\Symfony\Component\Routing\Route');
   }
 
   /**
@@ -70,10 +64,7 @@ class CasRouteEnhancerTest extends UnitTestCase {
    * @dataProvider enhanceDataProvider
    */
   public function testEnhance($path, $cas_logout_enabled, $is_cas_user) {
-    $session = $this->getMockBuilder('\Symfony\Component\HttpFoundation\Session')
-      ->disableOriginalConstructor()
-      ->setMethods(['get'])
-      ->getMock();
+    $session = $this->createMock('\Symfony\Component\HttpFoundation\Session');
     $session->expects($this->any())
       ->method('get')
       ->with('is_cas_user')
diff --git a/tests/src/Unit/Service/CasHelperTest.php b/tests/src/Unit/Service/CasHelperTest.php
index 4b2e886..94305e8 100644
--- a/tests/src/Unit/Service/CasHelperTest.php
+++ b/tests/src/Unit/Service/CasHelperTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\cas\Unit\Service;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\cas\Service\CasHelper;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Logger\LoggerChannelFactory;
@@ -20,24 +21,25 @@ use Symfony\Component\HttpFoundation\Request;
  */
 class CasHelperTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The mocked Url generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $urlGenerator;
 
   /**
    * The mocked logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactory|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Logger\LoggerChannelFactory|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $loggerFactory;
 
   /**
    * The mocked log channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannel|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Logger\LoggerChannel|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $loggerChannel;
 
@@ -51,13 +53,11 @@ class CasHelperTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->loggerFactory = $this->createMock('\Drupal\Core\Logger\LoggerChannelFactory');
-    $this->loggerChannel = $this->getMockBuilder('\Drupal\Core\Logger\LoggerChannel')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->loggerChannel = $this->createMock('\Drupal\Core\Logger\LoggerChannel');
     $this->loggerFactory->expects($this->any())
       ->method('get')
       ->with('cas')
diff --git a/tests/src/Unit/Service/CasProxyHelperTest.php b/tests/src/Unit/Service/CasProxyHelperTest.php
index 423240a..a7f7949 100644
--- a/tests/src/Unit/Service/CasProxyHelperTest.php
+++ b/tests/src/Unit/Service/CasProxyHelperTest.php
@@ -22,46 +22,40 @@ class CasProxyHelperTest extends UnitTestCase {
   /**
    * The mocked session manager.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $session;
 
   /**
    * The mocked CAS helper.
    *
-   * @var \Drupal\cas\Service\CasHelper|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\cas\Service\CasHelper|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $casHelper;
 
   /**
    * The mocked database connection object.
    *
-   * @var \Drupal\Core\Database\Connection|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Database\Connection|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $database;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
-    $storage = $this->getMockBuilder('\Symfony\Component\HttpFoundation\Session\Storage\MockArraySessionStorage')
-      ->setMethods(NULL)
-      ->getMock();
+    $storage = $this->createMock('\Symfony\Component\HttpFoundation\Session\Storage\MockArraySessionStorage');
     $this->session = $this->getMockBuilder('\Symfony\Component\HttpFoundation\Session\Session')
       ->setConstructorArgs([$storage])
       ->setMethods(NULL)
       ->getMock();
     $this->session->start();
 
-    $this->casHelper = $this->getMockBuilder('\Drupal\cas\Service\CasHelper')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->casHelper = $this->createMock('\Drupal\cas\Service\CasHelper');
 
-    $this->database = $this->getMockBuilder('\Drupal\Core\Database\Connection')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->database = $this->createMock('\Drupal\Core\Database\Connection');
   }
 
   /**
diff --git a/tests/src/Unit/Service/CasRedirectorTest.php b/tests/src/Unit/Service/CasRedirectorTest.php
index 57c33ad..0a6d918 100644
--- a/tests/src/Unit/Service/CasRedirectorTest.php
+++ b/tests/src/Unit/Service/CasRedirectorTest.php
@@ -24,21 +24,21 @@ class CasRedirectorTest extends UnitTestCase {
   /**
    * Mock Cas Helper.
    *
-   * @var \Drupal\cas\Service\CasHelper|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\cas\Service\CasHelper|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $casHelper;
 
   /**
    * Mock URL Generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $urlGenerator;
 
   /**
    * The mocked event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $eventDispatcher;
 
@@ -59,7 +59,7 @@ class CasRedirectorTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->configFactory = $this->getConfigFactoryStub([
@@ -75,25 +75,18 @@ class CasRedirectorTest extends UnitTestCase {
       ],
     ]);
 
-    $this->casHelper = $this
-      ->getMockBuilder('\Drupal\cas\Service\CasHelper')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->casHelper = $this->createMock('\Drupal\cas\Service\CasHelper');
 
     $this->urlGenerator = $this->createMock('\Drupal\Core\Routing\UrlGeneratorInterface');
     $this->urlGenerator->method('generate')
       ->willReturnCallback([$this, 'getServiceUrl']);
 
     // Mock event dispatcher to dispatch events.
-    $this->eventDispatcher = $this->getMockBuilder('\Symfony\Component\EventDispatcher\EventDispatcherInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->eventDispatcher = $this->createMock('\Symfony\Component\EventDispatcher\EventDispatcherInterface');
 
     // We have to mock the cache context manager which is called when we
     // add cache contexts to a cacheable metadata.
-    $cache_contexts_manager = $this->getMockBuilder('Drupal\Core\Cache\Context\CacheContextsManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $cache_contexts_manager = $this->createMock('Drupal\Core\Cache\Context\CacheContextsManager');
     $cache_contexts_manager->method('assertValidTokens')->willReturn(TRUE);
 
     $container = new Container();
diff --git a/tests/src/Unit/Service/CasUserManagerTest.php b/tests/src/Unit/Service/CasUserManagerTest.php
index ee8b1cc..e6a2a06 100644
--- a/tests/src/Unit/Service/CasUserManagerTest.php
+++ b/tests/src/Unit/Service/CasUserManagerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\cas\Unit\Service;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\cas\Event\CasPreLoginEvent;
 use Drupal\cas\Event\CasPreRegisterEvent;
 use Drupal\cas\Service\CasProxyHelper;
@@ -20,6 +21,7 @@ use Drupal\cas\CasPropertyBag;
  */
 class CasUserManagerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The mocked External Auth manager.
    *
@@ -37,28 +39,28 @@ class CasUserManagerTest extends UnitTestCase {
   /**
    * The mocked Entity Manager.
    *
-   * @var \Drupal\Core\Entity\EntityManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityManager;
 
   /**
    * The mocked session manager.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $session;
 
   /**
    * The mocked database connection.
    *
-   * @var \Drupal\Core\Database\Connection|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Database\Connection|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $connection;
 
   /**
    * The mocked event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $eventDispatcher;
 
@@ -93,33 +95,19 @@ class CasUserManagerTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
-    $this->externalAuth = $this->getMockBuilder('\Drupal\externalauth\ExternalAuth')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->authmap = $this->getMockBuilder('\Drupal\externalauth\Authmap')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $storage = $this->getMockBuilder('\Symfony\Component\HttpFoundation\Session\Storage\MockArraySessionStorage')
-      ->setMethods(NULL)
-      ->getMock();
+    $this->externalAuth = $this->createMock('\Drupal\externalauth\ExternalAuth');
+    $this->authmap = $this->createMock('\Drupal\externalauth\Authmap');
+    $storage = $this->createMock('\Symfony\Component\HttpFoundation\Session\Storage\MockArraySessionStorage');
     $this->session = $this->getMockBuilder('\Symfony\Component\HttpFoundation\Session\Session')
       ->setConstructorArgs([$storage])
       ->getMock();
     $this->session->start();
-    $this->connection = $this->getMockBuilder('\Drupal\Core\Database\Connection')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->eventDispatcher = $this->getMockBuilder('\Symfony\Component\EventDispatcher\EventDispatcherInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->casHelper = $this->getMockBuilder('\Drupal\cas\Service\CasHelper')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->account = $this->getMockBuilder('Drupal\user\UserInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->connection = $this->createMock('\Drupal\Core\Database\Connection');
+    $this->eventDispatcher = $this->createMock('\Symfony\Component\EventDispatcher\EventDispatcherInterface');
+    $this->casHelper = $this->createMock('\Drupal\cas\Service\CasHelper');
+    $this->account = $this->createMock('Drupal\user\UserInterface');
     $this->casProxyHelper = $this->prophesize(CasProxyHelper::class);
   }
 
diff --git a/tests/src/Unit/Service/CasValidatorTest.php b/tests/src/Unit/Service/CasValidatorTest.php
index ad73723..a240c45 100644
--- a/tests/src/Unit/Service/CasValidatorTest.php
+++ b/tests/src/Unit/Service/CasValidatorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\cas\Unit\Service;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Tests\UnitTestCase;
 use Drupal\cas\Service\CasValidator;
 use Drupal\cas\CasPropertyBag;
@@ -13,7 +14,6 @@ use GuzzleHttp\Exception\RequestException;
 use GuzzleHttp\Psr7\Request;
 use GuzzleHttp\Middleware;
 use Drupal\cas\Service\CasHelper;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * CasValidator unit tests.
@@ -28,7 +28,7 @@ class CasValidatorTest extends UnitTestCase {
   /**
    * The mocked event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $eventDispatcher;
 
@@ -42,13 +42,11 @@ class CasValidatorTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Mock event dispatcher to dispatch events.
-    $this->eventDispatcher = $this->getMockBuilder('\Symfony\Component\EventDispatcher\EventDispatcherInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->eventDispatcher = $this->createMock('\Symfony\Component\EventDispatcher\EventDispatcherInterface');
   }
 
   /**
@@ -56,7 +54,7 @@ class CasValidatorTest extends UnitTestCase {
    *
    * @param string $event_name
    *   Name of event fired.
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   Event fired.
    */
   public function dispatchEvent($event_name, Event $event) {
@@ -133,9 +131,7 @@ class CasValidatorTest extends UnitTestCase {
       ->method('generateFromRoute')
       ->will($this->returnValue('https://example.com/casproxycallback'));
 
-    $casHelper = $this->getMockBuilder('\Drupal\cas\Service\CasHelper')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $casHelper = $this->createMock('\Drupal\cas\Service\CasHelper');
 
     $casValidator = new CasValidator($httpClient, $casHelper, $configFactory, $urlGenerator, $this->eventDispatcher);
 
@@ -314,9 +310,7 @@ class CasValidatorTest extends UnitTestCase {
     $handler = HandlerStack::create($mock);
     $httpClient = new Client(['handler' => $handler]);
 
-    $casHelper = $this->getMockBuilder('\Drupal\cas\Service\CasHelper')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $casHelper = $this->createMock('\Drupal\cas\Service\CasHelper');
 
     $configFactory = $this->getConfigFactoryStub([
       'cas.settings' => [
@@ -558,9 +552,7 @@ class CasValidatorTest extends UnitTestCase {
       ],
     ]);
 
-    $casHelper = $this->getMockBuilder('\Drupal\cas\Service\CasHelper')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $casHelper = $this->createMock('\Drupal\cas\Service\CasHelper');
 
     $urlGenerator = $this->createMock('\Drupal\Core\Routing\UrlGeneratorInterface');
 
@@ -609,9 +601,7 @@ class CasValidatorTest extends UnitTestCase {
       ],
     ]);
 
-    $casHelper = $this->getMockBuilder('\Drupal\cas\Service\CasHelper')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $casHelper = $this->createMock('\Drupal\cas\Service\CasHelper');
 
     $urlGenerator = $this->createMock('\Drupal\Core\Routing\UrlGeneratorInterface');
 
@@ -659,9 +649,7 @@ class CasValidatorTest extends UnitTestCase {
 
     $ticket = $this->randomMachineName(8);
 
-    $casHelper = $this->getMockBuilder('\Drupal\cas\Service\CasHelper')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $casHelper = $this->createMock('\Drupal\cas\Service\CasHelper');
 
     $urlGenerator = $this->createMock('\Drupal\Core\Routing\UrlGeneratorInterface');
 
