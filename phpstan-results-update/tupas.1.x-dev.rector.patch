diff --git a/modules/tupas_registration/src/Controller/RegistrationController.php b/modules/tupas_registration/src/Controller/RegistrationController.php
index 49ce5a0..6f7f27d 100644
--- a/modules/tupas_registration/src/Controller/RegistrationController.php
+++ b/modules/tupas_registration/src/Controller/RegistrationController.php
@@ -156,7 +156,7 @@ class RegistrationController extends SessionController {
     if ($account = $this->sessionManager->loginRegister($this->auth)) {
       // Save user details.
       $account->setUsername($name)
-        ->setPassword(user_password(20));
+        ->setPassword(\Drupal::service('password_generator')->generate(20));
       $account->save();
     }
 
diff --git a/modules/tupas_registration/tests/src/Functional/TupasRegistrationFunctionalTest.php b/modules/tupas_registration/tests/src/Functional/TupasRegistrationFunctionalTest.php
index e9281a1..6b5d2c8 100644
--- a/modules/tupas_registration/tests/src/Functional/TupasRegistrationFunctionalTest.php
+++ b/modules/tupas_registration/tests/src/Functional/TupasRegistrationFunctionalTest.php
@@ -70,7 +70,7 @@ class TupasRegistrationFunctionalTest extends TupasSessionFunctionalBase {
     // Fill registration form.
     $this->getSession()->getPage()->fillField('name', 'Testaccount');
     $this->getSession()->getPage()->fillField('mail', 'test@example.com');
-    $this->drupalPostForm(NULL, [], 'Create new account');
+    $this->submitForm([], 'Create new account');
     $this->assertSession()->pageTextContains('Registration successful. You are now logged in.');
     $this->assertSession()->addressEquals('/user/3');
 
@@ -91,7 +91,7 @@ class TupasRegistrationFunctionalTest extends TupasSessionFunctionalBase {
     // Make sure username is hidden.
     $this->assertSession()->fieldNotExists('name');
     $this->getSession()->getPage()->fillField('mail', 'test123@example.com');
-    $this->drupalPostForm(NULL, [], 'Create new account');
+    $this->submitForm([], 'Create new account');
     $this->assertSession()->pageTextContains('Registration successful. You are now logged in.');
     $this->assertSession()->addressEquals('/user/4');
     // Make sure user has same username as the one provided by
@@ -114,7 +114,7 @@ class TupasRegistrationFunctionalTest extends TupasSessionFunctionalBase {
     $this->loginUsingTupas();
 
     $this->assertSession()->addressEquals('/user/tupas/register');
-    $this->drupalPostForm(NULL, [], 'Confirm');
+    $this->submitForm([], 'Confirm');
     $this->assertSession()->pageTextContains('Account connected succesfully.');
 
     // Log current user out and test that user can log with previously
diff --git a/modules/tupas_registration/tests/src/Unit/UniqueUsernameTest.php b/modules/tupas_registration/tests/src/Unit/UniqueUsernameTest.php
index 5360726..667a5e7 100644
--- a/modules/tupas_registration/tests/src/Unit/UniqueUsernameTest.php
+++ b/modules/tupas_registration/tests/src/Unit/UniqueUsernameTest.php
@@ -16,14 +16,14 @@ class UniqueUsernameTest extends UnitTestCase {
   /**
    * The mocked entity storage.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var \PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityStorage;
 
   /**
    * The mocked entity manager.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var \PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityManager;
 
@@ -40,11 +40,9 @@ class UniqueUsernameTest extends UnitTestCase {
   protected function setUp() : void {
     parent::setUp();
 
-    $this->entityManager = $this->getMockBuilder('\Drupal\Core\Entity\EntityTypeManagerInterface')
-      ->getMock();
+    $this->entityManager = $this->createMock('\Drupal\Core\Entity\EntityTypeManagerInterface');
 
-    $this->entityStorage = $this->getMockBuilder('Drupal\Core\Entity\EntityStorageInterface')
-      ->getMock();
+    $this->entityStorage = $this->createMock('Drupal\Core\Entity\EntityStorageInterface');
     $this->entityManager->expects($this->any())
       ->method('getStorage')
       ->will($this->returnValue($this->entityStorage));
diff --git a/modules/tupas_session/src/Controller/SessionController.php b/modules/tupas_session/src/Controller/SessionController.php
index 27377b0..82a7672 100644
--- a/modules/tupas_session/src/Controller/SessionController.php
+++ b/modules/tupas_session/src/Controller/SessionController.php
@@ -185,9 +185,10 @@ class SessionController extends ControllerBase {
       // Allow customer id to be altered.
       /** @var \Drupal\tupas_session\Event\CustomerIdAlterEvent $dispatched_data */
       $dispatched_data = $this->eventDispatcher
-        ->dispatch(SessionEvents::CUSTOMER_ID_ALTER, new CustomerIdAlterEvent($hashed_id, [
+        ->dispatch(new CustomerIdAlterEvent($hashed_id, [
           'raw' => $request->query->all(),
-        ]));
+        ]),
+        SessionEvents::CUSTOMER_ID_ALTER);
       // Name will be sent Latin1 encoded and urlencoded.
       $name = Unicode::convertToUtf8(urldecode($request->query->get('B02K_CUSTNAME')), 'ISO-8859-1');
       // Start tupas session.
@@ -198,7 +199,7 @@ class SessionController extends ControllerBase {
       // Allow redirect path to be customized.
       $redirect_data = new RedirectAlterEvent('<front>', $request->query->all(), $this->t('TUPAS authentication succesful.'));
       /** @var \Drupal\tupas_session\Event\RedirectAlterEvent $redirect */
-      $redirect = $this->eventDispatcher->dispatch(SessionEvents::REDIRECT_ALTER, $redirect_data);
+      $redirect = $this->eventDispatcher->dispatch($redirect_data, SessionEvents::REDIRECT_ALTER);
 
       // Show message only if message is set.
       if ($message = $redirect->getMessage()) {
diff --git a/modules/tupas_session/src/Event/CustomerIdAlterEvent.php b/modules/tupas_session/src/Event/CustomerIdAlterEvent.php
index ca0ea20..3bb056e 100644
--- a/modules/tupas_session/src/Event/CustomerIdAlterEvent.php
+++ b/modules/tupas_session/src/Event/CustomerIdAlterEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\tupas_session\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class CustomerIdAlterEvent.
diff --git a/modules/tupas_session/src/Event/RedirectAlterEvent.php b/modules/tupas_session/src/Event/RedirectAlterEvent.php
index 95f41bb..ea61cd9 100644
--- a/modules/tupas_session/src/Event/RedirectAlterEvent.php
+++ b/modules/tupas_session/src/Event/RedirectAlterEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\tupas_session\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class RedirectAlterEvent.
diff --git a/modules/tupas_session/src/Event/SessionAuthenticationEvent.php b/modules/tupas_session/src/Event/SessionAuthenticationEvent.php
index cec8eb1..663c531 100644
--- a/modules/tupas_session/src/Event/SessionAuthenticationEvent.php
+++ b/modules/tupas_session/src/Event/SessionAuthenticationEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\tupas_session\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Session\AccountInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Class SessionAuthenticationEvent.
diff --git a/modules/tupas_session/src/Event/SessionData.php b/modules/tupas_session/src/Event/SessionData.php
index 432160b..6ac2093 100644
--- a/modules/tupas_session/src/Event/SessionData.php
+++ b/modules/tupas_session/src/Event/SessionData.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\tupas_session\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class SessionData.
diff --git a/modules/tupas_session/src/EventSubscriber/TupasSessionEventSubscriber.php b/modules/tupas_session/src/EventSubscriber/TupasSessionEventSubscriber.php
index 89ecf0a..4b9ad6e 100644
--- a/modules/tupas_session/src/EventSubscriber/TupasSessionEventSubscriber.php
+++ b/modules/tupas_session/src/EventSubscriber/TupasSessionEventSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tupas_session\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Session\AccountProxyInterface;
@@ -10,7 +11,6 @@ use Drupal\Core\Url;
 use Drupal\tupas_session\TupasSessionManagerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -87,10 +87,10 @@ class TupasSessionEventSubscriber implements EventSubscriberInterface {
   /**
    * This method is called whenever the kernel.request event is dispatched.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   Event to dispatch.
    */
-  public function handleTupasSession(GetResponseEvent $event) {
+  public function handleTupasSession(RequestEvent $event) {
     // User has access to bypass session expiration. Do nothing.
     if ($this->currentUser->hasPermission('bypass tupas session expiration')) {
       return;
diff --git a/modules/tupas_session/src/TupasSessionManager.php b/modules/tupas_session/src/TupasSessionManager.php
index 2ed6c9d..b4966ca 100644
--- a/modules/tupas_session/src/TupasSessionManager.php
+++ b/modules/tupas_session/src/TupasSessionManager.php
@@ -143,7 +143,7 @@ class TupasSessionManager implements TupasSessionManagerInterface {
     // Allow session data to be altered.
     $session_data = new SessionData($transaction_id, $unique_id, $this->getTime(), $data);
     /** @var \Drupal\tupas_session\Event\SessionData $session */
-    $session = $this->eventDispatcher->dispatch(SessionEvents::SESSION_ALTER, $session_data);
+    $session = $this->eventDispatcher->dispatch($session_data, SessionEvents::SESSION_ALTER);
 
     return $this->storage->save($session);
   }
@@ -170,7 +170,7 @@ class TupasSessionManager implements TupasSessionManagerInterface {
     }
     $this->recreate($session);
 
-    $this->eventDispatcher->dispatch(SessionEvents::SESSION_LOGIN, new SessionAuthenticationEvent($account, $session));
+    $this->eventDispatcher->dispatch(new SessionAuthenticationEvent($account, $session), SessionEvents::SESSION_LOGIN);
 
     return $account;
   }
@@ -185,7 +185,7 @@ class TupasSessionManager implements TupasSessionManagerInterface {
     $auth->linkExistingAccount($session->getUniqueId(), 'tupas_registration', $account);
     $this->recreate($session);
 
-    $this->eventDispatcher->dispatch(SessionEvents::SESSION_REGISTER, new SessionAuthenticationEvent($account, $session));
+    $this->eventDispatcher->dispatch(new SessionAuthenticationEvent($account, $session), SessionEvents::SESSION_REGISTER);
 
     return $account;
   }
@@ -203,7 +203,7 @@ class TupasSessionManager implements TupasSessionManagerInterface {
     }
     $this->recreate($session);
 
-    $this->eventDispatcher->dispatch(SessionEvents::SESSION_REGISTER, new SessionAuthenticationEvent($account, $session));
+    $this->eventDispatcher->dispatch(new SessionAuthenticationEvent($account, $session), SessionEvents::SESSION_REGISTER);
 
     return $account;
   }
@@ -213,7 +213,7 @@ class TupasSessionManager implements TupasSessionManagerInterface {
    */
   public function destroy() {
     if ($session_data = $this->getSession()) {
-      $this->eventDispatcher->dispatch(SessionEvents::SESSION_LOGOUT, $session_data);
+      $this->eventDispatcher->dispatch($session_data, SessionEvents::SESSION_LOGOUT);
     }
     return $this->storage->delete();
   }
diff --git a/modules/tupas_session/tests/src/Kernel/TupasSessionTest.php b/modules/tupas_session/tests/src/Kernel/TupasSessionTest.php
index 543608f..2559a96 100644
--- a/modules/tupas_session/tests/src/Kernel/TupasSessionTest.php
+++ b/modules/tupas_session/tests/src/Kernel/TupasSessionTest.php
@@ -70,8 +70,7 @@ class TupasSessionTest extends KernelTestBase {
   public function testExpirableSessionStart() {
     $timestamp = time();
 
-    $time = $this->getMockBuilder(TimeInterface::class)
-      ->getMock();
+    $time = $this->createMock(TimeInterface::class);
     $time
       ->expects($this->at(0))
       ->method('getRequestTime')
@@ -129,8 +128,7 @@ class TupasSessionTest extends KernelTestBase {
   public function testGarbageCollection() {
     $timestamp = time();
 
-    $time = $this->getMockBuilder(TimeInterface::class)
-      ->getMock();
+    $time = $this->createMock(TimeInterface::class);
     $time
       ->expects($this->at(0))
       ->method('getRequestTime')
diff --git a/modules/tupas_session/tests/src/Unit/TupasSessionManagerTest.php b/modules/tupas_session/tests/src/Unit/TupasSessionManagerTest.php
index 1bfe0ac..2fc4c6d 100644
--- a/modules/tupas_session/tests/src/Unit/TupasSessionManagerTest.php
+++ b/modules/tupas_session/tests/src/Unit/TupasSessionManagerTest.php
@@ -21,14 +21,14 @@ class TupasSessionManagerTest extends UnitTestCase {
   /**
    * The stubbed config factory object.
    *
-   * @var \PHPUnit_Framework_MockObject_MockBuilder
+   * @var \PHPUnit\Framework\MockObject\MockBuilder
    */
   protected $configFactory;
 
   /**
    * The mocked tupas session storage.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var \PHPUnit\Framework\MockObject\MockObject
    */
   protected $storage;
 
@@ -42,14 +42,14 @@ class TupasSessionManagerTest extends UnitTestCase {
   /**
    * The mocked session manager.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var \PHPUnit\Framework\MockObject\MockObject
    */
   protected $sessionManager;
 
   /**
    * The mocked event dispatcher.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var \PHPUnit\Framework\MockObject\MockObject
    */
   protected $eventDispatcher;
 
@@ -78,25 +78,17 @@ class TupasSessionManagerTest extends UnitTestCase {
         'tupas_session_length' => 30,
       ],
     ]);
-    $this->storage = $this->getMockBuilder(TupasSessionStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->storage = $this->createMock(TupasSessionStorageInterface::class);
 
-    $this->sessionManager = $this->getMockBuilder(SessionManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->sessionManager = $this->createMock(SessionManagerInterface::class);
 
-    $this->eventDispatcher = $this->getMockBuilder(EventDispatcherInterface::class)
-      ->getMock();
+    $this->eventDispatcher = $this->createMock(EventDispatcherInterface::class);
 
     $this->session = new SessionData(123456, $this->randomMachineName(), time(), []);
 
-    $dispatched_event = $this->getMockBuilder(SessionData::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dispatched_event = $this->createMock(SessionData::class);
 
-    $this->time = $this->getMockBuilder(TimeInterface::class)
-      ->getMock();
+    $this->time = $this->createMock(TimeInterface::class);
 
     $this->eventDispatcher->expects($this->any())
       ->method('dispatch')
diff --git a/modules/tupas_session/tests/src/Unit/TupasSessionStorageTest.php b/modules/tupas_session/tests/src/Unit/TupasSessionStorageTest.php
index 1a422f2..ee3781a 100644
--- a/modules/tupas_session/tests/src/Unit/TupasSessionStorageTest.php
+++ b/modules/tupas_session/tests/src/Unit/TupasSessionStorageTest.php
@@ -19,14 +19,14 @@ class TupasSessionStorageTest extends UnitTestCase {
   /**
    * The mocked database connection.
    *
-   * @var \Drupal\Core\Database\Connection|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Database\Connection|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $connection;
 
   /**
    * Mock statement.
    *
-   * @var \Drupal\Core\Database\Statement|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Database\Statement|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $statement;
 
@@ -47,7 +47,7 @@ class TupasSessionStorageTest extends UnitTestCase {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Session\AccountProxyInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $currentUser;
 
@@ -71,19 +71,13 @@ class TupasSessionStorageTest extends UnitTestCase {
   protected function setUp() : void {
     parent::setUp();
 
-    $this->connection = $this->getMockBuilder('Drupal\Core\Database\Connection')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->connection = $this->createMock('Drupal\Core\Database\Connection');
 
     // Create a Mock Statement object.
-    $this->statement = $this->getMockBuilder('Drupal\Core\Database\Driver\sqlite\Statement')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->statement = $this->createMock('Drupal\Core\Database\Driver\sqlite\Statement');
 
     // Create a Mock Select object and set expectations.
-    $this->select = $this->getMockBuilder('Drupal\Core\Database\Query\Select')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->select = $this->createMock('Drupal\Core\Database\Query\Select');
 
     $this->select->expects($this->any())
       ->method('fields')
@@ -104,9 +98,7 @@ class TupasSessionStorageTest extends UnitTestCase {
       ->will($this->returnValue($this->select));
 
     // Create a Mock Delete object and set expectations.
-    $this->delete = $this->getMockBuilder('Drupal\Core\Database\Query\Delete')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->delete = $this->createMock('Drupal\Core\Database\Query\Delete');
 
     $this->delete->expects($this->any())
       ->method('condition')
@@ -120,8 +112,7 @@ class TupasSessionStorageTest extends UnitTestCase {
     $request = Request::createFromGlobals();
     $this->requestStack->push($request);
 
-    $this->currentUser = $this->getMockBuilder('Drupal\Core\Session\AccountProxyInterface')
-      ->getMock();
+    $this->currentUser = $this->createMock('Drupal\Core\Session\AccountProxyInterface');
     $this->currentUser->expects($this->any())
       ->method('id')
       ->willReturn(1);
@@ -140,9 +131,7 @@ class TupasSessionStorageTest extends UnitTestCase {
     $data = [];
     $session = new SessionData(random_int(123456, 234567), $this->randomMachineName(), $expire, $data);
 
-    $merge = $this->getMockBuilder('Drupal\Core\Database\Query\Merge')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $merge = $this->createMock('Drupal\Core\Database\Query\Merge');
 
     $merge->expects($this->any())
       ->method('keys')
diff --git a/modules/tupas_session/tests/src/Unit/TupasTransactionManagerTest.php b/modules/tupas_session/tests/src/Unit/TupasTransactionManagerTest.php
index 0f500a3..270c572 100644
--- a/modules/tupas_session/tests/src/Unit/TupasTransactionManagerTest.php
+++ b/modules/tupas_session/tests/src/Unit/TupasTransactionManagerTest.php
@@ -19,14 +19,14 @@ class TupasTransactionManagerTest extends UnitTestCase {
   /**
    * The mocked tupas session storage.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var \PHPUnit\Framework\MockObject\MockObject
    */
   protected $storage;
 
   /**
    * The mocked session manager.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var \PHPUnit\Framework\MockObject\MockObject
    */
   protected $sessionManager;
 
@@ -40,7 +40,7 @@ class TupasTransactionManagerTest extends UnitTestCase {
   /**
    * Temp store factory.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var \PHPUnit\Framework\MockObject\MockObject
    */
   protected $storageFactory;
 
@@ -50,22 +50,16 @@ class TupasTransactionManagerTest extends UnitTestCase {
   protected function setUp() : void {
     parent::setUp();
 
-    $this->storage = $this->getMockBuilder(PrivateTempStore::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->storage = $this->createMock(PrivateTempStore::class);
 
-    $this->storageFactory = $this->getMockBuilder(PrivateTempStoreFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->storageFactory = $this->createMock(PrivateTempStoreFactory::class);
 
     $this->storageFactory->expects($this->any())
       ->method('get')
       ->with('tupas_session')
       ->willReturn($this->storage);
 
-    $this->sessionManager = $this->getMockBuilder(SessionManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->sessionManager = $this->createMock(SessionManagerInterface::class);
 
     $this->transactionManager = new TupasTransactionManager($this->sessionManager, $this->storageFactory);
   }
diff --git a/tests/src/Unit/TupasBankTest.php b/tests/src/Unit/TupasBankTest.php
index 339e785..22d658b 100644
--- a/tests/src/Unit/TupasBankTest.php
+++ b/tests/src/Unit/TupasBankTest.php
@@ -17,7 +17,7 @@ class TupasBankTest extends UnitTestCase {
   /**
    * The mocked Tupas Bank entity.
    *
-   * @var \Drupal\tupas\Entity\TupasBankInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\tupas\Entity\TupasBankInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $bank;
 
