diff --git a/codesnippetgeshi/codesnippetgeshi.module b/codesnippetgeshi/codesnippetgeshi.module
index 85513f6..c71b608 100755
--- a/codesnippetgeshi/codesnippetgeshi.module
+++ b/codesnippetgeshi/codesnippetgeshi.module
@@ -42,5 +42,5 @@ function codesnippetgeshi_editor_js_settings_alter(array &$settings) {
  */
 function codesnippetgeshi_ckeditor_css_alter(array &$css, Editor $editor) {
   // Add a css file to use inside ckeditor.
-  $css[] = drupal_get_path('module', 'codesnippetgeshi') . '/css/style-ckeditor.css';
+  $css[] = \Drupal::service('extension.list.module')->getPath('codesnippetgeshi') . '/css/style-ckeditor.css';
 }
diff --git a/codesnippetgeshi/src/Plugin/CKEditorPlugin/CodeSnippetGeshiCKEditorButton.php b/codesnippetgeshi/src/Plugin/CKEditorPlugin/CodeSnippetGeshiCKEditorButton.php
index eb58616..d0968af 100755
--- a/codesnippetgeshi/src/Plugin/CKEditorPlugin/CodeSnippetGeshiCKEditorButton.php
+++ b/codesnippetgeshi/src/Plugin/CKEditorPlugin/CodeSnippetGeshiCKEditorButton.php
@@ -23,7 +23,7 @@ class CodeSnippetGeshiCKEditorButton extends CKEditorPluginBase {
     return [
       'CodeSnippet' => [
         'label' => t('Add a button to use codesnippetgeshi plugin.'),
-        'image' => drupal_get_path('module', 'codesnippetgeshi') . '/icons/codesnippet.png',
+        'image' => \Drupal::service('extension.list.module')->getPath('codesnippetgeshi') . '/icons/codesnippet.png',
       ],
     ];
   }
diff --git a/geshifield/tests/src/Functional/GeshiFieldTest.php b/geshifield/tests/src/Functional/GeshiFieldTest.php
index 808b970..12fb773 100644
--- a/geshifield/tests/src/Functional/GeshiFieldTest.php
+++ b/geshifield/tests/src/Functional/GeshiFieldTest.php
@@ -56,7 +56,7 @@ class GeshiFieldTest extends BrowserTestBase {
   /**
    * Code run before each and every test method.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create object with configuration.
@@ -110,8 +110,9 @@ class GeshiFieldTest extends BrowserTestBase {
     foreach ($filters as $filter) {
       $edit['filters[' . $filter . '][status]'] = TRUE;
     }
-    $this->drupalPostForm('admin/config/content/formats/add', $edit, t('Save configuration'));
-    $this->assertRaw(t('Added text format %format.', ['%format' => $edit['name']]), 'New filter created.');
+    $this->drupalGet('admin/config/content/formats/add');
+    $this->submitForm($edit, t('Save configuration'));
+    $this->assertSession()->responseContains(t('Added text format %format.', ['%format' => $edit['name']]));
     $this->drupalGet('admin/config/content/formats');
   }
 
@@ -143,7 +144,8 @@ class GeshiFieldTest extends BrowserTestBase {
       'field_geshi[0][sourcecode]' => $sourcecode,
       'field_geshi[0][language]' => $language,
     ];
-    $this->drupalPostForm('node/add/geshifilter_content_type', $node, 'Save');
+    $this->drupalGet('node/add/geshifilter_content_type');
+    $this->submitForm($node, 'Save');
     $this->drupalGet('node/1');
   }
 
@@ -167,13 +169,14 @@ class GeshiFieldTest extends BrowserTestBase {
     $edit['new_storage_type'] = $type;
     $edit['label'] = $label;
     $edit['field_name'] = $name;
-    $this->drupalPostForm('admin/structure/types/manage/geshifilter_content_type/fields/add-field', $edit, 'Save and continue');
+    $this->drupalGet('admin/structure/types/manage/geshifilter_content_type/fields/add-field');
+    $this->submitForm($edit, 'Save and continue');
 
     // Number of values in field, keep the default, 1.
-    $this->drupalPostForm(NULL, $values, 'Save field settings');
+    $this->submitForm($values, 'Save field settings');
 
     // Settings for this instance of field, keep the default.
-    $this->drupalPostForm(NULL, $instance, 'Save settings');
+    $this->submitForm($instance, 'Save settings');
   }
 
 }
diff --git a/geshifilter.module b/geshifilter.module
index 8ac437e..e9ff109 100644
--- a/geshifilter.module
+++ b/geshifilter.module
@@ -95,7 +95,7 @@ function geshifilter_library_info_alter(&$libraries, $extension) {
     $config = \Drupal::config('geshifilter.settings');
     // Add the language CSS file if CSS classes are used for code styling.
     if ($config->get('css_mode') == GeshiFilter::CSS_CLASSES_AUTOMATIC) {
-      $name = file_create_url(GeshiFilterCss::languageCssPath());
+      $name = \Drupal::service('file_url_generator')->generateAbsoluteString(GeshiFilterCss::languageCssPath());
       $libraries['geshifilter']['css']['component'][$name] = [];
     }
   }
diff --git a/src/GeshiFilter.php b/src/GeshiFilter.php
index 4deb0c9..2ff7998 100644
--- a/src/GeshiFilter.php
+++ b/src/GeshiFilter.php
@@ -167,7 +167,7 @@ class GeshiFilter {
       if ($geshi_library['loaded']) {
         $dirs = [
           $geshi_library['library path'] . '/geshi',
-          drupal_get_path('module', 'geshifilter') . '/geshi-extra',
+          \Drupal::service('extension.list.module')->getPath('geshifilter') . '/geshi-extra',
         ];
         foreach ($dirs as $dir) {
           foreach (\Drupal::service('file_system')->scanDirectory($dir, '/.[pP][hH][pP]$/i') as $filename => $fileinfo) {
diff --git a/src/GeshiFilterCss.php b/src/GeshiFilterCss.php
index 5846502..71d10e8 100644
--- a/src/GeshiFilterCss.php
+++ b/src/GeshiFilterCss.php
@@ -103,7 +103,7 @@ class GeshiFilterCss {
       // Save stylesheet.
       $stylesheet_filename = self::languageCssPath();
 
-      $ret = file_save_data($stylesheet, $stylesheet_filename, FileSystemInterface::EXISTS_REPLACE);
+      $ret = \Drupal::service('file.repository')->writeData($stylesheet, $stylesheet_filename, FileSystemInterface::EXISTS_REPLACE);
       if ($ret) {
         \Drupal::messenger()->addStatus(t('(Re)generated external CSS style sheet %file.', ['%file' => $ret->getFilename()]));
       }
diff --git a/src/Plugin/Filter/GeshiFilterFilter.php b/src/Plugin/Filter/GeshiFilterFilter.php
index 69007ce..dafab72 100644
--- a/src/Plugin/Filter/GeshiFilterFilter.php
+++ b/src/Plugin/Filter/GeshiFilterFilter.php
@@ -317,7 +317,7 @@ class GeshiFilterFilter extends FilterBase {
         '#items' => $items,
         '#type' => 'ul',
       ];
-      $output .= render($render);
+      $output .= \Drupal::service('renderer')->render($render);
 
       // Defaults.
       $output .= '<p>' . $this->t('Defaults:') . '</p>';
@@ -361,7 +361,7 @@ class GeshiFilterFilter extends FilterBase {
         '#items' => $items,
         '#type' => 'ul',
       ];
-      $output .= render($render);
+      $output .= \Drupal::service('renderer')->render($render);
     }
     else {
       // Get the available tags.
diff --git a/tests/src/Functional/GeshiFilterAdministrationTest.php b/tests/src/Functional/GeshiFilterAdministrationTest.php
index e9508a8..254d81e 100644
--- a/tests/src/Functional/GeshiFilterAdministrationTest.php
+++ b/tests/src/Functional/GeshiFilterAdministrationTest.php
@@ -54,7 +54,7 @@ class GeshiFilterAdministrationTest extends BrowserTestBase {
   /**
    * Set up the tests and create the users.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create object with configuration.
@@ -103,16 +103,18 @@ class GeshiFilterAdministrationTest extends BrowserTestBase {
     $form_values = [
       'language[php][tags]' => 'php generictag',
     ];
-    $this->drupalPostForm('admin/config/content/formats/geshifilter/languages/all', $form_values, t('Save configuration'));
-    $this->assertText(t('The language tags should differ between languages and from the generic tags.'), t('Language tags should differ from generic tags (with generic tag options)'));
+    $this->drupalGet('admin/config/content/formats/geshifilter/languages/all');
+    $this->submitForm($form_values, t('Save configuration'));
+    $this->assertSession()->pageTextContains(t('The language tags should differ between languages and from the generic tags.'));
 
     // Language tags should differ between languages.
     $form_values = [
       'language[php][tags]' => 'php languagetag',
       'language[python][tags]' => 'languagetag python',
     ];
-    $this->drupalPostForm('admin/config/content/formats/geshifilter/languages/all', $form_values, t('Save configuration'));
-    $this->assertText(t('The language tags should differ between languages and from the generic tags.'), t('Language tags should differ between languages (with generic tag options)'));
+    $this->drupalGet('admin/config/content/formats/geshifilter/languages/all');
+    $this->submitForm($form_values, t('Save configuration'));
+    $this->assertSession()->pageTextContains(t('The language tags should differ between languages and from the generic tags.'));
 
     // Second round: with format specific tag options.
     // $this->config->set('use_format_specific_options', TRUE);
@@ -163,8 +165,9 @@ class GeshiFilterAdministrationTest extends BrowserTestBase {
     foreach ($filters as $filter) {
       $edit['filters[' . $filter . '][status]'] = TRUE;
     }
-    $this->drupalPostForm('admin/config/content/formats/add', $edit, t('Save configuration'));
-    $this->assertRaw(t('Added text format %format.', ['%format' => $edit['name']]), 'New filter created.');
+    $this->drupalGet('admin/config/content/formats/add');
+    $this->submitForm($edit, t('Save configuration'));
+    $this->assertSession()->responseContains(t('Added text format %format.', ['%format' => $edit['name']]));
     $this->drupalGet('admin/config/content/formats');
   }
 
@@ -175,10 +178,11 @@ class GeshiFilterAdministrationTest extends BrowserTestBase {
     $edit = [];
     $edit['language[xml][enabled]'] = TRUE;
     $edit['language[xml][tags]'] = "<xml>";
-    $this->drupalPostForm('admin/config/content/formats/geshifilter/languages/all', $edit, t('Save configuration'));
     $this->drupalGet('admin/config/content/formats/geshifilter/languages/all');
-    $this->assertFieldChecked('edit-language-xml-enabled', 'The language is enabled.');
-    $this->assertRaw('&lt;xml&gt;', 'The tag is defined.');
+    $this->submitForm($edit, t('Save configuration'));
+    $this->drupalGet('admin/config/content/formats/geshifilter/languages/all');
+    $this->assertSession()->checkboxChecked('edit-language-xml-enabled', 'The language is enabled.');
+    $this->assertSession()->responseContains('&lt;xml&gt;');
   }
 
 }
diff --git a/tests/src/Functional/GeshiFilterCssTest.php b/tests/src/Functional/GeshiFilterCssTest.php
index 6e719e5..2a19e6b 100644
--- a/tests/src/Functional/GeshiFilterCssTest.php
+++ b/tests/src/Functional/GeshiFilterCssTest.php
@@ -55,7 +55,7 @@ class GeshiFilterCssTest extends BrowserTestBase {
   /**
    * Set up the tests and create the users.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create object with configuration.
@@ -92,7 +92,7 @@ class GeshiFilterCssTest extends BrowserTestBase {
   public function testCss() {
     // Test if we can generate the css.
     $this->drupalGet('admin/config/content/formats/geshifilter/generate_css');
-    $this->assertRaw('GeSHi Dynamically Generated Stylesheet', 'Test for geshifilter generate css');
+    $this->assertSession()->responseContains('GeSHi Dynamically Generated Stylesheet');
   }
 
   /**
@@ -117,15 +117,16 @@ class GeshiFilterCssTest extends BrowserTestBase {
     $form_values = [
       'css_mode' => 1,
     ];
-    $this->drupalPostForm('admin/config/content/formats/geshifilter', $form_values, t('Save configuration'));
+    $this->drupalGet('admin/config/content/formats/geshifilter');
+    $this->submitForm($form_values, t('Save configuration'));
 
     // Create the node and read it.
     $this->drupalCreateNode($node);
     $this->drupalGet('node/1');
 
     // Test if we have only geshifilter.css.
-    $this->assertRaw('/assets/css/geshifilter.css', 'The CSS file /assets/css/geshifilter.css is present.');
-    $this->assertNoRaw('/geshi/geshifilter-languages.css', 'The CSS file /geshi/geshifilter-languages.css is present.');
+    $this->assertSession()->responseContains('/assets/css/geshifilter.css');
+    $this->assertSession()->responseNotContains('/geshi/geshifilter-languages.css');
   }
 
   /**
@@ -150,15 +151,16 @@ class GeshiFilterCssTest extends BrowserTestBase {
     $form_values = [
       'css_mode' => 2,
     ];
-    $this->drupalPostForm('admin/config/content/formats/geshifilter', $form_values, t('Save configuration'));
+    $this->drupalGet('admin/config/content/formats/geshifilter');
+    $this->submitForm($form_values, t('Save configuration'));
 
     // Create the node and read it.
     $this->drupalCreateNode($node);
     $this->drupalGet('node/1');
 
     // Test if we have both css.
-    $this->assertRaw('/assets/css/geshifilter.css', 'The CSS file /assets/css/geshifilter.css is present.');
-    $this->assertRaw('/geshi/geshifilter-languages.css', 'The CSS file /geshi/geshifilter-languages.css is present.');
+    $this->assertSession()->responseContains('/assets/css/geshifilter.css');
+    $this->assertSession()->responseContains('/geshi/geshifilter-languages.css');
   }
 
   /**
@@ -182,15 +184,16 @@ class GeshiFilterCssTest extends BrowserTestBase {
     $form_values = [
       'css_mode' => 3,
     ];
-    $this->drupalPostForm('admin/config/content/formats/geshifilter', $form_values, t('Save configuration'));
+    $this->drupalGet('admin/config/content/formats/geshifilter');
+    $this->submitForm($form_values, t('Save configuration'));
 
     // Create the node and read it.
     $this->drupalCreateNode($node);
     $this->drupalGet('node/1');
 
     // Test if we have both css.
-    $this->assertNoRaw('/assets/css/geshifilter.css', 'The CSS file /assets/css/geshifilter.css is present.');
-    $this->assertNoRaw('/geshi/geshifilter-languages.css', 'The CSS file /geshi/geshifilter-languages.css is present.');
+    $this->assertSession()->responseNotContains('/assets/css/geshifilter.css');
+    $this->assertSession()->responseNotContains('/geshi/geshifilter-languages.css');
   }
 
   /**
@@ -209,8 +212,9 @@ class GeshiFilterCssTest extends BrowserTestBase {
     foreach ($filters as $filter) {
       $edit['filters[' . $filter . '][status]'] = TRUE;
     }
-    $this->drupalPostForm('admin/config/content/formats/add', $edit, t('Save configuration'));
-    $this->assertRaw(t('Added text format %format.', ['%format' => $edit['name']]), 'New filter created.');
+    $this->drupalGet('admin/config/content/formats/add');
+    $this->submitForm($edit, t('Save configuration'));
+    $this->assertSession()->responseContains(t('Added text format %format.', ['%format' => $edit['name']]));
     $this->drupalGet('admin/config/content/formats');
   }
 
diff --git a/tests/src/Functional/GeshiFilterTest.php b/tests/src/Functional/GeshiFilterTest.php
index e526e60..ffde936 100644
--- a/tests/src/Functional/GeshiFilterTest.php
+++ b/tests/src/Functional/GeshiFilterTest.php
@@ -66,7 +66,7 @@ class GeshiFilterTest extends BrowserTestBase {
   /**
    * Code run before each and every test method.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Restore node to default value.
@@ -132,8 +132,9 @@ class GeshiFilterTest extends BrowserTestBase {
     foreach ($filters as $filter) {
       $edit['filters[' . $filter . '][status]'] = TRUE;
     }
-    $this->drupalPostForm('admin/config/content/formats/add', $edit, t('Save configuration'));
-    $this->assertRaw(t('Added text format %format.', ['%format' => $edit['name']]), 'New filter created.');
+    $this->drupalGet('admin/config/content/formats/add');
+    $this->submitForm($edit, t('Save configuration'));
+    $this->assertSession()->responseContains(t('Added text format %format.', ['%format' => $edit['name']]));
     $this->drupalGet('admin/config/content/formats');
   }
 
@@ -179,10 +180,10 @@ class GeshiFilterTest extends BrowserTestBase {
         $source_code = GeshiFilterProcess::geshiProcess($source_code, $lang, $line_numbering, $linenumbers_start, $inline_mode);
       }
       if ($invert) {
-        $this->assertNoRaw($source_code, $description);
+        $this->assertSession()->responseNotContains($source_code);
       }
       else {
-        $this->assertRaw($source_code, $description);
+        $this->assertSession()->responseContains($source_code);
       }
     }
   }
@@ -552,7 +553,7 @@ class GeshiFilterTest extends BrowserTestBase {
     $this->drupalCreateNode($node);
     $this->drupalGet('node/1');
     // The same string must be on page, not double encoded.
-    $this->assertRaw('&quot;&lt;b&gt;Hi&lt;/b&gt;&quot;', 'The code is not double encoded.');
+    $this->assertSession()->responseContains('&quot;&lt;b&gt;Hi&lt;/b&gt;&quot;');
   }
 
 }
