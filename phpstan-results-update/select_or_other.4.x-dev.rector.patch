diff --git a/tests/src/Functional/TestBase.php b/tests/src/Functional/TestBase.php
index 071d78c..1b3d1bd 100644
--- a/tests/src/Functional/TestBase.php
+++ b/tests/src/Functional/TestBase.php
@@ -36,7 +36,7 @@ abstract class TestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
   }
diff --git a/tests/src/Unit/ReferenceWidgetTest.php b/tests/src/Unit/ReferenceWidgetTest.php
index 25f57c5..f829cd4 100644
--- a/tests/src/Unit/ReferenceWidgetTest.php
+++ b/tests/src/Unit/ReferenceWidgetTest.php
@@ -84,9 +84,7 @@ class ReferenceWidgetTest extends UnitTestBase {
   public function testGetOptions() {
     $entity_id = 1;
     $entity_label = 'Label';
-    $entity_mock = $this->getMockBuilder('\Drupal\Core\Entity\EntityBase')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_mock = $this->createMock('\Drupal\Core\Entity\EntityBase');
     $entity_mock->expects($this->exactly(1))
       ->method('id')
       ->willReturn($entity_id);
@@ -206,9 +204,7 @@ class ReferenceWidgetTest extends UnitTestBase {
    * Tests if the widget correctly determines if it is applicable.
    */
   public function testIsApplicable() {
-    $entity_reference_selection = $this->getMockBuilder('Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_reference_selection = $this->createMock('Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManager');
     $entity_reference_selection->expects($this->exactly(4))
       ->method('getInstance')
       ->willReturnOnConsecutiveCalls(
@@ -242,9 +238,7 @@ class ReferenceWidgetTest extends UnitTestBase {
   public function testPrepareSelectedOptions() {
     $entity_id = 1;
     $entity_label = 'Label';
-    $entity_mock = $this->getMockBuilder('\Drupal\Core\Entity\EntityBase')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_mock = $this->createMock('\Drupal\Core\Entity\EntityBase');
     $entity_mock->expects($this->any())
       ->method('id')
       ->willReturn($entity_id);
diff --git a/tests/src/Unit/UnitTestBase.php b/tests/src/Unit/UnitTestBase.php
index 2965774..58c0e74 100644
--- a/tests/src/Unit/UnitTestBase.php
+++ b/tests/src/Unit/UnitTestBase.php
@@ -41,7 +41,7 @@ abstract class UnitTestBase extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->prepareContainer();
     $this->addMockServicesToContainer();
@@ -55,10 +55,7 @@ abstract class UnitTestBase extends UnitTestCase {
     $container_class = 'Drupal\Core\DependencyInjection\Container';
     $methods = get_class_methods($container_class);
     /** @var \Symfony\Component\DependencyInjection\ContainerInterface $container */
-    $this->containerMock = $container = $this->getMockBuilder($container_class)
-      ->disableOriginalConstructor()
-      ->onlyMethods($methods)
-      ->getMock();
+    $this->containerMock = $container = $this->createMock($container_class);
     \Drupal::setContainer($container);
 
     $this->containerMock->method('get')->willReturnCallback([
@@ -121,10 +118,7 @@ abstract class UnitTestBase extends UnitTestCase {
       ->onlyMethods($methods)
       ->disableOriginalConstructor()
       ->getMockForAbstractClass();
-    $mock = $this->getMockBuilder($this->getTestedClassName())
-      ->onlyMethods($methods)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mock = $this->createMock($this->getTestedClassName());
     $mocks = [$parent, $mock];
 
     $reflected_field_definition = new \ReflectionProperty('Drupal\select_or_other\Plugin\Field\FieldWidget\WidgetBase', 'fieldDefinition');
