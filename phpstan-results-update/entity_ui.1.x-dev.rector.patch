diff --git a/entity_ui.info.yml b/entity_ui.info.yml
index 91dbb32..79d941f 100644
--- a/entity_ui.info.yml
+++ b/entity_ui.info.yml
@@ -1,6 +1,6 @@
 name: 'Entity UI Builder'
 type: module
 description: 'Allows creation of UIs for entities.'
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
 dependencies:
   - drupal:field_ui
diff --git a/entity_ui.module b/entity_ui.module
index 6de99e3..dbdb4f0 100644
--- a/entity_ui.module
+++ b/entity_ui.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\entity_ui\Routing\TabRouteProvider;
+use Drupal\entity_ui\EntityHandler\BundleEntityCollection;
+use Drupal\entity_ui\EntityHandler\FieldUIWithoutBundleEntityProxy;
 /**
  * @file
  * Provides an admin UI for building tabs on content entities.
@@ -16,7 +19,7 @@ function entity_ui_entity_type_build(array &$entity_types) {
     // we have to do it the sloppy way for now.
     $providers = $entity_type->getRouteProviderClasses() ?: [];
     if (empty($providers['entity_ui'])) {
-      $providers['entity_ui'] = Drupal\entity_ui\Routing\TabRouteProvider::class;
+      $providers['entity_ui'] = TabRouteProvider::class;
       $entity_type->setHandlerClass('route_provider', $providers);
     }
 
@@ -43,7 +46,7 @@ function entity_ui_entity_type_build(array &$entity_types) {
         // our handler can't do anything, but this causes problems in tests and
         // if we are enabled at the same time as entity type modules.
         // See https://www.drupal.org/node/2896669.
-        $entity_type->setHandlerClass('entity_ui_admin', \Drupal\entity_ui\EntityHandler\BundleEntityCollection::class);
+        $entity_type->setHandlerClass('entity_ui_admin', BundleEntityCollection::class);
 
         // Done with this entity type.
         continue;
@@ -71,7 +74,7 @@ function entity_ui_entity_type_build(array &$entity_types) {
     $field_ui_base_route_name = $entity_type->get('field_ui_base_route');
 
     if ($field_ui_base_route_name) {
-      $entity_type->setHandlerClass('entity_ui_admin', \Drupal\entity_ui\EntityHandler\FieldUIWithoutBundleEntityProxy::class);
+      $entity_type->setHandlerClass('entity_ui_admin', FieldUIWithoutBundleEntityProxy::class);
 
       // Done with this entity type.
       continue;
diff --git a/src/Entity/EntityTab.php b/src/Entity/EntityTab.php
index ca1b04f..9f39967 100644
--- a/src/Entity/EntityTab.php
+++ b/src/Entity/EntityTab.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_ui\Entity;
 
+use Drupal\entity_ui\Plugin\EntityTabLazyPluginCollection;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityInterface;
@@ -245,7 +246,7 @@ class EntityTab extends ConfigEntityBase implements EntityTabInterface {
    */
   protected function getContentPluginCollection() {
     if (!$this->contentPluginCollection) {
-      $this->contentPluginCollection = new \Drupal\entity_ui\Plugin\EntityTabLazyPluginCollection(
+      $this->contentPluginCollection = new EntityTabLazyPluginCollection(
         \Drupal::service('plugin.manager.entity_ui_tab_content'),
         $this->content_plugin,
         $this->content_config,
diff --git a/src/EntityHandler/FieldUIWithoutBundleEntityProxy.php b/src/EntityHandler/FieldUIWithoutBundleEntityProxy.php
index 2fa8d51..3b6459e 100644
--- a/src/EntityHandler/FieldUIWithoutBundleEntityProxy.php
+++ b/src/EntityHandler/FieldUIWithoutBundleEntityProxy.php
@@ -134,11 +134,11 @@ class FieldUIWithoutBundleEntityProxy implements EntityHandlerInterface {
       // hook_entity_bundle_info(). We detect this by the presence of a 'bundle'
       // parameter at the end of the field UI route path, which Field UI module
       // expects when the bundles are not config entities.
-      $handler_class = \Drupal\entity_ui\EntityHandler\PlainBundlesEntityUIAdmin::class;
+      $handler_class = PlainBundlesEntityUIAdmin::class;
     }
     else {
       // The entity type has only a single bundle.
-      $handler_class = \Drupal\entity_ui\EntityHandler\BasicFieldUI::class;
+      $handler_class = BasicFieldUI::class;
     }
 
     $this->realHandler = $this->entityTypeManager->createHandlerInstance($handler_class, $this->entityType);
diff --git a/tests/src/Functional/AdminUITest.php b/tests/src/Functional/AdminUITest.php
index 0149bf1..76ea44c 100644
--- a/tests/src/Functional/AdminUITest.php
+++ b/tests/src/Functional/AdminUITest.php
@@ -26,7 +26,7 @@ class AdminUITest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create an Article node type.
@@ -56,7 +56,7 @@ class AdminUITest extends BrowserTestBase {
 
     // Check the collection page has the expected elements.
     // Check the node type collection tab is shown.
-    $this->assertLinkByHref('admin/structure/types');
+    $this->assertSession()->linkByHrefExists('admin/structure/types');
 
     // Check the built-in tabs on nodes are shown.
     $this->assertSession()->pageTextContains(t('View'));
@@ -64,7 +64,7 @@ class AdminUITest extends BrowserTestBase {
     $this->assertSession()->pageTextContains(t('Delete'));
 
     $this->assertSession()->pageTextContains(t('Add entity tab'));
-    $this->assertLinkByHref('admin/structure/entity_ui/entity_tab/add/node');
+    $this->assertSession()->linkByHrefExists('admin/structure/entity_ui/entity_tab/add/node');
 
     // Create a new entity tab on nodes.
     $this->clickLink(t('Add entity tab'));
@@ -81,11 +81,11 @@ class AdminUITest extends BrowserTestBase {
       'content_plugin' => 'entity_view',
       'content_config[view_mode]' => 'default',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
 
     // Check the new tab is now shown in the collection listing.
     $this->assertSession()->pageTextContains($edit['label']);
-    $this->assertLinkByHref("admin/structure/entity_ui/entity_tab/node.{$edit['id']}/edit");
+    $this->assertSession()->linkByHrefExists("admin/structure/entity_ui/entity_tab/node.{$edit['id']}/edit");
 
 
     // todo:
@@ -109,14 +109,14 @@ class AdminUITest extends BrowserTestBase {
 
     // Check the collection page has the expected elements.
     // Check the user accounts setings tab is shown.
-    $this->assertLinkByHref('admin/config/people/accounts');
+    $this->assertSession()->linkByHrefExists('admin/config/people/accounts');
 
     // Check the built-in tabs on users are shown.
     $this->assertSession()->pageTextContains(t('View'));
     $this->assertSession()->pageTextContains(t('Edit'));
 
     $this->assertSession()->pageTextContains(t('Add entity tab'));
-    $this->assertLinkByHref('admin/structure/entity_ui/entity_tab/add/user');
+    $this->assertSession()->linkByHrefExists('admin/structure/entity_ui/entity_tab/add/user');
 
     // Create a new entity tab on users.
     $this->clickLink(t('Add entity tab'));
@@ -132,11 +132,11 @@ class AdminUITest extends BrowserTestBase {
       'content_plugin' => 'entity_view',
       'content_config[view_mode]' => 'default',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
 
     // Check the new tab is now shown in the collection listing.
     $this->assertSession()->pageTextContains($edit['label']);
-    $this->assertLinkByHref("admin/structure/entity_ui/entity_tab/user.{$edit['id']}/edit");
+    $this->assertSession()->linkByHrefExists("admin/structure/entity_ui/entity_tab/user.{$edit['id']}/edit");
 
 
     // todo:
diff --git a/tests/src/Functional/OwnerAssignTabTest.php b/tests/src/Functional/OwnerAssignTabTest.php
index 272e6a7..42dae12 100644
--- a/tests/src/Functional/OwnerAssignTabTest.php
+++ b/tests/src/Functional/OwnerAssignTabTest.php
@@ -26,7 +26,7 @@ class OwnerAssignTabTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->nodeStorage = $this->container->get('entity_type.manager')
@@ -94,7 +94,7 @@ class OwnerAssignTabTest extends BrowserTestBase {
     $edit = [
       'owner_uid' => $new_owner->getUsername() . ' (' . $new_owner->id() . ')',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Change owner');
+    $this->submitForm($edit, 'Change owner');
 
     // Reload the node.
     $node = $this->nodeStorage->load($node->id());
diff --git a/tests/src/Kernel/ActionDerivativesTest.php b/tests/src/Kernel/ActionDerivativesTest.php
index ee49b75..d315929 100644
--- a/tests/src/Kernel/ActionDerivativesTest.php
+++ b/tests/src/Kernel/ActionDerivativesTest.php
@@ -27,7 +27,7 @@ class ActionDerivativesTest extends KernelTestBase {
     'entity_ui',
   ];
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['node']);
   }
diff --git a/tests/src/Kernel/AdminUIHandlerTest.php b/tests/src/Kernel/AdminUIHandlerTest.php
index 672addd..951b661 100644
--- a/tests/src/Kernel/AdminUIHandlerTest.php
+++ b/tests/src/Kernel/AdminUIHandlerTest.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\Tests\field_ui\Kernel;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\entity_ui\EntityHandler\BundleEntityCollection;
+use Drupal\entity_ui\EntityHandler\FieldUIWithoutBundleEntityProxy;
+use Symfony\Component\Routing\Route;
+use Symfony\Component\Routing\RouteCollection;
+use Drupal\entity_ui\EntityHandler\BasicFieldUI;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -11,6 +17,7 @@ use Drupal\KernelTests\KernelTestBase;
  */
 class AdminUIHandlerTest extends KernelTestBase {
 
+  use ProphecyTrait;
   /**
    * Modules to enable.
    *
@@ -28,7 +35,7 @@ class AdminUIHandlerTest extends KernelTestBase {
     'entity_ui',
   ];
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('node');
     $this->installEntitySchema('user');
@@ -44,9 +51,9 @@ class AdminUIHandlerTest extends KernelTestBase {
 
     $expected_handlers = [
       // Entity type ID => expected handler class.
-      'node' => \Drupal\entity_ui\EntityHandler\BundleEntityCollection::class,
-      'user' => \Drupal\entity_ui\EntityHandler\FieldUIWithoutBundleEntityProxy::class,
-      'taxonomy_term' => \Drupal\entity_ui\EntityHandler\BundleEntityCollection::class,
+      'node' => BundleEntityCollection::class,
+      'user' => FieldUIWithoutBundleEntityProxy::class,
+      'taxonomy_term' => BundleEntityCollection::class,
     ];
 
     foreach ($expected_handlers as $entity_type_id => $handler_class) {
@@ -60,10 +67,10 @@ class AdminUIHandlerTest extends KernelTestBase {
     $user_entity_type = $entity_type_manager->getDefinition('user');
     $user_handler = $entity_type_manager->getHandler('user', 'entity_ui_admin');
 
-    $route_prophecy = $this->prophesize(\Symfony\Component\Routing\Route ::CLASS);
+    $route_prophecy = $this->prophesize(Route ::CLASS);
     $route_prophecy->getPath()->willReturn('/admin/config/people/accounts');
 
-    $route_collection_prophecy = $this->prophesize(\Symfony\Component\Routing\RouteCollection::CLASS);
+    $route_collection_prophecy = $this->prophesize(RouteCollection::CLASS);
     $route_collection_prophecy->get($user_entity_type->get('field_ui_base_route'))
       ->willReturn($route_prophecy->reveal());
 
@@ -77,7 +84,7 @@ class AdminUIHandlerTest extends KernelTestBase {
     $property->setAccessible(TRUE);
     $real_user_handler = $property->getValue($user_handler);
 
-    $this->assertEquals(\Drupal\entity_ui\EntityHandler\BasicFieldUI::class, get_class($real_user_handler));
+    $this->assertEquals(BasicFieldUI::class, get_class($real_user_handler));
   }
 
 }
