modules/contrib/lupus_ce_renderer/lupus_ce_renderer.api.php
modules/contrib/lupus_ce_renderer/src/Cache/CustomElementsJsonResponse.php
modules/contrib/lupus_ce_renderer/src/Controller/CustomElementsController.php
modules/contrib/lupus_ce_renderer/src/CustomElementsRenderer.php
modules/contrib/lupus_ce_renderer/src/EventSubscriber/CustomElementsControllerSubscriber.php
modules/contrib/lupus_ce_renderer/src/EventSubscriber/CustomElementsDynamicResponseSubscriber.php
modules/contrib/lupus_ce_renderer/src/EventSubscriber/CustomElementsFormatSubscriber.php
modules/contrib/lupus_ce_renderer/src/EventSubscriber/CustomElementsHttpExceptionSubscriber.php
modules/contrib/lupus_ce_renderer/src/EventSubscriber/CustomElementsRedirectResponseSubscriber.php
modules/contrib/lupus_ce_renderer/src/EventSubscriber/CustomElementsRouteSubscriber.php
modules/contrib/lupus_ce_renderer/src/EventSubscriber/CustomElementsViewSubscriber.php
modules/contrib/lupus_ce_renderer/src/LupusCeRendererServiceProvider.php
modules/contrib/lupus_ce_renderer/src/Routing/CustomElementsRequestFormatRouteFilter.php
modules/contrib/lupus_ce_renderer/tests/src/Functional/LupusCeRendererAccessTest.php
modules/contrib/lupus_ce_renderer/tests/src/Functional/LupusCeRendererApiResponseTest.php
modules/contrib/lupus_ce_renderer/tests/src/Functional/LupusCeRendererContentTest.php

5 files with changes
====================

1) modules/contrib/lupus_ce_renderer/src/EventSubscriber/CustomElementsViewSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lupus_ce_renderer\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ViewEvent;
 use drunomics\ServiceUtils\Core\Routing\CurrentRouteMatchTrait;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Cache\CacheableResponseInterface;
@@ @@
 use Drupal\lupus_ce_renderer\CustomElementsRenderer;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Sets a response given a custom element.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ViewEvent $event
    *   The event to process.
    */
-  public function onKernelView(GetResponseForControllerResultEvent $event) {
+  public function onKernelView(ViewEvent $event) {
     $request = $event->getRequest();
     // We need to render error pages (404,403) via custom_elements as requested
     // or configured. If there is 404/403 error and custom_elements is the
@@ @@
   /**
    * Handles http 4xx responses gracefully.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ViewEvent $event
    *   The event to process.
    *
    * @see \Drupal\lupus_ce_renderer\EventSubscriber\CustomElementsHttpExceptionSubscriber
    */
-  protected function handleClientErrorResponses(GetResponseForControllerResultEvent $event) {
+  protected function handleClientErrorResponses(ViewEvent $event) {
     // Gracefully handle 401, 403 and 404 routes with a simple #markup key.
     $result = $event->getControllerResult();
     if (!$result instanceof CustomElement) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


2) modules/contrib/lupus_ce_renderer/src/EventSubscriber/CustomElementsRedirectResponseSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lupus_ce_renderer\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\lupus_ce_renderer\Cache\CustomElementsJsonResponse;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;

@@ @@
   /**
    * Handles the response.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $result = $event->getResponse();
     $request = $event->getRequest();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


3) modules/contrib/lupus_ce_renderer/src/EventSubscriber/CustomElementsFormatSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lupus_ce_renderer\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\Core\Site\Settings;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\Exception\NotAcceptableHttpException;
 use Symfony\Component\HttpKernel\KernelEvents;

@@ @@
   /**
    * Responds to kernel responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event.
    */
-  public function onKernelResponse(FilterResponseEvent $event) {
+  public function onKernelResponse(ResponseEvent $event) {
     $response = $event->getResponse();

     // Dis-allow html format when custom elements rendering is enabled. Other
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


4) modules/contrib/lupus_ce_renderer/src/EventSubscriber/CustomElementsDynamicResponseSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lupus_ce_renderer\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\lupus_ce_renderer\Cache\CustomElementsJsonResponse;
 use Drupal\lupus_ce_renderer\CustomElementsRenderer;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Stores a response in case of a Dynamic Page Cache miss, if cacheable.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $response = $event->getResponse();
     // Do not add dynamic data to redirects.
     if ($response instanceof CustomElementsJsonResponse && !$response->isRedirect()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


5) modules/contrib/lupus_ce_renderer/src/EventSubscriber/CustomElementsControllerSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lupus_ce_renderer\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ControllerEvent;
 use drunomics\ServiceUtils\Core\Entity\EntityTypeManagerTrait;
 use drunomics\ServiceUtils\Symfony\HttpFoundation\RequestStackTrait;
 use Drupal\Core\Controller\ControllerResolverInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterControllerEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Take over entity view routes.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterControllerEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ControllerEvent $event
    *   The event.
    */
-  public function onKernelController(FilterControllerEvent $event) {
+  public function onKernelController(ControllerEvent $event) {
     if ($event->getRequest()->getRequestFormat() != 'custom_elements') {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


 [OK] 5 files have been changed by Rector                                       

