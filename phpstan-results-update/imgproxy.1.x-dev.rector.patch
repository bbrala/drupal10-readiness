diff --git a/imgproxy.info.yml b/imgproxy.info.yml
index fcf56b0..c2f17bf 100644
--- a/imgproxy.info.yml
+++ b/imgproxy.info.yml
@@ -1,8 +1,7 @@
 name: Imgproxy support
 description: DarthSim/imgproxy implementation.
 type: module
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 configure: imgproxy.admin.settings
 dependencies:
   - drupal:image
diff --git a/imgproxy.module b/imgproxy.module
index 1a7f6c3..6974f2b 100644
--- a/imgproxy.module
+++ b/imgproxy.module
@@ -44,8 +44,6 @@ function template_preprocess_imgproxy(&$variables) {
     $variables['image']['#title'] = $variables['title'];
   }
   if (!empty($variables['uri'])) {
-    $variables['attributes']['src'] = file_url_transform_relative(
-      file_create_url($variables['uri'])
-    );
+    $variables['attributes']['src'] = \Drupal::service('file_url_generator')->generateString($variables['uri']);
   }
 }
diff --git a/src/ImgProxy.php b/src/ImgProxy.php
index 8b582ea..6b6e468 100644
--- a/src/ImgProxy.php
+++ b/src/ImgProxy.php
@@ -81,7 +81,7 @@ class ImgProxy {
     }
     $url = $this->config->get('local')
       ? str_replace(['public:', 'private:'], 'local:/', $url)
-      : file_create_url($url);
+      : \Drupal::service('file_url_generator')->generateAbsoluteString($url);
     $instance = (new ImgProxyUrl())
       ->setImageUrl($url)
       ->setEndpoint($this->config->get('endpoint'))
diff --git a/tests/src/Unit/UrlTests.php b/tests/src/Unit/UrlTests.php
index cb25b36..6c18877 100644
--- a/tests/src/Unit/UrlTests.php
+++ b/tests/src/Unit/UrlTests.php
@@ -87,7 +87,7 @@ class UrlTests extends UnitTestCase {
       ->setKey($key)
       ->setSalt($salt)
       ->setImageUrl($imgUrl);
-    self::assertContains('/' . $signature . '/', $url->toString());
+    self::assertStringContainsString('/' . $signature . '/', $url->toString());
   }
 
   /**
@@ -168,20 +168,20 @@ class UrlTests extends UnitTestCase {
 
     self::assertStringStartsWith($endpoint, $result);
     self::assertStringEndsWith($encodedUrl, $result);
-    self::assertContains('/w:100/', $result);
-    self::assertContains('/h:200/', $result);
-    self::assertContains('/el:1/', $result);
-    self::assertContains('/ex:1/', $result);
-    self::assertContains('/bg:aabbcc/', $result);
-    self::assertContains('/bl:0.5/', $result);
-    self::assertContains('/sh:0.4/', $result);
-    self::assertContains('/rt:crop/', $result);
-    self::assertContains('/g:ce/', $result);
-    self::assertContains('/dpr:2/', $result);
-    self::assertContains('/f:jpg/', $result);
-    self::assertContains('/q:25/', $result);
-    self::assertContains('/wm:0.5:nowe:12:13:0.1/', $result);
-    self::assertContains('/cb:hbz/', $result);
+    self::assertStringContainsString('/w:100/', $result);
+    self::assertStringContainsString('/h:200/', $result);
+    self::assertStringContainsString('/el:1/', $result);
+    self::assertStringContainsString('/ex:1/', $result);
+    self::assertStringContainsString('/bg:aabbcc/', $result);
+    self::assertStringContainsString('/bl:0.5/', $result);
+    self::assertStringContainsString('/sh:0.4/', $result);
+    self::assertStringContainsString('/rt:crop/', $result);
+    self::assertStringContainsString('/g:ce/', $result);
+    self::assertStringContainsString('/dpr:2/', $result);
+    self::assertStringContainsString('/f:jpg/', $result);
+    self::assertStringContainsString('/q:25/', $result);
+    self::assertStringContainsString('/wm:0.5:nowe:12:13:0.1/', $result);
+    self::assertStringContainsString('/cb:hbz/', $result);
 
   }
 
