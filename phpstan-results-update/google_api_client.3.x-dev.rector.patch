diff --git a/google_api_client.api.php b/google_api_client.api.php
index 06905ba..883f38f 100644
--- a/google_api_client.api.php
+++ b/google_api_client.api.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Access\AccessResult;
 /**
  * @file
  * Hooks provided by the Google Api Client module.
@@ -92,18 +93,18 @@ function hook_google_api_client_authenticate_account_access($google_api_client_i
     // If we want that only users with specific user id are allowed.
     $allowed_users = [1, 5, 10];
     if (in_array($user_account->id(), $allowed_users)) {
-      return \Drupal\Core\Access\AccessResult::allowed();
+      return AccessResult::allowed();
     }
     // If we want some role (say Google User role) to have access.
     if (in_array('google_user', $user_account->getRoles())) {
-      return \Drupal\Core\Access\AccessResult::allowed();
+      return AccessResult::allowed();
     }
     // Nothing passed access check, restrict authentication.
-    return \Drupal\Core\Access\AccessResult::forbidden();
+    return AccessResult::forbidden();
   }
   else {
     // We don't want to check access of this account.
-    return \Drupal\Core\Access\AccessResult::neutral();
+    return AccessResult::neutral();
   }
 }
 
diff --git a/google_api_client.install b/google_api_client.install
index c83ce12..e26ebf4 100755
--- a/google_api_client.install
+++ b/google_api_client.install
@@ -1,4 +1,8 @@
 <?php
+use Drupal\Core\Link;
+use Drupal\Core\Url;
+use Drupal\Component\Serialization\Json;
+use Drupal\Core\Field\BaseFieldDefinition;
 /**
  * @file
  * Install and uninstall functions for the Google api client module.
@@ -13,8 +17,8 @@ function google_api_client_requirements($phase) {
   }
 
   $library_exists = google_api_client_load_library();
-  $url = \Drupal\Core\Link::fromTextAndUrl(t('here'), \Drupal\Core\Url::fromUri('https://github.com/google/google-api-php-client/releases'))->toString();
-  $documentation = \Drupal\Core\Link::fromTextAndUrl(t('google api php client installation'), \Drupal\Core\Url::fromUri('https://github.com/google/google-api-php-client#installation'))->toString();
+  $url = Link::fromTextAndUrl(t('here'), Url::fromUri('https://github.com/google/google-api-php-client/releases'))->toString();
+  $documentation = Link::fromTextAndUrl(t('google api php client installation'), Url::fromUri('https://github.com/google/google-api-php-client#installation'))->toString();
   $version = isset($library_exists['versions']) && !empty($library_exists['versions']) ? array_keys($library_exists['versions']) : array('2.4.0');
   return [
     'google-api-php-client' => [
@@ -34,7 +38,7 @@ function google_api_client_update_8001() {
   $entity_type = \Drupal::entityTypeManager()->getDefinition('google_api_client');
   \Drupal::entityDefinitionUpdateManager()->installEntityType($entity_type);
   // Entity table is ready let's copy previous record as first account.
-  $settings = \Drupal\Component\Serialization\Json::decode(\Drupal::config('google_api_client.settings')->get('credentials'));
+  $settings = Json::decode(\Drupal::config('google_api_client.settings')->get('credentials'));
   $scopes = \Drupal::config('google_api_client.settings')->get('scopes');
   $scopes = array_map('trim', explode(PHP_EOL, $scopes));
 
@@ -53,7 +57,7 @@ function google_api_client_update_8001() {
   }
   $services = array_unique($services);
   $token = unserialize(\Drupal::config('google_api_client.tokens')->get('google_access_token'));
-  $token = \Drupal\Component\Serialization\Json::encode($token);
+  $token = Json::encode($token);
   $account = [
     'name' => 'Google Api Client',
     'client_id' => $settings['web']['client_id'],
@@ -91,7 +95,7 @@ function google_api_client_update_8803() {
   $definition_manager = \Drupal::entityDefinitionUpdateManager();
 
   // Create a new field definition.
-  $new_uuid_field = \Drupal\Core\Field\BaseFieldDefinition::create('uuid')
+  $new_uuid_field = BaseFieldDefinition::create('uuid')
     ->setLabel(t('UUID'))
     ->setDescription(t('The Google Api Client UUID.'))
     ->setReadOnly(TRUE);
diff --git a/google_api_client.module b/google_api_client.module
index 4b511f2..d2ae0e3 100755
--- a/google_api_client.module
+++ b/google_api_client.module
@@ -1,4 +1,9 @@
 <?php
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Url;
+use Drupal\Core\Field\BaseFieldDefinition;
+use Drupal\Component\ClassFinder\ClassFinder;
 /**
  * @file
  * Google Api Client for drupal.
@@ -8,10 +13,10 @@
 /**
  * Implements hook_help().
  */
-function google_api_client_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
+function google_api_client_help($route_name, RouteMatchInterface $route_match) {
   switch ($route_name) {
     case 'help.page.google_api_client':
-      $path = $GLOBALS['base_url'] . '/' . drupal_get_path('module', 'google_api_client');
+      $path = $GLOBALS['base_url'] . '/' . \Drupal::service('extension.list.module')->getPath('google_api_client');
       $output = '<h3>' . t('About') . '</h3>';
       $output .= '<p>' . t("This module allows you to authenticate with google and use this authentication to carry other api requests. This module will help you to manage accounts, authenticate with google (i.e. get access token) and use this authentication to carry api requests in other modules.") . '</p>';
       $output .= '<h3>' . t('Uses') . '</h3>';
@@ -24,13 +29,13 @@ function google_api_client_help($route_name, \Drupal\Core\Routing\RouteMatchInte
 /**
  * Implements hook_entity_operation().
  */
-function google_api_client_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
+function google_api_client_entity_operation(EntityInterface $entity) {
   if ($entity->getEntityTypeId() == 'google_api_client') {
     $operations = [];
     $is_authenticated = $entity->getAuthenticated();
     $operations['authenticate_revoke'] = [
       'title' => $is_authenticated ? t('Revoke') : t('Authenticate'),
-      'url' => $is_authenticated ? \Drupal\Core\Url::fromRoute('entity.google_api_client.revoke_form', ['google_api_client' => $entity->getId()]) : \Drupal\Core\Url::fromRoute('google_api_client.callback', ['id' => $entity->getId()]),
+      'url' => $is_authenticated ? Url::fromRoute('entity.google_api_client.revoke_form', ['google_api_client' => $entity->getId()]) : Url::fromRoute('google_api_client.callback', ['id' => $entity->getId()]),
       'weight' => 50,
     ];
     return $operations;
@@ -62,7 +67,7 @@ function google_api_client_google_services_scopes($services, $by_pass_cache = FA
   }
 }
 
-function google_api_client_google_scopes_names(Drupal\Core\Field\BaseFieldDefinition $field, $entity, $cacheable) {
+function google_api_client_google_scopes_names(BaseFieldDefinition $field, $entity, $cacheable) {
   $services = _google_api_client_google_services_names();
   $services = array_keys($services);
   return google_api_client_google_services_scopes($services);
@@ -153,7 +158,7 @@ function _google_api_client_read_scope_info() {
  */
 function google_api_client_callback_url() {
   $is_https = \Drupal::request()->isSecure();
-  return \Drupal\Core\Url::fromRoute('google_api_client.callback', [], ['https' => $is_https, 'absolute' => TRUE])->toString();
+  return Url::fromRoute('google_api_client.callback', [], ['https' => $is_https, 'absolute' => TRUE])->toString();
 }
 
 /**
@@ -167,7 +172,7 @@ function google_api_client_callback_url() {
  */
 function google_api_client_load_library($return_path = FALSE) {
   $library = \Drupal::service('library.discovery')->getLibraryByName('google_api_client', 'google-api-php-client');
-  $finder = new \Drupal\Component\ClassFinder\ClassFinder();
+  $finder = new ClassFinder();
   $file = $finder->findFile('Google_Client');
   if ($library) {
     if (class_exists('Google_Client') && strpos($file, 'vendor') !== FALSE) {
