diff --git a/anonymous_redirect.info.yml b/anonymous_redirect.info.yml
index 9087cb3..e0a5c53 100644
--- a/anonymous_redirect.info.yml
+++ b/anonymous_redirect.info.yml
@@ -1,6 +1,6 @@
 name: Anonymous Redirect
 type: module
 description: Redirects anonymous users to a pre-defined route or another domain
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
 package: anonymous_redirect
 configure: anonymous_redirect.settings
diff --git a/src/EventSubscriber/AnonymousRedirectSubscriber.php b/src/EventSubscriber/AnonymousRedirectSubscriber.php
index b49413c..92deafb 100644
--- a/src/EventSubscriber/AnonymousRedirectSubscriber.php
+++ b/src/EventSubscriber/AnonymousRedirectSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\anonymous_redirect\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Routing\TrustedRedirectResponse;
 use Drupal\Core\Url;
 use Drupal\Component\Utility\UrlHelper;
@@ -10,7 +11,6 @@ use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\Core\Path\PathMatcher;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 
@@ -66,10 +66,10 @@ class AnonymousRedirectSubscriber extends ControllerBase implements EventSubscri
   /**
    * Redirects anonymous users to the /user route.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The response event.
    */
-  public function redirectAnonymous(GetResponseEvent $event) {
+  public function redirectAnonymous(RequestEvent $event) {
     // Initialize the minimum amount of values since this runs on every request.
     $config = $this->config('anonymous_redirect.settings');
     $redirectEnabled = $config->get('enable_redirect');
diff --git a/src/Tests/AnonymousRedirectConfigTest.php b/src/Tests/AnonymousRedirectConfigTest.php
index ed5b015..6ddde4a 100644
--- a/src/Tests/AnonymousRedirectConfigTest.php
+++ b/src/Tests/AnonymousRedirectConfigTest.php
@@ -19,7 +19,7 @@ class AnonymousRedirectConfigTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // @todo Change the autogenerated stub.
     parent::setUp();
 
@@ -40,35 +40,36 @@ class AnonymousRedirectConfigTest extends BrowserTestBase {
     // Test that config form exists at specified route.
     $this->drupalLogin($this->user);
     $this->drupalGet('/admin/config/system/anonymous-redirect');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $config = $this->config('anonymous_redirect.settings');
 
     // Check that enable_anonymous_redirect field exists with an appropriate
     // value.
-    $this->assertFieldByName('enable_anonymous_redirect', $config->get('enable_redirect'), 'The Enable Redirect field was found with the correct value');
+    $this->assertSession()->fieldValueEquals('enable_anonymous_redirect', $config->get('enable_redirect'));
 
     // Check that redirect_base_url field exist with an appropriate value.
-    $this->assertFieldByName('redirect_base_url', $config->get('redirect_url'), 'The redirect_base_url field exists and holds an appropriate value');
+    $this->assertSession()->fieldValueEquals('redirect_base_url', $config->get('redirect_url'));
 
     // Check that redirect_url_overrides field exists with an appropriate value.
-    $this->assertFieldByName('redirect_url_overrides', $config->get('redirect_url_overrides'), 'The redirect_url_overrides field exists and holds an appropriate value');
+    $this->assertSession()->fieldValueEquals('redirect_url_overrides', $config->get('redirect_url_overrides'));
+    $this->drupalGet('/admin/config/system/anonymous-redirect');
 
     // Check that the form saves correctly with appropriate values.
-    $this->drupalPostForm('/admin/config/system/anonymous-redirect', [
+    $this->submitForm([
       'enable_anonymous_redirect' => TRUE,
       'redirect_base_url' => '<front>',
       'redirect_url_overrides' => '/test',
     ], $this->t('Save configuration'));
-    $this->assertText('The configuration options have been saved.', 'The form was saved correctly.');
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
 
     $this->drupalGet('/admin/config/system/anonymous-redirect');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Check to see if the values were set correctly.
-    $this->assertFieldByName('enable_anonymous_redirect', TRUE, 'Value for the  enable_redirect field was set successfully');
-    $this->assertFieldByName('redirect_base_url', '<front>', 'Value for the redirect_base_url field was set successfully');
-    $this->assertFieldByName('redirect_url_overrides', '/test', 'Value for the redirect_url_overrides field was set successfully');
+    $this->assertSession()->fieldValueEquals('enable_anonymous_redirect', TRUE);
+    $this->assertSession()->fieldValueEquals('redirect_base_url', '<front>');
+    $this->assertSession()->fieldValueEquals('redirect_url_overrides', '/test');
   }
 
 }
