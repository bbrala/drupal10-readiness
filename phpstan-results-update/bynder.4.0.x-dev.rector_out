modules/contrib/bynder/modules/bynder_select2/bynder_select2.install
modules/contrib/bynder/bynder.api.php
modules/contrib/bynder/modules/bynder_usage/src/Exception/UnableToAddUsageException.php
modules/contrib/bynder/modules/lightning/bynder_lightning.install
modules/contrib/bynder/src/Exception/TagSearchException.php
modules/contrib/bynder/tests/modules/bynder_test_module/src/BynderApiTest.php
modules/contrib/bynder/modules/bynder_select2/src/Element/BynderSelect2SimpleElement.php
modules/contrib/bynder/bynder.install
modules/contrib/bynder/modules/bynder_usage/src/Exception/UnableToDeleteUsageException.php
modules/contrib/bynder/src/BynderApi.php
modules/contrib/bynder/src/Exception/UnableToConnectException.php
modules/contrib/bynder/src/Exception/UploadFailedException.php
modules/contrib/bynder/src/Exception/UploadPermissionException.php
modules/contrib/bynder/src/Form/BynderConfigurationForm.php
modules/contrib/bynder/modules/bynder_select2/src/Plugin/Field/FieldWidget/BynderSelect2SimpleWidget.php
modules/contrib/bynder/tests/modules/bynder_test_module/src/BynderTestModuleServiceProvider.php
modules/contrib/bynder/tests/src/Functional/BynderCreateMediaTest.php
modules/contrib/bynder/modules/bynder_sns/bynder_sns.module
modules/contrib/bynder/bynder.module
modules/contrib/bynder/modules/bynder_sns/src/EventSubscriber/NotificationSubscriber.php
modules/contrib/bynder/modules/bynder_usage/src/EventSubscriber/UsageEventSubscriber.php
modules/contrib/bynder/src/BynderApiInterface.php
modules/contrib/bynder/src/BynderService.php
modules/contrib/bynder/src/Plugin/Action/UpdateMetadataAction.php
modules/contrib/bynder/src/Plugin/EntityBrowser/Widget/BynderSearch.php
modules/contrib/bynder/tests/src/Functional/BynderFormatterTest.php
modules/contrib/bynder/src/BynderServiceInterface.php
modules/contrib/bynder/src/Controller/BynderMediaUsage.php
modules/contrib/bynder/src/Plugin/EntityBrowser/Widget/BynderUpload.php
modules/contrib/bynder/src/Controller/BynderOAuthLogin.php
modules/contrib/bynder/tests/src/Functional/BynderWidgetsTest.php
modules/contrib/bynder/src/Controller/BynderTagSearchService.php
modules/contrib/bynder/tests/src/Functional/MediaEntityTypePluginTest.php
modules/contrib/bynder/src/EventSubscriber/BynderConfigHashGenerator.php
modules/contrib/bynder/src/Exception/BrandNotSetException.php
modules/contrib/bynder/src/Exception/BundleNotBynderException.php
modules/contrib/bynder/src/Exception/BundleNotExistException.php
modules/contrib/bynder/src/Exception/BynderException.php
modules/contrib/bynder/tests/src/Functional/UsageTest.php
modules/contrib/bynder/src/Plugin/EntityBrowser/Widget/BynderWidgetBase.php
modules/contrib/bynder/src/Plugin/Field/FieldFormatter/BynderDocumentFormatter.php
modules/contrib/bynder/tests/src/FunctionalJavascript/BynderUploadWidgetTest.php
modules/contrib/bynder/src/Plugin/Field/FieldFormatter/BynderFormatter.php
modules/contrib/bynder/tests/src/FunctionalJavascript/BynderUsageTest.php
modules/contrib/bynder/src/Plugin/Field/FieldFormatter/BynderFormatterBase.php
modules/contrib/bynder/tests/src/FunctionalJavascript/ConfigurationFormTest.php
modules/contrib/bynder/src/Plugin/Field/FieldFormatter/BynderMetadataFormatter.php
modules/contrib/bynder/src/Plugin/Field/FieldFormatter/BynderVideoFormatter.php
modules/contrib/bynder/tests/src/Unit/BynderApiUnitTest.php
modules/contrib/bynder/src/Plugin/Field/FieldType/BynderMetadataItem.php
modules/contrib/bynder/src/Plugin/Field/FieldWidget/BynderMetadataWidget.php
modules/contrib/bynder/src/Plugin/QueueWorker/BynderTestImageRemove.php
modules/contrib/bynder/src/Plugin/media/Source/Bynder.php

12 files with changes
=====================

1) modules/contrib/bynder/bynder.module:262

    ---------- begin diff ----------
@@ @@

     // Add the bynder usage CSS so that the bynder logo is positioned over the
     // asset on hover and is sized appropriately.
-    $css[] = drupal_get_path('module', 'bynder') . '/css/bynder.formatter.css';
+    $css[] = \Drupal::service('extension.list.module')->getPath('bynder') . '/css/bynder.formatter.css';
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


2) modules/contrib/bynder/bynder.install:43

    ---------- begin diff ----------
@@ @@
  * Implements hook_install().
  */
 function bynder_install() {
-  $source = drupal_get_path('module', 'bynder') . '/images/icons';
+  $source = \Drupal::service('extension.list.module')->getPath('bynder') . '/images/icons';
   $destination = \Drupal::config('media.settings')->get('icon_base_uri');
   \Drupal::service('file_system')->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
   $files = \Drupal::service('file_system')->scanDirectory($source, '/.*\.(svg|png|jpg|jpeg|gif)$/');
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


3) modules/contrib/bynder/bynder.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Form\FormStateInterface;
+use Drupal\bynder\Plugin\EntityBrowser\Widget\BynderSearch;
 /**
  * @file
  * Hooks related to Bynder.
@@ @@
  * @see hook_form_entity_browser_ENTITY_BROWSER_ID_form_alter()
  * @see \Drupal\bynder\BynderApi::getMediaList()
  */
-function hook_bynder_search_query_alter(array &$query, \Drupal\Core\Form\FormStateInterface $form_state, \Drupal\bynder\Plugin\EntityBrowser\Widget\BynderSearch $widget) {
+function hook_bynder_search_query_alter(array &$query, FormStateInterface $form_state, BynderSearch $widget) {
   if ($property_value = $form_state->getValue(['filters', 'my_property'])) {
     $query['property_my_property'] = $property_value;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


4) modules/contrib/bynder/tests/src/Unit/BynderApiUnitTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bynder\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\UnitTestCase;
 use League\OAuth2\Client\Token\AccessToken;
 use Symfony\Component\HttpFoundation\Session\SessionInterface;
@@ @@
  */
 class BynderApiUnitTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @covers ::hasAccessToken
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/bynder/tests/src/FunctionalJavascript/ConfigurationFormTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalLogin($this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/bynder/tests/src/FunctionalJavascript/BynderUsageTest.php:46

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->createContentType(['type' => 'page']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/bynder/tests/src/FunctionalJavascript/BynderUploadWidgetTest.php:9

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bynder\FunctionalJavascript;

+use Drupal\entity_browser\Entity\EntityBrowser;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'media_entity_ct', 'name' => 'Media Type']);
@@ @@
     $this->getSession()->getPage()->selectFieldOption('Brand', 'Brand Name');
     $this->getSession()->getPage()->pressButton('Save');

-    $entity_browser = \Drupal\entity_browser\Entity\EntityBrowser::load('bynder');
+    $entity_browser = EntityBrowser::load('bynder');
     $this->assertTrue($entity_browser->getWidgets()->count() == 1);
     $widget_uuid = $entity_browser->getWidgets()->getInstanceIds();
     $widget_uuid = reset($widget_uuid);
@@ @@
     $this->getSession()->getPage()->pressButton('Save');
     $this->assertSession()->pageTextContains('The entity browser Bynder has been updated.');

-    $entity_browser = \Drupal\entity_browser\Entity\EntityBrowser::load('bynder');
+    $entity_browser = EntityBrowser::load('bynder');
     $this->assertTrue($entity_browser->getWidgets()->count() == 1);
     $widget_uuid = $entity_browser->getWidgets()->getInstanceIds();
     $widget_uuid = reset($widget_uuid);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/bynder/tests/src/Functional/UsageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bynder\Functional;

+use Drupal\Core\Url;
 use Drupal\bynder\BynderApi;
 use Drupal\bynder_test_module\BynderApiTest;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->createMediaType('image', ['id' => 'generic']);
@@ @@
     // Create alias.
     $edit['path[0][value]'] = '/node/' . $host_node->id();
     $edit['alias[0][value]'] = '/' . $this->randomMachineName(8);
-    $this->drupalPostForm('admin/config/search/path/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/search/path/add');
+    $this->submitForm($edit, t('Save'));

     $this->drupalGet('node/' . $host_node->id() . '/edit');
     $this->getSession()->getPage()->fillField('field_reference_node[0][target_id]', '');
@@ @@
     $this->assertEquals($bynder_media->field_media_uuid->value, $state['asset_id']);
     $this->assertTrue(is_string($state['timestamp']));

-    $url = \Drupal\Core\Url::fromRoute(
+    $url = Url::fromRoute(
       'entity.node.canonical',
       ['node' => $host_node->id()]
     )->setAbsolute(TRUE)->toString();
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/bynder/tests/src/Functional/MediaEntityTypePluginTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->drupalCreateUser([
       'administer media types',
@@ @@
       'limited' => 0,
       'thumbnails' => [
         'mini' => 'https://d2csxpduxe849s.cloudfront.net/media/2AF9718D.jpg',
-        'webimage' => file_create_url($image->uri),
+        'webimage' => \Drupal::service('file_url_generator')->generateAbsoluteString($image->uri),
         'thul' => 'https://d2csxpduxe849s.cloudfront.net/media/9F22A5BA1D47.jpg',
       ],
       'views' => 6,
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/bynder/tests/src/Functional/BynderWidgetsTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $account = $this->drupalCreateUser(['access bynder entity browser pages', 'dropzone upload files']);
     $this->drupalLogin($account);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/bynder/tests/src/Functional/BynderFormatterTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalLogin($this->drupalCreateUser([
@@ @@
       'fields[field_entity_reference][type]' => 'bynder',
       'fields[field_entity_reference][region]' => 'content',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->assertSession()->pageTextContains('Derivative: webimage');
     $this->getSession()->getPage()->pressButton('field_entity_reference_settings_edit');
@@ @@
     $this->assertSession()->optionExists('fields[field_entity_reference][settings_edit_form][settings][title_field]', 'field_string_long');

     $this->drupalGet('admin/structure/types/manage/page/form-display');
-    $this->drupalPostForm(NULL, ['fields[field_entity_reference][region]' => 'content'], t('Save'));
+    $this->submitForm(['fields[field_entity_reference][region]' => 'content'], t('Save'));

     $this->drupalGet('admin/structure/media/manage/media_type/display');
     $this->assertSession()->optionExists('fields[field_entity_reference][type]', 'bynder');
@@ @@
       'id' => '123',
       'name' => 'Bynder name',
       'thumbnails' => [
-        'mini' => file_create_url($images[0]->uri),
-        'webimage' => file_create_url($images[1]->uri),
-        'thul' => file_create_url($images[2]->uri),
+        'mini' => \Drupal::service('file_url_generator')->generateAbsoluteString($images[0]->uri),
+        'webimage' => \Drupal::service('file_url_generator')->generateAbsoluteString($images[1]->uri),
+        'thul' => \Drupal::service('file_url_generator')->generateAbsoluteString($images[2]->uri),
       ],
       'propertyOptions' => [
         0 => "6EF40BA8-E011-4758-80C12BDCA70DDF4F",
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/bynder/tests/src/Functional/BynderCreateMediaTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalCreateContentType(['type' => 'media_entity_ct', 'name' => 'Media Type']);

@@ @@
           ],
           'keyword' => 'london',
           'thumbnails' => [
-            'mini' => file_create_url($image_1->uri),
-            'webimage' => file_create_url($image_1->uri),
-            'thul' => file_create_url($image_1->uri),
+            'mini' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_1->uri),
+            'webimage' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_1->uri),
+            'thul' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_1->uri),
           ],
         ],
         [
@@ @@
           ],
           'keyword' => 'paris',
           'thumbnails' => [
-            'mini' => file_create_url($image_2->uri),
-            'webimage' => file_create_url($image_2->uri),
-            'thul' => file_create_url($image_2->uri),
+            'mini' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_2->uri),
+            'webimage' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_2->uri),
+            'thul' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_2->uri),
           ],
         ],
         [
@@ @@
             0 => 'pdf',
           ],
           'thumbnails' => [
-            'mini' => file_create_url($image_2->uri),
-            'webimage' => file_create_url($image_2->uri),
-            'thul' => file_create_url($image_2->uri),
+            'mini' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_2->uri),
+            'webimage' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_2->uri),
+            'thul' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_2->uri),
           ],
           'original' => 'https://example.getbynder.com/m/important.pdf',
         ],
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 12 files have been changed by Rector                                      

