modules/contrib/private_taxonomy/private_taxonomy.install
modules/contrib/private_taxonomy/src/Type/PrivateTaxonomyTermReferenceItem.php
modules/contrib/private_taxonomy/private_taxonomy.module
modules/contrib/private_taxonomy/tests/src/Functional/PrivateTaxonomyPermissionsTest.php
modules/contrib/private_taxonomy/private_taxonomy.tokens.inc
modules/contrib/private_taxonomy/private_taxonomy.views.inc
modules/contrib/private_taxonomy/src/Access/PrivateTaxonomyView.php
modules/contrib/private_taxonomy/src/Controller/TermAutocompleteController.php
modules/contrib/private_taxonomy/tests/src/Functional/PrivateTaxonomySettingsTest.php
modules/contrib/private_taxonomy/src/Form/PrivateTaxonomySettingsForm.php
modules/contrib/private_taxonomy/src/Plugin/Field/FieldFormatter/PrivateLinkFormatter.php
modules/contrib/private_taxonomy/tests/src/Functional/PrivateTaxonomyTestBase.php
modules/contrib/private_taxonomy/src/Plugin/Field/FieldFormatter/PrivatePlainFormatter.php
modules/contrib/private_taxonomy/src/Plugin/Field/FieldFormatter/PrivateTaxonomyFormatterBase.php
modules/contrib/private_taxonomy/tests/src/Functional/PrivateTaxonomyTokensTest.php
modules/contrib/private_taxonomy/src/Plugin/Field/FieldType/PrivateTaxonomyTermReferenceItem.php
modules/contrib/private_taxonomy/tests/src/Functional/PrivateTaxonomyUnitTest.php
modules/contrib/private_taxonomy/src/Plugin/Field/FieldWidget/PrivateTaxonomyAutocompleteWidget.php
modules/contrib/private_taxonomy/tests/src/Functional/PrivateTaxonomyViewsTest.php
modules/contrib/private_taxonomy/src/PrivateTaxonomyPermissions.php
modules/contrib/private_taxonomy/src/Routing/RouteSubscriber.php

6 files with changes
====================

1) modules/contrib/private_taxonomy/tests/src/Functional/PrivateTaxonomyViewsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\private_taxonomy\Functional;

+use Drupal\Core\StringTranslation\StringTranslationTrait;
 /**
  * Test Private Taxonomy functionality.
  *
@@ @@
  */
 class PrivateTaxonomyViewsTest extends PrivateTaxonomyTestBase {

-  use \Drupal\Core\StringTranslation\StringTranslationTrait;
+  use StringTranslationTrait;

   /**
    * Config schema.
@@ @@
       'page[title]' => 'Private',
       'page[path]' => 'private-view',
     ];
-    $this->drupalPostForm('admin/structure/views/add', $edit,
-      $this->t('Save and edit'));
+    $this->drupalGet('admin/structure/views/add');
+    $this->submitForm($edit, $this->t('Save and edit'));
     $this->drupalGet('private-view');
     // All terms should be visible.
-    $this->assertText($admin_term->getName(), $this->t('Admin term visisble'));
-    $this->assertText($private_term->getName(), $this->t('User term visisble'));
+    $this->assertSession()->pageTextContains($admin_term->getName());
+    $this->assertSession()->pageTextContains($private_term->getName());

     // Add current user filter.
     $this->drupalGet('admin/structure/views/view/private');
@@ @@
     $edit = [
       'name[user_term.uid]' => TRUE,
     ];
-    $this->drupalPostForm($url, $edit, $this->t('Add and configure filter criteria'));
+    $this->drupalGet($url);
+    $this->submitForm($edit, $this->t('Add and configure filter criteria'));
     $url = 'admin/structure/views/nojs/handler/private/page_1/filter/uid';
     $edit = [
       'options[value]' => TRUE,
     ];
-    $this->drupalPostForm($url, $edit, $this->t('Apply'));
-    $this->assertText('Private Taxonomy term: Current user (= True)',
-      $this->t('Filter set'));
+    $this->drupalGet($url);
+    $this->submitForm($edit, $this->t('Apply'));
+    $this->assertSession()->pageTextContains('Private Taxonomy term: Current user (= True)');
     $url = 'admin/structure/views/view/private/edit/page_1';
-    $this->drupalPostForm($url, [], $this->t('Save'));
+    $this->drupalGet($url);
+    $this->submitForm([], $this->t('Save'));
     $this->drupalGet('private-view');
     // Just the owner's terms should be visible.
-    $this->assertText($admin_term->getName(), $this->t('Admin term visisble'));
-    $this->assertNoText($private_term->getName(),
-      $this->t('User term is not visisble'));
+    $this->assertSession()->pageTextContains($admin_term->getName());
+    $this->assertSession()->pageTextNotContains($private_term->getName());

     $this->drupalLogin($user);
     $this->drupalGet('private-view');
-    $this->assertNoText($admin_term->getName(),
-      $this->t('Admin term is not visisble'));
-    $this->assertText($private_term->getName(), $this->t('User term visisble'));
+    $this->assertSession()->pageTextNotContains($admin_term->getName());
+    $this->assertSession()->pageTextContains($private_term->getName());
   }

   /**
@@ @@
       'label' => 'Private',
       'field_name' => 'private',
     ];
-    $this->drupalPostForm($url, $edit, $this->t('Save and continue'));
+    $this->drupalGet($url);
+    $this->submitForm($edit, $this->t('Save and continue'));
     $url = 'admin/structure/types/manage/page/fields/node.page.field_private/storage';
-    $this->drupalPostForm($url, [], $this->t('Save field settings'));
+    $this->drupalGet($url);
+    $this->submitForm([], $this->t('Save field settings'));

     $url = 'admin/structure/views/nojs/add-handler/content/page_1/relationship';
     $this->drupalGet($url);
-    $this->assertText('A bridge to the term that is referenced via field_private', $this->t('Relationship found'));
+    $this->assertSession()->pageTextContains('A bridge to the term that is referenced via field_private');
     $edit = [
       'name[node__field_private.field_private_target_id]' => TRUE,
     ];
-    $this->drupalPostForm($url, $edit, $this->t('Add and configure relationships'));
+    $this->drupalGet($url);
+    $this->submitForm($edit, $this->t('Add and configure relationships'));
     $url = 'admin/structure/views/nojs/handler/content/page_1/relationship/field_private_target_id';
-    $this->drupalPostForm($url, [], $this->t('Apply'));
-    $this->assertText('field_private');
+    $this->drupalGet($url);
+    $this->submitForm([], $this->t('Apply'));
+    $this->assertSession()->pageTextContains('field_private');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/private_taxonomy/tests/src/Functional/PrivateTaxonomyUnitTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\private_taxonomy\Functional;

+use Drupal\Core\StringTranslation\StringTranslationTrait;
 /**
  * Test Private Taxonomy functionality.
  *
@@ @@
  */
 class PrivateTaxonomyUnitTest extends PrivateTaxonomyTestBase {

-  use \Drupal\Core\StringTranslation\StringTranslationTrait;
+  use StringTranslationTrait;

   /**
    * Unit tests for the admin user.
@@ @@
     $public_vocabulary = $this->createVocabulary($private);

     // Test to make sure the vocabulary is private.
-    $this->assertEqual(TRUE,
-      private_taxonomy_is_vocabulary_private($private_vocabulary->id()));
-    $this->assertEqual(FALSE,
-      private_taxonomy_is_vocabulary_private($public_vocabulary->id()));
+    $this->assertEquals(TRUE, private_taxonomy_is_vocabulary_private($private_vocabulary->id()));
+    $this->assertEquals(FALSE, private_taxonomy_is_vocabulary_private($public_vocabulary->id()));
     $vocabularies = private_taxonomy_get_private_vocabularies();
-    $this->assertEqual(count($vocabularies), 1);
-    $this->assertEqual($vocabularies[0]->label(), $private_vocabulary->label());
+    $this->assertEquals(count($vocabularies), 1);
+    $this->assertEquals($vocabularies[0]->label(), $private_vocabulary->label());

     // Test to see if both vocabularies are visible.
     $this->drupalGet('admin/structure/taxonomy');
-    $this->assertText($public_vocabulary->label(),
-      $this->t('Public vocabulary visible.'));
-    $this->assertText($private_vocabulary->label(),
-      $this->t('Private vocabulary visible.'));
+    $this->assertSession()->pageTextContains($public_vocabulary->label());
+    $this->assertSession()->pageTextContains($private_vocabulary->label());

     // Add terms to vocabularies.
     $this->drupalLogin($user);
@@ @@
     $public_term = $this->createTerm($public_vocabulary);

     // Test to make sure the term is in a private vocabulary.
-    $this->assertEqual(TRUE,
-      private_taxonomy_is_term_private($private_term->id()));
-    $this->assertEqual(FALSE,
-      private_taxonomy_is_term_private($public_term->id()));
+    $this->assertEquals(TRUE, private_taxonomy_is_term_private($private_term->id()));
+    $this->assertEquals(FALSE, private_taxonomy_is_term_private($public_term->id()));

     // Test to retrieve the owner of a term.
     $uid = private_taxonomy_term_get_user($admin_term->id());
-    $this->assertEqual($admin_user->id(), $uid);
+    $this->assertEquals($admin_user->id(), $uid);
     $uid = private_taxonomy_term_get_user($private_term->id());
-    $this->assertEqual($user->id(), $uid);
+    $this->assertEquals($user->id(), $uid);
     $uid = private_taxonomy_term_get_user($public_term->id());
-    $this->assertEqual(FALSE, $uid);
+    $this->assertEquals(FALSE, $uid);

     // Test to see what terms are visible.
     $this->drupalGet('admin/structure/taxonomy/manage/' .
       $private_vocabulary->id() . '/overview');
-    $this->assertText($admin_term->getName(), $this->t('Admin private term visible.'));
-    $this->assertText($private_term->getName(),
-      $this->t('User private term visible.'));
+    $this->assertSession()->pageTextContains($admin_term->getName());
+    $this->assertSession()->pageTextContains($private_term->getName());
     $this->drupalGet('admin/structure/taxonomy/manage/' .
       $public_vocabulary->id() . '/overview');
-    $this->assertText($public_term->getName(), $this->t('Public term visible.'));
+    $this->assertSession()->pageTextContains($public_term->getName());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/private_taxonomy/tests/src/Functional/PrivateTaxonomyTokensTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\private_taxonomy\Functional;

+use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
  */
 class PrivateTaxonomyTokensTest extends BrowserTestBase {

-  use \Drupal\Core\StringTranslation\StringTranslationTrait;
+  use StringTranslationTrait;

   /**
    * Default theme.
@@ @@
       'label' => 'Name',
       'id' => 'name',
     ];
-    $this->drupalPostForm('admin/config/search/path/patterns/add', $edit, $this->t('Save'));
+    $this->drupalGet('admin/config/search/path/patterns/add');
+    $this->submitForm($edit, $this->t('Save'));
     $edit = [
       'pattern' => '[term:vocabulary]/[term:term_owner_name]/[term:name]',
     ];
-    $this->drupalPostForm('admin/config/search/path/patterns/name', $edit,
-      $this->t('Save'));
-    $this->assertNoText($this->t('invalid tokens'), 'Token found');
+    $this->drupalGet('admin/config/search/path/patterns/name');
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->pageTextNotContains($this->t('invalid tokens'));
     $edit = [
       'type' => 'canonical_entities:taxonomy_term',
       'label' => 'User ID',
       'id' => 'user_id',
     ];
-    $this->drupalPostForm('admin/config/search/path/patterns/add', $edit, $this->t('Save'));
+    $this->drupalGet('admin/config/search/path/patterns/add');
+    $this->submitForm($edit, $this->t('Save'));
     $edit = [
       'pattern' => '[term:vocabulary]/[term:term_owner_uid]/[term:name]',
     ];
-    $this->drupalPostForm('admin/config/search/path/patterns/user_id', $edit,
-      $this->t('Save'));
-    $this->assertNoText($this->t('invalid tokens'), 'Token found');
+    $this->drupalGet('admin/config/search/path/patterns/user_id');
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->pageTextNotContains($this->t('invalid tokens'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/private_taxonomy/tests/src/Functional/PrivateTaxonomyTestBase.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create Basic page and Article node types.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/private_taxonomy/tests/src/Functional/PrivateTaxonomySettingsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\private_taxonomy\Functional;

+use Drupal\Core\StringTranslation\StringTranslationTrait;
 /**
  * Test Private Taxonomy functionality.
  *
@@ @@
  */
 class PrivateTaxonomySettingsTest extends PrivateTaxonomyTestBase {

-  use \Drupal\Core\StringTranslation\StringTranslationTrait;
+  use StringTranslationTrait;

   /**
    * Modules to enable.
@@ @@
       'cloning_user_name' => $admin_name,
       'enable_new_users' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/people/taxonomy', $edit,
-      $this->t('Save configuration'));
-    $this->assertRaw($admin_name, $this->t('Cloning user name visible'));
-    $this->assertRaw('name="enable_new_users" value="1" checked="checked"',
-      $this->t('New users enabled'));
+    $this->drupalGet('admin/config/people/taxonomy');
+    $this->submitForm($edit, $this->t('Save configuration'));
+    $this->assertSession()->responseContains($admin_name);
+    $this->assertSession()->responseContains('name="enable_new_users" value="1" checked="checked"');

     $private = TRUE;
     $private_vocabulary = $this->createVocabulary($private);
@@ @@
     $private_term = $this->createTerm($private_vocabulary);
     $this->drupalGet('admin/structure/taxonomy/manage/' .
       $private_vocabulary->id() . '/overview');
-    $this->assertText($private_term->getName(),
-      $this->t('Admin private term visible.'));
-    $this->assertText($admin_name, $this->t('Admin private term visible.'));
+    $this->assertSession()->pageTextContains($private_term->getName());
+    $this->assertSession()->pageTextContains($admin_name);
     $edit = [
       'existing_users_cloning' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/people/taxonomy', $edit,
-      $this->t('Save configuration'));
-    $this->assertText('Terms cloned for 2 users', $this->t('Cloning message appears'));
+    $this->drupalGet('admin/config/people/taxonomy');
+    $this->submitForm($edit, $this->t('Save configuration'));
+    $this->assertSession()->pageTextContains('Terms cloned for 2 users');

     $this->drupalGet('admin/structure/taxonomy/manage/' .
       $private_vocabulary->id() . '/overview');
-    $this->assertText('admin', $this->t('Term cloned for admin'));
-    $this->assertText($user->getDisplayName(), $this->t('Term cloned for user'));
+    $this->assertSession()->pageTextContains('admin');
+    $this->assertSession()->pageTextContains($user->getDisplayName());
     $edit = [
       'cloning_user_name' => '',
       'enable_new_users' => FALSE,
     ];
-    $this->drupalPostForm('admin/config/people/taxonomy', $edit,
-      $this->t('Save configuration'));
-    $this->assertText('The configuration options have been saved',
-      $this->t('Remove user name'));
+    $this->drupalGet('admin/config/people/taxonomy');
+    $this->submitForm($edit, $this->t('Save configuration'));
+    $this->assertSession()->pageTextContains('The configuration options have been saved');
   }

   /**
@@ @@
     $edit = [
       'enable_new_users' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/people/taxonomy', $edit,
-      $this->t('Save configuration'));
-    $this->assertText('Missing user name',
-      $this->t('User name required to clone terms'));
+    $this->drupalGet('admin/config/people/taxonomy');
+    $this->submitForm($edit, $this->t('Save configuration'));
+    $this->assertSession()->pageTextContains('Missing user name');
     $edit = [
       'existing_users_cloning' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/people/taxonomy', $edit,
-      $this->t('Save configuration'));
-    $this->assertText('Missing user name',
-      $this->t('User name required to clone terms'));
+    $this->drupalGet('admin/config/people/taxonomy');
+    $this->submitForm($edit, $this->t('Save configuration'));
+    $this->assertSession()->pageTextContains('Missing user name');
   }

   /**
@@ @@
       'cloning_user_name' => $admin_name,
       'enable_new_users' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/people/taxonomy', $edit,
-      $this->t('Save configuration'));
-    $this->assertRaw($admin_name, $this->t('Cloning user name visible'));
-    $this->assertRaw('name="enable_new_users" value="1" checked="checked"',
-      $this->t('New users enabled'));
+    $this->drupalGet('admin/config/people/taxonomy');
+    $this->submitForm($edit, $this->t('Save configuration'));
+    $this->assertSession()->responseContains($admin_name);
+    $this->assertSession()->responseContains('name="enable_new_users" value="1" checked="checked"');

     $private = TRUE;
     $private_vocabulary = $this->createVocabulary($private);
@@ @@
     $private_term2 = $this->createTerm($private_vocabulary);
     $this->drupalGet('admin/structure/taxonomy/manage/' .
       $private_vocabulary->id() . '/overview');
-    $this->assertText($private_term1->getName(),
-      $this->t('Admin private term visible.'));
-    $this->assertText($private_term2->getName(),
-      $this->t('Admin private term visible.'));
+    $this->assertSession()->pageTextContains($private_term1->getName());
+    $this->assertSession()->pageTextContains($private_term2->getName());
     $this->drupalGet('taxonomy/term/' . $private_term2->id() . '/edit');
     $edit = [
       'parent[]' => $private_term1->id(),
     ];
-    $this->drupalPostForm('taxonomy/term/' . $private_term2->id() . '/edit',
-      $edit, $this->t('Save'));
+    $this->drupalGet('taxonomy/term/' . $private_term2->id() . '/edit');
+    $this->submitForm($edit, $this->t('Save'));
     $this->drupalGet('admin/structure/taxonomy/manage/' .
       $private_vocabulary->id() . '/overview');
     $edit = [
       'existing_users_cloning' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/people/taxonomy', $edit,
-      $this->t('Save configuration'));
-    $this->assertText('Terms cloned for 2 users', $this->t('Cloning message appears'));
+    $this->drupalGet('admin/config/people/taxonomy');
+    $this->submitForm($edit, $this->t('Save configuration'));
+    $this->assertSession()->pageTextContains('Terms cloned for 2 users');

     $this->drupalGet('admin/structure/taxonomy/manage/' .
       $private_vocabulary->id() . '/overview');
-    $this->assertRaw('terms[tid:4:0][term][parent]', $this->t('Hierarchy cloned'));
-    $this->assertRaw('terms[tid:6:0][term][parent]', $this->t('Hierarchy cloned'));
+    $this->assertSession()->responseContains('terms[tid:4:0][term][parent]');
+    $this->assertSession()->responseContains('terms[tid:6:0][term][parent]');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/private_taxonomy/tests/src/Functional/PrivateTaxonomyPermissionsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\private_taxonomy\Functional;

+use Drupal\Core\StringTranslation\StringTranslationTrait;
 /**
  * Test Private Taxonomy functionality.
  *
@@ @@
  */
 class PrivateTaxonomyPermissionsTest extends PrivateTaxonomyTestBase {

-  use \Drupal\Core\StringTranslation\StringTranslationTrait;
+  use StringTranslationTrait;

   /**
    * Test for user with 'administer own taxonomy' permission.
@@ @@

     // Test to see what vocabularies are visible.
     $this->drupalGet('admin/structure/taxonomy');
-    $this->assertNoText($public_vocabulary->label(),
-      $this->t('Public vocabulary not visible.'));
-    $this->assertText($private_vocabulary->label(),
-      $this->t('Private vocabulary visible.'));
+    $this->assertSession()->pageTextNotContains($public_vocabulary->label());
+    $this->assertSession()->pageTextContains($private_vocabulary->label());

     // Test to see what terms are visible.
     $this->drupalGet('admin/structure/taxonomy/manage/' .
       $private_vocabulary->id() . '/overview');
-    $this->assertText($private_term->getName(), $this->t('Private term visible.'));
-    $this->assertNoText($admin_term->getName(), $this->t('Admin term not visible.'));
+    $this->assertSession()->pageTextContains($private_term->getName());
+    $this->assertSession()->pageTextNotContains($admin_term->getName());

     // Test to verify what vocabularies we can add terms to.
     $this->drupalGet('admin/structure/taxonomy/manage/' . $private_vocabulary->id() . '/add');
@@ @@

     // Test to see what vocabularies are visible.
     $this->drupalGet('admin/structure/taxonomy');
-    $this->assertNoText($public_vocabulary->label(),
-      $this->t('Public vocabulary not visible.'));
-    $this->assertText($private_vocabulary->label(),
-      $this->t('Private vocabulary visible.'));
+    $this->assertSession()->pageTextNotContains($public_vocabulary->label());
+    $this->assertSession()->pageTextContains($private_vocabulary->label());

     // Test to see what terms are visible.
     $this->drupalGet('admin/structure/taxonomy/manage/' .
       $private_vocabulary->id() . '/overview');
-    $this->assertText($private_term->getName(), $this->t('Private term visible.'));
-    $this->assertText($admin_term->getName(), $this->t('Admin term visible.'));
+    $this->assertSession()->pageTextContains($private_term->getName());
+    $this->assertSession()->pageTextContains($admin_term->getName());

     $this->drupalLogin($admin_user);
     $edit = [
@@ @@
       'label' => 'Private',
       'field_name' => 'private',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/add-field',
-      $edit, $this->t('Save and continue'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/add-field');
+    $this->submitForm($edit, $this->t('Save and continue'));
     $edit = [
       'fields[field_private][type]' => 'options_select',
       'fields[field_private][region]' => 'content',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/form-display',
-      $edit, $this->t('Save'));
+    $this->drupalGet('admin/structure/types/manage/page/form-display');
+    $this->submitForm($edit, $this->t('Save'));
     $edit = [
       'fields[field_private][type]' => 'private_taxonomy_term_reference_link',
       'fields[field_private][region]' => 'content',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/display',
-      $edit, $this->t('Save'));
+    $this->drupalGet('admin/structure/types/manage/page/display');
+    $this->submitForm($edit, $this->t('Save'));
     $edit = [
       'settings[allowed_values][0][vocabulary]' => $private_vocabulary->id(),
       'settings[allowed_values][0][users]' => 'all',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_private/storage', $edit, $this->t('Save field settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_private/storage');
+    $this->submitForm($edit, $this->t('Save field settings'));

     $this->drupalGet('node/add/page');
-    $this->assertText($admin_term->getName(), $this->t('Found term'));
-    $this->assertText($private_term->getName(), $this->t('Found term'));
+    $this->assertSession()->pageTextContains($admin_term->getName());
+    $this->assertSession()->pageTextContains($private_term->getName());

     $edit = [
       'title[0][value]' => $this->randomMachineName(),
       'field_private' => $admin_term->id(),
     ];
-    $this->drupalPostForm('node/add/page', $edit, $this->t('Save'));
+    $this->drupalGet('node/add/page');
+    $this->submitForm($edit, $this->t('Save'));
     // Should find the owner's term and use it.
-    $this->assertRaw('taxonomy/term/' . $admin_term->id(), $this->t('Found term'));
+    $this->assertSession()->responseContains('taxonomy/term/' . $admin_term->id());
     // Check taxonomy index.
     $this->drupalGet('taxonomy/term/' . $admin_term->id());
-    $this->assertRaw($admin_term->getName(), $this->t('Found term'));
+    $this->assertSession()->responseContains($admin_term->getName());
   }

   /**
@@ @@

     // Test to see what vocabularies are visible.
     $this->drupalGet('admin/structure/taxonomy');
-    $this->assertNoText($public_vocabulary->label(),
-      $this->t('Public vocabulary not visible.'));
-    $this->assertText($private_vocabulary->label(),
-      $this->t('Private vocabulary visible.'));
+    $this->assertSession()->pageTextNotContains($public_vocabulary->label());
+    $this->assertSession()->pageTextContains($private_vocabulary->label());

     // Test to see what terms are visible.
     $this->drupalGet('admin/structure/taxonomy/manage/' .
       $private_vocabulary->id() . '/overview');
-    $this->assertText($private_term->getName(), $this->t('Private term visible.'));
-    $this->assertText($admin_term->getName(), $this->t('Admin term visible.'));
+    $this->assertSession()->pageTextContains($private_term->getName());
+    $this->assertSession()->pageTextContains($admin_term->getName());

     $this->drupalLogin($admin_user);
     $edit = [
@@ @@
       'label' => 'Private',
       'field_name' => 'private',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/add-field',
-      $edit, $this->t('Save and continue'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/add-field');
+    $this->submitForm($edit, $this->t('Save and continue'));
     $edit = [
       'fields[field_private][type]' => 'options_select',
       'fields[field_private][region]' => 'content',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/form-display',
-      $edit, $this->t('Save'));
+    $this->drupalGet('admin/structure/types/manage/page/form-display');
+    $this->submitForm($edit, $this->t('Save'));
     $edit = [
       'fields[field_private][type]' => 'private_taxonomy_term_reference_plain',
       'fields[field_private][region]' => 'content',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/display',
-      $edit, $this->t('Save'));
+    $this->drupalGet('admin/structure/types/manage/page/display');
+    $this->submitForm($edit, $this->t('Save'));
     $edit = [
       'settings[allowed_values][0][vocabulary]' => $private_vocabulary->id(),
       'settings[allowed_values][0][users]' => 'owner',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_private/storage', $edit, $this->t('Save field settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_private/storage');
+    $this->submitForm($edit, $this->t('Save field settings'));

     $this->drupalLogin($user);
     $this->drupalGet('node/add/page');
-    $this->assertNoText($admin_term->getName(), $this->t('Term not found'));
-    $this->assertText($private_term->getName(), $this->t('Found term'));
+    $this->assertSession()->pageTextNotContains($admin_term->getName());
+    $this->assertSession()->pageTextContains($private_term->getName());

     $edit = [
       'title[0][value]' => $this->randomMachineName(),
       'field_private' => $private_term->id(),
     ];
-    $this->drupalPostForm('node/add/page', $edit, $this->t('Save'));
+    $this->drupalGet('node/add/page');
+    $this->submitForm($edit, $this->t('Save'));

     // Should find the owner's term and use it.
-    $this->assertText($private_term->getName(), $this->t('Found term'));
+    $this->assertSession()->pageTextContains($private_term->getName());
     // Check taxonomy index.
     $this->drupalGet('taxonomy/term/' . $private_term->id());
-    $this->assertRaw($private_term->getName(), $this->t('Found term'));
+    $this->assertSession()->responseContains($private_term->getName());
   }

   /**
@@ @@

     // Test to see what vocabularies are visible.
     $this->drupalGet('admin/structure/taxonomy');
-    $this->assertNoText($public_vocabulary->label(),
-      $this->t('Public vocabulary not visible.'));
-    $this->assertText($private_vocabulary->label(),
-      $this->t('Private vocabulary visible.'));
+    $this->assertSession()->pageTextNotContains($public_vocabulary->label());
+    $this->assertSession()->pageTextContains($private_vocabulary->label());

     // Test to see what terms are visible.
     $this->drupalGet('admin/structure/taxonomy/manage/' .
       $private_vocabulary->id() . '/overview');
-    $this->assertText($private_term->getName(), $this->t('Private term visible.'));
-    $this->assertText($admin_term->getName(), $this->t('Admin term visible.'));
+    $this->assertSession()->pageTextContains($private_term->getName());
+    $this->assertSession()->pageTextContains($admin_term->getName());
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

