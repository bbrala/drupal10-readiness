modules/contrib/webform_group_extended/src/Element/WebformGroupPermissions.php
modules/contrib/webform_group_extended/webform_group_extended.module
modules/contrib/webform_group_extended/src/Element/WebformGroupRoles.php
modules/contrib/webform_group_extended/src/Form/WebformSelectAccessGroupForm.php
modules/contrib/webform_group_extended/src/WebformGroupManager.php
modules/contrib/webform_group_extended/src/WebformGroupManagerInterface.php
modules/contrib/webform_group_extended/tests/src/Functional/WebformGroupBrowserTestBase.php
modules/contrib/webform_group_extended/webform_group_extended.tokens.inc
modules/contrib/webform_group_extended/tests/src/Functional/WebformGroupElementAccessTest.php
modules/contrib/webform_group_extended/tests/src/Functional/WebformGroupFormAccessTest.php
modules/contrib/webform_group_extended/tests/src/Functional/WebformGroupRolesElementTest.php
modules/contrib/webform_group_extended/tests/src/Functional/WebformGroupSubmissionAccessTest.php
modules/contrib/webform_group_extended/tests/src/Functional/WebformGroupTokensTest.php
modules/contrib/webform_group_extended/tests/src/Functional/WebformGroupUserInterfaceTest.php

7 files with changes
====================

1) modules/contrib/webform_group_extended/webform_group_extended.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityFormInterface;
 /**
  * @file
  * Provides a Webform integration with the Group module.
@@ @@
     return;
   }

-  if ($form_state->getFormObject() instanceof \Drupal\Core\Entity\EntityFormInterface) {
+  if ($form_state->getFormObject() instanceof EntityFormInterface) {
     $webform_submission = $form_state->getFormObject()->getEntity();
   } else {
     return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/webform_group_extended/tests/src/Functional/WebformGroupUserInterfaceTest.php:30

    ---------- begin diff ----------
@@ @@
     // Check 'Webform Access' integration.
     // @see webform_group_form_webform_settings_access_form_alter()
     $this->drupalGet('/admin/structure/webform/manage/contact/access');
-    $this->assertRaw('<label for="edit-access-create-group-roles">Group (node) roles</label>');
-    $this->assertFieldByName('access[create][group_roles][]');
+    $this->assertSession()->responseContains('<label for="edit-access-create-group-roles">Group (node) roles</label>');
+    $this->assertSession()->fieldExists('access[create][group_roles][]');
+    $this->drupalGet('/admin/structure/webform/manage/contact/access');

     // Add create access to webform for the member group role.
-    $this->drupalPostForm('/admin/structure/webform/manage/contact/access', ['access[create][group_roles][]' => ['member']], 'Save');
+    $this->submitForm(['access[create][group_roles][]' => ['member']], 'Save');

     // Check create access to webform for the member group role.
     \Drupal::entityTypeManager()->getStorage('webform')->resetCache();
@@ @@
     $webform = Webform::load('contact');
     $access_rules = $webform->getAccessRules();
     $this->debug($access_rules);
-    $this->assertEqual($access_rules['create']['group_roles'], ['member']);
+    $this->assertEquals($access_rules['create']['group_roles'], ['member']);

     /**************************************************************************/
     // Element.
@@ @@
     // Check 'Element' integration.
     // @see webform_group_form_webform_ui_element_form_alter()
     $this->drupalGet('/admin/structure/webform/manage/contact/element/name/edit');
-    $this->assertFieldByName('properties[access_create_group_roles][]');
+    $this->assertSession()->fieldExists('properties[access_create_group_roles][]');
     $edit = ['properties[access_create_group_roles][]' => 'member'];
+    $this->drupalGet('/admin/structure/webform/manage/contact/element/name/edit');

     // Add create access to name element for the member group role.
-    $this->drupalPostForm('/admin/structure/webform/manage/contact/element/name/edit', $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Check create access to name element for the member group role.
     \Drupal::entityTypeManager()->getStorage('webform')->resetCache();
     $webform = Webform::load('contact');
     $element = $webform->getElement('name');
-    $this->assertEqual($element['#access_create_group_roles'], ['member']);
+    $this->assertEquals($element['#access_create_group_roles'], ['member']);

     /**************************************************************************/
     // Handler.
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertRawRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/webform_group_extended/tests/src/Functional/WebformGroupTokensTest.php:61

    ---------- begin diff ----------
@@ @@

     // Check [webform_group:role:member] token.
     $result = $token_manager->replace('[webform_group:role:member]', $webform_submission, $token_data);
-    $this->assertEqual(implode(',', [
+    $this->assertEquals(implode(',', [
       $owner_user->getEmail(),
       $member_user->getEmail(),
       $custom_user->getEmail(),
@@ @@

     // Check [webform_group:role:custom] token.
     $result = $token_manager->replace('[webform_group:role:custom]', $webform_submission, $token_data);
-    $this->assertEqual(implode(',', [
+    $this->assertEquals(implode(',', [
       $custom_user->getEmail(),
     ]), $result);

     // Check [webform_group:role:outsider] token returns nothing.
     $result = $token_manager->replace('[webform_group:role:outsider]', $webform_submission, $token_data);
-    $this->assertEqual('', $result);
+    $this->assertEquals('', $result);

     // Check [webform_group:owner:mail] token returns the group's owner email.
     $result = $token_manager->replace('[webform_group:owner:mail]', $webform_submission, $token_data);
-    $this->assertEqual($owner_user->getEmail(), $result);
+    $this->assertEquals($owner_user->getEmail(), $result);

   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/webform_group_extended/tests/src/Functional/WebformGroupRolesElementTest.php:24

    ---------- begin diff ----------
@@ @@
     $element = [];
     $options = WebformGroupRoles::getGroupRolesOptions($element);
     WebformElementHelper::convertRenderMarkupToStrings($options);
-    $this->assertEqual([
+    $this->assertEquals([
       'Group role types' => [
         'outsider' => 'Outsider',
         'member' => 'Member',
@@ @@
     ];
     $options = WebformGroupRoles::getGroupRolesOptions($element);
     WebformElementHelper::convertRenderMarkupToStrings($options);
-    $this->assertEqual([
+    $this->assertEquals([
       'Group role types' => [
         'custom' => 'Custom',
       ],
@@ @@
       'webform_group_roles_advanced' => 'custom',
     ];
     $this->postSubmission($webform, $edit);
-    $this->assertRaw('webform_group_roles:
+    $this->assertSession()->responseContains('webform_group_roles:
   - custom
   - member
 webform_group_roles_advanced: custom');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertRawRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/webform_group_extended/tests/src/Functional/WebformGroupFormAccessTest.php:44

    ---------- begin diff ----------
@@ @@

     // Check that the form is displayed to anonymous user.
     $this->drupalGet('/node/' . $node->id());
-    $this->assertFieldByName('message');
+    $this->assertSession()->fieldExists('message');

     // Login as an outsider user.
     $this->drupalLogin($outsider_user);
@@ @@

     // Check that the form is displayed to outsider user.
     $this->drupalGet('/node/' . $node->id());
-    $this->assertFieldByName('message');
+    $this->assertSession()->fieldExists('message');

     // Login as a member user.
     $this->drupalLogin($member_user);
@@ @@

     // Check that the form is displayed to member user.
     $this->drupalGet('/node/' . $node->id());
-    $this->assertFieldByName('message');
+    $this->assertSession()->fieldExists('message');

     // Add webform node to group.
     $group->addContent($node, 'group_node:webform');
@@ @@

     // Check that the form is NOT displayed to anonymous user.
     $this->drupalGet('/node/' . $node->id());
-    $this->assertNoFieldByName('message');
+    $this->assertSession()->fieldValueNotEquals('message', '');

     // Login as an outsider user.
     $this->drupalLogin($outsider_user);
@@ @@

     // Check that the form is NOT displayed to outsider user.
     $this->drupalGet('/node/' . $node->id());
-    $this->assertNoFieldByName('message');
+    $this->assertSession()->fieldValueNotEquals('message', '');

     // Allow outsider to access webform.
     $access['create']['group_roles'][] = 'outsider';
@@ @@

     // Check that the form is displayed to outsider user.
     $this->drupalGet('/node/' . $node->id());
-    $this->assertFieldByName('message');
+    $this->assertSession()->fieldExists('message');

     // Login as an member user.
     $this->drupalLogin($member_user);
@@ @@

     // Check that the form is NOT displayed to member user.
     $this->drupalGet('/node/' . $node->id());
-    $this->assertNoFieldByName('message');
+    $this->assertSession()->fieldValueNotEquals('message', '');

     // Allow member to access webform.
     $access['create']['group_roles'][] = 'member';
@@ @@

     // Check that the form is displayed to member user.
     $this->drupalGet('/node/' . $node->id());
-    $this->assertFieldByName('message');
+    $this->assertSession()->fieldExists('message');

     /**************************************************************************/
     // Update any access.
@@ @@

     // Check that anonymous can't access the submission page.
     $this->drupalGet("/node/$nid/webform/results/submissions");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Login as an member user.
     $this->drupalLogin($member_user);
@@ @@

     // Check that member can't access the submission page.
     $this->drupalGet("/node/$nid/webform/results/submissions");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Allow member to access submissions.
     $access['view_any']['group_roles'][] = 'member';
@@ @@

     // Check that member can access the submission page.
     $this->drupalGet("/node/$nid/webform/results/submissions");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * AssertResponseRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/webform_group_extended/tests/src/Functional/WebformGroupElementAccessTest.php:38

    ---------- begin diff ----------
@@ @@

     // Check that only the anonymous element is displayed.
     $this->drupalGet('/node/' . $node->id());
-    $this->assertFieldByName('anonymous');
-    $this->assertNoFieldByName('authenticated');
-    $this->assertNoFieldByName('outsider');
-    $this->assertNoFieldByName('member');
-    $this->assertNoFieldByName('custom');
+    $this->assertSession()->fieldExists('anonymous');
+    $this->assertSession()->fieldValueNotEquals('authenticated', '');
+    $this->assertSession()->fieldValueNotEquals('outsider', '');
+    $this->assertSession()->fieldValueNotEquals('member', '');
+    $this->assertSession()->fieldValueNotEquals('custom', '');

     // Login as an outsider user.
     $this->drupalLogin($outsider_user);
@@ @@

     // Check that only the authenticated element is displayed.
     $this->drupalGet('/node/' . $node->id());
-    $this->assertNoFieldByName('anonymous');
-    $this->assertFieldByName('authenticated');
-    $this->assertNoFieldByName('outsider');
-    $this->assertNoFieldByName('member');
-    $this->assertNoFieldByName('custom');
+    $this->assertSession()->fieldValueNotEquals('anonymous', '');
+    $this->assertSession()->fieldExists('authenticated');
+    $this->assertSession()->fieldValueNotEquals('outsider', '');
+    $this->assertSession()->fieldValueNotEquals('member', '');
+    $this->assertSession()->fieldValueNotEquals('custom', '');

     // Login as a member user.
     $this->drupalLogin($member_user);
@@ @@

     // Check that only the authenticated element is displayed.
     $this->drupalGet('/node/' . $node->id());
-    $this->assertNoFieldByName('anonymous');
-    $this->assertFieldByName('authenticated');
-    $this->assertNoFieldByName('outsider');
-    $this->assertNoFieldByName('member');
-    $this->assertNoFieldByName('custom');
+    $this->assertSession()->fieldValueNotEquals('anonymous', '');
+    $this->assertSession()->fieldExists('authenticated');
+    $this->assertSession()->fieldValueNotEquals('outsider', '');
+    $this->assertSession()->fieldValueNotEquals('member', '');
+    $this->assertSession()->fieldValueNotEquals('custom', '');

     /**************************************************************************/
     // Webform node related to a group.
@@ @@

     // Check that only the anonymous element is displayed.
     $this->drupalGet('/node/' . $node->id());
-    $this->assertFieldByName('anonymous');
-    $this->assertNoFieldByName('authenticated');
-    $this->assertNoFieldByName('outsider');
-    $this->assertNoFieldByName('member');
-    $this->assertNoFieldByName('custom');
+    $this->assertSession()->fieldExists('anonymous');
+    $this->assertSession()->fieldValueNotEquals('authenticated', '');
+    $this->assertSession()->fieldValueNotEquals('outsider', '');
+    $this->assertSession()->fieldValueNotEquals('member', '');
+    $this->assertSession()->fieldValueNotEquals('custom', '');

     // Login as an outsider user.
     $this->drupalLogin($outsider_user);
@@ @@

     // Check that only the authenticated and outsider element are displayed.
     $this->drupalGet('/node/' . $node->id());
-    $this->assertNoFieldByName('anonymous');
-    $this->assertFieldByName('authenticated');
-    $this->assertFieldByName('outsider');
-    $this->assertNoFieldByName('member');
-    $this->assertNoFieldByName('custom');
+    $this->assertSession()->fieldValueNotEquals('anonymous', '');
+    $this->assertSession()->fieldExists('authenticated');
+    $this->assertSession()->fieldExists('outsider');
+    $this->assertSession()->fieldValueNotEquals('member', '');
+    $this->assertSession()->fieldValueNotEquals('custom', '');

     // Login as a member user.
     $this->drupalLogin($member_user);
@@ @@

     // Check that only the authenticated element is displayed.
     $this->drupalGet('/node/' . $node->id());
-    $this->assertNoFieldByName('anonymous');
-    $this->assertFieldByName('authenticated');
-    $this->assertNoFieldByName('outsider');
-    $this->assertFieldByName('member');
-    $this->assertNoFieldByName('custom');
+    $this->assertSession()->fieldValueNotEquals('anonymous', '');
+    $this->assertSession()->fieldExists('authenticated');
+    $this->assertSession()->fieldValueNotEquals('outsider', '');
+    $this->assertSession()->fieldExists('member');
+    $this->assertSession()->fieldValueNotEquals('custom', '');

     // Login as a custom user.
     $this->drupalLogin($custom_user);
@@ @@

     // Check that only the authenticated element is displayed.
     $this->drupalGet('/node/' . $node->id());
-    $this->assertNoFieldByName('anonymous');
-    $this->assertFieldByName('authenticated');
-    $this->assertNoFieldByName('outsider');
-    $this->assertFieldByName('member');
-    $this->assertFieldByName('custom');
+    $this->assertSession()->fieldValueNotEquals('anonymous', '');
+    $this->assertSession()->fieldExists('authenticated');
+    $this->assertSession()->fieldValueNotEquals('outsider', '');
+    $this->assertSession()->fieldExists('member');
+    $this->assertSession()->fieldExists('custom');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/webform_group_extended/tests/src/Functional/WebformGroupBrowserTestBase.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Allow all roles to view webform nodes.
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $this->purgeSubmissions();
     parent::tearDown();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

