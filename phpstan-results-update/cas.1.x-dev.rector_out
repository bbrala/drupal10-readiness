modules/contrib/cas/src/Commands/CasCommands.php
modules/contrib/cas/cas.install
modules/contrib/cas/tests/modules/cas_user_interaction_test/src/CasUserInteractionTestForm.php
modules/contrib/cas/tests/src/Unit/Service/CasRedirectorTest.php
modules/contrib/cas/src/PageCache/DenyCas.php
modules/contrib/cas/src/Plugin/Validation/Constraint/CasProtectedUserFieldConstraint.php
modules/contrib/cas/tests/modules/cas_user_interaction_test/src/CasUserInteractionTestSubscriber.php
modules/contrib/cas/src/Plugin/Validation/Constraint/CasProtectedUserFieldConstraintValidator.php
modules/contrib/cas/cas.module
modules/contrib/cas/src/Controller/ForceLoginController.php
modules/contrib/cas/tests/src/Functional/CasAutoAssignedRolesTest.php
modules/contrib/cas/src/Plugin/migrate/source/d7/CasUser.php
modules/contrib/cas/src/Controller/LogoutController.php
modules/contrib/cas/src/Routing/CasRouteEnhancer.php
modules/contrib/cas/src/Controller/ProxyCallbackController.php
modules/contrib/cas/src/Service/CasHelper.php
modules/contrib/cas/src/Controller/ServiceController.php
modules/contrib/cas/tests/src/Functional/CasBrowserTestBase.php
modules/contrib/cas/tests/src/Unit/Service/CasUserManagerTest.php
modules/contrib/cas/src/Service/CasLogout.php
modules/contrib/cas/tests/src/Functional/CasBulkAddCasUsersTest.php
modules/contrib/cas/cas.post_update.php
modules/contrib/cas/cas.tokens.inc
modules/contrib/cas/src/Access/CasUserAccessCheck.php
modules/contrib/cas/tests/src/Functional/CasEventsTest.php
modules/contrib/cas/src/Service/CasProxyHelper.php
modules/contrib/cas/src/CasPropertyBag.php
modules/contrib/cas/src/CasRedirectData.php
modules/contrib/cas/tests/src/Functional/CasForcedLoginControllerTest.php
modules/contrib/cas/src/CasRedirectResponse.php
modules/contrib/cas/src/CasServerConfig.php
modules/contrib/cas/tests/src/Functional/CasLoginFormTest.php
modules/contrib/cas/src/Service/CasRedirector.php
modules/contrib/cas/src/Event/CasPostLoginEvent.php
modules/contrib/cas/src/Event/CasPostValidateEvent.php
modules/contrib/cas/src/Event/CasPreLoginEvent.php
modules/contrib/cas/src/Event/CasPreRedirectEvent.php
modules/contrib/cas/src/Event/CasPreRegisterEvent.php
modules/contrib/cas/src/Service/CasUserManager.php
modules/contrib/cas/tests/src/Functional/CasPasswordResetTest.php
modules/contrib/cas/src/Event/CasPreUserLoadEvent.php
modules/contrib/cas/src/Event/CasPreUserLoadRedirectEvent.php
modules/contrib/cas/src/Event/CasPreValidateEvent.php
modules/contrib/cas/src/Event/CasPreValidateServerConfigEvent.php
modules/contrib/cas/src/Exception/CasLoginException.php
modules/contrib/cas/src/Exception/CasProxyException.php
modules/contrib/cas/src/Exception/CasSloException.php
modules/contrib/cas/src/Exception/CasValidateException.php
modules/contrib/cas/src/Form/BulkAddCasUsers.php
modules/contrib/cas/tests/src/Unit/Service/CasValidatorTest.php
modules/contrib/cas/tests/src/Functional/CasSubscriberTest.php
modules/contrib/cas/src/Form/CasSettings.php
modules/contrib/cas/tests/src/Functional/CasUserFormFieldTest.php
modules/contrib/cas/src/Service/CasValidator.php
modules/contrib/cas/src/Subscriber/CasAutoAssignRolesSubscriber.php
modules/contrib/cas/src/Subscriber/CasRouteSubscriber.php
modules/contrib/cas/src/Subscriber/CasSubscriber.php
modules/contrib/cas/tests/src/Functional/CasUserInteractionTest.php
modules/contrib/cas/tests/src/Traits/CasTestTrait.php
modules/contrib/cas/tests/src/Unit/CasPropertyBagTest.php
modules/contrib/cas/tests/src/Unit/CasRedirectDataTest.php
modules/contrib/cas/tests/src/Unit/CasServerConfigTest.php
modules/contrib/cas/tests/modules/cas_test/src/CasTestSubscriber.php
modules/contrib/cas/tests/src/Unit/Controller/ServiceControllerTest.php
modules/contrib/cas/tests/src/Unit/Routing/CasRouteEnhancerTest.php
modules/contrib/cas/tests/src/Unit/Service/CasHelperTest.php
modules/contrib/cas/tests/src/Unit/Service/CasProxyHelperTest.php

31 files with changes
=====================

1) modules/contrib/cas/tests/src/Unit/Service/CasValidatorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\cas\Unit\Service;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Tests\UnitTestCase;
 use Drupal\cas\Service\CasValidator;
 use Drupal\cas\CasPropertyBag;
@@ @@
 use GuzzleHttp\Psr7\Request;
 use GuzzleHttp\Middleware;
 use Drupal\cas\Service\CasHelper;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * CasValidator unit tests.
@@ @@
   /**
    * The mocked event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $eventDispatcher;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Mock event dispatcher to dispatch events.
-    $this->eventDispatcher = $this->getMockBuilder('\Symfony\Component\EventDispatcher\EventDispatcherInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->eventDispatcher = $this->createMock('\Symfony\Component\EventDispatcher\EventDispatcherInterface');
   }

   /**
@@ @@
    *
    * @param string $event_name
    *   Name of event fired.
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   Event fired.
    */
   public function dispatchEvent($event_name, Event $event) {
@@ @@
       ->method('generateFromRoute')
       ->will($this->returnValue('https://example.com/casproxycallback'));

-    $casHelper = $this->getMockBuilder('\Drupal\cas\Service\CasHelper')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $casHelper = $this->createMock('\Drupal\cas\Service\CasHelper');

     $casValidator = new CasValidator($httpClient, $casHelper, $configFactory, $urlGenerator, $this->eventDispatcher);

@@ @@
     $handler = HandlerStack::create($mock);
     $httpClient = new Client(['handler' => $handler]);

-    $casHelper = $this->getMockBuilder('\Drupal\cas\Service\CasHelper')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $casHelper = $this->createMock('\Drupal\cas\Service\CasHelper');

     $configFactory = $this->getConfigFactoryStub([
       'cas.settings' => [
@@ @@
       ],
     ]);

-    $casHelper = $this->getMockBuilder('\Drupal\cas\Service\CasHelper')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $casHelper = $this->createMock('\Drupal\cas\Service\CasHelper');

     $urlGenerator = $this->createMock('\Drupal\Core\Routing\UrlGeneratorInterface');

@@ @@
       ],
     ]);

-    $casHelper = $this->getMockBuilder('\Drupal\cas\Service\CasHelper')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $casHelper = $this->createMock('\Drupal\cas\Service\CasHelper');

     $urlGenerator = $this->createMock('\Drupal\Core\Routing\UrlGeneratorInterface');

@@ @@

     $ticket = $this->randomMachineName(8);

-    $casHelper = $this->getMockBuilder('\Drupal\cas\Service\CasHelper')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $casHelper = $this->createMock('\Drupal\cas\Service\CasHelper');

     $urlGenerator = $this->createMock('\Drupal\Core\Routing\UrlGeneratorInterface');
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/cas/tests/src/Unit/Service/CasUserManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\cas\Unit\Service;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\cas\Event\CasPreLoginEvent;
 use Drupal\cas\Event\CasPreRegisterEvent;
 use Drupal\cas\Service\CasProxyHelper;
@@ @@
  */
 class CasUserManagerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The mocked External Auth manager.
    *
@@ @@
   /**
    * The mocked Entity Manager.
    *
-   * @var \Drupal\Core\Entity\EntityManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityManager;

@@ @@
   /**
    * The mocked session manager.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $session;

@@ @@
   /**
    * The mocked database connection.
    *
-   * @var \Drupal\Core\Database\Connection|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Database\Connection|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $connection;

@@ @@
   /**
    * The mocked event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $eventDispatcher;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
-    $this->externalAuth = $this->getMockBuilder('\Drupal\externalauth\ExternalAuth')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->authmap = $this->getMockBuilder('\Drupal\externalauth\Authmap')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $storage = $this->getMockBuilder('\Symfony\Component\HttpFoundation\Session\Storage\MockArraySessionStorage')
-      ->setMethods(NULL)
-      ->getMock();
+    $this->externalAuth = $this->createMock('\Drupal\externalauth\ExternalAuth');
+    $this->authmap = $this->createMock('\Drupal\externalauth\Authmap');
+    $storage = $this->createMock('\Symfony\Component\HttpFoundation\Session\Storage\MockArraySessionStorage');
     $this->session = $this->getMockBuilder('\Symfony\Component\HttpFoundation\Session\Session')
       ->setConstructorArgs([$storage])
       ->getMock();
     $this->session->start();
-    $this->connection = $this->getMockBuilder('\Drupal\Core\Database\Connection')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->eventDispatcher = $this->getMockBuilder('\Symfony\Component\EventDispatcher\EventDispatcherInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->casHelper = $this->getMockBuilder('\Drupal\cas\Service\CasHelper')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->account = $this->getMockBuilder('Drupal\user\UserInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->connection = $this->createMock('\Drupal\Core\Database\Connection');
+    $this->eventDispatcher = $this->createMock('\Symfony\Component\EventDispatcher\EventDispatcherInterface');
+    $this->casHelper = $this->createMock('\Drupal\cas\Service\CasHelper');
+    $this->account = $this->createMock('Drupal\user\UserInterface');
     $this->casProxyHelper = $this->prophesize(CasProxyHelper::class);
   }
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/cas/tests/src/Unit/Service/CasRedirectorTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Mock Cas Helper.
    *
-   * @var \Drupal\cas\Service\CasHelper|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\cas\Service\CasHelper|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $casHelper;

@@ @@
   /**
    * Mock URL Generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $urlGenerator;

@@ @@
   /**
    * The mocked event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $eventDispatcher;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->configFactory = $this->getConfigFactoryStub([
@@ @@
       ],
     ]);

-    $this->casHelper = $this
-      ->getMockBuilder('\Drupal\cas\Service\CasHelper')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->casHelper = $this->createMock('\Drupal\cas\Service\CasHelper');

     $this->urlGenerator = $this->createMock('\Drupal\Core\Routing\UrlGeneratorInterface');
     $this->urlGenerator->method('generate')
@@ @@
       ->willReturnCallback([$this, 'getServiceUrl']);

     // Mock event dispatcher to dispatch events.
-    $this->eventDispatcher = $this->getMockBuilder('\Symfony\Component\EventDispatcher\EventDispatcherInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->eventDispatcher = $this->createMock('\Symfony\Component\EventDispatcher\EventDispatcherInterface');

     // We have to mock the cache context manager which is called when we
     // add cache contexts to a cacheable metadata.
-    $cache_contexts_manager = $this->getMockBuilder('Drupal\Core\Cache\Context\CacheContextsManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $cache_contexts_manager = $this->createMock('Drupal\Core\Cache\Context\CacheContextsManager');
     $cache_contexts_manager->method('assertValidTokens')->willReturn(TRUE);

     $container = new Container();
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/cas/src/Event/CasPreValidateServerConfigEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cas\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasServerConfig;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\HttpFoundation\Request;

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/cas/src/Event/CasPreValidateEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cas\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Class CasPreValidateEvent.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/cas/src/Event/CasPreUserLoadRedirectEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cas\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\HttpFoundation\RedirectResponse;

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/cas/src/Event/CasPreUserLoadEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cas\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/cas/src/Event/CasPreRegisterEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cas\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/cas/src/Event/CasPreRedirectEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cas\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasRedirectData;
 use Drupal\cas\CasServerConfig;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Class CasPreRedirectEvent.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/cas/src/Event/CasPreLoginEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cas\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/cas/src/Event/CasPostValidateEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cas\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event fired after CAS validation happens.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/cas/src/Event/CasPostLoginEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cas\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/cas/src/Controller/ServiceController.php:242

    ---------- begin diff ----------
@@ @@
     // Dispatch an event that allows modules to alter any of the CAS data before
     // it's used to lookup a Drupal user account via the authmap table.
     $this->casHelper->log(LogLevel::DEBUG, 'Dispatching EVENT_PRE_USER_LOAD.');
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_USER_LOAD, new CasPreUserLoadEvent($cas_validation_info));
+    $this->eventDispatcher->dispatch(new CasPreUserLoadEvent($cas_validation_info), CasHelper::EVENT_PRE_USER_LOAD);

     if ($cas_validation_info->getUsername() !== $cas_validation_info->getOriginalUsername()) {
       $this->casHelper->log(
@@ @@
     // @see \Drupal\cas\Event\CasPreUserLoadRedirectEvent
     $cas_pre_user_load_redirect_event = new CasPreUserLoadRedirectEvent($ticket, $cas_validation_info, $service_params);
     $this->casHelper->log(LogLevel::DEBUG, 'Dispatching EVENT_PRE_USER_LOAD_REDIRECT.');
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_USER_LOAD_REDIRECT, $cas_pre_user_load_redirect_event);
+    $this->eventDispatcher->dispatch($cas_pre_user_load_redirect_event, CasHelper::EVENT_PRE_USER_LOAD_REDIRECT);

     // A subscriber might have set an HTTP redirect response allowing potential
     // user interaction to be injected into the flow.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


14) modules/contrib/cas/src/Subscriber/CasSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cas\Subscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\cas\CasRedirectData;
 use Drupal\cas\Service\CasRedirector;

@@ @@
 use Drupal\Core\EventSubscriber\HttpExceptionSubscriberBase;
 use Drupal\Core\Session\AccountInterface;
 use Psr\Log\LogLevel;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\HttpKernelInterface;
 use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ @@
   /**
    * The entry point for our subscriber.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The response event from the kernel.
    */
-  public function handle(GetResponseEvent $event) {
+  public function handle(RequestEvent $event) {
     // Don't do anything if this is a sub request and not a master request.
     if ($event->getRequestType() != HttpKernelInterface::MASTER_REQUEST) {
       return;
@@ @@
    * instances we handle the forced login redirect if applicable here instead,
    * using an exception subscriber.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *   The event to process.
    */
-  public function on403(GetResponseForExceptionEvent $event) {
+  public function on403(ExceptionEvent $event) {
     if ($this->currentUser->isAnonymous()) {
       $return_to = $this->requestStack->getCurrentRequest()->getUri();
       $redirect_data = new CasRedirectData(['returnto' => $return_to]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/cas/src/Service/CasValidator.php:100

    ---------- begin diff ----------
@@ @@
     // Allow modules to modify the server config before it's used to validate
     // the login ticket.
     $event = new CasPreValidateServerConfigEvent($casServerConfig);
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_VALIDATE_SERVER_CONFIG, $event);
+    $this->eventDispatcher->dispatch($event, CasHelper::EVENT_PRE_VALIDATE_SERVER_CONFIG);

     // Determine the path to send the validation request to on the CAS server.
     $path = '';
@@ @@
     // Dispatch an event that allows modules to alter the validation path or
     // URL parameters.
     $pre_validate_event = new CasPreValidateEvent($path, $params);
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_VALIDATE, $pre_validate_event);
+    $this->eventDispatcher->dispatch($pre_validate_event, CasHelper::EVENT_PRE_VALIDATE);
     $validate_url = $casServerConfig->getServerBaseUrl() . $pre_validate_event->getValidationPath();
     if (!empty($pre_validate_event->getParameters())) {
       $validate_url .= '?' . UrlHelper::buildQuery($pre_validate_event->getParameters());
@@ @@

     // Dispatch an event that allows modules to alter the CAS property bag.
     $event = new CasPostValidateEvent($response_data, $cas_property_bag);
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_POST_VALIDATE, $event);
+    $this->eventDispatcher->dispatch($event, CasHelper::EVENT_POST_VALIDATE);
     return $event->getCasPropertyBag();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


16) modules/contrib/cas/src/Service/CasUserManager.php:196

    ---------- begin diff ----------
@@ @@
         $cas_pre_register_event = new CasPreRegisterEvent($property_bag);
         $cas_pre_register_event->setPropertyValue('mail', $this->getEmailForNewAccount($property_bag));
         $this->casHelper->log(LogLevel::DEBUG, 'Dispatching EVENT_PRE_REGISTER.');
-        $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_REGISTER, $cas_pre_register_event);
+        $this->eventDispatcher->dispatch($cas_pre_register_event, CasHelper::EVENT_PRE_REGISTER);
         if ($cas_pre_register_event->getAllowAutomaticRegistration()) {
           $account = $this->register($property_bag->getUsername(), $cas_pre_register_event->getPropertyValues(), $cas_pre_register_event->getDrupalUsername());
         }
@@ @@
     // in and/or alter the user entity before we save it.
     $pre_login_event = new CasPreLoginEvent($account, $property_bag);
     $this->casHelper->log(LogLevel::DEBUG, 'Dispatching EVENT_PRE_LOGIN.');
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_LOGIN, $pre_login_event);
+    $this->eventDispatcher->dispatch($pre_login_event, CasHelper::EVENT_PRE_LOGIN);

     // Save user entity since event listeners may have altered it.
     // @todo Don't take it for granted. Find if the account was really altered.
@@ @@

     $postLoginEvent = new CasPostLoginEvent($account, $property_bag);
     $this->casHelper->log(LogLevel::DEBUG, 'Dispatching EVENT_POST_LOGIN.');
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_POST_LOGIN, $postLoginEvent);
+    $this->eventDispatcher->dispatch($postLoginEvent, CasHelper::EVENT_POST_LOGIN);

     if ($this->settings->get('proxy.initialize') && $property_bag->getPgt()) {
       $this->casHelper->log(LogLevel::DEBUG, "Storing PGT information for this session.");
@@ @@
    */
   protected function randomPassword() {
     // Default length is 10, use a higher number that's harder to brute force.
-    return \user_password(30);
+    return \Drupal::service('password_generator')->generate(30);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


17) modules/contrib/cas/src/Service/CasRedirector.php:86

    ---------- begin diff ----------
@@ @@
     // Dispatch an event that allows modules to alter or prevent the redirect,
     // or to change the CAS server that we're redirected to.
     $pre_redirect_event = new CasPreRedirectEvent($data, $casServerConfig);
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_REDIRECT, $pre_redirect_event);
+    $this->eventDispatcher->dispatch($pre_redirect_event, CasHelper::EVENT_PRE_REDIRECT);

     // Build the service URL, which is where the CAS server will send users
     // back to after authenticating them. We always send users back to our main
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


18) modules/contrib/cas/tests/src/Unit/Service/CasProxyHelperTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The mocked session manager.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $session;

@@ @@
   /**
    * The mocked CAS helper.
    *
-   * @var \Drupal\cas\Service\CasHelper|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\cas\Service\CasHelper|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $casHelper;

@@ @@
   /**
    * The mocked database connection object.
    *
-   * @var \Drupal\Core\Database\Connection|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Database\Connection|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $database;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

-    $storage = $this->getMockBuilder('\Symfony\Component\HttpFoundation\Session\Storage\MockArraySessionStorage')
-      ->setMethods(NULL)
-      ->getMock();
+    $storage = $this->createMock('\Symfony\Component\HttpFoundation\Session\Storage\MockArraySessionStorage');
     $this->session = $this->getMockBuilder('\Symfony\Component\HttpFoundation\Session\Session')
       ->setConstructorArgs([$storage])
       ->setMethods(NULL)
@@ @@
       ->getMock();
     $this->session->start();

-    $this->casHelper = $this->getMockBuilder('\Drupal\cas\Service\CasHelper')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->casHelper = $this->createMock('\Drupal\cas\Service\CasHelper');

-    $this->database = $this->getMockBuilder('\Drupal\Core\Database\Connection')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->database = $this->createMock('\Drupal\Core\Database\Connection');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/cas/tests/src/Unit/Service/CasHelperTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\cas\Unit\Service;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\cas\Service\CasHelper;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Logger\LoggerChannelFactory;
@@ @@
  */
 class CasHelperTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The mocked Url generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $urlGenerator;

@@ @@
   /**
    * The mocked logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactory|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Logger\LoggerChannelFactory|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $loggerFactory;

@@ @@
   /**
    * The mocked log channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannel|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Logger\LoggerChannel|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $loggerChannel;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->loggerFactory = $this->createMock('\Drupal\Core\Logger\LoggerChannelFactory');
-    $this->loggerChannel = $this->getMockBuilder('\Drupal\Core\Logger\LoggerChannel')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->loggerChannel = $this->createMock('\Drupal\Core\Logger\LoggerChannel');
     $this->loggerFactory->expects($this->any())
       ->method('get')
       ->with('cas')
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/cas/tests/src/Unit/Routing/CasRouteEnhancerTest.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The mocked CasHelper.
    *
-   * @var \Drupal\cas\Service\CasHelper|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\cas\Service\CasHelper|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $casHelper;

@@ @@
   /**
    * The mocked Request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\HttpFoundation\Request|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $request;

@@ @@
   /**
    * The mocked Route.
    *
-   * @var \Symfony\Component\Routing\Route|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\Routing\Route|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $route;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

-    $this->casHelper = $this->getMockBuilder('\Drupal\cas\Service\CasHelper')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->request = $this->getMockBuilder('\Symfony\Component\HttpFoundation\Request')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->route = $this->getMockBuilder('\Symfony\Component\Routing\Route')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->casHelper = $this->createMock('\Drupal\cas\Service\CasHelper');
+    $this->request = $this->createMock('\Symfony\Component\HttpFoundation\Request');
+    $this->route = $this->createMock('\Symfony\Component\Routing\Route');
   }

   /**
@@ @@
    * @dataProvider enhanceDataProvider
    */
   public function testEnhance($path, $cas_logout_enabled, $is_cas_user) {
-    $session = $this->getMockBuilder('\Symfony\Component\HttpFoundation\Session')
-      ->disableOriginalConstructor()
-      ->setMethods(['get'])
-      ->getMock();
+    $session = $this->createMock('\Symfony\Component\HttpFoundation\Session');
     $session->expects($this->any())
       ->method('get')
       ->with('is_cas_user')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/cas/tests/src/Unit/Controller/ServiceControllerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\cas\Unit\Controller;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;
 use Drupal\cas\Controller\ServiceController;
 use Drupal\cas\Event\CasPreUserLoadRedirectEvent;
@@ @@
 use Drupal\externalauth\ExternalAuthInterface;
 use Drupal\Tests\UnitTestCase;
 use Prophecy\Argument;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\HttpFoundation\Request;

 /**
@@ @@
  */
 class ServiceControllerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The mocked CasHelper.
    *
-   * @var \Drupal\cas\Service\CasHelper|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\cas\Service\CasHelper|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $casHelper;

@@ @@
   /**
    * The mocked Request Stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\HttpFoundation\RequestStack|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $requestStack;

@@ @@
   /**
    * The mocked CasValidator.
    *
-   * @var \Drupal\cas\Service\CasValidator|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\cas\Service\CasValidator|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $casValidator;

@@ @@
   /**
    * The mocked CasUserManager.
    *
-   * @var \Drupal\cas\Service\CasUserManager|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\cas\Service\CasUserManager|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $casUserManager;

@@ @@
   /**
    * The mocked CasLogout.
    *
-   * @var \Drupal\cas\Service\CasLogout|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\cas\Service\CasLogout|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $casLogout;

@@ @@
   /**
    * The mocked Url Generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $urlGenerator;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

-    $this->casValidator = $this->getMockBuilder('\Drupal\cas\Service\CasValidator')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->casUserManager = $this->getMockBuilder('\Drupal\cas\Service\CasUserManager')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->casLogout = $this->getMockBuilder('\Drupal\cas\Service\CasLogout')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->casValidator = $this->createMock('\Drupal\cas\Service\CasValidator');
+    $this->casUserManager = $this->createMock('\Drupal\cas\Service\CasUserManager');
+    $this->casLogout = $this->createMock('\Drupal\cas\Service\CasLogout');
     $this->configFactory = $this->getConfigFactoryStub([
       'cas.settings' => [
         'server.hostname' => 'example-server.com',
@@ @@
     $this->requestObject->query = $query_bag;
     $this->requestObject->request = $request_bag;

-    $storage = $this->getMockBuilder('\Symfony\Component\HttpFoundation\Session\Storage\MockArraySessionStorage')
-      ->setMethods(NULL)
-      ->getMock();
+    $storage = $this->createMock('\Symfony\Component\HttpFoundation\Session\Storage\MockArraySessionStorage');
     $session = $this->getMockBuilder('\Symfony\Component\HttpFoundation\Session\Session')
       ->setConstructorArgs([$storage])
       ->setMethods(NULL)
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/cas/tests/src/Traits/CasTestTrait.php:57

    ---------- begin diff ----------
@@ @@
       'email' => $email,
       'password' => $password,
     ];
-    $this->drupalPostForm('/cas-mock-server/login', $edit, 'Log in', ['query' => $query]);
+    $this->drupalGet('/cas-mock-server/login', ['query' => $query]);
+    $this->submitForm($edit, 'Log in');
   }

 }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector


23) modules/contrib/cas/tests/src/Functional/CasUserInteractionTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a local user.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/cas/tests/src/Functional/CasUserFormFieldTest.php:44

    ---------- begin diff ----------
@@ @@
       'cas_enabled' => FALSE,
       'cas_username' => 'test_user_1_cas',
     ];
-    $this->drupalPostForm('/user/' . $test_user_1->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('/user/' . $test_user_1->id() . '/edit');
+    $this->submitForm($edit, 'Save');

     // Verify the field is empty.
     $cas_username_field = $this->getSession()->getPage()->findField('cas_username');
@@ @@
       'cas_enabled' => TRUE,
       'cas_username' => 'test_user_1_cas',
     ];
-    $this->drupalPostForm('/user/' . $test_user_1->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('/user/' . $test_user_1->id() . '/edit');
+    $this->submitForm($edit, 'Save');

     // Check that field is still filled in with the CAS username.
     $cas_username_field = $this->getSession()->getPage()->findField('cas_username');
@@ @@
       'cas_enabled' => TRUE,
       'cas_username' => 'test_user_1_cas',
     ];
-    $this->drupalPostForm('/admin/people/create', $new_user_data, 'Create new account');
+    $this->drupalGet('/admin/people/create');
+    $this->submitForm($new_user_data, 'Create new account');
     $output = $this->getSession()->getPage()->getContent();

     $validation_error_message = 'The specified CAS username is already in use by another user.';
-    $this->assertContains($validation_error_message, $output, 'Expected validation error not found on page.');
+    $this->assertStringContainsString($validation_error_message, $output, 'Expected validation error not found on page.');

     // Submit with proper CAS username, and verify user was created and has the
     // proper CAS username associated.
     $new_user_data['cas_username'] = 'test_user_2_cas';
-    $this->drupalPostForm('/admin/people/create', $new_user_data, 'Create new account');
+    $this->drupalGet('/admin/people/create');
+    $this->submitForm($new_user_data, 'Create new account');
     $output = $this->getSession()->getPage()->getContent();
-    $this->assertNotContains($validation_error_message, $output, 'Validation error should not be found.');
+    $this->assertStringNotContainsString($validation_error_message, $output, 'Validation error should not be found.');

     $test_user_2 = $this->container->get('entity_type.manager')->getStorage('user')->loadByProperties(['name' => 'test_user_2']);
     $test_user_2 = reset($test_user_2);
@@ @@
     // Should be able to clear out the CAS enabled checkbox to remove the
     // authmap entry.
     $edit = ['cas_enabled' => FALSE];
-    $this->drupalPostForm('/user/' . $test_user_2->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('/user/' . $test_user_2->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     $authmap = $this->container->get('externalauth.authmap');
     $this->assertFalse($authmap->get($test_user_2->id(), 'cas'));
     // Visit the edit page for this user to ensure CAS username field empty.
@@ @@
       'user_accounts[restrict_password_management]' => TRUE,
       'user_accounts[prevent_normal_login]' => FALSE,
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertEquals(TRUE, $this->config('cas.settings')->get('user_accounts.restrict_password_management'));
     $this->drupalLogout();

@@ @@
       'current_pass' => 'incorrectpassword',
       'mail' => 'new-noncasuser-email@sample.com',
     ];
+    $this->drupalGet('/user/' . $non_cas_user->id() . '/edit');
     // First try changing data with wrong password to ensure the protected
     // password constraint still works.
-    $this->drupalPostForm('/user/' . $non_cas_user->id() . '/edit', $form_data, 'Save');
+    $this->submitForm($form_data, 'Save');
     $this->assertSession()->responseContains('Your current password is missing or incorrect');
     // Now again with the correct current password.
     $form_data['current_pass'] = $non_cas_user->pass_raw;
-    $this->drupalPostForm('/user/' . $non_cas_user->id() . '/edit', $form_data, 'Save');
+    $this->drupalGet('/user/' . $non_cas_user->id() . '/edit');
+    $this->submitForm($form_data, 'Save');
     $this->assertSession()->responseContains('The changes have been saved.');

     // For CAS users, we modify the user form to remove the password management
@@ @@
     $form_data = [
       'mail' => 'new-casuser-email@sample.com',
     ];
-    $this->drupalPostForm('/user/' . $cas_user->id() . '/edit', $form_data, 'Save');
+    $this->drupalGet('/user/' . $cas_user->id() . '/edit');
+    $this->submitForm($form_data, 'Save');
     $this->assertSession()->responseContains('The changes have been saved.');

     // An admin should still be able to see the password fields the CAS user.
@@ @@
     $edit = [
       'user_accounts[restrict_password_management]' => FALSE,
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertEquals(FALSE, $this->config('cas.settings')->get('user_accounts.restrict_password_management'));
     $this->drupalLogout();

@@ @@
       'current_pass' => 'incorrectpassword',
       'mail' => 'another-new-casuser-email@sample.com',
     ];
+    $this->drupalGet('/user/' . $cas_user->id() . '/edit');
     // First try changing data with wrong password.
-    $this->drupalPostForm('/user/' . $cas_user->id() . '/edit', $form_data, 'Save');
+    $this->submitForm($form_data, 'Save');
     $this->assertSession()->responseContains('Your current password is missing or incorrect');
     // Now again with the correct current password.
     $form_data['current_pass'] = $cas_user->pass_raw;
-    $this->drupalPostForm('/user/' . $cas_user->id() . '/edit', $form_data, 'Save');
+    $this->drupalGet('/user/' . $cas_user->id() . '/edit');
+    $this->submitForm($form_data, 'Save');
     $this->assertSession()->responseContains('The changes have been saved.');
   }

@@ @@
       'user_accounts[restrict_email_management]' => TRUE,
       'user_accounts[prevent_normal_login]' => FALSE,
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertEquals(TRUE, $this->config('cas.settings')->get('user_accounts.restrict_email_management'));
     $this->drupalLogout();

@@ @@
       'current_pass' => 'incorrectpassword',
       'mail' => 'new-noncasuser-email@sample.com',
     ];
+    $this->drupalGet('/user/' . $non_cas_user->id() . '/edit');
     // First try changing data with wrong password to ensure the protected
     // password constraint still works.
-    $this->drupalPostForm('/user/' . $non_cas_user->id() . '/edit', $form_data, 'Save');
+    $this->submitForm($form_data, 'Save');
     $this->assertSession()->responseContains('Your current password is missing or incorrect');
     // Now again with the correct current password.
     $form_data['current_pass'] = $non_cas_user->pass_raw;
-    $this->drupalPostForm('/user/' . $non_cas_user->id() . '/edit', $form_data, 'Save');
+    $this->drupalGet('/user/' . $non_cas_user->id() . '/edit');
+    $this->submitForm($form_data, 'Save');
     $this->assertSession()->responseContains('The changes have been saved.');

     // For CAS users, we modify the user form to disable the email field.
@@ @@
     $edit = [
       'user_accounts[restrict_email_management]' => FALSE,
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertEquals(FALSE, $this->config('cas.settings')->get('user_accounts.restrict_email_management'));
     $this->drupalLogout();
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * SpecificAssertContainsRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


25) modules/contrib/cas/tests/src/Functional/CasSubscriberTest.php:50

    ---------- begin diff ----------
@@ @@
       'forced_login[enabled]' => TRUE,
       'forced_login[paths][pages]' => "/node/2\n/my/path",
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');

     $config = $this->config('cas.settings');
     $this->assertTrue($config->get('forced_login.enabled'));
@@ @@
       'gateway[check_frequency]' => CasHelper::CHECK_ONCE,
       'gateway[paths][pages]' => "/node/1",
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');

     $config = $this->config('cas.settings');
     $this->assertEquals(CasHelper::CHECK_ONCE, $config->get('gateway.check_frequency'));
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


26) modules/contrib/cas/tests/src/Functional/CasPasswordResetTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->settings = $this->config('cas.settings');
@@ @@
   public function testPasswordResetAsAnonymous() {
     // Test with the 'user_accounts.restrict_password_management' setting off.
     $this->settings->set('user_accounts.restrict_password_management', FALSE)->save();
+    $this->drupalGet('/user/password');

     // Check that a CAS user is able to reset their password.
-    $this->drupalPostForm('/user/password', ['name' => 'user_with_cas'], 'Submit');
+    $this->submitForm(['name' => 'user_with_cas'], 'Submit');
     $this->assertSession()->addressEquals('user/login');
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');
+    $this->drupalGet('/user/password');

     // Check that a non-CAS user is able to reset their password.
-    $this->drupalPostForm('/user/password', ['name' => 'user_without_cas'], 'Submit');
+    $this->submitForm(['name' => 'user_without_cas'], 'Submit');
     $this->assertSession()->addressEquals('user/login');
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');

     // Test with the 'user_accounts.restrict_password_management' setting on.
     $this->settings->set('user_accounts.restrict_password_management', TRUE)->save();
+    $this->drupalGet('/user/password');

     // Check that a CAS user is not able to reset their password.
-    $this->drupalPostForm('/user/password', ['name' => 'user_with_cas'], 'Submit');
+    $this->submitForm(['name' => 'user_with_cas'], 'Submit');
     $this->assertSession()->addressEquals('user/password');
     $this->assertSession()->pageTextContains('The requested account is associated with CAS and its password cannot be managed from this website.');

@@ @@
     $this->getSession()->reload();
     $this->assertSession()->pageTextContains('You cannot manage your password. Back to homepage.');
     $this->assertSession()->linkExists('homepage');
+    $this->drupalGet('/user/password');

     // Check that a non-CAS user is able to reset their password.
-    $this->drupalPostForm('/user/password', ['name' => 'user_without_cas'], 'Submit');
+    $this->submitForm(['name' => 'user_without_cas'], 'Submit');
     $this->assertSession()->addressEquals('user/login');
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');
   }
@@ @@

     // Check that a non-CAS user is able to reset their password.
     $this->drupalLogin($this->nonCasUser);
-    $this->drupalPostForm('/user/password', [], 'Submit');
+    $this->drupalGet('/user/password');
+    $this->submitForm([], 'Submit');
     $this->assertSession()->addressEquals($this->nonCasUser->toUrl());
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');

     // Check that a CAS user is able to reset their password.
     $this->drupalLogin($this->casUser);
-    $this->drupalPostForm('/user/password', [], 'Submit');
+    $this->drupalGet('/user/password');
+    $this->submitForm([], 'Submit');
     $this->assertSession()->addressEquals($this->casUser->toUrl());
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');

@@ @@

     // Check that a non-CAS user is able to reset their password.
     $this->drupalLogin($this->nonCasUser);
-    $this->drupalPostForm('/user/password', [], 'Submit');
+    $this->drupalGet('/user/password');
+    $this->submitForm([], 'Submit');
     $this->assertSession()->addressEquals($this->nonCasUser->toUrl());
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/cas/tests/src/Functional/CasLoginFormTest.php:30

    ---------- begin diff ----------
@@ @@
       'general[login_link_enabled]' => TRUE,
       'general[login_link_label]' => 'Click here to login!',
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $config = $this->config('cas.settings');
     $this->assertTrue($config->get('login_link_enabled'));
     $this->assertEquals('Click here to login!', $config->get('login_link_label'));
@@ @@
     $cas_user->setPassword('password');
     $cas_user->save();
     $this->container->get('cas.user_manager')->setCasUsernameForAccount($cas_user, 'cas_user');
+    $this->drupalGet('/user/login');

     // Log in in as normal user should work.
-    $this->drupalPostForm('/user/login', [
+    $this->submitForm([
       'name' => 'normal_user',
       'pass' => 'password',
     ], 'Log in');
     $this->assertSession()->addressEquals('/user/' . $normal_user->id());
     $this->drupalLogout();
+    $this->drupalGet('/user/login');

     // Log in as CAS user should not work.
-    $this->drupalPostForm('/user/login', [
+    $this->submitForm([
       'name' => 'cas_user',
       'pass' => 'password',
     ], 'Log in');
@@ @@
     $this->config('cas.settings')
       ->set('error_handling.message_prevent_normal_login', 'Just use the <a href="[cas:login-url]">CAS Login</a>')
       ->save();
+    $this->drupalGet('/user/login');

-    $this->drupalPostForm('/user/login', [
+    $this->submitForm([
       'name' => 'cas_user',
       'pass' => 'password',
     ], 'Log in');
@@ @@
     $edit = [
       'user_accounts[prevent_normal_login]' => FALSE,
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $this->drupalLogout();
+    $this->drupalGet('/user/login');

     // Log in as CAS user should work now.
-    $this->drupalPostForm('/user/login', [
+    $this->submitForm([
       'name' => 'cas_user',
       'pass' => 'password',
     ], 'Log in');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


28) modules/contrib/cas/tests/src/Functional/CasForcedLoginControllerTest.php:26

    ---------- begin diff ----------
@@ @@
       'server[hostname]' => 'fakecasserver.localhost',
       'server[path]' => '/auth',
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');

     $this->drupalLogout();
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


29) modules/contrib/cas/tests/src/Functional/CasEventsTest.php:30

    ---------- begin diff ----------
@@ @@
       'user_accounts[auto_register]' => TRUE,
       'user_accounts[email_hostname]' => 'sample.com',
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');

     $cas_property_bag = new CasPropertyBag('foo');
     \Drupal::service('cas.user_manager')->login($cas_property_bag, 'fake_ticket_string');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


30) modules/contrib/cas/tests/src/Functional/CasBulkAddCasUsersTest.php:24

    ---------- begin diff ----------
@@ @@
       'email_hostname' => 'sample.com',
       'roles[sample_role]' => TRUE,
     ];
+    $this->drupalGet('/admin/people/create/cas-bulk');

-    $this->drupalPostForm('/admin/people/create/cas-bulk', $edit, 'Create new accounts');
+    $this->submitForm($edit, 'Create new accounts');

     $casUserManager = \Drupal::service('cas.user_manager');

@@ @@
     $user_test3 = user_load_by_name('test 3');
     $this->assertNotFalse($user_test3, 'User with username "test 3" exists.');
     $this->assertTrue($user_test3->hasRole('sample_role'), 'The "test 3" user has role "sample_role"');
-    $this->assertEqual('test 3@sample.com', $user_test3->get('mail')->value, 'The "test 3" user has the email "test 3@sample.com".');
+    $this->assertEquals('test 3@sample.com', $user_test3->get('mail')->value, 'The "test 3" user has the email "test 3@sample.com".');
     $this->assertEquals('test 3', $casUserManager->getCasUsernameForAccount($user_test3->id()));

     $user_test4 = user_load_by_name('test4');
     $this->assertNotFalse($user_test4, 'User with username "test4" exists.');
-    $this->assertEqual('test4@sample.com', $user_test4->get('mail')->value, 'The "test4" user has the email "test4@sample.com".');
+    $this->assertEquals('test4@sample.com', $user_test4->get('mail')->value, 'The "test4" user has the email "test4@sample.com".');
     $this->assertTrue($user_test4->hasRole('sample_role'), 'The "test4" user has role "sample_role"');
     $this->assertEquals('test4', $casUserManager->getCasUsernameForAccount($user_test4->id()));
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


31) modules/contrib/cas/tests/src/Functional/CasAutoAssignedRolesTest.php:24

    ---------- begin diff ----------
@@ @@
       'user_accounts[auto_assigned_roles][]' => [$role_1, $role_2],
       'user_accounts[email_hostname]' => 'sample.com',
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');

     $this->assertEquals([$role_1, $role_2], $this->config('cas.settings')->get('user_accounts.auto_assigned_roles'));
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 31 files have been changed by Rector                                      

