modules/contrib/default_content/default_content.module
modules/contrib/default_content/tests/src/Functional/DefaultContentTest.php
modules/contrib/default_content/tests/src/Kernel/MenuLinkContentNormalizerTest.php
modules/contrib/default_content/drush/default_content.drush.inc
modules/contrib/default_content/src/Commands/DefaultContentCommands.php
modules/contrib/default_content/src/Config/DefaultContentConfigSubscriber.php
modules/contrib/default_content/src/ContentFileStorage.php
modules/contrib/default_content/tests/src/Kernel/ParagraphNormalizerTest.php
modules/contrib/default_content/src/ContentFileStorageInterface.php
modules/contrib/default_content/src/Event/DefaultContentEvents.php
modules/contrib/default_content/src/Event/ExportEvent.php
modules/contrib/default_content/src/Event/ImportEvent.php
modules/contrib/default_content/src/Exporter.php
modules/contrib/default_content/tests/src/Kernel/DefaultContentYamlImportTest.php
modules/contrib/default_content/tests/src/Kernel/TranslationNormalizerTest.php
modules/contrib/default_content/src/ExporterInterface.php
modules/contrib/default_content/src/Importer.php
modules/contrib/default_content/tests/src/Kernel/ExporterIntegrationTest.php
modules/contrib/default_content/src/ImporterInterface.php
modules/contrib/default_content/src/Normalizer/ContentEntityNormalizer.php
modules/contrib/default_content/src/Normalizer/ContentEntityNormalizerInterface.php

7 files with changes
====================

1) modules/contrib/default_content/tests/src/Kernel/ExporterIntegrationTest.php:89

    ---------- begin diff ----------
@@ @@
         'format' => 'plain_text',
       ]
     ];
-    $this->assertEqual($expected_description, $exported_decoded['default']['description']);
+    $this->assertEquals($expected_description, $exported_decoded['default']['description']);

     // Tests export of taxonomy parent field.
     $child_term = Term::create([
@@ @@
     $exported_by_entity_type = $this->exporter->exportContentWithReferences('node', $node->id());

     // Ensure that the node type is not tryed to be exported.
-    $this->assertEqual(array_keys($exported_by_entity_type), ['node', 'user']);
+    $this->assertEquals(array_keys($exported_by_entity_type), ['node', 'user']);

     // Ensure the right UUIDs are exported.
-    $this->assertEqual([$node->uuid()], array_keys($exported_by_entity_type['node']));
-    $this->assertEqual([$user->uuid()], array_keys($exported_by_entity_type['user']));
+    $this->assertEquals([$node->uuid()], array_keys($exported_by_entity_type['node']));
+    $this->assertEquals([$user->uuid()], array_keys($exported_by_entity_type['user']));

     // Compare the actual serialized data.
     $meta = [
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/default_content/tests/src/Kernel/DefaultContentYamlImportTest.php:102

    ---------- begin diff ----------
@@ @@
     $extensions['module'] = module_config_sort($extensions['module']);
     $sync->write('core.extension', $extensions);
     // Slightly hacky but we need the config from the test module too.
-    $module_storage = new FileStorage(drupal_get_path('module', 'default_content_test_yaml') . '/config/install');
+    $module_storage = new FileStorage(\Drupal::service('extension.list.module')->getPath('default_content_test_yaml') . '/config/install');
     foreach ($module_storage->listAll() as $name) {
       $sync->write($name, $module_storage->read($name));
     }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/default_content/tests/src/Functional/DefaultContentTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Create user 2 with the correct UUID.
     User::create([
@@ @@
     $extensions['module'] = module_config_sort($extensions['module']);
     $sync->write('core.extension', $extensions);
     // Slightly hacky but we need the config from the test module too.
-    $module_storage = new FileStorage(drupal_get_path('module', 'default_content_test') . '/config/install');
+    $module_storage = new FileStorage(\Drupal::service('extension.list.module')->getPath('default_content_test') . '/config/install');
     foreach ($module_storage->listAll() as $name) {
       $sync->write($name, $module_storage->read($name));
     }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/default_content/src/Importer.php:129

    ---------- begin diff ----------
@@ @@
    */
   public function importContent($module) {
     $created = [];
-    $folder = drupal_get_path('module', $module) . "/content";
+    $folder = \Drupal::service('extension.list.module')->getPath($module) . "/content";

     if (file_exists($folder)) {
       $root_user = $this->entityTypeManager->getStorage('user')->load(1);
@@ @@
           $created[$entity->uuid()] = $entity;
         }
       }
-      $this->eventDispatcher->dispatch(DefaultContentEvents::IMPORT, new ImportEvent($created, $module));
+      $this->eventDispatcher->dispatch(new ImportEvent($created, $module), DefaultContentEvents::IMPORT);
       $this->accountSwitcher->switchBack();
     }
     // Reset the tree.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


5) modules/contrib/default_content/src/Exporter.php:117

    ---------- begin diff ----------
@@ @@
       $folder = dirname(dirname($destination));
       $this->contentFileStorage->writeEntity($folder, $return, $entity, basename($destination));
     }
-    $this->eventDispatcher->dispatch(DefaultContentEvents::EXPORT, new ExportEvent($entity));
+    $this->eventDispatcher->dispatch(new ExportEvent($entity), DefaultContentEvents::EXPORT);

     return $return;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


6) modules/contrib/default_content/src/Event/ImportEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\default_content\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Defines event fired when content is imported.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/default_content/src/Event/ExportEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\default_content\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines event fired when content is exported.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

