modules/contrib/poll/poll.install
modules/contrib/poll/src/Form/PollSettingsForm.php
modules/contrib/poll/tests/src/Kernel/PollVoteStorageTest.php
modules/contrib/poll/tests/src/Functional/PollBlockTest.php
modules/contrib/poll/src/Form/PollViewForm.php
modules/contrib/poll/poll.module
modules/contrib/poll/poll.tokens.inc
modules/contrib/poll/src/Controller/PollController.php
modules/contrib/poll/tests/src/Functional/PollCreateTest.php
modules/contrib/poll/src/Entity/Poll.php
modules/contrib/poll/src/Form/PollVoteDeleteForm.php
modules/contrib/poll/tests/src/Functional/PollDeleteChoiceTest.php
modules/contrib/poll/src/Plugin/Block/PollRecentBlock.php
modules/contrib/poll/src/Entity/PollChoice.php
modules/contrib/poll/src/Plugin/Field/FieldWidget/PollChoiceDefaultWidget.php
modules/contrib/poll/src/Form/PollDeleteForm.php
modules/contrib/poll/tests/src/Functional/PollExpirationTest.php
modules/contrib/poll/src/Form/PollForm.php
modules/contrib/poll/src/Plugin/views/field/PollStatus.php
modules/contrib/poll/tests/src/Functional/PollFieldTest.php
modules/contrib/poll/src/Form/PollItemsDeleteForm.php
modules/contrib/poll/tests/src/Functional/PollFieldUITest.php
modules/contrib/poll/src/Plugin/views/field/PollTotalVotes.php
modules/contrib/poll/src/PollAccessControlHandler.php
modules/contrib/poll/src/PollChoiceInterface.php
modules/contrib/poll/src/PollChoiceTranslationHandler.php
modules/contrib/poll/tests/src/Functional/PollHtmlSpecialCharactersTest.php
modules/contrib/poll/src/PollChoiceTranslationMetadataWrapper.php
modules/contrib/poll/src/PollInterface.php
modules/contrib/poll/src/PollListBuilder.php
modules/contrib/poll/tests/src/Functional/PollListTest.php
modules/contrib/poll/src/PollPostRenderCache.php
modules/contrib/poll/tests/src/Functional/PollTestBase.php
modules/contrib/poll/src/PollStorage.php
modules/contrib/poll/src/PollStorageInterface.php
modules/contrib/poll/src/PollViewBuilder.php
modules/contrib/poll/tests/src/Functional/PollTokenReplaceTest.php
modules/contrib/poll/src/PollViewData.php
modules/contrib/poll/src/PollVoteStorage.php
modules/contrib/poll/src/PollVoteStorageInterface.php
modules/contrib/poll/tests/src/Functional/PollViewTest.php
modules/contrib/poll/tests/src/Functional/PollVoteCheckHostnameTest.php
modules/contrib/poll/tests/src/Functional/PollVoteMultilingualTest.php
modules/contrib/poll/tests/src/Functional/PollVoteTest.php
modules/contrib/poll/tests/src/FunctionalJavascript/PollVoteJavascriptTest.php
modules/contrib/poll/tests/src/Kernel/PollKernelTestBase.php
modules/contrib/poll/tests/src/Kernel/PollResultsTest.php

16 files with changes
=====================

1) modules/contrib/poll/tests/src/Kernel/PollKernelTestBase.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setup();
     $this->installSchema('poll', 'poll_vote');
     $this->installEntitySchema('poll');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/poll/tests/src/FunctionalJavascript/PollVoteJavascriptTest.php:63

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser(array_merge([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/poll/tests/src/Functional/PollVoteTest.php:24

    ---------- begin diff ----------
@@ @@
     $edit = array(
       'choice' => '1',
     );
-    $this->drupalPostForm('poll/' . $this->poll->id(), $edit, t('Vote'));
-    $this->assertText('Your vote has been recorded.');
-    $this->assertText('Total votes: 1');
+    $this->drupalGet('poll/' . $this->poll->id());
+    $this->submitForm($edit, t('Vote'));
+    $this->assertSession()->pageTextContains('Your vote has been recorded.');
+    $this->assertSession()->pageTextContains('Total votes: 1');
     $elements = $this->xpath('//input[@value="Cancel vote"]');
     $this->assertTrue(isset($elements[0]), "'Cancel your vote' button appears.");
+    $this->drupalGet('poll/' . $this->poll->id());

 //    $this->drupalGet('poll/' . $this->poll->id() . '/votes');
 //    $this->assertText(t('This table lists all the recorded votes for this poll. If anonymous users are allowed to vote, they will be identified by the IP address of the computer they used when they voted.'), 'Vote table text.');
@@ @@
 //    $this->assertText('1 vote', 'Poll has 1 vote.');

     // Cancel a vote.
-    $this->drupalPostForm('poll/' . $this->poll->id(), array(), t('Cancel vote'));
-    $this->assertText('Your vote was cancelled.');
-    $this->assertNoText('Cancel your vote');
+    $this->submitForm(array(), t('Cancel vote'));
+    $this->assertSession()->pageTextContains('Your vote was cancelled.');
+    $this->assertSession()->pageTextNotContains('Cancel your vote');
+    $this->drupalGet('poll/' . $this->poll->id());

 //    $this->drupalGet('poll/' . $this->poll->id() . '/votes');
 //    $this->assertNoText($choices[0], 'Vote cancelled');
@@ @@
 //    $this->drupalLogin($restricted_vote_user);

     // Empty vote on a poll.
-    $this->drupalPostForm('poll/' . $this->poll->id(), [], t('Vote'));
-    $this->assertText('Your vote could not be recorded because you did not select any of the choices.');
+    $this->submitForm([], t('Vote'));
+    $this->assertSession()->pageTextContains('Your vote could not be recorded because you did not select any of the choices.');
     $elements = $this->xpath('//input[@value="Vote"]');
     $this->assertTrue(isset($elements[0]), "'Vote' button appears.");

@@ @@
     $edit = array(
       'choice' => '1',
     );
-    $this->drupalPostForm('poll/' . $this->poll->id(), $edit, t('Vote'));
-    $this->assertText('Your vote has been recorded.');
-    $this->assertText('Total votes: 1');
+    $this->drupalGet('poll/' . $this->poll->id());
+    $this->submitForm($edit, t('Vote'));
+    $this->assertSession()->pageTextContains('Your vote has been recorded.');
+    $this->assertSession()->pageTextContains('Total votes: 1');
     $elements = $this->xpath('//input[@value="Cancel your vote"]');
     $this->assertTrue(empty($elements), "'Cancel your vote' button does not appear.");

@@ @@
     $this->drupalLogin($this->admin_user);

     $this->drupalGet('admin/content/poll');
-    $this->assertText($this->poll->label());
+    $this->assertSession()->pageTextContains($this->poll->label());

     $assert_session = $this->assertSession();

@@ @@
       'anonymous_vote_allow[value]' => TRUE,
     );

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Assert that editing was successful.
-    $this->assertText('The poll ' . $this->poll->label() . ' has been updated.');
+    $this->assertSession()->pageTextContains('The poll ' . $this->poll->label() . ' has been updated.');

     // Check if the active label is correct.
     $date = \Drupal::service('date.formatter')->format($this->poll->getCreated() + 172800, 'short');
@@ @@
     // Let the anonymous user to vote.
     $this->drupalLogout();
     $edit = ['choice' => '1'];
-    $this->drupalPostForm('poll/' . $this->poll->id(), $edit, t('Vote'));
+    $this->drupalGet('poll/' . $this->poll->id());
+    $this->submitForm($edit, t('Vote'));

     // Login as admin and check the number of total votes on the overview page.
     $this->drupalLogin($this->admin_user);
@@ @@

     // Cancel the vote from the user, ensure that backend updates.
     $this->drupalLogin($this->web_user);
-    $this->drupalPostForm('poll/' . $this->poll->id(), [], t('Cancel vote'));
-    $this->assertText(t('Your vote was cancelled.'));
+    $this->drupalGet('poll/' . $this->poll->id());
+    $this->submitForm([], t('Cancel vote'));
+    $this->assertSession()->pageTextContains(t('Your vote was cancelled.'));

     // Login as admin and check the number of total votes on the overview page.
     $this->drupalLogin($this->admin_user);
@@ @@
     $edit = array(
       'choice' => $choices[0]['target_id'],
     );
-    $this->drupalPostForm(NULL, $edit, t('Vote'));
+    $this->submitForm($edit, t('Vote'));
     $elements = $this->xpath('//input[@value="Cancel vote"]');
     $this->assertTrue(isset($elements[0]), "'Cancel your vote' button appears.");
     // Close a poll.
@@ @@
     $edit = [
       'status[value]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     // Check closed poll with "Cancel vote" button.
     $this->drupalLogin($this->web_user);
     $this->drupalGet('poll/' . $poll->id());
@@ @@
     $edit = array(
       'choice' => '1',
     );
-    $this->drupalPostForm('poll/' . $this->poll->id(), $edit, t('Vote'));
+    $this->drupalGet('poll/' . $this->poll->id());
+    $this->submitForm($edit, t('Vote'));

     // Change the IP of first user.
     Database::getConnection()->update('poll_vote')
@@ @@

     // Logged user votes.
     $this->drupalLogin($this->web_user);
-    $this->drupalPostForm('poll/' . $this->poll->id(), $edit, t('Vote'));
-    $this->assertText(t('Total votes: @votes', array('@votes' => 2)));
+    $this->drupalGet('poll/' . $this->poll->id());
+    $this->submitForm($edit, t('Vote'));
+    $this->assertSession()->pageTextContains(t('Total votes: @votes', array('@votes' => 2)));

     // Second anonymous user votes from same IP than the logged.
     $this->drupalLogout();
-    $this->drupalPostForm('poll/' . $this->poll->id(), $edit, t('Vote'));
-    $this->assertText(t('Total votes: @votes', array('@votes' => 3)));
+    $this->drupalGet('poll/' . $this->poll->id());
+    $this->submitForm($edit, t('Vote'));
+    $this->assertSession()->pageTextContains(t('Total votes: @votes', array('@votes' => 3)));

     // Second anonymous user cancels own vote.
-    $this->drupalPostForm(NULL, array(), t('Cancel vote'));
+    $this->submitForm(array(), t('Cancel vote'));
+    $this->drupalGet('poll/' . $this->poll->id());

     // Vote again to see the results, resulting in three votes again.
-    $this->drupalPostForm('poll/' . $this->poll->id(), $edit, t('Vote'));
-    $this->assertText(t('Total votes: @votes', array('@votes' => 3)));
+    $this->submitForm($edit, t('Vote'));
+    $this->assertSession()->pageTextContains(t('Total votes: @votes', array('@votes' => 3)));
   }

   /**
@@ @@
     $this->drupalGet('poll/' . $this->poll->id());

     // View the results.
-    $this->drupalPostForm(NULL, [], 'View results');
+    $this->submitForm([], 'View results');
     $this->assertSession()->pageTextContains('Total votes: 0');

     // Go back to the poll.
@@ @@
     $edit = [
       'choice' => '1',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Vote');
+    $this->submitForm($edit, 'Vote');
     $this->assertSession()->pageTextContains('Your vote has been recorded.');
     $this->assertSession()->pageTextContains('Total votes: 1');
   }
@@ @@
     $this->drupalGet('poll/' . $this->poll->id());

     // View the results.
-    $this->drupalPostForm(NULL, [], 'View results');
+    $this->submitForm([], 'View results');
     $this->assertSession()->pageTextContains('Total votes: 0');

     // Go back to the poll.
-    $this->drupalPostForm(NULL, [], 'View poll');
+    $this->submitForm([], 'View poll');

     // And vote.
     $edit = [
       'choice' => '1',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Vote');
+    $this->submitForm($edit, 'Vote');
     $this->assertSession()->pageTextContains('Your vote has been recorded.');
     $this->assertSession()->pageTextContains('Total votes: 1');
   }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/poll/tests/src/Functional/PollVoteMultilingualTest.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Allow anonymous users to vote on polls.
@@ @@
       'settings[poll][poll][translatable]' => TRUE,
       'settings[poll_choice][poll_choice][translatable]' => TRUE,
     );
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));
     \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();

     // Translate a poll.
@@ @@
       'choice[1][choice]' => 'ca choice 2',
       'choice[2][choice]' => 'ca choice 3',
     );
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->drupalGet('ca/poll/' . $this->poll->id());
-    $this->assertText('ca choice 1');
+    $this->assertSession()->pageTextContains('ca choice 1');

     \Drupal::entityTypeManager()->getStorage('poll')->resetCache();
     \Drupal::entityTypeManager()->getStorage('poll_choice')->resetCache();
@@ @@
     $edit = array(
       'choice' => $this->getChoiceId($this->poll, 2),
     );
-    $this->drupalPostForm('poll/' . $this->poll->id(), $edit, t('Vote'));
-    $this->assertText('Your vote has been recorded.');
-    $this->assertText('Total votes: 1');
+    $this->drupalGet('poll/' . $this->poll->id());
+    $this->submitForm($edit, t('Vote'));
+    $this->assertSession()->pageTextContains('Your vote has been recorded.');
+    $this->assertSession()->pageTextContains('Total votes: 1');

     $this->drupalGet('ca/poll/' . $this->poll->id());
     $elements = $this->xpath('//input[@value="Cancel vote"]');
     $this->assertTrue(isset($elements[0]), "'Cancel vote' button appears.");
+    $this->drupalGet('poll/' . $this->poll->id());

     // Cancel a vote.
-    $this->drupalPostForm('poll/' . $this->poll->id(), array(), t('Cancel vote'));
-    $this->assertText('Your vote was cancelled.');
-    $this->assertNoText('Cancel your vote');
+    $this->submitForm(array(), t('Cancel vote'));
+    $this->assertSession()->pageTextContains('Your vote was cancelled.');
+    $this->assertSession()->pageTextNotContains('Cancel your vote');

     // Vote again in reverse order.
     $edit = array(
       'choice' => $this->getChoiceIdByLabel($this->poll->getTranslation('ca'), 'ca choice 2'),
     );
-    $this->drupalPostForm('ca/poll/' . $this->poll->id(), $edit, t('Vote'));
-    $this->assertText('Your vote has been recorded.');
-    $this->assertText('Total votes: 1');
+    $this->drupalGet('ca/poll/' . $this->poll->id());
+    $this->submitForm($edit, t('Vote'));
+    $this->assertSession()->pageTextContains('Your vote has been recorded.');
+    $this->assertSession()->pageTextContains('Total votes: 1');

     $this->drupalGet('poll/' . $this->poll->id());
     $elements = $this->xpath('//input[@value="Cancel vote"]');
@@ @@
       'choice[2][choice]' => 'choice 3',
       'choice[3][choice]' => 'choice 4',
     );
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Translate the new label.
     $this->drupalGet('ca/poll/' . $this->poll->id() . '/edit');
@@ @@
     $edit = array(
       'choice[2][choice]' => 'ca choice 4',
     );
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     \Drupal::entityTypeManager()->getStorage('poll')->resetCache();
     \Drupal::entityTypeManager()->getStorage('poll_choice')->resetCache();
@@ @@
     $edit = array(
       'choice' => $this->getChoiceIdByLabel($this->poll->getTranslation('ca'), 'ca choice 4'),
     );
-    $this->drupalPostForm('ca/poll/' . $this->poll->id(), $edit, t('Vote'));
-    $this->assertText('Your vote has been recorded.');
-    $this->assertText('Total votes: 2');
-    $this->assertNoText('ca choice 1');
-    $this->assertText('ca choice 4');
+    $this->drupalGet('ca/poll/' . $this->poll->id());
+    $this->submitForm($edit, t('Vote'));
+    $this->assertSession()->pageTextContains('Your vote has been recorded.');
+    $this->assertSession()->pageTextContains('Total votes: 2');
+    $this->assertSession()->pageTextNotContains('ca choice 1');
+    $this->assertSession()->pageTextContains('ca choice 4');
     $elements = $this->xpath('//*[@id="poll-view-form-2"]/div[1]/dl/dd[1]')[0];
-    $this->assertEqual($elements->getText(), '50% (1 vote)');
+    $this->assertEquals($elements->getText(), '50% (1 vote)');
     $elements = $this->xpath('//*[@id="poll-view-form-2"]/div[1]/dl/dd[3]')[0];
-    $this->assertEqual($elements->getText(), '50% (1 vote)');
+    $this->assertEquals($elements->getText(), '50% (1 vote)');

     $this->drupalGet('poll/' . $this->poll->id());
     $elements = $this->xpath('//input[@value="Cancel vote"]');
     $this->assertTrue(isset($elements[0]), "'Cancel vote' button appears.");
-    $this->assertText('Total votes: 2');
+    $this->assertSession()->pageTextContains('Total votes: 2');
     $elements = $this->xpath('//*[@id="poll-view-form-2"]/div[1]/dl/dd[1]')[0];
-    $this->assertEqual($elements->getText(), '50% (1 vote)');
+    $this->assertEquals($elements->getText(), '50% (1 vote)');
     $elements = $this->xpath('//*[@id="poll-view-form-2"]/div[1]/dl/dd[3]')[0];
-    $this->assertEqual($elements->getText(), '50% (1 vote)');
+    $this->assertEquals($elements->getText(), '50% (1 vote)');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/poll/tests/src/Functional/PollVoteCheckHostnameTest.php:11

    ---------- begin diff ----------
@@ @@
  */
 class PollVoteCheckHostnameTest extends PollTestBase {

-  function setUp() {
+  function setUp(): void {
     parent::setUp();

     // Allow anonymous users to vote on polls.
@@ @@
     $edit = array(
       'choice' => '1',
     );
+    $this->drupalGet('poll/' . $this->poll->id());

     //  $this->web_user->getUserName();
     // User1 vote on Poll.
-    $this->drupalPostForm('poll/' . $this->poll->id(), $edit, t('Vote'));
-    $this->assertText(t('Your vote has been recorded.'));
-    $this->assertText(t('Total votes: @votes', array('@votes' => 1)));
+    $this->submitForm($edit, t('Vote'));
+    $this->assertSession()->pageTextContains(t('Your vote has been recorded.'));
+    $this->assertSession()->pageTextContains(t('Total votes: @votes', array('@votes' => 1)));

     // Check to make sure User1 cannot vote again.
     $this->drupalGet('poll/' . $this->poll->id());
@@ @@

     // Fill the page cache by requesting the poll.
     $this->drupalGet('poll/' . $this->poll->id());
-    $this->assertEqual($this->drupalGetHeader('x-drupal-cache'), 'MISS', 'Page was cacheable but was not in the cache.');
+    $this->assertEquals($this->drupalGetHeader('x-drupal-cache'), 'MISS', 'Page was cacheable but was not in the cache.');
     $this->drupalGet('poll/' . $this->poll->id());
-    $this->assertEqual($this->drupalGetHeader('x-drupal-cache'), 'HIT', 'Page was cached.');
+    $this->assertEquals($this->drupalGetHeader('x-drupal-cache'), 'HIT', 'Page was cached.');

     // Anonymous user vote on Poll.
-    $this->drupalPostForm(NULL, $edit, t('Vote'));
-    $this->assertText(t('Your vote has been recorded.'));
-    $this->assertText(t('Total votes: @votes', array('@votes' => 2)));
+    $this->submitForm($edit, t('Vote'));
+    $this->assertSession()->pageTextContains(t('Your vote has been recorded.'));
+    $this->assertSession()->pageTextContains(t('Total votes: @votes', array('@votes' => 2)));
     $elements = $this->xpath('//input[@value="Cancel vote"]');
     $this->assertTrue(!empty($elements), "'Cancel vote' button appears.");

@@ @@

     // Login User2.
     $this->drupalLogin($web_user2);
+    $this->drupalGet('poll/' . $this->poll->id());

     // User2 vote on poll.
-    $this->drupalPostForm('poll/' . $this->poll->id(), $edit, t('Vote'));
-    $this->assertText(t('Your vote has been recorded.'));
-    $this->assertText(t('Total votes: @votes', array('@votes' => 3)));
+    $this->submitForm($edit, t('Vote'));
+    $this->assertSession()->pageTextContains(t('Your vote has been recorded.'));
+    $this->assertSession()->pageTextContains(t('Total votes: @votes', array('@votes' => 3)));
     $elements = $this->xpath('//input[@value="Cancel vote"]');
     $this->assertTrue(empty($elements), "'Cancel vote' button does not appear.");

@@ @@
     // Check to make sure Anonymous user can vote again with a new session after
     // a hostname change.
     $this->drupalGet('poll/' . $this->poll->id());
-    $this->assertEqual($this->drupalGetHeader('x-drupal-cache'), 'HIT', 'Cached page return.');
-    $this->drupalPostForm(NULL, $edit, t('Vote'));
-    $this->assertText(t('Your vote has been recorded.'));
-    $this->assertText(t('Total votes: @votes', array('@votes' => 4)));
+    $this->assertEquals($this->drupalGetHeader('x-drupal-cache'), 'HIT', 'Cached page return.');
+    $this->submitForm($edit, t('Vote'));
+    $this->assertSession()->pageTextContains(t('Your vote has been recorded.'));
+    $this->assertSession()->pageTextContains(t('Total votes: @votes', array('@votes' => 4)));
     $elements = $this->xpath('//input[@value="Cancel vote"]');
     $this->assertTrue(!empty($elements), "'Cancel vote' button appears.");

@@ @@
     // manually unset the session cookie.
     $this->getSession()->setCookie($this->getSessionName());
     $this->drupalGet('poll/' . $this->poll->id());
-    $this->assertEqual($this->drupalGetHeader('x-drupal-cache'), 'HIT', 'Page was cacheable but was not in the cache.');
-    $this->drupalPostForm(NULL, $edit, t('Vote'));
-    $this->assertText(t('Your vote for this poll has already been submitted.'));
+    $this->assertEquals($this->drupalGetHeader('x-drupal-cache'), 'HIT', 'Page was cacheable but was not in the cache.');
+    $this->submitForm($edit, t('Vote'));
+    $this->assertSession()->pageTextContains(t('Your vote for this poll has already been submitted.'));
     $elements = $this->xpath('//input[@value="Cancel vote"]');
     $this->assertTrue(empty($elements), "'Cancel vote' button does not appear.");
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/poll/tests/src/Functional/PollViewTest.php:13

    ---------- begin diff ----------
@@ @@
    */
   function testAdminView() {
     $this->drupalGet('admin/content/poll');
-    $this->assertResponse(200);
-    $this->assertText($this->poll->label());
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains($this->poll->label());

     // Delete all polls, make sure that we get an empty message.
     $this->poll->delete();

     $this->drupalGet('admin/content/poll');
-    $this->assertText('No polls are available.');
+    $this->assertSession()->pageTextContains('No polls are available.');

     $test_user = $this->createUser(['access administration pages']);
     $this->drupalLogin($test_user);
     $this->drupalGet('admin/content/poll');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }
 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/poll/tests/src/Functional/PollTokenReplaceTest.php:25

    ---------- begin diff ----------
@@ @@
     $edit = array(
       'choice' => $this->getChoiceId($poll, 1),
     );
-    $this->drupalPostForm('poll/' . $poll_nid, $edit, t('Vote'));
+    $this->drupalGet('poll/' . $poll_nid);
+    $this->submitForm($edit, t('Vote'));
     $this->drupalLogout();

     $vote_user2 = $this->drupalCreateUser(array('access polls', 'access content'));
@@ @@
     $edit = array(
       'choice' => $this->getChoiceId($poll, 1),
     );
-    $this->drupalPostForm('poll/' . $poll_nid, $edit, t('Vote'));
+    $this->drupalGet('poll/' . $poll_nid);
+    $this->submitForm($edit, t('Vote'));
     $this->drupalLogout();

     $vote_user3 = $this->drupalCreateUser(array('access polls', 'access content'));
@@ @@
     $edit = array(
       'choice' => $this->getChoiceId($poll, 2),
     );
-    $this->drupalPostForm('poll/' . $poll_nid, $edit, t('Vote'));
+    $this->drupalGet('poll/' . $poll_nid);
+    $this->submitForm($edit, t('Vote'));
     $this->drupalLogout();

     $vote_user4 = $this->drupalCreateUser(array('access polls', 'access content'));
@@ @@
     $edit = array(
       'choice' => $this->getChoiceId($poll, 3),
     );
-    $this->drupalPostForm('poll/' . $poll_nid, $edit, t('Vote'));
+    $this->drupalGet('poll/' . $poll_nid);
+    $this->submitForm($edit, t('Vote'));
     $this->drupalLogout();

     /** @var \Drupal\poll\Entity\Poll $poll */
@@ @@
     $token = \Drupal::service('token');
     foreach ($tests as $input => $expected) {
       $output = $token->replace($input, array('poll' => $poll));
-      $this->assertEqual($output, $expected, "Sanitized poll token $input replaced.");
+      $this->assertEquals($output, $expected, "Sanitized poll token $input replaced.");
     }

     // Generate and test unsanitized tokens.
@@ @@

     foreach ($tests as $input => $expected) {
       $output = $token->replace($input, array('poll' => $poll), array('sanitize' => FALSE));
-      $this->assertEqual($output, $expected, "Unsanitized poll token $input replaced.");
+      $this->assertEquals($output, $expected, "Unsanitized poll token $input replaced.");
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/poll/tests/src/Functional/PollTestBase.php:54

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('local_tasks_block');
@@ @@
     // Re-submit the form until all choices are filled in.
     if (count($choices) > 0) {
       for ($delta = 0; $delta <= count($choices); $delta++) {
-        $this->drupalPostForm(NULL, $edit, t('Add another item'));
+        $this->submitForm($edit, t('Add another item'));
         list($edit, $index) = $this->pollGenerateEdit($question, $choices, $index);
       }
     }
@@ @@
 //      list($edit, $index) = $this->pollGenerateEdit($title, $choices, $index);
 //    }

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Load the first poll returned from the database.
     $polls = \Drupal::entityTypeManager()
@@ @@
       ->getStorage('poll')
       ->loadByProperties(array('question' => $question));
     $poll = reset($polls);
-    $this->assertText(t('The poll @question has been added.', array('@question' => $question)));
+    $this->assertSession()->pageTextContains(t('The poll @question has been added.', array('@question' => $question)));
     $this->assertInstanceOf(PollInterface::class, $poll);

     return $poll instanceof PollInterface ? $poll : FALSE;
@@ @@
     foreach ($choices as $id => $label) {
       if ($id < $index) {
         // Directly assert the weight form element value for this choice.
-        $this->assertFieldByName('choice[' . $id . '][_weight]', $weight);
+        $this->assertSession()->fieldValueEquals('choice[' . $id . '][_weight]', $weight);
         // The expected weight of each choice is higher than the previous one.
         $weight++;
         // Append to our (to be reversed) stack of labels.
@@ @@
     $expected_order = $expected;
     foreach ($elements as $element) {
       $next_label = array_shift($expected_order);
-      $this->assertEqual((string) $element['value'], $next_label);
+      $this->assertEquals((string) $element['value'], $next_label);
     }

     // If requested, also verify DOM order in preview.
@@ @@
       $expected_order = $expected;
       foreach ($elements as $element) {
         $next_label = array_shift($expected_order);
-        $this->assertEqual((string) $element, $next_label, "Found choice $next_label in preview.");
+        $this->assertEquals((string) $element, $next_label, "Found choice $next_label in preview.");
       }
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/poll/tests/src/Functional/PollListTest.php:19

    ---------- begin diff ----------
@@ @@
     $this->drupalLogin($this->web_user);

     $this->drupalGet('admin/content/poll');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $this->drupalGet('polls');
-    $this->assertText($poll->label());
-    $this->assertText($poll2->label());
+    $this->assertSession()->pageTextContains($poll->label());
+    $this->assertSession()->pageTextContains($poll2->label());

     // Check to see if the vote was recorded.
     $edit = array('choice' => $this->getChoiceId($poll, 1));
-    $this->drupalPostForm(NULL, $edit, t('Vote'), [], 'poll-view-form-1');
-    $this->assertText('Your vote has been recorded.');
+    $this->submitForm($edit, t('Vote'), 'poll-view-form-1');
+    $this->assertSession()->pageTextContains('Your vote has been recorded.');

     // Check overview list with "access poll overview" permission
     $account = $this->drupalCreateUser([
@@ @@
     ]);
     $this->drupalLogin($account);
     $this->drupalGet('admin/content/poll');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/poll/tests/src/Functional/PollHtmlSpecialCharactersTest.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  function setUp() {
+  function setUp(): void {
     parent::setUp();

     $this->special_choice = '> old & spice <';
@@ @@
   public function testPollQuestion() {
     // Verify user can view poll.
     $this->drupalGet('poll/' . $this->poll->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Verify the page title.
     $result = $this->xpath("//div[contains(concat(' ', @class, ' '), ' block-page-title-block ')]/h1");
-    $this->assertEqual($this->page_title, $result[0]->getText(), 'HTML entities displayed correctly in page title.');
+    $this->assertEquals($this->page_title, $result[0]->getText(), 'HTML entities displayed correctly in page title.');
+    $this->drupalGet('poll/' . $this->poll->id());

     // Verify the poll title is escaped correctly in the poll results.
-    $this->drupalPostForm('poll/' . $this->poll->id(), ['choice' => 1], t('Vote'));
-    $this->assertText('Your vote has been recorded.');
+    $this->submitForm(['choice' => 1], t('Vote'));
+    $this->assertSession()->pageTextContains('Your vote has been recorded.');
     $this->drupalGet('polls');
     $this->assertSession()->elementTextContains('css', 'h3.poll-question', $this->page_title);
   }
@@ @@

     // View the updated poll.
     $this->drupalGet('poll/' . $this->poll->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Verify the updated choice.
     $result = $this->xpath("//div[@id='edit-choice']/div[1]/label/text()");
-    $this->assertEqual($this->special_choice, $result[0]->getText(), 'HTML entities displayed correctly in choice option.');
+    $this->assertEquals($this->special_choice, $result[0]->getText(), 'HTML entities displayed correctly in choice option.');
+    $this->drupalGet('poll/' . $this->poll->id());

     // Vote.
-    $this->drupalPostForm('poll/' . $this->poll->id(), ['choice' => 1], t('Vote'));
-    $this->assertText('Your vote has been recorded.');
-    $this->assertText('Total votes: 1');
+    $this->submitForm(['choice' => 1], t('Vote'));
+    $this->assertSession()->pageTextContains('Your vote has been recorded.');
+    $this->assertSession()->pageTextContains('Total votes: 1');

     // Verify the results page.
     $result = $this->xpath('//*[@id="poll-view-form-1"]/div/dl/dt[1]/text()');
-    $this->assertEqual($this->special_choice, $result[0]->getText(), 'HTML entities displayed correctly in vote results.');
+    $this->assertEquals($this->special_choice, $result[0]->getText(), 'HTML entities displayed correctly in vote results.');
   }
 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/poll/tests/src/Functional/PollFieldUITest.php:64

    ---------- begin diff ----------
@@ @@
       'label' => 'poll',
       'field_name' => 'poll',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save and continue');
+    $this->submitForm($edit, 'Save and continue');

     $edit = [
       'settings[target_type]' => 'poll',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save field settings');
-    $this->assertText('Updated field poll field settings.');
+    $this->submitForm($edit, 'Save field settings');
+    $this->assertSession()->pageTextContains('Updated field poll field settings.');

     $edit = [
       'label' => 'field_poll',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
-    $this->assertText('Saved field_poll configuration.');
+    $this->submitForm($edit, 'Save settings');
+    $this->assertSession()->pageTextContains('Saved field_poll configuration.');

     // Ensure that the newly created field is listed.
-    $this->assertText($edit['label']);
+    $this->assertSession()->pageTextContains($edit['label']);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/poll/tests/src/Functional/PollFieldTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Add breadcrumb block.
     $this->drupalPlaceBlock('system_breadcrumb_block');
@@ @@
     $this->fieldUIAddNewField('admin/config/content/poll', 'text', 'Text field', 'string');
     // Test field form display.
     $this->drupalGet('admin/config/content/poll/form-display');
-    $this->assertText('Number field');
-    $this->assertText('Text field');
+    $this->assertSession()->pageTextContains('Number field');
+    $this->assertSession()->pageTextContains('Text field');
     // Test edit poll form.
     $this->drupalGet('poll/' . $poll->id() . '/edit');
-    $this->assertText('Number field');
-    $this->assertText('Text field');
+    $this->assertSession()->pageTextContains('Number field');
+    $this->assertSession()->pageTextContains('Text field');
     $edit = array(
       'field_number[0][value]' => random_int(10, 1000),
       'field_text[0][value]' => $this->randomString(),
     );
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     // Test view poll form.
     $this->drupalGet('poll/' . $poll->id());
-    $this->assertText('Number field');
-    $this->assertText('Text field');
+    $this->assertSession()->pageTextContains('Number field');
+    $this->assertSession()->pageTextContains('Text field');
   }
 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/poll/tests/src/Functional/PollExpirationTest.php:22

    ---------- begin diff ----------
@@ @@
     // is set to unlimited.
     $this->drupalLogin($this->admin_user);
     $this->drupalGet('poll/' . $poll->id(). '/edit');
-    $this->assertField('runtime');
+    $this->assertSession()->fieldExists('runtime');
     $elements = $this->xpath('//select[@id="edit-runtime"]/option[@selected="selected"]');
     $this->assertEquals(0, $elements[0]->getAttribute('value'), 'Poll expiration set to unlimited.');
    ----------- end diff -----------

Applied rules:
 * AssertFieldRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/poll/tests/src/Functional/PollDeleteChoiceTest.php:15

    ---------- begin diff ----------
@@ @@
     $ids = \Drupal::entityQuery('poll_choice')
       ->condition('choice', $this->poll->choice[0]->entity->label())
       ->execute();
-    $this->assertEqual(count($ids), 1, 'Choice 1 exists in the database');
+    $this->assertEquals(count($ids), 1, 'Choice 1 exists in the database');

     // Record a vote for the second choice.
     $edit = array(
       'choice' => $this->poll->choice[1]->target_id,
     );
-    $this->drupalPostForm('poll/' . $this->poll->id(), $edit, t('Vote'));
+    $this->drupalGet('poll/' . $this->poll->id());
+    $this->submitForm($edit, t('Vote'));

     // Assert the selected option.
     $xml = $this->xpath('//dt[text()=:choice]/following-sibling::dd[1]/div', [':choice' => $this->poll->choice[1]->entity->label()]);
-    $this->assertEqual(1, $xml[0]->getAttribute('data-value'));
+    $this->assertEquals(1, $xml[0]->getAttribute('data-value'));

     // Edit the poll, and try to delete first poll choice.
     $this->drupalGet("poll/" . $this->poll->id() . "/edit");
     $edit = ['choice[0][choice]' => ''];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Click on the poll title to go to poll page.
     $this->drupalGet('admin/content/poll');
@@ @@
     $this->clickLink($this->poll->label());

     // Check the first poll choice is deleted, while the others remain.
-    $this->assertNoText($this->poll->choice[0]->entity->label());
-    $this->assertText($this->poll->choice[1]->entity->label());
-    $this->assertText($this->poll->choice[2]->entity->label());
+    $this->assertSession()->pageTextNotContains($this->poll->choice[0]->entity->label());
+    $this->assertSession()->pageTextContains($this->poll->choice[1]->entity->label());
+    $this->assertSession()->pageTextContains($this->poll->choice[2]->entity->label());

     $ids = \Drupal::entityQuery('poll_choice')
       ->condition('choice', $this->poll->choice[0]->entity->label())
       ->execute();
-    $this->assertEqual(count($ids), 0, 'Choice 1 has been deleted in the database');
+    $this->assertEquals(count($ids), 0, 'Choice 1 has been deleted in the database');

     // Ensure that the existing vote still shows.
     $this->drupalGet('poll/' . $this->poll->id());
@@ @@

     // Assert the selected option.
     $xml = $this->xpath('//dt[text()=:choice]/following-sibling::dd[1]/div', [':choice' => $this->poll->choice[1]->entity->label()]);
-    $this->assertEqual(1, $xml[0]->getAttribute('data-value'));
+    $this->assertEquals(1, $xml[0]->getAttribute('data-value'));

     // Edit the poll, and try to delete first poll choice.
     $this->drupalGet("poll/" . $this->poll->id() . "/edit");
@@ @@
     $edit = [
       'choice[0][choice]' => '',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Click on the poll title to go to poll page.
     $this->drupalGet('admin/content/poll');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/poll/tests/src/Functional/PollCreateTest.php:18

    ---------- begin diff ----------
@@ @@
     // Check we loaded the right poll.
     $this->drupalLogin($this->admin_user);
     $this->drupalGet('poll/' . $poll->id() . '/edit');
-    $this->assertText($poll->label());
+    $this->assertSession()->pageTextContains($poll->label());

     // Verify applying condition for non-active polls.
     $this->drupalGet('admin/content/poll', ['query' => ['status' => '2']]);
-    $this->assertNoText($poll->label());
+    $this->assertSession()->pageTextNotContains($poll->label());

     // Verify poll appears on 'poll' page.
     $this->drupalGet('admin/content/poll');
-    $this->assertText($poll->label());
-    $this->assertText('Y');
+    $this->assertSession()->pageTextContains($poll->label());
+    $this->assertSession()->pageTextContains('Y');

     // Click on the poll question to go to poll page.
     $this->clickLink($poll->label());
@@ @@

     // Check the new question has taken effect.
     $this->drupalGet('poll/' . $poll->id() . '/edit');
-    $this->assertText($new_question);
+    $this->assertSession()->pageTextContains($new_question);

     // Now add a new option to make sure that when we update the poll, the
     // option is displayed.
@@ @@

     // Poll create disallowed.
     $this->drupalGet('poll/add');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Get a poll.
     $this->drupalGet('poll/' . $poll->id());
@@ @@

     // Check to see if the vote was recorded and that the user may cancel their vote.
     $edit = array('choice' => 1);
-    $this->drupalPostForm(NULL, $edit, t('Vote'));
-    $this->assertText('Your vote has been recorded.');
+    $this->submitForm($edit, t('Vote'));
+    $this->assertSession()->pageTextContains('Your vote has been recorded.');
     $elements = $this->xpath('//input[@value="Cancel vote"]');
     $this->assertTrue(isset($elements[0]), "'Cancel vote' button appears.");

@@ @@
     $this->drupalLogin($account);
     // Create poll allowed.
     $this->drupalGet('poll/add');
-    $this->assertResponse(200);
-    $this->assertNoFieldByName('uid[0][target_id]', NULL);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldNotExists('uid[0][target_id]');
     // create poll and test edit
     $own_poll = $this->pollCreate(7, $account);
     $this->drupalGet('poll/' . $admin_poll->id() . '/edit');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet('poll/' . $own_poll->id() . '/edit');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // test another user with "edit own poll" permission
     $account = $this->drupalCreateUser([
       'create polls',
@@ @@
     $this->drupalLogin($account);
     $own_poll = $this->pollCreate(7, $account);
     $this->drupalGet('poll/' . $admin_poll->id() . '/edit');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet('poll/' . $own_poll->id() . '/edit');
-    $this->assertResponse(200);
-    $this->assertNoFieldByName('uid[0][target_id]', NULL);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldNotExists('uid[0][target_id]');
   }
 }
    ----------- end diff -----------

Applied rules:
 * AssertNoFieldByNameRector
 * AssertNoTextRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


16) modules/contrib/poll/tests/src/Functional/PollBlockTest.php:15

    ---------- begin diff ----------
@@ @@
    */
   public static $modules = array('block');

-  function setUp() {
+  function setUp(): void {
     parent::setUp();

     // Enable the recent poll block.
@@ @@
     $edit = array(
       'choice' => '1',
     );
-    $this->drupalPostForm('user/' . $this->web_user->id(), $edit, t('Vote'));
+    $this->drupalGet('user/' . $this->web_user->id());
+    $this->submitForm($edit, t('Vote'));
     $this->assertSession()->pageTextContains('Your vote has been recorded.');
     $this->assertSession()->pageTextContains('Total votes: 1');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 16 files have been changed by Rector                                      

