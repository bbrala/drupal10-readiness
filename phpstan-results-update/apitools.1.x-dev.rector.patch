diff --git a/src/ClientObjectControllerBase.php b/src/ClientObjectControllerBase.php
index 05aed1b..60b1b00 100644
--- a/src/ClientObjectControllerBase.php
+++ b/src/ClientObjectControllerBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\apitools;
 
+use Drupal\Component\Plugin\Exception\InvalidDecoratedMethod;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -93,7 +94,7 @@ abstract class ClientObjectControllerBase implements ClientObjectControllerInter
 
   protected function sendRequest($controller_method, $client_method, $id = NULL, $options = []) {
     if (!$path = $this->buildPath($controller_method, $id)) {
-      throw new \Drupal\Component\Plugin\Exception\InvalidDecoratedMethod($this->t('No path defined for @method', ['@method' => $controller_method]));
+      throw new InvalidDecoratedMethod($this->t('No path defined for @method', ['@method' => $controller_method]));
     }
     return $this->request($client_method, $path, $options);
   }
diff --git a/src/Plugin/Action/WorkflowStateAction.php b/src/Plugin/Action/WorkflowStateAction.php
index 58464dc..1f7e59e 100644
--- a/src/Plugin/Action/WorkflowStateAction.php
+++ b/src/Plugin/Action/WorkflowStateAction.php
@@ -125,10 +125,10 @@ class WorkflowStateAction extends FieldUpdateActionBase implements ContainerFact
     $event->setOriginalStatuses($original_statuses)
       ->setToState($this->configuration['state_id']);
 
-    $this->eventDispatcher->dispatch("entity.bulk_pre_update", $event);
+    $this->eventDispatcher->dispatch($event, "entity.bulk_pre_update");
     $this->eventDispatcher->dispatch("entity.$entity_type.bulk_pre_update", $event);
     parent::executeMultiple($entities);
-    $this->eventDispatcher->dispatch("entity.bulk_post_update", $event);
+    $this->eventDispatcher->dispatch($event, "entity.bulk_post_update");
     $this->eventDispatcher->dispatch("entity.$entity_type.bulk_post_update", $event);
   }
 }
diff --git a/tests/modules/apitools_test/src/Plugin/ApiTools/Client.php b/tests/modules/apitools_test/src/Plugin/ApiTools/Client.php
index 98bee07..043487f 100644
--- a/tests/modules/apitools_test/src/Plugin/ApiTools/Client.php
+++ b/tests/modules/apitools_test/src/Plugin/ApiTools/Client.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\apitools_test\Plugin\ApiTools;
 
+use Drupal\apitools\Utility\ParameterBag;
 use Drupal\apitools\ClientBase;
 use Drupal\apitools\ClientManagerInterface;
 use Drupal\apitools\ObjectManagerInterface;
@@ -74,7 +75,7 @@ class Client extends ClientBase {
       // create a new mxmerchant client from that.
       $configuration = $gateway->getPluginConfiguration();
 
-      $this->params = new \Drupal\apitools\Utility\ParameterBag([
+      $this->params = new ParameterBag([
         'oauth_callback' => '',
         'oauth_consumer_key' => '',
         'oauth_nonce' => sha1(microtime()),
diff --git a/tests/modules/apitools_test/src/Plugin/ApiTools/Client/AddressController.php b/tests/modules/apitools_test/src/Plugin/ApiTools/Client/AddressController.php
index ca5bbc6..2341701 100644
--- a/tests/modules/apitools_test/src/Plugin/ApiTools/Client/AddressController.php
+++ b/tests/modules/apitools_test/src/Plugin/ApiTools/Client/AddressController.php
@@ -2,15 +2,17 @@
 
 namespace Drupal\apitools_test\Plugin\ApiTools\Client;
 
+use Drupal\commerce_mxmerchant\Plugin\ApiTools\Model\Address;
+use Drupal\profile\Entity\ProfileInterface;
 use Drupal\apitools\ClientObjectControllerDefault;
 
 class AddressController extends ClientObjectControllerDefault {
 
   public static function getAddressMapping($type = 'all') {
-    return \Drupal\commerce_mxmerchant\Plugin\ApiTools\Model\Address::getAddressMapping($type);
+    return Address::getAddressMapping($type);
   }
 
-  public function createFromProfile(\Drupal\profile\Entity\ProfileInterface $profile) {
+  public function createFromProfile(ProfileInterface $profile) {
     $model = $this->create([])->setProfile($profile);
     $address = $profile->address->first()->getValue();
     foreach (self::getAddressMapping() as $drupal_key => $mx_key) {
@@ -37,7 +39,7 @@ class AddressController extends ClientObjectControllerDefault {
   /**
    * Loads an address with a customer context.
    */
-  public function getByProfile(\Drupal\profile\Entity\ProfileInterface $profile) {
+  public function getByProfile(ProfileInterface $profile) {
     $address = FALSE;
     if ($id = $profile->commerce_remote_id->remote_id) {
       if (!$customer = $this->getClient()->customers->getByProfile($profile)) {
diff --git a/tests/modules/apitools_test/src/Plugin/ApiTools/Client/CustomerController.php b/tests/modules/apitools_test/src/Plugin/ApiTools/Client/CustomerController.php
index a366304..aae43cd 100644
--- a/tests/modules/apitools_test/src/Plugin/ApiTools/Client/CustomerController.php
+++ b/tests/modules/apitools_test/src/Plugin/ApiTools/Client/CustomerController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\apitools_test\Plugin\ApiTools\Client;
 
+use Drupal\user\Entity\User;
 use Drupal\apitools\ClientObjectControllerDefault;
 use Drupal\profile\Entity\ProfileInterface;
 use Drupal\user\UserInterface;
@@ -38,7 +39,7 @@ class CustomerController extends ClientObjectControllerDefault {
   }
 
   public function getByUid($uid, array $options = []) {
-    if (!$user = \Drupal\user\Entity\User::load($uid)) {
+    if (!$user = User::load($uid)) {
       return FALSE;
     }
     return $this->getByUser($user);
@@ -64,7 +65,7 @@ class CustomerController extends ClientObjectControllerDefault {
   }
 
   public function getIdByUid($uid, array $options = []) {
-    if ($user = \Drupal\user\Entity\User::load($uid)) {
+    if ($user = User::load($uid)) {
       return $this->getIdByUser($user, $options);
     }
     return FALSE;
