diff --git a/search_autocomplete.info.yml b/search_autocomplete.info.yml
index 32ebd83..d6026b2 100644
--- a/search_autocomplete.info.yml
+++ b/search_autocomplete.info.yml
@@ -1,7 +1,7 @@
 name: Search Autocomplete
 type: module
 description: Provides autocompletion feature for fields in your Drupal site. This module ships with pre-existing autocompletion configurations.
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^9.3 || ^10
 package: Search
 dependencies:
   - drupal:views
diff --git a/search_autocomplete.module b/search_autocomplete.module
index 99ef4f1..2c8bdba 100644
--- a/search_autocomplete.module
+++ b/search_autocomplete.module
@@ -184,7 +184,7 @@ function search_autocomplete_library_info_build() {
 
   // Find all available themes.
   $themes = [];
-  $files = \Drupal::service('file_system')->scanDirectory(drupal_get_path('module', 'search_autocomplete') . '/css/themes', '/.*\.css\z/', ['recurse' => FALSE]);
+  $files = \Drupal::service('file_system')->scanDirectory(\Drupal::service('extension.list.module')->getPath('search_autocomplete') . '/css/themes', '/.*\.css\z/', ['recurse' => FALSE]);
 
   // Create a new library for all themes.
   foreach ($files as $file) {
@@ -206,7 +206,7 @@ function search_autocomplete_library_info_build() {
 function search_autocomplete_library_info_alter(array &$libraries, $extension) {
   if ($extension == 'core' && isset($libraries['drupal.autocomplete'])) {
     $libraries['drupal.autocomplete']['js'] = array_merge($libraries['drupal.autocomplete']['js'], [
-      '/' . drupal_get_path('module', 'search_autocomplete') . '/js/jquery.autocomplete.js' => ['weight' => 0],
+      '/' . \Drupal::service('extension.list.module')->getPath('search_autocomplete') . '/js/jquery.autocomplete.js' => ['weight' => 0],
     ]);
   }
 }
diff --git a/src/Form/AutocompletionConfigurationEditForm.php b/src/Form/AutocompletionConfigurationEditForm.php
index edb9ef3..a8f5f67 100644
--- a/src/Form/AutocompletionConfigurationEditForm.php
+++ b/src/Form/AutocompletionConfigurationEditForm.php
@@ -199,7 +199,7 @@ class AutocompletionConfigurationEditForm extends AutocompletionConfigurationFor
 
     // Template to use.
     $themes = [];
-    $files = \Drupal::service('file_system')->scanDirectory(drupal_get_path('module', 'search_autocomplete') . '/css/themes', '/.*\.css\z/', ['recurse' => FALSE]);
+    $files = \Drupal::service('file_system')->scanDirectory(\Drupal::service('extension.list.module')->getPath('search_autocomplete') . '/css/themes', '/.*\.css\z/', ['recurse' => FALSE]);
     foreach ($files as $file) {
       $themes[$file->filename] = $file->name;
     }
diff --git a/src/Tests/Entity/BasicCRUDConfigTest.php b/src/Tests/Entity/BasicCRUDConfigTest.php
index 6f37a89..bc13123 100644
--- a/src/Tests/Entity/BasicCRUDConfigTest.php
+++ b/src/Tests/Entity/BasicCRUDConfigTest.php
@@ -81,36 +81,32 @@ class BasicCRUDConfigTest extends BrowserTestBase {
       'theme' => 'basic-blue.css',
     ];
 
-    $this->drupalPostForm(
-      NULL,
-      [
-        'label' => $config['label'],
-        'id' => $config_name,
-        'selector' => $config['selector'],
-      ],
-      'Create Autocompletion Configuration'
-    );
+    $this->submitForm([
+      'label' => $config['label'],
+      'id' => $config_name,
+      'selector' => $config['selector'],
+    ], 'Create Autocompletion Configuration');
 
     // ----------------------------------------------------------------------
     // 2) Verify that add redirect to edit page.
-    $this->assertUrl('/admin/config/search/search_autocomplete/manage/' . $config_name);
+    $this->assertSession()->addressEquals('/admin/config/search/search_autocomplete/manage/' . $config_name);
 
     // ----------------------------------------------------------------------
     // 3) Verify that default add configuration values are inserted.
-    $this->assertFieldByName('label', $config['label']);
-    $this->assertFieldByName('selector', $config['selector']);
-    $this->assertFieldByName('minChar', $config['minChar']);
-    $this->assertFieldByName('maxSuggestions', $config['maxSuggestions']);
-    $this->assertFieldByName('autoSubmit', $config['autoSubmit']);
-    $this->assertFieldByName('autoRedirect', $config['autoRedirect']);
-    $this->assertFieldByName('noResultLabel', $config['noResultLabel']);
-    $this->assertFieldByName('noResultValue', $config['noResultValue']);
-    $this->assertFieldByName('noResultLink', $config['noResultLink']);
-    $this->assertFieldByName('moreResultsLabel', $config['moreResultsLabel']);
-    $this->assertFieldByName('moreResultsValue', $config['moreResultsValue']);
-    $this->assertFieldByName('moreResultsLink', $config['moreResultsLink']);
-    $this->assertFieldByName('source', $config['source']);
-    $this->assertOptionSelected('edit-theme', $config['theme']);
+    $this->assertSession()->fieldValueEquals('label', $config['label']);
+    $this->assertSession()->fieldValueEquals('selector', $config['selector']);
+    $this->assertSession()->fieldValueEquals('minChar', $config['minChar']);
+    $this->assertSession()->fieldValueEquals('maxSuggestions', $config['maxSuggestions']);
+    $this->assertSession()->fieldValueEquals('autoSubmit', $config['autoSubmit']);
+    $this->assertSession()->fieldValueEquals('autoRedirect', $config['autoRedirect']);
+    $this->assertSession()->fieldValueEquals('noResultLabel', $config['noResultLabel']);
+    $this->assertSession()->fieldValueEquals('noResultValue', $config['noResultValue']);
+    $this->assertSession()->fieldValueEquals('noResultLink', $config['noResultLink']);
+    $this->assertSession()->fieldValueEquals('moreResultsLabel', $config['moreResultsLabel']);
+    $this->assertSession()->fieldValueEquals('moreResultsValue', $config['moreResultsValue']);
+    $this->assertSession()->fieldValueEquals('moreResultsLink', $config['moreResultsLink']);
+    $this->assertSession()->fieldValueEquals('source', $config['source']);
+    $this->assertTrue($this->assertSession()->optionExists('edit-theme', $config['theme'])->hasAttribute('selected'));
 
     // Change default values.
     $config['minChar'] = 1;
@@ -119,33 +115,29 @@ class BasicCRUDConfigTest extends BrowserTestBase {
     $config['moreResultsLink'] = 'http://google.com';
     $config['source'] = '/user/' . $this->adminUser->id();
 
-    $this->drupalPostForm(
-      NULL,
-      $config,
-      'Update'
-    );
+    $this->submitForm($config, 'Update');
 
     // ----------------------------------------------------------------------
     // 4) Verify that user is redirected to listing page.
-    $this->assertUrl('/admin/config/search/search_autocomplete');
+    $this->assertSession()->addressEquals('/admin/config/search/search_autocomplete');
 
     // ----------------------------------------------------------------------
     // 5) Verify that we can edit the configuration through admin UI.
     $this->drupalGet('/admin/config/search/search_autocomplete/manage/' . $config_name);
-    $this->assertFieldByName('label', $config['label']);
-    $this->assertFieldByName('selector', $config['selector']);
-    $this->assertFieldByName('minChar', $config['minChar']);
-    $this->assertFieldByName('maxSuggestions', $config['maxSuggestions']);
-    $this->assertFieldByName('autoSubmit', $config['autoSubmit']);
-    $this->assertFieldByName('autoRedirect', $config['autoRedirect']);
-    $this->assertFieldByName('noResultLabel', $config['noResultLabel']);
-    $this->assertFieldByName('noResultValue', $config['noResultValue']);
-    $this->assertFieldByName('noResultLink', $config['noResultLink']);
-    $this->assertFieldByName('moreResultsLabel', $config['moreResultsLabel']);
-    $this->assertFieldByName('moreResultsValue', $config['moreResultsValue']);
-    $this->assertFieldByName('moreResultsLink', $config['moreResultsLink']);
-    $this->assertFieldByName('source', $config['source']);
-    $this->assertOptionSelected('edit-theme', $config['theme']);
+    $this->assertSession()->fieldValueEquals('label', $config['label']);
+    $this->assertSession()->fieldValueEquals('selector', $config['selector']);
+    $this->assertSession()->fieldValueEquals('minChar', $config['minChar']);
+    $this->assertSession()->fieldValueEquals('maxSuggestions', $config['maxSuggestions']);
+    $this->assertSession()->fieldValueEquals('autoSubmit', $config['autoSubmit']);
+    $this->assertSession()->fieldValueEquals('autoRedirect', $config['autoRedirect']);
+    $this->assertSession()->fieldValueEquals('noResultLabel', $config['noResultLabel']);
+    $this->assertSession()->fieldValueEquals('noResultValue', $config['noResultValue']);
+    $this->assertSession()->fieldValueEquals('noResultLink', $config['noResultLink']);
+    $this->assertSession()->fieldValueEquals('moreResultsLabel', $config['moreResultsLabel']);
+    $this->assertSession()->fieldValueEquals('moreResultsValue', $config['moreResultsValue']);
+    $this->assertSession()->fieldValueEquals('moreResultsLink', $config['moreResultsLink']);
+    $this->assertSession()->fieldValueEquals('source', $config['source']);
+    $this->assertTrue($this->assertSession()->optionExists('edit-theme', $config['theme'])->hasAttribute('selected'));
 
   }
 
@@ -193,36 +185,32 @@ class BasicCRUDConfigTest extends BrowserTestBase {
       'theme' => 'basic-blue.css',
     ];
 
-    $this->drupalPostForm(
-      NULL,
-      [
-        'label' => $config['label'],
-        'id' => $config_name,
-        'selector' => $config['selector'],
-      ],
-      'Create Autocompletion Configuration'
-    );
+    $this->submitForm([
+      'label' => $config['label'],
+      'id' => $config_name,
+      'selector' => $config['selector'],
+    ], 'Create Autocompletion Configuration');
 
     // ----------------------------------------------------------------------
     // 2) Verify that add redirect to edit page.
-    $this->assertUrl('/admin/config/search/search_autocomplete/manage/' . $config_name);
+    $this->assertSession()->addressEquals('/admin/config/search/search_autocomplete/manage/' . $config_name);
 
     // ----------------------------------------------------------------------
     // 3) Verify that default add configuration values are inserted.
-    $this->assertFieldByName('label', $config['label']);
-    $this->assertFieldByName('selector', $config['selector']);
-    $this->assertFieldByName('minChar', $config['minChar']);
-    $this->assertFieldByName('maxSuggestions', $config['maxSuggestions']);
-    $this->assertFieldByName('autoSubmit', $config['autoSubmit']);
-    $this->assertFieldByName('autoRedirect', $config['autoRedirect']);
-    $this->assertFieldByName('noResultLabel', $config['noResultLabel']);
-    $this->assertFieldByName('noResultValue', $config['noResultValue']);
-    $this->assertFieldByName('noResultLink', $config['noResultLink']);
-    $this->assertFieldByName('moreResultsLabel', $config['moreResultsLabel']);
-    $this->assertFieldByName('moreResultsValue', $config['moreResultsValue']);
-    $this->assertFieldByName('moreResultsLink', $config['moreResultsLink']);
-    $this->assertFieldByName('source', $config['source']);
-    $this->assertOptionSelected('edit-theme', $config['theme']);
+    $this->assertSession()->fieldValueEquals('label', $config['label']);
+    $this->assertSession()->fieldValueEquals('selector', $config['selector']);
+    $this->assertSession()->fieldValueEquals('minChar', $config['minChar']);
+    $this->assertSession()->fieldValueEquals('maxSuggestions', $config['maxSuggestions']);
+    $this->assertSession()->fieldValueEquals('autoSubmit', $config['autoSubmit']);
+    $this->assertSession()->fieldValueEquals('autoRedirect', $config['autoRedirect']);
+    $this->assertSession()->fieldValueEquals('noResultLabel', $config['noResultLabel']);
+    $this->assertSession()->fieldValueEquals('noResultValue', $config['noResultValue']);
+    $this->assertSession()->fieldValueEquals('noResultLink', $config['noResultLink']);
+    $this->assertSession()->fieldValueEquals('moreResultsLabel', $config['moreResultsLabel']);
+    $this->assertSession()->fieldValueEquals('moreResultsValue', $config['moreResultsValue']);
+    $this->assertSession()->fieldValueEquals('moreResultsLink', $config['moreResultsLink']);
+    $this->assertSession()->fieldValueEquals('source', $config['source']);
+    $this->assertTrue($this->assertSession()->optionExists('edit-theme', $config['theme'])->hasAttribute('selected'));
 
     // Change default values.
     $config['minChar'] = 1;
@@ -231,42 +219,38 @@ class BasicCRUDConfigTest extends BrowserTestBase {
     $config['moreResultsLink'] = 'http://google.com';
     $config['source'] = '/user/' . $this->adminUser->id();
 
-    $this->drupalPostForm(
-      NULL,
-      $config,
-      'Update'
-    );
+    $this->submitForm($config, 'Update');
 
     // ----------------------------------------------------------------------
     // 4) Verify that user is redirected to listing page.
-    $this->assertUrl('/admin/config/search/search_autocomplete');
-    $this->assertRaw("<td>Unit testing configuration</td>");
+    $this->assertSession()->addressEquals('/admin/config/search/search_autocomplete');
+    $this->assertSession()->responseContains("<td>Unit testing configuration</td>");
 
     // ----------------------------------------------------------------------
     // 5) Verify that we can edit the configuration through admin UI.
     $this->drupalGet('/admin/config/search/search_autocomplete/manage/' . $config_name);
-    $this->assertFieldByName('label', $config['label']);
-    $this->assertFieldByName('selector', $config['selector']);
-    $this->assertFieldByName('minChar', $config['minChar']);
-    $this->assertFieldByName('maxSuggestions', $config['maxSuggestions']);
-    $this->assertFieldByName('autoSubmit', $config['autoSubmit']);
-    $this->assertFieldByName('autoRedirect', $config['autoRedirect']);
-    $this->assertFieldByName('noResultLabel', $config['noResultLabel']);
-    $this->assertFieldByName('noResultValue', $config['noResultValue']);
-    $this->assertFieldByName('noResultLink', $config['noResultLink']);
-    $this->assertFieldByName('moreResultsLabel', $config['moreResultsLabel']);
-    $this->assertFieldByName('moreResultsValue', $config['moreResultsValue']);
-    $this->assertFieldByName('moreResultsLink', $config['moreResultsLink']);
-    $this->assertFieldByName('source', $config['source']);
-    $this->assertOptionSelected('edit-theme', $config['theme']);
+    $this->assertSession()->fieldValueEquals('label', $config['label']);
+    $this->assertSession()->fieldValueEquals('selector', $config['selector']);
+    $this->assertSession()->fieldValueEquals('minChar', $config['minChar']);
+    $this->assertSession()->fieldValueEquals('maxSuggestions', $config['maxSuggestions']);
+    $this->assertSession()->fieldValueEquals('autoSubmit', $config['autoSubmit']);
+    $this->assertSession()->fieldValueEquals('autoRedirect', $config['autoRedirect']);
+    $this->assertSession()->fieldValueEquals('noResultLabel', $config['noResultLabel']);
+    $this->assertSession()->fieldValueEquals('noResultValue', $config['noResultValue']);
+    $this->assertSession()->fieldValueEquals('noResultLink', $config['noResultLink']);
+    $this->assertSession()->fieldValueEquals('moreResultsLabel', $config['moreResultsLabel']);
+    $this->assertSession()->fieldValueEquals('moreResultsValue', $config['moreResultsValue']);
+    $this->assertSession()->fieldValueEquals('moreResultsLink', $config['moreResultsLink']);
+    $this->assertSession()->fieldValueEquals('source', $config['source']);
+    $this->assertTrue($this->assertSession()->optionExists('edit-theme', $config['theme'])->hasAttribute('selected'));
 
     // ----------------------------------------------------------------------
     // 6) Verify that we can delete the configuration.
     $this->drupalGet("/admin/config/search/search_autocomplete/manage/" . $config_name . "/delete");
-    $this->assertText('This action cannot be undone.');
-    $this->drupalPostForm(NULL, [], 'Delete this configuration');
-    $this->assertRaw('The autocompletion configuration <em class="placeholder">' . $config['label'] . '</em> is deleted.');
-    $this->assertNoRaw("<td>Unit testing configuration</td>");
+    $this->assertSession()->pageTextContains('This action cannot be undone.');
+    $this->submitForm([], 'Delete this configuration');
+    $this->assertSession()->responseContains('The autocompletion configuration <em class="placeholder">' . $config['label'] . '</em> is deleted.');
+    $this->assertSession()->responseNotContains("<td>Unit testing configuration</td>");
   }
 
   /**
diff --git a/src/Tests/Entity/DefaultConfigTest.php b/src/Tests/Entity/DefaultConfigTest.php
index eaeb6e7..83ba5de 100644
--- a/src/Tests/Entity/DefaultConfigTest.php
+++ b/src/Tests/Entity/DefaultConfigTest.php
@@ -66,24 +66,24 @@ class DefaultConfigTest extends BrowserTestBase {
     $entity = AutocompletionConfiguration::load($config['id']);
     $this->assertNotNull($entity, 'Default configuration search_block created during installation process.');
 
-    $this->assertEqual($entity->id(), $config['id']);
-    $this->assertEqual($entity->label(), $config['label']);
-    $this->assertEqual($entity->getStatus(), $config['status']);
-    $this->assertEqual($entity->getSelector(), $config['selector']);
-    $this->assertEqual($entity->getMinChar(), $config['minChar']);
-    $this->assertEqual($entity->getMaxSuggestions(), $config['maxSuggestions']);
-    $this->assertEqual($entity->getAutoSubmit(), $config['autoSubmit']);
-    $this->assertEqual($entity->getAutoRedirect(), $config['autoRedirect']);
-    $this->assertEqual($entity->getNoResultLabel(), $config['noResultLabel']);
-    $this->assertEqual($entity->getNoResultValue(), $config['noResultValue']);
-    $this->assertEqual($entity->getNoResultLink(), $config['noResultLink']);
-    $this->assertEqual($entity->getMoreResultsLabel(), $config['moreResultsLabel']);
-    $this->assertEqual($entity->getMoreResultsValue(), $config['moreResultsValue']);
-    $this->assertEqual($entity->getMoreResultsLink(), $config['moreResultsLink']);
-    $this->assertEqual($entity->getSource(), $config['source']);
-    $this->assertEqual($entity->getTheme(), $config['theme']);
-    $this->assertEqual($entity->getEditable(), $config['editable']);
-    $this->assertEqual($entity->getDeletable(), $config['deletable']);
+    $this->assertEquals($entity->id(), $config['id']);
+    $this->assertEquals($entity->label(), $config['label']);
+    $this->assertEquals($entity->getStatus(), $config['status']);
+    $this->assertEquals($entity->getSelector(), $config['selector']);
+    $this->assertEquals($entity->getMinChar(), $config['minChar']);
+    $this->assertEquals($entity->getMaxSuggestions(), $config['maxSuggestions']);
+    $this->assertEquals($entity->getAutoSubmit(), $config['autoSubmit']);
+    $this->assertEquals($entity->getAutoRedirect(), $config['autoRedirect']);
+    $this->assertEquals($entity->getNoResultLabel(), $config['noResultLabel']);
+    $this->assertEquals($entity->getNoResultValue(), $config['noResultValue']);
+    $this->assertEquals($entity->getNoResultLink(), $config['noResultLink']);
+    $this->assertEquals($entity->getMoreResultsLabel(), $config['moreResultsLabel']);
+    $this->assertEquals($entity->getMoreResultsValue(), $config['moreResultsValue']);
+    $this->assertEquals($entity->getMoreResultsLink(), $config['moreResultsLink']);
+    $this->assertEquals($entity->getSource(), $config['source']);
+    $this->assertEquals($entity->getTheme(), $config['theme']);
+    $this->assertEquals($entity->getEditable(), $config['editable']);
+    $this->assertEquals($entity->getDeletable(), $config['deletable']);
   }
 
 }
diff --git a/src/Tests/Entity/EditableDeletableConfigTest.php b/src/Tests/Entity/EditableDeletableConfigTest.php
index afc80da..3fd26d7 100644
--- a/src/Tests/Entity/EditableDeletableConfigTest.php
+++ b/src/Tests/Entity/EditableDeletableConfigTest.php
@@ -50,7 +50,7 @@ class EditableDeletableConfigTest extends BrowserTestBase {
 
     // Check access permission to edit page for editable configurations.
     $this->drupalGet('/admin/config/search/search_autocomplete/manage/' . $config_id);
-    $this->assertResponse(200, "Editable configuration can be edited from GUI");
+    $this->assertSession()->statusCodeEquals(200, "Editable configuration can be edited from GUI");
 
     // Remove editability for this configuration.
     $config = AutocompletionConfiguration::load('search_block');
@@ -64,7 +64,7 @@ class EditableDeletableConfigTest extends BrowserTestBase {
 
     // Check that none editable configurations cannot be edited.
     $this->drupalGet('/admin/config/search/search_autocomplete/manage/' . $config_id);
-    $this->assertResponse(403, "None editable configuration cannot be edited from GUI");
+    $this->assertSession()->statusCodeEquals(403, "None editable configuration cannot be edited from GUI");
   }
 
   /**
@@ -83,7 +83,7 @@ class EditableDeletableConfigTest extends BrowserTestBase {
 
     // Check access permission to delete page for none deletable configurations.
     $this->drupalGet('/admin/config/search/search_autocomplete/manage/' . $config_id . '/delete');
-    $this->assertResponse(403, "None deletable configuration cannot be deleted from GUI");
+    $this->assertSession()->statusCodeEquals(403, "None deletable configuration cannot be deleted from GUI");
 
     // Remove editability for this configuration.
     $config->setDeletable(TRUE);
@@ -96,7 +96,7 @@ class EditableDeletableConfigTest extends BrowserTestBase {
 
     // Check that deletable configurations can be deleted.
     $this->drupalGet('/admin/config/search/search_autocomplete/manage/' . $config_id . '/delete');
-    $this->assertResponse(200, "Deletable configuration can be deleted from GUI");
+    $this->assertSession()->statusCodeEquals(200, "Deletable configuration can be deleted from GUI");
   }
 
   /**
diff --git a/src/Tests/Entity/NoSelectorConfigTest.php b/src/Tests/Entity/NoSelectorConfigTest.php
index fd5aa83..12cc766 100644
--- a/src/Tests/Entity/NoSelectorConfigTest.php
+++ b/src/Tests/Entity/NoSelectorConfigTest.php
@@ -66,40 +66,36 @@ class NoSelectorConfigTest extends BrowserTestBase {
     ];
 
     // Check fields.
-    $this->assertFieldByName('label', $config['label']);
-    $this->assertFieldByName('selector', $config['selector']);
+    $this->assertSession()->fieldValueEquals('label', $config['label']);
+    $this->assertSession()->fieldValueEquals('selector', $config['selector']);
 
     // Click Add new button.
-    $this->drupalPostForm(
-      NULL,
-      [
-        'label' => $config['label'],
-        'id' => $config_name,
-        'selector' => $config['selector'],
-      ],
-      'Create Autocompletion Configuration'
-    );
+    $this->submitForm([
+      'label' => $config['label'],
+      'id' => $config_name,
+      'selector' => $config['selector'],
+    ], 'Create Autocompletion Configuration');
 
     // ----------------------------------------------------------------------
     // 2) Verify that add redirect to edit page.
-    $this->assertUrl('/admin/config/search/search_autocomplete/manage/' . $config_name);
+    $this->assertSession()->addressEquals('/admin/config/search/search_autocomplete/manage/' . $config_name);
 
     // ----------------------------------------------------------------------
     // 3) Verify that default add configuration values are inserted.
-    $this->assertFieldByName('label', $config['label']);
-    $this->assertFieldByName('selector', $config['selector']);
-    $this->assertFieldByName('minChar', $config['minChar']);
-    $this->assertFieldByName('maxSuggestions', $config['maxSuggestions']);
-    $this->assertFieldByName('autoSubmit', $config['autoSubmit']);
-    $this->assertFieldByName('autoRedirect', $config['autoRedirect']);
-    $this->assertFieldByName('noResultLabel', $config['noResultLabel']);
-    $this->assertFieldByName('noResultValue', $config['noResultValue']);
-    $this->assertFieldByName('noResultLink', $config['noResultLink']);
-    $this->assertFieldByName('moreResultsLabel', $config['moreResultsLabel']);
-    $this->assertFieldByName('moreResultsValue', $config['moreResultsValue']);
-    $this->assertFieldByName('moreResultsLink', $config['moreResultsLink']);
-    $this->assertFieldByName('source', $config['source']);
-    $this->assertOptionSelected('edit-theme', $config['theme']);
+    $this->assertSession()->fieldValueEquals('label', $config['label']);
+    $this->assertSession()->fieldValueEquals('selector', $config['selector']);
+    $this->assertSession()->fieldValueEquals('minChar', $config['minChar']);
+    $this->assertSession()->fieldValueEquals('maxSuggestions', $config['maxSuggestions']);
+    $this->assertSession()->fieldValueEquals('autoSubmit', $config['autoSubmit']);
+    $this->assertSession()->fieldValueEquals('autoRedirect', $config['autoRedirect']);
+    $this->assertSession()->fieldValueEquals('noResultLabel', $config['noResultLabel']);
+    $this->assertSession()->fieldValueEquals('noResultValue', $config['noResultValue']);
+    $this->assertSession()->fieldValueEquals('noResultLink', $config['noResultLink']);
+    $this->assertSession()->fieldValueEquals('moreResultsLabel', $config['moreResultsLabel']);
+    $this->assertSession()->fieldValueEquals('moreResultsValue', $config['moreResultsValue']);
+    $this->assertSession()->fieldValueEquals('moreResultsLink', $config['moreResultsLink']);
+    $this->assertSession()->fieldValueEquals('source', $config['source']);
+    $this->assertTrue($this->assertSession()->optionExists('edit-theme', $config['theme'])->hasAttribute('selected'));
 
   }
 
diff --git a/src/Tests/Entity/UnicityConfigTest.php b/src/Tests/Entity/UnicityConfigTest.php
index 35b4c70..85f4380 100644
--- a/src/Tests/Entity/UnicityConfigTest.php
+++ b/src/Tests/Entity/UnicityConfigTest.php
@@ -51,15 +51,11 @@ class UnicityConfigTest extends BrowserTestBase {
     ];
 
     // Click Add new button.
-    $this->drupalPostForm(
-      NULL,
-      [
-        'label' => $config['label'],
-        'id' => $config_name,
-        'selector' => $config['selector'],
-      ],
-      'Create Autocompletion Configuration'
-    );
+    $this->submitForm([
+      'label' => $config['label'],
+      'id' => $config_name,
+      'selector' => $config['selector'],
+    ], 'Create Autocompletion Configuration');
 
     // ----------------------------------------------------------------------
     // 2) Create the configuration again.
@@ -74,16 +70,12 @@ class UnicityConfigTest extends BrowserTestBase {
     ];
 
     // Click Add new button.
-    $this->drupalPostForm(
-      NULL,
-      [
-        'label' => $config['label'],
-        'id' => $config_name,
-        'selector' => $config['selector'],
-      ],
-      'Create Autocompletion Configuration'
-    );
-    $this->assertRaw(t('The machine-readable name is already in use. It must be unique.'));
+    $this->submitForm([
+      'label' => $config['label'],
+      'id' => $config_name,
+      'selector' => $config['selector'],
+    ], 'Create Autocompletion Configuration');
+    $this->assertSession()->responseContains(t('The machine-readable name is already in use. It must be unique.'));
   }
 
   /**
@@ -104,15 +96,11 @@ class UnicityConfigTest extends BrowserTestBase {
     ];
 
     // Click Add new button.
-    $this->drupalPostForm(
-      NULL,
-      [
-        'label' => $config['label'],
-        'id' => $config_name,
-        'selector' => $config['selector'],
-      ],
-      'Create Autocompletion Configuration'
-    );
+    $this->submitForm([
+      'label' => $config['label'],
+      'id' => $config_name,
+      'selector' => $config['selector'],
+    ], 'Create Autocompletion Configuration');
 
     // ----------------------------------------------------------------------
     // 2) Create the configuration again.
@@ -127,16 +115,12 @@ class UnicityConfigTest extends BrowserTestBase {
     ];
 
     // Click Add new button.
-    $this->drupalPostForm(
-      NULL,
-      [
-        'label' => $config['label'],
-        'id' => $config_name,
-        'selector' => $config['selector'],
-      ],
-      'Create Autocompletion Configuration'
-    );
-    $this->assertRaw('The selector ID must be unique.');
+    $this->submitForm([
+      'label' => $config['label'],
+      'id' => $config_name,
+      'selector' => $config['selector'],
+    ], 'Create Autocompletion Configuration');
+    $this->assertSession()->responseContains('The selector ID must be unique.');
   }
 
   /**
diff --git a/src/Tests/InstallTest.php b/src/Tests/InstallTest.php
index 4c85470..260bbe5 100644
--- a/src/Tests/InstallTest.php
+++ b/src/Tests/InstallTest.php
@@ -62,7 +62,7 @@ class InstallTest extends BrowserTestBase {
     // we haven't logged in any users, so the client is anonymous.
     foreach ($admin_paths as $path) {
       $this->drupalGet($path);
-      $this->assertResponse(403, "Access denied to anonymous for path: $path");
+      $this->assertSession()->statusCodeEquals(403, "Access denied to anonymous for path: $path");
     }
 
     /* ----------------------------------------------------------------------
@@ -76,7 +76,7 @@ class InstallTest extends BrowserTestBase {
     // special permissions for these paths.
     foreach ($admin_paths as $path) {
       $this->drupalGet($path);
-      $this->assertResponse(403, "Access denied to generic user for path: $path");
+      $this->assertSession()->statusCodeEquals(403, "Access denied to generic user for path: $path");
     }
 
     /* ----------------------------------------------------------------------
@@ -89,7 +89,7 @@ class InstallTest extends BrowserTestBase {
     // Forbidden paths aren't forbidden any more.
     foreach ($admin_paths as $unforbidden) {
       $this->drupalGet($unforbidden);
-      $this->assertResponse(200, "Access not granted to admin user for path: $unforbidden");
+      $this->assertSession()->statusCodeEquals(200, "Access not granted to admin user for path: $unforbidden");
     }
 
     /* ----------------------------------------------------------------------
@@ -105,7 +105,7 @@ class InstallTest extends BrowserTestBase {
     $this->drupalLogin($admin_user);
     // Now that we have the admin user logged in, check the menu links.
     $this->drupalGet('/admin/config');
-    $this->assertLinkByHref("admin/config/search/search_autocomplete");
+    $this->assertSession()->linkByHrefExists("admin/config/search/search_autocomplete");
   }
 
   /**
diff --git a/src/Tests/SettingsTest.php b/src/Tests/SettingsTest.php
index b807d30..11d4f9a 100644
--- a/src/Tests/SettingsTest.php
+++ b/src/Tests/SettingsTest.php
@@ -51,8 +51,8 @@ class SettingsTest extends BrowserTestBase {
     // ----------------------------------------------------------------------
     // 1) Check the default settings value : configs are activated,
     // admin_helper is FALSE.
-    $this->assertFieldChecked('edit-configs-search-block-enabled', 'Default config search_block is activated.');
-    $this->assertNoFieldChecked('edit-admin-helper', 'Admin helper tool is disabled.');
+    $this->assertSession()->checkboxChecked('edit-configs-search-block-enabled', 'Default config search_block is activated.');
+    $this->assertSession()->checkboxNotChecked('edit-admin-helper', 'Admin helper tool is disabled.');
 
     // ----------------------------------------------------------------------
     // 2) Desactivate all available configurations and reverse settings.
@@ -60,12 +60,12 @@ class SettingsTest extends BrowserTestBase {
       'configs[search_block][enabled]' => FALSE,
       'admin_helper' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save changes');
+    $this->submitForm($edit, 'Save changes');
 
     // 3) Check that all default configurations are desactivate,
     // and settings are toogled.
-    $this->assertNoFieldChecked('edit-configs-search-block-enabled', 'Default config search_block is disabled.');
-    $this->assertFieldChecked('edit-admin-helper', 'Admin helper tool is activated.');
+    $this->assertSession()->checkboxNotChecked('edit-configs-search-block-enabled', 'Default config search_block is disabled.');
+    $this->assertSession()->checkboxChecked('edit-admin-helper', 'Admin helper tool is activated.');
   }
 
   /**
diff --git a/src/Tests/Views/CallbackViewsTest.php b/src/Tests/Views/CallbackViewsTest.php
index d3e0975..5ddc6d0 100644
--- a/src/Tests/Views/CallbackViewsTest.php
+++ b/src/Tests/Views/CallbackViewsTest.php
@@ -67,12 +67,12 @@ class CallbackViewsTest extends ViewTestBase {
     $this->drupalGet("admin/structure/views");
 
     // Nodes callback view.
-    $this->assertRaw(t('Nodes Autocompletion Callbacks'));
-    $this->assertRaw(t('autocompletion_callbacks_nodes'));
+    $this->assertSession()->responseContains(t('Nodes Autocompletion Callbacks'));
+    $this->assertSession()->responseContains(t('autocompletion_callbacks_nodes'));
 
     // Words callback view.
-    $this->assertRaw(t('Words Autocompletion Callbacks'));
-    $this->assertRaw(t('autocompletion_callbacks_words'));
+    $this->assertSession()->responseContains(t('Words Autocompletion Callbacks'));
+    $this->assertSession()->responseContains(t('autocompletion_callbacks_words'));
   }
 
   /**
@@ -83,7 +83,7 @@ class CallbackViewsTest extends ViewTestBase {
     // Retrieve node default view.
     $actual_json = $this->drupalGet("callback/nodes");
     $expected = [];
-    $this->assertIdentical($actual_json, json_encode($expected), 'The expected JSON output was found.');
+    $this->assertSame($actual_json, json_encode($expected), 'The expected JSON output was found.');
 
     // Create some published nodes of type article and page.
     $this->createNodes(5, "article", $expected);
@@ -97,11 +97,11 @@ class CallbackViewsTest extends ViewTestBase {
 
     // Check the view result using serializer service.
     $expected_string = json_encode($expected);
-    $this->assertIdentical($actual_json, $expected_string);
+    $this->assertSame($actual_json, $expected_string);
 
     // Re-test as anonymous user.
     $actual_json = $this->drupalGet("callback/nodes");
-    $this->assertIdentical($actual_json, $expected_string);
+    $this->assertSame($actual_json, $expected_string);
   }
 
   /**
@@ -135,7 +135,7 @@ class CallbackViewsTest extends ViewTestBase {
       ];
       $node = Node::create($settings);
       $status = $node->save();
-      $this->assertEqual($status, SAVED_NEW, new FormattableMarkup('Created node %title.', ['%title' => $node->label()]));
+      $this->assertEquals($status, SAVED_NEW, new FormattableMarkup('Created node %title.', ['%title' => $node->label()]));
 
       $result = [
         'value' => $type->id() . ' ' . $i,
