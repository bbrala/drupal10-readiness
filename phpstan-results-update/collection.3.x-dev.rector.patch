diff --git a/collection.module b/collection.module
index 53d857f..24a0c27 100644
--- a/collection.module
+++ b/collection.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\ContentEntityInterface;
 /**
  * @file
  * Contains collection.module.
@@ -234,7 +235,7 @@ function collection_entity_field_access_alter(array &$grants, array $context) {
  */
 function collection_entity_operation(EntityInterface $entity) {
   if ($entity->getEntityTypeId() == 'collection_item' && $entity->item->entity->access('update')) {
-    $item_entity_type = ($entity->item->entity instanceof \Drupal\Core\Entity\ContentEntityInterface) ? 'content' : 'configuration';
+    $item_entity_type = ($entity->item->entity instanceof ContentEntityInterface) ? 'content' : 'configuration';
     $operations = [];
     $operations['edit_item'] = [
       'title' => t('Edit @entity_type', ['@entity_type' => $item_entity_type]),
diff --git a/modules/collection_pathauto/src/EventSubscriber/CollectionPathautoSubscriber.php b/modules/collection_pathauto/src/EventSubscriber/CollectionPathautoSubscriber.php
index 3d06cbe..2b790c9 100644
--- a/modules/collection_pathauto/src/EventSubscriber/CollectionPathautoSubscriber.php
+++ b/modules/collection_pathauto/src/EventSubscriber/CollectionPathautoSubscriber.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\collection_pathauto\EventSubscriber;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\pathauto\PathautoGeneratorInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Drupal\collection\Event\CollectionEvents;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\pathauto\PathautoFieldItemList;
 
@@ -42,7 +42,7 @@ class CollectionPathautoSubscriber implements EventSubscriberInterface {
   /**
    * Process the COLLECTION_ITEM_ENTITY_CREATE, _UPDATE, and _DELETE events.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   The dispatched event.
    */
   public function collectionItemCrud(Event $event) {
diff --git a/src/Controller/ContentEntityCollectionsController.php b/src/Controller/ContentEntityCollectionsController.php
index 4914407..3e112ca 100644
--- a/src/Controller/ContentEntityCollectionsController.php
+++ b/src/Controller/ContentEntityCollectionsController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\collection\Controller;
 
+use Drupal\collection\ContentEntityCollectionListBuilder;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Routing\RouteMatchInterface;
 // use Drupal\Core\Entity\ContentEntityInterface;
@@ -54,7 +55,7 @@ class ContentEntityCollectionsController extends ControllerBase {
     $entity = $request->get($entity_type);
     $collection_item_definition = $this->entityTypeManager->getDefinition('collection_item');
     $entity_collection_items = $this->collectionContentManager->getCollectionItemsForEntity($entity, 'view');
-    $list_builder = new \Drupal\collection\ContentEntityCollectionListBuilder($entity_collection_items, $collection_item_definition);
+    $list_builder = new ContentEntityCollectionListBuilder($entity_collection_items, $collection_item_definition);
 
     $build = [
       '#theme' => 'container__content_entity_collections',
diff --git a/src/Event/CollectionCreateEvent.php b/src/Event/CollectionCreateEvent.php
index 0cb808f..511b490 100644
--- a/src/Event/CollectionCreateEvent.php
+++ b/src/Event/CollectionCreateEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\collection\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\collection\Entity\CollectionInterface;
 
 /**
diff --git a/src/Event/CollectionItemCreateEvent.php b/src/Event/CollectionItemCreateEvent.php
index 93b841e..4e4e847 100644
--- a/src/Event/CollectionItemCreateEvent.php
+++ b/src/Event/CollectionItemCreateEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\collection\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\collection\Entity\CollectionItemInterface;
 
 /**
diff --git a/src/Event/CollectionItemDeleteEvent.php b/src/Event/CollectionItemDeleteEvent.php
index e36521d..38a1383 100644
--- a/src/Event/CollectionItemDeleteEvent.php
+++ b/src/Event/CollectionItemDeleteEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\collection\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\collection\Entity\CollectionItemInterface;
 
 /**
diff --git a/src/Event/CollectionItemFormSaveEvent.php b/src/Event/CollectionItemFormSaveEvent.php
index da65eeb..a6ce3c6 100644
--- a/src/Event/CollectionItemFormSaveEvent.php
+++ b/src/Event/CollectionItemFormSaveEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\collection\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\collection\Entity\CollectionItemInterface;
 
 /**
diff --git a/src/Event/CollectionItemUpdateEvent.php b/src/Event/CollectionItemUpdateEvent.php
index d366776..7708ff0 100644
--- a/src/Event/CollectionItemUpdateEvent.php
+++ b/src/Event/CollectionItemUpdateEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\collection\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\collection\Entity\CollectionItemInterface;
 
 /**
diff --git a/src/Event/CollectionUpdateEvent.php b/src/Event/CollectionUpdateEvent.php
index 763cc3a..335ebfe 100644
--- a/src/Event/CollectionUpdateEvent.php
+++ b/src/Event/CollectionUpdateEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\collection\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\collection\Entity\CollectionInterface;
 
 /**
diff --git a/src/Form/CollectionItemForm.php b/src/Form/CollectionItemForm.php
index 9e666e4..cc30c05 100644
--- a/src/Form/CollectionItemForm.php
+++ b/src/Form/CollectionItemForm.php
@@ -91,7 +91,7 @@ class CollectionItemForm extends ContentEntityForm {
     }
 
     $event = new CollectionItemFormSaveEvent($entity, $status);
-    $this->eventDispatcher->dispatch(CollectionEvents::COLLECTION_ITEM_FORM_SAVE, $event);
+    $this->eventDispatcher->dispatch($event, CollectionEvents::COLLECTION_ITEM_FORM_SAVE);
 
     $form_state->setRedirect('entity.collection_item.collection', ['collection' => $entity->collection->target_id]);
   }
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index a347e61..bd60241 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -29,7 +29,7 @@ class LoadTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
