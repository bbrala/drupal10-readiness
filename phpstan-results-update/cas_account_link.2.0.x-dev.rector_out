modules/contrib/cas_account_link/tests/modules/cas_account_link_test/src/CasAccountLinkTestSubscriber.php
modules/contrib/cas_account_link/cas_account_link.module
modules/contrib/cas_account_link/src/Access/CasAccountLinkAccess.php
modules/contrib/cas_account_link/tests/src/Functional/CasAccountLinkSettingsFormTest.php
modules/contrib/cas_account_link/src/Event/CasAccountLinkEvents.php
modules/contrib/cas_account_link/src/Event/Events/CasAccountLinkEmailCollisionEvent.php
modules/contrib/cas_account_link/src/Event/Events/CasAccountLinkPostLinkEvent.php
modules/contrib/cas_account_link/src/Event/Events/CasAccountLinkValidateEvent.php
modules/contrib/cas_account_link/src/Event/Subscriber/CasAccountLinkSubscriber.php
modules/contrib/cas_account_link/tests/src/Functional/CasAccountLinkTest.php
modules/contrib/cas_account_link/src/Form/CasAccountLinkForm.php
modules/contrib/cas_account_link/src/Form/CasAccountLinkSettingsForm.php
modules/contrib/cas_account_link/src/Routing/CasAccountLinkRouteSubscriber.php

4 files with changes
====================

1) modules/contrib/cas_account_link/src/Form/CasAccountLinkForm.php:224

    ---------- begin diff ----------
@@ @@
       if (user_load_by_mail($local_mail)) {
         $email_collision_event = new CasAccountLinkEmailCollisionEvent($local_mail, $property_bag);
         $this->casHelper->log(LogLevel::DEBUG, 'Dispatching CasAccountLinkEvents::EMAIL_COLLISION.');
-        $this->eventDispatcher->dispatch(CasAccountLinkEvents::EMAIL_COLLISION, $email_collision_event);
+        $this->eventDispatcher->dispatch($email_collision_event, CasAccountLinkEvents::EMAIL_COLLISION);
         if (!$message = $email_collision_event->getErrorMessage()) {
           $message = $this->t('The email address %mail is already taken.', [
             '%mail' => $local_mail,
@@ @@
     // Let third party add their own validation.
     $this->casHelper->log(LogLevel::DEBUG, 'Dispatching CasAccountLinkEvents::VALIDATE');
     $event = new CasAccountLinkValidateEvent($form, $form_state);
-    $this->eventDispatcher->dispatch(CasAccountLinkEvents::VALIDATE, $event);
+    $this->eventDispatcher->dispatch($event, CasAccountLinkEvents::VALIDATE);
   }

   /**
@@ @@
     // redirect and/or their success status message.
     $this->casHelper->log(LogLevel::DEBUG, 'Dispatching CasAccountLinkEvents::POST_LINK');
     $event = new CasAccountLinkPostLinkEvent($ticket, $property_bag, $service_parameters, $account, $is_local_account_selected);
-    $this->eventDispatcher->dispatch(CasAccountLinkEvents::POST_LINK, $event);
+    $this->eventDispatcher->dispatch($event, CasAccountLinkEvents::POST_LINK);

     // Third-party modules success message has precedence.
     if (!$success_message = $event->getSuccessMessage()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/cas_account_link/src/Event/Events/CasAccountLinkValidateEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cas_account_link\Event\Events;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Form\FormStateInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Provides an event class for CasAccountLinkEvents::VALIDATE events.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/cas_account_link/src/Event/Events/CasAccountLinkPostLinkEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cas_account_link\Event\Events;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;
 use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Url;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Provides an event class for CasAccountLinkEvents::POST_LINK events.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/cas_account_link/src/Event/Events/CasAccountLinkEmailCollisionEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cas_account_link\Event\Events;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Provides an event class for CasAccountLinkEvents::EMAIL_COLLISION events.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

