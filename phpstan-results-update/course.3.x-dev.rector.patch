diff --git a/course.module b/course.module
index 46c3ec2..52a241f 100644
--- a/course.module
+++ b/course.module
@@ -475,7 +475,7 @@ function course_views_plugins() {
       'course' => array(
         'title' => t('Course'),
         'handler' => 'views_plugin_argument_validate_course',
-        'path' => drupal_get_path('module', 'course') . '/views/plugins',
+        'path' => \Drupal::service('extension.list.module')->getPath('course') . '/views/plugins',
       ),
     ),
   );
@@ -487,7 +487,7 @@ function course_views_plugins() {
 function course_views_api() {
   return array(
     'api' => 3,
-    'path' => drupal_get_path('module', 'course') . '/views',
+    'path' => \Drupal::service('extension.list.module')->getPath('course') . '/views',
   );
 }
 
@@ -549,7 +549,7 @@ function course_preprocess_page(&$variables) {
 /**
  * Implements hook_tokens().
  */
-function course_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
+function course_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
   if ($type == 'course_enrollment' && !isset($data['course_enrollment']) && isset($data['course'], $data['user']) && $course_enrollment = $data['course']->getEnrollment($data['user'])) {
     $data['course_enrollment'] = $course_enrollment;
     return token_tokens('course_enrollment', $tokens, $data, $options, $bubbleable_metadata);
diff --git a/modules/course_book/tests/src/Functional/CourseObjectBookTest.php b/modules/course_book/tests/src/Functional/CourseObjectBookTest.php
index bbf6f0a..4e440ae 100644
--- a/modules/course_book/tests/src/Functional/CourseObjectBookTest.php
+++ b/modules/course_book/tests/src/Functional/CourseObjectBookTest.php
@@ -82,7 +82,6 @@ class CourseObjectBookTest extends CourseTestBase {
    * within simpletest.
    */
   function testBookCourseObjectContentAccess() {
-    $this->pass('Please fix me.');
     return;
 
     $this->drupalLogin($this->admin_user);
@@ -124,11 +123,11 @@ class CourseObjectBookTest extends CourseTestBase {
     // Try to visit the protected pages.
     $this->drupalLogin($this->student_user);
     $this->drupalGet("node/" . $co1->getInstanceId());
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/$bp1->nid");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/$bp2->nid");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Add a new page to the book, after it is already saved.
     $this->drupalLogin($this->admin_user);
@@ -149,7 +148,7 @@ class CourseObjectBookTest extends CourseTestBase {
     // Check that the new book page also had it's ACL set up.
     $this->drupalLogin($this->student_user);
     $this->drupalGet("node/$bp3->nid");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Enroll the user in the course and go to the first object.
     course_enroll($courseNode, $this->student_user);
@@ -157,11 +156,11 @@ class CourseObjectBookTest extends CourseTestBase {
 
     // Make sure user can access all the sub-pages now.
     $this->drupalGet("node/$bp1->nid");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/$bp2->nid");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/$bp3->nid");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }
 
 }
diff --git a/modules/course_certificate/tests/src/Functional/CourseObjectCertificateTest.php b/modules/course_certificate/tests/src/Functional/CourseObjectCertificateTest.php
index 17c84fd..9038484 100644
--- a/modules/course_certificate/tests/src/Functional/CourseObjectCertificateTest.php
+++ b/modules/course_certificate/tests/src/Functional/CourseObjectCertificateTest.php
@@ -50,7 +50,7 @@ class CourseObjectCertificateTest extends CourseObjectTest {
     $this->clickLink('Complete');
 
     // Check the course landing page link.
-    $this->assertLink('Download certificate');
+    $this->assertSession()->linkExists('Download certificate');
   }
 
 }
diff --git a/modules/course_commerce/tests/src/Functional/CourseCommerceTest.php b/modules/course_commerce/tests/src/Functional/CourseCommerceTest.php
index b376150..506a840 100644
--- a/modules/course_commerce/tests/src/Functional/CourseCommerceTest.php
+++ b/modules/course_commerce/tests/src/Functional/CourseCommerceTest.php
@@ -87,7 +87,7 @@ class CourseObjectCommerceTest extends CourseTestBase {
 
     // Try to re-enroll in a course.
     $this->drupalGet("node/$courseNode->nid");
-    $this->assertNoRaw(t('Add to cart'), 'Did not see add to cart button.');
+    $this->assertSession()->responseNotContains(t('Add to cart'));
   }
 
   public function testBypassFreeCourses() {
@@ -104,12 +104,12 @@ class CourseObjectCommerceTest extends CourseTestBase {
 
     // Default behavior is that add to cart does not show up on a $0 course.
     $this->drupalGet("node/$courseNode->nid");
-    $this->assertNoRaw(t('Add to cart'));
+    $this->assertSession()->responseNotContains(t('Add to cart'));
 
     // Turn bypass off and check that the add to cart button shows.
     variable_set('course_access_bypass_checkout', 0);
     $this->drupalGet("node/$courseNode->nid");
-    $this->assertRaw(t('Add to cart'));
+    $this->assertSession()->responseContains(t('Add to cart'));
   }
 
   public function testDelayedPayment() {
@@ -145,18 +145,18 @@ class CourseObjectCommerceTest extends CourseTestBase {
 
     // Access first object.
     $this->drupalGet("node/{$courseNode->nid}/object/{$co1->id()}");
-    $this->assertResponse(200, 'Test that 1st object is accessible.');
+    $this->assertSession()->statusCodeEquals(200, 'Test that 1st object is accessible.');
     $co1 = course_get_course_object_by_id($co1->id());
     $co1->getFulfillment($this->student_user)->setComplete(1)->save();
 
     // Access payment object.
     $this->drupalGet("node/{$courseNode->nid}/object/{$co2->id()}");
     $this->assertSession()->responseContains(t('You must purchase this course before proceeding.'));
-    $this->assertRaw(t('Add to cart'));
+    $this->assertSession()->responseContains(t('Add to cart'));
 
     // Access third object.
     $this->drupalGet("node/{$courseNode->nid}/object/{$co3->id()}");
-    $this->assertResponse(403, 'Test that 3rd object is blocked.');
+    $this->assertSession()->statusCodeEquals(403, 'Test that 3rd object is blocked.');
 
     // Flush cache.
     course_get_course($courseNode);
@@ -169,7 +169,7 @@ class CourseObjectCommerceTest extends CourseTestBase {
 
     // Access third object.
     $this->drupalGet("node/{$courseNode->nid}/object/{$co3->id()}");
-    $this->assertResponse(200, 'Test that 3rd object is accessible.');
+    $this->assertSession()->statusCodeEquals(200, 'Test that 3rd object is accessible.');
   }
 
 }
diff --git a/modules/course_content/src/EventSubscriber/CourseContentEventSubscriber.php b/modules/course_content/src/EventSubscriber/CourseContentEventSubscriber.php
index a4db309..3831500 100644
--- a/modules/course_content/src/EventSubscriber/CourseContentEventSubscriber.php
+++ b/modules/course_content/src/EventSubscriber/CourseContentEventSubscriber.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\course_content\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal;
 use Drupal\node\Entity\NodeType;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use function course_get_course_object;
 
@@ -25,9 +25,9 @@ class CourseContentEventSubscriber implements EventSubscriberInterface {
   /**
    * If the current node is a course object, fulfill it for the current user.
    *
-   * @param GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     $route_match = Drupal::routeMatch();
     if ($route_match->getRouteName() == 'entity.node.canonical') {
       $node = $route_match->getParameter('node');
diff --git a/modules/course_content/tests/src/Functional/CourseObjectNodeTest.php b/modules/course_content/tests/src/Functional/CourseObjectNodeTest.php
index e1f5ea2..93a04fd 100644
--- a/modules/course_content/tests/src/Functional/CourseObjectNodeTest.php
+++ b/modules/course_content/tests/src/Functional/CourseObjectNodeTest.php
@@ -34,13 +34,13 @@ class CourseObjectNodeTest extends CourseTestBase {
     $course->enroll($this->student_user);
 
     $this->drupalGet("node/" . $co1->getInstanceId());
-    $this->assertResponse(403, 'Check that node is protected outside the course.');
+    $this->assertSession()->statusCodeEquals(403, 'Check that node is protected outside the course.');
 
     // Save new fulfillment so they can access the linked content.
     $cof = $co1->getFulfillment($this->student_user);
     $cof->save();
     $this->drupalGet("node/" . $co1->getInstanceId());
-    $this->assertResponse(200, 'Check that node is accessible when user enters course object.');
+    $this->assertSession()->statusCodeEquals(200, 'Check that node is accessible when user enters course object.');
 
     // Delete fulfillment so they can no longer access the linked content.
     //$cof->delete();
@@ -48,7 +48,7 @@ class CourseObjectNodeTest extends CourseTestBase {
     $fulfillments = CourseObjectFulfillment::loadMultiple();
     \Drupal::entityTypeManager()->getStorage('course_object_fulfillment')->delete($fulfillments);
     $this->drupalGet("node/" . $co1->getInstanceId());
-    $this->assertResponse(403, 'Check that node is protected outside the course, after revoke.');
+    $this->assertSession()->statusCodeEquals(403, 'Check that node is protected outside the course, after revoke.');
   }
 
 }
diff --git a/modules/course_quiz/tests/src/Functional/CourseObjectQuizTest.php b/modules/course_quiz/tests/src/Functional/CourseObjectQuizTest.php
index 9d4ce38..1aa8d56 100644
--- a/modules/course_quiz/tests/src/Functional/CourseObjectQuizTest.php
+++ b/modules/course_quiz/tests/src/Functional/CourseObjectQuizTest.php
@@ -24,7 +24,7 @@ class CourseObjectQuizTest extends CourseTestBase {
   protected $strictConfigSchema = FALSE;
   protected static $modules = ['course_quiz', 'quiz_truefalse'];
 
-  function setUp() {
+  function setUp(): void {
     parent::setUp();
 
     $this->quiz_admin = $this->drupalCreateUser(array('access quiz', 'create truefalse quiz_question', 'update truefalse quiz_question', 'create quiz quiz', 'update any quiz quiz'));
diff --git a/modules/course_webform/src/EventSubscriber/CourseWebformEventSubscriber.php b/modules/course_webform/src/EventSubscriber/CourseWebformEventSubscriber.php
index 7fba9b9..3c83ce9 100644
--- a/modules/course_webform/src/EventSubscriber/CourseWebformEventSubscriber.php
+++ b/modules/course_webform/src/EventSubscriber/CourseWebformEventSubscriber.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\course_webform\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 class CourseWebformEventSubscriber implements EventSubscriberInterface {
@@ -18,9 +18,9 @@ class CourseWebformEventSubscriber implements EventSubscriberInterface {
   /**
    * If the current node is a course object, fulfill it for the current user.
    *
-   * @param GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     $route_match = Drupal::routeMatch();
     if ($route_match->getRouteName() == 'entity.webform.canonical') {
       $webform = $route_match->getParameter('webform');
diff --git a/modules/course_webform/tests/src/Functional/CourseObjectWebformTest.php b/modules/course_webform/tests/src/Functional/CourseObjectWebformTest.php
index f9de447..3496e24 100644
--- a/modules/course_webform/tests/src/Functional/CourseObjectWebformTest.php
+++ b/modules/course_webform/tests/src/Functional/CourseObjectWebformTest.php
@@ -16,7 +16,7 @@ class CourseObjectWebformTest extends CourseTestBase {
 
   protected static $modules = ['course_webform'];
 
-  function setUp() {
+  function setUp(): void {
     parent::setUp();
     $perms = array('create webform', 'edit any webform');
     $this->webform_admin = $this->drupalCreateUser($perms);
@@ -30,7 +30,7 @@ class CourseObjectWebformTest extends CourseTestBase {
     $co1->setCourse($course->id());
     $co1->save();
     $webform = Webform::load($co1->getInstanceId());
-    $this->assertSession()->assert($webform->id(), 'Webform created on course object save.');
+    $this->assertTrue($webform->id(), 'Webform created on course object save.');
 
 
     // Allow drafts
diff --git a/src/Entity/Course.php b/src/Entity/Course.php
index 5022047..bfbc80c 100644
--- a/src/Entity/Course.php
+++ b/src/Entity/Course.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\course\Entity;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EditorialContentEntityBase;
@@ -482,7 +483,7 @@ class Course extends EditorialContentEntityBase implements EntityOwnerInterface
    *
    * {@inheritdoc}
    */
-  static function preDelete(Drupal\Core\Entity\EntityStorageInterface $storage, array $entities) {
+  static function preDelete(EntityStorageInterface $storage, array $entities) {
     foreach ($entities as $course) {
       // Remove enrollments, which will also remove fulfillments.
       $enrollment_storage = \Drupal::entityTypeManager()->getStorage('course_enrollment');
diff --git a/src/Entity/CourseObject.php b/src/Entity/CourseObject.php
index 593e7ad..7844811 100644
--- a/src/Entity/CourseObject.php
+++ b/src/Entity/CourseObject.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\course\Entity;
 
+use Drupal\Core\Entity\RevisionLogEntityTrait;
+use Drupal\Core\Entity\EntityChangedTrait;
 use Drupal;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -73,8 +75,8 @@ use function views_embed_view;
  */
 class CourseObject extends CourseHandler implements CourseObjectInterface, RevisionLogInterface {
 
-  use Drupal\Core\Entity\RevisionLogEntityTrait;
-  use Drupal\Core\Entity\EntityChangedTrait;
+  use RevisionLogEntityTrait;
+  use EntityChangedTrait;
 
   protected $accessMessages = array();
 
diff --git a/src/EventSubscriber/CourseEventSubscriber.php b/src/EventSubscriber/CourseEventSubscriber.php
index 26c5223..0810cb1 100644
--- a/src/EventSubscriber/CourseEventSubscriber.php
+++ b/src/EventSubscriber/CourseEventSubscriber.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\course\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal;
 use Drupal\node\Entity\NodeType;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use function course_get_course_object;
 
@@ -21,9 +21,9 @@ class CourseEventSubscriber implements EventSubscriberInterface {
   /**
    * Check if the current node will fulfill an object.
    *
-   * @param GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     course_context();
   }
 
diff --git a/src/Plugin/course/CourseObjectAccess/CourseObjectAccessGrade.php b/src/Plugin/course/CourseObjectAccess/CourseObjectAccessGrade.php
index 4094329..82e5f7f 100644
--- a/src/Plugin/course/CourseObjectAccess/CourseObjectAccessGrade.php
+++ b/src/Plugin/course/CourseObjectAccess/CourseObjectAccessGrade.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\course\Plugin\course\CourseObjectAccess;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\course\Entity\CourseObject;
 use Drupal\course\Plugin\CourseObjectAccessPluginBase;
@@ -45,7 +46,7 @@ class CourseObjectAccessGrade extends CourseObjectAccessPluginBase {
   /**
    * {@inheritdoc}
    */
-  function evaluate(\Drupal\Core\Session\AccountInterface $account) {
+  function evaluate(AccountInterface $account) {
     $config = $this->getOptions();
 
     if (!empty($config['course_grade_range']) && is_numeric($config['course_grade_range']['low']) && is_numeric($config['course_grade_range']['high'])) {
diff --git a/src/Plugin/course/CourseOutline/CourseOutlineList.php b/src/Plugin/course/CourseOutline/CourseOutlineList.php
index afb1418..f6af231 100644
--- a/src/Plugin/course/CourseOutline/CourseOutlineList.php
+++ b/src/Plugin/course/CourseOutline/CourseOutlineList.php
@@ -69,7 +69,7 @@ class CourseOutlineList extends CourseOutlinePluginBase {
         '#theme' => 'image',
       ];
       $workflow[] = array(
-        '#markup' => render($image) . Link::fromTextAndUrl(t('Complete'), Url::fromRoute('course.complete', ['course' => $course->id()]))->toString(),
+        '#markup' => \Drupal::service('renderer')->render($image) . Link::fromTextAndUrl(t('Complete'), Url::fromRoute('course.complete', ['course' => $course->id()]))->toString(),
         '#id' => 'complete',
       );
     }
diff --git a/tests/src/Functional/CourseEnrollmentTest.php b/tests/src/Functional/CourseEnrollmentTest.php
index 043ccf0..6fd750d 100644
--- a/tests/src/Functional/CourseEnrollmentTest.php
+++ b/tests/src/Functional/CourseEnrollmentTest.php
@@ -166,8 +166,8 @@ class CourseEnrollmentTest extends CourseTestBase {
 
     // Check if field shows up and user is not yet enrolled.
     $this->drupalGet("course/{$courseA->id()}/take");
-    $this->assertFieldById('edit-enrollment-field-a-0-value');
-    $this->assertNoFieldById('edit-enrollment-field-b-0-value');
+    $this->assertSession()->fieldValueEquals('edit-enrollment-field-a-0-value', '');
+    $this->assertSession()->fieldValueNotEquals('edit-enrollment-field-b-0-value', '');
     $enrollment = $courseA->getEnrollment($this->student_user);
     $this->assertEmpty($enrollment);
     $this->submitForm([], t('Save'));
@@ -177,15 +177,15 @@ class CourseEnrollmentTest extends CourseTestBase {
 
     // Check that a different field is on course B
     $this->drupalGet("course/{$courseB->id()}/take");
-    $this->assertFieldById('edit-enrollment-field-b-0-value');
-    $this->assertNoFieldById('edit-enrollment-field-a-0-value');
+    $this->assertSession()->fieldValueEquals('edit-enrollment-field-b-0-value', '');
+    $this->assertSession()->fieldValueNotEquals('edit-enrollment-field-a-0-value', '');
 
     // Mark field B to not show on enrollment.
     $instanceb->setThirdPartySetting('course', 'show_field', FALSE);
     $instanceb->save();
     $this->drupalGet("course/{$courseB->id()}/take");
-    $this->assertNoFieldById('edit-enrollment-field-a-0-value');
-    $this->assertNoFieldById('edit-enrollment-field-b-0-value');
+    $this->assertSession()->fieldValueNotEquals('edit-enrollment-field-a-0-value', '');
+    $this->assertSession()->fieldValueNotEquals('edit-enrollment-field-b-0-value', '');
   }
 
 }
diff --git a/tests/src/Functional/CourseObjectAccessTest.php b/tests/src/Functional/CourseObjectAccessTest.php
index 5da7344..d61c04d 100644
--- a/tests/src/Functional/CourseObjectAccessTest.php
+++ b/tests/src/Functional/CourseObjectAccessTest.php
@@ -175,10 +175,10 @@ class CourseObjectAccessTest extends CourseTestBase {
 
     $this->drupalGet("course/{$course->id()}/take");
     $this->drupalGet("course/{$course->id()}/object/{$o_optional->id()}");
-    $this->assertNoLink(t('Next'));
+    $this->assertSession()->linkNotExists(t('Next'));
 
     $this->drupalGet("course/{$course->id()}/object/{$o1->id()}");
-    $this->assertResponse(403, t('Hidden object is not accessible.'));
+    $this->assertSession()->statusCodeEquals(403, t('Hidden object is not accessible.'));
 
     // Check that the course is not complete without completing the hidden object.
     $report = $course->getEnrollment($user);
@@ -216,10 +216,10 @@ class CourseObjectAccessTest extends CourseTestBase {
 
     // Completion link.
     $this->clickLink(t('Next'));
-    $this->assertResponse(200, t('Did not get access denied.'));
+    $this->assertSession()->statusCodeEquals(200, t('Did not get access denied.'));
 
     $this->drupalGet("course/{$course->id()}/object/{$o1->id()}");
-    $this->assertResponse(403, t('Disabled object is not accessible.'));
+    $this->assertSession()->statusCodeEquals(403, t('Disabled object is not accessible.'));
 
     // Check that the course is complete even without completing the disabled
     // object.
@@ -234,10 +234,10 @@ class CourseObjectAccessTest extends CourseTestBase {
     $this->drupalGet("course/{$course->id()}/take");
 
     $this->drupalGet("course/{$course->id()}/object/{$o1->id()}");
-    $this->assertResponse(403, t('Disabled first object is not accessible.'));
+    $this->assertSession()->statusCodeEquals(403, t('Disabled first object is not accessible.'));
 
     $this->drupalGet("course/{$course->id()}/object/{$o_optional->id()}");
-    $this->assertResponse(200, t('Second object is accessible.'));
+    $this->assertSession()->statusCodeEquals(200, t('Second object is accessible.'));
   }
 
 }
diff --git a/tests/src/Functional/CourseTestBase.php b/tests/src/Functional/CourseTestBase.php
index bf3161c..11e821d 100644
--- a/tests/src/Functional/CourseTestBase.php
+++ b/tests/src/Functional/CourseTestBase.php
@@ -16,7 +16,7 @@ abstract class CourseTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->admin_user = $this->drupalCreateUser(array('bypass node access', 'administer course', 'administer courses'));
     $this->student_user = $this->createStudentUser();
diff --git a/tests/src/Functional/CourseWorkflowTest.php b/tests/src/Functional/CourseWorkflowTest.php
index e467e87..abf9035 100644
--- a/tests/src/Functional/CourseWorkflowTest.php
+++ b/tests/src/Functional/CourseWorkflowTest.php
@@ -33,30 +33,30 @@ class CourseWorkflowTest extends CourseTestBase {
     $co2->save();
 
     $this->drupalGet("course/{$course->id()}/complete");
-    $this->assertResponse(403, 'Cannot see completion page');
+    $this->assertSession()->statusCodeEquals(403, 'Cannot see completion page');
 
     // Login, enroll, and try to access the objects via links.
     $this->drupalLogin($this->student_user);
     $course->enroll($this->student_user);
 
     $this->drupalGet("course/{$course->id()}/complete");
-    $this->assertResponse(200, 'Can see completion page');
+    $this->assertSession()->statusCodeEquals(200, 'Can see completion page');
     $this->assertSession()->responseContains('This course is not complete.');
 
     $this->drupalGet("course/{$course->id()}");
     $this->assertSession()->linkExistsExact(t('Take course'));
     $this->drupalGet("course/{$course->id()}/take");
-    $this->assertLink('Course object 1');
-    $this->assertNoLink('Course object 2');
-    $this->assertNoLink('Next');
+    $this->assertSession()->linkExists('Course object 1');
+    $this->assertSession()->linkNotExists('Course object 2');
+    $this->assertSession()->linkNotExists('Next');
     $this->clickLink('Course object 1');
     $this->assertSession()->responseContains(t('I am a test course object with the title @title', array('@title' => $co1->getOption('title'))));
 
     // Set the first object complete.
     $co1->getFulfillment($this->student_user)->setComplete(1)->save();
     $this->drupalGet("course/{$course->id()}/take");
-    $this->assertLink('Course object 2');
-    $this->assertLink('Next');
+    $this->assertSession()->linkExists('Course object 2');
+    $this->assertSession()->linkExists('Next');
     $this->clickLink('Course object 2');
     $this->assertSession()->responseContains(t('I am a test course object with the title @title', array('@title' => $co2->getOption('title'))));
 
@@ -70,7 +70,7 @@ class CourseWorkflowTest extends CourseTestBase {
     // Set the second object complete.
     $co2->getFulfillment($this->student_user)->setComplete(1)->save();
     $this->drupalGet("course/{$course->id()}/take");
-    $this->assertLink('Complete');
+    $this->assertSession()->linkExists('Complete');
     $this->clickLink('Complete');
     $this->assertSession()->responseContains('You have completed the course.');
 
