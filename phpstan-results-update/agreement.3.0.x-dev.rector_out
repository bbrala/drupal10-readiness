modules/contrib/agreement/agreement.install
modules/contrib/agreement/src/AgreementHandlerInterface.php
modules/contrib/agreement/tests/src/Functional/AgreementCustomUnprivilegedUserTest.php
modules/contrib/agreement/src/Entity/Agreement.php
modules/contrib/agreement/agreement.module
modules/contrib/agreement/src/Entity/AgreementDeleteForm.php
modules/contrib/agreement/agreement.post_update.php
modules/contrib/agreement/src/Entity/AgreementForm.php
modules/contrib/agreement/agreement.views.inc
modules/contrib/agreement/src/AgreementHandler.php
modules/contrib/agreement/tests/src/Functional/AgreementDefaultsPrivilegedUserTest.php
modules/contrib/agreement/tests/src/Functional/AgreementDefaultsUnprivilegedUserTest.php
modules/contrib/agreement/tests/src/Functional/AgreementLogoutExceptionTest.php
modules/contrib/agreement/tests/src/Functional/AgreementMultilingualTest.php
modules/contrib/agreement/src/Entity/AgreementListBuilder.php
modules/contrib/agreement/tests/src/Functional/AgreementMultipleRoleTest.php
modules/contrib/agreement/src/Entity/AgreementViewBuilder.php
modules/contrib/agreement/src/Entity/Routing/AgreementRouteProvider.php
modules/contrib/agreement/tests/src/Functional/AgreementMultipleTest.php
modules/contrib/agreement/src/EventSubscriber/AgreementSubscriber.php
modules/contrib/agreement/tests/src/Functional/AgreementRecordsViewsTest.php
modules/contrib/agreement/tests/src/Functional/AgreementRevokeTest.php
modules/contrib/agreement/tests/src/Functional/AgreementTestBase.php
modules/contrib/agreement/src/Form/AgreementForm.php
modules/contrib/agreement/tests/src/Kernel/d6/AgreementMigrateTest.php
modules/contrib/agreement/src/Plugin/migrate/destination/Agreement.php
modules/contrib/agreement/tests/src/Kernel/d7/AgreementMigrateTest.php
modules/contrib/agreement/src/Plugin/migrate/process/AgreementSettings.php
modules/contrib/agreement/tests/src/Unit/AgreementHandlerTest.php
modules/contrib/agreement/src/Plugin/migrate/source/Agreement.php
modules/contrib/agreement/src/Plugin/migrate/source/d7/AgreementType.php
modules/contrib/agreement/src/Plugin/views/field/AgreementEntity.php
modules/contrib/agreement/tests/fixtures/drupal6.php
modules/contrib/agreement/tests/fixtures/drupal7.php
modules/contrib/agreement/tests/src/Functional/AgreementAccessDeniedRedirectTest.php
modules/contrib/agreement/tests/src/Unit/Entity/AgreementTest.php
modules/contrib/agreement/tests/src/Unit/EventSubscriber/AgreementSubscriberTest.php
modules/contrib/agreement/tests/src/Functional/AgreementAnonymousTest.php
modules/contrib/agreement/tests/src/Functional/AgreementBypassUserTest.php
modules/contrib/agreement/tests/src/Functional/AgreementCustomFrequencyTest.php
modules/contrib/agreement/tests/src/Unit/Plugin/views/field/AgreementEntityTest.php

5 files with changes
====================

1) modules/contrib/agreement/src/AgreementHandler.php:225

    ---------- begin diff ----------
@@ @@
     elseif ($agreement->agreeOnce()) {
       $expire = new \DateTime('+10 years');
     }
-    return new Cookie($cookieName, $agreed, $expire, '/', NULL, NULL, 'lax');
+    return Cookie::create($cookieName, $agreed, $expire, '/', NULL, NULL, 'lax');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * NewToStaticCallRector


2) modules/contrib/agreement/src/EventSubscriber/AgreementSubscriber.php:7

    ---------- begin diff ----------
@@ @@
 use Drupal\Core\Session\SessionManagerInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpKernel\Event\ExceptionEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\HttpExceptionInterface;

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


3) modules/contrib/agreement/tests/src/Unit/Plugin/views/field/AgreementEntityTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\agreement\Unit\Plugin\views\field;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\agreement\Entity\Agreement;
 use Drupal\agreement\Plugin\views\field\AgreementEntity;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ @@
  */
 class AgreementEntityTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Agreement entity plugin.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/agreement/tests/src/Unit/EventSubscriber/AgreementSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\agreement\Unit\EventSubscriber;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\agreement\EventSubscriber\AgreementSubscriber;
 use Drupal\Tests\UnitTestCase;
 use Prophecy\Argument;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Symfony\Component\HttpKernel\HttpKernelInterface;

@@ @@
  */
 class AgreementSubscriberTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Asserts that check for redirection method is functional.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/agreement/tests/src/Unit/AgreementHandlerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\agreement\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\agreement\AgreementHandler;
 use Drupal\agreement\Entity\Agreement;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
@@ @@
  */
 class AgreementHandlerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Asserts that database operation errors are handled.
    *
@@ @@
       ->willReturn($transactionProphet->reveal());

     // Prophecy does not allow mocking objects that return $this because.
-    $delete = $this->getMockBuilder('\Drupal\Core\Database\Query\Delete')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $delete = $this->createMock('\Drupal\Core\Database\Query\Delete');
     $delete->expects($this->any())
       ->method('condition')
       ->willReturnSelf();
@@ @@
         return 3;
       });

-    $insert = $this->getMockBuilder('\Drupal\Core\Database\Query\Insert')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $insert = $this->createMock('\Drupal\Core\Database\Query\Insert');
     $insert->expects($this->any())
       ->method('fields')
       ->willReturnSelf();
@@ @@
     $statementProphet->fetchField()->willReturn($agreed);

     // Mocks select query using mock object because prophecy.
-    $select = $this->getMockBuilder('\Drupal\Core\Database\Query\SelectInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $select = $this->createMock('\Drupal\Core\Database\Query\SelectInterface');
     $select->expects($this->any())
       ->method('fields')
       ->willReturnSelf();
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 5 files have been changed by Rector                                       

