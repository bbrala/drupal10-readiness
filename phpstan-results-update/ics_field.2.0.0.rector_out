modules/contrib/ics_field/ics_field.module
modules/contrib/ics_field/src/Timezone/DrupalUserTimezoneProvider.php
modules/contrib/ics_field/src/CalendarProperty/CalendarPropertyProcessor.php
modules/contrib/ics_field/src/Timezone/TimezoneProviderInterface.php
modules/contrib/ics_field/tests/src/Functional/CalendarDownloadNodeFormTest.php
modules/contrib/ics_field/src/CalendarProperty/CalendarPropertyProcessorFactory.php
modules/contrib/ics_field/src/Exception/CalendarDownloadInvalidParametersException.php
modules/contrib/ics_field/src/Exception/CalendarDownloadInvalidPropertiesException.php
modules/contrib/ics_field/src/Exception/IcalTimezoneInvalidTimestampException.php
modules/contrib/ics_field/src/ICalFactory.php
modules/contrib/ics_field/src/ICalTimezoneGenerator.php
modules/contrib/ics_field/src/IcsFileManager.php
modules/contrib/ics_field/tests/src/Unit/CalendarProperty/CalendarPropertyProcessorFactoryTest.php
modules/contrib/ics_field/tests/src/Unit/CalendarProperty/CalendarPropertyProcessorTest.php
modules/contrib/ics_field/src/Normalizer/UrlNormalizer.php
modules/contrib/ics_field/src/Normalizer/UrlNormalizerInterface.php
modules/contrib/ics_field/src/Plugin/Field/FieldFormatter/CalendarDownloadDefaultFormatter.php
modules/contrib/ics_field/src/Plugin/Field/FieldType/CalendarDownloadType.php
modules/contrib/ics_field/tests/src/Unit/ICalFactoryTest.php
modules/contrib/ics_field/src/Plugin/Field/FieldWidget/CalendarDownloadDefaultWidget.php
modules/contrib/ics_field/tests/src/Unit/ICalTimezoneGeneratorTest.php
modules/contrib/ics_field/tests/src/Unit/Normalizer/UrlNormalizerTest.php

6 files with changes
====================

1) modules/contrib/ics_field/tests/src/Unit/ICalFactoryTest.php:105

    ---------- begin diff ----------
@@ @@
   /**
    * A data provider.
    *
-   * @return \PHPUnit_Framework_MockObject_MockObject[]
+   * @return \PHPUnit\Framework\MockObject\MockObject[]
    *   The mock object for Symfony\Component\HttpFoundation\Request.
    */
   public function schemeHttpHostProvider() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ics_field/tests/src/Unit/CalendarProperty/CalendarPropertyProcessorTest.php:157

    ---------- begin diff ----------
@@ @@
   }

   /**
-   * @return \PHPUnit_Framework_MockObject_MockObject
+   * @return \PHPUnit\Framework\MockObject\MockObject
    */
   private function getTokenMock() {
-    $token = $this->getMockBuilder('Drupal\Core\Utility\Token')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $token = $this->createMock('Drupal\Core\Utility\Token');
     $token->expects($this->any())
       ->method('replace')
       ->will($this->returnArgument(0));
@@ @@
    * Get TimezoneProviderInterface mock.
    */
   private function getTzpMock() {
-    $tzp = $this->getMockBuilder('Drupal\ics_field\Timezone\TimezoneProviderInterface')
-      ->getMock();
+    $tzp = $this->createMock('Drupal\ics_field\Timezone\TimezoneProviderInterface');
     $tzp->expects($this->any())
       ->method('getTimezoneString')
       ->will($this->returnValue('Europe/Zurich'));
@@ @@
   }

   /**
-   * @return \PHPUnit_Framework_MockObject_MockObject
+   * @return \PHPUnit\Framework\MockObject\MockObject
    */
   private function getTranslationManagerMock() {

-    $tr = $this->getMockBuilder('Drupal\Core\StringTranslation\TranslationManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $tr = $this->createMock('Drupal\Core\StringTranslation\TranslationManager');
     $tr->expects($this->any())
       ->method('translate')
       ->will($this->returnArgument(0));
@@ @@
   }

   /**
-   * @return \PHPUnit_Framework_MockObject_MockObject
+   * @return \PHPUnit\Framework\MockObject\MockObject
    */
   private function getContentEntityMock() {

-    $ce = $this->getMockBuilder('Drupal\Core\Entity\ContentEntityInterface')
-      ->getMock();
+    $ce = $this->createMock('Drupal\Core\Entity\ContentEntityInterface');
     $ce->expects($this->any())
       ->method('uuid')
       ->will($this->returnValue('i_am_the_uuid'));
@@ @@
       ->will($this->returnValue('node'));

     // Method get needs to return some mocks.
-    $il = $this->getMockBuilder('Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $il = $this->createMock('Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList');
     // Returning a value that is not a instanceof DrupalDateTime will result in the datetime being skipped
     // this is enough to get our tests working here.
     $il->expects($this->any())
@@ @@
   }

   /**
-   * @return \PHPUnit_Framework_MockObject_MockObject
+   * @return \PHPUnit\Framework\MockObject\MockObject
    */
   private function getContentEntityWithDateTimeMock($datetimeString = '2020-11-17T00:00:00') {

-    $ce = $this->getMockBuilder('Drupal\Core\Entity\ContentEntityInterface')
-      ->getMock();
+    $ce = $this->createMock('Drupal\Core\Entity\ContentEntityInterface');
     $ce->expects($this->any())
       ->method('uuid')
       ->will($this->returnValue('i_am_the_uuid'));
@@ @@
       ->will($this->returnValue('node'));

     // Method get needs to return some mocks.
-    $il = $this->getMockBuilder('Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $il = $this->createMock('Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList');

-    $dt = $this->getMockBuilder('Drupal\Core\Datetime\DrupalDateTime')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dt = $this->createMock('Drupal\Core\Datetime\DrupalDateTime');
     $dt->expects($this->any())
       ->method('render')
       ->will($this->returnValue($datetimeString));
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/ics_field/tests/src/Unit/CalendarProperty/CalendarPropertyProcessorFactoryTest.php:16

    ---------- begin diff ----------
@@ @@
    */
   public function testInstantiation() {

-    $tpi = $this->getMockBuilder('Drupal\ics_field\Timezone\TimezoneProviderInterface')
-      ->getMock();
-    $t = $this->getMockBuilder('Drupal\Core\Utility\Token')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $tpi = $this->createMock('Drupal\ics_field\Timezone\TimezoneProviderInterface');
+    $t = $this->createMock('Drupal\Core\Utility\Token');
     $f = new CalendarPropertyProcessorFactory($tpi, $t);

     $this->assertInstanceOf('Drupal\ics_field\CalendarProperty\CalendarPropertyProcessorFactory',
@@ @@
    */
   public function testGeneration() {

-    $tpi = $this->getMockBuilder('Drupal\ics_field\Timezone\TimezoneProviderInterface')
-      ->getMock();
-    $t = $this->getMockBuilder('Drupal\Core\Utility\Token')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $tpi = $this->createMock('Drupal\ics_field\Timezone\TimezoneProviderInterface');
+    $t = $this->createMock('Drupal\Core\Utility\Token');
     $f = new CalendarPropertyProcessorFactory($tpi, $t);

-    $fdi = $this->getMockBuilder('Drupal\Core\Field\FieldDefinitionInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $fdi = $this->createMock('Drupal\Core\Field\FieldDefinitionInterface');
     $fdi->expects($this->once())
       ->method('getSetting')
       ->will($this->returnValue('I am the reference'));

-    $fci = $this->getMockBuilder('Drupal\Core\Field\FieldConfigInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $fci = $this->createMock('Drupal\Core\Field\FieldConfigInterface');
     $fci->expects($this->once())
       ->method('uuid')
       ->will($this->returnValue('i am the uuid'));
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/ics_field/tests/src/Functional/CalendarDownloadNodeFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ics_field\Functional;

+use Drupal\Core\Config\Schema\SchemaIncompleteException;
 use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
 use Drupal\node\Entity\NodeType;
 use Drupal\Tests\BrowserTestBase;
@@ @@

   /**
    * {@inheritdoc}
-   *
-   * @expectedException \Drupal\Core\Config\Schema\SchemaIncompleteException
    */
   public function setUp(): void {
+    $this->expectException(SchemaIncompleteException::class);
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser([], NULL, 1);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/ics_field/src/Plugin/Field/FieldFormatter/CalendarDownloadDefaultFormatter.php:52

    ---------- begin diff ----------
@@ @@
     $fileRef = $item->get('fileref')->getValue();
     $file = File::load($fileRef);//TODO - once formatter classes get container access replace with DI
     if ($file) {
-      $fileUrlObj = Url::fromUri(file_create_url($file->getFileUri()));
+      $fileUrlObj = \Drupal::service('file_url_generator')->generate($file->getFileUri());
       $build = [
         '#type'  => 'link',
         '#title' => $this->t('iCal Download'),
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/ics_field/src/IcsFileManager.php:225

    ---------- begin diff ----------
@@ @@

     $file = File::load($fileId);
     $fileUri = $file->getFileUri();
-    if (!file_save_data($icsFileStr, $fileUri, FileSystemInterface::EXISTS_REPLACE)) {
+    if (!\Drupal::service('file.repository')->writeData($icsFileStr, $fileUri, FileSystemInterface::EXISTS_REPLACE)) {
       $this->handleFileSaveError($fileUri);
     }
     // Always return the file id, so that it retains the reference to the
@@ @@
                         ->uuid()) .
                   '_event.ics';
       $fileUri = $uploadLocation . '/' . $fileName;
-      $file = file_save_data($icsFileStr,
-                             $fileUri,
-                             FileSystemInterface::EXISTS_REPLACE);
+      $file = \Drupal::service('file.repository')->writeData($icsFileStr, $fileUri, FileSystemInterface::EXISTS_REPLACE);
       if ($file) {
         return $file->id();
       }
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * WrapReturnRector


 [OK] 6 files have been changed by Rector                                       

