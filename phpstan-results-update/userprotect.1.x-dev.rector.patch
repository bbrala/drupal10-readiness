diff --git a/tests/src/Functional/InstallTest.php b/tests/src/Functional/InstallTest.php
index c2e19d1..ea9ed65 100644
--- a/tests/src/Functional/InstallTest.php
+++ b/tests/src/Functional/InstallTest.php
@@ -38,7 +38,7 @@ class InstallTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->moduleHandler = $this->container->get('module_handler');
     $this->moduleInstaller = $this->container->get('module_installer');
@@ -62,7 +62,7 @@ class InstallTest extends BrowserTestBase {
     // Ensure an authenticated user can edit its own account.
     $this->drupalLogin($account);
     $this->drupalGet('user/' . $account->id() . '/edit');
-    $this->assertResponse(200, 'Authenticated user has access to edit page of own account.');
+    $this->assertSession()->statusCodeEquals(200, 'Authenticated user has access to edit page of own account.');
 
     // Uninstall userprotect.
     $this->moduleInstaller->uninstall(['userprotect']);
diff --git a/tests/src/Functional/ProtectionRuleCrudTest.php b/tests/src/Functional/ProtectionRuleCrudTest.php
index 40a2309..559ec4e 100644
--- a/tests/src/Functional/ProtectionRuleCrudTest.php
+++ b/tests/src/Functional/ProtectionRuleCrudTest.php
@@ -22,7 +22,7 @@ class ProtectionRuleCrudTest extends UserProtectBrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->account = $this->drupalCreateUser(['userprotect.administer']);
@@ -44,7 +44,8 @@ class ProtectionRuleCrudTest extends UserProtectBrowserTestBase {
       'entity_id' => $rid,
       'protection[user_mail]' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/people/userprotect/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/people/userprotect/add');
+    $this->submitForm($edit, t('Save'));
 
     // Assert that the rule was created.
     $protection_rule = ProtectionRule::load($rule_id);
@@ -65,7 +66,8 @@ class ProtectionRuleCrudTest extends UserProtectBrowserTestBase {
       'protection[user_name]' => TRUE,
       'protection[user_mail]' => FALSE,
     ];
-    $this->drupalPostForm('admin/config/people/userprotect/manage/' . $rule_id, $edit, t('Save'));
+    $this->drupalGet('admin/config/people/userprotect/manage/' . $rule_id);
+    $this->submitForm($edit, t('Save'));
 
     // Assert that the rule was updated with the expected values.
     $protection_rule = ProtectionRule::load($rule_id);
@@ -85,15 +87,17 @@ class ProtectionRuleCrudTest extends UserProtectBrowserTestBase {
       'entity_id' => $rid,
       'protection[user_mail]' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/people/userprotect/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/people/userprotect/add');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains('The machine-readable name is already in use. It must be unique.');
 
     // Assert only one protection rule exists.
     $entities = ProtectionRule::loadMultiple(NULL);
     $this->assertCount(1, $entities, 'Only one protection rule exists.');
+    $this->drupalGet('admin/config/people/userprotect/manage/' . $rule_id . '/delete');
 
     // Delete rule.
-    $this->drupalPostForm('admin/config/people/userprotect/manage/' . $rule_id . '/delete', [], t('Delete'));
+    $this->submitForm([], t('Delete'));
     // Assert the rule no longer exists.
     $protection_rule = ProtectionRule::load($rule_id);
     $this->assertEmpty($protection_rule, 'The protection rule was deleted.');
@@ -114,7 +118,8 @@ class ProtectionRuleCrudTest extends UserProtectBrowserTestBase {
       'entity_id' => $account->getAccountName(),
       'protection[user_mail]' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/people/userprotect/add/user', $edit, t('Save'));
+    $this->drupalGet('admin/config/people/userprotect/add/user');
+    $this->submitForm($edit, t('Save'));
 
     // Assert that the rule was created.
     $protection_rule = ProtectionRule::load($rule_id);
@@ -135,7 +140,8 @@ class ProtectionRuleCrudTest extends UserProtectBrowserTestBase {
       'protection[user_name]' => TRUE,
       'protection[user_mail]' => FALSE,
     ];
-    $this->drupalPostForm('admin/config/people/userprotect/manage/' . $rule_id, $edit, t('Save'));
+    $this->drupalGet('admin/config/people/userprotect/manage/' . $rule_id);
+    $this->submitForm($edit, t('Save'));
 
     // Assert that the rule was updated with the expected values.
     $protection_rule = ProtectionRule::load($rule_id);
@@ -155,15 +161,17 @@ class ProtectionRuleCrudTest extends UserProtectBrowserTestBase {
       'entity_id' => $account->getAccountName(),
       'protection[user_mail]' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/people/userprotect/add/user', $edit, t('Save'));
+    $this->drupalGet('admin/config/people/userprotect/add/user');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains('The machine-readable name is already in use. It must be unique.');
 
     // Assert only one protection rule exists.
     $entities = ProtectionRule::loadMultiple(NULL);
     $this->assertCount(1, $entities, 'Only one protection rule exists.');
+    $this->drupalGet('admin/config/people/userprotect/manage/' . $rule_id . '/delete');
 
     // Delete rule.
-    $this->drupalPostForm('admin/config/people/userprotect/manage/' . $rule_id . '/delete', [], t('Delete'));
+    $this->submitForm([], t('Delete'));
     // Assert the rule no longer exists.
     $protection_rule = ProtectionRule::load($rule_id);
     $this->assertEmpty($protection_rule, 'The protection rule was deleted.');
diff --git a/tests/src/Functional/RoleDelegation/RoleDelegationIntegrationTest.php b/tests/src/Functional/RoleDelegation/RoleDelegationIntegrationTest.php
index 71f7f5c..bc48e20 100644
--- a/tests/src/Functional/RoleDelegation/RoleDelegationIntegrationTest.php
+++ b/tests/src/Functional/RoleDelegation/RoleDelegationIntegrationTest.php
@@ -62,7 +62,7 @@ class RoleDelegationIntegrationTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $admin_role = $this->createAdminRole();
diff --git a/tests/src/Functional/UnsavedUserFieldAccessTest.php b/tests/src/Functional/UnsavedUserFieldAccessTest.php
index bd35f4f..36f899d 100644
--- a/tests/src/Functional/UnsavedUserFieldAccessTest.php
+++ b/tests/src/Functional/UnsavedUserFieldAccessTest.php
@@ -24,7 +24,7 @@ class UnsavedUserFieldAccessTest extends UserProtectBrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->account = $this->drupalCreateUser(['administer users', 'administer permissions']);
@@ -44,7 +44,8 @@ class UnsavedUserFieldAccessTest extends UserProtectBrowserTestBase {
       'pass[pass2]' => $pass,
       'notify' => FALSE,
     ];
-    $this->drupalPostForm('admin/people/create', $edit, t('Create new account'));
+    $this->drupalGet('admin/people/create');
+    $this->submitForm($edit, t('Create new account'));
     $this->assertSession()->pageTextContains(t('Created a new user account for @name. No email has been sent.', ['@name' => $edit['name']]), 'User created');
 
     // Try to create an user with the same name and assert that it doesn't
@@ -56,7 +57,8 @@ class UnsavedUserFieldAccessTest extends UserProtectBrowserTestBase {
       'pass[pass2]' => $pass,
       'notify' => FALSE,
     ];
-    $this->drupalPostForm('admin/people/create', $edit, t('Create new account'));
+    $this->drupalGet('admin/people/create');
+    $this->submitForm($edit, t('Create new account'));
     $this->assertSession()->pageTextContains(t('The username @name is already taken.', ['@name' => $edit['name']]));
   }
 
diff --git a/tests/src/Functional/UserProtectionPermissionsTest.php b/tests/src/Functional/UserProtectionPermissionsTest.php
index 5b618eb..22fa5c8 100644
--- a/tests/src/Functional/UserProtectionPermissionsTest.php
+++ b/tests/src/Functional/UserProtectionPermissionsTest.php
@@ -26,7 +26,7 @@ class UserProtectionPermissionsTest extends UserProtectBrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Revoke default permissions on the authenticated user role that are
@@ -53,7 +53,8 @@ class UserProtectionPermissionsTest extends UserProtectBrowserTestBase {
     $edit = [
       'mail' => $this->randomMachineName() . '@example.com',
     ];
-    $this->drupalPostForm('user/' . $account->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('user/' . $account->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
 
     // Assert the mail address changed.
     $account = $this->reloadEntity($account);
@@ -93,7 +94,8 @@ class UserProtectionPermissionsTest extends UserProtectBrowserTestBase {
       'pass[pass1]' => $new_pass,
       'pass[pass2]' => $new_pass,
     ];
-    $this->drupalPostForm('user/' . $account->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('user/' . $account->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
 
     // Assert the password changed.
     $account = $this->reloadEntity($account);
@@ -132,7 +134,7 @@ class UserProtectionPermissionsTest extends UserProtectBrowserTestBase {
 
     // Assert the user can edit its own account.
     $this->drupalGet('user/' . $account->id() . '/edit');
-    $this->assertResponse(200, "The user may edit its own account.");
+    $this->assertSession()->statusCodeEquals(200, "The user may edit its own account.");
   }
 
   /**
@@ -148,7 +150,7 @@ class UserProtectionPermissionsTest extends UserProtectBrowserTestBase {
 
     // Assert the user can edit its own account.
     $this->drupalGet('user/' . $account->id() . '/edit');
-    $this->assertResponse(403, "The user may NOT edit its own account.");
+    $this->assertSession()->statusCodeEquals(403, "The user may NOT edit its own account.");
   }
 
 }
diff --git a/tests/src/Functional/UserProtectionTest.php b/tests/src/Functional/UserProtectionTest.php
index 72edbfe..1ede2c1 100644
--- a/tests/src/Functional/UserProtectionTest.php
+++ b/tests/src/Functional/UserProtectionTest.php
@@ -20,7 +20,7 @@ class UserProtectionTest extends UserProtectBrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->account = $this->drupalCreateUser(['administer users', 'administer permissions']);
diff --git a/tests/src/Kernel/Entity/ProtectionRuleUnitTest.php b/tests/src/Kernel/Entity/ProtectionRuleUnitTest.php
index 8a9f599..28a9c18 100644
--- a/tests/src/Kernel/Entity/ProtectionRuleUnitTest.php
+++ b/tests/src/Kernel/Entity/ProtectionRuleUnitTest.php
@@ -40,7 +40,7 @@ class ProtectionRuleUnitTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->manager = UserProtect::pluginManager();
     $this->protectionRule = ProtectionRule::create([
@@ -60,37 +60,37 @@ class ProtectionRuleUnitTest extends KernelTestBase {
    * Tests id().
    */
   public function testId() {
-    $this->assertIdentical('dummy', $this->protectionRule->id());
+    $this->assertSame('dummy', $this->protectionRule->id());
   }
 
   /**
    * Tests setProtectedEntityTypeId() and getProtectedEntityTypeId().
    */
   public function testProtectedEntityTypeId() {
-    $this->assertIdentical('user_role', $this->protectionRule->getProtectedEntityTypeId());
+    $this->assertSame('user_role', $this->protectionRule->getProtectedEntityTypeId());
     $entity_type = 'user';
     $this->assertInstanceOf(ProtectionRuleInterface::class, $this->protectionRule->setProtectedEntityTypeId($entity_type));
-    $this->assertIdentical($entity_type, $this->protectionRule->getProtectedEntityTypeId());
+    $this->assertSame($entity_type, $this->protectionRule->getProtectedEntityTypeId());
   }
 
   /**
    * Tests setProtectedEntityId() and getProtectedEntityId().
    */
   public function testProtectedEntityId() {
-    $this->assertIdentical('administrator', $this->protectionRule->getProtectedEntityId());
+    $this->assertSame('administrator', $this->protectionRule->getProtectedEntityId());
     $entity_id = 'authenticated';
     $this->assertInstanceOf(ProtectionRuleInterface::class, $this->protectionRule->setProtectedEntityId($entity_id));
-    $this->assertIdentical($entity_id, $this->protectionRule->getProtectedEntityId());
+    $this->assertSame($entity_id, $this->protectionRule->getProtectedEntityId());
   }
 
   /**
    * Tests setBypassRoles() and getBypassRoles().
    */
   public function testBypassRoles() {
-    $this->assertIdentical([], $this->protectionRule->getBypassRoles());
+    $this->assertSame([], $this->protectionRule->getBypassRoles());
     $roles = ['administrator'];
     $this->assertInstanceOf(ProtectionRuleInterface::class, $this->protectionRule->setBypassRoles($roles));
-    $this->assertIdentical($roles, $this->protectionRule->getBypassRoles());
+    $this->assertSame($roles, $this->protectionRule->getBypassRoles());
   }
 
   /**
@@ -128,23 +128,23 @@ class ProtectionRuleUnitTest extends KernelTestBase {
    */
   public function testToArray() {
     $array = $this->protectionRule->toArray();
-    $this->assertIdentical('dummy', $array['name']);
-    $this->assertIdentical('Dummy', $array['label']);
+    $this->assertSame('dummy', $array['name']);
+    $this->assertSame('Dummy', $array['label']);
     $expected_protections = [
       'user_mail' => [
         'status' => TRUE,
       ],
     ];
-    $this->assertIdentical($expected_protections, $array['protections']);
-    $this->assertIdentical('user_role', $array['protectedEntityTypeId']);
-    $this->assertIdentical('administrator', $array['protectedEntityId']);
+    $this->assertSame($expected_protections, $array['protections']);
+    $this->assertSame('user_role', $array['protectedEntityTypeId']);
+    $this->assertSame('administrator', $array['protectedEntityId']);
   }
 
   /**
    * Tests getPermissionName().
    */
   public function testGetPermissionName() {
-    $this->assertIdentical('userprotect.dummy.bypass', $this->protectionRule->getPermissionName());
+    $this->assertSame('userprotect.dummy.bypass', $this->protectionRule->getPermissionName());
   }
 
   /**
diff --git a/tests/src/Kernel/FieldAccessTest.php b/tests/src/Kernel/FieldAccessTest.php
index 1e13225..9e863d2 100644
--- a/tests/src/Kernel/FieldAccessTest.php
+++ b/tests/src/Kernel/FieldAccessTest.php
@@ -19,7 +19,7 @@ class FieldAccessTest extends UserProtectKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create an user who administer users. Explicitly set user ID to '2'
diff --git a/tests/src/Kernel/ProtectionRuleBypassTest.php b/tests/src/Kernel/ProtectionRuleBypassTest.php
index 20eacbc..d6dc945 100644
--- a/tests/src/Kernel/ProtectionRuleBypassTest.php
+++ b/tests/src/Kernel/ProtectionRuleBypassTest.php
@@ -20,7 +20,7 @@ class ProtectionRuleBypassTest extends UserProtectKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->accessController = \Drupal::entityTypeManager()->getAccessControlHandler('user');
diff --git a/tests/src/Kernel/UserProtectKernelTestBase.php b/tests/src/Kernel/UserProtectKernelTestBase.php
index b5b099f..f763d61 100644
--- a/tests/src/Kernel/UserProtectKernelTestBase.php
+++ b/tests/src/Kernel/UserProtectKernelTestBase.php
@@ -20,7 +20,7 @@ abstract class UserProtectKernelTestBase extends EntityKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installSchema('user', ['users_data']);
   }
diff --git a/tests/src/Unit/Plugin/UserProtection/UserProtectionBaseUnitTest.php b/tests/src/Unit/Plugin/UserProtection/UserProtectionBaseUnitTest.php
index ab5e1a8..5c0ce32 100644
--- a/tests/src/Unit/Plugin/UserProtection/UserProtectionBaseUnitTest.php
+++ b/tests/src/Unit/Plugin/UserProtection/UserProtectionBaseUnitTest.php
@@ -40,7 +40,7 @@ class UserProtectionBaseUnitTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->moduleHandler = $this->createMock('\Drupal\Core\Extension\ModuleHandlerInterface');
