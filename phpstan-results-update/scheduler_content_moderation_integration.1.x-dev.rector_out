modules/contrib/scheduler_content_moderation_integration/scheduler_content_moderation_integration.module
modules/contrib/scheduler_content_moderation_integration/tests/src/Functional/LayoutBuilderTest.php
modules/contrib/scheduler_content_moderation_integration/tests/src/Functional/PublishedStateConstraintTest.php
modules/contrib/scheduler_content_moderation_integration/tests/src/Functional/SchedulerContentModerationBrowserTestBase.php
modules/contrib/scheduler_content_moderation_integration/scheduler_content_moderation_integration.tokens.inc
modules/contrib/scheduler_content_moderation_integration/tests/src/Functional/TokenReplaceTest.php
modules/contrib/scheduler_content_moderation_integration/src/EventSubscriber/SchedulerEventSubscriber.php
modules/contrib/scheduler_content_moderation_integration/tests/src/Functional/TransitionAccessTest.php
modules/contrib/scheduler_content_moderation_integration/src/Plugin/Field/FieldWidget/SchedulerModerationWidget.php
modules/contrib/scheduler_content_moderation_integration/src/Plugin/Validation/Constraint/ConstraintValidatorBase.php
modules/contrib/scheduler_content_moderation_integration/src/Plugin/Validation/Constraint/PublishStateConstraint.php
modules/contrib/scheduler_content_moderation_integration/src/Plugin/Validation/Constraint/PublishStateConstraintValidator.php
modules/contrib/scheduler_content_moderation_integration/src/Plugin/Validation/Constraint/TransitionAccessConstraint.php
modules/contrib/scheduler_content_moderation_integration/src/Plugin/Validation/Constraint/TransitionAccessConstraintValidator.php
modules/contrib/scheduler_content_moderation_integration/tests/src/Functional/UnpublishedStateConstraintTest.php
modules/contrib/scheduler_content_moderation_integration/src/Plugin/Validation/Constraint/UnPublishStateConstraint.php
modules/contrib/scheduler_content_moderation_integration/src/Plugin/Validation/Constraint/UnPublishStateConstraintValidator.php
modules/contrib/scheduler_content_moderation_integration/tests/modules/scmi_testing/scmi_testing.module
modules/contrib/scheduler_content_moderation_integration/tests/src/Kernel/HookImplementationTest.php
modules/contrib/scheduler_content_moderation_integration/tests/src/Functional/EventsTest.php
modules/contrib/scheduler_content_moderation_integration/tests/src/Functional/FormsTest.php
modules/contrib/scheduler_content_moderation_integration/tests/src/Kernel/ModeratedContentSchedulingTest.php
modules/contrib/scheduler_content_moderation_integration/tests/src/Kernel/PublishedStateConstraintTest.php
modules/contrib/scheduler_content_moderation_integration/tests/src/Kernel/SchedulerContentModerationTestBase.php
modules/contrib/scheduler_content_moderation_integration/tests/src/Kernel/UnPublishedStateConstraintTest.php

7 files with changes
====================

1) modules/contrib/scheduler_content_moderation_integration/tests/src/Functional/FormsTest.php:147

    ---------- begin diff ----------
@@ @@

     // Check that both state fields are shown by default.
     $this->drupalGet($url);
-    $this->assertResponse(200, "The $operation form is displayed without error");
+    $this->assertSession()->statusCodeEquals(200, "The $operation form is displayed without error");
     $assert->FieldExists('publish_state[0]');
     $assert->FieldExists('unpublish_state[0]');

@@ @@

     // Check that both state fields are now hidden.
     $this->drupalGet($url);
-    $this->assertResponse(200, "The $operation form is displayed without error");
+    $this->assertSession()->statusCodeEquals(200, "The $operation form is displayed without error");
     $assert->FieldNotExists('publish_state[0]');
     $assert->FieldNotExists('unpublish_state[0]');
   }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/scheduler_content_moderation_integration/tests/src/Kernel/UnPublishedStateConstraintTest.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $user = $this->createMock('Drupal\Core\Session\AccountInterface');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/scheduler_content_moderation_integration/tests/src/Kernel/SchedulerContentModerationTestBase.php:61

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('node', 'node_access');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/scheduler_content_moderation_integration/tests/src/Kernel/PublishedStateConstraintTest.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $user = $this->createMock('Drupal\Core\Session\AccountInterface');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/scheduler_content_moderation_integration/tests/src/Kernel/HookImplementationTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create a user which has any permission required.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/scheduler_content_moderation_integration/tests/src/Functional/TransitionAccessTest.php:91

    ---------- begin diff ----------
@@ @@
       'publish_state[0]' => 'published',
     ];
     $this->drupalGet("$entityTypeId/{$entity->id()}/edit");
-    $this->assertResponse(200, 'Scheduler user should be able to edit the entity."');
+    $this->assertSession()->statusCodeEquals(200, 'Scheduler user should be able to edit the entity."');
     $this->submitForm($edit, 'Save');

     $this->assertSession()
@@ @@
     // editing access should be denied.
     $this->drupalLogin($restrictedUser);
     $this->drupalGet("$entityTypeId/{$entity->id()}/edit");
-    $this->assertResponse(403, 'Restricted user should not be able to edit the entity."');
+    $this->assertSession()->statusCodeEquals(403, 'Restricted user should not be able to edit the entity."');

     // Remove scheduling info.
     $this->drupalLogin($schedulerUser);
@@ @@
     // (using 'create_new_draft' transition).
     $this->drupalLogin($restrictedUser);
     $this->drupalGet("$entityTypeId/{$entity->id()}/edit");
-    $this->assertResponse(200, 'Restricted user should be able to edit the entity."');
+    $this->assertSession()->statusCodeEquals(200, 'Restricted user should be able to edit the entity."');
     $this->submitForm([], 'Save');
     $this->assertSession()->pageTextContains(sprintf('%s has been updated.', $entity->label()));

@@ @@
       'unpublish_state[0]' => 'archived',
     ];
     $this->drupalGet("$entityTypeId/{$entity->id()}/edit");
-    $this->assertResponse(200, 'Scheduler user should be able to edit the entity."');
+    $this->assertSession()->statusCodeEquals(200, 'Scheduler user should be able to edit the entity."');
     $this->submitForm($edit, 'Save');

     $this->assertSession()
@@ @@
     // editing access should be denied.
     $this->drupalLogin($restrictedUser);
     $this->drupalGet("$entityTypeId/{$entity->id()}/edit");
-    $this->assertResponse(403, 'Restricted user should not be able to edit the entity."');
+    $this->assertSession()->statusCodeEquals(403, 'Restricted user should not be able to edit the entity."');

     // Remove scheduling info.
     $this->drupalLogin($schedulerUser);
@@ @@
     // Check entity is editable by restricted user when there is no scheduling.
     $this->drupalLogin($restrictedUser);
     $this->drupalGet("$entityTypeId/{$entity->id()}/edit");
-    $this->assertResponse(200, 'Restricted user should be able to edit the entity."');
+    $this->assertSession()->statusCodeEquals(200, 'Restricted user should be able to edit the entity."');
     $this->submitForm([], 'Save');
     $this->assertSession()->pageTextContains(sprintf('%s has been updated.', $entity->label()));
   }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/scheduler_content_moderation_integration/tests/src/Functional/SchedulerContentModerationBrowserTestBase.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

