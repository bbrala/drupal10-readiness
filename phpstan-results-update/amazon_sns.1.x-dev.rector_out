modules/contrib/amazon_sns/src/Controller/NotificationController.php
modules/contrib/amazon_sns/tests/src/Unit/PlainTextMessageTrait.php
modules/contrib/amazon_sns/tests/src/Unit/RequestMessageValidatorTest.php
modules/contrib/amazon_sns/src/Event/MessageEventDispatcher.php
modules/contrib/amazon_sns/tests/src/Unit/SnsMessageEventTest.php
modules/contrib/amazon_sns/src/Event/SnsEvents.php
modules/contrib/amazon_sns/src/Event/SnsMessageEvent.php
modules/contrib/amazon_sns/tests/src/Unit/SnsSubscriptionConfirmationSubscriberTest.php
modules/contrib/amazon_sns/src/Event/SnsNotificationSubscriber.php
modules/contrib/amazon_sns/src/Event/SnsSubscriptionConfirmationSubscriber.php
modules/contrib/amazon_sns/src/Form/SnsSettingsForm.php
modules/contrib/amazon_sns/src/RequestMessageValidator.php
modules/contrib/amazon_sns/tests/fixtures/plain-text-message-server.php
modules/contrib/amazon_sns/tests/src/Functional/SnsSettingsFormTest.php
modules/contrib/amazon_sns/tests/src/Kernel/SnsNotificationSubscriberTest.php
modules/contrib/amazon_sns/tests/src/Unit/NotificationControllerTest.php

5 files with changes
====================

1) modules/contrib/amazon_sns/tests/src/Unit/SnsSubscriptionConfirmationSubscriberTest.php:35

    ---------- begin diff ----------
@@ @@
     ];

     $message = new Message($data);
-    /** @var \PHPUnit_Framework_MockObject_MockObject|\GuzzleHttp\Client $client */
-    $client = $this->getMockBuilder(Client::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var \PHPUnit\Framework\MockObject\MockObject|\GuzzleHttp\Client $client */
+    $client = $this->createMock(Client::class);
     $client->expects($this->once())->method('request')
       ->with('GET', $message['SubscribeURL']);

-    /** @var \PHPUnit_Framework_MockObject_MockObject|\Psr\Log\LoggerInterface $logger */
-    $logger = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var \PHPUnit\Framework\MockObject\MockObject|\Psr\Log\LoggerInterface $logger */
+    $logger = $this->createMock(LoggerInterface::class);
     $logger->expects($this->once())->method('info');

     $subscriber = new SnsSubscriptionConfirmationSubscriber($client, $logger);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/amazon_sns/tests/src/Unit/NotificationControllerTest.php:21

    ---------- begin diff ----------
@@ @@
   public function testReceive() {
     $this->mockGuzzleCertRequest();
     /** @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\amazon_sns\Event\MessageEventDispatcher $dispatcher */
-    $dispatcher = $this->getMockBuilder(MessageEventDispatcher::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dispatcher = $this->createMock(MessageEventDispatcher::class);
     $dispatcher->expects($this->once())->method('dispatch');

     /** @var \PHPUnit\Framework\MockObject\MockObject|\Psr\Log\LoggerInterface $logger */
-    $logger = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger = $this->createMock(LoggerInterface::class);
     $logger->expects($this->never())->method($this->anything());

     $controller = new NotificationController($dispatcher, $logger);
@@ @@
    */
   public function testMissingRequiredHeaders() {
     /** @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\amazon_sns\Event\MessageEventDispatcher $dispatcher */
-    $dispatcher = $this->getMockBuilder(MessageEventDispatcher::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dispatcher = $this->createMock(MessageEventDispatcher::class);
     $dispatcher->expects($this->never())->method('dispatch');

     /** @var \PHPUnit\Framework\MockObject\MockObject|\Psr\Log\LoggerInterface $logger */
-    $logger = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger = $this->createMock(LoggerInterface::class);
     $logger->expects($this->once())->method('log');

     $controller = new NotificationController($dispatcher, $logger);
@@ @@
     $this->mockGuzzleCertRequest();

     /** @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\amazon_sns\Event\MessageEventDispatcher $dispatcher */
-    $dispatcher = $this->getMockBuilder(MessageEventDispatcher::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dispatcher = $this->createMock(MessageEventDispatcher::class);
     $dispatcher->expects($this->never())->method('dispatch');

     /** @var \PHPUnit\Framework\MockObject\MockObject|\Psr\Log\LoggerInterface $logger */
-    $logger = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger = $this->createMock(LoggerInterface::class);
     $logger->expects($this->once())->method('log');

     $controller = new NotificationController($dispatcher, $logger);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/amazon_sns/tests/src/Functional/SnsSettingsFormTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->rootUser);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/amazon_sns/src/Event/SnsMessageEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\amazon_sns\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Aws\Sns\Message;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event class wrapping an SNS message.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/amazon_sns/src/Event/MessageEventDispatcher.php:52

    ---------- begin diff ----------
@@ @@
     $event = new SnsMessageEvent($message);
     switch ($message['Type']) {
       case 'SubscriptionConfirmation':
-        $this->eventDispatcher->dispatch(SnsEvents::SUBSCRIPTION_CONFIRMATION, $event);
+        $this->eventDispatcher->dispatch($event, SnsEvents::SUBSCRIPTION_CONFIRMATION);
         break;

       case 'Notification':
-        $this->eventDispatcher->dispatch(SnsEvents::NOTIFICATION, $event);
+        $this->eventDispatcher->dispatch($event, SnsEvents::NOTIFICATION);
         break;

       case 'UnsubscribeConfirmation':
-        $this->eventDispatcher->dispatch(SnsEvents::UNSUBSCRIBE_CONFIRMATION, $event);
+        $this->eventDispatcher->dispatch($event, SnsEvents::UNSUBSCRIBE_CONFIRMATION);
         break;

       default:
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


 [OK] 5 files have been changed by Rector                                       

