modules/contrib/tmgmt_memory/src/MemoryManager.php
modules/contrib/tmgmt_memory/src/Controller/ExportController.php
modules/contrib/tmgmt_memory/tests/src/Kernel/SegmenterTest.php
modules/contrib/tmgmt_memory/src/Controller/ViewUsageController.php
modules/contrib/tmgmt_memory/src/Plugin/Action/DisableSegmentTranslation.php
modules/contrib/tmgmt_memory/tmgmt_memory.module
modules/contrib/tmgmt_memory/src/Plugin/Action/EnableSegmentTranslation.php
modules/contrib/tmgmt_memory/src/SegmentInterface.php
modules/contrib/tmgmt_memory/src/SegmentStorage.php
modules/contrib/tmgmt_memory/src/Entity/Controller/SegmentTranslationAccessControlHandler.php
modules/contrib/tmgmt_memory/src/Entity/Controller/UsageAccessControlHandler.php
modules/contrib/tmgmt_memory/src/Entity/ListBuilder/SegmentTranslationListBuilder.php
modules/contrib/tmgmt_memory/src/SegmentStorageInterface.php
modules/contrib/tmgmt_memory/src/SegmentTranslationInterface.php
modules/contrib/tmgmt_memory/src/SegmentTranslationStorage.php
modules/contrib/tmgmt_memory/src/Entity/ListBuilder/UsageListBuilder.php
modules/contrib/tmgmt_memory/src/SegmentTranslationStorageInterface.php
modules/contrib/tmgmt_memory/src/Segmenter.php
modules/contrib/tmgmt_memory/src/Entity/Segment.php
modules/contrib/tmgmt_memory/src/Entity/SegmentTranslation.php
modules/contrib/tmgmt_memory/src/Entity/Usage.php
modules/contrib/tmgmt_memory/src/Entity/UsageTranslation.php
modules/contrib/tmgmt_memory/src/Tests/IntegrationTest.php
modules/contrib/tmgmt_memory/src/Form/ChangeConfirmationForm.php
modules/contrib/tmgmt_memory/src/Form/ExportForm.php
modules/contrib/tmgmt_memory/src/Form/ImportForm.php
modules/contrib/tmgmt_memory/src/TmgmtMemoryServiceProvider.php
modules/contrib/tmgmt_memory/src/Tmx.php
modules/contrib/tmgmt_memory/src/Form/SegmentTranslationDeleteForm.php
modules/contrib/tmgmt_memory/src/Form/SegmentTranslationForm.php
modules/contrib/tmgmt_memory/src/UsageInterface.php
modules/contrib/tmgmt_memory/src/UsageStorage.php
modules/contrib/tmgmt_memory/src/UsageStorageInterface.php
modules/contrib/tmgmt_memory/src/UsageTranslationInterface.php
modules/contrib/tmgmt_memory/src/UsageTranslationStorage.php
modules/contrib/tmgmt_memory/src/UsageTranslationStorageInterface.php
modules/contrib/tmgmt_memory/tests/src/Kernel/MemoryManagerTest.php

3 files with changes
====================

1) modules/contrib/tmgmt_memory/tests/src/Kernel/SegmenterTest.php:21

    ---------- begin diff ----------
@@ @@
    * Test segmenting data.
    */
   public function testSegmentData() {
-    $sample = file_get_contents(drupal_get_path('module', 'tmgmt_memory') . '/tests/testing_html/sample.html');
-    $segmented_sample = file_get_contents(drupal_get_path('module', 'tmgmt_memory') . '/tests/testing_html/segmented_sample.html');
+    $sample = file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt_memory') . '/tests/testing_html/sample.html');
+    $segmented_sample = file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt_memory') . '/tests/testing_html/segmented_sample.html');
     /** @var \Drupal\tmgmt_memory\Segmenter $segmenter */
     $segmenter = \Drupal::service('tmgmt.segmenter');

@@ @@
    * Test filtering data.
    */
   public function testFilterData() {
-    $segmented_sample = file_get_contents(drupal_get_path('module', 'tmgmt_memory') . '/tests/testing_html/segmented_sample.html');
-    $filtered_sample = file_get_contents(drupal_get_path('module', 'tmgmt_memory') . '/tests/testing_html/sample.html');
+    $segmented_sample = file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt_memory') . '/tests/testing_html/segmented_sample.html');
+    $filtered_sample = file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt_memory') . '/tests/testing_html/sample.html');
     /** @var \Drupal\tmgmt_memory\Segmenter $segmenter */
     $segmenter = \Drupal::service('tmgmt.segmenter');

@@ @@
    * Test get segments of data.
    */
   public function testGetSegmentsOfData() {
-    $segmented_sample = file_get_contents(drupal_get_path('module', 'tmgmt_memory') . '/tests/testing_html/segmented_sample.html');
+    $segmented_sample = file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt_memory') . '/tests/testing_html/segmented_sample.html');
     $expected = [
       1 => [
         'hash' => hash('sha256', 'Text not inside a paragraph.'),
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/tmgmt_memory/tests/src/Kernel/MemoryManagerTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Overrides KernelTestBase::setUp().
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('tmgmt_memory_segment');
@@ @@
    * Test adding segment.
    */
   public function testAddSegment() {
-    $segmented_sample = file_get_contents(drupal_get_path('module', 'tmgmt_memory') . '/tests/testing_html/segmented_sample.html');
+    $segmented_sample = file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt_memory') . '/tests/testing_html/segmented_sample.html');
     /** @var \Drupal\tmgmt_memory\Segmenter $segmenter */
     $segmenter = \Drupal::service('tmgmt.segmenter');
     $segments = $segmenter->getSegmentsOfData($segmented_sample);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/tmgmt_memory/src/Tests/IntegrationTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->addLanguage('ca');
@@ @@
       'tmgmt_translation_skills[0][language_from]' => 'en',
       'tmgmt_translation_skills[0][language_to]' => 'ca',
     ];
-    $this->drupalPostForm('user/' . $assignee->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('user/' . $assignee->id() . '/edit');
+    $this->submitForm($edit, t('Save'));

     // Create an english source node.
     $this->drupalLogin($this->admin_user);
@@ @@
       'body[0][summary]' => 'The summary',
       'body[0][value]' => '<p>First paragraph in source language.</p><p>Second paragraph in source language.</p>',
     ];
-    $this->drupalPostForm('node/' . $node1->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('node/' . $node1->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
     // Translate the node.
     $edit = [
       'items[' . $node1->id() . ']' => TRUE,
     ];
-    $this->drupalPostForm('admin/tmgmt/sources', $edit, t('Request translation'));
+    $this->drupalGet('admin/tmgmt/sources');
+    $this->submitForm($edit, t('Request translation'));
     $edit = [
       'translator' => 'local',
       'settings[translator]' => $assignee->id(),
     ];
-    $this->drupalPostForm(NULL, $edit, t('Submit to provider'));
+    $this->submitForm($edit, t('Submit to provider'));
     $this->drupalLogin($assignee);
     $edit = [
       'title|0|value[translation]' => '(ca) The title',
@@ @@
       'body|0|value[translation][value]' => '<p>(ca) First paragraph in target language.</p><p>(ca) Second paragraph in target language.</p>',
       'body|0|summary[translation][value]' => '(ca) The summary',
     ];
-    $this->drupalPostForm('translate/items/1', $edit, t('Save as completed'));
+    $this->drupalGet('translate/items/1');
+    $this->submitForm($edit, t('Save as completed'));
     $this->drupalLogin($this->admin_user);
     // Check memory is empty.
     $this->drupalGet('admin/tmgmt/memory');
@@ @@
     /** @var \SimpleXMLElement $xpath */
     $xpath = $this->xpath('//*[@id="views-form-tmgmt-memory-page-1"]/table/tbody/tr');
     $this->assertTrue(empty($xpath[0]));
+    $this->drupalGet('admin/tmgmt/items/1');

     // Complete the translation.
-    $this->drupalPostForm('admin/tmgmt/items/1', [], t('Save as completed'));
+    $this->submitForm([], t('Save as completed'));

     // Check translation saved.
     $this->drupalGet('admin/tmgmt/memory');
     /** @var \SimpleXMLElement $xpath */
     $xpath = $this->xpath('//*[@id="views-form-tmgmt-memory-page-1"]/table/tbody/tr');
-    $this->assertEqual(trim((String) $xpath[0]->td[6]), '(ca) The title');
-    $this->assertEqual(trim((String) $xpath[1]->td[6]), '(ca) First paragraph in target language.');
-    $this->assertEqual(trim((String) $xpath[2]->td[6]), '(ca) Second paragraph in target language.');
-    $this->assertEqual(trim((String) $xpath[3]->td[6]), '(ca) The summary');
+    $this->assertEquals(trim((String) $xpath[0]->td[6]), '(ca) The title');
+    $this->assertEquals(trim((String) $xpath[1]->td[6]), '(ca) First paragraph in target language.');
+    $this->assertEquals(trim((String) $xpath[2]->td[6]), '(ca) Second paragraph in target language.');
+    $this->assertEquals(trim((String) $xpath[3]->td[6]), '(ca) The summary');

     // Create another node completely equal to the last one.
     $node2 = $this->createTranslatableNode('article', 'en');
@@ @@
       'body[0][summary]' => 'The summary',
       'body[0][value]' => '<p>First paragraph in source language.</p><p>Second paragraph in source language.</p>',
     ];
-    $this->drupalPostForm('node/' . $node2->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('node/' . $node2->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
     // Translate the node.
     $edit = [
       'items[' . $node2->id() . ']' => TRUE,
     ];
-    $this->drupalPostForm('admin/tmgmt/sources', $edit, t('Request translation'));
+    $this->drupalGet('admin/tmgmt/sources');
+    $this->submitForm($edit, t('Request translation'));
     $edit = [
       'translator' => 'local',
       'settings[translator]' => $assignee->id(),
     ];
-    $this->drupalPostForm(NULL, $edit, t('Submit to provider'));
+    $this->submitForm($edit, t('Submit to provider'));
     $this->drupalLogin($assignee);
     $this->drupalGet('translate');
-    $this->assertNoLink(t('View'));
+    $this->assertSession()->linkNotExists(t('View'));
     $this->drupalLogin($this->admin_user);
     $this->drupalGet('admin/tmgmt/items/2');
-    $this->assertText('(ca) The title');
-    $this->assertText('&lt;p&gt;(ca) First paragraph in target language.&lt;/p&gt;&lt;p&gt;(ca) Second paragraph in target language.&lt;/p&gt;');
-    $this->assertText('(ca) The summary');
-    $this->drupalPostForm(NULL, [], t('Save as completed'));
+    $this->assertSession()->pageTextContains('(ca) The title');
+    $this->assertSession()->pageTextContains('&lt;p&gt;(ca) First paragraph in target language.&lt;/p&gt;&lt;p&gt;(ca) Second paragraph in target language.&lt;/p&gt;');
+    $this->assertSession()->pageTextContains('(ca) The summary');
+    $this->submitForm([], t('Save as completed'));

     // Check translation not saved.
     $this->drupalGet('admin/tmgmt/memory');
@@ @@
       'body[0][summary]' => 'The summary',
       'body[0][value]' => '<p>First paragraph in <span>source language</span>.</p><p>Second paragraph in <span>source language</span>.</p>',
     ];
-    $this->drupalPostForm('node/' . $node3->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('node/' . $node3->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
     // Translate the node.
     $edit = [
       'items[' . $node3->id() . ']' => TRUE,
     ];
-    $this->drupalPostForm('admin/tmgmt/sources', $edit, t('Request translation'));
+    $this->drupalGet('admin/tmgmt/sources');
+    $this->submitForm($edit, t('Request translation'));
     $edit = [
       'translator' => 'local',
       'settings[translator]' => $assignee->id(),
     ];
-    $this->drupalPostForm(NULL, $edit, t('Submit to provider'));
+    $this->submitForm($edit, t('Submit to provider'));
     $this->drupalLogin($assignee);
     $this->drupalGet('translate');
     $this->clickLink(t('View'));
@@ @@
     $edit = [
       'body|0|value[translation][value]' => '<p>(ca) Alternative translation for first paragraph in <span>target language</span>.</p><p>(ca) Alternative translation for second paragraph in <span>target language</span>.</p>',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save as completed'));
+    $this->submitForm($edit, t('Save as completed'));
     $this->drupalLogin($this->admin_user);
     $this->drupalGet('admin/tmgmt/items/3');
-    $this->assertText('(ca) The title');
-    $this->assertText('&lt;p&gt;(ca) Alternative translation for first paragraph in &lt;span&gt;target language&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;(ca) Alternative translation for second paragraph in &lt;span&gt;target language&lt;/span&gt;.&lt;/p&gt;');
-    $this->assertText('(ca) The summary');
-    $this->drupalPostForm(NULL, [], t('Save as completed'));
+    $this->assertSession()->pageTextContains('(ca) The title');
+    $this->assertSession()->pageTextContains('&lt;p&gt;(ca) Alternative translation for first paragraph in &lt;span&gt;target language&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;(ca) Alternative translation for second paragraph in &lt;span&gt;target language&lt;/span&gt;.&lt;/p&gt;');
+    $this->assertSession()->pageTextContains('(ca) The summary');
+    $this->submitForm([], t('Save as completed'));

     // Check translation not saved.
     $this->drupalGet('admin/tmgmt/memory');
     /** @var \SimpleXMLElement $xpath */
     $xpath = $this->xpath('//*[@id="views-form-tmgmt-memory-page-1"]/table/tbody/tr');
-    $this->assertEqual(trim((String) $xpath[4]->td[6]), '(ca) Alternative translation for first paragraph in target language.');
-    $this->assertEqual(trim((String) $xpath[5]->td[6]), '(ca) Alternative translation for second paragraph in target language.');
+    $this->assertEquals(trim((String) $xpath[4]->td[6]), '(ca) Alternative translation for first paragraph in target language.');
+    $this->assertEquals(trim((String) $xpath[5]->td[6]), '(ca) Alternative translation for second paragraph in target language.');

     // Import translation from TMX file.
-    file_put_contents('public://example.tmx', file_get_contents(drupal_get_path('module', 'tmgmt_memory') . '/tests/testing_tmx/example.tmx'));
+    file_put_contents('public://example.tmx', file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt_memory') . '/tests/testing_tmx/example.tmx'));
     /** @var \Drupal\file\Entity\File $file */
     $file = File::create(['uri' => 'public://example.tmx']);
     $edit = [
       'files[import]' => $file->getFileUri(),
     ];
-    $this->drupalPostForm('admin/tmgmt/memory/import', $edit, t('Upload'));
-    $this->assertText(t('File imported successfully.'));
+    $this->drupalGet('admin/tmgmt/memory/import');
+    $this->submitForm($edit, t('Upload'));
+    $this->assertSession()->pageTextContains(t('File imported successfully.'));
     $this->drupalGet('admin/tmgmt/memory');
     /** @var \SimpleXMLElement $xpath */
     $xpath = $this->xpath('//*[@id="views-form-tmgmt-memory-page-1"]/table/tbody/tr');
-    $this->assertEqual(trim((String) $xpath[6]->td[6]), 'Bonjour tout le monde!');
-    $this->assertEqual(trim((String) $xpath[9]->td[6]), 'Un altre paràgraf.');
+    $this->assertEquals(trim((String) $xpath[6]->td[6]), 'Bonjour tout le monde!');
+    $this->assertEquals(trim((String) $xpath[9]->td[6]), 'Un altre paràgraf.');

     // Test the highlight of the segments.
     $this->clickLink('View');
     $this->clickLink('View');
-    $this->assertRaw('<span class="tmgmt_memory_highlight">The title</span>');
+    $this->assertSession()->responseContains('<span class="tmgmt_memory_highlight">The title</span>');
     $this->drupalGet('http://d8.dev/admin/tmgmt/memory/usages/2');
-    $this->assertRaw('<span class="tmgmt_memory_highlight">(ca) The title</span>');
+    $this->assertSession()->responseContains('<span class="tmgmt_memory_highlight">(ca) The title</span>');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNoLinkRector
 * AssertRawRector
 * AssertTextRector
 * DrupalGetPathRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

