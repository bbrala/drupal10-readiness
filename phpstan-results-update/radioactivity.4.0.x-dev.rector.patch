diff --git a/radioactivity.module b/radioactivity.module
index a24fe12..3677fd2 100644
--- a/radioactivity.module
+++ b/radioactivity.module
@@ -160,7 +160,7 @@ function radioactivity_form_field_config_edit_form_alter(array &$form, FormState
  *
  * @todo Remove in 5.0.0 when the deprecated 'radioactivity' field gets removed.
  */
-function radioactivity_form_field_ui_field_storage_add_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function radioactivity_form_field_ui_field_storage_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
 
   // Hide the deprecated radioactivity field type when no field of this type is
   // currently being used.
diff --git a/src/Event/EnergyBelowCutoffEvent.php b/src/Event/EnergyBelowCutoffEvent.php
index 8421f61..9414e82 100644
--- a/src/Event/EnergyBelowCutoffEvent.php
+++ b/src/Event/EnergyBelowCutoffEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\radioactivity\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Represents a 'Energy is below the cutoff level' event.
diff --git a/src/RestIncidentStorage.php b/src/RestIncidentStorage.php
index b5afd35..eb96e87 100644
--- a/src/RestIncidentStorage.php
+++ b/src/RestIncidentStorage.php
@@ -103,7 +103,7 @@ class RestIncidentStorage implements RestIncidentStorageInterface {
   protected function getDefaultEndpoint(): string {
     global $base_url;
 
-    return $base_url . '/' . drupal_get_path('module', 'radioactivity') . '/endpoints/file/rest.php';
+    return $base_url . '/' . \Drupal::service('extension.list.module')->getPath('radioactivity') . '/endpoints/file/rest.php';
   }
 
   /**
diff --git a/tests/src/Kernel/RadioactivityFieldTypeTest.php b/tests/src/Kernel/RadioactivityFieldTypeTest.php
index b914b78..339da10 100644
--- a/tests/src/Kernel/RadioactivityFieldTypeTest.php
+++ b/tests/src/Kernel/RadioactivityFieldTypeTest.php
@@ -51,9 +51,7 @@ class RadioactivityFieldTypeTest extends FieldKernelTestBase {
     parent::setUp();
 
     // Mock Time::getRequestTime.
-    $dateTime = $this->getMockBuilder(TimeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dateTime = $this->createMock(TimeInterface::class);
     $dateTime
       ->expects($this->any())
       ->method('getRequestTime')
diff --git a/tests/src/Unit/EmitControllerTest.php b/tests/src/Unit/EmitControllerTest.php
index fe6c63b..f187eee 100644
--- a/tests/src/Unit/EmitControllerTest.php
+++ b/tests/src/Unit/EmitControllerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\radioactivity\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Site\Settings;
 use Drupal\radioactivity\Controller\EmitController;
@@ -19,6 +20,7 @@ use Symfony\Component\HttpFoundation\Request;
  */
 class EmitControllerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The request received by the controller.
    *
diff --git a/tests/src/Unit/RadioactivityLazyBuilderTest.php b/tests/src/Unit/RadioactivityLazyBuilderTest.php
index 7f66b44..ffdfefe 100644
--- a/tests/src/Unit/RadioactivityLazyBuilderTest.php
+++ b/tests/src/Unit/RadioactivityLazyBuilderTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\radioactivity\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\radioactivity\RadioactivityInterface;
@@ -15,6 +16,7 @@ use Prophecy\Argument;
  */
 class RadioactivityLazyBuilderTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Mock entity type manager.
    *
diff --git a/tests/src/Unit/RadioactivityProcessorTest.php b/tests/src/Unit/RadioactivityProcessorTest.php
index 0579695..2331a68 100644
--- a/tests/src/Unit/RadioactivityProcessorTest.php
+++ b/tests/src/Unit/RadioactivityProcessorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\radioactivity\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ -34,6 +35,7 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 class RadioactivityProcessorTest extends UnitTestCase {
 
 
+  use ProphecyTrait;
   /**
    * The radioactivity processor under test.
    *
diff --git a/tests/src/Unit/RadioactivityReferenceUpdaterTest.php b/tests/src/Unit/RadioactivityReferenceUpdaterTest.php
index 4ad1780..e4305de 100644
--- a/tests/src/Unit/RadioactivityReferenceUpdaterTest.php
+++ b/tests/src/Unit/RadioactivityReferenceUpdaterTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\radioactivity\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\node\NodeInterface;
 use Drupal\radioactivity\RadioactivityReferenceUpdater;
@@ -13,17 +14,13 @@ use Drupal\Tests\UnitTestCase;
  */
 class RadioactivityReferenceUpdaterTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers ::hasMissingReferences
    * @dataProvider providerHasMissingReferences
    */
   public function testHasMissingReferences($referencesWithoutTarget, $hasMissingReferences) {
-    $sut = $this->getMockBuilder(RadioactivityReferenceUpdater::class)
-      ->onlyMethods([
-        'getReferencesWithoutTarget',
-      ])
-      ->disableOriginalConstructor()
-      ->getMock();
+    $sut = $this->createMock(RadioactivityReferenceUpdater::class);
 
     $sut->expects($this->any())
       ->method('getReferencesWithoutTarget')
@@ -78,13 +75,7 @@ class RadioactivityReferenceUpdaterTest extends UnitTestCase {
    * @dataProvider providerGetReferencesWithoutTarget
    */
   public function testGetReferencesWithoutTarget($getAllReferenceFields, $result) {
-    $sut = $this->getMockBuilder(RadioactivityReferenceUpdater::class)
-      ->onlyMethods([
-        'getAllReferenceFields',
-        'entitiesWithNonexistentFields',
-      ])
-      ->disableOriginalConstructor()
-      ->getMock();
+    $sut = $this->createMock(RadioactivityReferenceUpdater::class);
 
     // The return value of ::getAllReferenceFields are the configured fields
     // of entity+bundle that are configured as radioactivity reference fields.
@@ -182,15 +173,7 @@ class RadioactivityReferenceUpdaterTest extends UnitTestCase {
    * @dataProvider providerUpdateReferenceFields
    */
   public function testUpdateReferenceFields($getReferenceFields, $fieldIsEmpty, $entityIsUpdated) {
-    $sut = $this->getMockBuilder(RadioactivityReferenceUpdater::class)
-      ->onlyMethods([
-        'getReferenceFields',
-        'createRadioactivity',
-        'getRequestTime',
-        'getFieldDefaultEnergy',
-      ])
-      ->disableOriginalConstructor()
-      ->getMock();
+    $sut = $this->createMock(RadioactivityReferenceUpdater::class);
     $fieldItemList = $this->createMock(FieldItemListInterface::class);
     $fieldItemList->expects($this->any())
       ->method('isEmpty')
diff --git a/tests/src/Unit/RestIncidentStorageTest.php b/tests/src/Unit/RestIncidentStorageTest.php
index aef8281..7f68920 100644
--- a/tests/src/Unit/RestIncidentStorageTest.php
+++ b/tests/src/Unit/RestIncidentStorageTest.php
@@ -27,14 +27,7 @@ class RestIncidentStorageTest extends UnitTestCase {
   public function setUp(): void {
     parent::setUp();
 
-    $this->sut = $this->getMockBuilder(RestIncidentStorage::class)
-      ->disableOriginalConstructor()
-      ->setMethods([
-        'getDefaultEndpoint',
-        'getIncidentsFromStorage',
-        'clearIncidentStorage',
-      ])
-      ->getMock();
+    $this->sut = $this->createMock(RestIncidentStorage::class);
 
     // Initiate the Settings singleton used by this test.
     new Settings([
@@ -46,9 +39,7 @@ class RestIncidentStorageTest extends UnitTestCase {
    * @covers ::addIncident
    */
   public function testAddIncident() {
-    $incident = $this->getMockBuilder(IncidentInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $incident = $this->createMock(IncidentInterface::class);
 
     $this->expectException("Exception");
     $this->expectExceptionMessage("The Radioactivity rest endpoint expects incidents to be added somewhere else.");
diff --git a/tests/src/Unit/StorageFactoryTest.php b/tests/src/Unit/StorageFactoryTest.php
index 9b99f24..682e4bf 100644
--- a/tests/src/Unit/StorageFactoryTest.php
+++ b/tests/src/Unit/StorageFactoryTest.php
@@ -44,33 +44,18 @@ class StorageFactoryTest extends UnitTestCase {
     parent::setUp();
 
     // Mock the radioactivity.storage configuration.
-    $this->config = $this->getMockBuilder(ImmutableConfig::class)
-      ->disableOriginalConstructor()
-      ->setMethods([
-        'get',
-      ])
-      ->getMock();
+    $this->config = $this->createMock(ImmutableConfig::class);
 
-    $this->configFactory = $this->getMockBuilder(ConfigFactory::class)
-      ->disableOriginalConstructor()
-      ->setMethods([
-        'get',
-      ])
-      ->getMock();
+    $this->configFactory = $this->createMock(ConfigFactory::class);
     $this->configFactory->expects($this->any())
       ->method('get')
       ->will($this->returnValue($this->config));
 
     // Mock the class resolver and the classes it provides.
-    $mockRestStorage = $this->getMockBuilder(RestIncidentStorage::class)
-      ->getMock();
-    $mockDefaultStorage = $this->getMockBuilder(DefaultIncidentStorage::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockRestStorage = $this->createMock(RestIncidentStorage::class);
+    $mockDefaultStorage = $this->createMock(DefaultIncidentStorage::class);
 
-    $this->classResolver = $this->getMockBuilder(ClassResolverInterface::class)
-      ->setMethods(['getInstanceFromDefinition'])
-      ->getMock();
+    $this->classResolver = $this->createMock(ClassResolverInterface::class);
     $this->classResolver->expects($this->any())
       ->method('getInstanceFromDefinition')
       ->will($this->returnValueMap([
