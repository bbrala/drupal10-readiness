modules/contrib/collection/modules/collection_listings/src/Plugin/paragraphs/Behavior/ParagraphsCollectionListing.php
modules/contrib/collection/collection.install
modules/contrib/collection/src/CollectionTypeListBuilder.php
modules/contrib/collection/src/Event/CollectionItemUpdateEvent.php
modules/contrib/collection/src/Plugin/Validation/Constraint/UniqueItemValidator.php
modules/contrib/collection/src/Event/CollectionUpdateEvent.php
modules/contrib/collection/src/Form/CollectionDeleteForm.php
modules/contrib/collection/collection.module
modules/contrib/collection/src/ContentEntityCollectionListBuilder.php
modules/contrib/collection/src/Form/CollectionForm.php
modules/contrib/collection/src/Plugin/views/access/CollectionItemsAccess.php
modules/contrib/collection/src/ContextProvider/CollectionRouteContext.php
modules/contrib/collection/src/Plugin/views/argument_default/Collection.php
modules/contrib/collection/src/Form/CollectionItemDeleteForm.php
modules/contrib/collection/src/Form/CollectionItemDeleteMultipleForm.php
modules/contrib/collection/src/Plugin/views/field/CollectionItemCollectedItemEntityTypeLabel.php
modules/contrib/collection/src/Form/CollectionItemForm.php
modules/contrib/collection/src/Controller/CollectionItemController.php
modules/contrib/collection/src/Plugin/views/field/CollectionItemCollectedItemLatestVersionLink.php
modules/contrib/collection/src/Form/CollectionItemTypeDeleteForm.php
modules/contrib/collection/src/Form/CollectionItemTypeForm.php
modules/contrib/collection/src/Plugin/views/field/CollectionItemCollectedItemState.php
modules/contrib/collection/collection.page.inc
modules/contrib/collection/collection.post_update.php
modules/contrib/collection/src/Controller/ContentEntityCollectionsController.php
modules/contrib/collection/src/Plugin/views/field/CollectionItemCollectedItemStatus.php
modules/contrib/collection/src/Routing/CollectionDynamicRoutes.php
modules/contrib/collection/collection.views.inc
modules/contrib/collection/src/Entity/Collection.php
modules/contrib/collection/src/Form/CollectionNewNodeForm.php
modules/contrib/collection/src/Routing/CollectionRouteSubscriber.php
modules/contrib/collection/tests/src/Functional/LoadTest.php
modules/contrib/collection/modules/collection_pathauto/collection_pathauto.api.php
modules/contrib/collection/modules/collection_pathauto/collection_pathauto.module
modules/contrib/collection/modules/collection_pathauto/src/EventSubscriber/CollectionPathautoSubscriber.php
modules/contrib/collection/src/Access/CollectionItemCollectionCheck.php
modules/contrib/collection/src/Access/CollectionItemsAccessCheck.php
modules/contrib/collection/src/Access/CollectionOwnerTrait.php
modules/contrib/collection/src/BulkFormEntityListBuilder.php
modules/contrib/collection/src/Form/CollectionTypeDeleteForm.php
modules/contrib/collection/src/Form/CollectionTypeForm.php
modules/contrib/collection/src/CollectionAccessControlHandler.php
modules/contrib/collection/src/Plugin/Block/UserCollectionsBlock.php
modules/contrib/collection/src/CollectionContentEntityFormAlter.php
modules/contrib/collection/src/CollectionContentManager.php
modules/contrib/collection/src/Plugin/Derivative/CollectionLocalTasks.php
modules/contrib/collection/src/CollectionItemListBuilder.php
modules/contrib/collection/src/Plugin/Derivative/DynamicLocalActions.php
modules/contrib/collection/src/Plugin/Validation/Constraint/PreventSelf.php
modules/contrib/collection/src/Plugin/Validation/Constraint/PreventSelfValidator.php
modules/contrib/collection/src/Plugin/Validation/Constraint/SingleCanonicalItem.php
modules/contrib/collection/src/Plugin/Validation/Constraint/SingleCanonicalItemValidator.php
modules/contrib/collection/src/CollectionItemRouteProvider.php
modules/contrib/collection/src/Plugin/Validation/Constraint/UniqueItem.php
modules/contrib/collection/src/Entity/CollectionInterface.php
modules/contrib/collection/src/CollectionItemTypeListBuilder.php
modules/contrib/collection/src/Entity/CollectionItem.php
modules/contrib/collection/src/CollectionListBuilder.php
modules/contrib/collection/src/CollectionPermissions.php
modules/contrib/collection/src/CollectionRouteProvider.php
modules/contrib/collection/src/CollectionTranslationHandler.php
modules/contrib/collection/src/Entity/CollectionItemInterface.php
modules/contrib/collection/src/Entity/CollectionItemType.php
modules/contrib/collection/src/Entity/CollectionItemTypeInterface.php
modules/contrib/collection/src/Entity/CollectionType.php
modules/contrib/collection/src/Entity/CollectionTypeInterface.php
modules/contrib/collection/src/Entity/CollectionViewsData.php
modules/contrib/collection/src/Entity/Handler/CollectionModerationHandler.php
modules/contrib/collection/src/Event/CollectionCreateEvent.php
modules/contrib/collection/src/Event/CollectionEvents.php
modules/contrib/collection/src/Event/CollectionItemCreateEvent.php
modules/contrib/collection/src/Event/CollectionItemDeleteEvent.php
modules/contrib/collection/src/Event/CollectionItemFormSaveEvent.php

12 files with changes
=====================

1) modules/contrib/collection/collection.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\ContentEntityInterface;
 /**
  * @file
  * Contains collection.module.
@@ @@
  */
 function collection_entity_operation(EntityInterface $entity) {
   if ($entity->getEntityTypeId() == 'collection_item' && $entity->item->entity->access('update')) {
-    $item_entity_type = ($entity->item->entity instanceof \Drupal\Core\Entity\ContentEntityInterface) ? 'content' : 'configuration';
+    $item_entity_type = ($entity->item->entity instanceof ContentEntityInterface) ? 'content' : 'configuration';
     $operations = [];
     $operations['edit_item'] = [
       'title' => t('Edit @entity_type', ['@entity_type' => $item_entity_type]),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/collection/tests/src/Functional/LoadTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/collection/src/Form/CollectionNewNodeForm.php:150

    ---------- begin diff ----------
@@ @@

       // Dispatch the CollectionItemFormSaveEvent.
       $event = new CollectionItemFormSaveEvent($collection_item, SAVED_NEW);
-      $this->eventDispatcher->dispatch(CollectionEvents::COLLECTION_ITEM_FORM_SAVE, $event);
+      $this->eventDispatcher->dispatch($event, CollectionEvents::COLLECTION_ITEM_FORM_SAVE);
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/collection/src/Form/CollectionItemForm.php:90

    ---------- begin diff ----------
@@ @@
     }

     $event = new CollectionItemFormSaveEvent($entity, $status);
-    $this->eventDispatcher->dispatch(CollectionEvents::COLLECTION_ITEM_FORM_SAVE, $event);
+    $this->eventDispatcher->dispatch($event, CollectionEvents::COLLECTION_ITEM_FORM_SAVE);

     $form_state->setRedirect('entity.collection_item.collection', ['collection' => $entity->collection->target_id]);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/collection/src/Event/CollectionUpdateEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\collection\Entity\CollectionInterface;

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/collection/src/Event/CollectionItemUpdateEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\collection\Entity\CollectionItemInterface;

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/collection/modules/collection_pathauto/src/EventSubscriber/CollectionPathautoSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection_pathauto\EventSubscriber;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\pathauto\PathautoGeneratorInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Drupal\collection\Event\CollectionEvents;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\pathauto\PathautoFieldItemList;

@@ @@
   /**
    * Process the COLLECTION_ITEM_ENTITY_CREATE, _UPDATE, and _DELETE events.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   The dispatched event.
    */
   public function collectionItemCrud(Event $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


8) modules/contrib/collection/src/Event/CollectionItemFormSaveEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\collection\Entity\CollectionItemInterface;

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/collection/src/Event/CollectionItemDeleteEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\collection\Entity\CollectionItemInterface;

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/collection/src/Event/CollectionItemCreateEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\collection\Entity\CollectionItemInterface;

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/collection/src/Event/CollectionCreateEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\collection\Entity\CollectionInterface;

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/collection/src/Controller/ContentEntityCollectionsController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Controller;

+use Drupal\collection\ContentEntityCollectionListBuilder;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Routing\RouteMatchInterface;
 // use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
     $entity = $request->get($entity_type);
     $collection_item_definition = $this->entityTypeManager->getDefinition('collection_item');
     $entity_collection_items = $this->collectionContentManager->getCollectionItemsForEntity($entity, 'view');
-    $list_builder = new \Drupal\collection\ContentEntityCollectionListBuilder($entity_collection_items, $collection_item_definition);
+    $list_builder = new ContentEntityCollectionListBuilder($entity_collection_items, $collection_item_definition);

     $build = [
       '#theme' => 'container__content_entity_collections',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 12 files have been changed by Rector                                      

