modules/contrib/moodle_rest/modules/moodle_rest_migrate/src/Plugin/migrate/process/MoodleFile.php
modules/contrib/moodle_rest/modules/moodle_rest_user/moodle_rest_user.module
modules/contrib/moodle_rest/modules/moodle_rest_migrate/src/Plugin/migrate/source/MoodleBase.php
modules/contrib/moodle_rest/src/Services/MoodleRestException.php
modules/contrib/moodle_rest/modules/moodle_rest_user/src/ExtraFields.php
modules/contrib/moodle_rest/modules/moodle_rest_user/src/Commands/MoodleDrushCommands.php
modules/contrib/moodle_rest/src/Services/RestFunctions.php
modules/contrib/moodle_rest/modules/moodle_rest_migrate/src/Plugin/migrate/source/MoodleGetCoursesByField.php
modules/contrib/moodle_rest/modules/moodle_rest_user/src/Controller/CourseController.php
modules/contrib/moodle_rest/modules/moodle_rest_migrate/tests/modules/moodle_rest_migrate_test/moodle_rest_migrate_test.module
modules/contrib/moodle_rest/modules/moodle_rest_migrate/tests/src/Kernel/Plugin/migrate/process/MoodleFileTest.php
modules/contrib/moodle_rest/modules/moodle_rest_user/src/Form/SettingsForm.php
modules/contrib/moodle_rest/tests/src/Kernel/Fixtures/MoodleFixturesTrait.php
modules/contrib/moodle_rest/modules/moodle_rest_user/src/Event/MoodleUserAssociate.php
modules/contrib/moodle_rest/modules/moodle_rest_user/src/Event/MoodleUserMap.php
modules/contrib/moodle_rest/tests/src/Kernel/Fixtures/v3.php
modules/contrib/moodle_rest/modules/moodle_rest_user/src/EventSubscriber/AssociateEventSubscriber.php
modules/contrib/moodle_rest/modules/moodle_rest_user/src/EventSubscriber/UserMapSubscriber.php
modules/contrib/moodle_rest/tests/src/Kernel/FunctionsServiceTest.php
modules/contrib/moodle_rest/modules/moodle_rest_migrate/tests/src/Kernel/Plugin/migrate/source/MoodleBaseTest.php
modules/contrib/moodle_rest/modules/moodle_rest_user/src/UserBatchHelper.php
modules/contrib/moodle_rest/modules/moodle_rest_user/src/UserEventHelper.php
modules/contrib/moodle_rest/tests/src/Kernel/RestServiceTest.php
modules/contrib/moodle_rest/modules/moodle_rest_user/tests/src/Kernel/UserEventHelperTest.php
modules/contrib/moodle_rest/moodle_rest.install
modules/contrib/moodle_rest/src/Form/MoodleSettingsForm.php
modules/contrib/moodle_rest/src/Plugin/Field/FieldFormatter/MoodleIdFormatter.php
modules/contrib/moodle_rest/src/Plugin/Field/FieldFormatter/MoodleIdLinkFormatter.php
modules/contrib/moodle_rest/src/Plugin/Field/FieldType/MoodleId.php
modules/contrib/moodle_rest/src/Plugin/Field/FieldWidget/MoodleIdWidget.php
modules/contrib/moodle_rest/src/Services/MoodleRest.php

9 files with changes
====================

1) modules/contrib/moodle_rest/modules/moodle_rest_user/src/Event/MoodleUserMap.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\moodle_rest_user\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\migrate\Row;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Map fields for push to, pull from, Moodle.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/moodle_rest/modules/moodle_rest_user/src/Event/MoodleUserAssociate.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\moodle_rest_user\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * A matching Moodle acount is trying to be found for a user entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/moodle_rest/modules/moodle_rest_migrate/tests/src/Kernel/Plugin/migrate/source/MoodleBaseTest.php:42

    ---------- begin diff ----------
@@ @@
     $this->installConfig(['node', 'moodle_rest_migrate_test']);

     // Mock results from Moodle Server.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->any())
       ->method('requestFunction')
       ->with('core_course_get_courses')
@@ @@
     $this->installConfig(['node', 'moodle_rest_migrate_test']);

     // Mock results from Moodle Server.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->any())
       ->method('requestFunction')
       ->with('core_course_get_courses_by_field')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/moodle_rest/modules/moodle_rest_migrate/tests/src/Kernel/Plugin/migrate/process/MoodleFileTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\moodle_rest_migrate\Kernel\Plugin\migrate\process;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
 use Drupal\KernelTests\Core\File\FileTestBase;
 use Drupal\migrate\MigrateExecutableInterface;
@@ @@
  */
 class MoodleFileTest extends FileTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/moodle_rest/tests/src/Kernel/RestServiceTest.php:35

    ---------- begin diff ----------
@@ @@
    * Check configuration handling in request.
    */
   public function testConfig(): void {
-    $http_client = $this->getMockBuilder(ClientInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_client = $this->createMock(ClientInterface::class);
     $http_client->expects($this->once())
       ->method('request')
       ->with(
@@ @@
    * Test wsfunction call.
    */
   public function testRequestFunction(): void {
-    $http_client = $this->getMockBuilder(ClientInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_client = $this->createMock(ClientInterface::class);
     $http_client->expects($this->exactly(2))
       ->method('request')
       ->withConsecutive([
@@ @@
    * Test guzzle exception.
    */
   public function testRequestException(): void {
-    $http_client = $this->getMockBuilder(ClientInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_client = $this->createMock(ClientInterface::class);
     $http_client->expects($this->any())
       ->method('request')
       ->will($this->throwException(new TransferException()));
@@ @@
    * Test Moodle exceptions.
    */
   public function testMoodleException(): void {
-    $http_client = $this->getMockBuilder(ClientInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_client = $this->createMock(ClientInterface::class);
     $http_client->expects($this->exactly(2))
       ->method('request')
       ->willReturnOnConsecutiveCalls(
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/moodle_rest/tests/src/Kernel/FunctionsServiceTest.php:28

    ---------- begin diff ----------
@@ @@
    */
   public function testSiteInfo(array $result): void {
     // Use default REST client from container.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->once())
       ->method('requestFunction')
       ->with('core_webservice_get_site_info')
@@ @@
    * Test handling exceptions in siteInfo field methods.
    */
   public function testSiteInfoExceptions(): void {
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->any())
       ->method('requestFunction')
       ->will($this->throwException(new MoodleRestException('', 500)));
@@ @@
     $this->assertEquals('', $rest_functions->getSiteInfoSitename());
     $this->assertEquals([], $rest_functions->getSiteInfoFunctions());

-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->any())
       ->method('requestFunction')
       ->will($this->throwException(new MoodleRestException('', 403, NULL, ['errorcode' => 'accessexception'])));
@@ @@
    */
   public function testSwitchRestClient(): void {
     // Use default REST client from container.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->once())
       ->method('requestFunction')
       ->with('core_webservice_get_site_info')
@@ @@
     $rest_functions = $this->container->get('moodle_rest.rest_functions');
     $this->assertEquals(['original_result'], $rest_functions->getSiteInfo());

-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->once())
       ->method('requestFunction')
       ->with('core_webservice_get_site_info')
@@ @@
    */
   public function testGetCourses(array $result): void {
     // Use default REST client from container.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->once())
       ->method('requestFunction')
       ->with('core_course_get_courses')
@@ @@
    */
   public function testGetCoursesByField(array $result): void {
     // Use default REST client from container.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->once())
       ->method('requestFunction')
       ->with('core_course_get_courses_by_field')
@@ @@

     // Request a single course id.
     // Then request courses and get an access denied on one.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->any())
       ->method('requestFunction')
       ->withConsecutive(
@@ @@
         ],
       );
     $this->container->set('moodle_rest.rest_ws', $rest);
-    $logger = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger = $this->createMock(LoggerInterface::class);
     $logger->expects($this->once())
       ->method('warning');
     $this->container->set('logger.channel.moodle_rest', $logger);
@@ @@
     $this->assertEquals([['id' => 1]], $rest_functions->getCoursesByField('ids', '1,2'));

     // Send incorrect parameters get an exception.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->once())
       ->method('requestFunction')
       ->will(
@@ @@
     ];
     $delete_users = [3, 6];

-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->any())
       ->method('requestFunction')
       ->withConsecutive(
@@ @@
    */
   public function testGetUsers(array $result): void {
     // Use default REST client from container.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->once())
       ->method('requestFunction')
       ->with('core_user_get_users', [
@@ @@
    */
   public function testGetUsersByField(array $result): void {
     // Use default REST client from container.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->once())
       ->method('requestFunction')
       ->with('core_user_get_users_by_field', [
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/moodle_rest/modules/moodle_rest_user/tests/src/Kernel/UserEventHelperTest.php:68

    ---------- begin diff ----------
@@ @@
     $this->assertEquals($pull, $settings->get('pull_fields'));

     // Create user. Default config. No ID found.
-    $event_dispatcher = $this->getMockBuilder(EventDispatcherInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $event_dispatcher = $this->createMock(EventDispatcherInterface::class);
     $event_dispatcher->expects($this->once())
       ->method('dispatch');
     $this->container->set('event_dispatcher', $event_dispatcher);
@@ @@
     // Would be nice to run this via calling the
     // UserEventHelper::associateAccount method calling the event subscribers
     // however it serializes the required mock which breaks phpunit.
-    $moodle = $this->getMockBuilder(RestFunctions::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $moodle = $this->createMock(RestFunctions::class);
     $moodle->expects($this->once())
       ->method('getUsersByField')
       ->with('email', ['two@example.com'])
@@ @@
     ]);
     $settings->save();

-    $moodle = $this->getMockBuilder(RestFunctions::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $moodle = $this->createMock(RestFunctions::class);
     $moodle->expects($this->once())
       ->method('createUsers')
       ->with([
@@ @@
     $settings->save();

     // Use default REST client from container.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->once())
       ->method('requestFunction')
       ->with('core_user_get_users', [
@@ @@
     \Drupal::entityTypeManager()->getStorage('user')->resetCache();
     $account = User::load($account->id());

-    $this->assertEqual($account->getAccountName(), 'student_one');
-    $this->assertEqual($account->getEmail(), 'one@example.com');
+    $this->assertEquals($account->getAccountName(), 'student_one');
+    $this->assertEquals($account->getEmail(), 'one@example.com');
   }

   /**
@@ @@
    * Test push users.
    */
   public function testPushUsers(): void {
-    $moodle = $this->getMockBuilder(RestFunctions::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $moodle = $this->createMock(RestFunctions::class);
     $moodle->expects($this->once())
       ->method('updateUsers')
       ->with([
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/moodle_rest/modules/moodle_rest_user/src/UserEventHelper.php:250

    ---------- begin diff ----------
@@ @@
    */
   public function associateAccount(UserInterface $account): int {
     $event = new MoodleUserAssociate($account);
-    $this->eventDispatcher->dispatch(MoodleUserAssociate::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, MoodleUserAssociate::EVENT_NAME);
     return $event->moodleId;
   }

@@ @@
     $row = new Row($source, array_flip(array_column($mapping, 'drupal')));
     // @todo Map can throw an exception for missing fields?
     $event = new MoodleUserMap($row, $mapping);
-    $this->eventDispatcher->dispatch(MoodleUserMap::PUSH_EVENT, $event);
+    $this->eventDispatcher->dispatch($event, MoodleUserMap::PUSH_EVENT);
     try {
       $result = $this->moodle->createUsers([$event->row->getDestination()]);
       $result = reset($result);
@@ @@
       $mapping = $this->settings->get('pull_fields');
       $row = new Row($moodle_user, array_flip(array_column($mapping, 'moodle')));
       $event = new MoodleUserMap($row, $mapping);
-      $this->eventDispatcher->dispatch(MoodleUserMap::PULL_EVENT, $event);
+      $this->eventDispatcher->dispatch($event, MoodleUserMap::PULL_EVENT);
       foreach ($row->getDestination() as $field_name => $values) {
         $field = $update_account->$field_name;
         if ($field instanceof TypedDataInterface) {
@@ @@
     $row = new Row($source, array_flip(array_column($mapping, 'drupal')));
     // @todo Map can throw an exception for missing fields?
     $event = new MoodleUserMap($row, $mapping);
-    $this->eventDispatcher->dispatch(MoodleUserMap::PUSH_EVENT, $event);
+    $this->eventDispatcher->dispatch($event, MoodleUserMap::PUSH_EVENT);
     try {
       $mapped_fields = $event->row->getDestination();
       $mapped_fields['id'] = $moodle_id;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


9) modules/contrib/moodle_rest/modules/moodle_rest_user/src/UserBatchHelper.php:93

    ---------- begin diff ----------
@@ @@

     try {
       $event = new MoodleUserAssociate($account);
-      $this->eventDispatcher->dispatch(MoodleUserAssociate::EVENT_NAME, $event);
+      $this->eventDispatcher->dispatch($event, MoodleUserAssociate::EVENT_NAME);
     }
     catch (ServicesMoodleRestException $e) {
       \watchdog_exception('issup_moodle', $e, '%type: @message "@body" in %function (line %line of %file).', ['@body' => $e->getBody()['exception']]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


 [OK] 9 files have been changed by Rector                                       

