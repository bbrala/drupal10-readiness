diff --git a/modules/search_api_solr_legacy/src/EventSubscriber/SearchApiSolrSubscriber.php b/modules/search_api_solr_legacy/src/EventSubscriber/SearchApiSolrSubscriber.php
index 69f3e204..7ec4609d 100644
--- a/modules/search_api_solr_legacy/src/EventSubscriber/SearchApiSolrSubscriber.php
+++ b/modules/search_api_solr_legacy/src/EventSubscriber/SearchApiSolrSubscriber.php
@@ -18,7 +18,7 @@ class SearchApiSolrSubscriber implements EventSubscriberInterface {
    *   The event.
    */
   public function postConfigSetTemplateMapping(PostConfigSetTemplateMappingEvent $event) {
-    $template_path = drupal_get_path('module', 'search_api_solr_legacy') . '/solr-conf-templates/';
+    $template_path = \Drupal::service('extension.list.module')->getPath('search_api_solr_legacy') . '/solr-conf-templates/';
 
     $solr_configset_template_mapping = $event->getConfigSetTemplateMapping();
     $solr_configset_template_mapping += [
diff --git a/search_api_solr.api.php b/search_api_solr.api.php
index 1361569d..24fb9653 100644
--- a/search_api_solr.api.php
+++ b/search_api_solr.api.php
@@ -1,5 +1,12 @@
 <?php
 
+use Solarium\Core\Query\QueryInterface;
+use Drupal\search_api_solr\SolrBackendInterface;
+use Drupal\search_api_solr\Solarium\Autocomplete\Query;
+use Drupal\search_api\IndexInterface;
+use Drupal\search_api\Query\ResultSetInterface;
+use Solarium\QueryType\Select\Result\Result;
+use ZipStream\ZipStream;
 /**
  * @file
  * Hooks provided by the Search API Solr search module.
@@ -34,14 +41,14 @@
  * @see https://www.drupal.org/project/search_api_solr/issues/3203375
  * @see \Drupal\search_api_solr\Event\PreQueryEvent
  */
-function hook_search_api_solr_query_alter(\Solarium\Core\Query\QueryInterface $solarium_query, \Drupal\search_api\Query\QueryInterface $query) {
+function hook_search_api_solr_query_alter(QueryInterface $solarium_query, \Drupal\search_api\Query\QueryInterface $query) {
   // To get a list of solrium events:
   // @see http://solarium.readthedocs.io/en/stable/customizing-solarium/#plugin-system
   // If the Search API query has a 'my_custom_boost' option, boost German
   // results.
   if ($query->getOption('my_custom_boost')) {
     if ($boosts = $query->getOption('solr_document_boost_factors', [])) {
-      $boosts['search_api_language'] = sprintf('if(eq(%s,"%s"),%2F,0.0)', \Drupal\search_api_solr\SolrBackendInterface::FIELD_PLACEHOLDER, 'de', 1.2);
+      $boosts['search_api_language'] = sprintf('if(eq(%s,"%s"),%2F,0.0)', SolrBackendInterface::FIELD_PLACEHOLDER, 'de', 1.2);
       $query->setOption('solr_document_boost_factors', $boosts);
     }
   }
@@ -78,7 +85,7 @@ function hook_search_api_solr_terms_autocomplete_query_alter(\Drupal\search_api\
  * @see https://www.drupal.org/project/search_api_solr/issues/3203375
  * @see \Drupal\search_api_solr_autocomplete\Event\PreSpellcheckQueryEvent
  */
-function hook_search_api_solr_spellcheck_autocomplete_query_alter(\Drupal\search_api_solr\Solarium\Autocomplete\Query $solarium_query, \Drupal\search_api\Query\QueryInterface $query) {
+function hook_search_api_solr_spellcheck_autocomplete_query_alter(Query $solarium_query, \Drupal\search_api\Query\QueryInterface $query) {
   // If the Search API query has a 'spellcheck' component, set a custom
   // dictionary.
   $solarium_query->getSpellcheck()->setDictionary('custom');
@@ -98,7 +105,7 @@ function hook_search_api_solr_spellcheck_autocomplete_query_alter(\Drupal\search
  * @see https://www.drupal.org/project/search_api_solr/issues/3203375
  * @see \Drupal\search_api_solr_autocomplete\Event\PreSuggesterQueryEvent
  */
-function hook_search_api_solr_suggester_autocomplete_query_alter(\Drupal\search_api_solr\Solarium\Autocomplete\Query $solarium_query, \Drupal\search_api\Query\QueryInterface $query) {
+function hook_search_api_solr_suggester_autocomplete_query_alter(Query $solarium_query, \Drupal\search_api\Query\QueryInterface $query) {
   // If the Search API query has a 'suggester' component, set a custom
   // dictionary.
   $solarium_query->getSuggester()->setDictionary('custom');
@@ -123,7 +130,7 @@ function hook_search_api_solr_suggester_autocomplete_query_alter(\Drupal\search_
  * @see https://www.drupal.org/project/search_api_solr/issues/3203375
  * @see \Drupal\search_api_solr\Event\PostConvertedQueryEvent
  */
-function hook_search_api_solr_converted_query_alter(\Solarium\Core\Query\QueryInterface $solarium_query, \Drupal\search_api\Query\QueryInterface $query) {
+function hook_search_api_solr_converted_query_alter(QueryInterface $solarium_query, \Drupal\search_api\Query\QueryInterface $query) {
   // If the Search API query has a 'I_know_what_I_am_doing' option set to
   // 'really!', overwrite the 'q' parameter, query handler and add some boost
   // queries.
@@ -154,7 +161,7 @@ function hook_search_api_solr_converted_query_alter(\Solarium\Core\Query\QueryIn
  * @see https://www.drupal.org/project/search_api_solr/issues/3203375
  * @see \Drupal\search_api_solr\Event\PostFieldMappingEvent
  */
-function hook_search_api_solr_field_mapping_alter(\Drupal\search_api\IndexInterface $index, array &$fields, string $language_id) {
+function hook_search_api_solr_field_mapping_alter(IndexInterface $index, array &$fields, string $language_id) {
   $fields['fieldname'] = 'ss_fieldname';
 }
 
@@ -175,7 +182,7 @@ function hook_search_api_solr_field_mapping_alter(\Drupal\search_api\IndexInterf
  * @see https://www.drupal.org/project/search_api_solr/issues/3203375
  * @see \Drupal\search_api_solr\Event\PostCreateIndexDocumentsEvent
  */
-function hook_search_api_solr_documents_alter(array &$documents, \Drupal\search_api\IndexInterface $index, array $items) {
+function hook_search_api_solr_documents_alter(array &$documents, IndexInterface $index, array $items) {
   // Adds a "foo" field with value "bar" to all documents.
   foreach ($documents as $document) {
     $document->setField('foo', 'bar');
@@ -198,7 +205,7 @@ function hook_search_api_solr_documents_alter(array &$documents, \Drupal\search_
  * @see https://www.drupal.org/project/search_api_solr/issues/3203375
  * @see \Drupal\search_api_solr\Event\PostExtractResultsEvent
  */
-function hook_search_api_solr_search_results_alter(\Drupal\search_api\Query\ResultSetInterface $result_set, \Drupal\search_api\Query\QueryInterface $query, \Solarium\QueryType\Select\Result\Result $result) {
+function hook_search_api_solr_search_results_alter(ResultSetInterface $result_set, \Drupal\search_api\Query\QueryInterface $query, Result $result) {
   $result_data = $result->getData();
   if (isset($result_data['facet_counts']['facet_fields']['custom_field'])) {
     // Do something with $result_set.
@@ -260,7 +267,7 @@ function search_api_solr_hook_search_api_data_type_info() {
  * @see https://www.drupal.org/project/search_api_solr/issues/3203375
  * @see \Drupal\search_api_solr\Event\PreIndexFinalizationEvent
  */
-function hook_search_api_solr_finalize_index(\Drupal\search_api\IndexInterface $index) {
+function hook_search_api_solr_finalize_index(IndexInterface $index) {
 
 }
 
@@ -304,7 +311,7 @@ function hook_search_api_solr_config_files_alter(array &$files, string $lucene_m
  * @see https://www.drupal.org/project/search_api_solr/issues/3203375
  * @see \Drupal\search_api_solr\Event\PostConfigSetGenerationEvent
  */
-function hook_search_api_solr_config_zip_alter(\ZipStream\ZipStream $zip, string $lucene_match_version, string $server_id = '') {
+function hook_search_api_solr_config_zip_alter(ZipStream $zip, string $lucene_match_version, string $server_id = '') {
 }
 
 /**
diff --git a/search_api_solr.module b/search_api_solr.module
index 74b17c8b..1e282cd1 100644
--- a/search_api_solr.module
+++ b/search_api_solr.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\search_api_solr\Form\IndexAddSolrDocumentFieldsForm;
 /**
  * @file
  * Implement hooks.
@@ -715,7 +716,7 @@ function search_api_solr_entity_type_alter(array &$entity_types) {
   /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
   $entity_types['search_api_index']->setFormClass('solr_multisite_clone', IndexSolrMultisiteCloneForm::class);
   $entity_types['search_api_index']->setFormClass('solr_multisite_update', IndexSolrMultisiteUpdateForm::class);
-  $entity_types['search_api_index']->setFormClass('add_solr_document_fields', \Drupal\search_api_solr\Form\IndexAddSolrDocumentFieldsForm::class);
+  $entity_types['search_api_index']->setFormClass('add_solr_document_fields', IndexAddSolrDocumentFieldsForm::class);
   $entity_types['search_api_index']->setLinkTemplate('add-solr-document-fields', '/admin/config/search/search-api/index/{search_api_index}/fields/add/solr-document');
 }
 
diff --git a/src/Controller/SolrConfigSetController.php b/src/Controller/SolrConfigSetController.php
index e94bce3f..66192c8f 100644
--- a/src/Controller/SolrConfigSetController.php
+++ b/src/Controller/SolrConfigSetController.php
@@ -269,7 +269,7 @@ class SolrConfigSetController extends ControllerBase {
     }
     $solr_branch = $real_solr_branch = $connector->getSolrBranch($this->assumedMinimumVersion);
 
-    $template_path = drupal_get_path('module', 'search_api_solr') . '/solr-conf-templates/';
+    $template_path = \Drupal::service('extension.list.module')->getPath('search_api_solr') . '/solr-conf-templates/';
     $solr_configset_template_mapping = [
       '6.x' => $template_path . '6.x',
       '7.x' => $template_path . '7.x',
diff --git a/src/Plugin/search_api/backend/SearchApiSolrBackend.php b/src/Plugin/search_api/backend/SearchApiSolrBackend.php
index 2d872922..1130037d 100644
--- a/src/Plugin/search_api/backend/SearchApiSolrBackend.php
+++ b/src/Plugin/search_api/backend/SearchApiSolrBackend.php
@@ -891,7 +891,7 @@ class SearchApiSolrBackend extends BackendPluginBase implements SolrBackendInter
 
                 $status = 'ok';
                 if (!$this->isNonDrupalOrOutdatedConfigSetAllowed()) {
-                  $variables[':url'] = Url::fromUri('internal:/' . drupal_get_path('module', 'search_api_solr') . '/README.md')->toString();
+                  $variables[':url'] = Url::fromUri('internal:/' . \Drupal::service('extension.list.module')->getPath('search_api_solr') . '/README.md')->toString();
                   if (preg_match('/^drupal-(.*?)-solr/', $stats_summary['@schema_version'], $matches)) {
                     if (Comparator::lessThan($matches[1], SolrBackendInterface::SEARCH_API_SOLR_MIN_SCHEMA_VERSION)) {
                       \Drupal::messenger()->addError($this->t('You are using outdated Solr configuration set. Please follow the instructions described in the <a href=":url">README.md</a> file for setting up Solr.', $variables));
diff --git a/tests/modules/search_api_solr_test/search_api_solr_test.module b/tests/modules/search_api_solr_test/search_api_solr_test.module
index 761c8eef..7f3cfc71 100644
--- a/tests/modules/search_api_solr_test/search_api_solr_test.module
+++ b/tests/modules/search_api_solr_test/search_api_solr_test.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\search_api\IndexInterface;
 /**
  * @file
  */
@@ -26,7 +27,7 @@ function search_api_solr_test_search_api_solr_config_files_alter(array &$files,
  * @param \Drupal\search_api\Item\ItemInterface[] $items
  *   An array of items to be indexed, keyed by their item IDs.
  */
-function search_api_solr_test_search_api_solr_documents_alter(array &$documents, \Drupal\search_api\IndexInterface $index, array $items) {
+function search_api_solr_test_search_api_solr_documents_alter(array &$documents, IndexInterface $index, array $items) {
   global $index_fallback_test;
 
   if ($index_fallback_test) {
diff --git a/tests/src/Kernel/Processor/SolrBackendTrait.php b/tests/src/Kernel/Processor/SolrBackendTrait.php
index f75ce438..39cb779a 100644
--- a/tests/src/Kernel/Processor/SolrBackendTrait.php
+++ b/tests/src/Kernel/Processor/SolrBackendTrait.php
@@ -26,7 +26,7 @@ trait SolrBackendTrait {
     $config = '/config/install/search_api.server.solr_search_server' . ('true' === SOLR_CLOUD ? '_cloud' : '') . '.yml';
     $this->server = Server::create(
       Yaml::parse(file_get_contents(
-        drupal_get_path('module', 'search_api_solr_test') . $config
+        \Drupal::service('extension.list.module')->getPath('search_api_solr_test') . $config
       ))
     );
     $this->server->save();
diff --git a/tests/src/Kernel/SearchApiSolrExtractionTest.php b/tests/src/Kernel/SearchApiSolrExtractionTest.php
index 860a354a..7811dbe9 100644
--- a/tests/src/Kernel/SearchApiSolrExtractionTest.php
+++ b/tests/src/Kernel/SearchApiSolrExtractionTest.php
@@ -15,7 +15,7 @@ class SearchApiSolrExtractionTest extends SolrBackendTestBase {
    * Test tika extension based PDF extraction.
    */
   public function testBackend() {
-    $filepath = drupal_get_path('module', 'search_api_solr_test') . '/assets/test_extraction.pdf';
+    $filepath = \Drupal::service('extension.list.module')->getPath('search_api_solr_test') . '/assets/test_extraction.pdf';
     /** @var \Drupal\search_api_solr\Plugin\search_api\backend\SearchApiSolrBackend $backend */
     $backend = Server::load($this->serverId)->getBackend();
     $content = $backend->extractContentFromFile($filepath);
diff --git a/tests/src/Kernel/SearchApiSolrTest.php b/tests/src/Kernel/SearchApiSolrTest.php
index b29b7fa7..55b32faf 100644
--- a/tests/src/Kernel/SearchApiSolrTest.php
+++ b/tests/src/Kernel/SearchApiSolrTest.php
@@ -800,7 +800,7 @@ class SearchApiSolrTest extends SolrBackendTestBase {
 
     // If five documents are updated as batch, one illegal document causes the
     // entire batch to fail.
-    $this->assertEqual($this->indexItems($this->indexId), 0);
+    $this->assertEquals($this->indexItems($this->indexId), 0);
 
     // Enable the fallback to index the documents one by one.
     $server = $this->getIndex()->getServerInstance();
@@ -810,7 +810,7 @@ class SearchApiSolrTest extends SolrBackendTestBase {
     $server->save();
 
     // Indexed one by one, four documents get indexed successfully.
-    $this->assertEqual($this->indexItems($this->indexId), 4);
+    $this->assertEquals($this->indexItems($this->indexId), 4);
 
     // Don't mess up the remaining document anymore.
     $index_fallback_test = FALSE;
@@ -820,7 +820,7 @@ class SearchApiSolrTest extends SolrBackendTestBase {
     $server->save();
 
     // Index the previously broken document that is still in the queue.
-    $this->assertEqual($this->indexItems($this->indexId), 1);
+    $this->assertEquals($this->indexItems($this->indexId), 1);
   }
 
   /**
diff --git a/tests/src/Unit/SearchApiBackendUnitTest.php b/tests/src/Unit/SearchApiBackendUnitTest.php
index aa2c61fb..e5a9f622 100644
--- a/tests/src/Unit/SearchApiBackendUnitTest.php
+++ b/tests/src/Unit/SearchApiBackendUnitTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\search_api_solr\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -30,6 +31,7 @@ use Solarium\QueryType\Update\Query\Document;
  */
 class SearchApiBackendUnitTest extends UnitTestCase {
 
+  use ProphecyTrait;
   use InvokeMethodTrait;
 
   /**
@@ -55,7 +57,7 @@ class SearchApiBackendUnitTest extends UnitTestCase {
   /**
    *
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->listBuilder = $this->prophesize(AbstractSolrEntityListBuilder::class);
