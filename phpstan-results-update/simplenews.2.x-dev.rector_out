modules/contrib/simplenews/modules/simplenews_demo/simplenews_demo.install
modules/contrib/simplenews/simplenews.tokens.inc
modules/contrib/simplenews/src/Form/RequestHashForm.php
modules/contrib/simplenews/src/Mail/MailInterface.php
modules/contrib/simplenews/src/Plugin/simplenews/RecipientHandler/RecipientHandlerAll.php
modules/contrib/simplenews/src/Subscription/SubscriptionStorage.php
modules/contrib/simplenews/tests/src/Kernel/SimplenewsSynchronizeFieldsTest.php
modules/contrib/simplenews/src/Mail/MailTest.php
modules/contrib/simplenews/src/Mail/Mailer.php
modules/contrib/simplenews/src/Form/SubscriberDeleteForm.php
modules/contrib/simplenews/src/Plugin/simplenews/RecipientHandler/RecipientHandlerBase.php
modules/contrib/simplenews/src/Form/SubscriberExportForm.php
modules/contrib/simplenews/src/Subscription/SubscriptionStorageInterface.php
modules/contrib/simplenews/src/SubscriptionWidgetInterface.php
modules/contrib/simplenews/tests/modules/simplenews_test/simplenews_test.module
modules/contrib/simplenews/simplenews.views.inc
modules/contrib/simplenews/modules/simplenews_demo/src/Plugin/simplenews/RecipientHandler/RecipientHandlerNewUsers.php
modules/contrib/simplenews/simplenews_rules/simplenews_rules.module
modules/contrib/simplenews/tests/src/Functional/SimplenewsAdministrationTest.php
modules/contrib/simplenews/src/Plugin/simplenews/RecipientHandler/RecipientHandlerEntityBase.php
modules/contrib/simplenews/simplenews_rules/simplenews_rules.rules.inc
modules/contrib/simplenews/src/Plugin/simplenews/RecipientHandler/RecipientHandlerSelectBase.php
modules/contrib/simplenews/src/Form/SubscriberForm.php
modules/contrib/simplenews/modules/simplenews_demo/src/Plugin/simplenews/RecipientHandler/RecipientHandlerSiteMail.php
modules/contrib/simplenews/src/Plugin/views/field/Link.php
modules/contrib/simplenews/modules/simplenews_demo/src/Plugin/simplenews/RecipientHandler/RecipientHandlerSubscribersByRole.php
modules/contrib/simplenews/src/AbortSendingException.php
modules/contrib/simplenews/src/Commands/SimplenewsCommands.php
modules/contrib/simplenews/modules/simplenews_demo/tests/src/Functional/SimplenewsDemoTest.php
modules/contrib/simplenews/src/Form/SubscriberMassSubscribeForm.php
modules/contrib/simplenews/src/Plugin/views/field/SendStatus.php
modules/contrib/simplenews/src/Plugin/views/field/UserName.php
modules/contrib/simplenews/src/Controller/ConfirmationController.php
modules/contrib/simplenews/src/RecipientHandler/Annotation/RecipientHandler.php
modules/contrib/simplenews/src/RecipientHandler/RecipientHandlerInterface.php
modules/contrib/simplenews/src/RecipientHandler/RecipientHandlerManager.php
modules/contrib/simplenews/src/Form/SubscriberMassUnsubscribeForm.php
modules/contrib/simplenews/src/SkipMailException.php
modules/contrib/simplenews/src/Spool/SpoolList.php
modules/contrib/simplenews/simplenews.api.php
modules/contrib/simplenews/simplenews.drush.inc
modules/contrib/simplenews/simplenews.install
modules/contrib/simplenews/src/Form/SubscriberSettingsForm.php
modules/contrib/simplenews/src/Spool/SpoolListInterface.php
modules/contrib/simplenews/src/Spool/SpoolStorage.php
modules/contrib/simplenews/src/Form/SubscriptionSettingsForm.php
modules/contrib/simplenews/src/Entity/Newsletter.php
modules/contrib/simplenews/src/Entity/Subscriber.php
modules/contrib/simplenews/src/Mail/MailerInterface.php
modules/contrib/simplenews/src/NewsletterInterface.php
modules/contrib/simplenews/src/NewsletterListBuilder.php
modules/contrib/simplenews/src/Plugin/Action/SendIssue.php
modules/contrib/simplenews/simplenews.module
modules/contrib/simplenews/src/Form/SubscriptionsAccountForm.php
modules/contrib/simplenews/src/Plugin/Action/StopIssue.php
modules/contrib/simplenews/src/Plugin/Block/SimplenewsSubscriptionBlock.php
modules/contrib/simplenews/src/Form/SubscriptionsBlockForm.php
modules/contrib/simplenews/src/Form/SubscriptionsFormBase.php
modules/contrib/simplenews/src/Plugin/Derivative/AddSimplenewsIssueActionLinks.php
modules/contrib/simplenews/src/Spool/SpoolStorageInterface.php
modules/contrib/simplenews/src/SubscriberAccessControlHandler.php
modules/contrib/simplenews/src/Plugin/Field/FieldFormatter/SimplenewsSubscriptionStatusFormatter.php
modules/contrib/simplenews/src/Plugin/Field/FieldType/IssueItem.php
modules/contrib/simplenews/src/SubscriberInterface.php
modules/contrib/simplenews/src/SubscriberViewsData.php
modules/contrib/simplenews/src/Plugin/Field/FieldType/SubscriptionItem.php
modules/contrib/simplenews/src/Subscription/SubscriptionManager.php
modules/contrib/simplenews/src/Plugin/Field/FieldWidget/IssueWidget.php
modules/contrib/simplenews/src/Form/SubscriptionsPageForm.php
modules/contrib/simplenews/src/EventSubscriber/MigrationSubscriber.php
modules/contrib/simplenews/src/Mail/MailBuilder.php
modules/contrib/simplenews/src/Plugin/Field/FieldWidget/SubscriptionWidget.php
modules/contrib/simplenews/src/Form/ConfirmAddForm.php
modules/contrib/simplenews/src/Subscription/SubscriptionManagerInterface.php
modules/contrib/simplenews/src/Plugin/Mail/HTMLTestingMailSystem.php
modules/contrib/simplenews/src/Mail/MailBuilderInterface.php
modules/contrib/simplenews/src/Mail/MailCacheBuild.php
modules/contrib/simplenews/src/Plugin/migrate/source/d7/Issue.php
modules/contrib/simplenews/src/Mail/MailCacheInterface.php
modules/contrib/simplenews/src/Mail/MailCacheNone.php
modules/contrib/simplenews/src/Mail/MailCacheStatic.php
modules/contrib/simplenews/src/Form/ConfirmMultiForm.php
modules/contrib/simplenews/src/Plugin/migrate/source/d7/Newsletter.php
modules/contrib/simplenews/src/Mail/MailEntity.php
modules/contrib/simplenews/src/Form/ConfirmRemovalForm.php
modules/contrib/simplenews/src/Plugin/migrate/source/d7/Subscriber.php
modules/contrib/simplenews/src/Form/MailSettingsForm.php
modules/contrib/simplenews/src/Plugin/monitoring/SensorPlugin/PendingSensorPlugin.php
modules/contrib/simplenews/src/Form/NewsletterDeleteForm.php
modules/contrib/simplenews/src/Form/NewsletterForm.php
modules/contrib/simplenews/src/Mail/MailFormatHelper.php
modules/contrib/simplenews/src/Form/NewsletterSettingsForm.php
modules/contrib/simplenews/src/Form/NodeTabForm.php
modules/contrib/simplenews/src/Form/PrepareUninstallForm.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsFieldUiTest.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsI18nTest.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsPersonalizationFormsTest.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsRecipientHandlerTest.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsSendTest.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsSourceTest.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsSubscribeTest.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsSynchronizeFieldsFormTest.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsTestBase.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsTestSubscriptionOutput.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsUninstallTest.php
modules/contrib/simplenews/tests/src/Kernel/SimplenewsKernelTest.php
modules/contrib/simplenews/tests/src/Kernel/SimplenewsMonitoringTest.php

26 files with changes
=====================

1) modules/contrib/simplenews/tests/src/Kernel/SimplenewsSynchronizeFieldsTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
     $this->installEntitySchema('simplenews_subscriber');
@@ @@

     // Assert that subscriber's fields are updated.
     $subscriber = Subscriber::load($subscriber->id());
-    $this->assertEqual($subscriber->getUserId(), $user->id());
-    $this->assertEqual($subscriber->getLangcode(), 'fr');
+    $this->assertEquals($subscriber->getUserId(), $user->id());
+    $this->assertEquals($subscriber->getLangcode(), 'fr');
     $this->assertFalse($subscriber->getStatus());

     // Update user fields.
@@ @@

     // Assert that subscriber's fields are updated again.
     $subscriber = Subscriber::load($subscriber->id());
-    $this->assertEqual($subscriber->getMail(), 'user2@example.com');
-    $this->assertEqual($subscriber->getLangcode(), 'en');
+    $this->assertEquals($subscriber->getMail(), 'user2@example.com');
+    $this->assertEquals($subscriber->getLangcode(), 'en');
     $this->assertTrue($subscriber->getStatus());

     // Status is still synced even if sync_fields is not set.
@@ @@

     // Assert that (only) the shared field is also updated on the user.
     $user = User::load($user->id());
-    $this->assertEqual($user->get('field_on_both')->value, 'bar');
-    $this->assertEqual($user->get('created')->value, 1000);
+    $this->assertEquals($user->get('field_on_both')->value, 'bar');
+    $this->assertEquals($user->get('created')->value, 1000);

     // Update the fields on the user.
     $user->set('field_on_both', 'baz');
@@ @@

     // Assert that (only) the shared field is also updated on the subscriber.
     $subscriber = Subscriber::load($subscriber->id());
-    $this->assertEqual($subscriber->get('field_on_both')->value, 'baz');
-    $this->assertEqual($subscriber->get('created')->value, 3000);
+    $this->assertEquals($subscriber->get('field_on_both')->value, 'baz');
+    $this->assertEquals($subscriber->get('created')->value, 3000);
   }

   /**
@@ @@
     ]);

     // Assert that the shared field already has a value.
-    $this->assertEqual($subscriber->get('field_on_both')->value, $user->get('field_on_both')->value);
+    $this->assertEquals($subscriber->get('field_on_both')->value, $user->get('field_on_both')->value);

     // Create a subscriber with values for the fields.
     $subscriber = Subscriber::create([
@@ @@
     ]);

     // Assert that the shared field already has a value.
-    $this->assertEqual($user->get('field_on_both')->value, $subscriber->get('field_on_both')->value);
+    $this->assertEquals($user->get('field_on_both')->value, $subscriber->get('field_on_both')->value);
   }

   /**
@@ @@
     $subscriber->set('field_on_both', 'bar');
     $subscriber->save();
     $user = User::load($user->id());
-    $this->assertEqual($user->get('field_on_both')->value, 'foo');
+    $this->assertEquals($user->get('field_on_both')->value, 'foo');

     // Create a subscriber with a value for the field.
     $subscriber = Subscriber::create([
@@ @@
     $user->set('field_on_both', 'bar');
     $user->save();
     $subscriber = Subscriber::load($subscriber->id());
-    $this->assertEqual($subscriber->get('field_on_both')->value, 'foo');
+    $this->assertEquals($subscriber->get('field_on_both')->value, 'foo');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/simplenews/src/SubscriberInterface.php:171

    ---------- begin diff ----------
@@ @@
    * @param int $timestamp
    *   The timestamp of when the subscription was added.
    */
-  public function subscribe($newsletter_id, $status = SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $source = 'unknown', $timestamp = REQUEST_TIME);
+  public function subscribe($newsletter_id, $status = SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $source = 'unknown', $timestamp = \Drupal::time()->getRequestTime());

   /**
    * Delete a subscription to a certain newsletter of the subscriber.
@@ @@
    * @param int $timestamp
    *   The timestamp of when the subscription was added.
    */
-  public function unsubscribe($newsletter_id, $source = 'unknown', $timestamp = REQUEST_TIME);
+  public function unsubscribe($newsletter_id, $source = 'unknown', $timestamp = \Drupal::time()->getRequestTime());

   /**
    * Load a simplenews newsletter subscriber object by mail.
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector


3) modules/contrib/simplenews/src/Spool/SpoolStorage.php:153

    ---------- begin diff ----------
@@ @@
       ->condition('msid', (array) $msids, 'IN')
       ->fields([
         'status' => $status,
-        'timestamp' => REQUEST_TIME,
+        'timestamp' => \Drupal::time()->getRequestTime(),
       ])
       ->execute();
   }
@@ @@
    */
   public function clear() {

-    $expiration_time = REQUEST_TIME - $this->config->get('mail.spool_expire') * 86400;
+    $expiration_time = \Drupal::time()->getRequestTime() - $this->config->get('mail.spool_expire') * 86400;
     return $this->connection->delete('simplenews_mail_spool')
       ->condition('status', [SpoolStorageInterface::STATUS_DONE, SpoolStorageInterface::STATUS_SKIPPED], 'IN')
       ->condition('timestamp', $expiration_time, '<=')
@@ @@
       $spool['status'] = SpoolStorageInterface::STATUS_PENDING;
     }
     if (!isset($spool['timestamp'])) {
-      $spool['timestamp'] = REQUEST_TIME;
+      $spool['timestamp'] = \Drupal::time()->getRequestTime();
     }
     if (isset($spool['data'])) {
       $spool['data'] = serialize($spool['data']);
@@ @@
    */
   protected function getExpirationTime() {
     $timeout = $this->config->get('mail.spool_progress_expiration');
-    $expiration_time = REQUEST_TIME - $timeout;
+    $expiration_time = \Drupal::time()->getRequestTime() - $timeout;
     return $expiration_time;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector


4) modules/contrib/simplenews/src/Plugin/views/field/SendStatus.php:60

    ---------- begin diff ----------
@@ @@
       SIMPLENEWS_STATUS_SEND_READY => 'images/sn-sent.png',
     ];
     if (isset($images[$status])) {
-      $message['uri'] = drupal_get_path('module', 'simplenews') . '/' . $images[$status];
+      $message['uri'] = \Drupal::service('extension.list.module')->getPath('simplenews') . '/' . $images[$status];
     }
     else {
       $message['uri'] = NULL;
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/simplenews/src/Plugin/simplenews/RecipientHandler/RecipientHandlerSelectBase.php:19

    ---------- begin diff ----------
@@ @@
     $query->addExpression("'$entity_type'", 'entity_type');
     $query->addExpression($this->issue->id(), 'entity_id');
     $query->addExpression(SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, 'status');
-    $query->addExpression(REQUEST_TIME, 'timestamp');
+    $query->addExpression(\Drupal::time()->getRequestTime(), 'timestamp');
     $this->connection->insert('simplenews_mail_spool')->from($query)->execute();

     return $query->countQuery()->execute()->fetchField();
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/simplenews/src/Plugin/simplenews/RecipientHandler/RecipientHandlerBase.php:134

    ---------- begin diff ----------
@@ @@
       'entity_type' => $this->issue->getEntityTypeId(),
       'entity_id' => $this->issue->id(),
       'status' => SpoolStorageInterface::STATUS_PENDING,
-      'timestamp' => REQUEST_TIME,
+      'timestamp' => \Drupal::time()->getRequestTime(),
       'newsletter_id' => $this->getNewsletterId(),
     ];
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/simplenews/src/Mail/Mailer.php:308

    ---------- begin diff ----------
@@ @@
         $this->logger->notice('%success emails sent, %skipped skipped, %fail failed permanently, %retry failed retrying.', $log_array);
       }

-      $this->state->set('simplenews.last_cron', REQUEST_TIME);
+      $this->state->set('simplenews.last_cron', \Drupal::time()->getRequestTime());
       $this->state->set('simplenews.last_sent', $freq[SpoolStorageInterface::STATUS_DONE]);

       $this->accountSwitcher->switchBack();
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector


8) modules/contrib/simplenews/simplenews.module:717

    ---------- begin diff ----------
@@ @@
 /**
  * Generates the hash key used for subscribe/unsubscribe link.
  */
-function simplenews_generate_hash($mail, $action = '', $timestamp = REQUEST_TIME) {
+function simplenews_generate_hash($mail, $action = '', $timestamp = \Drupal::time()->getRequestTime()) {
   $data = $mail . \Drupal::service('private_key')->get() . $action . $timestamp;
   return Crypt::hashBase64($data);
 }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector


9) modules/contrib/simplenews/modules/simplenews_demo/tests/src/Functional/SimplenewsDemoTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Install bartik theme.
     \Drupal::service('theme_installer')->install(['bartik']);
@@ @@
    */
   public function testInstalled() {
     // Check for the two subscription blocks.
-    $this->assertText('Simplenews multiple subscriptions');
-    $this->assertText('Stay informed - subscribe to our newsletters.');
-    $this->assertText('Simplenews subscription');
-    $this->assertText('Stay informed - subscribe to our newsletter.');
+    $this->assertSession()->pageTextContains('Simplenews multiple subscriptions');
+    $this->assertSession()->pageTextContains('Stay informed - subscribe to our newsletters.');
+    $this->assertSession()->pageTextContains('Simplenews subscription');
+    $this->assertSession()->pageTextContains('Stay informed - subscribe to our newsletter.');

     $this->drupalGet('admin/config/services/simplenews');
     $this->clickLink(t('Edit'));
@@ @@
     $this->assertEquals('simpletest@example.com', (string) $from_address->getValue());
     // Assert demo newsletters.
     $this->drupalGet('admin/config/services/simplenews');
-    $this->assertText(t('Press releases'));
-    $this->assertText(t('Special offers'));
-    $this->assertText(t('Weekly content update'));
+    $this->assertSession()->pageTextContains(t('Press releases'));
+    $this->assertSession()->pageTextContains(t('Special offers'));
+    $this->assertSession()->pageTextContains(t('Weekly content update'));
     // Assert demo newsletters sent.
     $this->drupalGet('admin/content/simplenews');
     // @codingStandardsIgnoreLine
     //$this->assertText('Scheduled weekly content newsletter issue');
-    $this->assertText('Sent press releases');
-    $this->assertText('Unpublished press releases');
-    $this->assertText('Pending special offers');
-    $this->assertText('Stopped special offers');
+    $this->assertSession()->pageTextContains('Sent press releases');
+    $this->assertSession()->pageTextContains('Unpublished press releases');
+    $this->assertSession()->pageTextContains('Pending special offers');
+    $this->assertSession()->pageTextContains('Stopped special offers');
     // @codingStandardsIgnoreLine
     //$this->assertText('Scheduled weekly content newsletter issue - Week ');
-    $this->assertRaw(t('Newsletter issue sent to 2 subscribers, 0 errors.'));
-    $this->assertRaw(t('Newsletter issue is pending, 0 mails sent out of 3, 0 errors.'));
+    $this->assertSession()->responseContains(t('Newsletter issue sent to 2 subscribers, 0 errors.'));
+    $this->assertSession()->responseContains(t('Newsletter issue is pending, 0 mails sent out of 3, 0 errors.'));
     // Weekly newsletter.
     // @codingStandardsIgnoreLine
     //$this->assertRaw(t('Newsletter issue sent to 1 subscribers, 0 errors.'));
     // Assert demo subscribers.
     $this->drupalGet('admin/people/simplenews');
-    $this->assertText('a@example.com');
-    $this->assertText('b@example.com');
-    $this->assertText('demouser1@example.com');
+    $this->assertSession()->pageTextContains('a@example.com');
+    $this->assertSession()->pageTextContains('b@example.com');
+    $this->assertSession()->pageTextContains('demouser1@example.com');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/simplenews/src/Entity/Subscriber.php:240

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function subscribe($newsletter_id, $status = SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $source = 'unknown', $timestamp = REQUEST_TIME) {
+  public function subscribe($newsletter_id, $status = SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $source = 'unknown', $timestamp = \Drupal::time()->getRequestTime()) {
     if ($subscription = $this->getSubscription($newsletter_id)) {
       $subscription->status = $status;
     }
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function unsubscribe($newsletter_id, $source = 'unknown', $timestamp = REQUEST_TIME) {
+  public function unsubscribe($newsletter_id, $source = 'unknown', $timestamp = \Drupal::time()->getRequestTime()) {
     if ($subscription = $this->getSubscription($newsletter_id)) {
       $subscription->status = SIMPLENEWS_SUBSCRIPTION_STATUS_UNSUBSCRIBED;
     }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/simplenews/src/Controller/ConfirmationController.php:56

    ---------- begin diff ----------
@@ @@
     if ($subscriber && $hash == simplenews_generate_hash($subscriber->getMail(), 'combined' . serialize($subscriber->getChanges()), $timestamp)) {
       // If the hash is valid but timestamp is too old, display form to request
       // a new hash.
-      if ($timestamp < REQUEST_TIME - $config->get('hash_expiration')) {
+      if ($timestamp < \Drupal::time()->getRequestTime() - $config->get('hash_expiration')) {
         $context = [
           'simplenews_subscriber' => $subscriber,
         ];
@@ @@

       // If the hash is valid but timestamp is too old, display form to request
       // a new hash.
-      if ($timestamp < REQUEST_TIME - $config->get('hash_expiration')) {
+      if ($timestamp < \Drupal::time()->getRequestTime() - $config->get('hash_expiration')) {
         $context = [
           'simplenews_subscriber' => $subscriber,
           'newsletter' => $newsletter,
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/simplenews/simplenews.tokens.inc:91

    ---------- begin diff ----------
@@ @@
       $url_arguments = ['absolute' => TRUE, 'langcode' => $language];

       foreach ($tokens as $name => $original) {
-        $route_parameters = ['snid' => $subscriber->id(), 'timestamp' => REQUEST_TIME];
+        $route_parameters = ['snid' => $subscriber->id(), 'timestamp' => \Drupal::time()->getRequestTime()];
         switch ($name) {
           case 'subscribe-url':
             $hash = simplenews_generate_hash($subscriber->getMail(), 'add');
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector


13) modules/contrib/simplenews/tests/src/Kernel/SimplenewsMonitoringTest.php:33

    ---------- begin diff ----------
@@ @@

     // No spool items - status OK.
     $result = $this->runSensor('simplenews_pending');
-    $this->assertEqual($result->getValue(), 0);
+    $this->assertEquals($result->getValue(), 0);

     // Crate a spool item in state pending.
     \Drupal::service('simplenews.spool_storage')->addMail([
@@ @@
     ]);

     $result = $this->runSensor('simplenews_pending');
-    $this->assertEqual($result->getValue(), 1);
+    $this->assertEquals($result->getValue(), 1);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/simplenews/tests/src/Kernel/SimplenewsKernelTest.php:21

    ---------- begin diff ----------
@@ @@
    * Test mail masking function.
    */
   public function testMasking() {
-    $this->assertEqual('t*****@e*****.org', simplenews_mask_mail('test@example.org'));
-    $this->assertEqual('t*****@e*****.org', simplenews_mask_mail('t@example.org'));
-    $this->assertEqual('t*****@t*****.org', simplenews_mask_mail('t@test.example.org'));
-    $this->assertEqual('t*****@e*****', simplenews_mask_mail('t@example'));
+    $this->assertEquals('t*****@e*****.org', simplenews_mask_mail('test@example.org'));
+    $this->assertEquals('t*****@e*****.org', simplenews_mask_mail('t@example.org'));
+    $this->assertEquals('t*****@t*****.org', simplenews_mask_mail('t@test.example.org'));
+    $this->assertEquals('t*****@e*****', simplenews_mask_mail('t@example'));

   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/simplenews/tests/src/Functional/SimplenewsUninstallTest.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     \Drupal::service('module_installer')->uninstall(['simplenews_test']);
@@ @@

     // Add a newsletter issue.
     $this->drupalCreateNode(['type' => 'simplenews_issue', 'label' => $this->randomMachineName()])->save();
+    $this->drupalGet('admin/config/services/simplenews/settings/uninstall');

     // Delete Simplenews data.
-    $this->drupalPostForm('admin/config/services/simplenews/settings/uninstall', [], t('Delete Simplenews data'));
-    $this->assertText(t('Simplenews data has been deleted.'));
+    $this->submitForm([], t('Delete Simplenews data'));
+    $this->assertSession()->pageTextContains(t('Simplenews data has been deleted.'));
+    $this->drupalGet('admin/modules/uninstall');

     // Uninstall the module.
-    $this->drupalPostForm('admin/modules/uninstall', ['uninstall[simplenews]' => TRUE], t('Uninstall'));
-    $this->drupalPostForm(NULL, [], t('Uninstall'));
-    $this->assertText(t('The selected modules have been uninstalled.'));
-    $this->assertNoText(t('Simplenews'));
+    $this->submitForm(['uninstall[simplenews]' => TRUE], t('Uninstall'));
+    $this->submitForm([], t('Uninstall'));
+    $this->assertSession()->pageTextContains(t('The selected modules have been uninstalled.'));
+    $this->assertSession()->pageTextNotContains(t('Simplenews'));
+    $this->drupalGet('admin/modules');

     // Make sure that the module can be installed again.
-    $this->drupalPostForm('admin/modules', ['modules[simplenews][enable]' => TRUE], t('Install'));
-    $this->assertText('Module Simplenews has been enabled.');
+    $this->submitForm(['modules[simplenews][enable]' => TRUE], t('Install'));
+    $this->assertSession()->pageTextContains('Module Simplenews has been enabled.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/simplenews/tests/src/Functional/SimplenewsTestSubscriptionOutput.php:34

    ---------- begin diff ----------
@@ @@
     $this->drupalLogin($admin_user);
     // Tests extra fields for admin user.
     $this->drupalGet('user/' . $admin_user->id());
-    $this->assertLink('Manage subscriptions');
+    $this->assertSession()->linkExists('Manage subscriptions');
     $this->drupalLogout();
     // Tests extra fields for user.
     $this->drupalLogin($user);
     $this->drupalGet('user/' . $admin_user->id());
-    $this->assertNoLink('Manage subscriptions');
+    $this->assertSession()->linkNotExists('Manage subscriptions');
     $this->drupalGet('user/' . $user->id());
-    $this->assertLink('Manage subscriptions');
+    $this->assertSession()->linkExists('Manage subscriptions');
     $this->drupalLogout();
     // Tests extra fields for anonymous users.
     $this->drupalGet('user/' . $admin_user->id());
-    $this->assertNoLink('Manage subscriptions');
+    $this->assertSession()->linkNotExists('Manage subscriptions');
     $this->drupalGet('user/' . $user->id());
-    $this->assertNoLink('Manage subscriptions');
+    $this->assertSession()->linkNotExists('Manage subscriptions');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertLinkRector
 * AssertNoLinkRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/simplenews/tests/src/Functional/SimplenewsTestBase.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
     $this->drupalPlaceBlock('local_actions_block');
@@ @@
       // @todo: Don't hardcode the default newsletter_id.
       'newsletters[' . $newsletter_id . ']' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Subscribe'));
+    $this->submitForm($edit, t('Subscribe'));
   }

   /**
@@ @@
     foreach ($newsletter_ids as $newsletter_id) {
       $edit["subscriptions[$newsletter_id]"] = $newsletter_id;
     }
-    $this->drupalPostForm($path, $edit, $submit ?: t('Subscribe'));
-    $this->assertResponse($response);
+    $this->drupalGet($path);
+    $this->submitForm($edit, $submit ?: t('Subscribe'));
+    $this->assertSession()->statusCodeEquals($response);
   }

   /**
@@ @@
       'mail' => $email ?: $this->randomEmail(),
       'name' => $this->randomMachineName(),
     ];
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, t('Create new account'));
     // Return uid of new user.
     $uids = \Drupal::entityQuery('user')
       ->sort('created', 'DESC')
@@ @@
    */
   protected function resetPassLogin(UserInterface $user) {
     $uid = $user->id();
-    $timestamp = REQUEST_TIME;
+    $timestamp = \Drupal::time()->getRequestTime();
     $hash = user_pass_rehash($user, $timestamp);
-    $this->drupalPostForm("/user/reset/$uid/$timestamp/$hash", [], t('Log in'));
+    $this->drupalGet("/user/reset/$uid/$timestamp/$hash");
+    $this->submitForm([], t('Log in'));
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * RequestTimeConstRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/simplenews/tests/src/Functional/SimplenewsSynchronizeFieldsFormTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Add a field to both entities.
@@ @@
     // Edit subscriber field and assert user field is changed accordingly.
     $this->drupalLogin($this->user);
     $this->drupalGet('admin/people/simplenews/edit/' . $subscriber->id());
-    $this->assertField('field_shared[0][value]');
-    $this->assertRaw($this->user->field_shared->value);
+    $this->assertSession()->fieldExists('field_shared[0][value]');
+    $this->assertSession()->responseContains($this->user->field_shared->value);

     $new_value = $this->randomMachineName();
-    $this->drupalPostForm(NULL, ['field_shared[0][value]' => $new_value], t('Save'));
+    $this->submitForm(['field_shared[0][value]' => $new_value], t('Save'));
     $this->drupalGet('admin/people/simplenews/edit/' . $subscriber->id());
-    $this->assertRaw($new_value);
+    $this->assertSession()->responseContains($new_value);

     $this->user = User::load($this->user->id());
-    $this->assertEqual($this->user->field_shared->value, $new_value);
+    $this->assertEquals($this->user->field_shared->value, $new_value);
+    $this->drupalGet('admin/config/people/simplenews/settings/subscriber');

     // Unset the sync setting and assert field is not synced.
-    $this->drupalPostForm('admin/config/people/simplenews/settings/subscriber', ['simplenews_sync_fields' => FALSE], t('Save configuration'));
+    $this->submitForm(['simplenews_sync_fields' => FALSE], t('Save configuration'));

     $unsynced_value = $this->randomMachineName();
-    $this->drupalPostForm('admin/people/simplenews/edit/' . $subscriber->id(), ['field_shared[0][value]' => $unsynced_value], t('Save'));
     $this->drupalGet('admin/people/simplenews/edit/' . $subscriber->id());
-    $this->assertRaw($unsynced_value);
+    $this->submitForm(['field_shared[0][value]' => $unsynced_value], t('Save'));
+    $this->drupalGet('admin/people/simplenews/edit/' . $subscriber->id());
+    $this->assertSession()->responseContains($unsynced_value);

     $this->user = User::load($this->user->id());
-    $this->assertEqual($this->user->field_shared->value, $new_value);
-    $this->assertNotEqual($this->user->field_shared->value, $unsynced_value);
+    $this->assertEquals($this->user->field_shared->value, $new_value);
+    $this->assertNotEquals($this->user->field_shared->value, $unsynced_value);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldRector
 * AssertNotEqualRector
 * AssertRawRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/simplenews/tests/src/Functional/SimplenewsSubscribeTest.php:40

    ---------- begin diff ----------
@@ @@
         'description' => $this->randomString(20),
         'opt_inout' => 'double',
       ];
-      $this->drupalPostForm(NULL, $edit, t('Save'));
+      $this->submitForm($edit, t('Save'));
     }

     $newsletters = simplenews_newsletter_get_all();
@@ @@
     foreach ($enable as $newsletter_id) {
       $edit['subscriptions[' . $newsletter_id . ']'] = TRUE;
     }
-    $this->drupalPostForm('newsletter/subscriptions', $edit, t('Subscribe'));
-    $this->assertText(t('You will receive a confirmation e-mail shortly containing further instructions on how to complete your subscription.'));
+    $this->drupalGet('newsletter/subscriptions');
+    $this->submitForm($edit, t('Subscribe'));
+    $this->assertSession()->pageTextContains(t('You will receive a confirmation e-mail shortly containing further instructions on how to complete your subscription.'));

     // Verify listed changes.
     foreach ($newsletters as $newsletter_id => $newsletter) {
@@ @@
     }

     $mails = $this->getMails();
-    $this->assertEqual($mails[0]['from'], 'simpletest@example.com');
-    $this->assertEqual($mails[0]['headers']['From'], '"Drupal" <simpletest@example.com>');
+    $this->assertEquals($mails[0]['from'], 'simpletest@example.com');
+    $this->assertEquals($mails[0]['headers']['From'], '"Drupal" <simpletest@example.com>');

     $confirm_url = $this->extractConfirmationLink($this->getMail(0));

     $this->drupalGet($confirm_url);
-    $this->assertRaw(t('Are you sure you want to confirm the following subscription changes for %user?', ['%user' => simplenews_mask_mail($mail)]));
+    $this->assertSession()->responseContains(t('Are you sure you want to confirm the following subscription changes for %user?', ['%user' => simplenews_mask_mail($mail)]));

     // Verify listed changes.
     foreach ($newsletters as $newsletter_id => $newsletter) {
       if (in_array($newsletter_id, $enable)) {
-        $this->assertText(t('Subscribe to @name', ['@name' => $newsletter->name]));
+        $this->assertSession()->pageTextContains(t('Subscribe to @name', ['@name' => $newsletter->name]));
       }
       else {
-        $this->assertNoText(t('Subscribe to @name', ['@name' => $newsletter->name]));
+        $this->assertSession()->pageTextNotContains(t('Subscribe to @name', ['@name' => $newsletter->name]));
       }
     }
+    $this->drupalGet($confirm_url);

-    $this->drupalPostForm($confirm_url, [], t('Confirm'));
-    $this->assertRaw(t('Subscription changes confirmed for %user.', ['%user' => $mail]));
+    $this->submitForm([], t('Confirm'));
+    $this->assertSession()->responseContains(t('Subscription changes confirmed for %user.', ['%user' => $mail]));

     /** @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager */
     $subscription_manager = \Drupal::service('simplenews.subscription_manager');
@@ @@
     // Go to the manage page and submit without changes.
     $subscriber = Subscriber::loadByMail($mail);
     $hash = simplenews_generate_hash($subscriber->getMail(), 'manage');
-    $this->drupalPostForm('newsletter/subscriptions/' . $subscriber->id() . '/' . REQUEST_TIME . '/' . $hash, [], t('Update'));
-    $this->assertText(t('The newsletter subscriptions for @mail have been updated.', ['@mail' => $mail]));
+    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . \Drupal::time()->getRequestTime() . '/' . $hash);
+    $this->submitForm([], t('Update'));
+    $this->assertSession()->pageTextContains(t('The newsletter subscriptions for @mail have been updated.', ['@mail' => $mail]));
     $this->assertEquals(1, count($this->getMails()), t('No confirmation mails have been sent.'));

     // Unsubscribe from two of the three enabled newsletters.
@@ @@
     foreach ($disable as $newsletter_id) {
       $edit['subscriptions[' . $newsletter_id . ']'] = TRUE;
     }
-    $this->drupalPostForm('newsletter/subscriptions', $edit, t('Unsubscribe'));
-    $this->assertText(t('You will receive a confirmation e-mail shortly containing further instructions on how to cancel your subscription.'));
+    $this->drupalGet('newsletter/subscriptions');
+    $this->submitForm($edit, t('Unsubscribe'));
+    $this->assertSession()->pageTextContains(t('You will receive a confirmation e-mail shortly containing further instructions on how to cancel your subscription.'));

     // Unsubscribe with no confirmed email.
     $subscription_manager = \Drupal::service('simplenews.subscription_manager');
@@ @@
       $this->fail('Exception not thrown.');
     }
     catch (\Exception $e) {
-      $this->assertEqual($e->getMessage(), 'The subscriber does not exist.');
+      $this->assertEquals($e->getMessage(), 'The subscriber does not exist.');
     }

     // Verify listed changes.
@@ @@
     $confirm_url = $this->extractConfirmationLink($this->getMail(1));

     $this->drupalGet($confirm_url);
-    $this->assertRaw(t('Are you sure you want to confirm the following subscription changes for %user?', ['%user' => simplenews_mask_mail($mail)]));
+    $this->assertSession()->responseContains(t('Are you sure you want to confirm the following subscription changes for %user?', ['%user' => simplenews_mask_mail($mail)]));

     // Verify listed changes.
     foreach ($newsletters as $newsletter_id => $newsletter) {
       if (in_array($newsletter_id, $disable)) {
-        $this->assertText(t('Unsubscribe from @name', ['@name' => $newsletter->name]));
+        $this->assertSession()->pageTextContains(t('Unsubscribe from @name', ['@name' => $newsletter->name]));
       }
       else {
-        $this->assertNoText(t('Unsubscribe from @name', ['@name' => $newsletter->name]));
+        $this->assertSession()->pageTextNotContains(t('Unsubscribe from @name', ['@name' => $newsletter->name]));
       }
     }
+    $this->drupalGet($confirm_url);

-    $this->drupalPostForm($confirm_url, [], t('Confirm'));
-    $this->assertRaw(t('Subscription changes confirmed for %user.', ['%user' => $mail]));
+    $this->submitForm([], t('Confirm'));
+    $this->assertSession()->responseContains(t('Subscription changes confirmed for %user.', ['%user' => $mail]));

     // Verify subscription changes.
     $subscriber_storage->resetCache();
@@ @@
       'mail[0][value]' => $mail,
       'subscriptions[' . $newsletter_id . ']' => TRUE,
     ];
-    $this->drupalPostForm('newsletter/subscriptions', $edit, t('Subscribe'));
+    $this->drupalGet('newsletter/subscriptions');
+    $this->submitForm($edit, t('Subscribe'));
     $this->getMail(2);

     // Load simplenews settings config object.
@@ @@
       'mail[0][value]' => $mail,
       'subscriptions[' . $newsletter_id . ']' => TRUE,
     ];
-    $this->drupalPostForm('newsletter/subscriptions', $edit, t('Subscribe'));
+    $this->drupalGet('newsletter/subscriptions');
+    $this->submitForm($edit, t('Subscribe'));
     $this->getMail(3);

     // Change behavior to never, should send two separate mails.
@@ @@
     foreach ($disable as $newsletter_id) {
       $edit['subscriptions[' . $newsletter_id . ']'] = TRUE;
     }
-    $this->drupalPostForm('newsletter/subscriptions', $edit, t('Subscribe'));
-    $this->assertText(t('You will receive a confirmation e-mail shortly containing further instructions on how to complete your subscription.'));
+    $this->drupalGet('newsletter/subscriptions');
+    $this->submitForm($edit, t('Subscribe'));
+    $this->assertSession()->pageTextContains(t('You will receive a confirmation e-mail shortly containing further instructions on how to complete your subscription.'));
     $this->extractConfirmationLink($this->getMail(4));
     $this->extractConfirmationLink($this->getMail(5));

@@ @@
     foreach (array_keys($newsletters) as $newsletter_id) {
       $edit['subscriptions[' . $newsletter_id . ']'] = TRUE;
     }
-    $this->drupalPostForm('newsletter/subscriptions', $edit, t('Unsubscribe'));
-    $this->assertText(t('You will receive a confirmation e-mail shortly containing further instructions on how to cancel your subscription.'));
+    $this->drupalGet('newsletter/subscriptions');
+    $this->submitForm($edit, t('Unsubscribe'));
+    $this->assertSession()->pageTextContains(t('You will receive a confirmation e-mail shortly containing further instructions on how to cancel your subscription.'));

     $confirm_url = $this->extractConfirmationLink($this->getMail(6));
     $this->drupalGet($confirm_url);
     $this->drupalGet($confirm_url . '/ok');
-    $this->assertRaw(t('Subscription changes confirmed for %user.', ['%user' => $mail]));
+    $this->assertSession()->responseContains(t('Subscription changes confirmed for %user.', ['%user' => $mail]));

     // Verify subscription changes.
     $subscriber_storage->resetCache();
@@ @@
     // Using direct url.
     $this->drupalGet($confirm_url . '/ok');
     $this->assertSession()->statusCodeNotEquals(404);
-    $this->assertRaw(t('All changes to your subscriptions where already applied. No changes made.'));
+    $this->assertSession()->responseContains(t('All changes to your subscriptions where already applied. No changes made.'));

     // Using confirmation page.
     $this->drupalGet($confirm_url);
     $this->assertSession()->statusCodeNotEquals(404);
-    $this->assertRaw(t('All changes to your subscriptions where already applied. No changes made.'));
+    $this->assertSession()->responseContains(t('All changes to your subscriptions where already applied. No changes made.'));

     // Test expired confirmation links.
     $enable = array_rand($newsletters, 3);
@@ @@
     foreach ($enable as $newsletter_id) {
       $edit['subscriptions[' . $newsletter_id . ']'] = TRUE;
     }
-    $this->drupalPostForm('newsletter/subscriptions', $edit, t('Subscribe'));
+    $this->drupalGet('newsletter/subscriptions');
+    $this->submitForm($edit, t('Subscribe'));

     $subscriber = Subscriber::loadByMail($mail);
-    $expired_timestamp = REQUEST_TIME - 86401;
+    $expired_timestamp = \Drupal::time()->getRequestTime() - 86401;
     $hash = simplenews_generate_hash($subscriber->getMail(), 'combined' . serialize($subscriber->getChanges()), $expired_timestamp);
     $url = 'newsletter/confirm/combined/' . $subscriber->id() . '/' . $expired_timestamp . '/' . $hash;
     $this->drupalGet($url);
-    $this->assertText(t('This link has expired.'));
-    $this->drupalPostForm(NULL, [], t('Request new confirmation mail'));
+    $this->assertSession()->pageTextContains(t('This link has expired.'));
+    $this->submitForm([], t('Request new confirmation mail'));

     $confirm_url = $this->extractConfirmationLink($this->getMail(8));

@@ @@
     }

     $this->drupalGet($confirm_url);
-    $this->assertRaw(t('Are you sure you want to confirm the following subscription changes for %user?', ['%user' => simplenews_mask_mail($mail)]));
+    $this->assertSession()->responseContains(t('Are you sure you want to confirm the following subscription changes for %user?', ['%user' => simplenews_mask_mail($mail)]));

     // Verify listed changes.
     foreach ($newsletters as $newsletter_id => $newsletter) {
       if (in_array($newsletter_id, $enable)) {
-        $this->assertText(t('Subscribe to @name', ['@name' => $newsletter->name]));
+        $this->assertSession()->pageTextContains(t('Subscribe to @name', ['@name' => $newsletter->name]));
       }
       else {
-        $this->assertNoText(t('Subscribe to @name', ['@name' => $newsletter->name]));
+        $this->assertSession()->pageTextNotContains(t('Subscribe to @name', ['@name' => $newsletter->name]));
       }
     }
+    $this->drupalGet($confirm_url);

-    $this->drupalPostForm($confirm_url, [], t('Confirm'));
-    $this->assertRaw(t('Subscription changes confirmed for %user.', ['%user' => $mail]));
+    $this->submitForm([], t('Confirm'));
+    $this->assertSession()->responseContains(t('Subscription changes confirmed for %user.', ['%user' => $mail]));
   }

   /**
@@ @@
       return FALSE;
     }
     $confirm_url = $match[0];
-    $this->pass(t('Confirmation URL found: @url', ['@url' => $confirm_url]));
     return $confirm_url;
   }

@@ @@
         'description' => $this->randomString(20),
         'opt_inout' => 'double',
       ];
-      $this->drupalPostForm(NULL, $edit, t('Save'));
+      $this->submitForm($edit, t('Save'));
     }

     $newsletter_id = $this->getRandomNewsletter();
@@ @@
     $edit = [
       'mail[0][value]' => $mail,
     ];
-    $this->drupalPostForm('', $edit, t('Subscribe'));
-    $this->assertText(t('The email address @mail is not valid', ['@mail' => $mail]));
+    $this->drupalGet('');
+    $this->submitForm($edit, t('Subscribe'));
+    $this->assertSession()->pageTextContains(t('The email address @mail is not valid', ['@mail' => $mail]));

     // Now with valid email.
     $mail = $this->randomEmail(8);
@@ @@
     $edit = [
       'mail[0][value]' => $mail,
     ];
-    $this->drupalPostForm('', $edit, t('Subscribe'));
-    $this->assertText(t('You will receive a confirmation e-mail shortly containing further instructions on how to complete your subscription.'));
+    $this->drupalGet('');
+    $this->submitForm($edit, t('Subscribe'));
+    $this->assertSession()->pageTextContains(t('You will receive a confirmation e-mail shortly containing further instructions on how to complete your subscription.'));

     $subscriber = Subscriber::loadByMail($mail);
     $this->assertNotNull($subscriber, 'New subscriber entity successfully loaded.');
@@ @@

     $this->drupalGet($confirm_url);
     $newsletter = Newsletter::load($newsletter_id);
-    $this->assertRaw(t('Are you sure you want to add %user to the %newsletter mailing list?', ['%user' => simplenews_mask_mail($mail), '%newsletter' => $newsletter->name]));
+    $this->assertSession()->responseContains(t('Are you sure you want to add %user to the %newsletter mailing list?', ['%user' => simplenews_mask_mail($mail), '%newsletter' => $newsletter->name]));

-    $this->drupalPostForm(NULL, [], t('Subscribe'));
-    $this->assertRaw(t('%user was added to the %newsletter mailing list.', ['%user' => $mail, '%newsletter' => $newsletter->name]));
-    $this->assertUrl(new Url('<front>'));
+    $this->submitForm([], t('Subscribe'));
+    $this->assertSession()->responseContains(t('%user was added to the %newsletter mailing list.', ['%user' => $mail, '%newsletter' => $newsletter->name]));
+    $this->assertSession()->addressEquals(new Url('<front>'));

     // Test that it is possible to register with a mail address that is already
     // a subscriber.
@@ @@
       'pass[pass1]' => $pass,
       'pass[pass2]' => $pass,
     ];
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, t('Create new account'));

     // Verify confirmation messages.
-    $this->assertText(t('Registration successful. You are now logged in.'));
+    $this->assertSession()->pageTextContains(t('Registration successful. You are now logged in.'));

     // Verify that the subscriber has been updated and references to the correct
     // user.
@@ @@
     \Drupal::entityTypeManager()->getStorage('simplenews_subscriber')->resetCache();
     $subscriber = Subscriber::loadByMail($mail);
     $account = user_load_by_mail($mail);
-    $this->assertEqual($subscriber->getUserId(), $account->id());
-    $this->assertEqual($account->getDisplayName(), $edit['name']);
+    $this->assertEquals($subscriber->getUserId(), $account->id());
+    $this->assertEquals($account->getDisplayName(), $edit['name']);

     $this->drupalLogout();

@@ @@
       "subscriptions[$newsletter_id]" => '1',
       'mail[0][value]' => $mail,
     ];
-    $this->drupalPostForm('newsletter/subscriptions', $edit, t('Subscribe'));
-    $this->assertText(t('You will receive a confirmation e-mail shortly containing further instructions on how to complete your subscription.'));
+    $this->drupalGet('newsletter/subscriptions');
+    $this->submitForm($edit, t('Subscribe'));
+    $this->assertSession()->pageTextContains(t('You will receive a confirmation e-mail shortly containing further instructions on how to complete your subscription.'));

     $confirm_url = $this->extractConfirmationLink($this->getMail(2));

     $this->drupalGet($confirm_url);
     $newsletter = Newsletter::load($newsletter_id);
-    $this->assertRaw(t('Are you sure you want to add %user to the %newsletter mailing list?', ['%user' => simplenews_mask_mail($mail), '%newsletter' => $newsletter->name]));
+    $this->assertSession()->responseContains(t('Are you sure you want to add %user to the %newsletter mailing list?', ['%user' => simplenews_mask_mail($mail), '%newsletter' => $newsletter->name]));
+    $this->drupalGet($confirm_url);

-    $this->drupalPostForm($confirm_url, [], t('Subscribe'));
-    $this->assertRaw(t('%user was added to the %newsletter mailing list.', ['%user' => $mail, '%newsletter' => $newsletter->name]));
+    $this->submitForm([], t('Subscribe'));
+    $this->assertSession()->responseContains(t('%user was added to the %newsletter mailing list.', ['%user' => $mail, '%newsletter' => $newsletter->name]));

     // 3. Subscribe anonymous via multi block.
     // Setup subscription block with subscription form.
@@ @@
     $edit = [
       'mail[0][value]' => $mail,
     ];
-    $this->drupalPostForm('', $edit, t('Subscribe'));
-    $this->assertText(t('You must select at least one newsletter.'));
+    $this->drupalGet('');
+    $this->submitForm($edit, t('Subscribe'));
+    $this->assertSession()->pageTextContains(t('You must select at least one newsletter.'));

     // Now fill out the form and try again. The e-mail should still be listed.
     $edit = [
       'subscriptions[' . $newsletter_id . ']' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Subscribe'));
-    $this->assertText(t('You will receive a confirmation e-mail shortly containing further instructions on how to complete your subscription.'));
+    $this->submitForm($edit, t('Subscribe'));
+    $this->assertSession()->pageTextContains(t('You will receive a confirmation e-mail shortly containing further instructions on how to complete your subscription.'));

     $confirm_url = $this->extractConfirmationLink($this->getMail(3));

     $this->drupalGet($confirm_url);
     $newsletter = Newsletter::load($newsletter_id);
-    $this->assertRaw(t('Are you sure you want to add %user to the %newsletter mailing list?', ['%user' => simplenews_mask_mail($mail), '%newsletter' => $newsletter->name]));
+    $this->assertSession()->responseContains(t('Are you sure you want to add %user to the %newsletter mailing list?', ['%user' => simplenews_mask_mail($mail), '%newsletter' => $newsletter->name]));
+    $this->drupalGet($confirm_url);

-    $this->drupalPostForm($confirm_url, [], t('Subscribe'));
-    $this->assertRaw(t('%user was added to the %newsletter mailing list.', ['%user' => $mail, '%newsletter' => $newsletter->name]));
+    $this->submitForm([], t('Subscribe'));
+    $this->assertSession()->responseContains(t('%user was added to the %newsletter mailing list.', ['%user' => $mail, '%newsletter' => $newsletter->name]));

     // Try to subscribe again, this should not re-set the status to unconfirmed.
     $edit = [
@@ @@
       'mail[0][value]' => $mail,
       'subscriptions[' . $newsletter_id . ']' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Subscribe'));
-    $this->assertText(t('You will receive a confirmation e-mail shortly containing further instructions on how to complete your subscription.'));
+    $this->submitForm($edit, t('Subscribe'));
+    $this->assertSession()->pageTextContains(t('You will receive a confirmation e-mail shortly containing further instructions on how to complete your subscription.'));

     $subscriber = Subscriber::loadByMail($mail);
-    $this->assertNotEqual($subscriber, FALSE, 'New subscriber entity successfully loaded.');
+    $this->assertNotEquals($subscriber, FALSE, 'New subscriber entity successfully loaded.');
     $subscription = $subscriber->getSubscription($newsletter_id);
     $this->assertEquals(SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $subscription->status);

@@ @@
     $edit = [
       'mail[0][value]' => $mail,
     ];
-    $this->drupalPostForm('newsletter/subscriptions', $edit, t('Subscribe'));
-    $this->assertText(t('You must select at least one newsletter.'));
+    $this->drupalGet('newsletter/subscriptions');
+    $this->submitForm($edit, t('Subscribe'));
+    $this->assertSession()->pageTextContains(t('You must select at least one newsletter.'));

     // Now fill out the form and try again.
     $edit = [
       'subscriptions[' . $newsletter_id . ']' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Subscribe'));
-    $this->assertText(t('You will receive a confirmation e-mail shortly containing further instructions on how to complete your subscription.'));
+    $this->submitForm($edit, t('Subscribe'));
+    $this->assertSession()->pageTextContains(t('You will receive a confirmation e-mail shortly containing further instructions on how to complete your subscription.'));

     $confirm_url = $this->extractConfirmationLink($this->getMail(5));

     $this->drupalGet($confirm_url);
     $newsletter = Newsletter::load($newsletter_id);
-    $this->assertRaw(t('Are you sure you want to add %user to the %newsletter mailing list?', ['%user' => simplenews_mask_mail($mail), '%newsletter' => $newsletter->name]));
+    $this->assertSession()->responseContains(t('Are you sure you want to add %user to the %newsletter mailing list?', ['%user' => simplenews_mask_mail($mail), '%newsletter' => $newsletter->name]));
+    $this->drupalGet($confirm_url);

-    $this->drupalPostForm($confirm_url, [], t('Subscribe'));
-    $this->assertRaw(t('%user was added to the %newsletter mailing list.', ['%user' => $mail, '%newsletter' => $newsletter->name]));
+    $this->submitForm([], t('Subscribe'));
+    $this->assertSession()->responseContains(t('%user was added to the %newsletter mailing list.', ['%user' => $mail, '%newsletter' => $newsletter->name]));

     // Test unsubscribe on newsletter/subscriptions page.
     $edit = [
       'mail[0][value]' => $mail,
     ];
-    $this->drupalPostForm('newsletter/subscriptions', $edit, t('Unsubscribe'));
-    $this->assertText(t('You must select at least one newsletter.'));
+    $this->drupalGet('newsletter/subscriptions');
+    $this->submitForm($edit, t('Unsubscribe'));
+    $this->assertSession()->pageTextContains(t('You must select at least one newsletter.'));

     // Now fill out the form and try again.
     $edit = [
       'subscriptions[' . $newsletter_id . ']' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Unsubscribe'));
-    $this->assertText(t('You will receive a confirmation e-mail shortly containing further instructions on how to cancel your subscription.'));
+    $this->submitForm($edit, t('Unsubscribe'));
+    $this->assertSession()->pageTextContains(t('You will receive a confirmation e-mail shortly containing further instructions on how to cancel your subscription.'));
     $this->assertMailText(t('We have received a request to remove the @mail', ['@mail' => $mail]), 6);

     $confirm_url = $this->extractConfirmationLink($this->getMail(6));

     $mails = $this->getMails();
-    $this->assertEqual($mails[0]['from'], 'simpletest@example.com');
-    $this->assertEqual($mails[0]['headers']['From'], '"Drupal" <simpletest@example.com>');
+    $this->assertEquals($mails[0]['from'], 'simpletest@example.com');
+    $this->assertEquals($mails[0]['headers']['From'], '"Drupal" <simpletest@example.com>');

     $this->drupalGet($confirm_url);
     $newsletter = Newsletter::load($newsletter_id);
-    $this->assertRaw(t('Are you sure you want to remove %user from the %newsletter mailing list?', ['%user' => simplenews_mask_mail($mail), '%newsletter' => $newsletter->name]));
+    $this->assertSession()->responseContains(t('Are you sure you want to remove %user from the %newsletter mailing list?', ['%user' => simplenews_mask_mail($mail), '%newsletter' => $newsletter->name]));
+    $this->drupalGet($confirm_url);

-    $this->drupalPostForm($confirm_url, [], t('Unsubscribe'));
-    $this->assertRaw(t('%user was unsubscribed from the %newsletter mailing list.', ['%user' => $mail, '%newsletter' => $newsletter->name]));
+    $this->submitForm([], t('Unsubscribe'));
+    $this->assertSession()->responseContains(t('%user was unsubscribed from the %newsletter mailing list.', ['%user' => $mail, '%newsletter' => $newsletter->name]));

     // Visit the newsletter/subscriptions page with the hash.
     $subscriber = Subscriber::loadByMail($mail);

     $hash = simplenews_generate_hash($subscriber->getMail(), 'manage');
-    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . REQUEST_TIME . '/' . $hash);
-    $this->assertText(t('Subscriptions for @mail', ['@mail' => $mail]));
+    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . \Drupal::time()->getRequestTime() . '/' . $hash);
+    $this->assertSession()->pageTextContains(t('Subscriptions for @mail', ['@mail' => $mail]));

     $edit = [
       'subscriptions[' . $newsletter_id . ']' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Update'));
+    $this->submitForm($edit, t('Update'));

-    $this->assertText(t('The newsletter subscriptions for @mail have been updated.', ['@mail' => $mail]));
+    $this->assertSession()->pageTextContains(t('The newsletter subscriptions for @mail have been updated.', ['@mail' => $mail]));

     // Make sure the subscription is confirmed.
     \Drupal::entityTypeManager()->getStorage('simplenews_subscriber')->resetCache();
@@ @@

     // Attempt to fetch the page using a wrong hash but correct format.
     $hash = simplenews_generate_hash($subscriber->getMail() . 'a', 'manage');
-    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . REQUEST_TIME . '/' . $hash);
-    $this->assertResponse(404);
+    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . \Drupal::time()->getRequestTime() . '/' . $hash);
+    $this->assertSession()->statusCodeEquals(404);

     // Attempt to unsubscribe a non-existing subscriber.
     $mail = $this->randomEmail();
@@ @@
       'mail[0][value]' => $mail,
       'subscriptions[' . $newsletter_id . ']' => TRUE,
     ];
-    $this->drupalPostForm('newsletter/subscriptions', $edit, t('Unsubscribe'));
-    $this->assertText(t('You will receive a confirmation e-mail shortly containing further instructions on how to cancel your subscription.'));
+    $this->drupalGet('newsletter/subscriptions');
+    $this->submitForm($edit, t('Unsubscribe'));
+    $this->assertSession()->pageTextContains(t('You will receive a confirmation e-mail shortly containing further instructions on how to cancel your subscription.'));
     $this->assertMailText('is not subscribed to this mailing list', 7);

     // Test expired confirmation links.
@@ @@
       'mail[0][value]' => $mail,
       'subscriptions[' . $newsletter_id . ']' => TRUE,
     ];
-    $this->drupalPostForm('newsletter/subscriptions', $edit, t('Subscribe'));
+    $this->drupalGet('newsletter/subscriptions');
+    $this->submitForm($edit, t('Subscribe'));

     $subscriber = Subscriber::loadByMail($mail);
-    $expired_timestamp = REQUEST_TIME - 86401;
+    $expired_timestamp = \Drupal::time()->getRequestTime() - 86401;
     $hash = simplenews_generate_hash($subscriber->getMail(), 'add', $expired_timestamp);
     $url = 'newsletter/confirm/add/' . $subscriber->id() . '/' . $newsletter_id . '/' . $expired_timestamp . '/' . $hash;
     $this->drupalGet($url);
-    $this->assertText(t('This link has expired.'));
-    $this->drupalPostForm(NULL, [], t('Request new confirmation mail'));
+    $this->assertSession()->pageTextContains(t('This link has expired.'));
+    $this->submitForm([], t('Request new confirmation mail'));

     $confirm_url = $this->extractConfirmationLink($this->getMail(9));

     $this->drupalGet($confirm_url);
     $newsletter = Newsletter::load($newsletter_id);
-    $this->assertRaw(t('Are you sure you want to add %user to the %newsletter mailing list?', ['%user' => simplenews_mask_mail($mail), '%newsletter' => $newsletter->name]));
+    $this->assertSession()->responseContains(t('Are you sure you want to add %user to the %newsletter mailing list?', ['%user' => simplenews_mask_mail($mail), '%newsletter' => $newsletter->name]));
+    $this->drupalGet($confirm_url);

-    $this->drupalPostForm($confirm_url, [], t('Subscribe'));
-    $this->assertRaw(t('%user was added to the %newsletter mailing list.', ['%user' => $mail, '%newsletter' => $newsletter->name]));
+    $this->submitForm([], t('Subscribe'));
+    $this->assertSession()->responseContains(t('%user was added to the %newsletter mailing list.', ['%user' => $mail, '%newsletter' => $newsletter->name]));

     // Make sure the subscription is confirmed now.
     \Drupal::entityTypeManager()->getStorage('simplenews_subscriber')->resetCache();
@@ @@
       'description' => $this->randomString(20),
       'opt_inout' => 'single',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->drupalLogout();

@@ @@
     $edit = [
       'mail[0][value]' => $mail,
     ];
-    $this->drupalPostForm('', $edit, t('Subscribe'));
-    $this->assertText(t('You have been subscribed.'));
+    $this->drupalGet('');
+    $this->submitForm($edit, t('Subscribe'));
+    $this->assertSession()->pageTextContains(t('You have been subscribed.'));

     $subscriber = Subscriber::loadByMail($mail);
     $subscription = $subscriber->getSubscription($newsletter_id);
@@ @@
       'mail[0][value]' => $mail,
       'subscriptions[' . $newsletter_id . ']' => TRUE,
     ];
-    $this->drupalPostForm('newsletter/subscriptions', $edit, t('Unsubscribe'));
+    $this->drupalGet('newsletter/subscriptions');
+    $this->submitForm($edit, t('Unsubscribe'));

     \Drupal::entityTypeManager()->getStorage('simplenews_subscriber')->resetCache();
     $subscriber = Subscriber::loadByMail($mail);
@@ @@
         'description' => $this->randomString(20),
         'opt_inout' => 'double',
       ];
-      $this->drupalPostForm(NULL, $edit, t('Save'));
+      $this->submitForm($edit, t('Save'));
     }

     $newsletter_id = $this->getRandomNewsletter();
@@ @@
     $single_block = $this->setupSubscriptionBlock($block_settings);
     $subscriber_user = $this->drupalCreateUser(['subscribe to newsletters']);
     $this->drupalLogin($subscriber_user);
-    $this->assertEqual($this->countSubscribers(), 0);
+    $this->assertEquals($this->countSubscribers(), 0);

     // 1. Subscribe authenticated via block
     // Subscribe + submit
     // Assert confirmation message.
-    $this->drupalPostForm(NULL, [], t('Subscribe'));
-    $this->assertText(t('You have been subscribed.'));
-    $this->assertEqual($this->countSubscribers(), 1);
+    $this->submitForm([], t('Subscribe'));
+    $this->assertSession()->pageTextContains(t('You have been subscribed.'));
+    $this->assertEquals($this->countSubscribers(), 1);

     // 2. Unsubscribe authenticated via subscription page
     // Unsubscribe + submit
@@ @@
     $edit = [
       "subscriptions[$newsletter_id]" => 0,
     ];
-    $this->drupalPostForm('newsletter/subscriptions', $edit, t('Update'));
-    $this->assertRaw(t('The newsletter subscriptions for %mail have been updated.', ['%mail' => $subscriber_user->getEmail()]));
+    $this->drupalGet('newsletter/subscriptions');
+    $this->submitForm($edit, t('Update'));
+    $this->assertSession()->responseContains(t('The newsletter subscriptions for %mail have been updated.', ['%mail' => $subscriber_user->getEmail()]));

     // 3. Subscribe authenticated via subscription page
     // Subscribe + submit
@@ @@
     $edit = [
       "subscriptions[$newsletter_id]" => '1',
     ];
-    $this->drupalPostForm('newsletter/subscriptions', $edit, t('Update'));
-    $this->assertRaw(t('The newsletter subscriptions for %mail have been updated.', ['%mail' => $subscriber_user->getEmail()]));
-    $this->assertEqual($this->countSubscribers(), 1);
+    $this->drupalGet('newsletter/subscriptions');
+    $this->submitForm($edit, t('Update'));
+    $this->assertSession()->responseContains(t('The newsletter subscriptions for %mail have been updated.', ['%mail' => $subscriber_user->getEmail()]));
+    $this->assertEquals($this->countSubscribers(), 1);

     // 4. Unsubscribe authenticated via account page
     // Unsubscribe + submit
@@ @@
       "subscriptions[$newsletter_id]" => FALSE,
     ];
     $url = 'user/' . $subscriber_user->id() . '/simplenews';
-    $this->drupalPostForm($url, $edit, t('Save'));
-    $this->assertRaw(t('Your newsletter subscriptions have been updated.', ['%mail' => $subscriber_user->getEmail()]));
+    $this->drupalGet($url);
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains(t('Your newsletter subscriptions have been updated.', ['%mail' => $subscriber_user->getEmail()]));

     $subscriber = Subscriber::loadByMail($subscriber_user->getEmail());
     $subscription = $subscriber->getSubscription($newsletter_id);
@@ @@
       "subscriptions[$newsletter_id]" => '1',
     ];
     $url = 'user/' . $subscriber_user->id() . '/simplenews';
-    $this->drupalPostForm($url, $edit, t('Save'));
-    $this->assertRaw(t('Your newsletter subscriptions have been updated.', ['%mail' => $subscriber_user->getEmail()]));
+    $this->drupalGet($url);
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains(t('Your newsletter subscriptions have been updated.', ['%mail' => $subscriber_user->getEmail()]));
     $count = 1;
-    $this->assertEqual($this->countSubscribers(), $count);
+    $this->assertEquals($this->countSubscribers(), $count);

     // Disable the newsletter block.
     $single_block->delete();
@@ @@

     // Check that the user has only access to their own subscriptions page.
     $this->drupalGet('user/' . $subscriber_user->id() . '/simplenews');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $this->drupalGet('user/' . $subscriber_user2->id() . '/simplenews');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

-    $this->assertNoField('mail[0][value]');
-    $this->drupalPostForm(NULL, [], t('Update'));
-    $this->assertText(t('The newsletter subscriptions for @mail have been updated.', ['@mail' => $subscriber_user2->getEmail()]));
+    $this->assertSession()->fieldNotExists('mail[0][value]');
+    $this->submitForm([], t('Update'));
+    $this->assertSession()->pageTextContains(t('The newsletter subscriptions for @mail have been updated.', ['@mail' => $subscriber_user2->getEmail()]));

     // Nothing should have happened to subscriptions but this does create a
     // subscriber.
-    $this->assertNoFieldChecked('edit-subscriptions-' . $newsletter_id);
+    $this->assertSession()->checkboxNotChecked('edit-subscriptions-' . $newsletter_id);
     $count++;
-    $this->assertEqual($this->countSubscribers(), $count);
+    $this->assertEquals($this->countSubscribers(), $count);

     // Now fill out the form and try again.
     $edit = [
       'subscriptions[' . $newsletter_id . ']' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Update'));
-    $this->assertText(t('The newsletter subscriptions for @mail have been updated.', ['@mail' => $subscriber_user2->getEmail()]));
-    $this->assertEqual($this->countSubscribers(), $count);
+    $this->submitForm($edit, t('Update'));
+    $this->assertSession()->pageTextContains(t('The newsletter subscriptions for @mail have been updated.', ['@mail' => $subscriber_user2->getEmail()]));
+    $this->assertEquals($this->countSubscribers(), $count);

-    $this->assertFieldChecked('edit-subscriptions-' . $newsletter_id);
+    $this->assertSession()->checkboxChecked('edit-subscriptions-' . $newsletter_id);

     // Unsubscribe.
     $edit = [
       'subscriptions[' . $newsletter_id . ']' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Update'));
-    $this->assertText(t('The newsletter subscriptions for @mail have been updated.', ['@mail' => $subscriber_user2->getEmail()]));
+    $this->submitForm($edit, t('Update'));
+    $this->assertSession()->pageTextContains(t('The newsletter subscriptions for @mail have been updated.', ['@mail' => $subscriber_user2->getEmail()]));

-    $this->assertNoFieldChecked('edit-subscriptions-' . $newsletter_id);
+    $this->assertSession()->checkboxNotChecked('edit-subscriptions-' . $newsletter_id);

     // And now the same for the newsletter/subscriptions page.
     $subscriber_user3 = $this->drupalCreateUser(['subscribe to newsletters']);
     $this->drupalLogin($subscriber_user3);

-    $this->assertNoField('mail[0][value]');
-    $this->drupalPostForm('newsletter/subscriptions', [], t('Update'));
-    $this->assertText(t('The newsletter subscriptions for @mail have been updated.', ['@mail' => $subscriber_user3->getEmail()]));
+    $this->assertSession()->fieldNotExists('mail[0][value]');
+    $this->drupalGet('newsletter/subscriptions');
+    $this->submitForm([], t('Update'));
+    $this->assertSession()->pageTextContains(t('The newsletter subscriptions for @mail have been updated.', ['@mail' => $subscriber_user3->getEmail()]));

     // Nothing should have happened to subscriptions but this does create a
     // subscriber.
-    $this->assertNoFieldChecked('edit-subscriptions-' . $newsletter_id);
+    $this->assertSession()->checkboxNotChecked('edit-subscriptions-' . $newsletter_id);
     $count++;
-    $this->assertEqual($this->countSubscribers(), $count);
+    $this->assertEquals($this->countSubscribers(), $count);

     // Now fill out the form and try again.
     $edit = [
       'subscriptions[' . $newsletter_id . ']' => TRUE,
     ];
-    $this->drupalPostForm('newsletter/subscriptions', $edit, t('Update'));
-    $this->assertText(t('The newsletter subscriptions for @mail have been updated.', ['@mail' => $subscriber_user3->getEmail()]));
-    $this->assertEqual($this->countSubscribers(), $count);
+    $this->drupalGet('newsletter/subscriptions');
+    $this->submitForm($edit, t('Update'));
+    $this->assertSession()->pageTextContains(t('The newsletter subscriptions for @mail have been updated.', ['@mail' => $subscriber_user3->getEmail()]));
+    $this->assertEquals($this->countSubscribers(), $count);

-    $this->assertFieldChecked('edit-subscriptions-' . $newsletter_id);
+    $this->assertSession()->checkboxChecked('edit-subscriptions-' . $newsletter_id);

     // Unsubscribe.
     $edit = [
       'subscriptions[' . $newsletter_id . ']' => FALSE,
     ];
-    $this->drupalPostForm('newsletter/subscriptions', $edit, t('Update'));
-    $this->assertText(t('The newsletter subscriptions for @mail have been updated.', ['@mail' => $subscriber_user3->getEmail()]));
+    $this->drupalGet('newsletter/subscriptions');
+    $this->submitForm($edit, t('Update'));
+    $this->assertSession()->pageTextContains(t('The newsletter subscriptions for @mail have been updated.', ['@mail' => $subscriber_user3->getEmail()]));

-    $this->assertNoFieldChecked('edit-subscriptions-' . $newsletter_id);
+    $this->assertSession()->checkboxNotChecked('edit-subscriptions-' . $newsletter_id);
   }

   /**
@@ @@
     $this->drupalLogin($admin_user);
     $this->drupalGet('/admin/structure/block/add/simplenews_subscription_block/classy');
     // Check for Unique ID field.
-    $this->assertText('Unique ID');
+    $this->assertSession()->pageTextContains('Unique ID');
     $edit = [
       'settings[unique_id]' => 'test_simplenews_123',
       'settings[newsletters][default]' => TRUE,
       'region' => 'header',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save block'));
+    $this->submitForm($edit, t('Save block'));
     $this->drupalGet('');
     // Provided Unique ID is used as form_id.
     $this->assertFieldByXPath("//*[@id=\"simplenews-subscriptions-block-test-simplenews-123\"]", NULL, 'Form ID found and contains expected value.');
@@ @@
     $newsletter_id = $this->getRandomNewsletter();
     $mail = $this->randomEmail();
     $this->drupalGet('admin/people/simplenews/create');
-    $this->assertText('Add subscriber');
+    $this->assertSession()->pageTextContains('Add subscriber');
     $edit = [
       "subscriptions[$newsletter_id]" => TRUE,
       'mail[0][value]' => $mail,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertText(t('Subscriber @mail has been added.', ['@mail' => $mail]));
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('Subscriber @mail has been added.', ['@mail' => $mail]));

     $subscriber = Subscriber::loadByMail($mail);
     $subscription = $subscriber->getSubscription($newsletter_id);
@@ @@

     $unsubscribe_url = $this->extractConfirmationLink($this->getMail(0));
     $this->drupalGet($unsubscribe_url);
-    $this->assertText('Confirm remove subscription');
-    $this->drupalPostForm(NULL, [], t('Unsubscribe'));
-    $this->assertText('was unsubscribed from the Default newsletter mailing list.');
+    $this->assertSession()->pageTextContains('Confirm remove subscription');
+    $this->submitForm([], t('Unsubscribe'));
+    $this->assertSession()->pageTextContains('was unsubscribed from the Default newsletter mailing list.');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldCheckedRector
 * AssertNoFieldCheckedRector
 * AssertNoFieldRector
 * AssertNoTextRector
 * AssertNotEqualRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * AssertUrlRector
 * PassRector
 * RequestTimeConstRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


20) modules/contrib/simplenews/tests/src/Functional/SimplenewsSourceTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create the filtered_html text format.
@@ @@
     $mail = $mails[0];

     // Assert resulting mail.
-    $this->assertEqual('simplenews_node', $mail['id']);
-    $this->assertEqual('simplenews', $mail['module']);
-    $this->assertEqual('node', $mail['key']);
-    $this->assertEqual($plain_mail->getRecipient(), $mail['to']);
-    $this->assertEqual($plain_mail->getFromAddress(), $mail['from']);
-    $this->assertEqual($plain_mail->getFromFormatted(), $mail['reply-to']);
-    $this->assertEqual($plain_mail->getLanguage(), $mail['langcode']);
+    $this->assertEquals('simplenews_node', $mail['id']);
+    $this->assertEquals('simplenews', $mail['module']);
+    $this->assertEquals('node', $mail['key']);
+    $this->assertEquals($plain_mail->getRecipient(), $mail['to']);
+    $this->assertEquals($plain_mail->getFromAddress(), $mail['from']);
+    $this->assertEquals($plain_mail->getFromFormatted(), $mail['reply-to']);
+    $this->assertEquals($plain_mail->getLanguage(), $mail['langcode']);
     $this->assertTrue($mail['params']['plain']);

     $this->assertFalse(isset($mail['params']['plaintext']));
     $this->assertFalse(isset($mail['params']['attachments']));

-    $this->assertEqual($plain_mail->getSubject(), $mail['subject']);
+    $this->assertEquals($plain_mail->getSubject(), $mail['subject']);
     $this->assertTrue(strpos($mail['body'], 'the plain body') !== FALSE);

     $html_mail = new MailTest('html');
@@ @@
     $mail = $mails[1];

     // Assert resulting mail.
-    $this->assertEqual('simplenews_node', $mail['id']);
-    $this->assertEqual('simplenews', $mail['module']);
-    $this->assertEqual('node', $mail['key']);
-    $this->assertEqual($plain_mail->getRecipient(), $mail['to']);
-    $this->assertEqual($plain_mail->getFromAddress(), $mail['from']);
-    $this->assertEqual($plain_mail->getFromFormatted(), $mail['reply-to']);
-    $this->assertEqual($plain_mail->getLanguage(), $mail['langcode']);
-    $this->assertEqual(NULL, $mail['params']['plain']);
+    $this->assertEquals('simplenews_node', $mail['id']);
+    $this->assertEquals('simplenews', $mail['module']);
+    $this->assertEquals('node', $mail['key']);
+    $this->assertEquals($plain_mail->getRecipient(), $mail['to']);
+    $this->assertEquals($plain_mail->getFromAddress(), $mail['from']);
+    $this->assertEquals($plain_mail->getFromFormatted(), $mail['reply-to']);
+    $this->assertEquals($plain_mail->getLanguage(), $mail['langcode']);
+    $this->assertEquals(NULL, $mail['params']['plain']);

     $this->assertTrue(isset($mail['params']['plaintext']));
     $this->assertTrue(strpos($mail['params']['plaintext'], 'the plain body') !== FALSE);
     $this->assertTrue(isset($mail['params']['attachments']));
-    $this->assertEqual('example://test.png', $mail['params']['attachments'][0]['uri']);
+    $this->assertEquals('example://test.png', $mail['params']['attachments'][0]['uri']);

-    $this->assertEqual($plain_mail->getSubject(), $mail['subject']);
+    $this->assertEquals($plain_mail->getSubject(), $mail['subject']);
     $this->assertTrue(strpos($mail['body'], 'the body') !== FALSE);
   }

@@ @@
       'body[0][value]' => "Mail token: <strong>[simplenews-subscriber:mail]</strong>",
       'simplenews_issue[target_id]' => 'default',
     ];
-    $this->drupalPostForm('node/add/simplenews_issue', $edit, ('Save'));
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->drupalGet('node/add/simplenews_issue');
+    $this->submitForm($edit, ('Save'));
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     // Add node to spool.
@@ @@
     $after = microtime(TRUE);

     // Make sure that 99 mails have been sent.
-    $this->assertEqual(99, count($this->getMails()));
+    $this->assertEquals(99, count($this->getMails()));

     // Test that tokens are correctly replaced.
     foreach (array_slice($this->getMails(), 0, 3) as $mail) {
@@ @@
       $this->assertTrue(strpos($mail['body'], '*' . $mail['to'] . '*') !== FALSE);
       $this->assertFalse(strpos($mail['body'], '<strong>'));
       // Make sure the body is only attached once.
-      $this->assertEqual(1, preg_match_all('/Mail token/', $mail['body'], $matches));
+      $this->assertEquals(1, preg_match_all('/Mail token/', $mail['body'], $matches));

       $this->assertTrue(strpos($mail['body'], (string) t('Unsubscribe from this newsletter')) !== FALSE);
       // Make sure the mail has the correct unsubscribe hash.
@@ @@
       $this->assertTrue(strpos($mail['body'], $hash) !== FALSE, 'Correct hash is used');
       $this->assertTrue(strpos($mail['headers']['List-Unsubscribe'], $hash) !== FALSE, 'Correct hash is used in header');
     }
-
-    // Report time. @todo: Find a way to actually do some assertions here.
-    $this->pass(t('Mails have been sent in @sec seconds with build caching enabled.', ['@sec' => round($after - $before, 3)]));
   }

   /**
@@ @@
       // Request a confirmation receipt.
       'receipt' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit_newsletter, t('Save'));
+    $this->submitForm($edit_newsletter, t('Save'));
     $this->clickLink(t('Edit'));

     $edit = [
@@ @@
       'body[0][value]' => "Mail token: <strong>[simplenews-subscriber:mail]</strong>",
       'simplenews_issue[target_id]' => 'default',
     ];
-    $this->drupalPostForm('node/add/simplenews_issue', $edit, ('Save'));
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->drupalGet('node/add/simplenews_issue');
+    $this->submitForm($edit, ('Save'));
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     // Add node to spool.
@@ @@
     \Drupal::service('simplenews.mailer')->sendSpool();

     // Make sure that 5 mails have been sent.
-    $this->assertEqual(5, count($this->getMails()));
+    $this->assertEquals(5, count($this->getMails()));

     // Test that tokens are correctly replaced.
     foreach (array_slice($this->getMails(), 0, 3) as $mail) {
       // Verify title.
       preg_match('|<h2>(.*)</h2>|', $mail['body'], $matches);
-      $this->assertEqual(Html::decodeEntities($matches[1]), $node->getTitle());
+      $this->assertEquals(Html::decodeEntities($matches[1]), $node->getTitle());

       // Verify the format/content type.
-      $this->assertEqual($mail['params']['format'], 'text/html');
-      $this->assertEqual($mail['params']['plain'], NULL);
-      $this->assertEqual($mail['headers']['Content-Type'], 'text/html; charset=UTF-8');
+      $this->assertEquals($mail['params']['format'], 'text/html');
+      $this->assertEquals($mail['params']['plain'], NULL);
+      $this->assertEquals($mail['headers']['Content-Type'], 'text/html; charset=UTF-8');

       // Make sure that the same mail was used in the body token as it has been
       // sent to.
@@ @@
       $this->assertTrue(strpos($mail['body'], '<strong>' . $mail['to'] . '</strong>') !== FALSE);

       // Make sure the body is only attached once.
-      $this->assertEqual(1, preg_match_all('/Mail token/', $mail['body'], $matches));
+      $this->assertEquals(1, preg_match_all('/Mail token/', $mail['body'], $matches));

       // Check the plaintext version, both params][plaintext (Mime Mail) and
       // plain (Swiftmailer).
       $this->assertTrue(strpos($mail['params']['plaintext'], $mail['to']) !== FALSE);
       $this->assertFalse(strpos($mail['params']['plaintext'], '<strong>'));
-      $this->assertEqual($mail['params']['plaintext'], $mail['plain']);
+      $this->assertEquals($mail['params']['plaintext'], $mail['plain']);
       // Make sure the body is only attached once.
-      $this->assertEqual(1, preg_match_all('/Mail token/', $mail['params']['plaintext'], $matches));
+      $this->assertEquals(1, preg_match_all('/Mail token/', $mail['params']['plaintext'], $matches));

       // Check the attachments and files arrays.
       $this->assertTrue(is_array($mail['params']['attachments']));
-      $this->assertEqual($mail['params']['attachments'], $mail['params']['files']);
+      $this->assertEquals($mail['params']['attachments'], $mail['params']['files']);

       // Make sure formatted address is properly encoded.
       $from = '"' . addslashes(Unicode::mimeHeaderEncode($edit_newsletter['from_name'])) . '" <' . $edit_newsletter['from_address'] . '>';
-      $this->assertEqual($from, $mail['reply-to']);
+      $this->assertEquals($from, $mail['reply-to']);
       // And make sure it won't get encoded twice.
-      $this->assertEqual($from, Unicode::mimeHeaderEncode($mail['reply-to']));
+      $this->assertEquals($from, Unicode::mimeHeaderEncode($mail['reply-to']));

       // @todo: Improve this check, there are currently two spaces, not sure
       // where they are coming from.
@@ @@
       $this->assertTrue(strpos($mail['body'], 'class="newsletter-footer"') !== FALSE);

       // Verify receipt headers.
-      $this->assertEqual($mail['headers']['Disposition-Notification-To'], $edit_newsletter['from_address']);
-      $this->assertEqual($mail['headers']['X-Confirm-Reading-To'], $edit_newsletter['from_address']);
+      $this->assertEquals($mail['headers']['Disposition-Notification-To'], $edit_newsletter['from_address']);
+      $this->assertEquals($mail['headers']['X-Confirm-Reading-To'], $edit_newsletter['from_address']);
     }
   }

@@ @@
       // @todo: This shouldn't be necessary.
       'from_address' => $this->randomEmail(),
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $edit = [
       'title[0][value]' => $this->randomString(10),
@@ @@
       'body[0][value]' => "Mail token: <strong>[simplenews-subscriber:mail]</strong>",
       'simplenews_issue[target_id]' => 'default',
     ];
-    $this->drupalPostForm('node/add/simplenews_issue', $edit, ('Save'));
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->drupalGet('node/add/simplenews_issue');
+    $this->submitForm($edit, ('Save'));
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     // Add node to spool.
@@ @@
     \Drupal::service('simplenews.mailer')->sendSpool();

     // Make sure that 5 mails have been sent.
-    $this->assertEqual(5, count($this->getMails()));
+    $this->assertEquals(5, count($this->getMails()));

     // Test that tokens are correctly replaced.
     foreach (array_slice($this->getMails(), 0, 3) as $mail) {
@@ @@
       'body[0][value]' => "Mail token: <strong>[simplenews-subscriber:mail]</strong>",
       'simplenews_issue[target_id]' => 'default',
     ];
-    $this->drupalPostForm('node/add/simplenews_issue', $edit, ('Save'));
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->drupalGet('node/add/simplenews_issue');
+    $this->submitForm($edit, ('Save'));
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     // Add node to spool.
@@ @@
     $after = microtime(TRUE);

     // Make sure that 100 mails have been sent.
-    $this->assertEqual(100, count($this->getMails()));
+    $this->assertEquals(100, count($this->getMails()));

     // Test that tokens are correctly replaced.
     foreach (array_slice($this->getMails(), 0, 3) as $mail) {
@@ @@
       $this->assertTrue(strpos($mail['body'], '*' . $mail['to'] . '*') !== FALSE);
       $this->assertFalse(strpos($mail['body'], '<strong>'));
       // Make sure the body is only attached once.
-      $this->assertEqual(1, preg_match_all('/Mail token/', $mail['body'], $matches));
+      $this->assertEquals(1, preg_match_all('/Mail token/', $mail['body'], $matches));
     }
-
-    // Report time. @todo: Find a way to actually do some assertions here.
-    $this->pass(t('Mails have been sent in @sec seconds with caching disabled.', ['@sec' => round($after - $before, 3)]));
   }

   /**
@@ @@
       'body[0][value]' => "Mail token: <strong>[simplenews-subscriber:mail]</strong>",
       'simplenews_issue[target_id]' => 'default',
     ];
-    $this->drupalPostForm('node/add/simplenews_issue', $edit, ('Save'));
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->drupalGet('node/add/simplenews_issue');
+    $this->submitForm($edit, ('Save'));
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     // Add node to spool.
@@ @@
     \Drupal::service('simplenews.mailer')->sendSpool();

     // Make sure that no mails have been sent.
-    $this->assertEqual(0, count($this->getMails()));
+    $this->assertEquals(0, count($this->getMails()));

     $spool_row = \Drupal::database()->query('SELECT * FROM {simplenews_mail_spool}')->fetchObject();
-    $this->assertEqual(SpoolStorageInterface::STATUS_SKIPPED, $spool_row->status);
+    $this->assertEquals(SpoolStorageInterface::STATUS_SKIPPED, $spool_row->status);
   }

   /**
@@ @@
       'body[0][value]' => "Mail token: <strong>[simplenews-subscriber:mail]</strong>",
       'simplenews_issue[target_id]' => 'default',
     ];
-    $this->drupalPostForm('node/add/simplenews_issue', $edit, ('Save'));
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->drupalGet('node/add/simplenews_issue');
+    $this->submitForm($edit, ('Save'));
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     // Add node to spool.
@@ @@
     \Drupal::service('simplenews.mailer')->sendSpool();

     // Make sure that no mails have been sent.
-    $this->assertEqual(0, count($this->getMails()));
+    $this->assertEquals(0, count($this->getMails()));

     $spool_row = \Drupal::database()->query('SELECT * FROM {simplenews_mail_spool}')->fetchObject();
-    $this->assertEqual(SpoolStorageInterface::STATUS_SKIPPED, $spool_row->status);
+    $this->assertEquals(SpoolStorageInterface::STATUS_SKIPPED, $spool_row->status);
   }

   /**
@@ @@
     ]);
     \Drupal::service('simplenews.spool_storage')->addIssue($node);
     \Drupal::service('simplenews.mailer')->sendSpool();
-    $this->assertEqual(0, count($this->getMails()));
+    $this->assertEquals(0, count($this->getMails()));
     $spool_row = \Drupal::database()->select('simplenews_mail_spool', 'ms')
       ->fields('ms', ['status'])
       ->execute()
       ->fetchAssoc();
-    $this->assertEqual(SpoolStorageInterface::STATUS_SKIPPED, $spool_row['status']);
+    $this->assertEquals(SpoolStorageInterface::STATUS_SKIPPED, $spool_row['status']);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * PassRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/simplenews/tests/src/Functional/SimplenewsSendTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $admin_user = $this->drupalCreateUser([
@@ @@

     // Verify mails.
     $mails = $this->getMails();
-    $this->assertEqual(5, count($mails), t('All mails were sent.'));
+    $this->assertEquals(5, count($mails), t('All mails were sent.'));
     foreach ($mails as $mail) {
-      $this->assertEqual($mail['subject'], '[Default newsletter] ' . $node->getTitle(), t('Mail has correct subject'));
+      $this->assertEquals($mail['subject'], '[Default newsletter] ' . $node->getTitle(), t('Mail has correct subject'));
       $this->assertTrue(isset($this->subscribers[$mail['to']]), t('Found valid recipient'));
       unset($this->subscribers[$mail['to']]);
     }
-    $this->assertEqual(0, count($this->subscribers), t('all subscribers have been received a mail'));
+    $this->assertEquals(0, count($this->subscribers), t('all subscribers have been received a mail'));

     // Create another node.
     $node = Node::create([
@@ @@
     \Drupal::service('simplenews.spool_storage')->addIssue($node);

     // Make sure that they have been added.
-    $this->assertEqual(\Drupal::service('simplenews.spool_storage')->countMails(), 5);
+    $this->assertEquals(\Drupal::service('simplenews.spool_storage')->countMails(), 5);

     // Mark them as 'in progress', fake a currently running send process.
-    $this->assertEqual(count(\Drupal::service('simplenews.spool_storage')->getMails(2)), 2);
+    $this->assertEquals(count(\Drupal::service('simplenews.spool_storage')->getMails(2)), 2);

     // Those two should be excluded if we get mails a second time.
-    $this->assertEqual(count(\Drupal::service('simplenews.spool_storage')->getMails()), 3);
+    $this->assertEquals(count(\Drupal::service('simplenews.spool_storage')->getMails()), 3);

     // The count should still include all the mails because they are still
     // in the spool.  This is needed for correct operation of code such as
     // Mailer::updateSendStatus().
-    $this->assertEqual(\Drupal::service('simplenews.spool_storage')->countMails(), 5);
+    $this->assertEquals(\Drupal::service('simplenews.spool_storage')->countMails(), 5);
   }

   /**
@@ @@

     // Verify that the newsletter settings are shown.
     $this->drupalGet('node/add/simplenews_issue');
-    $this->assertText(t('Create Newsletter Issue'));
+    $this->assertSession()->pageTextContains(t('Create Newsletter Issue'));

     $edit = [
       'title[0][value]' => $this->randomString(10),
       'simplenews_issue[target_id]' => 'default',
     ];
-    $this->drupalPostForm(NULL, $edit, ('Save'));
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->submitForm($edit, ('Save'));
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     $this->clickLink(t('Newsletter'));
-    $this->assertText(t('Send'));
-    $this->assertText(t('Test'));
-    $this->assertNoText(t('Send newsletter when published'));
+    $this->assertSession()->pageTextContains(t('Send'));
+    $this->assertSession()->pageTextContains(t('Test'));
+    $this->assertSession()->pageTextNotContains(t('Send newsletter when published'));

     // Verify state.
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));

     // Send now.
-    $this->drupalPostForm(NULL, [], t('Send now'));
+    $this->submitForm([], t('Send now'));

     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished'));

     // Verify mails.
     $mails = $this->getMails();
-    $this->assertEqual(5, count($mails), t('All mails were sent.'));
+    $this->assertEquals(5, count($mails), t('All mails were sent.'));
     foreach ($mails as $mail) {
-      $this->assertEqual($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
+      $this->assertEquals($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
       $this->assertTrue(isset($this->subscribers[$mail['to']]), t('Found valid recipient'));
       unset($this->subscribers[$mail['to']]);
     }
-    $this->assertEqual(0, count($this->subscribers), t('all subscribers have been received a mail'));
+    $this->assertEquals(0, count($this->subscribers), t('all subscribers have been received a mail'));

-    $this->assertEqual(5, $node->simplenews_issue->sent_count, 'subscriber count is correct');
+    $this->assertEquals(5, $node->simplenews_issue->sent_count, 'subscriber count is correct');
   }

   /**
@@ @@
     $nodes = [];
     for ($i = 0; $i < 3; $i++) {
       $this->drupalGet('node/add/simplenews_issue');
-      $this->assertText(t('Create Newsletter Issue'));
+      $this->assertSession()->pageTextContains(t('Create Newsletter Issue'));

       $edit = [
         'title[0][value]' => $this->randomString(10),
@@ @@
         // The last newsletter shouldn't be published.
         'status[value]' => $i != 2,
       ];
-      $this->drupalPostForm(NULL, $edit, ('Save'));
-      $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+      $this->submitForm($edit, ('Save'));
+      $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
       $nodes[] = Node::load($matches[1]);

       // Verify state.
       $node = current($nodes);
-      $this->assertEqual(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));
+      $this->assertEquals(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));
     }
   }

@@ @@

     // Verify that the newsletter settings are shown.
     $this->drupalGet('node/add/simplenews_issue');
-    $this->assertText(t('Create Newsletter Issue'));
+    $this->assertSession()->pageTextContains(t('Create Newsletter Issue'));

     $edit = [
       'title[0][value]' => $this->randomString(10),
       'simplenews_issue[target_id]' => 'default',
     ];
-    $this->drupalPostForm(NULL, $edit, ('Save'));
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->submitForm($edit, ('Save'));
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     $this->clickLink(t('Newsletter'));
-    $this->assertText(t('Send'));
-    $this->assertText(t('Test'));
+    $this->assertSession()->pageTextContains(t('Send'));
+    $this->assertSession()->pageTextContains(t('Test'));

     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));

     // Send now.
-    $this->drupalPostForm(NULL, [], t('Send now'));
+    $this->submitForm([], t('Send now'));

     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews_issue->status, t('Newsletter sending pending.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews_issue->status, t('Newsletter sending pending.'));

     // Verify that no mails have been sent yet.
     $mails = $this->getMails();
-    $this->assertEqual(0, count($mails), t('No mails were sent yet.'));
+    $this->assertEquals(0, count($mails), t('No mails were sent yet.'));

     $spooled = \Drupal::database()->query('SELECT COUNT(*) FROM {simplenews_mail_spool} WHERE entity_id = :nid AND entity_type = :type', [':nid' => $node->id(), ':type' => 'node'])->fetchField();
-    $this->assertEqual(5, $spooled, t('5 mails have been added to the mail spool'));
+    $this->assertEquals(5, $spooled, t('5 mails have been added to the mail spool'));

     // Run cron for the first time.
     simplenews_cron();
@@ @@
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews_issue->status, t('Newsletter sending pending.'));
-    $this->assertEqual(3, $node->simplenews_issue->sent_count, 'subscriber count is correct');
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews_issue->status, t('Newsletter sending pending.'));
+    $this->assertEquals(3, $node->simplenews_issue->sent_count, 'subscriber count is correct');

     $spooled = \Drupal::database()->query('SELECT COUNT(*) FROM {simplenews_mail_spool} WHERE entity_id = :nid AND entity_type = :type', [':nid' => $node->id(), ':type' => 'node'])->fetchField();
-    $this->assertEqual(2, $spooled, t('2 mails remaining in spool.'));
+    $this->assertEquals(2, $spooled, t('2 mails remaining in spool.'));

     // Run cron for the second time.
     simplenews_cron();
@@ @@
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished.'));

     $spooled = \Drupal::database()->query('SELECT COUNT(*) FROM {simplenews_mail_spool} WHERE entity_id = :nid AND entity_type = :type', [':nid' => $node->id(), ':type' => 'node'])->fetchField();
-    $this->assertEqual(0, $spooled, t('No mails remaining in spool.'));
+    $this->assertEquals(0, $spooled, t('No mails remaining in spool.'));

     // Verify mails.
     $mails = $this->getMails();
-    $this->assertEqual(5, count($mails), t('All mails were sent.'));
+    $this->assertEquals(5, count($mails), t('All mails were sent.'));
     foreach ($mails as $mail) {
-      $this->assertEqual($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
+      $this->assertEquals($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
       $this->assertTrue(isset($this->subscribers[$mail['to']]), t('Found valid recipient'));
       unset($this->subscribers[$mail['to']]);
     }
-    $this->assertEqual(0, count($this->subscribers), t('all subscribers have been received a mail'));
-    $this->assertEqual(5, $node->simplenews_issue->sent_count);
+    $this->assertEquals(0, count($this->subscribers), t('all subscribers have been received a mail'));
+    $this->assertEquals(5, $node->simplenews_issue->sent_count);
   }

   /**
@@ @@

     // Verify that the newsletter settings are shown.
     $this->drupalGet('node/add/simplenews_issue');
-    $this->assertText(t('Create Newsletter Issue'));
+    $this->assertSession()->pageTextContains(t('Create Newsletter Issue'));

     $edit = [
       'title[0][value]' => $this->randomString(10),
@@ @@
       'simplenews_issue[target_id]' => 'default',
     ];
     // Try preview first.
-    $this->drupalPostForm(NULL, $edit, t('Preview'));
+    $this->submitForm($edit, t('Preview'));

     $this->clickLink(t('Back to content editing'));

     // Then save.
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));

-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     $this->clickLink(t('Newsletter'));
-    $this->assertText(t('Send'));
-    $this->assertText(t('Test'));
+    $this->assertSession()->pageTextContains(t('Send'));
+    $this->assertSession()->pageTextContains(t('Test'));

     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));

     // Send now.
-    $this->drupalPostForm(NULL, [], t('Send now'));
+    $this->submitForm([], t('Send now'));

     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews_issue->status, t('Newsletter sending pending.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews_issue->status, t('Newsletter sending pending.'));

     // Verify that no mails have been sent yet.
     $mails = $this->getMails();
-    $this->assertEqual(0, count($mails), t('No mails were sent yet.'));
+    $this->assertEquals(0, count($mails), t('No mails were sent yet.'));

     $spooled = \Drupal::database()->query('SELECT COUNT(*) FROM {simplenews_mail_spool} WHERE entity_id = :nid AND entity_type = :type', [':nid' => $node->id(), ':type' => 'node'])->fetchField();
-    $this->assertEqual(5, $spooled, t('5 mails have been added to the mail spool'));
+    $this->assertEquals(5, $spooled, t('5 mails have been added to the mail spool'));

     // Check warning message on node edit form.
     $this->clickLink(t('Edit'));
-    $this->assertText(t('This newsletter issue is currently being sent. Any changes will be reflected in the e-mails which have not been sent yet.'));
+    $this->assertSession()->pageTextContains(t('This newsletter issue is currently being sent. Any changes will be reflected in the e-mails which have not been sent yet.'));

     // Run cron.
     simplenews_cron();
@@ @@
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished.'));

     $spooled = \Drupal::database()->query('SELECT COUNT(*) FROM {simplenews_mail_spool} WHERE entity_id = :nid AND entity_type = :type', [':nid' => $node->id(), ':type' => 'node'])->fetchField();
-    $this->assertEqual(0, $spooled, t('No mails remaining in spool.'));
+    $this->assertEquals(0, $spooled, t('No mails remaining in spool.'));

     // Verify mails.
     $mails = $this->getMails();
-    $this->assertEqual(5, count($mails), t('All mails were sent.'));
+    $this->assertEquals(5, count($mails), t('All mails were sent.'));
     foreach ($mails as $mail) {
       // @todo Temporarily strip tags from mail subjects until
       //   https://www.drupal.org/node/2575791 is fixed.
-      $this->assertEqual($mail['subject'], '[Default newsletter] ' . strip_tags($edit['title[0][value]']), t('Mail has correct subject'));
+      $this->assertEquals($mail['subject'], '[Default newsletter] ' . strip_tags($edit['title[0][value]']), t('Mail has correct subject'));
       $this->assertTrue(isset($this->subscribers[$mail['to']]), t('Found valid recipient'));
       unset($this->subscribers[$mail['to']]);
     }
-    $this->assertEqual(0, count($this->subscribers), t('all subscribers have been received a mail'));
+    $this->assertEquals(0, count($this->subscribers), t('all subscribers have been received a mail'));
   }

   /**
@@ @@

     // Verify that the newsletter settings are shown.
     $this->drupalGet('node/add/simplenews_issue');
-    $this->assertText(t('Create Newsletter Issue'));
+    $this->assertSession()->pageTextContains(t('Create Newsletter Issue'));

     $edit = [
       'title[0][value]' => $this->randomString(10),
@@ @@
       'simplenews_issue[target_id]' => 'default',
       'status[value]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, ('Save'));
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->submitForm($edit, ('Save'));
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     $this->clickLink(t('Newsletter'));
-    $this->assertText(t('Send'));
-    $this->assertText(t('Test'));
+    $this->assertSession()->pageTextContains(t('Send'));
+    $this->assertSession()->pageTextContains(t('Test'));

     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));

     // Send now.
-    $this->drupalPostForm(NULL, [], t('Send on publish'));
+    $this->submitForm([], t('Send on publish'));

     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache([$node->id()]);
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_PUBLISH, $node->simplenews_issue->status, t('Newsletter set up for sending on publish.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_PUBLISH, $node->simplenews_issue->status, t('Newsletter set up for sending on publish.'));

     $this->clickLink(t('Edit'));
-    $this->drupalPostForm(NULL, ['status[value]' => TRUE], t('Save'));
+    $this->submitForm(['status[value]' => TRUE], t('Save'));

     // Send on publish does not send immediately.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache([$node->id()]);
@@ @@
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache([$node->id()]);
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished'));
     // @todo test sent subscriber count.
     // Verify mails.
     $mails = $this->getMails();
-    $this->assertEqual(5, count($mails), t('All mails were sent.'));
+    $this->assertEquals(5, count($mails), t('All mails were sent.'));
     foreach ($mails as $mail) {
-      $this->assertEqual($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
+      $this->assertEquals($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
       $this->assertTrue(isset($this->subscribers[$mail['to']]), t('Found valid recipient'));
       unset($this->subscribers[$mail['to']]);
     }
-    $this->assertEqual(0, count($this->subscribers), t('all subscribers have been received a mail'));
+    $this->assertEquals(0, count($this->subscribers), t('all subscribers have been received a mail'));
   }

   /**
@@ @@
       'id' => strtolower($this->randomMachineName(10)),
       'description' => $this->randomString(20),
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertText(t('Newsletter @name has been added', ['@name' => $edit['name']]));
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('Newsletter @name has been added', ['@name' => $edit['name']]));

     $this->drupalGet('node/add/simplenews_issue');
-    $this->assertText(t('Create Newsletter Issue'));
+    $this->assertSession()->pageTextContains(t('Create Newsletter Issue'));

     $first_newsletter_id = $this->getRandomNewsletter();

@@ @@
       'title[0][value]' => $this->randomString(10),
       'simplenews_issue[target_id]' => $first_newsletter_id,
     ];
-    $this->drupalPostForm(NULL, $edit, ('Save'));
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created.');
+    $this->submitForm($edit, ('Save'));
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created.');

     // Verify newsletter.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($matches[1]);
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter sending not started.'));
-    $this->assertEqual($first_newsletter_id, $node->simplenews_issue->target_id);
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter sending not started.'));
+    $this->assertEquals($first_newsletter_id, $node->simplenews_issue->target_id);

     do {
       $second_newsletter_id = $this->getRandomNewsletter();
@@ @@
     $update = [
       'simplenews_issue[target_id]' => $second_newsletter_id,
     ];
-    $this->drupalPostForm(NULL, $update, t('Save'));
+    $this->submitForm($update, t('Save'));

     // Verify newsletter.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter sending not started.'));
-    $this->assertEqual($second_newsletter_id, $node->simplenews_issue->target_id, t('Newsletter has newsletter_id @id.', ['@id' => $second_newsletter_id]));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter sending not started.'));
+    $this->assertEquals($second_newsletter_id, $node->simplenews_issue->target_id, t('Newsletter has newsletter_id @id.', ['@id' => $second_newsletter_id]));
   }

   /**
@@ @@
     simplenews_cron();

     // Check there is no error message.
-    $this->assertEqual(count(\Drupal::messenger()->messagesByType(MessengerInterface::TYPE_ERROR)), 0, t('No error messages printed'));
+    $this->assertEquals(count(\Drupal::messenger()->messagesByType(MessengerInterface::TYPE_ERROR)), 0, t('No error messages printed'));

     // Check the status on the newsletter tab.  The pending mail should be
     // retried
     $this->drupalGet('node/1/simplenews');
-    $this->assertText('Newsletter issue is pending, 0 mails sent out of 5, 1 errors.');
+    $this->assertSession()->pageTextContains('Newsletter issue is pending, 0 mails sent out of 5, 1 errors.');

     // Allow one mail to succeed, and the pending mail should be treated as an
     // error.
@@ @@
     $this->container->get('state')->set('simplenews.test_result_alter', $results_alter);
     simplenews_cron();
     $this->drupalGet('node/1/simplenews');
-    $this->assertText('Newsletter issue sent to 2 subscribers, 3 errors.');
+    $this->assertSession()->pageTextContains('Newsletter issue sent to 2 subscribers, 3 errors.');
   }

   /**
@@ @@
   public function testDelete() {
     // Verify that the newsletter settings are shown.
     $this->drupalGet('node/add/simplenews_issue');
-    $this->assertText(t('Create Newsletter Issue'));
+    $this->assertSession()->pageTextContains(t('Create Newsletter Issue'));

     // Prevent deleting the mail spool entries automatically.
     $config = $this->config('simplenews.settings');
@@ @@
       'title[0][value]' => $this->randomString(10),
       'simplenews_issue[target_id]' => 'default',
     ];
-    $this->drupalPostForm(NULL, $edit, ('Save'));
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->submitForm($edit, ('Save'));
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     $this->clickLink(t('Newsletter'));
-    $this->assertText(t('Send'));
-    $this->assertText(t('Test'));
+    $this->assertSession()->pageTextContains(t('Send'));
+    $this->assertSession()->pageTextContains(t('Test'));

     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));

     // Send now.
-    $this->drupalPostForm(NULL, [], t('Send now'));
+    $this->submitForm([], t('Send now'));

     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews_issue->status, t('Newsletter sending pending.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews_issue->status, t('Newsletter sending pending.'));

     $spooled = \Drupal::database()->query('SELECT COUNT(*) FROM {simplenews_mail_spool} WHERE entity_id = :nid AND entity_type = :type', [':nid' => $node->id(), ':type' => 'node'])->fetchField();
-    $this->assertEqual(5, $spooled, t('5 mails remaining in spool.'));
+    $this->assertEquals(5, $spooled, t('5 mails remaining in spool.'));

     // Verify that deleting isn't possible right now.
     $this->clickLink(t('Edit'));
-    $this->assertNoText(t('Delete'));
+    $this->assertSession()->pageTextNotContains(t('Delete'));

     // Send mails.
     simplenews_cron();
@@ @@
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished'));

     $spooled = \Drupal::database()->query('SELECT COUNT(*) FROM {simplenews_mail_spool} WHERE entity_id = :nid AND entity_type = :type', [':nid' => $node->id(), ':type' => 'node'])->fetchField();
-    $this->assertEqual(5, $spooled, t('Mails are kept in simplenews_mail_spool after being sent.'));
+    $this->assertEquals(5, $spooled, t('Mails are kept in simplenews_mail_spool after being sent.'));

     // Verify mails.
     $mails = $this->getMails();
-    $this->assertEqual(5, count($mails), t('All mails were sent.'));
+    $this->assertEquals(5, count($mails), t('All mails were sent.'));
     foreach ($mails as $mail) {
-      $this->assertEqual($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
+      $this->assertEquals($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
       $this->assertTrue(isset($this->subscribers[$mail['to']]), t('Found valid recipient'));
       unset($this->subscribers[$mail['to']]);
     }
-    $this->assertEqual(0, count($this->subscribers), t('all subscribers have received a mail'));
+    $this->assertEquals(0, count($this->subscribers), t('all subscribers have received a mail'));

     // Update timestamp to simulate pending lock expiration.
     \Drupal::database()->update('simplenews_mail_spool')
       ->fields([
-        'timestamp' => REQUEST_TIME - $this->config('simplenews.settings')->get('mail.spool_progress_expiration') - 1,
+        'timestamp' => \Drupal::time()->getRequestTime() - $this->config('simplenews.settings')->get('mail.spool_progress_expiration') - 1,
       ])
       ->execute();

@@ @@
     simplenews_cron();
     \Drupal::service('simplenews.spool_storage')->getMails();
     $mails = $this->getMails();
-    $this->assertEqual(5, count($mails), t('No additional mails have been sent.'));
+    $this->assertEquals(5, count($mails), t('No additional mails have been sent.'));

     // Now delete.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $this->drupalGet($node->toUrl('edit-form'));
     $this->clickLink(t('Delete'));
-    $this->drupalPostForm(NULL, [], t('Delete'));
+    $this->submitForm([], t('Delete'));

     // Verify.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $this->assertEmpty(Node::load($node->id()));
     $spooled = \Drupal::database()->query('SELECT COUNT(*) FROM {simplenews_mail_spool} WHERE entity_id = :nid AND entity_type = :type', [':nid' => $node->id(), ':type' => 'node'])->fetchField();
-    $this->assertEqual(0, $spooled, t('No mails remaining in spool.'));
+    $this->assertEquals(0, $spooled, t('No mails remaining in spool.'));
   }

   /**
@@ @@
         }
       }
     }
-    $this->assertEqual(3, $mails_with_users, '3 mails with user ids found');
-    $this->assertEqual(2, $mails_without_users, '2 mails with no user ids found');
+    $this->assertEquals(3, $mails_with_users, '3 mails with user ids found');
+    $this->assertEquals(2, $mails_without_users, '2 mails with no user ids found');
   }

   /**
@@ @@

     // Check if the correct theme was used in mails.
     $this->assertTrue(strpos($mails[0]['body'], 'Simplenews test theme') != FALSE);
-    $this->assertEqual(1, preg_match('/ID: [0-9]/', $mails[0]['body']), 'Mail contains the subscriber ID');
+    $this->assertEquals(1, preg_match('/ID: [0-9]/', $mails[0]['body']), 'Mail contains the subscriber ID');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNoTextRector
 * AssertTextRector
 * RequestTimeConstRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/simplenews/tests/src/Functional/SimplenewsRecipientHandlerTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // We install the demo module to get the recipient handlers. It creates
@@ @@
   public function testSiteMail() {
     // Verify that the recipient handler settings are shown.
     $this->drupalGet('node/add/simplenews_issue');
-    $this->assertText(t('Recipients'));
-    $this->assertText(t('How recipients should be selected.'));
+    $this->assertSession()->pageTextContains(t('Recipients'));
+    $this->assertSession()->pageTextContains(t('How recipients should be selected.'));

     $edit = [
       'title[0][value]' => $this->randomString(10),
@@ @@
       'simplenews_issue[target_id]' => 'default',
       'simplenews_issue[handler]' => 'simplenews_site_mail',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->clickLink(t('Newsletter'));
-    $this->assertText(t('Send newsletter issue to 1 subscribers.'));
-    $this->drupalPostForm(NULL, [], t('Send now'));
+    $this->assertSession()->pageTextContains(t('Send newsletter issue to 1 subscribers.'));
+    $this->submitForm([], t('Send now'));
     $this->checkRecipients(['simpletest@example.com' => 1]);
   }

@@ @@
       'simplenews_issue[target_id]' => 'default',
       'simplenews_issue[handler]' => 'simplenews_new_users',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->clickLink(t('Newsletter'));
-    $this->assertText(t('Send newsletter issue to 3 subscribers.'));
-    $this->drupalPostForm(NULL, [], t('Send now'));
+    $this->assertSession()->pageTextContains(t('Send newsletter issue to 3 subscribers.'));
+    $this->submitForm([], t('Send now'));
     $this->checkRecipients(array_slice($users, 0, 3));
   }

@@ @@
       'simplenews_issue[target_id]' => 'default',
       'simplenews_issue[handler]' => 'simplenews_subscribers_by_role',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Edit and set the role.
     $this->clickLink(t('Edit'));
-    $this->assertText(t('Role'));
+    $this->assertSession()->pageTextContains(t('Role'));
     $edit = [
       'simplenews_issue[handler_settings][role]' => $rid,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->clickLink(t('Newsletter'));
-    $this->assertText(t('Send newsletter issue to 2 subscribers.'));
-    $this->drupalPostForm(NULL, [], t('Send now'));
+    $this->assertSession()->pageTextContains(t('Send newsletter issue to 2 subscribers.'));
+    $this->submitForm([], t('Send now'));
     $this->checkRecipients($recipients);
   }

@@ @@
   protected function checkRecipients(array $expected) {
     simplenews_cron();
     $mails = $this->getMails();
-    $this->assertEqual(count($expected), count($mails), t('All mails were sent.'));
+    $this->assertEquals(count($expected), count($mails), t('All mails were sent.'));
     foreach ($mails as $mail) {
       $this->assertTrue(isset($expected[$mail['to']]), t('Found valid recipient @recip', ['@recip' => $mail['to']]));
       unset($expected[$mail['to']]);
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/simplenews/tests/src/Functional/SimplenewsPersonalizationFormsTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->addField('string', 'field_shared', 'user');
     $this->addField('string', 'field_shared', 'simplenews_subscriber');
@@ @@

     // Assert fields are updated.
     $this->drupalGet("user/$uid");
-    $this->assertText(Html::escape($new_value));
+    $this->assertSession()->pageTextContains(Html::escape($new_value));

     // Assert subscription remains unconfirmed.
     $subscriber = $this->getLatestSubscriber();
-    $this->assertEqual($subscriber->subscriptions->get(0)->status, SIMPLENEWS_SUBSCRIPTION_STATUS_UNCONFIRMED);
+    $this->assertEquals($subscriber->subscriptions->get(0)->status, SIMPLENEWS_SUBSCRIPTION_STATUS_UNCONFIRMED);
   }

   /**
@@ @@

     // Attempt subscribe and assert login message.
     $this->subscribe('default', $email);
-    $this->assertRaw(t('There is an account registered for the e-mail address %mail. Please log in to manage your newsletter subscriptions', ['%mail' => $email]));
+    $this->assertSession()->responseContains(t('There is an account registered for the e-mail address %mail. Please log in to manage your newsletter subscriptions', ['%mail' => $email]));

     // Login.
     $this->resetPassLogin($user);
@@ @@

     // Assert fields are updated.
     $this->drupalGet("user/$uid");
-    $this->assertText(Html::escape($new_value));
+    $this->assertSession()->pageTextContains(Html::escape($new_value));
   }

   /**
@@ @@

     // Subscribe.
     $this->subscribe('default', $email);
+    $this->drupalGet('user/password');

     // Request new password.
-    $this->drupalPostForm('user/password', [
+    $this->submitForm([
       'name' => $email,
     ], t('Submit'));

     // Assert the email is not recognized as an account.
-    $this->assertRaw(t('%name is not recognized as a username or an email address.', ['%name' => $email]));
+    $this->assertSession()->responseContains(t('%name is not recognized as a username or an email address.', ['%name' => $email]));
   }

   /**
@@ @@

     // Disable account.
     $this->drupalLogin($this->admin);
-    $this->drupalPostForm("user/$uid/cancel", [], t('Cancel account'));
+    $this->drupalGet("user/$uid/cancel");
+    $this->submitForm([], t('Cancel account'));

     // Assert subscriber is inactive.
     $subscriber = $this->getLatestSubscriber();
@@ @@

     // Delete account.
     $this->drupalLogin($this->admin);
-    $this->drupalPostForm("user/$uid/cancel", ['user_cancel_method' => 'user_cancel_reassign'], t('Cancel account'));
+    $this->drupalGet("user/$uid/cancel");
+    $this->submitForm(['user_cancel_method' => 'user_cancel_reassign'], t('Cancel account'));

     // Assert subscriptions are deleted.
     $subscriber = $this->getLatestSubscriber();
@@ @@

     // Block account.
     $this->drupalLogin($this->admin);
-    $this->drupalPostForm("user/$uid/edit", ['status' => 0], t('Save'));
+    $this->drupalGet("user/$uid/edit");
+    $this->submitForm(['status' => 0], t('Save'));
     $this->drupalLogout();

     // Attempt subscribe and assert "blocked" message.
     $this->subscribe('default', $email);
-    $this->assertRaw(t('The email address %mail belongs to a blocked user.', ['%mail' => $email]));
+    $this->assertSession()->responseContains(t('The email address %mail belongs to a blocked user.', ['%mail' => $email]));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/simplenews/tests/src/Functional/SimplenewsI18nTest.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser([
       'bypass node access', 'administer nodes', 'administer languages', 'administer content types', 'access administration pages', 'administer filters', 'translate interface', 'subscribe to newsletters', 'administer site configuration', 'translate any entity', 'administer content translation', 'administer simplenews subscriptions', 'send newsletter', 'create content translations',
@@ @@
     $edit = [
       'language_configuration[content_translation]' => TRUE,
     ];
-    $this->drupalPostForm('admin/structure/types/manage/simplenews_issue', $edit, t('Save content type'));
+    $this->drupalGet('admin/structure/types/manage/simplenews_issue');
+    $this->submitForm($edit, t('Save content type'));

     // Create a Newsletter including a translation.
     $newsletter_id = $this->getRandomNewsletter();
@@ @@
       'simplenews_issue[target_id]' => $newsletter_id,
       'body[0][value]' => 'Link to node: [node:url]',
     ];
-    $this->drupalPostForm('node/add/simplenews_issue', $english, ('Save'));
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->drupalGet('node/add/simplenews_issue');
+    $this->submitForm($english, ('Save'));
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     $this->clickLink(t('Translate'));
@@ @@
       'title[0][value]' => $this->randomMachineName(),
       'body[0][value]' => 'Link to node: [node:url] ES',
     ];
-    $this->drupalPostForm(NULL, $spanish, t('Save (this translation)'));
+    $this->submitForm($spanish, t('Save (this translation)'));

     \Drupal::entityTypeManager()->getStorage('node')->resetCache([$node->id()]);
     $node = Node::load($node->id());
@@ @@

     // Send newsletter.
     $this->clickLink(t('Newsletter'));
-    $this->drupalPostForm(NULL, [], t('Send now'));
+    $this->submitForm([], t('Send now'));
     $this->cronRun();
     // @codingStandardsIgnoreLine
     //simplenews_cron();

-    $this->assertEqual(3, count($this->getMails()));
+    $this->assertEquals(3, count($this->getMails()));

     $newsletter = Newsletter::load($newsletter_id);
     foreach ($this->getMails() as $mail) {

       if ($mail['to'] == $english_mail) {
-        $this->assertEqual('en', $mail['langcode']);
-        $this->assertEqual('[' . $newsletter->label() . '] ' . $node->getTitle(), $mail['subject']);
+        $this->assertEquals('en', $mail['langcode']);
+        $this->assertEquals('[' . $newsletter->label() . '] ' . $node->getTitle(), $mail['subject']);
         $node_url = $node->toUrl('canonical', ['absolute' => TRUE])->toString();
         $title = $node->getTitle();
       }
       elseif ($mail['to'] == $spanish_mail || $mail['to'] == $spanish_mail2) {
-        $this->assertEqual('es', $mail['langcode']);
+        $this->assertEquals('es', $mail['langcode']);
         // @todo: Verify newsletter translation once supported again.
-        $this->assertEqual('[' . $newsletter->name . '] ' . $translation->label(), $mail['subject']);
+        $this->assertEquals('[' . $newsletter->name . '] ' . $translation->label(), $mail['subject']);
         $node_url = $translation->toUrl('canonical', ['absolute' => TRUE, 'language' => $translation->language()])->toString();
         $title = $translation->getTitle();
       }
@@ @@
     \Drupal::entityTypeManager()->getStorage('node')->resetCache([$node->id()]);
     $node = Node::load($node->id());
     $translation = $node->getTranslation($this->secondaryLanguage);
-    $this->assertEqual(1, $node->simplenews_issue->sent_count, 'subscriber count is correct for english');
-    $this->assertEqual(2, $translation->simplenews_issue->sent_count, 'subscriber count is correct for spanish');
+    $this->assertEquals(1, $node->simplenews_issue->sent_count, 'subscriber count is correct for english');
+    $this->assertEquals(2, $translation->simplenews_issue->sent_count, 'subscriber count is correct for spanish');

     // Make sure the language of a node can be changed.
     $english = [
@@ @@
       'langcode[0][value]' => 'en',
       'body[0][value]' => 'Link to node: [node:url]',
     ];
-    $this->drupalPostForm('node/add/simplenews_issue', $english, ('Save'));
+    $this->drupalGet('node/add/simplenews_issue');
+    $this->submitForm($english, ('Save'));
     $this->clickLink(t('Edit'));
     $edit = [
       'langcode[0][value]' => 'es',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/simplenews/tests/src/Functional/SimplenewsFieldUiTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('help_block');
   }
@@ @@
       'type' => $type,
       'simplenews_content_type' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save and manage fields'));
+    $this->submitForm($edit, t('Save and manage fields'));
     $this->drupalGet('admin/structure/types/manage/' . $type . '/fields');
-    $this->assertText('simplenews_issue');
+    $this->assertSession()->pageTextContains('simplenews_issue');
     // Check if the help text is displayed.
     $this->drupalGet('admin/structure/types/manage/' . $type . '/display');
-    $this->assertText("'Plain' display settings apply to the content of emails");
+    $this->assertSession()->pageTextContains("'Plain' display settings apply to the content of emails");
     $this->drupalGet('admin/config/services/simplenews/settings/newsletter');
-    $this->assertText('These settings are default to all newsletters. Newsletter specific settings');
+    $this->assertSession()->pageTextContains('These settings are default to all newsletters. Newsletter specific settings');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/simplenews/tests/src/Functional/SimplenewsAdministrationTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('help_block');
   }
@@ @@

     $this->drupalGet('admin/config/services/simplenews');
     // Check if the help text is displayed.
-    $this->assertText('Newsletter allow you to send periodic e-mails to subscribers.');
+    $this->assertSession()->pageTextContains('Newsletter allow you to send periodic e-mails to subscribers.');

     // Create a newsletter for all possible setting combinations.
     $new_account = ['none', 'off', 'on', 'silent'];
@@ @@
           'from_name' => $this->randomMachineName(),
           'from_address' => $this->randomEmail(),
         ];
-        $this->drupalPostForm(NULL, $edit, t('Save'));
+        $this->submitForm($edit, t('Save'));
       }
     }
+    $this->drupalGet('admin/config/services/simplenews/manage/default');

     // New title should be saved correctly.
-    $this->drupalPostForm('admin/config/services/simplenews/manage/default', ['subject' => 'Edited subject'], t('Save'));
+    $this->submitForm(['subject' => 'Edited subject'], t('Save'));
     $this->drupalGet('admin/config/services/simplenews/manage/default');
-    $this->assertFieldByName('subject', 'Edited subject');
+    $this->assertSession()->fieldValueEquals('subject', 'Edited subject');

     $newsletters = simplenews_newsletter_get_all();

@@ @@

       list($new_account_setting, $opt_inout_setting) = explode('-', $newsletter->name);
       if ($newsletter->new_account == 'on' && $newsletter->opt_inout != 'hidden') {
-        $this->assertFieldChecked($this->getNewsletterFieldId($newsletter->id()));
+        $this->assertSession()->checkboxChecked($this->getNewsletterFieldId($newsletter->id()));
       }
       elseif ($newsletter->new_account == 'off' && $newsletter->opt_inout != 'hidden') {
-        $this->assertNoFieldChecked($this->getNewsletterFieldId($newsletter->id()));
+        $this->assertSession()->checkboxNotChecked($this->getNewsletterFieldId($newsletter->id()));
       }
       else {
-        $this->assertNoField('subscriptions[' . $newsletter->id() . ']', t('Hidden or silent newsletter is not shown.'));
+        $this->assertSession()->fieldNotExists('subscriptions[' . $newsletter->id() . ']', t('Hidden or silent newsletter is not shown.'));
       }
     }

@@ @@
       'pass[pass2]' => $pass,
       'subscriptions[' . $off_double_newsletter_id . ']' => $off_double_newsletter_id,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Create new account'));
+    $this->submitForm($edit, t('Create new account'));

     // Verify confirmation messages.
-    $this->assertText(t('Registration successful. You are now logged in.'));
+    $this->assertSession()->pageTextContains(t('Registration successful. You are now logged in.'));
     foreach ($newsletters as $newsletter) {
       // Check confirmation message for all on and non-hidden newsletters and
       // the one that was explicitly selected.
       if (($newsletter->new_account == 'on' && $newsletter->opt_inout != 'hidden') || $newsletter->name == 'off-double') {
-        $this->assertText(t('You have been subscribed to @name.', ['@name' => $newsletter->name]));
+        $this->assertSession()->pageTextContains(t('You have been subscribed to @name.', ['@name' => $newsletter->name]));
       }
       else {
         // All other newsletters must not show a message, e.g. those which were
         // subscribed silently.
-        $this->assertNoText(t('You have been subscribed to @name.', ['@name' => $newsletter->name]));
+        $this->assertSession()->pageTextNotContains(t('You have been subscribed to @name.', ['@name' => $newsletter->name]));
       }
     }

@@ @@
         }
         list($new_account_setting, $opt_inout_setting) = explode('-', $newsletter->name);
         if ($newsletter->opt_inout == 'hidden') {
-          $this->assertNoField('subscriptions[' . $newsletter->id() . ']', t('Hidden newsletter is not shown.'));
+          $this->assertSession()->fieldNotExists('subscriptions[' . $newsletter->id() . ']', t('Hidden newsletter is not shown.'));
         }
         elseif ($newsletter->new_account == 'on' || $newsletter->name == 'off-double' || $newsletter->new_account == 'silent') {
           // All on, silent and the explicitly selected newsletter should be
           // checked.
-          $this->assertFieldChecked($this->getNewsletterFieldId($newsletter->id()));
+          $this->assertSession()->checkboxChecked($this->getNewsletterFieldId($newsletter->id()));
         }
         else {
-          $this->assertNoFieldChecked($this->getNewsletterFieldId($newsletter->id()));
+          $this->assertSession()->checkboxNotChecked($this->getNewsletterFieldId($newsletter->id()));
         }
       }
     }
@@ @@
     $edit = [
       'subscriptions[' . $off_double_newsletter_id . ']' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->drupalGet('user/' . $user->id() . '/simplenews');
-    $this->assertNoFieldChecked($this->getNewsletterFieldId($off_double_newsletter_id));
+    $this->assertSession()->checkboxNotChecked($this->getNewsletterFieldId($off_double_newsletter_id));

     // Get a newsletter which has the block enabled.
     // @codingStandardsIgnoreStart
@@ @@
     $this->drupalLogin($admin_user);
     $subscriber = Subscriber::loadByMail($user->getEmail());
     $this->drupalGet('admin/people/simplenews/edit/' . $subscriber->id());
-    $this->assertNoField($this->getNewsletterFieldId('on_hidden'));
-    $this->assertNoField('mail');
-    $this->drupalPostForm('admin/people/simplenews/edit/' . $subscriber->id(), [], t('Save'));
+    $this->assertSession()->fieldNotExists($this->getNewsletterFieldId('on_hidden'));
+    $this->assertSession()->fieldNotExists('mail');
     $this->drupalGet('admin/people/simplenews/edit/' . $subscriber->id());
+    $this->submitForm([], t('Save'));
+    $this->drupalGet('admin/people/simplenews/edit/' . $subscriber->id());
     $this->assertTrue($subscriber->isSubscribed('on_hidden'));
     $this->assertTrue($subscriber->isUnsubscribed($off_double_newsletter_id));

@@ @@
     // @codingStandardsIgnoreEnd
     // Check if the help text is displayed.
     $this->drupalGet('admin/help/simplenews');
-    $this->assertText('Simplenews adds elements to the newsletter node add/edit');
+    $this->assertSession()->pageTextContains('Simplenews adds elements to the newsletter node add/edit');
     $this->drupalGet('admin/config/services/simplenews/add');
-    $this->assertText('You can create different newsletters (or subjects)');
+    $this->assertSession()->pageTextContains('You can create different newsletters (or subjects)');
   }

   /**
@@ @@
       'name' => $newsletter_name,
       'id'  => $newsletter_name,
     ];
-    $this->drupalPostForm('admin/config/services/simplenews/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/services/simplenews/add');
+    $this->submitForm($edit, t('Save'));

     // This test adds a number of subscribers to each newsletter separately and
     // then adds another bunch to both. First step is to create some arrays
@@ @@
       foreach ($group as $newsletter_id) {
         $edit['newsletters[' . $newsletter_id . ']'] = TRUE;
       }
-      $this->drupalPostForm(NULL, $edit, t('Subscribe'));
+      $this->submitForm($edit, t('Subscribe'));
     }

     // Verify that all addresses are displayed in the table.
@@ @@
       $mail_addresses[] = $email;
       if ($email == $user_mail) {
         // The user to which the mail was assigned should show the user name.
-        $this->assertEqual(trim($rows[$i]->find('xpath', '/td[2]/a')->getText()), $user->getAccountName());
+        $this->assertEquals(trim($rows[$i]->find('xpath', '/td[2]/a')->getText()), $user->getAccountName());
       }
       else {
         // Blank value for user name.
-        $this->assertEqual($rows[$i]->find('xpath', '/td[2]/a'), NULL);
+        $this->assertEquals($rows[$i]->find('xpath', '/td[2]/a'), NULL);
       }
     }
-    $this->assertEqual(15, count($mail_addresses));
+    $this->assertEquals(15, count($mail_addresses));
     foreach ($mail_addresses as $mail_address) {
       $mail_address = (string) $mail_address;
       $this->assertTrue(isset($subscribers_flat[$mail_address]));
@@ @@
     for ($i = 0; $i < count($subscribers_flat); $i++) {
       $mail_addresses[] = trim($rows[$i]->find('xpath', '/td[1]')->getText());
     }
-    $this->assertEqual(10, count($mail_addresses));
+    $this->assertEquals(10, count($mail_addresses));
     foreach ($mail_addresses as $mail_address) {
       $mail_address = (string) $mail_address;
       $this->assertTrue(isset($subscribers_flat[$mail_address]));
@@ @@
     $this->drupalGet('admin/people/simplenews', ['query' => ['mail' => $edit['mail']]]);

     $rows = $this->xpath('//tbody/tr');
-    $this->assertEqual(1, count($rows));
-    $this->assertEqual(current($subscribers['all']), trim($rows[0]->find('xpath', '/td[1]')->getText()));
+    $this->assertEquals(1, count($rows));
+    $this->assertEquals(current($subscribers['all']), trim($rows[0]->find('xpath', '/td[1]')->getText()));
     // Mysteriously, the username is sometimes a span and sometimes a link.
     // Accept both.
-    $this->assertEqual($user->label(), trim($rows[0]->find('xpath', '/td[2]/span|/td[2]/a')->getText()));
+    $this->assertEquals($user->label(), trim($rows[0]->find('xpath', '/td[2]/span|/td[2]/a')->getText()));

     // Reset the filter.
     $this->drupalGet('admin/people/simplenews');
@@ @@
       'newsletters[' . $first . ']' => TRUE,
     ];
     $this->clickLink(t('Mass unsubscribe'));
-    $this->drupalPostForm(NULL, $edit, t('Unsubscribe'));
+    $this->submitForm($edit, t('Unsubscribe'));

     // The all mail is still displayed because it's still subscribed to the
     // second newsletter. Reload the page to get rid of the confirmation
     // message.
     $this->drupalGet('admin/people/simplenews');
-    $this->assertNoText($first_mail);
-    $this->assertText($all_mail);
+    $this->assertSession()->pageTextNotContains($first_mail);
+    $this->assertSession()->pageTextContains($all_mail);

     // Limit to first newsletter, the all mail shouldn't be shown anymore.
     $this->drupalGet('admin/people/simplenews', ['query' => ['subscriptions_target_id' => $first]]);
-    $this->assertNoText($first_mail);
-    $this->assertNoText($all_mail);
+    $this->assertSession()->pageTextNotContains($first_mail);
+    $this->assertSession()->pageTextNotContains($all_mail);

     // Check exporting.
     $this->clickLink(t('Export'));
-    $this->drupalPostForm(NULL, ['newsletters[' . $first . ']' => TRUE], t('Export'));
-    $export_field = $this->xpath($this->constructFieldXpath('name', 'emails'));
+    $this->submitForm(['newsletters[' . $first . ']' => TRUE], t('Export'));
+    $export_field = $this->xpath($this->getSession()->getPage()->findField('emails'));
     $exported_mails = $export_field[0]->getText();
     foreach ($subscribers[$first] as $mail) {
       $this->assertTrue(strpos($exported_mails, $mail) !== FALSE, t('Mail address exported correctly.'));
@@ @@
       'subscribed[unsubscribed]' => TRUE,
       'newsletters[' . $first . ']' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Export'));
+    $this->submitForm($edit, t('Export'));

-    $export_field = $this->xpath($this->constructFieldXpath('name', 'emails'));
+    $export_field = $this->xpath($this->getSession()->getPage()->findField('emails'));
     $exported_mails = $export_field[0]->getText();
     $exported_mails = explode(', ', $exported_mails);
-    $this->assertEqual(2, count($exported_mails));
+    $this->assertEquals(2, count($exported_mails));
     $this->assertTrue(in_array($all_mail, $exported_mails));
     $this->assertTrue(in_array($first_mail, $exported_mails));

@@ @@
       'subscribed[unsubscribed]' => FALSE,
       'newsletters[' . $first . ']' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Export'));
+    $this->submitForm($edit, t('Export'));

-    $export_field = $this->xpath($this->constructFieldXpath('name', 'emails'));
+    $export_field = $this->xpath($this->getSession()->getPage()->findField('emails'));
     $exported_mails = $export_field[0]->getText();
     $exported_mails = explode(', ', $exported_mails);
     $this->assertTrue(in_array($unconfirmed[0], $exported_mails));
@@ @@
       'subscribed[unsubscribed]' => FALSE,
       'newsletters[' . $first . ']' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Export'));
+    $this->submitForm($edit, t('Export'));

-    $export_field = $this->xpath($this->constructFieldXpath('name', 'emails'));
+    $export_field = $this->xpath($this->getSession()->getPage()->findField('emails'));
     $exported_mails = $export_field[0]->getText();
     $exported_mails = explode(', ', $exported_mails);
-    $this->assertEqual(2, count($exported_mails));
+    $this->assertEquals(2, count($exported_mails));
     $this->assertTrue(in_array($unconfirmed[0], $exported_mails));
     $this->assertTrue(in_array($unconfirmed[1], $exported_mails));

@@ @@
     // Verify updated subscriptions count.
     drupal_static_reset('Drupal\simplenews\Plugin\simplenews\RecipientHandler\RecipientHandlerBase::count');
     $after_count = $spool_storage->issueCountRecipients($issue);
-    $this->assertEqual($before_count - 1, $after_count, t('Blocked users are not counted in subscription count.'));
+    $this->assertEquals($before_count - 1, $after_count, t('Blocked users are not counted in subscription count.'));

     // Test mass subscribe with previously unsubscribed users.
     for ($i = 0; $i < 3; $i++) {
@@ @@
       'emails' => implode(', ', $tested_subscribers),
       'newsletters[' . $first . ']' => TRUE,
     ];
+    $this->drupalGet('admin/people/simplenews/import');

-    $this->drupalPostForm('admin/people/simplenews/import', $edit, t('Subscribe'));
+    $this->submitForm($edit, t('Subscribe'));
     \Drupal::entityTypeManager()->getStorage('simplenews_subscriber')->resetCache();
     $subscription_manager->reset();
     $this->assertFalse($subscription_manager->isSubscribed($tested_subscribers[0], $first), t('Subscriber not resubscribed through mass subscription.'));
@@ @@
     $this->assertFalse($subscription_manager->isSubscribed($tested_subscribers[1], $first), t('Subscriber not resubscribed through mass subscription.'));
     $this->assertTrue($subscription_manager->isSubscribed($tested_subscribers[2], $first), t('Subscriber subscribed through mass subscription.'));
     $substitutes = ['@name' => Newsletter::load($first)->label(), '@mail' => $unsubscribed];
-    $this->assertText(t('The following addresses were skipped because they have previously unsubscribed from @name: @mail.', $substitutes));
-    $this->assertText(t("If you would like to resubscribe them, use the 'Force resubscription' option."));
+    $this->assertSession()->pageTextContains(t('The following addresses were skipped because they have previously unsubscribed from @name: @mail.', $substitutes));
+    $this->assertSession()->pageTextContains(t("If you would like to resubscribe them, use the 'Force resubscription' option."));

     // Try to mass subscribe without specifying newsletters.
     $tested_subscribers[2] = $this->randomEmail();
@@ @@
       'emails' => implode(', ', $tested_subscribers),
       'resubscribe' => TRUE,
     ];
+    $this->drupalGet('admin/people/simplenews/import');

-    $this->drupalPostForm('admin/people/simplenews/import', $edit, t('Subscribe'));
-    $this->assertText('Subscribe to field is required.');
+    $this->submitForm($edit, t('Subscribe'));
+    $this->assertSession()->pageTextContains('Subscribe to field is required.');

     // Test mass subscribe with previously unsubscribed users and force
     // resubscription.
@@ @@
       'newsletters[' . $first . ']' => TRUE,
       'resubscribe' => TRUE,
     ];
-    $this->drupalPostForm('admin/people/simplenews/import', $edit, t('Subscribe'));
+    $this->drupalGet('admin/people/simplenews/import');
+    $this->submitForm($edit, t('Subscribe'));

     $subscription_manager->reset();
     \Drupal::entityTypeManager()->getStorage('simplenews_subscriber')->resetCache();
@@ @@
     $edit = [
       'emails' => implode(', ', $tested_subscribers),
     ];
+    $this->drupalGet('admin/people/simplenews/unsubscribe');

-    $this->drupalPostForm('admin/people/simplenews/unsubscribe', $edit, t('Unsubscribe'));
-    $this->assertText('Unsubscribe from field is required.');
+    $this->submitForm($edit, t('Unsubscribe'));
+    $this->assertSession()->pageTextContains('Unsubscribe from field is required.');

     // Create two blocks, to ensure that they are updated/deleted when a
     // newsletter is deleted.
@@ @@
     \Drupal::entityTypeManager()->getStorage('simplenews_newsletter')->resetCache();
     $this->drupalGet('admin/config/services/simplenews/manage/' . $first);
     $this->clickLink(t('Delete'));
-    $this->drupalPostForm(NULL, [], t('Delete'));
+    $this->submitForm([], t('Delete'));

-    $this->assertText(t('All subscriptions to newsletter @newsletter have been deleted.', ['@newsletter' => $newsletters[$first]->name]));
+    $this->assertSession()->pageTextContains(t('All subscriptions to newsletter @newsletter have been deleted.', ['@newsletter' => $newsletters[$first]->name]));

     // Verify that all related data has been deleted/updated.
     $this->assertNull(Newsletter::load($first));
@@ @@
     // Verify that all subscriptions of that newsletter have been removed.
     $this->drupalGet('admin/people/simplenews');
     foreach ($subscribers[$first] as $mail) {
-      $this->assertNoText($mail);
+      $this->assertSession()->pageTextNotContains($mail);
     }

     $this->clickLink(t('Edit'), 1);

     // Get the subscriber id from the path.
-    $this->assertEqual(1, preg_match('|admin/people/simplenews/edit/(\d+)\?destination|', $this->getUrl(), $matches), 'Subscriber found');
+    $this->assertEquals(1, preg_match('|admin/people/simplenews/edit/(\d+)\?destination|', $this->getUrl(), $matches), 'Subscriber found');
     $subscriber = Subscriber::load($matches[1]);

-    $this->assertTitle('Edit subscriber ' . $subscriber->getMail() . ' | Drupal');
-    $this->assertFieldChecked('edit-status');
+    $this->assertSession()->titleEquals('Edit subscriber ' . $subscriber->getMail() . ' | Drupal');
+    $this->assertSession()->checkboxChecked('edit-status');

     // Disable account.
     $edit = [
       'status' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     \Drupal::entityTypeManager()->getStorage('simplenews_subscriber')->resetCache();
     $subscription_manager->reset();
     $this->assertFalse($subscription_manager->isSubscribed($subscriber->getMail(), $this->getRandomNewsletter()), t('Subscriber is not active'));
@@ @@

     // Re-enable account.
     $this->drupalGet('admin/people/simplenews/edit/' . $subscriber->id());
-    $this->assertTitle('Edit subscriber ' . $subscriber->getMail() . ' | Drupal');
-    $this->assertNoFieldChecked('edit-status');
+    $this->assertSession()->titleEquals('Edit subscriber ' . $subscriber->getMail() . ' | Drupal');
+    $this->assertSession()->checkboxNotChecked('edit-status');
     $edit = [
       'status' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     \Drupal::entityTypeManager()->getStorage('simplenews_subscriber')->resetCache();
     $subscription_manager->reset();
     $this->assertTrue($subscription_manager->isSubscribed($subscriber->getMail(), $this->getRandomNewsletter()), t('Subscriber is active again.'));
@@ @@

     // Remove the newsletter.
     $this->drupalGet('admin/people/simplenews/edit/' . $subscriber->id());
-    $this->assertTitle('Edit subscriber ' . $subscriber->getMail() . ' | Drupal');
+    $this->assertSession()->titleEquals('Edit subscriber ' . $subscriber->getMail() . ' | Drupal');
     \Drupal::entityTypeManager()->getStorage('simplenews_subscriber')->resetCache();
     $subscriber = Subscriber::load($subscriber->id());
     $nlids = $subscriber->getSubscribedNewsletterIds();
@@ @@
     // If the subscriber still has subscribed to newsletter, try to unsubscribe.
     $newsletter_id = reset($nlids);
     $edit['subscriptions[' . $newsletter_id . ']'] = FALSE;
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     \Drupal::entityTypeManager()->getStorage('simplenews_subscriber')->resetCache();
     $subscription_manager->reset();
     $nlids = $subscriber->getSubscribedNewsletterIds();
@@ @@
     $xss_mail = "<script>alert('XSS');</script>";
     $subscription_manager->subscribe($xss_mail, $this->getRandomNewsletter(), FALSE);
     $this->drupalGet('admin/people/simplenews');
-    $this->assertNoRaw($xss_mail);
-    $this->assertRaw(Html::escape($xss_mail));
+    $this->assertSession()->responseNotContains($xss_mail);
+    $this->assertSession()->responseContains(Html::escape($xss_mail));

     $xss_subscriber = Subscriber::loadByMail($xss_mail);
     $this->drupalGet('admin/people/simplenews/edit/' . $xss_subscriber->id());
-    $this->assertNoRaw($xss_mail);
-    $this->assertRaw(Html::escape($xss_mail));
+    $this->assertSession()->responseNotContains($xss_mail);
+    $this->assertSession()->responseContains(Html::escape($xss_mail));

     // Create a new user for the next test.
     $new_user = $this->drupalCreateUser(['subscribe to newsletters']);
+    $this->drupalGet('user/' . $new_user->id() . '/simplenews');
     // Test for saving the subscription for no newsletter.
-    $this->drupalPostForm('user/' . $new_user->id() . '/simplenews', NULL, t('Save'));
-    $this->assertText('The newsletter subscriptions for user ' . $new_user->getAccountName() . ' have been updated.');
+    $this->submitForm(NULL, t('Save'));
+    $this->assertSession()->pageTextContains('The newsletter subscriptions for user ' . $new_user->getAccountName() . ' have been updated.');

     // Editing a subscriber with subscription.
     $edit = [
@@ @@
       'status' => TRUE,
       'mail[0][value]' => 'edit@example.com',
     ];
-    $this->drupalPostForm('admin/people/simplenews/edit/' . $xss_subscriber->id(), $edit, t('Save'));
-    $this->assertText('Subscriber edit@example.com has been updated.');
+    $this->drupalGet('admin/people/simplenews/edit/' . $xss_subscriber->id());
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains('Subscriber edit@example.com has been updated.');

     // Create a second newsletter.
     $second_newsletter_name = mb_strtolower($this->randomMachineName());
@@ @@
       'name' => $second_newsletter_name,
       'id'  => $second_newsletter_name,
     ];
-    $this->drupalPostForm('admin/config/services/simplenews/add', $edit2, t('Save'));
+    $this->drupalGet('admin/config/services/simplenews/add');
+    $this->submitForm($edit2, t('Save'));

     // Test for adding a subscriber.
     $subscribe = [
@@ @@
       'newsletters[' . $newsletter_name . ']' => TRUE,
       'emails' => 'drupaltest@example.com',
     ];
-    $this->drupalPostForm('admin/people/simplenews/import', $subscribe, t('Subscribe'));
+    $this->drupalGet('admin/people/simplenews/import');
+    $this->submitForm($subscribe, t('Subscribe'));

     // The subscriber should appear once in the list.
     $rows = $this->xpath('//tbody/tr');
@@ @@
         $counter++;
       }
     }
-    $this->assertEqual(1, $counter);
-    $this->assertText(t('The following addresses were added or updated: @email.', ['@email' => 'drupaltest@example.com']));
-    $this->assertText(t('The addresses were subscribed to the following newsletters: @newsletter.', ['@newsletter' => $newsletter_name]));
+    $this->assertEquals(1, $counter);
+    $this->assertSession()->pageTextContains(t('The following addresses were added or updated: @email.', ['@email' => 'drupaltest@example.com']));
+    $this->assertSession()->pageTextContains(t('The addresses were subscribed to the following newsletters: @newsletter.', ['@newsletter' => $newsletter_name]));

     // Check exact subscription statuses.
     $subscriber = Subscriber::loadByMail('drupaltest@example.com');
-    $this->assertEqual($subscriber->getSubscription($newsletter_name)->get('status')->getValue(), SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED);
+    $this->assertEquals($subscriber->getSubscription($newsletter_name)->get('status')->getValue(), SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED);
     // The second newsletter was not subscribed, so there should be no
     // subscription record at all.
     $this->assertFalse($subscriber->getSubscription($second_newsletter_name));
@@ @@
       'type' => $type,
       'simplenews_content_type' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save content type'));
+    $this->submitForm($edit, t('Save content type'));

     // Verify that the newsletter settings are shown.
     $this->drupalGet('node/add/' . $type);
-    $this->assertText(t('Issue'));
+    $this->assertSession()->pageTextContains(t('Issue'));

     // Create an issue.
     $edit = [
@@ @@
       'body[0][value]' => 'User ID: [current-user:uid]',
       'simplenews_issue[target_id]' => $this->getRandomNewsletter(),
     ];
-    $this->drupalPostForm(NULL, $edit, ('Save'));
+    $this->submitForm($edit, ('Save'));

     $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);

@@ @@
       'body[0][value]' => 'Sample body text - Newsletter issue',
       'simplenews_issue[target_id]' => $this->getRandomNewsletter(),
     ];
-    $this->drupalPostForm('node/add/simplenews_issue', $edit, ('Save'));
+    $this->drupalGet('node/add/simplenews_issue');
+    $this->submitForm($edit, ('Save'));

     // Assert that body text is displayed.
-    $this->assertText('Sample body text - Newsletter issue');
+    $this->assertSession()->pageTextContains('Sample body text - Newsletter issue');

     $node2 = $this->drupalGetNodeByTitle($edit['title[0][value]']);

     // Assert subscriber count.
     $this->clickLink(t('Newsletter'));
-    $this->assertText(t('Send newsletter issue to 0 subscribers.'));
+    $this->assertSession()->pageTextContains(t('Send newsletter issue to 0 subscribers.'));

     // Create some subscribers.
     $subscribers = [];
@@ @@

     // Check if the subscribers are listed in the newsletter tab.
     $this->drupalGet('node/1/simplenews');
-    $this->assertText('Send newsletter issue to 3 subscribers.');
+    $this->assertSession()->pageTextContains('Send newsletter issue to 3 subscribers.');

     // Send mails.
-    $this->assertField('test_address', $admin_user->getEmail());
+    $this->assertSession()->fieldExists('test_address', $admin_user->getEmail());
     // Test newsletter to empty address and check the error message.
-    $this->drupalPostForm(NULL, ['test_address' => ''], t('Send test newsletter issue'));
-    $this->assertText(t('Missing test email address.'));
+    $this->submitForm(['test_address' => ''], t('Send test newsletter issue'));
+    $this->assertSession()->pageTextContains(t('Missing test email address.'));
     // Test newsletter to invalid address and check the error message.
-    $this->drupalPostForm(NULL, ['test_address' => 'invalid_address'], t('Send test newsletter issue'));
-    $this->assertText(t('Invalid email address "invalid_address"'));
-    $this->drupalPostForm(NULL, ['test_address' => $admin_user->getEmail()], t('Send test newsletter issue'));
-    $this->assertText(t('Test newsletter sent to user @name &lt;@email&gt;', ['@name' => $admin_user->getAccountName(), '@email' => $admin_user->getEmail()]));
+    $this->submitForm(['test_address' => 'invalid_address'], t('Send test newsletter issue'));
+    $this->assertSession()->pageTextContains(t('Invalid email address "invalid_address"'));
+    $this->submitForm(['test_address' => $admin_user->getEmail()], t('Send test newsletter issue'));
+    $this->assertSession()->pageTextContains(t('Test newsletter sent to user @name &lt;@email&gt;', ['@name' => $admin_user->getAccountName(), '@email' => $admin_user->getEmail()]));

     $mails = $this->getMails();
-    $this->assertEqual('simplenews_test', $mails[0]['id']);
-    $this->assertEqual($admin_user->getEmail(), $mails[0]['to']);
-    $this->assertEqual(t('[Default newsletter] @title', ['@title' => $node->getTitle()]), $mails[0]['subject']);
+    $this->assertEquals('simplenews_test', $mails[0]['id']);
+    $this->assertEquals($admin_user->getEmail(), $mails[0]['to']);
+    $this->assertEquals(t('[Default newsletter] @title', ['@title' => $node->getTitle()]), $mails[0]['subject']);
     $this->assertTrue(strpos($mails[0]['body'], 'User ID: ' . $admin_user->id()) !== FALSE);

     // Update the content type, remove the simpletest checkbox.
@@ @@
     $edit = [
       'simplenews_content_type' => FALSE,
     ];
-    $this->drupalPostForm('admin/structure/types/manage/' . $type, $edit, t('Save content type'));
+    $this->drupalGet('admin/structure/types/manage/' . $type);
+    $this->submitForm($edit, t('Save content type'));

     // Verify that the newsletter settings are still shown.
     // Note: Previously the field got autoremoved. We leave it remaining due to
     // potential data loss.
     $this->drupalGet('node/add/' . $type);
-    $this->assertNoText(t('Replacement patterns'));
-    $this->assertText(t('Issue'));
+    $this->assertSession()->pageTextNotContains(t('Replacement patterns'));
+    $this->assertSession()->pageTextContains(t('Issue'));

     // Test the visibility of subscription user component.
     $this->drupalGet('node/' . $node->id());
-    $this->assertNoText('Subscribed to');
+    $this->assertSession()->pageTextNotContains('Subscribed to');

     // Delete created nodes.
     $node->delete();
     $node2->delete();
+    $this->drupalGet('admin/structure/types/manage/' . $type . '/delete');

     // @todo: Test node update/delete.
     // Delete content type.
     // @todo: Add assertions.
-    $this->drupalPostForm('admin/structure/types/manage/' . $type . '/delete', [], t('Delete'));
+    $this->submitForm([], t('Delete'));

     // Check the Add Newsletter Issue button.
     $this->drupalGet('admin/content/simplenews');
     $this->clickLink(t('Add Newsletter Issue'));
-    $this->assertUrl('node/add/simplenews_issue');
+    $this->assertSession()->addressEquals('node/add/simplenews_issue');
     // Check if the help text is displayed.
-    $this->assertText('Add this newsletter issue to a newsletter by selecting a newsletter from the select list.');
+    $this->assertSession()->pageTextContains('Add this newsletter issue to a newsletter by selecting a newsletter from the select list.');
   }

   /**
@@ @@
   public function testSubscriberStatusFilter() {
     // Make sure subscription overview can't be accessed without permission.
     $this->drupalGet('admin/people/simplenews');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $admin_user = $this->drupalCreateUser([
       'administer newsletters',
@@ @@
     // output.
     $this->drupalGet('admin/people/simplenews', ['query' => ['subscriptions_status' => SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED]]);
     $row = $this->xpath('//tbody/tr');
-    $this->assertEqual(1, count($row));
-    $this->assertEqual($subscribers[0]->getMail(), trim($row[0]->find('xpath', '/td')->getText()));
+    $this->assertEquals(1, count($row));
+    $this->assertEquals($subscribers[0]->getMail(), trim($row[0]->find('xpath', '/td')->getText()));
     $this->drupalGet('admin/people/simplenews', ['query' => ['subscriptions_status' => SIMPLENEWS_SUBSCRIPTION_STATUS_UNCONFIRMED]]);
     $row = $this->xpath('//tbody/tr');
-    $this->assertEqual(1, count($row));
-    $this->assertEqual($subscribers[1]->getMail(), trim($row[0]->find('xpath', '/td')->getText()));
-    $this->assertText($newsletters['default']->name . ' (' . t('Unconfirmed') . ')');
+    $this->assertEquals(1, count($row));
+    $this->assertEquals($subscribers[1]->getMail(), trim($row[0]->find('xpath', '/td')->getText()));
+    $this->assertSession()->pageTextContains($newsletters['default']->name . ' (' . t('Unconfirmed') . ')');
     $this->drupalGet('admin/people/simplenews', ['query' => ['subscriptions_status' => SIMPLENEWS_SUBSCRIPTION_STATUS_UNSUBSCRIBED]]);
     $row = $this->xpath('//tbody/tr');
-    $this->assertEqual(1, count($row));
-    $this->assertEqual($subscribers[2]->getMail(), trim($row[0]->find('xpath', '/td')->getText()));
-    $this->assertText($newsletters['default']->name . ' (' . t('Unsubscribed') . ')');
+    $this->assertEquals(1, count($row));
+    $this->assertEquals($subscribers[2]->getMail(), trim($row[0]->find('xpath', '/td')->getText()));
+    $this->assertSession()->pageTextContains($newsletters['default']->name . ' (' . t('Unsubscribed') . ')');
   }

   /**
@@ @@
   public function testNewsletterIssuesOverview() {
     // Verify newsletter overview isn't available without permission.
     $this->drupalGet('admin/content/simplenews');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $admin_user = $this->drupalCreateUser([
       'administer newsletters',
@@ @@
       'name' => $name,
       'id'  => mb_strtolower($name),
     ];
-    $this->drupalPostForm('admin/config/services/simplenews/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/services/simplenews/add');
+    $this->submitForm($edit, t('Save'));

     // Create a newsletter issue and publish.
     $edit = [
@@ @@
       'title[0][value]' => 'Test_issue_1',
       'simplenews_issue[target_id]' => mb_strtolower($name),
     ];
-    $this->drupalPostForm('node/add/simplenews_issue', $edit, t('Save'));
+    $this->drupalGet('node/add/simplenews_issue');
+    $this->submitForm($edit, t('Save'));

     // Create another newsletter issue and keep unpublished.
     $edit = [
@@ @@
       'simplenews_issue[target_id]' => mb_strtolower($name),
       'status[value]' => FALSE,
     ];
-    $this->drupalPostForm('node/add/simplenews_issue', $edit, t('Save'));
+    $this->drupalGet('node/add/simplenews_issue');
+    $this->submitForm($edit, t('Save'));

     // Test mass subscribe with previously unsubscribed users.
     for ($i = 0; $i < 3; $i++) {
@@ @@
       'emails' => implode(', ', $subscribers),
       'newsletters[' . mb_strtolower($name) . ']' => TRUE,
     ];
-    $this->drupalPostForm('admin/people/simplenews/import', $edit, t('Subscribe'));
+    $this->drupalGet('admin/people/simplenews/import');
+    $this->submitForm($edit, t('Subscribe'));

     $this->drupalGet('admin/content/simplenews');
     // Check the correct values are present in the view.
     $rows = $this->xpath('//tbody/tr');
     // Check the number of results in the view.
-    $this->assertEqual(2, count($rows));
+    $this->assertEquals(2, count($rows));

     foreach ($rows as $row) {
       if ($row->find('xpath', '/td[2]/a')->getText() == 'Test_issue_2') {
-        $this->assertEqual($name, trim($row->find('xpath', '/td[3]/a')->getText()));
-        $this->assertEqual('Newsletter issue will be sent to 3 subscribers.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
-        $this->assertEqual('✖', trim($row->find('xpath', '/td[4]')->getText()));
-        $this->assertEqual('0/3', trim($row->find('xpath', '/td[6]/span')->getText()));
+        $this->assertEquals($name, trim($row->find('xpath', '/td[3]/a')->getText()));
+        $this->assertEquals('Newsletter issue will be sent to 3 subscribers.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
+        $this->assertEquals('✖', trim($row->find('xpath', '/td[4]')->getText()));
+        $this->assertEquals('0/3', trim($row->find('xpath', '/td[6]/span')->getText()));
       }
       else {
-        $this->assertEqual('✔', trim($row->find('xpath', '/td[4]')->getText()));
+        $this->assertEquals('✔', trim($row->find('xpath', '/td[4]')->getText()));
       }
     }
     // Send newsletter issues using bulk operations.
@@ @@
       'node_bulk_form[1]' => TRUE,
       'action' => 'simplenews_send_action',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Apply to selected items'));
+    $this->submitForm($edit, t('Apply to selected items'));
     // Check the relevant messages.
-    $this->assertText('Newsletter issue Test_issue_2 will be sent when published.');
-    $this->assertText('Newsletter issue Test_issue_1 pending.');
+    $this->assertSession()->pageTextContains('Newsletter issue Test_issue_2 will be sent when published.');
+    $this->assertSession()->pageTextContains('Newsletter issue Test_issue_1 pending.');
     $rows = $this->xpath('//tbody/tr');
     // Assert the status message of each newsletter.
     foreach ($rows as $row) {
       if ($row->find('xpath', '/td[2]/a')->getText() == 'Test_issue_2') {
-        $this->assertEqual('Newsletter issue will be sent to 3 subscribers on publish.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
+        $this->assertEquals('Newsletter issue will be sent to 3 subscribers on publish.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
       }
       else {
-        $this->assertEqual('Newsletter issue is pending, 0 mails sent out of 3, 0 errors.', trim($row->find('xpath', '/td[6]/img')->getAttribute('title')));
-        $this->assertEqual(file_url_transform_relative(file_create_url(drupal_get_path('module', 'simplenews') . '/images/sn-cron.png')), trim($row->find('xpath', '/td[6]/img')->getAttribute('src')));
+        $this->assertEquals('Newsletter issue is pending, 0 mails sent out of 3, 0 errors.', trim($row->find('xpath', '/td[6]/img')->getAttribute('title')));
+        $this->assertEquals(\Drupal::service('file_url_generator')->generateString(\Drupal::service('extension.list.module')->getPath('simplenews') . '/images/sn-cron.png'), trim($row->find('xpath', '/td[6]/img')->getAttribute('src')));
       }
     }
     // Stop sending the pending newsletters.
@@ @@
       'node_bulk_form[1]' => TRUE,
       'action' => 'simplenews_stop_action',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Apply to selected items'));
+    $this->submitForm($edit, t('Apply to selected items'));
     // Check the stop message.
-    $this->assertText('Sending of Test_issue_1 was stopped. 3 pending email(s) were deleted.');
+    $this->assertSession()->pageTextContains('Sending of Test_issue_1 was stopped. 3 pending email(s) were deleted.');
     $rows = $this->xpath('//tbody/tr');
     // Check the send status of each issue.
     foreach ($rows as $row) {
       if ($row->find('xpath', '/td[2]/a')->getText() == 'Test_issue_2') {
-        $this->assertEqual('Newsletter issue will be sent to 3 subscribers on publish.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
+        $this->assertEquals('Newsletter issue will be sent to 3 subscribers on publish.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
       }
       else {
-        $this->assertEqual('Newsletter issue will be sent to 3 subscribers.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
+        $this->assertEquals('Newsletter issue will be sent to 3 subscribers.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
       }
     }

@@ @@
       'node_bulk_form[1]' => TRUE,
       'action' => 'simplenews_send_action',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Apply to selected items'));
+    $this->submitForm($edit, t('Apply to selected items'));
     // Run cron to send the mails.
     $this->cronRun();
     $this->drupalGet('admin/content/simplenews');
@@ @@
     // Check the send status of each issue.
     foreach ($rows as $row) {
       if ($row->find('xpath', '/td[2]/a')->getText() == 'Test_issue_2') {
-        $this->assertEqual('Newsletter issue will be sent to 3 subscribers on publish.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
+        $this->assertEquals('Newsletter issue will be sent to 3 subscribers on publish.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
       }
       else {
-        $this->assertEqual('Newsletter issue sent to 3 subscribers, 0 errors.', trim($row->find('xpath', '/td[6]/img')->getAttribute('title')));
-        $this->assertEqual(file_url_transform_relative(file_create_url(drupal_get_path('module', 'simplenews') . '/images/sn-sent.png')), trim($row->find('xpath', '/td[6]/img')->getAttribute('src')));
+        $this->assertEquals('Newsletter issue sent to 3 subscribers, 0 errors.', trim($row->find('xpath', '/td[6]/img')->getAttribute('title')));
+        $this->assertEquals(\Drupal::service('file_url_generator')->generateString(\Drupal::service('extension.list.module')->getPath('simplenews') . '/images/sn-sent.png'), trim($row->find('xpath', '/td[6]/img')->getAttribute('src')));
       }
     }
   }
@@ @@
       'name' => $newsletter_name,
       'id'  => $newsletter_name,
     ];
-    $this->drupalPostForm('admin/config/services/simplenews/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/services/simplenews/add');
+    $this->submitForm($edit, t('Save'));

     // Create a user and subscribe them.
     $user = $this->drupalCreateUser();
@@ @@
     // Check anonymous user can't access admin page.
     $this->drupalLogout();
     $this->drupalGet('admin/people/simplenews');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Turn off the access permission on the view.
     $view = View::load('simplenews_subscribers');
@@ @@

     // Check username is public but email is not shown.
     $this->drupalGet('admin/people/simplenews');
-    $this->assertText($user->getAccountName());
-    $this->assertNoText($user->getEmail());
+    $this->assertSession()->pageTextContains($user->getAccountName());
+    $this->assertSession()->pageTextNotContains($user->getEmail());

     // Grant view permission.
     $view_user = $this->drupalCreateUser([
@@ @@

     // Check can see username and email.
     $this->drupalGet('admin/people/simplenews');
-    $this->assertText($user->getAccountName());
-    $this->assertText($user->getEmail());
+    $this->assertSession()->pageTextContains($user->getAccountName());
+    $this->assertSession()->pageTextContains($user->getEmail());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertFieldCheckedRector
 * AssertFieldRector
 * AssertNoFieldCheckedRector
 * AssertNoFieldRector
 * AssertNoRawRector
 * AssertNoTextRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * AssertTitleRector
 * AssertUrlRector
 * ConstructFieldXpathRector
 * DrupalGetPathRector
 * FileUrlTransformRelativeRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 26 files have been changed by Rector                                      

