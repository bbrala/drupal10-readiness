modules/contrib/akamai/akamai.install
modules/contrib/akamai/src/Event/AkamaiPurgeEvents.php
modules/contrib/akamai/tests/src/Kernel/EdgeCacheTagHeaderTest.php
modules/contrib/akamai/src/EventSubscriber/CacheableResponseSubscriber.php
modules/contrib/akamai/akamai.module
modules/contrib/akamai/akamai.post_update.php
modules/contrib/akamai/src/AkamaiAuthentication.php
modules/contrib/akamai/src/AkamaiClientBase.php
modules/contrib/akamai/src/Form/CacheControlForm.php
modules/contrib/akamai/tests/src/Kernel/EventSubscriber/CacheableResponseSubscriberTest.php
modules/contrib/akamai/tests/src/Kernel/EventSubscriber/MockSubscriber.php
modules/contrib/akamai/tests/src/Kernel/KeyRepositoryAvailableTest.php
modules/contrib/akamai/tests/src/Kernel/KeyRepositoryUnavailableTest.php
modules/contrib/akamai/tests/src/Kernel/MockHeaderSubscriber.php
modules/contrib/akamai/tests/src/Unit/AkamaiAuthenticationTest.php
modules/contrib/akamai/src/Form/ClearUrlForm.php
modules/contrib/akamai/tests/src/Unit/AkamaiClientV3Test.php
modules/contrib/akamai/src/Form/ConfigForm.php
modules/contrib/akamai/src/AkamaiClientFactory.php
modules/contrib/akamai/src/AkamaiClientInterface.php
modules/contrib/akamai/src/AkamaiClientManager.php
modules/contrib/akamai/tests/src/Unit/Helper/CacheTagFormatterTest.php
modules/contrib/akamai/src/Annotation/AkamaiClient.php
modules/contrib/akamai/tests/src/Unit/Helper/EdgescapeTest.php
modules/contrib/akamai/src/Commands/AkamaiCommands.php
modules/contrib/akamai/src/Event/AkamaiHeaderEvents.php
modules/contrib/akamai/tests/src/Unit/Plugin/Purge/Purger/AkamaiPurgerTest.php
modules/contrib/akamai/tests/src/Unit/Plugin/Purge/Purger/AkamaiTagPurgerTest.php
modules/contrib/akamai/src/Helper/CacheTagFormatter.php
modules/contrib/akamai/src/Helper/Edgescape.php
modules/contrib/akamai/src/KeyProvider.php
modules/contrib/akamai/src/KeyProviderInterface.php
modules/contrib/akamai/src/Plugin/Block/CacheClearBlock.php
modules/contrib/akamai/src/Plugin/Client/AkamaiClientV3.php
modules/contrib/akamai/src/Plugin/Purge/DiagnosticCheck/CredentialCheck.php
modules/contrib/akamai/src/Plugin/Purge/DiagnosticCheck/QueueLengthCheck.php
modules/contrib/akamai/src/Plugin/Purge/Purger/AkamaiPurger.php
modules/contrib/akamai/src/Plugin/Purge/Purger/AkamaiTagPurger.php
modules/contrib/akamai/tests/bootstrap.php
modules/contrib/akamai/tests/src/Functional/AkamaiCacheControlFormTest.php
modules/contrib/akamai/tests/src/Functional/AkamaiConfigFormTest.php
modules/contrib/akamai/tests/src/Functional/AkamaiHomepageTest.php
modules/contrib/akamai/tests/src/Functional/EdgescapeTest.php

12 files with changes
=====================

1) modules/contrib/akamai/src/Event/AkamaiHeaderEvents.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\akamai\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Event that is fired when Akamai header is formed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/akamai/tests/src/Unit/Plugin/Purge/Purger/AkamaiTagPurgerTest.php:20

    ---------- begin diff ----------
@@ @@
    * Tests purge creation event dispatch.
    */
   public function testPurgeCreationEvent() {
-    $purger = $this->getMockBuilder('Drupal\akamai\Plugin\Purge\Purger\AkamaiTagPurger')
-      ->disableOriginalConstructor()
-      ->setMethods(NULL)
-      ->getMock();
+    $purger = $this->createMock('Drupal\akamai\Plugin\Purge\Purger\AkamaiTagPurger');

     $formatter = new CacheTagFormatter();

@@ @@
     $container->set('akamai.helper.cachetagformatter', $formatter);
     \Drupal::setContainer($container);

-    $client = $this->getMockBuilder('Drupal\akamai\Plugin\Client\AkamaiClientV3')
-      ->disableOriginalConstructor()
-      ->setMethods(['setType', 'purgeTags'])
-      ->getMock();
+    $client = $this->createMock('Drupal\akamai\Plugin\Client\AkamaiClientV3');

     $reflection = new \ReflectionClass($purger);
     $reflection_property = $reflection->getProperty('client');
@@ @@
     $reflection_property->setValue($purger, $event_dispatcher);

     // Create stub for response class.
-    $invalidation_1 = $this->getMockBuilder('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $invalidation_1 = $this->createMock('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation');
     $invalidation_1->method('getExpression')
       ->willReturn('foo');
     // Create duplicate stub for response class.
-    $invalidation_2 = $this->getMockBuilder('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $invalidation_2 = $this->createMock('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation');
     $invalidation_2->method('getExpression')
       ->willReturn('foo');
     // Create third stub for response class.
-    $invalidation_3 = $this->getMockBuilder('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $invalidation_3 = $this->createMock('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation');
     $invalidation_3->method('getExpression')
       ->willReturn('bar');
     // Create string numeric stubs for response class.
-    $invalidation_4 = $this->getMockBuilder('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $invalidation_4 = $this->createMock('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation');
     $invalidation_4->method('getExpression')
       ->willReturn('123');
-    $invalidation_5 = $this->getMockBuilder('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $invalidation_5 = $this->createMock('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation');
     $invalidation_5->method('getExpression')
       ->willReturn('234');
     // Create integer stubs for response class.
-    $invalidation_6 = $this->getMockBuilder('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $invalidation_6 = $this->createMock('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation');
     $invalidation_6->method('getExpression')
       ->willReturn(123);
-    $invalidation_7 = $this->getMockBuilder('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $invalidation_7 = $this->createMock('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation');
     $invalidation_7->method('getExpression')
       ->willReturn(456);
     // Create float stub for response class.
-    $invalidation_8 = $this->getMockBuilder('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $invalidation_8 = $this->createMock('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation');
     $invalidation_8->method('getExpression')
       ->willReturn(1.01);
     // Create boolean stub for response class.
-    $invalidation_9 = $this->getMockBuilder('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $invalidation_9 = $this->createMock('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation');
     $invalidation_9->method('getExpression')
       ->willReturn(TRUE);

@@ @@
    */
   public function testGetTimeHintReturnsCorrectValues() {
     // Mock the akamai client factory.
-    $akamai_client_factory = $this->getMockBuilder('Drupal\akamai\AkamaiClientFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $akamai_client_factory = $this->createMock('Drupal\akamai\AkamaiClientFactory');
     $akamai_client_factory->method('get')
       ->willReturn(NULL);

     // Mock the event dispatcher.
-    $event_dispatcher = $this->getMockBuilder('Symfony\Component\EventDispatcher\EventDispatcherInterface')
-      ->getMock();
+    $event_dispatcher = $this->createMock('Symfony\Component\EventDispatcher\EventDispatcherInterface');

     $result_map = [
       '-5' => 0,
@@ @@

     foreach ($result_map as $config_value => $returned_value) {
       // Mock the config.
-      $config = $this->getMockBuilder('Drupal\Core\Config\ImmutableConfig')
-        ->disableOriginalConstructor()
-        ->getMock();
+      $config = $this->createMock('Drupal\Core\Config\ImmutableConfig');
       $config->method('get')
         ->willReturn($config_value);

       // Mock the config factory.
-      $config_factory = $this->getMockBuilder('Drupal\Core\Config\ConfigFactoryInterface')
-        ->getMock();
+      $config_factory = $this->createMock('Drupal\Core\Config\ConfigFactoryInterface');
       $config_factory->method('get')
         ->willReturn($config);

-      $logger = $this->getMockBuilder('\Psr\Log\LoggerInterface')->getMock();
+      $logger = $this->createMock('\Psr\Log\LoggerInterface');

       $purger = new AkamaiTagPurger(['id' => 'my_id'], 'my_id', 'my_definition', $config_factory, $event_dispatcher, $akamai_client_factory, $logger);

@@ @@
   public function testInvalidateTagLength() {
     $long_tag = str_repeat('a', 129);

-    $logger = $this->getMockBuilder('\Drupal\Core\Logger\LoggerChannel')
-      ->disableOriginalConstructor()
-      ->setMethods(['warning'])
-      ->getMock();
+    $logger = $this->createMock('\Drupal\Core\Logger\LoggerChannel');
     $logger->expects($this->once())
       ->method('warning')
       ->with('Cache Tag %tag has exceeded the Akamai 128 character tag maximum length.', ['%tag' => $long_tag]);

-    $purger = $this->getMockBuilder('Drupal\akamai\Plugin\Purge\Purger\AkamaiTagPurger')
-      ->disableOriginalConstructor()
-      ->setMethods(NULL)
-      ->getMock();
+    $purger = $this->createMock('Drupal\akamai\Plugin\Purge\Purger\AkamaiTagPurger');
     $reflection = new \ReflectionClass($purger);
     $reflection_property = $reflection->getProperty('logger');
     $reflection_property->setAccessible(TRUE);
@@ @@
     $container->set('akamai.helper.cachetagformatter', $formatter);
     \Drupal::setContainer($container);

-    $client = $this->getMockBuilder('Drupal\akamai\Plugin\Client\AkamaiClientV3')
-      ->disableOriginalConstructor()
-      ->setMethods(['setType', 'purgeTags'])
-      ->getMock();
+    $client = $this->createMock('Drupal\akamai\Plugin\Client\AkamaiClientV3');

     $reflection = new \ReflectionClass($purger);
     $reflection_property = $reflection->getProperty('client');
@@ @@
     $reflection_property->setValue($purger, $event_dispatcher);

     // Create stub for response class.
-    $invalidation = $this->getMockBuilder('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $invalidation = $this->createMock('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation');
     $invalidation->method('setState')
       ->willReturn('foo');
     $invalidation->method('getExpression')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/akamai/tests/src/Unit/Plugin/Purge/Purger/AkamaiPurgerTest.php:16

    ---------- begin diff ----------
@@ @@
    */
   public function testGetTimeHintReturnsCorrectValues() {
     // Mock the akamai client factory.
-    $akamai_client_factory = $this->getMockBuilder('Drupal\akamai\AkamaiClientFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $akamai_client_factory = $this->createMock('Drupal\akamai\AkamaiClientFactory');
     $akamai_client_factory->method('get')
       ->willReturn(NULL);

     // Mock the event dispatcher.
-    $event_dispatcher = $this->getMockBuilder('Symfony\Component\EventDispatcher\EventDispatcherInterface')
-      ->getMock();
+    $event_dispatcher = $this->createMock('Symfony\Component\EventDispatcher\EventDispatcherInterface');

     $result_map = [
       '-5' => 0,
@@ @@

     foreach ($result_map as $config_value => $returned_value) {
       // Mock the config.
-      $config = $this->getMockBuilder('Drupal\Core\Config\ImmutableConfig')
-        ->disableOriginalConstructor()
-        ->getMock();
+      $config = $this->createMock('Drupal\Core\Config\ImmutableConfig');
       $config->method('get')
         ->willReturn($config_value);

       // Mock the config factory.
-      $config_factory = $this->getMockBuilder('Drupal\Core\Config\ConfigFactoryInterface')
-        ->getMock();
+      $config_factory = $this->createMock('Drupal\Core\Config\ConfigFactoryInterface');
       $config_factory->method('get')
         ->willReturn($config);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/akamai/tests/src/Unit/Helper/EdgescapeTest.php:29

    ---------- begin diff ----------
@@ @@
     if ($headerValue) {
       $request->headers = new HeaderBag([Edgescape::EDGESCAPE_HEADER => (string) $headerValue]);
     }
-    $requestStack = $this->getMockBuilder('\Symfony\Component\HttpFoundation\RequestStack')
-      ->disableOriginalConstructor()
-      ->setMethods(['getCurrentRequest'])
-      ->getMock();
+    $requestStack = $this->createMock('\Symfony\Component\HttpFoundation\RequestStack');
     $requestStack->method('getCurrentRequest')
       ->willReturn($request);
     return $requestStack;
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/akamai/tests/src/Unit/AkamaiClientV3Test.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\akamai\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\akamai\KeyProviderInterface;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Tests\UnitTestCase;
@@ @@
  */
 class AkamaiClientV3Test extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Creates a client to test.
    *
@@ @@
     ];
     $logger = $this->prophesize(LoggerInterface::class)->reveal();

-    $edgegridclient = $this->getMockBuilder('Akamai\Open\EdgeGrid\Client')
-      ->disableOriginalConstructor()
-      ->setMethods(NULL)
-      ->getMock();
+    $edgegridclient = $this->createMock('Akamai\Open\EdgeGrid\Client');

     // Create stub for response class.
-    $response_stub = $this->getMockBuilder('GuzzleHttp\Psr7\Response')
-      ->disableOriginalConstructor()
-      ->setMethods(['getStatusCode'])
-      ->getMock();
+    $response_stub = $this->createMock('GuzzleHttp\Psr7\Response');
     $response_stub->method('getStatusCode')
       ->willReturn(201);
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/akamai/tests/src/Unit/AkamaiAuthenticationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\akamai\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\akamai\AkamaiAuthentication;
 use Drupal\akamai\KeyProviderInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
  */
 class AkamaiAuthenticationTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Tests that we can authorise when specifying edgerc file.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/akamai/tests/src/Kernel/EventSubscriber/MockSubscriber.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Storage of the last event.
    *
-   * @var Symfony\Component\EventDispatcher\Event
+   * @var \Symfony\Contracts\EventDispatcher\Event
    */
   public $event;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


8) modules/contrib/akamai/tests/src/Functional/EdgescapeTest.php:68

    ---------- begin diff ----------
@@ @@
     $this->drupalGet($akamai_config_path, [], [
       Edgescape::EDGESCAPE_HEADER => $header_value,
     ]);
-    $this->assertRaw('Country Code: RAX');
+    $this->assertSession()->responseContains('Country Code: RAX');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/akamai/src/Plugin/Purge/Purger/AkamaiTagPurger.php:132

    ---------- begin diff ----------
@@ @@

     // Instantiate event and alter tags with subscribers.
     $event = new AkamaiPurgeEvents($tags_to_clear);
-    $this->eventDispatcher->dispatch(AkamaiPurgeEvents::PURGE_CREATION, $event);
+    $this->eventDispatcher->dispatch($event, AkamaiPurgeEvents::PURGE_CREATION);
     $tags_to_clear = $event->data;

     // Purge tags.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


10) modules/contrib/akamai/src/Plugin/Purge/Purger/AkamaiPurger.php:128

    ---------- begin diff ----------
@@ @@

     // Instantiate event and alter tags with subscribers.
     $event = new AkamaiPurgeEvents($urls_to_clear);
-    $this->eventDispatcher->dispatch(AkamaiPurgeEvents::PURGE_CREATION, $event);
+    $this->eventDispatcher->dispatch($event, AkamaiPurgeEvents::PURGE_CREATION);
     $urls_to_clear = $event->data;

     // Purge all URLs in a single request. Akamai accepts up to 50 (?)
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


11) modules/contrib/akamai/src/EventSubscriber/CacheableResponseSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\akamai\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\akamai\Event\AkamaiHeaderEvents;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Cache\CacheableResponseInterface;
@@ @@
   /**
    * Add cache tags header on cacheable responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
@@ @@

       // Instantiate our event.
       $event = new AkamaiHeaderEvents($tags);
-      $this->eventDispatcher->dispatch(AkamaiHeaderEvents::HEADER_CREATION, $event);
+      $this->eventDispatcher->dispatch($event, AkamaiHeaderEvents::HEADER_CREATION);
       $tags = $event->data;
       foreach ($tags as &$tag) {
         $tag = $this->tagFormatter->format($tag);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


12) modules/contrib/akamai/src/Event/AkamaiPurgeEvents.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\akamai\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Event that is fired when Akamai purge is formed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 12 files have been changed by Rector                                      

