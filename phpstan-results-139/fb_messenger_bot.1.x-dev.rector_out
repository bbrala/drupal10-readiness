modules/contrib/fb_messenger_bot/demo_fb_messenger_bot/src/DemoFbMessengerBotServiceProvider.php
modules/contrib/fb_messenger_bot/src/Message/ButtonBase.php
modules/contrib/fb_messenger_bot/demo_fb_messenger_bot/src/Workflow/DemoFBMessengerBotWorkflow.php
modules/contrib/fb_messenger_bot/tests/src/Kernel/MessageDataProviderTrait.php
modules/contrib/fb_messenger_bot/src/Bot/BotInterface.php
modules/contrib/fb_messenger_bot/src/Bot/BotTrait.php
modules/contrib/fb_messenger_bot/src/Bot/FBBot.php
modules/contrib/fb_messenger_bot/src/Controller/ContactController.php
modules/contrib/fb_messenger_bot/src/Message/ButtonMessage.php
modules/contrib/fb_messenger_bot/src/Message/FacebookGenericMessage.php
modules/contrib/fb_messenger_bot/src/Message/MessageInterface.php
modules/contrib/fb_messenger_bot/src/Message/PostbackButton.php
modules/contrib/fb_messenger_bot/src/Message/TextMessage.php
modules/contrib/fb_messenger_bot/src/Message/UrlButton.php
modules/contrib/fb_messenger_bot/src/Message/VideoMessage.php
modules/contrib/fb_messenger_bot/src/Step/BotWorkflowStep.php
modules/contrib/fb_messenger_bot/tests/src/Kernel/ReflectionTrait.php
modules/contrib/fb_messenger_bot/src/Step/BotWorkflowStepInterface.php
modules/contrib/fb_messenger_bot/src/Step/StepInvocationOutcome.php
modules/contrib/fb_messenger_bot/src/Step/StepInvocationOutcomeInterface.php
modules/contrib/fb_messenger_bot/src/Workflow/BotWorkflowInterface.php
modules/contrib/fb_messenger_bot/src/Workflow/BotWorkflowTrait.php
modules/contrib/fb_messenger_bot/tests/src/Unit/ContactControllerTest.php
modules/contrib/fb_messenger_bot/src/Conversation/BotConversationInterface.php
modules/contrib/fb_messenger_bot/src/Conversation/ConversationFactory.php
modules/contrib/fb_messenger_bot/src/Workflow/FBMessengerBotWorkflow.php
modules/contrib/fb_messenger_bot/src/Conversation/ConversationFactoryInterface.php
modules/contrib/fb_messenger_bot/src/Entity/BotConversation.php
modules/contrib/fb_messenger_bot/tests/src/Unit/Message/ButtonMessageTest.php
modules/contrib/fb_messenger_bot/tests/src/Unit/Message/FacebookGenericMessageTest.php
modules/contrib/fb_messenger_bot/tests/src/Unit/Message/PostbackButtonTest.php
modules/contrib/fb_messenger_bot/tests/src/Unit/Message/TextMessageTest.php
modules/contrib/fb_messenger_bot/tests/src/Unit/Message/UrlButtonTest.php
modules/contrib/fb_messenger_bot/src/Entity/BotConversationStorageSchema.php
modules/contrib/fb_messenger_bot/tests/src/Kernel/BotKernelTest.php
modules/contrib/fb_messenger_bot/tests/src/Unit/Message/VideoMessageTest.php
modules/contrib/fb_messenger_bot/tests/src/Unit/Step/BotWorkflowStepTest.php
modules/contrib/fb_messenger_bot/src/FacebookService.php
modules/contrib/fb_messenger_bot/tests/src/Kernel/ConversationFactoryTest.php
modules/contrib/fb_messenger_bot/tests/src/Kernel/FBMessengerBotWorkflowKernelTest.php
modules/contrib/fb_messenger_bot/tests/src/Unit/Workflow/BotWorkflowTraitTest.php
modules/contrib/fb_messenger_bot/tests/src/Kernel/FBMessengerBotWorkflowProcessConversationTest.php
modules/contrib/fb_messenger_bot/tests/src/Kernel/FacebookServiceTranslateRequestTest.php
modules/contrib/fb_messenger_bot/src/Form/FacebookServiceSettingsForm.php

14 files with changes
=====================

1) modules/contrib/fb_messenger_bot/tests/src/Unit/Workflow/BotWorkflowTraitTest.php:32

    ---------- begin diff ----------
@@ @@
    * workflow's full implementation and is closer to the method defined in the
    * trait.
    */
-  public function setUp() {
+  public function setUp(): void {
     // Instantiate a mock ConfigFactory.
     $configFactory = $this->getConfigFactoryStub([
       'fb_messenger_bot.settings' => [
@@ @@

     // Instantiate mock immutableConfig for configFactory stub's get() method.
     // @see Drupal\fb_messenger_bot\Workflow\FBMessengerBotWorkflow::buildSteps().
-    $immutableConfig = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $immutableConfig = $this->createMock('\Drupal\Core\Config\ImmutableConfig');

     $configFactory->method('get')
       ->willReturn($immutableConfig);

-    $conversationFactory = $this->getMockBuilder('\Drupal\fb_messenger_bot\Conversation\ConversationFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $conversationFactory = $this->createMock('\Drupal\fb_messenger_bot\Conversation\ConversationFactory');

     $stringTranslation = $this->getStringTranslationStub();

-    $mockFbService = $this->getMockBuilder('Drupal\fb_messenger_bot\FacebookService')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockFbService = $this->createMock('Drupal\fb_messenger_bot\FacebookService');

-    $mockLogger = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannelInterface')
-      ->getMock();
+    $mockLogger = $this->createMock('Drupal\Core\Logger\LoggerChannelInterface');
     $mockLogger->method('debug')
       ->will($this->returnCallback(function($input) {
         print $input;
@@ @@
    */
   public function testSetStepsAcceptsArray() {

-    $mockMessage = $this->getMockBuilder('Drupal\fb_messenger_bot\Message\MessageInterface')
-      ->getMock();
+    $mockMessage = $this->createMock('Drupal\fb_messenger_bot\Message\MessageInterface');

     $inputArray = array();

@@ @@
    * @dataProvider badDataProvider
    *
    * @parameter array $input array of bad data types
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testSetStepsRejectsBadTypes($input) {

+    $this->expectException(\InvalidArgumentException::class);
     $this->workflow->setSteps($input);

   }
@@ @@
       'message_content' => 'start over',
     );

-    $mockConversation = $this->getMockBuilder('\Drupal\fb_messenger_bot\Conversation\BotConversationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockConversation = $this->createMock('\Drupal\fb_messenger_bot\Conversation\BotConversationInterface');

     $this->assertTrue($this->invokeMethod($this->workflow, 'preprocessSpecialMessages', array($incoming, &$mockConversation)));

@@ @@
     );

     // Set up a Conversation mock for the Workflow to process.
-    $mockConversation = $this->getMockBuilder('\Drupal\fb_messenger_bot\Conversation\BotConversationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockConversation = $this->createMock('\Drupal\fb_messenger_bot\Conversation\BotConversationInterface');

     // Check that the return value is the array we set above when mocking the
     // checkDisallowedMessageType method.
@@ @@
    */
   public function testProcessConversationReturnValue() {

-    $mockConversation = $this->getMockBuilder('\Drupal\fb_messenger_bot\Conversation\BotConversationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockConversation = $this->createMock('\Drupal\fb_messenger_bot\Conversation\BotConversationInterface');
     $mockConversation->method('getLastStep')->willReturn('welcome');

     $incomingMessage = array(
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/fb_messenger_bot/tests/src/Unit/Step/BotWorkflowStepTest.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
-    $this->mockMessage = $this->getMockBuilder('\Drupal\fb_messenger_bot\Message\MessageInterface')
-      ->getMock();
+  public function setUp(): void {
+    $this->mockMessage = $this->createMock('\Drupal\fb_messenger_bot\Message\MessageInterface');

     $this->mockMessageCallback = function($arg) {
       return $arg;
@@ @@

   /**
    * Verify setting the validation with non-callable fails.
-   *
-   * @expectedException PHPUnit_Framework_Error
    */
   public function testSetValidationCallbackWithNonCallable() {
+    $this->expectException('PHPUnit_Framework_Error');
     $callback = "string";
     $this->assertSame($this->questionMessageStep, $this->questionMessageStep->setValidationCallback($callback), 'Error: successfully set validationCallback to a non-callable.');
   }
@@ @@
    * Verify we can set the invalid message.
    */
   public function testSetInvalidMessage() {
-    $mockMessage = $this->getMockBuilder('Drupal\fb_messenger_bot\Message\MessageInterface')
-      ->getMock();
+    $mockMessage = $this->createMock('Drupal\fb_messenger_bot\Message\MessageInterface');
     $this->assertSame($this->questionMessageStep, $this->questionMessageStep->setInvalidResponseMessage($mockMessage), 'Failed to set invalidMessage to an instance of the MessageInterface.');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/fb_messenger_bot/tests/src/Unit/Message/VideoMessageTest.php:15

    ---------- begin diff ----------
@@ @@
    * Tests that the constructor rejects non URL input.
    *
    * @dataProvider invalidUrlProvider
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testInvalidUrls($url) {
+    $this->expectException(\InvalidArgumentException::class);
     $videoMessage = new VideoMessage($url);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/fb_messenger_bot/tests/src/Unit/Message/UrlButtonTest.php:19

    ---------- begin diff ----------
@@ @@
   public $url;
   public $button;

-  public function setUp() {
+  public function setUp(): void {
     $this->title = 'URL Button';
     $this->url = 'http://www.example.com';
     $this->button = new UrlButton($this->title, $this->url);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/fb_messenger_bot/tests/src/Unit/Message/TextMessageTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->text = 'A sample string for testing.';
     $this->textMessage = new TextMessage($this->text);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/fb_messenger_bot/tests/src/Unit/Message/PostbackButtonTest.php:19

    ---------- begin diff ----------
@@ @@
   public $payload;
   public $button;

-  public function setUp() {
+  public function setUp(): void {
     $this->title = 'URL Button';
     $this->postback = 'http://www.example.com';
     $this->button = new PostbackButton($this->title, $this->payload);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/fb_messenger_bot/tests/src/Unit/Message/FacebookGenericMessageTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->elements = array(
       array(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/fb_messenger_bot/tests/src/Unit/Message/ButtonMessageTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->text = 'A sample string to accompany button test objects.';
     $this->postbackButton = new PostbackButton('Postback Button', 'POSTBACK_PAYLOAD');
@@ @@

   /**
    * Test invalidArgumentException is thrown when the $buttons parameter contains anything other than \Drupal\fb_messenger_bot\Message\ButtonBase buttons.
-   *
-   * @expectedException InvalidArgumentException
    */
   public function testInvalidButtonObjectThrowsException() {
+    $this->expectException(\InvalidArgumentException::class);
     $button = ['foo' => 'bar'];
     new ButtonMessage($this->text, $button);
     $this->expectException(InvalidArgumentException::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector (https://thephp.cc/news/2016/02/questioning-phpunit-best-practices)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/fb_messenger_bot/tests/src/Unit/ContactControllerTest.php:24

    ---------- begin diff ----------
@@ @@
    * Set up a controller so we dont have to build it each time.
    */

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // stolen from Drupal\Tests\Core\Datetime\DateTest::setUp()
@@ @@
     $container->set('config.factory', $configFactory);
     \Drupal::setContainer($container);

-    $mockRequest = $this->getMockBuilder('Symfony\Component\HttpFoundation\Request')
-      ->getMock();
+    $mockRequest = $this->createMock('Symfony\Component\HttpFoundation\Request');
     $mockRequest->method('getContent')
       ->willReturn($this->getJunkJSON());

-    $mockRequestStack = $this->getMockBuilder('Symfony\Component\HttpFoundation\RequestStack')
-      ->getMock();
+    $mockRequestStack = $this->createMock('Symfony\Component\HttpFoundation\RequestStack');
     $mockRequestStack->method('getCurrentRequest')
       ->willReturn($mockRequest);

-    $mockLogger = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannelInterface')
-      ->getMock();
+    $mockLogger = $this->createMock('Drupal\Core\Logger\LoggerChannelInterface');
     $mockLogger->method('debug')
       ->will($this->returnCallback(function($input) {
         print $input;
       }));

-    $mockFbService = $this->getMockBuilder('Drupal\fb_messenger_bot\FacebookService')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $mockQueueFactory = $this->getMockBuilder('Drupal\Core\Queue\QueueFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockFbService = $this->createMock('Drupal\fb_messenger_bot\FacebookService');
+    $mockQueueFactory = $this->createMock('Drupal\Core\Queue\QueueFactory');

-    $mockFBBot = $this->getMockBuilder('Drupal\fb_messenger_bot\Bot\FBBot')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockFBBot = $this->createMock('Drupal\fb_messenger_bot\Bot\FBBot');

     $this->controller = new ContactController($mockRequestStack, $mockLogger, $mockFbService, $mockQueueFactory, $mockFBBot);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/fb_messenger_bot/tests/src/Kernel/FacebookServiceTranslateRequestTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->service = $this->container->get('fb_messenger_bot.fb_service');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/fb_messenger_bot/tests/src/Kernel/FBMessengerBotWorkflowProcessConversationTest.php:84

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('fb_messenger_bot_conversation');
     $this->installConfig(static::$modules);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/fb_messenger_bot/tests/src/Kernel/FBMessengerBotWorkflowKernelTest.php:60

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('fb_messenger_bot_conversation');
     $this->installConfig(static::$modules);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/fb_messenger_bot/tests/src/Kernel/ConversationFactoryTest.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('fb_messenger_bot_conversation');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/fb_messenger_bot/tests/src/Kernel/BotKernelTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('fb_messenger_bot_conversation');
     $this->installConfig(static::$modules);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 14 files have been changed by Rector                                      

