modules/contrib/bakery/bakery.drush.inc
modules/contrib/bakery/src/Cookies/CookieInterface.php
modules/contrib/bakery/tests/src/Functional/DynamicRoutingTest.php
modules/contrib/bakery/src/Cookies/Gingerbread.php
modules/contrib/bakery/src/Cookies/GingerbreadReturn.php
modules/contrib/bakery/src/Cookies/OatmealCookie.php
modules/contrib/bakery/bakery.install
modules/contrib/bakery/bakery.module
modules/contrib/bakery/src/Cookies/RemoteCookieInterface.php
modules/contrib/bakery/src/Cookies/Stroopwafel.php
modules/contrib/bakery/src/EventSubscriber/BootSubscriber.php
modules/contrib/bakery/tests/src/Functional/MainSiteCookiesTest.php
modules/contrib/bakery/src/BakeryService.php
modules/contrib/bakery/src/BakeryUserHooks.php
modules/contrib/bakery/tests/src/Functional/MainSitePagesTest.php
modules/contrib/bakery/tests/src/Functional/MainSiteTestBase.php
modules/contrib/bakery/tests/src/Kernel/EventSubscriber/BootSubscriberTest.php
modules/contrib/bakery/src/Controller/ChildController.php
modules/contrib/bakery/tests/src/Traits/CookieTestTrait.php
modules/contrib/bakery/tests/src/Traits/RemoteCookieTestTrait.php
modules/contrib/bakery/tests/src/Unit/BakeryServiceTest.php
modules/contrib/bakery/src/EventSubscriber/CookieMonster.php
modules/contrib/bakery/tests/src/Unit/Cookies/BrowserCookieTraitTest.php
modules/contrib/bakery/src/Exception/MissingKeyException.php
modules/contrib/bakery/src/Forms/BakeryPullForm.php
modules/contrib/bakery/src/Controller/ChildDeprecatedController.php
modules/contrib/bakery/tests/src/Unit/Cookies/ChocolateChipTest.php
modules/contrib/bakery/tests/src/Unit/Cookies/GingerbreadReturnTest.php
modules/contrib/bakery/tests/src/Unit/Cookies/GingerbreadTest.php
modules/contrib/bakery/src/Forms/BakerySettingsForm.php
modules/contrib/bakery/tests/src/Unit/Cookies/OatmealCookieTest.php
modules/contrib/bakery/tests/src/Unit/Cookies/StroopwafelTest.php
modules/contrib/bakery/tests/src/Unit/EventSubscriber/CookieMonsterTest.php
modules/contrib/bakery/src/Controller/MainController.php
modules/contrib/bakery/src/Forms/BakeryUncrumbleForm.php
modules/contrib/bakery/tests/src/Unit/KitchenTest.php
modules/contrib/bakery/src/Controller/MainDeprecatedController.php
modules/contrib/bakery/src/Cookies/BrowserCookieTrait.php
modules/contrib/bakery/src/Cookies/ChocolateChip.php
modules/contrib/bakery/src/Kitchen.php
modules/contrib/bakery/src/PageCache/BakeryRequestPolicy.php
modules/contrib/bakery/src/RedirectDestination.php
modules/contrib/bakery/src/Routing/BakeryRoutes.php
modules/contrib/bakery/tests/src/Functional/BakerySiteTestBase.php
modules/contrib/bakery/tests/src/Functional/ChildLoginTest.php
modules/contrib/bakery/tests/src/Functional/ChildSitePagesTest.php
modules/contrib/bakery/tests/src/Functional/ChildSiteTestBase.php

18 files with changes
=====================

1) modules/contrib/bakery/src/Controller/MainDeprecatedController.php:85

    ---------- begin diff ----------
@@ @@
         else {
           // Create user.
           if (!$cookie['data']['pass']) {
-            $pass = user_password();
+            $pass = \Drupal::service('password_generator')->generate();
           }
           else {
             $pass = $cookie['data']['pass'];
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/bakery/src/Controller/ChildDeprecatedController.php:87

    ---------- begin diff ----------
@@ @@
           $language = $this->languageManager()->getCurrentLanguage()->getId();
           $account = User::create();
           // Mandatory settings.
-          $account->setPassword(user_password());
+          $account->setPassword(\Drupal::service('password_generator')->generate());
           $account->enforceIsNew();
           $account->setEmail($cookie['data']['mail']);
           // This username must be unique and accept only a-Z,0-9, - _ @ .
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/bakery/src/BakeryService.php:115

    ---------- begin diff ----------
@@ @@
     $account = User::create([
       'name' => $name,
       // 'mail' => 'email',
-      'pass' => user_password(),
+      'pass' => \Drupal::service('password_generator')->generate(),
       // This username must be unique and accept only a-Z,0-9, - _ @ .
       'init' => 'bakery_temp/' . mt_rand(),
       'langcode', $language,
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * WrapReturnRector


4) modules/contrib/bakery/tests/src/Unit/KitchenTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bakery\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\bakery\Cookies\ChocolateChip;
 use Drupal\bakery\Cookies\Gingerbread;
 use Drupal\bakery\Cookies\Stroopwafel;
@@ @@
  */
 class KitchenTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @var \Drupal\Core\Http\RequestStack
    */
@@ @@
    */
   private $cookieJar;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->request = new RequestStack();
     $this->request->push(new Request());
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/bakery/tests/src/Unit/EventSubscriber/CookieMonsterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bakery\Unit\EventSubscriber;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\bakery\EventSubscriber\CookieMonster;
 use Drupal\Component\Datetime\Time;
 use Drupal\Core\Config\Config;
@@ @@
  */
 class CookieMonsterTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @var \Drupal\bakery\EventSubscriber\CookieMonster
    */
@@ @@
    */
   private $time;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->request = new RequestStack();
     $this->request->push(new Request());
@@ @@
       Cookie::create('cookie1', 'foo', $expire, '/', '.example.com', $secure),
       Cookie::create('cookie2', 'bar', $expire, '/', '.example.com', $secure),
       // This might cause problems with Symfony 5?
-      new Cookie('cookie3', NULL, 1, '/', '.example.com', $secure, TRUE, FALSE, NULL),
-      new Cookie('cookie3', NULL, 1, '/', '', $secure, TRUE, FALSE, NULL),
+      Cookie::create('cookie3', NULL, 1, '/', '.example.com', $secure, TRUE, FALSE, NULL),
+      Cookie::create('cookie3', NULL, 1, '/', '', $secure, TRUE, FALSE, NULL),
     ], $response->headers->getCookies());
   }
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * NewToStaticCallRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/bakery/tests/src/Unit/Cookies/StroopwafelTest.php:13

    ---------- begin diff ----------
@@ @@
 class StroopwafelTest extends UnitTestCase {
   use RemoteCookieTestTrait;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->cookie = Stroopwafel::class;
     $this->cookieName = 'stroopwafel';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/bakery/tests/src/Unit/Cookies/OatmealCookieTest.php:15

    ---------- begin diff ----------
@@ @@
     testGetName as traitGetNameTest;
   }

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->cookie = OatmealCookie::class;
     $this->cookieName = 'OATMEALCOOKIE';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/bakery/tests/src/Unit/Cookies/GingerbreadTest.php:12

    ---------- begin diff ----------
@@ @@

   use RemoteCookieTestTrait;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->cookie = Gingerbread::class;
     $this->cookieName = 'gingerbread';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/bakery/tests/src/Unit/Cookies/GingerbreadReturnTest.php:12

    ---------- begin diff ----------
@@ @@

   use CookieTestTrait;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->cookie = GingerbreadReturn::class;
     $this->cookieName = 'gingerbread';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/bakery/tests/src/Unit/Cookies/ChocolateChipTest.php:16

    ---------- begin diff ----------
@@ @@
     testGetName as traitGetNameTest;
   }

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->cookie = ChocolateChip::class;
     $this->cookieName = 'CHOCOLATECHIP';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/bakery/tests/src/Unit/Cookies/BrowserCookieTraitTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bakery\Unit\Cookies;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\bakery\BakeryService;
 use Drupal\bakery\Cookies\BrowserCookieTrait;
 use Drupal\bakery\Kitchen;
@@ @@
  */
 class BrowserCookieTraitTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @var \Drupal\bakery\Kitchen|\Prophecy\Prophecy\ObjectProphecy
    */
@@ @@
    */
   protected $bakeryService;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $container = new Container();
     $this->kitchenService = $this->prophesize(Kitchen::class);
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/bakery/tests/src/Unit/BakeryServiceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bakery\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\Config;
 use Drupal\Tests\UnitTestCase;

@@ @@
  */
 class BakeryServiceTest extends UnitTestCase {

-  public function setUp() {
+  use ProphecyTrait;
+  public function setUp(): void {
     parent::setUp();
     $this->config = $this->prophesize(Config::class);
     $this->getConfigFactoryStub();
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/bakery/tests/src/Functional/MainSiteTestBase.php:3

    ---------- begin diff ----------
@@ @@

 class MainSiteTestBase extends BakerySiteTestBase {

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->config('bakery.settings')->set('bakery_is_master', 1)->save();
     $this->container->get('router.builder')->rebuild();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/bakery/tests/src/Functional/MainSiteCookiesTest.php:50

    ---------- begin diff ----------
@@ @@
     ], 'Log in');
     $account->sessionId = $this->getSession()->getCookie(\Drupal::service('session_configuration')->getOptions(\Drupal::request())['name']);
     $this->assertFalse($this->drupalUserIsLoggedIn($account), new FormattableMarkup('User %name successfully logged in.', ['%name' => $account->getAccountName()]));
-    $assert_session->assert($this->getSession()->getCookie($cookie_name) === null, 'Cookie is set but should not be.');
+    $this->assertTrue($this->getSession()->getCookie($cookie_name) === null, 'Cookie is set but should not be.');

     $this->drupalLogin($account);
     $assert_session->cookieExists($cookie_name);
@@ @@
     ], 'Log in');
     $account->sessionId = $this->getSession()->getCookie(\Drupal::service('session_configuration')->getOptions(\Drupal::request())['name']);
     $this->assertFalse($this->drupalUserIsLoggedIn($account), new FormattableMarkup('User %name successfully logged in.', ['%name' => $account->getAccountName()]));
-    $assert_session->assert($this->getSession()->getCookie($cookie_name) === null, 'Cookie is set but should not be.');
+    $this->assertTrue($this->getSession()->getCookie($cookie_name) === null, 'Cookie is set but should not be.');

     $this->drupalGet(Url::fromRoute('user.login', [], ['query' => ['bd' => urlencode('https://www.google.org/')]]));
     $this->submitForm([
    ----------- end diff -----------

Applied rules:
 * AssertRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/bakery/tests/src/Functional/DynamicRoutingTest.php:13

    ---------- begin diff ----------
@@ @@
    */
   private $routeProvider;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->routeProvider = $this->container->get('router.route_provider');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/bakery/tests/src/Functional/ChildSiteTestBase.php:6

    ---------- begin diff ----------
@@ @@

 class ChildSiteTestBase extends BakerySiteTestBase {

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->config('bakery.settings')
       ->set('bakery_is_master', 0)
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/bakery/tests/src/Functional/BakerySiteTestBase.php:11

    ---------- begin diff ----------
@@ @@

   private $domain;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->domain = preg_replace('/^[^.]+/', '', rtrim($this->baseUrl, '/'));
     $this->config('bakery.settings')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/bakery/src/EventSubscriber/BootSubscriber.php:5

    ---------- begin diff ----------
@@ @@
  * @file
  * For Boot event subscribe.
  */
-
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\bakery\BakeryService;
 use Drupal\bakery\Cookies\ChocolateChip;
 use Drupal\bakery\Exception\MissingKeyException;
@@ @@
 use Drupal\Core\Url;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * On boot event we need to test the cookie.
    */
-  public function onEvent(GetResponseEvent $event) {
+  public function onEvent(RequestEvent $event) {
     try {
       $cookie = $this->kitchen->taste(Kitchen::CHOCOLATE_CHIP);
     }
@@ @@
     }
   }

-  private function somethingAnonymous(GetResponseEvent $event, array $cookie) {
+  private function somethingAnonymous(RequestEvent $event, array $cookie) {
     // User is anonymous. If they do not have an account we'll create one by
     // requesting their information from the master site. If they do have an
     // account we may need to correct some disparant information.
@@ @@
     return FALSE;
   }

-  private function bootstrapAccount(GetResponseEvent $event, array $cookie) {
+  private function bootstrapAccount(RequestEvent $event, array $cookie) {
     $checks = TRUE;
     /** @var int $mail_count */
     $mail_count = $this->userStorage->getQuery()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


 [OK] 18 files have been changed by Rector                                      

