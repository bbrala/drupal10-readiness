diff --git a/src/EventSubscriber/ExceptionSubscriberBase.php b/src/EventSubscriber/ExceptionSubscriberBase.php
index 9054b03..06b28a7 100644
--- a/src/EventSubscriber/ExceptionSubscriberBase.php
+++ b/src/EventSubscriber/ExceptionSubscriberBase.php
@@ -2,11 +2,11 @@
 
 namespace Drupal\whoops\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Core\EventSubscriber\MainContentViewSubscriber;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\HttpExceptionInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Whoops\Run as Whoops;
@@ -95,12 +95,12 @@ abstract class ExceptionSubscriberBase implements EventSubscriberInterface {
   /**
    * Handles exceptions for this subscriber.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *   The event to process.
    */
-  public function onException(GetResponseForExceptionEvent $event) {
+  public function onException(ExceptionEvent $event) {
     if ($this->applies($event->getRequest())) {
-      $exception = $event->getException();
+      $exception = $event->getThrowable();
       $response = $this->exceptionToResponse($exception);
       $event->setResponse($response);
     }
diff --git a/tests/src/Unit/DefaultExceptionSubscriberTest.php b/tests/src/Unit/DefaultExceptionSubscriberTest.php
index 441b3cd..0e8e3fa 100644
--- a/tests/src/Unit/DefaultExceptionSubscriberTest.php
+++ b/tests/src/Unit/DefaultExceptionSubscriberTest.php
@@ -2,11 +2,12 @@
 
 namespace Drupal\Tests\whoops\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Tests\UnitTestCase;
 use Drupal\whoops\EventSubscriber\DefaultExceptionSubscriber;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\HttpException;
 use Symfony\Component\HttpKernel\HttpKernelInterface;
 
@@ -16,6 +17,7 @@ use Symfony\Component\HttpKernel\HttpKernelInterface;
  */
 class DefaultExceptionSubscriberTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The mocked HTTP kernel.
    *
@@ -26,7 +28,7 @@ class DefaultExceptionSubscriberTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->kernel = $this->prophesize(HttpKernelInterface::class)->reveal();
@@ -39,7 +41,7 @@ class DefaultExceptionSubscriberTest extends UnitTestCase {
     $request = Request::create('/whoops');
 
     $exception = new \RuntimeException('Houston, we have a problem');
-    $event = new GetResponseForExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
+    $event = new ExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
 
     $subscriber = new DefaultExceptionSubscriber();
     $subscriber->onException($event);
@@ -61,7 +63,7 @@ class DefaultExceptionSubscriberTest extends UnitTestCase {
     $request->setRequestFormat('unknown');
 
     $exception = new \Exception('Houston, we have a problem');
-    $event = new GetResponseForExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
+    $event = new ExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
 
     $subscriber = new DefaultExceptionSubscriber();
     $subscriber->onException($event);
@@ -87,7 +89,7 @@ class DefaultExceptionSubscriberTest extends UnitTestCase {
       'X-Custom' => 'test',
     ];
     $exception = new HttpException(406, 'Houston, we have a problem', NULL, $headers);
-    $event = new GetResponseForExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
+    $event = new ExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
 
     $subscriber = new DefaultExceptionSubscriber();
     $subscriber->onException($event);
diff --git a/tests/src/Unit/JsonExceptionSubscriberTest.php b/tests/src/Unit/JsonExceptionSubscriberTest.php
index ccd8320..a7f3b50 100644
--- a/tests/src/Unit/JsonExceptionSubscriberTest.php
+++ b/tests/src/Unit/JsonExceptionSubscriberTest.php
@@ -2,11 +2,12 @@
 
 namespace Drupal\Tests\whoops\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Tests\UnitTestCase;
 use Drupal\whoops\EventSubscriber\JsonExceptionSubscriber;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\HttpException;
 use Symfony\Component\HttpKernel\HttpKernelInterface;
 
@@ -16,6 +17,7 @@ use Symfony\Component\HttpKernel\HttpKernelInterface;
  */
 class JsonExceptionSubscriberTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The mocked HTTP kernel.
    *
@@ -26,7 +28,7 @@ class JsonExceptionSubscriberTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->kernel = $this->prophesize(HttpKernelInterface::class)->reveal();
@@ -40,7 +42,7 @@ class JsonExceptionSubscriberTest extends UnitTestCase {
     $request->setRequestFormat('json');
 
     $exception = new \RuntimeException('Houston, we have a problem');
-    $event = new GetResponseForExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
+    $event = new ExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
 
     $subscriber = new JsonExceptionSubscriber();
     $subscriber->onException($event);
@@ -68,7 +70,7 @@ class JsonExceptionSubscriberTest extends UnitTestCase {
     $request->setRequestFormat('hal_json');
 
     $exception = new \RuntimeException('Houston, we have a problem');
-    $event = new GetResponseForExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
+    $event = new ExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
 
     $subscriber = new JsonExceptionSubscriber();
     $subscriber->onException($event);
@@ -96,7 +98,7 @@ class JsonExceptionSubscriberTest extends UnitTestCase {
     $request->setRequestFormat('html');
 
     $exception = new \Exception('Houston, we have a problem');
-    $event = new GetResponseForExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
+    $event = new ExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
 
     $subscriber = new JsonExceptionSubscriber();
     $subscriber->onException($event);
@@ -116,7 +118,7 @@ class JsonExceptionSubscriberTest extends UnitTestCase {
       'X-Custom' => 'test',
     ];
     $exception = new HttpException(406, 'Houston, we have a problem', NULL, $headers);
-    $event = new GetResponseForExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
+    $event = new ExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
 
     $subscriber = new JsonExceptionSubscriber();
     $subscriber->onException($event);
