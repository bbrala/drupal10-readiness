modules/contrib/template_whisperer/inc/access.inc
modules/contrib/template_whisperer/src/TemplateWhispererSuggestionListBuilder.php
modules/contrib/template_whisperer/tests/src/Kernel/TwigExtensionTest.php
modules/contrib/template_whisperer/inc/help.inc
modules/contrib/template_whisperer/inc/rm_cardinality.inc
modules/contrib/template_whisperer/inc/suggestions/entity.inc
modules/contrib/template_whisperer/inc/suggestions/page.inc
modules/contrib/template_whisperer/src/TemplateWhispererSuggestionUsage.php
modules/contrib/template_whisperer/inc/tokens.inc
modules/contrib/template_whisperer/tests/src/Traits/InvokeMethodTrait.php
modules/contrib/template_whisperer/src/Controller/AdminSuggestionController.php
modules/contrib/template_whisperer/src/TwigExtension/TwigExtension.php
modules/contrib/template_whisperer/template_whisperer.install
modules/contrib/template_whisperer/template_whisperer.module
modules/contrib/template_whisperer/tests/src/Functional/ConditionalBlockTest.php
modules/contrib/template_whisperer/src/Entity/TemplateWhispererSuggestionEntity.php
modules/contrib/template_whisperer/src/Entity/TemplateWhispererSuggestionEntityInterface.php
modules/contrib/template_whisperer/src/Form/TemplateWhispererSuggestionDeleteForm.php
modules/contrib/template_whisperer/src/Form/TemplateWhispererSuggestionForm.php
modules/contrib/template_whisperer/src/Plugin/Condition/TemplateWhisperer.php
modules/contrib/template_whisperer/src/Plugin/Field/FieldFormatter/TemplateWhispererFormatter.php
modules/contrib/template_whisperer/src/Plugin/Field/FieldType/TemplateWhispererFieldItem.php
modules/contrib/template_whisperer/src/Plugin/Field/FieldWidget/TemplateWhispererWidget.php
modules/contrib/template_whisperer/tests/src/Functional/SuggestionTokenReplaceTest.php
modules/contrib/template_whisperer/src/TemplateWhispererManager.php
modules/contrib/template_whisperer/tests/src/Functional/TemplateWhispererTestBase.php
modules/contrib/template_whisperer/tests/src/Functional/UiFieldTest.php
modules/contrib/template_whisperer/tests/src/Functional/UiPageTest.php
modules/contrib/template_whisperer/tests/src/Functional/WidgetFormElementTest.php
modules/contrib/template_whisperer/tests/src/Kernel/FieldTemplateWhispererTest.php
modules/contrib/template_whisperer/tests/src/Kernel/TemplateWhispererManagerTest.php

5 files with changes
====================

1) modules/contrib/template_whisperer/tests/src/Kernel/TemplateWhispererManagerTest.php:111

    ---------- begin diff ----------
@@ @@
       $entity,
       'field_template_whisperer',
     ]);
-    $this->assertEqual('foo', $suggestions);
+    $this->assertEquals('foo', $suggestions);

     // Set an none-existing template whisperer.
     // This may happend when an whisperer is deleted but stay on node data.
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/template_whisperer/tests/src/Kernel/FieldTemplateWhispererTest.php:108

    ---------- begin diff ----------
@@ @@

     $this->assertTrue($entity->field_template_whisperer instanceof FieldItemListInterface, 'Field implements interface.');
     $this->assertTrue($entity->field_template_whisperer[0] instanceof FieldItemInterface, 'Field item implements interface.');
-    $this->assertEqual($entity->field_template_whisperer->target_id, $target_id);
-    $this->assertEqual($entity->field_template_whisperer[0]->target_id, $target_id);
+    $this->assertEquals($entity->field_template_whisperer->target_id, $target_id);
+    $this->assertEquals($entity->field_template_whisperer[0]->target_id, $target_id);

     // Verify changing the field's value.
     $new_target_id = $this->suggestions['bar']->getSuggestion();
     $entity->field_template_whisperer->value = $new_target_id;
-    $this->assertEqual($entity->field_template_whisperer->value, $new_target_id);
+    $this->assertEquals($entity->field_template_whisperer->value, $new_target_id);

     // Read changed entity and assert changed values.
     $entity->save();
     $entity = $type_manager->getStorage('entity_test')->load($id);
-    $this->assertEqual($entity->field_template_whisperer->target_id, $target_id);
-    $this->assertEqual($entity->field_template_whisperer[0]->target_id, $target_id);
+    $this->assertEquals($entity->field_template_whisperer->target_id, $target_id);
+    $this->assertEquals($entity->field_template_whisperer[0]->target_id, $target_id);
   }

   /**
@@ @@

     foreach ($scenarios as $operation => $expected) {
       $result = $entity->field_template_whisperer->access($operation, $test_user);
-      $this->assertEqual($result, $expected);
+      $this->assertEquals($result, $expected);
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/template_whisperer/tests/src/Functional/UiFieldTest.php:75

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $this->debugOff();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/template_whisperer/tests/src/Functional/SuggestionTokenReplaceTest.php:108

    ---------- begin diff ----------
@@ @@

     // Suggestion tokens.
     $replacement = $token_service->replace('[suggestion:name]', ['suggestion' => $this->suggestions['foo']], $options);
-    $this->assertEqual($replacement, $this->suggestions['foo']->getName());
+    $this->assertEquals($replacement, $this->suggestions['foo']->getName());

     // Chainable Lookup -> Suggestion tokens.
     $replacement = $token_service->replace('[suggestion:lookup:foo]', [], $options);
-    $this->assertEqual($replacement, $this->suggestions['foo']->getSuggestion());
+    $this->assertEquals($replacement, $this->suggestions['foo']->getSuggestion());
     $replacement = $token_service->replace('[suggestion:lookup:foo:name]', [], $options);
-    $this->assertEqual($replacement, $this->suggestions['foo']->getName());
+    $this->assertEquals($replacement, $this->suggestions['foo']->getName());

     // Chainable Lookup -> Entity tokens.
     $replacement = $token_service->replace('[suggestion:lookup:foo:entity:nid]', [], $options);
-    $this->assertEqual($replacement, $this->testNode->id());
+    $this->assertEquals($replacement, $this->testNode->id());
     $replacement = $token_service->replace('[suggestion:lookup:foo:entity:url]', [], $options);
-    $this->assertEqual($replacement, $this->testNode->toUrl('canonical', ['absolute' => TRUE])->toString());
+    $this->assertEquals($replacement, $this->testNode->toUrl('canonical', ['absolute' => TRUE])->toString());

     // Tests invalide token for node.
     $replacement = $token_service->replace('[suggestion:lookup:foo:entity]', [], $options);
-    $this->assertEqual($replacement, '[suggestion:lookup:foo:entity]');
+    $this->assertEquals($replacement, '[suggestion:lookup:foo:entity]');
   }

   /**
@@ @@

     // Tests inexisting suggestion.
     $replacement = $token_service->replace('[suggestion:lookup:baz:entity:id]', [], $options);
-    $this->assertEqual($replacement, '[suggestion:lookup:baz:entity:id]');
+    $this->assertEquals($replacement, '[suggestion:lookup:baz:entity:id]');
   }

   /**
@@ @@

     // Tests existing but non-used suggestion.
     $replacement = $token_service->replace('[suggestion:lookup:bar:entity:id]', [], $options);
-    $this->assertEqual($replacement, '[suggestion:lookup:bar:entity:id]');
+    $this->assertEquals($replacement, '[suggestion:lookup:bar:entity:id]');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/template_whisperer/tests/src/Functional/ConditionalBlockTest.php:273

    ---------- begin diff ----------
@@ @@
     // Update the placed block to be visible only on "Timeline".
     $this->drupalGet('admin/structure/block/manage/' . $this->blocks[0]->id());
     $edit['visibility[template_whisperer][suggestions][' . $this->suggestions[0]->id() . ']'] = TRUE;
-    $this->drupalPostForm(NULL, $edit, 'Save block');
+    $this->submitForm($edit, 'Save block');

     // Asserts the configurations has been saved.
     $this->assertSession()->pageTextContains('The block configuration has been saved');
@@ @@
     $this->drupalGet('admin/structure/block/manage/' . $this->blocks[0]->id());
     $edit['visibility[template_whisperer][suggestions][' . $this->suggestions[0]->id() . ']'] = TRUE;
     $edit['visibility[template_whisperer][suggestions][' . $this->suggestions[1]->id() . ']'] = TRUE;
-    $this->drupalPostForm(NULL, $edit, 'Save block');
+    $this->submitForm($edit, 'Save block');
     // Asserts the configurations has been saved.
     $this->assertSession()->pageTextContains('The block configuration has been saved');
     $this->clickLink('Configure');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 5 files have been changed by Rector                                       

