modules/contrib/views_date_format_sql/src/Plugin/ViewsDateFormatSqlPluginDefinition.php
modules/contrib/views_date_format_sql/src/Plugin/ViewsDateFormatSqlPluginInterface.php
modules/contrib/views_date_format_sql/src/Plugin/views/argument/ViewsDateFormatSqlArgument.php
modules/contrib/views_date_format_sql/src/Plugin/views/field/ViewsDateFormatSqlField.php
modules/contrib/views_date_format_sql/tests/src/Functional/ViewsDateFormatSqlUninstallTest.php
modules/contrib/views_date_format_sql/tests/src/Kernel/ViewsDateFormatSqlDependenciesTest.php
modules/contrib/views_date_format_sql/views_date_format_sql.module
modules/contrib/views_date_format_sql/views_date_format_sql.post_update.php
modules/contrib/views_date_format_sql/views_date_format_sql.views.inc

3 files with changes
====================

1) modules/contrib/views_date_format_sql/views_date_format_sql.views.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\field\Entity\FieldStorageConfig;
 /**
  * @file
  * This file contains the hook to assign this handler as default to date fields.
  */
-
 /**
  * Implements hook_views_data_alter().
  */
@@ @@
     foreach ($table as $id => &$field) {
       // check to see if the field being used here is a field_api timestamp
       if(!empty($field['field']['entity_type']) && !empty($field['field']['field_name'])){
-        $field_storage = \Drupal\field\Entity\FieldStorageConfig::loadByName($field['field']['entity_type'], $field['field']['field_name']);
+        $field_storage = FieldStorageConfig::loadByName($field['field']['entity_type'], $field['field']['field_name']);
         if($field_storage && $field_storage->getType() == 'timestamp') {
           $field['field']['id'] = 'views_date_format_sql_field';
         }
       }
       elseif(!empty($field['argument']['entity_type']) && !empty($field['argument']['field_name'])){
-        $field_storage = \Drupal\field\Entity\FieldStorageConfig::loadByName($field['argument']['entity_type'], $field['argument']['field_name']);
+        $field_storage = FieldStorageConfig::loadByName($field['argument']['entity_type'], $field['argument']['field_name']);
         if($field_storage && $field_storage->getType() == 'timestamp') {
           $field['argument']['id'] = 'views_date_format_sql_argument';
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/views_date_format_sql/tests/src/Kernel/ViewsDateFormatSqlDependenciesTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('user', ['users_data']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/views_date_format_sql/tests/src/Functional/ViewsDateFormatSqlUninstallTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $privilegedUser = $this->createUser([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

