diff --git a/elasticsearch_helper.api.php b/elasticsearch_helper.api.php
index 50fed93..e5b12a0 100644
--- a/elasticsearch_helper.api.php
+++ b/elasticsearch_helper.api.php
@@ -1,5 +1,6 @@
 <?php
 
+use Elasticsearch\ClientBuilder;
 /**
  * @file
  * Hooks provided by the elasticsearch_helper module.
@@ -18,7 +19,7 @@ use \Drupal\Core\Entity\Query\QueryInterface;
  * @param \Elasticsearch\ClientBuilder
  *   The ClientBuilder object.
  */
-function hook_elasticsearch_helper_client_builder_alter(\Elasticsearch\ClientBuilder $clientBuilder) {
+function hook_elasticsearch_helper_client_builder_alter(ClientBuilder $clientBuilder) {
   // Send log entries from the client directly to Drupal's log.
   $clientBuilder->setLogger(\Drupal::logger('elasticsearch'));
 }
diff --git a/src/Elasticsearch/DataType/DataTypeRepository.php b/src/Elasticsearch/DataType/DataTypeRepository.php
index c851caa..e1b1030 100644
--- a/src/Elasticsearch/DataType/DataTypeRepository.php
+++ b/src/Elasticsearch/DataType/DataTypeRepository.php
@@ -98,7 +98,7 @@ class DataTypeRepository implements DataTypeRepositoryInterface {
 
         // Allow modules to alter the definitions.
         $event = new DataTypeDefinitionBuildEvent($definitions);
-        $this->eventDispatcher->dispatch(DataTypeEvents::BUILD, $event);
+        $this->eventDispatcher->dispatch($event, DataTypeEvents::BUILD);
 
         // Store in cache.
         $this->cacheSet($this->cacheId, $event->getDataTypeDefinitions(), Cache::PERMANENT, $this->getCacheTags());
diff --git a/src/ElasticsearchRequestWrapper.php b/src/ElasticsearchRequestWrapper.php
index 0ca4a42..48f7c79 100644
--- a/src/ElasticsearchRequestWrapper.php
+++ b/src/ElasticsearchRequestWrapper.php
@@ -123,7 +123,7 @@ class ElasticsearchRequestWrapper implements ElasticsearchRequestWrapperInterfac
     // Create request event.
     $request_event = new ElasticsearchOperationRequestEvent($this);
     // Dispatch the request event.
-    $this->getEventDispatcher()->dispatch(ElasticsearchEvents::OPERATION_REQUEST, $request_event);
+    $this->getEventDispatcher()->dispatch($request_event, ElasticsearchEvents::OPERATION_REQUEST);
 
     // Execute the request.
     $result = $this->executeCallback();
@@ -152,7 +152,7 @@ class ElasticsearchRequestWrapper implements ElasticsearchRequestWrapperInterfac
    */
   protected function dispatchRequestResultEvent(ElasticsearchRequestResultInterface $result) {
     $result_event = new ElasticsearchOperationRequestResultEvent($result);
-    $this->getEventDispatcher()->dispatch(ElasticsearchEvents::OPERATION_REQUEST_RESULT, $result_event);
+    $this->getEventDispatcher()->dispatch($result_event, ElasticsearchEvents::OPERATION_REQUEST_RESULT);
   }
 
   /**
diff --git a/src/Event/DataTypeDefinitionBuildEvent.php b/src/Event/DataTypeDefinitionBuildEvent.php
index f6dd166..f31f2a7 100644
--- a/src/Event/DataTypeDefinitionBuildEvent.php
+++ b/src/Event/DataTypeDefinitionBuildEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\elasticsearch_helper\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class DataTypeDefinitionBuildEvent
diff --git a/src/Event/ElasticsearchHelperCallbackEvent.php b/src/Event/ElasticsearchHelperCallbackEvent.php
index c38966c..c3b6d42 100644
--- a/src/Event/ElasticsearchHelperCallbackEvent.php
+++ b/src/Event/ElasticsearchHelperCallbackEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\elasticsearch_helper\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Elasticsearch Helper callback event.
diff --git a/src/Event/ElasticsearchOperationErrorEvent.php b/src/Event/ElasticsearchOperationErrorEvent.php
index 31bb068..9b96cac 100644
--- a/src/Event/ElasticsearchOperationErrorEvent.php
+++ b/src/Event/ElasticsearchOperationErrorEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\elasticsearch_helper\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\elasticsearch_helper\ElasticsearchRequestWrapperInterface;
 use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Elasticsearch operation error event.
diff --git a/src/Event/ElasticsearchOperationEvent.php b/src/Event/ElasticsearchOperationEvent.php
index 6ff9d7d..c952a82 100644
--- a/src/Event/ElasticsearchOperationEvent.php
+++ b/src/Event/ElasticsearchOperationEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\elasticsearch_helper\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Elasticsearch operation event.
diff --git a/src/Event/ElasticsearchOperationRequestEvent.php b/src/Event/ElasticsearchOperationRequestEvent.php
index 5ac7927..18df7fc 100644
--- a/src/Event/ElasticsearchOperationRequestEvent.php
+++ b/src/Event/ElasticsearchOperationRequestEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\elasticsearch_helper\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\elasticsearch_helper\ElasticsearchRequestWrapperInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Elasticsearch operation request event.
diff --git a/src/Event/ElasticsearchOperationRequestResultEvent.php b/src/Event/ElasticsearchOperationRequestResultEvent.php
index 8c01fba..7a4e42d 100644
--- a/src/Event/ElasticsearchOperationRequestResultEvent.php
+++ b/src/Event/ElasticsearchOperationRequestResultEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\elasticsearch_helper\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\elasticsearch_helper\ElasticsearchRequestResultInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Elasticsearch operation request result event.
diff --git a/src/Plugin/ElasticsearchIndexBase.php b/src/Plugin/ElasticsearchIndexBase.php
index 92d8b43..d96e307 100644
--- a/src/Plugin/ElasticsearchIndexBase.php
+++ b/src/Plugin/ElasticsearchIndexBase.php
@@ -171,7 +171,7 @@ abstract class ElasticsearchIndexBase extends PluginBase implements Elasticsearc
    */
   protected function dispatchOperationEvent($operation, $source = NULL) {
     $event = new ElasticsearchOperationEvent($operation, $this, $source);
-    $this->getEventDispatcher()->dispatch(ElasticsearchEvents::OPERATION, $event);
+    $this->getEventDispatcher()->dispatch($event, ElasticsearchEvents::OPERATION);
 
     return $event;
   }
@@ -188,7 +188,7 @@ abstract class ElasticsearchIndexBase extends PluginBase implements Elasticsearc
    */
   protected function dispatchOperationErrorEvent(\Throwable $error, $operation, ElasticsearchRequestWrapperInterface $request_wrapper = NULL, $source = NULL) {
     $event = new ElasticsearchOperationErrorEvent($error, $operation, $this, $request_wrapper, $source);
-    $this->getEventDispatcher()->dispatch(ElasticsearchEvents::OPERATION_ERROR, $event);
+    $this->getEventDispatcher()->dispatch($event, ElasticsearchEvents::OPERATION_ERROR);
 
     return $event;
   }
@@ -545,7 +545,7 @@ abstract class ElasticsearchIndexBase extends PluginBase implements Elasticsearc
           $params = [$entity_type, $bundle];
 
           $event = new ElasticsearchHelperCallbackEvent($operation, $callback, $params, $this);
-          $this->getEventDispatcher()->dispatch($operation, $event);
+          $this->getEventDispatcher()->dispatch($event, $operation);
 
           call_user_func_array($event->getCallback(), $event->getCallbackParameters());
         }
diff --git a/tests/src/Kernel/IndexMappingTest.php b/tests/src/Kernel/IndexMappingTest.php
index 8f5b424..deeb282 100644
--- a/tests/src/Kernel/IndexMappingTest.php
+++ b/tests/src/Kernel/IndexMappingTest.php
@@ -35,7 +35,7 @@ class IndexMappingTest extends EntityKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installConfig(['elasticsearch_helper']);
@@ -89,10 +89,10 @@ class IndexMappingTest extends EntityKernelTestBase {
       $properties = $response[$index_name]['mappings']['node']['properties'];
     }
 
-    $this->assertEqual($properties['id']['type'], 'integer', 'ID field is found');
-    $this->assertEqual($properties['status']['type'], 'boolean', 'Status field is found');
-    $this->assertEqual($properties['title']['type'], 'text', 'Title field is found');
-    $this->assertEqual($properties['uuid']['type'], 'keyword', 'UUID field is found');
+    $this->assertEquals($properties['id']['type'], 'integer', 'ID field is found');
+    $this->assertEquals($properties['status']['type'], 'boolean', 'Status field is found');
+    $this->assertEquals($properties['title']['type'], 'text', 'Title field is found');
+    $this->assertEquals($properties['uuid']['type'], 'keyword', 'UUID field is found');
   }
 
   /**
@@ -114,7 +114,7 @@ class IndexMappingTest extends EntityKernelTestBase {
       ]
     ];
 
-    $this->assertEqual($mapping_definition->toArray(), $expected);
+    $this->assertEquals($mapping_definition->toArray(), $expected);
   }
 
 }
diff --git a/tests/src/Kernel/IndexTest.php b/tests/src/Kernel/IndexTest.php
index ebb3105..198b1ee 100644
--- a/tests/src/Kernel/IndexTest.php
+++ b/tests/src/Kernel/IndexTest.php
@@ -34,7 +34,7 @@ class IndexTest extends EntityKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installConfig(['elasticsearch_helper']);
@@ -121,8 +121,8 @@ class IndexTest extends EntityKernelTestBase {
 
     $response = $this->queryIndex($this->node->id());
 
-    $this->assertEqual($response['hits']['hits'][0]['_source']['title'], $this->node->getTitle(), 'Title field is found in document');
-    $this->assertEqual($response['hits']['hits'][0]['_source']['status'], TRUE, 'Status field is found in document');
+    $this->assertEquals($response['hits']['hits'][0]['_source']['title'], $this->node->getTitle(), 'Title field is found in document');
+    $this->assertEquals($response['hits']['hits'][0]['_source']['status'], TRUE, 'Status field is found in document');
   }
 
   /**
@@ -137,7 +137,7 @@ class IndexTest extends EntityKernelTestBase {
 
     $response = $this->queryIndex($this->node->id());
 
-    $this->assertEqual($response['hits']['hits'][0]['_source']['title'], $this->node->getTitle(), 'Title field is found in document');
+    $this->assertEquals($response['hits']['hits'][0]['_source']['title'], $this->node->getTitle(), 'Title field is found in document');
 
     // Update the node title.
     $new_title = $this->randomMachineName();
@@ -149,7 +149,7 @@ class IndexTest extends EntityKernelTestBase {
 
     $response = $this->queryIndex($this->node->id());
 
-    $this->assertEqual($response['hits']['hits'][0]['_source']['title'], $new_title, 'Title field is found in document');
+    $this->assertEquals($response['hits']['hits'][0]['_source']['title'], $new_title, 'Title field is found in document');
   }
 
   /**
@@ -164,7 +164,7 @@ class IndexTest extends EntityKernelTestBase {
 
     $response = $this->queryIndex($this->node->id());
 
-    $this->assertEqual($response['hits']['hits'][0]['_source']['title'], $this->node->getTitle(), 'Title field is found in document');
+    $this->assertEquals($response['hits']['hits'][0]['_source']['title'], $this->node->getTitle(), 'Title field is found in document');
 
     // Delete node.
     $this->node->delete();
diff --git a/tests/src/Kernel/QueueWorkerTest.php b/tests/src/Kernel/QueueWorkerTest.php
index 4e56cfe..c3f3f5d 100644
--- a/tests/src/Kernel/QueueWorkerTest.php
+++ b/tests/src/Kernel/QueueWorkerTest.php
@@ -31,7 +31,7 @@ class QueueWorkerTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
     $this->installEntitySchema('node');
@@ -79,12 +79,12 @@ class QueueWorkerTest extends KernelTestBase {
 
     // Process the queue items and ensure that index was updated too.
     $item = $queue->claimItem();
-    $this->assertEqual($node1->id(), $item->data['entity_id'], 'Item in the queue is not same as created node entity');
+    $this->assertEquals($node1->id(), $item->data['entity_id'], 'Item in the queue is not same as created node entity');
     $queue_worker->processItem($item->data);
     $queue->deleteItem($item);
 
     $item = $queue->claimItem();
-    $this->assertEqual($node2->id(), $item->data['entity_id'], 'Item in the queue is not same as created node entity');
+    $this->assertEquals($node2->id(), $item->data['entity_id'], 'Item in the queue is not same as created node entity');
     $queue_worker->processItem($item->data);
     $queue->deleteItem($item);
 
diff --git a/tests/src/Kernel/UniqueQueueTest.php b/tests/src/Kernel/UniqueQueueTest.php
index d67abac..7f78cd1 100644
--- a/tests/src/Kernel/UniqueQueueTest.php
+++ b/tests/src/Kernel/UniqueQueueTest.php
@@ -27,7 +27,7 @@ class UniqueQueueTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['elasticsearch_helper']);
   }
