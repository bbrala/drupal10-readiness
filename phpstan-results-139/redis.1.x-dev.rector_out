modules/contrib/redis/redis.install
modules/contrib/redis/src/Flood/Predis.php
modules/contrib/redis/tests/src/Kernel/RedisQueueTest.php
modules/contrib/redis/redis.module
modules/contrib/redis/src/Cache/CacheBackendFactory.php
modules/contrib/redis/src/Cache/CacheBase.php
modules/contrib/redis/src/Lock/LockFactory.php
modules/contrib/redis/src/Lock/PhpRedis.php
modules/contrib/redis/tests/src/Traits/RedisTestInterfaceTrait.php
modules/contrib/redis/src/Lock/Predis.php
modules/contrib/redis/src/PersistentLock/PhpRedis.php
modules/contrib/redis/src/PersistentLock/Predis.php
modules/contrib/redis/src/Queue/PhpRedis.php
modules/contrib/redis/src/Queue/Predis.php
modules/contrib/redis/src/Cache/PhpRedis.php
modules/contrib/redis/src/Cache/Predis.php
modules/contrib/redis/src/Queue/QueueBase.php
modules/contrib/redis/src/Queue/QueueRedisFactory.php
modules/contrib/redis/src/Queue/ReliablePhpRedis.php
modules/contrib/redis/src/Cache/RedisCacheTagsChecksum.php
modules/contrib/redis/src/Client/PhpRedis.php
modules/contrib/redis/src/Queue/ReliablePredis.php
modules/contrib/redis/src/Client/Predis.php
modules/contrib/redis/src/ClientFactory.php
modules/contrib/redis/src/Queue/ReliableQueueBase.php
modules/contrib/redis/src/Queue/ReliableQueueRedisFactory.php
modules/contrib/redis/src/RedisPrefixTrait.php
modules/contrib/redis/src/ClientInterface.php
modules/contrib/redis/src/Controller/ReportController.php
modules/contrib/redis/tests/src/Functional/Lock/RedisLockFunctionalTest.php
modules/contrib/redis/tests/src/Functional/WebTest.php
modules/contrib/redis/src/Flood/FloodFactory.php
modules/contrib/redis/src/Flood/PhpRedis.php
modules/contrib/redis/tests/src/Kernel/RedisCacheTest.php
modules/contrib/redis/tests/src/Kernel/RedisFloodTest.php
modules/contrib/redis/tests/src/Kernel/RedisLockTest.php

7 files with changes
====================

1) modules/contrib/redis/src/Controller/ReportController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\redis\Controller;

+use Predis\Client;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Url;
@@ @@
         yield from $keys;
       }
     }
-    elseif ($this->redis instanceof \Predis\Client) {
+    elseif ($this->redis instanceof Client) {
       yield from new Keyspace($this->redis, $match, $count);
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/redis/src/Cache/Predis.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\redis\Cache;

+use Predis\Client;
 use Drupal\Component\Serialization\SerializationInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheTagsChecksumInterface;
@@ @@
    * @param \Drupal\redis\Cache\SerializationInterface $serializer
    *   The serialization class to use.
    */
-  public function __construct($bin, \Predis\Client $client, CacheTagsChecksumInterface $checksum_provider, SerializationInterface $serializer) {
+  public function __construct($bin, Client $client, CacheTagsChecksumInterface $checksum_provider, SerializationInterface $serializer) {
     parent::__construct($bin, $serializer);
     $this->client = $client;
     $this->checksumProvider = $checksum_provider;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/redis/src/Cache/CacheBase.php:312

    ---------- begin diff ----------
@@ @@
     // Check expire time, allow to have a cache invalidated explicitly, don't
     // check if already invalid.
     if ($cache->valid) {
-      $cache->valid = $cache->expire == Cache::PERMANENT || $cache->expire >= REQUEST_TIME;
+      $cache->valid = $cache->expire == Cache::PERMANENT || $cache->expire >= \Drupal::time()->getRequestTime();

       // Check if invalidateTags() has been called with any of the items's tags.
       if ($cache->valid && !$this->checksumProvider->isValid($cache->checksum, $cache->tags)) {
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector


4) modules/contrib/redis/tests/src/Functional/WebTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('system_breadcrumb_block');
@@ @@
       'default' => 'cache.backend.redis',
     ];

-    $settings['container_yamls'][] = drupal_get_path('module', 'redis') . '/example.services.yml';
+    $settings['container_yamls'][] = \Drupal::service('extension.list.module')->getPath('redis') . '/example.services.yml';

     $settings['bootstrap_container_definition'] = [
       'parameters' => [],
@@ @@
     $contents = file_get_contents($filename);

     // Add the container_yaml and cache definition.
-    $contents .= "\n\n" . '$settings["container_yamls"][] = "' . drupal_get_path('module', 'redis') . '/example.services.yml";';
+    $contents .= "\n\n" . '$settings["container_yamls"][] = "' . \Drupal::service('extension.list.module')->getPath('redis') . '/example.services.yml";';
     $contents .= "\n\n" . '$settings["cache"] = ' . var_export($settings['cache'], TRUE) . ';';
     $contents .= "\n\n" . '$settings["redis_compress_length"] = 100;';

     // Add the classloader.
-    $contents .= "\n\n" . '$class_loader->addPsr4(\'Drupal\\\\redis\\\\\', \'' . drupal_get_path('module', 'redis') . '/src\');';
+    $contents .= "\n\n" . '$class_loader->addPsr4(\'Drupal\\\\redis\\\\\', \'' . \Drupal::service('extension.list.module')->getPath('redis') . '/src\');';

     // Add the bootstrap container definition.
     $contents .= "\n\n" . '$settings["bootstrap_container_definition"] = ' . var_export($settings['bootstrap_container_definition'], TRUE) . ';';
@@ @@
     $edit["modules[views][enable]"] = TRUE;
     $edit["modules[field_ui][enable]"] = TRUE;
     $edit["modules[text][enable]"] = TRUE;
-    $this->drupalPostForm('admin/modules', $edit, t('Install'));
-    $this->drupalPostForm(NULL, [], t('Continue'));
+    $this->drupalGet('admin/modules');
+    $this->submitForm($edit, t('Install'));
+    $this->submitForm([], t('Continue'));

     $assert = $this->assertSession();

@@ @@
       'name' => $this->randomString(),
       'type' => $node_type = mb_strtolower($this->randomMachineName()),
     ];
-    $this->drupalPostForm('admin/structure/types/add', $edit, t('Save and manage fields'));
+    $this->drupalGet('admin/structure/types/add');
+    $this->submitForm($edit, t('Save and manage fields'));
     $field_name = mb_strtolower($this->randomMachineName());
     $this->fieldUIAddNewField('admin/structure/types/manage/' . $node_type, $field_name, NULL, 'text');

@@ @@
       'body[0][value]' => $this->randomMachineName(),
       'field_' . $field_name . '[0][value]' => $this->randomMachineName(),
     ];
-    $this->drupalPostForm('node/add/' . $node_type, $edit, t('Save'));
+    $this->drupalGet('node/add/' . $node_type);
+    $this->submitForm($edit, t('Save'));

     // Test the output as anonymous user.
     $this->drupalLogout();
@@ @@
     $update = [
       'title[0][value]' => $this->randomMachineName(),
     ];
-    $this->drupalPostForm(NULL, $update, t('Save'));
+    $this->submitForm($update, t('Save'));
     $this->assertSession()->responseContains($update['title[0][value]']);
     $this->drupalGet('node');
     $this->assertSession()->responseContains($update['title[0][value]']);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/redis/tests/src/Functional/Lock/RedisLockFunctionalTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Write the containers_yaml update by hand, since writeSettings() doesn't
@@ @@
     chmod($filename, 0666);
     $contents = file_get_contents($filename);
     $redis_interface = self::getRedisInterfaceEnv();
-    $module_path = drupal_get_path('module', 'redis');
+    $module_path = \Drupal::service('extension.list.module')->getPath('redis');
     $contents .= "\n\n" . "\$settings['container_yamls'][] = '$module_path/example.services.yml';";
     $contents .= "\n\n" . '$settings["redis.connection"]["interface"] = \'' . $redis_interface . '\';';
     file_put_contents($filename, $contents);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/redis/src/Queue/ReliablePredis.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\redis\Queue;

+use Predis\Client;
 /**
  * Redis queue implementation using Predis library backend.
  *
@@ @@
    * @param \Predis\Client $client
    *   The Predis client.
    */
-  public function __construct($name, array $settings, \Predis\Client $client) {
+  public function __construct($name, array $settings, Client $client) {
     parent::__construct($name, $settings);
     $this->client = $client;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/redis/src/Queue/Predis.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\redis\Queue;

+use Predis\Client;
 /**
  * Redis queue implementation using Predis library backend.
  *
@@ @@
    * @param \Predis\Client $client
    *   The Predis client.
    */
-  public function __construct($name, array $settings, \Predis\Client $client) {
+  public function __construct($name, array $settings, Client $client) {
     parent::__construct($name, $settings);
     $this->client = $client;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

