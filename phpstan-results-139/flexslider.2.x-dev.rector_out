modules/contrib/flexslider/flexslider.api.php
modules/contrib/flexslider/flexslider.install
modules/contrib/flexslider/flexslider_example/flexslider_example.install
modules/contrib/flexslider/flexslider_fields/src/Plugin/Field/FieldFormatter/FlexsliderResponsiveFormatter.php
modules/contrib/flexslider/tests/modules/flexslider_library_test/flexslider_library_test.module
modules/contrib/flexslider/flexslider.module
modules/contrib/flexslider/tests/src/Functional/FlexsliderTest.php
modules/contrib/flexslider/flexslider_views/flexslider_views.module
modules/contrib/flexslider/flexslider_views/src/Plugin/views/style/FlexSlider.php
modules/contrib/flexslider/flexslider_example/flexslider_example.module
modules/contrib/flexslider/flexslider_fields/flexslider_fields.module
modules/contrib/flexslider/flexslider_fields/src/Plugin/Field/FieldFormatter/FlexsliderEntityFormatter.php
modules/contrib/flexslider/flexslider_views/templates/flexslider_views.theme.inc
modules/contrib/flexslider/src/Controller/FlexsliderListBuilder.php
modules/contrib/flexslider/src/Controller/FlexsliderOptionsetController.php
modules/contrib/flexslider/src/Entity/Flexslider.php
modules/contrib/flexslider/flexslider_fields/src/Plugin/Field/FieldFormatter/FlexsliderFormatter.php
modules/contrib/flexslider/src/FlexsliderDefaults.php
modules/contrib/flexslider/src/FlexsliderInterface.php
modules/contrib/flexslider/src/Form/FlexsliderDeleteForm.php
modules/contrib/flexslider/src/Form/FlexsliderForm.php
modules/contrib/flexslider/flexslider_fields/src/Plugin/Field/FieldFormatter/FlexsliderFormatterTrait.php
modules/contrib/flexslider/flexslider_fields/src/Plugin/Field/FieldFormatter/FlexsliderImageFormatterTrait.php
modules/contrib/flexslider/src/Form/FlexsliderFormSettings.php
modules/contrib/flexslider/templates/flexslider.theme.inc
modules/contrib/flexslider/tests/modules/flexslider_library_test/flexslider_library_test.install

5 files with changes
====================

1) modules/contrib/flexslider/flexslider.install:11

    ---------- begin diff ----------
@@ @@
  */
 function flexslider_uninstall() {
   // Delete all of the configuration installed by this module.
-  $dir = drupal_get_path('module', 'flexslider') . '/config/install';
+  $dir = \Drupal::service('extension.list.module')->getPath('flexslider') . '/config/install';
   $files = \Drupal::service('file_system')->scanDirectory($dir, '/.*/');
   foreach ($files as $file) {
     \Drupal::configFactory()->getEditable($file->name)->delete();
@@ @@

       // Find the library in the profiles path if not found.
       if (!$found) {
-        $path = drupal_get_path('profile', \Drupal::installProfile());
+        $path = \Drupal::service('extension.list.profile')->getPath(\Drupal::installProfile());
         $path .= '/libraries/flexslider/jquery.flexslider-min.js';
         $found = file_exists($path);
       }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


2) modules/contrib/flexslider/tests/src/Functional/FlexsliderTest.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create users.
@@ @@

     // Load admin page.
     $this->drupalGet('admin/config/media/flexslider');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Logout as admin user.
     $this->drupalLogout();
@@ @@

     // Attempt to load admin page.
     $this->drupalGet('admin/config/media/flexslider');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

   }

@@ @@
       $optionset = Flexslider::load($name);

       $this->assertIsObject($optionset, $this->t('Loaded option set.'));
-      $this->assertEqual($name, $optionset->id(), $this->t('Loaded name matches: @name', ['@name' => $optionset->id()]));
+      $this->assertEquals($name, $optionset->id(), $this->t('Loaded name matches: @name', ['@name' => $optionset->id()]));

       /** @var \Drupal\flexslider\Entity\Flexslider $default_optionset */
       $default_optionset = Flexslider::create();
       foreach ($default_optionset->getOptions() as $key => $value) {
-        $this->assertEqual($value, $optionset->getOptions()[$key], $this->t('Option @option matches saved value.', ['@option' => $key]));
+        $this->assertEquals($value, $optionset->getOptions()[$key], $this->t('Option @option matches saved value.', ['@option' => $key]));
       }

     }
@@ @@
     // Save the updated values.
     $saved = $optionset->save();

-    $this->assertEqual($saved, SAVED_UPDATED, $this->t('Saved updates to optionset to database.'));
+    $this->assertEquals($saved, SAVED_UPDATED, $this->t('Saved updates to optionset to database.'));

     // Load the values from the database again.
     $optionset = Flexslider::load($testsets[0]);
@@ @@

     // Compare settings to the test options.
     foreach ($test_options['set2'] as $key => $value) {
-      $this->assertEqual($optionset->getOptions()[$key], $value, $this->t('Saved value matches set value: @key', ['@key' => $key]));
+      $this->assertEquals($optionset->getOptions()[$key], $value, $this->t('Saved value matches set value: @key', ['@key' => $key]));
     }

     // Delete the optionset.
@@ @@
     $this->assertIsObject($optionset, $this->t('Optionset exists and is ready to be deleted.'));
     try {
       $optionset->delete();
-      // Ensure the delete is successful.
-      $this->pass($this->t('Optionset successfully deleted: @name', ['@name' => $optionset->id()]));
     }
     catch (\Exception $e) {
       $this->fail($this->t('Caught exception: @msg', ['@msg' => $e->getMessage()]));
@@ @@
     // ------------ Test Option Set Add ------------ //
     // Load create form.
     $this->drupalGet('admin/config/media/flexslider/add');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Save new optionset.
     $optionset = [];
     $optionset['label'] = $this->t('testset');
     $optionset['id'] = 'testset';
-    $this->drupalPostForm('admin/config/media/flexslider/add', $optionset, $this->t('Save'));
+    $this->drupalGet('admin/config/media/flexslider/add');
+    $this->submitForm($optionset, $this->t('Save'));

-    $this->assertResponse(200);
-    $this->assertText('Created the testset FlexSlider optionset.');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('Created the testset FlexSlider optionset.');
+    $this->drupalGet('admin/config/media/flexslider/add');

     // Attempt to save option set of the same name again.
-    $this->drupalPostForm('admin/config/media/flexslider/add', $optionset, $this->t('Save'));
-    $this->assertResponse(200);
-    $this->assertText('The machine-readable name is already in use. It must be unique.');
+    $this->submitForm($optionset, $this->t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('The machine-readable name is already in use. It must be unique.');

     // ------------ Test Option Set Edit ------------ //
     // Attempt to save each option value.
@@ @@
     $options = $this->getTestOptions();

     foreach ($options['valid'] as $testset) {
-      $this->drupalPostForm('admin/config/media/flexslider/default', $testset, $this->t('Save'));
-      $this->assertResponse(200);
+      $this->drupalGet('admin/config/media/flexslider/default');
+      $this->submitForm($testset, $this->t('Save'));
+      $this->assertSession()->statusCodeEquals(200);

       // Test saved values loaded into form.
       $this->drupalGet('admin/config/media/flexslider/default');
-      $this->assertResponse(200);
+      $this->assertSession()->statusCodeEquals(200);
       foreach ($testset as $key => $option) {
-        $this->assertFieldByName($key, $option);
+        $this->assertSession()->fieldValueEquals($key, $option);
       }
     }

@@ @@

     // Test the delete workflow.
     $this->drupalGet("admin/config/media/flexslider/{$testset->id()}/delete");
-    $this->assertResponse(200);
-    $this->assertText("Are you sure you want to delete {$testset->label()}?");
-    $this->drupalPostForm("admin/config/media/flexslider/{$testset->id()}/delete", [], $this->t('Delete'));
-    $this->assertResponse(200);
-    $this->assertText("Deleted the {$testset->label()} FlexSlider optionset.");
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains("Are you sure you want to delete {$testset->label()}?");
+    $this->drupalGet("admin/config/media/flexslider/{$testset->id()}/delete");
+    $this->submitForm([], $this->t('Delete'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains("Deleted the {$testset->label()} FlexSlider optionset.");

   }

@@ @@
     $this->drupalLogin($this->adminUser);

     // Debug flag initially off.
-    $this->assertRaw('libraries/flexslider/jquery.flexslider-min.js');
+    $this->assertSession()->responseContains('libraries/flexslider/jquery.flexslider-min.js');

     // Change the debug settings.
     $this->drupalGet('admin/config/media/flexslider/advanced');
     $settings['flexslider_debug'] = TRUE;
-    $this->drupalPostForm('admin/config/media/flexslider/advanced', $settings, $this->t('Save configuration'));
+    $this->drupalGet('admin/config/media/flexslider/advanced');
+    $this->submitForm($settings, $this->t('Save configuration'));

-    $this->assertResponse(200);
-    $this->assertText('The configuration options have been saved.');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');

     $this->drupalGet('user/' . $this->adminUser->id());

-    $this->assertRaw('libraries/flexslider/jquery.flexslider.js');
+    $this->assertSession()->responseContains('libraries/flexslider/jquery.flexslider.js');

     // Test the css settings.
     // Show that the css files are originally loaded.
-    $this->assertRaw('libraries/flexslider/flexslider.css');
-    $this->assertRaw('flexslider/assets/css/flexslider_img.css');
+    $this->assertSession()->responseContains('libraries/flexslider/flexslider.css');
+    $this->assertSession()->responseContains('flexslider/assets/css/flexslider_img.css');

     // Turn off the css.
     $this->drupalGet('admin/config/media/flexslider/advanced');
@@ @@
       'flexslider_css' => FALSE,
       'integration_css' => FALSE,
     ];
-    $this->drupalPostForm('admin/config/media/flexslider/advanced', $settings, $this->t('Save configuration'));
+    $this->drupalGet('admin/config/media/flexslider/advanced');
+    $this->submitForm($settings, $this->t('Save configuration'));

     $this->drupalGet('user/' . $this->adminUser->id());

     // Show css is not loaded when flags are off.
-    $this->assertNoRaw('libraries/flexslider/flexslider.css');
-    $this->assertNoRaw('flexslider/assets/css/flexslider_img.css');
+    $this->assertSession()->responseNotContains('libraries/flexslider/flexslider.css');
+    $this->assertSession()->responseNotContains('flexslider/assets/css/flexslider_img.css');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertNoRawRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * PassRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/flexslider/flexslider_fields/src/Plugin/Field/FieldFormatter/FlexsliderImageFormatterTrait.php:73

    ---------- begin diff ----------
@@ @@
       }

       // @todo Should find a way of dealing with render arrays instead of the actual output
-      $item['slide'] = render($image);
+      $item['slide'] = \Drupal::service('renderer')->render($image);

       $items[$delta] = $item;
     }
@@ @@
       }
       $element['caption']['#description']
         = $formatter->t('You need to @action for this image field to be able to use it as a caption.',
-        ['@action' => render($action)]);
+        ['@action' => \Drupal::service('renderer')->render($action)]);

       // If there are no suitable caption sources, disable the caption element.
       if (count($action_fields) >= 2) {
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * WrapReturnRector


4) modules/contrib/flexslider/flexslider_example/flexslider_example.install:39

    ---------- begin diff ----------
@@ @@
   }

   // Now delete all of the configuration installed by this module.
-  $dir = drupal_get_path('module', 'flexslider_example') . '/config/install';
+  $dir = \Drupal::service('extension.list.module')->getPath('flexslider_example') . '/config/install';
   $files = \Drupal::service('file_system')->scanDirectory($dir, '/.*/');
   foreach ($files as $file) {
     \Drupal::configFactory()->getEditable($file->name)->delete();
@@ @@
  */
 function flexslider_example_generate_content() {

-  $dir = drupal_get_path('module', 'flexslider') . '/assets/images';
+  $dir = \Drupal::service('extension.list.module')->getPath('flexslider') . '/assets/images';
   $images = \Drupal::service('file_system')->scanDirectory($dir, '/flexslider-sample/');

   foreach ($images as $image) {
@@ @@
     $filename = $image->filename;

     $file_temp = file_get_contents($image->uri);
-    $file_temp = file_save_data($file_temp, 'public://' . $filename, FileSystemInterface::EXISTS_RENAME);
+    $file_temp = \Drupal::service('file.repository')->writeData($file_temp, 'public://' . $filename, FileSystemInterface::EXISTS_RENAME);

     // Create node object with attached file.
     $node = Node::create([
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileSaveDataRector
 * ArgumentRemoverRector


5) modules/contrib/flexslider/flexslider_views/templates/flexslider_views.theme.inc:35

    ---------- begin diff ----------
@@ @@
   foreach ($variables['rows'] as $row) {
     // Render the row into a slide.
     // @todo should use render arrays instead of actual output
-    $item['slide'] = render($row);
+    $item['slide'] = \Drupal::service('renderer')->render($row);
     $item['caption'] = (isset($row['#caption']) && !empty($row['#caption'])) ? $row['#caption'] : NULL;
     $items[] = $item;
   }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector


 [OK] 5 files have been changed by Rector                                       

