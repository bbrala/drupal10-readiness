diff --git a/src/Controller/EntityReportsController.php b/src/Controller/EntityReportsController.php
index 04835aa..e6c2d9c 100644
--- a/src/Controller/EntityReportsController.php
+++ b/src/Controller/EntityReportsController.php
@@ -131,7 +131,7 @@ class EntityReportsController extends ControllerBase {
       }
       // Builds report export links.
       $event = new EntityReportsExportFormats();
-      $this->eventDispatcher->dispatch(EntityReportsExportFormats::EVENT_NAME, $event);
+      $this->eventDispatcher->dispatch($event, EntityReportsExportFormats::EVENT_NAME);
       $export_formats = $event->exportFormats;
       $export_links = [];
       foreach ($export_formats as $format_machine_name => $format_label) {
@@ -193,7 +193,7 @@ class EntityReportsController extends ControllerBase {
 
     // Builds report export links.
     $event = new EntityReportsExportFormats();
-    $this->eventDispatcher->dispatch(EntityReportsExportFormats::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, EntityReportsExportFormats::EVENT_NAME);
     $export_formats = $event->exportFormats;
     $export_links = [];
     foreach ($export_formats as $format_machine_name => $format_label) {
@@ -277,7 +277,7 @@ class EntityReportsController extends ControllerBase {
     // Checks for non-default export formats.
     if (!array_key_exists($type, EntityReportsExportFormats::DEFAULT_EXPORT_FORMATS)) {
       $event = new EntityReportsExportProcessors($content, $entity_type, $this->reportFields, $type);
-      $this->eventDispatcher->dispatch(EntityReportsExportProcessors::EVENT_NAME, $event);
+      $this->eventDispatcher->dispatch($event, EntityReportsExportProcessors::EVENT_NAME);
       $content = $event->content;
       foreach ($event->responseHeaders as $key => $value) {
         $response->headers->set($key, $value);
diff --git a/src/Event/EntityReportsExportFormats.php b/src/Event/EntityReportsExportFormats.php
index 1e0deb1..45b8100 100644
--- a/src/Event/EntityReportsExportFormats.php
+++ b/src/Event/EntityReportsExportFormats.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\entity_reports\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Event that is fired when Entity Reports is gathering export formats.
diff --git a/src/Event/EntityReportsExportProcessors.php b/src/Event/EntityReportsExportProcessors.php
index 36a472d..bd252a8 100644
--- a/src/Event/EntityReportsExportProcessors.php
+++ b/src/Event/EntityReportsExportProcessors.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\entity_reports\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Event that is fired when Entity Reports is processing an export.
diff --git a/src/Routing/EntityReportsRoutes.php b/src/Routing/EntityReportsRoutes.php
index 8659eac..31f39b6 100644
--- a/src/Routing/EntityReportsRoutes.php
+++ b/src/Routing/EntityReportsRoutes.php
@@ -78,7 +78,7 @@ class EntityReportsRoutes implements ContainerInjectionInterface {
     $configured_types = $this->config->get('entity_reports.settings')
       ->get('reported_entity_types');
     $event = new EntityReportsExportFormats();
-    $this->eventDispatcher->dispatch(EntityReportsExportFormats::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, EntityReportsExportFormats::EVENT_NAME);
     $export_formats = array_keys($event->exportFormats);
 
     foreach ($this->entityTypeManager->getDefinitions() as $entity_type_id => $entity_type) {
diff --git a/src/Tests/Functional/EntityReportsTestBase.php b/src/Tests/Functional/EntityReportsTestBase.php
index b3041b9..acbb3a1 100644
--- a/src/Tests/Functional/EntityReportsTestBase.php
+++ b/src/Tests/Functional/EntityReportsTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_reports\Tests\Functional;
 
+use Drupal\Tests\BrowserTestBase;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\field\Entity\FieldConfig;
@@ -16,7 +17,7 @@ use PHPUnit\Framework\TestCase;
  * @package Drupal\entity_reports\Tests\Functional
  * @group entity_reports
  */
-abstract class EntityReportsTestBase extends \Drupal\Tests\BrowserTestBase {
+abstract class EntityReportsTestBase extends BrowserTestBase {
 
   use ContentTypeCreationTrait;
 
@@ -58,12 +59,9 @@ abstract class EntityReportsTestBase extends \Drupal\Tests\BrowserTestBase {
       );
     }
     else {
-      $this->assertEqual($status,
-        SAVED_NEW,
-        (new FormattableMarkup('Created content type %type.',
-          ['%type' => $type->id()])
-        )->__toString()
-      );
+      $this->assertEquals($status, SAVED_NEW, (new FormattableMarkup('Created content type %type.',
+        ['%type' => $type->id()])
+      )->__toString());
     }
 
     return $type;
diff --git a/src/Tests/Functional/ReportGeneratorTest.php b/src/Tests/Functional/ReportGeneratorTest.php
index d50eea0..d36ddce 100644
--- a/src/Tests/Functional/ReportGeneratorTest.php
+++ b/src/Tests/Functional/ReportGeneratorTest.php
@@ -15,7 +15,7 @@ class ReportGeneratorTest extends EntityReportsTestBase {
   /**
    * @throws \Exception
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $fields = [
       'body' => [
