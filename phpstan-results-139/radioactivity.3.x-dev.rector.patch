diff --git a/src/Event/EnergyBelowCutoffEvent.php b/src/Event/EnergyBelowCutoffEvent.php
index a0712dc..6fc9864 100644
--- a/src/Event/EnergyBelowCutoffEvent.php
+++ b/src/Event/EnergyBelowCutoffEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\radioactivity\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Represents a 'Energy is below the cutoff level' event.
diff --git a/src/RadioactivityProcessor.php b/src/RadioactivityProcessor.php
index 38321f9..af7aedb 100644
--- a/src/RadioactivityProcessor.php
+++ b/src/RadioactivityProcessor.php
@@ -240,7 +240,7 @@ class RadioactivityProcessor implements RadioactivityProcessorInterface {
         // the cutoff value. This is needed for Rules integration, but can be
         // used by any module that wants to use events.
         $event = new EnergyBelowCutoffEvent($entity);
-        $this->eventDispatcher->dispatch('radioactivity_field_cutoff', $event);
+        $this->eventDispatcher->dispatch($event, 'radioactivity_field_cutoff');
       }
 
       if ($entity->getEntityType()->isRevisionable()) {
diff --git a/src/RestIncidentStorage.php b/src/RestIncidentStorage.php
index 053a447..8755bb0 100644
--- a/src/RestIncidentStorage.php
+++ b/src/RestIncidentStorage.php
@@ -103,7 +103,7 @@ class RestIncidentStorage implements RestIncidentStorageInterface {
   protected function getDefaultEndpoint() {
     global $base_url;
 
-    return $base_url . '/' . drupal_get_path('module', 'radioactivity') . '/endpoints/file/rest.php';
+    return $base_url . '/' . \Drupal::service('extension.list.module')->getPath('radioactivity') . '/endpoints/file/rest.php';
   }
 
   /**
diff --git a/tests/src/Kernel/RadioactivityFieldTypeTest.php b/tests/src/Kernel/RadioactivityFieldTypeTest.php
index 2885a22..0fa1fc8 100644
--- a/tests/src/Kernel/RadioactivityFieldTypeTest.php
+++ b/tests/src/Kernel/RadioactivityFieldTypeTest.php
@@ -51,9 +51,7 @@ class RadioactivityFieldTypeTest extends FieldKernelTestBase {
     parent::setUp();
 
     // Mock Time::getRequestTime.
-    $dateTime = $this->getMockBuilder(TimeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dateTime = $this->createMock(TimeInterface::class);
     $dateTime
       ->expects($this->any())
       ->method('getRequestTime')
diff --git a/tests/src/Unit/DefaultIncidentStorageTest.php b/tests/src/Unit/DefaultIncidentStorageTest.php
index 8b7b6db..3d0172a 100644
--- a/tests/src/Unit/DefaultIncidentStorageTest.php
+++ b/tests/src/Unit/DefaultIncidentStorageTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\radioactivity\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\State\StateInterface;
 use Drupal\radioactivity\DefaultIncidentStorage;
 use Drupal\radioactivity\IncidentInterface;
@@ -15,6 +16,7 @@ use Prophecy\Argument;
  */
 class DefaultIncidentStorageTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * A mock state storage.
    *
diff --git a/tests/src/Unit/EmitControllerTest.php b/tests/src/Unit/EmitControllerTest.php
index 816b09c..80cdc48 100644
--- a/tests/src/Unit/EmitControllerTest.php
+++ b/tests/src/Unit/EmitControllerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\radioactivity\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Site\Settings;
 use Drupal\radioactivity\Controller\EmitController;
@@ -19,6 +20,7 @@ use Symfony\Component\HttpFoundation\Request;
  */
 class EmitControllerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The request received by the controller.
    *
diff --git a/tests/src/Unit/RadioactivityProcessorTest.php b/tests/src/Unit/RadioactivityProcessorTest.php
index d8c0071..da140e5 100644
--- a/tests/src/Unit/RadioactivityProcessorTest.php
+++ b/tests/src/Unit/RadioactivityProcessorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\radioactivity\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ -31,6 +32,7 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
  */
 class RadioactivityProcessorTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The radioactivity processor under test.
    *
diff --git a/tests/src/Unit/RestIncidentStorageTest.php b/tests/src/Unit/RestIncidentStorageTest.php
index 9e1b727..7c66243 100644
--- a/tests/src/Unit/RestIncidentStorageTest.php
+++ b/tests/src/Unit/RestIncidentStorageTest.php
@@ -27,14 +27,7 @@ class RestIncidentStorageTest extends UnitTestCase {
   public function setUp(): void {
     parent::setUp();
 
-    $this->sut = $this->getMockBuilder(RestIncidentStorage::class)
-      ->disableOriginalConstructor()
-      ->setMethods([
-        'getDefaultEndpoint',
-        'getIncidentsFromStorage',
-        'clearIncidentStorage',
-      ])
-      ->getMock();
+    $this->sut = $this->createMock(RestIncidentStorage::class);
 
     // Initiate the Settings singleton used by this test.
     new Settings([
@@ -46,9 +39,7 @@ class RestIncidentStorageTest extends UnitTestCase {
    * @covers ::addIncident
    */
   public function testAddIncident() {
-    $incident = $this->getMockBuilder(IncidentInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $incident = $this->createMock(IncidentInterface::class);
 
     $this->expectException("Exception");
     $this->expectExceptionMessage("The Radioactivity rest endpoint expects incidents to be added somewhere else.");
diff --git a/tests/src/Unit/StorageFactoryTest.php b/tests/src/Unit/StorageFactoryTest.php
index 9b99f24..682e4bf 100644
--- a/tests/src/Unit/StorageFactoryTest.php
+++ b/tests/src/Unit/StorageFactoryTest.php
@@ -44,33 +44,18 @@ class StorageFactoryTest extends UnitTestCase {
     parent::setUp();
 
     // Mock the radioactivity.storage configuration.
-    $this->config = $this->getMockBuilder(ImmutableConfig::class)
-      ->disableOriginalConstructor()
-      ->setMethods([
-        'get',
-      ])
-      ->getMock();
+    $this->config = $this->createMock(ImmutableConfig::class);
 
-    $this->configFactory = $this->getMockBuilder(ConfigFactory::class)
-      ->disableOriginalConstructor()
-      ->setMethods([
-        'get',
-      ])
-      ->getMock();
+    $this->configFactory = $this->createMock(ConfigFactory::class);
     $this->configFactory->expects($this->any())
       ->method('get')
       ->will($this->returnValue($this->config));
 
     // Mock the class resolver and the classes it provides.
-    $mockRestStorage = $this->getMockBuilder(RestIncidentStorage::class)
-      ->getMock();
-    $mockDefaultStorage = $this->getMockBuilder(DefaultIncidentStorage::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockRestStorage = $this->createMock(RestIncidentStorage::class);
+    $mockDefaultStorage = $this->createMock(DefaultIncidentStorage::class);
 
-    $this->classResolver = $this->getMockBuilder(ClassResolverInterface::class)
-      ->setMethods(['getInstanceFromDefinition'])
-      ->getMock();
+    $this->classResolver = $this->createMock(ClassResolverInterface::class);
     $this->classResolver->expects($this->any())
       ->method('getInstanceFromDefinition')
       ->will($this->returnValueMap([
