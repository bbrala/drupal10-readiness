modules/contrib/weather-weather/src/Commands/WeatherCommands.php
modules/contrib/weather-weather/src/Form/WeatherDisplayDeleteForm.php
modules/contrib/weather-weather/tests/src/Functional/PermissionsTest.php
modules/contrib/weather-weather/src/Form/WeatherDisplayForm.php
modules/contrib/weather-weather/src/Controller/WeatherDetailedForecastController.php
modules/contrib/weather-weather/src/Controller/WeatherUserConfiguredDisplayController.php
modules/contrib/weather-weather/src/Entity/WeatherDisplay.php
modules/contrib/weather-weather/tests/src/Functional/WeatherCommonTestTrait.php
modules/contrib/weather-weather/src/Entity/WeatherDisplayInterface.php
modules/contrib/weather-weather/src/Entity/WeatherDisplayPlace.php
modules/contrib/weather-weather/src/Form/WeatherDisplayPlaceDeleteForm.php
modules/contrib/weather-weather/src/Form/WeatherDisplayPlaceForm.php
modules/contrib/weather-weather/src/Entity/WeatherDisplayPlaceInterface.php
modules/contrib/weather-weather/src/Entity/WeatherForecast.php
modules/contrib/weather-weather/weather.install
modules/contrib/weather-weather/src/Entity/WeatherForecastInformation.php
modules/contrib/weather-weather/weather.module
modules/contrib/weather-weather/src/Entity/WeatherForecastInformationInterface.php
modules/contrib/weather-weather/src/Entity/WeatherForecastInterface.php
modules/contrib/weather-weather/src/Entity/WeatherPlace.php
modules/contrib/weather-weather/src/Plugin/Block/WeatherDisplayBlockTrait.php
modules/contrib/weather-weather/src/Entity/WeatherPlaceInterface.php
modules/contrib/weather-weather/src/Form/AddCustomPlaceForm.php
modules/contrib/weather-weather/src/Plugin/Block/WeatherSystemDisplayBlock.php
modules/contrib/weather-weather/src/Plugin/Block/WeatherUserDisplayBlock.php
modules/contrib/weather-weather/src/Plugin/Derivative/WeatherSystemDisplayBlock.php
modules/contrib/weather-weather/src/Plugin/Validation/Constraint/WeatherDisplayConstraint.php
modules/contrib/weather-weather/src/Plugin/Validation/Constraint/WeatherDisplayConstraintValidator.php
modules/contrib/weather-weather/src/Form/SettingsForm.php
modules/contrib/weather-weather/src/Service/DataService.php
modules/contrib/weather-weather/src/Service/HelperService.php
modules/contrib/weather-weather/src/Service/ParserService.php
modules/contrib/weather-weather/src/Service/ThemeService.php
modules/contrib/weather-weather/src/WeatherAccessControlHandler.php
modules/contrib/weather-weather/tests/src/Functional/ConfigurationTest.php
modules/contrib/weather-weather/tests/src/Functional/FunctionsTest.php
modules/contrib/weather-weather/tests/src/Functional/ParserTest.php

8 files with changes
====================

1) modules/contrib/weather-weather/tests/src/Functional/PermissionsTest.php:73

    ---------- begin diff ----------
@@ @@
     // Get different pages.
     $this->drupalGet('node');
     $this->drupalGet('admin/config/user-interface/weather');
-    $this->assertText('Directory for custom images');
+    $this->assertSession()->pageTextContains('Directory for custom images');

     // Enable a system-wide weather block.
     $this->drupalGet('admin/config/user-interface/weather/system-wide/add');
@@ @@
     // Make sure that the weather block is not
     // displayed without a configured place.
     $this->drupalGet('node');
-    $this->assertNoRaw('<div class="weather">');
-    $this->assertNoLink('Kyiv');
-    $this->assertNoLinkByHref('weather/Ukraine/Kiev/Kyiv/1');
+    $this->assertSession()->responseNotContains('<div class="weather">');
+    $this->assertSession()->linkNotExists('Kyiv');
+    $this->assertSession()->linkByHrefNotExists('weather/Ukraine/Kiev/Kyiv/1');
     // Configure the default place.
     $this->drupalGet('admin/config/user-interface/weather/system-wide/1/add');
     $this->submitForm([], 'Save');
@@ @@
     $this->submitForm(['region' => 'sidebar_first'], 'Save block');

     $this->drupalGet('admin/config/user-interface/weather');
-    $this->assertText('Directory for custom images');
-    $this->assertText('Kyiv');
-    $this->assertText('Add location to this display');
+    $this->assertSession()->pageTextContains('Directory for custom images');
+    $this->assertSession()->pageTextContains('Kyiv');
+    $this->assertSession()->pageTextContains('Add location to this display');
     // Make sure that the weather block is displayed now.
     $this->drupalGet('node');
-    $this->assertRaw('<div class="weather">');
-    $this->assertLink('Kyiv');
-    $this->assertLinkByHref('weather/Ukraine/Kiev/Kyiv/1');
+    $this->assertSession()->responseContains('<div class="weather">');
+    $this->assertSession()->linkExists('Kyiv');
+    $this->assertSession()->linkByHrefExists('weather/Ukraine/Kiev/Kyiv/1');
     // Logout current user.
     $this->drupalLogout();

@@ @@
     $this->drupalLogin($normal_user);
     // Get front page.
     $this->drupalGet('node');
-    $this->assertText('Weather');
-    $this->assertRaw('<div class="weather">');
-    $this->assertLink('Kyiv');
-    $this->assertLinkByHref('weather/Ukraine/Kiev/Kyiv/1');
+    $this->assertSession()->pageTextContains('Weather');
+    $this->assertSession()->responseContains('<div class="weather">');
+    $this->assertSession()->linkExists('Kyiv');
+    $this->assertSession()->linkByHrefExists('weather/Ukraine/Kiev/Kyiv/1');

     // Administration of weather module should be forbidden.
     $this->drupalGet('admin/config/user-interface/weather');
-    $this->assertResponse(403);
-    $this->assertText('You are not authorized to access this page');
+    $this->assertSession()->statusCodeEquals(403);
+    $this->assertSession()->pageTextContains('You are not authorized to access this page');
     // Search page should be forbidden.
     $this->drupalGet('weather');
-    $this->assertResponse(404);
-    $this->assertText('The requested page could not be found');
+    $this->assertSession()->statusCodeEquals(404);
+    $this->assertSession()->pageTextContains('The requested page could not be found');
     // The user may view the page with the detailed forecast of the
     // system-wide display.
     $this->drupalGet('weather/Ukraine/Kiev/Kyiv/1');
-    $this->assertResponse(200);
-    $this->assertText('Weather forecast');
-    $this->assertText('Kyiv');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('Weather forecast');
+    $this->assertSession()->pageTextContains('Kyiv');
     // Logout current user.
     $this->drupalLogout();

@@ @@
     $this->drupalLogin($weather_user_1);
     // Get front page.
     $this->drupalGet('node');
-    $this->assertText('Weather');
-    $this->assertRaw('<div class="weather">');
-    $this->assertLink('Kyiv');
-    $this->assertLinkByHref('weather/Ukraine/Kiev/Kyiv/1');
+    $this->assertSession()->pageTextContains('Weather');
+    $this->assertSession()->responseContains('<div class="weather">');
+    $this->assertSession()->linkExists('Kyiv');
+    $this->assertSession()->linkByHrefExists('weather/Ukraine/Kiev/Kyiv/1');

     // Administration of weather module should be forbidden.
     $this->drupalGet('admin/config/user-interface/weather');
-    $this->assertResponse(403);
-    $this->assertText('You are not authorized to access this page');
+    $this->assertSession()->statusCodeEquals(403);
+    $this->assertSession()->pageTextContains('You are not authorized to access this page');
     // Search page should be forbidden.
     $this->drupalGet('weather');
-    $this->assertResponse(404);
-    $this->assertText('The requested page could not be found');
+    $this->assertSession()->statusCodeEquals(404);
+    $this->assertSession()->pageTextContains('The requested page could not be found');
     // Using the direct search URL should be forbidden.
     $this->drupalGet('weather/zollenspieker');
-    $this->assertResponse(404);
-    $this->assertText('The requested page could not be found');
+    $this->assertSession()->statusCodeEquals(404);
+    $this->assertSession()->pageTextContains('The requested page could not be found');
     // The user may view the page with the detailed forecast of the
     // system-wide display.
     $this->drupalGet('weather/Ukraine/Kiev/Kyiv/1');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // But the user may not view any other detailed forecasts.
     // This needs the permission to access the search page.
     $this->drupalGet('weather/Germany/Hamburg/Zollenspieker');
-    $this->assertResponse(404);
-    $this->assertNoText('Zollenspieker');
+    $this->assertSession()->statusCodeEquals(404);
+    $this->assertSession()->pageTextNotContains('Zollenspieker');
     // Logout current user.
     $this->drupalLogout();

@@ @@
     $this->drupalLogin($weather_user_2);
     // Get front page.
     $this->drupalGet('node');
-    $this->assertText('Weather');
-    $this->assertRaw('<div class="weather">');
-    $this->assertLink('Kyiv');
-    $this->assertLinkByHref('weather/Ukraine/Kiev/Kyiv/1');
+    $this->assertSession()->pageTextContains('Weather');
+    $this->assertSession()->responseContains('<div class="weather">');
+    $this->assertSession()->linkExists('Kyiv');
+    $this->assertSession()->linkByHrefExists('weather/Ukraine/Kiev/Kyiv/1');

     // Administration of weather module should be forbidden.
     $this->drupalGet('admin/config/user-interface/weather');
-    $this->assertResponse(403);
-    $this->assertText('You are not authorized to access this page');
+    $this->assertSession()->statusCodeEquals(403);
+    $this->assertSession()->pageTextContains('You are not authorized to access this page');
     // Search page should be forbidden.
     $this->drupalGet('weather');
-    $this->assertResponse(404);
-    $this->assertText('The requested page could not be found');
+    $this->assertSession()->statusCodeEquals(404);
+    $this->assertSession()->pageTextContains('The requested page could not be found');
     // Using the direct search URL should be forbidden.
     $this->drupalGet('weather/zollenspieker');
-    $this->assertResponse(404);
-    $this->assertText('The requested page could not be found');
+    $this->assertSession()->statusCodeEquals(404);
+    $this->assertSession()->pageTextContains('The requested page could not be found');
     // The user may view the page with the detailed forecast of the
     // system-wide display.
     $this->drupalGet('weather/Ukraine/Kiev/Kyiv/1');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // But the user may not view any other detailed forecasts.
     $this->drupalGet('weather/Germany/Hamburg/Zollenspieker');
-    $this->assertResponse(404);
-    $this->assertNoText('Zollenspieker');
+    $this->assertSession()->statusCodeEquals(404);
+    $this->assertSession()->pageTextNotContains('Zollenspieker');

     // Logout current user.
     $this->drupalLogout();
    ----------- end diff -----------

Applied rules:
 * AssertLinkByHrefRector
 * AssertLinkRector
 * AssertNoLinkByHrefRector
 * AssertNoLinkRector
 * AssertNoRawRector
 * AssertNoTextRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/weather-weather/src/Form/SettingsForm.php:116

    ---------- begin diff ----------
@@ @@

     // Additional weather settings.
     $theme = $this->config('system.theme')->get('default');
-    $theme_path = drupal_get_path('theme', $theme);
+    $theme_path = \Drupal::service('extension.list.theme')->getPath($theme);
     $config = $this->config('weather.settings');

     $form['weather_image_directory'] = [
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/weather-weather/src/Commands/WeatherCommands.php:61

    ---------- begin diff ----------
@@ @@
    * Open file.
    */
   private function csv() {
-    return fopen(drupal_get_path('module', 'weather') . '/files/weather_data.csv', 'r');
+    return fopen(\Drupal::service('extension.list.module')->getPath('weather') . '/files/weather_data.csv', 'r');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/weather-weather/tests/src/Functional/ParserTest.php:518

    ---------- begin diff ----------
@@ @@
     $info = $this->getInfoAboutForecast(1381176000);
     // Check that the information has been parsed correctly.
     $info = reset($info);
-    $this->assertEqual($info->geoid, 'geonames_2911298');
-    $this->assertEqual($info->last_update, '2013-10-07 15:30:00');
-    $this->assertEqual($info->next_update, '2013-10-08 04:00:00');
-    $this->assertEqual($info->next_download_attempt, '2013-10-08 04:00:00');
-    $this->assertEqual($info->utc_offset, 120);
+    $this->assertEquals($info->geoid, 'geonames_2911298');
+    $this->assertEquals($info->last_update, '2013-10-07 15:30:00');
+    $this->assertEquals($info->next_update, '2013-10-08 04:00:00');
+    $this->assertEquals($info->next_download_attempt, '2013-10-08 04:00:00');
+    $this->assertEquals($info->utc_offset, 120);
   }

   /**
@@ @@
     // Fetch all weather forecasts for Hamburg
     // and check the correct days of forecasts.
     $weather = $this->weatherGetWeather('geonames_2911298', 0, TRUE);
-    $this->assertIdentical(array_keys($weather['forecasts']), $days);
+    $this->assertSame(array_keys($weather['forecasts']), $days);

     // Go a few days forward ...
     // Set a fixed time for testing to 2013-10-12 10:00:00 UTC.
@@ @@
     // Fetch all weather forecasts for Hamburg
     // and check the correct days of forecasts.
     $weather = $this->weatherGetWeather('geonames_2911298', 0, TRUE);
-    $this->assertIdentical(array_keys($weather['forecasts']), array_slice($days, 5));
+    $this->assertSame(array_keys($weather['forecasts']), array_slice($days, 5));
   }
 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/weather-weather/tests/src/Functional/FunctionsTest.php:36

    ---------- begin diff ----------
@@ @@
     $this->weatherFillWeatherSchema();
     // Test different numbers for system-wide displays.
     $link = $this->weatherGetInformationAboutGeoid('geonames_2911298')['link'];
-    $this->assertEqual($link, 'Hamburg/Hamburg');
+    $this->assertEquals($link, 'Hamburg/Hamburg');
     // Test different numbers for yr.no links.
     $link = $this->weatherGetLinkForGeoId('geonames_2911298', 'yr.no');
-    $this->assertEqual($link, 'http://www.yr.no/place/Germany/Hamburg/Hamburg/');
+    $this->assertEquals($link, 'http://www.yr.no/place/Germany/Hamburg/Hamburg/');
     $link = $this->weatherGetLinkForGeoId('geonames_2911298', 'system-wide');
-    $this->assertEqual($link, 'weather/Germany/Hamburg/Hamburg/1');
+    $this->assertEquals($link, 'weather/Germany/Hamburg/Hamburg/1');
     $link = $this->weatherGetLinkForGeoId('geonames_2911298', 'default');
-    $this->assertEqual($link, 'weather/Germany/Hamburg/Hamburg');
+    $this->assertEquals($link, 'weather/Germany/Hamburg/Hamburg');
     $link = $this->weatherGetLinkForGeoId('geonames_2911298', 'user');
-    $this->assertEqual($link, 'weather/Germany/Hamburg/Hamburg/u');
+    $this->assertEquals($link, 'weather/Germany/Hamburg/Hamburg/u');
     $link = $this->weatherGetLinkForGeoId('geonames_2911298', 'yr');
-    $this->assertEqual($link, 'http://www.yr.no/place/Germany/Hamburg/Hamburg/forecast.xml');
+    $this->assertEquals($link, 'http://www.yr.no/place/Germany/Hamburg/Hamburg/forecast.xml');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/weather-weather/tests/src/Functional/ConfigurationTest.php:51

    ---------- begin diff ----------
@@ @@
     $this->drupalGet('admin/config/user-interface/weather/system-wide/add');
     $this->submitForm([], 'Save');
     $this->drupalGet('admin/config/user-interface/weather/system-wide/1/add');
-    $this->assertText('You do not have any weather places in system.');
+    $this->assertSession()->pageTextContains('You do not have any weather places in system.');

     // Third case.
     // Configure the default place.
@@ @@

     // Check block existing in blocks list.
     $this->drupalGet('admin/structure/block/list/stark');
-    $this->assertText('Weather: system-wide display (#1)');
+    $this->assertSession()->pageTextContains('Weather: system-wide display (#1)');

     // Make sure that the weather block is displayed
     // with correct forecast data.
     $this->drupalGet('weather/Ukraine/Kiev/Kyiv/1');
-    $this->assertRaw('<div class="weather">');
-    $this->assertText('00:00-06:00');
-    $this->assertRaw('&thinsp;°C');
-    $this->assertText('18:00-00:00');
-    $this->assertRaw('&thinsp;°C');
+    $this->assertSession()->responseContains('<div class="weather">');
+    $this->assertSession()->pageTextContains('00:00-06:00');
+    $this->assertSession()->responseContains('&thinsp;°C');
+    $this->assertSession()->pageTextContains('18:00-00:00');
+    $this->assertSession()->responseContains('&thinsp;°C');

     // Change temperature units to Fahrenheit.
     $edit = ['config[temperature]' => 'fahrenheit'];
@@ @@
     \Drupal::cache()->invalidateAll();
     // Make sure that the weather block now shows different temperatures.
     $this->drupalGet('weather/Ukraine/Kiev/Kyiv/1');
-    $this->assertRaw('&thinsp;°F');
-    $this->assertRaw('&thinsp;°F');
+    $this->assertSession()->responseContains('&thinsp;°F');
+    $this->assertSession()->responseContains('&thinsp;°F');
     // Logout current user.
     $this->drupalLogout();
   }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/weather-weather/src/Service/ThemeService.php:258

    ---------- begin diff ----------
@@ @@
     // Construct the filename.
     $image = $custom_path . $symbol . '.png';
     if (!is_readable($image)) {
-      $default_path = drupal_get_path('module', 'weather') . '/images/';
+      $default_path = \Drupal::service('extension.list.module')->getPath('weather') . '/images/';
       $image = $default_path . $symbol . '.png';
     }
     $size = getimagesize($image);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector


8) modules/contrib/weather-weather/src/Service/DataService.php:96

    ---------- begin diff ----------
@@ @@
       ->execute();

     // Read the data file and create Places in system.
-    $file = fopen(drupal_get_path('module', 'weather') . '/files/weather_data.csv', 'r');
+    $file = fopen(\Drupal::service('extension.list.module')->getPath('weather') . '/files/weather_data.csv', 'r');
     $items = [];
     while (($line = fgetcsv($file, 0, '	')) !== FALSE) {
       // Check if the geoid has been modified, if so, skip it.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector


 [OK] 8 files have been changed by Rector                                       

