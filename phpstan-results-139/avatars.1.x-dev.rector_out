modules/contrib/avatars/avatars.install
modules/contrib/avatars/avatars_gravatar/src/Plugin/AvatarGenerator/GravatarGenerator.php
modules/contrib/avatars/src/AvatarGeneratorPluginCollection.php
modules/contrib/avatars/src/Plugin/AvatarGenerator/UserPreference.php
modules/contrib/avatars/src/AvatarGeneratorPluginManager.php
modules/contrib/avatars/src/Plugin/Field/FieldWidget/AvatarGeneratorPreviewWidget.php
modules/contrib/avatars/src/AvatarGeneratorPluginManagerInterface.php
modules/contrib/avatars/src/AvatarGeneratorStorage.php
modules/contrib/avatars/src/AvatarGeneratorStorageInterface.php
modules/contrib/avatars/src/AvatarManager.php
modules/contrib/avatars/avatars_robohash/avatars_robohash.install
modules/contrib/avatars/avatars.module
modules/contrib/avatars/avatars_robohash/src/Plugin/AvatarGenerator/Robohash.php
modules/contrib/avatars/avatars_robohash/src/Robohash.php
modules/contrib/avatars/tests/modules/avatars_test/src/Controller/AvatarKitTestController.php
modules/contrib/avatars/avatars_adorable/src/Adorable.php
modules/contrib/avatars/tests/modules/avatars_test/src/Plugin/AvatarGenerator/DynamicTestGenerator.php
modules/contrib/avatars/tests/modules/avatars_test/src/Plugin/AvatarGenerator/StaticTestGenerator.php
modules/contrib/avatars/tests/src/Functional/AvatarKitAdminSettingsTest.php
modules/contrib/avatars/avatars_robohash/src/RobohashInterface.php
modules/contrib/avatars/src/Annotation/AvatarGenerator.php
modules/contrib/avatars/src/AvatarBase.php
modules/contrib/avatars/avatars_adorable/src/AdorableInterface.php
modules/contrib/avatars/avatars_adorable/src/Plugin/AvatarGenerator/Adorable.php
modules/contrib/avatars/src/AvatarBaseInterface.php
modules/contrib/avatars/avatars_gravatar/avatars_gravatar.install
modules/contrib/avatars/src/AvatarGeneratorInterface.php
modules/contrib/avatars/avatars_gravatar/src/Gravatar.php
modules/contrib/avatars/src/AvatarManagerInterface.php
modules/contrib/avatars/src/AvatarPreviewInterface.php
modules/contrib/avatars/src/Element/AvatarsImageRadios.php
modules/contrib/avatars/avatars_gravatar/src/GravatarInterface.php
modules/contrib/avatars/avatars_gravatar/src/Plugin/AvatarGenerator/Gravatar.php
modules/contrib/avatars/src/Entity/AvatarGenerator.php
modules/contrib/avatars/tests/src/Functional/AvatarKitGeneratorTest.php
modules/contrib/avatars/src/Entity/AvatarPreview.php
modules/contrib/avatars/tests/src/Functional/AvatarKitWebTestBase.php
modules/contrib/avatars/src/Exception/AvatarException.php
modules/contrib/avatars/src/Form/AvatarGeneratorDeleteForm.php
modules/contrib/avatars/tests/src/Kernel/AvatarKitManagerTest.php
modules/contrib/avatars/src/Form/AvatarGeneratorForm.php
modules/contrib/avatars/src/Form/Settings.php
modules/contrib/avatars/tests/src/Kernel/AvatarKitPermissionsTest.php
modules/contrib/avatars/src/Permissions.php
modules/contrib/avatars/src/Plugin/AvatarGenerator/AvatarGeneratorBase.php
modules/contrib/avatars/src/Plugin/AvatarGenerator/AvatarGeneratorPluginInterface.php
modules/contrib/avatars/src/Plugin/AvatarGenerator/Broken.php
modules/contrib/avatars/src/Plugin/AvatarGenerator/User.php

7 files with changes
====================

1) modules/contrib/avatars/tests/src/Kernel/AvatarKitPermissionsTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->permissionHandler = $this->container->get('user.permissions');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/avatars/tests/src/Kernel/AvatarKitManagerTest.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
     $this->installSchema('system', 'sequences');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/avatars/tests/src/Functional/AvatarKitWebTestBase.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->avatarGeneratorStorage = $this->container->get('entity_type.manager')->getStorage('avatar_generator');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/avatars/tests/src/Functional/AvatarKitGeneratorTest.php:87

    ---------- begin diff ----------
@@ @@
     $avatar_preview = $am->findValidAvatar($user);
     $file = $avatar_preview->getAvatar();

-    $this->assertEqual($avatar_preview->id(), $am->getAvatarPreviewByFile($file));
+    $this->assertEquals($avatar_preview->id(), $am->getAvatarPreviewByFile($file));
   }

   /**
@@ @@
     $am = \Drupal::service('avatars.avatar_manager');

     // Create a random file.
-    $file = file_save_data($this->randomString());
+    $file = \Drupal::service('file.repository')->writeData($this->randomString());

     $this->assertFalse($am->getAvatarPreviewByFile($file));
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * FileSaveDataRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/avatars/tests/src/Functional/AvatarKitAdminSettingsTest.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $user = $this->createUser(['administer avatars']);
     $this->drupalLogin($user);
@@ @@
     $avatar_generator2 = $this->createAvatarGenerator(['weight' => 100]);

     $this->drupalGet('admin/config/people/avatars');
-    $this->assertResponse(200);
-    $this->assertRaw(t('A list of avatar generators to try for each user in order of preference.'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseContains(t('A list of avatar generators to try for each user in order of preference.'));

     // Generator 1 should be in first row, with checked box.
     $elements = $this->xpath('//table//tr[1]/td[1][text()=:label]', [
@@ @@
       ':label' => $avatar_generator1->label(),
     ]);
     $this->assertTrue(!empty($elements), 'Generator on first row.');
-    $this->assertFieldChecked('edit-avatar-generators-' . $avatar_generator1->id() . '-enabled');
+    $this->assertSession()->checkboxChecked('edit-avatar-generators-' . $avatar_generator1->id() . '-enabled');

     // Generator 2 should be in fourth row, with unchecked box.
     $elements = $this->xpath('//table//tr[4]/td[1][text()=:label]', [
@@ @@
       ':label' => $avatar_generator2->label(),
     ]);
     $this->assertTrue(!empty($elements), 'Generator on fourth row.');
-    $this->assertNoFieldChecked('edit-avatar-generators-' . $avatar_generator2->id() . '-enabled');
+    $this->assertSession()->checkboxNotChecked('edit-avatar-generators-' . $avatar_generator2->id() . '-enabled');
   }

   /**
@@ @@
    */
   public function testGeneratorAdd() {
     $this->drupalGet('admin/config/people/avatars/generators/add');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $id = mb_strtolower($this->randomMachineName());
     $label = $this->randomString();
@@ @@
       'id' => $id,
       'plugin' => 'avatars_test_dynamic',
     ];
-    $this->drupalPostForm('admin/config/people/avatars/generators/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/people/avatars/generators/add');
+    $this->submitForm($edit, t('Save'));

     $t_args = ['%label' => $label];
-    $this->assertRaw(t('Created avatar generator %label', $t_args));
-    $this->assertUrl('admin/config/people/avatars/generators/' . $id);
+    $this->assertSession()->responseContains(t('Created avatar generator %label', $t_args));
+    $this->assertSession()->addressEquals('admin/config/people/avatars/generators/' . $id);
   }

   /**
@@ @@
     $avatar_generator = $this->createAvatarGenerator();

     $this->drupalGet($avatar_generator->toUrl('edit-form'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $t_args = ['%label' => $avatar_generator->label()];
-    $this->assertRaw(t('Edit avatar generator %label', $t_args));
+    $this->assertSession()->responseContains(t('Edit avatar generator %label', $t_args));

     $edit = ['label' => $avatar_generator->label()];
-    $this->drupalPostForm($avatar_generator->toUrl('edit-form'), $edit, t('Save'));
-    $this->assertUrl('admin/config/people/avatars');
-    $this->assertRaw(t('Updated avatar generator %label', $t_args));
+    $this->drupalGet($avatar_generator->toUrl('edit-form'));
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->addressEquals('admin/config/people/avatars');
+    $this->assertSession()->responseContains(t('Updated avatar generator %label', $t_args));
   }

   /**
@@ @@
   public function testGeneratorDelete() {
     $avatar_generator = $this->createAvatarGenerator();
     $this->drupalGet($avatar_generator->toUrl('delete-form'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $t_args = ['%label' => $avatar_generator->label()];
-    $this->assertRaw(t('Are you sure you want to delete avatar generator %label?', $t_args));
+    $this->assertSession()->responseContains(t('Are you sure you want to delete avatar generator %label?', $t_args));
+    $this->drupalGet($avatar_generator->toUrl('delete-form'));

-    $this->drupalPostForm($avatar_generator->toUrl('delete-form'), [], t('Delete'));
-    $this->assertUrl('admin/config/people/avatars');
-    $this->assertRaw(t('Avatar generator %label was deleted.', $t_args));
+    $this->submitForm([], t('Delete'));
+    $this->assertSession()->addressEquals('admin/config/people/avatars');
+    $this->assertSession()->responseContains(t('Avatar generator %label was deleted.', $t_args));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertNoFieldCheckedRector
 * AssertRawRector
 * AssertResponseRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/avatars/tests/modules/avatars_test/src/Controller/AvatarKitTestController.php:14

    ---------- begin diff ----------
@@ @@
    */
   public function image() {
     $headers = ['Content-Type' => 'image/png'];
-    $file = drupal_get_path('core', '') . '/misc/druplicon.png';
+    $file = \Drupal::service('extension.path.resolver')->getPath('core', '') . '/misc/druplicon.png';
     return new BinaryFileResponse($file, 200, $headers);
   }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/avatars/src/AvatarManager.php:200

    ---------- begin diff ----------
@@ @@
         try {
           if (($result = $this->httpClient->get($url)) && ($result->getStatusCode() == 200)) {
             $file_path = $directory . '/' . $user->id() . '.jpg';
-            $file = file_save_data($result->getBody(), $file_path, FileSystemInterface::EXISTS_REPLACE);
+            $file = \Drupal::service('file.repository')->writeData($result->getBody(), $file_path, FileSystemInterface::EXISTS_REPLACE);
           }
         }
         catch (ClientException $e) {
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * WrapReturnRector


 [OK] 7 files have been changed by Rector                                       

