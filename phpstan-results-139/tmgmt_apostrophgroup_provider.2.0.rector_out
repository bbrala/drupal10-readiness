modules/contrib/tmgmt_apostrophgroup_provider/src/ApostrophTranslatorUI.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Plugin/tmgmt/Translator/ApostrophTranslator.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Api/ServiceStatusApi.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Api/TranslationApi.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/ApiException.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Configuration.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/HeaderSelector.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Model/ModelInterface.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Model/OrderState.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Model/RejectInfoData.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Model/TranslationData.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Model/TranslationStatus.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/ObjectSerializer.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Util/AXliff.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Util/GeneralHelper.php
modules/contrib/tmgmt_apostrophgroup_provider/tmgmt_apostrophgroup_provider.module

5 files with changes
====================

1) modules/contrib/tmgmt_apostrophgroup_provider/tmgmt_apostrophgroup_provider.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Configuration;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Api\TranslationApi;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\OrderState;
 /**
  * @file
  * Module file of the Apostroph Translator.
@@ @@
   try {
     $all_local_jobs = GeneralHelper::getAllJobsByTranslator($translator, TRUE);
     $apostrophsettings = $translator->getSetting('apostroph-settings');
-    $config = new Restclient\Configuration();
+    $config = new Configuration();
     $config->setHost($apostrophsettings['url']);
     $config->setUsername($apostrophsettings['username']);
     $config->setPassword($apostrophsettings['password']);
-    $translation_api = new Api\TranslationApi(NULL, $config);
+    $translation_api = new TranslationApi(NULL, $config);
     $all_remote_status = $translation_api->translations();
     foreach ($all_local_jobs as $job) {
       $job_found_remote = FALSE; //array_search($job->getReference(), $all_remote_status);
@@ @@
       foreach ($all_remote_status as $remote_state) {
         if ($job->getReference() == $remote_state->getTranslationId()) {
           $job_found_remote = TRUE;
-          if ($only_finished_remote_jobs && $remote_state->getState() != Model\OrderState::FINISHED) {
+          if ($only_finished_remote_jobs && $remote_state->getState() != OrderState::FINISHED) {
             $job_found_remote = FALSE;
           }
           break;
@@ @@
   try {
     $translator = $job->getTranslator();
     $apostrophsettings = $translator->getSetting('apostroph-settings');
-    $config = new Restclient\Configuration();
+    $config = new Configuration();
     $config->setHost($apostrophsettings['url']);
     $config->setUsername($apostrophsettings['username']);
     $config->setPassword($apostrophsettings['password']);
-    $translation_api = new Api\TranslationApi(NULL, $config);
+    $translation_api = new TranslationApi(NULL, $config);
     $translation_api->cancelTranslationWithHttpInfo($job->getReference());
     $job->addMessage(t("Apostroph Job cancelled:") . $job->getReference());
     \Drupal::messenger()->addError(t("Apostroph Job cancelled:") . $job->getReference());
@@ @@
     // If code 204 no file available.
     // if code 200 we get the file.
     // get response using api.
-    $config = new Restclient\Configuration();
+    $config = new Configuration();
     $config->setHost($apostrophsettings['url']);
     $config->setPassword($apostrophsettings['password']);
     $config->setUsername($apostrophsettings['username']);
-    $translation_api = new Api\TranslationApi(NULL, $config);
+    $translation_api = new TranslationApi(NULL, $config);
     $translation_response = $translation_api->translationbyIDWithHttpInfo($prId);
     // Check here respose.
     if ($translation_response[1] == '204') {
@@ @@
   $path_gz = $job->getSetting('scheme') . '://tmgmt_apostrophgroup/ApostrophReceivedFiles/' . $filename;
   $dirname = dirname($path_gz);
   if (\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY)) {
-    $file_gz = file_save_data($filedatastring, $path_gz, FileSystemInterface::EXISTS_REPLACE);
+    $file_gz = \Drupal::service('file.repository')->writeData($filedatastring, $path_gz, FileSystemInterface::EXISTS_REPLACE);
     // $mimetype = $file_gz->getMimeType();
     $filearray = array();
     /**
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector


2) modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Api/TranslationApi.php:26

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_apostrophgroup_provider\Restclient\Api;

+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


3) modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Api/ServiceStatusApi.php:26

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_apostrophgroup_provider\Restclient\Api;

+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


4) modules/contrib/tmgmt_apostrophgroup_provider/src/Plugin/tmgmt/Translator/ApostrophTranslator.php:8

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_apostrophgroup_provider\Plugin\tmgmt\Translator;

+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Configuration;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Api\TranslationApi;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\TranslationData;
 use Drupal\Component\Utility\Xss;
 use Drupal\tmgmt\Entity\Job;
 use Drupal\tmgmt\Entity\JobItem;
@@ @@
           $labelname = $joblabel;
           $name = $labelname . "_" . $job->id() . "_all_" . $job->getRemoteSourceLanguage() . '_' . $job->getRemoteTargetLanguage() . '.xlf';
           $jobpath = $allfilespath . "/" . $name;
-          $file = file_save_data($exporter->export($job), $jobpath, FileSystemInterface::EXISTS_REPLACE);
+          $file = \Drupal::service('file.repository')->writeData($exporter->export($job), $jobpath, FileSystemInterface::EXISTS_REPLACE);
           $filearrayexportedfiles['all'] = $file;
         } else {
           // Export each item of the job in separate file.
@@ @@
             $labelname = GeneralHelper::getStringNoSpeChars($item->label());
             $name = $labelname . "_" . $job->id() . "_" . $item->id() . "_" . $job->getRemoteSourceLanguage() . '_' . $job->getRemoteTargetLanguage() . '.xlf';
             $itempath = $allfilespath . "/" . $name;
-            $file = file_save_data($exporter->exportItem($item), $itempath, FileSystemInterface::EXISTS_REPLACE);
+            $file = \Drupal::service('file.repository')->writeData($exporter->exportItem($item), $itempath, FileSystemInterface::EXISTS_REPLACE);
             $filearrayexportedfiles[$item->id()] = $file;
           }
         }
@@ @@
             \Drupal::service('file.usage')->add($zipfileobj, 'tmgmt_apostrophgroup_provider', 'tmgmt_job', $job->id());
           }
           // TODO: send zip to Apostroph.
-          $config = new Restclient\Configuration();
+          $config = new Configuration();
           $config->setHost($apostrophsettings['url']);
           $config->setUsername($apostrophsettings['username']);
           $config->setPassword($apostrophsettings['password']);
-          $translation_api = new Api\TranslationApi(NULL, $config);
+          $translation_api = new TranslationApi(NULL, $config);
           $translation_data = GeneralHelper::createTranslationRequest($apostrophsettings, $job, $zipPath);
-          $translation_request = new Model\TranslationData($translation_data);
+          $translation_request = new TranslationData($translation_data);
           $response = $translation_api->createnewTranslation($translation_request);
           $remote_job_id = $response->getTranslationId();
           $job->set('reference', $remote_job_id);

           $job->submitted("Job sent to provider!");
-          $messageTopass .= '<a href="' . file_create_url($zipPath) . '">' . Xss::filter(GeneralHelper::getJobLabelNoSpeChars($job)) . '</a>';
+          $messageTopass .= '<a href="' . \Drupal::service('file_url_generator')->generateAbsoluteString($zipPath) . '">' . Xss::filter(GeneralHelper::getJobLabelNoSpeChars($job)) . '</a>';
           \Drupal::messenger()->addMessage(Markup::create($messageTopass));
           // As exported files are transfered as zip, delete org. exports as already in the zip.
           // Add zip to transfer array.
@@ @@
     try {
       $translator = $job->getTranslator();
       $apostrophsettings = $translator->getSetting('apostroph-settings');
-      $config = new Restclient\Configuration();
+      $config = new Configuration();
       $config->setHost($apostrophsettings['url']);
       $config->setUsername($apostrophsettings['username']);
       $config->setPassword($apostrophsettings['password']);
-      $translation_api = new Api\TranslationApi(NULL, $config);
+      $translation_api = new TranslationApi(NULL, $config);
       $response = $translation_api->cancelTranslationWithHttpInfo($job->getReference());
       $job->aborted();
       $job->addMessage(t("Apostroph Job cancelled:") . $job->getReference());
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/tmgmt_apostrophgroup_provider/src/ApostrophTranslatorUI.php:7

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_apostrophgroup_provider;

+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Configuration;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Api\ServiceStatusApi;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Api\TranslationApi;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\tmgmt_apostrophgroup_provider\Restclient\Api;
@@ @@
         $apostrophsettings = $settings['apostroph-settings'];
         $username = $apostrophsettings['username'];
         $password = $apostrophsettings['password'];
-        $config = new Restclient\Configuration();
+        $config = new Configuration();
         $config->setHost($apostrophsettings['url']);
         $config->setUsername($username);
         $config->setPassword($password);
-        $status_api = new Api\ServiceStatusApi(NULL,$config);
+        $status_api = new ServiceStatusApi(NULL,$config);
         $response = $status_api->status();
         //$form_state->setValue(array('settings','apostroph-settings','password'),'');
         //$translator->setSetting('apostroph-settings',$apostrophsettings);
@@ @@
     //TODO: get new status from remote job using api.
     $translator = $job->getTranslator();
     $apostrophsettings = $translator->getSetting('apostroph-settings');
-    $config = new Restclient\Configuration();
+    $config = new Configuration();
     $config->setHost($apostrophsettings['url']);
     $config->setUsername($apostrophsettings['username']);
     $config->setPassword($apostrophsettings['password']);
-    $translation_api = new Api\TranslationApi(NULL, $config);
+    $translation_api = new TranslationApi(NULL, $config);
     $all_translations = $translation_api->translations();
     $status = "n/a";
     $remote_job_id = $job->getReference();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 5 files have been changed by Rector                                       

