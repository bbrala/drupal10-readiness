modules/contrib/past/modules/past_db/past_db.drush.inc
modules/contrib/past/modules/past_db/src/PastEventStorage.php
modules/contrib/past/modules/past_simpletest/src/Entity/PastEventSimpletest.php
modules/contrib/past/modules/past_testhidden/src/Form/FormMixedSubmitHandlers.php
modules/contrib/past/src/PastEventArgumentNull.php
modules/contrib/past/src/PastEventDataInterface.php
modules/contrib/past/src/PastEventInterface.php
modules/contrib/past/src/PastEventNull.php
modules/contrib/past/modules/past_testhidden/src/Form/FormMultiValidation.php
modules/contrib/past/modules/past_testhidden/src/Form/FormMultistep.php
modules/contrib/past/tests/src/Functional/PastWebTest.php
modules/contrib/past/modules/past_simpletest/src/Entity/PastEventSimpletestArgument.php
modules/contrib/past/modules/past_testhidden/src/Form/FormNested.php
modules/contrib/past/modules/past_testhidden/errors/past.E_COMPILE_ERROR.inc
modules/contrib/past/modules/past_testhidden/errors/past.E_COMPILE_WARNING.inc
modules/contrib/past/modules/past_testhidden/errors/past.E_DEPRECATED.inc
modules/contrib/past/modules/past_testhidden/errors/past.E_ERROR.inc
modules/contrib/past/modules/past_testhidden/errors/past.E_NOTICE.inc
modules/contrib/past/modules/past_testhidden/errors/past.E_RECOVERABLE_ERROR.inc
modules/contrib/past/modules/past_testhidden/src/Form/FormNormalButton.php
modules/contrib/past/modules/past_testhidden/errors/past.E_STRICT.inc
modules/contrib/past/modules/past_testhidden/errors/past.E_STRICT_parse.inc
modules/contrib/past/modules/past_testhidden/errors/past.E_WARNING.inc
modules/contrib/past/modules/past_testhidden/errors/past.Exception.inc
modules/contrib/past/modules/past_testhidden/past_testhidden.module
modules/contrib/past/modules/past_testhidden/src/Form/FormSimpleAjax.php
modules/contrib/past/modules/past_testhidden/src/Controller/ErrorTrigger.php
modules/contrib/past/modules/past_testhidden/src/Form/FormCustomSubmitHandler.php
modules/contrib/past/modules/past_db/past_db.install
modules/contrib/past/modules/past_db/past_db.module
modules/contrib/past/modules/past_testhidden/src/Form/FormThreeButtons.php
modules/contrib/past/modules/past_db/src/PastEventStorageSchema.php
modules/contrib/past/modules/past_testhidden/src/Form/FormCustomValidationOnly.php
modules/contrib/past/modules/past_testhidden/src/Form/FormThreeButtonsWithSubmitHandlers.php
modules/contrib/past/modules/past_testhidden/src/Form/FormDefaultSubmitHandler.php
modules/contrib/past/modules/past_testhidden/src/Form/FormEmptySubmitArray.php
modules/contrib/past/modules/past_db/src/PastEventViewBuilder.php
modules/contrib/past/past.install
modules/contrib/past/past.module
modules/contrib/past/modules/past_db/src/PastEventViewsData.php
modules/contrib/past/modules/past_db/src/Plugin/views/field/EventArgumentData.php
modules/contrib/past/modules/past_db/src/Entity/PastEvent.php
modules/contrib/past/modules/past_db/src/Plugin/views/field/TraceUser.php
modules/contrib/past/src/EventSubscriber/PastSubscriber.php
modules/contrib/past/modules/past_db/src/Plugin/views/filter/EventArgumentData.php
modules/contrib/past/src/Form/PastSettingsForm.php
modules/contrib/past/tests/src/Kernel/PastKernelTest.php
modules/contrib/past/src/Logger/PastLogger.php
modules/contrib/past/modules/past_db/tests/src/Functional/PastDBTest.php
modules/contrib/past/src/PastCacheTagLogger.php
modules/contrib/past/src/PastEventArgumentInterface.php
modules/contrib/past/modules/past_db/src/Entity/PastEventType.php
modules/contrib/past/modules/past_db/src/EventTypeListBuilder.php
modules/contrib/past/modules/past_db/src/Form/PastEventTypeForm.php
modules/contrib/past/modules/past_db/src/PastEventAccessControlHandler.php
modules/contrib/past/modules/past_db/src/PastEventArgument.php
modules/contrib/past/modules/past_db/src/PastEventData.php
modules/contrib/past/tests/src/Kernel/PastNullTest.php
modules/contrib/past/tests/src/Traits/PastEventTestTrait.php
modules/contrib/past/modules/past_db/tests/src/Functional/PastDBTestBase.php
modules/contrib/past/modules/past_db/tests/src/Kernel/PastDBCrudTest.php
modules/contrib/past/modules/past_form/past_form.install
modules/contrib/past/modules/past_form/past_form.module
modules/contrib/past/modules/past_form/tests/src/Functional/PastFormTest.php
modules/contrib/past/modules/past_form/tests/src/FunctionalJavascript/PastFormJavascriptTest.php
modules/contrib/past/modules/past_simpletest/past_simpletest.module

8 files with changes
====================

1) modules/contrib/past/src/EventSubscriber/PastSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\past\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\Core\Utility\Error;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\HttpException;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;

 /**
@@ @@
   /**
    * Registers _past_shutdown_function as shutdown function.
    *
-   * @param GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   Is given by the event dispatcher.
    */
-  public function registerShutdownFunction(GetResponseEvent $event) {
+  public function registerShutdownFunction(RequestEvent $event) {
     drupal_register_shutdown_function('_past_shutdown_function');
   }

   /**
    * Logs an exception with the Past backend.
-   * 
-   * @param GetResponseForExceptionEvent $event
+   *
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *   Is given by the event dispatcher.
    */
-  public function onKernelException(GetResponseForExceptionEvent $event) {
+  public function onKernelException(ExceptionEvent $event) {
     if (!\Drupal::config('past.settings')->get('exception_handling')) {
       return;
     }
     // Do not log 404 and 403 exceptions.
-    if ($event->getException() instanceof HttpException) {
+    if ($event->getThrowable() instanceof HttpException) {
       return;
     }
     try{
-      $past_event = past_event_create('past', 'unhandled_exception', $event->getException()->getMessage());
-      $past_event->addArgument('exception', $event->getException());
+      $past_event = past_event_create('past', 'unhandled_exception', $event->getThrowable()->getMessage());
+      $past_event->addArgument('exception', $event->getThrowable());
       $past_event->setSeverity(RfcLogLevel::ERROR);
       $past_event->save();
     }
@@ @@
       // further uncaught exception being thrown.
       if (error_displayable()) {
         print '<h1>Additional uncaught exception thrown while handling exception.</h1>';
-        print '<h2>Original</h2><p>' . Error::renderExceptionSafe($event->getException()) . '</p>';
+        print '<h2>Original</h2><p>' . Error::renderExceptionSafe($event->getThrowable()) . '</p>';
         print '<h2>Additional</h2><p>' . Error::renderExceptionSafe($exception2) . '</p><hr />';
       }
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameMethodRector
 * RenameClassRector
 * WrapReturnRector


2) modules/contrib/past/modules/past_db/past_db.module:158

    ---------- begin diff ----------
@@ @@
 function past_db_views_api() {
   return [
     'api' => 3,
-    'template path' => drupal_get_path('module', 'past_db') . '/themes',
+    'template path' => \Drupal::service('extension.list.module')->getPath('past_db') . '/themes',
   ];
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


3) modules/contrib/past/tests/src/Kernel/PastKernelTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('past_event');
     $this->installEntitySchema('user');
@@ @@
    */
   public function testRequirements() {
     $element = past_requirements('runtime');
-    $this->assertEqual($element['past']['value'], 'past_db_create_event');
-    $this->assertEqual($element['past']['description'], t('Past backend is configured correctly.'));
-    $this->assertEqual($element['past']['severity'], REQUIREMENT_OK);
+    $this->assertEquals($element['past']['value'], 'past_db_create_event');
+    $this->assertEquals($element['past']['description'], t('Past backend is configured correctly.'));
+    $this->assertEquals($element['past']['severity'], REQUIREMENT_OK);
     $invalid_backend = 'any_value';
     $settings = Settings::getAll();
     $settings['past_backend'] = $invalid_backend;
     new Settings($settings);
     $element = past_requirements('runtime');
-    $this->assertEqual($element['past']['value'], $invalid_backend);
-    $this->assertEqual($element['past']['description'], t('Past backend missing (<em class="placeholder">@any_value</em>), install and configure a valid backend, like past_db.', ['@any_value' => $invalid_backend]));
-    $this->assertEqual($element['past']['severity'], REQUIREMENT_ERROR);
+    $this->assertEquals($element['past']['value'], $invalid_backend);
+    $this->assertEquals($element['past']['description'], t('Past backend missing (<em class="placeholder">@any_value</em>), install and configure a valid backend, like past_db.', ['@any_value' => $invalid_backend]));
+    $this->assertEquals($element['past']['severity'], REQUIREMENT_ERROR);
   }

   /**
@@ @@
   public function testSave() {
     past_event_save('past', 'test', 'A test log entry');
     $event = $this->getLastEventByMachinename('test');
-    $this->assertEqual('past', $event->getModule());
-    $this->assertEqual('test', $event->getMachineName());
-    $this->assertEqual('A test log entry', $event->getMessage());
-    $this->assertEqual(session_id(), $event->getSessionId());
-    $this->assertEqual(REQUEST_TIME, $event->getTimestamp());
-    $this->assertEqual(RfcLogLevel::INFO, $event->getSeverity());
-    $this->assertEqual([], $event->getArguments());
+    $this->assertEquals('past', $event->getModule());
+    $this->assertEquals('test', $event->getMachineName());
+    $this->assertEquals('A test log entry', $event->getMessage());
+    $this->assertEquals(session_id(), $event->getSessionId());
+    $this->assertEquals(\Drupal::time()->getRequestTime(), $event->getTimestamp());
+    $this->assertEquals(RfcLogLevel::INFO, $event->getSeverity());
+    $this->assertEquals([], $event->getArguments());

     past_event_save('past', 'test1', 'Another test log entry');
     $event = $this->getLastEventByMachinename('test1');
-    $this->assertEqual('Another test log entry', $event->getMessage());
+    $this->assertEquals('Another test log entry', $event->getMessage());

     $test_string = $this->randomString();
     past_event_save('past', 'test_argument', 'A test log entry with arguments', ['test' => $test_string, 'test2' => 5]);
     $event = $this->getLastEventByMachinename('test_argument');
-    $this->assertEqual(2, count($event->getArguments()));
-    $this->assertEqual('string', $event->getArgument('test')->getType());
-    $this->assertEqual($test_string, $event->getArgument('test')->getData());
-    $this->assertEqual(5, $event->getArgument('test2')->getData());
-    $this->assertEqual('test', $event->getArgument('test')->getKey());
-    $this->assertEqual('string', $event->getArgument('test')->getType());
-    $this->assertEqual('integer', $event->getArgument('test2')->getType());
+    $this->assertEquals(2, count($event->getArguments()));
+    $this->assertEquals('string', $event->getArgument('test')->getType());
+    $this->assertEquals($test_string, $event->getArgument('test')->getData());
+    $this->assertEquals(5, $event->getArgument('test2')->getData());
+    $this->assertEquals('test', $event->getArgument('test')->getKey());
+    $this->assertEquals('string', $event->getArgument('test')->getType());
+    $this->assertEquals('integer', $event->getArgument('test2')->getType());

     $this->assertNull($event->getArgument('does_not_exist'));

@@ @@
     ];
     past_event_save('past', 'test_array', 'Array argument', ['array' => $array_argument]);
     $event = $this->getLastEventByMachinename('test_array');
-    $this->assertEqual(1, count($event->getArguments()));
-    $this->assertEqual($array_argument, $event->getArgument('array')->getData());
-    $this->assertEqual('array', $event->getArgument('array')->getType());
+    $this->assertEquals(1, count($event->getArguments()));
+    $this->assertEquals($array_argument, $event->getArgument('array')->getData());
+    $this->assertEquals('array', $event->getArgument('array')->getType());

     $user = $this->createUser();
     past_event_save('past', 'test_user', 'Object argument', ['user' => $user]);
     $event = $this->getLastEventByMachinename('test_user');
-    $this->assertEqual($user->toArray(), $event->getArgument('user')->getData(),
-      'The user entity argument is preserved by saving and loading.');
-    $this->assertEqual('entity:user', $event->getArgument('user')->getType());
+    $this->assertEquals($user->toArray(), $event->getArgument('user')->getData(), 'The user entity argument is preserved by saving and loading.');
+    $this->assertEquals('entity:user', $event->getArgument('user')->getType());

     $exception = new \Exception('An exception', 500);
     past_event_save('past', 'test_exception', 'An exception', ['exception' => $exception]);
     $event = $this->getLastEventByMachinename('test_exception');
     $expected = ['backtrace' => $exception->getTraceAsString()] + Error::decodeException($exception);
-    $this->assertEqual($expected, $event->getArgument('exception')->getData(),
-      'The exception argument is preserved by saving and loading.');
+    $this->assertEquals($expected, $event->getArgument('exception')->getData(), 'The exception argument is preserved by saving and loading.');
     // @todo: We still need to know that this was an exception.
-    $this->assertEqual('array', $event->getArgument('exception')->getType());
+    $this->assertEquals('array', $event->getArgument('exception')->getType());

     // Created an exception with 4 nested previous exceptions, the 4th will be
     // ignored.
@@ @@
     $expected['previous'] = ['backtrace' => $previous_exception->getTraceAsString()] + Error::decodeException($previous_exception);
     $expected['previous']['previous'] = ['backtrace' => $previous_previous_exception->getTraceAsString()] + Error::decodeException($previous_previous_exception);
     $expected['previous']['previous']['previous'] = ['backtrace' => $previous_previous_previous_exception->getTraceAsString()] + Error::decodeException($previous_previous_previous_exception);
-    $this->assertEqual($expected, $event->getArgument('exception')->getData(),
-      'The nested exception argument is preserved by saving and loading.');
+    $this->assertEquals($expected, $event->getArgument('exception')->getData(), 'The nested exception argument is preserved by saving and loading.');

     past_event_save('past', 'test_timestamp', 'Event with a timestamp', [], ['timestamp' => \Drupal::time()->getRequestTime() - 1]);
     $event = $this->getLastEventByMachinename('test_timestamp');
-    $this->assertEqual(\Drupal::time()->getRequestTime() - 1, $event->getTimestamp());
+    $this->assertEquals(\Drupal::time()->getRequestTime() - 1, $event->getTimestamp());

     // Test saving events with a severity threshold.
     // First set severity_threshold as RfcLogLevel::WARNING.
@@ @@
     // This event will NOT be saved.
     $option = ['severity' => RfcLogLevel::INFO];
     $created = past_event_create('past_db', 'testEventLowerSeverity', NULL, $option);
-    $this->assertEqual($created->save(), NULL);
+    $this->assertEquals($created->save(), NULL);

     // Create an event with a higher severity value than severity_threshold.
     // This event will be saved.
     $option = ['severity' => RfcLogLevel::ERROR];
     $created = past_event_create('past_db', 'testEventHigherSeverity', NULL, $option);
-    $this->assertEqual($created->save(), SAVED_NEW);
+    $this->assertEquals($created->save(), SAVED_NEW);

     // Create an event with same severity value than severity_threshold.
     // This event will be saved.
     $option = ['severity' => RfcLogLevel::WARNING];
     $created = past_event_create('past_db', 'testEventSameSeverity', NULL, $option);
-    $this->assertEqual($created->save(), SAVED_NEW);
+    $this->assertEquals($created->save(), SAVED_NEW);

     // Test adding an exception argument to the current past event and raising
     // its severity.
@@ @@
     $event = $this->getLastEventByMachinename('test_user');

     // Severity set as RfcLogLevel::INFO by default.
-    $this->assertEqual(1, count($event->getArguments()));
-    $this->assertEqual(RfcLogLevel::INFO, $event->getSeverity());
+    $this->assertEquals(1, count($event->getArguments()));
+    $this->assertEquals(RfcLogLevel::INFO, $event->getSeverity());
     $this->assertFalse(array_key_exists('exception', $event->getArguments()));

     // Test that adding an exception, the event's severity should be set as
@@ @@
     $event->addException($exception);
     $event->save();

-    $this->assertEqual(2, count($event->getArguments()));
-    $this->assertEqual(RfcLogLevel::ERROR, $event->getSeverity());
+    $this->assertEquals(2, count($event->getArguments()));
+    $this->assertEquals(RfcLogLevel::ERROR, $event->getSeverity());
     $this->assertTrue(array_key_exists('exception', $event->getArguments()));

     // Test that adding an exception with a higher event's severity than the
@@ @@
     $event->addException($exception, [], RfcLogLevel::ALERT);
     $event->save();

-    $this->assertEqual(2, count($event->getArguments()));
-    $this->assertEqual(RfcLogLevel::ALERT, $event->getSeverity());
+    $this->assertEquals(2, count($event->getArguments()));
+    $this->assertEquals(RfcLogLevel::ALERT, $event->getSeverity());
     $this->assertTrue(array_key_exists('exception', $event->getArguments()));

     // Test that adding an exception with a lower event's severity than the
@@ @@
     $event->addException($exception, [], RfcLogLevel::WARNING);
     $event->save();

-    $this->assertEqual(2, count($event->getArguments()));
-    $this->assertEqual(RfcLogLevel::ALERT, $event->getSeverity());
+    $this->assertEquals(2, count($event->getArguments()));
+    $this->assertEquals(RfcLogLevel::ALERT, $event->getSeverity());
     $this->assertTrue(array_key_exists('exception', $event->getArguments()));
   }

@@ @@
     $event->save();

     $event = $this->getLastEventByMachinename('test_raw');
-    $this->assertEqual($array_argument, $event->getArgument('first')->getData());
-    $this->assertEqual('simple', $event->getArgument('second')->getData());
+    $this->assertEquals($array_argument, $event->getArgument('first')->getData());
+    $this->assertEquals('simple', $event->getArgument('second')->getData());

     // Test the exclude filter.
     $event = past_event_create('past', 'test_exclude', 'Exclude filter');
@@ @@
     unset($excluded_array['something']);

     $event = $this->getLastEventByMachinename('test_exclude');
-    $this->assertEqual(1, count($event->getArguments()));
-    $this->assertEqual($excluded_array, $event->getArgument('array')->getData());
+    $this->assertEquals(1, count($event->getArguments()));
+    $this->assertEquals($excluded_array, $event->getArgument('array')->getData());
   }

   /**
@@ @@
     $logger->info($msg);
     $event = $this->getLastEventByMachinename($machine_name);
     $this->assertNotNull($event, 'Watchdog call caused an event.');
-    $this->assertEqual('watchdog', $event->getModule());
-    $this->assertEqual($msg, $event->getMessage());
-    $this->assertEqual(RfcLogLevel::INFO, $event->getSeverity());
-    $this->assertEqual(1, count($event->getArguments()));
+    $this->assertEquals('watchdog', $event->getModule());
+    $this->assertEquals($msg, $event->getMessage());
+    $this->assertEquals(RfcLogLevel::INFO, $event->getSeverity());
+    $this->assertEquals(1, count($event->getArguments()));
     $this->assertNotNull($event->getArgument('watchdog_args'));
-    $this->assertEqual($event->getLocation(), 'http://localhost/');
+    $this->assertEquals($event->getLocation(), 'http://localhost/');
     $this->assertTrue(strpos($event->getReferer(), 'mock-referer')===0,
       'Contains mock-referer.');

     // Note that here we do not create a test user but use the user that has
     // triggered the test as this is the user captured in the $logger->info().
-    $this->assertEqual($user->id(), $event->getUid());
+    $this->assertEquals($user->id(), $event->getUid());

     $msg = 'something new';
     $nice_url = 'http://www.md-systems.ch';
     $logger->notice($msg, ['link' => $nice_url]);
     $event = $this->getLastEventByMachinename($machine_name);
-    $this->assertEqual('watchdog', $event->getModule());
-    $this->assertEqual($msg, $event->getMessage());
-    $this->assertEqual(RfcLogLevel::NOTICE, $event->getSeverity());
+    $this->assertEquals('watchdog', $event->getModule());
+    $this->assertEquals($msg, $event->getMessage());
+    $this->assertEquals(RfcLogLevel::NOTICE, $event->getSeverity());
     // A notice generates a backtrace and there's an additional link
     // argument, so there are three arguments.
-    $this->assertEqual(3, count($event->getArguments()));
+    $this->assertEquals(3, count($event->getArguments()));
     $this->assertNotNull($event->getArgument('watchdog_args'));
     $this->assertNotNull($event->getArgument('link'));
-    $this->assertEqual($nice_url, $event->getArgument('link')->getData());
+    $this->assertEquals($nice_url, $event->getArgument('link')->getData());

     // Now we disable watchdog logging.
     $this->config('past.settings')
@@ @@
     $logger->info('something Past will not see');
     $event = $this->getLastEventByMachinename($machine_name);
     // And still the previous message should be found.
-    $this->assertEqual($msg, $event->getMessage());
+    $this->assertEquals($msg, $event->getMessage());
   }

   /**
@@ @@
     // By default, the global session ID should be stored.
     past_event_save('past', 'test', 'A test log entry');
     $event = $this->getLastEventByMachinename('test');
-    $this->assertEqual(session_id(), $event->getSessionId());
+    $this->assertEquals(session_id(), $event->getSessionId());

     // Global session ID should only be stored if enabled in config.
     $this->config('past.settings')
@@ @@
       ->save();
     past_event_save('past', 'test1', 'Another test log entry');
     $event = $this->getLastEventByMachinename('test1');
-    $this->assertEqual('', $event->getSessionId());
+    $this->assertEquals('', $event->getSessionId());

     // Explicitly set session ID should be stored in any case.
     $event = past_event_create('past', 'test2', 'And Another test log entry');
@@ @@
     $event->setSessionId('trace me');
     $event->save();
     $event = $this->getLastEventByMachinename('test2');
-    $this->assertEqual('trace me', $event->getSessionId());
+    $this->assertEquals('trace me', $event->getSessionId());

     // Explicitly set session ID should be used in favor of the global one.
     $this->config('past.settings')
@@ @@
     $event->setSessionId('trace me too');
     $event->save();
     $event = $this->getLastEventByMachinename('test3');
-    $this->assertEqual('trace me too', $event->getSessionId());
+    $this->assertEquals('trace me too', $event->getSessionId());
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/past/tests/src/Functional/PastWebTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     // Empty the logfile, our fatal errors are expected.
     $filename = DRUPAL_ROOT . '/' . $this->siteDirectory . '/error.log';
     file_put_contents($filename, '');
@@ @@

     // Let's produce an exception, the exception handler is enabled by default.
     $this->drupalGet('past_trigger_error/Exception');
-    $this->assertText(t('The website encountered an unexpected error. Please try again later.'));
-    $this->assertText('Exception: This is an exception.');
+    $this->assertSession()->pageTextContains(t('The website encountered an unexpected error. Please try again later.'));
+    $this->assertSession()->pageTextContains('Exception: This is an exception.');

     // Now we should have a log event, assert it.
     $event = $this->getLastEventByMachinename('unhandled_exception');
-    $this->assertEqual('past', $event->getModule());
-    $this->assertEqual('unhandled_exception', $event->getMachineName());
-    $this->assertEqual(RfcLogLevel::ERROR, $event->getSeverity());
-    $this->assertEqual(1, count($event->getArguments()));
+    $this->assertEquals('past', $event->getModule());
+    $this->assertEquals('unhandled_exception', $event->getMachineName());
+    $this->assertEquals(RfcLogLevel::ERROR, $event->getSeverity());
+    $this->assertEquals(1, count($event->getArguments()));

     $this->drupalGet('test');
     // Test for not displaying 403 and 404 logs.
     $event_404 = $this->getLastEventByMachinename('unhandled_exception');
-    $this->assertEqual($event->id(), $event_404->id(), 'No 403 and 404 logs were displayed');
+    $this->assertEquals($event->id(), $event_404->id(), 'No 403 and 404 logs were displayed');

     $data = $event->getArgument('exception')->getData();
     $this->assertTrue(array_key_exists('backtrace', $data));
-    $this->assertEqual($account->id(), $event->getUid());
+    $this->assertEquals($account->id(), $event->getUid());

     // Disable exception handling and re-throw the exception.
     $this->config('past.settings')
@@ @@
       ->set('exception_handling', 0)
       ->save();
     $this->drupalGet('past_trigger_error/Exception');
-    $this->assertText(t('The website encountered an unexpected error. Please try again later.'));
-    $this->assertText('Exception: This is an exception.');
+    $this->assertSession()->pageTextContains(t('The website encountered an unexpected error. Please try again later.'));
+    $this->assertSession()->pageTextContains('Exception: This is an exception.');

     // No new exception should have been logged.
     $event_2 = $this->getLastEventByMachinename('unhandled_exception');
-    $this->assertEqual($event->id(), $event_2->id(), 'No new event was logged');
+    $this->assertEquals($event->id(), $event_2->id(), 'No new event was logged');
   }

   /**
@@ @@
     //   PHP 7.
     if (version_compare(PHP_VERSION, '7.0.0') >= 0) {
       $event = $this->getLastEventByMachinename('php');
-      $this->assertEqual('watchdog', $event->getModule());
-      $this->assertEqual(RfcLogLevel::ERROR, $event->getSeverity());
-      $this->assertEqual(1, count($event->getArguments()));
+      $this->assertEquals('watchdog', $event->getModule());
+      $this->assertEquals(RfcLogLevel::ERROR, $event->getSeverity());
+      $this->assertEquals(1, count($event->getArguments()));
       $this->assertTrue(strpos($event->getMessage(), 'Error: Cannot use object of type stdClass as array') !== FALSE);
     }
     else {
       $event = $this->getLastEventByMachinename('fatal_error');
-      $this->assertEqual('past', $event->getModule());
-      $this->assertEqual(RfcLogLevel::CRITICAL, $event->getSeverity());
-      $this->assertEqual(1, count($event->getArguments()));
-      $this->assertEqual('Cannot use object of type stdClass as array', $event->getMessage());
+      $this->assertEquals('past', $event->getModule());
+      $this->assertEquals(RfcLogLevel::CRITICAL, $event->getSeverity());
+      $this->assertEquals(1, count($event->getArguments()));
+      $this->assertEquals('Cannot use object of type stdClass as array', $event->getMessage());
       $data = $event->getArgument('error')->getData();
-      $this->assertEqual($data['type'], E_ERROR);
-      $this->assertEqual($account->id(), $event->getUid());
+      $this->assertEquals($data['type'], E_ERROR);
+      $this->assertEquals($account->id(), $event->getUid());
     }
   }

@@ @@
     $event = $this->getLastEventByMachinename('php');
     $this->assertTextContains($event->getMessage(), 'Non-static method Strict::test() should not be called statically');
     // Make sure that the page is rendered correctly.
-    $this->assertText('hello, world');
+    $this->assertSession()->pageTextContains('hello, world');

     /*
      * Test is unreliable, fix in https://www.drupal.org/node/2533554.
@@ @@
     $edit = [
       'log_watchdog' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/development/past', $edit, t('Save configuration'));
-    $this->assertFieldChecked("edit-backtrace-include-severity-0", 'Default config set correctly');
-    $this->assertNoFieldChecked("edit-backtrace-include-severity-6", 'Default config set correctly');
+    $this->drupalGet('admin/config/development/past');
+    $this->submitForm($edit, t('Save configuration'));
+    $this->assertSession()->checkboxChecked("edit-backtrace-include-severity-0", 'Default config set correctly');
+    $this->assertSession()->checkboxNotChecked("edit-backtrace-include-severity-6", 'Default config set correctly');
     $edit = [
       'backtrace_include[severity_0]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
-    $this->assertNoFieldChecked("edit-backtrace-include-severity-0", 'Emergency set to false');
+    $this->submitForm($edit, t('Save configuration'));
+    $this->assertSession()->checkboxNotChecked("edit-backtrace-include-severity-0", 'Emergency set to false');
     $edit = [
       'backtrace_include[severity_0]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
-    $this->assertFieldChecked("edit-backtrace-include-severity-0", 'Emergency set to true');
+    $this->submitForm($edit, t('Save configuration'));
+    $this->assertSession()->checkboxChecked("edit-backtrace-include-severity-0", 'Emergency set to true');
   }

   /**
@@ @@
    * @param string $chunk
    */
   function assertTextContains($text, $chunk) {
-    $this->assert(strpos($text, $chunk) !== FALSE,
-      t('@text contains @chunk.', [
-        '@text' => $text,
-        '@chunk' => $chunk,
-      ]));
+    $this->assertTrue(strpos($text, $chunk) !== FALSE, t('@text contains @chunk.', [
+      '@text' => $text,
+      '@chunk' => $chunk,
+    ]));
   }
   /**
    * Asserts if $text starts with $chunk.
@@ @@
    * @param string $chunk
    */
   function assertTextStartsWith($text, $chunk) {
-    $this->assert(strpos($text, $chunk) === 0,
-      t('@text starts with @chunk.', [
-        '@text' => $text,
-        '@chunk' => $chunk
-      ]));
+    $this->assertTrue(strpos($text, $chunk) === 0, t('@text starts with @chunk.', [
+      '@text' => $text,
+      '@chunk' => $chunk
+    ]));
   }

   /**
@@ @@
     $this->drupalLogin($user2);
     // Check that a fatal error is not encountered when visiting the past page.
     $this->drupalGet('admin/reports/past');
-    $this->assertResponse(200, 'Received expected HTTP status code 200.');
+    $this->assertSession()->statusCodeEquals(200, 'Received expected HTTP status code 200.');
     // Check the link redirect to a non-fatal error page.
     $this->getSession()->getPage()->clickLink('Session: ');
-    $this->assertResponse(200, 'Received expected HTTP status code 200.');
+    $this->assertSession()->statusCodeEquals(200, 'Received expected HTTP status code 200.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldCheckedRector
 * AssertNoFieldCheckedRector
 * AssertRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/past/modules/past_form/tests/src/FunctionalJavascript/PastFormJavascriptTest.php:49

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->viewUser = $this->drupalCreateUser([
       'view past reports',
@@ @@
     $form_id = 'past_testhidden_form_simple_ajax';
     $button_value = 'Submit';
     $this->drupalGet($form_id);
-    $this->assertRaw('form handler called by ' . $form_id);
+    $this->assertSession()->responseContains('form handler called by ' . $form_id);
     $this->getSession()->getPage()->pressButton('Submit');
     $this->assertSession()->assertWaitOnAjaxRequest();
     $this->assertSession()->pageTextNotContains('global submit handler called by ' . $form_id);
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/past/modules/past_form/tests/src/Functional/PastFormTest.php:53

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->viewUser = $this->drupalCreateUser([
       'view past reports',
@@ @@
     $form_id = 'past_testhidden_form_empty_submit_array';
     $button_value = 'Submit';
     $this->drupalGet($form_id);
-    $this->assertText('form handler called by ' . $form_id);
-    $this->drupalPostForm(NULL, $edit, $button_value);
-    $this->assertNoRaw('global submit handler called by ' . $form_id);
+    $this->assertSession()->pageTextContains('form handler called by ' . $form_id);
+    $this->submitForm($edit, $button_value);
+    $this->assertSession()->responseNotContains('global submit handler called by ' . $form_id);

     $event = $this->getLastEventByMachineName('submit');
     $this->eventToBe = $this->getEventToBe('submit', $form_id, $button_value);
@@ @@
     // The last event is still the login.
     $event = $this->getLastEventByMachineName('submit');
     $this->assertTrue("Form submitted: user_login_form, Log in" == $event->getMessage(), 'views_exposed_form submit was not logged.');
+    $this->drupalGet('admin/reports/past');

     // Additional submits after the page load submit.
-    $this->drupalPostForm('admin/reports/past', ['module' => 'watchdog'], t('Apply'));
+    $this->submitForm(['module' => 'watchdog'], t('Apply'));
     $event = $this->getLastEventByMachineName('submit');
     $this->assertTrue("Form submitted: user_login_form, Log in" == $event->getMessage(), 'views_exposed_form submit was not logged.');
     // @todo This should add the submission. Wrong currently!
@@ @@
     $form_id = 'past_testhidden_form_default_submit_handler';
     $button_value = 'Submit';
     $this->drupalGet($form_id);
-    $this->assertRaw('form handler called by ' . $form_id);
-    $this->drupalPostForm(NULL, $edit, $button_value);
-    $this->assertText('global submit handler called by ' . $form_id);
+    $this->assertSession()->responseContains('form handler called by ' . $form_id);
+    $this->submitForm($edit, $button_value);
+    $this->assertSession()->pageTextContains('global submit handler called by ' . $form_id);

     $event = $this->getLastEventByMachineName('submit');
     $this->eventToBe = $this->getEventToBe('submit', $form_id, $button_value);
@@ @@
     $form_id = 'past_testhidden_form_custom_submit_handler';
     $button_value = 'Submit';
     $this->drupalGet($form_id);
-    $this->assertRaw('form handler called by ' . $form_id);
-    $this->drupalPostForm(NULL, $edit, $button_value);
-    $this->assertText('custom submit handler called by ' . $form_id);
+    $this->assertSession()->responseContains('form handler called by ' . $form_id);
+    $this->submitForm($edit, $button_value);
+    $this->assertSession()->pageTextContains('custom submit handler called by ' . $form_id);

     $event = $this->getLastEventByMachineName('submit');
     $this->eventToBe = $this->getEventToBe('submit', $form_id, $button_value);
@@ @@
     $edit = [];
     $form_id = 'past_testhidden_form_mixed_submit_handlers';
     $this->drupalGet($form_id);
-    $this->assertRaw('form handler called by ' . $form_id);
-    $this->drupalPostForm(NULL, $edit, $button_value);
-    $this->assertNoRaw('global submit handler called by ' . $form_id);
-    $this->assertText('submit handler called by ' . $form_id);
+    $this->assertSession()->responseContains('form handler called by ' . $form_id);
+    $this->submitForm($edit, $button_value);
+    $this->assertSession()->responseNotContains('global submit handler called by ' . $form_id);
+    $this->assertSession()->pageTextContains('submit handler called by ' . $form_id);

     $event = $this->getLastEventByMachineName('submit');
     $this->eventToBe = $this->getEventToBe('submit', $form_id, $button_value);
@@ @@
     $edit = [];
     $form_id = 'past_testhidden_form_three_buttons';
     $this->drupalGet($form_id);
-    $this->assertRaw('form handler called by ' . $form_id);
+    $this->assertSession()->responseContains('form handler called by ' . $form_id);
     $button_value = 'Button 1';
-    $this->drupalPostForm(NULL, $edit, $button_value);
+    $this->submitForm($edit, $button_value);

     $event = $this->getLastEventByMachineName('submit');
     $this->eventToBe = $this->getEventToBe('submit', $form_id, $button_value);
@@ @@
     $this->assertSameEvent($event, $this->eventToBe, $form_id, $button_value, $values_to_be);

     $button_value = 'Button 2';
-    $this->drupalPostForm(NULL, $edit, $button_value);
+    $this->submitForm($edit, $button_value);

     $event = $this->getLastEventByMachineName('submit');
     $this->eventToBe = $this->getEventToBe('submit', $form_id, $button_value);
@@ @@
     $this->assertSameEvent($event, $this->eventToBe, $form_id, $button_value, $values_to_be);

     $button_value = 'Button 3';
-    $this->drupalPostForm(NULL, $edit, $button_value);
+    $this->submitForm($edit, $button_value);

     $event = $this->getLastEventByMachineName('submit');
     $this->eventToBe = $this->getEventToBe('submit', $form_id, $button_value);
@@ @@
     $edit = [];
     $form_id = 'past_testhidden_form_three_buttons_with_submit_handlers';
     $this->drupalGet($form_id);
-    $this->assertRaw('form handler called by ' . $form_id);
+    $this->assertSession()->responseContains('form handler called by ' . $form_id);
     $button_value = 'Button 1';
-    $this->drupalPostForm(NULL, $edit, $button_value);
-    $this->assertNoRaw('global submit handler called by ' . $form_id);
-    $this->assertText('custom submit handler ' . $button_value . ' called by ' . $form_id);
+    $this->submitForm($edit, $button_value);
+    $this->assertSession()->responseNotContains('global submit handler called by ' . $form_id);
+    $this->assertSession()->pageTextContains('custom submit handler ' . $button_value . ' called by ' . $form_id);

     $event = $this->getLastEventByMachineName('submit');
     $this->eventToBe = $this->getEventToBe('submit', $form_id, $button_value);
@@ @@
     $this->assertSameEvent($event, $this->eventToBe, $form_id, $button_value, $values_to_be);

     $button_value = 'Button 2';
-    $this->drupalPostForm(NULL, $edit, $button_value);
-    $this->assertNoRaw('global submit handler called by ' . $form_id);
-    $this->assertText('custom submit handler ' . $button_value . ' called by ' . $form_id);
+    $this->submitForm($edit, $button_value);
+    $this->assertSession()->responseNotContains('global submit handler called by ' . $form_id);
+    $this->assertSession()->pageTextContains('custom submit handler ' . $button_value . ' called by ' . $form_id);

     $event = $this->getLastEventByMachineName('submit');
     $this->eventToBe = $this->getEventToBe('submit', $form_id, $button_value);
@@ @@
     $this->assertSameEvent($event, $this->eventToBe, $form_id, $button_value, $values_to_be);

     $button_value = 'Button 3';
-    $this->drupalPostForm(NULL, $edit, $button_value);
-    $this->assertNoRaw('global submit handler called by ' . $form_id);
-    $this->assertText('custom submit handler ' . $button_value . ' called by ' . $form_id);
+    $this->submitForm($edit, $button_value);
+    $this->assertSession()->responseNotContains('global submit handler called by ' . $form_id);
+    $this->assertSession()->pageTextContains('custom submit handler ' . $button_value . ' called by ' . $form_id);

     $event = $this->getLastEventByMachineName('submit');
     $this->eventToBe = $this->getEventToBe('submit', $form_id, $button_value);
@@ @@
     $form_id = 'past_testhidden_form_normal_button';
     $button_value = 'Button';
     $this->drupalGet($form_id);
-    $this->assertRaw('form handler called by ' . $form_id);
-    $this->drupalPostForm(NULL, $edit, $button_value);
-    $this->assertNoRaw('global submit handler called by ' . $form_id);
-    $this->assertNoRaw('custom submit handler called by ' . $form_id);
+    $this->assertSession()->responseContains('form handler called by ' . $form_id);
+    $this->submitForm($edit, $button_value);
+    $this->assertSession()->responseNotContains('global submit handler called by ' . $form_id);
+    $this->assertSession()->responseNotContains('custom submit handler called by ' . $form_id);

     $this->assertNull($this->getLastEventByMachineName('submit'));

     // Is logged if we use '#executes_submit_callback' => TRUE.
     $button_value = 'Submittable';
-    $this->drupalPostForm(NULL, $edit, $button_value);
-    $this->assertNoRaw('global submit handler called by ' . $form_id);
-    $this->assertText('custom submit handler called by ' . $form_id);
+    $this->submitForm($edit, $button_value);
+    $this->assertSession()->responseNotContains('global submit handler called by ' . $form_id);
+    $this->assertSession()->pageTextContains('custom submit handler called by ' . $form_id);
     $event = $this->getLastEventByMachineName('submit');
     $this->eventToBe = $this->getEventToBe('submit', $form_id, $button_value);
     $values_to_be = [
@@ @@
     $edit = ['sample_property' => ''];
     $form_id = 'past_testhidden_form_custom_submit_handler';
     $this->drupalGet($form_id);
-    $this->assertRaw('form handler called by ' . $form_id);
-    $this->drupalPostForm(NULL, $edit, 'Submit');
-    $this->assertNoRaw('global submit handler called by ' . $form_id);
+    $this->assertSession()->responseContains('form handler called by ' . $form_id);
+    $this->submitForm($edit, 'Submit');
+    $this->assertSession()->responseNotContains('global submit handler called by ' . $form_id);
     $this->assertFieldByXPath('//input[contains(@class, "error")]', FALSE, 'Error input form element class found.');

     $this->assertNull($this->getLastEventByMachineName('submit'));
@@ @@
     $form_id = 'past_testhidden_form_multi_validation';
     $button_value = 'Submit';
     $this->drupalGet($form_id);
-    $this->assertRaw('form handler called by ' . $form_id);
-    $this->drupalPostForm(NULL, $edit, $button_value);
-    $this->assertNoRaw('global submit handler called by ' . $form_id);
+    $this->assertSession()->responseContains('form handler called by ' . $form_id);
+    $this->submitForm($edit, $button_value);
+    $this->assertSession()->responseNotContains('global submit handler called by ' . $form_id);
     $this->assertFieldByXPath('//input[contains(@class, "error")]', FALSE, 'Error input form element class found.');

     $event = $this->getLastEventByMachineName('validate');
@@ @@
     $form_id = 'past_testhidden_form_custom_validation_only';
     $button_value = 'Submit';
     $this->drupalGet($form_id);
-    $this->assertRaw('form handler called by ' . $form_id);
-    $this->drupalPostForm(NULL, $edit, $button_value);
-    $this->assertNoRaw('global submit handler called by ' . $form_id);
+    $this->assertSession()->responseContains('form handler called by ' . $form_id);
+    $this->submitForm($edit, $button_value);
+    $this->assertSession()->responseNotContains('global submit handler called by ' . $form_id);
     $element = $this->assertSession()->elementExists('css', 'select.error');
     $this->assertEquals('edit-sample-select', $element->getAttribute('id'));

@@ @@
     $button_value = t('Submit');
     $this->drupalGet($form_id);
     $edit = ['wrapper[field_1]' => 'wrong value'];
-    $this->drupalPostForm(NULL, $edit, $button_value);
+    $this->submitForm($edit, $button_value);
     // Check for correct validation error messages and CSS class on field.
-    $this->assertText(t("Field 1 doesn't contain the right value"));
+    $this->assertSession()->pageTextContains(t("Field 1 doesn't contain the right value"));
     $element = $this->assertSession()->elementExists('css', 'input.error');
     $this->assertEquals('edit-wrapper-field-1', $element->getAttribute('id'));
     // Load latest validation log record and create an artificial that contains
@@ @@
       'wrapper[field_1]' => 'correct value',
       'wrapper[field_2]' => 'some other value',
     ];
-    $this->drupalPostForm(NULL, $edit, $button_value);
+    $this->submitForm($edit, $button_value);
     $event = $this->getLastEventByMachineName('submit');
     $this->eventToBe = $this->getEventToBe('submit', $form_id, $button_value);
     $values_to_be = [
@@ @@
     $button_value = 'Next';
     $step = 1;
     $this->drupalGet($form_id);
-    $this->assertRaw('form handler step ' . $step . ' called by ' . $form_id);
-    $this->drupalPostForm(NULL, $edit, $button_value);
-    $this->assertText('global submit handler step ' . $step . ' called by ' . $form_id);
+    $this->assertSession()->responseContains('form handler step ' . $step . ' called by ' . $form_id);
+    $this->submitForm($edit, $button_value);
+    $this->assertSession()->pageTextContains('global submit handler step ' . $step . ' called by ' . $form_id);
     $step++;
-    $this->assertRaw('form handler step ' . $step . ' called by ' . $form_id);
+    $this->assertSession()->responseContains('form handler step ' . $step . ' called by ' . $form_id);

     $event = $this->getLastEventByMachineName('submit');
     $this->eventToBe = $this->getEventToBe('submit', $form_id, $button_value);
@@ @@

     $this->assertSameEvent($event, $this->eventToBe, $form_id, $button_value, $values_to_be);

-    $this->drupalPostForm(NULL, $edit, $button_value);
-    $this->assertText('global submit handler step ' . $step . ' called by ' . $form_id);
+    $this->submitForm($edit, $button_value);
+    $this->assertSession()->pageTextContains('global submit handler step ' . $step . ' called by ' . $form_id);
     $step++;
-    $this->assertRaw('form handler step ' . $step . ' called by ' . $form_id);
+    $this->assertSession()->responseContains('form handler step ' . $step . ' called by ' . $form_id);

     $event = $this->getLastEventByMachineName('submit');
     $this->eventToBe = $this->getEventToBe('submit', $form_id, $button_value);
@@ @@
     $this->assertSameEvent($event, $this->eventToBe, $form_id, $button_value, $values_to_be);

     $button_value = 'Back';
-    $this->drupalPostForm(NULL, $edit, $button_value);
-    $this->assertText('global submit handler step ' . $step . ' called by ' . $form_id);
+    $this->submitForm($edit, $button_value);
+    $this->assertSession()->pageTextContains('global submit handler step ' . $step . ' called by ' . $form_id);
     $step--;
-    $this->assertRaw('form handler step ' . $step . ' called by ' . $form_id);
+    $this->assertSession()->responseContains('form handler step ' . $step . ' called by ' . $form_id);

     $event = $this->getLastEventByMachineName('submit');
     $this->eventToBe = $this->getEventToBe('submit', $form_id, $button_value);
@@ @@
     $this->assertSameEvent($event, $this->eventToBe, $form_id, $button_value, $values_to_be);

     $button_value = 'Next';
-    $this->drupalPostForm(NULL, $edit, $button_value);
-    $this->assertText('global submit handler step ' . $step . ' called by ' . $form_id);
+    $this->submitForm($edit, $button_value);
+    $this->assertSession()->pageTextContains('global submit handler step ' . $step . ' called by ' . $form_id);
     $step++;
-    $this->assertRaw('form handler step ' . $step . ' called by ' . $form_id);
+    $this->assertSession()->responseContains('form handler step ' . $step . ' called by ' . $form_id);

     $event = $this->getLastEventByMachineName('submit');
     $this->eventToBe = $this->getEventToBe('submit', $form_id, $button_value);
@@ @@
     $this->assertSameEvent($event, $this->eventToBe, $form_id, $button_value, $values_to_be);

     $button_value = 'Submit';
-    $this->drupalPostForm(NULL, $edit, $button_value);
-    $this->assertText('global submit handler step ' . $step . ' called by ' . $form_id);
+    $this->submitForm($edit, $button_value);
+    $this->assertSession()->pageTextContains('global submit handler step ' . $step . ' called by ' . $form_id);

     $event = $this->getLastEventByMachineName('submit');
     $this->eventToBe = $this->getEventToBe('submit', $form_id, $button_value);
@@ @@
     // Test exclusion.
     $this->config->set('past_form_log_form_ids', [''])->save();
     $this->drupalGet($form_id);
-    $this->drupalPostForm(NULL, $edit, $button_value);
+    $this->submitForm($edit, $button_value);

     // Event shouldn't be logged.
     $this->assertNull($this->getLastEventByMachineName('submit'));
@@ @@
     // Test inclusion.
     $this->config->set('past_form_log_form_ids', [$form_id])->save();
     $this->drupalGet($form_id);
-    $this->drupalPostForm(NULL, $edit, $button_value);
+    $this->submitForm($edit, $button_value);

     $event = $this->getLastEventByMachineName('submit');
     $this->eventToBe = $this->getEventToBe('submit', $form_id, $button_value);
@@ @@

     $form_id = 'past_testhidden_form_custom_submit_handler';
     $this->drupalGet($form_id);
-    $this->drupalPostForm(NULL, $edit, $button_value);
+    $this->submitForm($edit, $button_value);

     // This new event should not be logged, so still the old event should be
     // fetched.
@@ @@
       ->set('past_form_log_form_ids', array_merge($this->config->get('past_form_log_form_ids'), [$form_id]))
       ->save();
     $this->drupalGet($form_id);
-    $this->drupalPostForm(NULL, $edit, $button_value);
+    $this->submitForm($edit, $button_value);

     // Now the new event should be found.
     $event = $this->getLastEventByMachineName('submit');
@@ @@
     $this->config->set('past_form_log_form_ids', ['*testhidden_form_*'])->save();
     $form_id = 'past_testhidden_form_empty_submit_array';
     $this->drupalGet($form_id);
-    $this->drupalPostForm(NULL, $edit, $button_value);
+    $this->submitForm($edit, $button_value);

     // Again the first form_id should be found.
     $event = $this->getLastEventByMachineName('submit');
@@ @@

     $form_id = 'past_testhidden_form_custom_submit_handler';
     $this->drupalGet($form_id);
-    $this->drupalPostForm(NULL, $edit, $button_value);
+    $this->submitForm($edit, $button_value);

     // And also the new one.
     $event = $this->getLastEventByMachineName('submit');
@@ @@
       'mail' => $this->randomMachineName() . '@example.com',
     ];
     $register_button_value = t('Create new account');
-    $this->drupalPostForm(NULL, $register_edit, $register_button_value);
+    $this->submitForm($register_edit, $register_button_value);

     // Load last logged submission and check whether it's not the user register
     // submission.
@@ @@
     $this->config->set('past_form_log_form_ids', ['*'])->save();
     $form_id = 'past_testhidden_form_empty_submit_array';
     $this->drupalGet($form_id);
-    $this->drupalPostForm(NULL, $edit, $button_value);
+    $this->submitForm($edit, $button_value);

     // Again the first form_id should be found.
     $event = $this->getLastEventByMachineName('submit');
@@ @@

     $form_id = 'past_testhidden_form_custom_submit_handler';
     $this->drupalGet($form_id);
-    $this->drupalPostForm(NULL, $edit, $button_value);
+    $this->submitForm($edit, $button_value);

     // And also the new one.
     $event = $this->getLastEventByMachineName('submit');
@@ @@
       'mail' => $this->randomMachineName() . '@example.com',
     ];
     $this->drupalGet('user/register');
-    $this->drupalPostForm(NULL, $register_edit, $register_button_value);
+    $this->submitForm($register_edit, $register_button_value);

     // Check if event was logged.
     $event = $this->getLastEventByMachineName('submit');
@@ @@
     $form_id = 'past_testhidden_form_empty_submit_array';
     $this->config->set('past_form_log_form_ids', [$form_id, 'other_form'])->save();
     $this->drupalGet($form_id);
-    $this->drupalPostForm(NULL, $edit, $button_value);
+    $this->submitForm($edit, $button_value);

     $event = $this->getLastEventByMachineName('submit');
     $this->eventToBe = $this->getEventToBe('submit', $form_id, $button_value);
@@ @@

     // Check that just the form events are displayed.
     $this->drupalGet('admin/reports/past/form');
-    $this->assertNoText('Event message #3');
+    $this->assertSession()->pageTextNotContains('Event message #3');

     // Check filters in Past event log.
-    $this->assertEqual(1, count($this->xpath('//tbody/tr/td[3][contains(., "form1")]')), 'Filtered by Form ID.');
-    $this->assertEqual(4, count($this->xpath('//tbody/tr/td[4][contains(., "operation0")]')), 'Filtered by Operation.');
+    $this->assertEquals(1, count($this->xpath('//tbody/tr/td[3][contains(., "form1")]')), 'Filtered by Form ID.');
+    $this->assertEquals(4, count($this->xpath('//tbody/tr/td[4][contains(., "operation0")]')), 'Filtered by Operation.');
     $this->drupalGet('admin/reports/past/form', [
       'query' => [
         'argument_data' => 'form2',
       ],
     ]);
-    $this->assertEqual(1, count($this->xpath('//tbody/tr/td[3][contains(., "form2")]')), 'Filtered by Form ID.');
-    $this->assertEqual(0, count($this->xpath('//tbody/tr/td[3][contains(., "form1")]')), 'Filtered by Form ID.');
+    $this->assertEquals(1, count($this->xpath('//tbody/tr/td[3][contains(., "form2")]')), 'Filtered by Form ID.');
+    $this->assertEquals(0, count($this->xpath('//tbody/tr/td[3][contains(., "form1")]')), 'Filtered by Form ID.');

     $this->drupalGet('admin/reports/past/form', [
       'query' => [
@@ @@
         'argument_data_1' => 'operation1',
       ],
     ]);
-    $this->assertEqual(4, count($this->xpath('//tbody/tr/td[4][contains(., "operation1")]')), 'Filtered by Operation.');
-    $this->assertEqual(0, count($this->xpath('//tbody/tr/td[4][contains(., "operation0")]')), 'Filtered by Operation.');
+    $this->assertEquals(4, count($this->xpath('//tbody/tr/td[4][contains(., "operation1")]')), 'Filtered by Operation.');
+    $this->assertEquals(0, count($this->xpath('//tbody/tr/td[4][contains(., "operation0")]')), 'Filtered by Operation.');

   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNoRawRector
 * AssertNoTextRector
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/past/modules/past_db/tests/src/Kernel/PastDBCrudTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('past_event');
@@ @@
       'weight' => 5,
     ])->save();
     $event_type = PastEventType::load('full');
-    $this->assertEqual($event_type->label(), 'Full event type');
-    $this->assertEqual($event_type->weight, 5);
+    $this->assertEquals($event_type->label(), 'Full event type');
+    $this->assertEquals($event_type->weight, 5);
   }

   /**
@@ @@
     $created->save();
     /** @var PastEvent $loaded */
     $loaded = PastEvent::load($created->id());
-    $this->assertEqual($loaded->getModule(), 'past_db');
-    $this->assertEqual($loaded->getMachineName(), 'testEvent1');
-    $this->assertEqual($loaded->bundle(), 'past_event');
+    $this->assertEquals($loaded->getModule(), 'past_db');
+    $this->assertEquals($loaded->getMachineName(), 'testEvent1');
+    $this->assertEquals($loaded->bundle(), 'past_event');
     $this->assertNull($loaded->getSessionId());
-    $this->assertIdentical($loaded->getLocation(), 'http://localhost/');
+    $this->assertSame($loaded->getLocation(), 'http://localhost/');
     $this->assertNull($loaded->getMessage());
-    $this->assertEqual($loaded->getSeverity(), RfcLogLevel::INFO);
+    $this->assertEquals($loaded->getSeverity(), RfcLogLevel::INFO);
     $this->assertNotNull($loaded->getTimestamp());
-    $this->assertEqual($loaded->getUid(), 0);
+    $this->assertEquals($loaded->getUid(), 0);

     // Full event - test defined values.
     $values = [
@@ @@
     $message = $this->randomString(40);
     $created = past_event_save('past_db', 'testEvent2', $message, [], $values);
     $loaded = PastEvent::load($created->id());
-    $this->assertEqual($loaded->getModule(), 'past_db');
-    $this->assertEqual($loaded->getMachineName(), 'testEvent2');
-    $this->assertEqual($loaded->bundle(), 'past_event');
-    $this->assertEqual($loaded->getSessionId(), $values['session_id']);
-    $this->assertEqual($loaded->getMessage(), $message);
-    $this->assertEqual($loaded->getSeverity(), $values['severity']);
-    $this->assertEqual($loaded->getTimestamp(), $values['timestamp']);
-    $this->assertEqual($loaded->getUid(), $values['uid']);
+    $this->assertEquals($loaded->getModule(), 'past_db');
+    $this->assertEquals($loaded->getMachineName(), 'testEvent2');
+    $this->assertEquals($loaded->bundle(), 'past_event');
+    $this->assertEquals($loaded->getSessionId(), $values['session_id']);
+    $this->assertEquals($loaded->getMessage(), $message);
+    $this->assertEquals($loaded->getSeverity(), $values['severity']);
+    $this->assertEquals($loaded->getTimestamp(), $values['timestamp']);
+    $this->assertEquals($loaded->getUid(), $values['uid']);
   }

   /**
@@ @@

     // Check if arguments of this event were deleted.
     $arguments = \Drupal::database()->query('SELECT COUNT(*) FROM {past_event_argument} WHERE event_id = :event_id', [':event_id' => $event1->id()])->fetchField();
-    $this->assertEqual($arguments, '0');
+    $this->assertEquals($arguments, '0');
     $arguments = \Drupal::database()->query('SELECT COUNT(*) FROM {past_event_argument}')->fetchField();
-    $this->assertEqual($arguments, '2');
+    $this->assertEquals($arguments, '2');

     // Check if data of this event was deleted.
     $data = \Drupal::database()->query('SELECT COUNT(*) FROM {past_event_data} WHERE argument_id = :argument_id', [':argument_id' => 1])->fetchField();
-    $this->assertEqual($data, '0');
+    $this->assertEquals($data, '0');
     $data = \Drupal::database()->query('SELECT COUNT(*) FROM {past_event_data}')->fetchField();
-    $this->assertEqual($data, '2');
+    $this->assertEquals($data, '2');

     // Delete multiple.
     \Drupal::entityTypeManager()->getStorage('past_event')->delete([$event2, $event3]);
@@ @@

     // Check if arguments were deleted.
     $arguments = \Drupal::database()->query('SELECT COUNT(*) FROM {past_event_argument}')->fetchField();
-    $this->assertEqual($arguments, '0');
+    $this->assertEquals($arguments, '0');

     // Check if data was deleted.
     $data = \Drupal::database()->query('SELECT COUNT(*) FROM {past_event_data}')->fetchField();
-    $this->assertEqual($data, '0');
+    $this->assertEquals($data, '0');
   }

   /**
@@ @@

     // Assert the bundle property is set.
     $loaded = PastEvent::load($created->id());
-    $this->assertEqual($loaded->bundle(), $type->id());
+    $this->assertEquals($loaded->bundle(), $type->id());
   }

   /**
@@ @@

     // Assert the field value is retrieved.
     $loaded = PastEvent::load($created->id());
-    $this->assertEqual($loaded->get($field_name)->value, $field_value);
+    $this->assertEquals($loaded->get($field_name)->value, $field_value);
   }

   /**
@@ @@
     }

     $loaded_data = $loaded->getArgument($name)->getData();
-    if (!$this->assertEqual(gettype($loaded_data), gettype($data))) {
+    if (!$this->assertEquals(gettype($loaded_data), gettype($data))) {
       return;
     }

     // Assert and maybe debug.
     if (!is_array($data)) {
-      if (!$this->assertEqual($loaded_data, $data, "The $name argument is correctly saved and retrieved")) {
+      if (!$this->assertEquals($loaded_data, $data, "The $name argument is correctly saved and retrieved")) {
         debug($data, "Original data");
         debug($loaded_data, "Loaded data");
       };
@@ @@
     }
     else {
       foreach (array_keys($data) as $key) {
-        if (!$this->assertEqual($loaded_data[$key], $data[$key], "The $name argument's $key item is correctly saved and retrieved")) {
+        if (!$this->assertEquals($loaded_data[$key], $data[$key], "The $name argument's $key item is correctly saved and retrieved")) {
           debug($data[$key], "Original data $key");
           debug($loaded_data[$key], "Loaded data $key");
         };
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/past/modules/past_db/tests/src/Functional/PastDBTest.php:49

    ---------- begin diff ----------
@@ @@
   /**
    * Creates an administrator user and sample events.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->admin = $this->drupalCreateUser([
       'administer past',
@@ @@
     $event_type->save();

     $event_type = past_event_get_types('test_event');
-    $this->assertEqual($event_type->label, 'Test event');
-    $this->assertEqual($event_type->id, 'test_event');
+    $this->assertEquals($event_type->label, 'Test event');
+    $this->assertEquals($event_type->id, 'test_event');

     $event = past_event_create('past', 'test_event', 'test message');
     $event->type = 'test_event';
@@ @@
     /** @var PastEvent $event */
     $event = array_pop($events);

-    $this->assertEqual($event->bundle(), 'test_event');
+    $this->assertEquals($event->bundle(), 'test_event');

     // Count the amount of all events.
     $events = count($this->loadEvents());
@@ @@
     $arguments_ids = $connection->query('SELECT argument_id FROM {past_event_argument} where event_id IN (:ids[])', [':ids[]' => $ids])->fetchCol();

     // Two times 3 arguments, once two and once 4 means 12 arguments to delete.
-    $this->assertEqual(count($arguments_ids), 12);
+    $this->assertEquals(count($arguments_ids), 12);

     // Run cron and check that the amount of events has reduced.
     past_db_cron();
-    $this->assertEqual($events - 3, count($this->loadEvents()));
+    $this->assertEquals($events - 3, count($this->loadEvents()));

     $leftover_argument_count = $connection->query('SELECT count(*) FROM {past_event_argument} where event_id IN (:ids[])', [':ids[]' => $ids])->fetchField();
-    $this->assertEqual($leftover_argument_count, 0);
+    $this->assertEquals($leftover_argument_count, 0);

     $leftover_data_count = $connection->query('SELECT count(*) FROM {past_event_data} where argument_id IN (:arguments[])', [':arguments[]' => $arguments_ids])->fetchField();
-    $this->assertEqual($leftover_data_count, 0);
+    $this->assertEquals($leftover_data_count, 0);
   }

   /**
@@ @@
   public function testEventExtraFields() {
     // Check for default bundle.
     $this->drupalGet('admin/config/development/past-types');
-    $this->assertText('Default', 'Default bundle was found.');
+    $this->assertSession()->pageTextContains('Default');

     // Check for extra fields display on default bundle.
     $this->drupalGet('admin/config/development/past-types/manage/past_event/display');
-    $this->assertText(t('Message'));
-    $this->assertText(t('Module'));
-    $this->assertText(t('Machine name'));
-    $this->assertText(t('Event time'));
-    $this->assertText(t('User'));
-    $this->assertText(t('Arguments'));
+    $this->assertSession()->pageTextContains(t('Message'));
+    $this->assertSession()->pageTextContains(t('Module'));
+    $this->assertSession()->pageTextContains(t('Machine name'));
+    $this->assertSession()->pageTextContains(t('Event time'));
+    $this->assertSession()->pageTextContains(t('User'));
+    $this->assertSession()->pageTextContains(t('Arguments'));

     // Add new bundle.
     $edit = [
@@ @@
       'label' => 'Test bundle',
       'id' => 'test_bundle',
     ];
-    $this->drupalPostForm('admin/config/development/past-types/add', $edit, t('Save'));
-    $this->assertText(t('Machine name: @name', ['@name' => $edit['id']]), 'Created bundle was found.');
+    $this->drupalGet('admin/config/development/past-types/add');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('Machine name: @name', ['@name' => $edit['id']]));

     // Check for extra fields display on newly created bundle.
     $this->drupalGet('admin/config/development/past-types/manage/' . $edit['id'] . '/display');
-    $this->assertText(t('Message'));
-    $this->assertText(t('Module'));
-    $this->assertText(t('Machine name'));
-    $this->assertText(t('Event time'));
-    $this->assertText(t('User'));
-    $this->assertText(t('Arguments'));
+    $this->assertSession()->pageTextContains(t('Message'));
+    $this->assertSession()->pageTextContains(t('Module'));
+    $this->assertSession()->pageTextContains(t('Machine name'));
+    $this->assertSession()->pageTextContains(t('Event time'));
+    $this->assertSession()->pageTextContains(t('User'));
+    $this->assertSession()->pageTextContains(t('Arguments'));

     // Create event of newly created type.
     $values = [
@@ @@

     $this->drupalLogin($this->viewUser);
     $this->drupalGet('admin/reports/past/' . $event->id());
-    $this->assertText($values['message']);
-    $this->assertText($values['module']);
-    $this->assertText($values['machine_name']);
+    $this->assertSession()->pageTextContains($values['message']);
+    $this->assertSession()->pageTextContains($values['module']);
+    $this->assertSession()->pageTextContains($values['machine_name']);
   }

   /**
@@ @@
       'label' => 'Test bundle',
       'id' => $bundle,
     ];
-    $this->drupalPostForm('admin/config/development/past-types/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/development/past-types/add');
+    $this->submitForm($edit, t('Save'));

     // Create an entity reference field on the bundle.
     $field_instance = $this->addField($bundle);
     // Check if the field shows up in field config of the bundle.
     $this->drupalGet('admin/config/development/past-types/manage/' . $bundle . '/fields');
-    $this->assertText($field_instance->label());
-    $this->assertText($field_instance->getName());
-    $this->assertText(t('Entity reference'));
+    $this->assertSession()->pageTextContains($field_instance->label());
+    $this->assertSession()->pageTextContains($field_instance->getName());
+    $this->assertSession()->pageTextContains(t('Entity reference'));

     // Create an event that we can reference to.
     $referenced_event_message = 'Referenced Event Test message';
@@ @@

     // Check whether the bundle was saved correct.
     $event = \Drupal::service('entity_type.manager')->getStorage('past_event')->load($event->id());
-    $this->assertEqual($event->type->target_id, $bundle, 'Created event uses test bundle.');
+    $this->assertEquals($event->type->target_id, $bundle, 'Created event uses test bundle.');

     $this->drupalLogin($this->viewUser);
     // Check if the created fields shows up on the event display.
     $this->drupalGet('admin/reports/past/' . $event->id());
     // Check field label display.
-    $this->assertText($field_instance->label());
+    $this->assertSession()->pageTextContains($field_instance->label());
     // Check field value display.
-    $this->assertText($referenced_event_message);
+    $this->assertSession()->pageTextContains($referenced_event_message);
   }

   /**
@@ @@

     // Go to Reports.
     $this->drupalGet('admin/reports');
-    $this->assertText(t('Reports of the past events.'));
+    $this->assertSession()->pageTextContains(t('Reports of the past events.'));
     $this->clickLink($past_event_view_title);
     // Assert there are two tabs.
-    $this->assertLink($past_event_extended_view_title);
-    $this->assertLink($past_event_view_title);
+    $this->assertSession()->linkExists($past_event_extended_view_title);
+    $this->assertSession()->linkExists($past_event_view_title);
+    $this->drupalGet('admin/structure/views/view/past_event_log/delete');

     // Delete the past event view.
-    $this->drupalPostForm('admin/structure/views/view/past_event_log/delete', [], t('Delete'));
+    $this->submitForm([], t('Delete'));
     $this->drupalGet('admin/reports/past');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);

     $this->drupalGet('admin/reports');
     // Assert that extended view's title is in the menu.
     $this->clickLink($past_event_extended_view_title);
-    $this->assertNoLink($past_event_view_title);
-    $this->assertNoLink($past_event_extended_view_title);
+    $this->assertSession()->linkNotExists($past_event_view_title);
+    $this->assertSession()->linkNotExists($past_event_extended_view_title);
+    $this->drupalGet('admin/structure/views/view/past_event_log_key_ext_search/delete');

     // Delete the past event extended search view.
-    $this->drupalPostForm('admin/structure/views/view/past_event_log_key_ext_search/delete', [], t('Delete'));
+    $this->submitForm([], t('Delete'));
     $this->drupalGet('admin/reports/past/extended');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);

     // Assert there are no past event related menu tabs.
     $this->drupalGet('admin/reports');
-    $this->assertNoLink($past_event_view_title);
-    $this->assertNoLink($past_event_extended_view_title);
+    $this->assertSession()->linkNotExists($past_event_view_title);
+    $this->assertSession()->linkNotExists($past_event_extended_view_title);
   }

   /**
@@ @@
     $this->drupalGet('admin/reports/past');

     // Check for some messages.
-    $this->assertText($this->event_desc . 100);
-    $this->assertText($this->event_desc . 99);
-    $this->assertText($this->event_desc . 98);
-    $this->assertText($this->event_desc . 51);
+    $this->assertSession()->pageTextContains($this->event_desc . 100);
+    $this->assertSession()->pageTextContains($this->event_desc . 99);
+    $this->assertSession()->pageTextContains($this->event_desc . 98);
+    $this->assertSession()->pageTextContains($this->event_desc . 51);

     // Check severities.
-    $this->assertText($this->severities[RfcLogLevel::DEBUG]);
-    $this->assertText($this->severities[RfcLogLevel::INFO]);
-    $this->assertText($this->severities[RfcLogLevel::WARNING]);
+    $this->assertSession()->pageTextContains($this->severities[RfcLogLevel::DEBUG]);
+    $this->assertSession()->pageTextContains($this->severities[RfcLogLevel::INFO]);
+    $this->assertSession()->pageTextContains($this->severities[RfcLogLevel::WARNING]);

     // Test if we have correct classes for severities.
     $class_names = past_db_severity_css_classes_map();
@@ @@
     }

     // Check machine name.
-    $this->assertText($this->machine_name);
+    $this->assertSession()->pageTextContains($this->machine_name);

     // Check for the exposed filter fields.
-    $this->assertFieldByName('module', '');
-    $this->assertFieldByName('severity', 'All');
-    $this->assertFieldByName('machine_name', '');
-    $this->assertFieldByName('message', '');
+    $this->assertSession()->fieldValueEquals('module', '');
+    $this->assertSession()->fieldValueEquals('severity', 'All');
+    $this->assertSession()->fieldValueEquals('machine_name', '');
+    $this->assertSession()->fieldValueEquals('message', '');

     // Check paging.
-    $this->assertText('next ›');
-    $this->assertText('last »');
+    $this->assertSession()->pageTextContains('next ›');
+    $this->assertSession()->pageTextContains('last »');

     // Open the 2nd page.
     $options = [
@@ @@
     $this->drupalGet('admin/reports/past', $options);

     // Check for some messages.
-    $this->assertText($this->event_desc . 50);
-    $this->assertText($this->event_desc . 49);
-    $this->assertText($this->event_desc . 1);
+    $this->assertSession()->pageTextContains($this->event_desc . 50);
+    $this->assertSession()->pageTextContains($this->event_desc . 49);
+    $this->assertSession()->pageTextContains($this->event_desc . 1);

     // Check paging.
-    $this->assertText('‹ previous');
-    $this->assertText('« first');
+    $this->assertSession()->pageTextContains('‹ previous');
+    $this->assertSession()->pageTextContains('« first');

     // Go to the first detail page.
     $this->drupalGet('admin/reports/past/1');

-    $this->assertText($this->machine_name);
-    $this->assertText($this->event_desc . 1);
-    $this->assertText('Referer');
-    $this->assertLink('http://example.com/test-referer');
-    $this->assertText('Location');
-    $this->assertLink('http://example.com/this-url-gets-heavy-long/testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttest-testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttest-testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttest-testtesttesttes…');
-    $this->assertText('arg1');
-    $this->assertText('arg2');
-    $this->assertText('arg3');
-    $this->assertText('First Argument');
+    $this->assertSession()->pageTextContains($this->machine_name);
+    $this->assertSession()->pageTextContains($this->event_desc . 1);
+    $this->assertSession()->pageTextContains('Referer');
+    $this->assertSession()->linkExists('http://example.com/test-referer');
+    $this->assertSession()->pageTextContains('Location');
+    $this->assertSession()->linkExists('http://example.com/this-url-gets-heavy-long/testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttest-testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttest-testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttest-testtesttesttes…');
+    $this->assertSession()->pageTextContains('arg1');
+    $this->assertSession()->pageTextContains('arg2');
+    $this->assertSession()->pageTextContains('arg3');
+    $this->assertSession()->pageTextContains('First Argument');

     // Check events with a float argument.
     $event = past_event_save('past_db', 'float_test', 'Float test', ['float' => 3.14], ['session_id' => 'test_session_id']);
     $this->drupalGet('admin/reports/past/' . $event->id());
-    $this->assertText('Float test');
-    $this->assertText('3.14');
+    $this->assertSession()->pageTextContains('Float test');
+    $this->assertSession()->pageTextContains('3.14');

     // Check the actor dropbutton.
-    $this->assertLink($this->viewUser->getDisplayName());
+    $this->assertSession()->linkExists($this->viewUser->getDisplayName());

     // Check filters in Past event log.
     $this->drupalGet('admin/reports/past', [
@@ @@
     /** @var AccountInterface $account */
     $account = User::load($loaded->getUid());
     $this->clickLink('Trace: ' . $account->getDisplayName());
-    $this->assertUrl('admin/reports/past?uid=' . $account->getDisplayName());
-    $this->assertFieldByName('uid', $account->getDisplayName());
-    $this->assertText($account->getDisplayName());
-    $this->assertNoText($this->viewUser->getDisplayName());
+    $this->assertSession()->addressEquals('admin/reports/past?uid=' . $account->getDisplayName());
+    $this->assertSession()->fieldValueEquals('uid', $account->getDisplayName());
+    $this->assertSession()->pageTextContains($account->getDisplayName());
+    $this->assertSession()->pageTextNotContains($this->viewUser->getDisplayName());

     // Check dropbutton and session filter.
     $this->clickLink('Trace session: ' . Unicode::truncate($loaded->getSessionId(), 10, FALSE, TRUE));
-    $this->assertUrl('admin/reports/past?session_id=' . $loaded->getSessionId());
-    $this->assertFieldByName('session_id', $loaded->getSessionId());
-    $this->assertRaw($loaded->getSessionId());
-    $this->assertNoRaw($event->getSessionId());
+    $this->assertSession()->addressEquals('admin/reports/past?session_id=' . $loaded->getSessionId());
+    $this->assertSession()->fieldValueEquals('session_id', $loaded->getSessionId());
+    $this->assertSession()->responseContains($loaded->getSessionId());
+    $this->assertSession()->responseNotContains($event->getSessionId());

     // Check filters in Past event log (extended Search).
     $this->drupalGet('admin/reports/past/extended', [
@@ @@

     // Check dropbutton and user filter.
     $this->clickLink('Trace: ' . $this->viewUser->getDisplayName());
-    $this->assertUrl('admin/reports/past/extended?uid=' . $this->viewUser->getDisplayName());
-    $this->assertFieldByName('uid', $this->viewUser->getDisplayName());
-    $this->assertLink($this->viewUser->getDisplayName());
-    $this->assertNoText($account->getDisplayName());
+    $this->assertSession()->addressEquals('admin/reports/past/extended?uid=' . $this->viewUser->getDisplayName());
+    $this->assertSession()->fieldValueEquals('uid', $this->viewUser->getDisplayName());
+    $this->assertSession()->linkExists($this->viewUser->getDisplayName());
+    $this->assertSession()->pageTextNotContains($account->getDisplayName());

     $this->drupalLogout();

     // Check permissions for detail page.
     $this->drupalGet('admin/reports/past/1');
-    $this->assertText(t('You are not authorized to access this page'));
+    $this->assertSession()->pageTextContains(t('You are not authorized to access this page'));
     // Check permissions for event log.
     $this->drupalGet('admin/reports/past');
-    $this->assertText(t('You are not authorized to access this page'));
+    $this->assertSession()->pageTextContains(t('You are not authorized to access this page'));
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertLinkRector
 * AssertNoLinkRector
 * AssertNoRawRector
 * AssertNoTextRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/past/tests/src/Traits/PastEventTestTrait.php" file,   
         due to:                                                                
         "System error: "Method pass() was not found in reflection of class     
         Drupal\Tests\past\Traits\PastEventTestTrait."                          
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 411          

