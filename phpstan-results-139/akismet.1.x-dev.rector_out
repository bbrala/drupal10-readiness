modules/contrib/akismet/akismet.api.php
modules/contrib/akismet/src/Client/DrupalClientInterface.php
modules/contrib/akismet/src/Form/FormFormBase.php
modules/contrib/akismet/tests/modules/akismet_test_server/src/ServerController.php
modules/contrib/akismet/tests/src/Functional/TestingModeTest.php
modules/contrib/akismet/src/Client/DrupalTestClient.php
modules/contrib/akismet/akismet.install
modules/contrib/akismet/src/Client/DrupalTestInvalid.php
modules/contrib/akismet/akismet.module
modules/contrib/akismet/src/Client/DrupalTestLocalClient.php
modules/contrib/akismet/src/Client/Exception/AkismetAuthenticationException.php
modules/contrib/akismet/src/Client/Exception/AkismetBadRequestException.php
modules/contrib/akismet/src/Client/Exception/AkismetException.php
modules/contrib/akismet/src/Client/Exception/AkismetNetworkException.php
modules/contrib/akismet/src/Client/Exception/AkismetResponseException.php
modules/contrib/akismet/src/Client/FeedbackManager.php
modules/contrib/akismet/tests/src/Functional/AccessTest.php
modules/contrib/akismet/src/Controller/FormController.php
modules/contrib/akismet/tests/src/Functional/UserFormsTest.php
modules/contrib/akismet/src/Form/Settings.php
modules/contrib/akismet/tests/src/Functional/ActionsTest.php
modules/contrib/akismet/src/Plugin/Action/UnpublishReportComment.php
modules/contrib/akismet/src/Client/AkismetResponse.php
modules/contrib/akismet/src/Plugin/Action/UnpublishReportNode.php
modules/contrib/akismet/src/Client/Client.php
modules/contrib/akismet/src/Storage/BlacklistStorage.php
modules/contrib/akismet/src/Storage/ResponseDataStorage.php
modules/contrib/akismet/src/Utility/AkismetUtilities.php
modules/contrib/akismet/tests/src/Functional/AkismetCommentTestTrait.php
modules/contrib/akismet/src/Client/DrupalClient.php
modules/contrib/akismet/tests/src/Functional/AkismetTestBase.php
modules/contrib/akismet/src/Utility/Logger.php
modules/contrib/akismet/src/Controller/FormListBuilder.php
modules/contrib/akismet/src/Element/Akismet.php
modules/contrib/akismet/src/Client/DrupalClientFactory.php
modules/contrib/akismet/src/Entity/Form.php
modules/contrib/akismet/src/Entity/FormInterface.php
modules/contrib/akismet/src/EntityReportAccessManager.php
modules/contrib/akismet/src/EventSubscriber/Subscriber.php
modules/contrib/akismet/src/Form/FormAdd.php
modules/contrib/akismet/src/Form/FormDelete.php
modules/contrib/akismet/src/Form/FormEdit.php
modules/contrib/akismet/tests/src/Functional/AnalysisOptionsTest.php
modules/contrib/akismet/tests/modules/akismet_test/akismet_test.module
modules/contrib/akismet/tests/modules/akismet_test/src/Entity/Post.php
modules/contrib/akismet/tests/modules/akismet_test/src/Entity/PostInterface.php
modules/contrib/akismet/tests/modules/akismet_test/src/Form/PostDeleteForm.php
modules/contrib/akismet/tests/modules/akismet_test/src/Form/PostForm.php
modules/contrib/akismet/tests/src/Functional/AnalysisTest.php
modules/contrib/akismet/tests/modules/akismet_test/src/TestController.php
modules/contrib/akismet/tests/src/Functional/BypassAccessTest.php
modules/contrib/akismet/tests/modules/akismet_test_server/src/OAuthRequestParser.php
modules/contrib/akismet/tests/src/Functional/CommentFormTest.php
modules/contrib/akismet/tests/src/Functional/ContactFormsTest.php
modules/contrib/akismet/tests/src/Functional/DataCRUDTest.php
modules/contrib/akismet/tests/src/Functional/DataTest.php
modules/contrib/akismet/tests/src/Functional/FallbackModeTest.php
modules/contrib/akismet/tests/src/Functional/FormConfigurationTest.php
modules/contrib/akismet/tests/src/Functional/InstallationTest.php
modules/contrib/akismet/tests/src/Functional/ModerateUserTest.php
modules/contrib/akismet/tests/src/Functional/NodeFormTest.php
modules/contrib/akismet/tests/src/Functional/ReportingTest.php
modules/contrib/akismet/tests/src/Functional/ResponseConfiguredTest.php
modules/contrib/akismet/tests/src/Functional/ResponseTest.php

18 files with changes
=====================

1) modules/contrib/akismet/tests/src/Functional/UserFormsTest.php:48

    ---------- begin diff ----------
@@ @@

     // Try to reset the user's password by specifying an spammy name.
     $edit = ['name' => 'spam'];
-    $this->drupalPostForm('user/password', $edit, t('Submit'));
-    $this->assertText(t('Your submission has triggered the spam filter and will not be accepted.'));
+    $this->drupalGet('user/password');
+    $this->submitForm($edit, t('Submit'));
+    $this->assertSession()->pageTextContains(t('Your submission has triggered the spam filter and will not be accepted.'));

     // Try to reset the user's password by specifying a valid name.
     $edit = ['name' => $this->webUser->getAccountName()];
-    $this->drupalPostForm('user/password', $edit, t('Submit'));
+    $this->drupalGet('user/password');
+    $this->submitForm($edit, t('Submit'));
     $this->assertPasswordInstructionMessage();

-    $this->assertNoText(t('Your submission has triggered the spam filter and will not be accepted.'));
+    $this->assertSession()->pageTextNotContains(t('Your submission has triggered the spam filter and will not be accepted.'));
   }

   /**
@@ @@
       'name' => 'spam',
       'mail' => 'spam@example.com',
     ];
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, t('Create new account'));
     $this->assertFalse(user_load_by_name($name), t('The user who attempted to register cannot be found in the database when they used a spammy username.'));

     // Verify that user count is still the same.
     $users = $user_storage->loadMultiple();
-    $this->assertEqual($count_initial, count($users), t('No new user record has been created.'));
+    $this->assertEquals($count_initial, count($users), t('No new user record has been created.'));

     // Try to register with a valid username. Make sure the user was able
     // to successfully register.
@@ @@
       'name' => $name,
       'mail' => $name . '@example.com',
     ];
+    $this->drupalGet('user/register');

-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
-    $this->assertText(t('A welcome message with further instructions has been sent to your email address.'));
+    $this->submitForm($edit, t('Create new account'));
+    $this->assertSession()->pageTextContains(t('A welcome message with further instructions has been sent to your email address.'));
     /** @var \Drupal\user\Entity\User $account */
     $account = user_load_by_name($edit['name']);
     $this->assertIsObject($account, 'New user found after using a valid name.');
@@ @@
       'user_cancel_method' => 'user_cancel_delete',
       'akismet[feedback]' => 'spam',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-submit');
+    $this->submitForm($edit, 'edit-submit');
     $user_storage->resetCache();
     $account = $user_storage->load($account->id());
     $this->assertNull($account, 'Reported user account not found.');
@@ @@
       'name' => 'spam',
       'mail' => 'spam@example.com',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Create new account'));
-    $this->assertText(self::SPAM_MESSAGE);
+    $this->submitForm($edit, t('Create new account'));
+    $this->assertSession()->pageTextContains(self::SPAM_MESSAGE);
     $count_new = count($user_storage->loadMultiple());
-    $this->assertEqual($count_initial, $count_new, 'Existing user count found.');
+    $this->assertEquals($count_initial, $count_new, 'Existing user count found.');
     $this->assertFalse(user_load_by_name($edit['name']), 'New user not found.');

     // Verify that an unsure user is moderated.
@@ @@
       'name' => 'unsure',
       'mail' => 'unsure@example.com',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Create new account'));
+    $this->submitForm($edit, t('Create new account'));

     $account = user_load_by_name($edit['name']);
     $this->assertIsObject($account, 'New user found after registering with unsure name.');
@@ @@
       'user_cancel_method' => 'user_cancel_delete',
       'akismet[feedback]' => 'spam',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-submit');
+    $this->submitForm($edit, 'edit-submit');
     $user_storage->resetCache();
     $account = $user_storage->load($account->id());
     $this->assertNull($account, 'Reported user account not found.');
@@ @@
         'name' => $type,
         'mail' => $type . '@example.com',
       ];
-      $this->drupalPostForm(NULL, $edit, t('Create new account'));
+      $this->submitForm($edit, t('Create new account'));

       $account = user_load_by_name($type);
       $this->assertIsObject($account, "New user found after registering with $type name.");
@@ @@
         'user_cancel_method' => 'user_cancel_delete',
         'akismet[feedback]' => 'spam',
       ];
-      $this->drupalPostForm(NULL, $edit, 'edit-submit');
+      $this->submitForm($edit, 'edit-submit');
       $user_storage->resetCache();
       $account = $user_storage->load($account->id());
       $this->assertNull($account, 'Reported user account not found.');
@@ @@
         'mail' => $field_name . '@example.com',
         $form_field_name => $type === 'email' ? 'unsure@example.com' : 'unsure',
       ];
-      $this->drupalPostForm(NULL, $edit, t('Create new account'));
-      $this->assertText(t('Your account is currently pending approval by the site administrator.'));
+      $this->submitForm($edit, t('Create new account'));
+      $this->assertSession()->pageTextContains(t('Your account is currently pending approval by the site administrator.'));
       $this->assertIsObject(user_load_by_name($name), t('New user was found in database.'));
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/akismet/tests/src/Functional/TestingModeTest.php:52

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->settings = \Drupal::configFactory()->getEditable('akismet.settings');
     $this->settings->set('test_mode.enabled', FALSE);
@@ @@
       'api_key' => $key,
     ];
     $this->drupalGet('admin/config/content/akismet/settings');
-    $this->assertText('The Akismet API key is not configured yet.');
-    $this->drupalPostForm(NULL,
-      $edit,
-      t('Save configuration'),
-      ['watchdog' => RfcLogLevel::EMERGENCY]);
-    $this->assertNoText('The Akismet API key is not configured yet.');
-    $this->assertText(t('The configuration options have been saved.'));
-    $this->assertText('The configured Akismet API key is invalid.');
+    $this->assertSession()->pageTextContains('The Akismet API key is not configured yet.');
+    $this->submitForm($edit, t('Save configuration'));
+    $this->assertSession()->pageTextNotContains('The Akismet API key is not configured yet.');
+    $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));
+    $this->assertSession()->pageTextContains('The configured Akismet API key is invalid.');

     $this->drupalLogout();

@@ @@
     $this->drupalGet(
       'akismet-test/form',
       ['watchdog' => RfcLogLevel::EMERGENCY]);
-    $this->drupalPostForm(NULL,
-      $edit,
-      t('Save'),
-      ['watchdog' => RfcLogLevel::EMERGENCY]);
-    $this->assertText('Successful form submission.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains('Successful form submission.');

     // Enable testing mode.
     $this->drupalLogin($this->adminUser);
@@ @@
     $this->drupalGet(
       'admin/config/content/akismet/settings',
       ['watchdog' => RfcLogLevel::EMERGENCY]);
-    $this->assertText('The configured Akismet API key is invalid.');
-    $this->drupalPostForm(NULL,
-      $edit,
-      t('Save configuration'),
-      ['watchdog' => RfcLogLevel::ERROR]);
-    $this->assertNoText('The Akismet API key is not configured yet.');
-    $this->assertNoText('The configured Akismet API keys are invalid.');
-    $this->assertText(t('Akismet testing mode is still enabled.'));
+    $this->assertSession()->pageTextContains('The configured Akismet API key is invalid.');
+    $this->submitForm($edit, t('Save configuration'));
+    $this->assertSession()->pageTextNotContains('The Akismet API key is not configured yet.');
+    $this->assertSession()->pageTextNotContains('The configured Akismet API keys are invalid.');
+    $this->assertSession()->pageTextContains(t('Akismet testing mode is still enabled.'));

     // Make the key valid. Anticipate the error about the old key being invalid.
     $edit = [
       'api_key' => 'validkey',
     ];
-    $this->drupalPostForm(NULL,
-      $edit,
-      t('Save configuration'),
-      ['watchdog' => RfcLogLevel::ERROR]);
+    $this->submitForm($edit, t('Save configuration'));

     $this->drupalLogout();

@@ @@
       'title' => $this->randomString(),
       'body' => 'spam',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertText(self::SPAM_MESSAGE);
-    $this->assertNoText('Successful form submission.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(self::SPAM_MESSAGE);
+    $this->assertSession()->pageTextNotContains('Successful form submission.');

     // Disable testing mode.
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/config/content/akismet/settings');
-    $this->assertText('Akismet testing mode is still enabled.');
+    $this->assertSession()->pageTextContains('Akismet testing mode is still enabled.');
     $edit = [
       'testing_mode' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
-    $this->assertText(t('The configuration options have been saved.'));
-    $this->assertNoText('Akismet testing mode is still enabled.');
+    $this->submitForm($edit, t('Save configuration'));
+    $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));
+    $this->assertSession()->pageTextNotContains('Akismet testing mode is still enabled.');

     // Verify that production API keys still exist.
-    $this->assertFieldByName('api_key', 'validkey');
+    $this->assertSession()->fieldValueEquals('api_key', 'validkey');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/akismet/tests/src/Functional/ResponseTest.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/akismet/tests/src/Functional/ReportingTest.php:45

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
@@ @@
     $edit = [
       'comment_body[0][value]' => 'ham',
     ];
-    $this->drupalPostForm('node/' . $this->node->id(), $edit, t('Save'));
+    $this->drupalGet('node/' . $this->node->id());
+    $this->submitForm($edit, t('Save'));
     $comments = $this->loadCommentsBySubject($edit['comment_body[0][value]']);
     $comment = $comment_storage->load(reset($comments));
     $this->assertIsObject($comment, t('Comment was found in the database.'));
@@ @@
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('node/' . $this->node->id());
     // Check that the comment is found.
-    $this->assertText($edit['comment_body[0][value]']);
+    $this->assertSession()->pageTextContains($edit['comment_body[0][value]']);
     $this->clickLink(t('Delete'));
     $edit = [
       'akismet[feedback]' => 'spam',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Delete'));
-    $this->assertText(t('The comment and all its replies have been deleted.'));
-    $this->assertText(t('The content was successfully reported as inappropriate.'));
+    $this->submitForm($edit, t('Delete'));
+    $this->assertSession()->pageTextContains(t('The comment and all its replies have been deleted.'));
+    $this->assertSession()->pageTextContains(t('The content was successfully reported as inappropriate.'));

     // Verify that the comment and Akismet session data has been deleted.
     $comment_storage->resetCache();
@@ @@
         'subject[0][value]' => $this->randomMachineName(),
         'comment_body[0][value]' => 'ham',
       ];
-      $this->drupalPostForm('node/' . $this->node->id(), $edit, t('Save'));
+      $this->drupalGet('node/' . $this->node->id());
+      $this->submitForm($edit, t('Save'));
       $cids = $this->loadCommentsBySubject($edit['subject[0][value]']);
       $comments[$num] = $comment_storage->load(reset($cids));
       $this->assertTrue(!empty($comments[$num]), t('Comment was found in the database.'));
@@ @@
     ];
     $i = 0;
     foreach ($comments as $comment) {
-      $this->assertText($comment->getSubject());
+      $this->assertSession()->pageTextContains($comment->getSubject());
       $edit["comment_bulk_form[$i]"] = TRUE;
       $i++;
     }
-    $this->drupalPostForm(NULL, $edit, t('Apply to selected items'));
+    $this->submitForm($edit, t('Apply to selected items'));
     foreach ($comments as $comment) {
-      $this->assertText($comment->getSubject());
+      $this->assertSession()->pageTextContains($comment->getSubject());
     }

     $edit = [
@@ @@
       // @see https://www.drupal.org/project/akismet/issues/3209465
       // 'akismet[feedback]' => 'spam',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Delete'));
-    $this->assertText(t('Deleted @count comments.', ['@count' => count($comments)]));
+    $this->submitForm($edit, t('Delete'));
+    $this->assertSession()->pageTextContains(t('Deleted @count comments.', ['@count' => count($comments)]));
     // Disable assertion of report message.
     // @see https://www.drupal.org/project/akismet/issues/3209465
     // $this->assertText(t('The posts were successfully reported as inappropriate.'));
@@ @@
       'title[0][value]' => 'protected ham',
       'body[0][value]' => 'ham',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
-    $this->assertUrl('node/' . $this->node->id());
+    $this->assertSession()->addressEquals('node/' . $this->node->id());
     $this->assertAkismetData('node', $this->node->id());

     // Verify that no feedback options appear on the delete confirmation form
     // for the node author.
     $this->drupalGet('node/' . $this->node->id() . '/delete');
-    $this->assertResponse(200);
-    $this->assertNoText(t('Report as…'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextNotContains(t('Report as…'));

     // Verify that feedback options appear for the admin user.
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('node/' . $this->node->id() . '/delete');
-    $this->assertResponse(200);
-    $this->assertText(t('Report as…'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains(t('Report as…'));

     // Login and submit an unprotected node.
     $this->drupalLogin($this->webUser);
@@ @@
       'title[0][value]' => 'unprotected spam',
       'body[0][value]' => 'spam',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
-    $this->assertUrl('node/' . $this->node->id());
+    $this->assertSession()->addressEquals('node/' . $this->node->id());
     $this->assertNoAkismetData('node', $this->node->id());

     // Verify that no feedback options appear on the delete confirmation form
     // for the node author.
     $this->drupalGet('node/' . $this->node->id() . '/delete');
-    $this->assertResponse(200);
-    $this->assertNoText(t('Report as…'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextNotContains(t('Report as…'));

     // Verify that no feedback options appear for the admin user.
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('node/' . $this->node->id() . '/delete');
-    $this->assertResponse(200);
-    $this->assertNoText(t('Report as…'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextNotContains(t('Report as…'));
   }

   /**
@@ @@
         'title[0][value]' => $this->randomMachineName(),
         'body[0][value]' => 'ham',
       ];
-      $this->drupalPostForm(NULL, $edit, t('Save'));
+      $this->submitForm($edit, t('Save'));
       $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
-      $this->assertUrl('node/' . $node->id());
+      $this->assertSession()->addressEquals('node/' . $node->id());
       $this->assertAkismetData('node', $node->id());
       $nodes[] = $node;
     }
@@ @@
     ];
     $i = 0;
     foreach ($nodes as $node) {
-      $this->assertText($node->label());
+      $this->assertSession()->pageTextContains($node->label());
       $edit["node_bulk_form[{$i}]"] = TRUE;
       $i++;
     }
-    $this->drupalPostForm(NULL, $edit, t('Apply to selected items'));
+    $this->submitForm($edit, t('Apply to selected items'));
     foreach ($nodes as $node) {
-      $this->assertText($node->label(), t('Node found.'));
+      $this->assertSession()->pageTextContains($node->label());
     }
     $edit = [
       // Disable reporting test.
@@ @@
       // @see https://www.drupal.org/project/akismet/issues/3209465
       // 'akismet[feedback]' => 'spam',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Delete'));
-    $this->assertText(t('Deleted @count content items.', ['@count' => count($nodes)]));
+    $this->submitForm($edit, t('Delete'));
+    $this->assertSession()->pageTextContains(t('Deleted @count content items.', ['@count' => count($nodes)]));
     // Disable reporting test.
     // @see https://www.drupal.org/project/akismet/issues/3209465
     // $this->assertText(t('The posts were successfully reported as inappropriate.'));
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertResponseRector
 * AssertTextRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/akismet/tests/src/Functional/NodeFormTest.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
@@ @@
     $edit = [
       'title[0][value]' => 'spam',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
-    $this->assertUrl('node/' . $this->node->id());
+    $this->assertSession()->addressEquals('node/' . $this->node->id());
   }

   /**
@@ @@
       'title[0][value]' => 'spam',
       'body[0][value]' => 'spam',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
     $this->assertFalse($this->node->isPublished(), t('Node containing spam was retained as unpublished.'));
-    $this->assertUrl('node/' . $this->node->id());
+    $this->assertSession()->addressEquals('node/' . $this->node->id());
     $this->assertAkismetData('node', $this->node->id());
   }
    ----------- end diff -----------

Applied rules:
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/akismet/tests/src/Functional/ModerateUserTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->drupalLogin($this->adminUser);
@@ @@
       'user_cancel_method' => 'user_cancel_delete',
       'akismet[feedback]' => 'spam',
     ];
-    $this->drupalPostForm('user/' . $account->id() . '/cancel', $edit, 'edit-submit');
+    $this->drupalGet('user/' . $account->id() . '/cancel');
+    $this->submitForm($edit, 'edit-submit');
     // @todo errrrr, "content"? ;)
-    $this->assertText(t('The content was successfully reported as inappropriate.'));
+    $this->assertSession()->pageTextContains(t('The content was successfully reported as inappropriate.'));

     // Verify that Akismet session data has been deleted.
     $this->assertNoAkismetData('user', $account->id());
@@ @@

     // Verify that no feedback options appear on the account cancellation form.
     $this->drupalGet('user/' . $account->id() . '/cancel');
-    $this->assertNoText(t('Report as'));
+    $this->assertSession()->pageTextNotContains(t('Report as'));

     // Cancel own account.
-    $this->drupalPostForm(NULL, [], 'edit-submit');
-    $this->assertText(t('A confirmation request to cancel your account has been sent to your email address.'));
-    $this->assertNoText(t('The content was successfully reported as inappropriate.'));
+    $this->submitForm([], 'edit-submit');
+    $this->assertSession()->pageTextContains(t('A confirmation request to cancel your account has been sent to your email address.'));
+    $this->assertSession()->pageTextNotContains(t('The content was successfully reported as inappropriate.'));

     // Confirm account cancellation request.
     // Turn off error assertion because the link returns a 404 due to the batch
@@ @@
       'pass[pass2]' => $password,
       'mail' => $spam ? 'spam@example.com' : 'ham@example.com',
     ];
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, t('Create new account'));

     // Determine new uid.
     $uids = \Drupal::entityQuery('user')->condition('name', $edit['name'])->execute();
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/akismet/tests/src/Functional/InstallationTest.php:60

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser([
@@ @@
     // Ensure there is no requirements error by default.
     $this->drupalGet('admin/reports/status');
     $this->clickLink('Run cron');
+    $this->drupalGet('admin/modules');

     // Install the Akismet module.
-    $this->drupalPostForm('admin/modules', ['modules[akismet][enable]' => TRUE], t('Install'));
-    $this->assertText($install_message);
+    $this->submitForm(['modules[akismet][enable]' => TRUE], t('Install'));
+    $this->assertSession()->pageTextContains($install_message);

     // Now we can add the test module for the rest of the form tests.
     \Drupal::service('module_installer')->install([
@@ @@
     $edit = [
       'title' => 'spam',
     ];
-    $this->drupalPostForm('akismet-test/form', $edit, t('Save'));
-    $this->assertText('Successful form submission.');
+    $this->drupalGet('akismet-test/form');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains('Successful form submission.');

     // Assign the 'administer akismet' permission and log in a user.
     $this->drupalLogin($this->adminUser);
@@ @@
     $edit = [
       RoleInterface::AUTHENTICATED_ID . '[administer akismet]' => TRUE,
     ];
-    $this->drupalPostForm('admin/people/permissions', $edit, t('Save permissions'));
+    $this->drupalGet('admin/people/permissions');
+    $this->submitForm($edit, t('Save permissions'));

     // Verify presence of 'empty keys' error message.
     $this->drupalGet('admin/config/content/akismet');
-    $this->assertText($message_missing);
-    $this->assertNoText($message_invalid);
+    $this->assertSession()->pageTextContains($message_missing);
+    $this->assertSession()->pageTextNotContains($message_invalid);

     // Verify requirements error about missing API keys.
     $this->drupalGet('admin/reports/status');
-    $this->assertText($message_missing);
-    $this->assertText($admin_message);
+    $this->assertSession()->pageTextContains($message_missing);
+    $this->assertSession()->pageTextContains($admin_message);

     // Configure invalid keys.
     $edit = [
@@ @@
       'api_key' => 'the-invalid-akismet-api-key-value',
     ];
     $this->drupalGet('admin/config/content/akismet/settings');
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'), ['watchdog' => RfcLogLevel::EMERGENCY]);
-    $this->assertText($message_saved);
-    $this->assertNoText(self::FALLBACK_MESSAGE);
+    $this->submitForm($edit, t('Save configuration'));
+    $this->assertSession()->pageTextContains($message_saved);
+    $this->assertSession()->pageTextNotContains(self::FALLBACK_MESSAGE);

     // Verify presence of 'incorrect keys' error message.
-    $this->assertText($message_short_invalid);
-    $this->assertNoText($message_missing);
+    $this->assertSession()->pageTextContains($message_short_invalid);
+    $this->assertSession()->pageTextNotContains($message_missing);

     // Verify requirements error about invalid API keys.
     $this->drupalGet('admin/reports/status', ['watchdog' => RfcLogLevel::EMERGENCY]);
-    $this->assertText($message_short_invalid);
+    $this->assertSession()->pageTextContains($message_short_invalid);

     // Ensure unreachable servers.
     \Drupal::state()->set('akismet.testing_use_local_invalid', TRUE);
@@ @@

     // Verify presence of 'network error' message.
     $this->drupalGet('admin/config/content/akismet/settings', ['watchdog' => RfcLogLevel::EMERGENCY]);
-    $this->assertText($message_server);
-    $this->assertNoText($message_missing);
-    $this->assertNoText($message_invalid);
+    $this->assertSession()->pageTextContains($message_server);
+    $this->assertSession()->pageTextNotContains($message_missing);
+    $this->assertSession()->pageTextNotContains($message_invalid);

     // Verify requirements error about network error.
     $this->drupalGet('admin/reports/status', ['watchdog' => RfcLogLevel::EMERGENCY]);
-    $this->assertText($message_server);
-    $this->assertNoText(self::FALLBACK_MESSAGE);
+    $this->assertSession()->pageTextContains($message_server);
+    $this->assertSession()->pageTextNotContains(self::FALLBACK_MESSAGE);

     // From here on out the watchdog errors are just a nuisance.
     $this->assertWatchdogErrors = FALSE;
@@ @@
     $edit = [
       'api_key' => 'validkey',
     ];
-    $this->drupalPostForm('admin/config/content/akismet/settings', $edit, t('Save configuration'));
-    $this->assertText($message_saved);
-    $this->assertText($message_valid);
-    $this->assertNoText($message_missing);
-    $this->assertNoText($message_invalid);
+    $this->drupalGet('admin/config/content/akismet/settings');
+    $this->submitForm($edit, t('Save configuration'));
+    $this->assertSession()->pageTextContains($message_saved);
+    $this->assertSession()->pageTextContains($message_valid);
+    $this->assertSession()->pageTextNotContains($message_missing);
+    $this->assertSession()->pageTextNotContains($message_invalid);

     // Verify that deleting keys throws the correct error message again.
     $this->drupalGet('admin/config/content/akismet/settings');
-    $this->assertText($message_valid);
+    $this->assertSession()->pageTextContains($message_valid);
     $edit = [
       'api_key' => '',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
-    $this->assertText($message_saved);
+    $this->submitForm($edit, t('Save configuration'));
+    $this->assertSession()->pageTextContains($message_saved);
     // The module incorrectly shows this message in this condition. See
     // https://www.drupal.org/project/akismet/issues/3210899
     // $this->assertNoText($message_valid);
-    $this->assertText($message_missing);
-    $this->assertNoText($message_invalid);
+    $this->assertSession()->pageTextContains($message_missing);
+    $this->assertSession()->pageTextNotContains($message_invalid);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/akismet/tests/src/Functional/FormConfigurationTest.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->drupalLogin($this->adminUser);
@@ @@

     // Protect Akismet test form.
     $this->drupalGet('admin/config/content/akismet/add-form', ['query' => ['form_id' => 'akismet_test_post_form']]);
-    $this->assertText('Akismet test form');
+    $this->assertSession()->pageTextContains('Akismet test form');

     $edit = [
       'unsure' => 'discard',
@@ @@
       'enabled_fields[' . rawurlencode('parent][child') . ']' => TRUE,
       'enabled_fields[field]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Create Protected Akismet Form'));
+    $this->submitForm($edit, t('Create Protected Akismet Form'));

     // Verify that akismet_test_post_form form was protected.
-    $this->assertText(t('The form protection has been added.'));
-    $this->assertText('Akismet test form');
+    $this->assertSession()->pageTextContains(t('The form protection has been added.'));
+    $this->assertSession()->pageTextContains('Akismet test form');
     $akismet_form = $this->loadAkismetConfiguredForm('akismet_test_post_form');
     $this->assertIsObject($akismet_form, t('Form configuration exists.'));

@@ @@
       'title' => 'unsure',
       'body' => 'unsure',
     ];
-    $this->drupalPostForm('akismet-test/form', $edit, t('Save'));
-    $this->assertText(self::SPAM_MESSAGE);
+    $this->drupalGet('akismet-test/form');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(self::SPAM_MESSAGE);

     $data = $this->getServerRecord();
     $this->assertTrue(empty($data['postTitle']), 'Post title was not passed to Akismet.');
@@ @@
       // Strip out 'enabled_fields[' from the start and ']' from the end.
       $elements[] = substr(substr(rawurldecode($field->getAttribute('name')), 0, -1), strlen('enabled_fields['));
     }
-    $this->assertEqual($elements, array_keys($form_info['elements']), t('Field list only contains available form elements.'));
+    $this->assertEquals($elements, array_keys($form_info['elements']), t('Field list only contains available form elements.'));

     // Try a simple submit of the form.
     $this->drupalLogout();
@@ @@
     $edit = [
       'title' => 'unsure',
     ];
-    $this->drupalPostForm('akismet-test/form', $edit, t('Save'));
-    $this->assertNoText('Successful form submission.');
-    $this->assertText(self::SPAM_MESSAGE);
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->drupalGet('akismet-test/form');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextNotContains('Successful form submission.');
+    $this->assertSession()->pageTextContains(self::SPAM_MESSAGE);
+    $this->submitForm([], t('Save'));

     // Try to submit values for top-level fields.
     $edit = [
@@ @@
       'title' => 'spam',
       'body' => 'spam',
     ];
-    $this->drupalPostForm('akismet-test/form', $edit, t('Save'));
-    $this->assertNoText('Successful form submission.');
-    $this->assertText(self::SPAM_MESSAGE);
+    $this->drupalGet('akismet-test/form');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextNotContains('Successful form submission.');
+    $this->assertSession()->pageTextContains(self::SPAM_MESSAGE);

     // Try to submit values for nested field.
     $edit = [
@@ @@
       'title' => $this->randomString(),
       'parent[child]' => 'spam',
     ];
-    $this->drupalPostForm('akismet-test/form', $edit, t('Save'));
-    $this->assertNoText('Successful form submission.');
-    $this->assertText(self::SPAM_MESSAGE);
+    $this->drupalGet('akismet-test/form');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextNotContains('Successful form submission.');
+    $this->assertSession()->pageTextContains(self::SPAM_MESSAGE);

     // Try to submit values for nested field and multiple value field.
     // Start with ham values for simple, nested, and first multiple field.
@@ @@
       'parent[child]' => 'ham',
       'field[new]' => 'ham',
     ];
-    $this->drupalPostForm('akismet-test/form', $edit, t('Add'));
+    $this->drupalGet('akismet-test/form');
+    $this->submitForm($edit, t('Add'));

     // Verify that the form was rebuilt.
-    $this->assertNoText('Successful form submission.');
-    $this->assertNoText(self::SPAM_MESSAGE);
+    $this->assertSession()->pageTextNotContains('Successful form submission.');
+    $this->assertSession()->pageTextNotContains(self::SPAM_MESSAGE);

     // Add another value for multiple field.
     $edit = [
       'field[new]' => 'ham',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Add'));
+    $this->submitForm($edit, t('Add'));

     // Verify that the form was rebuilt.
-    $this->assertNoText('Successful form submission.');
-    $this->assertNoText(self::SPAM_MESSAGE);
+    $this->assertSession()->pageTextNotContains('Successful form submission.');
+    $this->assertSession()->pageTextNotContains(self::SPAM_MESSAGE);

     // Now replace all ham values with random values, add a spam value to the
     // multiple field and submit the form.
@@ @@
       'field[1]' => $this->randomString(),
       'field[new]' => 'spam',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Verify that the form was not submitted and cannot be submitted.
-    $this->assertNoText('Successful form submission.');
-    $this->assertText(self::SPAM_MESSAGE);
+    $this->assertSession()->pageTextNotContains('Successful form submission.');
+    $this->assertSession()->pageTextContains(self::SPAM_MESSAGE);

     // Verify that we can remove the form protection.
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/config/content/akismet');
-    $this->assertText('Akismet test form');
+    $this->assertSession()->pageTextContains('Akismet test form');
+    $this->drupalGet('admin/config/content/akismet/form/akismet_test_post_form/delete');

-    $this->drupalPostForm('admin/config/content/akismet/form/akismet_test_post_form/delete',
-      [],
-      t('Remove Akismet Protection'));
-    $this->assertUrl('admin/config/content/akismet');
-    $this->assertNoText('Akismet test form');
-    $this->assertText(t('The form protection has been removed.'));
+    $this->submitForm([], t('Remove Akismet Protection'));
+    $this->assertSession()->addressEquals('admin/config/content/akismet');
+    $this->assertSession()->pageTextNotContains('Akismet test form');
+    $this->assertSession()->pageTextContains(t('The form protection has been removed.'));
     $akismet_form = $this->loadAkismetConfiguredForm('akismet_test_post_form');
     $this->assertNull($akismet_form, 'Form protection should not be found.');

@@ @@
     $edit = [
       'title' => 'unsure',
     ];
-    $this->drupalPostForm('akismet-test/form', $edit, t('Save'));
-    $this->assertText('Successful form submission.');
-    $this->assertNoText(self::SPAM_MESSAGE);
+    $this->drupalGet('akismet-test/form');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains('Successful form submission.');
+    $this->assertSession()->pageTextNotContains(self::SPAM_MESSAGE);
   }

   /**
@@ @@
     foreach ($unexpected as $field) {
       $this->assertFalse(isset($form_info['elements'][$field]));
     }
-    $this->assertEqual($form_info['mapping']['post_id'], 'mid');
+    $this->assertEquals($form_info['mapping']['post_id'], 'mid');
   }

   /**
@@ @@

     // Verify that user registration form is not protected.
     $this->drupalGet('admin/config/content/akismet');
-    $this->assertNoText($form_info['user_register_form']['title']);
+    $this->assertSession()->pageTextNotContains($form_info['user_register_form']['title']);
     $this->assertNull($this->loadAkismetConfiguredForm('user_register_form'), t('Form configuration should not exist.'));

     // Re-protect user registration form.
     $this->drupalGet('admin/config/content/akismet/add-form');
-    $this->assertNoText(t('All available forms are protected already.'));
+    $this->assertSession()->pageTextNotContains(t('All available forms are protected already.'));
     $this->drupalGet('admin/config/content/akismet/add-form', ['query' => ['form_id' => 'user_register_form']]);
-    $this->assertText($form_info['user_register_form']['title']);
-    $this->drupalPostForm(NULL, [], t('Create Protected Akismet Form'));
+    $this->assertSession()->pageTextContains($form_info['user_register_form']['title']);
+    $this->submitForm([], t('Create Protected Akismet Form'));

     // Verify that user registration form was protected.
-    $this->assertText(t('The form protection has been added.'));
-    $this->assertText($form_info['user_register_form']['title']);
+    $this->assertSession()->pageTextContains(t('The form protection has been added.'));
+    $this->assertSession()->pageTextContains($form_info['user_register_form']['title']);
     $this->assertIsObject($this->loadAkismetConfiguredForm('user_register_form'), t('Form configuration exists.'));

     // Retrieve a list of all permissions to verify them below.
@@ @@
     foreach ($form_info as $form_id => $info) {
       if (!$this->loadAkismetConfiguredForm($form_id)) {
         $this->drupalGet('admin/config/content/akismet/add-form', ['query' => ['form_id' => $form_id]]);
-        $this->assertText($info['title']);
+        $this->assertSession()->pageTextContains($info['title']);
         // Verify that forms specifying elements have all possible elements
         // preselected for textual analysis.
         $edit = [];
@@ @@
         if (!empty($info['elements'])) {
           foreach ($info['elements'] as $field => $label) {
             $field = rawurlencode($field);
-            $this->assertFieldByName("enabled_fields[$field]", TRUE);
+            $this->assertSession()->fieldValueEquals("enabled_fields[$field]", TRUE);
           }
         }
         // Verify that CAPTCHA-only forms contain no configurable fields.
         else {
-          $this->assertNoText(t('Analyze text for'));
-          $this->assertNoText(t('Text fields to analyze'));
+          $this->assertSession()->pageTextNotContains(t('Analyze text for'));
+          $this->assertSession()->pageTextNotContains(t('Text fields to analyze'));
         }
         // Verify that bypass permissions are output.
-        $this->assertRaw($all_permissions['bypass akismet protection']['title']);
+        $this->assertSession()->responseContains($all_permissions['bypass akismet protection']['title']);
         foreach ($info['bypass access'] as $permission) {
-          $this->assertRaw($all_permissions[$permission]['title']);
+          $this->assertSession()->responseContains($all_permissions[$permission]['title']);
         }
-        $this->drupalPostForm(NULL, $edit, t('Create Protected Akismet Form'));
-        $this->assertText(t('The form protection has been added.'));
+        $this->submitForm($edit, t('Create Protected Akismet Form'));
+        $this->assertSession()->pageTextContains(t('The form protection has been added.'));
       }
     }

     // Verify that trying to add a form redirects to the overview.
     $this->drupalGet('admin/config/content/akismet/add-form');
-    $this->assertText(t('All available forms are protected already.'));
-    $this->assertUrl('admin/config/content/akismet');
+    $this->assertSession()->pageTextContains(t('All available forms are protected already.'));
+    $this->assertSession()->addressEquals('admin/config/content/akismet');
   }

   /**
@@ @@

     // Ensure that unprotecting the forms does not throw any notices either.
     foreach ($forms as $form_id) {
-      $this->assertNoLinkByHref('admin/config/content/akismet/form/' . $form_id . '/edit');
-      $this->assertLinkByHref('admin/config/content/akismet/form/' . $form_id . '/delete');
-      $this->drupalPostForm('admin/config/content/akismet/form/' . $form_id . '/delete',
-        [],
-        t('Remove Akismet Protection'));
-      $this->assertNoLinkByHref('admin/config/content/akismet/form/' . $form_id . '/delete');
+      $this->assertSession()->linkByHrefNotExists('admin/config/content/akismet/form/' . $form_id . '/edit');
+      $this->assertSession()->linkByHrefExists('admin/config/content/akismet/form/' . $form_id . '/delete');
+      $this->drupalGet('admin/config/content/akismet/form/' . $form_id . '/delete');
+      $this->submitForm([], t('Remove Akismet Protection'));
+      $this->assertSession()->linkByHrefNotExists('admin/config/content/akismet/form/' . $form_id . '/delete');
     }
     // Confirm deletion.
     $configured = \Drupal::entityTypeManager()->getStorage('akismet_form')->loadMultiple();
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertLinkByHrefRector
 * AssertNoLinkByHrefRector
 * AssertNoTextRector
 * AssertRawRector
 * AssertTextRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/akismet/tests/src/Functional/FallbackModeTest.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
@@ @@

     // Check the password form.
     $this->drupalGet('user/password', ['watchdog' => RfcLogLevel::EMERGENCY]);
-    $this->assertText(self::FALLBACK_MESSAGE);
+    $this->assertSession()->pageTextContains(self::FALLBACK_MESSAGE);

     // Verify that the form cannot be submitted.
     $edit = [
       'name' => $this->adminUser->getAccountName(),
     ];
-    $this->drupalPostForm(NULL, $edit, t('Submit'), ['watchdog' => RfcLogLevel::EMERGENCY]);
-    $this->assertNoText(t('Further instructions have been sent to your email address.'));
+    $this->submitForm($edit, t('Submit'));
+    $this->assertSession()->pageTextNotContains(t('Further instructions have been sent to your email address.'));

     // Check the register form.
     $this->drupalGet('user/register', ['watchdog' => RfcLogLevel::EMERGENCY]);
-    $this->assertText(self::FALLBACK_MESSAGE);
+    $this->assertSession()->pageTextContains(self::FALLBACK_MESSAGE);

     // Verify that the form cannot be submitted.
     $edit = [
       'mail' => $this->randomString(),
     ];
-    $this->drupalPostForm(NULL, $edit, t('Create new account'), ['watchdog' => RfcLogLevel::EMERGENCY]);
-    $this->assertText(self::FALLBACK_MESSAGE);
+    $this->submitForm($edit, t('Create new account'));
+    $this->assertSession()->pageTextContains(self::FALLBACK_MESSAGE);
   }

   /**
@@ @@

     // Check the password form.
     $this->drupalGet('user/password', ['watchdog' => RfcLogLevel::EMERGENCY]);
-    $this->assertNoText(self::FALLBACK_MESSAGE);
+    $this->assertSession()->pageTextNotContains(self::FALLBACK_MESSAGE);

     // Verify that the form can be submitted.
     $edit = [
       'name' => $this->adminUser->getAccountName(),
     ];
-    $this->drupalPostForm(NULL, $edit, t('Submit'), ['watchdog' => RfcLogLevel::EMERGENCY]);
+    $this->submitForm($edit, t('Submit'));
     $this->assertPasswordInstructionMessage();
-    $this->assertNoText(self::FALLBACK_MESSAGE);
+    $this->assertSession()->pageTextNotContains(self::FALLBACK_MESSAGE);

     // Check the registration form.
     $this->drupalGet('user/register', ['watchdog' => RfcLogLevel::EMERGENCY]);
-    $this->assertNoText(self::FALLBACK_MESSAGE);
+    $this->assertSession()->pageTextNotContains(self::FALLBACK_MESSAGE);

     // Verify that the form can be submitted.
     $edit = [
@@ @@
       'mail' => 'testme@test.com',
       'name' => $this->randomString(),
     ];
-    $this->drupalPostForm(NULL, $edit, t('Create new account'), ['watchdog' => RfcLogLevel::EMERGENCY]);
-    $this->assertNoText(self::FALLBACK_MESSAGE);
+    $this->submitForm($edit, t('Create new account'));
+    $this->assertSession()->pageTextNotContains(self::FALLBACK_MESSAGE);
   }

   /**
@@ @@
     // Validate that a user is not blocked from submitting the request password
     // form.
     $this->drupalGet('user/password', ['watchdog' => RfcLogLevel::EMERGENCY]);
-    $this->assertNoText(self::FALLBACK_MESSAGE);
+    $this->assertSession()->pageTextNotContains(self::FALLBACK_MESSAGE);
     // The watchdog errors don't really help us here due to the error
     // nature of the failover scenario.
     $this->assertWatchdogErrors = FALSE;
-    $this->drupalPostForm('user/password', ['name' => $this->adminUser->getAccountName()], t('Submit'));
+    $this->drupalGet('user/password');
+    $this->submitForm(['name' => $this->adminUser->getAccountName()], t('Submit'));
     $this->assertPasswordInstructionMessage();
   }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/akismet/tests/src/Functional/DataTest.php:250

    ---------- begin diff ----------
@@ @@
       'title' => 'ham',
       'body' => 'ham',
     ];
-    $this->drupalPostForm('akismet-test/form', $edit, t('Save'));
+    $this->drupalGet('akismet-test/form');
+    $this->submitForm($edit, t('Save'));
     $data = $this->getServerRecord();
     $this->assertEquals(0, preg_match('@Submit|Add@', $data['comment_content']), 'Button values should not be found in post body.');
   }
@@ @@
     $node = $this->drupalCreateNode(['type' => 'article', 'promote' => 1]);
     $node_url = 'node/' . $node->id();
     $this->drupalGet($node_url);
-    $this->assertText($node->getTitle());
+    $this->assertSession()->pageTextContains($node->getTitle());
     $this->drupalLogout();

     // Log in regular user and post a comment.
@@ @@
       'subject[0][value]' => $this->randomString(),
       'comment_body[0][value]' => 'unsure',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertText('Your comment has been queued for review by site administrators and will be published after approval.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains('Your comment has been queued for review by site administrators and will be published after approval.');

     // Verify that submitted data equals post data.
     $data = $this->getServerRecord();
@@ @@
     $this->assertEqualWithMessage($data['comment_author_email'], $web_user->getEmail(), 'comment_author_email');
     $this->assertEqualWithMessage($data['comment_author_id'], $web_user->id(), 'comment_author_id');

-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));
     $cids = $this->loadCommentsBySubject($edit['subject[0][value]']);
     $this->assertTrue(!empty($cids), t('Comment exists in database.'));

@@ @@
       'subject[0][value]' => '"' . $this->randomString() . '"',
       'comment_body[0][value]' => 'unsure',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertText('Your comment has been queued for review by site administrators and will be published after approval.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains('Your comment has been queued for review by site administrators and will be published after approval.');

     // Verify that submitted data equals post data.
     $data = $this->getServerRecord();
@@ @@
     $this->assertEqualWithMessage($data['comment_author'], $edit['name'], 'comment_author');
     $this->assertFalse(isset($data['comment_author_id']), t('comment_author_id: Undefined.'));

-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));
     $cids = $this->loadCommentsBySubject($edit['subject[0][value]']);
     $this->assertTrue(!empty($cids), t('Comment exists in database.'));

@@ @@
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('comment/' . reset($cids) . '/edit');
     // Post without modification.
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));

     // Verify that no data was submitted to Akismet.
     $data = $this->getServerRecord();
@@ @@
       'title' => 'ham',
       'body' => $this->randomString(),
     ];
-    $this->drupalPostForm('akismet-test/form', $edit, t('Save'));
-    $this->assertText('Successful form submission.');
+    $this->drupalGet('akismet-test/form');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains('Successful form submission.');
     $mid = $this->getFieldValueByName('mid');
     $this->assertTrue($mid > 0, t('Submission was stored.'));
     $data = $this->assertAkismetData('akismet_test_post', $mid);

     // Ensure we were redirected to the form for the stored entry.
-    $this->assertFieldByName(
-      'body',
-      $edit['body']
-    );
+    $this->assertSession()->fieldValueEquals('body', $edit['body']);
     $new_mid = $this->getFieldValueByName('mid');
-    $this->assertEqual($new_mid, $mid, t('Existing entity id found.'));
+    $this->assertEquals($new_mid, $mid, t('Existing entity id found.'));

     // Verify that session data was stored.
     $this->assertEqualWithMessage($data->entity, 'akismet_test_post', 'entity');
@@ @@

     // Update the stored entry.
     $edit['title'] = 'unsure';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $new_data = $this->assertAkismetData('akismet_test_post', $mid);

     // Verify that only session data was updated.
@@ @@
     $randomKey = $this->randomMachineName();
     // Do not assert watchdog messages; the random key is alsmot certainly
     // invalid.
-    $this->drupalPostForm(
-      NULL,
-      ['api_key' => $randomKey],
-      'Save configuration',
-      ['watchdog' => FALSE]
-    );
+    $this->submitForm(['api_key' => $randomKey], 'Save configuration');

     // Verify that we sent the new key to the server. We call verifyKeys often
     // so let's find the last record.
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/akismet/tests/src/Functional/ContactFormsTest.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser([
@@ @@

     // Submit a 'spam' message.  This should be blocked.
     $this->assertSpamSubmit($url, ['subject[0][value]', 'message[0][value]'], [], $button);
-    $this->assertNoText($success);
+    $this->assertSession()->pageTextNotContains($success);

     // Submit a 'ham' message.  This should be accepted.
     $this->assertHamSubmit($url, ['subject[0][value]', 'message[0][value]'], [], $button);
-    $this->assertText($success);
+    $this->assertSession()->pageTextContains($success);

     // Submit an 'unsure' message. This should not be accepted either.
     $this->assertUnsureSubmit($url, ['subject[0][value]', 'message[0][value]'], [], $button, $success);
@@ @@
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/structure/contact');
     // Default form exists.
-    $this->assertLinkByHref('admin/structure/contact/manage/feedback/delete');
+    $this->assertSession()->linkByHrefExists('admin/structure/contact/manage/feedback/delete');

     $this->setProtectionUi('contact_message_feedback_form');
     $this->drupalGet('contact');
@@ @@

     // Submit a 'spam' message.  This should be blocked.
     $this->assertSpamSubmit($url, ['subject[0][value]', 'message[0][value]'], [], $button);
-    $this->assertNoText($success);
+    $this->assertSession()->pageTextNotContains($success);

     // Submit a 'ham' message.  This should be accepted.
     $this->assertHamSubmit($url, ['subject[0][value]', 'message[0][value]'], [], $button);
-    $this->assertText($success);
+    $this->assertSession()->pageTextContains($success);

     // Submit an 'unsure' message. This should not be accepted either.
     $this->assertUnsureSubmit($url, ['subject[0][value]', 'message[0][value]'], [], $button, $success);
    ----------- end diff -----------

Applied rules:
 * AssertLinkByHrefRector
 * AssertNoTextRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/akismet/tests/src/Functional/CommentFormTest.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
@@ @@
     $this->drupalGet('node/' . $this->node->id());

     // Preview a comment that is 'spam'.
-    $this->drupalPostForm(NULL, ['comment_body[0][value]' => 'spam'], t('Preview'));
+    $this->submitForm(['comment_body[0][value]' => 'spam'], t('Preview'));

     // Save the comment and make sure it appears.
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));

     // Assert that a comment that is known to be spam appears on the screen
     // after it is submitted.
-    $this->assertRaw('<p>spam</p>');
+    $this->assertSession()->responseContains('<p>spam</p>');
   }

   /**
@@ @@
     $this->assertHamSubmit(NULL, ['comment_body[0][value]'], [], t('Save'));
     // Assert aht A comment that is known to be ham appears on the screen after
     // it is submitted.
-    $this->assertRaw('<p>ham</p>');
+    $this->assertSession()->responseContains('<p>ham</p>');
     $this->assertCommentCount($node->id(), $original_number_of_comments + 1);
     $cids = $this->loadCommentsBySubject('ham');
     $this->assertAkismetData('comment', reset($cids));
@@ @@
         ['@nid' => $nid, '@actual' => $actual, '@expected' => $expected]
       );
     }
-    $this->assertEqual($actual, $expected, $message);
+    $this->assertEquals($actual, $expected, $message);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertRawRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/akismet/tests/src/Functional/BypassAccessTest.php:37

    ---------- begin diff ----------
@@ @@
       'title' => $this->randomString(),
       'body' => 'ham',
     ];
-    $this->drupalPostForm('akismet-test/form', $edit, t('Save'));
+    $this->drupalGet('akismet-test/form');
+    $this->submitForm($edit, t('Save'));
     $this->assertTestSubmitData();

     // Ensure a user having one of the permissions to bypass access can post
@@ @@
       'title' => $this->randomString(),
       'body' => 'spam',
     ];
-    $this->drupalPostForm('akismet-test/form', $edit, t('Save'));
-    $this->assertNoText(self::SPAM_MESSAGE);
+    $this->drupalGet('akismet-test/form');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextNotContains(self::SPAM_MESSAGE);
     $this->assertTestSubmitData();

     // Log in back the regular user and try to submit spam.
@@ @@
     $this->drupalLogin($web_user);
     $this->drupalGet('akismet-test/form');

-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertText(self::SPAM_MESSAGE);
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(self::SPAM_MESSAGE);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/akismet/tests/src/Functional/AnalysisTest.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // The test form doesn't have a moderation callback, so we should not leave
@@ @@
     $edit = [
       'title' => 'unsure',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $edit = [
       'title' => 'unsure unsure',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
   }

   /**
@@ @@
     $edit = [
       'body' => 'unsure',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertText(self::SPAM_MESSAGE);
-    $this->assertText('Title field is required.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(self::SPAM_MESSAGE);
+    $this->assertSession()->pageTextContains('Title field is required.');
     $edit = [
       'body' => 'unsure unsure',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertText(self::SPAM_MESSAGE);
-    $this->assertText('Title field is required.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(self::SPAM_MESSAGE);
+    $this->assertSession()->pageTextContains('Title field is required.');
     $edit = [
       'body' => 'unsure unsure unsure',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertText(self::SPAM_MESSAGE);
-    $this->assertText('Title field is required.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(self::SPAM_MESSAGE);
+    $this->assertSession()->pageTextContains('Title field is required.');
     $edit = [
       'title' => 'unsure',
       'body' => 'unsure',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertNoText('Title field is required.');
-    $this->assertText(self::SPAM_MESSAGE);
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextNotContains('Title field is required.');
+    $this->assertSession()->pageTextContains(self::SPAM_MESSAGE);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/akismet/tests/src/Functional/AnalysisOptionsTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser([
@@ @@
       $mid = $this->assertTestSubmitData();
       $data = $this->assertAkismetData('akismet_test_post', $mid);
       $record = $this->loadTestPost($mid);
-      $this->assertEqual($record->getStatus(), 1, t('Published test post found.'));
+      $this->assertEquals($record->getStatus(), 1, t('Published test post found.'));
       $this->assertEqualWithMessage($data->spamScore, 0, 'spamScore');
       $this->assertEqualWithMessage($data->spamClassification, 'ham', 'spamClassification');
       $this->assertEqualWithMessage($data->moderate, 0, 'moderate');
@@ @@
     // posts into moderation queue.
     $this->setProtectionUi('akismet_basic_elements_test_form');
     $this->drupalGet('admin/config/content/akismet/form/akismet_basic_elements_test_form/edit');
-    $this->assertNoFieldByName('unsure');
+    $this->assertSession()->fieldValueNotEquals('unsure', '');

     // Configure akismet_test_form to retain unsure posts.
     $this->setProtectionUi('akismet_test_post_form', NULL,
@@ @@
       'title' => $this->randomString(),
       'body' => 'unsure',
     ];
-    $this->drupalPostForm('akismet-test/form', $edit, t('Save'));
+    $this->drupalGet('akismet-test/form');
+    $this->submitForm($edit, t('Save'));
     $mid = $this->assertTestSubmitData();
     $data = $this->assertAkismetData('akismet_test_post', $mid);
     $record = $this->loadTestPost($mid);
-    $this->assertEqual($record->getStatus(), 0, t('Unpublished test post found.'));
+    $this->assertEquals($record->getStatus(), 0, t('Unpublished test post found.'));
     $this->assertEqualWithMessage($data->classification, 'unsure', 'classification');
     $this->assertEqualWithMessage($data->moderate, 1, 'moderate');

@@ @@
       'title' => $this->randomString(),
       'body' => 'unsure unsure',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $mid = $this->assertTestSubmitData($mid);
     $data = $this->assertAkismetData('akismet_test_post', $mid);
     $record = $this->loadTestPost($mid);
-    $this->assertEqual($record->getStatus(), 0, t('Unpublished test post found.'));
+    $this->assertEquals($record->getStatus(), 0, t('Unpublished test post found.'));
     $this->assertEqualWithMessage($data->classification, 'unsure', 'classification');
     $this->assertEqualWithMessage($data->moderate, 1, 'moderate');

@@ @@
     $edit = [
       'status' => TRUE,
     ];
-    $this->drupalPostForm('akismet-test/form/' . $mid, $edit, t('Save'));
+    $this->drupalGet('akismet-test/form/' . $mid);
+    $this->submitForm($edit, t('Save'));
     $mid = $this->assertTestSubmitData($mid);
     $data = $this->assertAkismetData('akismet_test_post', $mid);
     $record = $this->loadTestPost($mid);
-    $this->assertEqual($record->getStatus(), 1, t('Published test post found.'));
+    $this->assertEquals($record->getStatus(), 1, t('Published test post found.'));
     $this->assertEqualWithMessage($data->classification, 'unsure', 'classification');
     $this->assertEqualWithMessage($data->moderate, 0, 'moderate');
   }
@@ @@
     // into moderation queue.
     $this->setProtectionUi('akismet_basic_elements_test_form');
     $this->drupalGet('admin/config/content/akismet/form/akismet_basic_elements_test_form/edit');
-    $this->assertNoFieldByName('discard');
+    $this->assertSession()->fieldValueNotEquals('discard', '');

     // Configure akismet_test_form to accept bad posts.
     $this->setProtectionUi('akismet_test_post_form', NULL, [
@@ @@
       'title' => $this->randomString(),
       'body' => 'spam',
     ];
-    $this->drupalPostForm('akismet-test/form', $edit, t('Save'));
+    $this->drupalGet('akismet-test/form');
+    $this->submitForm($edit, t('Save'));
     $mid = $this->assertTestSubmitData();
     $data = $this->assertAkismetData('akismet_test_post', $mid);
     $record = $this->loadTestPost($mid);
-    $this->assertEqual($record->getStatus(), 0, t('Unpublished test post found.'));
+    $this->assertEquals($record->getStatus(), 0, t('Unpublished test post found.'));
     $this->assertEqualWithMessage($data->classification, 'spam', 'classification');
     $this->assertEqualWithMessage($data->moderate, 1, 'moderate');

@@ @@
       'title' => $this->randomString(),
       'body' => 'spam spam',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $mid = $this->assertTestSubmitData($mid);
     $data = $this->assertAkismetData('akismet_test_post', $mid);
     $record = $this->loadTestPost($mid);
-    $this->assertEqual($record->getStatus(), 0, t('Unpublished test post found.'));
+    $this->assertEquals($record->getStatus(), 0, t('Unpublished test post found.'));
     $this->assertEqualWithMessage($data->classification, 'spam', 'classification');
     $this->assertEqualWithMessage($data->moderate, 1, 'moderate');

@@ @@
     $edit = [
       'status' => TRUE,
     ];
-    $this->drupalPostForm('akismet-test/form/' . $mid, $edit, t('Save'));
+    $this->drupalGet('akismet-test/form/' . $mid);
+    $this->submitForm($edit, t('Save'));
     $mid = $this->assertTestSubmitData($mid);
     $data = $this->assertAkismetData('akismet_test_post', $mid);
     $record = $this->loadTestPost($mid);
-    $this->assertEqual($record->getStatus(), 1, t('Published test post found.'));
+    $this->assertEquals($record->getStatus(), 1, t('Published test post found.'));
     $this->assertEqualWithMessage($data->classification, 'spam', 'classification');
     $this->assertEqualWithMessage($data->moderate, 0, 'moderate');
   }
@@ @@
           'title' => $this->randomString(),
           'body' => 'ham',
         ];
-        $this->drupalPostForm('akismet-test/form', $edit, t('Save'));
+        $this->drupalGet('akismet-test/form');
+        $this->submitForm($edit, t('Save'));
         $mid = $this->assertTestSubmitData();
         $data = $this->assertAkismetData('akismet_test_post', $mid);
         $record = $this->loadTestPost($mid);
-        $this->assertEqual(
-          $record->getStatus(),
-          1,
-          t(
-            'Ham post must be accepted with unsure option set to %unsure_option and discard option set to %discard_option.',
-            [
-              '%unsure_option' => $unsureOption,
-              '%discard_option' => $discardOption,
-            ]
-          )
-        );
+        $this->assertEquals($record->getStatus(), 1, t(
+          'Ham post must be accepted with unsure option set to %unsure_option and discard option set to %discard_option.',
+          [
+            '%unsure_option' => $unsureOption,
+            '%discard_option' => $discardOption,
+          ]
+        ));
         $this->assertEqualWithMessage(
           $data->classification,
           'ham',
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNoFieldByNameRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/akismet/tests/src/Functional/AkismetTestBase.php:155

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritDoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->messages = [];

     parent::setUp();
@@ @@
   /**
    * {@inheritDoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     if ($this->assertWatchdogErrors) {
       $this->assertAkismetWatchdogMessages();
     }
@@ @@
       if ($row->severity >= $max_severity) {
         // Visually separate debug log messages from other messages.
         if ($row->severity == RfcLogLevel::DEBUG) {
-          $this->pass($output);
+        } else {
         }
-        else {
-          $this->pass(Html::escape($row->type) . ' (' . $row->severity . '): ' . $output);
-        }
       }
       else {
         $this->fail(Html::escape($row->type) . ' (' . $row->severity . '): ' . $output);
@@ @@
    */
   protected function assertSpamSubmit($url, array $spam_fields, array $edit = [], string $button = '', string $success_message = '') {
     $edit += array_fill_keys($spam_fields, 'spam');
-    $this->drupalPostForm($url, $edit, $button);
-    $this->assertText(self::SPAM_MESSAGE);
+    $this->drupalGet($url);
+    $this->submitForm($edit, $button);
+    $this->assertSession()->pageTextContains(self::SPAM_MESSAGE);
     if ($success_message) {
-      $this->assertNoText($success_message);
+      $this->assertSession()->pageTextNotContains($success_message);
     }
   }

@@ @@
    */
   protected function assertHamSubmit($url, array $ham_fields, array $edit = [], string $button = '', string $success_message = '') {
     $edit += array_fill_keys($ham_fields, 'ham');
-    $this->drupalPostForm($url, $edit, $button);
-    $this->assertNoText(self::SPAM_MESSAGE);
+    $this->drupalGet($url);
+    $this->submitForm($edit, $button);
+    $this->assertSession()->pageTextNotContains(self::SPAM_MESSAGE);
     if ($success_message) {
-      $this->assertText($success_message);
+      $this->assertSession()->pageTextContains($success_message);
     }
   }

@@ @@
    */
   protected function assertUnsureSubmit($url, array $unsure_fields, array $edit = [], string $button = '', string $success_message = '') {
     $edit += array_fill_keys($unsure_fields, 'unsure');
-    $this->drupalPostForm($url, $edit, $button);
-    $this->assertText(self::SPAM_MESSAGE);
+    $this->drupalGet($url);
+    $this->submitForm($edit, $button);
+    $this->assertSession()->pageTextContains(self::SPAM_MESSAGE);
     if ($success_message) {
-      $this->assertNoText($success_message);
+      $this->assertSession()->pageTextNotContains($success_message);
     }
   }

@@ @@
    *   The actual mid.
    */
   protected function assertTestSubmitData(int $old_mid = NULL): string {
-    $this->assertText('Successful form submission.');
+    $this->assertSession()->pageTextContains('Successful form submission.');
     $mid = $this->getFieldValueByName('mid');
     if (isset($old_mid)) {
       $this->assertEqualWithMessage($mid, $old_mid, 'Test record id');
@@ @@
       '@first' => var_export($first, TRUE),
       '@second' => var_export($second, TRUE),
     ]);
-    $this->assertEqual($first, $second, $message);
+    $this->assertEquals($first, $second, $message);
   }

   /**
@@ @@
       '@first' => var_export($first, TRUE),
       '@second' => var_export($second, TRUE),
     ]);
-    $this->assertNotEqual($first, $second, $message);
+    $this->assertNotEquals($first, $second, $message);
   }

   /**
@@ @@
    * Retrieve a field value by ID.
    */
   protected function getFieldValueById($id): string {
-    $fields = $this->xpath($this->constructFieldXpath('id', $id));
+    $fields = $this->xpath($this->getSession()->getPage()->findField($id));
     return (string) $fields[0]['value'];
   }

@@ @@
    * Retrieve a field value by name.
    */
   protected function getFieldValueByName($name): string {
-    $fields = $this->xpath($this->constructFieldXpath('name', $name));
+    $fields = $this->xpath($this->getSession()->getPage()->findField($name));
     return (string) $fields[0]->getValue();
   }

@@ @@
     }
     // Edit an existing form.
     else {
-      $this->assertLinkByHref('admin/config/content/akismet/form/' . $form_id . '/edit');
+      $this->assertSession()->linkByHrefExists('admin/config/content/akismet/form/' . $form_id . '/edit');
       $this->drupalGet('admin/config/content/akismet/form/' . $form_id . '/edit');
       $save = t('Update Protected Akismet Form');
     }
@@ @@
         $edit['enabled_fields[' . rawurlencode($field) . ']'] = FALSE;
       }
     }
-    $this->drupalPostForm(NULL, $edit, $save);
+    $this->submitForm($edit, $save);
     if (!$exists) {
-      $this->assertText(t('The form protection has been added.'));
+      $this->assertSession()->pageTextContains(t('The form protection has been added.'));
     }
     else {
-      $this->assertText(t('The form protection has been updated.'));
+      $this->assertSession()->pageTextContains(t('The form protection has been updated.'));
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertLinkByHrefRector
 * AssertNoTextRector
 * AssertNotEqualRector
 * AssertTextRector
 * ConstructFieldXpathRector
 * PassRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/akismet/tests/src/Functional/ActionsTest.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
     $this->addCommentsToNode();
@@ @@
       $edit = [
         'title[0][value]' => 'ham node ' . $i,
       ];
-      $this->drupalPostForm('node/add/article', $edit, t('Save'));
+      $this->drupalGet('node/add/article');
+      $this->submitForm($edit, t('Save'));
       $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);

       $this->drupalGet('node/' . $node->id());
@@ @@
       $edit = [
         'comment_body[0][value]' => 'ham',
       ];
-      $this->drupalPostForm(NULL, $edit, t('Save'));
+      $this->submitForm($edit, t('Save'));
     }
   }

@@ @@
       $this->assertFalse($comment->isPublished(), 'Comment is now unpublished');
       $server = $this->getServerRecord('feedback');
       $this->assertTrue(in_array($server['contentId'], $contentIds));
-      $this->assertEqual($server['source'], 'akismet_action_unpublish_comment');
-      $this->assertEqual($server['reason'], 'spam');
-      $this->assertEqual($server['type'], 'moderate');
+      $this->assertEquals($server['source'], 'akismet_action_unpublish_comment');
+      $this->assertEquals($server['reason'], 'spam');
+      $this->assertEquals($server['type'], 'moderate');
     }
   }

@@ @@
     $node_storage = \Drupal::entityTypeManager()->getStorage('node');
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/content');
-    $this->assertOption('edit-action', 'akismet_node_unpublish_action');
+    $this->assertSession()->optionExists('edit-action', 'akismet_node_unpublish_action');

     $contentIds = [];
     /** @var \Drupal\node\NodeInterface[] $nodes */
@@ @@

     list(, $minor_version) = explode('.', \Drupal::VERSION);
     $button_name = $minor_version < 2 ? t('Apply') : t('Apply to selected items');
-    $this->drupalPostForm(NULL, $edit, $button_name);
+    $this->submitForm($edit, $button_name);

     // Verify that all nodes are now unpublished.
     $node_storage->resetCache();
@@ @@
       $this->assertFalse($node->isPublished(), 'Node is now unpublished.');
       $server = $this->getServerRecord('feedback');
       $this->assertTrue(in_array($server['contentId'], $contentIds));
-      $this->assertEqual($server['source'], 'akismet_action_unpublish_node');
-      $this->assertEqual($server['reason'], 'spam');
-      $this->assertEqual($server['type'], 'moderate');
+      $this->assertEquals($server['source'], 'akismet_action_unpublish_node');
+      $this->assertEquals($server['reason'], 'spam');
+      $this->assertEquals($server['type'], 'moderate');
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertOptionRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/akismet/tests/src/Functional/AccessTest.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $settings = \Drupal::configFactory()->getEditable('akismet.settings');
     $settings->set('test_mode.enabled', FALSE);
@@ @@
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/config/content/akismet/settings');

-    $this->assertText(self::MESSAGE_NOT_CONFIGURED);
-    $this->assertNoText(self::MESSAGE_SAVED);
-    $this->assertNoText(self::MESSAGE_INVALID);
+    $this->assertSession()->pageTextContains(self::MESSAGE_NOT_CONFIGURED);
+    $this->assertSession()->pageTextNotContains(self::MESSAGE_SAVED);
+    $this->assertSession()->pageTextNotContains(self::MESSAGE_INVALID);

     // Set up an invalid test key and check that an error message is shown.
     $edit = [
       'api_key' => 'foo',
     ];
-    $this->drupalPostForm(
-      NULL,
-      $edit,
-      'Save configuration',
-      ['watchdog' => RfcLogLevel::EMERGENCY]
-    );
-    $this->assertText(self::MESSAGE_SAVED);
-    $this->assertText(self::MESSAGE_INVALID);
-    $this->assertNoText(self::MESSAGE_NOT_CONFIGURED);
+    $this->submitForm($edit, 'Save configuration');
+    $this->assertSession()->pageTextContains(self::MESSAGE_SAVED);
+    $this->assertSession()->pageTextContains(self::MESSAGE_INVALID);
+    $this->assertSession()->pageTextNotContains(self::MESSAGE_NOT_CONFIGURED);
   }

   /**
@@ @@
     // the Akismet settings page.
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/config/content/akismet');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Check access for a user that has everything except the 'administer
     // akismet' permission. This user should not have access to the Akismet
@@ @@
     $web_user = $this->drupalCreateUser(array_diff(\Drupal::moduleHandler()->invokeAll('perm'), ['administer akismet']));
     $this->drupalLogin($web_user);
     $this->drupalGet('admin/config/content/akismet', ['watchdog' => RfcLogLevel::WARNING]);
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 18 files have been changed by Rector                                      

