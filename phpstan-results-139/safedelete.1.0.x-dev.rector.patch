diff --git a/safedelete.info.yml b/safedelete.info.yml
index 1edef42..a2acfc9 100644
--- a/safedelete.info.yml
+++ b/safedelete.info.yml
@@ -1,8 +1,7 @@
 name: SafeDelete
 description: 'Safely delete nodes without causing broken links in the node body or other entity body fields.'
 package: 'Node'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 type: module
 configure: safedelete.settings
 dependencies:
diff --git a/safedelete.module b/safedelete.module
index 45844a5..47c3f39 100644
--- a/safedelete.module
+++ b/safedelete.module
@@ -26,7 +26,7 @@ use Drupal\Core\Render\Markup;
 /**
  * Implements hook_ENTITY_TYPE_insert().
  */
-function safedelete_node_insert(Drupal\Core\Entity\EntityInterface $entity) {
+function safedelete_node_insert(EntityInterface $entity) {
   $entity_id = $entity->id();
   drupal_register_shutdown_function('_handleInsertFileUsage_PageCreation',$entity, $entity_id);
 }
@@ -36,7 +36,7 @@ function safedelete_node_insert(Drupal\Core\Entity\EntityInterface $entity) {
  * Implements hook_ENTITY_delete().
  * Cleanup file_usage when we delete this node.
  */
-function safedelete_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
+function safedelete_entity_delete(EntityInterface $entity) {
   // Exit early if possible.
   if ($entity->getEntityTypeId() != 'node') {
     return;
@@ -49,7 +49,7 @@ function safedelete_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
 /**
  * Implements hook_ENTITY_TYPE_presave().
  */
-function safedelete_node_presave(Drupal\Core\Entity\EntityInterface $entity) {
+function safedelete_node_presave(EntityInterface $entity) {
   // Exit early if possible.
   if ($entity->getEntityTypeId() != 'node') {
     return;
@@ -132,7 +132,7 @@ function safedelete_node_presave(Drupal\Core\Entity\EntityInterface $entity) {
               else {
                 //new media reference
                 //Assumption: only add the file once
-                $fentity = \Drupal\file\Entity\File::load($fileid);
+                $fentity = File::load($fileid);
                 $file_usage = \Drupal::service('file.usage');
                 $file_usage->add($fentity, 'editor', 'node', $entity_id);
               }
@@ -143,7 +143,7 @@ function safedelete_node_presave(Drupal\Core\Entity\EntityInterface $entity) {
                 if (!(array_key_exists ( $fileid , $filearray))) {
                   //Assumption: only remove the file once
                   //ToDo: Change the logic as a loop with count- $refcount
-                  $fentity = \Drupal\file\Entity\File::load($fileid);
+                  $fentity = File::load($fileid);
                   $file_usage = \Drupal::service('file.usage');
                   $file_usage->delete($fentity, 'editor', 'node', $entity_id);
                 }
@@ -154,7 +154,7 @@ function safedelete_node_presave(Drupal\Core\Entity\EntityInterface $entity) {
             if (count($dbfilearray) > 0) {
               // check if the media object(s) are total removed from the content
               foreach ($dbfilearray as $fileid => $refcount) {
-                $fentity = \Drupal\file\Entity\File::load($fileid);
+                $fentity = File::load($fileid);
                 $file_usage = \Drupal::service('file.usage');
                 $file_usage->delete($fentity, 'editor', 'node', $entity_id);
               }
@@ -406,7 +406,7 @@ function safedelete_node_form_safe_archive_validate(array &$form, FormStateInter
           $nid = $entity->id();
           AdminHelper::checkNodeReferencesMessage($nid, $bundle, $show_button, $markup, 'archived', $limit = 20);
           if (!$show_button) {
-            $markup = \Drupal\Core\Render\Markup::create($markup);
+            $markup = Markup::create($markup);
             $form['description']['#markup'] = $markup;
             $form['description']['#weight'] = '-99';
             $error_message = t('Unable to archive due to other content linking to this content.  See warning message above');
@@ -498,7 +498,7 @@ function _handleInsertFileUsage_PageCreation($entity, $entity_id) {
 
         if ( count($filearray) > 0 ) {
           foreach ($filearray as $fileid => $refcount) {
-            $fentity = \Drupal\file\Entity\File::load($fileid);
+            $fentity = File::load($fileid);
             $file_usage = \Drupal::service('file.usage');
             $file_usage->add($fentity, 'editor', 'node', $entity_id);
           }
@@ -580,7 +580,7 @@ function batch_ProcessNodes_Op($id, $operation_details, $nid, $filedirectory, $e
                                'reporteddate' => $reporteddate);
      $json = json_encode($arrayforjsonobj, JSON_PRETTY_PRINT|JSON_UNESCAPED_SLASHES|JSON_UNESCAPED_UNICODE);
      $fp = $filedirectory . $nid . '.json';
-     $file = file_save_data($json, $fp, FileSystemInterface::EXISTS_REPLACE);
+     $file = \Drupal::service('file.repository')->writeData($json, $fp, FileSystemInterface::EXISTS_REPLACE);
    }
    // Optional message displayed under the progressbar.
    $context['message'] = t('Running Batch "@id" @details',
diff --git a/src/AdminHelper.php b/src/AdminHelper.php
index cc0274f..a05c4d1 100644
--- a/src/AdminHelper.php
+++ b/src/AdminHelper.php
@@ -682,7 +682,7 @@ EOT;
                                   'reporteddate' => $reporteddate);
         $json = json_encode($arrayforjsonobj, JSON_PRETTY_PRINT|JSON_UNESCAPED_SLASHES|JSON_UNESCAPED_UNICODE);
         $fp = $filedirectory . $nid . '.json';
-        $file = file_save_data($json, $fp, FileSystemInterface::EXISTS_REPLACE);
+        $file = \Drupal::service('file.repository')->writeData($json, $fp, FileSystemInterface::EXISTS_REPLACE);
       }
     } // end of search the orphaned nodes
     return;
