modules/contrib/cognito/cognito.module
modules/contrib/cognito/src/CognitoMessages.php
modules/contrib/cognito/src/Plugin/cognito/CognitoFlow/Email.php
modules/contrib/cognito/src/Annotation/CognitoFlow.php
modules/contrib/cognito/src/Aws/Cognito.php
modules/contrib/cognito/tests/src/Traits/RegisterFormHelper.php
modules/contrib/cognito/src/Plugin/cognito/CognitoFlowInterface.php
modules/contrib/cognito/src/Plugin/rest/resource/CognitoAuthToken.php
modules/contrib/cognito/src/CognitoMessagesInterface.php
modules/contrib/cognito/src/CognitoToken.php
modules/contrib/cognito/src/Plugin/rest/resource/CognitoUserRegistrationResource.php
modules/contrib/cognito/src/CognitoTokenInterface.php
modules/contrib/cognito/src/Commands/CognitoCommands.php
modules/contrib/cognito/src/Aws/CognitoBase.php
modules/contrib/cognito/tests/src/Unit/CognitoFormEventTest.php
modules/contrib/cognito/src/Aws/CognitoFactory.php
modules/contrib/cognito/src/Aws/CognitoIdentityProviderClientFactory.php
modules/contrib/cognito/src/Aws/CognitoInterface.php
modules/contrib/cognito/src/Aws/CognitoResult.php
modules/contrib/cognito/src/CognitoFlowManager.php
modules/contrib/cognito/src/CognitoFlowManagerInterface.php
modules/contrib/cognito/src/Controller/CognitoAuthenticationController.php
modules/contrib/cognito/tests/src/Unit/CognitoMessagesStub.php
modules/contrib/cognito/tests/src/Unit/CognitoTest.php
modules/contrib/cognito/src/Controller/ConfirmationController.php
modules/contrib/cognito/tests/src/Unit/CognitoTokenTest.php
modules/contrib/cognito/src/Routing/RouteSubscriber.php
modules/contrib/cognito/tests/modules/cognito_tests/src/CognitoTestsServiceProvider.php
modules/contrib/cognito/tests/src/Unit/Email/AdminRegisterFormTest.php
modules/contrib/cognito/tests/modules/cognito_tests/src/NullCognito.php
modules/contrib/cognito/tests/src/Unit/Email/PasswordResetFormTest.php
modules/contrib/cognito/src/Controller/EmailVerificationController.php
modules/contrib/cognito/tests/src/Functional/CognitoRegistrationResourceTest.php
modules/contrib/cognito/tests/src/Unit/Email/ProfileFormTest.php
modules/contrib/cognito/src/Event/CognitoEvents.php
modules/contrib/cognito/src/Event/CognitoFormEvent.php
modules/contrib/cognito/src/Form/CognitoAccountForm.php
modules/contrib/cognito/tests/src/Unit/Email/RegisterFormTest.php
modules/contrib/cognito/tests/src/Functional/CognitoTestBase.php
modules/contrib/cognito/tests/src/Functional/EmailFlowAdminCreateAccountTest.php
modules/contrib/cognito/src/Form/Email/AdminRegisterForm.php
modules/contrib/cognito/tests/src/Functional/EmailFlowAdminStatusTest.php
modules/contrib/cognito/src/Form/Email/NewPasswordForm.php
modules/contrib/cognito/tests/src/Functional/EmailFlowLoginTest.php
modules/contrib/cognito/src/Form/Email/PassResetForm.php
modules/contrib/cognito/tests/src/Functional/EmailFlowPasswordResetTest.php
modules/contrib/cognito/tests/src/Functional/EmailFlowRegistrationTest.php
modules/contrib/cognito/src/Form/Email/ProfileForm.php
modules/contrib/cognito/tests/src/Functional/EmailFlowUserEditTest.php
modules/contrib/cognito/src/Form/Email/RegisterForm.php
modules/contrib/cognito/tests/src/Kernel/CognitoTokenTest.php
modules/contrib/cognito/tests/src/Kernel/Email/LoginFormTest.php
modules/contrib/cognito/src/Form/Email/UserLoginForm.php
modules/contrib/cognito/src/Form/SettingsForm.php
modules/contrib/cognito/tests/src/Kernel/Email/NewPasswordFormTest.php
modules/contrib/cognito/src/Form/VerifyEmail.php
modules/contrib/cognito/tests/src/Kernel/Email/RegisterFormTest.php
modules/contrib/cognito/src/Plugin/cognito/CognitoFlow/CognitoFlowBase.php

20 files with changes
=====================

1) modules/contrib/cognito/tests/src/Unit/CognitoTokenTest.php:54

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->userData = $this->createMock(UserDataInterface::class);
     $this->cognito = $this->createMock(CognitoInterface::class);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/cognito/tests/src/Unit/CognitoTest.php:19

    ---------- begin diff ----------
@@ @@
    * Test the authorize method.
    */
   public function testAuthorize() {
-    $client = $this->getMockBuilder(CognitoIdentityProviderClient::class)
-      ->setMethods(['adminInitiateAuth'])
-      ->disableOriginalConstructor()
-      ->getMock();
+    $client = $this->createMock(CognitoIdentityProviderClient::class);
     $client
       ->method('adminInitiateAuth')
       ->willReturn(new Result([
@@ @@
    * Test authorize request that throws an error.
    */
   public function testAuthorizeWithError() {
-    $client = $this->getMockBuilder(CognitoIdentityProviderClient::class)
-      ->setMethods(['adminInitiateAuth'])
-      ->disableOriginalConstructor()
-      ->getMock();
+    $client = $this->createMock(CognitoIdentityProviderClient::class);

     $client
       ->method('adminInitiateAuth')
@@ @@
    * Test authorize with invalid token.
    */
   public function testAuthorizeWithInvalidToken() {
-    $client = $this->getMockBuilder(CognitoIdentityProviderClient::class)
-      ->setMethods(['adminInitiateAuth'])
-      ->disableOriginalConstructor()
-      ->getMock();
+    $client = $this->createMock(CognitoIdentityProviderClient::class);
     $client
       ->method('adminInitiateAuth')
       ->willReturn(new Result([
@@ @@
    * Test admin respond to challenge.
    */
   public function testAdminRespondToChallenge() {
-    $client = $this->getMockBuilder(CognitoIdentityProviderClient::class)
-      ->setMethods(['adminRespondToAuthChallenge'])
-      ->disableOriginalConstructor()
-      ->getMock();
+    $client = $this->createMock(CognitoIdentityProviderClient::class);
     $client
       ->method('adminRespondToAuthChallenge')
       ->willReturn([]);
@@ @@
    * Call any method but trigger an exception to ensure it's wrapped correctly.
    */
   public function testWrapPassesThroughException() {
-    $client = $this->getMockBuilder(CognitoIdentityProviderClient::class)
-      ->setMethods(['signUp'])
-      ->disableOriginalConstructor()
-      ->getMock();
+    $client = $this->createMock(CognitoIdentityProviderClient::class);
     $client
       ->method('signUp')
       ->willThrowException(new \Exception('Failed to sign up'));
@@ @@
    * Test admin initiate auth with a challenge.
    */
   public function testWrapHandlesChallenges() {
-    $client = $this->getMockBuilder(CognitoIdentityProviderClient::class)
-      ->setMethods(['adminInitiateAuth'])
-      ->disableOriginalConstructor()
-      ->getMock();
+    $client = $this->createMock(CognitoIdentityProviderClient::class);
     $client
       ->method('adminInitiateAuth')
       ->willReturn(new Result([
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/cognito/tests/src/Unit/CognitoFormEventTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->formState = $this->createMock(FormStateInterface::class);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/cognito/tests/src/Traits/RegisterFormHelper.php:93

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a stub translation manager that just returns the passed string.
    *
-   * @return \PHPUnit_Framework_MockObject_MockObject|\Drupal\Core\StringTranslation\TranslationInterface
+   * @return \PHPUnit\Framework\MockObject\MockObject|\Drupal\Core\StringTranslation\TranslationInterface
    *   A mock translation object.
    */
   public function getStringTranslation() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


5) modules/contrib/cognito/tests/src/Kernel/Email/LoginFormTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
     $this->installSchema('system', ['sequences']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/cognito/tests/src/Kernel/CognitoTokenTest.php:45

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('user', ['users_data']);
     $this->userData = $this->container->get('user.data');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/cognito/tests/src/Functional/EmailFlowUserEditTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->user = $this->createExternalUser([
@@ @@
       'administer permissions',
       'administer users',
     ], ['name' => 'Ben']);
+    $this->drupalGet('/user/login');

-    $this->drupalPostForm('/user/login', [
+    $this->submitForm([
       'mail' => $this->user->getEmail(),
       'pass' => 'letmein',
     ], 'Log in');
@@ @@
     $this->drupalGet($this->user->toUrl('edit-form'));
     $this->assertSession()->fieldValueEquals('mail', $this->user->getEmail());
     $this->assertSession()->fieldNotExists('name');
+    $this->drupalGet($this->user->toUrl('edit-form'));

     // Change the users password.
-    $this->drupalPostForm($this->user->toUrl('edit-form'), [
+    $this->submitForm([
       'current_pass' => 'letmein',
       'pass[pass1]' => 'letmein-new',
       'pass[pass2]' => 'letmein-new',
@@ @@
     ], 'Save');

     $this->assertSession()->pageTextContains('Your account has been updated');
+    $this->drupalGet($this->user->toUrl('edit-form'));

     // If they save the form without providing a new password then nothing
     // changes.
-    $this->drupalPostForm($this->user->toUrl('edit-form'), [
+    $this->submitForm([
       'pass[pass1]' => 'letmein-new',
       'pass[pass2]' => 'letmein-new',
     ], 'Save');
@@ @@
    * Test updating the users email from the UI.
    */
   public function testUpdateUserEmail() {
+    $this->drupalGet($this->user->toUrl('edit-form'));
     // Update the users email address.
-    $this->drupalPostForm($this->user->toUrl('edit-form'), [
+    $this->submitForm([
       'current_pass' => 'letmein',
       'mail' => $new_email = 'new-email@example.com',
     ], 'Save');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/cognito/tests/src/Functional/EmailFlowRegistrationTest.php:27

    ---------- begin diff ----------
@@ @@
   public function testCanRegister() {
     // Register a new user.
     $mail = strtolower($this->randomMachineName() . '@example.com');
-    $this->drupalPostForm('/user/register', [
+    $this->drupalGet('/user/register');
+    $this->submitForm([
       'mail' => $mail,
       'pass[pass1]' => 'letmein',
       'pass[pass2]' => 'letmein',
@@ @@
     ], 'Register');

     // Confirm your account.
-    $this->drupalPostForm(NULL, ['confirmation_code' => '12345'], 'Confirm');
+    $this->submitForm(['confirmation_code' => '12345'], 'Confirm');
     $this->assertSession()->pageTextContains('Your account is now confirmed.');
     $this->assertSession()->addressEquals('/user/2');

@@ @@

     // Register a new user.
     $mail = strtolower($this->randomMachineName() . '@example.com');
-    $this->drupalPostForm('/user/register', [
+    $this->drupalGet('/user/register');
+    $this->submitForm([
       'mail' => $mail,
       'pass[pass1]' => 'letmein',
       'pass[pass2]' => 'letmein',
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/cognito/tests/src/Functional/EmailFlowPasswordResetTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->mail = strtolower($this->randomMachineName() . '@example.com');

@@ @@
   public function testCanResetPassword() {
     // Reset the users password.
     $mail = strtolower($this->randomMachineName() . '@example.com');
-    $this->drupalPostForm('/user/password', [
+    $this->drupalGet('/user/password');
+    $this->submitForm([
       'mail' => $mail,
     ], 'Reset Password');

     // Confirm your account.
-    $this->drupalPostForm(NULL, ['confirmation_code' => '12345'], 'Confirm');
+    $this->submitForm(['confirmation_code' => '12345'], 'Confirm');
     $this->assertSession()->pageTextContains('Your password has now been reset.');
     $this->assertSession()->addressEquals('/user/login');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/cognito/tests/src/Functional/EmailFlowLoginTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->mail = strtolower($this->randomMachineName() . '@example.com');

@@ @@
    * Test the successful login flow.
    */
   public function testCanLoginWithCognitoAccount() {
-    $this->drupalPostForm('/user/login', [
+    $this->drupalGet('/user/login');
+    $this->submitForm([
       'mail' => $this->mail,
       'pass' => 'letmein',
     ], 'Log in');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/cognito/tests/src/Functional/EmailFlowAdminStatusTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->userAccount = $this->createExternalUser();
   }
@@ @@
       'administer users',
       'access user profiles',
     ]);
-    $this->drupalPostForm('/user/login', [
+    $this->drupalGet('/user/login');
+    $this->submitForm([
       'mail' => $adminUser->getEmail(),
       'pass' => 'letmein',
     ], 'Log in');
@@ @@

     $this->drupalGet('<front>');
     $this->drupalGet($this->userAccount->toUrl());
+    $this->drupalGet($user_edit_url);

     // Block an active user.
-    $this->drupalPostForm($user_edit_url, ['status' => 0], 'Save');
+    $this->submitForm(['status' => 0], 'Save');
     $this->assertSession()->pageTextContains('Account disabled in Cognito');
+    $this->drupalGet($user_edit_url);

     // Save an already blocked user and ensure no API calls.
-    $this->drupalPostForm($user_edit_url, ['status' => 0], 'Save');
+    $this->submitForm(['status' => 0], 'Save');
     $this->assertSession()->pageTextNotContains('Account disabled in Cognito');
+    $this->drupalGet($user_edit_url);

     // Activate the user.
-    $this->drupalPostForm($user_edit_url, ['status' => 1], 'Save');
+    $this->submitForm(['status' => 1], 'Save');
     $this->assertSession()->pageTextContains('Account enabled in Cognito');
+    $this->drupalGet($user_edit_url);

     // Saving an already active user does not make API calls.
-    $this->drupalPostForm($user_edit_url, ['status' => 1], 'Save');
+    $this->submitForm(['status' => 1], 'Save');
     $this->assertSession()->pageTextNotContains('Account enabled in Cognito');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/cognito/tests/src/Functional/EmailFlowAdminCreateAccountTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->admin = $this->createExternalUser([
       'administer permissions',
       'administer users',
     ]);
+    $this->drupalGet('/user/login');

-    $this->drupalPostForm('/user/login', [
+    $this->submitForm([
       'mail' => $this->admin->getEmail(),
       'pass' => 'letmein',
     ], 'Log in');
@@ @@
     $this->assertSession()->fieldNotExists('pass[pass1]');

     $mail = strtolower($this->randomMachineName() . '@example.com');
-    $this->drupalPostForm('/admin/people/create', [
+    $this->drupalGet('/admin/people/create');
+    $this->submitForm([
       'mail' => $mail,
       'status' => 1,
     ], 'Register');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/cognito/tests/src/Functional/CognitoRegistrationResourceTest.php:61

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     user_role_grant_permissions(AccountInterface::ANONYMOUS_ROLE, ['restful post cognito_user_registration']);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/cognito/src/Plugin/rest/resource/CognitoUserRegistrationResource.php:224

    ---------- begin diff ----------
@@ @@
       if ($result instanceof CognitoResult && isset($result->getResult()['AuthenticationResult'])) {
         $this->cognitoToken->setAuthTokens($result->getResult()['AuthenticationResult']);
       }
-      $this->eventDispatcher->dispatch('cognito.registered_logged_in', $event);
+      $this->eventDispatcher->dispatch($event, 'cognito.registered_logged_in');
     }
     else {
-      $this->eventDispatcher->dispatch('cognito.registered_click_to_confirm', $event);
+      $this->eventDispatcher->dispatch($event, 'cognito.registered_click_to_confirm');
     }

     return new ModifiedResourceResponse([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/cognito/src/Form/VerifyEmail.php:171

    ---------- begin diff ----------
@@ @@
     }
     else {
       $this->getLogger('cognito')->notice('Your email has now been verified');
-      $this->eventDispatcher->dispatch('cognito.email_verified', new GenericEvent());
+      $this->eventDispatcher->dispatch(new GenericEvent(), 'cognito.email_verified');
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


16) modules/contrib/cognito/src/Form/Email/UserLoginForm.php:193

    ---------- begin diff ----------
@@ @@
     $event = new GenericEvent(NULL, [
       'login-context' => \Drupal::request()->get('cognito-login-context') ?: [],
     ]);
-    $this->eventDispatcher->dispatch('cognito.logged_in', $event);
+    $this->eventDispatcher->dispatch($event, 'cognito.logged_in');

     // Store authentication tokens.
     if ($form_state->get('authentication_result')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/cognito/src/Form/Email/RegisterForm.php:140

    ---------- begin diff ----------
@@ @@
     }

     $event = new CognitoFormEvent($form_state);
-    $this->eventDispatcher->dispatch(CognitoEvents::REGISTER, $event);
+    $this->eventDispatcher->dispatch($event, CognitoEvents::REGISTER);
     $userAttributes = $event->getUserAttributes();

     $result = $this->cognito->signUp($email, $password, $email, $userAttributes);
@@ @@
       }

       $event = new GenericEvent(NULL, ['url' => Url::fromRoute('<front>')]);
-      $this->eventDispatcher->dispatch('cognito.registered_click_to_confirm', $event);
+      $this->eventDispatcher->dispatch($event, 'cognito.registered_click_to_confirm');
       $form_state->setRedirectUrl($event->getArgument('url'));
     }
     elseif ($this->usesAutoConfirm() || $this->showConfirmation) {
@@ @@
         $this->cognitoToken->setAuthTokens($result->getResult()['AuthenticationResult']);
       }
       $event = new GenericEvent(NULL, ['url' => Url::fromRoute('<front>')]);
-      $this->eventDispatcher->dispatch('cognito.registered_logged_in', $event);
+      $this->eventDispatcher->dispatch($event, 'cognito.registered_logged_in');
       $form_state->setRedirectUrl($event->getArgument('url'));
     }
     else {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


18) modules/contrib/cognito/src/Event/CognitoFormEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cognito\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Form\FormStateInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines an event for when Cognito forms are submitted.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


19) modules/contrib/cognito/src/Controller/EmailVerificationController.php:106

    ---------- begin diff ----------
@@ @@

     $url = Url::fromRoute('<front>');
     $event = new GenericEvent(NULL, ['url' => $url]);
-    $this->eventDispatcher->dispatch('cognito.account_verified_redirect', $event);
+    $this->eventDispatcher->dispatch($event, 'cognito.account_verified_redirect');

-    $this->eventDispatcher->dispatch('cognito.email_verified', new GenericEvent(NULL, ['email' => $email]));
+    $this->eventDispatcher->dispatch(new GenericEvent(NULL, ['email' => $email]), 'cognito.email_verified');

     return new RedirectResponse($event->getArgument('url')->toString(), 302);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


20) modules/contrib/cognito/src/Controller/ConfirmationController.php:109

    ---------- begin diff ----------
@@ @@

     $url = Url::fromRoute('<front>');
     $event = new GenericEvent(NULL, ['url' => $url]);
-    $this->eventDispatcher->dispatch('cognito.account_confirmed_redirect', $event);
+    $this->eventDispatcher->dispatch($event, 'cognito.account_confirmed_redirect');

     return new RedirectResponse($event->getArgument('url')->toString(), 302);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 20 files have been changed by Rector                                      

