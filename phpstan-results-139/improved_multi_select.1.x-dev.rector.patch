diff --git a/modules/ims_options_widget/src/Tests/Functional/ImsOptionsWidgetsTest.php b/modules/ims_options_widget/src/Tests/Functional/ImsOptionsWidgetsTest.php
index 74b9bd6..45cdf0d 100644
--- a/modules/ims_options_widget/src/Tests/Functional/ImsOptionsWidgetsTest.php
+++ b/modules/ims_options_widget/src/Tests/Functional/ImsOptionsWidgetsTest.php
@@ -49,7 +49,7 @@ class ImsOptionsWidgetsTest extends FieldTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Field storage with cardinality 2.
@@ -104,11 +104,11 @@ class ImsOptionsWidgetsTest extends FieldTestBase {
     $this->assertEmpty($this->assertSession()->optionExists('card_2', 0)->isSelected());
     $this->assertEmpty($this->assertSession()->optionExists('card_2', 1)->isSelected());
     $this->assertEmpty($this->assertSession()->optionExists('card_2', 2)->isSelected());
-    $this->assertRaw('Some dangerous &amp; unescaped markup', 'Option text was properly filtered.');
+    $this->assertSession()->responseContains('Some dangerous &amp; unescaped markup');
 
     // Submit form: select first and third options.
     $edit = ['card_2[]' => [0 => 0, 2 => 2]];
-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
+    $this->submitForm($edit, $this->t('Save'));
     $this->assertFieldValues($entity_init, 'card_2', [0, 2]);
 
     // Display form: check that the right options are selected.
@@ -123,11 +123,11 @@ class ImsOptionsWidgetsTest extends FieldTestBase {
     foreach ($option_elements as $option_element) {
       $options[] = $option_element->getValue();
     }
-    $this->assertEqual($expected, $options);
+    $this->assertEquals($expected, $options);
 
     // Submit form: select only first option.
     $edit = ['card_2[]' => [0 => 0]];
-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
+    $this->submitForm($edit, $this->t('Save'));
     $this->assertFieldValues($entity_init, 'card_2', [0]);
 
     // Display form: check that the right options are selected.
@@ -143,16 +143,16 @@ class ImsOptionsWidgetsTest extends FieldTestBase {
     foreach ($option_elements as $option_element) {
       $options[] = $option_element->getValue();
     }
-    $this->assertEqual($expected, $options);
+    $this->assertEquals($expected, $options);
 
     // Submit form: select the three options while the field accepts only 2.
     $edit = ['card_2[]' => [0 => 0, 1 => 1, 2 => 2]];
-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
-    $this->assertText('this field cannot hold more than 2 values', 'Validation error was displayed.');
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->pageTextContains('this field cannot hold more than 2 values');
 
     // Submit form: uncheck all options.
     $edit = ['card_2[]' => []];
-    $this->drupalPostForm(NULL, $edit, $this->t('Save'));
+    $this->submitForm($edit, $this->t('Save'));
     $this->assertFieldValues($entity_init, 'card_2', []);
 
     // Display form: check that the selected options from previous submission
@@ -163,13 +163,14 @@ class ImsOptionsWidgetsTest extends FieldTestBase {
     foreach ($option_elements as $option_element) {
       $options[] = $option_element->getValue();
     }
-    $this->assertEqual($expected, $options);
+    $this->assertEquals($expected, $options);
 
     // Test the 'None' option.
     // Check that the 'none' option has no effect if actual options are selected
     // as well.
     $edit = ['card_2[]' => ['_none' => '_none', 0 => 0]];
-    $this->drupalPostForm('entity_test/manage/' . $entity->id() . '/edit', $edit, $this->t('Save'));
+    $this->drupalGet('entity_test/manage/' . $entity->id() . '/edit');
+    $this->submitForm($edit, $this->t('Save'));
     $this->assertFieldValues($entity_init, 'card_2', [0]);
 
     // Display form: check that the selected options are on the top.
@@ -179,11 +180,12 @@ class ImsOptionsWidgetsTest extends FieldTestBase {
     foreach ($option_elements as $option_element) {
       $options[] = $option_element->getValue();
     }
-    $this->assertEqual($expected, $options);
+    $this->assertEquals($expected, $options);
 
     // Check that selecting the 'none' option empties the field.
     $edit = ['card_2[]' => ['_none' => '_none']];
-    $this->drupalPostForm('entity_test/manage/' . $entity->id() . '/edit', $edit, $this->t('Save'));
+    $this->drupalGet('entity_test/manage/' . $entity->id() . '/edit');
+    $this->submitForm($edit, $this->t('Save'));
     $this->assertFieldValues($entity_init, 'card_2', []);
 
     // Display form: check that the selected options are on the top.
@@ -193,7 +195,7 @@ class ImsOptionsWidgetsTest extends FieldTestBase {
     foreach ($option_elements as $option_element) {
       $options[] = $option_element->getValue();
     }
-    $this->assertEqual($expected, $options);
+    $this->assertEquals($expected, $options);
 
     // A required select list does not have an empty key.
     $field->setRequired(TRUE);
diff --git a/src/Tests/Functional/ImprovedMultiSelectTests.php b/src/Tests/Functional/ImprovedMultiSelectTests.php
index 157d822..0be8fd2 100644
--- a/src/Tests/Functional/ImprovedMultiSelectTests.php
+++ b/src/Tests/Functional/ImprovedMultiSelectTests.php
@@ -32,16 +32,16 @@ class ImprovedMultiSelectTests extends BrowserTestBase {
     $replace_all = FALSE;
     $selectors = [];
     $jquery_selectors = improved_multi_select_load_selectors($replace_all, $selectors);
-    $this->assertIdentical($jquery_selectors, ['select[multiple]']);
+    $this->assertSame($jquery_selectors, ['select[multiple]']);
     $replace_all = TRUE;
     $jquery_selectors = improved_multi_select_load_selectors($replace_all, $selectors);
-    $this->assertIdentical($jquery_selectors, ['select[multiple]']);
+    $this->assertSame($jquery_selectors, ['select[multiple]']);
     $selectors = ['test_selector'];
     $jquery_selectors = improved_multi_select_load_selectors($replace_all, $selectors);
-    $this->assertIdentical($jquery_selectors, ['select[multiple]']);
+    $this->assertSame($jquery_selectors, ['select[multiple]']);
     $replace_all = FALSE;
     $jquery_selectors = improved_multi_select_load_selectors($replace_all, $selectors);
-    $this->assertIdentical($jquery_selectors, ['test_selector']);
+    $this->assertSame($jquery_selectors, ['test_selector']);
   }
 
   /**
@@ -49,11 +49,11 @@ class ImprovedMultiSelectTests extends BrowserTestBase {
    */
   public function testIfDrupalLoads() {
     $this->drupalGet('<front>');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($user);
     $this->drupalGet('/admin/config/user-interface/ims');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalLogout();
   }
 
