modules/contrib/course/course.api.php
modules/contrib/course/course.post_update.php
modules/contrib/course/modules/course_certificate/course_certificate.module
modules/contrib/course/modules/course_content/src/EventSubscriber/CourseContentEventSubscriber.php
modules/contrib/course/modules/course_node/course_node.module
modules/contrib/course/course.devel.inc
modules/contrib/course/modules/course_quiz/course_quiz.module
modules/contrib/course/modules/course_webform/src/Plugin/course/CourseObject/CourseObjectWebform.php
modules/contrib/course/src/Entity/CourseObjectFulfillment.php
modules/contrib/course/src/Plugin/Action/CourseEnrollmentCreateAction.php
modules/contrib/course/src/Schema/CourseObjectFulfillmentStorageSchema.php
modules/contrib/course/modules/course_certificate/src/Plugin/course/CourseObject/CourseObjectCertificate.php
modules/contrib/course/modules/course_quiz/src/Plugin/course/CourseObject/CourseObjectQuiz.php
modules/contrib/course/course.install
modules/contrib/course/modules/course_node/src/Controller/CourseNodeController.php
modules/contrib/course/course.module
modules/contrib/course/src/Storage/CourseObjectFulfillmentStorage.php
modules/contrib/course/modules/course_content/src/Plugin/course/CourseObject/CourseObjectContent.php
modules/contrib/course/modules/course_content/tests/src/Functional/CourseObjectContentTest.php
modules/contrib/course/modules/course_certificate/tests/src/Functional/CourseObjectCertificateTest.php
modules/contrib/course/modules/course_node/src/Controller/CourseNodeOutlineController.php
modules/contrib/course/modules/course_node/tests/src/Functional/CourseNodeTest.php
modules/contrib/course/src/View/CourseObjectViewBuilder.php
modules/contrib/course/src/Plugin/Action/CourseEnrollmentEditAction.php
modules/contrib/course/modules/course_content/tests/src/Functional/CourseObjectNodeTest.php
modules/contrib/course/modules/course_object_manual/course_object_manual.module
modules/contrib/course/modules/course_object_manual/src/Plugin/course/CourseObject/CourseObjectManual.php
modules/contrib/course/modules/course_webform/src/Plugin/course/CourseObject/CourseObjectWebformFulfillment.php
modules/contrib/course/includes/course.exporting.inc
modules/contrib/course/modules/course_webform/tests/src/Functional/CourseObjectWebformTest.php
modules/contrib/course/src/Entity/CourseObjectInterface.php
modules/contrib/course/modules/course_commerce/course_commerce.module
modules/contrib/course/modules/course_migrate/src/Plugin/migrate/D7CourseDeriver.php
modules/contrib/course/src/View/CourseViewBuilder.php
modules/contrib/course/src/Entity/CourseObjectType.php
modules/contrib/course/src/Entity/CourseType.php
modules/contrib/course/tests/src/Functional/CourseAccessTest.php
modules/contrib/course/modules/course_object_manual/tests/src/Functional/CourseObjectManualTest.php
modules/contrib/course/src/EventSubscriber/CourseEventSubscriber.php
modules/contrib/course/modules/course_migrate/src/Plugin/migrate/source/Course.php
modules/contrib/course/src/EventSubscriber/CourseRouteSubscriber.php
modules/contrib/course/modules/course_quiz/src/Plugin/course/CourseObject/CourseObjectQuizFulfillment.php
modules/contrib/course/src/Form/CourseAppearanceSettingsForm.php
modules/contrib/course/src/Plugin/Block/CourseNavigationBlock.php
modules/contrib/course/modules/course_attendance/src/Plugin/course/CourseObject/CourseObjectAttendance.php
modules/contrib/course/modules/course_poll/course_poll.module
modules/contrib/course/src/Form/CourseDeleteForm.php
modules/contrib/course/src/Plugin/Block/CourseOutlineBlock.php
modules/contrib/course/modules/course_poll/src/Plugin/course/CourseObject/CourseObjectPoll.php
modules/contrib/course/src/Form/CourseEnrollmentEntityForm.php
modules/contrib/course/tests/src/Functional/CourseContextTest.php
modules/contrib/course/modules/course_migrate/src/Plugin/migrate/source/CourseEnrollment.php
modules/contrib/course/src/Plugin/CourseObjectAccessInterface.php
modules/contrib/course/src/Plugin/CourseObjectAccessPluginBase.php
modules/contrib/course/modules/course_quiz/tests/src/Functional/CourseObjectQuizTest.php
modules/contrib/course/modules/course_migrate/src/Plugin/migrate/source/CourseObject.php
modules/contrib/course/src/Access/CourseAccessControlHandler.php
modules/contrib/course/src/Form/CourseEnrollmentSettingsForm.php
modules/contrib/course/modules/course_migrate/src/Plugin/migrate/source/CourseObjectFulfillment.php
modules/contrib/course/modules/course_migrate/src/Plugin/migrate/source/CourseType.php
modules/contrib/course/src/Form/CourseEnrollmentTypeForm.php
modules/contrib/course/src/Access/CourseObjectAccessControlHandler.php
modules/contrib/course/src/Form/CourseEntityForm.php
modules/contrib/course/modules/course_poll/src/Plugin/course/CourseObject/CourseObjectPollFulfillment.php
modules/contrib/course/src/Plugin/CourseObjectAccessPluginManager.php
modules/contrib/course/src/Form/CourseManageForm.php
modules/contrib/course/src/Plugin/CourseObjectInterface.php
modules/contrib/course/src/Plugin/CourseObjectPluginBase.php
modules/contrib/course/src/Plugin/CourseObjectPluginManager.php
modules/contrib/course/src/Plugin/CourseOutlineInterface.php
modules/contrib/course/src/Plugin/CourseOutlinePluginBase.php
modules/contrib/course/src/Plugin/CourseOutlinePluginManager.php
modules/contrib/course/src/Form/CourseObjectForm.php
modules/contrib/course/src/Plugin/Field/FieldWidget/NullableTimestampDatetimeWidget.php
modules/contrib/course/modules/course_test/src/Plugin/course/CourseObject/CourseObjectGradedTest.php
modules/contrib/course/modules/course_test/src/Plugin/course/CourseObject/CourseObjectTest.php
modules/contrib/course/modules/course_test/src/Plugin/course/CourseObject/CourseObjectTestFulfillment.php
modules/contrib/course/modules/course_webform/course_webform.module
modules/contrib/course/modules/course_commerce/src/Form/CourseCommerceSettingsForm.php
modules/contrib/course/src/Annotation/CourseObject.php
modules/contrib/course/src/Annotation/CourseObjectAccess.php
modules/contrib/course/src/Annotation/CourseOutline.php
modules/contrib/course/src/Config/Entity/CourseEnrollmentTypeListBuilder.php
modules/contrib/course/src/Config/Entity/CourseListBuilder.php
modules/contrib/course/modules/course_commerce/src/Plugin/RulesAction/EnrollUserInOrderedCourses.php
modules/contrib/course/src/Form/CourseObjectSettingsForm.php
modules/contrib/course/modules/course_commerce/src/Plugin/course/CourseObject/CourseObjectCommerce.php
modules/contrib/course/src/Config/Entity/CourseObjectTypeListBuilder.php
modules/contrib/course/modules/course_webform/src/EventSubscriber/CourseWebformEventSubscriber.php
modules/contrib/course/src/Config/Entity/CourseTypeListBuilder.php
modules/contrib/course/src/Plugin/course/CourseObjectAccess/CourseObjectAccessConditional.php
modules/contrib/course/tests/src/Functional/CourseDeleteTest.php
modules/contrib/course/src/Form/CourseOutlineForm.php
modules/contrib/course/src/Controller/CourseAdminController.php
modules/contrib/course/src/Controller/CourseController.php
modules/contrib/course/modules/course_commerce/tests/src/Functional/CourseCommerceTest.php
modules/contrib/course/tests/src/Functional/CourseEnrollmentTest.php
modules/contrib/course/modules/course_book/course_book.module
modules/contrib/course/src/Plugin/course/CourseObjectAccess/CourseObjectAccessGrade.php
modules/contrib/course/modules/course_book/src/EventSubscriber/CourseBookEventSubscriber.php
modules/contrib/course/modules/course_book/src/Plugin/course/CourseObject/CourseObjectBook.php
modules/contrib/course/src/Plugin/course/CourseObjectAccess/CourseObjectAccessTiming.php
modules/contrib/course/src/Form/CourseReportSettingsForm.php
modules/contrib/course/src/Form/CourseSettingsForm.php
modules/contrib/course/src/Form/CourseTypeForm.php
modules/contrib/course/modules/course_content/course_content.module
modules/contrib/course/src/Controller/CourseObjectController.php
modules/contrib/course/src/Plugin/course/CourseOutline/CourseOutlineList.php
modules/contrib/course/modules/course_content/src/Course/Object/CourseObjectNode.php
modules/contrib/course/src/Helper/CourseHandler.php
modules/contrib/course/tests/src/Functional/CourseGradeTest.php
modules/contrib/course/modules/course_book/src/Plugin/course/CourseObject/CourseObjectBookFulfillment.php
modules/contrib/course/src/Controller/CourseReportController.php
modules/contrib/course/modules/course_book/tests/src/Functional/CourseObjectBookTest.php
modules/contrib/course/src/Plugin/course/CourseOutline/CourseOutlineNone.php
modules/contrib/course/src/Schema/CourseEnrollmentStorageSchema.php
modules/contrib/course/src/Entity/Course.php
modules/contrib/course/modules/course_content/src/Course/Object/CourseObjectNodeFulfillment.php
modules/contrib/course/src/Entity/CourseEnrollment.php
modules/contrib/course/tests/src/Functional/CourseObjectAccessConditionalTest.php
modules/contrib/course/tests/src/Functional/CourseObjectAccessTest.php
modules/contrib/course/src/Entity/CourseEnrollmentType.php
modules/contrib/course/src/Entity/CourseObject.php
modules/contrib/course/tests/src/Functional/CourseObjectAccessTimeTest.php
modules/contrib/course/tests/src/Functional/CourseObjectFulfillmentTest.php
modules/contrib/course/tests/src/Functional/CourseObjectTest.php
modules/contrib/course/tests/src/Functional/CourseOutlineUiTest.php
modules/contrib/course/tests/src/Functional/CourseTestBase.php
modules/contrib/course/tests/src/Functional/CourseWorkflowTest.php

18 files with changes
=====================

1) modules/contrib/course/modules/course_content/tests/src/Functional/CourseObjectNodeTest.php:33

    ---------- begin diff ----------
@@ @@
     $course->enroll($this->student_user);

     $this->drupalGet("node/" . $co1->getInstanceId());
-    $this->assertResponse(403, 'Check that node is protected outside the course.');
+    $this->assertSession()->statusCodeEquals(403, 'Check that node is protected outside the course.');

     // Save new fulfillment so they can access the linked content.
     $cof = $co1->getFulfillment($this->student_user);
     $cof->save();
     $this->drupalGet("node/" . $co1->getInstanceId());
-    $this->assertResponse(200, 'Check that node is accessible when user enters course object.');
+    $this->assertSession()->statusCodeEquals(200, 'Check that node is accessible when user enters course object.');

     // Delete fulfillment so they can no longer access the linked content.
     //$cof->delete();
@@ @@
     $fulfillments = CourseObjectFulfillment::loadMultiple();
     \Drupal::entityTypeManager()->getStorage('course_object_fulfillment')->delete($fulfillments);
     $this->drupalGet("node/" . $co1->getInstanceId());
-    $this->assertResponse(403, 'Check that node is protected outside the course, after revoke.');
+    $this->assertSession()->statusCodeEquals(403, 'Check that node is protected outside the course, after revoke.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/course/modules/course_content/src/EventSubscriber/CourseContentEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\course_content\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal;
 use Drupal\node\Entity\NodeType;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use function course_get_course_object;

@@ @@
   /**
    * If the current node is a course object, fulfill it for the current user.
    *
-   * @param GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     $route_match = Drupal::routeMatch();
     if ($route_match->getRouteName() == 'entity.node.canonical') {
       $node = $route_match->getParameter('node');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


3) modules/contrib/course/modules/course_webform/src/EventSubscriber/CourseWebformEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\course_webform\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 class CourseWebformEventSubscriber implements EventSubscriberInterface {
@@ @@
   /**
    * If the current node is a course object, fulfill it for the current user.
    *
-   * @param GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     $route_match = Drupal::routeMatch();
     if ($route_match->getRouteName() == 'entity.webform.canonical') {
       $webform = $route_match->getParameter('webform');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


4) modules/contrib/course/modules/course_quiz/tests/src/Functional/CourseObjectQuizTest.php:23

    ---------- begin diff ----------
@@ @@
   protected $strictConfigSchema = FALSE;
   protected static $modules = ['course_quiz', 'quiz_truefalse'];

-  function setUp() {
+  function setUp(): void {
     parent::setUp();

     $this->quiz_admin = $this->drupalCreateUser(array('access quiz', 'create truefalse quiz_question', 'update truefalse quiz_question', 'create quiz quiz', 'update any quiz quiz'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/course/course.module:474

    ---------- begin diff ----------
@@ @@
       'course' => array(
         'title' => t('Course'),
         'handler' => 'views_plugin_argument_validate_course',
-        'path' => drupal_get_path('module', 'course') . '/views/plugins',
+        'path' => \Drupal::service('extension.list.module')->getPath('course') . '/views/plugins',
       ),
     ),
   );
@@ @@
 function course_views_api() {
   return array(
     'api' => 3,
-    'path' => drupal_get_path('module', 'course') . '/views',
+    'path' => \Drupal::service('extension.list.module')->getPath('course') . '/views',
   );
 }

@@ @@
 /**
  * Implements hook_tokens().
  */
-function course_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
+function course_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
   if ($type == 'course_enrollment' && !isset($data['course_enrollment']) && isset($data['course'], $data['user']) && $course_enrollment = $data['course']->getEnrollment($data['user'])) {
     $data['course_enrollment'] = $course_enrollment;
     return token_tokens('course_enrollment', $tokens, $data, $options, $bubbleable_metadata);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


6) modules/contrib/course/src/Plugin/course/CourseOutline/CourseOutlineList.php:68

    ---------- begin diff ----------
@@ @@
         '#theme' => 'image',
       ];
       $workflow[] = array(
-        '#markup' => render($image) . Link::fromTextAndUrl(t('Complete'), Url::fromRoute('course.complete', ['course' => $course->id()]))->toString(),
+        '#markup' => \Drupal::service('renderer')->render($image) . Link::fromTextAndUrl(t('Complete'), Url::fromRoute('course.complete', ['course' => $course->id()]))->toString(),
         '#id' => 'complete',
       );
     }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/course/src/Plugin/course/CourseObjectAccess/CourseObjectAccessGrade.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\course\Plugin\course\CourseObjectAccess;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\course\Entity\CourseObject;
 use Drupal\course\Plugin\CourseObjectAccessPluginBase;
@@ @@
   /**
    * {@inheritdoc}
    */
-  function evaluate(\Drupal\Core\Session\AccountInterface $account) {
+  function evaluate(AccountInterface $account) {
     $config = $this->getOptions();

     if (!empty($config['course_grade_range']) && is_numeric($config['course_grade_range']['low']) && is_numeric($config['course_grade_range']['high'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/course/src/EventSubscriber/CourseEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\course\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal;
 use Drupal\node\Entity\NodeType;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use function course_get_course_object;

@@ @@
   /**
    * Check if the current node will fulfill an object.
    *
-   * @param GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     course_context();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


9) modules/contrib/course/modules/course_book/tests/src/Functional/CourseObjectBookTest.php:81

    ---------- begin diff ----------
@@ @@
    * within simpletest.
    */
   function testBookCourseObjectContentAccess() {
-    $this->pass('Please fix me.');
     return;

     $this->drupalLogin($this->admin_user);
@@ @@
     // Try to visit the protected pages.
     $this->drupalLogin($this->student_user);
     $this->drupalGet("node/" . $co1->getInstanceId());
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/$bp1->nid");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet("node/$bp2->nid");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Add a new page to the book, after it is already saved.
     $this->drupalLogin($this->admin_user);
@@ @@
     // Check that the new book page also had it's ACL set up.
     $this->drupalLogin($this->student_user);
     $this->drupalGet("node/$bp3->nid");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Enroll the user in the course and go to the first object.
     course_enroll($courseNode, $this->student_user);
@@ @@

     // Make sure user can access all the sub-pages now.
     $this->drupalGet("node/$bp1->nid");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/$bp2->nid");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet("node/$bp3->nid");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * PassRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/course/modules/course_commerce/tests/src/Functional/CourseCommerceTest.php:86

    ---------- begin diff ----------
@@ @@

     // Try to re-enroll in a course.
     $this->drupalGet("node/$courseNode->nid");
-    $this->assertNoRaw(t('Add to cart'), 'Did not see add to cart button.');
+    $this->assertSession()->responseNotContains(t('Add to cart'));
   }

   public function testBypassFreeCourses() {
@@ @@

     // Default behavior is that add to cart does not show up on a $0 course.
     $this->drupalGet("node/$courseNode->nid");
-    $this->assertNoRaw(t('Add to cart'));
+    $this->assertSession()->responseNotContains(t('Add to cart'));

     // Turn bypass off and check that the add to cart button shows.
     variable_set('course_access_bypass_checkout', 0);
     $this->drupalGet("node/$courseNode->nid");
-    $this->assertRaw(t('Add to cart'));
+    $this->assertSession()->responseContains(t('Add to cart'));
   }

   public function testDelayedPayment() {
@@ @@

     // Access first object.
     $this->drupalGet("node/{$courseNode->nid}/object/{$co1->id()}");
-    $this->assertResponse(200, 'Test that 1st object is accessible.');
+    $this->assertSession()->statusCodeEquals(200, 'Test that 1st object is accessible.');
     $co1 = course_get_course_object_by_id($co1->id());
     $co1->getFulfillment($this->student_user)->setComplete(1)->save();

@@ @@
     // Access payment object.
     $this->drupalGet("node/{$courseNode->nid}/object/{$co2->id()}");
     $this->assertSession()->responseContains(t('You must purchase this course before proceeding.'));
-    $this->assertRaw(t('Add to cart'));
+    $this->assertSession()->responseContains(t('Add to cart'));

     // Access third object.
     $this->drupalGet("node/{$courseNode->nid}/object/{$co3->id()}");
-    $this->assertResponse(403, 'Test that 3rd object is blocked.');
+    $this->assertSession()->statusCodeEquals(403, 'Test that 3rd object is blocked.');

     // Flush cache.
     course_get_course($courseNode);
@@ @@

     // Access third object.
     $this->drupalGet("node/{$courseNode->nid}/object/{$co3->id()}");
-    $this->assertResponse(200, 'Test that 3rd object is accessible.');
+    $this->assertSession()->statusCodeEquals(200, 'Test that 3rd object is accessible.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoRawRector
 * AssertRawRector
 * AssertResponseRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/course/modules/course_certificate/tests/src/Functional/CourseObjectCertificateTest.php:49

    ---------- begin diff ----------
@@ @@
     $this->clickLink('Complete');

     // Check the course landing page link.
-    $this->assertLink('Download certificate');
+    $this->assertSession()->linkExists('Download certificate');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertLinkRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/course/tests/src/Functional/CourseWorkflowTest.php:32

    ---------- begin diff ----------
@@ @@
     $co2->save();

     $this->drupalGet("course/{$course->id()}/complete");
-    $this->assertResponse(403, 'Cannot see completion page');
+    $this->assertSession()->statusCodeEquals(403, 'Cannot see completion page');

     // Login, enroll, and try to access the objects via links.
     $this->drupalLogin($this->student_user);
@@ @@
     $course->enroll($this->student_user);

     $this->drupalGet("course/{$course->id()}/complete");
-    $this->assertResponse(200, 'Can see completion page');
+    $this->assertSession()->statusCodeEquals(200, 'Can see completion page');
     $this->assertSession()->responseContains('This course is not complete.');

     $this->drupalGet("course/{$course->id()}");
     $this->assertSession()->linkExistsExact(t('Take course'));
     $this->drupalGet("course/{$course->id()}/take");
-    $this->assertLink('Course object 1');
-    $this->assertNoLink('Course object 2');
-    $this->assertNoLink('Next');
+    $this->assertSession()->linkExists('Course object 1');
+    $this->assertSession()->linkNotExists('Course object 2');
+    $this->assertSession()->linkNotExists('Next');
     $this->clickLink('Course object 1');
     $this->assertSession()->responseContains(t('I am a test course object with the title @title', array('@title' => $co1->getOption('title'))));

@@ @@
     // Set the first object complete.
     $co1->getFulfillment($this->student_user)->setComplete(1)->save();
     $this->drupalGet("course/{$course->id()}/take");
-    $this->assertLink('Course object 2');
-    $this->assertLink('Next');
+    $this->assertSession()->linkExists('Course object 2');
+    $this->assertSession()->linkExists('Next');
     $this->clickLink('Course object 2');
     $this->assertSession()->responseContains(t('I am a test course object with the title @title', array('@title' => $co2->getOption('title'))));

@@ @@
     // Set the second object complete.
     $co2->getFulfillment($this->student_user)->setComplete(1)->save();
     $this->drupalGet("course/{$course->id()}/take");
-    $this->assertLink('Complete');
+    $this->assertSession()->linkExists('Complete');
     $this->clickLink('Complete');
     $this->assertSession()->responseContains('You have completed the course.');
    ----------- end diff -----------

Applied rules:
 * AssertLinkRector
 * AssertNoLinkRector
 * AssertResponseRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/course/tests/src/Functional/CourseTestBase.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->admin_user = $this->drupalCreateUser(array('bypass node access', 'administer course', 'administer courses'));
     $this->student_user = $this->createStudentUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/course/tests/src/Functional/CourseObjectAccessTest.php:174

    ---------- begin diff ----------
@@ @@

     $this->drupalGet("course/{$course->id()}/take");
     $this->drupalGet("course/{$course->id()}/object/{$o_optional->id()}");
-    $this->assertNoLink(t('Next'));
+    $this->assertSession()->linkNotExists(t('Next'));

     $this->drupalGet("course/{$course->id()}/object/{$o1->id()}");
-    $this->assertResponse(403, t('Hidden object is not accessible.'));
+    $this->assertSession()->statusCodeEquals(403, t('Hidden object is not accessible.'));

     // Check that the course is not complete without completing the hidden object.
     $report = $course->getEnrollment($user);
@@ @@

     // Completion link.
     $this->clickLink(t('Next'));
-    $this->assertResponse(200, t('Did not get access denied.'));
+    $this->assertSession()->statusCodeEquals(200, t('Did not get access denied.'));

     $this->drupalGet("course/{$course->id()}/object/{$o1->id()}");
-    $this->assertResponse(403, t('Disabled object is not accessible.'));
+    $this->assertSession()->statusCodeEquals(403, t('Disabled object is not accessible.'));

     // Check that the course is complete even without completing the disabled
     // object.
@@ @@
     $this->drupalGet("course/{$course->id()}/take");

     $this->drupalGet("course/{$course->id()}/object/{$o1->id()}");
-    $this->assertResponse(403, t('Disabled first object is not accessible.'));
+    $this->assertSession()->statusCodeEquals(403, t('Disabled first object is not accessible.'));

     $this->drupalGet("course/{$course->id()}/object/{$o_optional->id()}");
-    $this->assertResponse(200, t('Second object is accessible.'));
+    $this->assertSession()->statusCodeEquals(200, t('Second object is accessible.'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoLinkRector
 * AssertResponseRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/course/tests/src/Functional/CourseEnrollmentTest.php:165

    ---------- begin diff ----------
@@ @@

     // Check if field shows up and user is not yet enrolled.
     $this->drupalGet("course/{$courseA->id()}/take");
-    $this->assertFieldById('edit-enrollment-field-a-0-value');
-    $this->assertNoFieldById('edit-enrollment-field-b-0-value');
+    $this->assertSession()->fieldValueEquals('edit-enrollment-field-a-0-value', '');
+    $this->assertSession()->fieldValueNotEquals('edit-enrollment-field-b-0-value', '');
     $enrollment = $courseA->getEnrollment($this->student_user);
     $this->assertEmpty($enrollment);
     $this->submitForm([], t('Save'));
@@ @@

     // Check that a different field is on course B
     $this->drupalGet("course/{$courseB->id()}/take");
-    $this->assertFieldById('edit-enrollment-field-b-0-value');
-    $this->assertNoFieldById('edit-enrollment-field-a-0-value');
+    $this->assertSession()->fieldValueEquals('edit-enrollment-field-b-0-value', '');
+    $this->assertSession()->fieldValueNotEquals('edit-enrollment-field-a-0-value', '');

     // Mark field B to not show on enrollment.
     $instanceb->setThirdPartySetting('course', 'show_field', FALSE);
     $instanceb->save();
     $this->drupalGet("course/{$courseB->id()}/take");
-    $this->assertNoFieldById('edit-enrollment-field-a-0-value');
-    $this->assertNoFieldById('edit-enrollment-field-b-0-value');
+    $this->assertSession()->fieldValueNotEquals('edit-enrollment-field-a-0-value', '');
+    $this->assertSession()->fieldValueNotEquals('edit-enrollment-field-b-0-value', '');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByIdRector
 * AssertNoFieldByIdRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


16) modules/contrib/course/src/Entity/CourseObject.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\course\Entity;

+use Drupal\Core\Entity\RevisionLogEntityTrait;
+use Drupal\Core\Entity\EntityChangedTrait;
 use Drupal;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
  */
 class CourseObject extends CourseHandler implements CourseObjectInterface, RevisionLogInterface {

-  use Drupal\Core\Entity\RevisionLogEntityTrait;
-  use Drupal\Core\Entity\EntityChangedTrait;
+  use RevisionLogEntityTrait;
+  use EntityChangedTrait;

   protected $accessMessages = array();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/course/src/Entity/Course.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\course\Entity;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EditorialContentEntityBase;
@@ @@
    *
    * {@inheritdoc}
    */
-  static function preDelete(Drupal\Core\Entity\EntityStorageInterface $storage, array $entities) {
+  static function preDelete(EntityStorageInterface $storage, array $entities) {
     foreach ($entities as $course) {
       // Remove enrollments, which will also remove fulfillments.
       $enrollment_storage = \Drupal::entityTypeManager()->getStorage('course_enrollment');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


18) modules/contrib/course/modules/course_webform/tests/src/Functional/CourseObjectWebformTest.php:15

    ---------- begin diff ----------
@@ @@

   protected static $modules = ['course_webform'];

-  function setUp() {
+  function setUp(): void {
     parent::setUp();
     $perms = array('create webform', 'edit any webform');
     $this->webform_admin = $this->drupalCreateUser($perms);
@@ @@
     $co1->setCourse($course->id());
     $co1->save();
     $webform = Webform::load($co1->getInstanceId());
-    $this->assertSession()->assert($webform->id(), 'Webform created on course object save.');
+    $this->assertTrue($webform->id(), 'Webform created on course object save.');


     // Allow drafts
    ----------- end diff -----------

Applied rules:
 * AssertRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 18 files have been changed by Rector                                      

