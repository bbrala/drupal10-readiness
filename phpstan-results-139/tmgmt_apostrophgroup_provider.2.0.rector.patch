diff --git a/src/ApostrophTranslatorUI.php b/src/ApostrophTranslatorUI.php
index a603ee4..fd5379a 100644
--- a/src/ApostrophTranslatorUI.php
+++ b/src/ApostrophTranslatorUI.php
@@ -8,6 +8,9 @@
 
 namespace Drupal\tmgmt_apostrophgroup_provider;
 
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Configuration;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Api\ServiceStatusApi;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Api\TranslationApi;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\tmgmt_apostrophgroup_provider\Restclient\Api;
@@ -169,11 +172,11 @@ class ApostrophTranslatorUI extends TranslatorPluginUiBase {
         $apostrophsettings = $settings['apostroph-settings'];
         $username = $apostrophsettings['username'];
         $password = $apostrophsettings['password'];
-        $config = new Restclient\Configuration();
+        $config = new Configuration();
         $config->setHost($apostrophsettings['url']);
         $config->setUsername($username);
         $config->setPassword($password);
-        $status_api = new Api\ServiceStatusApi(NULL,$config);
+        $status_api = new ServiceStatusApi(NULL,$config);
         $response = $status_api->status();
         //$form_state->setValue(array('settings','apostroph-settings','password'),'');
         //$translator->setSetting('apostroph-settings',$apostrophsettings);
@@ -242,11 +245,11 @@ class ApostrophTranslatorUI extends TranslatorPluginUiBase {
     //TODO: get new status from remote job using api.
     $translator = $job->getTranslator();
     $apostrophsettings = $translator->getSetting('apostroph-settings');
-    $config = new Restclient\Configuration();
+    $config = new Configuration();
     $config->setHost($apostrophsettings['url']);
     $config->setUsername($apostrophsettings['username']);
     $config->setPassword($apostrophsettings['password']);
-    $translation_api = new Api\TranslationApi(NULL, $config);
+    $translation_api = new TranslationApi(NULL, $config);
     $all_translations = $translation_api->translations();
     $status = "n/a";
     $remote_job_id = $job->getReference();
diff --git a/src/Plugin/tmgmt/Translator/ApostrophTranslator.php b/src/Plugin/tmgmt/Translator/ApostrophTranslator.php
index 0f6cba2..6fa0964 100644
--- a/src/Plugin/tmgmt/Translator/ApostrophTranslator.php
+++ b/src/Plugin/tmgmt/Translator/ApostrophTranslator.php
@@ -9,6 +9,9 @@
 
 namespace Drupal\tmgmt_apostrophgroup_provider\Plugin\tmgmt\Translator;
 
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Configuration;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Api\TranslationApi;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\TranslationData;
 use Drupal\Component\Utility\Xss;
 use Drupal\tmgmt\Entity\Job;
 use Drupal\tmgmt\Entity\JobItem;
@@ -92,7 +95,7 @@ class ApostrophTranslator extends TranslatorPluginBase
           $labelname = $joblabel;
           $name = $labelname . "_" . $job->id() . "_all_" . $job->getRemoteSourceLanguage() . '_' . $job->getRemoteTargetLanguage() . '.xlf';
           $jobpath = $allfilespath . "/" . $name;
-          $file = file_save_data($exporter->export($job), $jobpath, FileSystemInterface::EXISTS_REPLACE);
+          $file = \Drupal::service('file.repository')->writeData($exporter->export($job), $jobpath, FileSystemInterface::EXISTS_REPLACE);
           $filearrayexportedfiles['all'] = $file;
         } else {
           // Export each item of the job in separate file.
@@ -100,7 +103,7 @@ class ApostrophTranslator extends TranslatorPluginBase
             $labelname = GeneralHelper::getStringNoSpeChars($item->label());
             $name = $labelname . "_" . $job->id() . "_" . $item->id() . "_" . $job->getRemoteSourceLanguage() . '_' . $job->getRemoteTargetLanguage() . '.xlf';
             $itempath = $allfilespath . "/" . $name;
-            $file = file_save_data($exporter->exportItem($item), $itempath, FileSystemInterface::EXISTS_REPLACE);
+            $file = \Drupal::service('file.repository')->writeData($exporter->exportItem($item), $itempath, FileSystemInterface::EXISTS_REPLACE);
             $filearrayexportedfiles[$item->id()] = $file;
           }
         }
@@ -118,19 +121,19 @@ class ApostrophTranslator extends TranslatorPluginBase
             \Drupal::service('file.usage')->add($zipfileobj, 'tmgmt_apostrophgroup_provider', 'tmgmt_job', $job->id());
           }
           // TODO: send zip to Apostroph.
-          $config = new Restclient\Configuration();
+          $config = new Configuration();
           $config->setHost($apostrophsettings['url']);
           $config->setUsername($apostrophsettings['username']);
           $config->setPassword($apostrophsettings['password']);
-          $translation_api = new Api\TranslationApi(NULL, $config);
+          $translation_api = new TranslationApi(NULL, $config);
           $translation_data = GeneralHelper::createTranslationRequest($apostrophsettings, $job, $zipPath);
-          $translation_request = new Model\TranslationData($translation_data);
+          $translation_request = new TranslationData($translation_data);
           $response = $translation_api->createnewTranslation($translation_request);
           $remote_job_id = $response->getTranslationId();
           $job->set('reference', $remote_job_id);
 
           $job->submitted("Job sent to provider!");
-          $messageTopass .= '<a href="' . file_create_url($zipPath) . '">' . Xss::filter(GeneralHelper::getJobLabelNoSpeChars($job)) . '</a>';
+          $messageTopass .= '<a href="' . \Drupal::service('file_url_generator')->generateAbsoluteString($zipPath) . '">' . Xss::filter(GeneralHelper::getJobLabelNoSpeChars($job)) . '</a>';
           \Drupal::messenger()->addMessage(Markup::create($messageTopass));
           // As exported files are transfered as zip, delete org. exports as already in the zip.
           // Add zip to transfer array.
@@ -180,11 +183,11 @@ class ApostrophTranslator extends TranslatorPluginBase
     try {
       $translator = $job->getTranslator();
       $apostrophsettings = $translator->getSetting('apostroph-settings');
-      $config = new Restclient\Configuration();
+      $config = new Configuration();
       $config->setHost($apostrophsettings['url']);
       $config->setUsername($apostrophsettings['username']);
       $config->setPassword($apostrophsettings['password']);
-      $translation_api = new Api\TranslationApi(NULL, $config);
+      $translation_api = new TranslationApi(NULL, $config);
       $response = $translation_api->cancelTranslationWithHttpInfo($job->getReference());
       $job->aborted();
       $job->addMessage(t("Apostroph Job cancelled:") . $job->getReference());
diff --git a/src/Restclient/Api/ServiceStatusApi.php b/src/Restclient/Api/ServiceStatusApi.php
index bd10e30..235a135 100644
--- a/src/Restclient/Api/ServiceStatusApi.php
+++ b/src/Restclient/Api/ServiceStatusApi.php
@@ -27,6 +27,8 @@
 
 namespace Drupal\tmgmt_apostrophgroup_provider\Restclient\Api;
 
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ -248,7 +250,7 @@ class ServiceStatusApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -263,11 +265,11 @@ class ServiceStatusApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -287,7 +289,7 @@ class ServiceStatusApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
diff --git a/src/Restclient/Api/TranslationApi.php b/src/Restclient/Api/TranslationApi.php
index 9135cc1..2a78dcd 100644
--- a/src/Restclient/Api/TranslationApi.php
+++ b/src/Restclient/Api/TranslationApi.php
@@ -27,6 +27,8 @@
 
 namespace Drupal\tmgmt_apostrophgroup_provider\Restclient\Api;
 
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ -267,7 +269,7 @@ class TranslationApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -282,11 +284,11 @@ class TranslationApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -306,7 +308,7 @@ class TranslationApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -528,7 +530,7 @@ class TranslationApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -543,11 +545,11 @@ class TranslationApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -567,7 +569,7 @@ class TranslationApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -771,7 +773,7 @@ class TranslationApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -786,11 +788,11 @@ class TranslationApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -810,7 +812,7 @@ class TranslationApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -1037,7 +1039,7 @@ class TranslationApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -1052,11 +1054,11 @@ class TranslationApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -1076,7 +1078,7 @@ class TranslationApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ -1284,7 +1286,7 @@ class TranslationApi
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ -1299,11 +1301,11 @@ class TranslationApi
                 $httpBody = new MultipartStream($multipartContents);
 
             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);
 
             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }
 
@@ -1323,7 +1325,7 @@ class TranslationApi
             $headers
         );
 
-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
diff --git a/tmgmt_apostrophgroup_provider.module b/tmgmt_apostrophgroup_provider.module
index 2aa2fc5..d7e9be7 100644
--- a/tmgmt_apostrophgroup_provider.module
+++ b/tmgmt_apostrophgroup_provider.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Configuration;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Api\TranslationApi;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\OrderState;
 /**
  * @file
  * Module file of the Apostroph Translator.
@@ -98,18 +101,18 @@ function tmgmt_apostrophgroup_provider_downlaod_data_by_translator(TranslatorInt
   try {
     $all_local_jobs = GeneralHelper::getAllJobsByTranslator($translator, TRUE);
     $apostrophsettings = $translator->getSetting('apostroph-settings');
-    $config = new Restclient\Configuration();
+    $config = new Configuration();
     $config->setHost($apostrophsettings['url']);
     $config->setUsername($apostrophsettings['username']);
     $config->setPassword($apostrophsettings['password']);
-    $translation_api = new Api\TranslationApi(NULL, $config);
+    $translation_api = new TranslationApi(NULL, $config);
     $all_remote_status = $translation_api->translations();
     foreach ($all_local_jobs as $job) {
       $job_found_remote = FALSE; //array_search($job->getReference(), $all_remote_status);
       foreach ($all_remote_status as $remote_state) {
         if ($job->getReference() == $remote_state->getTranslationId()) {
           $job_found_remote = TRUE;
-          if ($only_finished_remote_jobs && $remote_state->getState() != Model\OrderState::FINISHED) {
+          if ($only_finished_remote_jobs && $remote_state->getState() != OrderState::FINISHED) {
             $job_found_remote = FALSE;
           }
           break;
@@ -144,11 +147,11 @@ function tmgmt_apostrophgroup_provider_tmgmt_job_delete(JobInterface $job)
   try {
     $translator = $job->getTranslator();
     $apostrophsettings = $translator->getSetting('apostroph-settings');
-    $config = new Restclient\Configuration();
+    $config = new Configuration();
     $config->setHost($apostrophsettings['url']);
     $config->setUsername($apostrophsettings['username']);
     $config->setPassword($apostrophsettings['password']);
-    $translation_api = new Api\TranslationApi(NULL, $config);
+    $translation_api = new TranslationApi(NULL, $config);
     $translation_api->cancelTranslationWithHttpInfo($job->getReference());
     $job->addMessage(t("Apostroph Job cancelled:") . $job->getReference());
     \Drupal::messenger()->addError(t("Apostroph Job cancelled:") . $job->getReference());
@@ -228,11 +231,11 @@ function tmgmt_apostrophgroup_provider_downlaod_data_by_job(TranslatorInterface
     // If code 204 no file available.
     // if code 200 we get the file.
     // get response using api.
-    $config = new Restclient\Configuration();
+    $config = new Configuration();
     $config->setHost($apostrophsettings['url']);
     $config->setPassword($apostrophsettings['password']);
     $config->setUsername($apostrophsettings['username']);
-    $translation_api = new Api\TranslationApi(NULL, $config);
+    $translation_api = new TranslationApi(NULL, $config);
     $translation_response = $translation_api->translationbyIDWithHttpInfo($prId);
     // Check here respose.
     if ($translation_response[1] == '204') {
@@ -278,7 +281,7 @@ function tmgmt_apostropgroup_provider_import(JobInterface $job, $filedatastring,
   $path_gz = $job->getSetting('scheme') . '://tmgmt_apostrophgroup/ApostrophReceivedFiles/' . $filename;
   $dirname = dirname($path_gz);
   if (\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY)) {
-    $file_gz = file_save_data($filedatastring, $path_gz, FileSystemInterface::EXISTS_REPLACE);
+    $file_gz = \Drupal::service('file.repository')->writeData($filedatastring, $path_gz, FileSystemInterface::EXISTS_REPLACE);
     // $mimetype = $file_gz->getMimeType();
     $filearray = array();
     /**
