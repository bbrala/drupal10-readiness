modules/contrib/forward/forward.api.php
modules/contrib/forward/src/Event/EntityForwardEvent.php
modules/contrib/forward/forward.install
modules/contrib/forward/src/Event/EntityPreforwardEvent.php
modules/contrib/forward/src/Form/ForwardForm.php
modules/contrib/forward/tests/modules/forward_test/forward_test.module
modules/contrib/forward/forward.module
modules/contrib/forward/forward.tokens.inc
modules/contrib/forward/forward.views.inc
modules/contrib/forward/tests/src/Functional/ForwardFormTest.php
modules/contrib/forward/tests/src/Functional/ForwardTestBase.php
modules/contrib/forward/tests/src/Functional/PermissionsTest.php
modules/contrib/forward/src/Form/SettingsForm.php
modules/contrib/forward/src/Plugin/Field/FieldFormatter/ForwardFormFormatter.php
modules/contrib/forward/src/Plugin/Field/FieldFormatter/ForwardLinkFormatter.php
modules/contrib/forward/src/Plugin/Field/FieldType/ForwardItem.php
modules/contrib/forward/src/Plugin/Field/FieldWidget/ForwardWidget.php
modules/contrib/forward/src/Plugin/Mail/ForwardMail.php
modules/contrib/forward/src/Plugin/migrate/destination/ForwardDestinationBase.php
modules/contrib/forward/src/Plugin/migrate/destination/ForwardLog.php
modules/contrib/forward/src/Plugin/migrate/destination/ForwardStatistics.php
modules/contrib/forward/src/Plugin/migrate/source/ForwardLog.php
modules/contrib/forward/src/Plugin/migrate/source/ForwardStatistics.php
modules/contrib/forward/src/Services/ForwardFormBuilder.php
modules/contrib/forward/src/Services/ForwardFormBuilderInterface.php
modules/contrib/forward/src/Services/ForwardLinkGenerator.php
modules/contrib/forward/src/Services/ForwardLinkGeneratorInterface.php

5 files with changes
====================

1) modules/contrib/forward/tests/src/Functional/PermissionsTest.php:15

    ---------- begin diff ----------
@@ @@
     // Users with access content permission cannot change settings.
     $this->drupalLogin($this->webUser);
     $this->drupalGet('admin/config/user-interface/forward');
-    $this->assertResponse(403, 'Users with access content permission cannot change settings.');
+    $this->assertSession()->statusCodeEquals(403, 'Users with access content permission cannot change settings.');

     // Users with access forward permission cannot change settings.
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('admin/config/user-interface/forward');
-    $this->assertResponse(403, 'Users with access forward permission cannot change settings.');
+    $this->assertSession()->statusCodeEquals(403, 'Users with access forward permission cannot change settings.');

     // Users with administer forward permission can change settings.
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/config/user-interface/forward');
-    $this->assertResponse(200, 'Users with administer forward permission can change settings.');
+    $this->assertSession()->statusCodeEquals(200, 'Users with administer forward permission can change settings.');

     // Users without override email address permission cannot change their email address on the Forward form.
     $article = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('/forward/node/' . $article->id());
-    $this->assertNoText('Your email address', 'Users without override email address permission cannot change their email address on the Forward form.');
+    $this->assertSession()->pageTextNotContains('Your email address');

     // Users with override email address permission can change their email address on the Forward form.
     $overrideUser = $this->drupalCreateUser(['access content', 'access forward', 'override email address', 'override flood control']);
@@ @@
     $article = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalLogin($overrideUser);
     $this->drupalGet('/forward/node/' . $article->id());
-    $this->assertText('Your email address', 'Users with override email address permission can change their email address on the Forward form.');
+    $this->assertSession()->pageTextContains('Your email address');

     // Set flood control limit to 1.
     $this->drupalLogin($this->adminUser);
@@ @@
     $edit = [
       'forward_flood_control_limit' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');

     // Users without override flood control permission cannot do more than 1 forward in an hour.
     $this->drupalLogin($this->forwardUser);
@@ @@
       'recipient' => 'test@test.com',
       'message' => 'This is a test personal message.',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Send Message');
+    $this->submitForm($edit, 'Send Message');
     $this->drupalGet('/forward/node/' . $article->id());
     $edit = [
       'name' => 'Test Forwarder',
@@ @@
       'recipient' => 'test@test.com',
       'message' => 'This is a test personal message.',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Send Message');
-    $this->assertNoText('Thank you for spreading the word about Drupal.', 'Users without override flood control permission cannot do more than 1 forward in an hour.');
+    $this->submitForm($edit, 'Send Message');
+    $this->assertSession()->pageTextNotContains('Thank you for spreading the word about Drupal.');

     // Users with override flood control permission can do more than 1 forward in an hour.
     $this->drupalLogin($overrideUser);
@@ @@
       'recipient' => 'test@test.com',
       'message' => 'This is a test personal message.',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Send Message');
+    $this->submitForm($edit, 'Send Message');
     $this->drupalGet('/forward/node/' . $article->id());
     $edit = [
       'name' => 'Test Forwarder',
@@ @@
       'recipient' => 'test@test.com',
       'message' => 'This is a test personal message.',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Send Message');
-    $this->assertText('Thank you for spreading the word about Drupal.', 'Users with override flood control permission can do more than 1 forward in an hour.');
+    $this->submitForm($edit, 'Send Message');
+    $this->assertSession()->pageTextContains('Thank you for spreading the word about Drupal.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/forward/tests/src/Functional/ForwardTestBase.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * Perform any initial set up tasks that run before every test method.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create Basic page and Article node types.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/forward/tests/src/Functional/ForwardFormTest.php:16

    ---------- begin diff ----------
@@ @@
     $article = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('node/' . $article->id());
-    $this->assertText('Forward this article to a friend', 'The article has a Forward link.');
+    $this->assertSession()->pageTextContains('Forward this article to a friend');
     $this->drupalGet('/forward/node/' . $article->id());
-    $this->assertText('Forward this article to a friend', 'The Forward form displays for an article.');
+    $this->assertSession()->pageTextContains('Forward this article to a friend');

     // Submit the Forward form.
     $edit = [
@@ @@
       'recipient' => 'test@test.com',
       'message' => 'This is a test personal message.',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Send Message');
-    $this->assertText('Thank you for spreading the word about Drupal.', 'The Forward form displays a thank you message after submit.');
+    $this->submitForm($edit, 'Send Message');
+    $this->assertSession()->pageTextContains('Thank you for spreading the word about Drupal.');

     // Submit the Forward form without a recipient.
     $this->drupalGet('/forward/node/' . $article->id());
@@ @@
       'name' => 'Test Forwarder',
       'message' => 'This is a test personal message.',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Send Message');
-    $this->assertText('Send to field is required.', 'The Forward form displays an error message when the recipient is blank.');
+    $this->submitForm($edit, 'Send Message');
+    $this->assertSession()->pageTextContains('Send to field is required.');

     // Submit the Forward form without a personal message when required.
     $this->drupalLogin($this->adminUser);
@@ @@
     $edit = [
       'forward_personal_message' => 2,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('/forward/node/' . $article->id());
     $edit = [
@@ @@
       'name' => 'Test Forwarder',
       'recipient' => 'test@test.com',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Send Message');
-    $this->assertText('Your personal message field is required.', 'The Forward form displays an error message when the message is blank and one is required.');
+    $this->submitForm($edit, 'Send Message');
+    $this->assertSession()->pageTextContains('Your personal message field is required.');

     // Submit the Forward form without a personal message when optional.
     $this->drupalLogin($this->adminUser);
@@ @@
     $edit = [
       'forward_personal_message' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('/forward/node/' . $article->id());
     $edit = [
@@ @@
       'name' => 'Test Forwarder',
       'recipient' => 'test@test.com',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Send Message');
-    $this->assertNoText('Your personal message field is required.', 'The Forward form does not display an error message when the message is blank and optional.');
+    $this->submitForm($edit, 'Send Message');
+    $this->assertSession()->pageTextNotContains('Your personal message field is required.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/forward/src/Services/ForwardLinkGenerator.php:95

    ---------- begin diff ----------
@@ @@

     $html = FALSE;
     // Output the correct style of link.
-    $default_icon = drupal_get_path('module', 'forward') . '/images/forward.gif';
+    $default_icon = \Drupal::service('extension.list.module')->getPath('forward') . '/images/forward.gif';
     $custom_icon = $settings['icon'];
     $link_style = $settings['style'];
     switch ($link_style) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector


5) modules/contrib/forward/src/Form/ForwardForm.php:714

    ---------- begin diff ----------
@@ @@
     $uid = $this->currentUser()->id();
     $path = substr($entity->toUrl()->toString(), 1);
     $ip_address = $this->requestStack->getCurrentRequest()->getClientIp();
-    $timestamp = REQUEST_TIME;
+    $timestamp = \Drupal::time()->getRequestTime();

     // Insert into log.
     $this->database->insert('forward_log')
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 5 files have been changed by Rector                                       

