diff --git a/src/ApiAiEvent.php b/src/ApiAiEvent.php
index f74e3d9..7ca7104 100644
--- a/src/ApiAiEvent.php
+++ b/src/ApiAiEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\api_ai_webhook;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use DialogFlow\Model\Webhook\Request;
 use DialogFlow\Model\Webhook\Response;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Implements a new Symfony event.
diff --git a/src/EventSubscriber/ResponseEventSubscriber.php b/src/EventSubscriber/ResponseEventSubscriber.php
index f5da679..665a12f 100644
--- a/src/EventSubscriber/ResponseEventSubscriber.php
+++ b/src/EventSubscriber/ResponseEventSubscriber.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\api_ai_webhook\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\JsonResponse;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 
 /**
  * Subscribe to the response in order to better handle Dialogflow errors.
@@ -28,10 +28,10 @@ class ResponseEventSubscriber implements EventSubscriberInterface {
    * This method is called whenever the kernel.response event is dispatched,
    * then we filter responses/requests coming form Dialogflow webhook.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The repose event.
    */
-  public function alterResponse(FilterResponseEvent $event) {
+  public function alterResponse(ResponseEvent $event) {
     if (rtrim($event->getRequest()->getPathInfo(), '/') === '/api.ai/webhook') {
 
       // Handle errors.
diff --git a/tests/src/Functional/ConfigurationTest.php b/tests/src/Functional/ConfigurationTest.php
index 9a328dc..5401f64 100644
--- a/tests/src/Functional/ConfigurationTest.php
+++ b/tests/src/Functional/ConfigurationTest.php
@@ -39,7 +39,7 @@ class ConfigurationTest extends BrowserTestBase {
       'http_headers' => 'Lorem: ABC' . PHP_EOL . 'Ipsum: DEF',
     ];
     // Send the form.
-    $this->drupalPostForm(NULL, $edit, 'op');
+    $this->submitForm($edit, 'op');
     // Verify the saved message.
     $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));
 
diff --git a/tests/src/Kernel/ChatbotIntentPluginTest.php b/tests/src/Kernel/ChatbotIntentPluginTest.php
index 0146a2a..b504366 100644
--- a/tests/src/Kernel/ChatbotIntentPluginTest.php
+++ b/tests/src/Kernel/ChatbotIntentPluginTest.php
@@ -46,7 +46,7 @@ class ChatbotIntentPluginTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['filter', 'user']);
     $this->installSchema('system', ['sequences']);
diff --git a/tests/src/Unit/ApiAiPushHandlerTest.php b/tests/src/Unit/ApiAiPushHandlerTest.php
index 26c926a..d5f570c 100644
--- a/tests/src/Unit/ApiAiPushHandlerTest.php
+++ b/tests/src/Unit/ApiAiPushHandlerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\api_ai_webhook\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\api_ai_webhook\Plugin\ChatbotApiEntities\PushHandler\ApiAiPushHandler;
 use Drupal\chatbot_api_entities\Entity\EntityCollectionInterface;
 use Drupal\Tests\UnitTestCase;
@@ -18,6 +19,7 @@ use Psr\Log\NullLogger;
  */
 class ApiAiPushHandlerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests api handler saves.
    */
