diff --git a/src/EventSubscriber/HtmlResponseSubscriber.php b/src/EventSubscriber/HtmlResponseSubscriber.php
index 343cdaf..cf0a019 100644
--- a/src/EventSubscriber/HtmlResponseSubscriber.php
+++ b/src/EventSubscriber/HtmlResponseSubscriber.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\refreshless\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Render\HtmlResponse;
 use Drupal\refreshless\RefreshlessPageState;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
@@ -29,10 +29,10 @@ class HtmlResponseSubscriber implements EventSubscriberInterface {
   /**
    * Processes HTML responses to allow Refreshless' JavaScript to work.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     $response = $event->getResponse();
     if (!$response instanceof HtmlResponse) {
       return;
diff --git a/src/EventSubscriber/RedirectResponseSubscriber.php b/src/EventSubscriber/RedirectResponseSubscriber.php
index 752c723..62f7568 100644
--- a/src/EventSubscriber/RedirectResponseSubscriber.php
+++ b/src/EventSubscriber/RedirectResponseSubscriber.php
@@ -2,12 +2,12 @@
 
 namespace Drupal\refreshless\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\EventSubscriber\MainContentViewSubscriber;
 use Drupal\Core\Routing\LocalRedirectResponse;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -24,10 +24,10 @@ class RedirectResponseSubscriber implements EventSubscriberInterface {
   /**
    * Ensures that requests with wrapper formats also have functioning redirects.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The Event to process.
    */
-  public function onRedirectResponse(FilterResponseEvent $event) {
+  public function onRedirectResponse(ResponseEvent $event) {
     $response = $event->getResponse();
     // Only local redirects need to be updated to have the wrapper format.
     if ($response instanceof LocalRedirectResponse) {
