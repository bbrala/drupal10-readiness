modules/contrib/agreement/agreement.install
modules/contrib/agreement/src/AgreementHandlerInterface.php
modules/contrib/agreement/tests/src/Functional/AgreementDefaultsPrivilegedUserTest.php
modules/contrib/agreement/src/Entity/Agreement.php
modules/contrib/agreement/agreement.module
modules/contrib/agreement/src/Entity/AgreementDeleteForm.php
modules/contrib/agreement/tests/src/Functional/AgreementDefaultsUnprivilegedUserTest.php
modules/contrib/agreement/src/Entity/AgreementForm.php
modules/contrib/agreement/tests/src/Functional/AgreementLogoutExceptionTest.php
modules/contrib/agreement/tests/src/Functional/AgreementMultilingualTest.php
modules/contrib/agreement/agreement.post_update.php
modules/contrib/agreement/agreement.views.inc
modules/contrib/agreement/src/AgreementHandler.php
modules/contrib/agreement/tests/src/Functional/AgreementMultipleRoleTest.php
modules/contrib/agreement/src/Entity/AgreementListBuilder.php
modules/contrib/agreement/src/Entity/AgreementViewBuilder.php
modules/contrib/agreement/src/Entity/Routing/AgreementRouteProvider.php
modules/contrib/agreement/tests/src/Functional/AgreementMultipleTest.php
modules/contrib/agreement/src/EventSubscriber/AgreementSubscriber.php
modules/contrib/agreement/tests/src/Functional/AgreementRecordsViewsTest.php
modules/contrib/agreement/tests/src/Functional/AgreementRevokeTest.php
modules/contrib/agreement/src/Form/AgreementForm.php
modules/contrib/agreement/tests/src/Functional/AgreementTestBase.php
modules/contrib/agreement/src/Plugin/migrate/destination/Agreement.php
modules/contrib/agreement/tests/src/Kernel/d6/AgreementMigrateTest.php
modules/contrib/agreement/src/Plugin/migrate/process/AgreementSettings.php
modules/contrib/agreement/tests/src/Kernel/d7/AgreementMigrateTest.php
modules/contrib/agreement/src/Plugin/migrate/source/Agreement.php
modules/contrib/agreement/src/Plugin/migrate/source/d7/AgreementType.php
modules/contrib/agreement/src/Plugin/views/field/AgreementEntity.php
modules/contrib/agreement/tests/src/Unit/AgreementHandlerTest.php
modules/contrib/agreement/tests/fixtures/drupal6.php
modules/contrib/agreement/tests/fixtures/drupal7.php
modules/contrib/agreement/tests/src/Functional/AgreementAccessDeniedRedirectTest.php
modules/contrib/agreement/tests/src/Functional/AgreementAnonymousTest.php
modules/contrib/agreement/tests/src/Unit/Entity/AgreementTest.php
modules/contrib/agreement/tests/src/Functional/AgreementBypassUserTest.php
modules/contrib/agreement/tests/src/Functional/AgreementCustomUnprivilegedUserTest.php
modules/contrib/agreement/tests/src/Unit/EventSubscriber/AgreementSubscriberTest.php
modules/contrib/agreement/tests/src/Unit/Plugin/views/field/AgreementEntityTest.php

15 files with changes
=====================

1) modules/contrib/agreement/src/AgreementHandler.php:225

    ---------- begin diff ----------
@@ @@
     elseif ($agreement->agreeOnce()) {
       $expire = new \DateTime('+10 years');
     }
-    return new Cookie($cookieName, $agreed, $expire, '/', NULL, NULL, 'lax');
+    return Cookie::create($cookieName, $agreed, $expire, '/', NULL, NULL, 'lax');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * NewToStaticCallRector


2) modules/contrib/agreement/tests/src/Functional/AgreementCustomUnprivilegedUserTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->account = $this->createUnprivilegedUser();
@@ @@

     $privilegedUser = $this->createPrivilegedUser();
     $this->drupalLogin($privilegedUser);
-    $this->drupalPostForm('/admin/config/people/agreement/manage/' . $this->agreement->id() . '/delete', [], 'Confirm');
+    $this->drupalGet('/admin/config/people/agreement/manage/' . $this->agreement->id() . '/delete');
+    $this->submitForm([], 'Confirm');
     $this->assertSession()
       ->pageTextContains('Successfully deleted agreement');
   }
@@ @@
       'pass[pass1]' => $pass = $this->randomString(),
       'pass[pass2]' => $pass,
     ];
-    $this->drupalPostForm('/user/' . $this->account->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('/user/' . $this->account->id() . '/edit');
+    $this->submitForm($edit, 'Save');

     if ($this->checkForMetaRefresh()) {
       $this->metaRefreshCount = 0;
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/agreement/tests/src/Functional/AgreementAnonymousTest.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $settings = $this->agreement->getSettings();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/agreement/tests/src/Functional/AgreementAccessDeniedRedirectTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->unprivilegedUser = $this->createUnprivilegedUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/agreement/src/EventSubscriber/AgreementSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\agreement\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\agreement\AgreementHandlerInterface;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Session\SessionManagerInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\HttpExceptionInterface;

 /**
@@ @@
   /**
    * Check if the user needs to accept an agreement.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent|\Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent|\Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The response event.
    */
   public function checkForRedirection($event) {
@@ @@
    * the checkForRedirection function, that will lead to an infinite redirect
    * loop.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *   The response exception event.
    */
-  public function exceptionRedirect(GetResponseForExceptionEvent $event) {
-    $exception = $event->getException();
-    if ($exception instanceof HttpExceptionInterface && $event->getException()->getStatusCode() === 403) {
+  public function exceptionRedirect(ExceptionEvent $event) {
+    $exception = $event->getThrowable();
+    if ($exception instanceof HttpExceptionInterface && $event->getThrowable()->getStatusCode() === 403) {
       $this->checkForRedirection($event);
     }
   }
@@ @@
   /**
    * Executes function to set redirect response if it is required.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The response event.
    */
-  public function requestForRedirection(GetResponseEvent $event) {
+  public function requestForRedirection(RequestEvent $event) {
     $this->checkForRedirection($event);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameMethodRector
 * RenameClassRector
 * WrapReturnRector


6) modules/contrib/agreement/tests/src/Unit/Plugin/views/field/AgreementEntityTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\agreement\Unit\Plugin\views\field;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\agreement\Entity\Agreement;
 use Drupal\agreement\Plugin\views\field\AgreementEntity;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ @@
  */
 class AgreementEntityTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Agreement entity plugin.
    *
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $agreement = new Agreement([
       'id' => 'default',
       'label' => 'Default agreement',
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/agreement/tests/src/Unit/EventSubscriber/AgreementSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\agreement\Unit\EventSubscriber;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\agreement\EventSubscriber\AgreementSubscriber;
 use Drupal\Tests\UnitTestCase;
 use Prophecy\Argument;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\HttpKernelInterface;

 /**
@@ @@
  */
 class AgreementSubscriberTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Asserts that check for redirection method is functional.
    *
@@ @@
     $kernelProphet = $this->prophesize('\Drupal\Core\DrupalKernelInterface');

     $request = new Request();
-    $event = new GetResponseEvent(
+    $event = new RequestEvent(
       $kernelProphet->reveal(),
       $request,
       HttpKernelInterface::MASTER_REQUEST
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/agreement/tests/src/Unit/AgreementHandlerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\agreement\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\agreement\AgreementHandler;
 use Drupal\agreement\Entity\Agreement;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
@@ @@
  */
 class AgreementHandlerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Asserts that database operation errors are handled.
    *
@@ @@
       ->willReturn($transactionProphet->reveal());

     // Prophecy does not allow mocking objects that return $this because.
-    $delete = $this->getMockBuilder('\Drupal\Core\Database\Query\Delete')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $delete = $this->createMock('\Drupal\Core\Database\Query\Delete');
     $delete->expects($this->any())
       ->method('condition')
       ->willReturnSelf();
@@ @@
         return 3;
       });

-    $insert = $this->getMockBuilder('\Drupal\Core\Database\Query\Insert')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $insert = $this->createMock('\Drupal\Core\Database\Query\Insert');
     $insert->expects($this->any())
       ->method('fields')
       ->willReturnSelf();
@@ @@
     $statementProphet->fetchField()->willReturn($agreed);

     // Mocks select query using mock object because prophecy.
-    $select = $this->getMockBuilder('\Drupal\Core\Database\Query\SelectInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $select = $this->createMock('\Drupal\Core\Database\Query\SelectInterface');
     $select->expects($this->any())
       ->method('fields')
       ->willReturnSelf();
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/agreement/tests/src/Kernel/d7/AgreementMigrateTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $agreementFixture = __DIR__ . '/../../../fixtures/drupal7.php';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/agreement/tests/src/Kernel/d6/AgreementMigrateTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $agreementFixture = __DIR__ . '/../../../fixtures/drupal6.php';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/agreement/tests/src/Functional/AgreementTestBase.php:56

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Set front page to "node".
@@ @@
    */
   public function assertNotAgreed(Agreement $agreement) {
     $settings = $agreement->getSettings();
-    $this->drupalPostForm($agreement->get('path'), [], $settings['submit']);
+    $this->drupalGet($agreement->get('path'));
+    $this->submitForm([], $settings['submit']);
     $this->assertSession()->pageTextContains($settings['failure']);
   }

@@ @@
    */
   public function assertAgreed(Agreement $agreement) {
     $settings = $agreement->getSettings();
-    $this->drupalPostForm($agreement->get('path'), ['agree' => 1], $settings['submit']);
+    $this->drupalGet($agreement->get('path'));
+    $this->submitForm(['agree' => 1], $settings['submit']);

     // Check for redirects. It's odd that drupalPostForm doesn't handle this but
     // drupalGet does.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/agreement/tests/src/Functional/AgreementRevokeTest.php:24

    ---------- begin diff ----------
@@ @@
     $edit = [
       'agree' => '0',
     ];
-    $this->drupalPostForm('/agreement', $edit, $settings['submit']);
+    $this->drupalGet('/agreement');
+    $this->submitForm($edit, $settings['submit']);
     $this->assertSession()->pageTextContains('You have successfully revoked your acceptance of our agreement. ');

     // Assert agreement page after revoking.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/agreement/tests/src/Functional/AgreementMultipleTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->newAgreement = Agreement::create([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/agreement/tests/src/Functional/AgreementMultipleRoleTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create the roles.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/agreement/tests/src/Functional/AgreementMultilingualTest.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Add a new language.
@@ @@
       'language_interface[enabled][language-url]' => '1',
       'language_interface[enabled][language-user]' => '1',
     ];
-    $this->drupalPostForm('admin/config/regional/language/detection', $languageEdit, t('Save settings'));
+    $this->drupalGet('admin/config/regional/language/detection');
+    $this->submitForm($languageEdit, t('Save settings'));

     // Asserts that the configuration is translatable.
     // @todo Make these better translations.
@@ @@
       'translation[config_names][agreement.agreement.default][settings][failure]' => 'Debes aceptar nuestro acuerdo para continuar.',
       'translation[config_names][agreement.agreement.default][agreement]' => 'Este es el texto del acuerdo.',
     ];
-    $this->drupalPostForm('admin/config/people/agreement/manage/default/translate/es/add', $configEdit, t('Save translation'));
+    $this->drupalGet('admin/config/people/agreement/manage/default/translate/es/add');
+    $this->submitForm($configEdit, t('Save translation'));

     $this->drupalLogout();
   }
@@ @@
    * @throws \Behat\Mink\Exception\ResponseTextException
    */
   public function assertAgreed(Agreement $agreement) {
-    $this->drupalPostForm($agreement->get('path'), ['agree' => 1], 'Enviar');
+    $this->drupalGet($agreement->get('path'));
+    $this->submitForm(['agree' => 1], 'Enviar');

     // Check for redirects. It's odd that drupalPostForm doesn't handle this but
     // drupalGet does.
@@ @@
    * @throws \Behat\Mink\Exception\ResponseTextException
    */
   public function assertNotAgreed(Agreement $agreement) {
-    $this->drupalPostForm($agreement->get('path'), [], 'Enviar');
+    $this->drupalGet($agreement->get('path'));
+    $this->submitForm([], 'Enviar');
     $this->assertSession()->pageTextContains('Debes aceptar nuestro acuerdo para continuar.');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 15 files have been changed by Rector                                      

