modules/contrib/ip2location/ip2location.install
modules/contrib/ip2location/ip2location.module
modules/contrib/ip2location/src/AddHTTPHeaders.php
modules/contrib/ip2location/src/IP2Location.inc
modules/contrib/ip2location/src/SettingsForm.php

2 files with changes
====================

1) modules/contrib/ip2location/src/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ip2location;

+use IP2Location\Database;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
 	else {
       try {
         module_load_include('inc', 'ip2location', 'src/IP2Location');
-        $ip2location = new \IP2Location\Database($form_state->getValue('database_path'),  \IP2Location\Database::FILE_IO);
-        $records = $ip2location->lookup('8.8.8.8',  \IP2Location\Database::ALL);
+        $ip2location = new Database($form_state->getValue('database_path'),  Database::FILE_IO);
+        $records = $ip2location->lookup('8.8.8.8',  Database::ALL);

         if (empty($records['ipNumber'])) {
 		  $form_state->setErrorByName('database_path', $this->t('The IP2Location binary database is not valid or corrupted.'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ip2location/src/AddHTTPHeaders.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ip2location;

-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
+use IP2Location\Database;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;

@@ @@
   /**
    * Sets extra HTTP headers.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
@@ @@

       switch ($cache_mode) {
         case 'memory_cache':
-          $ip2location = new \IP2Location\Database($database_path,  \IP2Location\Database::MEMORY_CACHE);
+          $ip2location = new Database($database_path,  Database::MEMORY_CACHE);
           break;

         case 'shared_memory':
-          $ip2location = new \IP2Location\Database($database_path,  \IP2Location\Database::SHARED_MEMORY);
+          $ip2location = new Database($database_path,  Database::SHARED_MEMORY);
         break;

         default:
-          $ip2location = new \IP2Location\Database($database_path,  \IP2Location\Database::FILE_IO);
+          $ip2location = new Database($database_path,  Database::FILE_IO);
       }

-      $records = $ip2location->lookup($ip,  \IP2Location\Database::ALL);
+      $records = $ip2location->lookup($ip,  Database::ALL);

       $raw = json_encode(array(
       'ip_address' => $ip,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


 [OK] 2 files have been changed by Rector                                       

