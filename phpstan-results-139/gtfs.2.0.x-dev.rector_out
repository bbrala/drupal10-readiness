modules/contrib/gtfs/gtfs.install
modules/contrib/gtfs/src/Controller/CalendarDateController.php
modules/contrib/gtfs/gtfs.module
modules/contrib/gtfs/src/Entity/Frequency.php
modules/contrib/gtfs/src/Form/CalendarDateRevisionRevertForm.php
modules/contrib/gtfs/src/Form/FrequencyRevisionRevertForm.php
modules/contrib/gtfs/src/Form/StopTimeRevisionDeleteForm.php
modules/contrib/gtfs/src/Plugin/rest/resource/GTFSResourceBase.php
modules/contrib/gtfs/src/Plugin/rest/resource/TripListResource.php
modules/contrib/gtfs/src/Storage/TripStorage.php
modules/contrib/gtfs/src/Plugin/rest/resource/ResourceMeta.php
modules/contrib/gtfs/src/Plugin/rest/resource/ResourceResponse.php
modules/contrib/gtfs/src/Plugin/rest/resource/RouteGeojsonResource.php
modules/contrib/gtfs/src/Form/CalendarDateRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Form/FrequencyRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Controller/DirectionController.php
modules/contrib/gtfs/src/Form/CalendarDateSettingsForm.php
modules/contrib/gtfs/src/Plugin/rest/resource/TripResource.php
modules/contrib/gtfs/src/Form/DirectionRevisionDeleteForm.php
modules/contrib/gtfs/src/Entity/GTFSEntityBase.php
modules/contrib/gtfs/src/Form/FrequencySettingsForm.php
modules/contrib/gtfs/src/Form/GTFSObjectForm.php
modules/contrib/gtfs/src/Plugin/rest/resource/RouteListResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/TripStopListResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/RouteResource.php
modules/contrib/gtfs/src/Form/RouteRevisionDeleteForm.php
modules/contrib/gtfs/src/Form/DirectionRevisionRevertForm.php
modules/contrib/gtfs/src/RouteListBuilder.php
modules/contrib/gtfs/src/TripListBuilder.php
modules/contrib/gtfs/src/Form/StopTimeRevisionRevertForm.php
modules/contrib/gtfs/src/Plugin/rest/resource/RouteStopListResource.php
modules/contrib/gtfs/src/ServiceListBuilder.php
modules/contrib/gtfs/src/ShapeListBuilder.php
modules/contrib/gtfs/src/StopListBuilder.php
modules/contrib/gtfs/src/StopTimeListBuilder.php
modules/contrib/gtfs/src/Plugin/rest/resource/RouteWKTResource.php
modules/contrib/gtfs/src/Form/DirectionRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Storage/AgencyStorage.php
modules/contrib/gtfs/src/Form/RouteRevisionRevertForm.php
modules/contrib/gtfs/src/Controller/FareAttributeController.php
modules/contrib/gtfs/src/Form/StopTimeRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Plugin/rest/resource/ServiceListResource.php
modules/contrib/gtfs/src/Form/DirectionSettingsForm.php
modules/contrib/gtfs/src/Storage/CalendarDateStorage.php
modules/contrib/gtfs/src/Form/EntityDeleteForm.php
modules/contrib/gtfs/src/Storage/DirectionStorage.php
modules/contrib/gtfs/src/Plugin/rest/resource/ServiceResource.php
modules/contrib/gtfs/src/Form/RouteRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/AgencyListBuilder.php
modules/contrib/gtfs/src/Storage/FareAttributeStorage.php
modules/contrib/gtfs/src/Form/StopTimeSettingsForm.php
modules/contrib/gtfs/src/Form/TripRevisionDeleteForm.php
modules/contrib/gtfs/src/Plugin/rest/resource/ShapeGeojsonResource.php
modules/contrib/gtfs/src/Storage/FeedStorage.php
modules/contrib/gtfs/src/Plugin/rest/resource/ShapeResource.php
modules/contrib/gtfs/src/Storage/FrequencyStorage.php
modules/contrib/gtfs/src/Form/FareAttributeRevisionDeleteForm.php
modules/contrib/gtfs/src/Controller/FeedController.php
modules/contrib/gtfs/src/Storage/GTFSEntityStorageInterface.php
modules/contrib/gtfs/src/Plugin/rest/resource/StopDirectionResource.php
modules/contrib/gtfs/src/CalendarDateListBuilder.php
modules/contrib/gtfs/src/Storage/RouteStorage.php
modules/contrib/gtfs/src/Commands/DeleteCommands.php
modules/contrib/gtfs/src/Form/TripRevisionRevertForm.php
modules/contrib/gtfs/src/Storage/ServiceStorage.php
modules/contrib/gtfs/src/Form/FareAttributeRevisionRevertForm.php
modules/contrib/gtfs/src/Storage/ShapeStorage.php
modules/contrib/gtfs/src/Commands/ImportCommands.php
modules/contrib/gtfs/src/Form/RouteSettingsForm.php
modules/contrib/gtfs/src/Form/ServiceRevisionDeleteForm.php
modules/contrib/gtfs/src/Storage/StopStorage.php
modules/contrib/gtfs/src/Storage/StopTimeStorage.php
modules/contrib/gtfs/src/Form/TripRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Plugin/rest/resource/StopListResource.php
modules/contrib/gtfs/src/Form/ServiceRevisionRevertForm.php
modules/contrib/gtfs/src/Form/FareAttributeRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Plugin/rest/resource/StopResource.php
modules/contrib/gtfs/src/Entity/GTFSObjectInterface.php
modules/contrib/gtfs/src/Form/TripSettingsForm.php
modules/contrib/gtfs/src/FrequencyListBuilder.php
modules/contrib/gtfs/src/Entity/GeodataInterface.php
modules/contrib/gtfs/src/Entity/HasIdTrait.php
modules/contrib/gtfs/src/Plugin/rest/resource/StopRouteListResource.php
modules/contrib/gtfs/src/Form/FareAttributeSettingsForm.php
modules/contrib/gtfs/src/GTFSEntityHtmlRouteProvider.php
modules/contrib/gtfs/src/Form/FeedDeleteForm.php
modules/contrib/gtfs/src/Form/ServiceRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Entity/Route.php
modules/contrib/gtfs/src/Plugin/rest/resource/StopStopTimeListResource.php
modules/contrib/gtfs/src/Controller/AgencyController.php
modules/contrib/gtfs/src/Plugin/rest/resource/StopTimeListResource.php
modules/contrib/gtfs/src/Form/ServiceSettingsForm.php
modules/contrib/gtfs/src/Form/ShapeRevisionDeleteForm.php
modules/contrib/gtfs/src/Plugin/rest/resource/StopTripResource.php
modules/contrib/gtfs/src/Form/FeedForm.php
modules/contrib/gtfs/src/Controller/FrequencyController.php
modules/contrib/gtfs/src/GTFSObjectAccessControlHandler.php
modules/contrib/gtfs/src/Plugin/rest/resource/TripGeojsonResource.php
modules/contrib/gtfs/src/GTFSObjectListBuilder.php
modules/contrib/gtfs/src/Form/ShapeRevisionRevertForm.php
modules/contrib/gtfs/src/Form/FeedImportForm.php
modules/contrib/gtfs/src/Form/ShapeRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/GTFSPermissions.php
modules/contrib/gtfs/src/Controller/RouteController.php
modules/contrib/gtfs/src/Plugin/Derivative/FeedMenuLink.php
modules/contrib/gtfs/src/Form/ShapeSettingsForm.php
modules/contrib/gtfs/src/Plugin/Menu/FeedMenuLink.php
modules/contrib/gtfs/src/Form/StopRevisionDeleteForm.php
modules/contrib/gtfs/src/Plugin/rest/resource/AgencyListResource.php
modules/contrib/gtfs/src/Controller/ServiceController.php
modules/contrib/gtfs/src/Form/FeedRevisionDeleteForm.php
modules/contrib/gtfs/src/Form/FeedRevisionRevertForm.php
modules/contrib/gtfs/src/Plugin/rest/resource/AgencyResource.php
modules/contrib/gtfs/src/Form/StopRevisionRevertForm.php
modules/contrib/gtfs/src/Plugin/rest/resource/DirectionListResource.php
modules/contrib/gtfs/src/Controller/ShapeController.php
modules/contrib/gtfs/src/Form/FeedRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Plugin/rest/resource/DirectionResource.php
modules/contrib/gtfs/src/Form/StopRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Plugin/rest/resource/DiscoveryResource.php
modules/contrib/gtfs/src/Form/FeedSettingsForm.php
modules/contrib/gtfs/src/Form/FrequencyRevisionDeleteForm.php
modules/contrib/gtfs/src/Entity/Service.php
modules/contrib/gtfs/src/Controller/StopController.php
modules/contrib/gtfs/src/Form/StopSettingsForm.php
modules/contrib/gtfs/src/Entity/Shape.php
modules/contrib/gtfs/src/Controller/StopTimeController.php
modules/contrib/gtfs/src/Entity/Stop.php
modules/contrib/gtfs/src/Controller/TripController.php
modules/contrib/gtfs/src/DirectionListBuilder.php
modules/contrib/gtfs/src/Entity/Agency.php
modules/contrib/gtfs/src/Entity/StopTime.php
modules/contrib/gtfs/src/Entity/CalendarDate.php
modules/contrib/gtfs/src/Entity/Trip.php
modules/contrib/gtfs/src/Entity/Direction.php
modules/contrib/gtfs/src/Entity/FareAttribute.php
modules/contrib/gtfs/src/FareAttributeListBuilder.php
modules/contrib/gtfs/src/FeedAccessControlHandler.php
modules/contrib/gtfs/src/FeedHtmlRouteProvider.php
modules/contrib/gtfs/src/Entity/Feed.php
modules/contrib/gtfs/src/FeedListBuilder.php
modules/contrib/gtfs/src/Form/AgencyRevisionDeleteForm.php
modules/contrib/gtfs/src/Form/AgencyRevisionRevertForm.php
modules/contrib/gtfs/src/Entity/Feed/Downloader.php
modules/contrib/gtfs/src/Form/AgencyRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Entity/Feed/Importer.php
modules/contrib/gtfs/src/Form/AgencySettingsForm.php
modules/contrib/gtfs/src/Form/CalendarDateRevisionDeleteForm.php
modules/contrib/gtfs/src/Entity/FeedInterface.php

39 files with changes
=====================

1) modules/contrib/gtfs/src/Plugin/rest/resource/StopDirectionResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Plugin\rest\resource;

+use Drupal\gtfs\Entity\Service;
 use Drupal;
 use Drupal\gtfs\Entity\Stop;
 use PDO;
@@ @@
       }
       if (!$direction) continue;
       $data[$key] = $direction->toGTFSObject();
-      $data[$key]['service'] = Drupal\gtfs\Entity\Service::load($trip['service_id'])->toGTFSObject();
+      $data[$key]['service'] = Service::load($trip['service_id'])->toGTFSObject();
       $data[$key]['route'] = $direction->route()->toGTFSObject();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/gtfs/src/Commands/ImportCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Commands;

+use Drupal\gtfs\Entity\Feed\Downloader;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\EntityTypeRepositoryInterface;
@@ @@
   public function importFeed($feedId, $options = ['entities' => 'all']) {
     $this->logger()->notice("Beginning to import feed {$feedId}");
     $feed = Feed::load($feedId);
-    $downloader = new Feed\Downloader($feed);
+    $downloader = new Downloader($feed);
     $this->logger()->notice("Downloading feed");
     $batch = $downloader->batch();
     $batch['sets'] = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/gtfs/gtfs.module:0

    ---------- begin diff ----------
@@ @@
-<?php /** @noinspection PhpUnused */
+<?php use Drupal\gtfs\Entity\Stop;
+use Drupal\gtfs\Entity\FeedInterface;
+/** @noinspection PhpUnused */

 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
  */
 function gtfs_gtfs_import_entities_alter(&$map) {
   // Get and parse the .yml file.
-  $file_entity_yaml = file_get_contents(drupal_get_path('module', 'gtfs') . '/file_entity_map.yml');
+  $file_entity_yaml = file_get_contents(\Drupal::service('extension.list.module')->getPath('gtfs') . '/file_entity_map.yml');
   $file_entity_map = Yaml::parse($file_entity_yaml);
   // Merge with the map being altered
   $map = array_merge($map, $file_entity_map);
@@ @@

 function gtfs_add_parent_station_to_stop($stop_id, $parent_station_id, $feed_id) {
   try {
-    $station_entity = \Drupal\gtfs\Entity\Stop::getById($stop_id, $feed_id);
-    $parent_station = \Drupal\gtfs\Entity\Stop::getById($parent_station_id, $feed_id);
+    $station_entity = Stop::getById($stop_id, $feed_id);
+    $parent_station = Stop::getById($parent_station_id, $feed_id);
   } catch (\Throwable $e) {
     \Drupal::logger('Invalid import')->notice($e->getMessage());
   }
@@ @@
     ->execute();
 }

-function gtfs_gtfs_prepare_post_source_table_alter(&$batch, \Drupal\gtfs\Entity\FeedInterface $feed) {
+function gtfs_gtfs_prepare_post_source_table_alter(&$batch, FeedInterface $feed) {
   $batch['operations'] = [
     'gtfs_repair_source_table_routes',
     [$feed->id()]
   ];
-}
+}
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


4) modules/contrib/gtfs/src/Form/TripRevisionRevertTranslationForm.php:106

    ---------- begin diff ----------
@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/gtfs/src/Form/TripRevisionRevertForm.php:140

    ---------- begin diff ----------
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/gtfs/src/Form/TripRevisionDeleteForm.php:72

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => format_date($this->revision->getRevisionCreationTime())]);
+    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime())]);
   }

   /**
@@ @@
     $this->TripStorage->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('Trip: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Trip %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Trip %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.gtfs_trip.canonical',
        ['gtfs_trip' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/gtfs/src/Form/StopTimeRevisionRevertTranslationForm.php:106

    ---------- begin diff ----------
@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/gtfs/src/Form/StopTimeRevisionRevertForm.php:140

    ---------- begin diff ----------
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/gtfs/src/Form/StopTimeRevisionDeleteForm.php:72

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => format_date($this->revision->getRevisionCreationTime())]);
+    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime())]);
   }

   /**
@@ @@
     $this->StopTimeStorage->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('Stop Time: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Stop Time %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Stop Time %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.gtfs_stop_time.canonical',
        ['gtfs_stop_time' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/gtfs/src/Form/StopRevisionRevertTranslationForm.php:106

    ---------- begin diff ----------
@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/gtfs/src/Form/StopRevisionRevertForm.php:140

    ---------- begin diff ----------
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/gtfs/src/Form/StopRevisionDeleteForm.php:72

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => format_date($this->revision->getRevisionCreationTime())]);
+    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime())]);
   }

   /**
@@ @@
     $this->StopStorage->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('Stop: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Stop %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Stop %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.gtfs_stop.canonical',
        ['gtfs_stop' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/gtfs/src/Form/ShapeRevisionRevertTranslationForm.php:106

    ---------- begin diff ----------
@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/gtfs/src/Form/ShapeRevisionRevertForm.php:140

    ---------- begin diff ----------
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/gtfs/src/Form/ShapeRevisionDeleteForm.php:72

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => format_date($this->revision->getRevisionCreationTime())]);
+    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime())]);
   }

   /**
@@ @@
     $this->ShapeStorage->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('Shape: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Shape %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Shape %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.gtfs_shape.canonical',
        ['gtfs_shape' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


16) modules/contrib/gtfs/src/Form/ServiceRevisionRevertTranslationForm.php:106

    ---------- begin diff ----------
@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/gtfs/src/Form/ServiceRevisionRevertForm.php:140

    ---------- begin diff ----------
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


18) modules/contrib/gtfs/src/Form/ServiceRevisionDeleteForm.php:72

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => format_date($this->revision->getRevisionCreationTime())]);
+    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime())]);
   }

   /**
@@ @@
     $this->ServiceStorage->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('Service: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Service %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Service %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.gtfs_service.canonical',
        ['gtfs_service' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


19) modules/contrib/gtfs/src/Form/RouteRevisionRevertTranslationForm.php:106

    ---------- begin diff ----------
@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


20) modules/contrib/gtfs/src/Form/RouteRevisionRevertForm.php:140

    ---------- begin diff ----------
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/gtfs/src/Form/RouteRevisionDeleteForm.php:72

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => format_date($this->revision->getRevisionCreationTime())]);
+    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime())]);
   }

   /**
@@ @@
     $this->RouteStorage->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('Route: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Route %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Route %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.gtfs_route.canonical',
        ['gtfs_route' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


22) modules/contrib/gtfs/src/Form/GTFSObjectForm.php:43

    ---------- begin diff ----------
@@ @@
       $entity->setNewRevision();

       // If a new revision is created, save the current user as revision author.
-      $entity->setRevisionCreationTime(REQUEST_TIME);
+      $entity->setRevisionCreationTime(\Drupal::time()->getRequestTime());
       $entity->setRevisionUserId(Drupal::currentUser()->id());
     }
     else {
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


23) modules/contrib/gtfs/src/Form/FrequencyRevisionRevertTranslationForm.php:106

    ---------- begin diff ----------
@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


24) modules/contrib/gtfs/src/Form/FrequencyRevisionRevertForm.php:146

    ---------- begin diff ----------
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


25) modules/contrib/gtfs/src/Form/FrequencyRevisionDeleteForm.php:72

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => format_date($this->revision->getRevisionCreationTime())]);
+    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime())]);
   }

   /**
@@ @@
     $this->FrequencyStorage->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('Frequency: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Frequency %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Frequency %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.gtfs_frequency.canonical',
        ['gtfs_frequency' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


26) modules/contrib/gtfs/src/Form/FeedRevisionRevertTranslationForm.php:106

    ---------- begin diff ----------
@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


27) modules/contrib/gtfs/src/Form/FeedRevisionRevertForm.php:146

    ---------- begin diff ----------
@@ @@
   protected function prepareRevertedRevision(FeedInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


28) modules/contrib/gtfs/src/Form/FeedForm.php:42

    ---------- begin diff ----------
@@ @@
       $entity->setNewRevision();

       // If a new revision is created, save the current user as revision author.
-      $entity->setRevisionCreationTime(REQUEST_TIME);
+      $entity->setRevisionCreationTime(\Drupal::time()->getRequestTime());
       $entity->setRevisionUserId(Drupal::currentUser()->id());
     }
     else {
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


29) modules/contrib/gtfs/src/Form/FareAttributeRevisionRevertTranslationForm.php:106

    ---------- begin diff ----------
@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


30) modules/contrib/gtfs/src/Form/FareAttributeRevisionRevertForm.php:147

    ---------- begin diff ----------
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


31) modules/contrib/gtfs/src/Form/DirectionRevisionRevertTranslationForm.php:106

    ---------- begin diff ----------
@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


32) modules/contrib/gtfs/src/Form/DirectionRevisionRevertForm.php:140

    ---------- begin diff ----------
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


33) modules/contrib/gtfs/src/Form/DirectionRevisionDeleteForm.php:72

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => format_date($this->revision->getRevisionCreationTime())]);
+    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime())]);
   }

   /**
@@ @@
     $this->DirectionStorage->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('Direction: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Direction %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Direction %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.gtfs_direction.canonical',
        ['gtfs_direction' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


34) modules/contrib/gtfs/src/Form/CalendarDateRevisionRevertTranslationForm.php:106

    ---------- begin diff ----------
@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


35) modules/contrib/gtfs/src/Form/CalendarDateRevisionRevertForm.php:150

    ---------- begin diff ----------
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


36) modules/contrib/gtfs/src/Form/AgencyRevisionRevertTranslationForm.php:106

    ---------- begin diff ----------
@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


37) modules/contrib/gtfs/src/Form/AgencyRevisionRevertForm.php:146

    ---------- begin diff ----------
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


38) modules/contrib/gtfs/src/Entity/Route.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Entity;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
    * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
    * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
    */
-  public function agency(): \Drupal\Core\Entity\EntityInterface {
+  public function agency(): EntityInterface {
     return Drupal::entityTypeManager()->getStorage('gtfs_agency')->load($this->get('agency_id')->target_id);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


39) modules/contrib/gtfs/src/Entity/GTFSEntityBase.php:106

    ---------- begin diff ----------
@@ @@
         case 'file':
         case 'image':
           $obj = $this->get($name)->get(0);
-          $value = $obj ? file_create_url(File::load($obj->target_id)->getFileUri()) : '';
+          $value = $obj ? \Drupal::service('file_url_generator')->generateAbsoluteString(File::load($obj->target_id)->getFileUri()) : '';
           break;
         default:
           $value = $this->get($name)->value;
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 39 files have been changed by Rector                                      

