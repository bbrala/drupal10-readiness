modules/contrib/datetime_extras/datetime_extras.module
modules/contrib/datetime_extras/src/Plugin/Field/FieldWidget/DateConfigurableListWidget.php
modules/contrib/datetime_extras/src/Plugin/Field/FieldWidget/DateRangeDurationWidget.php
modules/contrib/datetime_extras/src/Plugin/Field/FieldWidget/DateTimeDatelistNoTimeWidget.php
modules/contrib/datetime_extras/tests/src/Functional/DateRangeDurationWidgetTest.php
modules/contrib/datetime_extras/tests/src/Functional/LoadTest.php
modules/contrib/datetime_extras/tests/src/Kernel/DateConfigurableListWidgetTest.php
modules/contrib/datetime_extras/tests/src/Kernel/DateTimeDatelistNoTimeWidgetTest.php

2 files with changes
====================

1) modules/contrib/datetime_extras/tests/src/Functional/LoadTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/datetime_extras/tests/src/Functional/DateRangeDurationWidgetTest.php:109

    ---------- begin diff ----------
@@ @@

     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][value][date]", '', 'Start date element found.');
-    $this->assertFieldByName("{$field_name}[0][value][time]", '', 'Start time element found.');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value][date]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value][time]", '');

     $end_type_id = "edit-{$field_name}-0-end-type";
     $duration_radio = $this->xpath('//div[@id=:id]//input[@value=:value]', [':id' => $end_type_id, ':value' => 'duration']);
@@ @@
     $this->assertCount(1, $end_date_radio, 'A radio button has an "End date" choice.');

     // No JS, these should still be visible.
-    $this->assertFieldByName("{$field_name}[0][end_value][date]", '', 'End date element found.');
-    $this->assertFieldByName("{$field_name}[0][end_value][time]", '', 'End time element found.');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][end_value][date]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][end_value][time]", '');

     // Check the duration field elements.
     // Make sure granularity setting works so that  y, m and s are gone:
@@ @@
       "{$field_name}[0][value][time]" => $start_date->format($time_format),
       "{$field_name}[0][end_type]" => 'duration',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
     $id = $match[1];
-    $this->assertText(t('entity_test @id has been created.', ['@id' => $id]));
+    $this->assertSession()->pageTextContains(t('entity_test @id has been created.', ['@id' => $id]));

-    $this->assertRaw($start_date->format($date_format));
-    $this->assertRaw($start_date->format($time_format));
+    $this->assertSession()->responseContains($start_date->format($date_format));
+    $this->assertSession()->responseContains($start_date->format($time_format));
     // The end date is hidden by default, so we can't just assertRaw() for the
     // date or time. Instead, assert the field values in the widget.
     $this->assertFieldsByValue($this->xpath("//input[@id = 'edit-{$field_name}-0-duration-d']"), '0', 'Duration days is set correctly.');
@@ @@
       "{$field_name}[0][duration][h]" => 1,
       "{$field_name}[0][duration][i]" => 30,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Make sure the new start time is happening.
-    $this->assertRaw($start_date->format($date_format));
-    $this->assertRaw($start_date->format($time_format));
+    $this->assertSession()->responseContains($start_date->format($date_format));
+    $this->assertSession()->responseContains($start_date->format($time_format));

     // Check that the duration and end_value is correct:
     $this->assertFieldsByValue($this->xpath("//input[@id = 'edit-{$field_name}-0-duration-d']"), '10', 'Duration days is set correctly.');
@@ @@
       "{$field_name}[0][end_value][time]" => '08:45:00',
     ];

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

-    $this->assertRaw($start_date->format($date_format));
-    $this->assertRaw($start_date->format($time_format));
+    $this->assertSession()->responseContains($start_date->format($date_format));
+    $this->assertSession()->responseContains($start_date->format($time_format));

     // start_date is '1917-11-07 03:05:00'.
     // end_value is  '1917-11-11 08:45:00'.
@@ @@
       "{$field_name}[0][value][time]" => $start_date->format($time_format),
       "{$field_name}[0][end_type]" => 'duration',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
     $id = $match[1];
-    $this->assertText(t('entity_test @id has been created.', ['@id' => $id]));
+    $this->assertSession()->pageTextContains(t('entity_test @id has been created.', ['@id' => $id]));

-    $this->assertRaw($start_date->format($date_format));
-    $this->assertRaw($start_date->format($time_format));
+    $this->assertSession()->responseContains($start_date->format($date_format));
+    $this->assertSession()->responseContains($start_date->format($time_format));

     // None of this should have changed.
     $this->assertFieldsByValue($this->xpath("//input[@id = 'edit-{$field_name}-0-duration-y']"), '0', 'Duration years is set correctly.');
@@ @@
       "{$field_name}[0][duration][i]" => 10,
       "{$field_name}[0][duration][s]" => 45,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

-    $this->assertRaw($start_date->format($date_format));
-    $this->assertRaw($start_date->format($time_format));
+    $this->assertSession()->responseContains($start_date->format($date_format));
+    $this->assertSession()->responseContains($start_date->format($time_format));

     $this->assertFieldsByValue($this->xpath("//input[@id = 'edit-{$field_name}-0-duration-y']"), '2', 'Duration years is set correctly.');
     $this->assertFieldsByValue($this->xpath("//input[@id = 'edit-{$field_name}-0-duration-m']"), '1', 'Default duration months is set correctly.');
@@ @@
       "{$field_name}[0][value][time]" => '03:00:00',
       "{$field_name}[0][end_type]" => 'duration',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertResponse(200);
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
     $id = $match[1];
-    $this->assertText(t('entity_test @id has been created.', ['@id' => $id]));
+    $this->assertSession()->pageTextContains(t('entity_test @id has been created.', ['@id' => $id]));
     $this->assertFieldsByValue($this->xpath("//input[@id = 'edit-{$field_name}-0-end-value-date']"), '1917-11-07', 'End date is set correctly.');
     $this->assertFieldsByValue($this->xpath("//input[@id = 'edit-{$field_name}-0-end-value-time']"), '03:00:00', 'End time is set correctly.');
     $this->assertFieldsByValue($this->xpath("//input[@id = 'edit-{$field_name}-0-duration-y']"), '0', 'Duration years is empty.');
@@ @@
       "{$field_name}[0][value][time]" => '03:00:00',
       "{$field_name}[0][end_type]" => 'end_date',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertResponse(200);
-    $this->assertText(t('You must define either a duration or an end date.'));
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains(t('You must define either a duration or an end date.'));

     // Now, set the field to not be required and try again.
     $this->field->setRequired(FALSE)->save();
@@ @@
     // We should hit core's validation error about a partial daterange value.
     $this->drupalGet('entity_test/add');
     // Intentionally re-using the same $edit array from above.
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertResponse(200);
-    $this->assertText(t('This value should not be null.'));
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains(t('This value should not be null.'));

     // Completely empty values, field isn't required, should be no problem.
     $this->drupalGet('entity_test/add');
-    $this->drupalPostForm(NULL, [], t('Save'));
-    $this->assertResponse(200);
+    $this->submitForm([], t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
     $id = $match[1];
-    $this->assertText(t('entity_test @id has been created.', ['@id' => $id]));
+    $this->assertSession()->pageTextContains(t('entity_test @id has been created.', ['@id' => $id]));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 2 files have been changed by Rector                                       

