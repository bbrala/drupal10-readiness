diff --git a/src/Plugin/CKEditorPlugin/DrupalUrl.php b/src/Plugin/CKEditorPlugin/DrupalUrl.php
index 634f555..84821c7 100644
--- a/src/Plugin/CKEditorPlugin/DrupalUrl.php
+++ b/src/Plugin/CKEditorPlugin/DrupalUrl.php
@@ -25,7 +25,7 @@ class DrupalUrl extends EmbedCKEditorPluginBase {
    * {@inheritdoc}
    */
   public function getFile() {
-    return drupal_get_path('module', 'url_embed') . '/js/plugins/drupalurl/plugin.js';
+    return \Drupal::service('extension.list.module')->getPath('url_embed') . '/js/plugins/drupalurl/plugin.js';
   }
 
   /**
diff --git a/src/Plugin/EmbedType/Url.php b/src/Plugin/EmbedType/Url.php
index 07f848b..9524438 100644
--- a/src/Plugin/EmbedType/Url.php
+++ b/src/Plugin/EmbedType/Url.php
@@ -23,6 +23,6 @@ class Url extends EmbedTypeBase {
    * {@inheritdoc}
    */
   public function getDefaultIconUrl() {
-    return file_create_url(drupal_get_path('module', 'url_embed') . '/js/plugins/drupalurl/urlembed.png');
+    return \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('url_embed') . '/js/plugins/drupalurl/urlembed.png');
   }
 }
diff --git a/tests/src/Functional/ConvertUrlToEmbedFilterTest.php b/tests/src/Functional/ConvertUrlToEmbedFilterTest.php
index b9ee970..c16af23 100644
--- a/tests/src/Functional/ConvertUrlToEmbedFilterTest.php
+++ b/tests/src/Functional/ConvertUrlToEmbedFilterTest.php
@@ -28,7 +28,7 @@ class ConvertUrlToEmbedFilterTest extends BrowserTestBase {
   /**
    * Set the configuration up.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Create a page content type.
     $this->drupalCreateContentType(['type' => 'page', 'name' => 'Basic page']);
@@ -87,7 +87,7 @@ class ConvertUrlToEmbedFilterTest extends BrowserTestBase {
     $node = $this->drupalCreateNode($settings);
     $this->drupalGet('node/' . $node->id());
     $this->assertSession()->responseContains('<drupal-url data-embed-url="https://twitter.com/drupal/status/735873777683320832"></drupal-url>');
-    $this->assertNoText(strip_tags($content), 'URL does not appear in the output when embed is successful.');
+    $this->assertSession()->pageTextNotContains(strip_tags($content));
 
     $content = 'before /not-valid/url after';
     $settings = [];
@@ -123,7 +123,7 @@ class ConvertUrlToEmbedFilterTest extends BrowserTestBase {
     $node = $this->drupalCreateNode($settings);
     $this->drupalGet('node/' . $node->id());
     $this->assertSession()->responseContains('<drupal-url data-embed-url="https://twitter.com/drupal/status/735873777683320832"></drupal-url>');
-    $this->assertNoText(strip_tags($content), 'URL does not appear in the output when embed is successful.');
+    $this->assertSession()->pageTextNotContains(strip_tags($content));
 
     $content = 'before Embed https://twitter.com/drupal/status/735873777683320832 after';
     $settings = [];
diff --git a/tests/src/Functional/UrlEmbedDialogTest.php b/tests/src/Functional/UrlEmbedDialogTest.php
index 8867d26..0bc4027 100644
--- a/tests/src/Functional/UrlEmbedDialogTest.php
+++ b/tests/src/Functional/UrlEmbedDialogTest.php
@@ -18,18 +18,18 @@ class UrlEmbedDialogTest extends UrlEmbedTestBase {
     // Ensure that the route is not accessible without specifying all the
     // parameters.
     $this->getEmbedDialog();
-    $this->assertResponse(404, 'Embed dialog is not accessible without specifying filter format and embed button.');
+    $this->assertSession()->statusCodeEquals(404, 'Embed dialog is not accessible without specifying filter format and embed button.');
     $this->getEmbedDialog('custom_format');
-    $this->assertResponse(404, 'Embed dialog is not accessible without specifying embed button.');
+    $this->assertSession()->statusCodeEquals(404, 'Embed dialog is not accessible without specifying embed button.');
 
     // Ensure that the route is not accessible with an invalid embed button.
     $this->getEmbedDialog('custom_format', 'invalid_button');
-    $this->assertResponse(404, 'Embed dialog is not accessible without specifying filter format and embed button.');
+    $this->assertSession()->statusCodeEquals(404, 'Embed dialog is not accessible without specifying filter format and embed button.');
 
     // Ensure that the route is not accessible with text format without the
     // button configured.
     $this->getEmbedDialog('plain_text', 'url');
-    $this->assertResponse(404, 'Embed dialog is not accessible with a filter that does not have an editor configuration.');
+    $this->assertSession()->statusCodeEquals(404, 'Embed dialog is not accessible with a filter that does not have an editor configuration.');
 
     // Add an empty configuration for the plain_text editor configuration.
     $editor = Editor::create([
@@ -38,13 +38,13 @@ class UrlEmbedDialogTest extends UrlEmbedTestBase {
     ]);
     $editor->save();
     $this->getEmbedDialog('plain_text', 'url');
-    $this->assertResponse(403, 'Embed dialog is not accessible with a filter that does not have the embed button assigned to it.');
+    $this->assertSession()->statusCodeEquals(403, 'Embed dialog is not accessible with a filter that does not have the embed button assigned to it.');
 
     // Ensure that the route is accessible with a valid embed button.
     // 'URL' embed button is provided by default by the module and hence the
     // request must be successful.
     $this->getEmbedDialog('custom_format', 'url');
-    $this->assertResponse(200, 'Embed dialog is accessible with correct filter format and embed button.');
+    $this->assertSession()->statusCodeEquals(200, 'Embed dialog is accessible with correct filter format and embed button.');
   }
 
   /**
@@ -54,7 +54,7 @@ class UrlEmbedDialogTest extends UrlEmbedTestBase {
     // Ensure that the route is not accessible with text format without the
     // button configured.
     $this->getEmbedDialog('plain_text', 'url');
-    $this->assertResponse(404, 'Embed dialog is not accessible with a filter that does not have an editor configuration.');
+    $this->assertSession()->statusCodeEquals(404, 'Embed dialog is not accessible with a filter that does not have an editor configuration.');
     // Add an empty configuration for the plain_text editor configuration.
     $editor = Editor::create([
       'format' => 'plain_text',
@@ -62,18 +62,18 @@ class UrlEmbedDialogTest extends UrlEmbedTestBase {
     ]);
     $editor->save();
     $this->getEmbedDialog('plain_text', 'url');
-    $this->assertResponse(403, 'Embed dialog is not accessible with a filter that does not have the embed button assigned to it.');
+    $this->assertSession()->statusCodeEquals(403, 'Embed dialog is not accessible with a filter that does not have the embed button assigned to it.');
     // Ensure that the route is accessible with a valid embed button.
     // 'URL' embed button is provided by default by the module and hence the
     // request must be successful.
     $this->getEmbedDialog('custom_format', 'url');
-    $this->assertResponse(200, 'Embed dialog is accessible with correct filter format and embed button.');
+    $this->assertSession()->statusCodeEquals(200, 'Embed dialog is accessible with correct filter format and embed button.');
     // Ensure form structure of the url_embed_dialog form.
-    $this->assertFieldByName('attributes[data-embed-url]', '', 'URL field is present.');
+    $this->assertSession()->fieldValueEquals('attributes[data-embed-url]', '');
     // Check that 'Embed' is a primary button.
     $this->assertFieldByXPath('//input[contains(@class, "button--primary")]', 'Embed', 'Embed is a primary button');
     $edit = ['attributes[data-embed-url]' => static::FLICKR_URL];
-    $this->drupalPostForm(NULL, $edit, 'Embed');
+    $this->submitForm($edit, 'Embed');
   }
 
   /**
diff --git a/tests/src/Functional/UrlEmbedFilterTest.php b/tests/src/Functional/UrlEmbedFilterTest.php
index d79fb92..93414bb 100644
--- a/tests/src/Functional/UrlEmbedFilterTest.php
+++ b/tests/src/Functional/UrlEmbedFilterTest.php
@@ -30,7 +30,7 @@ class UrlEmbedFilterTest extends UrlEmbedTestBase {
     $node = $this->drupalCreateNode($settings);
     $this->drupalGet('node/' . $node->id());
     $this->assertSession()->responseContains(static::FLICKR_OUTPUT_WYSIWYG);
-    $this->assertNoText(strip_tags($content), 'Placeholder does not appear in the output when embed is successful.');
+    $this->assertSession()->pageTextNotContains(strip_tags($content));
 
     // Ensure that placeholder is not replaced when embed is unsuccessful.
     $content = '<drupal-url data-embed-url="">This placeholder should be rendered since specified URL does not exists.</drupal-url>';
@@ -40,7 +40,7 @@ class UrlEmbedFilterTest extends UrlEmbedTestBase {
     $settings['body'] = array(array('value' => $content, 'format' => 'custom_format'));
     $node = $this->drupalCreateNode($settings);
     $this->drupalGet('node/' . $node->id());
-    $this->assertNoText(strip_tags($content), 'Placeholder does not appear in the output when embed is unsuccessful.');
+    $this->assertSession()->pageTextNotContains(strip_tags($content));
 
     // Test that tag of container element is not replaced when it's not
     // <drupal-url>.
diff --git a/tests/src/Functional/UrlEmbedTestBase.php b/tests/src/Functional/UrlEmbedTestBase.php
index e1eb981..3c45c32 100644
--- a/tests/src/Functional/UrlEmbedTestBase.php
+++ b/tests/src/Functional/UrlEmbedTestBase.php
@@ -58,7 +58,7 @@ abstract class UrlEmbedTestBase extends BrowserTestBase {
   /**
    * A set up for all tests.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a page content type.
