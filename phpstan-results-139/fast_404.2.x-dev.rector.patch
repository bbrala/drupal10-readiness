diff --git a/src/EventSubscriber/Fast404EventSubscriber.php b/src/EventSubscriber/Fast404EventSubscriber.php
index 6caff8a..3f7781e 100644
--- a/src/EventSubscriber/Fast404EventSubscriber.php
+++ b/src/EventSubscriber/Fast404EventSubscriber.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\fast404\EventSubscriber;
 
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\Core\Site\Settings;
@@ -38,7 +38,7 @@ class Fast404EventSubscriber implements EventSubscriberInterface {
   /**
    * Ensures Fast 404 output returned if applicable.
    */
-  public function onKernelRequest(GetResponseEvent $event) {
+  public function onKernelRequest(RequestEvent $event) {
     $request = $this->requestStack->getCurrentRequest();
     $fast_404 = new Fast404($request);
 
@@ -56,13 +56,13 @@ class Fast404EventSubscriber implements EventSubscriberInterface {
   /**
    * Ensures Fast 404 output returned upon NotFoundHttpException.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *   The response for exception event.
    */
-  public function onNotFoundException(GetResponseForExceptionEvent $event) {
+  public function onNotFoundException(ExceptionEvent $event) {
     // Check to see if we will completely replace the Drupal 404 page.
     if (Settings::get('fast404_not_found_exception', FALSE)) {
-      if ($event->getException() instanceof NotFoundHttpException) {
+      if ($event->getThrowable() instanceof NotFoundHttpException) {
         $fast_404 = new Fast404($event->getRequest());
         $event->setResponse($fast_404->response(TRUE));
       }
diff --git a/tests/src/Functional/Fast404PathTest.php b/tests/src/Functional/Fast404PathTest.php
index ebed6d9..5006765 100644
--- a/tests/src/Functional/Fast404PathTest.php
+++ b/tests/src/Functional/Fast404PathTest.php
@@ -30,7 +30,7 @@ class Fast404PathTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create Basic page and Article node types.
@@ -90,17 +90,18 @@ class Fast404PathTest extends BrowserTestBase {
     // Create alias.
     $edit = [];
     $edit['path[0][alias]'] = '/' . $this->randomMachineName(8);
-    $this->drupalPostForm('node/' . $node1->id() . '/edit', $edit, $this->t('Save'));
+    $this->drupalGet('node/' . $node1->id() . '/edit');
+    $this->submitForm($edit, $this->t('Save'));
 
     // Confirm that the alias works.
     $this->drupalGet($edit['path[0][alias]']);
-    $this->assertText($node1->label(), 'Alias works.');
-    $this->assertResponse(200);
+    $this->assertSession()->pageTextContains($node1->label());
+    $this->assertSession()->statusCodeEquals(200);
 
     // Confirm that the alias with a trailing slash works.
     $this->drupalGet($edit['path[0][alias]'] . '/');
-    $this->assertText($node1->label(), 'Alias works.');
-    $this->assertResponse(200);
+    $this->assertSession()->pageTextContains($node1->label());
+    $this->assertSession()->statusCodeEquals(200);
 
     // Ensure terms with URL aliases are not blocked.
     $vocabulary = Vocabulary::create([
@@ -117,11 +118,12 @@ class Fast404PathTest extends BrowserTestBase {
       'description[0][value]' => $description,
       'path[0][alias]' => '/' . $this->randomMachineName(),
     ];
-    $this->drupalPostForm('admin/structure/taxonomy/manage/' . $vocabulary->id() . '/add', $edit, $this->t('Save'));
+    $this->drupalGet('admin/structure/taxonomy/manage/' . $vocabulary->id() . '/add');
+    $this->submitForm($edit, $this->t('Save'));
 
     // Confirm that the alias works.
     $this->drupalGet($edit['path[0][alias]']);
-    $this->assertText($description, 'Term can be accessed on URL alias.');
+    $this->assertSession()->pageTextContains($description);
 
   }
 
diff --git a/tests/src/Unit/Fast404EventSubscriberTest.php b/tests/src/Unit/Fast404EventSubscriberTest.php
index 4140dd0..decf3a8 100644
--- a/tests/src/Unit/Fast404EventSubscriberTest.php
+++ b/tests/src/Unit/Fast404EventSubscriberTest.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\Tests\fast404\Unit;
 
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\fast404\EventSubscriber\Fast404EventSubscriber;
 use Drupal\Tests\UnitTestCase;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Symfony\Component\HttpKernel\HttpKernelInterface;
 
@@ -20,18 +20,18 @@ class Fast404EventSubscriberTest extends UnitTestCase {
   /**
    * The event.
    *
-   * @var \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent
+   * @var \Symfony\Component\HttpKernel\Event\ExceptionEvent
    */
   protected $event;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $kernel = $this->createMock('\Symfony\Component\HttpKernel\HttpKernelInterface');
     $request = new Request();
-    $this->event = new GetResponseForExceptionEvent($kernel, $request, HttpKernelInterface::MASTER_REQUEST, new NotFoundHttpException());
+    $this->event = new ExceptionEvent($kernel, $request, HttpKernelInterface::MASTER_REQUEST, new NotFoundHttpException());
   }
 
   /**
@@ -49,7 +49,7 @@ class Fast404EventSubscriberTest extends UnitTestCase {
   public function testOnNotFoundException() {
     $subscriber = $this->getFast404EventSubscriber();
     $subscriber->onNotFoundException($this->event);
-    $e = $this->event->getException();
+    $e = $this->event->getThrowable();
     $this->assertInstanceOf(NotFoundHttpException::class, $e);
   }
 
@@ -60,9 +60,7 @@ class Fast404EventSubscriberTest extends UnitTestCase {
    *   A mock Fast404EventSubscriber object to test.
    */
   protected function getFast404EventSubscriber() {
-    $requestStackStub = $this->getMockBuilder('\Symfony\Component\HttpFoundation\RequestStack')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $requestStackStub = $this->createMock('\Symfony\Component\HttpFoundation\RequestStack');
     $subscriber = $this->getMockBuilder('\Drupal\fast404\EventSubscriber\Fast404EventSubscriber')
       ->setConstructorArgs([$requestStackStub])
       ->getMock();
diff --git a/tests/src/Unit/Fast404Test.php b/tests/src/Unit/Fast404Test.php
index f0acb71..63de1ad 100644
--- a/tests/src/Unit/Fast404Test.php
+++ b/tests/src/Unit/Fast404Test.php
@@ -19,9 +19,7 @@ class Fast404Test extends UnitTestCase {
    *   A mock fast404 object to test.
    */
   protected function getFast404() {
-    $requestStub = $this->getMockBuilder('\Symfony\Component\HttpFoundation\Request')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $requestStub = $this->createMock('\Symfony\Component\HttpFoundation\Request');
     $fast404 = $this->getMockBuilder('\Drupal\fast404\Fast404')
       ->setConstructorArgs([$requestStub])
       ->setMethods(['isCli'])
