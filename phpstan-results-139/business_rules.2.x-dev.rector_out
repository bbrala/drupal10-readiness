modules/contrib/business_rules/business_rules.drush.inc
modules/contrib/business_rules/modules/br_group/src/Plugin/BusinessRulesAction/AddNodeToGroupAction.php
modules/contrib/business_rules/src/Annotation/BusinessRulesAction.php
modules/contrib/business_rules/src/Controller/ModalController.php
modules/contrib/business_rules/src/Form/ConditionDeleteForm.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/DeleteEntity.php
modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/ConditionSet.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/FormFieldAlter.php
modules/contrib/business_rules/src/Annotation/BusinessRulesCondition.php
modules/contrib/business_rules/src/Annotation/BusinessRulesItem.php
modules/contrib/business_rules/src/Annotation/BusinessRulesReactsOn.php
modules/contrib/business_rules/src/Annotation/BusinessRulesVariable.php
modules/contrib/business_rules/src/BusinessRuleHtmlRouteProvider.php
modules/contrib/business_rules/src/Plugin/EntityReferenceSelection/BusinessRulesViewsSelection.php
modules/contrib/business_rules/tests/src/Functional/ModuleInstallTest.php
modules/contrib/business_rules/business_rules.install
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/FormValidation.php
modules/contrib/business_rules/src/Controller/ScheduleController.php
modules/contrib/business_rules/src/BusinessRuleInterface.php
modules/contrib/business_rules/src/Form/ConditionForm.php
modules/contrib/business_rules/business_rules.module
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/DisplayErrorMessageOnForm.php
modules/contrib/business_rules/modules/br_group/src/Plugin/BusinessRulesAction/AddUserToGroupAction.php
modules/contrib/business_rules/src/BusinessRuleListBuilder.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/KernelRequest.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/PageLoad.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/UserLogin.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/UserLogout.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/FetchEntityVariableAction.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOnInterface.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOnManager.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOnPlugin.php
modules/contrib/business_rules/tests/src/FunctionalJavascript/DependentFieldsView.php
modules/contrib/business_rules/src/Plugin/BusinessRulesVariable/CustomValueVariable.php
modules/contrib/business_rules/src/BusinessRulesBreadcrumb.php
modules/contrib/business_rules/src/BusinessRulesItemObject.php
modules/contrib/business_rules/src/Plugin/BusinessRulesVariable/EntityEmptyVariable.php
modules/contrib/business_rules/modules/br_group/src/Plugin/BusinessRulesAction/AssignRoleToUserAction.php
modules/contrib/business_rules/src/ConditionHtmlRouteProvider.php
modules/contrib/business_rules/src/ConditionInterface.php
modules/contrib/business_rules/src/ConditionListBuilder.php
modules/contrib/business_rules/src/Controller/ActionSetController.php
modules/contrib/business_rules/src/Form/ItemForm.php
modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/DataComparison.php
modules/contrib/business_rules/src/Plugin/BusinessRulesVariable/EntityFieldVariable.php
modules/contrib/business_rules/tests/src/FunctionalJavascript/ParagraphsAjaxSupport.php
modules/contrib/business_rules/src/Controller/ScheduleTaskController.php
modules/contrib/business_rules/modules/br_group/src/Plugin/BusinessRulesAction/RemoveNodeFromGroupAction.php
modules/contrib/business_rules/tests/src/Kernel/BusinessRulesProcessorTest.php
modules/contrib/business_rules/modules/br_group/src/Plugin/BusinessRulesAction/RemoveRoleFromUserAction.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/FillEntityVariableFields.php
modules/contrib/business_rules/src/Plugin/BusinessRulesVariable/UrlVariable.php
modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/LogicalAnd.php
modules/contrib/business_rules/src/Controller/AutocompleteTags.php
modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/LogicalOr.php
modules/contrib/business_rules/src/Plugin/BusinessRulesVariable/UserVariable.php
modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/UserHasRole.php
modules/contrib/business_rules/src/Controller/BusinessRuleController.php
modules/contrib/business_rules/src/Controller/BusinessRulesItemsController.php
modules/contrib/business_rules/modules/br_group/src/Plugin/BusinessRulesAction/RemoveUserFromGroupAction.php
modules/contrib/business_rules/src/Entity/Action.php
modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/UserVariableHasRole.php
modules/contrib/business_rules/modules/br_group/src/Plugin/BusinessRulesCondition/GroupHasNodeCondition.php
modules/contrib/business_rules/src/Plugin/BusinessRulesVariable/ViewResultVariable.php
modules/contrib/business_rules/src/Entity/BusinessRule.php
modules/contrib/business_rules/modules/br_group/src/Plugin/BusinessRulesCondition/GroupHasUserCondition.php
modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/VariableDataComparison.php
modules/contrib/business_rules/src/Form/ScheduleDeleteForm.php
modules/contrib/business_rules/src/Form/ScheduleForm.php
modules/contrib/business_rules/src/Controller/ConditionSetController.php
modules/contrib/business_rules/src/Plugin/BusinessRulesConditionManager.php
modules/contrib/business_rules/src/Plugin/Mail/BusinessRulesMail.php
modules/contrib/business_rules/modules/br_group/src/Plugin/BusinessRulesCondition/UserHasRoleGroupCondition.php
modules/contrib/business_rules/tests/src/Unit/ConfigEntityCalculateDependencyTest.php
modules/contrib/business_rules/src/Plugin/BusinessRulesConditionPlugin.php
modules/contrib/business_rules/src/ScheduleAccessControlHandler.php
modules/contrib/business_rules/src/Plugin/BusinessRulesConditionPluginInterface.php
modules/contrib/business_rules/src/Plugin/BusinessRulesItemPluginBase.php
modules/contrib/business_rules/src/ScheduleHtmlRouteProvider.php
modules/contrib/business_rules/modules/br_sms/src/Plugin/BusinessRulesAction/SendSmsMessageAction.php
modules/contrib/business_rules/src/Form/ScheduleRevisionDeleteForm.php
modules/contrib/business_rules/src/Controller/ConditionsItemsController.php
modules/contrib/business_rules/src/ScheduleListBuilder.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/LoopThroughFieldVariable.php
modules/contrib/business_rules/src/Form/ScheduleRevisionRevertForm.php
modules/contrib/business_rules/src/Entity/BusinessRulesItemBase.php
modules/contrib/business_rules/schedule.page.inc
modules/contrib/business_rules/src/ActionHtmlRouteProvider.php
modules/contrib/business_rules/src/ScheduleStorage.php
modules/contrib/business_rules/src/Form/ScheduleRevisionRevertTranslationForm.php
modules/contrib/business_rules/src/Controller/LoopThroughViewResultController.php
modules/contrib/business_rules/src/Plugin/BusinessRulesItemPluginInterface.php
modules/contrib/business_rules/src/ActionInterface.php
modules/contrib/business_rules/src/Form/ScheduleSettingsForm.php
modules/contrib/business_rules/src/ActionListBuilder.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/CronRuns.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/EntityDelete.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/EntityInsert.php
modules/contrib/business_rules/src/Form/VariableDeleteForm.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/EntityIsViewed.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/EntityLoaded.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/EntityPreSave.php
modules/contrib/business_rules/src/Ajax/UpdateFlowchartCommand.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/EntityUpdate.php
modules/contrib/business_rules/src/Plugin/BusinessRulesReactsOn/FormDisplayModeAlter.php
modules/contrib/business_rules/src/Ajax/UpdateOptionsCommand.php
modules/contrib/business_rules/src/Form/VariableForm.php
modules/contrib/business_rules/src/ScheduleStorageInterface.php
modules/contrib/business_rules/src/Plugin/BusinessRulesVariableManager.php
modules/contrib/business_rules/src/Util/BusinessRulesProcessor.php
modules/contrib/business_rules/src/Plugin/BusinessRulesVariablePlugin.php
modules/contrib/business_rules/src/Plugin/BusinessRulesVariablePluginInterface.php
modules/contrib/business_rules/src/Plugin/Derivative/BusinessRulesLocalTask.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/LoopThroughViewResult.php
modules/contrib/business_rules/src/Entity/Condition.php
modules/contrib/business_rules/src/ItemInterface.php
modules/contrib/business_rules/src/Plugin/EntityReferenceSelection/BusinessRulesItemSelection.php
modules/contrib/business_rules/src/ItemListBuilder.php
modules/contrib/business_rules/src/Entity/Schedule.php
modules/contrib/business_rules/src/ItemableInterface.php
modules/contrib/business_rules/src/Plugin/Block/BusinessRulesDebugBlock.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/PageRedirect.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/PublishContent.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/ActionSet.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/RemoveUserRole.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/SaveEntityVariableAction.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/ScheduleTask.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/AddRoleToUser.php
modules/contrib/business_rules/src/Entity/ScheduleInterface.php
modules/contrib/business_rules/src/Entity/ScheduleViewsData.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/CalculateValue.php
modules/contrib/business_rules/src/Entity/Variable.php
modules/contrib/business_rules/src/EventSubscriber/BusinessRulesListener.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/ChangeFieldInfo.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/SendEmail.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/ChangeFormDisplay.php
modules/contrib/business_rules/src/EventSubscriber/KernelRequestListener.php
modules/contrib/business_rules/src/Events/BusinessRulesDrushEvent.php
modules/contrib/business_rules/src/Events/BusinessRulesEvent.php
modules/contrib/business_rules/src/Form/ActionDeleteForm.php
modules/contrib/business_rules/src/Form/ActionForm.php
modules/contrib/business_rules/src/Form/BusinessRuleDeleteForm.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/SetFieldValue.php
modules/contrib/business_rules/src/Form/BusinessRuleForm.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/ShowMessage.php
modules/contrib/business_rules/src/Util/BusinessRulesUtil.php
modules/contrib/business_rules/src/Plugin/BusinessRulesAction/UnpublishContent.php
modules/contrib/business_rules/src/Plugin/BusinessRulesActionManager.php
modules/contrib/business_rules/src/Plugin/BusinessRulesActionPlugin.php
modules/contrib/business_rules/src/Plugin/BusinessRulesActionPluginInterface.php
modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/CheckViewResultCount.php
modules/contrib/business_rules/src/Plugin/BusinessRulesCondition/CompareNumberOfResultsBetweenTwoViews.php
modules/contrib/business_rules/src/Form/BusinessRulesSettingsForm.php
modules/contrib/business_rules/src/Util/Flowchart/Element.php
modules/contrib/business_rules/src/Util/Flowchart/Flowchart.php
modules/contrib/business_rules/src/Util/Flowchart/Matrix.php
modules/contrib/business_rules/src/VariableHtmlRouteProvider.php
modules/contrib/business_rules/src/VariableInterface.php
modules/contrib/business_rules/src/VariableListBuilder.php
modules/contrib/business_rules/src/VariableObject.php
modules/contrib/business_rules/src/VariablesSet.php

9 files with changes
====================

1) modules/contrib/business_rules/business_rules.drush.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Symfony\Contracts\EventDispatcher\Event;
 /**
  * @file
  * Business Rules module integration with Drush 8 and earlier.
@@ @@
  */

 use Drupal\business_rules\Events\BusinessRulesDrushEvent;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Implements hook_drush_init().
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector


2) modules/contrib/business_rules/tests/src/Unit/ConfigEntityCalculateDependencyTest.php:49

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $entityStorage = $this->createMock(EntityStorageInterface::class);
     $entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
     $this->businessRulesActionManager = $this->createMock(BusinessRulesActionManager::class);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/business_rules/tests/src/Kernel/BusinessRulesProcessorTest.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Set up the service container.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/business_rules/tests/src/FunctionalJavascript/ParagraphsAjaxSupport.php:48

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create terms in the vocabulary.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/business_rules/tests/src/FunctionalJavascript/DependentFieldsView.php:48

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create terms in the vocabulary.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/business_rules/src/EventSubscriber/KernelRequestListener.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\EventSubscriber;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Symfony\Component\DependencyInjection\ContainerAwareInterface;
 use Symfony\Component\DependencyInjection\ContainerAwareTrait;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpKernel\KernelEvents;

@@ @@
   /**
    * Create a new event for BusinessRules plugin KernelRequest.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   The event.
    */
   public function onKernelRequest(Event $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


7) modules/contrib/business_rules/src/EventSubscriber/BusinessRulesListener.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\EventSubscriber;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\Events\BusinessRulesDrushEvent;
 use Drupal\business_rules\Util\BusinessRulesProcessor;
@@ @@
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
@@ @@
   /**
    * Rebuilds container when dynamic rule eventsubscribers are not registered.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   The event object.
    * @param string $event_name
    *   The event name.
@@ @@
   /**
    * Run the necessary commands on terminate event.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   The terminate event.
    */
   public function onTerminate(Event $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


8) modules/contrib/business_rules/src/Entity/BusinessRulesItemBase.php:321

    ---------- begin diff ----------
@@ @@
     if (!$this->isNew()) {
       // Dispatch an event about the item deletion.
       $event = new BusinessRulesEvent($this);
-      $this->eventDispatcher->dispatch('business_rules.item_pos_delete', $event);
+      $this->eventDispatcher->dispatch($event, 'business_rules.item_pos_delete');
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/business_rules/src/Util/BusinessRulesProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\business_rules\Util;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Entity\Action;
 use Drupal\business_rules\Entity\BusinessRule;
@@ @@
 use Drupal\dbug\Dbug;
 use Drupal\Core\Messenger\MessengerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Class BusinessRulesProcessor.
@@ @@
     }

     // Dispatch a event before start the processing.
-    $this->eventDispatcher->dispatch('business_rules.before_process_event', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.before_process_event');

     if (!$event->hasArgument('variables')) {
       $event->setArgument('variables', new VariablesSet());
@@ @@
     $this->saveDebugInfo();

     // Dispatch a event after processing the business rule.
-    $this->eventDispatcher->dispatch('business_rules.after_process_event', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.after_process_event');
   }

   /**
@@ @@
     $triggered_rules = [];

     // Dispatch a event before check the triggered rules.
-    $this->eventDispatcher->dispatch('business_rules.before_check_the_triggered_rules', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.before_check_the_triggered_rules');

     foreach ($rules as $rule) {
       $rule = new BusinessRule($rule);
@@ @@
     }

     // Dispatch a event after check the triggered rules.
-    $this->eventDispatcher->dispatch('business_rules.after_check_the_triggered_rules', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.after_check_the_triggered_rules');

     return $triggered_rules;
   }
@@ @@
       $array = (object) $array;
       $event = new Event($array);
       // Dispatch a event before save debug info block.
-      $this->eventDispatcher->dispatch('business_rules.before_save_debug_info_block', $event);
+      $this->eventDispatcher->dispatch($event, 'business_rules.before_save_debug_info_block');
       $array = (array) $array;

       $key_value->set($session_id, $array);
@@ @@
    */
   public function processItems(array $items, BusinessRulesEvent $event, $parent_id) {
     // Dispatch a event before process business rule items.
-    $this->eventDispatcher->dispatch('business_rules.before_process_items', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.before_process_items');

     /** @var \Drupal\business_rules\BusinessRulesItemObject $item */
     foreach ($items as $item) {
@@ @@
     }

     // Dispatch a event after process business rule items.
-    $this->eventDispatcher->dispatch('business_rules.after_process_items', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.after_process_items');
   }

   /**
@@ @@
   public function executeAction(Action $action, BusinessRulesEvent $event) {

     // Dispatch a event before execute an action.
-    $this->eventDispatcher->dispatch('business_rules.before_execute_action', new Event($event, $action));
+    $this->eventDispatcher->dispatch(new Event($event, $action), 'business_rules.before_execute_action');

     $action_variables = $action->getVariables();
     $this->evaluateVariables($action_variables, $event);
@@ @@
     $this->debugArray['action_result'][$this->ruleBeingExecuted->id()][$action->id()] = $result;

     // Dispatch a event after execute an action.
-    $this->eventDispatcher->dispatch('business_rules.after_execute_action', new Event($event, $action));
+    $this->eventDispatcher->dispatch(new Event($event, $action), 'business_rules.after_execute_action');

     return $result;
   }
@@ @@
   public function isConditionValid(Condition $condition, BusinessRulesEvent $event) {

     // Dispatch a event before check if condition is valid.
-    $this->eventDispatcher->dispatch('business_rules.before_check_if_condition_is_valid', new Event($event, $condition));
+    $this->eventDispatcher->dispatch(new Event($event, $condition), 'business_rules.before_check_if_condition_is_valid');

     $condition_variables = $condition->getVariables();
     $this->evaluateVariables($condition_variables, $event);
@@ @@
     $result = $condition->isReverse() ? !$result : $result;

     // Dispatch a event after check if condition is valid.
-    $this->eventDispatcher->dispatch('business_rules.after_check_if_condition_is_valid', new Event($event, $condition));
+    $this->eventDispatcher->dispatch(new Event($event, $condition), 'business_rules.after_check_if_condition_is_valid');

     return $result;

@@ @@
    */
   public function evaluateVariables(VariablesSet $variablesSet, BusinessRulesEvent $event) {
     // Dispatch a event before evaluate variables.
-    $this->eventDispatcher->dispatch('business_rules.before_evaluate_variables', new Event($event, $variablesSet));
+    $this->eventDispatcher->dispatch(new Event($event, $variablesSet), 'business_rules.before_evaluate_variables');

     /** @var \Drupal\business_rules\VariableObject $variable */
     /** @var \Drupal\business_rules\VariablesSet $eventVariables */
@@ @@
     }

     // Dispatch a event after evaluate variables.
-    $this->eventDispatcher->dispatch('business_rules.after_evaluate_variables', new Event($event, $variablesSet));
+    $this->eventDispatcher->dispatch(new Event($event, $variablesSet), 'business_rules.after_evaluate_variables');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


 [OK] 9 files have been changed by Rector                                       

