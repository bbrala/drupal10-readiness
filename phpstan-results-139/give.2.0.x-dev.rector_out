modules/contrib/give/give.install
modules/contrib/give/give.post_update.php
modules/contrib/give/src/Form/Donation/DonationForm.php
modules/contrib/give/give.tokens.inc
modules/contrib/give/src/ProblemLog.php
modules/contrib/give/give_problem_log.php
modules/contrib/give/src/Controller/GiveController.php
modules/contrib/give/tests/modules/give_test/src/GiveStripe.php
modules/contrib/give/tests/modules/give_test/src/GiveTestServiceProvider.php
modules/contrib/give/tests/src/Functional/DonationTest.php
modules/contrib/give/src/DonationInterface.php
modules/contrib/give/src/Form/Donation/PaymentForm.php
modules/contrib/give/src/Entity/Donation.php
modules/contrib/give/give.module
modules/contrib/give/tests/src/Functional/GiveTestBase.php
modules/contrib/give/src/Entity/DonationAccessControlHandler.php
modules/contrib/give/src/Entity/DonationListBuilder.php
modules/contrib/give/tests/src/Functional/GiveViewBuilderTest.php
modules/contrib/give/src/Form/GiveForm/GiveFormEditForm.php
modules/contrib/give/src/Entity/DonationRouteProvider.php
modules/contrib/give/src/Entity/DonationViewBuilder.php
modules/contrib/give/tests/src/Functional/SettingsTest.php
modules/contrib/give/tests/src/Kernel/GiveFormAndDonationEntityTest.php
modules/contrib/give/src/Entity/DonationViewsData.php
modules/contrib/give/src/Entity/GiveForm.php
modules/contrib/give/src/Entity/GiveFormAccessControlHandler.php
modules/contrib/give/src/Entity/GiveFormListBuilder.php
modules/contrib/give/src/Entity/GiveFormViewBuilder.php
modules/contrib/give/src/Form/GiveForm/GiveSettings.php
modules/contrib/give/src/Form/Donation/DonationCompleteForm.php
modules/contrib/give/src/Form/Donation/DonationEditForm.php
modules/contrib/give/src/GiveFormInterface.php
modules/contrib/give/src/GiveStripe.php
modules/contrib/give/src/GiveStripeInterface.php
modules/contrib/give/src/MailHandler.php
modules/contrib/give/tests/src/Unit/MailHandlerTest.php
modules/contrib/give/src/MailHandlerInterface.php
modules/contrib/give/src/Plugin/Action/CompletePayment.php
modules/contrib/give/src/Plugin/Block/GiveFormBlock.php
modules/contrib/give/src/Plugin/Field/FieldFormatter/CentsToDollarsFormatter.php
modules/contrib/give/src/Plugin/Field/FieldFormatter/MethodFormatter.php
modules/contrib/give/src/Plugin/Field/FieldFormatter/RecurrenceFormatter.php
modules/contrib/give/src/Plugin/Field/FieldType/PaymentMethod.php
modules/contrib/give/src/Plugin/migrate/source/UcOrder.php
modules/contrib/give/src/Plugin/views/field/GiveAmount.php
modules/contrib/give/src/Plugin/views/field/GiveName.php
modules/contrib/give/src/Plugin/views/field/Recurrence.php
modules/contrib/give/src/Plugin/views/field/ViewsDateFormatSqlField.php

15 files with changes
=====================

1) modules/contrib/give/give.module:48

    ---------- begin diff ----------
@@ @@
 function give_help($route_name, RouteMatchInterface $route_match) {
   switch ($route_name) {
     case 'help.page.give':
-      $menu_page = \Drupal::moduleHandler()->moduleExists('menu_ui') ? \Drupal::url('entity.menu.collection') : '#';
-      $block_page = \Drupal::moduleHandler()->moduleExists('block') ? \Drupal::url('block.admin_display') : '#';
-      $give_page = \Drupal::url('entity.give_form.collection');
+      $menu_page = \Drupal::moduleHandler()->moduleExists('menu_ui') ? Url::fromRoute('entity.menu.collection')->toString() : '#';
+      $block_page = \Drupal::moduleHandler()->moduleExists('block') ? Url::fromRoute('block.admin_display')->toString() : '#';
+      $give_page = Url::fromRoute('entity.give_form.collection')->toString();
       $output = '';
       $output .= '<h3>' . t('About') . '</h3>';
       $output .= '<p>' . t('The Give module allows anonymous and authenticated members to pay by card (via stripe) or pledge to pay by cheque or bank transfer using configurable donation forms. For more information, see the <a href=":give">online documentation for the Give module</a>.', [':give' => 'https://www.drupal.org/project/give']) . '</p>';
    ----------- end diff -----------

Applied rules:
 * DrupalURLRector
 * ArgumentRemoverRector


2) modules/contrib/give/give.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\give\Entity\Donation;
+use Drupal\views\Entity\View;
+use Drupal\user\Entity\Role;
 /**
  * @file
  * Install, update and uninstall functions for the give module.
@@ @@
   $donation_ids = $entity_type_manager->getStorage('give_donation')->getQuery()->execute();
   $user_storage = $entity_type_manager->getStorage('user');
   foreach ($donation_ids as $did) {
-    $don = \Drupal\give\Entity\Donation::load($did);
+    $don = Donation::load($did);
     $uids = $user_storage->getQuery()->condition('name', $don->name->value)->execute();
     if ($uid = reset($uids)) {
       $don->set('uid', $uid)->save();
@@ @@

   // Delete and re-install the give_donations view from file.
   // This needs testing... Maybe cache needs clearing too.
-  if ($view = \Drupal\views\Entity\View::load('give_donations')) {
+  if ($view = View::load('give_donations')) {
     $view->delete();
     // Hattip to https://gist.github.com/mikecrittenden/2d2c6734c506d509505fa79142125757
     $conf_name = 'views.view.give_donations';
@@ @@
  * change the permission names.
  */
 function give_update_9000() {
-  foreach (\Drupal\user\Entity\Role::loadMultiple() as $role) {
+  foreach (Role::loadMultiple() as $role) {
     /** @var \Drupal\user\Entity\Role $role */
     if ($role->hasPermission('create and edit give forms')) {
       $role->grantPermission('manage give forms')->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/give/src/Form/Donation/DonationEditForm.php:69

    ---------- begin diff ----------
@@ @@
     $this->entity->save();
     $this->logger('give')->notice('The donation %label has been updated.', [
       '%label' => $this->entity->label(),
-      'link' => $this->entity->link($this->t('Edit'), 'edit-form'),
+      'link' => $this->entity->toLink($this->t('Edit'), 'edit-form')->toString(),
     ]);
   }
    ----------- end diff -----------

Applied rules:
 * EntityInterfaceLinkRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/give/src/Entity/DonationViewBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\give\Entity;

+use Drupal\Core\Field\PluginSettingsInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityViewBuilder;
 use Drupal\give\ProblemLog;
@@ @@
     return $build;
   }

-  private function getFieldFormatter(string $field_name, $formatter_id = 'basic_string') : \Drupal\Core\Field\PluginSettingsInterface {
+  private function getFieldFormatter(string $field_name, $formatter_id = 'basic_string') : PluginSettingsInterface {

     $definitions = \Drupal::service('entity_field.manager')
       ->getFieldDefinitions('give_donation', $this->bundle);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/give/give.tokens.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Render\Markup;
 /**
  * Implements hook_tokens().
  * Everything is done automatically, but we need to populate the name, from the donation owner
@@ @@
   if ($type == 'give_donation') {
     $replacements = [];
     if (isset($tokens['name']) and ($data['give_donation']->getOwnerId())) {
-      $replacements['[give_donation:name]'] = \Drupal\Core\Render\Markup::create($data['give_donation']->getOwner()->getDisplayName());
+      $replacements['[give_donation:name]'] = Markup::create($data['give_donation']->getOwner()->getDisplayName());
     }
     if (isset($tokens['amount'])) {
       $replacements['[give_donation:amount]'] = format_stripe_currency($data['give_donation']->amount->value);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


6) modules/contrib/give/tests/src/Unit/MailHandlerTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $languageManager;

@@ @@
   /**
    * Logger service.
    *
-   * @var \Psr\Log\LoggerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Psr\Log\LoggerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $logger;

@@ @@
   /**
    * Mail manager service.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Mail\MailManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $mailManager;

@@ @@
   /**
    * Give mail donations service.
    *
-   * @var \Drupal\give\MailHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\give\MailHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $giveMailHandler;

@@ @@
   /**
    * The give form entity.
    *
-   * @var \Drupal\give\GiveFormInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\give\GiveFormInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $giveForm;

@@ @@
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The user storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityStorageInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $userStorage;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
-    $this->mailManager = $this->getMock('\Drupal\Core\Mail\MailManagerInterface');
-    $this->languageManager = $this->getMock('\Drupal\Core\Language\LanguageManagerInterface');
-    $this->logger = $this->getMock('\Psr\Log\LoggerInterface');
-    $this->entityTypeManager = $this->getMock('\Drupal\Core\Entity\EntityTypeManagerInterface');
-    $this->userStorage = $this->getMock('\Drupal\Core\Entity\EntityStorageInterface');
+    $this->mailManager = $this->createMock('\Drupal\Core\Mail\MailManagerInterface');
+    $this->languageManager = $this->createMock('\Drupal\Core\Language\LanguageManagerInterface');
+    $this->logger = $this->createMock('\Psr\Log\LoggerInterface');
+    $this->entityTypeManager = $this->createMock('\Drupal\Core\Entity\EntityTypeManagerInterface');
+    $this->userStorage = $this->createMock('\Drupal\Core\Entity\EntityStorageInterface');
     $this->entityTypeManager->expects($this->any())
       ->method('getStorage')
       ->with('user')
@@ @@
    * @param string $mail_address
    *   The mail address of the user.
    *
-   * @return \Drupal\Core\Session\AccountInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @return \Drupal\Core\Session\AccountInterface|\PHPUnit\Framework\MockObject\MockObject
    *   Mock donor for testing.
    */
   protected function getMockDonor($anonymous = TRUE, $mail_address = 'anonymous@drupal.org') {
-    $donor = $this->getMock('\Drupal\Core\Session\AccountInterface');
+    $donor = $this->createMock('\Drupal\Core\Session\AccountInterface');
     $donor->expects($this->once())
       ->method('isAnonymous')
       ->willReturn($anonymous);
@@ @@
    * @param bool $recurring
    *   TRUE if a donation should recur monthly, FALSE if not.
    *
-   * @return \Drupal\give\DonationInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @return \Drupal\give\DonationInterface|\PHPUnit\Framework\MockObject\MockObject
    *   Mock donation for testing.
    */
   protected function getAnonymousMockDonation(array $recipients, $auto_reply, $recurring = FALSE) {
-    $donation = $this->getMock('\Drupal\give\DonationInterface');
+    $donation = $this->createMock('\Drupal\give\DonationInterface');
     $donation->expects($this->any())
       ->method('getDonorName')
       ->willReturn('Anonymous');
@@ @@
    * @param bool $recurring
    *   TRUE if a donation should recur monthly, FALSE if not.
    *
-   * @return \Drupal\give\DonationInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @return \Drupal\give\DonationInterface|\PHPUnit\Framework\MockObject\MockObject
    *   Mock donation for testing.
    */
   protected function getAuthenticatedMockDonation($recurring = FALSE) {
-    $donation = $this->getMock('\Drupal\give\DonationInterface');
+    $donation = $this->createMock('\Drupal\give\DonationInterface');
     $donation->expects($this->once())
       ->method('recurring')
       ->willReturn($recurring);
-    $recipient = $this->getMock('\Drupal\user\UserInterface');
+    $recipient = $this->createMock('\Drupal\user\UserInterface');
     $recipient->expects($this->once())
       ->method('getEmail')
       ->willReturn('user2@drupal.org');
@@ @@
    * @param string $reply
    *   A reply receipt to send to the donor.
    *
-   * @return \Drupal\give\GiveFormInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @return \Drupal\give\GiveFormInterface|\PHPUnit\Framework\MockObject\MockObject
    *   Mock donation for testing.
    */
   protected function getMockGiveForm(array $recipients, $reply) {
-    $give_form = $this->getMock('\Drupal\give\GiveFormInterface');
+    $give_form = $this->createMock('\Drupal\give\GiveFormInterface');
     $give_form->expects($this->once())
       ->method('getRecipients')
       ->willReturn($recipients);
    ----------- end diff -----------

Applied rules:
 * UnitTestCaseGetMockRector
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/give/tests/src/Kernel/GiveFormAndDonationEntityTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['give', 'give_test']);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/give/tests/src/Functional/SettingsTest.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * Test that the config page is working.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create and login administrative user.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/give/tests/src/Functional/GiveViewBuilderTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create Article node type.
@@ @@
     $edit[$title_key] = $this->randomMachineName(8);
     $edit[$body_key] = $this->randomMachineName(16);
     $edit[$give_key] = 'test_id';
-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, t('Save'));
     // Check that the node exists in the database.
     $node = $this->drupalGetNodeByTitle($edit[$title_key]);
     $this->drupalGet('node/' . $node->id());
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/give/tests/src/Functional/GiveTestBase.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser([
@@ @@
     $edit['reply'] = $reply;
     $edit['selected'] = ($selected ? TRUE : FALSE);
     $edit['subject'] = $this->randomString();
-    $this->drupalPostForm('admin/structure/give/add', $edit, "edit-submit");
+    $this->drupalGet('admin/structure/give/add');
+    $this->submitForm($edit, "edit-submit");
     $this->assertTrue($this->getSession()->getPage()->hasContent('Give form test_label has been added.'));
   }

@@ @@
     $edit['mail'] = $mail;
     $edit['amount'] = $amount;
     if ($id == $this->config('give.settings')->get('default_form')) {
-      $this->drupalPostForm('give', $edit, t('Give'));
+      $this->drupalGet('give');
+      $this->submitForm($edit, t('Give'));
     }
     else {
-      $this->drupalPostForm('give/' . $id, $edit, t('Give'));
+      $this->drupalGet('give/' . $id);
+      $this->submitForm($edit, t('Give'));
     }
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/give/tests/src/Functional/DonationTest.php:163

    ---------- begin diff ----------
@@ @@
     $this->assertSession()->fieldValueEquals('edit-amount', 22);

     // Submit should redirect back to listing.
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));
     $this->assertSession()->addressEquals('admin/structure/give/donations');

     // Delete the donation.
     $this->clickLink(t('Delete'));
-    $this->drupalPostForm(NULL, [], t('Delete'));
+    $this->submitForm([], t('Delete'));
     // Make sure no donations are available.
     $this->assertSession()->pageTextContains('There are no recorded donations yet.');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/give/src/Plugin/views/field/ViewsDateFormatSqlField.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\give\Plugin\views\field;

+use Drupal\Core\Render\Markup;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\ResultRow;
 use Drupal\views\Plugin\views\field\EntityField;
@@ @@
       // Render date values from SQL result.
       $alias = $this->aliases[$this->definition['field_name']];
       //return [['rendered' => $values->{$alias}]];
-      return [['rendered' => ['#markup' => \Drupal\Core\Render\Markup::create($values->{$alias})]]];
+      return [['rendered' => ['#markup' => Markup::create($values->{$alias})]]];
     }
     // Code from parent function.
     if (!$build_list) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/give/src/Plugin/migrate/source/UcOrder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\give\Plugin\migrate\source;

+use Drupal\migrate_drupal\Plugin\migrate\source\d7\FieldableEntity;
 /**
  * Drupal 7 Ubercart orders
  *
@@ @@
  *   source_module = "uc_order"
  * )
  */
-class UcOrder extends \Drupal\migrate_drupal\Plugin\migrate\source\d7\FieldableEntity {
+class UcOrder extends FieldableEntity {

   /**
    * {@inheritdoc}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/give/src/Form/GiveForm/GiveSettings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\give\Form\GiveForm;

+use Drupal\Core\Url;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
     $form['currency_symbol'] = [
       '#type' => 'select',
       '#title' => $this->t('Currency symbol'),
-      '#description' => $this->t('These are the currencies accepted by Stripe. You need to specify which you accept at :url', [':url' => \Drupal\Core\Url::fromUri('https://dashboard.stripe.com/settings/settlement_currencies')->toString()]),
+      '#description' => $this->t('These are the currencies accepted by Stripe. You need to specify which you accept at :url', [':url' => Url::fromUri('https://dashboard.stripe.com/settings/settlement_currencies')->toString()]),
       '#default_value' => $config->get('currency_symbol'),
       '#options' => [// these should probably be translatable.
         'gbp' => 'British Pound',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/give/src/Form/Donation/PaymentForm.php:160

    ---------- begin diff ----------
@@ @@
       ];
       if ($give_settings->get('log_problems')) {
         if (\Drupal::VERSION < 9.3) {
-          $mod_path = drupal_get_path('module', 'give');// will be deprecated in d10;
+          $mod_path = \Drupal::service('extension.list.module')->getPath('give');// will be deprecated in d10;
         }
         else {
           $mod_path = \Drupal::service('extension.path.resolver')->getPath('module', 'give');
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 15 files have been changed by Rector                                      

