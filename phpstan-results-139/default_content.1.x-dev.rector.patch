diff --git a/src/Event/ExportEvent.php b/src/Event/ExportEvent.php
index d70b130..c16f1c8 100644
--- a/src/Event/ExportEvent.php
+++ b/src/Event/ExportEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\default_content\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines event fired when content is exported.
diff --git a/src/Event/ImportEvent.php b/src/Event/ImportEvent.php
index 0b486f4..16d2de7 100644
--- a/src/Event/ImportEvent.php
+++ b/src/Event/ImportEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\default_content\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Defines event fired when content is imported.
diff --git a/src/Exporter.php b/src/Exporter.php
index e7d062b..43a424b 100644
--- a/src/Exporter.php
+++ b/src/Exporter.php
@@ -150,7 +150,7 @@ class Exporter implements ExporterInterface {
     $this->linkManager->setLinkDomain($this->linkDomain);
 
     $return = $this->serializer->serialize($entity, 'hal_json', ['json_encode_options' => JSON_PRETTY_PRINT]);
-    $this->eventDispatcher->dispatch(DefaultContentEvents::EXPORT, new ExportEvent($entity));
+    $this->eventDispatcher->dispatch(new ExportEvent($entity), DefaultContentEvents::EXPORT);
 
     // Reset the link domain and the current user, if needed.
     $this->linkManager->setLinkDomain(FALSE);
diff --git a/src/Importer.php b/src/Importer.php
index 600ed5c..096cf2e 100644
--- a/src/Importer.php
+++ b/src/Importer.php
@@ -116,7 +116,7 @@ class Importer implements ImporterInterface {
    */
   public function importContent($module) {
     $created = [];
-    $folder = drupal_get_path('module', $module) . "/content";
+    $folder = \Drupal::service('extension.list.module')->getPath($module) . "/content";
 
     if (file_exists($folder)) {
       $root_user = $this->entityTypeManager->getStorage('user')->load(1);
@@ -190,7 +190,7 @@ class Importer implements ImporterInterface {
           $created[$entity->uuid()] = $entity;
         }
       }
-      $this->eventDispatcher->dispatch(DefaultContentEvents::IMPORT, new ImportEvent($created, $module));
+      $this->eventDispatcher->dispatch(new ImportEvent($created, $module), DefaultContentEvents::IMPORT);
       $this->accountSwitcher->switchBack();
     }
     // Reset the tree.
diff --git a/tests/src/Functional/DefaultContentTest.php b/tests/src/Functional/DefaultContentTest.php
index d468668..ae6c7c5 100644
--- a/tests/src/Functional/DefaultContentTest.php
+++ b/tests/src/Functional/DefaultContentTest.php
@@ -33,7 +33,7 @@ class DefaultContentTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Create user 2 with the correct UUID.
     User::create([
@@ -70,7 +70,7 @@ class DefaultContentTest extends BrowserTestBase {
     $extensions['module'] = module_config_sort($extensions['module']);
     $sync->write('core.extension', $extensions);
     // Slightly hacky but we need the config from the test module too.
-    $module_storage = new FileStorage(drupal_get_path('module', 'default_content_test') . '/config/install');
+    $module_storage = new FileStorage(\Drupal::service('extension.list.module')->getPath('default_content_test') . '/config/install');
     foreach ($module_storage->listAll() as $name) {
       $sync->write($name, $module_storage->read($name));
     }
diff --git a/tests/src/Kernel/ExporterIntegrationTest.php b/tests/src/Kernel/ExporterIntegrationTest.php
index b6fb8a4..c8d8639 100644
--- a/tests/src/Kernel/ExporterIntegrationTest.php
+++ b/tests/src/Kernel/ExporterIntegrationTest.php
@@ -35,7 +35,7 @@ class ExporterIntegrationTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('system', ['sequences']);
@@ -68,8 +68,8 @@ class ExporterIntegrationTest extends KernelTestBase {
     $exported_decoded = json_decode($exported);
 
     // Ensure the proper UUID is part of it.
-    $this->assertEqual($exported_decoded->uuid[0]->value, $term->uuid());
-    $this->assertEqual($exported, $expected);
+    $this->assertEquals($exported_decoded->uuid[0]->value, $term->uuid());
+    $this->assertEquals($exported, $expected);
 
     // Tests export of taxonomy parent field.
     // @todo Get rid of after https://www.drupal.org/node/2543726
@@ -122,15 +122,15 @@ class ExporterIntegrationTest extends KernelTestBase {
     $exported_by_entity_type = $this->exporter->exportContentWithReferences('node', $node->id());
 
     // Ensure that the node type is not tryed to be exported.
-    $this->assertEqual(array_keys($exported_by_entity_type), ['node', 'user']);
+    $this->assertEquals(array_keys($exported_by_entity_type), ['node', 'user']);
 
     // Ensure the right UUIDs are exported.
-    $this->assertEqual([$node->uuid()], array_keys($exported_by_entity_type['node']));
-    $this->assertEqual([$user->uuid()], array_keys($exported_by_entity_type['user']));
+    $this->assertEquals([$node->uuid()], array_keys($exported_by_entity_type['node']));
+    $this->assertEquals([$user->uuid()], array_keys($exported_by_entity_type['user']));
 
     // Compare the actual serialized data.
-    $this->assertEqual(reset($exported_by_entity_type['node']), $expected_node);
-    $this->assertEqual(reset($exported_by_entity_type['user']), $expected_user);
+    $this->assertEquals(reset($exported_by_entity_type['node']), $expected_node);
+    $this->assertEquals(reset($exported_by_entity_type['user']), $expected_user);
 
     // Ensure no recursion on export.
     $field_name = 'field_test_self_ref';
@@ -183,7 +183,7 @@ class ExporterIntegrationTest extends KernelTestBase {
     $expected_node = $serializer->serialize($node, 'hal_json', ['json_encode_options' => JSON_PRETTY_PRINT]);
 
     $content = $this->exporter->exportModuleContent('default_content_export_test');
-    $this->assertEqual($content['node'][$test_uuid], $expected_node);
+    $this->assertEquals($content['node'][$test_uuid], $expected_node);
   }
 
   /**
