modules/contrib/panelizer/panelizer.api.php
modules/contrib/panelizer/src/Controller/PanelizerPanelsIPEController.php
modules/contrib/panelizer/src/Plugin/PanelizerEntityInterface.php
modules/contrib/panelizer/panelizer.install
modules/contrib/panelizer/src/Plugin/PanelizerEntityManager.php
modules/contrib/panelizer/panelizer.module
modules/contrib/panelizer/tests/src/Functional/PanelizerTestTrait.php
modules/contrib/panelizer/src/Exception/PanelizerException.php
modules/contrib/panelizer/src/Form/PanelizerDefaultDelete.php
modules/contrib/panelizer/src/Plugin/PanelizerEntityManagerInterface.php
modules/contrib/panelizer/src/Plugin/PanelsPattern/PanelizerPattern.php
modules/contrib/panelizer/src/Plugin/PanelsStorage/PanelizerDefaultPanelsStorage.php
modules/contrib/panelizer/src/Form/PanelizerDefaultSelect.php
modules/contrib/panelizer/src/Form/PanelizerWizardContextConfigure.php
modules/contrib/panelizer/src/Form/PanelizerWizardContextDeleteForm.php
modules/contrib/panelizer/src/Form/PanelizerWizardContextForm.php
modules/contrib/panelizer/src/Plugin/PanelsStorage/PanelizerFieldPanelsStorage.php
modules/contrib/panelizer/panelizer.post_update.php
modules/contrib/panelizer/tests/src/Functional/PanelizerUserFunctionalTest.php
modules/contrib/panelizer/src/Form/PanelizerWizardGeneralForm.php
modules/contrib/panelizer/panelizer_quickedit/panelizer_quickedit.module
modules/contrib/panelizer/src/Wizard/PanelizerAddWizard.php
modules/contrib/panelizer/panelizer_quickedit/tests/src/FunctionalJavascript/PanelizerQuickEditTest.php
modules/contrib/panelizer/src/Menu/AddDefaultLocalAction.php
modules/contrib/panelizer/src/Panelizer.php
modules/contrib/panelizer/src/Wizard/PanelizerEditWizard.php
modules/contrib/panelizer/tests/src/Functional/Update/PanelizerLayoutIDUpdateTest.php
modules/contrib/panelizer/tests/src/FunctionalJavascript/PanelizerIntegrationTest.php
modules/contrib/panelizer/tests/src/Unit/PanelizerDefaultPanelsStorageTest.php
modules/contrib/panelizer/src/Access/DefaultAccess.php
modules/contrib/panelizer/src/Wizard/PanelizerWizardBase.php
modules/contrib/panelizer/src/Access/PanelizerDefaultsDisplayAccess.php
modules/contrib/panelizer/src/Access/PanelizerUIAccess.php
modules/contrib/panelizer/src/Access/ViewModeAccessCheck.php
modules/contrib/panelizer/src/Annotation/PanelizerEntity.php
modules/contrib/panelizer/tests/modules/panelizer_test/src/Plugin/Block/PanelizerTestBlock.php
modules/contrib/panelizer/tests/src/Functional/PanelizerAddDefaultLinkTest.php
modules/contrib/panelizer/tests/src/Functional/PanelizerDefaultsTest.php
modules/contrib/panelizer/src/PanelizerEntityViewBuilder.php
modules/contrib/panelizer/tests/src/Functional/PanelizerIpeTest.php
modules/contrib/panelizer/tests/src/Unit/PanelizerEntityViewBuilderTest.php
modules/contrib/panelizer/src/PanelizerInterface.php
modules/contrib/panelizer/src/Plugin/AddDefaultLinkDeriver.php
modules/contrib/panelizer/src/Plugin/Field/FieldFormatter/PanelizerFormatter.php
modules/contrib/panelizer/src/Plugin/Field/FieldType/PanelizerFieldType.php
modules/contrib/panelizer/src/Plugin/Field/FieldWidget/PanelizerWidget.php
modules/contrib/panelizer/tests/src/Functional/PanelizerNodeFunctionalTest.php
modules/contrib/panelizer/src/Plugin/PanelizerEntity/PanelizerNode.php
modules/contrib/panelizer/src/Plugin/PanelizerEntity/PanelizerTerm.php
modules/contrib/panelizer/tests/src/Unit/PanelizerFieldPanelsStorageTest.php
modules/contrib/panelizer/src/Plugin/PanelizerEntity/PanelizerUser.php
modules/contrib/panelizer/tests/src/Functional/PanelizerNodeTranslationsTest.php
modules/contrib/panelizer/src/Plugin/PanelizerEntityBase.php
modules/contrib/panelizer/tests/src/Functional/PanelizerTermFunctionalTest.php
modules/contrib/panelizer/tests/src/Unit/PanelizerPatternTest.php

14 files with changes
=====================

1) modules/contrib/panelizer/panelizer_quickedit/tests/src/FunctionalJavascript/PanelizerQuickEditTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'page', 'name' => 'Page']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/panelizer/panelizer.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Developer documentation.
@@ @@
  * @param string $langcode
  *   The langcode.
  */
-function hook_panelizer_pre_view_builder_alter(&$view_mode, \Drupal\Core\Entity\EntityInterface $entity, &$langcode) {
+function hook_panelizer_pre_view_builder_alter(&$view_mode, EntityInterface $entity, &$langcode) {
   if ($entity->bundle() == 'page') {
     $view_mode = 'my_custom_view_mode';
   }
@@ @@

 /**
  * @} End of "addtogroup hooks".
- */
+ */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/panelizer/tests/src/Functional/PanelizerTermFunctionalTest.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     Vocabulary::create([
@@ @@
       'panelizer[enable]' => TRUE,
       'panelizer[custom]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertResponse(200);
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
     $this->rebuildAll();
   }

@@ @@
     $term = $this->createTerm();

     $out = $this->drupalGet('taxonomy/term/' . $term->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->verbose($out);
     $elements = $this->xpath('//*[@id="panels-ipe-content"]');
     if (is_array($elements)) {
-      $this->assertIdentical(count($elements), 1);
+      $this->assertSame(count($elements), 1);
     }
     else {
       $this->fail('Could not parse page content.');
@@ @@
     }

     // Check that the block we added is visible.
-    $this->assertText('Panelizer test');
-    $this->assertText('Abracadabra');
+    $this->assertSession()->pageTextContains('Panelizer test');
+    $this->assertSession()->pageTextContains('Abracadabra');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/panelizer/tests/src/Functional/PanelizerNodeTranslationsTest.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->loginUser1();
@@ @@

     // Enter the wizard.
     $this->drupalGet("admin/structure/panelizer/edit/{$this->entityTypeId}__{$this->bundle}__default__default");
-    $this->assertResponse(200);
-    $this->assertText('Wizard Information');
-    $this->assertField('edit-label');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('Wizard Information');
+    $this->assertSession()->fieldExists('edit-label');

     // Contexts step.
     $this->clickLink('Contexts');
-    $this->assertText('@panelizer.entity_context:entity', 'The current entity context is present.');
+    $this->assertSession()->pageTextContains('@panelizer.entity_context:entity');

     // Layout selection step.
     $this->clickLink('Layout');
@@ @@
     $edit = [
       'region' => 'content',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Add block'));
-    $this->assertResponse(200);
+    $this->submitForm($edit, t('Add block'));
+    $this->assertSession()->statusCodeEquals(200);

     // Finish the wizard.
-    $this->drupalPostForm(NULL, [], t('Update and save'));
-    $this->assertResponse(200);
+    $this->submitForm([], t('Update and save'));
+    $this->assertSession()->statusCodeEquals(200);
     // Confirm this returned to the main wizard page.
-    $this->assertText('Wizard Information');
-    $this->assertField('edit-label');
+    $this->assertSession()->pageTextContains('Wizard Information');
+    $this->assertSession()->fieldExists('edit-label');

     // Return to the Manage Display page, which is where the Cancel button
     // currently sends you. That's a UX WTF and should be fixed...
-    $this->drupalPostForm(NULL, [], t('Cancel'));
-    $this->assertResponse(200);
+    $this->submitForm([], t('Cancel'));
+    $this->assertSession()->statusCodeEquals(200);

     // Confirm the page is back to the content type settings page.
-    $this->assertFieldChecked('edit-panelizer-custom');
+    $this->assertSession()->checkboxChecked('edit-panelizer-custom');

     // Now change and save the general setting.
     $edit = [
       'panelizer[custom]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertResponse(200);
-    $this->assertNoFieldChecked('edit-panelizer-custom');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->checkboxNotChecked('edit-panelizer-custom');

     // Add another block at the Content step and then save changes.
     $this->drupalGet("admin/structure/panelizer/edit/{$this->entityTypeId}__{$this->bundle}__default__default/content");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->clickLink('Add new block');
     $this->clickLink('Body');
     $edit = [
       'region' => 'content',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Add block'));
-    $this->assertResponse(200);
-    $this->assertText("entity_field:{$this->entityTypeId}:body", 'The body block was added successfully.');
-    $this->drupalPostForm(NULL, [], t('Save'));
-    $this->assertResponse(200);
+    $this->submitForm($edit, t('Add block'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains("entity_field:{$this->entityTypeId}:body");
+    $this->submitForm([], t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
     $this->clickLink('Content', 1);
-    $this->assertText("entity_field:{$this->entityTypeId}:body", 'The body block was saved successfully.');
+    $this->assertSession()->pageTextContains("entity_field:{$this->entityTypeId}:body");

     // Check that the Manage Display tab changed now that Panelizer is set up.
     // Also, the field display table should be hidden.
-    $this->assertNoRaw('<div id="field-display-overview-wrapper">');
+    $this->assertSession()->responseNotContains('<div id="field-display-overview-wrapper">');

     // Disable Panelizer for the default display mode. This should bring back
     // the field overview table at Manage Display and not display the link to
     // edit the default Panelizer layout.
     $this->unpanelize($this->bundle);
-    $this->assertNoLinkByHref("admin/structure/panelizer/edit/{$this->entityTypeId}__{$this->bundle}__default");
-    $this->assertRaw('<div id="field-display-overview-wrapper">');
+    $this->assertSession()->linkByHrefNotExists("admin/structure/panelizer/edit/{$this->entityTypeId}__{$this->bundle}__default");
+    $this->assertSession()->responseContains('<div id="field-display-overview-wrapper">');
   }

   /**
@@ @@
       ],
     ]);
     $out = $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->verbose($out);
     $elements = $this->xpath('//*[@id="panels-ipe-content"]');
     if (is_array($elements)) {
-      $this->assertIdentical(count($elements), 1);
+      $this->assertSame(count($elements), 1);
     }
     else {
       $this->fail('Could not parse page content.');
@@ @@
     }

     // Check that the block we added is visible.
-    $this->assertText('Panelizer test');
-    $this->assertText('Abracadabra');
+    $this->assertSession()->pageTextContains('Panelizer test');
+    $this->assertSession()->pageTextContains('Abracadabra');

     // Load the translation page.
     $this->clickLink('Translate');
-    $this->assertText('English (Original language)');
-    $this->assertText('Published');
-    $this->assertText('Not translated');
+    $this->assertSession()->pageTextContains('English (Original language)');
+    $this->assertSession()->pageTextContains('Published');
+    $this->assertSession()->pageTextContains('Not translated');
   }

   // @todo Confirm that the different languages of a translated node are loaded properly when using a default display.
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertFieldRector
 * AssertIdenticalRector
 * AssertNoFieldCheckedRector
 * AssertNoLinkByHrefRector
 * AssertNoRawRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/panelizer/tests/src/Functional/PanelizerNodeFunctionalTest.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->setupContentType();
@@ @@
   public function testWizardUI() {
     // Enter the wizard.
     $this->drupalGet('admin/structure/panelizer/edit/node__page__default__default');
-    $this->assertResponse(200);
-    $this->assertText('Wizard Information');
-    $this->assertField('edit-label');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('Wizard Information');
+    $this->assertSession()->fieldExists('edit-label');

     // Contexts step.
     $this->clickLink('Contexts');
-    $this->assertText('@panelizer.entity_context:entity', 'The current entity context is present.');
+    $this->assertSession()->pageTextContains('@panelizer.entity_context:entity');

     // Layout selection step.
     $this->clickLink('Layout');
@@ @@
     $edit = [
       'region' => 'content',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Add block'));
-    $this->assertResponse(200);
+    $this->submitForm($edit, t('Add block'));
+    $this->assertSession()->statusCodeEquals(200);

     // Finish the wizard.
-    $this->drupalPostForm(NULL, [], t('Update and save'));
-    $this->assertResponse(200);
+    $this->submitForm([], t('Update and save'));
+    $this->assertSession()->statusCodeEquals(200);
     // Confirm this returned to the main wizard page.
-    $this->assertText('Wizard Information');
-    $this->assertField('edit-label');
+    $this->assertSession()->pageTextContains('Wizard Information');
+    $this->assertSession()->fieldExists('edit-label');

     // Return to the Manage Display page, which is where the Cancel button
     // currently sends you. That's a UX WTF and should be fixed...
-    $this->drupalPostForm(NULL, [], t('Cancel'));
-    $this->assertResponse(200);
+    $this->submitForm([], t('Cancel'));
+    $this->assertSession()->statusCodeEquals(200);

     // Confirm the page is back to the content type settings page.
-    $this->assertFieldChecked('edit-panelizer-custom');
+    $this->assertSession()->checkboxChecked('edit-panelizer-custom');

     // Now change and save the general setting.
     $edit = [
       'panelizer[custom]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertResponse(200);
-    $this->assertNoFieldChecked('edit-panelizer-custom');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->checkboxNotChecked('edit-panelizer-custom');

     // Add another block at the Content step and then save changes.
     $this->drupalGet('admin/structure/panelizer/edit/node__page__default__default/content');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->clickLink('Add new block');
     $this->clickLink('Body');
     $edit = [
       'region' => 'content',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Add block'));
-    $this->assertResponse(200);
-    $this->assertText('entity_field:node:body', 'The body block was added successfully.');
-    $this->drupalPostForm(NULL, [], t('Save'));
-    $this->assertResponse(200);
+    $this->submitForm($edit, t('Add block'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('entity_field:node:body');
+    $this->submitForm([], t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
     $this->clickLink('Content');
-    $this->assertText('entity_field:node:body', 'The body block was saved successfully.');
+    $this->assertSession()->pageTextContains('entity_field:node:body');

     // Check that the Manage Display tab changed now that Panelizer is set up.
     // Also, the field display table should be hidden.
-    $this->assertNoRaw('<div id="field-display-overview-wrapper">');
+    $this->assertSession()->responseNotContains('<div id="field-display-overview-wrapper">');

     // Disable Panelizer for the default display mode. This should bring back
     // the field overview table at Manage Display and not display the link to
     // edit the default Panelizer layout.
     $this->unpanelize('page');
-    $this->assertNoLinkByHref('admin/structure/panelizer/edit/node__page__default');
-    $this->assertRaw('<div id="field-display-overview-wrapper">');
+    $this->assertSession()->linkByHrefNotExists('admin/structure/panelizer/edit/node__page__default');
+    $this->assertSession()->responseContains('<div id="field-display-overview-wrapper">');
   }

   /**
@@ @@
     // Create a node, and check that the IPE is visible on it.
     $node = $this->drupalCreateNode(['type' => 'page']);
     $out = $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->verbose($out);
     $elements = $this->xpath('//*[@id="panels-ipe-content"]');
     if (is_array($elements)) {
-      $this->assertIdentical(count($elements), 1);
+      $this->assertSame(count($elements), 1);
     }
     else {
       $this->fail('Could not parse page content.');
@@ @@
     }

     // Check that the block we added is visible.
-    $this->assertText('Panelizer test');
-    $this->assertText('Abracadabra');
+    $this->assertSession()->pageTextContains('Panelizer test');
+    $this->assertSession()->pageTextContains('Abracadabra');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertFieldRector
 * AssertIdenticalRector
 * AssertNoFieldCheckedRector
 * AssertNoLinkByHrefRector
 * AssertNoRawRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/panelizer/tests/src/Functional/PanelizerIpeTest.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Reload all caches.
@@ @@

     // Load the test node.
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Confirm the JSON Drupal settings are appropriate.
     $drupalSettings = NULL;
     $matches = [];
-    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getRawContent(), $matches)) {
+    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getSession()->getPage()->getContent(), $matches)) {
       $drupalSettings = Json::decode($matches[1]);
       $this->verbose('<pre>' . print_r($drupalSettings, TRUE) . '</pre>');
     }
@@ @@
       $this->assertTrue(isset($drupalSettings['panelizer']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_type_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['revert']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['save_default']));
@@ @@

     // Load the test node.
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Confirm the appropriate DOM structures are present for the IPE.
     $drupalSettings = NULL;
     $matches = [];
-    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getRawContent(), $matches)) {
+    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getSession()->getPage()->getContent(), $matches)) {
       $drupalSettings = Json::decode($matches[1]);
       $this->verbose('<pre>' . print_r($drupalSettings, TRUE) . '</pre>');
     }
@@ @@
       $this->assertTrue(isset($drupalSettings['panelizer']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_type_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['revert']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['save_default']));
@@ @@
       $this->assertTrue(isset($drupalSettings['panelizer']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_type_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['revert']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['save_default']));
@@ @@
       $this->assertTrue(isset($drupalSettings['panelizer']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_type_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['revert']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['save_default']));
@@ @@
       $this->assertTrue(isset($drupalSettings['panelizer']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_type_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['revert']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['save_default']));
@@ @@

     // Load the test node.
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Extract the drupalSettings structure and return it.
     $drupalSettings = NULL;
     $matches = [];
-    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getRawContent(), $matches)) {
+    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getSession()->getPage()->getContent(), $matches)) {
       $drupalSettings = Json::decode($matches[1]);
       $this->verbose('<pre>' . print_r($drupalSettings, TRUE) . '</pre>');
     }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertResponseRector
 * GetRawContentRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/panelizer/tests/src/Functional/PanelizerDefaultsTest.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Place the local actions block in the theme so that we can assert the
@@ @@
       // to (the panelizer[allow] checkbox in the view display configuration). By
       // default, they aren't.
       $this->drupalGet('node/add/page');
-      $this->assertResponse(200);
-      $this->assertNoFieldByName("panelizer['{$i}][default]");
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->fieldValueNotEquals("panelizer['{$i}][default]", '');
       // Allow user to select panelized modes in UI.
       $this->panelize('page', $view_mode_name, [
         'panelizer[custom]' => TRUE,
@@ @@
         'panelizer[allow]' => TRUE,
       ]);
       $this->drupalGet('node/add/page');
-      $this->assertResponse(200);
-      $this->assertFieldByName("panelizer[{$i}][default]");
-      $this->assertOption("edit-panelizer-{$i}-default", 'default');
-      $this->assertOption("edit-panelizer-{$i}-default", $panelizer_id);
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->fieldExists("panelizer[{$i}][default]");
+      $this->assertSession()->optionExists("edit-panelizer-{$i}-default", 'default');
+      $this->assertSession()->optionExists("edit-panelizer-{$i}-default", $panelizer_id);
       // Clean up.
       $this->deletePanelizerDefault('page', $view_mode_name, $panelizer_id);
       $this->assertDefaultNotExists('page', $view_mode_name, $panelizer_id);
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * AssertOptionRector
 * AssertResponseRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/panelizer/tests/src/Functional/PanelizerAddDefaultLinkTest.php:59

    ---------- begin diff ----------
@@ @@
     $this->panelize($content_type);

     // Confirm that the content type is now panelized.
-    $this->assertLink('Add a new Panelizer default display');
+    $this->assertSession()->linkExists('Add a new Panelizer default display');

     // Un-panelize the content type.
     $this->unpanelize($content_type);

     // Confirm that the content type is no longer panelized.
-    $this->assertNoLink('Add a new Panelizer default display');
+    $this->assertSession()->linkNotExists('Add a new Panelizer default display');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertLinkRector
 * AssertNoLinkRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/panelizer/tests/src/Unit/PanelizerFieldPanelsStorageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\panelizer\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
  */
 class PanelizerFieldPanelsStorageTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @var \Drupal\Core\Entity\EntityStorageInterface|\Prophecy\Prophecy\ProphecyInterface
    */
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->storage = $this->prophesize(EntityStorageInterface::class);
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/panelizer/tests/src/Unit/PanelizerEntityViewBuilderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\panelizer\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
  */
 class PanelizerEntityViewBuilderTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Information about the entity type.
    *
@@ @@
   /**
    * The Panelizer entity view builder.
    *
-   * @var \Drupal\panelizer\PanelizerEntityViewBuilder|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\panelizer\PanelizerEntityViewBuilder|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityViewBuilder;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->entityType = $this->prophesize(EntityTypeInterface::class);
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/panelizer/tests/src/Unit/PanelizerDefaultPanelsStorageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\panelizer\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
  */
 class PanelizerDefaultPanelsStorageTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @var \Drupal\Core\Entity\EntityStorageInterface|\Prophecy\Prophecy\ProphecyInterface
    */
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->storage = $this->prophesize(EntityStorageInterface::class);
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/panelizer/tests/src/FunctionalJavascript/PanelizerIntegrationTest.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a user with appropriate permissions to use Panels IPE.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/panelizer/tests/src/Functional/Update/PanelizerLayoutIDUpdateTest.php:29

    ---------- begin diff ----------
@@ @@
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin/structure/types/manage/article/display');
     $this->clickLink('Edit', 1);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalGet('node/1');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalGet('node/2');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/panelizer/tests/src/Functional/PanelizerUserFunctionalTest.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create the admin user.
@@ @@

     // Enable Panelizer for this entity.
     $this->drupalGet('admin/config/people/accounts/display');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $edit = [
       'panelizer[enable]' => TRUE,
       'panelizer[custom]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertResponse(200);
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->statusCodeEquals(200);

     // Reload all caches.
     $this->rebuildAll();
@@ @@

     // Check the user entity page.
     $out = $this->drupalGet('user/' . $account->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->verbose($out);

     // Verify that
     $elements = $this->xpath('//*[@id="panels-ipe-content"]');
     if (is_array($elements)) {
-      $this->assertIdentical(count($elements), 1);
+      $this->assertSame(count($elements), 1);
     }
     else {
       $this->fail('Could not parse page content.');
@@ @@
     }

     // Check that the block we added is visible.
-    $this->assertText('Panelizer test');
-    $this->assertText('Abracadabra');
+    $this->assertSession()->pageTextContains('Panelizer test');
+    $this->assertSession()->pageTextContains('Abracadabra');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/panelizer/tests/src/Functional/PanelizerTestTrait.php"
         file, due to:                                                          
         "System error: "Method assertResponse() was not found in reflection of 
         class Drupal\Tests\panelizer\Functional\PanelizerTestTrait."           
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 411          

