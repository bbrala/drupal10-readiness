modules/contrib/workbench_moderation/src/Access/LatestRevisionCheck.php
modules/contrib/workbench_moderation/src/Entity/Handler/ModerationHandler.php
modules/contrib/workbench_moderation/src/ModerationStateListBuilder.php
modules/contrib/workbench_moderation/src/WorkbenchPreprocess.php
modules/contrib/workbench_moderation/tests/src/Kernel/ModerationStateEntityTest.php
modules/contrib/workbench_moderation/src/Entity/Handler/BlockContentModerationHandler.php
modules/contrib/workbench_moderation/src/Entity/Handler/ModerationHandlerInterface.php
modules/contrib/workbench_moderation/src/Entity/Handler/NodeModerationHandler.php
modules/contrib/workbench_moderation/src/Entity/ModerationState.php
modules/contrib/workbench_moderation/src/ModerationStateTransitionInterface.php
modules/contrib/workbench_moderation/src/Entity/ModerationStateTransition.php
modules/contrib/workbench_moderation/src/ModerationStateTransitionListBuilder.php
modules/contrib/workbench_moderation/src/EntityOperations.php
modules/contrib/workbench_moderation/tests/src/Kernel/ModerationStateFieldTest.php
modules/contrib/workbench_moderation/src/ModerationStateTransitionStorage.php
modules/contrib/workbench_moderation/tests/src/Kernel/ViewsDataIntegrationTest.php
modules/contrib/workbench_moderation/tests/src/Functional/LatestRevisionViewsFilterTest.php
modules/contrib/workbench_moderation/src/ParamConverter/EntityRevisionConverter.php
modules/contrib/workbench_moderation/src/Permissions.php
modules/contrib/workbench_moderation/tests/src/Kernel/WorkbenchModerationSchemaTest.php
modules/contrib/workbench_moderation/src/Plugin/Action/ModerationOptOutPublishNode.php
modules/contrib/workbench_moderation/src/EntityTypeInfo.php
modules/contrib/workbench_moderation/tests/src/Traits/WorkbenchModerationTestTrait.php
modules/contrib/workbench_moderation/src/Plugin/Action/ModerationOptOutUnpublishNode.php
modules/contrib/workbench_moderation/tests/src/Unit/LatestRevisionCheckTest.php
modules/contrib/workbench_moderation/src/Plugin/Derivative/DynamicLocalTasks.php
modules/contrib/workbench_moderation/tests/src/Unit/ModerationInformationTest.php
modules/contrib/workbench_moderation/tests/src/Functional/ModerationFormAccessTest.php
modules/contrib/workbench_moderation/src/Plugin/Field/FieldWidget/ModerationStateWidget.php
modules/contrib/workbench_moderation/tests/src/Functional/ModerationFormTest.php
modules/contrib/workbench_moderation/src/Event/WorkbenchModerationEvents.php
modules/contrib/workbench_moderation/src/Event/WorkbenchModerationTransitionEvent.php
modules/contrib/workbench_moderation/src/Form/BundleModerationConfigurationForm.php
modules/contrib/workbench_moderation/tests/src/Unit/StateTransitionValidationTest.php
modules/contrib/workbench_moderation/src/Plugin/Menu/EditTab.php
modules/contrib/workbench_moderation/src/Plugin/Validation/Constraint/ModerationState.php
modules/contrib/workbench_moderation/src/Plugin/Validation/Constraint/ModerationStateValidator.php
modules/contrib/workbench_moderation/src/Form/EntityModerationForm.php
modules/contrib/workbench_moderation/tests/src/Functional/ModerationLocaleTest.php
modules/contrib/workbench_moderation/src/Form/ModerationStateDeleteForm.php
modules/contrib/workbench_moderation/src/Plugin/views/filter/LatestRevision.php
modules/contrib/workbench_moderation/src/Form/ModerationStateForm.php
modules/contrib/workbench_moderation/tests/src/Unit/WorkbenchPreprocessTest.php
modules/contrib/workbench_moderation/src/Form/ModerationStateTransitionDeleteForm.php
modules/contrib/workbench_moderation/src/Form/ModerationStateTransitionForm.php
modules/contrib/workbench_moderation/workbench_moderation.install
modules/contrib/workbench_moderation/workbench_moderation.module
modules/contrib/workbench_moderation/src/InlineEditingDisabler.php
modules/contrib/workbench_moderation/src/ModerationInformation.php
modules/contrib/workbench_moderation/src/RevisionTracker.php
modules/contrib/workbench_moderation/tests/src/Functional/ModerationStateAccessTest.php
modules/contrib/workbench_moderation/src/RevisionTrackerInterface.php
modules/contrib/workbench_moderation/src/Routing/EntityModerationRouteProvider.php
modules/contrib/workbench_moderation/src/ModerationInformationInterface.php
modules/contrib/workbench_moderation/workbench_moderation.views.inc
modules/contrib/workbench_moderation/src/ModerationStateAccessControlHandler.php
modules/contrib/workbench_moderation/src/ModerationStateInterface.php
modules/contrib/workbench_moderation/src/Routing/EntityTypeModerationRouteProvider.php
modules/contrib/workbench_moderation/src/StateTransitionValidation.php
modules/contrib/workbench_moderation/tests/src/Functional/ModerationStateBlockTest.php
modules/contrib/workbench_moderation/src/ViewsData.php
modules/contrib/workbench_moderation/tests/src/Functional/ModerationStateNodeTest.php
modules/contrib/workbench_moderation/tests/src/Functional/ModerationStateNodeTypeTest.php
modules/contrib/workbench_moderation/tests/src/Functional/ModerationStateStatesTest.php
modules/contrib/workbench_moderation/tests/src/Functional/ModerationStateTestBase.php
modules/contrib/workbench_moderation/tests/src/Functional/ModerationStateTransitionsTest.php
modules/contrib/workbench_moderation/tests/src/Functional/NodeAccessTest.php
modules/contrib/workbench_moderation/tests/src/Kernel/EntityOperationsTest.php
modules/contrib/workbench_moderation/tests/src/Kernel/EntityRevisionConverterTest.php
modules/contrib/workbench_moderation/tests/src/Kernel/EntityStateChangeValidationTest.php

21 files with changes
=====================

1) modules/contrib/workbench_moderation/tests/src/Unit/WorkbenchPreprocessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\workbench_moderation\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\UnitTestCase;
 use Drupal\workbench_moderation\WorkbenchPreprocess;
 use Drupal\Core\Routing\CurrentRouteMatch;
@@ @@
  */
 class WorkbenchPreprocessTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @covers ::isLatestVersionPage
    * @dataProvider routeNodeProvider
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/workbench_moderation/tests/src/Unit/StateTransitionValidationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\workbench_moderation\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
  */
 class StateTransitionValidationTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Builds a mock storage object for Transitions.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/workbench_moderation/tests/src/Unit/ModerationInformationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\workbench_moderation\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\ContentEntityFormInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
  */
 class ModerationInformationTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Builds a mock user.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/workbench_moderation/tests/src/Unit/LatestRevisionCheckTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\workbench_moderation\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\block_content\Entity\BlockContent;
 use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Core\Access\AccessResultForbidden;
@@ @@
  */
 class LatestRevisionCheckTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Test the access check of the LatestRevisionCheck service.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/workbench_moderation/tests/src/Kernel/ViewsDataIntegrationTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);

     $this->installEntitySchema('node');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/workbench_moderation/tests/src/Kernel/ModerationStateFieldTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('node');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/workbench_moderation/tests/src/Kernel/ModerationStateEntityTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('moderation_state');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/workbench_moderation/src/Event/WorkbenchModerationTransitionEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\workbench_moderation\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines a class for transition events.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/workbench_moderation/src/EntityOperations.php:180

    ---------- begin diff ----------
@@ @@
       // Entity API doesn't allow hook_entity_presave to short-circuit a save.
       $event = new WorkbenchModerationTransitionEvent($entity, $state_before, $state_after);

-      $this->eventDispatcher->dispatch(WorkbenchModerationEvents::STATE_TRANSITION, $event);
+      $this->eventDispatcher->dispatch($event, WorkbenchModerationEvents::STATE_TRANSITION);
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


10) modules/contrib/workbench_moderation/tests/src/Kernel/EntityStateChangeValidationTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('node', 'node_access');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/workbench_moderation/tests/src/Kernel/EntityRevisionConverterTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('entity_test');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/workbench_moderation/tests/src/Kernel/EntityOperationsTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('node');
     $this->installSchema('node', 'node_access');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/workbench_moderation/tests/src/Functional/NodeAccessTest.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->adminUser);
     $this->createContentTypeFromUi('Moderated content', 'moderated_content', TRUE, [
@@ @@
    */
   public function testPageAccess() {
     $this->drupalLogin($this->adminUser);
+    $this->drupalGet('node/add/moderated_content');

     // Create a node to test with.
-    $this->drupalPostForm('node/add/moderated_content', [
+    $this->submitForm([
       'title[0][value]' => 'moderated content',
     ], t('Save and Create New Draft'));
     $nodes = \Drupal::entityTypeManager()
@@ @@
     $view_path = 'node/' . $node->id();
     $edit_path = 'node/' . $node->id() . '/edit';
     $latest_path = 'node/' . $node->id() . '/latest';
+    $this->drupalGet($edit_path);

     // Publish the node.
-    $this->drupalPostForm($edit_path, [], t('Save and Request Review'));
-    $this->drupalPostForm($edit_path, [], t('Save and Publish'));
+    $this->submitForm([], t('Save and Request Review'));
+    $this->drupalGet($edit_path);
+    $this->submitForm([], t('Save and Publish'));

     // Ensure access works correctly for anonymous users.
     $this->drupalLogout();
@@ @@

     // Create a forward revision for the 'Latest revision' tab.
     $this->drupalLogin($this->adminUser);
-    $this->drupalPostForm($edit_path, [
+    $this->drupalGet($edit_path);
+    $this->submitForm([
       'title[0][value]' => 'moderated content revised',
     ], t('Save and Create New Draft'));
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/workbench_moderation/tests/src/Functional/ModerationStateTransitionsTest.php:40

    ---------- begin diff ----------
@@ @@

     $this->drupalGet('admin/structure/workbench-moderation');
     $this->clickLink('Moderation state transitions');
-    $this->assertLink('Add Moderation state transition');
+    $this->assertSession()->linkExists('Add Moderation state transition');
     $this->assertSession()->pageTextContains('Request Review');

     // Edit the Draft » Needs review.
     $this->drupalGet('admin/structure/workbench-moderation/transitions/draft_needs_review');
-    $this->assertFieldByName('label', 'Request Review');
-    $this->assertFieldByName('stateFrom', 'draft');
-    $this->assertFieldByName('stateTo', 'needs_review');
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->fieldValueEquals('label', 'Request Review');
+    $this->assertSession()->fieldValueEquals('stateFrom', 'draft');
+    $this->assertSession()->fieldValueEquals('stateTo', 'needs_review');
+    $this->submitForm([
       'label' => 'Draft to Needs review',
     ], t('Save'));
     $this->assertSession()->pageTextContains('Saved the Draft to Needs review Moderation state transition.');
     $this->drupalGet('admin/structure/workbench-moderation/transitions/draft_needs_review');
-    $this->assertFieldByName('label', 'Draft to Needs review');
+    $this->assertSession()->fieldValueEquals('label', 'Draft to Needs review');
     // Now set it back.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'label' => 'Request Review',
     ], t('Save'));
     $this->assertSession()->pageTextContains('Saved the Request Review Moderation state transition.');
@@ @@

     // Add a new state.
     $this->drupalGet('admin/structure/workbench-moderation/states/add');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'label' => 'Expired',
       'id' => 'expired',
     ], t('Save'));
@@ @@
     // Add a new transition.
     $this->drupalGet('admin/structure/workbench-moderation/transitions');
     $this->clickLink(t('Add Moderation state transition'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'label' => 'Published » Expired',
       'id' => 'published_expired',
       'stateFrom' => 'published',
@@ @@
     $this->drupalGet('admin/structure/workbench-moderation/transitions/published_expired');
     $this->clickLink('Delete');
     $this->assertSession()->pageTextContains('Are you sure you want to delete Published » Expired?');
-    $this->drupalPostForm(NULL, [], t('Delete'));
+    $this->submitForm([], t('Delete'));
     $this->assertSession()->pageTextContains('Moderation transition Published » Expired deleted');
   }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertLinkRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/workbench_moderation/tests/src/Functional/ModerationStateTestBase.php:70

    ---------- begin diff ----------
@@ @@
   /**
    * Sets the test up.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser($this->permissions);
     $this->drupalPlaceBlock('local_tasks_block', ['id' => 'tabs_block']);
@@ @@
       'name' => $content_type_name,
       'type' => $content_type_id,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save content type'));
+    $this->submitForm($edit, t('Save content type'));

     if ($moderated) {
       $this->enableModerationThroughUi($content_type_id, $allowed_states, $default_state);
@@ @@
    */
   protected function enableModerationThroughUi($content_type_id, array $allowed_states, $default_state) {
     $this->drupalGet('admin/structure/types/manage/' . $content_type_id . '/moderation');
-    $this->assertFieldByName('enable_moderation_state');
-    $this->assertNoFieldChecked('edit-enable-moderation-state');
+    $this->assertSession()->fieldExists('enable_moderation_state');
+    $this->assertSession()->checkboxNotChecked('edit-enable-moderation-state');

     $edit['enable_moderation_state'] = 1;

@@ @@

     $edit['default_moderation_state'] = $default_state;

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertNoFieldCheckedRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/workbench_moderation/tests/src/Functional/ModerationStateStatesTest.php:39

    ---------- begin diff ----------
@@ @@
   public function testStateAdministration() {
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/structure/workbench-moderation');
-    $this->assertLink('Moderation states');
-    $this->assertLink('Moderation state transitions');
+    $this->assertSession()->linkExists('Moderation states');
+    $this->assertSession()->linkExists('Moderation state transitions');
     $this->clickLink('Moderation states');
-    $this->assertLink('Add Moderation state');
+    $this->assertSession()->linkExists('Add Moderation state');
     $this->assertSession()->pageTextContains('Draft');
     // Edit the draft.
     $this->clickLink('Edit', 1);
-    $this->assertFieldByName('label', 'Draft');
-    $this->assertNoFieldChecked('edit-published');
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->fieldValueEquals('label', 'Draft');
+    $this->assertSession()->checkboxNotChecked('edit-published');
+    $this->submitForm([
       'label' => 'Drafty',
     ], t('Save'));
     $this->assertSession()->pageTextContains('Saved the Drafty Moderation state.');
     $this->drupalGet('admin/structure/workbench-moderation/states/draft');
-    $this->assertFieldByName('label', 'Drafty');
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->fieldValueEquals('label', 'Drafty');
+    $this->submitForm([
       'label' => 'Draft',
     ], t('Save'));
     $this->assertSession()->pageTextContains('Saved the Draft Moderation state.');
     $this->clickLink(t('Add Moderation state'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'label' => 'Expired',
       'id' => 'expired',
     ], t('Save'));
@@ @@
     $this->drupalGet('admin/structure/workbench-moderation/states/expired');
     $this->clickLink('Delete');
     $this->assertSession()->pageTextContains('Are you sure you want to delete Expired?');
-    $this->drupalPostForm(NULL, [], t('Delete'));
+    $this->submitForm([], t('Delete'));
     $this->assertSession()->pageTextContains('Moderation state Expired deleted');
   }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertLinkRector
 * AssertNoFieldCheckedRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/workbench_moderation/tests/src/Functional/ModerationStateNodeTypeTest.php:17

    ---------- begin diff ----------
@@ @@
     $this->assertSession()->pageTextContains('The content type Not moderated has been added.');
     $this->grantUserPermissionToCreateContentOfType($this->adminUser, 'not_moderated');
     $this->drupalGet('node/add/not_moderated');
-    $this->assertRaw('Save as unpublished');
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->responseContains('Save as unpublished');
+    $this->submitForm([
       'title[0][value]' => 'Test',
     ], t('Save and publish'));
     $this->assertSession()->pageTextContains('Not moderated Test has been created.');
@@ @@

     // Create content.
     $this->drupalGet('node/add/not_moderated');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'title[0][value]' => 'Test',
     ], t('Save and publish'));
     $this->assertSession()->pageTextContains('Not moderated Test has been created.');
@@ @@
     $node = reset($nodes);
     $this->drupalGet('node/' . $node->id());
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertLinkByHref('node/' . $node->id() . '/edit');
+    $this->assertSession()->linkByHrefExists('node/' . $node->id() . '/edit');
     $this->drupalGet('node/' . $node->id() . '/edit');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertRaw('Save and Create New Draft');
-    $this->assertNoRaw('Save and publish');
+    $this->assertSession()->responseContains('Save and Create New Draft');
+    $this->assertSession()->responseNotContains('Save and publish');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertLinkByHrefRector
 * AssertNoRawRector
 * AssertRawRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


18) modules/contrib/workbench_moderation/tests/src/Functional/ModerationStateNodeTest.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->adminUser);
     $this->createContentTypeFromUi('Moderated content', 'moderated_content', TRUE, [
@@ @@
    * Tests creating and deleting content.
    */
   public function testCreatingContent() {
-    $this->drupalPostForm('node/add/moderated_content', [
+    $this->drupalGet('node/add/moderated_content');
+    $this->submitForm([
       'title[0][value]' => 'moderated content',
     ], t('Save and Create New Draft'));
     $nodes = \Drupal::entityTypeManager()
@@ @@
     $node = reset($nodes);

     $path = 'node/' . $node->id() . '/edit';
+    $this->drupalGet($path);
     // Set up needs review revision.
-    $this->drupalPostForm($path, [], t('Save and Request Review'));
+    $this->submitForm([], t('Save and Request Review'));
+    $this->drupalGet($path);
     // Set up published revision.
-    $this->drupalPostForm($path, [], t('Save and Publish'));
+    $this->submitForm([], t('Save and Publish'));
     \Drupal::entityTypeManager()->getStorage('node')->resetCache([$node->id()]);
     /* @var \Drupal\node\NodeInterface $node */
     $node = \Drupal::entityTypeManager()->getStorage('node')->load($node->id());
@@ @@
     $this->assertTrue($node->isPublished());

     // Verify that the state field is not shown.
-    $this->assertNoText('Published');
+    $this->assertSession()->pageTextNotContains('Published');
+    $this->drupalGet('node/' . $node->id() . '/delete');

     // Delete the node.
-    $this->drupalPostForm('node/' . $node->id() . '/delete', [], t('Delete'));
+    $this->submitForm([], t('Delete'));
     $this->assertSession()->pageTextContains(t('The Moderated content moderated content has been deleted.'));
   }

@@ @@
    * Tests edit form destinations.
    */
   public function testFormSaveDestination() {
+    $this->drupalGet('node/add/moderated_content');
     // Create new moderated content in draft.
-    $this->drupalPostForm('node/add/moderated_content', [
+    $this->submitForm([
       'title[0][value]' => 'Some moderated content',
       'body[0][value]' => 'First version of the content.',
     ], t('Save and Create New Draft'));
@@ @@

     // After saving, we should be at the canonical URL and viewing the first
     // revision.
-    $this->assertUrl(Url::fromRoute('entity.node.canonical', ['node' => $node->id()]));
+    $this->assertSession()->addressEquals(Url::fromRoute('entity.node.canonical', ['node' => $node->id()]));
     $this->assertSession()->pageTextContains('First version of the content.');
+    $this->drupalGet($edit_path);

     // Update the draft to review; after saving, we should still be on the
     // canonical URL, but viewing the second revision.
-    $this->drupalPostForm($edit_path, [
+    $this->submitForm([
       'body[0][value]' => 'Second version of the content.',
     ], t('Save and Request Review'));
-    $this->assertUrl(Url::fromRoute('entity.node.canonical', ['node' => $node->id()]));
+    $this->assertSession()->addressEquals(Url::fromRoute('entity.node.canonical', ['node' => $node->id()]));
     $this->assertSession()->pageTextContains('Second version of the content.');
+    $this->drupalGet($edit_path);

     // Make a new published revision; after saving, we should be at the
     // canonical URL.
-    $this->drupalPostForm($edit_path, [
+    $this->submitForm([
       'body[0][value]' => 'Third version of the content.',
     ], t('Save and Publish'));
-    $this->assertUrl(Url::fromRoute('entity.node.canonical', ['node' => $node->id()]));
+    $this->assertSession()->addressEquals(Url::fromRoute('entity.node.canonical', ['node' => $node->id()]));
     $this->assertSession()->pageTextContains('Third version of the content.');
+    $this->drupalGet($edit_path);

     // Make a new forward revision; after saving, we should be on the "Latest
     // version" tab.
-    $this->drupalPostForm($edit_path, [
+    $this->submitForm([
       'body[0][value]' => 'Fourth version of the content.',
     ], t('Save and Create New Draft'));
-    $this->assertUrl(Url::fromRoute('entity.node.latest_version', ['node' => $node->id()]));
+    $this->assertSession()->addressEquals(Url::fromRoute('entity.node.latest_version', ['node' => $node->id()]));
     $this->assertSession()->pageTextContains('Fourth version of the content.');
   }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/workbench_moderation/tests/src/Functional/ModerationStateBlockTest.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create the "basic" block type.
@@ @@
       'allowed_moderation_states_published[published]' => TRUE,
       'default_moderation_state' => 'draft',
     ];
-    $this->drupalPostForm('admin/structure/block/block-content/manage/basic/moderation', $edit, t('Save'));
+    $this->drupalGet('admin/structure/block/block-content/manage/basic/moderation');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains(t('Your settings have been saved.'));

     // Create a custom block at block/add and save it as draft.
@@ @@
       'info[0][value]' => 'Moderated block',
       'body[0][value]' => $body,
     ];
-    $this->drupalPostForm('block/add', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('block/add');
+    $this->submitForm($edit, t('Save and Create New Draft'));
     $this->assertSession()->pageTextContains(t('basic Moderated block has been created.'));

     // Place the block in the Sidebar First region.
@@ @@
     ];
     $block = BlockContent::load(1);
     $url = 'admin/structure/block/add/block_content:' . $block->uuid() . '/' . $this->config('system.theme')->get('default');
-    $this->drupalPostForm($url, $instance, t('Save block'));
+    $this->drupalGet($url);
+    $this->submitForm($instance, t('Save block'));

     // Navigate to home page and check that the block is visible. It should be
     // visible because it is the default revision.
@@ @@
     $edit = [
       'body[0][value]' => $updated_body,
     ];
-    $this->drupalPostForm('block/' . $block->id(), $edit, t('Save and Create New Draft'));
+    $this->drupalGet('block/' . $block->id());
+    $this->submitForm($edit, t('Save and Create New Draft'));
     $this->assertSession()->pageTextContains(t('basic Moderated block has been updated.'));

     // Navigate to the home page and check that the block shows the updated
@@ @@
     // revision is not a published moderation state.
     $this->drupalGet('');
     $this->assertSession()->pageTextContains($updated_body);
+    $this->drupalGet('block/' . $block->id());

     // Publish the block so we can create a forward revision.
-    $this->drupalPostForm('block/' . $block->id(), [], t('Save and Publish'));
+    $this->submitForm([], t('Save and Publish'));

     // Create a forward revision.
     $forward_revision_body = 'This is the forward revision body value';
@@ @@
     $edit = [
       'body[0][value]' => $forward_revision_body,
     ];
-    $this->drupalPostForm('block/' . $block->id(), $edit, t('Save and Create New Draft'));
+    $this->drupalGet('block/' . $block->id());
+    $this->submitForm($edit, t('Save and Create New Draft'));
     $this->assertSession()->pageTextContains(t('basic Moderated block has been updated.'));

     // Navigate to home page and check that the forward revision doesn't show,
@@ @@
     $edit = [
       'new_state' => 'published',
     ];
-    $this->drupalPostForm('block/' . $block->id() . '/latest', $edit, t('Apply'));
+    $this->drupalGet('block/' . $block->id() . '/latest');
+    $this->submitForm($edit, t('Apply'));
     $this->assertSession()->pageTextContains(t('The moderation state has been updated.'));

     // Navigate to home page and check that the forward revision is now the
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/workbench_moderation/tests/src/Functional/ModerationLocaleTest.php:37

    ---------- begin diff ----------
@@ @@
     $edit = [
       'predefined_langcode' => 'fr',
     ];
-    $this->drupalPostForm('admin/config/regional/language/add', $edit, t('Add language'));
+    $this->drupalGet('admin/config/regional/language/add');
+    $this->submitForm($edit, t('Add language'));

     // Enable content translation on articles.
     $this->drupalGet('admin/config/regional/content-language');
@@ @@
       'settings[node][article][translatable]' => TRUE,
       'settings[node][article][settings][language][language_alterable]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));

     // Create a published article in English.
     $edit = [
@@ @@
       'title[0][value]' => 'Published English node',
       'langcode[0][value]' => 'en',
     ];
-    $this->drupalPostForm('node/add/article', $edit, t('Save and Publish'));
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, t('Save and Publish'));
     $this->assertSession()->pageTextContains(t('Article Published English node has been created.'));
     $english_node = $this->drupalGetNodeByTitle('Published English node');

@@ @@
     $edit = [
       'title[0][value]' => 'French node Draft',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save and Create New Draft (this translation)'));
+    $this->submitForm($edit, t('Save and Create New Draft (this translation)'));
     // Here the error has occured "The website encountered an unexpected error.
     // Please try again later."
     // If the translation has got lost.
@@ @@
       'title[0][value]' => 'English node',
       'langcode[0][value]' => 'en',
     ];
-    $this->drupalPostForm('node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));
     $this->assertSession()->pageTextContains(t('Article English node has been created.'));
     $english_node = $this->drupalGetNodeByTitle('English node');

@@ @@
     $edit = [
       'title[0][value]' => 'French node',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save and Create New Draft (this translation)'));
+    $this->submitForm($edit, t('Save and Create New Draft (this translation)'));
     $this->assertSession()->pageTextContains(t('Article French node has been updated.'));
     $english_node = $this->drupalGetNodeByTitle('English node', TRUE);
     $french_node = $english_node->getTranslation('fr');
+    $this->drupalGet('node/' . $english_node->id() . '/edit');

     // Publish the English article and check that the translation stays
     // unpublished.
-    $this->drupalPostForm('node/' . $english_node->id() . '/edit', [], t('Save and Publish (this translation)'));
+    $this->submitForm([], t('Save and Publish (this translation)'));
     $this->assertSession()->pageTextContains(t('Article English node has been updated.'));
     $english_node = $this->drupalGetNodeByTitle('English node', TRUE);
     $french_node = $english_node->getTranslation('fr');
@@ @@
     $edit = [
       'title[0][value]' => 'Another node',
     ];
-    $this->drupalPostForm('node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));
     $this->assertSession()->pageTextContains(t('Article Another node has been created.'));
     $english_node = $this->drupalGetNodeByTitle('Another node');

@@ @@
     $edit = [
       'title[0][value]' => 'Translated node',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save and Create New Draft (this translation)'));
+    $this->submitForm($edit, t('Save and Create New Draft (this translation)'));
     $this->assertSession()->pageTextContains(t('Article Translated node has been updated.'));
     $english_node = $this->drupalGetNodeByTitle('Another node', TRUE);
     $french_node = $english_node->getTranslation('fr');
+    $this->drupalGet('fr/node/' . $english_node->id() . '/edit');

     // Publish the translation and check that the source language version stays
     // unpublished.
-    $this->drupalPostForm('fr/node/' . $english_node->id() . '/edit', [], t('Save and Publish (this translation)'));
+    $this->submitForm([], t('Save and Publish (this translation)'));
     $this->assertSession()->pageTextContains(t('Article Translated node has been updated.'));
     $english_node = $this->drupalGetNodeByTitle('Another node', TRUE);
     $french_node = $english_node->getTranslation('fr');
@@ @@
     $edit = [
       'title[0][value]' => 'New draft of translated node',
     ];
-    $this->drupalPostForm('fr/node/' . $english_node->id() . '/edit', $edit, t('Save and Create New Draft (this translation)'));
+    $this->drupalGet('fr/node/' . $english_node->id() . '/edit');
+    $this->submitForm($edit, t('Save and Create New Draft (this translation)'));
     $this->assertSession()->pageTextContains(t('Article New draft of translated node has been updated.'));
     $english_node = $this->drupalGetNodeByTitle('Another node', TRUE);
     $french_node = $english_node->getTranslation('fr');
@@ @@
     $edit = [
       'new_state' => 'published',
     ];
-    $this->drupalPostForm('fr/node/' . $english_node->id() . '/latest', $edit, t('Apply'));
+    $this->drupalGet('fr/node/' . $english_node->id() . '/latest');
+    $this->submitForm($edit, t('Apply'));
     $this->assertSession()->pageTextContains(t('The moderation state has been updated.'));
     $english_node = $this->drupalGetNodeByTitle('Another node', TRUE);
     $french_node = $english_node->getTranslation('fr');
@@ @@
     $this->assertEquals($french_node->moderation_state->target_id, 'published');
     $this->assertTrue($french_node->isPublished());
     $this->assertEquals($french_node->getTitle(), 'New draft of translated node', 'The draft has replaced the published revision.');
+    $this->drupalGet('node/' . $english_node->id() . '/edit');

     // Publish the English article before testing the archive transition.
-    $this->drupalPostForm('node/' . $english_node->id() . '/edit', [], t('Save and Publish (this translation)'));
+    $this->submitForm([], t('Save and Publish (this translation)'));
     $this->assertSession()->pageTextContains(t('Article Another node has been updated.'));
+    $this->drupalGet('node/' . $english_node->id() . '/edit');

     // Archive the node and its translation.
-    $this->drupalPostForm('node/' . $english_node->id() . '/edit', [], t('Save and Archive (this translation)'));
+    $this->submitForm([], t('Save and Archive (this translation)'));
     $this->assertSession()->pageTextContains(t('Article Another node has been updated.'));
-    $this->drupalPostForm('fr/node/' . $english_node->id() . '/edit', [], t('Save and Archive (this translation)'));
+    $this->drupalGet('fr/node/' . $english_node->id() . '/edit');
+    $this->submitForm([], t('Save and Archive (this translation)'));
     $this->assertSession()->pageTextContains(t('Article New draft of translated node has been updated.'));
     $english_node = $this->drupalGetNodeByTitle('Another node', TRUE);
     $french_node = $english_node->getTranslation('fr');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/workbench_moderation/tests/src/Functional/ModerationFormTest.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->adminUser);
     $this->createContentTypeFromUi('Moderated content', 'moderated_content', TRUE, [
@@ @@
    * @see \Drupal\Tests\workbench_moderation\Functional\ModerationStateBlockTest::testCustomBlockModeration
    */
   public function testModerationForm() {
+    $this->drupalGet('node/add/moderated_content');
     // Create new moderated content in draft.
-    $this->drupalPostForm('node/add/moderated_content', [
+    $this->submitForm([
       'title[0][value]' => 'Some moderated content',
       'body[0][value]' => 'First version of the content.',
     ], t('Save and Create New Draft'));
@@ @@
     // live revision.
     $this->drupalGet($canonical_path);
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertField('edit-new-state', 'The node view page has a moderation form.');
+    $this->assertSession()->fieldExists('edit-new-state', 'The node view page has a moderation form.');

     // The latest version page should not show, because there is no forward
     // revision.
     $this->drupalGet($latest_version_path);
     $this->assertSession()->statusCodeEquals(403);
+    $this->drupalGet($edit_path);

     // Update the draft.
-    $this->drupalPostForm($edit_path, [
+    $this->submitForm([
       'body[0][value]' => 'Second version of the content.',
     ], t('Save and Request Review'));

@@ @@
     // live revision.
     $this->drupalGet($canonical_path);
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertField('edit-new-state', 'The node view page has a moderation form.');
+    $this->assertSession()->fieldExists('edit-new-state', 'The node view page has a moderation form.');

     // The latest version page should not show, because there is still no
     // forward revision.
     $this->drupalGet($latest_version_path);
     $this->assertSession()->statusCodeEquals(403);
+    $this->drupalGet($edit_path);

     // Publish the draft.
-    $this->drupalPostForm($edit_path, [
+    $this->submitForm([
       'body[0][value]' => 'Third version of the content.',
     ], t('Save and Publish'));

@@ @@
     // live revision.
     $this->drupalGet($canonical_path);
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertNoField('edit-new-state', 'The node view page has no moderation form.');
+    $this->assertSession()->fieldNotExists('edit-new-state', 'The node view page has no moderation form.');

     // The latest version page should not show, because there is still no
     // forward revision.
     $this->drupalGet($latest_version_path);
     $this->assertSession()->statusCodeEquals(403);
+    $this->drupalGet($edit_path);

     // Make a forward revision.
-    $this->drupalPostForm($edit_path, [
+    $this->submitForm([
       'body[0][value]' => 'Fourth version of the content.',
     ], t('Save and Create New Draft'));

@@ @@
     // live revision.
     $this->drupalGet($canonical_path);
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertNoField('edit-new-state', 'The node view page has no moderation form.');
+    $this->assertSession()->fieldNotExists('edit-new-state', 'The node view page has no moderation form.');

     // The latest version page should show the moderation form and have "Draft"
     // status, because the forward revision is in "Draft".
     $this->drupalGet($latest_version_path);
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertField('edit-new-state', 'The latest-version page has a moderation form.');
+    $this->assertSession()->fieldExists('edit-new-state', 'The latest-version page has a moderation form.');
     $this->assertSession()->pageTextContains('Draft', 'Correct status found on the latest-version page.');
+    $this->drupalGet($latest_version_path);

     // Submit the moderation form to change status to needs review.
-    $this->drupalPostForm($latest_version_path, [
+    $this->submitForm([
       'new_state' => 'needs_review',
     ], t('Apply'));

@@ @@
     // Review" status, because the forward revision is in "Needs Review".
     $this->drupalGet($latest_version_path);
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertField('edit-new-state', 'The latest-version page has a moderation form.');
+    $this->assertSession()->fieldExists('edit-new-state', 'The latest-version page has a moderation form.');
     $this->assertSession()->pageTextContains('Needs Review', 'Correct status found on the latest-version page.');
   }

@@ @@
     $another_user = $this->drupalCreateUser($this->permissions);
     $this->grantUserPermissionToCreateContentOfType($another_user, 'moderated_content');
     $this->drupalLogin($another_user);
-    $this->drupalPostForm(sprintf('node/%d/latest', $node->id()), [
+    $this->drupalGet(sprintf('node/%d/latest', $node->id()));
+    $this->submitForm([
       'new_state' => 'needs_review',
     ], t('Apply'));
    ----------- end diff -----------

Applied rules:
 * AssertFieldRector
 * AssertNoFieldRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 21 files have been changed by Rector                                      

