modules/contrib/nopremium/nopremium.install
modules/contrib/nopremium/tests/src/Functional/NodeEditTest.php
modules/contrib/nopremium/nopremium.module
modules/contrib/nopremium/tests/src/Functional/NodeViewTest.php
modules/contrib/nopremium/src/Form/SettingsForm.php
modules/contrib/nopremium/tests/src/Functional/NopremiumBrowserTestBase.php
modules/contrib/nopremium/tests/src/Functional/UninstallTest.php
modules/contrib/nopremium/tests/src/Kernel/Migrate/MigrateNodeTest.php
modules/contrib/nopremium/src/NodeOptionPremiumHelper.php
modules/contrib/nopremium/src/NodeOptionPremiumHelperInterface.php
modules/contrib/nopremium/src/NodeOptionPremiumPermissions.php
modules/contrib/nopremium/src/Plugin/search_api/processor/PremiumContent.php
modules/contrib/nopremium/tests/src/Kernel/NodeViewTest.php
modules/contrib/nopremium/tests/src/Kernel/NopremiumKernelTestBase.php
modules/contrib/nopremium/tests/fixtures/nopremium_d7.php
modules/contrib/nopremium/tests/src/Kernel/Plugin/search_api/processor/PremiumContentTest.php
modules/contrib/nopremium/tests/src/Functional/Form/NodeTypeFormTest.php
modules/contrib/nopremium/tests/src/Functional/Form/SettingsFormTest.php
modules/contrib/nopremium/tests/src/Unit/NodeOptionPremiumHelperTest.php
modules/contrib/nopremium/tests/src/Functional/InstallTest.php

11 files with changes
=====================

1) modules/contrib/nopremium/tests/src/Functional/InstallTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->moduleHandler = $this->container->get('module_handler');
     $this->moduleInstaller = $this->container->get('module_installer');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/nopremium/tests/src/Functional/Form/SettingsFormTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create an user with admin privileges.
@@ @@
    */
   public function testNew() {
     $this->drupalLogin($this->adminUser);
+    $this->drupalGet('/admin/config/content/nopremium');

     // Test submitting form without changing anything.
-    $this->drupalPostForm('/admin/config/content/nopremium', [], 'Save configuration');
+    $this->submitForm([], 'Save configuration');

     $expected = [
       'default_message' => 'The full content of this page is available to premium users only.',
@@ @@
       'view_modes[teaser]' => '',
       'teaser_view_mode' => 'rss',
     ];
-    $this->drupalPostForm('/admin/config/content/nopremium', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/content/nopremium');
+    $this->submitForm($edit, 'Save configuration');

     $expected = [
       'default_message' => 'This is premium content.',
@@ @@
     // Create two content types.
     $this->drupalCreateContentType(['type' => 'bar']);
     $this->drupalCreateContentType(['type' => 'foo']);
+    $this->drupalGet('/admin/config/content/nopremium');

     // Test submitting form without changing anything.
-    $this->drupalPostForm('/admin/config/content/nopremium', [], 'Save configuration');
+    $this->submitForm([], 'Save configuration');

     $expected = [
       'default_message' => 'The full content of this page is available to premium users only.',
@@ @@
       'message_bar' => 'This is the message for the bar content type.',
       'message_foo' => 'This is the message for the foo content type.',
     ];
-    $this->drupalPostForm('/admin/config/content/nopremium', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/content/nopremium');
+    $this->submitForm($edit, 'Save configuration');

     $expected = [
       'default_message' => 'This is premium content.',
@@ @@
       ])
       ->set('teaser_view_mode', 'rss')
       ->save();
+    $this->drupalGet('/admin/config/content/nopremium');

     // Test submitting form without changing anything.
-    $this->drupalPostForm('/admin/config/content/nopremium', [], 'Save configuration');
+    $this->submitForm([], 'Save configuration');

     // Assert that the configuration stayed the same.
     $expected = [
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/nopremium/tests/src/Functional/Form/NodeTypeFormTest.php:22

    ---------- begin diff ----------
@@ @@
       'type' => 'foo',
       'options[premium]' => TRUE,
     ];
-    $this->drupalPostForm('admin/structure/types/add', $edit, 'Save content type');
+    $this->drupalGet('admin/structure/types/add');
+    $this->submitForm($edit, 'Save content type');

     // Assert that premium was enabled for this content type.
     $config = $this->config('core.base_field_override.node.foo.premium');
@@ @@
     $edit = [
       'options[premium]' => TRUE,
     ];
-    $this->drupalPostForm('admin/structure/types/manage/foo', $edit, 'Save content type');
+    $this->drupalGet('admin/structure/types/manage/foo');
+    $this->submitForm($edit, 'Save content type');

     // Assert that premium was enabled for this content type.
     $config = $this->config('core.base_field_override.node.foo.premium');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/nopremium/tests/src/Unit/NodeOptionPremiumHelperTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\nopremium\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\node\NodeInterface;
@@ @@
  */
 class NodeOptionPremiumHelperTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The service under test.
    *
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create the service to test.
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/nopremium/tests/src/Kernel/NopremiumKernelTestBase.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Install database schemes.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/nopremium/tests/src/Kernel/NodeViewTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create an administrative user.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/nopremium/tests/src/Kernel/Migrate/MigrateNodeTest.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Add Nopremium D7 data.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/nopremium/tests/src/Functional/UninstallTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->moduleHandler = $this->container->get('module_handler');
     $this->moduleInstaller = $this->container->get('module_installer');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/nopremium/tests/src/Functional/NopremiumBrowserTestBase.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->admin = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/nopremium/tests/src/Functional/NodeViewTest.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a content type and enable premium for this type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/nopremium/tests/src/Functional/NodeEditTest.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a content type.
@@ @@
       'title[0][value]' => 'Lorem ipsum',
       'premium[value]' => 1,
     ];
-    $this->drupalPostForm('node/add/article', $edit, 'Save');
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, 'Save');

     // Assert that a node was created and premium is enabled.
     $node = Node::load(1);
@@ @@
     $edit = [
       'premium[value]' => 1,
     ];
-    $this->drupalPostForm(sprintf('node/%s/edit', $node->id()), $edit, 'Save');
+    $this->drupalGet(sprintf('node/%s/edit', $node->id()));
+    $this->submitForm($edit, 'Save');

     // Assert that the node is now premium.
     $node = $this->reloadEntity($node);
@@ @@
       'title[0][value]' => 'Lorem ipsum',
       'premium[value]' => 1,
     ];
-    $this->drupalPostForm('node/add/article', $edit, 'Save');
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, 'Save');

     // Assert that a node was created and premium is enabled.
     $node = Node::load(1);
@@ @@
     $edit = [
       'premium[value]' => 1,
     ];
-    $this->drupalPostForm(sprintf('node/%s/edit', $node->id()), $edit, 'Save');
+    $this->drupalGet(sprintf('node/%s/edit', $node->id()));
+    $this->submitForm($edit, 'Save');

     // Assert that the node is now premium.
     $node = $this->reloadEntity($node);
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 11 files have been changed by Rector                                      

