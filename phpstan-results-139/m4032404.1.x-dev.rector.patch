diff --git a/m4032404.info.yml b/m4032404.info.yml
index e2beb63..871ae95 100644
--- a/m4032404.info.yml
+++ b/m4032404.info.yml
@@ -1,5 +1,5 @@
 name: 403 to 404
 description: 'Emit a 404 response for access denied pages'
 type: module
-core_version_requirement: ^8.7.7 || ^9
+core_version_requirement: ^8.7.7 || ^9 || ^10
 configure: m4032404.config
diff --git a/src/EventSubscriber/M4032404EventSubscriber.php b/src/EventSubscriber/M4032404EventSubscriber.php
index 34648a1..4bbda8b 100644
--- a/src/EventSubscriber/M4032404EventSubscriber.php
+++ b/src/EventSubscriber/M4032404EventSubscriber.php
@@ -2,11 +2,11 @@
 
 namespace Drupal\m4032404\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Routing\AdminContext;
 use Drupal\Core\Session\AccountProxyInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Symfony\Component\HttpKernel\KernelEvents;
@@ -56,16 +56,16 @@ class M4032404EventSubscriber implements EventSubscriberInterface {
   /**
    * Set the properly exception for event.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *   The response for exception event.
    */
-  public function onAccessDeniedException(GetResponseForExceptionEvent $event) {
-    if ($event->getException() instanceof AccessDeniedHttpException) {
+  public function onAccessDeniedException(ExceptionEvent $event) {
+    if ($event->getThrowable() instanceof AccessDeniedHttpException) {
       $admin_only = $this->config->get('admin_only');
       $is_admin = $this->adminContext->isAdminRoute();
 
       if ((!$admin_only || $is_admin) && !$this->currentUser->hasPermission('access 403 page')) {
-        $event->setException(new NotFoundHttpException());
+        $event->setThrowable(new NotFoundHttpException());
       }
     }
   }
diff --git a/tests/src/Functional/M4032404TestCaseTest.php b/tests/src/Functional/M4032404TestCaseTest.php
index 5b6316d..04b5374 100644
--- a/tests/src/Functional/M4032404TestCaseTest.php
+++ b/tests/src/Functional/M4032404TestCaseTest.php
@@ -26,7 +26,7 @@ class M4032404TestCaseTest extends BrowserTestBase {
   /**
    * Setup the default environment settings.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create and log in our privileged user.
@@ -39,14 +39,14 @@ class M4032404TestCaseTest extends BrowserTestBase {
    */
   public function testM4032404Test404() {
     $this->drupalGet('admin');
-    $this->assertResponse(404, 'Anonymous users get a 404 instead of a 403.');
+    $this->assertSession()->statusCodeEquals(404, 'Anonymous users get a 404 instead of a 403.');
     $this->drupalGet('user/1');
-    $this->assertResponse(404, 'User gets a 404 instead of a 403 on non-admin paths.');
+    $this->assertSession()->statusCodeEquals(404, 'User gets a 404 instead of a 403 on non-admin paths.');
 
     // Set admin-only.
     $this->config('m4032404.settings')->set('admin_only', TRUE)->save();
     $this->drupalGet('user/1');
-    $this->assertResponse(403, 'User gets a 403 on non-admin paths when admin-only is configured.');
+    $this->assertSession()->statusCodeEquals(403, 'User gets a 403 on non-admin paths when admin-only is configured.');
   }
 
 }
diff --git a/tests/src/Unit/EventSubscriber/M4032404EventSubscriberTest.php b/tests/src/Unit/EventSubscriber/M4032404EventSubscriberTest.php
index c55e367..c9a37aa 100644
--- a/tests/src/Unit/EventSubscriber/M4032404EventSubscriberTest.php
+++ b/tests/src/Unit/EventSubscriber/M4032404EventSubscriberTest.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\Tests\m4032404\Unit\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\m4032404\EventSubscriber\M4032404EventSubscriber;
 use Drupal\Tests\UnitTestCase;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Symfony\Component\HttpKernel\HttpKernelInterface;
@@ -22,48 +22,44 @@ class M4032404EventSubscriberTest extends UnitTestCase {
   /**
    * The event.
    *
-   * @var \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent
+   * @var \Symfony\Component\HttpKernel\Event\ExceptionEvent
    */
   protected $event;
 
   /**
    * The admin context.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject|\Drupal\Core\Routing\AdminContext
+   * @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\Core\Routing\AdminContext
    */
   protected $adminContext;
 
   /**
    * The current user.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject|\Drupal\Core\Session\AccountProxy
+   * @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\Core\Session\AccountProxy
    */
   protected $currentUser;
 
   /**
    * The config factory.
    *
-   * @var \PHPUnit_Framework_MockObject_MockBuilder|\Drupal\Core\Config\ConfigFactoryInterface
+   * @var \PHPUnit\Framework\MockObject\MockBuilder|\Drupal\Core\Config\ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
-    $this->adminContext = $this->getMockBuilder('\Drupal\Core\Routing\AdminContext')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->currentUser = $this->getMockBuilder('\Drupal\Core\Session\AccountProxy')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->adminContext = $this->createMock('\Drupal\Core\Routing\AdminContext');
+    $this->currentUser = $this->createMock('\Drupal\Core\Session\AccountProxy');
 
     $kernel = $this->createMock('\Symfony\Component\HttpKernel\HttpKernelInterface');
     $request = new Request();
 
-    $this->event = new GetResponseForExceptionEvent($kernel, $request, HttpKernelInterface::MASTER_REQUEST, new AccessDeniedHttpException());
+    $this->event = new ExceptionEvent($kernel, $request, HttpKernelInterface::MASTER_REQUEST, new AccessDeniedHttpException());
   }
 
   /**
@@ -85,7 +81,7 @@ class M4032404EventSubscriberTest extends UnitTestCase {
     $subscriber = new M4032404EventSubscriber($this->configFactory, $this->adminContext, $this->currentUser);
     $subscriber->onAccessDeniedException($this->event);
 
-    $e = $this->event->getException();
+    $e = $this->event->getThrowable();
 
     $this->assertTrue($e instanceof NotFoundHttpException);
 
@@ -109,7 +105,7 @@ class M4032404EventSubscriberTest extends UnitTestCase {
     $subscriber = new M4032404EventSubscriber($this->configFactory, $this->adminContext, $this->currentUser);
     $subscriber->onAccessDeniedException($this->event);
 
-    $e = $this->event->getException();
+    $e = $this->event->getThrowable();
 
     $this->assertTrue($e instanceof NotFoundHttpException);
   }
@@ -132,7 +128,7 @@ class M4032404EventSubscriberTest extends UnitTestCase {
     $subscriber = new M4032404EventSubscriber($this->configFactory, $this->adminContext, $this->currentUser);
     $subscriber->onAccessDeniedException($this->event);
 
-    $e = $this->event->getException();
+    $e = $this->event->getThrowable();
 
     $this->assertTrue($e instanceof AccessDeniedHttpException);
   }
