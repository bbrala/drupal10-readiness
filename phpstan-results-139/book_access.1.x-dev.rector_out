modules/contrib/book_access/book_access.api.php
modules/contrib/book_access/book_access.module
modules/contrib/book_access/src/Access/BookAccess.php
modules/contrib/book_access/src/BookAccessHelper.php
modules/contrib/book_access/src/Entity/BookAccessDefaults.php
modules/contrib/book_access/src/Entity/BookAccessDefaultsInterface.php
modules/contrib/book_access/src/Routing/RouteSubscriber.php
modules/contrib/book_access/tests/src/Kernel/BookAccessDefaultsTest.php
modules/contrib/book_access/tests/src/Kernel/BookAccessHelperTest.php

3 files with changes
====================

1) modules/contrib/book_access/tests/src/Kernel/BookAccessDefaultsTest.php:70

    ---------- begin diff ----------
@@ @@
     $query = $this->defaultStorage->getQuery();
     $results = $query->condition('grant_type', 'author')->execute();
     $this->assertIsArray($results, "Results are not available. Not an array");
-    $this->assertEqual(count($results), 1, "One result expected.");
+    $this->assertEquals(count($results), 1, "One result expected.");

     $query = \Drupal::entityTypeManager()
       ->getStorage('book_access_defaults')->getQuery();
     $results = $query->condition('grant_type', 'role')->execute();
     $this->assertIsArray($results, "Results are not available. Not an array");
-    $this->assertEqual(count($results), 3, "Three results expected.");
+    $this->assertEquals(count($results), 3, "Three results expected.");
   }

   /**
@@ @@
     $results = $query->condition('role_id', 'authenticated')
       ->execute();
     $this->assertIsArray($results, "Results are not available. Not an array");
-    $this->assertEqual(count($results), 1, "One result expected.");
+    $this->assertEquals(count($results), 1, "One result expected.");
     /** @var $config \Drupal\book_access\Entity\BookAccessDefaultsInterface */
     $config = $this->defaultStorage->load(current($results));
     $grants = $config->getGrants();
-    $this->assertEqual($grants['grant_add_child'], FALSE, "Grant add child expected FALSE.");
+    $this->assertEquals($grants['grant_add_child'], FALSE, "Grant add child expected FALSE.");

     // Update config.
     $grants['grant_add_child'] = TRUE;
@@ @@
     $results = $query2->condition('role_id', 'authenticated')
       ->execute();
     $this->assertIsArray($results, "Results are not available. Not an array");
-    $this->assertEqual(count($results), 1, "One result expected.");
+    $this->assertEquals(count($results), 1, "One result expected.");
     /** @var $config \Drupal\book_access\Entity\BookAccessDefaultsInterface */
     $config = $this->defaultStorage->load(current($results));
     $grants = $config->getGrants();
-    $this->assertEqual($grants['grant_add_child'], TRUE, "Grant add child expected TRUE.");
+    $this->assertEquals($grants['grant_add_child'], TRUE, "Grant add child expected TRUE.");
   }

   /**
@@ @@
     $results = $query->condition('role_id', $role1->id())
       ->execute();
     $this->assertIsArray($results, "Results are not available. Not an array");
-    $this->assertEqual(count($results), 1, "One result expected.");
+    $this->assertEquals(count($results), 1, "One result expected.");
   }

   /**
@@ @@
     $results = $query->condition('role_id', $role1->id())
       ->execute();
     $this->assertIsArray($results, "Results are not available. Not an array");
-    $this->assertEqual(count($results), 1, "One result expected.");
+    $this->assertEquals(count($results), 1, "One result expected.");
     $config = $this->defaultStorage->load(current($results));
     $config_id = $config->id();
     $role1->delete();
@@ @@
     $query = $this->defaultStorage->getQuery();
     $results = $query->condition('id', $config_id)
       ->execute();
-    $this->assertEqual(count($results), 0, "Zero results expected.");
+    $this->assertEquals(count($results), 0, "Zero results expected.");
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/book_access/src/Access/BookAccess.php:187

    ---------- begin diff ----------
@@ @@

     $resultSets = array();
     foreach ($queries as $table) {
-      $queryObj = db_select( $table, $table);
+      $queryObj = \Drupal::database()->select($table, $table);
       $queryObj
         ->condition( "nid", $bid, "=");
       if ($table == 'book_access_role') {
@@ @@
     // permissions entry in one of the tables.  iterate and find the missing ones
     // and check the defaults instead.
     if (! $hasPermission && $rowCount < 3) {
-      $node = node_load( $bid);
+      $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($bid);

       // check default author permissions first
       if (! isset($explicitTables['book_access_author'])) {
@@ @@
     }

     foreach ($tables as $table) {
-      db_update($table)
+      \Drupal::database()->update($table)
         ->fields( array(
           "grant_admin_access" => 0,
           "grant_update" => 0,
@@ @@
     }

     foreach ($grants as $grant) {
-      $result = db_query(
-        "SELECT nid FROM {book_access_author} WHERE uid = :uid AND grant_$grant > 0",
-        array(':uid' => $account->uid)
-      );
+      $result = \Drupal::database()->query("SELECT nid FROM {book_access_author} WHERE uid = :uid AND grant_$grant > 0", array(':uid' => $account->uid));

       foreach ($result as $book) {
         $permitted_bids[$book->nid] = $book->nid;
@@ @@
       }

       $roles = array_keys($account->roles);
-      $result = db_query(
-        "SELECT nid FROM {book_access_role} WHERE rid IN (:rid) AND grant_$grant > 0",
-        array(':rid' => $roles)
-      );
+      $result = \Drupal::database()->query("SELECT nid FROM {book_access_role} WHERE rid IN (:rid) AND grant_$grant > 0", array(':rid' => $roles));

       foreach ($result as $book) {
         $permitted_bids[$book->nid] = $book->nid;
       }

-      $result = db_query(
-        "SELECT nid FROM {book_access_user} WHERE uid = :uid AND grant_$grant > 0",
-        array(':uid' => $account->uid)
-      );
+      $result = \Drupal::database()->query("SELECT nid FROM {book_access_user} WHERE uid = :uid AND grant_$grant > 0", array(':uid' => $account->uid));

       foreach ($result as $book) {
         $permitted_bids[$book->nid] = $book->nid;
@@ @@
     }

     foreach ($info as $data) {
-      $result = db_query(
-        "SELECT * FROM {" . db_escape_table($data['table']) . "} WHERE nid = :nid",
-        array(':nid' => $bid)
-      );
+      $result = \Drupal::database()->query("SELECT * FROM {" . db_escape_table($data['table']) . "} WHERE nid = :nid", array(':nid' => $bid));

       foreach ($result as $grant) {
         $grants[] = array(
@@ @@
     $rcopy = $roles;

     $rids = array_keys($roles);
-    $result = db_query(
-      "SELECT * FROM {book_access_role} WHERE nid = :nid AND rid IN (:rid)",
-      array(':nid' => $bid, ':rid' => $rids)
-    );
+    $result = \Drupal::database()->query("SELECT * FROM {book_access_role} WHERE nid = :nid AND rid IN (:rid)", array(':nid' => $bid, ':rid' => $rids));

     // Build the role access permissions for the book.
     if ($result->rowCount() > 0) {
@@ @@
     );
     $uids = array();

-    $result = db_query(
-      "SELECT * FROM {book_access_user} bau INNER JOIN {users} u ON u.uid = bau.uid WHERE bau.nid = :nid",
-      array(':nid' => $bid)
-    );
+    $result = \Drupal::database()->query("SELECT * FROM {book_access_user} bau INNER JOIN {users} u ON u.uid = bau.uid WHERE bau.nid = :nid", array(':nid' => $bid));
     foreach ($result as $access) {
       $uid = $access->uid;
       $uids[$uid] = $uid;
@@ @@
    *   'grant_edit_outline'.
    */
   public static function setAuthorGrants($bid, $uid, array $grants) {
-    db_delete('book_access_author')
+    \Drupal::database()->delete('book_access_author')
       ->condition('nid', $bid)
       ->execute();
     self::addAuthorGrants($bid, $uid, $grants);
@@ @@
    *   'grant_edit_outline', and @code $rid @endcode is the role ID.
    */
   public static function setRoleGrants($bid, array $rids, array $grants) {
-    db_delete('book_access_role')
+    \Drupal::database()->delete('book_access_role')
       ->condition('nid', $bid)
       ->execute();
     self::addRoleGrants($bid, $rids, $grants);
@@ @@
    *   'grant_edit_outline', and @code $uid @endcode is the user ID.
    */
   public static function setUserGrants($bid, array $uids, array $grants) {
-    db_delete('book_access_user')
+    \Drupal::database()->delete('book_access_user')
       ->condition('nid', $bid)
       ->execute();
     self::addUserGrants($bid, $uids, $grants);
@@ @@
    * Resets book permissions to its defaults, ignoring user-specific ones.
    */
   public static function resetToDefault($nid) {
-    $node = node_load( $nid);
+    $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($nid);
     $roles = user_roles();

     $authorDefaults = variable_get('book_access_default_author_access');
@@ @@
       }

       if ($table) {
-        db_update($table)
+        \Drupal::database()->update($table)
           ->fields($fields)
           ->condition('nid', $bid)
           ->execute();
    ----------- end diff -----------

Applied rules:
 * DBDeleteRector
 * DBQueryRector
 * DBSelectRector
 * DBUpdateRector
 * NodeLoadRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/book_access/book_access.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Session\AccountInterface;
 /**
  * @file
  * Hooks provided by the Book access module.
@@ @@
  *   - the node for the book page (node)
  */
 function hook_book_access_roles_grants_alter(array &$rids, array &$grants, array $context) {
-  if (isset($rids[\Drupal\Core\Session\AccountInterface::AUTHENTICATED_RID])) {
-    $grants['grant_view'][\Drupal\Core\Session\AccountInterface::AUTHENTICATED_RID] = TRUE;
-    $grants['grant_update'][\Drupal\Core\Session\AccountInterface::AUTHENTICATED_RID] = TRUE;
-    $grants['grant_delete'][\Drupal\Core\Session\AccountInterface::AUTHENTICATED_RID] = TRUE;
+  if (isset($rids[AccountInterface::AUTHENTICATED_RID])) {
+    $grants['grant_view'][AccountInterface::AUTHENTICATED_RID] = TRUE;
+    $grants['grant_update'][AccountInterface::AUTHENTICATED_RID] = TRUE;
+    $grants['grant_delete'][AccountInterface::AUTHENTICATED_RID] = TRUE;
   }
 }
    ----------- end diff -----------

 [OK] 3 files have been changed by Rector                                       

