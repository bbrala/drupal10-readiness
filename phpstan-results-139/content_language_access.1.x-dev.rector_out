modules/contrib/content_language_access/content_language_access.module
modules/contrib/content_language_access/src/Form/ContentLanguageAccessAdminForm.php
modules/contrib/content_language_access/src/Tests/ContentLanguageAccessContentDetectionEnabledTest.php
modules/contrib/content_language_access/src/Tests/ContentLanguageAccessTest.php
modules/contrib/content_language_access/src/Tests/ContentLanguageAccessTestBase.php

2 files with changes
====================

1) modules/contrib/content_language_access/src/Tests/ContentLanguageAccessTestBase.php:58

    ---------- begin diff ----------
@@ @@
   /**
    * Implements setUp().
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser([
@@ @@
     $this->contentType = $this->drupalCreateContentType();
     // Set the content type to use multilingual support.
     $this->drupalGet("admin/structure/types/manage/{$this->contentType->id()}");
-    $this->assertText(t('Language settings'), 'Multilingual support widget present on content type configuration form.');
+    $this->assertSession()->pageTextContains(t('Language settings'));
     $edit = [
       'language_configuration[language_alterable]' => TRUE,
     ];
-    $this->drupalPostForm("admin/structure/types/manage/{$this->contentType->id()}", $edit, t('Save content type'));
-    $this->assertRaw(t('The content type %type has been updated.', ['%type' => $this->contentType->label()]));
+    $this->drupalGet("admin/structure/types/manage/{$this->contentType->id()}");
+    $this->submitForm($edit, t('Save content type'));
+    $this->assertSession()->responseContains(t('The content type %type has been updated.', ['%type' => $this->contentType->label()]));
   }

   /**
@@ @@
         'label' => $language_code,
         'direction' => LanguageInterface::DIRECTION_LTR,
       ];
-      $this->drupalPostForm('admin/config/regional/language/add', $edit, t('Add custom language'));
+      $this->drupalGet('admin/config/regional/language/add');
+      $this->submitForm($edit, t('Add custom language'));
     }
   }

@@ @@
           $node_language == Language::LANGCODE_NOT_APPLICABLE ||
           $node_language == $language->getId()
         ) {
-          $this->assertResponse(200);
+          $this->assertSession()->statusCodeEquals(200);
         }
         else {
-          $this->assertResponse(403);
+          $this->assertSession()->statusCodeEquals(403);
         }
       }
     }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/content_language_access/src/Tests/ContentLanguageAccessContentDetectionEnabledTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Implements setUp().
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 	
 	// Enable content language detection.
@@ @@
       'language_content[enabled][language-url]' => TRUE,
       'language_content[enabled][language-interface]' => FALSE,
     ];
-    $this->drupalPostForm('admin/config/regional/language/detection', $edit, t('Save settings'));
+ $this->drupalGet('admin/config/regional/language/detection');
+    $this->submitForm($edit, t('Save settings'));
   }

   /**
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 2 files have been changed by Rector                                       

