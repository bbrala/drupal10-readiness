diff --git a/config_update_ui/tests/src/Functional/ConfigProfileOverridesTest.php b/config_update_ui/tests/src/Functional/ConfigProfileOverridesTest.php
index f2ced76..2984a42 100644
--- a/config_update_ui/tests/src/Functional/ConfigProfileOverridesTest.php
+++ b/config_update_ui/tests/src/Functional/ConfigProfileOverridesTest.php
@@ -39,7 +39,7 @@ class ConfigProfileOverridesTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create user and log in.
@@ -91,7 +91,7 @@ class ConfigProfileOverridesTest extends BrowserTestBase {
     // Revert and verify that it reverted to the profile version, not the
     // system module version.
     $this->drupalGet('admin/config/development/configuration/report/revert/system.simple/system.theme');
-    $this->drupalPostForm(NULL, [], 'Revert');
+    $this->submitForm([], 'Revert');
     $this->drupalGet('admin/config/development/configuration/single/export/system.simple/system.theme');
     $session = $this->assertSession();
     $session->pageTextContains('admin: seven');
diff --git a/config_update_ui/tests/src/Functional/ConfigUpdateTest.php b/config_update_ui/tests/src/Functional/ConfigUpdateTest.php
index c7e7c43..d4f747e 100644
--- a/config_update_ui/tests/src/Functional/ConfigUpdateTest.php
+++ b/config_update_ui/tests/src/Functional/ConfigUpdateTest.php
@@ -49,7 +49,7 @@ class ConfigUpdateTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create user and log in.
@@ -124,7 +124,7 @@ class ConfigUpdateTest extends BrowserTestBase {
     // both the search page config type and user module.
     $this->drupalGet('admin/config/search/pages');
     $this->clickLink('Delete');
-    $this->drupalPostForm(NULL, [], 'Delete');
+    $this->submitForm([], 'Delete');
     $inactive = ['search.page.user_search' => 'Users'];
     $this->drupalGet('admin/config/development/configuration/report/type/search_page');
     $this->assertReport('Search page', [], [], [], $inactive);
@@ -159,7 +159,7 @@ class ConfigUpdateTest extends BrowserTestBase {
     // report to make sure we are importing the right config.
     $this->drupalGet('admin/config/development/configuration/report/type/search_page');
     $this->clickLink('Import from source');
-    $this->drupalPostForm(NULL, [], 'Import');
+    $this->submitForm([], 'Import');
     $session = $this->assertSession();
     $session->pageTextContains('has been imported');
     $this->assertNoReport();
@@ -176,7 +176,7 @@ class ConfigUpdateTest extends BrowserTestBase {
     // Test importing again, this time using the Drush import command.
     $this->drupalGet('admin/config/search/pages');
     $this->clickLink('Delete');
-    $this->drupalPostForm(NULL, [], 'Delete');
+    $this->submitForm([], 'Delete');
     $inactive = ['search.page.user_search' => 'Users'];
     $this->drupalGet('admin/config/development/configuration/report/type/search_page');
     $this->assertReport('Search page', [], [], [], $inactive);
@@ -187,7 +187,7 @@ class ConfigUpdateTest extends BrowserTestBase {
     // Edit the node search page from the search UI and verify report.
     $this->drupalGet('admin/config/search/pages');
     $this->clickLink('Edit');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'label' => 'New label',
       'path'  => 'new_path',
     ], 'Save search page');
@@ -241,7 +241,7 @@ class ConfigUpdateTest extends BrowserTestBase {
     $session->pageTextContains('Search page');
     $session->pageTextContains('node_search');
     $session->pageTextContains('Customizations will be lost. This action cannot be undone');
-    $this->drupalPostForm(NULL, [], 'Revert');
+    $this->submitForm([], 'Revert');
     $this->drupalGet('admin/config/development/configuration/report/type/search_page');
     $this->assertReport('Search page', [], [], [], []);
 
@@ -255,7 +255,7 @@ class ConfigUpdateTest extends BrowserTestBase {
     // Test reverting again, this time using Drush single revert command.
     $this->drupalGet('admin/config/search/pages');
     $this->clickLink('Edit');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'label' => 'New label',
       'path'  => 'new_path',
     ], 'Save search page');
@@ -269,7 +269,7 @@ class ConfigUpdateTest extends BrowserTestBase {
     // Test reverting again, this time using Drush multiple revert command.
     $this->drupalGet('admin/config/search/pages');
     $this->clickLink('Edit');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'label' => 'New label',
       'path'  => 'new_path',
     ], 'Save search page');
@@ -279,12 +279,13 @@ class ConfigUpdateTest extends BrowserTestBase {
     drush_config_update_ui_config_revert_multiple('type', 'search_page');
     $this->drupalGet('admin/config/development/configuration/report/type/search_page');
     $this->assertReport('Search page', [], [], [], []);
+    $this->drupalGet('admin/config/search/pages');
 
     // Add a new search page from the search UI and verify report.
-    $this->drupalPostForm('admin/config/search/pages', [
+    $this->submitForm([
       'search_type' => 'node_search',
     ], 'Add search page');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'label' => 'test',
       'id'    => 'test',
       'path'  => 'test',
@@ -309,17 +310,18 @@ class ConfigUpdateTest extends BrowserTestBase {
     $session = $this->assertSession();
     $session->pageTextContains('Are you sure');
     $session->pageTextContains('cannot be undone');
-    $this->drupalPostForm(NULL, [], 'Delete');
+    $this->submitForm([], 'Delete');
     $session = $this->assertSession();
     $session->pageTextContains('has been deleted');
 
     // And verify the report again.
     $this->drupalGet('admin/config/development/configuration/report/type/search_page');
     $this->assertReport('Search page', [], [], [], []);
+    $this->drupalGet('admin/config/search/pages');
 
     // Change the search module config and verify the actions work for
     // simple config.
-    $this->drupalPostForm('admin/config/search/pages', [
+    $this->submitForm([
       'minimum_word_size' => 4,
     ], 'Save configuration');
     $changed = ['search.settings' => 'search.settings'];
@@ -344,7 +346,7 @@ class ConfigUpdateTest extends BrowserTestBase {
 
     $this->drupalGet('admin/config/development/configuration/report/module/search');
     $this->clickLink('Revert to source');
-    $this->drupalPostForm(NULL, [], 'Revert');
+    $this->submitForm([], 'Revert');
 
     // Verify that the hash was retained in the revert.
     $this->drupalGet('admin/config/development/configuration/single/export/system.simple/search.settings');
@@ -353,10 +355,11 @@ class ConfigUpdateTest extends BrowserTestBase {
 
     $this->drupalGet('admin/config/development/configuration/report/module/search');
     $this->assertReport('Search module', [], [], [], [], ['added']);
+    $this->drupalGet('admin/config/content/formats/manage/plain_text');
 
     // Edit the plain_text filter from the filter UI and verify report.
     // The filter_format config type uses a label key other than 'label'.
-    $this->drupalPostForm('admin/config/content/formats/manage/plain_text', [
+    $this->submitForm([
       'name' => 'New label',
     ], 'Save configuration');
     $changed = ['filter.format.plain_text' => 'New label'];
diff --git a/src/ConfigLister.php b/src/ConfigLister.php
index 06219cc..46e6f31 100644
--- a/src/ConfigLister.php
+++ b/src/ConfigLister.php
@@ -198,7 +198,7 @@ class ConfigLister implements ConfigListInterface {
    *   List of config items provided by this extension.
    */
   protected function listProvidedItems($type, $name, $do_optional = FALSE) {
-    $pathname = drupal_get_filename($type, $name);
+    $pathname = \Drupal::service('extension.path.resolver')->getPathname($type, $name);
     $component = new Extension(\Drupal::root(), $type, $pathname);
     if ($do_optional) {
       $names = $this->extensionOptionalConfigStorage->getComponentNames([$component]);
diff --git a/src/ConfigRevertEvent.php b/src/ConfigRevertEvent.php
index 90944a1..a9f6ff0 100644
--- a/src/ConfigRevertEvent.php
+++ b/src/ConfigRevertEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\config_update;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Event context class for configuration revert/import events.
diff --git a/src/ConfigReverter.php b/src/ConfigReverter.php
index e47103c..2156503 100644
--- a/src/ConfigReverter.php
+++ b/src/ConfigReverter.php
@@ -113,7 +113,7 @@ class ConfigReverter implements ConfigRevertInterface, ConfigDeleteInterface {
 
     // Trigger an event notifying of this change.
     $event = new ConfigRevertEvent($type, $name);
-    $this->dispatcher->dispatch(ConfigRevertInterface::IMPORT, $event);
+    $this->dispatcher->dispatch($event, ConfigRevertInterface::IMPORT);
 
     return TRUE;
   }
@@ -165,7 +165,7 @@ class ConfigReverter implements ConfigRevertInterface, ConfigDeleteInterface {
 
     // Trigger an event notifying of this change.
     $event = new ConfigRevertEvent($type, $name);
-    $this->dispatcher->dispatch(ConfigRevertInterface::REVERT, $event);
+    $this->dispatcher->dispatch($event, ConfigRevertInterface::REVERT);
 
     return TRUE;
   }
@@ -190,7 +190,7 @@ class ConfigReverter implements ConfigRevertInterface, ConfigDeleteInterface {
 
     // Trigger an event notifying of this change.
     $event = new ConfigRevertEvent($type, $name);
-    $this->dispatcher->dispatch(ConfigDeleteInterface::DELETE, $event);
+    $this->dispatcher->dispatch($event, ConfigDeleteInterface::DELETE);
     return TRUE;
   }
 
diff --git a/tests/src/Unit/ConfigDifferTest.php b/tests/src/Unit/ConfigDifferTest.php
index 0852910..bf64f13 100644
--- a/tests/src/Unit/ConfigDifferTest.php
+++ b/tests/src/Unit/ConfigDifferTest.php
@@ -23,7 +23,7 @@ class ConfigDifferTest extends ConfigUpdateUnitTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->configDiffer = new ConfigDiffer($this->getTranslationMock());
   }
 
diff --git a/tests/src/Unit/ConfigListerTest.php b/tests/src/Unit/ConfigListerTest.php
index d9d1952..c9ac27e 100644
--- a/tests/src/Unit/ConfigListerTest.php
+++ b/tests/src/Unit/ConfigListerTest.php
@@ -44,7 +44,7 @@ class ConfigListerTest extends ConfigUpdateUnitTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $lister = $this->getMockBuilder('Drupal\config_update\ConfigListerWithProviders')
       ->setConstructorArgs([
         $this->getEntityManagerMock(),
diff --git a/tests/src/Unit/ConfigReverterTest.php b/tests/src/Unit/ConfigReverterTest.php
index 6c35cd7..0da702f 100644
--- a/tests/src/Unit/ConfigReverterTest.php
+++ b/tests/src/Unit/ConfigReverterTest.php
@@ -25,7 +25,7 @@ class ConfigReverterTest extends ConfigUpdateUnitTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->configReverter = new ConfigReverter(
       $this->getEntityManagerMock(),
       $this->getConfigStorageMock('active'),
diff --git a/tests/src/Unit/ConfigUpdateUnitTestBase.php b/tests/src/Unit/ConfigUpdateUnitTestBase.php
index 5194744..e96e1ea 100644
--- a/tests/src/Unit/ConfigUpdateUnitTestBase.php
+++ b/tests/src/Unit/ConfigUpdateUnitTestBase.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\Tests\config_update\Unit;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Tests\UnitTestCase;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Base class for unit testing in Config Update Manager.
@@ -38,7 +38,7 @@ abstract class ConfigUpdateUnitTestBase extends UnitTestCase {
     $definitions = [];
     $map = [];
     foreach ($this->entityDefinitionInformation as $info) {
-      $def = $this->getMockBuilder('Drupal\Core\Config\Entity\ConfigEntityTypeInterface')->getMock();
+      $def = $this->createMock('Drupal\Core\Config\Entity\ConfigEntityTypeInterface');
       $def
         ->expects($this->any())
         ->method('getConfigPrefix')
@@ -61,14 +61,14 @@ abstract class ConfigUpdateUnitTestBase extends UnitTestCase {
 
     // Add in a content entity definition, which shouldn't be recognized by the
     // config lister class.
-    $def = $this->getMockBuilder('Drupal\Core\Entity\ContentEntityTypeInterface')->getMock();
+    $def = $this->createMock('Drupal\Core\Entity\ContentEntityTypeInterface');
     $def
       ->expects($this->any())
       ->method('entityClassImplements')
       ->willReturn(FALSE);
     $definitions['content_entity'] = $def;
 
-    $manager = $this->getMockBuilder('Drupal\Core\Entity\EntityTypeManagerInterface')->getMock();
+    $manager = $this->createMock('Drupal\Core\Entity\EntityTypeManagerInterface');
     $manager
       ->method('getDefinitions')
       ->willReturn($definitions);
@@ -190,7 +190,7 @@ abstract class ConfigUpdateUnitTestBase extends UnitTestCase {
    */
   protected function getConfigStorageMock($type) {
     if ($type == 'active') {
-      $storage = $this->getMockBuilder('Drupal\Core\Config\StorageInterface')->getMock();
+      $storage = $this->createMock('Drupal\Core\Config\StorageInterface');
 
       // Various tests assume various values of configuration that need to be
       // read from active storage.
@@ -213,7 +213,7 @@ abstract class ConfigUpdateUnitTestBase extends UnitTestCase {
         ->will($this->returnValueMap($this->configStorageActiveInfo));
     }
     elseif ($type == 'extension') {
-      $storage = $this->getMockBuilder('Drupal\Core\Config\ExtensionInstallStorage')->disableOriginalConstructor()->getMock();
+      $storage = $this->createMock('Drupal\Core\Config\ExtensionInstallStorage');
 
       $value = [];
       foreach ($this->configStorageExtensionInfo[2][1] as $item) {
@@ -240,7 +240,7 @@ abstract class ConfigUpdateUnitTestBase extends UnitTestCase {
 
     }
     else {
-      $storage = $this->getMockBuilder('Drupal\Core\Config\ExtensionInstallStorage')->disableOriginalConstructor()->getMock();
+      $storage = $this->createMock('Drupal\Core\Config\ExtensionInstallStorage');
 
       $value = [];
       foreach ($this->configStorageOptionalInfo[2][1] as $item) {
@@ -271,7 +271,7 @@ abstract class ConfigUpdateUnitTestBase extends UnitTestCase {
    * Creates a mock module handler for the test.
    */
   protected function getModuleHandlerMock() {
-    $manager = $this->getMockBuilder('Drupal\Core\Extension\ModuleHandlerInterface')->getMock();
+    $manager = $this->createMock('Drupal\Core\Extension\ModuleHandlerInterface');
     $manager->method('getModuleList')
       ->willReturn(['foo_module' => '', 'standard' => '']);
 
@@ -282,7 +282,7 @@ abstract class ConfigUpdateUnitTestBase extends UnitTestCase {
    * Creates a mock theme handler for the test.
    */
   protected function getThemeHandlerMock() {
-    $manager = $this->getMockBuilder('Drupal\Core\Extension\ThemeHandlerInterface')->getMock();
+    $manager = $this->createMock('Drupal\Core\Extension\ThemeHandlerInterface');
     $manager->method('listInfo')
       ->willReturn(['foo_theme' => '']);
     return $manager;
@@ -292,7 +292,7 @@ abstract class ConfigUpdateUnitTestBase extends UnitTestCase {
    * Creates a mock string translation class for the test.
    */
   protected function getTranslationMock() {
-    $translation = $this->getMockBuilder('Drupal\Core\StringTranslation\TranslationInterface')->getMock();
+    $translation = $this->createMock('Drupal\Core\StringTranslation\TranslationInterface');
     $translation
       ->method('translateString')
       ->will($this->returnCallback([$this, 'mockTranslate']));
@@ -330,7 +330,7 @@ abstract class ConfigUpdateUnitTestBase extends UnitTestCase {
    * Stores dispatched events in ConfigUpdateUnitTestBase::dispatchedEvents.
    */
   protected function getEventDispatcherMock() {
-    $event = $this->getMockBuilder('Symfony\Component\EventDispatcher\EventDispatcherInterface')->getMock();
+    $event = $this->createMock('Symfony\Component\EventDispatcher\EventDispatcherInterface');
     $event
       ->method('dispatch')
       ->will($this->returnCallback([$this, 'mockDispatch']));
@@ -374,7 +374,7 @@ abstract class ConfigUpdateUnitTestBase extends UnitTestCase {
    * Creates a mock config factory class for the test.
    */
   protected function getConfigFactoryMock() {
-    $config = $this->getMockBuilder('Drupal\Core\Config\ConfigFactoryInterface')->getMock();
+    $config = $this->createMock('Drupal\Core\Config\ConfigFactoryInterface');
     $config
       ->method('getEditable')
       ->will($this->returnCallback([$this, 'mockGetEditable']));
