modules/contrib/simplenews/modules/simplenews_demo/simplenews_demo.install
modules/contrib/simplenews/simplenews.tokens.inc
modules/contrib/simplenews/src/Form/SubscriberDeleteForm.php
modules/contrib/simplenews/src/Mail/MailInterface.php
modules/contrib/simplenews/src/Plugin/simplenews/RecipientHandler/RecipientHandlerAll.php
modules/contrib/simplenews/src/Subscription/SubscriptionStorage.php
modules/contrib/simplenews/tests/src/Kernel/SimplenewsSynchronizeFieldsTest.php
modules/contrib/simplenews/src/Mail/MailTest.php
modules/contrib/simplenews/src/Mail/Mailer.php
modules/contrib/simplenews/src/Form/SubscriberExportForm.php
modules/contrib/simplenews/modules/simplenews_demo/src/Plugin/simplenews/RecipientHandler/RecipientHandlerNewUsers.php
modules/contrib/simplenews/src/Plugin/simplenews/RecipientHandler/RecipientHandlerBase.php
modules/contrib/simplenews/src/Subscription/SubscriptionStorageInterface.php
modules/contrib/simplenews/src/SubscriptionWidgetInterface.php
modules/contrib/simplenews/tests/modules/simplenews_test/simplenews_test.module
modules/contrib/simplenews/modules/simplenews_demo/src/Plugin/simplenews/RecipientHandler/RecipientHandlerSiteMail.php
modules/contrib/simplenews/modules/simplenews_demo/src/Plugin/simplenews/RecipientHandler/RecipientHandlerSubscribersByRole.php
modules/contrib/simplenews/modules/simplenews_demo/tests/src/Functional/SimplenewsDemoTest.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsAdministrationTest.php
modules/contrib/simplenews/src/Form/SubscriberForm.php
modules/contrib/simplenews/simplenews.views.inc
modules/contrib/simplenews/simplenews_rules/simplenews_rules.module
modules/contrib/simplenews/src/Form/SubscriberMassSubscribeForm.php
modules/contrib/simplenews/simplenews_rules/simplenews_rules.rules.inc
modules/contrib/simplenews/src/Plugin/simplenews/RecipientHandler/RecipientHandlerEntityBase.php
modules/contrib/simplenews/src/Plugin/simplenews/RecipientHandler/RecipientHandlerSelectBase.php
modules/contrib/simplenews/src/AbortSendingException.php
modules/contrib/simplenews/src/Commands/SimplenewsCommands.php
modules/contrib/simplenews/src/Plugin/views/field/Link.php
modules/contrib/simplenews/simplenews.api.php
modules/contrib/simplenews/simplenews.drush.inc
modules/contrib/simplenews/src/Form/SubscriberMassUnsubscribeForm.php
modules/contrib/simplenews/simplenews.install
modules/contrib/simplenews/src/Form/SubscriberSettingsForm.php
modules/contrib/simplenews/src/Plugin/views/field/SendStatus.php
modules/contrib/simplenews/src/Form/SubscriberValidateForm.php
modules/contrib/simplenews/src/Controller/ConfirmationController.php
modules/contrib/simplenews/src/Form/SubscriptionSettingsForm.php
modules/contrib/simplenews/src/Plugin/views/field/UserName.php
modules/contrib/simplenews/src/Form/SubscriptionsAccountForm.php
modules/contrib/simplenews/src/RecipientHandler/Annotation/RecipientHandler.php
modules/contrib/simplenews/src/RecipientHandler/RecipientHandlerInterface.php
modules/contrib/simplenews/src/RecipientHandler/RecipientHandlerManager.php
modules/contrib/simplenews/src/Mail/MailerInterface.php
modules/contrib/simplenews/src/SkipMailException.php
modules/contrib/simplenews/src/Spool/SpoolList.php
modules/contrib/simplenews/src/NewsletterInterface.php
modules/contrib/simplenews/src/NewsletterListBuilder.php
modules/contrib/simplenews/src/Plugin/Action/SendIssue.php
modules/contrib/simplenews/src/Form/SubscriptionsBlockForm.php
modules/contrib/simplenews/src/Entity/Newsletter.php
modules/contrib/simplenews/src/Plugin/Action/StopIssue.php
modules/contrib/simplenews/src/Plugin/Block/SimplenewsSubscriptionBlock.php
modules/contrib/simplenews/simplenews.module
modules/contrib/simplenews/src/Spool/SpoolListInterface.php
modules/contrib/simplenews/src/Spool/SpoolStorage.php
modules/contrib/simplenews/src/Form/SubscriptionsFormBase.php
modules/contrib/simplenews/src/Entity/Subscriber.php
modules/contrib/simplenews/src/Plugin/Derivative/AddSimplenewsIssueActionLinks.php
modules/contrib/simplenews/src/Form/SubscriptionsPageForm.php
modules/contrib/simplenews/src/Plugin/Field/FieldFormatter/SimplenewsSubscriptionStatusFormatter.php
modules/contrib/simplenews/src/Mail/MailBuilder.php
modules/contrib/simplenews/src/Plugin/Field/FieldType/IssueItem.php
modules/contrib/simplenews/src/Mail/MailBuilderInterface.php
modules/contrib/simplenews/src/Mail/MailCacheBuild.php
modules/contrib/simplenews/src/Mail/MailCacheInterface.php
modules/contrib/simplenews/src/Mail/MailCacheNone.php
modules/contrib/simplenews/src/Mail/MailCacheStatic.php
modules/contrib/simplenews/src/Mail/MailEntity.php
modules/contrib/simplenews/src/Plugin/Field/FieldType/SubscriptionItem.php
modules/contrib/simplenews/src/Plugin/Field/FieldWidget/IssueWidget.php
modules/contrib/simplenews/src/Spool/SpoolStorageInterface.php
modules/contrib/simplenews/src/SubscriberAccessControlHandler.php
modules/contrib/simplenews/src/EventSubscriber/MigrationSubscriber.php
modules/contrib/simplenews/src/SubscriberInterface.php
modules/contrib/simplenews/src/Plugin/Field/FieldWidget/SubscriptionWidget.php
modules/contrib/simplenews/src/SubscriberViewsData.php
modules/contrib/simplenews/src/Form/ConfirmAddForm.php
modules/contrib/simplenews/src/Subscription/SubscriptionManager.php
modules/contrib/simplenews/src/Plugin/Mail/HTMLTestingMailSystem.php
modules/contrib/simplenews/src/Plugin/migrate/source/d7/Issue.php
modules/contrib/simplenews/src/Mail/MailFormatHelper.php
modules/contrib/simplenews/src/Form/ConfirmMultiForm.php
modules/contrib/simplenews/src/Plugin/migrate/source/d7/Newsletter.php
modules/contrib/simplenews/src/Form/ConfirmRemovalForm.php
modules/contrib/simplenews/src/Subscription/SubscriptionManagerInterface.php
modules/contrib/simplenews/src/Form/MailSettingsForm.php
modules/contrib/simplenews/src/Plugin/migrate/source/d7/Subscriber.php
modules/contrib/simplenews/src/Plugin/monitoring/SensorPlugin/PendingSensorPlugin.php
modules/contrib/simplenews/src/Form/NewsletterDeleteForm.php
modules/contrib/simplenews/src/Form/NewsletterForm.php
modules/contrib/simplenews/src/Form/NewsletterSettingsForm.php
modules/contrib/simplenews/src/Form/NodeTabForm.php
modules/contrib/simplenews/src/Form/PrepareUninstallForm.php
modules/contrib/simplenews/src/Form/RequestHashForm.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsFieldUiTest.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsI18nTest.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsPersonalizationFormsTest.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsRecipientHandlerTest.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsSendTest.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsSourceTest.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsSubscribeTest.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsSynchronizeFieldsFormTest.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsTestBase.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsTestSubscriptionOutput.php
modules/contrib/simplenews/tests/src/Functional/SimplenewsUninstallTest.php
modules/contrib/simplenews/tests/src/Kernel/SimplenewsKernelTest.php
modules/contrib/simplenews/tests/src/Kernel/SimplenewsMonitoringTest.php

26 files with changes
=====================

1) modules/contrib/simplenews/tests/src/Kernel/SimplenewsSynchronizeFieldsTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
     $this->installEntitySchema('simplenews_subscriber');
@@ @@

     // Assert that subscriber's fields are updated.
     $subscriber = Subscriber::load($subscriber->id());
-    $this->assertEqual($subscriber->getUserId(), $user->id());
-    $this->assertEqual($subscriber->getLangcode(), 'fr');
+    $this->assertEquals($subscriber->getUserId(), $user->id());
+    $this->assertEquals($subscriber->getLangcode(), 'fr');
     $this->assertFalse($subscriber->getStatus());

     // Update user fields.
@@ @@

     // Assert that subscriber's fields are updated again.
     $subscriber = Subscriber::load($subscriber->id());
-    $this->assertEqual($subscriber->getMail(), 'user2@example.com');
-    $this->assertEqual($subscriber->getLangcode(), 'en');
+    $this->assertEquals($subscriber->getMail(), 'user2@example.com');
+    $this->assertEquals($subscriber->getLangcode(), 'en');
     $this->assertTrue($subscriber->getStatus());

     // Status is still synced even if sync_fields is not set.
@@ @@

     // Assert that (only) the shared field is also updated on the user.
     $user = User::load($user->id());
-    $this->assertEqual($user->get('field_on_both')->value, 'bar');
-    $this->assertEqual($user->get('created')->value, 1000);
+    $this->assertEquals($user->get('field_on_both')->value, 'bar');
+    $this->assertEquals($user->get('created')->value, 1000);

     // Update the fields on the user.
     $user->set('field_on_both', 'baz');
@@ @@

     // Assert that (only) the shared field is also updated on the subscriber.
     $subscriber = Subscriber::load($subscriber->id());
-    $this->assertEqual($subscriber->get('field_on_both')->value, 'baz');
-    $this->assertEqual($subscriber->get('created')->value, 3000);
+    $this->assertEquals($subscriber->get('field_on_both')->value, 'baz');
+    $this->assertEquals($subscriber->get('created')->value, 3000);
   }

   /**
@@ @@
     ]);

     // Assert that the shared field already has a value.
-    $this->assertEqual($subscriber->get('field_on_both')->value, $user->get('field_on_both')->value);
+    $this->assertEquals($subscriber->get('field_on_both')->value, $user->get('field_on_both')->value);

     // Create a subscriber with values for the fields.
     $subscriber = Subscriber::create([
@@ @@
     ]);

     // Assert that the shared field already has a value.
-    $this->assertEqual($user->get('field_on_both')->value, $subscriber->get('field_on_both')->value);
+    $this->assertEquals($user->get('field_on_both')->value, $subscriber->get('field_on_both')->value);
   }

   /**
@@ @@
     $subscriber->set('field_on_both', 'bar');
     $subscriber->save();
     $user = User::load($user->id());
-    $this->assertEqual($user->get('field_on_both')->value, 'foo');
+    $this->assertEquals($user->get('field_on_both')->value, 'foo');

     // Create a subscriber with a value for the field.
     $subscriber = Subscriber::create([
@@ @@
     $user->set('field_on_both', 'bar');
     $user->save();
     $subscriber = Subscriber::load($subscriber->id());
-    $this->assertEqual($subscriber->get('field_on_both')->value, 'foo');
+    $this->assertEquals($subscriber->get('field_on_both')->value, 'foo');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/simplenews/src/SubscriberInterface.php:171

    ---------- begin diff ----------
@@ @@
    * @param int $timestamp
    *   The timestamp of when the subscription was added.
    */
-  public function subscribe($newsletter_id, $status = SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $source = 'unknown', $timestamp = REQUEST_TIME);
+  public function subscribe($newsletter_id, $status = SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $source = 'unknown', $timestamp = \Drupal::time()->getRequestTime());

   /**
    * Delete a subscription to a certain newsletter of the subscriber.
@@ @@
    * @param int $timestamp
    *   The timestamp of when the subscription was added.
    */
-  public function unsubscribe($newsletter_id, $source = 'unknown', $timestamp = REQUEST_TIME);
+  public function unsubscribe($newsletter_id, $source = 'unknown', $timestamp = \Drupal::time()->getRequestTime());

   /**
    * Load a simplenews newsletter subscriber object by mail.
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector


3) modules/contrib/simplenews/src/Spool/SpoolStorage.php:153

    ---------- begin diff ----------
@@ @@
       ->condition('msid', (array) $msids, 'IN')
       ->fields([
         'status' => $status,
-        'timestamp' => REQUEST_TIME,
+        'timestamp' => \Drupal::time()->getRequestTime(),
       ])
       ->execute();
   }
@@ @@
    */
   public function clear() {

-    $expiration_time = REQUEST_TIME - $this->config->get('mail.spool_expire') * 86400;
+    $expiration_time = \Drupal::time()->getRequestTime() - $this->config->get('mail.spool_expire') * 86400;
     return $this->connection->delete('simplenews_mail_spool')
       ->condition('status', [SpoolStorageInterface::STATUS_DONE, SpoolStorageInterface::STATUS_SKIPPED], 'IN')
       ->condition('timestamp', $expiration_time, '<=')
@@ @@
       $spool['status'] = SpoolStorageInterface::STATUS_PENDING;
     }
     if (!isset($spool['timestamp'])) {
-      $spool['timestamp'] = REQUEST_TIME;
+      $spool['timestamp'] = \Drupal::time()->getRequestTime();
     }
     if (isset($spool['data'])) {
       $spool['data'] = serialize($spool['data']);
@@ @@
    */
   protected function getExpirationTime() {
     $timeout = $this->config->get('mail.spool_progress_expiration');
-    $expiration_time = REQUEST_TIME - $timeout;
+    $expiration_time = \Drupal::time()->getRequestTime() - $timeout;
     return $expiration_time;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector


4) modules/contrib/simplenews/src/Plugin/views/field/SendStatus.php:60

    ---------- begin diff ----------
@@ @@
       SIMPLENEWS_STATUS_SEND_READY => 'images/sn-sent.png',
     ];
     if (isset($images[$status])) {
-      $message['uri'] = drupal_get_path('module', 'simplenews') . '/' . $images[$status];
+      $message['uri'] = \Drupal::service('extension.list.module')->getPath('simplenews') . '/' . $images[$status];
     }
     else {
       $message['uri'] = NULL;
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/simplenews/src/Plugin/simplenews/RecipientHandler/RecipientHandlerSelectBase.php:19

    ---------- begin diff ----------
@@ @@
     $query->addExpression("'$entity_type'", 'entity_type');
     $query->addExpression($this->issue->id(), 'entity_id');
     $query->addExpression(SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, 'status');
-    $query->addExpression(REQUEST_TIME, 'timestamp');
+    $query->addExpression(\Drupal::time()->getRequestTime(), 'timestamp');
     $this->connection->insert('simplenews_mail_spool')->from($query)->execute();

     return $query->countQuery()->execute()->fetchField();
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/simplenews/src/Plugin/simplenews/RecipientHandler/RecipientHandlerBase.php:134

    ---------- begin diff ----------
@@ @@
       'entity_type' => $this->issue->getEntityTypeId(),
       'entity_id' => $this->issue->id(),
       'status' => SpoolStorageInterface::STATUS_PENDING,
-      'timestamp' => REQUEST_TIME,
+      'timestamp' => \Drupal::time()->getRequestTime(),
       'newsletter_id' => $this->getNewsletterId(),
     ];
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/simplenews/src/Mail/Mailer.php:305

    ---------- begin diff ----------
@@ @@
         $this->logger->notice('%success emails sent, %skipped skipped, %fail failed permanently, %retry failed retrying.', $log_array);
       }

-      $this->state->set('simplenews.last_cron', REQUEST_TIME);
+      $this->state->set('simplenews.last_cron', \Drupal::time()->getRequestTime());
       $this->state->set('simplenews.last_sent', $freq[SpoolStorageInterface::STATUS_DONE]);

       $this->accountSwitcher->switchBack();
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector


8) modules/contrib/simplenews/simplenews.module:739

    ---------- begin diff ----------
@@ @@
 /**
  * Generates the hash key used for subscribe/unsubscribe link.
  */
-function simplenews_generate_hash($mail, $action = '', $timestamp = REQUEST_TIME) {
+function simplenews_generate_hash($mail, $action = '', $timestamp = \Drupal::time()->getRequestTime()) {
   $data = $mail . \Drupal::service('private_key')->get() . $action . $timestamp;
   return Crypt::hashBase64($data);
 }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector


9) modules/contrib/simplenews/modules/simplenews_demo/tests/src/Functional/SimplenewsDemoTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Install bartik theme.
     \Drupal::service('theme_installer')->install(['bartik']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/simplenews/src/Entity/Subscriber.php:241

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function subscribe($newsletter_id, $status = SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $source = 'unknown', $timestamp = REQUEST_TIME) {
+  public function subscribe($newsletter_id, $status = SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $source = 'unknown', $timestamp = \Drupal::time()->getRequestTime()) {
     if ($subscription = $this->getSubscription($newsletter_id)) {
       $subscription->status = $status;
     }
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function unsubscribe($newsletter_id, $source = 'unknown', $timestamp = REQUEST_TIME) {
+  public function unsubscribe($newsletter_id, $source = 'unknown', $timestamp = \Drupal::time()->getRequestTime()) {
     if ($subscription = $this->getSubscription($newsletter_id)) {
       $subscription->status = SIMPLENEWS_SUBSCRIPTION_STATUS_UNSUBSCRIBED;
     }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/simplenews/src/Controller/ConfirmationController.php:84

    ---------- begin diff ----------
@@ @@
     if ($subscriber && $hash == simplenews_generate_hash($subscriber->getMail(), 'combined' . serialize($subscriber->getChanges()), $timestamp)) {
       // If the hash is valid but timestamp is too old, display form to request
       // a new hash.
-      if ($timestamp < REQUEST_TIME - $config->get('hash_expiration')) {
+      if ($timestamp < \Drupal::time()->getRequestTime() - $config->get('hash_expiration')) {
         $context = [
           'simplenews_subscriber' => $subscriber,
         ];
@@ @@

       // If the hash is valid but timestamp is too old, display form to request
       // a new hash.
-      if ($timestamp < REQUEST_TIME - $config->get('hash_expiration')) {
+      if ($timestamp < \Drupal::time()->getRequestTime() - $config->get('hash_expiration')) {
         $context = [
           'simplenews_subscriber' => $subscriber,
           'newsletter' => $newsletter,
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/simplenews/simplenews.tokens.inc:90

    ---------- begin diff ----------
@@ @@
       $url_arguments = ['absolute' => TRUE, 'langcode' => $language];

       foreach ($tokens as $name => $original) {
-        $route_parameters = ['snid' => $subscriber->id(), 'timestamp' => REQUEST_TIME];
+        $route_parameters = ['snid' => $subscriber->id(), 'timestamp' => \Drupal::time()->getRequestTime()];
         switch ($name) {
           case 'subscribe-url':
             $hash = simplenews_generate_hash($subscriber->getMail(), 'add');
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector


13) modules/contrib/simplenews/tests/src/Kernel/SimplenewsMonitoringTest.php:33

    ---------- begin diff ----------
@@ @@

     // No spool items - status OK.
     $result = $this->runSensor('simplenews_pending');
-    $this->assertEqual($result->getValue(), 0);
+    $this->assertEquals($result->getValue(), 0);

     // Crate a spool item in state pending.
     \Drupal::service('simplenews.spool_storage')->addMail([
@@ @@
     ]);

     $result = $this->runSensor('simplenews_pending');
-    $this->assertEqual($result->getValue(), 1);
+    $this->assertEquals($result->getValue(), 1);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/simplenews/tests/src/Kernel/SimplenewsKernelTest.php:21

    ---------- begin diff ----------
@@ @@
    * Test mail masking function.
    */
   public function testMasking() {
-    $this->assertEqual('t*****@e*****.org', simplenews_mask_mail('test@example.org'));
-    $this->assertEqual('t*****@e*****.org', simplenews_mask_mail('t@example.org'));
-    $this->assertEqual('t*****@t*****.org', simplenews_mask_mail('t@test.example.org'));
-    $this->assertEqual('t*****@e*****', simplenews_mask_mail('t@example'));
+    $this->assertEquals('t*****@e*****.org', simplenews_mask_mail('test@example.org'));
+    $this->assertEquals('t*****@e*****.org', simplenews_mask_mail('t@example.org'));
+    $this->assertEquals('t*****@t*****.org', simplenews_mask_mail('t@test.example.org'));
+    $this->assertEquals('t*****@e*****', simplenews_mask_mail('t@example'));

   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/simplenews/tests/src/Functional/SimplenewsUninstallTest.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     \Drupal::service('module_installer')->uninstall(['simplenews_test']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/simplenews/tests/src/Functional/SimplenewsTestSubscriptionOutput.php:34

    ---------- begin diff ----------
@@ @@
     $this->drupalLogin($admin_user);
     // Tests extra fields for admin user.
     $this->drupalGet('user/' . $admin_user->id());
-    $this->assertLink('Manage subscriptions');
+    $this->assertSession()->linkExists('Manage subscriptions');
     $this->drupalLogout();
     // Tests extra fields for user.
     $this->drupalLogin($user);
     $this->drupalGet('user/' . $admin_user->id());
-    $this->assertNoLink('Manage subscriptions');
+    $this->assertSession()->linkNotExists('Manage subscriptions');
     $this->drupalGet('user/' . $user->id());
-    $this->assertLink('Manage subscriptions');
+    $this->assertSession()->linkExists('Manage subscriptions');
     $this->drupalLogout();
     // Tests extra fields for anonymous users.
     $this->drupalGet('user/' . $admin_user->id());
-    $this->assertNoLink('Manage subscriptions');
+    $this->assertSession()->linkNotExists('Manage subscriptions');
     $this->drupalGet('user/' . $user->id());
-    $this->assertNoLink('Manage subscriptions');
+    $this->assertSession()->linkNotExists('Manage subscriptions');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertLinkRector
 * AssertNoLinkRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/simplenews/tests/src/Functional/SimplenewsTestBase.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
     $this->drupalPlaceBlock('local_actions_block');
@@ @@
     $path = $uid ? "/user/$uid/simplenews" : '';
     $this->drupalGet($path);
     $this->submitForm($edit, $uid ? t('Save') : t('Subscribe'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     if (!$uid) {
       $block->delete();
@@ @@
    */
   protected function resetPassLogin(UserInterface $user) {
     $uid = $user->id();
-    $timestamp = REQUEST_TIME;
+    $timestamp = \Drupal::time()->getRequestTime();
     $hash = user_pass_rehash($user, $timestamp);
     $this->drupalGet("/user/reset/$uid/$timestamp/$hash");
     $this->submitForm([], 'Log in');
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/simplenews/tests/src/Functional/SimplenewsSynchronizeFieldsFormTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Add a field to both entities.
@@ @@
     // Edit subscriber field and assert user field is changed accordingly.
     $this->drupalLogin($this->user);
     $this->drupalGet('admin/people/simplenews/edit/' . $subscriber->id());
-    $this->assertField('field_shared[0][value]');
+    $this->assertSession()->fieldExists('field_shared[0][value]');
     $this->assertSession()->responseContains($this->user->field_shared->value);

     $new_value = $this->randomMachineName();
@@ @@
     $this->assertSession()->responseContains($new_value);

     $this->user = User::load($this->user->id());
-    $this->assertEqual($this->user->field_shared->value, $new_value);
+    $this->assertEquals($this->user->field_shared->value, $new_value);

     // Unset the sync setting and assert field is not synced.
     $this->drupalGet('admin/config/people/simplenews/settings/subscriber');
@@ @@
     $this->assertSession()->responseContains($unsynced_value);

     $this->user = User::load($this->user->id());
-    $this->assertEqual($this->user->field_shared->value, $new_value);
-    $this->assertNotEqual($this->user->field_shared->value, $unsynced_value);
+    $this->assertEquals($this->user->field_shared->value, $new_value);
+    $this->assertNotEquals($this->user->field_shared->value, $unsynced_value);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldRector
 * AssertNotEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/simplenews/tests/src/Functional/SimplenewsSubscribeTest.php:55

    ---------- begin diff ----------
@@ @@
     $this->assertMailText(t('We have received a request to subscribe @user', ['@user' => $mail]));

     $mails = $this->getMails();
-    $this->assertEqual($mails[0]['from'], 'simpletest@example.com');
-    $this->assertEqual($mails[0]['headers']['From'], '"Drupal" <simpletest@example.com>');
+    $this->assertEquals($mails[0]['from'], 'simpletest@example.com');
+    $this->assertEquals($mails[0]['headers']['From'], '"Drupal" <simpletest@example.com>');

     $confirm_url = $this->extractConfirmationLink($this->getMail(0));

@@ @@
     // Go to the manage page and submit without changes.
     $subscriber = Subscriber::loadByMail($mail);
     $hash = simplenews_generate_hash($subscriber->getMail(), 'manage');
-    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . REQUEST_TIME . '/' . $hash);
+    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . \Drupal::time()->getRequestTime() . '/' . $hash);
     $this->submitForm([], 'Update');
     $this->assertSession()->pageTextContains('Your newsletter subscriptions have been updated.');
     $this->assertCount(1, $this->getMails(), 'No confirmation mails have been sent.');
@@ @@
     foreach ($disable as $newsletter_id) {
       $edit['subscriptions[' . $newsletter_id . ']'] = FALSE;
     }
-    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . REQUEST_TIME . '/' . $hash);
+    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . \Drupal::time()->getRequestTime() . '/' . $hash);
     $this->submitForm($edit, t('Update'));

     // Verify subscription changes.
@@ @@
       $this->fail('Exception not thrown.');
     }
     catch (\Exception $e) {
-      $this->assertEqual($e->getMessage(), 'The subscriber does not exist.');
+      $this->assertEquals($e->getMessage(), 'The subscriber does not exist.');
     }

     // Test expired confirmation links.
@@ @@
     $this->subscribe($enable, $mail);

     $subscriber = Subscriber::loadByMail($mail);
-    $expired_timestamp = REQUEST_TIME - 86401;
+    $expired_timestamp = \Drupal::time()->getRequestTime() - 86401;
     $hash = simplenews_generate_hash($subscriber->getMail(), 'combined' . serialize($subscriber->getChanges()), $expired_timestamp);
     $url = 'newsletter/confirm/combined/' . $subscriber->id() . '/' . $expired_timestamp . '/' . $hash;
     $this->drupalGet($url);
@@ @@
       return FALSE;
     }
     $confirm_url = $match[0];
-    $this->pass(t('Confirmation URL found: @url', ['@url' => $confirm_url]));
     return $confirm_url;
   }

@@ @@
       return FALSE;
     }
     $validate_url = $match[0];
-    $this->pass(t('Validation URL found: @url', ['@url' => $validate_url]));
     return $validate_url;
   }

@@ @@

     $this->submitForm([], 'Confirm');
     $this->assertSession()->responseContains('Subscription changes confirmed for <em class="placeholder">' . $mail . '</em>.');
-    $this->assertUrl(new Url('<front>'));
+    $this->assertSession()->addressEquals(new Url('<front>'));

     // Test that it is possible to register with a mail address that is already
     // a subscriber.
@@ @@
     \Drupal::entityTypeManager()->getStorage('simplenews_subscriber')->resetCache();
     $subscriber = Subscriber::loadByMail($mail);
     $account = user_load_by_mail($mail);
-    $this->assertEqual($subscriber->getUserId(), $account->id());
-    $this->assertEqual($account->getDisplayName(), $edit['name']);
+    $this->assertEquals($subscriber->getUserId(), $account->id());
+    $this->assertEquals($account->getDisplayName(), $edit['name']);

     $this->drupalLogout();

@@ @@
     $this->assertSession()->pageTextContains('You will receive a confirmation e-mail shortly containing further instructions on how to complete your subscription.');

     $subscriber = Subscriber::loadByMail($mail);
-    $this->assertNotEqual($subscriber, FALSE, 'New subscriber entity successfully loaded.');
+    $this->assertNotEquals($subscriber, FALSE, 'New subscriber entity successfully loaded.');
     $subscription = $subscriber->getSubscription($newsletter_id);
     $this->assertEquals(SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $subscription->status);

@@ @@
     $subscriber = Subscriber::loadByMail($mail);

     $hash = simplenews_generate_hash($subscriber->getMail(), 'manage');
-    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . REQUEST_TIME . '/' . $hash);
+    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . \Drupal::time()->getRequestTime() . '/' . $hash);
     $this->assertSession()->pageTextContains('Subscriptions for ' . $mail);

     $edit = [
@@ @@

     // Attempt to fetch the page using a wrong hash but correct format.
     $hash = simplenews_generate_hash($subscriber->getMail() . 'a', 'manage');
-    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . REQUEST_TIME . '/' . $hash);
-    $this->assertResponse(404);
+    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . \Drupal::time()->getRequestTime() . '/' . $hash);
+    $this->assertSession()->statusCodeEquals(404);

     // Test expired confirmation links.
     $mail = $this->randomEmail();
@@ @@
     $this->subscribe($newsletter_id, $mail);

     $subscriber = Subscriber::loadByMail($mail);
-    $expired_timestamp = REQUEST_TIME - 86401;
+    $expired_timestamp = \Drupal::time()->getRequestTime() - 86401;
     $hash = simplenews_generate_hash($subscriber->getMail(), 'add', $expired_timestamp);
     $url = 'newsletter/confirm/add/' . $subscriber->id() . '/' . $newsletter_id . '/' . $expired_timestamp . '/' . $hash;
     $this->drupalGet($url);
@@ @@
     $single_block = $this->setupSubscriptionBlock($block_settings);
     $subscriber_user = $this->drupalCreateUser(['subscribe to newsletters']);
     $this->drupalLogin($subscriber_user);
-    $this->assertEqual($this->countSubscribers(), 0);
+    $this->assertEquals($this->countSubscribers(), 0);

     // 1. Subscribe authenticated via block
     // Subscribe + submit
@@ @@
     // Assert confirmation message.
     $this->submitForm([], 'Subscribe');
     $this->assertSession()->pageTextContains('You have been subscribed.');
-    $this->assertEqual($this->countSubscribers(), 1);
+    $this->assertEquals($this->countSubscribers(), 1);

     // Disable the newsletter block.
     $single_block->delete();
@@ @@
     $this->assertSession()->addressEquals($url);
     $this->submitForm($edit, 'Save');
     $this->assertSession()->responseContains('Your newsletter subscriptions have been updated.');
-    $this->assertEqual($this->countSubscribers(), 1);
+    $this->assertEquals($this->countSubscribers(), 1);

     // 4. Unsubscribe authenticated via account page
     // Unsubscribe + submit
@@ @@
     $this->submitForm($edit, 'Save');
     $this->assertSession()->responseContains('Your newsletter subscriptions have been updated.');
     $count = 1;
-    $this->assertEqual($this->countSubscribers(), $count);
+    $this->assertEquals($this->countSubscribers(), $count);

     // Try to submit multi-signup form without selecting a newsletter.
     $subscriber_user2 = $this->drupalCreateUser(['subscribe to newsletters']);
@@ @@

     // Check that the user has only access to their own subscriptions page.
     $this->drupalGet('user/' . $subscriber_user->id() . '/simplenews');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $this->drupalGet('user/' . $subscriber_user2->id() . '/simplenews');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

-    $this->assertNoField('mail[0][value]');
+    $this->assertSession()->fieldNotExists('mail[0][value]');
     $this->submitForm([], 'Save');
     $this->assertSession()->pageTextContains('Your newsletter subscriptions have been updated.');

@@ @@
     // Nothing should have happened to subscriptions but this does create a
     // subscriber.
     $this->drupalGet('user/' . $subscriber_user2->id() . '/simplenews');
-    $this->assertNoFieldChecked('edit-subscriptions-' . $newsletter_id);
+    $this->assertSession()->checkboxNotChecked('edit-subscriptions-' . $newsletter_id);
     $count++;
-    $this->assertEqual($this->countSubscribers(), $count);
+    $this->assertEquals($this->countSubscribers(), $count);

     // Now fill out the form and try again.
     $edit = [
@@ @@
     ];
     $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('Your newsletter subscriptions have been updated.');
-    $this->assertEqual($this->countSubscribers(), $count);
+    $this->assertEquals($this->countSubscribers(), $count);

     $this->drupalGet('user/' . $subscriber_user2->id() . '/simplenews');
-    $this->assertFieldChecked('edit-subscriptions-' . $newsletter_id);
+    $this->assertSession()->checkboxChecked('edit-subscriptions-' . $newsletter_id);

     // Unsubscribe.
     $edit = [
@@ @@
     $this->assertSession()->pageTextContains('Your newsletter subscriptions have been updated.');

     $this->drupalGet('user/' . $subscriber_user2->id() . '/simplenews');
-    $this->assertNoFieldChecked('edit-subscriptions-' . $newsletter_id);
+    $this->assertSession()->checkboxNotChecked('edit-subscriptions-' . $newsletter_id);
   }

   /**
@@ @@

     // User subscriber can use a hash token.
     $hash = simplenews_generate_hash($subscriber->getMail(), 'manage');
-    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . REQUEST_TIME . '/' . $hash);
+    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . \Drupal::time()->getRequestTime() . '/' . $hash);
     $this->assertSession()->pageTextContains("Subscriptions for $mail");
     $this->submitForm([], 'Update');
     $this->assertSession()->pageTextContains('Your newsletter subscriptions have been updated.');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldCheckedRector
 * AssertNoFieldCheckedRector
 * AssertNoFieldRector
 * AssertNotEqualRector
 * AssertResponseRector
 * AssertUrlRector
 * PassRector
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


20) modules/contrib/simplenews/tests/src/Functional/SimplenewsSourceTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create the filtered_html text format.
@@ @@
     $mail = $mails[0];

     // Assert resulting mail.
-    $this->assertEqual('simplenews_node', $mail['id']);
-    $this->assertEqual('simplenews', $mail['module']);
-    $this->assertEqual('node', $mail['key']);
-    $this->assertEqual($plain_mail->getRecipient(), $mail['to']);
-    $this->assertEqual($plain_mail->getFromAddress(), $mail['from']);
-    $this->assertEqual($plain_mail->getFromFormatted(), $mail['reply-to']);
-    $this->assertEqual($plain_mail->getLanguage(), $mail['langcode']);
+    $this->assertEquals('simplenews_node', $mail['id']);
+    $this->assertEquals('simplenews', $mail['module']);
+    $this->assertEquals('node', $mail['key']);
+    $this->assertEquals($plain_mail->getRecipient(), $mail['to']);
+    $this->assertEquals($plain_mail->getFromAddress(), $mail['from']);
+    $this->assertEquals($plain_mail->getFromFormatted(), $mail['reply-to']);
+    $this->assertEquals($plain_mail->getLanguage(), $mail['langcode']);
     $this->assertTrue($mail['params']['plain']);

     $this->assertArrayNotHasKey('plaintext', $mail['params']);
     $this->assertArrayNotHasKey('attachments', $mail['params']);

-    $this->assertEqual($plain_mail->getSubject(), $mail['subject']);
+    $this->assertEquals($plain_mail->getSubject(), $mail['subject']);
     $this->assertStringContainsString('the plain body', $mail['body']);

     // Now send an HTML message.
@@ @@
     $mail = $mails[1];

     // Assert resulting mail.
-    $this->assertEqual('simplenews_node', $mail['id']);
-    $this->assertEqual('simplenews', $mail['module']);
-    $this->assertEqual('node', $mail['key']);
-    $this->assertEqual($plain_mail->getRecipient(), $mail['to']);
-    $this->assertEqual($plain_mail->getFromAddress(), $mail['from']);
-    $this->assertEqual($plain_mail->getFromFormatted(), $mail['reply-to']);
-    $this->assertEqual($plain_mail->getLanguage(), $mail['langcode']);
-    $this->assertEqual(NULL, $mail['params']['plain']);
+    $this->assertEquals('simplenews_node', $mail['id']);
+    $this->assertEquals('simplenews', $mail['module']);
+    $this->assertEquals('node', $mail['key']);
+    $this->assertEquals($plain_mail->getRecipient(), $mail['to']);
+    $this->assertEquals($plain_mail->getFromAddress(), $mail['from']);
+    $this->assertEquals($plain_mail->getFromFormatted(), $mail['reply-to']);
+    $this->assertEquals($plain_mail->getLanguage(), $mail['langcode']);
+    $this->assertEquals(NULL, $mail['params']['plain']);

     $this->assertArrayHasKey('plaintext', $mail['params']);
     $this->assertStringContainsString('the plain body', $mail['params']['plaintext']);
     $this->assertArrayHasKey('attachments', $mail['params']);
-    $this->assertEqual('example://test.png', $mail['params']['attachments'][0]['uri']);
+    $this->assertEquals('example://test.png', $mail['params']['attachments'][0]['uri']);

-    $this->assertEqual($plain_mail->getSubject(), $mail['subject']);
+    $this->assertEquals($plain_mail->getSubject(), $mail['subject']);
     $this->assertStringContainsString('the body', $mail['body']);
   }

@@ @@
     ];
     $this->drupalGet('node/add/simplenews_issue');
     $this->submitForm($edit, 'Save');
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     // Add node to spool.
@@ @@
       $this->assertStringContainsString('*' . $mail['to'] . '*', $mail['body']);
       $this->assertStringNotContainsString('<strong>', $mail['body']);
       // Make sure the body is only attached once.
-      $this->assertEqual(1, preg_match_all('/Mail token/', $mail['body'], $matches));
+      $this->assertEquals(1, preg_match_all('/Mail token/', $mail['body'], $matches));

       $this->assertStringContainsString((string) t('Unsubscribe from this newsletter'), $mail['body']);
       // Make sure the mail has the correct unsubscribe hash.
@@ @@
       $this->assertStringContainsString($hash, $mail['body'], 'Correct hash is used');
       $this->assertStringContainsString($hash, $mail['headers']['List-Unsubscribe'], 'Correct hash is used in header');
     }
-
-    // Report time. @todo: Find a way to actually do some assertions here.
-    $this->pass(t('Mails have been sent in @sec seconds with build caching enabled.', ['@sec' => round($after - $before, 3)]));
   }

   /**
@@ @@
     ];
     $this->drupalGet('node/add/simplenews_issue');
     $this->submitForm($edit, 'Save');
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     // Add node to spool.
@@ @@
     foreach (array_slice($this->getMails(), 0, 3) as $mail) {
       // Verify title.
       preg_match('|<h2>(.*)</h2>|', $mail['body'], $matches);
-      $this->assertEqual(Html::decodeEntities($matches[1]), $node->getTitle());
+      $this->assertEquals(Html::decodeEntities($matches[1]), $node->getTitle());

       // Verify the format/content type.
-      $this->assertEqual($mail['params']['format'], 'text/html');
-      $this->assertEqual($mail['params']['plain'], NULL);
-      $this->assertEqual($mail['headers']['Content-Type'], 'text/html; charset=UTF-8');
+      $this->assertEquals($mail['params']['format'], 'text/html');
+      $this->assertEquals($mail['params']['plain'], NULL);
+      $this->assertEquals($mail['headers']['Content-Type'], 'text/html; charset=UTF-8');

       // Make sure that the same mail was used in the body token as it has been
       // sent to.
@@ @@
       $this->assertStringContainsString('<strong>' . $mail['to'] . '</strong>', $mail['body']);

       // Make sure the body is only attached once.
-      $this->assertEqual(1, preg_match_all('/Mail token/', $mail['body'], $matches));
+      $this->assertEquals(1, preg_match_all('/Mail token/', $mail['body'], $matches));

       // Check the plaintext version, both params][plaintext (Mime Mail) and
       // plain (Swiftmailer).
       $this->assertStringContainsString($mail['to'], $mail['params']['plaintext']);
       $this->assertStringNotContainsString('<strong>', $mail['params']['plaintext']);
-      $this->assertEqual($mail['params']['plaintext'], $mail['plain']);
+      $this->assertEquals($mail['params']['plaintext'], $mail['plain']);
       // Make sure the body is only attached once.
-      $this->assertEqual(1, preg_match_all('/Mail token/', $mail['params']['plaintext'], $matches));
+      $this->assertEquals(1, preg_match_all('/Mail token/', $mail['params']['plaintext'], $matches));

       // Check the attachments and files arrays.
       $this->assertTrue(is_array($mail['params']['attachments']));
-      $this->assertEqual($mail['params']['attachments'], $mail['params']['files']);
+      $this->assertEquals($mail['params']['attachments'], $mail['params']['files']);

       // Make sure formatted address is properly encoded.
       $from = '"' . addslashes(Unicode::mimeHeaderEncode($edit_newsletter['from_name'])) . '" <' . $edit_newsletter['from_address'] . '>';
-      $this->assertEqual($from, $mail['reply-to']);
+      $this->assertEquals($from, $mail['reply-to']);
       // And make sure it won't get encoded twice.
-      $this->assertEqual($from, Unicode::mimeHeaderEncode($mail['reply-to']));
+      $this->assertEquals($from, Unicode::mimeHeaderEncode($mail['reply-to']));

       // @todo: Improve this check, there are currently two spaces, not sure
       // where they are coming from.
@@ @@
       $this->assertStringContainsString('class="newsletter-footer"', $mail['body']);

       // Verify receipt headers.
-      $this->assertEqual($mail['headers']['Disposition-Notification-To'], $edit_newsletter['from_address']);
-      $this->assertEqual($mail['headers']['X-Confirm-Reading-To'], $edit_newsletter['from_address']);
+      $this->assertEquals($mail['headers']['Disposition-Notification-To'], $edit_newsletter['from_address']);
+      $this->assertEquals($mail['headers']['X-Confirm-Reading-To'], $edit_newsletter['from_address']);
     }
   }

@@ @@
     ];
     $this->drupalGet('node/add/simplenews_issue');
     $this->submitForm($edit, 'Save');
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     // Add node to spool.
@@ @@
     ];
     $this->drupalGet('node/add/simplenews_issue');
     $this->submitForm($edit, 'Save');
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     // Add node to spool.
@@ @@
       $this->assertStringContainsString('*' . $mail['to'] . '*', $mail['body']);
       $this->assertStringNotContainsString('<strong>', $mail['body']);
       // Make sure the body is only attached once.
-      $this->assertEqual(1, preg_match_all('/Mail token/', $mail['body'], $matches));
+      $this->assertEquals(1, preg_match_all('/Mail token/', $mail['body'], $matches));
     }
-
-    // Report time. @todo: Find a way to actually do some assertions here.
-    $this->pass(t('Mails have been sent in @sec seconds with caching disabled.', ['@sec' => round($after - $before, 3)]));
   }

   /**
@@ @@
     ];
     $this->drupalGet('node/add/simplenews_issue');
     $this->submitForm($edit, 'Save');
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     // Add node to spool.
@@ @@
     $this->assertCount(0, $this->getMails());

     $spool_row = \Drupal::database()->query('SELECT * FROM {simplenews_mail_spool}')->fetchObject();
-    $this->assertEqual(SpoolStorageInterface::STATUS_SKIPPED, $spool_row->status);
+    $this->assertEquals(SpoolStorageInterface::STATUS_SKIPPED, $spool_row->status);
   }

   /**
@@ @@
     ];
     $this->drupalGet('node/add/simplenews_issue');
     $this->submitForm($edit, 'Save');
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     // Add node to spool.
@@ @@
     $this->assertCount(0, $this->getMails());

     $spool_row = \Drupal::database()->query('SELECT * FROM {simplenews_mail_spool}')->fetchObject();
-    $this->assertEqual(SpoolStorageInterface::STATUS_SKIPPED, $spool_row->status);
+    $this->assertEquals(SpoolStorageInterface::STATUS_SKIPPED, $spool_row->status);
   }

   /**
@@ @@
       ->fields('ms', ['status'])
       ->execute()
       ->fetchAssoc();
-    $this->assertEqual(SpoolStorageInterface::STATUS_SKIPPED, $spool_row['status']);
+    $this->assertEquals(SpoolStorageInterface::STATUS_SKIPPED, $spool_row['status']);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * PassRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/simplenews/tests/src/Functional/SimplenewsSendTest.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $admin_user = $this->drupalCreateUser([
@@ @@
     $mails = $this->getMails();
     $this->assertCount(5, $mails, 'All mails were sent.');
     foreach ($mails as $mail) {
-      $this->assertEqual($mail['subject'], '[Default newsletter] ' . $node->getTitle(), t('Mail has correct subject'));
+      $this->assertEquals($mail['subject'], '[Default newsletter] ' . $node->getTitle(), t('Mail has correct subject'));
       $this->assertArrayHasKey($mail['to'], $this->subscribers, t('Found valid recipient'));
       unset($this->subscribers[$mail['to']]);
     }
@@ @@
     \Drupal::service('simplenews.spool_storage')->addIssue($node);

     // Make sure that they have been added.
-    $this->assertEqual(\Drupal::service('simplenews.spool_storage')->countMails(), 5);
+    $this->assertEquals(\Drupal::service('simplenews.spool_storage')->countMails(), 5);

     // Mark them as 'in progress', fake a currently running send process.
     $this->assertCount(2, \Drupal::service('simplenews.spool_storage')->getMails(2));
@@ @@
     // The count should still include all the mails because they are still
     // in the spool.  This is needed for correct operation of code such as
     // Mailer::updateSendStatus().
-    $this->assertEqual(\Drupal::service('simplenews.spool_storage')->countMails(), 5);
+    $this->assertEquals(\Drupal::service('simplenews.spool_storage')->countMails(), 5);
   }

   /**
@@ @@
     $mails = $this->getMails();
     $this->assertCount(5, $mails, 'All mails were sent.');
     foreach ($mails as $mail) {
-      $this->assertEqual($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
+      $this->assertEquals($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
       $this->assertArrayHasKey($mail['to'], $this->subscribers, t('Found valid recipient'));
       unset($this->subscribers[$mail['to']]);
     }
@@ @@
         'status[value]' => $i != 2,
       ];
       $this->submitForm($edit, 'Save');
-      $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+      $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
       $nodes[] = Node::load($matches[1]);

       // Verify state.
       $node = current($nodes);
-      $this->assertEqual(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));
+      $this->assertEquals(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));
     }
   }

@@ @@
       'simplenews_issue[target_id]' => 'default',
     ];
     $this->submitForm($edit, 'Save');
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     $this->clickLink(t('Newsletter'));
@@ @@
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));

     // Send now.
     $this->submitForm([], 'Send now');
@@ @@
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews_issue->status, t('Newsletter sending pending.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews_issue->status, t('Newsletter sending pending.'));

     // Verify that no mails have been sent yet.
     $mails = $this->getMails();
@@ @@
     $this->assertCount(0, $mails, 'No mails were sent yet.');

     $spooled = \Drupal::database()->query('SELECT COUNT(*) FROM {simplenews_mail_spool} WHERE entity_id = :nid AND entity_type = :type', [':nid' => $node->id(), ':type' => 'node'])->fetchField();
-    $this->assertEqual(5, $spooled, t('5 mails have been added to the mail spool'));
+    $this->assertEquals(5, $spooled, t('5 mails have been added to the mail spool'));

     // Run cron for the first time.
     simplenews_cron();
@@ @@
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews_issue->status, t('Newsletter sending pending.'));
-    $this->assertEqual(3, $node->simplenews_issue->sent_count, 'subscriber count is correct');
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews_issue->status, t('Newsletter sending pending.'));
+    $this->assertEquals(3, $node->simplenews_issue->sent_count, 'subscriber count is correct');

     $spooled = \Drupal::database()->query('SELECT COUNT(*) FROM {simplenews_mail_spool} WHERE entity_id = :nid AND entity_type = :type', [':nid' => $node->id(), ':type' => 'node'])->fetchField();
-    $this->assertEqual(2, $spooled, t('2 mails remaining in spool.'));
+    $this->assertEquals(2, $spooled, t('2 mails remaining in spool.'));

     // Run cron for the second time.
     simplenews_cron();
@@ @@
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished.'));

     $spooled = \Drupal::database()->query('SELECT COUNT(*) FROM {simplenews_mail_spool} WHERE entity_id = :nid AND entity_type = :type', [':nid' => $node->id(), ':type' => 'node'])->fetchField();
-    $this->assertEqual(0, $spooled, t('No mails remaining in spool.'));
+    $this->assertEquals(0, $spooled, t('No mails remaining in spool.'));

     // Verify mails.
     $mails = $this->getMails();
     $this->assertCount(5, $mails, 'All mails were sent.');
     foreach ($mails as $mail) {
-      $this->assertEqual($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
+      $this->assertEquals($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
       $this->assertArrayHasKey($mail['to'], $this->subscribers, t('Found valid recipient'));
       unset($this->subscribers[$mail['to']]);
     }
     $this->assertCount(0, $this->subscribers, 'all subscribers have been received a mail');
-    $this->assertEqual(5, $node->simplenews_issue->sent_count);
+    $this->assertEquals(5, $node->simplenews_issue->sent_count);
   }

   /**
@@ @@
     // Then save.
     $this->submitForm([], 'Save');

-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     $this->clickLink(t('Newsletter'));
@@ @@
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));

     // Send now.
     $this->submitForm([], 'Send now');
@@ @@
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews_issue->status, t('Newsletter sending pending.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews_issue->status, t('Newsletter sending pending.'));

     // Verify that no mails have been sent yet.
     $mails = $this->getMails();
@@ @@
     $this->assertCount(0, $mails, t('No mails were sent yet.'));

     $spooled = \Drupal::database()->query('SELECT COUNT(*) FROM {simplenews_mail_spool} WHERE entity_id = :nid AND entity_type = :type', [':nid' => $node->id(), ':type' => 'node'])->fetchField();
-    $this->assertEqual(5, $spooled, t('5 mails have been added to the mail spool'));
+    $this->assertEquals(5, $spooled, t('5 mails have been added to the mail spool'));

     // Check warning message on node edit form.
     $this->clickLink(t('Edit'));
@@ @@
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished.'));

     $spooled = \Drupal::database()->query('SELECT COUNT(*) FROM {simplenews_mail_spool} WHERE entity_id = :nid AND entity_type = :type', [':nid' => $node->id(), ':type' => 'node'])->fetchField();
-    $this->assertEqual(0, $spooled, t('No mails remaining in spool.'));
+    $this->assertEquals(0, $spooled, t('No mails remaining in spool.'));

     // Verify mails.
     $mails = $this->getMails();
     $this->assertCount(5, $mails, 'All mails were sent.');
     foreach ($mails as $mail) {
-      $this->assertEqual($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
+      $this->assertEquals($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
       $this->assertArrayHasKey($mail['to'], $this->subscribers, t('Found valid recipient'));
       unset($this->subscribers[$mail['to']]);
     }
@@ @@
       'status[value]' => FALSE,
     ];
     $this->submitForm($edit, 'Save');
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     $this->clickLink(t('Newsletter'));
@@ @@
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));

     // Send now.
     $this->submitForm([], 'Send on publish');
@@ @@
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache([$node->id()]);
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_PUBLISH, $node->simplenews_issue->status, t('Newsletter set up for sending on publish.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_PUBLISH, $node->simplenews_issue->status, t('Newsletter set up for sending on publish.'));

     $this->clickLink(t('Edit'));
     $this->submitForm(['status[value]' => TRUE], 'Save');
@@ @@
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache([$node->id()]);
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished'));
     // @todo test sent subscriber count.
     // Verify mails.
     $mails = $this->getMails();
     $this->assertCount(5, $mails, 'All mails were sent.');
     foreach ($mails as $mail) {
-      $this->assertEqual($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
+      $this->assertEquals($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
       $this->assertArrayHasKey($mail['to'], $this->subscribers, t('Found valid recipient'));
       unset($this->subscribers[$mail['to']]);
     }
@@ @@
     $mails = $this->getMails();
     $this->assertCount(5, $mails, 'All mails were sent.');
     foreach ($mails as $mail) {
-      $this->assertEqual($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
+      $this->assertEquals($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
       $this->assertArrayHasKey($mail['to'], $this->subscribers, t('Found valid recipient'));
       unset($this->subscribers[$mail['to']]);
     }
@@ @@
     // Update timestamp to simulate pending lock expiration.
     \Drupal::database()->update('simplenews_mail_spool')
       ->fields([
-        'timestamp' => REQUEST_TIME - $this->config('simplenews.settings')->get('mail.spool_progress_expiration') - 1,
+        'timestamp' => \Drupal::time()->getRequestTime() - $this->config('simplenews.settings')->get('mail.spool_progress_expiration') - 1,
       ])
       ->execute();
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/simplenews/tests/src/Functional/SimplenewsRecipientHandlerTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // We install the demo module to get the recipient handlers. It creates
@@ @@
   protected function checkRecipients(array $expected) {
     simplenews_cron();
     $mails = $this->getMails();
-    $this->assertEqual(count($expected), count($mails), t('All mails were sent.'));
+    $this->assertEquals(count($expected), count($mails), t('All mails were sent.'));
     foreach ($mails as $mail) {
       $this->assertArrayHasKey($mail['to'], $expected, t('Found valid recipient @recip', ['@recip' => $mail['to']]));
       unset($expected[$mail['to']]);
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/simplenews/tests/src/Functional/SimplenewsPersonalizationFormsTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->addField('string', 'field_shared', 'user');
     $this->addField('string', 'field_shared', 'simplenews_subscriber');
@@ @@

     // Assert subscription remains unconfirmed.
     $subscriber = $this->getLatestSubscriber();
-    $this->assertEqual($subscriber->subscriptions->get(0)->status, SIMPLENEWS_SUBSCRIPTION_STATUS_UNCONFIRMED);
+    $this->assertEquals($subscriber->subscriptions->get(0)->status, SIMPLENEWS_SUBSCRIPTION_STATUS_UNCONFIRMED);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/simplenews/tests/src/Functional/SimplenewsI18nTest.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser([
       'bypass node access', 'administer nodes', 'administer languages', 'administer content types', 'access administration pages', 'administer filters', 'translate interface', 'subscribe to newsletters', 'administer site configuration', 'translate any entity', 'administer content translation', 'administer simplenews subscriptions', 'send newsletter', 'create content translations',
@@ @@
     ];
     $this->drupalGet('node/add/simplenews_issue');
     $this->submitForm($english, 'Save');
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);

     $this->clickLink(t('Translate'));
@@ @@
     foreach ($this->getMails() as $mail) {

       if ($mail['to'] == $english_mail) {
-        $this->assertEqual('en', $mail['langcode']);
-        $this->assertEqual('[' . $newsletter->label() . '] ' . $node->getTitle(), $mail['subject']);
+        $this->assertEquals('en', $mail['langcode']);
+        $this->assertEquals('[' . $newsletter->label() . '] ' . $node->getTitle(), $mail['subject']);
         $node_url = $node->toUrl('canonical', ['absolute' => TRUE])->toString();
         $title = $node->getTitle();
       }
       elseif ($mail['to'] == $spanish_mail || $mail['to'] == $spanish_mail2) {
-        $this->assertEqual('es', $mail['langcode']);
+        $this->assertEquals('es', $mail['langcode']);
         // @todo: Verify newsletter translation once supported again.
-        $this->assertEqual('[' . $newsletter->name . '] ' . $translation->label(), $mail['subject']);
+        $this->assertEquals('[' . $newsletter->name . '] ' . $translation->label(), $mail['subject']);
         $node_url = $translation->toUrl('canonical', ['absolute' => TRUE, 'language' => $translation->language()])->toString();
         $title = $translation->getTitle();
       }
@@ @@
     \Drupal::entityTypeManager()->getStorage('node')->resetCache([$node->id()]);
     $node = Node::load($node->id());
     $translation = $node->getTranslation($this->secondaryLanguage);
-    $this->assertEqual(3, $node->simplenews_issue->sent_count, 'subscriber count is correct');
+    $this->assertEquals(3, $node->simplenews_issue->sent_count, 'subscriber count is correct');
     $this->drupalGet('/admin/content/simplenews');
     $this->assertSession()->responseContains('<span title="Newsletter issue sent to 3 subscribers, 0 errors.">3/3</span>');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/simplenews/tests/src/Functional/SimplenewsFieldUiTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('help_block');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/simplenews/tests/src/Functional/SimplenewsAdministrationTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('help_block');
   }
@@ @@
     $this->drupalGet('admin/config/services/simplenews/manage/default');
     $this->submitForm(['subject' => 'Edited subject'], 'Save');
     $this->drupalGet('admin/config/services/simplenews/manage/default');
-    $this->assertFieldByName('subject', 'Edited subject');
+    $this->assertSession()->fieldValueEquals('subject', 'Edited subject');

     $newsletters = simplenews_newsletter_get_all();

@@ @@

       list($new_account_setting, $access_setting) = explode('-', $newsletter->name);
       if ($newsletter->new_account == 'on' && $newsletter->access != 'hidden') {
-        $this->assertFieldChecked($this->getNewsletterFieldId($newsletter->id()));
+        $this->assertSession()->checkboxChecked($this->getNewsletterFieldId($newsletter->id()));
       }
       elseif ($newsletter->new_account == 'off' && $newsletter->access != 'hidden') {
-        $this->assertNoFieldChecked($this->getNewsletterFieldId($newsletter->id()));
+        $this->assertSession()->checkboxNotChecked($this->getNewsletterFieldId($newsletter->id()));
       }
       else {
-        $this->assertNoField('subscriptions[' . $newsletter->id() . ']', t('Hidden or silent newsletter is not shown.'));
+        $this->assertSession()->fieldNotExists('subscriptions[' . $newsletter->id() . ']', t('Hidden or silent newsletter is not shown.'));
       }
     }

@@ @@
       }
       list($new_account_setting, $access_setting) = explode('-', $newsletter->name);
       if ($newsletter->access == 'hidden') {
-        $this->assertNoField('subscriptions[' . $newsletter->id() . ']', t('Hidden newsletter is not shown.'));
+        $this->assertSession()->fieldNotExists('subscriptions[' . $newsletter->id() . ']', t('Hidden newsletter is not shown.'));
       }
       elseif ($newsletter->new_account == 'on' || $newsletter->name == 'off-default' || $newsletter->new_account == 'silent') {
         // All on, silent and the explicitly selected newsletter should be
         // checked.
-        $this->assertFieldChecked($this->getNewsletterFieldId($newsletter->id()));
+        $this->assertSession()->checkboxChecked($this->getNewsletterFieldId($newsletter->id()));
       }
       else {
-        $this->assertNoFieldChecked($this->getNewsletterFieldId($newsletter->id()));
+        $this->assertSession()->checkboxNotChecked($this->getNewsletterFieldId($newsletter->id()));
       }
     }

@@ @@
     ];
     $this->submitForm($edit, 'Save');
     $this->drupalGet('user/' . $user->id() . '/simplenews');
-    $this->assertNoFieldChecked($this->getNewsletterFieldId($off_default_newsletter_id));
+    $this->assertSession()->checkboxNotChecked($this->getNewsletterFieldId($off_default_newsletter_id));

     // Get a newsletter which has the block enabled.
     // @codingStandardsIgnoreStart
@@ @@
     $this->drupalLogin($admin_user);
     $subscriber = Subscriber::loadByMail($user->getEmail());
     $this->drupalGet('admin/people/simplenews/edit/' . $subscriber->id());
-    $this->assertNoField($this->getNewsletterFieldId('on_hidden'));
-    $this->assertNoField('mail');
+    $this->assertSession()->fieldNotExists($this->getNewsletterFieldId('on_hidden'));
+    $this->assertSession()->fieldNotExists('mail');
     $this->drupalGet('admin/people/simplenews/edit/' . $subscriber->id());
     $this->submitForm([], 'Save');
     $this->drupalGet('admin/people/simplenews/edit/' . $subscriber->id());
@@ @@
       $mail_addresses[] = $email;
       if ($email == $user_mail) {
         // The user to which the mail was assigned should show the user name.
-        $this->assertEqual(trim($rows[$i]->find('xpath', '/td[2]/a')->getText()), $user->getAccountName());
+        $this->assertEquals(trim($rows[$i]->find('xpath', '/td[2]/a')->getText()), $user->getAccountName());
       }
       else {
         // Blank value for user name.
-        $this->assertEqual($rows[$i]->find('xpath', '/td[2]/a'), NULL);
+        $this->assertEquals($rows[$i]->find('xpath', '/td[2]/a'), NULL);
       }
     }
     $this->assertCount(15, $mail_addresses);
@@ @@

     $rows = $this->xpath('//tbody/tr');
     $this->assertCount(1, $rows);
-    $this->assertEqual(current($subscribers['all']), trim($rows[0]->find('xpath', '/td[1]')->getText()));
+    $this->assertEquals(current($subscribers['all']), trim($rows[0]->find('xpath', '/td[1]')->getText()));
     // Mysteriously, the username is sometimes a span and sometimes a link.
     // Accept both.
-    $this->assertEqual($user->label(), trim($rows[0]->find('xpath', '/td[2]/span|/td[2]/a')->getText()));
+    $this->assertEquals($user->label(), trim($rows[0]->find('xpath', '/td[2]/span|/td[2]/a')->getText()));

     // Reset the filter.
     $this->drupalGet('admin/people/simplenews');
@@ @@
     // Check exporting.
     $this->clickLink(t('Export'));
     $this->submitForm(['newsletters[' . $first . ']' => TRUE], 'Export');
-    $export_field = $this->xpath($this->constructFieldXpath('name', 'emails'));
+    $export_field = $this->xpath($this->getSession()->getPage()->findField('emails'));
     $exported_mails = $export_field[0]->getText();
     foreach ($subscribers[$first] as $mail) {
       $this->assertStringContainsString($mail, $exported_mails, t('Mail address exported correctly.'));
@@ @@
     ];
     $this->submitForm($edit, 'Export');

-    $export_field = $this->xpath($this->constructFieldXpath('name', 'emails'));
+    $export_field = $this->xpath($this->getSession()->getPage()->findField('emails'));
     $exported_mails = $export_field[0]->getText();
     $exported_mails = explode(', ', $exported_mails);
     $this->assertCount(2, $exported_mails);
@@ @@
     ];
     $this->submitForm($edit, 'Export');

-    $export_field = $this->xpath($this->constructFieldXpath('name', 'emails'));
+    $export_field = $this->xpath($this->getSession()->getPage()->findField('emails'));
     $exported_mails = $export_field[0]->getText();
     $exported_mails = explode(', ', $exported_mails);
     $this->assertContains($unconfirmed[0], $exported_mails);
@@ @@
     ];
     $this->submitForm($edit, 'Export');

-    $export_field = $this->xpath($this->constructFieldXpath('name', 'emails'));
+    $export_field = $this->xpath($this->getSession()->getPage()->findField('emails'));
     $exported_mails = $export_field[0]->getText();
     $exported_mails = explode(', ', $exported_mails);
     $this->assertCount(2, $exported_mails);
@@ @@
     // Verify updated subscriptions count.
     drupal_static_reset('Drupal\simplenews\Plugin\simplenews\RecipientHandler\RecipientHandlerBase::count');
     $after_count = $spool_storage->issueCountRecipients($issue);
-    $this->assertEqual($before_count - 1, $after_count, t('Blocked users are not counted in subscription count.'));
+    $this->assertEquals($before_count - 1, $after_count, t('Blocked users are not counted in subscription count.'));

     // Test mass subscribe with previously unsubscribed users.
     for ($i = 0; $i < 3; $i++) {
@@ @@
     $this->clickLink(t('Edit'), 1);

     // Get the subscriber id from the path.
-    $this->assertEqual(1, preg_match('|admin/people/simplenews/edit/(\d+)\?destination|', $this->getUrl(), $matches), 'Subscriber found');
+    $this->assertEquals(1, preg_match('|admin/people/simplenews/edit/(\d+)\?destination|', $this->getUrl(), $matches), 'Subscriber found');
     $subscriber = Subscriber::load($matches[1]);

     $this->assertSession()->titleEquals('Edit subscriber ' . $subscriber->getMail() . ' | Drupal');
-    $this->assertFieldChecked('edit-status');
+    $this->assertSession()->checkboxChecked('edit-status');

     // Disable account.
     $edit = [
@@ @@
     // Re-enable account.
     $this->drupalGet('admin/people/simplenews/edit/' . $subscriber->id());
     $this->assertSession()->titleEquals('Edit subscriber ' . $subscriber->getMail() . ' | Drupal');
-    $this->assertNoFieldChecked('edit-status');
+    $this->assertSession()->checkboxNotChecked('edit-status');
     $edit = [
       'status' => TRUE,
     ];
@@ @@
         $counter++;
       }
     }
-    $this->assertEqual(1, $counter);
+    $this->assertEquals(1, $counter);
     $this->assertSession()->pageTextContains('The following addresses were added or updated: drupaltest@example.com.');
     $this->assertSession()->pageTextContains("The addresses were subscribed to the following newsletters: $newsletter_name.");

     // Check exact subscription statuses.
     $subscriber = Subscriber::loadByMail('drupaltest@example.com');
-    $this->assertEqual($subscriber->getSubscription($newsletter_name)->get('status')->getValue(), SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED);
+    $this->assertEquals($subscriber->getSubscription($newsletter_name)->get('status')->getValue(), SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED);
     // The second newsletter was not subscribed, so there should be no
     // subscription record at all.
     $this->assertFalse($subscriber->getSubscription($second_newsletter_name));
@@ @@
     $this->assertSession()->pageTextContains('Send newsletter issue to 3 subscribers.');

     // Send mails.
-    $this->assertField('test_address', $admin_user->getEmail());
+    $this->assertSession()->fieldExists('test_address', $admin_user->getEmail());
     // Test newsletter to empty address and check the error message.
     $this->submitForm(['test_address' => ''], 'Send test newsletter issue');
     $this->assertSession()->pageTextContains('Missing test email address.');
@@ @@
     $this->assertSession()->pageTextContains('Test newsletter sent to user ' . $admin_user->getAccountName() . ' <' . $admin_user->getEmail() . '>');

     $mails = $this->getMails();
-    $this->assertEqual('simplenews_test', $mails[0]['id']);
-    $this->assertEqual($admin_user->getEmail(), $mails[0]['to']);
-    $this->assertEqual(t('[Default newsletter] @title', ['@title' => $node->getTitle()]), $mails[0]['subject']);
+    $this->assertEquals('simplenews_test', $mails[0]['id']);
+    $this->assertEquals($admin_user->getEmail(), $mails[0]['to']);
+    $this->assertEquals(t('[Default newsletter] @title', ['@title' => $node->getTitle()]), $mails[0]['subject']);
     $this->assertStringContainsString('User ID: ' . $admin_user->id(), $mails[0]['body']);

     // Update the content type, remove the simpletest checkbox.
@@ @@
     // Check the Add Newsletter Issue button.
     $this->drupalGet('admin/content/simplenews');
     $this->clickLink(t('Add Newsletter Issue'));
-    $this->assertUrl('node/add/simplenews_issue');
+    $this->assertSession()->addressEquals('node/add/simplenews_issue');
     // Check if the help text is displayed.
     $this->assertSession()->pageTextContains('Add this newsletter issue to a newsletter by selecting a newsletter from the select list.');
   }
@@ @@
   public function testSubscriberStatusFilter() {
     // Make sure subscription overview can't be accessed without permission.
     $this->drupalGet('admin/people/simplenews');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $admin_user = $this->drupalCreateUser([
       'administer newsletters',
@@ @@
     $this->drupalGet('admin/people/simplenews', ['query' => ['subscriptions_status' => SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED]]);
     $row = $this->xpath('//tbody/tr');
     $this->assertCount(1, $row);
-    $this->assertEqual($subscribers[0]->getMail(), trim($row[0]->find('xpath', '/td')->getText()));
+    $this->assertEquals($subscribers[0]->getMail(), trim($row[0]->find('xpath', '/td')->getText()));
     $this->drupalGet('admin/people/simplenews', ['query' => ['subscriptions_status' => SIMPLENEWS_SUBSCRIPTION_STATUS_UNCONFIRMED]]);
     $row = $this->xpath('//tbody/tr');
     $this->assertCount(1, $row);
-    $this->assertEqual($subscribers[1]->getMail(), trim($row[0]->find('xpath', '/td')->getText()));
+    $this->assertEquals($subscribers[1]->getMail(), trim($row[0]->find('xpath', '/td')->getText()));
     $this->assertSession()->pageTextContains($newsletters['default']->name . ' (' . 'Unconfirmed' . ')');
     $this->drupalGet('admin/people/simplenews', ['query' => ['subscriptions_status' => SIMPLENEWS_SUBSCRIPTION_STATUS_UNSUBSCRIBED]]);
     $row = $this->xpath('//tbody/tr');
     $this->assertCount(1, $row);
-    $this->assertEqual($subscribers[2]->getMail(), trim($row[0]->find('xpath', '/td')->getText()));
+    $this->assertEquals($subscribers[2]->getMail(), trim($row[0]->find('xpath', '/td')->getText()));
     $this->assertSession()->pageTextContains($newsletters['default']->name . ' (' . 'Unsubscribed' . ')');
   }

@@ @@
   public function testNewsletterIssuesOverview() {
     // Verify newsletter overview isn't available without permission.
     $this->drupalGet('admin/content/simplenews');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $admin_user = $this->drupalCreateUser([
       'administer newsletters',
@@ @@

     foreach ($rows as $row) {
       if ($row->find('xpath', '/td[2]/a')->getText() == 'Test_issue_2') {
-        $this->assertEqual($name, trim($row->find('xpath', '/td[3]/a')->getText()));
-        $this->assertEqual('Newsletter issue will be sent to 3 subscribers.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
-        $this->assertEqual('✖', trim($row->find('xpath', '/td[4]')->getText()));
-        $this->assertEqual('0/3', trim($row->find('xpath', '/td[6]/span')->getText()));
+        $this->assertEquals($name, trim($row->find('xpath', '/td[3]/a')->getText()));
+        $this->assertEquals('Newsletter issue will be sent to 3 subscribers.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
+        $this->assertEquals('✖', trim($row->find('xpath', '/td[4]')->getText()));
+        $this->assertEquals('0/3', trim($row->find('xpath', '/td[6]/span')->getText()));
       }
       else {
-        $this->assertEqual('✔', trim($row->find('xpath', '/td[4]')->getText()));
+        $this->assertEquals('✔', trim($row->find('xpath', '/td[4]')->getText()));
       }
     }
     // Send newsletter issues using bulk operations.
@@ @@
     // Assert the status message of each newsletter.
     foreach ($rows as $row) {
       if ($row->find('xpath', '/td[2]/a')->getText() == 'Test_issue_2') {
-        $this->assertEqual('Newsletter issue will be sent to 3 subscribers on publish.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
+        $this->assertEquals('Newsletter issue will be sent to 3 subscribers on publish.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
       }
       else {
-        $this->assertEqual('Newsletter issue is pending, 0 mails sent out of 3, 0 errors.', trim($row->find('xpath', '/td[6]/img')->getAttribute('title')));
-        $this->assertEqual(file_url_transform_relative(file_create_url(drupal_get_path('module', 'simplenews') . '/images/sn-cron.png')), trim($row->find('xpath', '/td[6]/img')->getAttribute('src')));
+        $this->assertEquals('Newsletter issue is pending, 0 mails sent out of 3, 0 errors.', trim($row->find('xpath', '/td[6]/img')->getAttribute('title')));
+        $this->assertEquals(\Drupal::service('file_url_generator')->generateString(\Drupal::service('extension.list.module')->getPath('simplenews') . '/images/sn-cron.png'), trim($row->find('xpath', '/td[6]/img')->getAttribute('src')));
       }
     }
     // Stop sending the pending newsletters.
@@ @@
     // Check the send status of each issue.
     foreach ($rows as $row) {
       if ($row->find('xpath', '/td[2]/a')->getText() == 'Test_issue_2') {
-        $this->assertEqual('Newsletter issue will be sent to 3 subscribers on publish.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
+        $this->assertEquals('Newsletter issue will be sent to 3 subscribers on publish.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
       }
       else {
-        $this->assertEqual('Newsletter issue will be sent to 3 subscribers.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
+        $this->assertEquals('Newsletter issue will be sent to 3 subscribers.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
       }
     }

@@ @@
     // Check the send status of each issue.
     foreach ($rows as $row) {
       if ($row->find('xpath', '/td[2]/a')->getText() == 'Test_issue_2') {
-        $this->assertEqual('Newsletter issue will be sent to 3 subscribers on publish.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
+        $this->assertEquals('Newsletter issue will be sent to 3 subscribers on publish.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
       }
       else {
-        $this->assertEqual('Newsletter issue sent to 3 subscribers, 0 errors.', trim($row->find('xpath', '/td[6]/img')->getAttribute('title')));
-        $this->assertEqual(file_url_transform_relative(file_create_url(drupal_get_path('module', 'simplenews') . '/images/sn-sent.png')), trim($row->find('xpath', '/td[6]/img')->getAttribute('src')));
+        $this->assertEquals('Newsletter issue sent to 3 subscribers, 0 errors.', trim($row->find('xpath', '/td[6]/img')->getAttribute('title')));
+        $this->assertEquals(\Drupal::service('file_url_generator')->generateString(\Drupal::service('extension.list.module')->getPath('simplenews') . '/images/sn-sent.png'), trim($row->find('xpath', '/td[6]/img')->getAttribute('src')));
       }
     }
   }
@@ @@
     // Check anonymous user can't access admin page.
     $this->drupalLogout();
     $this->drupalGet('admin/people/simplenews');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Turn off the access permission on the view.
     $view = View::load('simplenews_subscribers');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertFieldCheckedRector
 * AssertFieldRector
 * AssertNoFieldCheckedRector
 * AssertNoFieldRector
 * AssertResponseRector
 * AssertUrlRector
 * ConstructFieldXpathRector
 * DrupalGetPathRector
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 26 files have been changed by Rector                                      

