diff --git a/graphql_flag.info.yml b/graphql_flag.info.yml
index 45a9960..75f330c 100644
--- a/graphql_flag.info.yml
+++ b/graphql_flag.info.yml
@@ -1,8 +1,7 @@
 name: 'GraphQL Flag'
 type: module
 description: 'GraphQL implementation of the Flag module.'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 package: 'GraphQL'
 dependencies:
   - graphql:graphql
diff --git a/tests/src/Kernel/GraphQLFlagTestBase.php b/tests/src/Kernel/GraphQLFlagTestBase.php
index 97566df..355d4b0 100644
--- a/tests/src/Kernel/GraphQLFlagTestBase.php
+++ b/tests/src/Kernel/GraphQLFlagTestBase.php
@@ -69,7 +69,7 @@ abstract class GraphQLFlagTestBase extends GraphQLTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
     $this->installEntitySchema('node');
diff --git a/tests/src/Kernel/GraphQLPersonalFlagTest.php b/tests/src/Kernel/GraphQLPersonalFlagTest.php
index c897c02..d4009e6 100644
--- a/tests/src/Kernel/GraphQLPersonalFlagTest.php
+++ b/tests/src/Kernel/GraphQLPersonalFlagTest.php
@@ -12,7 +12,7 @@ class GraphQLPersonalFlagTest extends GraphQLFlagTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->flag = $this->flagCreatePersonalFlag('node', ['page']);
   }
@@ -48,13 +48,13 @@ class GraphQLPersonalFlagTest extends GraphQLFlagTestBase {
     $this->assertEmpty($result['data']['flag']['errors']);
     // Flag the entity a second time.
     $result = $this->processQuery($query, $this->getMutationInput('flag'))->toArray();
-    $this->assertEqual($result['data']['flag']['errors'][0], 'The user has already flagged the entity with the flag.');
+    $this->assertEquals($result['data']['flag']['errors'][0], 'The user has already flagged the entity with the flag.');
     // Unflag the entity.
     $result = $this->processQuery($query, $this->getMutationInput('unflag'))->toArray();
     $this->assertEmpty($result['data']['flag']['errors']);
     // Unflag the entity a second time.
     $result = $this->processQuery($query, $this->getMutationInput('unflag'))->toArray();
-    $this->assertEqual($result['data']['flag']['errors'][0], 'The entity is not flagged by the user.');
+    $this->assertEquals($result['data']['flag']['errors'][0], 'The entity is not flagged by the user.');
   }
 
 }
