diff --git a/pardot.info.yml b/pardot.info.yml
index 8b1bd2f..a7089c3 100644
--- a/pardot.info.yml
+++ b/pardot.info.yml
@@ -1,7 +1,7 @@
 name: 'Pardot'
 type: module
 description: 'Module to allow Pardot tracking for Drupal websites.'
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 package: 'Marketing Automation'
 dependencies:
   - token:token
diff --git a/pardot.module b/pardot.module
index 0f33537..5db47a1 100644
--- a/pardot.module
+++ b/pardot.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\pardot\EntityTypeInfo;
+use Drupal\pardot\FormOperations;
 /**
  * @file
  * Contains pardot.module.
@@ -87,7 +89,7 @@ function pardot_page_attachments(array &$page) {
  */
 function pardot_entity_type_alter(array &$entity_types) {
   return \Drupal::service('class_resolver')
-    ->getInstanceFromDefinition(\Drupal\pardot\EntityTypeInfo::class)
+    ->getInstanceFromDefinition(EntityTypeInfo::class)
     ->entityTypeAlter($entity_types);
 }
 
@@ -101,7 +103,7 @@ function pardot_entity_type_alter(array &$entity_types) {
  */
 function pardot_entity_operation_alter(array &$operations, EntityInterface $entity) {
   return \Drupal::service('class_resolver')
-    ->getInstanceFromDefinition(\Drupal\pardot\EntityTypeInfo::class)
+    ->getInstanceFromDefinition(EntityTypeInfo::class)
     ->entityOperation($operations, $entity);
 }
 
@@ -109,7 +111,7 @@ function pardot_entity_operation_alter(array &$operations, EntityInterface $enti
 
 function pardot_webform_submission_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
   return \Drupal::service('class_resolver')
-    ->getInstanceFromDefinition(\Drupal\pardot\FormOperations::class)
+    ->getInstanceFromDefinition(FormOperations::class)
     ->getFormEntity($form, $form_state, WebformSubmissionForm::class, 'webform');
 }
 
@@ -120,6 +122,6 @@ function pardot_webform_submission_form_alter(array &$form, FormStateInterface $
  */
 function pardot_form_contact_message_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
   return \Drupal::service('class_resolver')
-    ->getInstanceFromDefinition(\Drupal\pardot\FormOperations::class)
+    ->getInstanceFromDefinition(FormOperations::class)
     ->getFormEntity($form, $form_state, MessageForm::class, 'contact_form');
 }
diff --git a/src/EventSubscriber/PardotEventSubscriber.php b/src/EventSubscriber/PardotEventSubscriber.php
index 48126b8..6454e4f 100644
--- a/src/EventSubscriber/PardotEventSubscriber.php
+++ b/src/EventSubscriber/PardotEventSubscriber.php
@@ -2,12 +2,12 @@
 
 namespace Drupal\pardot\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Executable\ExecutableManagerInterface;
 use Drupal\Core\Session\AccountInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -72,9 +72,9 @@ class PardotEventSubscriber implements EventSubscriberInterface {
   /**
    * Evaluates tracking scoping conditions and sets state setting.
    *
-   * @param GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    */
-  public function evaluateTrackingScope(GetResponseEvent $event) {
+  public function evaluateTrackingScope(RequestEvent $event) {
     // Check if Pardot is configured with an account ID.
     if (null !== $this->config->get('account_id')) {
       // Load use role condition configuration and current user.
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index 94f14c7..0e06b79 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -34,7 +34,7 @@ class LoadTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
