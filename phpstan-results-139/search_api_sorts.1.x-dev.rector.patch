diff --git a/search_api_sorts.api.php b/search_api_sorts.api.php
index 28e552f..d1033ae 100644
--- a/search_api_sorts.api.php
+++ b/search_api_sorts.api.php
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\search_api_sorts\SortsField;
+use Drupal\search_api\Display\DisplayInterface;
 /**
  * @file
  * Hooks provided by the Search API sorts module.
@@ -25,7 +27,7 @@
  *
  * @see \Drupal\search_api_sorts\SearchApiSortsManager
  */
-function hook_search_api_sorts_active_sort_alter(\Drupal\search_api_sorts\SortsField &$sort, \Drupal\search_api\Display\DisplayInterface $display) {
+function hook_search_api_sorts_active_sort_alter(SortsField &$sort, DisplayInterface $display) {
 
   // Example: use different price for anonymous users when sorting on price.
   if ($sort->getFieldName() === "price" && \Drupal::currentUser()->isAnonymous()) {
@@ -48,7 +50,7 @@ function hook_search_api_sorts_active_sort_alter(\Drupal\search_api_sorts\SortsF
  *
  * @see \Drupal\search_api_sorts\SearchApiSortsManager
  */
-function hook_search_api_sorts_default_sort_alter(\Drupal\search_api_sorts\SortsField &$sort, \Drupal\search_api\Display\DisplayInterface $display) {
+function hook_search_api_sorts_default_sort_alter(SortsField &$sort, DisplayInterface $display) {
   $sort->setFieldName("title");
   $sort->setOrder("desc");
 }
diff --git a/tests/src/Functional/HooksTest.php b/tests/src/Functional/HooksTest.php
index 8317e93..7147ad1 100644
--- a/tests/src/Functional/HooksTest.php
+++ b/tests/src/Functional/HooksTest.php
@@ -23,7 +23,7 @@ class HooksTest extends SortsFunctionalBase {
     $sorts_config = 'admin/config/search/search-api/index/' . $this->indexId . '/sorts/' . $this->escapedDisplayId;
     $this->drupalGet($sorts_config);
     $edit = ['sorts[id][status]' => TRUE, 'default_sort' => 'id'];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
 
     // Add and place the sorts block in the footer.
     $block_settings = ['region' => 'footer', 'id' => 'sorts-id'];
diff --git a/tests/src/Functional/IntegrationTest.php b/tests/src/Functional/IntegrationTest.php
index 8827ff6..f1f4c36 100644
--- a/tests/src/Functional/IntegrationTest.php
+++ b/tests/src/Functional/IntegrationTest.php
@@ -23,7 +23,7 @@ class IntegrationTest extends SortsFunctionalBase {
     $edit = [
       'sorts[id][status]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
 
     // Check for non-existence of the block first.
     $this->drupalGet('search-api-sorts-test');
@@ -80,7 +80,7 @@ class IntegrationTest extends SortsFunctionalBase {
       'sorts[search_api_relevance][status]' => TRUE,
       'sorts[type][status]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
 
     // Make sure the ID and type link are available.
     $this->drupalGet('search-api-sorts-test');
@@ -91,7 +91,7 @@ class IntegrationTest extends SortsFunctionalBase {
     // Remove the type field from the index.
     $this->drupalGet('admin/config/search/search-api/index/' . $this->indexId . '/fields');
     $this->getSession()->getPage()->find('css', '#edit-fields-type-remove')->click();
-    $this->drupalPostForm(NULL, [], 'Save changes');
+    $this->submitForm([], 'Save changes');
 
     // The type field was removed from the index. Make sure the type field is
     // also removed from the sorts block.
@@ -125,7 +125,7 @@ class IntegrationTest extends SortsFunctionalBase {
       'sorts[type][status]' => TRUE,
       'default_sort' => 'id',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
 
     $configs_to_be_saved = ['id', 'created', 'type'];
     $configs_not_to_be_saved = ['search_api_relevance',
diff --git a/tests/src/Functional/TranslationTest.php b/tests/src/Functional/TranslationTest.php
index 57820de..fd8f080 100644
--- a/tests/src/Functional/TranslationTest.php
+++ b/tests/src/Functional/TranslationTest.php
@@ -81,7 +81,7 @@ class TranslationTest extends SortsFunctionalBase {
       'sorts[id][status]' => TRUE,
       'default_sort' => 'id',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
 
     // Check if the config is saved in the default language.
     $search_api_sorts_field = $this->searchApiSortsFieldStorage->load($this->escapedDisplayId . '_' . 'id');
@@ -116,7 +116,7 @@ class TranslationTest extends SortsFunctionalBase {
       'sorts[id][status]' => TRUE,
       'default_sort' => 'id',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
 
     // Check if config is saved in the default language (EN).
     $search_api_sorts_field = $this->searchApiSortsFieldStorage->load($this->escapedDisplayId . '_' . 'id');
@@ -141,7 +141,7 @@ class TranslationTest extends SortsFunctionalBase {
     $edit = [
       'sorts[created][status]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
 
     // Check if ID field config is still saved in the default language.
     $search_api_sorts_field = $this->searchApiSortsFieldStorage->load($this->escapedDisplayId . '_' . 'id');
@@ -150,9 +150,10 @@ class TranslationTest extends SortsFunctionalBase {
     // Check if created config is also saved in the default language.
     $search_api_sorts_field = $this->searchApiSortsFieldStorage->load($this->escapedDisplayId . '_' . 'created');
     $this->assertEquals('en', $search_api_sorts_field->language()->getId());
+    $this->drupalGet('admin/config/search/search-api/sorts/' . $this->escapedDisplayId . '_' . 'id' . '/translate/fr/add');
 
     // Translate the ID field.
-    $this->drupalPostForm('admin/config/search/search-api/sorts/' . $this->escapedDisplayId . '_' . 'id' . '/translate/fr/add', [
+    $this->submitForm([
       'translation[config_names][search_api_sorts.search_api_sorts_field.' . $this->escapedDisplayId . '_' . 'id' . '][label]' => 'Identifiant',
     ], 'Save translation');
 
diff --git a/tests/src/Unit/SearchApiSortsManagerTest.php b/tests/src/Unit/SearchApiSortsManagerTest.php
index 87a3cfb..753599f 100644
--- a/tests/src/Unit/SearchApiSortsManagerTest.php
+++ b/tests/src/Unit/SearchApiSortsManagerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\search_api_sorts\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -24,6 +25,7 @@ use Symfony\Component\HttpFoundation\RequestStack;
  */
 class SearchApiSortsManagerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * ModuleHandler object.
    *
@@ -116,9 +118,7 @@ class SearchApiSortsManagerTest extends UnitTestCase {
 
     $sortsField = new SearchApiSortsField(['id' => $this->randomMachineName()], 'search_api_sorts_field');
 
-    $storage = $this->getMockBuilder(EntityStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $storage = $this->createMock(EntityStorageInterface::class);
 
     $storage->expects($this->once())
       ->method('loadByProperties')
