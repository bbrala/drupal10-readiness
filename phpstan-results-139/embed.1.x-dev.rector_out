modules/contrib/embed/embed.api.php
modules/contrib/embed/src/EmbedButtonListBuilder.php
modules/contrib/embed/embed.install
modules/contrib/embed/embed.module
modules/contrib/embed/tests/src/Functional/EmbedTestBase.php
modules/contrib/embed/src/EmbedCKEditorPluginBase.php
modules/contrib/embed/embed.post_update.php
modules/contrib/embed/src/Access/EmbedButtonEditorAccessCheck.php
modules/contrib/embed/src/EmbedType/EmbedTypeBase.php
modules/contrib/embed/src/EmbedType/EmbedTypeInterface.php
modules/contrib/embed/src/EmbedType/EmbedTypeManager.php
modules/contrib/embed/tests/src/Functional/PreviewTest.php
modules/contrib/embed/src/Entity/EmbedButton.php
modules/contrib/embed/src/Ajax/EmbedInsertCommand.php
modules/contrib/embed/src/Annotation/EmbedType.php
modules/contrib/embed/src/Controller/EmbedController.php
modules/contrib/embed/tests/src/FunctionalJavascript/EmbedButtonAdminTest.php
modules/contrib/embed/src/DomHelperTrait.php
modules/contrib/embed/src/Form/EmbedButtonForm.php
modules/contrib/embed/src/EmbedButtonInterface.php
modules/contrib/embed/tests/src/Kernel/IconTest.php
modules/contrib/embed/src/Form/EmbedSettingsForm.php
modules/contrib/embed/tests/src/Unit/DomHelperTraitTest.php
modules/contrib/embed/tests/embed_test/embed_test.module
modules/contrib/embed/tests/embed_test/src/Controller/EmbedTestController.php
modules/contrib/embed/tests/embed_test/src/Plugin/EmbedType/Aircraft.php
modules/contrib/embed/tests/embed_test/src/Plugin/EmbedType/Animal.php
modules/contrib/embed/tests/embed_test/src/Plugin/EmbedType/EmbedTestDefault.php
modules/contrib/embed/tests/embed_test/src/Plugin/Filter/EntityEmbedByID.php
modules/contrib/embed/tests/src/Functional/EmbedButtonEditorAccessCheckTest.php
modules/contrib/embed/tests/src/Functional/EmbedPreviewTest.php

7 files with changes
====================

1) modules/contrib/embed/tests/src/Unit/DomHelperTraitTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     $this->document = Html::load('<outer><test foo="bar" namespace:foo="bar"><test bar="foo"></test></test></outer>');
     $this->node = $this->document->getElementsByTagName('body')->item(0)->firstChild->firstChild;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/embed/tests/src/Kernel/IconTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('system');
     $this->installEntitySchema('embed_button');
@@ @@
    *   The assertion message.
    */
   protected function assertIconUrl($uri, EmbedButtonInterface $button, string $message = '') {
-    $this->assertSame(file_url_transform_relative(file_create_url($uri)), $button->getIconUrl(), $message);
+    $this->assertSame(\Drupal::service('file_url_generator')->generateString($uri), $button->getIconUrl(), $message);
   }

 }
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/embed/tests/src/FunctionalJavascript/EmbedButtonAdminTest.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create Filtered HTML text format and enable entity_embed filter.
@@ @@
     $this->assertNotEmpty($assert_session->waitForText("Machine name: $button_id"));
     $page->selectFieldOption('type_id', 'embed_test_default');
     $assert_session->assertWaitOnAjaxRequest();
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     // Ensure that the newly created button is listed.
     $this->drupalGet('admin/config/content/embed');
     $assert_session->pageTextContains($button_label);
@@ @@
     $edit = [
       'label' => $new_button_label,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     // Ensure that name and label has been changed.
     $this->drupalGet('admin/config/content/embed');
     $assert_session->pageTextContains($new_button_label);
@@ @@

     // Delete embed button.
     $this->drupalGet('admin/config/content/embed/button/manage/' . $button_id . '/delete');
-    $this->drupalPostForm(NULL, [], 'Delete');
+    $this->submitForm([], 'Delete');
     // Ensure that the deleted embed button no longer exists.
     $this->drupalGet('admin/config/content/embed/button/manage/' . $button_id);
     $assert_session->pageTextContains('The requested page could not be found.');
@@ @@
     $this->assertSame('fixed-wing', $aircraft_type->getValue());

     $edit['type_settings[aircraft_type]'] = 'invalid';
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $assert_session->pageTextContains('Cannot select invalid aircraft type.');

     $edit['type_settings[aircraft_type]'] = 'helicopters';
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $assert_session->pageTextContains('Helicopters are just rotorcraft.');

     $this->drupalGet('admin/config/content/embed/button/manage/' . $button_id);
-    $this->assertFieldByName('type_settings[aircraft_type]', 'rotorcraft');
+    $this->assertSession()->fieldValueEquals('type_settings[aircraft_type]', 'rotorcraft');
   }

   public function testCKEditorButtonConflict() {
@@ @@
     $edit = [
       'type_id' => 'embed_test_default',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/embed/tests/src/Functional/PreviewTest.php:21

    ---------- begin diff ----------
@@ @@
   public function testPreviewRoute() {
     // Ensure the default filter can be previewed by the anonymous user.
     $this->getRoute('plain_text');
-    $this->assertResponse(200);
-    $this->assertText(static::SUCCESS);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains(static::SUCCESS);

     // The anonymous user should not have permission to use embed_test format.
     $this->getRoute('embed_test');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Now login a user that can use the embed_test format.
     $this->drupalLogin($this->webUser);

     $this->getRoute('plain_text');
-    $this->assertResponse(200);
-    $this->assertText(static::SUCCESS);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains(static::SUCCESS);

     $this->getRoute('embed_test');
-    $this->assertResponse(200);
-    $this->assertText(static::SUCCESS);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains(static::SUCCESS);

     // Test preview route with an empty request.
     $this->getRoute('embed_test', '');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);

     // Test preview route with an invalid text format.
     $this->getRoute('invalid_format');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/embed/tests/src/Functional/EmbedTestBase.php:49

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create Filtered HTML text format and enable entity_embed filter.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/embed/tests/src/Functional/EmbedButtonEditorAccessCheckTest.php:27

    ---------- begin diff ----------
@@ @@
     // The anonymous user should have access to the plain_text format, but it
     // hasn't been configured to use an editor yet.
     $this->getRoute('plain_text', 'embed_test_default');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.embed_test');
-    $this->assertNoCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');

     // The anonymous user should not have permission to use embed_test format.
     $this->getRoute('embed_test', 'embed_test_default');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.embed_test');
-    $this->assertNoCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');

     // Now login a user that can use the embed_test format.
     $this->drupalLogin($this->webUser);

     $this->getRoute('plain_text', 'embed_test_default');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.plain_text');
-    $this->assertNoCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.plain_text');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');

     // Add an empty configuration for the plain_text editor configuration.
     $editor = Editor::create([
@@ @@
     ]);
     $editor->save();
     $this->getRoute('plain_text', 'embed_test_default');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     $this->assertCacheContext('route');
-    $this->assertCacheTag('config:editor.editor.plain_text');
-    $this->assertCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:editor.editor.plain_text');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');

     $this->getRoute('embed_test', 'embed_test_default');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertCacheContext('route');
-    $this->assertCacheTag('config:editor.editor.embed_test');
-    $this->assertCacheTag('config:embed.button.embed_test_default');
-    $this->assertText(static::SUCCESS);
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');
+    $this->assertSession()->pageTextContains(static::SUCCESS);

     // Test route with an empty request.
     $this->getRoute('embed_test', 'embed_test_default', '');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertCacheTag('config:editor.editor.embed_test');
-    $this->assertCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');

     // Test route with an invalid text format.
     $this->getRoute('invalid_editor', 'embed_test_default');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.invalid_editor');
-    $this->assertNoCacheTag('config:embed.button.embed_test_default');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.invalid_editor');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.embed_test_default');

     // Test route with an invalid embed button.
     $this->getRoute('embed_test', 'invalid_button');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->assertCacheContext('route');
-    $this->assertNoCacheTag('config:editor.editor.embed_test');
-    $this->assertNoCacheTag('config:embed.button.invalid_button');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:editor.editor.embed_test');
+    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:embed.button.invalid_button');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertCacheTagRector
 * AssertNoCacheTagRector
 * AssertResponseRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/embed/src/Entity/EmbedButton.php:129

    ---------- begin diff ----------
@@ @@
       if (!is_file($uri) && !UrlHelper::isExternal($uri)) {
         static::convertEncodedDataToImage($this->icon);
       }
-      $uri = file_create_url($uri);
+      $uri = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
     }
     else {
       $uri = $this->getTypePlugin()->getDefaultIconUrl();
     }

-    return file_url_transform_relative($uri);
+    return \Drupal::service('file_url_generator')->transformRelative($uri);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

