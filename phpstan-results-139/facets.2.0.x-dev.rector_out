modules/contrib/facets/facets.api.php
modules/contrib/facets/modules/facets_range_widget/facets_range_widget.install
modules/contrib/facets/modules/facets_searchbox_widget/facets_searchbox_widget.module
modules/contrib/facets/modules/facets_summary/src/Entity/FacetsSummary.php
modules/contrib/facets/modules/facets_summary/tests/src/Functional/HierarchicalFacetIntegrationTest.php
modules/contrib/facets/facets.install
modules/contrib/facets/src/Annotation/FacetsQueryType.php
modules/contrib/facets/src/Exception/InvalidQueryTypeException.php
modules/contrib/facets/src/Plugin/Block/FacetBlockDeriver.php
modules/contrib/facets/src/Plugin/facets/processor/HierarchyProcessor.php
modules/contrib/facets/src/Processor/PostQueryProcessorInterface.php
modules/contrib/facets/modules/facets_searchbox_widget/src/Plugin/facets/widget/SearchboxCheckboxWidget.php
modules/contrib/facets/src/Widget/WidgetPluginManager.php
modules/contrib/facets/src/Annotation/FacetsUrlProcessor.php
modules/contrib/facets/src/Annotation/FacetsWidget.php
modules/contrib/facets/src/Controller/FacetBlockAjaxController.php
modules/contrib/facets/src/FacetInterface.php
modules/contrib/facets/modules/facets_searchbox_widget/src/Plugin/facets/widget/SearchboxLinksWidget.php
modules/contrib/facets/modules/facets_searchbox_widget/tests/src/FunctionalJavascript/SearchboxWidgetJSTest.php
modules/contrib/facets/modules/facets_range_widget/src/Plugin/facets/processor/RangeSliderProcessor.php
modules/contrib/facets/src/Processor/PreQueryProcessorInterface.php
modules/contrib/facets/src/Processor/ProcessorInterface.php
modules/contrib/facets/src/Processor/ProcessorPluginBase.php
modules/contrib/facets/src/FacetListBuilder.php
modules/contrib/facets/tests/facets_processors_collection/src/Plugin/facets/processor/FpcSortRandomProcessor.php
modules/contrib/facets/tests/src/Functional/Rest/FacetJsonAnonTest.php
modules/contrib/facets/tests/src/Kernel/Entity/FacetFacetSourceTest.php
modules/contrib/facets/src/Plugin/facets/facet_source/SearchApiBaseFacetSource.php
modules/contrib/facets/tests/src/Unit/Plugin/processor/TranslateEntityProcessorTest.php
modules/contrib/facets/modules/facets_range_widget/src/Plugin/facets/processor/SliderProcessor.php
modules/contrib/facets/src/Processor/ProcessorPluginManager.php
modules/contrib/facets/tests/facets_processors_collection/src/Plugin/facets/query_type/CacheableQueryTypePlugin.php
modules/contrib/facets/src/Plugin/facets/processor/ListItemProcessor.php
modules/contrib/facets/modules/facets_range_widget/src/Plugin/facets/widget/RangeSliderWidget.php
modules/contrib/facets/src/Processor/SortProcessorInterface.php
modules/contrib/facets/tests/facets_query_processor/src/Plugin/Block/DisplayGeneratedLinkBlock.php
modules/contrib/facets/modules/facets_range_widget/src/Plugin/facets/widget/SliderWidget.php
modules/contrib/facets/src/Processor/SortProcessorPluginBase.php
modules/contrib/facets/modules/facets_searchbox_widget/tests/src/Unit/Plugin/widget/SearchboxCheckboxWidgetTest.php
modules/contrib/facets/src/Plugin/facets/facet_source/SearchApiDisplay.php
modules/contrib/facets/src/QueryType/QueryTypeInterface.php
modules/contrib/facets/src/QueryType/QueryTypePluginBase.php
modules/contrib/facets/tests/facets_custom_widget/src/Plugin/facets/processor/InvalidQT.php
modules/contrib/facets/tests/facets_query_processor/src/Plugin/facets/url_processor/DummyQuery.php
modules/contrib/facets/tests/facets_custom_widget/src/Plugin/facets/processor/TestPreQuery.php
modules/contrib/facets/src/Plugin/facets/processor/RawValueWidgetOrderProcessor.php
modules/contrib/facets/src/QueryType/QueryTypePluginManager.php
modules/contrib/facets/src/QueryType/QueryTypeRangeBase.php
modules/contrib/facets/modules/facets_range_widget/tests/src/Functional/SliderIntegrationTest.php
modules/contrib/facets/src/Plugin/facets/processor/ShowOnlyDeepestLevelItemsProcessor.php
modules/contrib/facets/modules/facets_searchbox_widget/tests/src/Unit/Plugin/widget/SearchboxLinksWidgetTest.php
modules/contrib/facets/src/Plugin/facets/processor/ShowSiblingsProcessor.php
modules/contrib/facets/tests/src/Functional/AggregatedFieldTest.php
modules/contrib/facets/tests/facets_custom_widget/src/Plugin/facets/widget/CustomWidget.php
modules/contrib/facets/src/Plugin/facets/processor/TermWeightWidgetOrderProcessor.php
modules/contrib/facets/tests/facets_custom_widget/src/Plugin/facets/widget/WidgetDateQT.php
modules/contrib/facets/tests/facets_custom_widget/src/Plugin/facets/widget/WidgetInvalidQT.php
modules/contrib/facets/tests/facets_events_test/src/EventListener.php
modules/contrib/facets/tests/facets_processors_collection/facets_processors_collection.module
modules/contrib/facets/tests/facets_processors_collection/src/Cache/FpcCacheContext.php
modules/contrib/facets/tests/src/Functional/Rest/FacetJsonBasicAuthTest.php
modules/contrib/facets/tests/src/Functional/Rest/FacetJsonCookieTest.php
modules/contrib/facets/tests/src/Functional/Rest/FacetResourceTestBase.php
modules/contrib/facets/src/Result/Result.php
modules/contrib/facets/src/Plugin/facets/processor/TranslateEntityAggregatedFieldProcessor.php
modules/contrib/facets/modules/facets_summary/src/EventSubscriber/SearchApiSubscriber.php
modules/contrib/facets/modules/facets_summary/tests/src/Functional/IntegrationTest.php
modules/contrib/facets/src/Controller/FacetController.php
modules/contrib/facets/src/Result/ResultInterface.php
modules/contrib/facets/src/Controller/FacetSourceController.php
modules/contrib/facets/src/UrlProcessor/UrlProcessorInterface.php
modules/contrib/facets/modules/facets_summary/src/FacetsSummaryBlockInterface.php
modules/contrib/facets/modules/facets_summary/src/FacetsSummaryInterface.php
modules/contrib/facets/modules/facets_summary/src/FacetsSummaryManager/DefaultFacetsSummaryManager.php
modules/contrib/facets/tests/facets_processors_collection/src/Plugin/facets/processor/FpcBuildProcessor.php
modules/contrib/facets/src/UrlProcessor/UrlProcessorPluginBase.php
modules/contrib/facets/src/Entity/Facet.php
modules/contrib/facets/tests/src/Functional/Rest/FacetSourceJsonAnonTest.php
modules/contrib/facets/tests/src/Functional/Rest/FacetSourceJsonBasicAuthTest.php
modules/contrib/facets/tests/src/Functional/Rest/FacetSourceJsonCookieTest.php
modules/contrib/facets/tests/facets_processors_collection/src/Plugin/facets/processor/FpcPostQueryProcessor.php
modules/contrib/facets/tests/src/Functional/Rest/FacetSourceResourceTestBase.php
modules/contrib/facets/src/UrlProcessor/UrlProcessorPluginManager.php
modules/contrib/facets/src/Utility/FacetsDateHandler.php
modules/contrib/facets/tests/src/Functional/BlockTestTrait.php
modules/contrib/facets/tests/src/Functional/Rest/FacetSourceXmlAnonTest.php
modules/contrib/facets/tests/facets_processors_collection/src/Plugin/facets/processor/FpcSortProcessor.php
modules/contrib/facets/tests/src/Functional/Rest/FacetSourceXmlBasicAuthTest.php
modules/contrib/facets/tests/src/Functional/Rest/FacetSourceXmlCookieTest.php
modules/contrib/facets/tests/src/Functional/Rest/FacetXmlAnonTest.php
modules/contrib/facets/tests/src/Functional/Rest/FacetXmlBasicAuthTest.php
modules/contrib/facets/tests/src/Functional/Rest/FacetXmlCookieTest.php
modules/contrib/facets/tests/src/Functional/TestHelperTrait.php
modules/contrib/facets/modules/facets_summary/src/Form/FacetsSummaryDeleteConfirmForm.php
modules/contrib/facets/facets.module
modules/contrib/facets/modules/facets_summary/src/Form/FacetsSummaryForm.php
modules/contrib/facets/tests/src/Functional/BreadcrumbIntegrationTest.php
modules/contrib/facets/modules/facets_range_widget/tests/src/Unit/Plugin/processor/RangeSliderProcessorTest.php
modules/contrib/facets/tests/src/Functional/UrlIntegrationTest.php
modules/contrib/facets/src/Plugin/facets/processor/TranslateEntityProcessor.php
modules/contrib/facets/src/FacetManager/DefaultFacetManager.php
modules/contrib/facets/src/Plugin/facets/processor/UidToUserNameCallbackProcessor.php
modules/contrib/facets/tests/src/Functional/ExampleContentTrait.php
modules/contrib/facets/src/Plugin/facets/facet_source/SearchApiDisplayDeriver.php
modules/contrib/facets/src/Utility/FacetsUrlGenerator.php
modules/contrib/facets/tests/src/Kernel/Entity/FacetSourceTest.php
modules/contrib/facets/src/Plugin/facets/processor/UrlProcessorHandler.php
modules/contrib/facets/src/Plugin/facets/hierarchy/DateItems.php
modules/contrib/facets/tests/src/Functional/FacetSourceTest.php
modules/contrib/facets/tests/src/Kernel/Entity/FacetTest.php
modules/contrib/facets/src/Plugin/facets/query_type/SearchApiDate.php
modules/contrib/facets/src/Plugin/facets/hierarchy/Taxonomy.php
modules/contrib/facets/tests/src/Functional/FacetsTestBase.php
modules/contrib/facets/tests/src/Functional/FacetsUrlGeneratorTest.php
modules/contrib/facets/src/Widget/WidgetPluginBase.php
modules/contrib/facets/modules/facets_summary/src/Form/FacetsSummarySettingsForm.php
modules/contrib/facets/tests/src/Functional/WidgetIntegrationTest.php
modules/contrib/facets/src/FacetSource/FacetSourceDeriverBase.php
modules/contrib/facets/src/Plugin/facets/processor/ActiveWidgetOrderProcessor.php
modules/contrib/facets/modules/facets_range_widget/tests/src/Unit/Plugin/processor/SliderProcessorTest.php
modules/contrib/facets/src/Plugin/facets/processor/BooleanItemProcessor.php
modules/contrib/facets/tests/src/Functional/HierarchicalFacetIntegrationTest.php
modules/contrib/facets/src/FacetSource/FacetSourcePluginBase.php
modules/contrib/facets/src/FacetSource/FacetSourcePluginInterface.php
modules/contrib/facets/src/Plugin/facets/processor/CombineFacetProcessor.php
modules/contrib/facets/src/FacetSource/FacetSourcePluginManager.php
modules/contrib/facets/tests/src/FunctionalJavascript/AjaxBehaviorTest.php
modules/contrib/facets/src/FacetSource/SearchApiFacetSourceInterface.php
modules/contrib/facets/src/FacetSourceInterface.php
modules/contrib/facets/modules/facets_summary/facets_summary.install
modules/contrib/facets/src/Form/FacetCloneForm.php
modules/contrib/facets/tests/src/Kernel/FacetManager/DefaultFacetManagerTest.php
modules/contrib/facets/modules/facets_summary/facets_summary.module
modules/contrib/facets/src/Widget/WidgetPluginInterface.php
modules/contrib/facets/modules/facets_summary/tests/src/Functional/Rest/FacetSummaryJsonAnonTest.php
modules/contrib/facets/modules/facets_summary/src/Annotation/SummaryProcessor.php
modules/contrib/facets/modules/facets_summary/src/Plugin/Block/FacetsSummaryBlock.php
modules/contrib/facets/src/Plugin/facets/processor/CountLimitProcessor.php
modules/contrib/facets/modules/facets_summary/tests/src/Functional/Rest/FacetSummaryJsonBasicAuthTest.php
modules/contrib/facets/modules/facets_summary/tests/src/Functional/Rest/FacetSummaryJsonCookieTest.php
modules/contrib/facets/modules/facets_summary/tests/src/Functional/Rest/FacetSummaryResourceTestBase.php
modules/contrib/facets/src/Form/FacetDeleteConfirmForm.php
modules/contrib/facets/modules/facets_summary/tests/src/Functional/Rest/FacetSummaryXmlAnonTest.php
modules/contrib/facets/modules/facets_summary/tests/src/Functional/Rest/FacetSummaryXmlBasicAuthTest.php
modules/contrib/facets/modules/facets_summary/tests/src/Functional/Rest/FacetSummaryXmlCookieTest.php
modules/contrib/facets/modules/facets_summary/tests/src/Kernel/ProcessorTest.php
modules/contrib/facets/src/Plugin/facets/query_type/SearchApiGranular.php
modules/contrib/facets/src/Form/FacetForm.php
modules/contrib/facets/src/Plugin/facets/processor/CountWidgetOrderProcessor.php
modules/contrib/facets/src/Plugin/facets/processor/DateItemProcessor.php
modules/contrib/facets/tests/src/FunctionalJavascript/JsBase.php
modules/contrib/facets/modules/facets_summary/src/Plugin/Block/FacetsSummaryBlockDeriver.php
modules/contrib/facets/src/Plugin/facets/query_type/SearchApiRange.php
modules/contrib/facets/modules/facets_summary/tests/src/Kernel/SummaryEntityTest.php
modules/contrib/facets/modules/facets_summary/src/Plugin/facets_summary/processor/HideWhenNotRenderedProcessor.php
modules/contrib/facets/src/Plugin/facets/processor/DependentFacetProcessor.php
modules/contrib/facets/src/Entity/FacetSource.php
modules/contrib/facets/modules/facets_summary/src/Plugin/facets_summary/processor/ResetFacetsProcessor.php
modules/contrib/facets/src/Event/ActiveFiltersParsed.php
modules/contrib/facets/modules/facets_range_widget/tests/src/Unit/Plugin/widget/RangeSliderWidgetTest.php
modules/contrib/facets/src/Event/FacetsEvents.php
modules/contrib/facets/src/Event/GetFacetCacheContexts.php
modules/contrib/facets/modules/facets_summary/tests/src/Unit/Plugin/Processor/HideWhenNotRenderedProcessorTest.php
modules/contrib/facets/src/Event/GetFacetCacheMaxAge.php
modules/contrib/facets/modules/facets_range_widget/tests/src/Unit/Plugin/widget/SliderWidgetTest.php
modules/contrib/facets/src/Event/GetFacetCacheTags.php
modules/contrib/facets/src/Plugin/facets/query_type/SearchApiString.php
modules/contrib/facets/src/Event/PostBuildFacet.php
modules/contrib/facets/tests/src/FunctionalJavascript/WidgetJSTest.php
modules/contrib/facets/src/Event/QueryStringCreated.php
modules/contrib/facets/tests/src/Functional/IntegrationCacheTest.php
modules/contrib/facets/src/Event/UrlCreated.php
modules/contrib/facets/src/EventSubscriber/ConfigurationSubscriber.php
modules/contrib/facets/tests/src/Unit/Plugin/processor/UidToUserNameCallbackProcessorTest.php
modules/contrib/facets/modules/facets_summary/tests/src/Unit/Plugin/Processor/ResetFacetsProcessorTest.php
modules/contrib/facets/modules/facets_summary/src/Plugin/facets_summary/processor/ShowCountProcessor.php
modules/contrib/facets/src/Plugin/facets/url_processor/QueryString.php
modules/contrib/facets/modules/facets_summary/src/Plugin/facets_summary/processor/ShowSummaryProcessor.php
modules/contrib/facets/src/EventSubscriber/SearchApiSubscriber.php
modules/contrib/facets/tests/src/Kernel/Plugin/query_type/SearchApiDateTest.php
modules/contrib/facets/src/Plugin/facets/processor/DisplayValueWidgetOrderProcessor.php
modules/contrib/facets/modules/facets_rest/src/Plugin/views/style/FacetsSerializer.php
modules/contrib/facets/src/Exception/Exception.php
modules/contrib/facets/src/Exception/InvalidProcessorException.php
modules/contrib/facets/modules/facets_summary/src/Plugin/facets_summary/processor/ShowTextWhenEmptyProcessor.php
modules/contrib/facets/modules/facets_summary/tests/src/Unit/Plugin/Processor/ShowTextWhenEmptyProcessorTest.php
modules/contrib/facets/tests/src/Unit/Plugin/processor/UrlProcessorHandlerTest.php
modules/contrib/facets/src/Plugin/facets/processor/ExcludeSpecifiedItemsProcessor.php
modules/contrib/facets/modules/facets_summary/src/Processor/BuildProcessorInterface.php
modules/contrib/facets/modules/facets_summary/src/Processor/ProcessorInterface.php
modules/contrib/facets/modules/facets_summary/src/Processor/ProcessorPluginBase.php
modules/contrib/facets/modules/facets_summary/src/Processor/ProcessorPluginManager.php
modules/contrib/facets/src/Plugin/facets/processor/GranularItemProcessor.php
modules/contrib/facets/src/Annotation/FacetsFacetSource.php
modules/contrib/facets/src/Annotation/FacetsHierarchy.php
modules/contrib/facets/src/Annotation/FacetsProcessor.php
modules/contrib/facets/tests/src/Unit/Plugin/query_type/SearchApiGranularTest.php
modules/contrib/facets/src/Plugin/facets/processor/HideActiveItemsProcessor.php
modules/contrib/facets/src/Plugin/facets/processor/HideInactiveSiblingsProcessor.php
modules/contrib/facets/src/Plugin/facets/processor/HideNonNarrowingResultProcessor.php
modules/contrib/facets/modules/facets_rest/tests/src/Functional/RestIntegrationTest.php
modules/contrib/facets/src/Plugin/facets/processor/HideOnlyOneItemProcessor.php
modules/contrib/facets/tests/src/Unit/FacetSource/FacetSourcePluginManagerTest.php
modules/contrib/facets/tests/src/Unit/Plugin/query_type/SearchApiStringTest.php
modules/contrib/facets/tests/src/Unit/Plugin/processor/ActiveWidgetOrderProcessorTest.php
modules/contrib/facets/tests/src/Unit/Plugin/url_processor/QueryStringTest.php
modules/contrib/facets/tests/src/Unit/Plugin/processor/BooleanItemProcessorTest.php
modules/contrib/facets/tests/src/Unit/Plugin/processor/CountLimitProcessorTest.php
modules/contrib/facets/tests/src/Functional/IntegrationTest.php
modules/contrib/facets/src/Plugin/facets/widget/ArrayWidget.php
modules/contrib/facets/src/Form/FacetSettingsForm.php
modules/contrib/facets/src/Plugin/facets/widget/CheckboxWidget.php
modules/contrib/facets/src/Plugin/facets/widget/DropdownWidget.php
modules/contrib/facets/src/Plugin/facets/widget/LinksWidget.php
modules/contrib/facets/tests/src/Unit/Plugin/processor/CountWidgetOrderProcessorTest.php
modules/contrib/facets/tests/src/Unit/Plugin/processor/DependentFacetProcessorTest.php
modules/contrib/facets/src/Processor/BuildProcessorInterface.php
modules/contrib/facets/src/Form/FacetSourceEditForm.php
modules/contrib/facets/tests/src/Unit/Plugin/processor/DisplayValueWidgetOrderProcessorTest.php
modules/contrib/facets/src/Hierarchy/HierarchyInterface.php
modules/contrib/facets/src/Hierarchy/HierarchyPluginBase.php
modules/contrib/facets/src/Hierarchy/HierarchyPluginManager.php
modules/contrib/facets/src/LanguageSwitcherLinksAlterer.php
modules/contrib/facets/tests/src/Unit/Plugin/processor/ExcludeSpecifiedItemsProcessorTest.php
modules/contrib/facets/src/Plugin/Block/FacetBlock.php
modules/contrib/facets/tests/src/Unit/Plugin/widget/ArrayWidgetTest.php
modules/contrib/facets/tests/src/Unit/Plugin/processor/HideActiveItemsProcessorTest.php
modules/contrib/facets/tests/src/Unit/Plugin/processor/HideNonNarrowingResultProcessorTest.php
modules/contrib/facets/tests/src/Unit/Plugin/widget/CheckboxWidgetTest.php
modules/contrib/facets/tests/src/Unit/Plugin/processor/HideOnlyOneItemProcessorTest.php
modules/contrib/facets/tests/src/Unit/Plugin/widget/DropdownWidgetTest.php
modules/contrib/facets/tests/src/Unit/Plugin/processor/ListItemProcessorTest.php
modules/contrib/facets/tests/src/Unit/Plugin/widget/LinksWidgetTest.php
modules/contrib/facets/tests/src/Functional/LanguageIntegrationTest.php
modules/contrib/facets/tests/src/Functional/ProcessorIntegrationTest.php
modules/contrib/facets/tests/src/Unit/Plugin/widget/WidgetTestBase.php
modules/contrib/facets/tests/src/Unit/Processor/ProcessorPluginManagerTest.php
modules/contrib/facets/tests/src/Unit/Plugin/processor/RawValueWidgetOrderProcessorTest.php
modules/contrib/facets/tests/src/Unit/Plugin/processor/ShowOnlyDeepestLevelItemsProcessorTest.php
modules/contrib/facets/tests/src/Unit/Plugin/processor/TermWeightWidgetOrderProcessorTest.php
modules/contrib/facets/tests/src/Unit/QueryType/QueryTypePluginManagerTest.php
modules/contrib/facets/tests/src/Unit/Result/ResultTest.php
modules/contrib/facets/tests/src/Unit/UrlProcessor/UrlProcessorPluginManagerTest.php
modules/contrib/facets/tests/src/Unit/Utility/FacetsDateHandlerTest.php
modules/contrib/facets/tests/src/Unit/Utility/FacetsUrlGeneratorTest.php
modules/contrib/facets/tests/src/Unit/Widget/WidgetPluginManagerTest.php

30 files with changes
=====================

1) modules/contrib/facets/modules/facets_searchbox_widget/tests/src/Unit/Plugin/widget/SearchboxLinksWidgetTest.php:244

    ---------- begin diff ----------
@@ @@
    * Sets up a container.
    */
   protected function createContainer() {
-    $router = $this->getMockBuilder(TestRouterInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $router = $this->createMock(TestRouterInterface::class);
     $router->expects($this->any())
       ->method('matchRequest')
       ->willReturn([
@@ @@
         '_route' => 'test',
       ]);

-    $url_processor = $this->getMockBuilder(UrlProcessorInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url_processor = $this->createMock(UrlProcessorInterface::class);

-    $manager = $this->getMockBuilder(FacetSourcePluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $manager = $this->createMock(FacetSourcePluginManager::class);
     $manager->expects($this->exactly(1))
       ->method('createInstance')
       ->willReturn($url_processor);

     $storage = $this->createMock(EntityStorageInterface::class);
-    $em = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $em = $this->createMock(EntityTypeManagerInterface::class);
     $em->expects($this->exactly(1))
       ->method('getStorage')
       ->willReturn($storage);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/facets/modules/facets_summary/tests/src/Unit/Plugin/Processor/ShowTextWhenEmptyProcessorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\facets_summary\Unit\Plugin\Processor;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\StringTranslation\TranslationInterface;
@@ @@
  */
 class ShowTextWhenEmptyProcessorTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The processor we're testing.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/facets/modules/facets_summary/tests/src/Unit/Plugin/Processor/ResetFacetsProcessorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\facets_summary\Unit\Plugin\Processor;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\facets_summary\Entity\FacetsSummary;
@@ @@
  */
 class ResetFacetsProcessorTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The processor we're testing.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/facets/modules/facets_summary/tests/src/Unit/Plugin/Processor/HideWhenNotRenderedProcessorTest.php:86

    ---------- begin diff ----------
@@ @@
    *   The value for rendered in current request.
    */
   protected function createContainer($renderedInCurrentRequestValue) {
-    $fsi = $this->getMockBuilder(FacetSourcePluginInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $fsi = $this->createMock(FacetSourcePluginInterface::class);
     $fsi->method('isRenderedInCurrentRequest')
       ->willReturn($renderedInCurrentRequestValue);

-    $facetSourceManager = $this->getMockBuilder(FacetSourcePluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $facetSourceManager = $this->createMock(FacetSourcePluginManager::class);
     $facetSourceManager->method('createInstance')
       ->willReturn($fsi);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/facets/modules/facets_summary/tests/src/Functional/IntegrationTest.php:213

    ---------- begin diff ----------
@@ @@
     $block = $this->drupalPlaceBlock('facets_summary_block:owl', $block);

     $this->drupalGet('search-api-test-fulltext');
-    $this->assertText('Displaying 5 search results');
+    $this->assertSession()->pageTextContains('Displaying 5 search results');
     $this->clickLink('item');

     /** @var \Behat\Mink\Element\NodeElement[] $list_items */
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/facets/modules/facets_range_widget/tests/src/Unit/Plugin/widget/SliderWidgetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\facets_range_widget\Unit\Plugin\widget;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Routing\UrlGeneratorInterface;
 use Drupal\Core\Url;
 use Drupal\facets\Entity\Facet;
@@ @@
  */
 class SliderWidgetTest extends WidgetTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/facets/modules/facets_range_widget/tests/src/Unit/Plugin/processor/SliderProcessorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\facets_range_widget\Unit\Plugin\processor;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\facets\Entity\Facet;
 use Drupal\facets\Plugin\facets\widget\ArrayWidget;
@@ @@
  */
 class SliderProcessorTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The processor we're testing.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/facets/modules/facets_range_widget/tests/src/Unit/Plugin/processor/RangeSliderProcessorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\facets_range_widget\Unit\Plugin\processor;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Routing\UrlGeneratorInterface;
@@ @@
  */
 class RangeSliderProcessorTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The processor we're testing.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/facets/tests/src/Unit/Plugin/processor/TermWeightWidgetOrderProcessorTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * The mocked entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Mocked term, used for comparison.
    *
-   * @var \Drupal\Core\Entity\EntityManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $termA;

@@ @@
   /**
    * Mocked term, used for comparison.
    *
-   * @var \Drupal\Core\Entity\EntityManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $termB;

@@ @@
   /**
    * Mocked entity (term) storage.
    *
-   * @var \Drupal\Core\Entity\EntityManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $termStorage;

@@ @@

     // Build up a chain of mocks that we will have the processor use to fetch
     // the weight of the terms that are being compared.
-    $this->termStorage = $this->getMockBuilder(EntityStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->entityTypeManager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->termStorage = $this->createMock(EntityStorageInterface::class);
+    $this->entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
     $this->entityTypeManager->expects($this->any())
       ->method('getStorage')
       ->willReturn($this->termStorage);
@@ @@
     // Setup two mock terms that will be set up to have specific weights before
     // the processor is used to compare them.
     // The mocks are used in the individual tests.
-    $this->termA = $this->getMockBuilder(Term::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->termB = $this->getMockBuilder(Term::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->termA = $this->createMock(Term::class);
+    $this->termB = $this->createMock(Term::class);

     // Prepare the terms that will be returned when the processor loads its list
     // of term-ids from the Results raw values.
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/facets/tests/src/Unit/Plugin/processor/ListItemProcessorTest.php:56

    ---------- begin diff ----------
@@ @@
       new Result($facet, 3, 3, 15),
     ];

-    $config_manager = $this->getMockBuilder(ConfigManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config_manager = $this->createMock(ConfigManager::class);

-    $entity_field_manager = $this->getMockBuilder(EntityFieldManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_field_manager = $this->createMock(EntityFieldManager::class);

-    $entity_type_bundle_info = $this->getMockBuilder(EntityTypeBundleInfo::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_bundle_info = $this->createMock(EntityTypeBundleInfo::class);

     // Create a search api based facet source and make the property definition
     // return null.
@@ @@
     $data_definition->expects($this->any())
       ->method('getPropertyDefinition')
       ->willReturn(NULL);
-    $facet_source = $this->getMockBuilder(FacetSourcePluginInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $facet_source = $this->createMock(FacetSourcePluginInterface::class);
     $facet_source->expects($this->any())
       ->method('getDataDefinition')
       ->willReturn($data_definition);
@@ @@
       ->willReturn(CacheBackendInterface::CACHE_PERMANENT);

     // Add the plugin manager.
-    $pluginManager = $this->getMockBuilder(FacetSourcePluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $pluginManager = $this->createMock(FacetSourcePluginManager::class);
     $pluginManager->expects($this->any())
       ->method('hasDefinition')
       ->willReturn(TRUE);
@@ @@

     $this->processor = new ListItemProcessor([], 'list_item', [], $config_manager, $entity_field_manager, $entity_type_bundle_info);

-    $facet_entity_type = $this->getMockBuilder(ConfigEntityType::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $facet_entity_type = $this->createMock(ConfigEntityType::class);
     $facet_entity_type->method('getConfigPrefix')
       ->willReturn('facets.facet');

-    $entity_type_manager = $this->getMockBuilder(EntityTypeManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManager::class);
     $entity_type_manager->method('getDefinition')
       ->with('facets_facet')
       ->willReturn($facet_entity_type);

-    $this->processor_plugin_manager = $this->getMockBuilder(ProcessorPluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->processor_plugin_manager = $this->createMock(ProcessorPluginManager::class);
     $this->processor_plugin_manager->method('getDefinitions')
       ->willReturn(['list_item' => ['class' => ListItemProcessor::class]]);

-    $event_dispatcher = $this->getMockBuilder(EventDispatcher::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $event_dispatcher = $this->createMock(EventDispatcher::class);

     $container = new ContainerBuilder();
     $container->set('plugin.manager.facets.facet_source', $pluginManager);
@@ @@
    * Tests facet build with field.module field.
    */
   public function testBuildConfigurableField() {
-    $module_field = $this->getMockBuilder(FieldStorageConfig::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $module_field = $this->createMock(FieldStorageConfig::class);
     // Return cache field metadata.
     $module_field->expects($this->exactly(1))
       ->method('getCacheContexts')
@@ @@

     // Make sure that when the processor calls loadConfigEntityByName the field
     // we created here is called.
-    $config_manager = $this->getMockBuilder(ConfigManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config_manager = $this->createMock(ConfigManager::class);
     $config_manager->expects($this->exactly(2))
       ->method('loadConfigEntityByName')
       ->willReturn($module_field);

-    $entity_field_manager = $this->getMockBuilder(EntityFieldManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_field_manager = $this->createMock(EntityFieldManager::class);

-    $entity_type_bundle_info = $this->getMockBuilder(EntityTypeBundleInfo::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_bundle_info = $this->createMock(EntityTypeBundleInfo::class);

     $processor = new ListItemProcessor([], 'list_item', [], $config_manager, $entity_field_manager, $entity_type_bundle_info);
     $this->processor_plugin_manager->method('createInstance')
@@ @@
    * Tests facet build with field.module field.
    */
   public function testBuildBundle() {
-    $module_field = $this->getMockBuilder(FieldStorageConfig::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $module_field = $this->createMock(FieldStorageConfig::class);
     // Return cache field metadata.
     $module_field->expects($this->exactly(1))
       ->method('getCacheContexts')
@@ @@
       ->method('getCacheMaxAge')
       ->willReturn(54321);

-    $config_manager = $this->getMockBuilder(ConfigManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config_manager = $this->createMock(ConfigManager::class);
     $config_manager->expects($this->exactly(2))
       ->method('loadConfigEntityByName')
       ->willReturn($module_field);

-    $entity_field_manager = $this->getMockBuilder(EntityFieldManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_field_manager = $this->createMock(EntityFieldManager::class);

-    $entity_type_bundle_info = $this->getMockBuilder(EntityTypeBundleInfo::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_bundle_info = $this->createMock(EntityTypeBundleInfo::class);

     $processor = new ListItemProcessor([], 'list_item', [], $config_manager, $entity_field_manager, $entity_type_bundle_info);
     $this->processor_plugin_manager->method('createInstance')
@@ @@
    * Tests facet build with base props.
    */
   public function testBuildBaseField() {
-    $config_manager = $this->getMockBuilder(ConfigManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config_manager = $this->createMock(ConfigManager::class);

-    $base_field = $this->getMockBuilder(BaseFieldDefinition::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $base_field = $this->createMock(BaseFieldDefinition::class);
     // Return cache field metadata.
     $base_field->expects($this->exactly(1))
       ->method('getCacheContexts')
@@ @@
       ->method('getCacheMaxAge')
       ->willReturn(1235813);

-    $entity_field_manager = $this->getMockBuilder(EntityFieldManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_field_manager = $this->createMock(EntityFieldManager::class);
     $entity_field_manager->expects($this->any())
       ->method('getFieldDefinitions')
       ->with('node', '')
@@ @@
         'test_facet_baseprop' => $base_field,
       ]);

-    $entity_type_bundle_info = $this->getMockBuilder(EntityTypeBundleInfo::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_bundle_info = $this->createMock(EntityTypeBundleInfo::class);

     $processor = new ListItemProcessor([], 'list_item', [], $config_manager, $entity_field_manager, $entity_type_bundle_info);
     $this->processor_plugin_manager->method('createInstance')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/facets/tests/src/Unit/Plugin/processor/HideOnlyOneItemProcessorTest.php:25

    ---------- begin diff ----------
@@ @@
     $results = [
       new Result($facet, '1', 1, 1),
     ];
-    $facet = $this->getMockBuilder(Facet::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $facet = $this->createMock(Facet::class);
     $processed_results = $processor->build($facet, $results);
     $this->assertCount(0, $processed_results);
   }
@@ @@
       new Result($facet, '1', 1, 1),
     ];
     $results[0]->setActiveState(TRUE);
-    $facet = $this->getMockBuilder(Facet::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $facet = $this->createMock(Facet::class);
     $processed_results = $processor->build($facet, $results);
     $this->assertCount(1, $processed_results);
   }
@@ @@
       new Result($facet, '1', 1, 1),
       new Result($facet, '2', 2, 2),
     ];
-    $facet = $this->getMockBuilder(Facet::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $facet = $this->createMock(Facet::class);
     $processed_results = $processor->build($facet, $results);
     $this->assertCount(2, $processed_results);
   }
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/facets/tests/src/Unit/Plugin/processor/ExcludeSpecifiedItemsProcessorTest.php:67

    ---------- begin diff ----------
@@ @@
       ],
     ];

-    $manager = $this->getMockBuilder(ProcessorPluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $manager = $this->createMock(ProcessorPluginManager::class);
     $manager->expects($this->any())
       ->method('getDefinitions')
       ->willReturn($processor_definitions);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/facets/tests/src/Unit/Plugin/processor/DisplayValueWidgetOrderProcessorTest.php:45

    ---------- begin diff ----------
@@ @@
       new Result($facet, '2', '2', 22),
     ];

-    $transliteration = $this->getMockBuilder(TransliterationInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $transliteration = $this->createMock(TransliterationInterface::class);
     $transliteration
       ->expects($this->any())
       ->method('removeDiacritics')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/facets/tests/src/Unit/Plugin/processor/DependentFacetProcessorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\facets\Unit\Plugin\processor;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\Entity\ConfigEntityType;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
  */
 class DependentFacetProcessorTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * An array of results.
    *
@@ @@
       new Result($facet, 'barn_owl', 'Barn owl', 1),
     ];

-    $facet_entity_type = $this->getMockBuilder(ConfigEntityType::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $facet_entity_type = $this->createMock(ConfigEntityType::class);
     $facet_entity_type->method('getConfigPrefix')
       ->willReturn('facets.facet');

-    $entity_type_manager = $this->getMockBuilder(EntityTypeManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManager::class);
     $entity_type_manager->method('getDefinition')
       ->with('facets_facet')
       ->willReturn($facet_entity_type);

-    $processor_plugin_manager = $this->getMockBuilder(ProcessorPluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $processor_plugin_manager = $this->createMock(ProcessorPluginManager::class);
     $processor_plugin_manager->method('getDefinitions')
       ->willReturn([]);

-    $event_dispatcher = $this->getMockBuilder(EventDispatcher::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $event_dispatcher = $this->createMock(EventDispatcher::class);

     $container = new ContainerBuilder();
     $container->set('entity_type.manager', $entity_type_manager);
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/facets/tests/src/Unit/Plugin/processor/CountLimitProcessorTest.php:52

    ---------- begin diff ----------
@@ @@
       ],
     ];

-    $manager = $this->getMockBuilder(ProcessorPluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $manager = $this->createMock(ProcessorPluginManager::class);
     $manager->expects($this->any())
       ->method('getDefinitions')
       ->willReturn($processor_definitions);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


16) modules/contrib/facets/tests/src/Unit/FacetSource/FacetSourcePluginManagerTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $cache;

@@ @@
   /**
    * The plugin discovery.
    *
-   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $discovery;

@@ @@
   /**
    * The plugin factory.
    *
-   * @var \Drupal\Component\Plugin\Factory\DefaultFactory|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Factory\DefaultFactory|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $factory;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $moduleHandler;

@@ @@
   public function setUp(): void {
     $this->discovery = $this->createMock(DiscoveryInterface::class);

-    $this->factory = $this->getMockBuilder(DefaultFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->factory = $this->createMock(DefaultFactory::class);

     $this->moduleHandler = $this->createMock(ModuleHandlerInterface::class);
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/facets/tests/src/Kernel/Plugin/query_type/SearchApiDateTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\facets\Kernel\Plugin\query_type;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\facets\FacetInterface;
 use Drupal\facets\Result\ResultInterface;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
  */
 class SearchApiDateTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


18) modules/contrib/facets/tests/src/Kernel/FacetManager/DefaultFacetManagerTest.php:190

    ---------- begin diff ----------
@@ @@
    * @param array $expected_metadata
    *   The expected cache metadata for the given facet source.
    *
-   * @dataProvider testBuildCacheabilityMetadataProvider
+   * @dataProvider buildCacheabilityMetadataProvider
    */
   public function testBuildCacheabilityMetadata(string $facet_source_id, array $expected_metadata) {
     $facet = $this->createAndSaveFacet('mars', $facet_source_id);
@@ @@
    *
    * @see ::testBuildCacheabilityMetadata
    */
-  public function testBuildCacheabilityMetadataProvider() {
+  public function buildCacheabilityMetadataProvider() {
     $basic = [
       'contexts' => [
         // Facet API uses Request query params to populate active facets values.
    ----------- end diff -----------

Applied rules:
 * RemoveDataProviderTestPrefixRector (https://stackoverflow.com/a/46693675/1348344)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


19) modules/contrib/facets/tests/src/Unit/Widget/WidgetPluginManagerTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $cache;

@@ @@
   /**
    * The plugin discovery.
    *
-   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $discovery;

@@ @@
   /**
    * The plugin factory.
    *
-   * @var \Drupal\Component\Plugin\Factory\DefaultFactory|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Factory\DefaultFactory|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $factory;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $moduleHandler;

@@ @@
   /**
    * The translator interface.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $translator;

@@ @@
   public function setUp(): void {
     $this->discovery = $this->createMock(DiscoveryInterface::class);

-    $this->factory = $this->getMockBuilder(DefaultFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->factory = $this->createMock(DefaultFactory::class);

     $this->moduleHandler = $this->createMock(ModuleHandlerInterface::class);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


20) modules/contrib/facets/tests/src/Unit/Utility/FacetsUrlGeneratorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\facets\Unit\Utility;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\facets\UrlProcessor\UrlProcessorPluginManager;
@@ @@
  */
 class FacetsUrlGeneratorTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Tests that passing an invalid facet ID throws an InvalidArgumentException.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/facets/tests/src/Unit/UrlProcessor/UrlProcessorPluginManagerTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $cache;

@@ @@
   /**
    * The plugin discovery.
    *
-   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $discovery;

@@ @@
   /**
    * The plugin factory.
    *
-   * @var \Drupal\Component\Plugin\Factory\DefaultFactory|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Factory\DefaultFactory|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $factory;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $moduleHandler;

@@ @@
   /**
    * The translator interface.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $translator;

@@ @@
   public function setUp(): void {
     $this->discovery = $this->createMock(DiscoveryInterface::class);

-    $this->factory = $this->getMockBuilder(DefaultFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->factory = $this->createMock(DefaultFactory::class);

     $this->moduleHandler = $this->createMock(ModuleHandlerInterface::class);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


22) modules/contrib/facets/tests/src/Unit/QueryType/QueryTypePluginManagerTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $cache;

@@ @@
   /**
    * The plugin discovery.
    *
-   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $discovery;

@@ @@
   /**
    * The plugin factory.
    *
-   * @var \Drupal\Component\Plugin\Factory\DefaultFactory|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Factory\DefaultFactory|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $factory;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $moduleHandler;

@@ @@
   public function setUp(): void {
     $this->discovery = $this->createMock(DiscoveryInterface::class);

-    $this->factory = $this->getMockBuilder(DefaultFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->factory = $this->createMock(DefaultFactory::class);

     $this->moduleHandler = $this->createMock(ModuleHandlerInterface::class);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


23) modules/contrib/facets/tests/src/Unit/Processor/ProcessorPluginManagerTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $cache;

@@ @@
   /**
    * The plugin discovery.
    *
-   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $discovery;

@@ @@
   /**
    * The plugin factory.
    *
-   * @var \Drupal\Component\Plugin\Factory\DefaultFactory|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Factory\DefaultFactory|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $factory;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $moduleHandler;

@@ @@
   /**
    * The translator interface.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $translator;

@@ @@
   public function setUp(): void {
     $this->discovery = $this->createMock(DiscoveryInterface::class);

-    $this->factory = $this->getMockBuilder(DefaultFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->factory = $this->createMock(DefaultFactory::class);

     $this->moduleHandler = $this->createMock(ModuleHandlerInterface::class);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


24) modules/contrib/facets/tests/src/Unit/Plugin/widget/WidgetTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\facets\Unit\Plugin\widget;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\facets\Entity\Facet;
 use Drupal\facets\FacetInterface;
 use Drupal\facets\Result\Result;
@@ @@
  */
 abstract class WidgetTestBase extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The widget to be tested.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


25) modules/contrib/facets/tests/src/Unit/Plugin/widget/LinksWidgetTest.php:244

    ---------- begin diff ----------
@@ @@
    * Sets up a container.
    */
   protected function createContainer() {
-    $router = $this->getMockBuilder(TestRouterInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $router = $this->createMock(TestRouterInterface::class);
     $router->expects($this->any())
       ->method('matchRequest')
       ->willReturn([
@@ @@
         '_route' => 'test',
       ]);

-    $url_processor = $this->getMockBuilder(UrlProcessorInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url_processor = $this->createMock(UrlProcessorInterface::class);

-    $manager = $this->getMockBuilder(FacetSourcePluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $manager = $this->createMock(FacetSourcePluginManager::class);
     $manager->expects($this->exactly(1))
       ->method('createInstance')
       ->willReturn($url_processor);

     $storage = $this->createMock(EntityStorageInterface::class);
-    $em = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $em = $this->createMock(EntityTypeManagerInterface::class);
     $em->expects($this->exactly(1))
       ->method('getStorage')
       ->willReturn($storage);

-    $facets_url_generator = $this->getMockBuilder(FacetsUrlGenerator::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $facets_url_generator = $this->createMock(FacetsUrlGenerator::class);

     $container = new ContainerBuilder();
     $container->set('router.no_access_checks', $router);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


26) modules/contrib/facets/tests/src/Unit/Plugin/url_processor/QueryStringTest.php:114

    ---------- begin diff ----------
@@ @@
     $storage->expects($this->any())
       ->method('loadByProperties')
       ->willReturn([$facet]);
-    $entityTypeManager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
     $entityTypeManager->expects($this->any())
       ->method('getStorage')
       ->willReturn($storage);
@@ @@
     $storage->expects($this->atLeastOnce())
       ->method('loadByProperties')
       ->willReturnOnConsecutiveCalls([$facet], [$facet], []);
-    $entityTypeManager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
     $entityTypeManager->expects($this->any())
       ->method('getStorage')
       ->willReturn($storage);
@@ @@
     $storage->expects($this->atLeastOnce())
       ->method('loadByProperties')
       ->willReturnOnConsecutiveCalls([$facet2], [$facet2], [$facet2], [$facet2], [$facet2], [$facet2]);
-    $entityTypeManager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
     $entityTypeManager->expects($this->any())
       ->method('getStorage')
       ->willReturn($storage);
@@ @@
     $storage->expects($this->once())
       ->method('load')
       ->willReturn($facet_source);
-    $em = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $em = $this->createMock(EntityTypeManagerInterface::class);
     $em->expects($this->any())
       ->method('getStorage')
       ->willReturn($storage);
@@ @@
    */
   public function testContextualFilters() {
     // Override router.
-    $router = $this->getMockBuilder(TestRouterInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $router = $this->createMock(TestRouterInterface::class);
     $router->expects($this->any())
       ->method('matchRequest')
       ->willReturn([
@@ @@
    */
   public function testUnroutedPath() {
     // Override router.
-    $router = $this->getMockBuilder(TestRouterInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $router = $this->createMock(TestRouterInterface::class);
     $router->expects($this->any())
       ->method('matchRequest')
       ->willThrowException(new ResourceNotFoundException());
@@ @@

     $request = new Request();

-    $request_stack = $this->getMockBuilder(RequestStack::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $request_stack = $this->createMock(RequestStack::class);
     $request_stack->expects($this->any())
       ->method('getCurrentRequest')
       ->willReturn($request);
@@ @@
    * Sets up a container.
    */
   protected function setContainer() {
-    $router = $this->getMockBuilder(TestRouterInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $router = $this->createMock(TestRouterInterface::class);
     $router->expects($this->any())
       ->method('matchRequest')
       ->willReturn([
@@ @@

     $validator = $this->createMock(PathValidatorInterface::class);

-    $fsi = $this->getMockBuilder(FacetSourcePluginInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $fsi = $this->createMock(FacetSourcePluginInterface::class);
     $fsi->method('getPath')
       ->willReturn('/test');

-    $manager = $this->getMockBuilder(FacetSourcePluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $manager = $this->createMock(FacetSourcePluginManager::class);
     $manager->method('createInstance')
       ->willReturn($fsi);
     $manager->method('hasDefinition')
@@ @@
       ->with('facet_source__dummy')
       ->willReturn(TRUE);

-    $facetentity = $this->getMockBuilder(Facet::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $facetentity = $this->createMock(Facet::class);
     $facetentity->method('id')
       ->willReturn('king');

@@ @@
     $storage->expects($this->any())
       ->method('loadByProperties')
       ->willReturn([$facetentity]);
-    $em = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $em = $this->createMock(EntityTypeManagerInterface::class);
     $em->expects($this->any())
       ->method('getStorage')
       ->willReturn($storage);
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


27) modules/contrib/facets/tests/src/Unit/Plugin/query_type/SearchApiGranularTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\facets\Unit\Plugin\query_type;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\facets\Entity\Facet;
 use Drupal\facets\FacetInterface;
@@ @@
  */
 class SearchApiGranularTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


28) modules/contrib/facets/tests/src/Unit/Plugin/processor/UrlProcessorHandlerTest.php:97

    ---------- begin diff ----------
@@ @@
    * Sets up a container.
    */
   protected function createContainer() {
-    $url_processor = $this->getMockBuilder(UrlProcessorInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url_processor = $this->createMock(UrlProcessorInterface::class);

-    $manager = $this->getMockBuilder(FacetSourcePluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $manager = $this->createMock(FacetSourcePluginManager::class);
     $manager->expects($this->exactly(1))
       ->method('createInstance')
       ->willReturn($url_processor);

     $storage = $this->createMock(EntityStorageInterface::class);
-    $em = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $em = $this->createMock(EntityTypeManagerInterface::class);
     $em->expects($this->exactly(1))
       ->method('getStorage')
       ->willReturn($storage);
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


29) modules/contrib/facets/tests/src/Unit/Plugin/processor/TranslateEntityProcessorTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The mocked language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $languageManager;

@@ @@
   /**
    * The mocked entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityTypeManager;

@@ @@
     parent::setUp();

     // Mock language manager.
-    $this->languageManager = $this->getMockBuilder(LanguageManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->languageManager = $this->createMock(LanguageManagerInterface::class);
     $language = new Language(['langcode' => 'en']);
     $this->languageManager->expects($this->any())
       ->method('getCurrentLanguage')
@@ @@
       ->will($this->returnValue($language));

     // Mock entity type manager.
-    $this->entityTypeManager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);

     // Create and set a global container with the language manager and entity
     // type manager.
@@ @@
         ->willReturn([$property_definition]);

       // Create the actual facet.
-      $facet = $this->getMockBuilder(Facet::class)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $facet = $this->createMock(Facet::class);
       $facet->expects($this->any())
         ->method('getDataDefinition')
         ->willReturn($data_definition);
@@ @@
    */
   public function testNodeResultsChanged(FacetInterface $facet, array $results) {
     // Mock a node and add the label to it.
-    $node = $this->getMockBuilder(Node::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $node = $this->createMock(Node::class);
     $node->expects($this->any())
       ->method('label')
       ->willReturn('shaken not stirred');
@@ @@
    */
   public function testTermResultsChanged(FacetInterface $facet, array $results) {
     // Mock term.
-    $term = $this->getMockBuilder(Term::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $term = $this->createMock(Term::class);
     $term->expects($this->once())
       ->method('label')
       ->willReturn('Burrowing owl');
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


30) modules/contrib/facets/tests/src/Functional/ProcessorIntegrationTest.php:84

    ---------- begin diff ----------
@@ @@
     $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->checkboxChecked('edit-facet-settings-count-limit-status');
     $this->assertSession()->checkboxChecked('edit-facet-settings-hide-non-narrowing-result-processor-status');
-    $this->assertOptionSelected('edit-processors-count-limit-weights-build', 50);
-    $this->assertOptionSelected('edit-processors-hide-non-narrowing-result-processor-weights-build', 40);
+    $this->assertTrue($this->assertSession()->optionExists('edit-processors-count-limit-weights-build', 50)->hasAttribute('selected'));
+    $this->assertTrue($this->assertSession()->optionExists('edit-processors-hide-non-narrowing-result-processor-weights-build', 40)->hasAttribute('selected'));

     // Change the weight of one of the processors and test that the weight
     // change persisted.
@@ @@
     $this->submitForm($form, 'Save');
     $this->assertSession()->checkboxChecked('edit-facet-settings-count-limit-status');
     $this->assertSession()->checkboxChecked('edit-facet-settings-hide-non-narrowing-result-processor-status');
-    $this->assertOptionSelected('edit-processors-count-limit-weights-build', 50);
-    $this->assertOptionSelected('edit-processors-hide-non-narrowing-result-processor-weights-build', 5);
+    $this->assertTrue($this->assertSession()->optionExists('edit-processors-count-limit-weights-build', 50)->hasAttribute('selected'));
+    $this->assertTrue($this->assertSession()->optionExists('edit-processors-hide-non-narrowing-result-processor-weights-build', 5)->hasAttribute('selected'));
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertOptionSelectedRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/facets/tests/src/Functional/TestHelperTrait.php" file,
         due to:                                                                
         "System error: "Method buildXPathQuery() was not found in reflection of
         class Drupal\Tests\facets\Functional\TestHelperTrait."                 
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 411          

