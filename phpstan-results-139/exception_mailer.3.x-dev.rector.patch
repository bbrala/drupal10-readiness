diff --git a/exception_mailer.info.yml b/exception_mailer.info.yml
index 9c41103..f99bc4d 100644
--- a/exception_mailer.info.yml
+++ b/exception_mailer.info.yml
@@ -2,7 +2,6 @@ name: Error & Exception Mailer
 description: A basic module to send email when an error/exception occurs.
 package: Custom
 type: module
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 configure: exception_mailer.exception_mailer_config_form
 php: 7.0
diff --git a/src/Subscribers/ExceptionEventSubscriber.php b/src/Subscribers/ExceptionEventSubscriber.php
index 94b7526..35a0849 100644
--- a/src/Subscribers/ExceptionEventSubscriber.php
+++ b/src/Subscribers/ExceptionEventSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\exception_mailer\Subscribers;
 
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Core\Form\FormAjaxException;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Queue\QueueFactory;
@@ -11,7 +12,6 @@ use Drupal\Core\State\StateInterface;
 use Drupal\exception_mailer\ExceptionMailerExcludeManager;
 use Drupal\exception_mailer\Utility\UserRepository;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\Core\Config\ConfigFactory;
@@ -129,16 +129,16 @@ class ExceptionEventSubscriber implements EventSubscriberInterface {
   /**
    * Event handler.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *   The exception event.
    *
    * @throws \Drupal\Component\Plugin\Exception\PluginException
    */
-  public function onException(GetResponseForExceptionEvent $event) {
+  public function onException(ExceptionEvent $event) {
     $request = $event->getRequest();
 
     $config = $this->configFactory->get('exception_mailer.settings');
-    $exception = $event->getException();
+    $exception = $event->getThrowable();
     $queue = $this->queueFactory->get('manual_exception_email', TRUE);
     $queue_worker = $this->queueManager->createInstance('manual_exception_email');
     if (!$exception instanceof FormAjaxException && !$exception instanceof NotFoundHttpException) {
