diff --git a/modules/purge_processor_lateruntime/src/EventSubscriber/LateRuntimeProcessor.php b/modules/purge_processor_lateruntime/src/EventSubscriber/LateRuntimeProcessor.php
index d9af426..46f0aac 100644
--- a/modules/purge_processor_lateruntime/src/EventSubscriber/LateRuntimeProcessor.php
+++ b/modules/purge_processor_lateruntime/src/EventSubscriber/LateRuntimeProcessor.php
@@ -2,13 +2,13 @@
 
 namespace Drupal\purge_processor_lateruntime\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\TerminateEvent;
 use Drupal\purge\Plugin\Purge\Purger\Exception\CapacityException;
 use Drupal\purge\Plugin\Purge\Purger\Exception\DiagnosticsException;
 use Drupal\purge\Plugin\Purge\Purger\Exception\LockException;
 use Symfony\Component\DependencyInjection\ContainerAwareInterface;
 use Symfony\Component\DependencyInjection\ContainerAwareTrait;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\PostResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -73,10 +73,10 @@ class LateRuntimeProcessor implements EventSubscriberInterface, ContainerAwareIn
   /**
    * Invoked by the TERMINATE kernel event.
    *
-   * @param \Symfony\Component\HttpKernel\Event\PostResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\TerminateEvent $event
    *   The event object.
    */
-  public function onKernelTerminate(PostResponseEvent $event) {
+  public function onKernelTerminate(TerminateEvent $event) {
 
     // Immediately stop if our plugin is disabled.
     if (!$this->initialize()) {
diff --git a/modules/purge_queuer_coretags/tests/src/Unit/CacheTagsQueuerTest.php b/modules/purge_queuer_coretags/tests/src/Unit/CacheTagsQueuerTest.php
index 9170aef..b8453a9 100644
--- a/modules/purge_queuer_coretags/tests/src/Unit/CacheTagsQueuerTest.php
+++ b/modules/purge_queuer_coretags/tests/src/Unit/CacheTagsQueuerTest.php
@@ -30,7 +30,7 @@ class CacheTagsQueuerTest extends UnitTestCase {
   /**
    * The mocked config factory.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject|\Drupal\Core\Config\ConfigFactoryInterface
+   * @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\Core\Config\ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -44,21 +44,21 @@ class CacheTagsQueuerTest extends UnitTestCase {
   /**
    * The mocked queue service.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject|\Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface
+   * @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface
    */
   protected $purgeQueue;
 
   /**
    * The mocked queuers service.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject|\Drupal\purge\Plugin\Purge\Queuers\QueuersServiceInterface
+   * @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\purge\Plugin\Purge\Queuers\QueuersServiceInterface
    */
   protected $purgeQueuers;
 
   /**
    * The mocked invalidations factory.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject|\Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface
+   * @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\purge\Plugin\Purge\Invalidation\InvalidationsServiceInterface
    */
   protected $purgeInvalidationFactory;
 
@@ -66,8 +66,8 @@ class CacheTagsQueuerTest extends UnitTestCase {
    * {@inheritdoc}
    */
   protected function setUp(): void {
-    $this->purgeQueue = $this->getMockBuilder(QueueServiceInterface::class)->setMethods([])->getMock();
-    $this->purgeQueuers = $this->getMockBuilder(QueuersServiceInterface::class)->setMethods(['get'])->getMock();
+    $this->purgeQueue = $this->createMock(QueueServiceInterface::class);
+    $this->purgeQueuers = $this->createMock(QueuersServiceInterface::class);
     $this->purgeInvalidationFactory = $this->getMockForAbstractClass(InvalidationsServiceInterface::class);
 
     // Create a container with all dependent services in it.
@@ -109,7 +109,7 @@ class CacheTagsQueuerTest extends UnitTestCase {
       ->expects($this->once())
       ->method('get')
       ->with('coretags')
-      ->willReturn($this->getMockBuilder(QueuerBase::class)->disableOriginalConstructor()->getMock()
+      ->willReturn($this->createMock(QueuerBase::class)
     );
     // Assert how InvalidationsServiceInterface::get() is called.
     $invs_added_total = array_sum(array_map(
diff --git a/modules/purge_ui/tests/src/Functional/DashboardPurgersTest.php b/modules/purge_ui/tests/src/Functional/DashboardPurgersTest.php
index 8c472f6..61f4523 100644
--- a/modules/purge_ui/tests/src/Functional/DashboardPurgersTest.php
+++ b/modules/purge_ui/tests/src/Functional/DashboardPurgersTest.php
@@ -47,7 +47,7 @@ class DashboardPurgersTest extends DashboardTestBase {
     $this->assertSession()->linkByHrefExists(Url::fromRoute('purge_ui.purger_config_dialog_form', $purger_1_route_params)->toString());
     $this->assertSession()->linkByHrefExists(Url::fromRoute('purge_ui.purger_delete_form', $purger_1_route_params)->toString());
     // Assert that the purger-type supportability matrix shows the checkmarks.
-    $expected_checkmark_image_url = file_url_transform_relative(file_create_url('core/misc/icons/73b355/check.svg'));
+    $expected_checkmark_image_url = \Drupal::service('file_url_generator')->generateString('core/misc/icons/73b355/check.svg');
     $this->assertFalse(empty($this->cssSelect('img[width=18][height=18][alt=Supported][title=Supported][src="' . $expected_checkmark_image_url . '"]')));
     $this->assertSession()->responseNotContains('<img supports="drupal-domain"');
     $this->assertSession()->responseNotContains('<img supports="drupal-path"');
diff --git a/src/EventSubscriber/CacheableResponseSubscriber.php b/src/EventSubscriber/CacheableResponseSubscriber.php
index 12c85f7..d74e2d0 100644
--- a/src/EventSubscriber/CacheableResponseSubscriber.php
+++ b/src/EventSubscriber/CacheableResponseSubscriber.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\purge\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\purge\Plugin\Purge\TagsHeader\TagsHeadersServiceInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -41,10 +41,10 @@ class CacheableResponseSubscriber implements EventSubscriberInterface {
   /**
    * Add cache tags headers on cacheable responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
diff --git a/tests/src/Unit/FixGetConfigFactoryStubTrait.php b/tests/src/Unit/FixGetConfigFactoryStubTrait.php
index 4569813..415fd1a 100644
--- a/tests/src/Unit/FixGetConfigFactoryStubTrait.php
+++ b/tests/src/Unit/FixGetConfigFactoryStubTrait.php
@@ -30,17 +30,13 @@ trait FixGetConfigFactoryStubTrait {
       // Also allow to pass in no argument.
       $map[] = ['', $config_values];
 
-      $immutable_config_object = $this->getMockBuilder('Drupal\Core\Config\ImmutableConfig')
-        ->disableOriginalConstructor()
-        ->getMock();
+      $immutable_config_object = $this->createMock('Drupal\Core\Config\ImmutableConfig');
       $immutable_config_object->expects($this->any())
         ->method('get')
         ->will($this->returnValueMap($map));
       $config_get_map[] = [$config_name, $immutable_config_object];
 
-      $mutable_config_object = $this->getMockBuilder('Drupal\Core\Config\Config')
-        ->disableOriginalConstructor()
-        ->getMock();
+      $mutable_config_object = $this->createMock('Drupal\Core\Config\Config');
       $mutable_config_object->expects($this->any())
         ->method('get')
         ->will($this->returnValueMap($map));
diff --git a/tests/src/Unit/Logger/LoggerChannelPartFactoryTest.php b/tests/src/Unit/Logger/LoggerChannelPartFactoryTest.php
index f3c786a..75c210a 100644
--- a/tests/src/Unit/Logger/LoggerChannelPartFactoryTest.php
+++ b/tests/src/Unit/Logger/LoggerChannelPartFactoryTest.php
@@ -22,7 +22,7 @@ class LoggerChannelPartFactoryTest extends UnitTestCase {
   /**
    * The mocked logger channel.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject|\Psr\Log\LoggerInterface
+   * @var \PHPUnit\Framework\MockObject\MockObject|\Psr\Log\LoggerInterface
    */
   protected $loggerChannelPurge;
 
diff --git a/tests/src/Unit/Logger/LoggerChannelPartTest.php b/tests/src/Unit/Logger/LoggerChannelPartTest.php
index 76f77b6..8b68ba9 100644
--- a/tests/src/Unit/Logger/LoggerChannelPartTest.php
+++ b/tests/src/Unit/Logger/LoggerChannelPartTest.php
@@ -16,7 +16,7 @@ class LoggerChannelPartTest extends UnitTestCase {
   /**
    * The mocked logger channel.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject|\Psr\Log\LoggerInterface
+   * @var \PHPUnit\Framework\MockObject\MockObject|\Psr\Log\LoggerInterface
    */
   protected $loggerChannelPurge;
 
diff --git a/tests/src/Unit/Logger/LoggerServiceTest.php b/tests/src/Unit/Logger/LoggerServiceTest.php
index 8a88ebe..1d942c9 100644
--- a/tests/src/Unit/Logger/LoggerServiceTest.php
+++ b/tests/src/Unit/Logger/LoggerServiceTest.php
@@ -40,7 +40,7 @@ class LoggerServiceTest extends UnitTestCase {
   /**
    * The mocked channel part factory.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject|\Drupal\purge\Logger\LoggerChannelPartFactoryInterface
+   * @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\purge\Logger\LoggerChannelPartFactoryInterface
    */
   protected $loggerChannelPartFactory;
 
diff --git a/tests/src/Unit/Logger/PurgeLoggerAwareTraitTest.php b/tests/src/Unit/Logger/PurgeLoggerAwareTraitTest.php
index 7db8287..dd26683 100644
--- a/tests/src/Unit/Logger/PurgeLoggerAwareTraitTest.php
+++ b/tests/src/Unit/Logger/PurgeLoggerAwareTraitTest.php
@@ -14,7 +14,7 @@ class PurgeLoggerAwareTraitTest extends UnitTestCase {
   /**
    * The mocked logger.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject|\Psr\Log\LoggerInterface
+   * @var \PHPUnit\Framework\MockObject\MockObject|\Psr\Log\LoggerInterface
    */
   protected $logger;
 
