diff --git a/entity_router.info.yml b/entity_router.info.yml
index 55722e6..b8141a6 100644
--- a/entity_router.info.yml
+++ b/entity_router.info.yml
@@ -2,6 +2,5 @@ name: 'Entity Router'
 description: 'Lookup entities by their paths/redirects and convert to a given format.'
 package: 'Web services'
 type: module
-core: 8.x
 
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
diff --git a/src/Event/EntityResponseEvent.php b/src/Event/EntityResponseEvent.php
index 545402c..b830fa2 100644
--- a/src/Event/EntityResponseEvent.php
+++ b/src/Event/EntityResponseEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\entity_router\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
 
diff --git a/src/EventSubscriber.php b/src/EventSubscriber.php
index 5676071..cd066b2 100644
--- a/src/EventSubscriber.php
+++ b/src/EventSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_router;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Cache\CacheableResponseInterface;
@@ -10,7 +11,6 @@ use Drupal\entity_router\Response\EntityResponse;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -54,7 +54,7 @@ class EventSubscriber implements EventSubscriberInterface {
   /**
    * {@inheritdoc}
    */
-  public function onResponse(FilterResponseEvent $event): void {
+  public function onResponse(ResponseEvent $event): void {
     $response = $event->getResponse();
 
     if ($response instanceof EntityResponse) {
@@ -83,7 +83,7 @@ class EventSubscriber implements EventSubscriberInterface {
             );
         }
 
-        $this->eventDispatcher->dispatch(EntityResponseEvent::NAME, new EntityResponseEvent($request, $response, $entity));
+        $this->eventDispatcher->dispatch(new EntityResponseEvent($request, $response, $entity), EntityResponseEvent::NAME);
       }
       catch (PluginException $e) {
         $status = 400;
