modules/contrib/tupas/modules/tupas_registration/src/Controller/RegistrationController.php
modules/contrib/tupas/modules/tupas_registration/tests/src/Functional/TupasRegistrationFunctionalTest.php
modules/contrib/tupas/modules/tupas_session/src/Form/SettingsForm.php
modules/contrib/tupas/modules/tupas_session/tupas_session.module
modules/contrib/tupas/src/Entity/TupasBank.php
modules/contrib/tupas/modules/tupas_session/src/TupasSessionManager.php
modules/contrib/tupas/src/Entity/TupasBankInterface.php
modules/contrib/tupas/src/Form/TupasBankDeleteForm.php
modules/contrib/tupas/src/Form/TupasBankForm.php
modules/contrib/tupas/modules/tupas_session/src/TupasSessionManagerInterface.php
modules/contrib/tupas/modules/tupas_session/src/TupasSessionStorage.php
modules/contrib/tupas/modules/tupas_registration/src/EventSubscriber/TupasRegistrationExternalAuthSubscriber.php
modules/contrib/tupas/modules/tupas_registration/src/EventSubscriber/TupasRegistrationRedirectSubscriber.php
modules/contrib/tupas/src/Form/TupasFormBase.php
modules/contrib/tupas/modules/tupas_registration/src/Form/MapTupasConfirmForm.php
modules/contrib/tupas/modules/tupas_registration/tests/src/Kernel/TupasRegistrationTest.php
modules/contrib/tupas/src/Form/TupasSettingsForm.php
modules/contrib/tupas/src/TupasBankHtmlRouteProvider.php
modules/contrib/tupas/modules/tupas_session/src/TupasSessionStorageInterface.php
modules/contrib/tupas/modules/tupas_registration/src/Form/RegisterForm.php
modules/contrib/tupas/modules/tupas_session/src/TupasTransactionManager.php
modules/contrib/tupas/modules/tupas_session/src/TupasTransactionManagerInterface.php
modules/contrib/tupas/modules/tupas_session/tests/modules/tupas_session_test/src/Controller/DefaultController.php
modules/contrib/tupas/modules/tupas_session/tests/modules/tupas_session_test/src/Routing/RouteSubscriber.php
modules/contrib/tupas/src/TupasBankListBuilder.php
modules/contrib/tupas/modules/tupas_session/tests/src/Functional/TupasSessionFunctionalBase.php
modules/contrib/tupas/src/TupasBankStorage.php
modules/contrib/tupas/tests/src/Unit/TupasBankTest.php
modules/contrib/tupas/modules/tupas_registration/src/Form/SettingsForm.php
modules/contrib/tupas/modules/tupas_registration/src/UniqueUsername.php
modules/contrib/tupas/modules/tupas_registration/tests/src/Unit/UniqueUsernameTest.php
modules/contrib/tupas/modules/tupas_registration/src/UniqueUsernameInterface.php
modules/contrib/tupas/modules/tupas_registration/tupas_registration.module
modules/contrib/tupas/modules/tupas_session/src/Access/TupasSessionAccess.php
modules/contrib/tupas/modules/tupas_session/src/Controller/SessionController.php
modules/contrib/tupas/modules/tupas_session/tests/src/Functional/TupasSessionFunctionalTest.php
modules/contrib/tupas/modules/tupas_session/tests/src/Kernel/TupasSessionTest.php
modules/contrib/tupas/modules/tupas_session/src/Event/CustomerIdAlterEvent.php
modules/contrib/tupas/modules/tupas_session/src/Event/RedirectAlterEvent.php
modules/contrib/tupas/modules/tupas_session/src/Event/SessionAuthenticationEvent.php
modules/contrib/tupas/modules/tupas_session/src/Event/SessionData.php
modules/contrib/tupas/modules/tupas_session/src/Event/SessionEvents.php
modules/contrib/tupas/modules/tupas_session/src/EventSubscriber/TupasSessionEventSubscriber.php
modules/contrib/tupas/modules/tupas_session/tests/src/Unit/TupasSessionManagerTest.php
modules/contrib/tupas/modules/tupas_session/tests/src/Unit/TupasSessionStorageTest.php
modules/contrib/tupas/modules/tupas_session/tests/src/Unit/TupasTransactionManagerTest.php
modules/contrib/tupas/modules/tupas_session/tupas_session.install

15 files with changes
=====================

1) modules/contrib/tupas/tests/src/Unit/TupasBankTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The mocked Tupas Bank entity.
    *
-   * @var \Drupal\tupas\Entity\TupasBankInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\tupas\Entity\TupasBankInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $bank;
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/tupas/modules/tupas_registration/src/Controller/RegistrationController.php:155

    ---------- begin diff ----------
@@ @@
     if ($account = $this->sessionManager->loginRegister($this->auth)) {
       // Save user details.
       $account->setUsername($name)
-        ->setPassword(user_password(20));
+        ->setPassword(\Drupal::service('password_generator')->generate(20));
       $account->save();
     }
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/tupas/modules/tupas_session/src/EventSubscriber/TupasSessionEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tupas_session\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Session\AccountProxyInterface;
@@ @@
 use Drupal\tupas_session\TupasSessionManagerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * This method is called whenever the kernel.request event is dispatched.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   Event to dispatch.
    */
-  public function handleTupasSession(GetResponseEvent $event) {
+  public function handleTupasSession(RequestEvent $event) {
     // User has access to bypass session expiration. Do nothing.
     if ($this->currentUser->hasPermission('bypass tupas session expiration')) {
       return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


4) modules/contrib/tupas/modules/tupas_session/src/Event/SessionData.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tupas_session\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Class SessionData.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/tupas/modules/tupas_session/src/Event/SessionAuthenticationEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tupas_session\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Session\AccountInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Class SessionAuthenticationEvent.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/tupas/modules/tupas_session/src/Event/RedirectAlterEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tupas_session\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Class RedirectAlterEvent.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/tupas/modules/tupas_session/src/Event/CustomerIdAlterEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tupas_session\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Class CustomerIdAlterEvent.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/tupas/modules/tupas_session/src/Controller/SessionController.php:184

    ---------- begin diff ----------
@@ @@
       // Allow customer id to be altered.
       /** @var \Drupal\tupas_session\Event\CustomerIdAlterEvent $dispatched_data */
       $dispatched_data = $this->eventDispatcher
-        ->dispatch(SessionEvents::CUSTOMER_ID_ALTER, new CustomerIdAlterEvent($hashed_id, [
+        ->dispatch(new CustomerIdAlterEvent($hashed_id, [
           'raw' => $request->query->all(),
-        ]));
+        ]),
+        SessionEvents::CUSTOMER_ID_ALTER);
       // Name will be sent Latin1 encoded and urlencoded.
       $name = Unicode::convertToUtf8(urldecode($request->query->get('B02K_CUSTNAME')), 'ISO-8859-1');
       // Start tupas session.
@@ @@
       // Allow redirect path to be customized.
       $redirect_data = new RedirectAlterEvent('<front>', $request->query->all(), $this->t('TUPAS authentication succesful.'));
       /** @var \Drupal\tupas_session\Event\RedirectAlterEvent $redirect */
-      $redirect = $this->eventDispatcher->dispatch(SessionEvents::REDIRECT_ALTER, $redirect_data);
+      $redirect = $this->eventDispatcher->dispatch($redirect_data, SessionEvents::REDIRECT_ALTER);

       // Show message only if message is set.
       if ($message = $redirect->getMessage()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/tupas/modules/tupas_registration/tests/src/Unit/UniqueUsernameTest.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The mocked entity storage.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var \PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityStorage;

@@ @@
   /**
    * The mocked entity manager.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var \PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityManager;

@@ @@
   protected function setUp() : void {
     parent::setUp();

-    $this->entityManager = $this->getMockBuilder('\Drupal\Core\Entity\EntityTypeManagerInterface')
-      ->getMock();
+    $this->entityManager = $this->createMock('\Drupal\Core\Entity\EntityTypeManagerInterface');

-    $this->entityStorage = $this->getMockBuilder('Drupal\Core\Entity\EntityStorageInterface')
-      ->getMock();
+    $this->entityStorage = $this->createMock('Drupal\Core\Entity\EntityStorageInterface');
     $this->entityManager->expects($this->any())
       ->method('getStorage')
       ->will($this->returnValue($this->entityStorage));
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/tupas/modules/tupas_registration/tests/src/Functional/TupasRegistrationFunctionalTest.php:69

    ---------- begin diff ----------
@@ @@
     // Fill registration form.
     $this->getSession()->getPage()->fillField('name', 'Testaccount');
     $this->getSession()->getPage()->fillField('mail', 'test@example.com');
-    $this->drupalPostForm(NULL, [], 'Create new account');
+    $this->submitForm([], 'Create new account');
     $this->assertSession()->pageTextContains('Registration successful. You are now logged in.');
     $this->assertSession()->addressEquals('/user/3');

@@ @@
     // Make sure username is hidden.
     $this->assertSession()->fieldNotExists('name');
     $this->getSession()->getPage()->fillField('mail', 'test123@example.com');
-    $this->drupalPostForm(NULL, [], 'Create new account');
+    $this->submitForm([], 'Create new account');
     $this->assertSession()->pageTextContains('Registration successful. You are now logged in.');
     $this->assertSession()->addressEquals('/user/4');
     // Make sure user has same username as the one provided by
@@ @@
     $this->loginUsingTupas();

     $this->assertSession()->addressEquals('/user/tupas/register');
-    $this->drupalPostForm(NULL, [], 'Confirm');
+    $this->submitForm([], 'Confirm');
     $this->assertSession()->pageTextContains('Account connected succesfully.');

     // Log current user out and test that user can log with previously
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/tupas/modules/tupas_session/tests/src/Unit/TupasTransactionManagerTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The mocked tupas session storage.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var \PHPUnit\Framework\MockObject\MockObject
    */
   protected $storage;

@@ @@
   /**
    * The mocked session manager.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var \PHPUnit\Framework\MockObject\MockObject
    */
   protected $sessionManager;

@@ @@
   /**
    * Temp store factory.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var \PHPUnit\Framework\MockObject\MockObject
    */
   protected $storageFactory;

@@ @@
   protected function setUp() : void {
     parent::setUp();

-    $this->storage = $this->getMockBuilder(PrivateTempStore::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->storage = $this->createMock(PrivateTempStore::class);

-    $this->storageFactory = $this->getMockBuilder(PrivateTempStoreFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->storageFactory = $this->createMock(PrivateTempStoreFactory::class);

     $this->storageFactory->expects($this->any())
       ->method('get')
@@ @@
       ->with('tupas_session')
       ->willReturn($this->storage);

-    $this->sessionManager = $this->getMockBuilder(SessionManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->sessionManager = $this->createMock(SessionManagerInterface::class);

     $this->transactionManager = new TupasTransactionManager($this->sessionManager, $this->storageFactory);
   }
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/tupas/modules/tupas_session/tests/src/Unit/TupasSessionStorageTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The mocked database connection.
    *
-   * @var \Drupal\Core\Database\Connection|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Database\Connection|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $connection;

@@ @@
   /**
    * Mock statement.
    *
-   * @var \Drupal\Core\Database\Statement|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Database\Statement|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $statement;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Session\AccountProxyInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $currentUser;

@@ @@
   protected function setUp() : void {
     parent::setUp();

-    $this->connection = $this->getMockBuilder('Drupal\Core\Database\Connection')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->connection = $this->createMock('Drupal\Core\Database\Connection');

     // Create a Mock Statement object.
-    $this->statement = $this->getMockBuilder('Drupal\Core\Database\Driver\sqlite\Statement')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->statement = $this->createMock('Drupal\Core\Database\Driver\sqlite\Statement');

     // Create a Mock Select object and set expectations.
-    $this->select = $this->getMockBuilder('Drupal\Core\Database\Query\Select')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->select = $this->createMock('Drupal\Core\Database\Query\Select');

     $this->select->expects($this->any())
       ->method('fields')
@@ @@
       ->will($this->returnValue($this->select));

     // Create a Mock Delete object and set expectations.
-    $this->delete = $this->getMockBuilder('Drupal\Core\Database\Query\Delete')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->delete = $this->createMock('Drupal\Core\Database\Query\Delete');

     $this->delete->expects($this->any())
       ->method('condition')
@@ @@
     $request = Request::createFromGlobals();
     $this->requestStack->push($request);

-    $this->currentUser = $this->getMockBuilder('Drupal\Core\Session\AccountProxyInterface')
-      ->getMock();
+    $this->currentUser = $this->createMock('Drupal\Core\Session\AccountProxyInterface');
     $this->currentUser->expects($this->any())
       ->method('id')
       ->willReturn(1);
@@ @@
     $data = [];
     $session = new SessionData(random_int(123456, 234567), $this->randomMachineName(), $expire, $data);

-    $merge = $this->getMockBuilder('Drupal\Core\Database\Query\Merge')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $merge = $this->createMock('Drupal\Core\Database\Query\Merge');

     $merge->expects($this->any())
       ->method('keys')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/tupas/modules/tupas_session/tests/src/Unit/TupasSessionManagerTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The stubbed config factory object.
    *
-   * @var \PHPUnit_Framework_MockObject_MockBuilder
+   * @var \PHPUnit\Framework\MockObject\MockBuilder
    */
   protected $configFactory;

@@ @@
   /**
    * The mocked tupas session storage.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var \PHPUnit\Framework\MockObject\MockObject
    */
   protected $storage;

@@ @@
   /**
    * The mocked session manager.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var \PHPUnit\Framework\MockObject\MockObject
    */
   protected $sessionManager;

@@ @@
   /**
    * The mocked event dispatcher.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var \PHPUnit\Framework\MockObject\MockObject
    */
   protected $eventDispatcher;

@@ @@
         'tupas_session_length' => 30,
       ],
     ]);
-    $this->storage = $this->getMockBuilder(TupasSessionStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->storage = $this->createMock(TupasSessionStorageInterface::class);

-    $this->sessionManager = $this->getMockBuilder(SessionManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->sessionManager = $this->createMock(SessionManagerInterface::class);

-    $this->eventDispatcher = $this->getMockBuilder(EventDispatcherInterface::class)
-      ->getMock();
+    $this->eventDispatcher = $this->createMock(EventDispatcherInterface::class);

     $this->session = new SessionData(123456, $this->randomMachineName(), time(), []);

-    $dispatched_event = $this->getMockBuilder(SessionData::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dispatched_event = $this->createMock(SessionData::class);

-    $this->time = $this->getMockBuilder(TimeInterface::class)
-      ->getMock();
+    $this->time = $this->createMock(TimeInterface::class);

     $this->eventDispatcher->expects($this->any())
       ->method('dispatch')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/tupas/modules/tupas_session/tests/src/Kernel/TupasSessionTest.php:69

    ---------- begin diff ----------
@@ @@
   public function testExpirableSessionStart() {
     $timestamp = time();

-    $time = $this->getMockBuilder(TimeInterface::class)
-      ->getMock();
+    $time = $this->createMock(TimeInterface::class);
     $time
       ->expects($this->at(0))
       ->method('getRequestTime')
@@ @@
   public function testGarbageCollection() {
     $timestamp = time();

-    $time = $this->getMockBuilder(TimeInterface::class)
-      ->getMock();
+    $time = $this->createMock(TimeInterface::class);
     $time
       ->expects($this->at(0))
       ->method('getRequestTime')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/tupas/modules/tupas_session/src/TupasSessionManager.php:142

    ---------- begin diff ----------
@@ @@
     // Allow session data to be altered.
     $session_data = new SessionData($transaction_id, $unique_id, $this->getTime(), $data);
     /** @var \Drupal\tupas_session\Event\SessionData $session */
-    $session = $this->eventDispatcher->dispatch(SessionEvents::SESSION_ALTER, $session_data);
+    $session = $this->eventDispatcher->dispatch($session_data, SessionEvents::SESSION_ALTER);

     return $this->storage->save($session);
   }
@@ @@
     }
     $this->recreate($session);

-    $this->eventDispatcher->dispatch(SessionEvents::SESSION_LOGIN, new SessionAuthenticationEvent($account, $session));
+    $this->eventDispatcher->dispatch(new SessionAuthenticationEvent($account, $session), SessionEvents::SESSION_LOGIN);

     return $account;
   }
@@ @@
     $auth->linkExistingAccount($session->getUniqueId(), 'tupas_registration', $account);
     $this->recreate($session);

-    $this->eventDispatcher->dispatch(SessionEvents::SESSION_REGISTER, new SessionAuthenticationEvent($account, $session));
+    $this->eventDispatcher->dispatch(new SessionAuthenticationEvent($account, $session), SessionEvents::SESSION_REGISTER);

     return $account;
   }
@@ @@
     }
     $this->recreate($session);

-    $this->eventDispatcher->dispatch(SessionEvents::SESSION_REGISTER, new SessionAuthenticationEvent($account, $session));
+    $this->eventDispatcher->dispatch(new SessionAuthenticationEvent($account, $session), SessionEvents::SESSION_REGISTER);

     return $account;
   }
@@ @@
    */
   public function destroy() {
     if ($session_data = $this->getSession()) {
-      $this->eventDispatcher->dispatch(SessionEvents::SESSION_LOGOUT, $session_data);
+      $this->eventDispatcher->dispatch($session_data, SessionEvents::SESSION_LOGOUT);
     }
     return $this->storage->delete();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


 [OK] 15 files have been changed by Rector                                      

