modules/contrib/micro_theme/micro_theme.api.php
modules/contrib/micro_theme/micro_theme.module
modules/contrib/micro_theme/src/Access/MicroThemeAccess.php
modules/contrib/micro_theme/src/Form/MicroThemeFormSettings.php
modules/contrib/micro_theme/src/MicroAssetFileStorage.php
modules/contrib/micro_theme/src/MicroCssFileStorage.php
modules/contrib/micro_theme/src/MicroLibrariesService.php
modules/contrib/micro_theme/src/MicroLibrariesServiceInterface.php
modules/contrib/micro_theme/src/MicroManagerAsset.php
modules/contrib/micro_theme/src/MicroManagerAssetInterface.php
modules/contrib/micro_theme/src/Theme/MicroThemeNegotiator.php
modules/contrib/micro_theme/tests/src/Functional/LoadTest.php

3 files with changes
====================

1) modules/contrib/micro_theme/tests/src/Functional/LoadTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/micro_theme/src/MicroLibrariesService.php:184

    ---------- begin diff ----------
@@ @@
    * @return mixed
    */
   public function getDefaultColors() {
-    $yaml_default_color_path = \Drupal::root() . '/' . drupal_get_path('module', 'micro_theme') . '/micro_theme.default_color.yml';
+    $yaml_default_color_path = \Drupal::root() . '/' . \Drupal::service('extension.list.module')->getPath('micro_theme') . '/micro_theme.default_color.yml';
     $file_content = file_get_contents($yaml_default_color_path);
     $yaml_default_color = Yaml::decode($file_content);
     $this->moduleHandler->alter('micro_theme_default_color', $yaml_default_color);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector


3) modules/contrib/micro_theme/src/Form/MicroThemeFormSettings.php:183

    ---------- begin diff ----------
@@ @@
       '#description' => $this->t('You could select below some fonts available on <a href="@url" target="_blank">Google Font</a>', ['@url' => 'https://fonts.google.com/'])
     ];

-    $example_file_fonts = drupal_get_path('module', 'micro_theme') . '/css/example_fonts.css';
+    $example_file_fonts = \Drupal::service('extension.list.module')->getPath('micro_theme') . '/css/example_fonts.css';
     $form['font']['file_font'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Fonts file css'),
@@ @@
       '#default_value' => $this->settings['color']['override_color'],
     ];

-    $example_file_colors = drupal_get_path('module', 'micro_theme') . '/css/example_colors.css';
+    $example_file_colors = \Drupal::service('extension.list.module')->getPath('micro_theme') . '/css/example_colors.css';
     $form['color']['file_color'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Colors file css'),
@@ @@
     $config = $this->config('system.theme');
     $default_theme = $this->config('system.theme')->get('default');
     $path = theme_get_setting('logo.path', $default_theme);
-    $logo_path = file_create_url(theme_get_setting('logo.path', $default_theme));
-    $relative_logo_path = file_url_transform_relative($logo_path);
+    $logo_path = \Drupal::service('file_url_generator')->generateAbsoluteString(theme_get_setting('logo.path', $default_theme));
+    $relative_logo_path = \Drupal::service('file_url_generator')->transformRelative($logo_path);
     return  $relative_logo_path;
   }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

