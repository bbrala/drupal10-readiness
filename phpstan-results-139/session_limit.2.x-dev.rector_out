modules/contrib/session_limit/session_limit.install
modules/contrib/session_limit/session_limit.module
modules/contrib/session_limit/src/Event/SessionLimitBypassEvent.php
modules/contrib/session_limit/src/Event/SessionLimitCollisionEvent.php
modules/contrib/session_limit/src/Event/SessionLimitDisconnectEvent.php
modules/contrib/session_limit/src/Form/SessionLimitForm.php
modules/contrib/session_limit/src/Form/SettingsForm.php
modules/contrib/session_limit/src/Services/SessionLimit.php
modules/contrib/session_limit/tests/SessionLimitBaseTestCase.php
modules/contrib/session_limit/tests/SessionLimitLogoutTestCase.php
modules/contrib/session_limit/tests/SessionLimitPreventTestCase.php
modules/contrib/session_limit/tests/SessionLimitSessionTestCase.php

4 files with changes
====================

1) modules/contrib/session_limit/src/Services/SessionLimit.php:169

    ---------- begin diff ----------
@@ @@
     /** @var SessionLimitBypassEvent $bypassEvent */
     $bypassEvent = $this
       ->getEventDispatcher()
-      ->dispatch('session_limit.bypass', new SessionLimitBypassEvent());
+      ->dispatch(new SessionLimitBypassEvent(), 'session_limit.bypass');

     // Check the result of the event to see if we should bypass.
     if ($bypassEvent->shouldBypass()) {
@@ @@

       $this
         ->getEventDispatcher()
-        ->dispatch('session_limit.collision', $collisionEvent);
+        ->dispatch($collisionEvent, 'session_limit.collision');
     }
     else {
       // force checking this twice as there's a race condition around
@@ @@
     /** @var SessionLimitDisconnectEvent $disconnectEvent */
     $disconnectEvent = $this
       ->getEventDispatcher()
-      ->dispatch('session_limit.disconnect', new SessionLimitDisconnectEvent($event->getSessionId(), $event, $this->getMessage($event->getAccount())));
+      ->dispatch(new SessionLimitDisconnectEvent($event->getSessionId(), $event, $this->getMessage($event->getAccount())), 'session_limit.disconnect');

     if (!$disconnectEvent->shouldPreventDisconnect()) {
       $this->sessionActiveDisconnect($disconnectEvent->getMessage());
@@ @@
         /** @var SessionLimitDisconnectEvent $disconnectEvent */
         $disconnectEvent = $this
           ->getEventDispatcher()
-          ->dispatch('session_limit.disconnect', new SessionLimitDisconnectEvent($event->getSessionId(), $event, $this->getMessage($event->getAccount())));
+          ->dispatch(new SessionLimitDisconnectEvent($event->getSessionId(), $event, $this->getMessage($event->getAccount())), 'session_limit.disconnect');

         if (!$disconnectEvent->shouldPreventDisconnect()) {
           $this->sessionDisconnect($session->sid, $disconnectEvent->getMessage());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


2) modules/contrib/session_limit/src/Event/SessionLimitDisconnectEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\session_limit\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Session\AccountInterface;

 class SessionLimitDisconnectEvent extends Event {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/session_limit/src/Event/SessionLimitCollisionEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\session_limit\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Session\AccountInterface;

 class SessionLimitCollisionEvent extends Event {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/session_limit/src/Event/SessionLimitBypassEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\session_limit\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 class SessionLimitBypassEvent extends Event {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/session_limit/tests/SessionLimitBaseTestCase.php"     
         file, due to:                                                          
         "System error: "Method assertText() was not found in reflection of     
         class Drupal\session_limit\SessionLimitBaseTestCase."                  
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 411          

 [ERROR] Could not process                                                      
         "modules/contrib/session_limit/tests/SessionLimitSessionTestCase.php"  
         file, due to:                                                          
         "System error: "Method assertText() was not found in reflection of     
         class Drupal\session_limit\SessionLimitSessionTestCase."               
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 411          

