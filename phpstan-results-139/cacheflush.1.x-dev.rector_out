modules/contrib/cacheflush/cacheflush.module
modules/contrib/cacheflush/modules/cacheflush_entity/cacheflush_entity.module
modules/contrib/cacheflush/modules/cacheflush_advanced/cacheflush_advanced.module
modules/contrib/cacheflush/modules/cacheflush_ui/src/CacheflushEntityAccessControlHandler.php
modules/contrib/cacheflush/modules/cacheflush_entity/src/CacheflushEntityInterface.php
modules/contrib/cacheflush/modules/cacheflush_entity/src/Entity/CacheflushEntity.php
modules/contrib/cacheflush/modules/cacheflush_ui/src/CacheflushEntityListBuilder.php
modules/contrib/cacheflush/modules/cacheflush_advanced/tests/src/Functional/CacheFlushAdvancedTest.php
modules/contrib/cacheflush/modules/cacheflush_ui/src/CacheflushUIConstantsInterface.php
modules/contrib/cacheflush/modules/cacheflush_ui/src/Entity/CacheflushEntityViewsData.php
modules/contrib/cacheflush/modules/cacheflush_ui/src/Entity/Form/CacheflushEntityDeleteForm.php
modules/contrib/cacheflush/modules/cacheflush_entity/tests/Functional/CacheFlushEntityTest.php
modules/contrib/cacheflush/modules/cacheflush_ui/src/Entity/Form/CacheflushEntityForm.php
modules/contrib/cacheflush/modules/cacheflush_ui/cacheflush_ui.module
modules/contrib/cacheflush/modules/cacheflush_ui/src/Entity/Form/CacheflushEntitySettingsForm.php
modules/contrib/cacheflush/modules/cacheflush_ui/src/Form/CacheflushDeleteMultiple.php
modules/contrib/cacheflush/modules/cacheflush_cron/cacheflush_cron.module
modules/contrib/cacheflush/modules/cacheflush_cron/tests/src/Functional/CacheFlushCronUI.php
modules/contrib/cacheflush/modules/cacheflush_ui/src/Plugin/Action/AddMenuCacheflush.php
modules/contrib/cacheflush/modules/cacheflush_ui/src/Plugin/Action/DeleteCacheflush.php
modules/contrib/cacheflush/modules/cacheflush_drush/cacheflush_drush.drush.inc
modules/contrib/cacheflush/modules/cacheflush_drush/cacheflush_drush.module
modules/contrib/cacheflush/modules/cacheflush_entity/cacheflush_entity.install
modules/contrib/cacheflush/modules/cacheflush_ui/src/Plugin/Action/PublishCacheflush.php
modules/contrib/cacheflush/modules/cacheflush_ui/src/Plugin/Action/RemoveMenuCacheflush.php
modules/contrib/cacheflush/modules/cacheflush_ui/src/Plugin/Action/UnpublishCacheflush.php
modules/contrib/cacheflush/modules/cacheflush_ui/src/Plugin/views/field/CacheflushBulkForm.php
modules/contrib/cacheflush/modules/cacheflush_ui/src/Routing/CacheflushRouteSubscriber.php
modules/contrib/cacheflush/modules/cacheflush_ui/tests/src/Functional/CacheFlushUICRUD.php
modules/contrib/cacheflush/modules/cacheflush_ui/tests/src/Functional/CacheFlushUICRUDAccessTest.php
modules/contrib/cacheflush/src/Controller/CacheflushApi.php
modules/contrib/cacheflush/tests/src/Functional/CacheFlushTest.php
modules/contrib/cacheflush/tests/src/Functional/LoadTest.php

8 files with changes
====================

1) modules/contrib/cacheflush/modules/cacheflush_entity/tests/Functional/CacheFlushEntityTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * Sets up the test.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->createUser();
   }
@@ @@
     $entity->save();

     $entities = array_values(cacheflush_load_multiple_by_properties(['title' => 'test']));
-    $this->assertEqual($entities[0]->getTitle(), 'test', 'Created and loaded entity.');
-    $this->assertEqual($entities[1]->getTitle(), 'test', 'Created and loaded entity.');
+    $this->assertEquals($entities[0]->getTitle(), 'test', 'Created and loaded entity.');
+    $this->assertEquals($entities[1]->getTitle(), 'test', 'Created and loaded entity.');

     $loaded = cacheflush_load($entity->id());
-    $this->assertEqual($loaded->id(), $entity->id(), 'Loaded the entity unrelated to a user.');
+    $this->assertEquals($loaded->id(), $entity->id(), 'Loaded the entity unrelated to a user.');

     $entities = array_values(cacheflush_load_multiple_by_properties(['title' => 'test2']));
     cacheflush_delete($entities[0]->id());

     $entities = array_values(cacheflush_load_multiple_by_properties(['title' => 'test2']));
-    $this->assertEqual($entities, [], 'Entity successfully deleted.');
+    $this->assertEquals($entities, [], 'Entity successfully deleted.');

     $entity->save();
-    $this->assertEqual($entity->id(), $loaded->id(), 'Entity successfully updated.');
+    $this->assertEquals($entity->id(), $loaded->id(), 'Entity successfully updated.');

     // Try deleting multiple test entities by deleting all.
     $ids = array_keys(cacheflush_load_multiple());
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/cacheflush/modules/cacheflush_cron/tests/src/Functional/CacheFlushCronUI.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * Sets up the test.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $user = $this->drupalCreateUser(self::$roles);
     $this->drupalLogin($user);
@@ @@
    */
   public function addForm() {
     $this->drupalGet('admin/structure/cacheflush/add');
-    $this->assertResponse(200);
-    $this->assertFieldByName('cron');
-    $this->assertRaw(t('Enable cron job for this preset.'));
-    $this->assertNoLink(t('EDIT'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldExists('cron');
+    $this->assertSession()->responseContains(t('Enable cron job for this preset.'));
+    $this->assertSession()->linkNotExists(t('EDIT'));
   }

   /**
@@ @@
    */
   public function editForm() {
     $this->drupalGet('admin/structure/cacheflush/add');
-    $this->assertResponse(200);
-    $this->assertRaw(t('Enable cron job for this preset.'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseContains(t('Enable cron job for this preset.'));

     // Test Entity create.
     $data = [
@@ @@
       'title' => 'NewEntityTitle',
       'cron' => 1,
     ];
-    $this->drupalPostForm('admin/structure/cacheflush/add', $data, t('Save'));
+    $this->drupalGet('admin/structure/cacheflush/add');
+    $this->submitForm($data, t('Save'));
     $entities = array_values(cacheflush_load_multiple_by_properties(['title' => 'NewEntityTitle']));

-    $this->assertEqual($entities[0]->getTitle(), 'NewEntityTitle', 'Entity successfully created.');
+    $this->assertEquals($entities[0]->getTitle(), 'NewEntityTitle', 'Entity successfully created.');

     $this->drupalGet('cacheflush/' . $entities[0]->id() . '/edit');
-    $this->assertResponse(200);
-    $this->assertFieldByName('cron', 1, 'Cron checkbox is checked.');
-    $this->assertLink(t('Edit'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldValueEquals('cron', 1);
+    $this->assertSession()->linkExists(t('Edit'));

     $data['cron'] = 0;
-    $this->drupalPostForm('cacheflush/' . $entities[0]->id() . '/edit', $data, t('Save'));
+    $this->drupalGet('cacheflush/' . $entities[0]->id() . '/edit');
+    $this->submitForm($data, t('Save'));
     $entities = array_values(cacheflush_load_multiple_by_properties(['title' => 'NewEntityTitle']));

     $this->drupalGet('cacheflush/' . $entities[0]->id() . '/edit');
-    $this->assertResponse(200);
-    $this->assertFieldByName('cron', 0, 'Cron checkbox is NOT checked.');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldValueEquals('cron', 0);

     // Test Entity create.
     $data = [
       'title' => 'NewEntityTitle2',
     ];
+    $this->drupalGet('admin/structure/cacheflush/add');

     // Test that the Edit link should not be in UI if no CronJob created yet.
-    $this->drupalPostForm('admin/structure/cacheflush/add', $data, t('Save'));
+    $this->submitForm($data, t('Save'));
     $entities = array_values(cacheflush_load_multiple_by_properties(['title' => 'NewEntityTitle2']));
-    $this->assertEqual($entities[0]->getTitle(), 'NewEntityTitle2', 'Entity successfully created.');
+    $this->assertEquals($entities[0]->getTitle(), 'NewEntityTitle2', 'Entity successfully created.');
     $this->drupalGet('cacheflush/' . $entities[0]->id() . '/edit');
-    $this->assertResponse(200);
-    $this->assertFieldByName('cron', 0, 'Cron checkbox is NOT checked.');
-    $this->assertNoLink('Edit');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldValueEquals('cron', 0);
+    $this->assertSession()->linkNotExists('Edit');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertLinkRector
 * AssertNoLinkRector
 * AssertRawRector
 * AssertResponseRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/cacheflush/modules/cacheflush_cron/cacheflush_cron.module:55

    ---------- begin diff ----------
@@ @@
       ], ['attributes' => ['target' => '_blank']]);
       $url->setText('Edit');
       $renderable = $url->toRenderable();
-      $link = render($renderable);
+      $link = \Drupal::service('renderer')->render($renderable);
     }
   }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector


4) modules/contrib/cacheflush/modules/cacheflush_advanced/tests/src/Functional/CacheFlushAdvancedTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * Sets up the test.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $roles = [
@@ @@
   private function interfaceErrorrs() {
     // Check interface has all fields.
     $this->drupalGet('admin/structure/cacheflush/add');
-    $this->assertRaw(t('Custom (advanced)'));
-    $this->assertFieldByName('vertical_tabs_advance[cacheflush_advanced_table][0][cid]');
-    $this->assertFieldByName('vertical_tabs_advance[cacheflush_advanced_table][0][table]');
-    $this->assertFieldByName('advanced_remove_0');
-    $this->assertFieldByName('advance_add');
+    $this->assertSession()->responseContains(t('Custom (advanced)'));
+    $this->assertSession()->fieldExists('vertical_tabs_advance[cacheflush_advanced_table][0][cid]');
+    $this->assertSession()->fieldExists('vertical_tabs_advance[cacheflush_advanced_table][0][table]');
+    $this->assertSession()->fieldExists('advanced_remove_0');
+    $this->assertSession()->fieldExists('advance_add');

     // Test NO error generate if nothing completet on the advanced form.
-    $this->drupalPostForm(NULL, [], t('Save'));
-    $this->assertNoRaw(t('Cache ID is required!'));
-    $this->assertNoRaw(t('Service is required!'));
+    $this->submitForm([], t('Save'));
+    $this->assertSession()->responseNotContains(t('Cache ID is required!'));
+    $this->assertSession()->responseNotContains(t('Service is required!'));

     // Test if CID sett and service not, is generating error.
-    $this->drupalPostForm(NULL, ['vertical_tabs_advance[cacheflush_advanced_table][0][cid]' => 'Test 1'], t('Save'));
-    $this->assertNoRaw(t('Cache ID is required!'));
-    $this->assertRaw(t('Service is required'));
+    $this->submitForm(['vertical_tabs_advance[cacheflush_advanced_table][0][cid]' => 'Test 1'], t('Save'));
+    $this->assertSession()->responseNotContains(t('Cache ID is required!'));
+    $this->assertSession()->responseContains(t('Service is required'));

     // Test if CID not and service sett, is generating error.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'vertical_tabs_advance[cacheflush_advanced_table][0][cid]' => '',
       'vertical_tabs_advance[cacheflush_advanced_table][0][table]' => 'menu',
     ], t('Save'));
-    $this->assertRaw(t('Cache ID is required!'));
-    $this->assertNoRaw(t('Service is required'));
+    $this->assertSession()->responseContains(t('Cache ID is required!'));
+    $this->assertSession()->responseNotContains(t('Service is required'));

     // Test NO error on advanced / save fail because no title sett.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'vertical_tabs_advance[cacheflush_advanced_table][0][cid]' => 'TEST',
       'vertical_tabs_advance[cacheflush_advanced_table][0][table]' => 'menu',
     ], t('Save'));
-    $this->assertNoRaw(t('Cache ID is required!'));
-    $this->assertNoRaw(t('Service is required'));
-    $this->assertRaw(t('Title field is required.'));
+    $this->assertSession()->responseNotContains(t('Cache ID is required!'));
+    $this->assertSession()->responseNotContains(t('Service is required'));
+    $this->assertSession()->responseContains(t('Title field is required.'));
   }

   /**
@@ @@
     $this->drupalGet('admin/structure/cacheflush/add');

     $this->drupalPostAjaxForm(NULL, [], 'advance_add');
-    $this->assertFieldByName('vertical_tabs_advance[cacheflush_advanced_table][1][cid]');
-    $this->assertFieldByName('vertical_tabs_advance[cacheflush_advanced_table][1][table]');
-    $this->assertFieldByName('advanced_remove_1');
+    $this->assertSession()->fieldExists('vertical_tabs_advance[cacheflush_advanced_table][1][cid]');
+    $this->assertSession()->fieldExists('vertical_tabs_advance[cacheflush_advanced_table][1][table]');
+    $this->assertSession()->fieldExists('advanced_remove_1');

     $this->drupalPostAjaxForm(NULL, [], 'advance_add');
-    $this->assertFieldByName('vertical_tabs_advance[cacheflush_advanced_table][2][cid]');
-    $this->assertFieldByName('vertical_tabs_advance[cacheflush_advanced_table][2][table]');
-    $this->assertFieldByName('advanced_remove_2');
+    $this->assertSession()->fieldExists('vertical_tabs_advance[cacheflush_advanced_table][2][cid]');
+    $this->assertSession()->fieldExists('vertical_tabs_advance[cacheflush_advanced_table][2][table]');
+    $this->assertSession()->fieldExists('advanced_remove_2');

     $this->drupalPostAjaxForm(NULL, [], 'advance_add');
-    $this->assertFieldByName('vertical_tabs_advance[cacheflush_advanced_table][3][cid]');
-    $this->assertFieldByName('vertical_tabs_advance[cacheflush_advanced_table][3][table]');
-    $this->assertFieldByName('advanced_remove_3');
+    $this->assertSession()->fieldExists('vertical_tabs_advance[cacheflush_advanced_table][3][cid]');
+    $this->assertSession()->fieldExists('vertical_tabs_advance[cacheflush_advanced_table][3][table]');
+    $this->assertSession()->fieldExists('advanced_remove_3');

     $this->drupalPostAjaxForm(NULL, [], 'advanced_remove_1');
-    $this->assertFieldByName('advanced_remove_0');
-    $this->assertNoFieldByName('advanced_remove_1');
-    $this->assertFieldByName('advanced_remove_2');
+    $this->assertSession()->fieldExists('advanced_remove_0');
+    $this->assertSession()->fieldValueNotEquals('advanced_remove_1', '');
+    $this->assertSession()->fieldExists('advanced_remove_2');

     $this->drupalPostAjaxForm(NULL, ['title' => 'Test 1'], 'advanced_remove_0');
-    $this->assertNoFieldByName('advanced_remove_0');
-    $this->assertNoFieldByName('advanced_remove_1');
-    $this->assertFieldByName('advanced_remove_2');
+    $this->assertSession()->fieldValueNotEquals('advanced_remove_0', '');
+    $this->assertSession()->fieldValueNotEquals('advanced_remove_1', '');
+    $this->assertSession()->fieldExists('advanced_remove_2');

     $this->drupalPostAjaxForm(NULL, ['title' => 'Test 1'], 'advanced_remove_2');
-    $this->assertNoFieldByName('advanced_remove_0');
-    $this->assertNoFieldByName('advanced_remove_1');
-    $this->assertNoFieldByName('advanced_remove_2');
+    $this->assertSession()->fieldValueNotEquals('advanced_remove_0', '');
+    $this->assertSession()->fieldValueNotEquals('advanced_remove_1', '');
+    $this->assertSession()->fieldValueNotEquals('advanced_remove_2', '');

     $this->drupalPostAjaxForm(NULL, [], 'advance_add');
-    $this->assertFieldByName('advanced_remove_4');
+    $this->assertSession()->fieldExists('advanced_remove_4');

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'title' => 'Test 1',
       'vertical_tabs_advance[cacheflush_advanced_table][4][cid]' => 'TEST',
       'vertical_tabs_advance[cacheflush_advanced_table][4][table]' => 'menu',
@@ @@
     ], t('Save'));

     $entities = array_values(cacheflush_load_multiple_by_properties(['title' => 'Test 1']));
-    $this->assertEqual($entities[0]->getTitle(), 'Test 1', 'Entity successfully created.');
+    $this->assertEquals($entities[0]->getTitle(), 'Test 1', 'Entity successfully created.');

     // Check if entity create on interface.
     $this->drupalGet('cacheflush/' . $entities[0]->id() . '/edit');
-    $this->assertFieldByName('vertical_tabs_advance[cacheflush_advanced_table][4][cid]', 'TEST');
-    $this->assertFieldByName('vertical_tabs_advance[cacheflush_advanced_table][4][table]', 'menu');
+    $this->assertSession()->fieldValueEquals('vertical_tabs_advance[cacheflush_advanced_table][4][cid]', 'TEST');
+    $this->assertSession()->fieldValueEquals('vertical_tabs_advance[cacheflush_advanced_table][4][table]', 'menu');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * AssertNoRawRector
 * AssertRawRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/cacheflush/tests/src/Functional/LoadTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/cacheflush/tests/src/Functional/CacheFlushTest.php:52

    ---------- begin diff ----------
@@ @@
   /**
    * Sets up the test.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->testUser = $this->drupalCreateUser(['cacheflush clear cache']);
   }
@@ @@
   public function menuAccessAnonymusUser() {
     // Check access of the menus - access denied expected - Anonymus user.
     $this->drupalGet('admin/cacheflush');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $this->drupalGet('admin/cacheflush/clear/all');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // No entity created yet, the route will try to load entity - 404 will be
     // returned by Entity Manager.
     $this->drupalGet('admin/cacheflush/clear/1');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
   }

   /**
@@ @@
       'title' => 'Enabled',
       'status' => 1,
     ]));
-    $this->assertEqual($enabled[0]->title->value, 'Enabled', 'Created and loaded entity: enabled.');
+    $this->assertEquals($enabled[0]->title->value, 'Enabled', 'Created and loaded entity: enabled.');
     $disabled = array_values(cacheflush_load_multiple_by_properties([
       'title' => 'Disabled',
       'status' => 0,
     ]));
-    $this->assertEqual($disabled[0]->title->value, 'Disabled', 'Created and loaded entity: disabled.');
+    $this->assertEquals($disabled[0]->title->value, 'Disabled', 'Created and loaded entity: disabled.');

     $this->drupalLogin($this->testUser);

     // Check access of the menus - access TRUE expected.
     $this->drupalGet('admin/cacheflush');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalGet('admin/cacheflush/clear/all');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalGet('admin/cacheflush/clear/' . $enabled[0]->id->value);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Check if the disabled entity will be refused.
     $this->drupalGet('admin/cacheflush/clear/' . $disabled[0]->id->value);
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $this->drupalLogout();
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertResponseRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/cacheflush/modules/cacheflush_ui/tests/src/Functional/CacheFlushUICRUDAccessTest.php:96

    ---------- begin diff ----------
@@ @@
   /**
    * Sets up the test.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $role1 = [
@@ @@

     // Check Access on the list interface.
     $this->drupalGet('admin/structure/cacheflush');
-    $this->assertRaw('LoggedUserEntity');
-    $this->assertRaw('AdminUserEntity');
-    $this->assertRaw('InterfaceUserEntity');
-    $this->assertRaw('InterfaceUser2Entity');
+    $this->assertSession()->responseContains('LoggedUserEntity');
+    $this->assertSession()->responseContains('AdminUserEntity');
+    $this->assertSession()->responseContains('InterfaceUserEntity');
+    $this->assertSession()->responseContains('InterfaceUser2Entity');

     // User has access on the 4 entities to all operations.
-    $this->assertLink('Edit', 3);
-    $this->assertLink('Delete', 3);
+    $this->assertSession()->linkExists('Edit', 3);
+    $this->assertSession()->linkExists('Delete', 3);

     $this->drupalLogout();
   }
@@ @@

     // Check Access on the list interface.
     $this->drupalGet('admin/structure/cacheflush');
-    $this->assertNoRaw('LoggedUserEntity');
-    $this->assertNoRaw('AdminUserEntity');
-    $this->assertRaw('InterfaceUserEntity');
-    $this->assertNoRaw('InterfaceUser2Entity');
+    $this->assertSession()->responseNotContains('LoggedUserEntity');
+    $this->assertSession()->responseNotContains('AdminUserEntity');
+    $this->assertSession()->responseContains('InterfaceUserEntity');
+    $this->assertSession()->responseNotContains('InterfaceUser2Entity');

     // User has access on the own entity to all operations.
-    $this->assertLink('Edit', 0);
-    $this->assertLink('Delete', 0);
+    $this->assertSession()->linkExists('Edit', 0);
+    $this->assertSession()->linkExists('Delete', 0);

     $this->drupalLogout();
   }
@@ @@

     // Check Access on the list interface.
     $this->drupalGet('admin/structure/cacheflush');
-    $this->assertRaw('LoggedUserEntity');
-    $this->assertRaw('AdminUserEntity');
-    $this->assertRaw('InterfaceUserEntity');
-    $this->assertRaw('InterfaceUser2Entity');
+    $this->assertSession()->responseContains('LoggedUserEntity');
+    $this->assertSession()->responseContains('AdminUserEntity');
+    $this->assertSession()->responseContains('InterfaceUserEntity');
+    $this->assertSession()->responseContains('InterfaceUser2Entity');

     // User has access to all entities.
     // Edit 1 -> own.
     // No delete.
-    $this->assertLink('Edit', 0);
-    $this->assertNoLink('Delete');
+    $this->assertSession()->linkExists('Edit', 0);
+    $this->assertSession()->linkNotExists('Delete');

     $this->drupalLogout();
   }
@@ @@
    */
   public function cacheflushUrlAccess($url, $code) {
     $this->drupalGet($url);
-    $this->assertResponse($code);
+    $this->assertSession()->statusCodeEquals($code);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertLinkRector
 * AssertNoLinkRector
 * AssertNoRawRector
 * AssertRawRector
 * AssertResponseRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/cacheflush/modules/cacheflush_ui/tests/src/Functional/CacheFlushUICRUD.php:70

    ---------- begin diff ----------
@@ @@
    * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
    *   The messenger service.
    */
-  public function __construct(ModuleHandler $module_handler, EntityTypeManagerInterface $entity_type_manager, ContainerInterface $container) {
+  public function __construct(ModuleHandler $module_handler, EntityTypeManagerInterface $entity_type_manager, $container) {
     parent::__construct();
     $this->moduleHandler = $module_handler;
     $this->entityTypeManager = $entity_type_manager;
@@ @@
   /**
    * Sets up the test.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $user = $this->drupalCreateUser(self::$roles);
     $this->drupalLogin($user);
@@ @@
    */
   public function addInterfaceIntegrity() {
     $this->drupalGet('admin/structure/cacheflush/add');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

-    $this->assertFieldByName('title');
-    $this->assertFieldByName('op', t('Save'));
+    $this->assertSession()->fieldExists('title');
+    $this->assertSession()->fieldValueEquals('op', t('Save'));

     $tabs = $this->moduleHandler->invokeAll('cacheflush_ui_tabs');
     if ($tabs) {
       foreach ($tabs as $key => $value) {
-        $this->assertText($value['name']);
+        $this->assertSession()->pageTextContains($value['name']);
       }
     }

@@ @@
     $checkboxes = CacheflushApi::create($this->container)->getOptionList();
     if ($checkboxes) {
       foreach ($checkboxes as $key => $value) {
-        $this->assertFieldByName($value['category'] . "[$key]");
+        $this->assertSession()->fieldExists($value['category'] . "[$key]");
       }
     }
   }
@@ @@
    * Check if form requring is working on title field.
    */
   public function fieldRequiring() {
-    $this->drupalPostForm('admin/structure/cacheflush/add', [], t('Save'));
-    $this->assertResponse(200);
-    $this->assertRaw('error');
+    $this->drupalGet('admin/structure/cacheflush/add');
+    $this->submitForm([], t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseContains('error');
   }

   /**
@@ @@
       'vertical_tabs_core[bootstrap]' => 1,
       'vertical_tabs_core[config]' => 1,
     ];
-    $this->drupalPostForm('admin/structure/cacheflush/add', $data, t('Save'));
+    $this->drupalGet('admin/structure/cacheflush/add');
+    $this->submitForm($data, t('Save'));

     $entities = array_values(cacheflush_load_multiple_by_properties(['title' => 'NewEntityTitle']));
-    $this->assertEqual($entities[0]->getTitle(), 'NewEntityTitle', 'Entity successfully created.');
+    $this->assertEquals($entities[0]->getTitle(), 'NewEntityTitle', 'Entity successfully created.');

     // Test Entity update.
     $data2 = [
@@ @@
       'vertical_tabs_core[config]' => FALSE,
     ];
     $this->drupalGet('cacheflush/' . $entities[0]->id() . '/edit');
-    $this->assertFieldByName('vertical_tabs_core[bootstrap]', 'Entity 1: vertical_tabs_core[bootstrap] value appears correctly in the form.');
-    $this->assertFieldByName('vertical_tabs_core[config]', 'Entity 1: vertical_tabs_core[config] value appears correctly in the form.');
-    $this->assertFieldByName('vertical_tabs_core[default]', 'Entity 1: vertical_tabs_core[default] value appears correctly in the form.');
+    $this->assertSession()->fieldValueEquals('vertical_tabs_core[bootstrap]', 'Entity 1: vertical_tabs_core[bootstrap] value appears correctly in the form.');
+    $this->assertSession()->fieldValueEquals('vertical_tabs_core[config]', 'Entity 1: vertical_tabs_core[config] value appears correctly in the form.');
+    $this->assertSession()->fieldValueEquals('vertical_tabs_core[default]', 'Entity 1: vertical_tabs_core[default] value appears correctly in the form.');
+    $this->drupalGet('cacheflush/' . $entities[0]->id() . '/edit');

-    $this->drupalPostForm('cacheflush/' . $entities[0]->id() . '/edit', $data2, t('Save'));
+    $this->submitForm($data2, t('Save'));

     $this->entityTypeManager
       ->getStorage('cacheflush')
       ->resetCache([$entities[0]->id()]);
     $entities = array_values(cacheflush_load_multiple_by_properties(['title' => 'UpdatedEntityTitle']));
-    $this->assertEqual($entities[0]->getTitle(), 'UpdatedEntityTitle', 'Entity successfully updated.');
+    $this->assertEquals($entities[0]->getTitle(), 'UpdatedEntityTitle', 'Entity successfully updated.');

     $this->drupalGet('cacheflush/' . $entities[0]->id() . '/edit');
-    $this->assertFieldByName('vertical_tabs_core[bootstrap]', 'Entity 1: vertical_tabs_core[bootstrap] value appears correctly in the form.');
-    $this->assertFieldByName('vertical_tabs_core[config]', 'Entity 1: vertical_tabs_core[config] value appears correctly in the form.');
-    $this->assertFieldByName('vertical_tabs_core[default]', 'Entity 1: vertical_tabs_core[default] value appears correctly in the form.');
+    $this->assertSession()->fieldValueEquals('vertical_tabs_core[bootstrap]', 'Entity 1: vertical_tabs_core[bootstrap] value appears correctly in the form.');
+    $this->assertSession()->fieldValueEquals('vertical_tabs_core[config]', 'Entity 1: vertical_tabs_core[config] value appears correctly in the form.');
+    $this->assertSession()->fieldValueEquals('vertical_tabs_core[default]', 'Entity 1: vertical_tabs_core[default] value appears correctly in the form.');

     // Test delete page and delete.
     $this->drupalGet('cacheflush/' . $entities[0]->id() . '/delete');
-    $this->assertLink(t('Cancel'));
-    $this->assertFieldByName('op', t('Delete'));
-    $this->drupalPostForm(NULL, [], t('Delete'));
+    $this->assertSession()->linkExists(t('Cancel'));
+    $this->assertSession()->fieldValueEquals('op', t('Delete'));
+    $this->submitForm([], t('Delete'));
     $this->drupalGet('cacheflush/' . $entities[0]->id());
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertLinkRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 8 files have been changed by Rector                                       

