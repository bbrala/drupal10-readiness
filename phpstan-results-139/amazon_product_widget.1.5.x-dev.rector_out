modules/contrib/amazon_product_widget/amazon_product_widget.api.php
modules/contrib/amazon_product_widget/src/BatchProductMapUpdateService.php
modules/contrib/amazon_product_widget/amazon_product_widget.install
modules/contrib/amazon_product_widget/src/Plugin/QueueWorker/ProductDataUpdate.php
modules/contrib/amazon_product_widget/src/Commands/AmazonProductWidgetCommands.php
modules/contrib/amazon_product_widget/amazon_product_widget.module
modules/contrib/amazon_product_widget/src/Plugin/views/field/DealStatus.php
modules/contrib/amazon_product_widget/src/Plugin/views/field/EntityUrl.php
modules/contrib/amazon_product_widget/src/Plugin/views/field/MoreLink.php
modules/contrib/amazon_product_widget/src/Plugin/views/field/ProductAvailable.php
modules/contrib/amazon_product_widget/amazon_product_widget.post_update.php
modules/contrib/amazon_product_widget/src/Plugin/views/field/ProductHasData.php
modules/contrib/amazon_product_widget/src/Plugin/views/field/UnavailableAsins.php
modules/contrib/amazon_product_widget/src/Plugin/views/filter/DealStatusFilter.php
modules/contrib/amazon_product_widget/amazon_product_widget.views.inc
modules/contrib/amazon_product_widget/src/ConfigSettingsTrait.php
modules/contrib/amazon_product_widget/src/ProductService.php
modules/contrib/amazon_product_widget/src/Controller/AmazonProductController.php
modules/contrib/amazon_product_widget/src/BatchDealImportService.php
modules/contrib/amazon_product_widget/src/DealFeedService.php
modules/contrib/amazon_product_widget/src/DealFeedServiceTrait.php
modules/contrib/amazon_product_widget/src/DealImportState.php
modules/contrib/amazon_product_widget/src/DealStore.php
modules/contrib/amazon_product_widget/src/EventSubscriber/AmazonApiSubscriber.php
modules/contrib/amazon_product_widget/src/Exception/AmazonApiDisabledException.php
modules/contrib/amazon_product_widget/src/Exception/AmazonDealApiDisabledException.php
modules/contrib/amazon_product_widget/src/Exception/AmazonRequestLimitReachedException.php
modules/contrib/amazon_product_widget/src/Exception/AmazonServiceException.php
modules/contrib/amazon_product_widget/src/Form/DealFeedCheckForm.php
modules/contrib/amazon_product_widget/src/Form/DealFeedSettingsForm.php
modules/contrib/amazon_product_widget/src/ProductServiceTrait.php
modules/contrib/amazon_product_widget/src/ProductStore.php
modules/contrib/amazon_product_widget/src/Form/ProductRenewalForm.php
modules/contrib/amazon_product_widget/src/Form/SettingsForm.php
modules/contrib/amazon_product_widget/src/ProductStoreFactory.php
modules/contrib/amazon_product_widget/src/ProductUsageService.php
modules/contrib/amazon_product_widget/src/Plugin/Field/FieldFormatter/AmazonProductFieldFormatter.php
modules/contrib/amazon_product_widget/src/Plugin/Field/FieldType/AmazonProductField.php
modules/contrib/amazon_product_widget/src/Plugin/Field/FieldWidget/AmazonProductWidget.php

3 files with changes
====================

1) modules/contrib/amazon_product_widget/amazon_product_widget.post_update.php:12

    ---------- begin diff ----------
@@ @@
  */
 function amazon_product_widget_post_update_install_view(&$sandbox) {
   // Import the product overview view.
-  $configPath = drupal_get_path('module', 'amazon_product_widget') . '/config/install';
+  $configPath = \Drupal::service('extension.list.module')->getPath('amazon_product_widget') . '/config/install';
   $source = new FileStorage($configPath);
   /** @var \Drupal\Core\Config\StorageInterface $configStorage */
   $configStorage = \Drupal::service('config.storage');
@@ @@
  */
 function amazon_product_widget_post_update_install_unavailable_products_view(&$sandbox) {
   // Import the product overview view.
-  $configPath = drupal_get_path('module', 'amazon_product_widget') . '/config/install';
+  $configPath = \Drupal::service('extension.list.module')->getPath('amazon_product_widget') . '/config/install';
   $source = new FileStorage($configPath);
   /** @var \Drupal\Core\Config\StorageInterface $configStorage */
   $configStorage = \Drupal::service('config.storage');
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


2) modules/contrib/amazon_product_widget/amazon_product_widget.module:218

    ---------- begin diff ----------
@@ @@
 /**
  * Implements hook_entity_presave().
  */
-function amazon_product_widget_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
+function amazon_product_widget_entity_presave(EntityInterface $entity) {
   /** @var \Drupal\amazon_product_widget\ProductUsageService $productUsage */
   $productUsage = \Drupal::service('amazon_product_widget.usage');
   $productUsage->update($entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/amazon_product_widget/src/EventSubscriber/AmazonApiSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\amazon_product_widget\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Unset cookie so the whole request acts as anonymous for everybody.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event to process.
    *
    * @see \Drupal\Core\EventSubscriber\FinishResponseSubscriber::onRespond()
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
@@ @@
   /**
    * Sets proper cache control header.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    *
    * @see \Drupal\Core\EventSubscriber\FinishResponseSubscriber::onRespond()
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


 [OK] 3 files have been changed by Rector                                       

