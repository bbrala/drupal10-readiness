modules/contrib/prometheus_metrics/prometheus_metrics.install
modules/contrib/prometheus_metrics/tests/src/Unit/EntityCRUDEventTest.php
modules/contrib/prometheus_metrics/prometheus_metrics.module
modules/contrib/prometheus_metrics/src/Bridge/PromPHPClientBridge.php
modules/contrib/prometheus_metrics/src/Bridge/PrometheusMetricsInterface.php
modules/contrib/prometheus_metrics/src/Controller/MetricsController.php
modules/contrib/prometheus_metrics/tests/src/Unit/MetricsRoutesTest.php
modules/contrib/prometheus_metrics/src/EventSubscriber/PrometheusDefaults.php
modules/contrib/prometheus_metrics/src/EventSubscriber/PrometheusEntityCRUDSubscriber.php
modules/contrib/prometheus_metrics/src/EventSubscriber/PrometheusRequestSubscriber.php
modules/contrib/prometheus_metrics/src/Events/EntityCRUDEvent.php
modules/contrib/prometheus_metrics/src/Form/ConfirmResetForm.php
modules/contrib/prometheus_metrics/src/Form/MetricsConfigurationForm.php
modules/contrib/prometheus_metrics/src/Routing/MetricsRoutes.php
modules/contrib/prometheus_metrics/tests/Controller/MetricsControllerTest.php
modules/contrib/prometheus_metrics/tests/src/Functional/LoadTest.php

4 files with changes
====================

1) modules/contrib/prometheus_metrics/tests/src/Functional/LoadTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/prometheus_metrics/tests/Controller/MetricsControllerTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/prometheus_metrics/src/Events/EntityCRUDEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\prometheus_metrics\Events;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Stores details about the event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/prometheus_metrics/src/EventSubscriber/PrometheusRequestSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\prometheus_metrics\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\TerminateEvent;
 use Psr\Log\LoggerInterface;
 use Drupal\Component\Utility\Timer;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
-use Symfony\Component\HttpKernel\Event\PostResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Start timer for the request.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The start of request event.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     Timer::start(PrometheusDefaults::TIMER_NAME);
   }

@@ @@
    * Stores a histogram timer and counter for the request
    * by method, route and status.
    *
-   * @param \Symfony\Component\HttpKernel\Event\PostResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\TerminateEvent $event
    *   The event.
    */
-  public function onTerminate(PostResponseEvent $event) {
+  public function onTerminate(TerminateEvent $event) {
     if (PHP_SAPI === 'cli') {
       // In CLI context there is no request to trace
       return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


 [OK] 4 files have been changed by Rector                                       

