modules/contrib/entity_export_csv/entity_export_csv.install
modules/contrib/entity_export_csv/src/EntityExportCsvManager.php
modules/contrib/entity_export_csv/entity_export_csv.module
modules/contrib/entity_export_csv/src/Annotation/FieldTypeExport.php
modules/contrib/entity_export_csv/src/Controller/EntityExportCsvDownload.php
modules/contrib/entity_export_csv/src/Plugin/FieldTypeExport/GeolocationExport.php
modules/contrib/entity_export_csv/src/Plugin/FieldTypeExport/LinkExport.php
modules/contrib/entity_export_csv/src/Entity/EntityExportCsv.php
modules/contrib/entity_export_csv/src/Plugin/FieldTypeExport/ListExport.php
modules/contrib/entity_export_csv/src/Entity/EntityExportCsvInterface.php
modules/contrib/entity_export_csv/src/EntityExportCsvBatch.php
modules/contrib/entity_export_csv/src/Plugin/FieldTypeExport/TimestampExport.php
modules/contrib/entity_export_csv/src/Plugin/FieldTypeExportBase.php
modules/contrib/entity_export_csv/src/EntityExportCsvManagerInterface.php
modules/contrib/entity_export_csv/src/Event/EntityExportCsvEvents.php
modules/contrib/entity_export_csv/src/Event/EntityExportCsvFieldsEnabledEvent.php
modules/contrib/entity_export_csv/src/Event/EntityExportCsvFieldsEvent.php
modules/contrib/entity_export_csv/src/Event/EntityExportCsvFieldsSupportedEvent.php
modules/contrib/entity_export_csv/src/Form/EntityExportCsv.php
modules/contrib/entity_export_csv/src/EntityExportCsvHtmlRouteProvider.php
modules/contrib/entity_export_csv/src/Form/EntityExportCsvDeleteForm.php
modules/contrib/entity_export_csv/src/EntityExportCsvListBuilder.php
modules/contrib/entity_export_csv/src/Form/EntityExportCsvDisableForm.php
modules/contrib/entity_export_csv/src/Form/EntityExportCsvDuplicateForm.php
modules/contrib/entity_export_csv/src/Form/EntityExportCsvEnableForm.php
modules/contrib/entity_export_csv/src/Form/EntityExportCsvForm.php
modules/contrib/entity_export_csv/src/Plugin/FieldTypeExportInterface.php
modules/contrib/entity_export_csv/src/Plugin/FieldTypeExportManager.php
modules/contrib/entity_export_csv/src/Form/EntityExportCsvSettings.php
modules/contrib/entity_export_csv/src/Plugin/FieldTypeExportManagerInterface.php
modules/contrib/entity_export_csv/tests/src/Functional/LoadTest.php
modules/contrib/entity_export_csv/src/Form/EntityExportCsvTrait.php
modules/contrib/entity_export_csv/src/Plugin/FieldTypeExport/AddressExport.php
modules/contrib/entity_export_csv/src/Plugin/FieldTypeExport/DateRangeExport.php
modules/contrib/entity_export_csv/src/Plugin/FieldTypeExport/DateTimeExport.php
modules/contrib/entity_export_csv/src/Plugin/FieldTypeExport/DefaultExport.php
modules/contrib/entity_export_csv/src/Plugin/FieldTypeExport/EntityReferenceExport.php
modules/contrib/entity_export_csv/src/Plugin/FieldTypeExport/FileExport.php

7 files with changes
====================

1) modules/contrib/entity_export_csv/src/EntityExportCsvBatch.php:302

    ---------- begin diff ----------
@@ @@
     $time = time();
     $filename = $entity_type_id . '_' . $bundle . '_' . $time . '.csv';
     $destination = $directory . '/' . $filename;
-    $file = file_save_data('', $destination, FileSystemInterface::EXISTS_REPLACE);
+    $file = \Drupal::service('file.repository')->writeData('', $destination, FileSystemInterface::EXISTS_REPLACE);
     $file->setTemporary();
     $file->save();
     $file_path = $file_system->realpath($destination);
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * WrapReturnRector


2) modules/contrib/entity_export_csv/tests/src/Functional/LoadTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_export_csv/src/Plugin/FieldTypeExport/TimestampExport.php:47

    ---------- begin diff ----------
@@ @@
     $date_formats = [];
     $date_formats[''] = $this->t('None');
     foreach ($this->entityTypeManager->getStorage('date_format')->loadMultiple() as $machine_name => $value) {
-      $date_formats[$machine_name] = $this->t('@name format: @date', ['@name' => $value->label(), '@date' => $this->dateFormatter->format(REQUEST_TIME, $machine_name)]);
+      $date_formats[$machine_name] = $this->t('@name format: @date', ['@name' => $value->label(), '@date' => $this->dateFormatter->format(\Drupal::time()->getRequestTime(), $machine_name)]);
     }
     $date_formats['custom'] = $this->t('Custom');

@@ @@
     $options = parent::getFormatExportOptions($field_definition);
     $date_formats = [];
     foreach ($this->entityTypeManager->getStorage('date_format')->loadMultiple() as $machine_name => $value) {
-      $date_formats[$machine_name] = $this->t('@name format: @date', ['@name' => $value->label(), '@date' => $this->dateFormatter->format(REQUEST_TIME, $machine_name)]);
+      $date_formats[$machine_name] = $this->t('@name format: @date', ['@name' => $value->label(), '@date' => $this->dateFormatter->format(\Drupal::time()->getRequestTime(), $machine_name)]);
     }
     $date_formats['custom'] = $this->t('Custom');
     return $options + $date_formats;
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entity_export_csv/src/Plugin/FieldTypeExport/DateTimeExport.php:115

    ---------- begin diff ----------
@@ @@
     $options = parent::getFormatExportOptions($field_definition);
     $date_formats = [];
     foreach ($this->entityTypeManager->getStorage('date_format')->loadMultiple() as $machine_name => $value) {
-      $date_formats[$machine_name] = $this->t('@name format: @date', ['@name' => $value->label(), '@date' => $this->dateFormatter->format(REQUEST_TIME, $machine_name)]);
+      $date_formats[$machine_name] = $this->t('@name format: @date', ['@name' => $value->label(), '@date' => $this->dateFormatter->format(\Drupal::time()->getRequestTime(), $machine_name)]);
     }
     $date_formats['custom'] = $this->t('Custom');
     return $options + $date_formats;
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity_export_csv/src/Plugin/FieldTypeExport/DateRangeExport.php:121

    ---------- begin diff ----------
@@ @@
     $options = parent::getFormatExportOptions($field_definition);
     $date_formats = [];
     foreach ($this->entityTypeManager->getStorage('date_format')->loadMultiple() as $machine_name => $value) {
-      $date_formats[$machine_name] = $this->t('@name format: @date', ['@name' => $value->label(), '@date' => $this->dateFormatter->format(REQUEST_TIME, $machine_name)]);
+      $date_formats[$machine_name] = $this->t('@name format: @date', ['@name' => $value->label(), '@date' => $this->dateFormatter->format(\Drupal::time()->getRequestTime(), $machine_name)]);
     }
     $date_formats['custom'] = $this->t('Custom');
     return $options + $date_formats;
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity_export_csv/src/Event/EntityExportCsvFieldsEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_export_csv\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Defines the fields event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity_export_csv/src/EntityExportCsvManager.php:256

    ---------- begin diff ----------
@@ @@
       }
     }
     $event = new EntityExportCsvFieldsSupportedEvent($options, $entity_type_id, $bundle, $return_field_definition);
-    $this->eventDispatcher->dispatch(EntityExportCsvEvents::ENTITY_EXPORT_CSV_FIELDS_SUPPORTED, $event);
+    $this->eventDispatcher->dispatch($event, EntityExportCsvEvents::ENTITY_EXPORT_CSV_FIELDS_SUPPORTED);
     $options = $event->getFields();
     return $options;
   }
@@ @@
       $options = array_intersect_key($options, $bundle_fields_settings);
     }
     $event = new EntityExportCsvFieldsEnabledEvent($options, $entity_type_id, $bundle, $return_field_definition);
-    $this->eventDispatcher->dispatch(EntityExportCsvEvents::ENTITY_EXPORT_CSV_FIELDS_ENABLE, $event);
+    $this->eventDispatcher->dispatch($event, EntityExportCsvEvents::ENTITY_EXPORT_CSV_FIELDS_ENABLE);
     $options = $event->getFields();
     return $options;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


 [OK] 7 files have been changed by Rector                                       

