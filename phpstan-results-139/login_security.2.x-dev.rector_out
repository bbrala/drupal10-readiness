modules/contrib/login_security/login_security.install
modules/contrib/login_security/login_security.module
modules/contrib/login_security/src/Form/LoginSecurityAdminSettings.php
modules/contrib/login_security/tests/src/Functional/LoginSecurityEmailTest.php
modules/contrib/login_security/tests/src/Functional/LoginSecurityInterfaceTest.php
modules/contrib/login_security/tests/src/Functional/LoginSecuritySoftBlockTest.php
modules/contrib/login_security/tests/src/Functional/LoginSecurityTestBase.php
modules/contrib/login_security/tests/src/Functional/LoginSecurityUserBlockingTest.php

5 files with changes
====================

1) modules/contrib/login_security/tests/src/Functional/LoginSecurityUserBlockingTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->badUsers[] = $this->drupalCreateUser();
@@ @@
    * Assert Text of last login message.
    */
   protected function assertTextLastLoginMessage() {
-    $this->assertText('Your last login was', 'Last login message found.');
+    $this->assertSession()->pageTextContains('Your last login was');
   }

   /**
@@ @@
    * Assert NO Text of last login message.
    */
   protected function assertNoTextLastLoginMessage() {
-    $this->assertNoText('Your last login was', 'Last login message not found.');
+    $this->assertSession()->pageTextNotContains('Your last login was');
   }

   /**
@@ @@
    * Assert Text of Last page access message.
    */
   protected function assertTextLastPageAccess() {
-    $this->assertText('Your last page access (site activity) was ', 'Last page access message found.');
+    $this->assertSession()->pageTextContains('Your last page access (site activity) was ');
   }

   /**
@@ @@
    * Assert NO Text of Last page access message.
    */
   protected function assertNoTextLastPageAccess() {
-    $this->assertNoText('Your last page access (site activity) was ', 'Last page access message not found.');
+    $this->assertSession()->pageTextNotContains('Your last page access (site activity) was ');
   }

   /**
@@ @@
   protected function assertBlockedUser($log, $username) {
     $variables = ['@username' => $username];
     $expected = new FormattableMarkup('Blocked user @username due to security configuration.', $variables);
-    $this->assertEqual(new FormattableMarkup($log->message, unserialize($log->variables)), $expected, 'User blocked log was set.');
-    $this->assertEqual($log->severity, RfcLogLevel::NOTICE, 'User blocked log was of severity "Notice".');
+    $this->assertEquals(new FormattableMarkup($log->message, unserialize($log->variables)), $expected, 'User blocked log was set.');
+    $this->assertEquals($log->severity, RfcLogLevel::NOTICE, 'User blocked log was of severity "Notice".');
   }

   /**
@@ @@
         'name' => $this->badUsers[0]->getAccountName(),
         'pass' => 'bad_password_' . $i,
       ];
-      $this->drupalPostForm('user', $login, $this->t('Log in'));
+      $this->drupalGet('user');
+      $this->submitForm($login, $this->t('Log in'));
     }

     // Ensure a log message has been set.
     $logs = $this->getLogMessages();
-    $this->assertEqual(count($logs), 1, '1 event was logged.');
+    $this->assertEquals(count($logs), 1, '1 event was logged.');
     $log = array_pop($logs);
     $this->assertBlockedUser($log, $this->badUsers[0]->getAccountName());
     Database::getConnection()->truncate('watchdog')->execute();
@@ @@
         'name' => $this->badUsers[1]->getAccountName(),
         'pass' => 'bad_password_' . $i,
       ];
-      $this->drupalPostForm('user', $login, $this->t('Log in'));
+      $this->drupalGet('user');
+      $this->submitForm($login, $this->t('Log in'));
     }

     $logs = $this->getLogMessages();

     // 2 logs should be generated.
-    $this->assertEqual(count($logs), 2, '2 events were logged.');
+    $this->assertEquals(count($logs), 2, '2 events were logged.');

     // First log should be the ongoing attack, triggered on attempt after the
     // threshold.
@@ @@
     $log = array_shift($logs);
     $variables = ['@activity_threshold' => 5, '@tracking_current_count' => 6];
     $expected = new FormattableMarkup('Ongoing attack detected: Suspicious activity detected in login form submissions. Too many invalid login attempts threshold reached: currently @tracking_current_count events are tracked, and threshold is configured for @activity_threshold attempts.', $variables);
-    $this->assertEqual(new FormattableMarkup($log->message, unserialize($log->variables)), $expected);
-    $this->assertEqual($log->severity, RfcLogLevel::WARNING, 'The logged alert was of severity "Warning".');
+    $this->assertEquals(new FormattableMarkup($log->message, unserialize($log->variables)), $expected);
+    $this->assertEquals($log->severity, RfcLogLevel::WARNING, 'The logged alert was of severity "Warning".');

     // Second log should be a blocked user.
     $log = array_shift($logs);
@@ @@
     $normal_user = $this->drupalCreateUser();

     // Intentionally break the password to repeat invalid logins.
-    $new_pass = user_password();
+    $new_pass = \Drupal::service('password_generator')->generate();
     $normal_user->setPassword($new_pass);

     $config->set('notice_attempts_available', 1)->save();
@@ @@

     // First try.
     $this->drupalLoginLite($normal_user);
-    $this->assertText($this->getAttemptsAvailableMessage(1, $login_attempts_limit), 'Attempts available message displayed.');
-    $this->assertFieldByName('form_id', 'user_login_form', 'Login form found.');
+    $this->assertSession()->pageTextContains($this->getAttemptsAvailableMessage(1, $login_attempts_limit));
+    $this->assertSession()->fieldValueEquals('form_id', 'user_login_form');

     // Turns off the warning message we looked for in the previous assert.
     $config->set('notice_attempts_available', 0)->save();
@@ @@

     // Second try.
     $this->drupalLoginLite($normal_user);
-    $this->assertNoText($this->getAttemptsAvailableMessage(2, $login_attempts_limit), 'Attempts available message NOT displayed.');
-    $this->assertFieldByName('form_id', 'user_login_form', 'Login form found.');
+    $this->assertSession()->pageTextNotContains($this->getAttemptsAvailableMessage(2, $login_attempts_limit));
+    $this->assertSession()->fieldValueEquals('form_id', 'user_login_form');

     // Turns back on the warning message we looked for in the previous assert.
-    $this->assertText(new FormattableMarkup('The user @user_name has been blocked due to failed login attempts.', ['@user_name' => $normal_user->getAccountName()]), 'Blocked message displayed.');
-    $this->assertFieldByName('form_id', 'user_login_form', 'Login form found.');
+    $this->assertSession()->pageTextContains(new FormattableMarkup('The user @user_name has been blocked due to failed login attempts.', ['@user_name' => $normal_user->getAccountName()]));
+    $this->assertSession()->fieldValueEquals('form_id', 'user_login_form');
   }

   /**
@@ @@
     $normal_user = $this->drupalCreateUser();

     // Intentionally break the password to repeat invalid logins.
-    $new_pass = user_password();
+    $new_pass = \Drupal::service('password_generator')->generate();
     $normal_user->setPassword($new_pass);

     $config->set('disable_core_login_error', 0)->save();

     $this->drupalLoginLite($normal_user);
-    $this->assertRaw($this->getDefaultDrupalLoginErrorMessage(), 'Drupal "...Have you forgotten your password?" login error message found.');
+    $this->assertSession()->responseContains($this->getDefaultDrupalLoginErrorMessage());

     // Block user.
     $normal_user->status->setValue(0);
     $normal_user->save();
     $this->drupalLoginLite($normal_user);
-    $this->assertRaw($this->getDefaultDrupalBlockedUserErrorMessage($normal_user->getAccountName()), 'Drupal "...has not been activated or is blocked." login error message found.');
+    $this->assertSession()->responseContains($this->getDefaultDrupalBlockedUserErrorMessage($normal_user->getAccountName()));

     $config->set('disable_core_login_error', 1)->save();

@@ @@
     $normal_user->status->setValue(1);
     $normal_user->save();
     $this->drupalLoginLite($normal_user);
-    $this->assertNoRaw($this->getDefaultDrupalLoginErrorMessage(), 'Drupal "...Have you forgotten your password?" login error message NOT found.');
+    $this->assertSession()->responseNotContains($this->getDefaultDrupalLoginErrorMessage());

     // Block user.
     $normal_user->status->setValue(0);
     $normal_user->save();
     $this->drupalLoginLite($normal_user);
-    $this->assertNoRaw($this->getDefaultDrupalBlockedUserErrorMessage($normal_user->getAccountName()), 'Drupal "...has not been activated or is blocked." login error message NOT found.');
+    $this->assertSession()->responseNotContains($this->getDefaultDrupalBlockedUserErrorMessage($normal_user->getAccountName()));
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertNoRawRector
 * AssertNoTextRector
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * UserPasswordRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/login_security/tests/src/Functional/LoginSecurityTestBase.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Ensure these tables have no entries.
@@ @@
       'name' => $user->getAccountName(),
       'pass' => $user->getPassword(),
     ];
+    $this->drupalGet('user');

-    $this->drupalPostForm('user', $edit, $this->t('Log in'));
-    $this->assertResponse(200, $this->t('Login page reloaded.'));
+    $this->submitForm($edit, $this->t('Log in'));
+    $this->assertSession()->statusCodeEquals(200, $this->t('Login page reloaded.'));

     $this->loggedInUser = TRUE;
   }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/login_security/tests/src/Functional/LoginSecuritySoftBlockTest.php:23

    ---------- begin diff ----------
@@ @@
    */
   protected function assertNoSoftBlocked($account) {
     $this->drupalLoginLite($account);
-    $this->assertNoText('This host is not allowed to log in', 'Soft-blocked notice does not display.');
-    $this->assertNoText(new FormattableMarkup('The user @user_name has been blocked due to failed login attempts.', ['@user_name' => $account->getAccountName()]), 'User is not blocked.');
-    $this->assertFieldByName('form_id', 'user_login_form', 'Login form found.');
+    $this->assertSession()->pageTextNotContains('This host is not allowed to log in');
+    $this->assertSession()->pageTextNotContains(new FormattableMarkup('The user @user_name has been blocked due to failed login attempts.', ['@user_name' => $account->getAccountName()]));
+    $this->assertSession()->fieldValueEquals('form_id', 'user_login_form');
   }

   /**
@@ @@
    */
   protected function assertSoftBlocked($account) {
     $this->drupalLoginLite($account);
-    $this->assertText('This host is not allowed to log in', 'Soft-block message displays.');
-    $this->assertFieldByName('form_id', 'user_login_form', 'Login form found.');
+    $this->assertSession()->pageTextContains('This host is not allowed to log in');
+    $this->assertSession()->fieldValueEquals('form_id', 'user_login_form');
   }

   /**
@@ @@
     $this->drupalLogin($normal_user);

     $warning_message = 'You have used 1 out of 5 login attempts. After all 5 have been used, you will be unable to login.';
-    $this->assertNoText($warning_message, 'Attempts available message displayed.');
+    $this->assertSession()->pageTextNotContains($warning_message);
   }

   /**
@@ @@
     $good_pass = $normal_user->getPassword();

     // Intentionally break the password to repeat invalid logins.
-    $new_pass = user_password();
+    $new_pass = \Drupal::service('password_generator')->generate();
     $normal_user->setPassword($new_pass);

     // First try.
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertNoTextRector
 * AssertTextRector
 * UserPasswordRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/login_security/tests/src/Functional/LoginSecurityInterfaceTest.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create and login user.
@@ @@
     $settings_fields = $this->getAdminUserSettingsFields();

     $this->drupalGet(parent::ADMIN_SETTINGS_PATH);
-    $this->assertResponse(200, 'Access granted to settings page.');
+    $this->assertSession()->statusCodeEquals(200, 'Access granted to settings page.');

     // Assert Fields.
     foreach ($settings_fields as $field_name) {
-      $this->assertField($field_name, new FormattableMarkup('@field_name field exists.', ['@field_name' => $field_name]));
+      $this->assertSession()->fieldExists($field_name, new FormattableMarkup('@field_name field exists.', ['@field_name' => $field_name]));
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertFieldRector
 * AssertResponseRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/login_security/tests/src/Functional/LoginSecurityEmailTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create first user.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 5 files have been changed by Rector                                       

