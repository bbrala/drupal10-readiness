diff --git a/modules/brightcove_proxy/src/EventSubscriber/BrightcoveProxyInitSubscriber.php b/modules/brightcove_proxy/src/EventSubscriber/BrightcoveProxyInitSubscriber.php
index 2a9ad94..bbb90cc 100644
--- a/modules/brightcove_proxy/src/EventSubscriber/BrightcoveProxyInitSubscriber.php
+++ b/modules/brightcove_proxy/src/EventSubscriber/BrightcoveProxyInitSubscriber.php
@@ -4,10 +4,10 @@ declare(strict_types = 1);
 
 namespace Drupal\brightcove_proxy\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Brightcove\API\Client;
 use Drupal\Core\Config\ConfigFactory;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
 /**
@@ -35,10 +35,10 @@ class BrightcoveProxyInitSubscriber implements EventSubscriberInterface {
   /**
    * Initialize Brightcove client proxy.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   GET response event.
    */
-  public function initializeBrightcoveClientProxy(GetResponseEvent $event): void {
+  public function initializeBrightcoveClientProxy(RequestEvent $event): void {
     // Initialize proxy config for Brightcove client if enabled.
     if ($this->config->get('use_proxy')) {
       Client::$proxyUserPassword = "{$this->config->get('proxy_username')}:{$this->config->get('proxy_password')}";
diff --git a/src/Entity/BrightcoveVideo.php b/src/Entity/BrightcoveVideo.php
index b84ce14..91b392f 100644
--- a/src/Entity/BrightcoveVideo.php
+++ b/src/Entity/BrightcoveVideo.php
@@ -206,7 +206,7 @@ class BrightcoveVideo extends BrightcoveVideoPlaylistCmsEntity implements Bright
         // Prepare directory and if it was a success try to save the image.
         if ($file_system->prepareDirectory($image_dir, FileSystemInterface::MODIFY_PERMISSIONS | FileSystemInterface::CREATE_DIRECTORY)) {
           $image_name = $matches[1];
-          $file = file_save_data($image_content, "{$image_dir}/{$image_name}");
+          $file = \Drupal::service('file.repository')->writeData($image_content, "{$image_dir}/{$image_name}");
 
           // Set image if there was no error.
           if ($file !== FALSE) {
diff --git a/src/EventSubscriber/BrightcoveInitSubscriber.php b/src/EventSubscriber/BrightcoveInitSubscriber.php
index 46959cb..6be8c12 100644
--- a/src/EventSubscriber/BrightcoveInitSubscriber.php
+++ b/src/EventSubscriber/BrightcoveInitSubscriber.php
@@ -4,10 +4,10 @@ declare(strict_types = 1);
 
 namespace Drupal\brightcove\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Brightcove\API\Client;
 use Drupal\Core\Extension\ModuleExtensionList;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
 /**
@@ -35,10 +35,10 @@ class BrightcoveInitSubscriber implements EventSubscriberInterface {
   /**
    * Initialize Brightcove client proxy.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   GET response event.
    */
-  public function initializeBrightcoveClient(GetResponseEvent $event): void {
+  public function initializeBrightcoveClient(RequestEvent $event): void {
     Client::$consumer = 'Drupal/' . \Drupal::VERSION . ' Brightcove/' . ($this->moduleExtensionList->getExtensionInfo('brightcove')['version'] ?: 'dev');
   }
 
diff --git a/src/EventSubscriber/RedirectResponseSubscriber.php b/src/EventSubscriber/RedirectResponseSubscriber.php
index 8f06d86..f2b0dce 100644
--- a/src/EventSubscriber/RedirectResponseSubscriber.php
+++ b/src/EventSubscriber/RedirectResponseSubscriber.php
@@ -4,10 +4,10 @@ declare(strict_types = 1);
 
 namespace Drupal\brightcove\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\brightcove\Services\SessionManagerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -50,10 +50,10 @@ final class RedirectResponseSubscriber implements EventSubscriberInterface {
   /**
    * Handles ignore destination event.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The response event.
    */
-  public function checkIgnoreDestination(FilterResponseEvent $event): void {
+  public function checkIgnoreDestination(ResponseEvent $event): void {
     if ($event->getResponse() instanceof RedirectResponse) {
       $request = $event->getRequest();
 
