modules/contrib/entity_activity/entity_activity.install
modules/contrib/entity_activity/entity_activity.views.inc
modules/contrib/entity_activity/modules/entity_activity_mail/src/ReportService.php
modules/contrib/entity_activity/src/Annotation/LogGenerator.php
modules/contrib/entity_activity/src/Event/LogEvent.php
modules/contrib/entity_activity/src/LogStorageInterface.php
modules/contrib/entity_activity/src/Plugin/views/field/LogSourceEntity.php
modules/contrib/entity_activity/modules/entity_activity_mail/entity_activity_mail.install
modules/contrib/entity_activity/tests/modules/entity_activity_test/entity_activity_test.install
modules/contrib/entity_activity/src/Controller/EntityActivityBaseController.php
modules/contrib/entity_activity/src/Plugin/Block/SubscribeOnBlock.php
modules/contrib/entity_activity/src/Event/LogEvents.php
modules/contrib/entity_activity/src/Event/SubscriptionEvent.php
modules/contrib/entity_activity/src/Event/SubscriptionEvents.php
modules/contrib/entity_activity/src/EventSubscriber/EntityActivitySubscriber.php
modules/contrib/entity_activity/modules/entity_activity_mail/entity_activity_mail.module
modules/contrib/entity_activity/tests/modules/entity_activity_test/entity_activity_test.module
modules/contrib/entity_activity/tests/src/Functional/EntityActivityBrowserTest.php
modules/contrib/entity_activity/entity_activity.module
modules/contrib/entity_activity/src/Form/GeneratorDeleteForm.php
modules/contrib/entity_activity/modules/entity_activity_mail/src/EventSubscriber/LogReportSubscriber.php
modules/contrib/entity_activity/src/Plugin/views/field/SubscriptionSourceEntity.php
modules/contrib/entity_activity/src/Form/GeneratorDisableForm.php
modules/contrib/entity_activity/src/Routing/EntityActivityRoutes.php
modules/contrib/entity_activity/modules/entity_activity_mail/src/Form/SettingsForm.php
modules/contrib/entity_activity/src/Plugin/Block/UserLogBlock.php
modules/contrib/entity_activity/src/Form/GeneratorDuplicateForm.php
modules/contrib/entity_activity/src/Form/GeneratorEnableForm.php
modules/contrib/entity_activity/src/Controller/EntityActivityBaseControllerInterface.php
modules/contrib/entity_activity/src/Controller/ListSubscribersController.php
modules/contrib/entity_activity/src/Form/GeneratorForm.php
modules/contrib/entity_activity/src/Routing/RouteSubscriber.php
modules/contrib/entity_activity/src/SubscriptionAccessControlHandler.php
modules/contrib/entity_activity/modules/entity_activity_mail/src/ReportServiceInterface.php
modules/contrib/entity_activity/src/SubscriptionHtmlRouteProvider.php
modules/contrib/entity_activity/modules/entity_activity_mail/tests/src/Functional/EntityActivityMailBrowserTest.php
modules/contrib/entity_activity/entity_activity.tokens.inc
modules/contrib/entity_activity/src/Controller/LogController.php
modules/contrib/entity_activity/src/SubscriptionListBuilder.php
modules/contrib/entity_activity/modules/entity_activity_mail/src/MailHandler.php
modules/contrib/entity_activity/src/Form/LogSettingsForm.php
modules/contrib/entity_activity/src/SubscriptionStorage.php
modules/contrib/entity_activity/src/Form/SettingsForm.php
modules/contrib/entity_activity/src/Plugin/Derivative/ListSubscribersLocalTasks.php
modules/contrib/entity_activity/src/Plugin/Field/FieldFormatter/LogReadFormatter.php
modules/contrib/entity_activity/modules/entity_activity_mail/src/MailHandlerInterface.php
modules/contrib/entity_activity/modules/entity_activity_mail/src/Plugin/QueueWorker/PrepareReportWorker.php
modules/contrib/entity_activity/src/Controller/SubscriptionController.php
modules/contrib/entity_activity/src/SubscriptionStorageInterface.php
modules/contrib/entity_activity/modules/entity_activity_mail/src/Plugin/QueueWorker/ReportWorker.php
modules/contrib/entity_activity/src/Form/SubscriptionSettingsForm.php
modules/contrib/entity_activity/src/GeneratorHtmlRouteProvider.php
modules/contrib/entity_activity/src/Entity/Generator.php
modules/contrib/entity_activity/src/GeneratorListBuilder.php
modules/contrib/entity_activity/src/Plugin/LogGenerator/BrokenLogGenerator.php
modules/contrib/entity_activity/src/Plugin/LogGenerator/CommentLogGenerator.php
modules/contrib/entity_activity/src/Plugin/LogGenerator/NodeLogGenerator.php
modules/contrib/entity_activity/src/Plugin/LogGenerator/TermLogGenerator.php
modules/contrib/entity_activity/src/Plugin/LogGenerator/UserLogGenerator.php
modules/contrib/entity_activity/src/Plugin/LogGeneratorBase.php
modules/contrib/entity_activity/src/Entity/GeneratorInterface.php
modules/contrib/entity_activity/src/Entity/Log.php
modules/contrib/entity_activity/src/Interval.php
modules/contrib/entity_activity/tests/src/Functional/EntityActivityBrowserTestBase.php
modules/contrib/entity_activity/src/LogAccessControlHandler.php
modules/contrib/entity_activity/src/LogHtmlRouteProvider.php
modules/contrib/entity_activity/src/LogListBuilder.php
modules/contrib/entity_activity/src/LogStorage.php
modules/contrib/entity_activity/src/Entity/LogInterface.php
modules/contrib/entity_activity/src/Entity/LogViewsData.php
modules/contrib/entity_activity/src/Entity/Subscription.php
modules/contrib/entity_activity/tests/src/FunctionalJavascript/EntityActivityWebDriverTest.php
modules/contrib/entity_activity/src/Entity/SubscriptionInterface.php
modules/contrib/entity_activity/src/Entity/SubscriptionViewsData.php
modules/contrib/entity_activity/src/EntityActivityContentEntityStorage.php
modules/contrib/entity_activity/modules/entity_activity_mass_subscribe/entity_activity_mass_subscribe.module
modules/contrib/entity_activity/modules/entity_activity_mass_subscribe/src/Access/MassSubscribeAccess.php
modules/contrib/entity_activity/modules/entity_activity_mass_subscribe/src/Form/MassSubscribeForm.php
modules/contrib/entity_activity/tests/src/FunctionalJavascript/EntityActivityWebDriverTestBase.php
modules/contrib/entity_activity/src/EntityActivityManager.php
modules/contrib/entity_activity/tests/src/Traits/EntityActivityBrowserTestTrait.php
modules/contrib/entity_activity/src/Plugin/LogGeneratorInterface.php
modules/contrib/entity_activity/src/Plugin/LogGeneratorManager.php
modules/contrib/entity_activity/src/Plugin/LogGeneratorManagerInterface.php
modules/contrib/entity_activity/src/Plugin/LogGeneratorPluginCollection.php
modules/contrib/entity_activity/src/Plugin/QueueWorker/LogGeneratorWorker.php
modules/contrib/entity_activity/src/Plugin/QueueWorker/PurgeLogWorker.php
modules/contrib/entity_activity/src/Plugin/views/area/LogReadAll.php
modules/contrib/entity_activity/src/EntityActivityManagerInterface.php
modules/contrib/entity_activity/src/Event/EntityActivityEvent.php
modules/contrib/entity_activity/src/Event/EntityActivityEvents.php
modules/contrib/entity_activity/src/Event/EntityActivitySupportEntityTypeEvent.php
modules/contrib/entity_activity/src/Plugin/views/area/LogTotalUnread.php
modules/contrib/entity_activity/src/Plugin/views/field/LogReferenceSourceEntity.php
modules/contrib/entity_activity/modules/entity_activity_mass_subscribe/src/MassSubscribeBatch.php
modules/contrib/entity_activity/modules/entity_activity_mass_subscribe/src/Plugin/Derivative/MassSubscribeLocalTasks.php
modules/contrib/entity_activity/modules/entity_activity_mass_subscribe/src/Routing/MassSubscribeRoutes.php
modules/contrib/entity_activity/src/Access/ListSubscribersAccess.php
modules/contrib/entity_activity/src/Access/LogAccessCheck.php
modules/contrib/entity_activity/src/Access/SubscriptionAccessCheck.php
modules/contrib/entity_activity/src/Access/UserViewsAccess.php

12 files with changes
=====================

1) modules/contrib/entity_activity/src/GeneratorListBuilder.php:45

    ---------- begin diff ----------
@@ @@
       '#items' => empty($data['generators']) ? [$this->t('None')] : $data['generators'],
     ];

-    $row['generators'] = render($data['generators']);
+    $row['generators'] = \Drupal::service('renderer')->render($data['generators']);
     $row['status'] = $entity->status() ? $this->t('Enabled') : $this->t('Disabled');

     return $row + parent::buildRow($entity);
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_activity/src/Event/SubscriptionEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\entity_activity\Entity\SubscriptionInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the log event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_activity/src/Event/LogEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\entity_activity\Entity\LogInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the log event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entity_activity/tests/src/FunctionalJavascript/EntityActivityWebDriverTestBase.php:139

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->entityTypeManager = $this->container->get('entity_type.manager');
     $this->subscriptionStorage = $this->entityTypeManager->getStorage('entity_activity_subscription');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity_activity/tests/src/FunctionalJavascript/EntityActivityWebDriverTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->advancedUser);
   }
@@ @@
     $this->article1->set('body', 'This is the value of Article 1 body')->save();

     $logs = $this->logStorage->loadMultipleUnreadByOwner($this->advancedUser);
-    $this->assertEqual(1, count($logs));
+    $this->assertEquals(1, count($logs));

     $this->drupalGet('user/' . $this->advancedUser->id() . '/logs');
     $this->waitForAjaxToFinish();
@@ @@
     $this->waitForAjaxToFinish();

     $logs = $this->logStorage->loadMultipleUnreadByOwner($this->advancedUser);
-    $this->assertEqual(0, count($logs));
+    $this->assertEquals(0, count($logs));

     $logs = $this->logStorage->loadMultipleByOwner($this->advancedUser);
-    $this->assertEqual(1, count($logs));
+    $this->assertEquals(1, count($logs));

     $page->pressButton('Remove');
     $this->waitForAjaxToFinish();
@@ @@
     $page = $this->getSession()->getPage();
     $this->assertNotTrue($page->hasContent('The content Article 1 has been updated'));
     $logs = $this->logStorage->loadMultipleByOwner($this->advancedUser);
-    $this->assertEqual(0, count($logs));
+    $this->assertEquals(0, count($logs));

     // Check subscriptions page and Remove button.
     $this->drupalGet('user/' . $this->advancedUser->id() . '/subscriptions');
@@ @@
     $this->article1->set('body', 'This is the value of Article 1 body')->save();

     $logs = $this->logStorage->loadMultipleUnreadByOwner($this->user1);
-    $this->assertEqual(1, count($logs));
+    $this->assertEquals(1, count($logs));

     $this->drupalGet('user/' . $this->user1->id() . '/logs');
     $this->waitForAjaxToFinish();
@@ @@
     $this->waitForAjaxToFinish();

     $logs = $this->logStorage->loadMultipleUnreadByOwner($this->user1);
-    $this->assertEqual(0, count($logs));
+    $this->assertEquals(0, count($logs));

     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(1, count($logs));
+    $this->assertEquals(1, count($logs));

     $page->pressButton('Remove');
     $this->waitForAjaxToFinish();
@@ @@
     $page = $this->getSession()->getPage();
     $this->assertNotTrue($page->hasContent('The content Article 1 has been updated'));
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(0, count($logs));
+    $this->assertEquals(0, count($logs));

     // Check subscriptions page and Remove button.
     $this->drupalGet('user/' . $this->user1->id() . '/subscriptions');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity_activity/tests/src/Functional/EntityActivityBrowserTestBase.php:153

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->entityTypeManager = $this->container->get('entity_type.manager');
     $this->subscriptionStorage = $this->entityTypeManager->getStorage('entity_activity_subscription');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity_activity/tests/src/Functional/EntityActivityBrowserTest.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->subscription1 = $this->createSubscription($this->user1, $this->term1);
     $this->subscription2 = $this->createSubscription($this->user1, $this->user2);
@@ @@
     $this->drupalGet($this->article1->toUrl());
     $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->buttonExists('Subscribe');
-    $this->assertText('Subscribe');
+    $this->assertSession()->pageTextContains('Subscribe');

     $this->drupalGet('user/' . $this->user1->id() . '/subscriptions');
     $this->assertSession()->statusCodeEquals(200);
@@ @@
     $this->drupalLogin($this->advancedUser);
     $this->drupalGet('taxonomy/term/' . $this->term1->id() . '/list-subscribers');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText($this->user1->getDisplayName());
+    $this->assertSession()->pageTextContains($this->user1->getDisplayName());

     $this->drupalLogout();
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('taxonomy/term/' . $this->term1->id() . '/list-subscribers');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText($this->user1->getDisplayName());
+    $this->assertSession()->pageTextContains($this->user1->getDisplayName());

     $this->drupalLogout();
     $this->drupalLogin($this->user1);
     $this->drupalGet($this->term1->toUrl());
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertNoText('Subscribers');
+    $this->assertSession()->pageTextNotContains('Subscribers');
     $this->drupalGet('taxonomy/term/' . $this->term1->id() . '/list-subscribers');
     $this->assertSession()->statusCodeEquals(403);
   }
@@ @@
   public function testGenerationLogsByReference() {
     // User 1 has a subscription on User 2 and on Term 1.
     $subscriptions = $this->subscriptionStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(2, count($subscriptions));
+    $this->assertEquals(2, count($subscriptions));
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(0, count($logs));
+    $this->assertEquals(0, count($logs));

     $this->drupalLogin($this->user2);
     $new_article = Node::create([
@@ @@
     $new_article->save();

     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(1, count($logs));
+    $this->assertEquals(1, count($logs));

     $this->drupalLogout();
     $this->drupalLogin($this->user1);
     $this->drupalGet('user/' . $this->user1->id() . '/logs');
-    $this->assertText('The content New Article has been created by ' . $this->user2->getDisplayName() . '. Log with the generator test_insert.');
+    $this->assertSession()->pageTextContains('The content New Article has been created by ' . $this->user2->getDisplayName() . '. Log with the generator test_insert.');

     $this->drupalLogout();
     $this->drupalLogin($this->user2);
@@ @@

     // $this->logStorage->resetCache();
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(2, count($logs));
+    $this->assertEquals(2, count($logs));

     $this->drupalLogout();
     $this->drupalLogin($this->user1);
     $this->drupalGet('user/' . $this->user1->id() . '/logs');
-    $this->assertText('The content Article 1 has been updated by ' . $this->user2->getDisplayName() . '. Log with the generator test_update_term.');
+    $this->assertSession()->pageTextContains('The content Article 1 has been updated by ' . $this->user2->getDisplayName() . '. Log with the generator test_update_term.');

     $this->drupalLogout();
     $this->drupalLogin($this->user2);
@@ @@
     $new_article->delete();

     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(3, count($logs));
+    $this->assertEquals(3, count($logs));

     $this->drupalLogout();
     $this->drupalLogin($this->user1);
     $this->drupalGet('user/' . $this->user1->id() . '/logs');
-    $this->assertText('The content New Article has been deleted by ' . $this->user2->getDisplayName() . '. Log with the generator test_delete.');
+    $this->assertSession()->pageTextContains('The content New Article has been deleted by ' . $this->user2->getDisplayName() . '. Log with the generator test_delete.');

     $config = \Drupal::configFactory()->getEditable('entity_activity.generator.test_insert');
     $config->set('generators.node.use_cron', TRUE);
@@ @@
     $another_article->save();

     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(3, count($logs));
+    $this->assertEquals(3, count($logs));
     $this->assertEquals(1, \Drupal::queue('entity_activity_log_generator_worker')->numberOfItems());
     $this->container->get('cron')->run();

     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(4, count($logs));
+    $this->assertEquals(4, count($logs));
     $this->assertEquals(0, \Drupal::queue('entity_activity_log_generator_worker')->numberOfItems());

     $this->drupalLogout();
     $this->drupalLogin($this->user1);
     $this->drupalGet('user/' . $this->user1->id() . '/logs');
-    $this->assertText('The content Another Article has been created by ' . $this->user2->getDisplayName() . '. Log with the generator test_insert.');
+    $this->assertSession()->pageTextContains('The content Another Article has been created by ' . $this->user2->getDisplayName() . '. Log with the generator test_insert.');
     $this->drupalLogout();

     // Delete user 1.
@@ @@
     $edit = [];
     $edit[$title_key] = 'Another Article';
     $edit[$body_key] = 'The body of the another article';
-    $this->drupalPostForm('node/add/article', $edit, $this->t('Save'));
-    $this->assertText('Another Article');
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->pageTextContains('Another Article');
     $this->assertSession()->statusCodeEquals(200);

     // Check that the node exists in the database.
@@ @@
     }

     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(5, count($logs));
+    $this->assertEquals(5, count($logs));
     $time = $this->container->get('datetime.time');
     $tree_day_ago = $time->getRequestTime() - (86400 * 3);
     $log = reset($logs);
@@ @@
     $log->set('created', $tree_day_ago)->save();
     $this->container->get('cron')->run();
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(4, count($logs));
+    $this->assertEquals(4, count($logs));

     $purge = [
       'method' => 'time',
@@ @@
     $log->set('created', $tree_day_ago)->save();
     $this->container->get('cron')->run();
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(4, count($logs));
+    $this->assertEquals(4, count($logs));
     $log->set('read', TRUE)->save();
     $this->container->get('cron')->run();
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(3, count($logs));
+    $this->assertEquals(3, count($logs));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity_activity/src/Event/EntityActivitySupportEntityTypeEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Defines the log event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entity_activity/src/Event/EntityActivityEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_activity\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the log event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/entity_activity/src/EntityActivityManager.php:205

    ---------- begin diff ----------
@@ @@
         // subscriptions to these entities which can not have a "subscribe on"
         // button.
         $support_entity_type = new EntityActivitySupportEntityTypeEvent($entity_type_id);
-        $this->eventDispatcher->dispatch(EntityActivityEvents::ENTITY_ACTIVITY_SUPPORT_ENTITY_TYPE, $support_entity_type);
+        $this->eventDispatcher->dispatch($support_entity_type, EntityActivityEvents::ENTITY_ACTIVITY_SUPPORT_ENTITY_TYPE);
         if ($support_entity_type->isSupported()) {
           continue;
         }
@@ @@
     $is_enabled = in_array($entity->getEntityTypeId(), $entity_type_enabled);
     if ($is_enabled) {
       $event = new EntityActivityEvent($entity);
-      $this->eventDispatcher->dispatch($event_name, $event);
+      $this->eventDispatcher->dispatch($event, $event_name);
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


11) modules/contrib/entity_activity/src/EntityActivityContentEntityStorage.php:80

    ---------- begin diff ----------
@@ @@

     $event_class = $this->entityType->getHandlerClass('event');
     if ($event_class) {
-      $this->eventDispatcher->dispatch($this->getEventName($hook), new $event_class($entity));
+      $this->eventDispatcher->dispatch(new $event_class($entity), $this->getEventName($hook));
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/entity_activity/modules/entity_activity_mail/tests/src/Functional/EntityActivityMailBrowserTest.php:67

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->reportService = $this->container->get('entity_activity_mail.report');
     // User 1 has a subscription on User 2 and on Term 1.
@@ @@
     $new_article->save();

     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(1, count($logs));
+    $this->assertEquals(1, count($logs));
     $emails = $this->getMails();
     $this->assertCount(1, $emails);
     $email = end($emails);
@@ @@
     $new_article->save();

     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(2, count($logs));
+    $this->assertEquals(2, count($logs));
     $emails = $this->getMails();
     // No new email has been sent yet.
     $this->assertCount(1, $emails);
@@ @@
     $this->drupalLogout();

     $logs1 = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(2, count($logs1));
+    $this->assertEquals(2, count($logs1));
     $logs1_unsent = $this->reportService->getUnsentLogsPerUserId($this->user1->id());
     $this->assertCount(2, $logs1_unsent);

     $logs2 = $this->logStorage->loadMultipleByOwner($this->user2);
-    $this->assertEqual(2, count($logs2));
+    $this->assertEquals(2, count($logs2));
     $logs2_unsent = $this->reportService->getUnsentLogsPerUserId($this->user2->id());
     $this->assertCount(2, $logs2_unsent);

@@ @@
     $this->drupalLogout();

     $logs1 = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(2, count($logs1));
+    $this->assertEquals(2, count($logs1));
     $logs1_unsent = $this->reportService->getUnsentLogsPerUserId($this->user1->id());
     $this->assertCount(2, $logs1_unsent);

     $logs2 = $this->logStorage->loadMultipleByOwner($this->user2);
-    $this->assertEqual(2, count($logs2));
+    $this->assertEquals(2, count($logs2));
     $logs2_unsent = $this->reportService->getUnsentLogsPerUserId($this->user2->id());
     $this->assertCount(2, $logs2_unsent);

@@ @@
     $logs1 = $this->logStorage->loadMultipleByOwner($this->user1);
     $this->assertCount(2, $logs1);
     $logs1_unread = $this->logStorage->totalUnreadByOwner($this->user1);
-    $this->assertEqual(2, $logs1_unread);
+    $this->assertEquals(2, $logs1_unread);

     $logs2 = $this->logStorage->loadMultipleByOwner($this->user2);
     $this->assertCount(2, $logs2);
     $logs2_unread = $this->logStorage->totalUnreadByOwner($this->user2);
-    $this->assertEqual(2, $logs2_unread);
+    $this->assertEquals(2, $logs2_unread);

     $emails = $this->getMails();
     $this->assertCount(0, $emails);
@@ @@
     $this->assertCount(2, $emails);

     $logs1_unread = $this->logStorage->totalUnreadByOwner($this->user1);
-    $this->assertEqual(0, $logs1_unread);
+    $this->assertEquals(0, $logs1_unread);

     $logs2_unread = $this->logStorage->totalUnreadByOwner($this->user2);
-    $this->assertEqual(0, $logs2_unread);
+    $this->assertEquals(0, $logs2_unread);

   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 12 files have been changed by Rector                                      

