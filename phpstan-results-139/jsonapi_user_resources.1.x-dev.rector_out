modules/contrib/jsonapi_user_resources/src/EventSubscriber/PasswordResetSubscriber.php
modules/contrib/jsonapi_user_resources/tests/src/Functional/HypermediaIntegrationTest.php
modules/contrib/jsonapi_user_resources/src/EventSubscriber/UserRegistrationSubscriber.php
modules/contrib/jsonapi_user_resources/src/Events/PasswordResetEvent.php
modules/contrib/jsonapi_user_resources/src/Events/RegistrationEvent.php
modules/contrib/jsonapi_user_resources/src/Events/UserResourcesEvents.php
modules/contrib/jsonapi_user_resources/src/Plugin/jsonapi_hypermedia/LinkProvider/AuthenticatedAsLinkProvider.php
modules/contrib/jsonapi_user_resources/tests/src/Functional/PasswordResetTest.php
modules/contrib/jsonapi_user_resources/src/Resource/PasswordReset.php
modules/contrib/jsonapi_user_resources/tests/src/Functional/PasswordUpdateTest.php
modules/contrib/jsonapi_user_resources/src/Resource/PasswordUpdate.php
modules/contrib/jsonapi_user_resources/src/Resource/Registration.php
modules/contrib/jsonapi_user_resources/tests/src/Functional/RegistrationTest.php
modules/contrib/jsonapi_user_resources/src/Routing/Routes.php
modules/contrib/jsonapi_user_resources/tests/modules/jsonapi_user_resources_test/src/EventSubscriber/RegistrationSubscriber.php

7 files with changes
====================

1) modules/contrib/jsonapi_user_resources/src/Resource/Registration.php:105

    ---------- begin diff ----------
@@ @@

     $document = $this->getDocumentFromRequest($request);
     $event = new RegistrationEvent($created_entity, $document);
-    $this->eventDispatcher->dispatch(UserResourcesEvents::REGISTRATION_VALIDATE, $event);
+    $this->eventDispatcher->dispatch($event, UserResourcesEvents::REGISTRATION_VALIDATE);
   }

   /**
@@ @@
     );
     assert($account instanceof UserInterface);
     $event = new RegistrationEvent($account, $document);
-    $this->eventDispatcher->dispatch(UserResourcesEvents::REGISTRATION_COMPLETE, $event);
+    $this->eventDispatcher->dispatch($event, UserResourcesEvents::REGISTRATION_COMPLETE);
     return $response;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/jsonapi_user_resources/src/Resource/PasswordReset.php:113

    ---------- begin diff ----------
@@ @@
     $this->logger->notice('A password reset has been requested for %name (%email).', ['%name' => $account->getAccountName(), '%email' => $account->getEmail()]);

     $event = new PasswordResetEvent($account, $document);
-    $this->eventDispatcher->dispatch(UserResourcesEvents::PASSWORD_RESET, $event);
+    $this->eventDispatcher->dispatch($event, UserResourcesEvents::PASSWORD_RESET);
     return new ResourceResponse(new JsonApiDocumentTopLevel(
       new OmittedData([]),
       new NullIncludedData(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/jsonapi_user_resources/src/Events/RegistrationEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_user_resources\Events;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the event for reacting to user account registrations.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/jsonapi_user_resources/src/Events/PasswordResetEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_user_resources\Events;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the event for reacting to user password resets.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/jsonapi_user_resources/tests/src/Functional/RegistrationTest.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->config('jsonapi.settings')->set('read_only', FALSE)->save(TRUE);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/jsonapi_user_resources/tests/src/Functional/PasswordUpdateTest.php:49

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->config('jsonapi.settings')->set('read_only', FALSE)->save(TRUE);
     $this->sut = $this->createUser([], 'sut');
@@ @@
       'data' => [
         'type' => 'user--user',
         'attributes' => [
-          'pass' => user_password(),
+          'pass' => \Drupal::service('password_generator')->generate(),
           'hash' => user_pass_rehash($this->sut, $timestamp),
           'timestamp' => $timestamp,
         ],
@@ @@
     $this->assertEquals(200, $response->getStatusCode(), $body);
     $this->sut = $this->reloadEntity($this->sut);
     $this->assertTrue($this->sut->isActive());
-    $this->assertNotEqual($this->sut->getPassword(), $previous_password);
+    $this->assertNotEquals($this->sut->getPassword(), $previous_password);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertNotEqualRector
 * UserPasswordRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/jsonapi_user_resources/tests/src/Functional/PasswordResetTest.php:46

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->config('jsonapi.settings')->set('read_only', FALSE)->save(TRUE);
     $this->sut = $this->createUser([], 'sut');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

