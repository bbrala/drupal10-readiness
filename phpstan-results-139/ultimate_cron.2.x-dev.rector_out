modules/contrib/ultimate_cron/src/Annotation/LauncherPlugin.php
modules/contrib/ultimate_cron/src/Form/CronJobForm.php
modules/contrib/ultimate_cron/src/Plugin/ultimate_cron/Scheduler/SchedulerBase.php
modules/contrib/ultimate_cron/tests/src/Functional/CronJobInstallTest.php
modules/contrib/ultimate_cron/src/Annotation/LoggerPlugin.php
modules/contrib/ultimate_cron/src/Annotation/SchedulerPlugin.php
modules/contrib/ultimate_cron/src/Commands/UltimateCronCommands.php
modules/contrib/ultimate_cron/src/Plugin/ultimate_cron/Scheduler/Simple.php
modules/contrib/ultimate_cron/src/PluginCleanupInterface.php
modules/contrib/ultimate_cron/src/Progress/Progress.php
modules/contrib/ultimate_cron/src/Progress/ProgressInterface.php
modules/contrib/ultimate_cron/src/Progress/ProgressMemcache.php
modules/contrib/ultimate_cron/src/ProxyClass/UltimateCron.php
modules/contrib/ultimate_cron/src/QueueSettings.php
modules/contrib/ultimate_cron/src/Form/GeneralSettingsForm.php
modules/contrib/ultimate_cron/src/Form/LauncherSettingsForm.php
modules/contrib/ultimate_cron/tests/src/Functional/LoggerWebTest.php
modules/contrib/ultimate_cron/src/Form/LoggerSettingsForm.php
modules/contrib/ultimate_cron/src/Form/SchedulerSettingsForm.php
modules/contrib/ultimate_cron/src/Launcher/LauncherBase.php
modules/contrib/ultimate_cron/tests/src/Kernel/CronJobKernelTest.php
modules/contrib/ultimate_cron/src/Controller/JobController.php
modules/contrib/ultimate_cron/src/QueueWorker.php
modules/contrib/ultimate_cron/src/Launcher/LauncherInterface.php
modules/contrib/ultimate_cron/tests/src/Kernel/CronJobTest.php
modules/contrib/ultimate_cron/src/Launcher/LauncherManager.php
modules/contrib/ultimate_cron/src/Lock/Lock.php
modules/contrib/ultimate_cron/src/Scheduler/SchedulerInterface.php
modules/contrib/ultimate_cron/src/Scheduler/SchedulerManager.php
modules/contrib/ultimate_cron/src/CronJobAccessControlHandler.php
modules/contrib/ultimate_cron/tests/src/Kernel/LauncherPluginTest.php
modules/contrib/ultimate_cron/src/Settings.php
modules/contrib/ultimate_cron/src/Signal/SignalCache.php
modules/contrib/ultimate_cron/src/CronJobDiscovery.php
modules/contrib/ultimate_cron/tests/src/Kernel/LoggerPluginTest.php
modules/contrib/ultimate_cron/src/Signal/SignalInterface.php
modules/contrib/ultimate_cron/src/TaggedSettings.php
modules/contrib/ultimate_cron/src/UltimateCron.php
modules/contrib/ultimate_cron/tests/src/Kernel/SchedulerPluginTest.php
modules/contrib/ultimate_cron/tests/src/Kernel/UltimateCronQueueTest.php
modules/contrib/ultimate_cron/src/CronJobInterface.php
modules/contrib/ultimate_cron/src/UltimateCronDatabaseFactory.php
modules/contrib/ultimate_cron/src/Lock/LockInterface.php
modules/contrib/ultimate_cron/src/Lock/LockMemcache.php
modules/contrib/ultimate_cron/src/UltimateCronServiceProvider.php
modules/contrib/ultimate_cron/src/CronJobListBuilder.php
modules/contrib/ultimate_cron/templates/page-admin-settings-cron-log.tpl.php
modules/contrib/ultimate_cron/tests/src/Functional/CronJobFormTest.php
modules/contrib/ultimate_cron/src/Logger/LogEntry.php
modules/contrib/ultimate_cron/src/CronPlugin.php
modules/contrib/ultimate_cron/tests/src/Unit/RulesUnitTest.php
modules/contrib/ultimate_cron/src/Logger/LoggerBase.php
modules/contrib/ultimate_cron/src/Logger/LoggerInterface.php
modules/contrib/ultimate_cron/src/Logger/LoggerManager.php
modules/contrib/ultimate_cron/src/Logger/WatchdogLogger.php
modules/contrib/ultimate_cron/src/Plugin/ultimate_cron/Launcher/SerialLauncher.php
modules/contrib/ultimate_cron/src/CronPluginMultiple.php
modules/contrib/ultimate_cron/src/CronRule.php
modules/contrib/ultimate_cron/src/Plugin/ultimate_cron/Logger/CacheLogger.php
modules/contrib/ultimate_cron/tests/ultimate_cron_logger_test/ultimate_cron_logger_test.module
modules/contrib/ultimate_cron/ultimate_cron.api.php
modules/contrib/ultimate_cron/ultimate_cron.drush.inc
modules/contrib/ultimate_cron/src/Plugin/ultimate_cron/Logger/DatabaseLogger.php
modules/contrib/ultimate_cron/ultimate_cron.install
modules/contrib/ultimate_cron/ultimate_cron.module
modules/contrib/ultimate_cron/src/Plugin/ultimate_cron/Scheduler/Crontab.php
modules/contrib/ultimate_cron/ultimate_cron.nagios.inc
modules/contrib/ultimate_cron/src/CronSignal.php
modules/contrib/ultimate_cron/src/Entity/CronJob.php
modules/contrib/ultimate_cron/src/Form/CronJobDisableForm.php
modules/contrib/ultimate_cron/src/Form/CronJobEnableForm.php

16 files with changes
=====================

1) modules/contrib/ultimate_cron/tests/src/Functional/CronJobFormTest.php:60

    ---------- begin diff ----------
@@ @@

     // Cron Jobs overview.
     $this->drupalGet('admin/config/system/cron/jobs');
-    $this->assertResponse('200');
+    $this->assertSession()->statusCodeEquals('200');

     // Check for the default schedule message in Job list.
-    $this->assertText('Every 15 min');
+    $this->assertSession()->pageTextContains('Every 15 min');
     // Check for the Last Run default value.
-    $this->assertText('Never');
+    $this->assertSession()->pageTextContains('Never');

     // Start editing added job.
     $this->drupalGet('admin/config/system/cron/jobs/manage/' . $this->jobId);
-    $this->assertResponse('200');
+    $this->assertSession()->statusCodeEquals('200');

     // Set new cron job configuration and save the old job name.
     $job = CronJob::load($this->jobId);
@@ @@
     $edit = array('title' => $this->jobName);

     // Save the new job.
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     // Assert the edited Job hasn't run yet.
-    $this->assertText('Never');
+    $this->assertSession()->pageTextContains('Never');
     // Assert messenger service message for successful updated job.
-    $this->assertText(t('job @name has been updated.', array('@name' => $this->jobName)));
+    $this->assertSession()->pageTextContains(t('job @name has been updated.', array('@name' => $this->jobName)));

     // Run the Jobs.
     $this->cronRun();
@@ @@

     // Assert the cron jobs have been run by checking the time.
     $this->drupalGet('admin/config/system/cron/jobs');
-    $this->assertText(\Drupal::service('date.formatter')->format(\Drupal::state()->get('system.cron_last'), 'short'), 'Created Cron jobs have been run.');
+    $this->assertSession()->pageTextContains(\Drupal::service('date.formatter')->format(\Drupal::state()->get('system.cron_last'), 'short'));

     // Check that all jobs have been run.
-    $this->assertNoText("Never");
+    $this->assertSession()->pageTextNotContains("Never");

     // Assert cron job overview for recently updated job.
     $this->drupalGet('admin/config/system/cron/jobs');
-    $this->assertNoText($old_job_name);
-    $this->assertText($this->jobName);
+    $this->assertSession()->pageTextNotContains($old_job_name);
+    $this->assertSession()->pageTextContains($this->jobName);

     // Change time when cron runs, check the 'Scheduled' label is updated.
     $this->clickLink(t('Edit'));
-    $this->drupalPostForm(NULL, ['scheduler[configuration][rules][0]' => '0+@ */6 * * *'], t('Save'));
-    $this->assertText('Every 6 hours');
+    $this->submitForm(['scheduler[configuration][rules][0]' => '0+@ */6 * * *'], t('Save'));
+    $this->assertSession()->pageTextContains('Every 6 hours');

     // Test disabling a job.
     $this->clickLink(t('Disable'), 0);
-    $this->assertText('This cron job will no longer be executed.');
-    $this->drupalPostForm(NULL, NULL, t('Disable'));
+    $this->assertSession()->pageTextContains('This cron job will no longer be executed.');
+    $this->submitForm(NULL, t('Disable'));

     // Assert messenger service message for successful disabled job.
-    $this->assertText(t('Disabled cron job @name.', array('@name' => $this->jobName)));
+    $this->assertSession()->pageTextContains(t('Disabled cron job @name.', array('@name' => $this->jobName)));
     $this->drupalGet('admin/config/system/cron/jobs');
     $this->assertFieldByXPath('//table/tbody/tr[1]/td[6]', 'Disabled');
     $this->assertFieldByXPath('//table/tbody/tr[1]/td[8]/div/div/ul/li[1]/a', 'Enable');
@@ @@

     // Test enabling a job.
     $this->clickLink(t('Enable'), 0);
-    $this->assertText('This cron job will be executed again.');
-    $this->drupalPostForm(NULL, NULL, t('Enable'));
+    $this->assertSession()->pageTextContains('This cron job will be executed again.');
+    $this->submitForm(NULL, t('Enable'));

     // Assert messenger service message for successful enabled job.
-    $this->assertText(t('Enabled cron job @name.', array('@name' => $this->jobName)));
+    $this->assertSession()->pageTextContains(t('Enabled cron job @name.', array('@name' => $this->jobName)));
     $this->drupalGet('admin/config/system/cron/jobs');
-    $expected_checkmark_image_url = file_url_transform_relative(file_create_url('core/misc/icons/73b355/check.svg'));
+    $expected_checkmark_image_url = \Drupal::service('file_url_generator')->generateString('core/misc/icons/73b355/check.svg');
     $this->assertEquals($expected_checkmark_image_url, $this->xpath('//table/tbody/tr[1]/td[6]/img')[0]->getAttribute('src'));
     $this->assertFieldByXPath('//table/tbody/tr[1]/td[8]/div/div/ul/li[1]/a', 'Run');

@@ @@
     $edit = array(
       'status' => FALSE,
     );
-    $this->drupalPostForm('admin/config/system/cron/jobs/manage/' . $this->jobId, $edit, t('Save'));
+    $this->drupalGet('admin/config/system/cron/jobs/manage/' . $this->jobId);
+    $this->submitForm($edit, t('Save'));
     $this->assertFieldByXPath('//table/tbody/tr[1]/td[6]', 'Disabled');
     $this->assertFieldByXPath('//table/tbody/tr[1]/td[8]/div/div/ul/li[1]/a', 'Enable');
     $this->assertNoFieldByXPath('//table/tbody/tr[1]/td[8]/div/div/ul/li[1]/a', 'Run');
@@ @@
     $edit = array(
       'status' => TRUE,
     );
-    $this->drupalPostForm('admin/config/system/cron/jobs/manage/' . $this->jobId, $edit, t('Save'));
+    $this->drupalGet('admin/config/system/cron/jobs/manage/' . $this->jobId);
+    $this->submitForm($edit, t('Save'));
     $this->assertEquals($expected_checkmark_image_url, $this->xpath('//table/tbody/tr[1]/td[6]/img')[0]->getAttribute('src'));
     $this->assertFieldByXPath('//table/tbody/tr[1]/td[8]/div/div/ul/li[1]/a', 'Run');

@@ @@
     $job_configuration = array(
       'scheduler[id]' => 'crontab',
     );
-    $this->drupalPostForm(NULL, $job_configuration, t('Save'));
-    $this->drupalPostForm('admin/config/system/cron/jobs/manage/' . $this->jobId, ['scheduler[configuration][rules][0]' => '0+@ * * * *'], t('Save'));
-    $this->assertText('0+@ * * * *');
+    $this->submitForm($job_configuration, t('Save'));
+    $this->drupalGet('admin/config/system/cron/jobs/manage/' . $this->jobId);
+    $this->submitForm(['scheduler[configuration][rules][0]' => '0+@ * * * *'], t('Save'));
+    $this->assertSession()->pageTextContains('0+@ * * * *');

     // Try editing the rule to an invalid one.
     $this->clickLink('Edit');
-    $this->drupalPostForm(NULL, ['scheduler[configuration][rules][0]' => '*//15+@ *-2 * * *'], t('Save'));
-    $this->assertText('Rule is invalid');
-    $this->assertTitle('Edit job | Drupal');
+    $this->submitForm(['scheduler[configuration][rules][0]' => '*//15+@ *-2 * * *'], t('Save'));
+    $this->assertSession()->pageTextContains('Rule is invalid');
+    $this->assertSession()->titleEquals('Edit job | Drupal');

     // Assert that there is no Delete link on the details page.
-    $this->assertNoLink('Delete');
+    $this->assertSession()->linkNotExists('Delete');

     // Force a job to be invalid by changing the callback.
     $job = CronJob::load($this->jobId);
@@ @@

     // Test deleting a job (only possible if invalid cron job).
     $this->clickLink(t('Delete'), 0);
-    $this->drupalPostForm(NULL, NULL, t('Delete'));
-    $this->assertText(t('The cron job @name has been deleted.', array('@name' => $job->label())));
+    $this->submitForm(NULL, t('Delete'));
+    $this->assertSession()->pageTextContains(t('The cron job @name has been deleted.', array('@name' => $job->label())));
     $this->drupalGet('admin/config/system/cron/jobs');
-    $this->assertNoText($job->label());
+    $this->assertSession()->pageTextNotContains($job->label());

     $job = CronJob::load('ultimate_cron_cron');

@@ @@
     $xpath = $this->xpath('//tbody/tr[@class="odd"]/td');
     $start_time = \Drupal::service('date.formatter')->format($log_entry->start_time, 'custom', 'Y-m-d H:i:s');
     $end_time = \Drupal::service('date.formatter')->format($log_entry->end_time, 'custom', 'Y-m-d H:i:s');
-    $this->assertEqual($xpath[1]->getText(), $start_time);
-    $this->assertEqual($xpath[2]->getText(), $end_time);
+    $this->assertEquals($xpath[1]->getText(), $start_time);
+    $this->assertEquals($xpath[2]->getText(), $end_time);
     // The message logged depends on timing, do not hardcode that.
-    $this->assertEqual($xpath[3]->getText(), $log_entry->message ?: $log_entry->formatInitMessage());
-    $this->assertEqual($xpath[4]->getText(), '00:00');
+    $this->assertEquals($xpath[3]->getText(), $log_entry->message ?: $log_entry->formatInitMessage());
+    $this->assertEquals($xpath[4]->getText(), '00:00');

     // Assert queue cron jobs.
     $this->config('ultimate_cron.settings')
@@ @@

     \Drupal::service('ultimate_cron.discovery')->discoverCronJobs();
     $this->drupalGet('admin/config/system/cron/jobs');
-    $this->assertText('Queue: Broken queue test');
+    $this->assertSession()->pageTextContains('Queue: Broken queue test');

     $this->drupalGet('admin/config/system/cron/jobs/manage/ultimate_cron_queue_cron_queue_test_broken_queue');
-    $this->assertFieldByName('title', 'Queue: Broken queue test');
-    $this->drupalPostForm(NULL, [], 'Save');
-    $this->assertText('job Queue: Broken queue test has been updated.');
+    $this->assertSession()->fieldValueEquals('title', 'Queue: Broken queue test');
+    $this->submitForm([], 'Save');
+    $this->assertSession()->pageTextContains('job Queue: Broken queue test has been updated.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertNoLinkRector
 * AssertNoTextRector
 * AssertResponseRector
 * AssertTextRector
 * AssertTitleRector
 * FileUrlTransformRelativeRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ultimate_cron/src/TaggedSettings.php:14

    ---------- begin diff ----------
@@ @@
    * Only valid for jobs tagged with the proper tag.
    */
   public function isValid($job = NULL) {
-    return $job ? in_array($this->name, $job->hook['tags']) : \Drupal\ultimate_cron\parent::isValid();
+    return $job ? in_array($this->name, $job->hook['tags']) : parent::isValid();
   }
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/ultimate_cron/src/ProxyClass/UltimateCron.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ultimate_cron\ProxyClass {

+    use Drupal\Core\CronInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
     /**
      * Provides a proxy class for \Drupal\ultimate_cron\UltimateCron.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class UltimateCron implements \Drupal\Core\CronInterface
+    class UltimateCron implements CronInterface
     {

-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;

         /**
          * The id of the original proxied service.
@@ @@
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


4) modules/contrib/ultimate_cron/ultimate_cron.module:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Database\Database;
 /**
  * @file
  * Ultimate Cron. Extend cron functionality in Drupal.
@@ @@
  * Implements hook_help().
  *
  */
-function ultimate_cron_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
+function ultimate_cron_help($route_name, RouteMatchInterface $route_match) {
   switch ($route_name) {
     case 'help.page.ultimate_cron':
       // Return a line-break version of the module README.
@@ @@
  *   Connection target.
  */
 function _ultimate_cron_get_transactional_safe_connection() {
-  return !\Drupal::config('ultimate_cron.settings')->get('bypass_transactional_safe_connection') && \Drupal\Core\Database\Database::getConnection()->inTransaction() ? 'ultimate_cron' : 'default';
+  return !\Drupal::config('ultimate_cron.settings')->get('bypass_transactional_safe_connection') && Database::getConnection()->inTransaction() ? 'ultimate_cron' : 'default';
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


5) modules/contrib/ultimate_cron/ultimate_cron.api.php:72

    ---------- begin diff ----------
@@ @@
   $items['example_my_cron_job_1'] = array(
     'title' => t('This is my cron job #1'),
     'file' => 'example.jobs.inc',
-    'file path' => drupal_get_path('module', 'example') . '/cron',
+    'file path' => \Drupal::service('extension.list.module')->getPath('example') . '/cron',
     'callback' => 'example_my_cron_job_callback',
     'callback arguments' => array('cronjob1'),
     'enabled' => FALSE,
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


6) modules/contrib/ultimate_cron/tests/src/Kernel/UltimateCronQueueTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     module_load_install('ultimate_cron');
     ultimate_cron_install();
@@ @@
     // @see \Drupal\Core\Cron::processQueues()
     $this->connection->update('queue')
       ->condition('name', 'cron_queue_test_exception')
-      ->fields(['expire' => REQUEST_TIME - 1])
+      ->fields(['expire' => \Drupal::time()->getRequestTime() - 1])
       ->execute();

     // Has to be manually called for Ultimate Cron.
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/ultimate_cron/tests/src/Kernel/CronJobTest.php:14

    ---------- begin diff ----------
@@ @@

   public static $modules = array('ultimate_cron');

-  public function setup() {
+  public function setup(): void {
     parent::setUp();

     $this->installSchema('ultimate_cron', array(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/ultimate_cron/tests/src/Kernel/CronJobKernelTest.php:18

    ---------- begin diff ----------
@@ @@
    */
   public static $modules = array('system', 'ultimate_cron');

-  protected function setup() {
+  protected function setup(): void {
     parent::setUp();

     $this->installSchema('ultimate_cron', [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/ultimate_cron/tests/src/Functional/LoggerWebTest.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->createUser([
       'administer ultimate cron',
@@ @@

     // Check that the error message is displayed in its log page.
     $this->drupalGet('admin/config/system/cron/jobs/logs/ultimate_cron_logger_test_cron');
-    $this->assertRaw('/core/misc/icons/e32700/error.svg');
-    $this->assertRaw('<em class="placeholder">Exception</em>: Test cron exception in <em class="placeholder">ultimate_cron_logger_test_cron()</em> (line');
+    $this->assertSession()->responseContains('/core/misc/icons/e32700/error.svg');
+    $this->assertSession()->responseContains('<em class="placeholder">Exception</em>: Test cron exception in <em class="placeholder">ultimate_cron_logger_test_cron()</em> (line');
   }

   /**
@@ @@

     // Check that the error message is displayed in its log page.
     $this->drupalGet('admin/config/system/cron/jobs/logs/ultimate_cron_logger_test_cron');
-    $this->assertRaw('/core/misc/icons/e32700/error.svg');
-    $this->assertRaw('Call to undefined function call_to_undefined_function');
+    $this->assertSession()->responseContains('/core/misc/icons/e32700/error.svg');
+    $this->assertSession()->responseContains('Call to undefined function call_to_undefined_function');

     // Empty the logfile, our fatal errors are expected.
     $filename = DRUPAL_ROOT . '/' . $this->siteDirectory . '/error.log';
@@ @@
     $xpath = $this->xpath('//table/tbody/tr/td[4]');
     // The last 2 chars from xpath are not related to the message.
     $this->assertTrue(strlen(substr($xpath[0]->getText(), 0, -2)) == 5000);
-    $this->assertRaw('This is a v…');
+    $this->assertSession()->responseContains('This is a v…');
   }

   /**
@@ @@

     // Check that the error message is displayed in its log page.
     $this->drupalGet('admin/config/system/cron/jobs/logs/ultimate_cron_logger_test_cron');
-    $this->assertRaw('/core/misc/icons/e29700/warning.svg');
-    $this->assertRaw('This is a warning message');
+    $this->assertSession()->responseContains('/core/misc/icons/e29700/warning.svg');
+    $this->assertSession()->responseContains('This is a warning message');
   }


@@ @@

     // Check that the error message is displayed in its log page.
     $this->drupalGet('admin/config/system/cron/jobs/logs/ultimate_cron_logger_test_cron');
-    $this->assertRaw('/core/misc/icons/73b355/check.svg');
-    $this->assertText('Launched in thread 1');
+    $this->assertSession()->responseContains('/core/misc/icons/73b355/check.svg');
+    $this->assertSession()->pageTextContains('Launched in thread 1');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/ultimate_cron/tests/src/Functional/CronJobInstallTest.php:43

    ---------- begin diff ----------
@@ @@
     // Check default modules
     \Drupal::service('module_installer')->install(array('field'));
     $this->drupalGet('admin/config/system/cron/jobs');
-    $this->assertText('Purges deleted Field API data');
-    $this->assertText('Cleanup (caches, batch, flood, temp-files, etc.)');
-    $this->assertNoText('Deletes temporary files');
+    $this->assertSession()->pageTextContains('Purges deleted Field API data');
+    $this->assertSession()->pageTextContains('Cleanup (caches, batch, flood, temp-files, etc.)');
+    $this->assertSession()->pageTextNotContains('Deletes temporary files');

     // Install new module.
     \Drupal::service('module_installer')->install(array('file'));
     $this->drupalGet('admin/config/system/cron/jobs');
-    $this->assertText('Deletes temporary files');
+    $this->assertSession()->pageTextContains('Deletes temporary files');

     // Uninstall new module.
     \Drupal::service('module_installer')->uninstall(array('file'));
     $this->drupalGet('admin/config/system/cron/jobs');
-    $this->assertNoText('Deletes temporary files');
+    $this->assertSession()->pageTextNotContains('Deletes temporary files');
   }

   /**
@@ @@
    */
   public function testRequirements() {
     $element = ultimate_cron_requirements('runtime')['cron_jobs'];
-    $this->assertEqual($element['value'], t("Cron is running properly."));
-    $this->assertEqual($element['severity'], REQUIREMENT_OK);
+    $this->assertEquals($element['value'], t("Cron is running properly."));
+    $this->assertEquals($element['severity'], REQUIREMENT_OK);


     $values = array(
@@ @@
       ->execute();

     // Check run counter, at this point there should be 0 run.
-    $this->assertEqual(1, \Drupal::state()->get('ultimate_cron.cron_run_counter'), 'Job has run once.');
+    $this->assertEquals(1, \Drupal::state()->get('ultimate_cron.cron_run_counter'), 'Job has run once.');
     $this->assertNotEmpty($job->isBehindSchedule(), 'Job is behind schedule.');

     $element = ultimate_cron_requirements('runtime')['cron_jobs'];
-    $this->assertEqual($element['value'], '1 job is behind schedule', '"1 job is behind schedule." is displayed');
-    $this->assertEqual($element['description']['#markup'], 'Some jobs are behind their schedule. Please check if <a href="' .
+    $this->assertEquals($element['value'], '1 job is behind schedule', '"1 job is behind schedule." is displayed');
+    $this->assertEquals($element['description']['#markup'], 'Some jobs are behind their schedule. Please check if <a href="' .
       Url::fromRoute('system.cron', ['key' => \Drupal::state()->get('system.cron_key')])->toString() .
       '">Cron</a> is running properly.', 'Description is correct.');
-    $this->assertEqual($element['severity'], REQUIREMENT_WARNING, 'Severity is of level "Error"');
+    $this->assertEquals($element['severity'], REQUIREMENT_WARNING, 'Severity is of level "Error"');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNoTextRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/ultimate_cron/src/Plugin/ultimate_cron/Scheduler/Crontab.php:40

    ---------- begin diff ----------
@@ @@
   public function formatLabelVerbose(CronJob $job) {
     $parsed = '';
     $next_schedule = NULL;
-    $time = REQUEST_TIME;
+    $time = \Drupal::time()->getRequestTime();
     $skew = $this->getSkew($job);
     foreach ($this->configuration['rules'] as $rule) {
       $cron = CronRule::factory($rule, $time, $skew);
@@ @@
     );

     $form['rules_help']['info'] = array(
-      '#markup' => file_get_contents(drupal_get_path('module', 'ultimate_cron') . '/help/rules.html'),
+      '#markup' => file_get_contents(\Drupal::service('extension.list.module')->getPath('ultimate_cron') . '/help/rules.html'),
     );

     $form['catch_up'] = array(
@@ @@
       $time = $cron->getNextSchedule();
       $next_schedule = is_null($next_schedule) || $time < $next_schedule ? $time : $next_schedule;
     }
-    $behind = REQUEST_TIME - $next_schedule;
+    $behind = \Drupal::time()->getRequestTime() - $next_schedule;

     return $behind > $this->configuration['catch_up'] ? $behind : FALSE;
   }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/ultimate_cron/src/Plugin/ultimate_cron/Logger/CacheLogger.php:115

    ---------- begin diff ----------
@@ @@

     $settings = $this->getConfiguration();

-    $expire = $settings['timeout'] != Cache::PERMANENT ? REQUEST_TIME + $settings['timeout'] : $settings['timeout'];
+    $expire = $settings['timeout'] != Cache::PERMANENT ? \Drupal::time()->getRequestTime() + $settings['timeout'] : $settings['timeout'];

     $this->cache->set('uc-name:' . $log_entry->name, $log_entry->lid, $expire);
     $this->cache->set('uc-lid:' . $log_entry->lid, $log_entry->getData(), $expire);
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/ultimate_cron/src/Launcher/LauncherBase.php:66

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function formatRunning(CronJobInterface $job) {
-    $file = drupal_get_path('module', 'ultimate_cron') . '/icons/hourglass.png';
+    $file = \Drupal::service('extension.list.module')->getPath('ultimate_cron') . '/icons/hourglass.png';
     $status = ['#theme' => 'image', '#uri' => $file];
     $title = t('running');
     return array($status, $title);
@@ @@
    * {@inheritdoc}
    */
   public function formatUnfinished(CronJobInterface $job) {
-    $file = drupal_get_path('module', 'ultimate_cron') . '/icons/lock_open.png';
+    $file = \Drupal::service('extension.list.module')->getPath('ultimate_cron') . '/icons/lock_open.png';
     $status = ['#theme' => 'image', '#uri' => $file];
     $title = t('unfinished but not locked?');
     return array($status, $title);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/ultimate_cron/src/Form/SchedulerSettingsForm.php:68

    ---------- begin diff ----------
@@ @@
       '#collapsed' => TRUE,
     );
     $form['crontab']['rules_help']['info'] = array(
-      '#markup' => file_get_contents(drupal_get_path('module', 'ultimate_cron') . '/help/rules.html'),
+      '#markup' => file_get_contents(\Drupal::service('extension.list.module')->getPath('ultimate_cron') . '/help/rules.html'),
     );

     // Settings for Simple scheduler.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/ultimate_cron/src/CronPluginMultiple.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ultimate_cron;

-class CronPluginMultiple extends \Drupal\ultimate_cron\CronPlugin {
+class CronPluginMultiple extends CronPlugin {
   static public $multiple = TRUE;

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


16) modules/contrib/ultimate_cron/src/CronJobListBuilder.php:36

    ---------- begin diff ----------
@@ @@
    */
   public function buildRow(EntityInterface $entity) {
     /* @var \Drupal\ultimate_cron\CronJobInterface $entity */
-    $icon = drupal_get_path('module', 'ultimate_cron') . '/icons/hourglass.png';
-    $behind_icon = ['#prefix' => ' ', '#theme' => 'image', '#uri' => file_create_url($icon), '#title' => t('Job is behind schedule!')];
+    $icon = \Drupal::service('extension.list.module')->getPath('ultimate_cron') . '/icons/hourglass.png';
+    $behind_icon = ['#prefix' => ' ', '#theme' => 'image', '#uri' => \Drupal::service('file_url_generator')->generateAbsoluteString($icon), '#title' => t('Job is behind schedule!')];

     $log_entry = $entity->loadLatestLogEntry();
     $row['label'] = $entity->label();
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 16 files have been changed by Rector                                      

