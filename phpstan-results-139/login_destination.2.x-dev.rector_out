modules/contrib/login_destination/login_destination.module
modules/contrib/login_destination/src/LoginDestinationToolbarLinkBuilder.php
modules/contrib/login_destination/tests/src/Functional/InstallTest.php
modules/contrib/login_destination/tests/src/Functional/RedirectTest.php
modules/contrib/login_destination/src/Controller/LoginDestinationListBuilder.php
modules/contrib/login_destination/src/Entity/LoginDestination.php
modules/contrib/login_destination/tests/src/Functional/UninstallTest.php
modules/contrib/login_destination/tests/src/Functional/UrlParameterTest.php
modules/contrib/login_destination/tests/src/Traits/LoginDestinationCreationTrait.php
modules/contrib/login_destination/src/Form/LoginDestinationDeleteRuleForm.php
modules/contrib/login_destination/src/Form/LoginDestinationRuleForm.php
modules/contrib/login_destination/src/Form/LoginDestinationSettingsForm.php
modules/contrib/login_destination/src/LoginDestinationInterface.php
modules/contrib/login_destination/src/LoginDestinationManager.php
modules/contrib/login_destination/src/LoginDestinationManagerInterface.php

2 files with changes
====================

1) modules/contrib/login_destination/tests/src/Functional/RedirectTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create a node page to redirect to.
@@ @@
         'pass[pass2]' => $password,
       ];
     }
-    $this->drupalPostForm('user/register', $edit, 'Create new account');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, 'Create new account');

     $storage = $this->container->get('entity_type.manager')->getStorage('user');
     $storage->resetCache();
@@ @@

     $this->createLoginDestinationToNode1([LoginDestination::TRIGGER_REGISTRATION]);

-    $this->register(user_password());
+    $this->register(\Drupal::service('password_generator')->generate());
     $this->assertSession()->pageTextContains('Registration successful. You are now logged in.');

     // Ensure that the redirect happened.
@@ @@
       LoginDestination::TRIGGER_LOGOUT,
     ]);

-    $this->register(user_password());
+    $this->register(\Drupal::service('password_generator')->generate());
     $this->assertSession()->pageTextContains('Registration successful. You are now logged in.');

     // Ensure that no login destination redirect happened.
@@ @@

     // Generate password reset URL.
     $url = user_pass_reset_url($this->account);
+    $this->drupalGet($url);
     // And use the one-time login link.
-    $this->drupalPostForm($url, NULL, 'Log in');
+    $this->submitForm(NULL, 'Log in');
     $this->assertSession()->pageTextContains('You have just used your one-time login link. It is no longer necessary to use this link to log in. Please change your password.');
     $this->assertSession()->titleEquals(strtr('@name | @site', [
       '@name' => $this->account->getAccountName(),
@@ @@
     ]));

     // Set a new password.
-    $password = user_password();
+    $password = \Drupal::service('password_generator')->generate();
     $edit = [
       'pass[pass1]' => $password,
       'pass[pass2]' => $password,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('The changes have been saved.');

     // Assert that the redirect has happened now.
@@ @@

     // Generate password reset URL.
     $url = user_pass_reset_url($this->account);
+    $this->drupalGet($url);
     // And use the one-time login link.
-    $this->drupalPostForm($url, NULL, 'Log in');
+    $this->submitForm(NULL, 'Log in');
     $this->assertSession()->pageTextContains('You have just used your one-time login link. It is no longer necessary to use this link to log in. Please change your password.');
     $this->assertSession()->titleEquals(strtr('@name | @site', [
       '@name' => $this->account->getAccountName(),
@@ @@
     ]));

     // Set a new password.
-    $password = user_password();
+    $password = \Drupal::service('password_generator')->generate();
     $edit = [
       'pass[pass1]' => $password,
       'pass[pass2]' => $password,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('The changes have been saved.');

     // Ensure that no login destination redirect happened.
@@ @@

     // Generate password reset URL.
     $url = user_pass_reset_url($this->account);
+    $this->drupalGet($url);
     // And use the one-time login link.
-    $this->drupalPostForm($url, NULL, 'Log in');
+    $this->submitForm(NULL, 'Log in');

     // Assert that the redirect happened immediately.
     $this->assertSession()->statusCodeEquals(200);
@@ @@

     // Generate password reset URL.
     $url = user_pass_reset_url($this->account);
+    $this->drupalGet($url);
     // And use the one-time login link.
-    $this->drupalPostForm($url, NULL, 'Log in');
+    $this->submitForm(NULL, 'Log in');

     // Ensure that no login destination redirect happened.
     $this->assertSession()->addressEquals('/user/2/edit');
@@ @@
     $this->drupalLogin($this->account);

     // Set password on account edit page.
-    $password = user_password();
+    $password = \Drupal::service('password_generator')->generate();
     $edit = [
       'current_pass' => $this->account->passRaw,
       'pass[pass1]' => $password,
       'pass[pass2]' => $password,
     ];
-    $this->drupalPostForm('user/2/edit', $edit, 'Save');
+    $this->drupalGet('user/2/edit');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('The changes have been saved.');

     // Assert that the user is still on their account edit page.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * UserPasswordRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/login_destination/tests/src/Functional/InstallTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->moduleHandler = $this->container->get('module_handler');
     $this->moduleInstaller = $this->container->get('module_installer');
@@ @@
     $this->drupalLogin($admin);

     // Assert that expanded links are present in the HTML.
-    $this->assertRaw('class="toolbar-icon toolbar-icon-user-admin-index"');
+    $this->assertSession()->responseContains('class="toolbar-icon toolbar-icon-user-admin-index"');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 2 files have been changed by Rector                                       

