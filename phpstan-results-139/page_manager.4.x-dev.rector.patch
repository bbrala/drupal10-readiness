diff --git a/page_manager_ui/tests/src/Functional/AddVariantSelectionTest.php b/page_manager_ui/tests/src/Functional/AddVariantSelectionTest.php
index 1c8b3d8..af4e3a0 100644
--- a/page_manager_ui/tests/src/Functional/AddVariantSelectionTest.php
+++ b/page_manager_ui/tests/src/Functional/AddVariantSelectionTest.php
@@ -24,7 +24,7 @@ class AddVariantSelectionTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
@@ -42,9 +42,9 @@ class AddVariantSelectionTest extends BrowserTestBase {
     $node = $this->drupalCreateNode(['type' => 'article']);
     $node2 = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
-    $this->assertText($node->label());
-    $this->assertTitle($node->label() . ' | Drupal');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains($node->label());
+    $this->assertSession()->titleEquals($node->label() . ' | Drupal');
 
     // Create a new page entity.
     $edit_page = [
@@ -53,9 +53,10 @@ class AddVariantSelectionTest extends BrowserTestBase {
       'path' => 'selection-criteria',
       'variant_plugin_id' => 'block_display',
     ];
-    $this->drupalPostForm('admin/structure/page_manager/add', $edit_page, 'Next');
-    $this->drupalPostForm(NULL, [], 'Next');
-    $this->drupalPostForm(NULL, [], 'Finish');
+    $this->drupalGet('admin/structure/page_manager/add');
+    $this->submitForm($edit_page, 'Next');
+    $this->submitForm([], 'Next');
+    $this->submitForm([], 'Finish');
     $this->clickLink('Add variant');
     $edit = [
       'label' => 'Variant two',
@@ -63,7 +64,7 @@ class AddVariantSelectionTest extends BrowserTestBase {
       'wizard_options[contexts]' => TRUE,
       'wizard_options[selection]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
     // Add a static context for each node to the page variant.
     $contexts = [
       [
@@ -83,48 +84,48 @@ class AddVariantSelectionTest extends BrowserTestBase {
       $edit = [
         'context' => 'entity:node',
       ];
-      $this->drupalPostForm(NULL, $edit, 'Add new context');
+      $this->submitForm($edit, 'Add new context');
       $edit = [
         'label' => $context['title'],
         'machine_name' => $context['machine_name'],
         'description' => $context['description'],
         'context_value' => $context['node']->getTitle() . ' (' . $context['node']->id() . ')',
       ];
-      $this->drupalPostForm(NULL, $edit, 'Save');
-      $this->assertText($context['title']);
+      $this->submitForm($edit, 'Save');
+      $this->assertSession()->pageTextContains($context['title']);
     }
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->submitForm([], 'Next');
 
     // Configure selection criteria.
     $edit = [
       'conditions' => 'entity_bundle:node',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add Condition');
+    $this->submitForm($edit, 'Add Condition');
 
     $edit = [
       'bundles[article]' => TRUE,
       'bundles[page]' => TRUE,
       'context_mapping[node]' => 'static_node_2',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText('Content type is article or page');
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->pageTextContains('Content type is article or page');
     $this->clickLink('Edit');
     $edit = [
       'bundles[article]' => TRUE,
       'context_mapping[node]' => 'static_node_2',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText('Content type is article');
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->pageTextContains('Content type is article');
     $this->clickLink('Delete');
-    $this->drupalPostForm(NULL, [], 'Delete');
-    $this->assertNoText('Content type is article');
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->submitForm([], 'Delete');
+    $this->assertSession()->pageTextNotContains('Content type is article');
+    $this->submitForm([], 'Next');
 
     // Configure the new variant.
     $variant_edit = [
       'variant_settings[page_title]' => 'Variant two criteria test',
     ];
-    $this->drupalPostForm(NULL, $variant_edit, 'Next');
+    $this->submitForm($variant_edit, 'Next');
 
     // Add a block that renders the node from the first static context.
     $this->clickLink('Add new block');
@@ -135,8 +136,8 @@ class AddVariantSelectionTest extends BrowserTestBase {
       'settings[view_mode]' => 'default',
       'region' => 'top',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add block');
-    $this->assertText($edit['settings[label]']);
+    $this->submitForm($edit, 'Add block');
+    $this->assertSession()->pageTextContains($edit['settings[label]']);
 
     // Add a block that renders the node from the second static context.
     $this->clickLink('Add new block');
@@ -148,9 +149,9 @@ class AddVariantSelectionTest extends BrowserTestBase {
       'region' => 'bottom',
       'context_mapping[entity]' => $contexts[1]['machine_name'],
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add block');
-    $this->assertText($edit['settings[label]']);
-    $this->drupalPostForm(NULL, [], 'Finish');
+    $this->submitForm($edit, 'Add block');
+    $this->assertSession()->pageTextContains($edit['settings[label]']);
+    $this->submitForm([], 'Finish');
   }
 
 }
diff --git a/page_manager_ui/tests/src/Functional/PageManagerAdminTest.php b/page_manager_ui/tests/src/Functional/PageManagerAdminTest.php
index 1ee2e27..960c9fb 100644
--- a/page_manager_ui/tests/src/Functional/PageManagerAdminTest.php
+++ b/page_manager_ui/tests/src/Functional/PageManagerAdminTest.php
@@ -28,7 +28,7 @@ class PageManagerAdminTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalPlaceBlock('local_tasks_block');
@@ -76,7 +76,7 @@ class PageManagerAdminTest extends BrowserTestBase {
   protected function doTestAddPage() {
     $this->drupalGet('admin/structure');
     $this->clickLink('Pages');
-    $this->assertText('Add a new page.');
+    $this->assertSession()->pageTextContains('Add a new page.');
 
     // Add a new page without a label.
     $this->clickLink('Add page');
@@ -90,55 +90,55 @@ class PageManagerAdminTest extends BrowserTestBase {
       'wizard_options[access]' => TRUE,
       'wizard_options[selection]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
-    $this->assertText('Administrative title field is required.');
+    $this->submitForm($edit, 'Next');
+    $this->assertSession()->pageTextContains('Administrative title field is required.');
 
     // Add a new page with a label.
     $edit += ['label' => 'Foo'];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     // Test the 'Page access' step.
-    $this->assertTitle('Page access | Drupal');
+    $this->assertSession()->titleEquals('Page access | Drupal');
     $access_path = 'admin/structure/page_manager/add/foo/access';
-    $this->assertUrl($access_path . '?js=nojs');
+    $this->assertSession()->addressEquals($access_path . '?js=nojs');
     $this->doTestAccessConditions($access_path, FALSE);
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->submitForm([], 'Next');
 
     // Test the 'Selection criteria' step.
-    $this->assertTitle('Selection criteria | Drupal');
+    $this->assertSession()->titleEquals('Selection criteria | Drupal');
     $selection_path = 'admin/structure/page_manager/add/foo/selection';
-    $this->assertUrl($selection_path . '?js=nojs');
+    $this->assertSession()->addressEquals($selection_path . '?js=nojs');
     $this->doTestSelectionCriteria($selection_path, FALSE);
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->submitForm([], 'Next');
 
     // Configure the variant.
     $edit = [
       'page_variant_label' => 'Status Code',
       'variant_settings[status_code]' => 200,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Finish');
-    $this->assertRaw(new FormattableMarkup('The page %label has been added.', ['%label' => 'Foo']));
+    $this->submitForm($edit, 'Finish');
+    $this->assertSession()->responseContains(new FormattableMarkup('The page %label has been added.', ['%label' => 'Foo']));
     // We've gone from the add wizard to the edit wizard.
     $this->drupalGet('admin/structure/page_manager/manage/foo/general');
 
     $this->drupalGet('admin/foo');
-    $this->assertResponse(200);
-    $this->assertTitle('Foo | Drupal');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->titleEquals('Foo | Drupal');
 
     // Change the status code to 403.
     $this->drupalGet('admin/structure/page_manager/manage/foo/page_variant__foo-http_status_code-0__general');
     $edit = [
       'variant_settings[status_code]' => 403,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Update');
+    $this->submitForm($edit, 'Update');
 
     // Set the weight of the 'Status Code' variant to 10.
     $this->drupalGet('admin/structure/page_manager/manage/foo/reorder_variants');
     $edit = [
       'variants[foo-http_status_code-0][weight]' => 10,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Update');
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->submitForm($edit, 'Update');
+    $this->submitForm([], 'Update and save');
   }
 
   /**
@@ -154,38 +154,38 @@ class PageManagerAdminTest extends BrowserTestBase {
       $this->drupalGet($path);
     }
 
-    $this->assertRaw('No required conditions have been configured.');
+    $this->assertSession()->responseContains('No required conditions have been configured.');
 
     // Configure a new condition.
     $edit = [
       'conditions' => 'user_role',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add Condition');
-    $this->assertTitle('Add access condition | Drupal');
+    $this->submitForm($edit, 'Add Condition');
+    $this->assertSession()->titleEquals('Add access condition | Drupal');
     $edit = [
       'roles[authenticated]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertRaw('The user is a member of Authenticated user');
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->responseContains('The user is a member of Authenticated user');
     // Make sure we're still on the same wizard.
-    $this->assertUrl($path);
+    $this->assertSession()->addressEquals($path);
 
     // Edit the condition.
     $this->clickLink('Edit');
-    $this->assertTitle('Edit access condition | Drupal');
+    $this->assertSession()->titleEquals('Edit access condition | Drupal');
     $edit = [
       'roles[anonymous]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertRaw('The user is a member of Anonymous user, Authenticated user');
-    $this->assertUrl($path);
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->responseContains('The user is a member of Anonymous user, Authenticated user');
+    $this->assertSession()->addressEquals($path);
 
     // Delete the condition.
     $this->clickLink('Delete');
-    $this->assertTitle('Are you sure you want to delete the user_role condition? | Drupal');
-    $this->drupalPostForm(NULL, [], 'Delete');
-    $this->assertRaw('No required conditions have been configured.');
-    $this->assertUrl($path);
+    $this->assertSession()->titleEquals('Are you sure you want to delete the user_role condition? | Drupal');
+    $this->submitForm([], 'Delete');
+    $this->assertSession()->responseContains('No required conditions have been configured.');
+    $this->assertSession()->addressEquals($path);
   }
 
   /**
@@ -200,38 +200,38 @@ class PageManagerAdminTest extends BrowserTestBase {
     if ($this->getUrl() !== $path && $redirect) {
       $this->drupalGet($path);
     }
-    $this->assertRaw('No required conditions have been configured.');
+    $this->assertSession()->responseContains('No required conditions have been configured.');
 
     // Configure a new condition.
     $edit = [
       'conditions' => 'user_role',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add Condition');
-    $this->assertTitle('Add new selection condition | Drupal');
+    $this->submitForm($edit, 'Add Condition');
+    $this->assertSession()->titleEquals('Add new selection condition | Drupal');
     $edit = [
       'roles[authenticated]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertRaw('The user is a member of Authenticated user');
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->responseContains('The user is a member of Authenticated user');
     // Make sure we're still on the add wizard (not the edit wizard).
-    $this->assertUrl($path);
+    $this->assertSession()->addressEquals($path);
 
     // Edit the condition.
     $this->clickLink('Edit');
-    $this->assertTitle('Edit selection condition | Drupal');
+    $this->assertSession()->titleEquals('Edit selection condition | Drupal');
     $edit = [
       'roles[anonymous]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertRaw('The user is a member of Anonymous user, Authenticated user');
-    $this->assertUrl($path);
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->responseContains('The user is a member of Anonymous user, Authenticated user');
+    $this->assertSession()->addressEquals($path);
 
     // Delete the condition.
     $this->clickLink('Delete');
-    $this->assertTitle('Are you sure you want to delete the user_role condition? | Drupal');
-    $this->drupalPostForm(NULL, [], 'Delete');
-    $this->assertRaw('No required conditions have been configured.');
-    $this->assertUrl($path);
+    $this->assertSession()->titleEquals('Are you sure you want to delete the user_role condition? | Drupal');
+    $this->submitForm([], 'Delete');
+    $this->assertSession()->responseContains('No required conditions have been configured.');
+    $this->assertSession()->addressEquals($path);
   }
 
   /**
@@ -239,19 +239,19 @@ class PageManagerAdminTest extends BrowserTestBase {
    */
   protected function doTestDisablePage() {
     $this->drupalGet('admin/foo');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $this->drupalGet('admin/structure/page_manager');
     $this->clickLink('Disable');
     $this->drupalGet('admin/foo');
     // The page should not be found if the page is enabled.
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     $this->drupalGet('admin/structure/page_manager');
     $this->clickLink('Enable');
     $this->drupalGet('admin/foo');
     // Re-enabling the page should make this path available.
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }
 
   /**
@@ -266,23 +266,23 @@ class PageManagerAdminTest extends BrowserTestBase {
       'variant_plugin_id' => 'block_display',
       'label' => 'First',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     // Set the page title.
     $edit = [
       'variant_settings[page_title]' => 'Example title',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     // Finish variant wizard without adding blocks.
-    $this->drupalPostForm(NULL, [], 'Finish');
+    $this->submitForm([], 'Finish');
 
     // Save page to apply variant changes.
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->submitForm([], 'Update and save');
 
     // Test that the variant is still used but empty.
     $this->drupalGet('admin/foo');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Tests that the content region has no content at all.
     $elements = $this->getSession()->getPage()->findAll('css', 'div.region.region-content *');
     // From Drupal 8.7, fallback area for messages is added by default.
@@ -305,28 +305,28 @@ class PageManagerAdminTest extends BrowserTestBase {
     $this->clickLink('Add new block');
 
     // Assert that the broken/missing block is not visible.
-    $this->assertNoText('Broken/Missing');
+    $this->assertSession()->pageTextNotContains('Broken/Missing');
 
     $this->clickLink('User account menu');
     $edit = [
       'region' => 'top',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add block');
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->submitForm($edit, 'Add block');
+    $this->submitForm([], 'Update and save');
 
     // Test that the block is displayed.
     $this->drupalGet('admin/foo');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $elements = $this->xpath('//div[@class="block-region-top"]/nav/ul[@class="menu"]/li/a');
-    $this->assertTitle('Example title | Drupal');
+    $this->assertSession()->titleEquals('Example title | Drupal');
     $expected = ['My account', 'Log out'];
     $links = [];
     foreach ($elements as $element) {
       $links[] = $element->getText();
     }
-    $this->assertEqual($expected, $links);
+    $this->assertEquals($expected, $links);
     // Check the block label.
-    $this->assertRaw('User account menu');
+    $this->assertSession()->responseContains('User account menu');
   }
 
   /**
@@ -343,24 +343,24 @@ class PageManagerAdminTest extends BrowserTestBase {
       'path' => 'second',
       'variant_plugin_id' => 'block_display',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     // Configure the variant.
     $edit = [
       'page_variant_label' => 'Second variant',
       'variant_settings[page_title]' => 'Second title',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     // We're now on the content step, but we don't need to add any blocks.
-    $this->drupalPostForm(NULL, [], 'Finish');
-    $this->assertRaw(new FormattableMarkup('The page %label has been added.', ['%label' => 'Second']));
+    $this->submitForm([], 'Finish');
+    $this->assertSession()->responseContains(new FormattableMarkup('The page %label has been added.', ['%label' => 'Second']));
 
     // Visit both pages, make sure that they do not interfere with each other.
     $this->drupalGet('admin/foo');
-    $this->assertTitle('Example title | Drupal');
+    $this->assertSession()->titleEquals('Example title | Drupal');
     $this->drupalGet('second');
-    $this->assertTitle('Second title | Drupal');
+    $this->assertSession()->titleEquals('Second title | Drupal');
   }
 
   /**
@@ -372,12 +372,12 @@ class PageManagerAdminTest extends BrowserTestBase {
       'variant_settings[page_title]' => 'Updated block label',
       'page_variant_label' => 'Updated block label',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Update and save');
+    $this->submitForm($edit, 'Update and save');
     // Test that the block is displayed.
     $this->drupalGet('admin/foo');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Check the block label.
-    $this->assertRaw($edit['variant_settings[page_title]']);
+    $this->assertSession()->responseContains($edit['variant_settings[page_title]']);
   }
 
   /**
@@ -392,18 +392,18 @@ class PageManagerAdminTest extends BrowserTestBase {
     $block_config = $block->getConfiguration();
     $this->drupalGet('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__content');
 
-    $this->assertOptionSelected('edit-blocks-' . $block_config['uuid'] . '-region', 'top');
-    $this->assertOptionSelected('edit-blocks-' . $block_config['uuid'] . '-weight', 0);
+    $this->assertTrue($this->assertSession()->optionExists('edit-blocks-' . $block_config['uuid'] . '-region', 'top')->hasAttribute('selected'));
+    $this->assertTrue($this->assertSession()->optionExists('edit-blocks-' . $block_config['uuid'] . '-weight', 0)->hasAttribute('selected'));
 
     $form_name = 'blocks[' . $block_config['uuid'] . ']';
     $edit = [
       $form_name . '[region]' => 'bottom',
       $form_name . '[weight]' => -10,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Update');
-    $this->assertOptionSelected('edit-blocks-' . $block_config['uuid'] . '-region', 'bottom');
-    $this->assertOptionSelected('edit-blocks-' . $block_config['uuid'] . '-weight', -10);
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->submitForm($edit, 'Update');
+    $this->assertTrue($this->assertSession()->optionExists('edit-blocks-' . $block_config['uuid'] . '-region', 'bottom')->hasAttribute('selected'));
+    $this->assertTrue($this->assertSession()->optionExists('edit-blocks-' . $block_config['uuid'] . '-weight', -10)->hasAttribute('selected'));
+    $this->submitForm([], 'Update and save');
   }
 
   /**
@@ -411,14 +411,14 @@ class PageManagerAdminTest extends BrowserTestBase {
    */
   protected function doTestReorderVariants() {
     $this->drupalGet('admin/foo');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $elements = $this->xpath('//div[@class="block-region-bottom"]/nav/ul[@class="menu"]/li/a');
     $expected = ['My account', 'Log out'];
     $links = [];
     foreach ($elements as $element) {
       $links[] = $element->getText();
     }
-    $this->assertEqual($expected, $links);
+    $this->assertEquals($expected, $links);
 
     $this->drupalGet('admin/structure/page_manager/manage/foo/general');
     $this->clickLink('Reorder variants');
@@ -426,10 +426,10 @@ class PageManagerAdminTest extends BrowserTestBase {
     $edit = [
       'variants[foo-http_status_code-0][weight]' => -10,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Update');
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->submitForm($edit, 'Update');
+    $this->submitForm([], 'Update and save');
     $this->drupalGet('admin/foo');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }
 
   /**
@@ -442,10 +442,11 @@ class PageManagerAdminTest extends BrowserTestBase {
       'id' => 'bar',
       'path' => 'admin/foo',
     ];
-    $this->drupalPostForm('admin/structure/page_manager/add', $edit, 'Next');
-    $this->assertText('The page path must be unique.');
+    $this->drupalGet('admin/structure/page_manager/add');
+    $this->submitForm($edit, 'Next');
+    $this->assertSession()->pageTextContains('The page path must be unique.');
     $this->drupalGet('admin/structure/page_manager');
-    $this->assertNoText('Bar');
+    $this->assertSession()->pageTextNotContains('Bar');
   }
 
   /**
@@ -460,7 +461,7 @@ class PageManagerAdminTest extends BrowserTestBase {
     $edit = [
       'use_admin_theme' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Update and save');
+    $this->submitForm($edit, 'Update and save');
     $this->drupalGet('admin/foo');
     $this->assertTheme('bartik');
 
@@ -474,10 +475,10 @@ class PageManagerAdminTest extends BrowserTestBase {
   protected function doTestRemoveVariant() {
     $this->drupalGet('admin/structure/page_manager/manage/foo/page_variant__foo-http_status_code-0__general');
     $this->clickLink('Delete this variant');
-    $this->assertRaw('Are you sure you want to delete this variant?');
-    $this->drupalPostForm(NULL, [], 'Delete');
-    $this->assertRaw(new FormattableMarkup('The variant %label has been removed.', ['%label' => 'Status Code']));
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->assertSession()->responseContains('Are you sure you want to delete this variant?');
+    $this->submitForm([], 'Delete');
+    $this->assertSession()->responseContains(new FormattableMarkup('The variant %label has been removed.', ['%label' => 'Status Code']));
+    $this->submitForm([], 'Update and save');
   }
 
   /**
@@ -486,25 +487,25 @@ class PageManagerAdminTest extends BrowserTestBase {
   protected function doTestRemoveBlock() {
     // Assert that the block is displayed.
     $this->drupalGet('admin/foo');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $elements = $this->xpath('//div[@class="block-region-bottom"]/nav/ul[@class="menu"]/li/a');
     $expected = ['My account', 'Log out'];
     $links = [];
     foreach ($elements as $element) {
       $links[] = $element->getText();
     }
-    $this->assertEqual($expected, $links);
+    $this->assertEquals($expected, $links);
 
     $this->drupalGet('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__content');
     $this->clickLink('Delete');
-    $this->assertRaw(new FormattableMarkup('Are you sure you want to delete the block %label?', ['%label' => 'User account menu']));
-    $this->drupalPostForm(NULL, [], 'Delete');
-    $this->assertRaw(new FormattableMarkup('The block %label has been removed.', ['%label' => 'User account menu']));
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->assertSession()->responseContains(new FormattableMarkup('Are you sure you want to delete the block %label?', ['%label' => 'User account menu']));
+    $this->submitForm([], 'Delete');
+    $this->assertSession()->responseContains(new FormattableMarkup('The block %label has been removed.', ['%label' => 'User account menu']));
+    $this->submitForm([], 'Update and save');
 
     // Assert that the block is now gone.
     $this->drupalGet('admin/foo');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $elements = $this->xpath('//div[@class="block-region-bottom"]/nav/ul[@class="menu"]/li/a');
     $this->assertTrue(empty($elements));
   }
@@ -520,15 +521,15 @@ class PageManagerAdminTest extends BrowserTestBase {
     $edit = [
       'region' => 'top',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add block');
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->submitForm($edit, 'Add block');
+    $this->submitForm([], 'Update and save');
 
     // Test that the block is displayed.
     $this->drupalGet('admin/foo');
-    $this->assertResponse(200);
-    $this->assertText(t('Example output'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains(t('Example output'));
     // Check the block label.
-    $this->assertRaw('Page Manager Test Block');
+    $this->assertSession()->responseContains('Page Manager Test Block');
   }
 
   /**
@@ -537,7 +538,7 @@ class PageManagerAdminTest extends BrowserTestBase {
   protected function doTestExistingPathWithoutParameters() {
     // Test an existing path.
     $this->drupalGet('admin');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet('admin/structure/page_manager');
     // Add a new page with existing path 'admin'.
@@ -548,18 +549,18 @@ class PageManagerAdminTest extends BrowserTestBase {
       'path' => 'admin',
       'variant_plugin_id' => 'http_status_code',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     // Configure the variant.
     $edit = [
       'page_variant_label' => 'Status Code',
       'variant_settings[status_code]' => 404,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Finish');
+    $this->submitForm($edit, 'Finish');
 
     // Ensure the existing path leads to the new page.
     $this->drupalGet('admin');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
   }
 
   /**
@@ -575,37 +576,41 @@ class PageManagerAdminTest extends BrowserTestBase {
       'variant_plugin_id' => 'block_display',
       'label' => 'First',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     // Set the page title.
     $edit = [
       'variant_settings[page_title]' => 'Example title',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     // Finish variant wizard without adding blocks.
-    $this->drupalPostForm(NULL, [], 'Finish');
+    $this->submitForm([], 'Finish');
 
     // Update the description and click on Update.
     $edit = [
       'page_variant_label' => 'First updated',
       'variant_settings[page_title]' => 'Example title updated',
     ];
-    $this->drupalPostForm('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__general', $edit, 'Update');
-    $this->assertFieldByName('page_variant_label', 'First updated');
-    $this->assertFieldByName('variant_settings[page_title]', 'Example title updated');
+    $this->drupalGet('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__general');
+    $this->submitForm($edit, 'Update');
+    $this->assertSession()->fieldValueEquals('page_variant_label', 'First updated');
+    $this->assertSession()->fieldValueEquals('variant_settings[page_title]', 'Example title updated');
+    $this->drupalGet('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__contexts');
 
     // Click on Update at Contexts. Nothing should happen.
-    $this->drupalPostForm('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__contexts', [], 'Update');
-    $this->assertUrl('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__contexts');
+    $this->submitForm([], 'Update');
+    $this->assertSession()->addressEquals('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__contexts');
+    $this->drupalGet('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__selection');
 
     // Click on Update at Selection criteria. Nothing should happen.
-    $this->drupalPostForm('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__selection', [], 'Update');
-    $this->assertUrl('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__selection');
+    $this->submitForm([], 'Update');
+    $this->assertSession()->addressEquals('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__selection');
+    $this->drupalGet('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__content');
 
     // Click on Update at Content. Nothing should happen.
-    $this->drupalPostForm('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__content', [], 'Update');
-    $this->assertUrl('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__content');
+    $this->submitForm([], 'Update');
+    $this->assertSession()->addressEquals('admin/structure/page_manager/manage/foo/page_variant__foo-block_display-0__content');
   }
 
   /**
@@ -614,19 +619,19 @@ class PageManagerAdminTest extends BrowserTestBase {
   protected function doTestDeletePage() {
     $this->drupalGet('admin/structure/page_manager');
     $this->clickLink('Delete');
-    $this->drupalPostForm(NULL, [], 'Delete');
-    $this->assertRaw(new FormattableMarkup('The page %name has been removed.', ['%name' => 'existing']));
+    $this->submitForm([], 'Delete');
+    $this->assertSession()->responseContains(new FormattableMarkup('The page %name has been removed.', ['%name' => 'existing']));
     $this->drupalGet('admin');
     // The overridden page is back to its default.
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet('admin/structure/page_manager');
     $this->clickLink('Delete');
-    $this->drupalPostForm(NULL, [], 'Delete');
-    $this->assertRaw(new FormattableMarkup('The page %name has been removed.', ['%name' => 'Foo']));
+    $this->submitForm([], 'Delete');
+    $this->assertSession()->responseContains(new FormattableMarkup('The page %name has been removed.', ['%name' => 'Foo']));
     $this->drupalGet('admin/foo');
     // The custom page is no longer found.
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
   }
 
   /**
@@ -641,27 +646,27 @@ class PageManagerAdminTest extends BrowserTestBase {
       'path' => '/page-manager-test',
       'variant_plugin_id' => 'http_status_code',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     $edit = [
       'variant_settings[status_code]' => 418,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Finish');
+    $this->submitForm($edit, 'Finish');
     $this->drupalGet('page-manager-test');
-    $this->assertResponse(418);
+    $this->assertSession()->statusCodeEquals(418);
 
     // Test that the page test is accessible.
     $page_string = 'test-page';
     $this->drupalGet('page-manager-test/' . $page_string);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Without a single variant, it will fall through to the original.
     $this->drupalGet('admin/structure/page_manager/manage/placeholder2/page_variant__placeholder2-http_status_code-0__general');
     $this->clickLink('Delete this variant');
-    $this->drupalPostForm(NULL, [], 'Delete');
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->submitForm([], 'Delete');
+    $this->submitForm([], 'Update and save');
     $this->drupalGet('page-manager-test');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }
 
   /**
@@ -673,7 +678,7 @@ class PageManagerAdminTest extends BrowserTestBase {
   protected function assertTheme($theme_name) {
     $url = Url::fromUri('base:core/themes/' . $theme_name . '/logo.svg')->toString();
     $elements = $this->xpath('//img[contains(@src, :url)]', [':url' => $url]);
-    $this->assertEqual(count($elements), 1, new FormattableMarkup('Page is rendered in @theme', ['@theme' => $theme_name]));
+    $this->assertEquals(count($elements), 1, new FormattableMarkup('Page is rendered in @theme', ['@theme' => $theme_name]));
   }
 
   /**
diff --git a/page_manager_ui/tests/src/Functional/PageParametersTest.php b/page_manager_ui/tests/src/Functional/PageParametersTest.php
index 505e1fb..ec1f93a 100644
--- a/page_manager_ui/tests/src/Functional/PageParametersTest.php
+++ b/page_manager_ui/tests/src/Functional/PageParametersTest.php
@@ -25,7 +25,7 @@ class PageParametersTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
@@ -61,43 +61,43 @@ class PageParametersTest extends BrowserTestBase {
       'use_admin_theme' => TRUE,
       'description' => 'Sample test page.',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     // Test the 'Parameters' step.
-    $this->assertTitle('Page parameters | Drupal');
+    $this->assertSession()->titleEquals('Page parameters | Drupal');
     $access_path = 'admin/structure/page_manager/add/foo/parameters';
-    $this->assertUrl($access_path . '?js=nojs');
-    $this->assertNoText('There are no parameters defined for this page.');
+    $this->assertSession()->addressEquals($access_path . '?js=nojs');
+    $this->assertSession()->pageTextNotContains('There are no parameters defined for this page.');
 
     // Edit the node parameter.
     $this->clickLink('Edit');
-    $this->assertTitle('Edit parameter | Drupal');
+    $this->assertSession()->titleEquals('Edit parameter | Drupal');
     $edit = [
       'type' => 'entity:node',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Update parameter');
-    $this->assertText('The node parameter has been updated.');
+    $this->submitForm($edit, 'Update parameter');
+    $this->assertSession()->pageTextContains('The node parameter has been updated.');
 
     // Skip the variant General configuration step.
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->submitForm([], 'Next');
 
     // Add the Node block to the top region.
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->submitForm([], 'Next');
     $this->clickLink('Add new block');
     $this->clickLink('Entity view (Content)');
     $edit = [
       'region' => 'top',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add block');
+    $this->submitForm($edit, 'Add block');
 
     // Finish the wizard.
-    $this->drupalPostForm(NULL, [], 'Finish');
-    $this->assertRaw(new FormattableMarkup('The page %label has been added.', ['%label' => 'Foo']));
+    $this->submitForm([], 'Finish');
+    $this->assertSession()->responseContains(new FormattableMarkup('The page %label has been added.', ['%label' => 'Foo']));
 
     // Check that the node's title is visible at the page.
     $this->drupalGet('admin/foo/' . $node->id());
-    $this->assertResponse(200);
-    $this->assertText($node->getTitle());
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains($node->getTitle());
   }
 
 }
diff --git a/page_manager_ui/tests/src/Functional/StaticContextTest.php b/page_manager_ui/tests/src/Functional/StaticContextTest.php
index 1da752d..883ff95 100644
--- a/page_manager_ui/tests/src/Functional/StaticContextTest.php
+++ b/page_manager_ui/tests/src/Functional/StaticContextTest.php
@@ -27,7 +27,7 @@ class StaticContextTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
@@ -44,9 +44,9 @@ class StaticContextTest extends BrowserTestBase {
     $node = $this->drupalCreateNode(['type' => 'article']);
     $node2 = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
-    $this->assertText($node->label());
-    $this->assertTitle($node->label() . ' | Drupal');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains($node->label());
+    $this->assertSession()->titleEquals($node->label() . ' | Drupal');
 
     // Create a new page entity.
     $edit_page = [
@@ -56,7 +56,8 @@ class StaticContextTest extends BrowserTestBase {
       'variant_plugin_id' => 'block_display',
       'wizard_options[contexts]' => TRUE,
     ];
-    $this->drupalPostForm('admin/structure/page_manager/add', $edit_page, 'Next');
+    $this->drupalGet('admin/structure/page_manager/add');
+    $this->submitForm($edit_page, 'Next');
 
     // Add a static context for each node to the page variant.
     $contexts = [
@@ -77,23 +78,23 @@ class StaticContextTest extends BrowserTestBase {
       $edit = [
         'context' => 'entity:node',
       ];
-      $this->drupalPostForm(NULL, $edit, 'Add new context');
+      $this->submitForm($edit, 'Add new context');
       $edit = [
         'label' => $context['title'],
         'machine_name' => $context['machine_name'],
         'description' => $context['description'],
         'context_value' => $context['node']->getTitle() . ' (' . $context['node']->id() . ')',
       ];
-      $this->drupalPostForm(NULL, $edit, 'Save');
-      $this->assertText($context['title']);
+      $this->submitForm($edit, 'Save');
+      $this->assertSession()->pageTextContains($context['title']);
     }
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->submitForm([], 'Next');
 
     // Add a new variant.
     $variant_edit = [
       'variant_settings[page_title]' => 'Static context test page',
     ];
-    $this->drupalPostForm(NULL, $variant_edit, 'Next');
+    $this->submitForm($variant_edit, 'Next');
 
     // Add a block that renders the node from the first static context.
     $this->clickLink('Add new block');
@@ -104,8 +105,8 @@ class StaticContextTest extends BrowserTestBase {
       'settings[view_mode]' => 'default',
       'region' => 'top',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add block');
-    $this->assertText($edit['settings[label]']);
+    $this->submitForm($edit, 'Add block');
+    $this->assertSession()->pageTextContains($edit['settings[label]']);
 
     // Add a block that renders the node from the second static context.
     $this->clickLink('Add new block');
@@ -117,16 +118,16 @@ class StaticContextTest extends BrowserTestBase {
       'region' => 'bottom',
       'context_mapping[entity]' => $contexts[1]['machine_name'],
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add block');
-    $this->assertText($edit['settings[label]']);
-    $this->drupalPostForm(NULL, [], 'Finish');
+    $this->submitForm($edit, 'Add block');
+    $this->assertSession()->pageTextContains($edit['settings[label]']);
+    $this->submitForm([], 'Finish');
 
     // Open the page and verify that the node from the static context is there.
     $this->drupalGet($edit_page['path']);
-    $this->assertText($node->label());
-    $this->assertText($node->get('body')->getValue()[0]['value']);
-    $this->assertText($node2->label());
-    $this->assertText($node2->get('body')->getValue()[0]['value']);
+    $this->assertSession()->pageTextContains($node->label());
+    $this->assertSession()->pageTextContains($node->get('body')->getValue()[0]['value']);
+    $this->assertSession()->pageTextContains($node2->label());
+    $this->assertSession()->pageTextContains($node2->get('body')->getValue()[0]['value']);
 
     // Change the second static context to the first node.
     $this->drupalGet('admin/structure/page_manager/manage/static_node_context/page_variant__static_node_context-block_display-0__contexts');
@@ -135,17 +136,17 @@ class StaticContextTest extends BrowserTestBase {
       'label' => 'Static Node 2 edited',
       'context_value' => $node->getTitle(),
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText("Static Node 2 edited");
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->pageTextContains("Static Node 2 edited");
+    $this->submitForm([], 'Update and save');
 
     // Open the page and verify that the node from the static context is there.
     $this->drupalGet($edit_page['path']);
-    $this->assertText($node->label());
-    $this->assertText($node->get('body')->getValue()[0]['value']);
+    $this->assertSession()->pageTextContains($node->label());
+    $this->assertSession()->pageTextContains($node->get('body')->getValue()[0]['value']);
     // Also make sure the second node is NOT there.
-    $this->assertNoText($node2->label());
-    $this->assertNoText($node2->get('body')->getValue()[0]['value']);
+    $this->assertSession()->pageTextNotContains($node2->label());
+    $this->assertSession()->pageTextNotContains($node2->get('body')->getValue()[0]['value']);
 
     // Change the first static context to the second node.
     $this->drupalGet('admin/structure/page_manager/manage/static_node_context/page_variant__static_node_context-block_display-0__contexts');
@@ -154,30 +155,30 @@ class StaticContextTest extends BrowserTestBase {
       'label' => 'Static Node edited',
       'context_value' => $node2->getTitle(),
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText("Static Node 2 edited");
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->pageTextContains("Static Node 2 edited");
 
     // Remove the second static context view block from the variant.
     $this->drupalGet('admin/structure/page_manager/manage/static_node_context/page_variant__static_node_context-block_display-0__content');
     $this->clickLink('Delete', 1);
-    $this->drupalPostForm(NULL, [], t('Delete'));
-    $this->drupalPostForm(NULL, [], 'Update and save');
+    $this->submitForm([], t('Delete'));
+    $this->submitForm([], 'Update and save');
 
     // Make sure only the second static context's node is rendered on the page.
     $this->drupalGet($edit_page['path']);
-    $this->assertNoText($node->label());
-    $this->assertNoText($node->get('body')->getValue()[0]['value']);
-    $this->assertText($node2->label());
-    $this->assertText($node2->get('body')->getValue()[0]['value']);
+    $this->assertSession()->pageTextNotContains($node->label());
+    $this->assertSession()->pageTextNotContains($node->get('body')->getValue()[0]['value']);
+    $this->assertSession()->pageTextContains($node2->label());
+    $this->assertSession()->pageTextContains($node2->get('body')->getValue()[0]['value']);
 
     // Delete a static context and verify that it was deleted.
     $this->drupalGet('admin/structure/page_manager/manage/static_node_context/page_variant__static_node_context-block_display-0__contexts');
     $this->clickLink('Delete');
-    $this->drupalPostForm(NULL, [], t('Delete'));
-    $this->assertText("The static context Static Node edited has been removed.");
+    $this->submitForm([], t('Delete'));
+    $this->assertSession()->pageTextContains("The static context Static Node edited has been removed.");
     // Reload the page to clear the message.
     $this->drupalGet($this->getUrl());
-    $this->assertNoText($edit['label']);
+    $this->assertSession()->pageTextNotContains($edit['label']);
 
     // Test contexts in a new variant.
     $this->drupalGet('admin/structure/page_manager/manage/static_node_context/general');
@@ -187,28 +188,28 @@ class StaticContextTest extends BrowserTestBase {
       'variant_plugin_id' => 'block_display',
       'wizard_options[contexts]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
     foreach ($contexts as $context) {
       $edit = [
         'context' => 'entity:node',
       ];
-      $this->drupalPostForm(NULL, $edit, 'Add new context');
+      $this->submitForm($edit, 'Add new context');
       $edit = [
         'label' => $context['title'],
         'machine_name' => $context['machine_name'],
         'description' => $context['description'],
         'context_value' => $context['node']->getTitle() . ' (' . $context['node']->id() . ')',
       ];
-      $this->drupalPostForm(NULL, $edit, 'Save');
-      $this->assertText($context['title']);
+      $this->submitForm($edit, 'Save');
+      $this->assertSession()->pageTextContains($context['title']);
     }
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->submitForm([], 'Next');
 
     // Configure the new variant.
     $variant_edit = [
       'variant_settings[page_title]' => 'Variant two static context test',
     ];
-    $this->drupalPostForm(NULL, $variant_edit, 'Next');
+    $this->submitForm($variant_edit, 'Next');
 
     // Add a block that renders the node from the first static context.
     $this->clickLink('Add new block');
@@ -219,8 +220,8 @@ class StaticContextTest extends BrowserTestBase {
       'settings[view_mode]' => 'default',
       'region' => 'top',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add block');
-    $this->assertText($edit['settings[label]']);
+    $this->submitForm($edit, 'Add block');
+    $this->assertSession()->pageTextContains($edit['settings[label]']);
 
     // Add a block that renders the node from the second static context.
     $this->clickLink('Add new block');
@@ -232,9 +233,9 @@ class StaticContextTest extends BrowserTestBase {
       'region' => 'bottom',
       'context_mapping[entity]' => $contexts[1]['machine_name'],
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add block');
-    $this->assertText($edit['settings[label]']);
-    $this->drupalPostForm(NULL, [], 'Finish');
+    $this->submitForm($edit, 'Add block');
+    $this->assertSession()->pageTextContains($edit['settings[label]']);
+    $this->submitForm([], 'Finish');
   }
 
 }
diff --git a/page_manager_ui/tests/src/FunctionalJavascript/PageManagerAdminTest.php b/page_manager_ui/tests/src/FunctionalJavascript/PageManagerAdminTest.php
index ffc10d3..6681102 100644
--- a/page_manager_ui/tests/src/FunctionalJavascript/PageManagerAdminTest.php
+++ b/page_manager_ui/tests/src/FunctionalJavascript/PageManagerAdminTest.php
@@ -26,7 +26,7 @@ class PageManagerAdminTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalPlaceBlock('local_tasks_block');
@@ -74,27 +74,27 @@ class PageManagerAdminTest extends WebDriverTestBase {
       'wizard_options[access]' => TRUE,
       'wizard_options[selection]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');
 
     // Test the 'Page access' step.
     $this->assertTitle('Page access | Drupal');
     $access_path = 'admin/structure/page_manager/add/foo/access';
-    $this->assertUrl($access_path . '?js=nojs');
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->assertSession()->addressEquals($access_path . '?js=nojs');
+    $this->submitForm([], 'Next');
 
     // Test the 'Selection criteria' step.
     $this->assertTitle('Selection criteria | Drupal');
     $selection_path = 'admin/structure/page_manager/add/foo/selection';
-    $this->assertUrl($selection_path . '?js=nojs');
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->assertSession()->addressEquals($selection_path . '?js=nojs');
+    $this->submitForm([], 'Next');
 
     // Configure the variant.
     $edit = [
       'page_variant_label' => 'Status Code',
       'variant_settings[status_code]' => 200,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Finish');
-    $this->assertRaw(new FormattableMarkup('The page %label has been added.', ['%label' => 'Foo']));
+    $this->submitForm($edit, 'Finish');
+    $this->assertSession()->responseContains(new FormattableMarkup('The page %label has been added.', ['%label' => 'Foo']));
     // We've gone from the add wizard to the edit wizard.
     $this->drupalGet('admin/structure/page_manager/manage/foo/general');
 
@@ -106,7 +106,7 @@ class PageManagerAdminTest extends WebDriverTestBase {
     $edit = [
       'variant_settings[status_code]' => 403,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Update and save');
+    $this->submitForm($edit, 'Update and save');
   }
 
   /**
diff --git a/src/Entity/Page.php b/src/Entity/Page.php
index 003e053..efc5208 100644
--- a/src/Entity/Page.php
+++ b/src/Entity/Page.php
@@ -345,7 +345,7 @@ class Page extends ConfigEntityBase implements PageInterface {
       'current_user',
     ];
     if (!$this->contexts) {
-      $this->eventDispatcher()->dispatch(PageManagerEvents::PAGE_CONTEXT, new PageManagerContextEvent($this));
+      $this->eventDispatcher()->dispatch(new PageManagerContextEvent($this), PageManagerEvents::PAGE_CONTEXT);
       foreach ($this->getParameters() as $machine_name => $configuration) {
         // Parameters can be updated in the UI, so unless it's a global context
         // we'll need to rely on the current settings in the tempstore instead
diff --git a/src/Event/PageManagerContextEvent.php b/src/Event/PageManagerContextEvent.php
index bfcc6de..00e9904 100644
--- a/src/Event/PageManagerContextEvent.php
+++ b/src/Event/PageManagerContextEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\page_manager\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\page_manager\PageInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Wraps a page entity for event subscribers.
diff --git a/src/EventSubscriber/RouteNameResponseSubscriber.php b/src/EventSubscriber/RouteNameResponseSubscriber.php
index 739084e..ef695e1 100644
--- a/src/EventSubscriber/RouteNameResponseSubscriber.php
+++ b/src/EventSubscriber/RouteNameResponseSubscriber.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\page_manager\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\Core\Routing\StackedRouteMatchInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -33,10 +33,10 @@ class RouteNameResponseSubscriber implements EventSubscriberInterface {
   /**
    * Adds the route name as a cache tag to all cacheable responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $response = $event->getResponse();
     if ($response instanceof CacheableResponseInterface) {
       $cacheability_metadata = $response->getCacheableMetadata();
diff --git a/tests/src/Functional/FrontPageTest.php b/tests/src/Functional/FrontPageTest.php
index a56f56d..f6e7b70 100644
--- a/tests/src/Functional/FrontPageTest.php
+++ b/tests/src/Functional/FrontPageTest.php
@@ -75,7 +75,7 @@ class FrontPageTest extends BrowserTestBase {
     // The title should default to "Home" on the front page.
     // @todo This gives 404 :(
     $this->drupalGet('');
-    $this->assertTitle('Home | Drupal');
+    $this->assertSession()->titleEquals('Home | Drupal');
   }
 
 }
diff --git a/tests/src/Functional/PageManagerConfigTranslationTest.php b/tests/src/Functional/PageManagerConfigTranslationTest.php
index 83f337f..912a415 100644
--- a/tests/src/Functional/PageManagerConfigTranslationTest.php
+++ b/tests/src/Functional/PageManagerConfigTranslationTest.php
@@ -29,7 +29,7 @@ class PageManagerConfigTranslationTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     ConfigurableLanguage::createFromLangcode('de')->save();
@@ -49,20 +49,20 @@ class PageManagerConfigTranslationTest extends BrowserTestBase {
    */
   public function testTranslation() {
     $this->drupalGet('admin/config/regional/config-translation');
-    $this->assertLinkByHref('admin/config/regional/config-translation/page');
-    $this->assertLinkByHref('admin/config/regional/config-translation/page_variant');
+    $this->assertSession()->linkByHrefExists('admin/config/regional/config-translation/page');
+    $this->assertSession()->linkByHrefExists('admin/config/regional/config-translation/page_variant');
 
     $this->drupalGet('admin/config/regional/config-translation/page');
-    $this->assertText('Node view');
+    $this->assertSession()->pageTextContains('Node view');
     $this->clickLink('Translate');
     $this->clickLink('Add');
-    $this->assertField('translation[config_names][page_manager.page.node_view][label]');
+    $this->assertSession()->fieldExists('translation[config_names][page_manager.page.node_view][label]');
 
     $this->drupalGet('admin/config/regional/config-translation/page_variant');
-    $this->assertText('HTTP status code');
+    $this->assertSession()->pageTextContains('HTTP status code');
     $this->clickLink('Translate');
     $this->clickLink('Add');
-    $this->assertField('translation[config_names][page_manager.page_variant.http_status_code][label]');
+    $this->assertSession()->fieldExists('translation[config_names][page_manager.page_variant.http_status_code][label]');
   }
 
 }
diff --git a/tests/src/Functional/PageManagerTranslationIntegrationTest.php b/tests/src/Functional/PageManagerTranslationIntegrationTest.php
index 51c9de2..a5cce7e 100644
--- a/tests/src/Functional/PageManagerTranslationIntegrationTest.php
+++ b/tests/src/Functional/PageManagerTranslationIntegrationTest.php
@@ -58,10 +58,10 @@ class PageManagerTranslationIntegrationTest extends ContentTranslationTestBase {
 
     $node = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
-    $this->assertText($node->label());
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains($node->label());
     $this->clickLink('Translate');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Create a new variant.
     $http_status_variant = PageVariant::create([
@@ -75,9 +75,9 @@ class PageManagerTranslationIntegrationTest extends ContentTranslationTestBase {
     $this->triggerRouterRebuild();
 
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->clickLink('Translate');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }
 
 }
diff --git a/tests/src/Functional/PageNodeAccessTest.php b/tests/src/Functional/PageNodeAccessTest.php
index eedb439..7aa84dd 100644
--- a/tests/src/Functional/PageNodeAccessTest.php
+++ b/tests/src/Functional/PageNodeAccessTest.php
@@ -35,7 +35,7 @@ class PageNodeAccessTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Remove the 'access content' permission from anonymous and auth users.
@@ -57,9 +57,9 @@ class PageNodeAccessTest extends BrowserTestBase {
 
     $this->drupalLogin($this->drupalCreateUser(['access content']));
     $this->drupalGet('node/' . $node1->id());
-    $this->assertResponse(200);
-    $this->assertText($node1->label());
-    $this->assertTitle($node1->label() . ' | Drupal');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains($node1->label());
+    $this->assertSession()->titleEquals($node1->label() . ' | Drupal');
 
     // Add a variant and an access condition.
     /** @var \Drupal\page_manager\Entity\PageVariant $page_variant */
@@ -95,26 +95,26 @@ class PageNodeAccessTest extends BrowserTestBase {
 
     $this->drupalLogout();
     $this->drupalGet('node/' . $node1->id());
-    $this->assertResponse(403);
-    $this->assertNoText($node1->label());
-    $this->assertTitle('Access denied | Drupal');
+    $this->assertSession()->statusCodeEquals(403);
+    $this->assertSession()->pageTextNotContains($node1->label());
+    $this->assertSession()->titleEquals('Access denied | Drupal');
 
     $this->drupalLogin($this->drupalCreateUser());
     $this->drupalGet('node/' . $node1->id());
-    $this->assertResponse(403);
-    $this->assertNoText($node1->label());
-    $this->assertTitle('Access denied | Drupal');
+    $this->assertSession()->statusCodeEquals(403);
+    $this->assertSession()->pageTextNotContains($node1->label());
+    $this->assertSession()->titleEquals('Access denied | Drupal');
 
     $this->drupalLogin($this->drupalCreateUser(['access content']));
     $this->drupalGet('node/' . $node1->id());
-    $this->assertResponse(200);
-    $this->assertNoText($node1->label());
-    $this->assertTitle('The overridden page | Drupal');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextNotContains($node1->label());
+    $this->assertSession()->titleEquals('The overridden page | Drupal');
 
     $this->drupalGet('node/' . $node2->id());
-    $this->assertResponse(403);
-    $this->assertNoText($node2->label());
-    $this->assertTitle('Access denied | Drupal');
+    $this->assertSession()->statusCodeEquals(403);
+    $this->assertSession()->pageTextNotContains($node2->label());
+    $this->assertSession()->titleEquals('Access denied | Drupal');
   }
 
 }
diff --git a/tests/src/Functional/PageNodeSelectionTest.php b/tests/src/Functional/PageNodeSelectionTest.php
index 05b567f..4f776e5 100644
--- a/tests/src/Functional/PageNodeSelectionTest.php
+++ b/tests/src/Functional/PageNodeSelectionTest.php
@@ -27,7 +27,7 @@ class PageNodeSelectionTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
@@ -46,15 +46,15 @@ class PageNodeSelectionTest extends BrowserTestBase {
     $node2 = $this->drupalCreateNode(['title' => '<em>First</em> & <Second>', 'type' => 'article']);
     $node3 = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalGet('node/' . $node1->id());
-    $this->assertResponse(200);
-    $this->assertText($node1->label());
-    $this->assertTitle($node1->label() . ' | Drupal');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains($node1->label());
+    $this->assertSession()->titleEquals($node1->label() . ' | Drupal');
     $this->drupalGet('node/' . $node2->id());
-    $this->assertResponse(200);
-    $this->assertCacheTag('page_manager_route_name:entity.node.canonical');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'page_manager_route_name:entity.node.canonical');
     $expected_title = '&lt;em&gt;First&lt;/em&gt; &amp; &lt;Second&gt;';
-    $this->assertRaw($expected_title);
-    $this->assertTitle(html_entity_decode($expected_title) . ' | Drupal');
+    $this->assertSession()->responseContains($expected_title);
+    $this->assertSession()->titleEquals(html_entity_decode($expected_title) . ' | Drupal');
 
     // Create a new variant to always return 404, the node_view page exists by
     // default.
@@ -69,12 +69,12 @@ class PageNodeSelectionTest extends BrowserTestBase {
     $this->triggerRouterRebuild();
 
     $this->drupalGet('node/' . $node1->id());
-    $this->assertResponse(404);
-    $this->assertCacheTag('page_manager_route_name:entity.node.canonical');
-    $this->assertNoText($node1->label());
+    $this->assertSession()->statusCodeEquals(404);
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'page_manager_route_name:entity.node.canonical');
+    $this->assertSession()->pageTextNotContains($node1->label());
     $this->drupalGet('node/' . $node2->id());
-    $this->assertResponse(404);
-    $this->assertNoText($node2->label());
+    $this->assertSession()->statusCodeEquals(404);
+    $this->assertSession()->pageTextNotContains($node2->label());
 
     // Add a new variant.
     /** @var \Drupal\page_manager\PageVariantInterface $block_page_variant */
@@ -89,7 +89,7 @@ class PageNodeSelectionTest extends BrowserTestBase {
     $uuid = $block_page_plugin->getConfiguration()['uuid'];
     $block_page_plugin->setConfiguration(['page_title' => '[node:title]']);
     $second_uuid = $block_page_plugin->getConfiguration()['uuid'];
-    $this->assertEqual($uuid, $second_uuid);
+    $this->assertEquals($uuid, $second_uuid);
     /** @var \Drupal\page_manager\Plugin\DisplayVariant\PageBlockDisplayVariant $block_page_plugin */
     $block_page_plugin->addBlock([
       'id' => 'entity_view:node',
@@ -116,33 +116,33 @@ class PageNodeSelectionTest extends BrowserTestBase {
 
     // The page node will 404, but the article node will display the variant.
     $this->drupalGet('node/' . $node1->id());
-    $this->assertResponse(404);
-    $this->assertNoText($node1->label());
+    $this->assertSession()->statusCodeEquals(404);
+    $this->assertSession()->pageTextNotContains($node1->label());
 
     $this->drupalGet('node/' . $node2->id());
-    $this->assertResponse(200);
-    $this->assertTitle(html_entity_decode($expected_title) . ' | Drupal');
-    $this->assertText($node2->body->value);
-    $this->assertRaw('<h1 class="page-title">' . $expected_title . '</h1>');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->titleEquals(html_entity_decode($expected_title) . ' | Drupal');
+    $this->assertSession()->pageTextContains($node2->body->value);
+    $this->assertSession()->responseContains('<h1 class="page-title">' . $expected_title . '</h1>');
 
     // Test cacheability metadata.
     $this->drupalGet('node/' . $node3->id());
-    $this->assertTitle($node3->label() . ' | Drupal');
-    $this->assertText($node3->body->value);
-    $this->assertNoText($node2->label());
+    $this->assertSession()->titleEquals($node3->label() . ' | Drupal');
+    $this->assertSession()->pageTextContains($node3->body->value);
+    $this->assertSession()->pageTextNotContains($node2->label());
 
     // Ensure that setting the same title directly in the block display results
     // in the same output.
     $block_page_plugin->setConfiguration(['page_title' => '<em>First</em> & <Second>']);
     $block_page_variant->save();
     $this->drupalGet('node/' . $node2->id());
-    $this->assertResponse(200);
-    $this->assertTitle(html_entity_decode($expected_title) . ' | Drupal');
-    $this->assertRaw('<h1 class="page-title">' . $expected_title . '</h1>');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->titleEquals(html_entity_decode($expected_title) . ' | Drupal');
+    $this->assertSession()->responseContains('<h1 class="page-title">' . $expected_title . '</h1>');
 
     // Ensure this doesn't affect the /node/add page.
     $this->drupalGet('node/add');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }
 
 }
diff --git a/tests/src/Functional/PagePlaceholderTest.php b/tests/src/Functional/PagePlaceholderTest.php
index b16b87a..8bcb39d 100644
--- a/tests/src/Functional/PagePlaceholderTest.php
+++ b/tests/src/Functional/PagePlaceholderTest.php
@@ -28,7 +28,7 @@ class PagePlaceholderTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->drupalCreateUser(['administer pages']));
   }
@@ -40,9 +40,9 @@ class PagePlaceholderTest extends BrowserTestBase {
     // Access the page callback and check whether string is printed.
     $page_string = 'test-page';
     $this->drupalGet('page-manager-test/' . $page_string);
-    $this->assertResponse(200);
-    $this->assertCacheTag('page_manager_route_name:page_manager_test.page_view');
-    $this->assertText('Hello World! Page ' . $page_string);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'page_manager_route_name:page_manager_test.page_view');
+    $this->assertSession()->pageTextContains('Hello World! Page ' . $page_string);
 
     // Create a new page entity with the same path as in the test module.
     $page = Page::create([
@@ -69,9 +69,9 @@ class PagePlaceholderTest extends BrowserTestBase {
 
     // Access the page callback again and check that now the text is not there.
     $this->drupalGet('page-manager-test/' . $page_string);
-    $this->assertResponse(200);
-    $this->assertCacheTag('page_manager_route_name:page_manager_test.page_view');
-    $this->assertNoText('Hello World! Page ' . $page_string);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'page_manager_route_name:page_manager_test.page_view');
+    $this->assertSession()->pageTextNotContains('Hello World! Page ' . $page_string);
   }
 
 }
diff --git a/tests/src/Functional/Update/UpdateContextName.php b/tests/src/Functional/Update/UpdateContextName.php
index 2c3bee1..3d1ab89 100644
--- a/tests/src/Functional/Update/UpdateContextName.php
+++ b/tests/src/Functional/Update/UpdateContextName.php
@@ -32,10 +32,10 @@ class UpdateContextName extends UpdatePathTestBase {
       ->load('test_page-block_display-0');
 
     $selection_criteria = $pageVariant->get('selection_criteria');
-    $this->assertEqual($selection_criteria[0]['context_mapping']['user'], '@user.current_user_context:current_user');
+    $this->assertEquals($selection_criteria[0]['context_mapping']['user'], '@user.current_user_context:current_user');
 
     $variant_settings = $pageVariant->get('variant_settings');
-    $this->assertEqual($variant_settings['blocks']['29550d0e-39f1-4fb9-bad6-c390dda5bd00']['context_mapping']['entity'], '@user.current_user_context:current_user');
+    $this->assertEquals($variant_settings['blocks']['29550d0e-39f1-4fb9-bad6-c390dda5bd00']['context_mapping']['entity'], '@user.current_user_context:current_user');
   }
 
 }
diff --git a/tests/src/FunctionalJavascript/LayoutBuilderDisplayVariantTest.php b/tests/src/FunctionalJavascript/LayoutBuilderDisplayVariantTest.php
index 99237c6..32156a3 100644
--- a/tests/src/FunctionalJavascript/LayoutBuilderDisplayVariantTest.php
+++ b/tests/src/FunctionalJavascript/LayoutBuilderDisplayVariantTest.php
@@ -32,7 +32,7 @@ class LayoutBuilderDisplayVariantTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalLogin($this->createUser(array_keys($this->container->get('user.permissions')
diff --git a/tests/src/FunctionalJavascript/PageBlockDisplayVariantContextualLinksTest.php b/tests/src/FunctionalJavascript/PageBlockDisplayVariantContextualLinksTest.php
index 8c63500..f211984 100644
--- a/tests/src/FunctionalJavascript/PageBlockDisplayVariantContextualLinksTest.php
+++ b/tests/src/FunctionalJavascript/PageBlockDisplayVariantContextualLinksTest.php
@@ -42,7 +42,7 @@ class PageBlockDisplayVariantContextualLinksTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     BlockContentType::create(['id' => 'test_block_type'])->save();
diff --git a/tests/src/Kernel/PageConfigSchemaTest.php b/tests/src/Kernel/PageConfigSchemaTest.php
index ff98095..dfe5f47 100644
--- a/tests/src/Kernel/PageConfigSchemaTest.php
+++ b/tests/src/Kernel/PageConfigSchemaTest.php
@@ -24,7 +24,7 @@ class PageConfigSchemaTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['page_manager']);
   }
diff --git a/tests/src/Kernel/PageManagerRoutingTest.php b/tests/src/Kernel/PageManagerRoutingTest.php
index 339a5ea..b332c34 100644
--- a/tests/src/Kernel/PageManagerRoutingTest.php
+++ b/tests/src/Kernel/PageManagerRoutingTest.php
@@ -25,7 +25,7 @@ class PageManagerRoutingTest extends EntityKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // If we are on Drupal 8.8 or later, we need to install the path_alias
diff --git a/tests/src/Kernel/SerializationTest.php b/tests/src/Kernel/SerializationTest.php
index 0ac7452..1664f6c 100644
--- a/tests/src/Kernel/SerializationTest.php
+++ b/tests/src/Kernel/SerializationTest.php
@@ -28,7 +28,7 @@ class SerializationTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // @todo: Remove the silent dependency on user.
diff --git a/tests/src/Unit/ContextMapperTest.php b/tests/src/Unit/ContextMapperTest.php
index 5f890b8..00c253a 100644
--- a/tests/src/Unit/ContextMapperTest.php
+++ b/tests/src/Unit/ContextMapperTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\page_manager\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Plugin\Context\Context;
@@ -20,6 +21,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class ContextMapperTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The typed data manager.
    *
@@ -40,7 +42,7 @@ class ContextMapperTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->typedDataManager = $this->prophesize(TypedDataManager::class);
diff --git a/tests/src/Unit/CurrentUserContextTest.php b/tests/src/Unit/CurrentUserContextTest.php
index 41a3ee0..bda91a6 100644
--- a/tests/src/Unit/CurrentUserContextTest.php
+++ b/tests/src/Unit/CurrentUserContextTest.php
@@ -23,13 +23,9 @@ class CurrentUserContextTest extends PageContextTestBase {
    * @covers ::onPageContext
    */
   public function testOnPageContext() {
-    $currentUser = $this->getMockBuilder(AccountProxyInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $currentUser = $this->createMock(AccountProxyInterface::class);
 
-    $contextRepository = $this->getMockBuilder(LazyContextRepository::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $contextRepository = $this->createMock(LazyContextRepository::class);
     $currentUserContext = new EntityContext(new EntityContextDefinition('user', 'current_user_context'), $currentUser->getAccount());
     $contextRepository->expects($this->once())
       ->method('getRunTimeContexts')
diff --git a/tests/src/Unit/LanguageInterfaceContextTest.php b/tests/src/Unit/LanguageInterfaceContextTest.php
index f2d5441..faa1a8c 100644
--- a/tests/src/Unit/LanguageInterfaceContextTest.php
+++ b/tests/src/Unit/LanguageInterfaceContextTest.php
@@ -27,18 +27,14 @@ class LanguageInterfaceContextTest extends PageContextTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
-    $language_manager = $this->getMockBuilder('\Drupal\Core\Language\LanguageManagerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $language_manager = $this->createMock('\Drupal\Core\Language\LanguageManagerInterface');
 
     $context = new Context(new ContextDefinition('language', 'current_language_context'), $language_manager->getCurrentLanguage(LanguageInterface::TYPE_INTERFACE));
 
-    $this->contextRepository = $this->getMockBuilder('\Drupal\Core\Plugin\Context\ContextRepositoryInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->contextRepository = $this->createMock('\Drupal\Core\Plugin\Context\ContextRepositoryInterface');
     $this->contextRepository->expects($this->once())
       ->method('getRunTimeContexts')
       ->willReturn(['@language.current_language_context:language_interface' => $context]);
diff --git a/tests/src/Unit/PageAccessTest.php b/tests/src/Unit/PageAccessTest.php
index ae9ee1f..379ade2 100644
--- a/tests/src/Unit/PageAccessTest.php
+++ b/tests/src/Unit/PageAccessTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\page_manager\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Cache\Context\CacheContextsManager;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -23,15 +24,16 @@ use Prophecy\Argument;
  */
 class PageAccessTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $contextHandler;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityTypeInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityType;
 
@@ -48,7 +50,7 @@ class PageAccessTest extends UnitTestCase {
   /**
    * @covers ::__construct
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->contextHandler = $this->prophesize(ContextHandlerInterface::class);
     $this->entityType = $this->prophesize(EntityTypeInterface::class);
diff --git a/tests/src/Unit/PageBlockDisplayVariantTest.php b/tests/src/Unit/PageBlockDisplayVariantTest.php
index db27881..25f77c7 100644
--- a/tests/src/Unit/PageBlockDisplayVariantTest.php
+++ b/tests/src/Unit/PageBlockDisplayVariantTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\page_manager\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockManager;
@@ -29,6 +30,7 @@ use Symfony\Component\DependencyInjection\ContainerBuilder;
  */
 class PageBlockDisplayVariantTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests the build() method when a block is empty.
    *
@@ -128,9 +130,7 @@ class PageBlockDisplayVariantTest extends UnitTestCase {
         'block2' => $block2->reveal(),
       ],
     ];
-    $block_collection = $this->getMockBuilder(BlockPluginCollection::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $block_collection = $this->createMock(BlockPluginCollection::class);
     $block_collection->expects($this->once())
       ->method('getAllByRegion')
       ->willReturn($blocks);
@@ -142,9 +142,7 @@ class PageBlockDisplayVariantTest extends UnitTestCase {
     $module_handler->alter();
     $uuid_generator = $this->prophesize(UuidInterface::class);
     $page_title = 'Page title';
-    $token = $this->getMockBuilder(Token::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $token = $this->createMock(Token::class);
     $block_manager = $this->prophesize(BlockManager::class);
     $condition_manager = $this->prophesize(ConditionManager::class);
     $variant_plugin = $this->getMockBuilder(PageBlockDisplayVariant::class)
diff --git a/tests/src/Unit/PageContextTestBase.php b/tests/src/Unit/PageContextTestBase.php
index baddc85..29d11ac 100644
--- a/tests/src/Unit/PageContextTestBase.php
+++ b/tests/src/Unit/PageContextTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\page_manager\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\TypedData\TypedDataManager;
 use Drupal\page_manager\Event\PageManagerContextEvent;
@@ -13,6 +14,7 @@ use Drupal\Tests\UnitTestCase;
  */
 abstract class PageContextTestBase extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The typed data manager.
    *
@@ -37,7 +39,7 @@ abstract class PageContextTestBase extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->typedDataManager = $this->prophesize(TypedDataManager::class);
diff --git a/tests/src/Unit/PageManagerRoutesTest.php b/tests/src/Unit/PageManagerRoutesTest.php
index 09db89b..20e76f9 100644
--- a/tests/src/Unit/PageManagerRoutesTest.php
+++ b/tests/src/Unit/PageManagerRoutesTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\page_manager\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -22,17 +23,18 @@ use Symfony\Component\Routing\RouteCollection;
  */
 class PageManagerRoutesTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The mocked entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityTypeManager;
 
   /**
    * The mocked page storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $pageStorage;
 
@@ -55,7 +57,7 @@ class PageManagerRoutesTest extends UnitTestCase {
    *
    * @covers ::__construct
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->pageStorage = $this->prophesize(ConfigEntityStorageInterface::class);
 
     $this->entityTypeManager = $this->prophesize(EntityTypeManagerInterface::class);
diff --git a/tests/src/Unit/PageTest.php b/tests/src/Unit/PageTest.php
index 52770a4..a5a4492 100644
--- a/tests/src/Unit/PageTest.php
+++ b/tests/src/Unit/PageTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\page_manager\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -24,6 +25,7 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
  */
 class PageTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @var \Drupal\page_manager\Entity\Page
    */
@@ -32,7 +34,7 @@ class PageTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->page = new Page(['id' => 'the_page'], 'page');
diff --git a/tests/src/Unit/PageVariantTest.php b/tests/src/Unit/PageVariantTest.php
index 699e6dc..b0bcb0d 100644
--- a/tests/src/Unit/PageVariantTest.php
+++ b/tests/src/Unit/PageVariantTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\page_manager\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -17,6 +18,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class PageVariantTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @var \Drupal\page_manager\Entity\PageVariant
    */
@@ -35,7 +37,7 @@ class PageVariantTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->pageVariant = new PageVariant(['id' => 'the_page_variant', 'page' => 'the_page'], 'page_variant');
diff --git a/tests/src/Unit/RouteNameResponseSubscriberTest.php b/tests/src/Unit/RouteNameResponseSubscriberTest.php
index 862f379..b46400b 100644
--- a/tests/src/Unit/RouteNameResponseSubscriberTest.php
+++ b/tests/src/Unit/RouteNameResponseSubscriberTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\page_manager\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponse;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Routing\StackedRouteMatchInterface;
@@ -9,7 +11,6 @@ use Drupal\page_manager\EventSubscriber\RouteNameResponseSubscriber;
 use Drupal\Tests\UnitTestCase;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\HttpKernelInterface;
 
 /**
@@ -18,6 +19,7 @@ use Symfony\Component\HttpKernel\HttpKernelInterface;
  */
 class RouteNameResponseSubscriberTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers ::onResponse
    */
@@ -83,13 +85,13 @@ class RouteNameResponseSubscriberTest extends UnitTestCase {
    * @param \Symfony\Component\HttpFoundation\Response $response
    *   The response to be sent as the event payload.
    *
-   * @return \Symfony\Component\HttpKernel\Event\FilterResponseEvent
+   * @return \Symfony\Component\HttpKernel\Event\ResponseEvent
    *   An event suitable for a KernelEvents::RESPONSE subscriber to process.
    */
   protected function buildEvent(Response $response) {
     $kernel = $this->prophesize(HttpKernelInterface::class);
     $request = Request::create('');
-    return new FilterResponseEvent($kernel->reveal(), $request, HttpKernelInterface::SUB_REQUEST, $response);
+    return new ResponseEvent($kernel->reveal(), $request, HttpKernelInterface::SUB_REQUEST, $response);
   }
 
 }
diff --git a/tests/src/Unit/RouteParamContextTest.php b/tests/src/Unit/RouteParamContextTest.php
index e941ca5..1eb1d43 100644
--- a/tests/src/Unit/RouteParamContextTest.php
+++ b/tests/src/Unit/RouteParamContextTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\page_manager\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Plugin\Context\Context;
 use Drupal\Core\Routing\RouteProviderInterface;
 use Drupal\Core\TypedData\DataDefinition;
@@ -22,6 +23,7 @@ use Symfony\Component\Routing\RouteCollection;
  */
 class RouteParamContextTest extends PageContextTestBase {
 
+  use ProphecyTrait;
   /**
    * @covers ::onPageContext
    */
diff --git a/tests/src/Unit/VariantRouteFilterTest.php b/tests/src/Unit/VariantRouteFilterTest.php
index 3ad2d07..4b0465c 100644
--- a/tests/src/Unit/VariantRouteFilterTest.php
+++ b/tests/src/Unit/VariantRouteFilterTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\page_manager\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -21,6 +22,7 @@ use Symfony\Component\Routing\RouteCollection;
  */
 class VariantRouteFilterTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The mocked entity type manager.
    *
@@ -59,7 +61,7 @@ class VariantRouteFilterTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->pageVariantStorage = $this->prophesize(ConfigEntityStorageInterface::class);
 
     $this->entityTypeManager = $this->prophesize(EntityTypeManagerInterface::class);
@@ -74,7 +76,7 @@ class VariantRouteFilterTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     // The request stack begins empty, ensure it is empty after filtering.
     $this->assertNull($this->requestStack->getCurrentRequest());
     parent::tearDown();
