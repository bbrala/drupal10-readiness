modules/contrib/smart_ip/includes/smart_ip.country_list.inc
modules/contrib/smart_ip/modules/smart_ip_abstract_web_service/src/AbstractWebService.php
modules/contrib/smart_ip/modules/smart_ip_ipinfodb_web_service/src/EventSubscriber/SmartIpEventSubscriber.php
modules/contrib/smart_ip/modules/smart_ip_maxmind_geoip2_web_service/src/WebServiceUtility.php
modules/contrib/smart_ip/modules/smart_ip_abstract_web_service/src/EventSubscriber/SmartIpEventSubscriber.php
modules/contrib/smart_ip/src/SmartIpEvents.php
modules/contrib/smart_ip/includes/smart_ip.region_lookup.inc
modules/contrib/smart_ip/src/SmartIpLocation.php
modules/contrib/smart_ip/smart_ip.install
modules/contrib/smart_ip/smart_ip.module
modules/contrib/smart_ip/src/SmartIpLocationInterface.php
modules/contrib/smart_ip/src/WebServiceUtilityBase.php
modules/contrib/smart_ip/modules/smart_ip_abstract_web_service/src/WebServiceUtility.php
modules/contrib/smart_ip/modules/smart_ip_ip2location_bin_db/smart_ip_ip2location_bin_db.install
modules/contrib/smart_ip/src/WebServiceUtilityInterface.php
modules/contrib/smart_ip/modules/smart_ip_ip2location_bin_db/src/DatabaseFileUtility.php
modules/contrib/smart_ip/modules/smart_ip_ipinfodb_web_service/src/IpinfodbWebService.php
modules/contrib/smart_ip/modules/smart_ip_ipinfodb_web_service/src/WebServiceUtility.php
modules/contrib/smart_ip/modules/smart_ip_maxmind_geoip2_bin_db/smart_ip_maxmind_geoip2_bin_db.install
modules/contrib/smart_ip/modules/smart_ip_maxmind_geoip2_bin_db/src/DatabaseFileUtility.php
modules/contrib/smart_ip/modules/smart_ip_ip2location_bin_db/src/EventSubscriber/SmartIpEventSubscriber.php
modules/contrib/smart_ip/modules/smart_ip_maxmind_geoip2_bin_db/src/EventSubscriber/SmartIpEventSubscriber.php
modules/contrib/smart_ip/src/AdminSettingsEvent.php
modules/contrib/smart_ip/src/DatabaseFileEvent.php
modules/contrib/smart_ip/src/DatabaseFileUtilityBase.php
modules/contrib/smart_ip/modules/smart_ip_maxmind_geoip2_bin_db/src/MaxmindGeoip2BinDb.php
modules/contrib/smart_ip/modules/smart_ip_maxmind_geoip2_web_service/src/EventSubscriber/SmartIpEventSubscriber.php
modules/contrib/smart_ip/src/DatabaseFileUtilityInterface.php
modules/contrib/smart_ip/src/EventSubscriber/GeolocateUserSubscriber.php
modules/contrib/smart_ip/src/Form/SmartIpAdminSettingsForm.php
modules/contrib/smart_ip/modules/smart_ip_maxmind_geoip2_web_service/src/MaxmindGeoip2WebService.php
modules/contrib/smart_ip/modules/smart_ip_ip2location_bin_db/src/Ip2locationBinDb.php
modules/contrib/smart_ip/src/GetLocationEvent.php
modules/contrib/smart_ip/src/Plugin/Condition/UserCountry.php
modules/contrib/smart_ip/src/SmartIp.php
modules/contrib/smart_ip/src/SmartIpDataSourceInterface.php
modules/contrib/smart_ip/src/SmartIpEventSubscriberBase.php

9 files with changes
====================

1) modules/contrib/smart_ip/modules/smart_ip_maxmind_geoip2_bin_db/src/EventSubscriber/SmartIpEventSubscriber.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\smart_ip_maxmind_geoip2_bin_db\EventSubscriber;

+use MaxMind\Db\Reader;
 use Drupal\smart_ip_maxmind_geoip2_bin_db\DatabaseFileUtility;
 use Drupal\smart_ip_maxmind_geoip2_bin_db\MaxmindGeoip2BinDb;
 use Drupal\smart_ip\DatabaseFileUtilityBase;
@@ @@
         return;
       }
       if (class_exists('\MaxMind\Db\Reader')) {
-        $reader = new \MaxMind\Db\Reader($dbFile);
+        $reader = new Reader($dbFile);
         $raw    = $reader->get($ipAddress);
       }
       else {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/smart_ip/modules/smart_ip_ip2location_bin_db/src/EventSubscriber/SmartIpEventSubscriber.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\smart_ip_ip2location_bin_db\EventSubscriber;

+use IP2Location\Database;
 use Drupal\smart_ip_ip2location_bin_db\DatabaseFileUtility;
 use Drupal\smart_ip_ip2location_bin_db\Ip2locationBinDb;
 use Drupal\smart_ip\DatabaseFileUtilityBase;
@@ @@
         return;
       }
       if ($config->get('caching_method') == Ip2locationBinDb::NO_CACHE) {
-        $cachingMethod = \IP2Location\Database::FILE_IO;
+        $cachingMethod = Database::FILE_IO;
       }
       elseif ($config->get('caching_method') == Ip2locationBinDb::MEMORY_CACHE) {
-        $cachingMethod = \IP2Location\Database::MEMORY_CACHE;
+        $cachingMethod = Database::MEMORY_CACHE;
       }
       elseif ($config->get('caching_method') == Ip2locationBinDb::SHARED_MEMORY) {
-        $cachingMethod = \IP2Location\Database::SHARED_MEMORY;
+        $cachingMethod = Database::SHARED_MEMORY;
       }
       if (!empty($dbFile) && !empty($cachingMethod)) {
-        $reader = new \IP2Location\Database($dbFile, $cachingMethod);
-        $record = $reader->lookup($ipAddress, \IP2Location\Database::ALL);
+        $reader = new Database($dbFile, $cachingMethod);
+        $record = $reader->lookup($ipAddress, Database::ALL);
         foreach ($record as &$item) {
           if (strpos($item, 'Please upgrade') !== FALSE || strpos($item, 'Invalid IP address') !== FALSE || $item == '-') {
             // Make the value "This parameter is unavailable in selected .BIN
@@ @@
         else {
           $ip = '2001:4860:4860::8888';
         }
-        $reader = new \IP2Location\Database($file, \IP2Location\Database::FILE_IO);
-        $record = $reader->lookup($ip, \IP2Location\Database::COUNTRY);
+        $reader = new Database($file, Database::FILE_IO);
+        $record = $reader->lookup($ip, Database::COUNTRY);
         if (strtotime($reader->getDate()) <= 0 || empty($record['countryCode'])) {
           $error['code'] = Ip2locationBinDb::DB_READ_ERROR;
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/smart_ip/modules/smart_ip_ip2location_bin_db/smart_ip_ip2location_bin_db.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\smart_ip_ip2location_bin_db\EventSubscriber\SmartIpEventSubscriber;
 use Drupal\Core\Link;
 use Drupal\Core\Url;

@@ @@
  * path. Change the default value of db_auto_update to FALSE.
  */
 function smart_ip_ip2location_bin_db_update_8301() {
-  $configName = \Drupal\smart_ip_ip2location_bin_db\EventSubscriber\SmartIpEventSubscriber::configName();
+  $configName = SmartIpEventSubscriber::configName();
   $config     = \Drupal::configFactory()->getEditable($configName);
   $filesystem = \Drupal::service('file_system');
   $path       = $filesystem->dirname($config->get('ip2location_bin_db_ipv4_custom_path'));
@@ @@
     ->clear('ip2location_bin_db_ipv4_custom_path')
     ->clear('ip2location_bin_db_ipv6_custom_path')
     ->save();
-}
+}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


4) modules/contrib/smart_ip/src/GetLocationEvent.php:5

    ---------- begin diff ----------
@@ @@

 namespace Drupal\smart_ip;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Provides Smart IP query location override event for event listeners.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/smart_ip/src/EventSubscriber/GeolocateUserSubscriber.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\smart_ip\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\smart_ip\SmartIp;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;

 /**
  * Allows Smart IP to act on HTTP request event.
@@ @@
   /**
    * Initiate user geolocation.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The response event, which contains the current request.
    */
-  public function geolocateUser(GetResponseEvent $event) {
+  public function geolocateUser(RequestEvent $event) {
     // Check to see if the page is one of those allowed for geolocation.
     if (!SmartIp::checkAllowedPage()) {
       // This page is not on the list to acquire/update user's geolocation.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


6) modules/contrib/smart_ip/src/DatabaseFileEvent.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\smart_ip;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Form\FormStateInterface;

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/smart_ip/src/AdminSettingsEvent.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\smart_ip;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Form\FormStateInterface;

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/smart_ip/smart_ip.module:91

    ---------- begin diff ----------
@@ @@
  * Implements hook_page_attachments().
  */
 function smart_ip_page_attachments(array &$page) {
-  if (!\Drupal\smart_ip\SmartIp::checkAllowedPage()) {
+  if (!SmartIp::checkAllowedPage()) {
     // This page is not on the list to access user's geolocation.
     return;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


9) modules/contrib/smart_ip/smart_ip.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\Entity\Role;
 /**
  * @file
  * Install, update and uninstall functions for the image module.
@@ @@
   $config = \Drupal::configFactory()->getEditable('smart_ip.settings');
   if ($config->get('debug_mode')) {
     $debugIp      = $config->get('debug_mode_ip');
-    $roles        = \Drupal\user\Entity\Role::loadMultiple();
+    $roles        = Role::loadMultiple();
     $rolesDebug   = [];
     $rolesDebugIp = [];
     /** @var \Drupal\user\Entity\Role $role */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process
         "/var/lib/drupalci/workspace/drupal-checkouts/drupal000/vendor/rector/re
         ctor/vendor/symplify/easy-parallel/src/ValueObject/ParallelProcess.php"
         file, due to:
         "Child process timed out after 120 seconds". On line: 103

 [ERROR] Could not process some files, due to:
         "Reached system errors count limit of 50, exiting...".

