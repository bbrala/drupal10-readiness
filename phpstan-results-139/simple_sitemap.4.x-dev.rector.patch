diff --git a/modules/simple_sitemap_views/src/EventSubscriber/ArgumentCollector.php b/modules/simple_sitemap_views/src/EventSubscriber/ArgumentCollector.php
index 67563a3..7a4ef74 100755
--- a/modules/simple_sitemap_views/src/EventSubscriber/ArgumentCollector.php
+++ b/modules/simple_sitemap_views/src/EventSubscriber/ArgumentCollector.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\simple_sitemap_views\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\TerminateEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\PostResponseEvent;
 use Drupal\simple_sitemap_views\SimpleSitemapViews;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
@@ -62,10 +62,10 @@ class ArgumentCollector implements EventSubscriberInterface {
   /**
    * Collect information about views arguments.
    *
-   * @param \Symfony\Component\HttpKernel\Event\PostResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\TerminateEvent $event
    *   Object of event after a response was sent.
    */
-  public function onTerminate(PostResponseEvent $event) {
+  public function onTerminate(TerminateEvent $event) {
     // Only successful requests are interesting.
     // Collect information about arguments only if views support is enabled.
     if (!$event->getResponse()->isSuccessful() || !$this->sitemapViews->isEnabled()) {
diff --git a/simple_sitemap.api.php b/simple_sitemap.api.php
index 103857b..fb9eaaa 100644
--- a/simple_sitemap.api.php
+++ b/simple_sitemap.api.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\simple_sitemap\Entity\SimpleSitemapInterface;
 /**
  * @file
  * Hooks provided by the Simple XML Sitemap module.
@@ -20,7 +21,7 @@
  * @param \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $sitemap
  *   Sitemap entity.
  */
-function hook_simple_sitemap_links_alter(array &$links, \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $sitemap) {
+function hook_simple_sitemap_links_alter(array &$links, SimpleSitemapInterface $sitemap) {
 
   // Remove German URL for a certain path in the hreflang sitemap.
   foreach ($links as $key => $link) {
@@ -48,7 +49,7 @@ function hook_simple_sitemap_links_alter(array &$links, \Drupal\simple_sitemap\E
  * @param \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $sitemap
  *   Sitemap entity.
  */
-function hook_simple_sitemap_arbitrary_links_alter(array &$arbitrary_links, \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $sitemap) {
+function hook_simple_sitemap_arbitrary_links_alter(array &$arbitrary_links, SimpleSitemapInterface $sitemap) {
 
   // Add an arbitrary link to all sitemaps.
   $arbitrary_links[] = [
@@ -91,7 +92,7 @@ function hook_simple_sitemap_arbitrary_links_alter(array &$arbitrary_links, \Dru
  * @param \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $sitemap
  *   Sitemap entity.
  */
-function hook_simple_sitemap_attributes_alter(array &$attributes, \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $sitemap) {
+function hook_simple_sitemap_attributes_alter(array &$attributes, SimpleSitemapInterface $sitemap) {
 
   // Remove the xhtml attribute e.g. if no xhtml sitemap elements are present.
   unset($attributes['xmlns:xhtml']);
@@ -107,7 +108,7 @@ function hook_simple_sitemap_attributes_alter(array &$attributes, \Drupal\simple
  * @param \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $sitemap
  *   Sitemap entity.
  */
-function hook_simple_sitemap_index_attributes_alter(array &$index_attributes, \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $sitemap) {
+function hook_simple_sitemap_index_attributes_alter(array &$index_attributes, SimpleSitemapInterface $sitemap) {
 
   // Add some attribute to the sitemap index.
   $index_attributes['name'] = 'value';
