diff --git a/composer.json b/composer.json
index 76ffd8d..fc05d6b 100644
--- a/composer.json
+++ b/composer.json
@@ -7,6 +7,6 @@
   "homepage": "https://www.drupal.org/project/rename_admin_paths",
   "require": {
     "php": "^7.1|^8.0",
-    "drupal/core": "^8.7|^9.0"
+    "drupal/core": "^8.7|^9.0 || ^10"
   }
 }
diff --git a/rename_admin_paths.info.yml b/rename_admin_paths.info.yml
index c6c356e..3ac19e9 100644
--- a/rename_admin_paths.info.yml
+++ b/rename_admin_paths.info.yml
@@ -3,5 +3,5 @@ type: module
 description: 'Rename admin path /admin/.. and /user/.. to /something/..'
 package: Administration
 php: 7.1
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 configure: rename_admin_paths.admin
diff --git a/src/Form/RenameAdminPathsSettingsForm.php b/src/Form/RenameAdminPathsSettingsForm.php
index 97bbaba..6de7307 100644
--- a/src/Form/RenameAdminPathsSettingsForm.php
+++ b/src/Form/RenameAdminPathsSettingsForm.php
@@ -63,7 +63,7 @@ class RenameAdminPathsSettingsForm extends ConfigFormBase {
    */
   public static function create(ContainerInterface $container): self {
     return new static(
-      $container->get(Config::class),
+      $this->config,
       $container->get('router.builder'),
       $container->get('string_translation')
     );
diff --git a/tests/src/Functional/AccessTest.php b/tests/src/Functional/AccessTest.php
index 37a6c66..2744ebb 100644
--- a/tests/src/Functional/AccessTest.php
+++ b/tests/src/Functional/AccessTest.php
@@ -16,10 +16,10 @@ class AccessTest extends BrowserTestBase {
    */
   public function testAdminNotAccessibleAfterRenaming() {
     $output = $this->drupalGet('admin');
-    $this->assertContains('You are not authorized to access this page.', $output);
+    $this->assertStringContainsString('You are not authorized to access this page.', $output);
 
     $output = $this->drupalGet('admin/modules');
-    $this->assertContains('You are not authorized to access this page.', $output);
+    $this->assertStringContainsString('You are not authorized to access this page.', $output);
 
     $admin = $this->drupalCreateUser(['administer modules', 'administer site configuration'], 'administrator', TRUE);
     $this->drupalLogin($admin);
@@ -36,9 +36,9 @@ class AccessTest extends BrowserTestBase {
     $this->drupalLogout();
 
     $output = $this->drupalGet('backend');
-    $this->assertContains('You are not authorized to access this page.', $output);
+    $this->assertStringContainsString('You are not authorized to access this page.', $output);
 
     $output = $this->drupalGet('backend/modules');
-    $this->assertContains('You are not authorized to access this page.', $output);
+    $this->assertStringContainsString('You are not authorized to access this page.', $output);
   }
 }
diff --git a/tests/src/Functional/AdminFormTest.php b/tests/src/Functional/AdminFormTest.php
index 2c6afa2..6e65503 100644
--- a/tests/src/Functional/AdminFormTest.php
+++ b/tests/src/Functional/AdminFormTest.php
@@ -14,7 +14,7 @@ class AdminFormTest extends BrowserTestBase {
   /**
    * Setup admin user.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $admin = $this->drupalCreateUser(['administer modules', 'administer site configuration'], 'administrator', TRUE);
@@ -38,7 +38,7 @@ class AdminFormTest extends BrowserTestBase {
    */
   public function testEnablePathReplacements() {
     $output = $this->drupalGet('user/1');
-    $this->assertContains('Member for', $output);
+    $this->assertStringContainsString('Member for', $output);
 
     $this->drupalGet('admin/config/system/rename-admin-paths');
 
@@ -55,17 +55,17 @@ class AdminFormTest extends BrowserTestBase {
     $this->assertSession()->fieldValueEquals('user_path_value', 'member');
 
     $output = $this->drupalGet('user/1');
-    $this->assertContains('The requested page could not be found.', $output);
+    $this->assertStringContainsString('The requested page could not be found.', $output);
 
     $output = $this->drupalGet('member/1');
-    $this->assertContains('Member for', $output);
+    $this->assertStringContainsString('Member for', $output);
   }
 
   private function assertRenameAdminPathFormIsVisible() {
     $output = $this->getSession()->getPage()->getContent();
-    $this->assertContains('Rename admin path', $output);
-    $this->assertContains('Replace "admin" in admin path by', $output);
-    $this->assertContains('Rename user path', $output);
-    $this->assertContains('Replace "user" in user path by', $output);
+    $this->assertStringContainsString('Rename admin path', $output);
+    $this->assertStringContainsString('Replace "admin" in admin path by', $output);
+    $this->assertStringContainsString('Rename user path', $output);
+    $this->assertStringContainsString('Replace "user" in user path by', $output);
   }
 }
diff --git a/tests/src/Unit/EventSubscriber/RenameAdminPathEventSubscriberTest.php b/tests/src/Unit/EventSubscriber/RenameAdminPathEventSubscriberTest.php
index 778153e..57d12f7 100644
--- a/tests/src/Unit/EventSubscriber/RenameAdminPathEventSubscriberTest.php
+++ b/tests/src/Unit/EventSubscriber/RenameAdminPathEventSubscriberTest.php
@@ -17,7 +17,7 @@ class RenameAdminPathEventSubscriberTest extends UnitTestCase {
   public function testGetSubscribedEvents() {
     $events = RenameAdminPathsEventSubscriber::getSubscribedEvents();
 
-    $this->assertInternalType('array', $events);
+    $this->assertIsArray($events);
     $this->assertCount(1, $events);
   }
 
diff --git a/tests/src/Unit/Form/RenameAdminPathsSettingsFormTest.php b/tests/src/Unit/Form/RenameAdminPathsSettingsFormTest.php
index f0f558c..4ad53f0 100644
--- a/tests/src/Unit/Form/RenameAdminPathsSettingsFormTest.php
+++ b/tests/src/Unit/Form/RenameAdminPathsSettingsFormTest.php
@@ -15,6 +15,10 @@ use Prophecy\Argument;
  */
 class RenameAdminPathsSettingsFormTest extends UnitTestCase {
 
+  use \Prophecy\PhpUnit\ProphecyTrait;
+  /**
+   * @doesNotPerformAssertions
+   */
   public function testValidatePathWithoutValue() {
     $element = [];
     $this->getForm()->validate($element, $this->getInvalidFormState());
@@ -24,6 +28,7 @@ class RenameAdminPathsSettingsFormTest extends UnitTestCase {
    * @dataProvider validValues
    *
    * @param string $value
+   * @doesNotPerformAssertions
    */
   public function testWithValidValue(string $value) {
     $element = ['#value' => $value];
@@ -34,6 +39,7 @@ class RenameAdminPathsSettingsFormTest extends UnitTestCase {
    * @dataProvider invalidValues
    *
    * @param string $value
+   * @doesNotPerformAssertions
    */
   public function testWithInvalidValue(string $value) {
     $element = ['#value' => $value];
