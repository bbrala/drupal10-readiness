diff --git a/mass_password_change.info.yml b/mass_password_change.info.yml
index 50dd22d..b57d088 100644
--- a/mass_password_change.info.yml
+++ b/mass_password_change.info.yml
@@ -1,8 +1,7 @@
 name: 'Mass Password Change'
 description: 'Massive password change or reset.'
 
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
 type: module
 
 dependencies:
diff --git a/tests/src/Functional/MassPasswordChange.php b/tests/src/Functional/MassPasswordChange.php
index 7f82b4a..bdb4758 100644
--- a/tests/src/Functional/MassPasswordChange.php
+++ b/tests/src/Functional/MassPasswordChange.php
@@ -19,8 +19,11 @@ class MassPasswordChange extends MassPasswordTestBase {
       'action' => 'mass_password_change_action',
       "user_bulk_form[$admin_user_weight]" => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
-    $this->assertText('No access to execute Change password the selected user(s) on the User admin.');
+    $this->submitForm($edit, 'Apply to selected items');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('No access to execute Change password the selected user(s) on the User admin.');
   }
 
   /**
@@ -33,8 +36,11 @@ class MassPasswordChange extends MassPasswordTestBase {
       'action' => 'mass_password_change_action',
       "user_bulk_form[$current_user_weight]" => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
-    $this->assertText(sprintf("No access to execute Change password the selected user(s) on the User %s.", $this->adminUser->getAccountName()));
+    $this->submitForm($edit, 'Apply to selected items');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(sprintf("No access to execute Change password the selected user(s) on the User %s.", $this->adminUser->getAccountName()));
   }
 
   /**
@@ -51,12 +57,18 @@ class MassPasswordChange extends MassPasswordTestBase {
       $weight = $this->getUserWeightFromAccountsArray($this->accounts, $uid);
       $edit["user_bulk_form[$weight]"] = TRUE;
     }
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
+    $this->submitForm($edit, 'Apply to selected items');
     // Check confirmation text.
-    $this->assertText('Are you sure you want to change password these user accounts?');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Are you sure you want to change password these user accounts?');
     // Check user names.
     foreach ($accounts as $account) {
-      $this->assertText($account->getAccountName());
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains($account->getAccountName());
     }
     // Generate new password and submit confirmation form.
     $new_password = $this->randomString();
@@ -64,7 +76,7 @@ class MassPasswordChange extends MassPasswordTestBase {
       'password[pass1]' => $new_password,
       'password[pass2]' => $new_password,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Change password');
+    $this->submitForm($edit, 'Change password');
     // Check new passwords.
     foreach ($accounts as $account) {
       $this->drupalLogout();
@@ -73,9 +85,12 @@ class MassPasswordChange extends MassPasswordTestBase {
         'name' => $account->getAccountName(),
         'pass' => $new_password,
       ];
-      $this->drupalPostForm(NULL, $edit, 'Log in');
-      $this->assertUrl('/user/' . $account->id());
-      $this->assertText($account->getAccountName());
+      $this->submitForm($edit, 'Log in');
+      $this->assertSession()->addressEquals('/user/' . $account->id());
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains($account->getAccountName());
     }
   }
 
diff --git a/tests/src/Functional/MassPasswordReset.php b/tests/src/Functional/MassPasswordReset.php
index 9c3c488..862e2fc 100644
--- a/tests/src/Functional/MassPasswordReset.php
+++ b/tests/src/Functional/MassPasswordReset.php
@@ -25,8 +25,11 @@ class MassPasswordReset extends MassPasswordTestBase {
       'action' => 'mass_password_reset_action',
       "user_bulk_form[$admin_user_weight]" => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
-    $this->assertText('No access to execute Password reset the selected user(s) on the User admin.');
+    $this->submitForm($edit, 'Apply to selected items');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('No access to execute Password reset the selected user(s) on the User admin.');
   }
 
   /**
@@ -39,8 +42,11 @@ class MassPasswordReset extends MassPasswordTestBase {
       'action' => 'mass_password_reset_action',
       "user_bulk_form[$current_user_weight]" => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
-    $this->assertText(sprintf("No access to execute Password reset the selected user(s) on the User %s.", $this->adminUser->getAccountName()));
+    $this->submitForm($edit, 'Apply to selected items');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(sprintf("No access to execute Password reset the selected user(s) on the User %s.", $this->adminUser->getAccountName()));
   }
 
   /**
@@ -57,14 +63,20 @@ class MassPasswordReset extends MassPasswordTestBase {
       $weight = $this->getUserWeightFromAccountsArray($this->accounts, $uid);
       $edit["user_bulk_form[$weight]"] = TRUE;
     }
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
+    $this->submitForm($edit, 'Apply to selected items');
     // Check confirmation text.
-    $this->assertText('Are you sure you want to reset password these user accounts?');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Are you sure you want to reset password these user accounts?');
     // Check user names.
     foreach ($accounts as $account) {
-      $this->assertText($account->getAccountName());
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains($account->getAccountName());
     }
-    $this->drupalPostForm(NULL, [], 'Password reset');
+    $this->submitForm([], 'Password reset');
     // Check password reset urls from email.
     $emails = $this->drupalGetMails();
     $reset_urls = [];
@@ -90,8 +102,11 @@ class MassPasswordReset extends MassPasswordTestBase {
       'action' => 'mass_password_reset_action',
       "user_bulk_form[$weight]" => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
-    $this->assertText(sprintf("No access to execute Password reset the selected user(s) on the User %s.", $blocked_account->getAccountName()));
+    $this->submitForm($edit, 'Apply to selected items');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(sprintf("No access to execute Password reset the selected user(s) on the User %s.", $blocked_account->getAccountName()));
   }
 
   /**
diff --git a/tests/src/Functional/MassPasswordTestBase.php b/tests/src/Functional/MassPasswordTestBase.php
index f5eff33..c563e81 100644
--- a/tests/src/Functional/MassPasswordTestBase.php
+++ b/tests/src/Functional/MassPasswordTestBase.php
@@ -33,7 +33,7 @@ class MassPasswordTestBase extends BrowserTestBase {
   /**
    * Set up a privileged user.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // Create roles.
     $roles = [];
