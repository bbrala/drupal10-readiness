diff --git a/brandfolder.module b/brandfolder.module
index 6fa95cf..5493c3d 100644
--- a/brandfolder.module
+++ b/brandfolder.module
@@ -624,7 +624,7 @@ function brandfolder_browser_controls(BrandfolderGatekeeper $gatekeeper, string
       ];
     }
   }
-  
+
   // Get all possible labels. If there are more than one, allow users to
   // filter by label.
   $allowed_labels = $gatekeeper->getLabels();
diff --git a/src/Controller/AssetFetchController.php b/src/Controller/AssetFetchController.php
index da061fe..815fe86 100644
--- a/src/Controller/AssetFetchController.php
+++ b/src/Controller/AssetFetchController.php
@@ -16,6 +16,9 @@ use Drupal\Core\Form\FormStateInterface;
  */
 class AssetFetchController extends ControllerBase {
 
+  public function __construct(private \Drupal\brandfolder\Service\BrandfolderGatekeeper $brandfolderGatekeeper)
+  {
+  }
   /**
    * Callback for stub route used in connection with nested AJAX form requests,
    * etc.
@@ -133,8 +136,7 @@ class AssetFetchController extends ControllerBase {
     $query_params['sort_by'] = $all_form_values['brandfolder_controls_sort_criterion'] ?? 'created_at';
     $query_params['order'] = $all_form_values['brandfolder_controls_sort_order'] ?? 'desc';
 
-    $gatekeeper = \Drupal::getContainer()
-      ->get(BrandfolderGatekeeper::class);
+    $gatekeeper = $this->brandfolderGatekeeper;
     $gatekeeper_criteria = [];
     $gatekeeper_criteria_string = $form_state->getValue('bf_gatekeeper_criteria');
     if (!empty($gatekeeper_criteria_string)) {
diff --git a/src/Event/BrandfolderWebhookEvent.php b/src/Event/BrandfolderWebhookEvent.php
index 52dc6ca..488caae 100644
--- a/src/Event/BrandfolderWebhookEvent.php
+++ b/src/Event/BrandfolderWebhookEvent.php
@@ -8,7 +8,7 @@ use Symfony\Component\EventDispatcher\Event;
  * Multipurpose event that will be fired when Drupal receives a webhook
  * transmission from Brandfolder.
  */
-class BrandfolderWebhookEvent extends Event {
+class BrandfolderWebhookEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   public const ASSET_CREATE = 'asset.create';
   public const ASSET_UPDATE = 'asset.update';
diff --git a/src/File/MimeType/BrandfolderMimeTypeHandler.php b/src/File/MimeType/BrandfolderMimeTypeHandler.php
index 7cfdd3f..d8bd05e 100644
--- a/src/File/MimeType/BrandfolderMimeTypeHandler.php
+++ b/src/File/MimeType/BrandfolderMimeTypeHandler.php
@@ -18,7 +18,7 @@ use function brandfolder_parse_uri;
  * not end with a recognized file extension.
  * Also provide mimetype and extension-related utilities.
  */
-class BrandfolderMimeTypeHandler extends ExtensionMimeTypeGuesser implements MimeTypeGuesserInterface, LegacyMimeTypeGuesserInterface {
+class BrandfolderMimeTypeHandler extends ExtensionMimeTypeGuesser implements MimeTypeGuesserInterface, \Symfony\Component\Mime\MimeTypesInterface {
 
   /**
    * The database connection.
diff --git a/src/Plugin/media/Source/BrandfolderImage.php b/src/Plugin/media/Source/BrandfolderImage.php
index b862622..a2e1e32 100644
--- a/src/Plugin/media/Source/BrandfolderImage.php
+++ b/src/Plugin/media/Source/BrandfolderImage.php
@@ -132,7 +132,7 @@ class BrandfolderImage extends MediaSourceBase {
    * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
    *   The module handler.
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, FieldTypePluginManagerInterface $field_type_manager, ConfigFactoryInterface $config_factory, AccountProxyInterface $account_proxy, UrlGeneratorInterface $url_generator, LoggerChannelFactoryInterface $logger, CacheBackendInterface $cache, TimeInterface $time, ModuleHandlerInterface $module_handler) {
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager, \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager, \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager, \Drupal\Core\Config\ConfigFactoryInterface $config_factory, array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, FieldTypePluginManagerInterface $field_type_manager, ConfigFactoryInterface $config_factory, AccountProxyInterface $account_proxy, UrlGeneratorInterface $url_generator, LoggerChannelFactoryInterface $logger, CacheBackendInterface $cache, TimeInterface $time, ModuleHandlerInterface $module_handler, private \Drupal\brandfolder\Service\BrandfolderGatekeeper $brandfolderGatekeeper) {
     $this->source_field_name = 'field_brandfolder_attachment_id';
 
     parent::__construct($configuration, $plugin_id, $plugin_definition, $entity_type_manager, $entity_field_manager, $field_type_manager, $config_factory);
@@ -145,6 +145,7 @@ class BrandfolderImage extends MediaSourceBase {
     $this->cache = $cache;
     $this->time = $time;
     $this->moduleHandler = $module_handler;
+    parent::__construct($configuration, $plugin_id, $plugin_definition, $entity_type_manager, $entity_field_manager, $field_type_manager, $config_factory);
   }
 
   /**
@@ -599,8 +600,7 @@ class BrandfolderImage extends MediaSourceBase {
       // @todo: Update field description accordingly, disable field, etc.
     }
 
-    $gatekeeper = \Drupal::getContainer()
-      ->get(BrandfolderGatekeeper::class);
+    $gatekeeper = $this->brandfolderGatekeeper;
     $gatekeeper->loadFromMediaSource($this);
     $gatekeeper->buildConfigForm($form);
 
diff --git a/src/ProxyClass/File/MimeType/BrandfolderMimeTypeGuesser.php b/src/ProxyClass/File/MimeType/BrandfolderMimeTypeGuesser.php
index cce0ae7..fd41201 100644
--- a/src/ProxyClass/File/MimeType/BrandfolderMimeTypeGuesser.php
+++ b/src/ProxyClass/File/MimeType/BrandfolderMimeTypeGuesser.php
@@ -12,7 +12,7 @@ namespace Drupal\brandfolder\ProxyClass\File\MimeType {
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class BrandfolderMimeTypeGuesser implements \Symfony\Component\Mime\MimeTypeGuesserInterface, \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+    class BrandfolderMimeTypeGuesser implements \Symfony\Component\Mime\MimeTypeGuesserInterface, \Symfony\Component\Mime\MimeTypesInterface
     {
 
         use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
