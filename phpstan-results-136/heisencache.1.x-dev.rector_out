modules/contrib/heisencache/class_loader.inc
modules/contrib/heisencache/default.settings.heisencache.inc
modules/contrib/heisencache/heisencache.admin.inc
modules/contrib/heisencache/heisencache.inc
modules/contrib/heisencache/heisencache.install
modules/contrib/heisencache/heisencache.module
modules/contrib/heisencache/src/Cache/CacheInstrumentationPass.php
modules/contrib/heisencache/src/Cache/InstrumentedBin.php
modules/contrib/heisencache/src/CacheFactory.php
modules/contrib/heisencache/src/Event/BackendConstruct.php
modules/contrib/heisencache/src/Event/BackendDelete.php
modules/contrib/heisencache/src/Event/BackendDeleteAll.php
modules/contrib/heisencache/src/Event/BackendDeleteMultiple.php
modules/contrib/heisencache/src/Event/BackendGarbageCollection.php
modules/contrib/heisencache/src/Event/BackendGet.php
modules/contrib/heisencache/src/Event/BackendGetMultiple.php
modules/contrib/heisencache/src/Event/BackendInvalidate.php
modules/contrib/heisencache/src/Event/BackendInvalidateAll.php
modules/contrib/heisencache/src/Event/BackendInvalidateMultiple.php
modules/contrib/heisencache/src/Event/BackendSet.php
modules/contrib/heisencache/src/Event/BackendSetMultiple.php
modules/contrib/heisencache/src/Event/EventBase.php
modules/contrib/heisencache/src/Event/EventDispatcherTrait.php
modules/contrib/heisencache/src/Event/EventInterface.php
modules/contrib/heisencache/src/Event/EventSourceInterface.php
modules/contrib/heisencache/src/Event/FactoryGetEvent.php
modules/contrib/heisencache/src/Event/RemoveBin.php
modules/contrib/heisencache/src/Heisencache/BaseEventSubscriber.php
modules/contrib/heisencache/src/Heisencache/BaseWriterSubscriber.php
modules/contrib/heisencache/src/Heisencache/Config.php
modules/contrib/heisencache/src/Heisencache/DebugSubscriber.php
modules/contrib/heisencache/src/Heisencache/EventEmitter.php
modules/contrib/heisencache/src/Heisencache/EventSourceSubscriber.php
modules/contrib/heisencache/src/Heisencache/EventSubscriberInterface.php
modules/contrib/heisencache/src/Heisencache/MissSubscriber.php
modules/contrib/heisencache/src/Heisencache/PerformanceSubscriber.php
modules/contrib/heisencache/src/Heisencache/SqlWriterSubscriber.php
modules/contrib/heisencache/src/Heisencache/WatchdogWriterSubscriber.php
modules/contrib/heisencache/src/Heisencache/WriteSubscriber.php
modules/contrib/heisencache/src/Heisencache/tests/BaseEventSubscriberTest.php
modules/contrib/heisencache/src/Heisencache/tests/CacheTest.php
modules/contrib/heisencache/src/Heisencache/tests/DebugSubscriberTest.php
modules/contrib/heisencache/src/Heisencache/tests/EventEmitterTest.php
modules/contrib/heisencache/src/Heisencache/tests/MissSubscriberTest.php
modules/contrib/heisencache/src/Heisencache/tests/MockEventSubscriberInterface.php
modules/contrib/heisencache/src/Heisencache/tests/PerformanceSubscriberTest.php
modules/contrib/heisencache/src/Heisencache/tests/WriteSubscriberTest.php
modules/contrib/heisencache/src/HeisencacheServiceProvider.php
modules/contrib/heisencache/views/heisencache.views.inc
modules/contrib/heisencache/views/heisencache.views_default.inc
modules/contrib/heisencache/views/heisencache_sink.view.inc
modules/contrib/heisencache/views/heisencache_views_handler_field_events.inc
modules/contrib/heisencache/views/heisencache_watchdog.view.inc

5 files with changes
====================

1) modules/contrib/heisencache/views/heisencache.views_default.inc:26

    ---------- begin diff ----------
@@ @@
       $view_arg = array(
         '@view' => $item->getFilename(),
       );
-      drupal_set_message(t('@view does not seem to contain an exported view.', $view_arg),  'error');
+      \Drupal::messenger()->addError(t('@view does not seem to contain an exported view.', $view_arg));
       watchdog('heisencache', '@view does not seem to contain an exported view.', $view_arg, WATCHDOG_ERROR);
     }
     // Only provide tables based on enabled modules: notably dblog.
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector


2) modules/contrib/heisencache/src/Heisencache/tests/WriteSubscriberTest.php:20

    ---------- begin diff ----------
@@ @@

   protected $emitter;

-  public function setUp() {
+  public function setUp(): void {
     $this->emitter = $this->getMock('Drupal\heisencache\EventEmitter');
   }

@@ @@
     $serialized_value = serialize($value);

     $actual = $sub->afterSet(self::CHANNEL, 'k', $value, 120);
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertNotEmpty($actual);
     $this->assertArrayHasKey('value_size', $actual);
     $this->assertEquals(strlen($serialized_value), $actual['value_size']);
@@ @@
     $wildcard = TRUE;
     $actual = $sub->afterClear(self::CHANNEL, 'k', $wildcard);

-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertNotEmpty($actual);
     $this->assertArrayHasKey('wildcard', $actual);
     $this->assertEquals($wildcard, $actual['wildcard']);
@@ @@
     $sub = new WriteSubscriber($this->emitter);
     $actual = $sub->getEmittedEvents();

-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertNotEmpty($actual);
     $this->assertEquals(1, count($actual));
     $this->assertEquals('write', $actual[0]);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * SpecificAssertInternalTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/heisencache/src/Heisencache/tests/MissSubscriberTest.php:20

    ---------- begin diff ----------
@@ @@

   protected $emitter;

-  public function setUp() {
+  public function setUp(): void {
     $this->emitter = $this->getMock('Drupal\heisencache\EventEmitter');
   }

@@ @@
   public function testGetHit() {
     $sub = new MissSubscriber($this->emitter);
     $actual = $sub->afterGet(self::CHANNEL, 'k', 'v');
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertEmpty($actual);
   }

@@ @@
     $sub = new MissSubscriber($this->emitter);
     $actual = $sub->afterGet(self::CHANNEL, $key, FALSE);

-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertNotEmpty($actual);
     $this->assertArrayHasKey('misses', $actual);
     $this->assertNotEmpty($actual['misses']);
@@ @@
     $sub->beforeGetMultiple(self::CHANNEL, $initial_cids);
     $actual = $sub->afterGetMultiple(self::CHANNEL, $missed_cids);

-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertNotEmpty($actual);
     $this->assertArrayHasKey('full_miss', $actual);
     $this->assertFalse($actual['full_miss']);
@@ @@
     $sub->beforeGetMultiple(self::CHANNEL, $initial_cids);
     $actual = $sub->afterGetMultiple(self::CHANNEL, $missed_cids);

-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertNotEmpty($actual);
     $this->assertArrayHasKey('full_miss', $actual);
     $this->assertTrue($actual['full_miss']);
@@ @@
     $sub = new MissSubscriber($this->emitter);
     $sub->beforeGetMultiple(self::CHANNEL, $initial_cids);
     $actual = $sub->afterGetMultiple(self::CHANNEL, $missed_cids);
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertEmpty($actual);

   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * SpecificAssertInternalTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/heisencache/src/Heisencache/tests/EventEmitterTest.php:51

    ---------- begin diff ----------
@@ @@
     }

     $actual = $emitter->getSubscribersByEventName($event1);
-    $this->assertInternalType('array', $actual, "getSubscribersByEventName() returns an array.");
+    $this->assertIsArray($actual, "getSubscribersByEventName() returns an array.");
     $this->assertEquals(count($actual), 1, "Exactly 1 subscriber returned for event.");
     $this->assertEquals(reset($actual), $subscriber, "Single subscriber on event is returned correctly.");

@@ @@
     }
   }

+  /**
+   * @doesNotPerformAssertions
+   */
   public function testOnSingleSubscriberInvalidEvent() {
     $event1 = 'event1';
     $event2 = 'event2';
@@ @@
       }

     $actual = $emitter->getSubscribersByEventName($event1);
-    $this->assertInternalType('array', $actual, "getSubscribersByEventName() returns an array.");
+    $this->assertIsArray($actual, "getSubscribersByEventName() returns an array.");
     $this->assertEquals(count($actual), 1, "Exactly 1 subscriber returned for first event.");
     $this->assertEquals(reset($actual), $subscriber, "Single subscriber on first event is returned correctly.");

@@ @@
       $this->fail('Passing the same subscriber to on() for a second event does not throw an exception.');
     }
     $actual = $emitter->getSubscribersByEventName($event2);
-    $this->assertInternalType('array', $actual, "getSubscribersByEventName() returns an array.");
+    $this->assertIsArray($actual, "getSubscribersByEventName() returns an array.");
     $this->assertEquals(count($actual), 1, "Exactly 1 subscriber returned for second event.");
     $this->assertEquals(reset($actual), $subscriber, "Single subscriber on second event is returned correctly.");
   }
@@ @@
     }

     $actual = $emitter->getSubscribersByEventName($event1);
-    $this->assertInternalType('array', $actual, "getSubscribersByEventName() returns an array.");
+    $this->assertIsArray($actual, "getSubscribersByEventName() returns an array.");
     $this->assertEquals(count($actual), 1, "Exactly 1 subscriber returned for event.");
     $this->assertEquals(reset($actual), $sub1, "Single subscriber on first event is returned correctly.");

@@ @@
     }

     $actual = $emitter->getSubscribersByEventName($event1);
-    $this->assertInternalType('array', $actual, "getSubscribersByEventName() returns an array.");
+    $this->assertIsArray($actual, "getSubscribersByEventName() returns an array.");
     $this->assertEquals(count($actual), 2, "Exactly 2 subscribers returned for event.");

     $this->assertTrue(in_array($sub1, $actual), "First subscriber on event is returned correctly.");
@@ @@
     }
   }

+  /**
+   * @doesNotPerformAssertions
+   */
   public function testEmitHappy() {
     $event1 = 'event1';
     $emitter = new EventEmitter();
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * SpecificAssertInternalTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/heisencache/src/Heisencache/tests/DebugSubscriberTest.php:24

    ---------- begin diff ----------
@@ @@

   protected $events = NULL;

-  public function setUp() {
+  public function setUp(): void {
     $this->events = array_merge(
       Cache::getEmittedEvents(),
       MissSubscriber::getEmittedEvents()
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 5 files have been changed by Rector                                       

