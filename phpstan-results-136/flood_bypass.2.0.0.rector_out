modules/contrib/flood_bypass/flood_bypass.module
modules/contrib/flood_bypass/src/FloodByPassService.php
modules/contrib/flood_bypass/src/FloodByPassServiceInterface.php
modules/contrib/flood_bypass/tests/src/Functional/UserLoginFloodByPassTest.php

1 file with changes
===================

1) modules/contrib/flood_bypass/tests/src/Functional/UserLoginFloodByPassTest.php:71

    ---------- begin diff ----------
@@ @@
       'name' => $account->getUsername(),
       'pass' => $account->passRaw,
     ];
-    $this->drupalPostForm('user/login', $edit, t('Log in'));
+    $this->drupalGet('user/login');
+    $this->submitForm($edit, t('Log in'));
     $this->assertNoFieldByXPath("//input[@name='pass' and @value!='']", NULL, 'Password value attribute is blank.');
     if (isset($flood_trigger)) {
       if ($flood_trigger == 'user') {
-        $this->assertRaw(Drupal::translation()
+        $this->assertSession()->responseContains(Drupal::translation()
           ->formatPlural($this->config('user.flood')
             ->get('user_limit'), 'There has been more than one failed login attempt for this account. It is temporarily blocked. Try again later or <a href=":url">request a new password</a>.', 'There have been more than @count failed login attempts for this account. It is temporarily blocked. Try again later or <a href=":url">request a new password</a>.', [':url' => Url::fromRoute('user.pass')]));
       }
       else {
         // No uid, so the limit is IP-based.
-        $this->assertRaw(t('Too many failed login attempts from your IP address. This IP address is temporarily blocked. Try again later or <a href=":url">request a new password</a>.', [':url' => Url::fromRoute('user.pass')]));
+        $this->assertSession()->responseContains(t('Too many failed login attempts from your IP address. This IP address is temporarily blocked. Try again later or <a href=":url">request a new password</a>.', [':url' => Url::fromRoute('user.pass')]));
       }
     }
     else {
-      $this->assertText(t('Unrecognized username or password. Forgot your password?'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains(t('Unrecognized username or password. Forgot your password?'));
     }
   }

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
   }
 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 1 file has been changed by Rector                                         

