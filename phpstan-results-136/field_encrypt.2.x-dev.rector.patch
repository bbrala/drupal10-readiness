diff --git a/tests/src/Functional/FieldEncryptCacheTest.php b/tests/src/Functional/FieldEncryptCacheTest.php
index 86e333f..f72dd9d 100644
--- a/tests/src/Functional/FieldEncryptCacheTest.php
+++ b/tests/src/Functional/FieldEncryptCacheTest.php
@@ -29,7 +29,7 @@ class FieldEncryptCacheTest extends FieldEncryptTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->entityTypeManager = $this->container->get('entity_type.manager');
diff --git a/tests/src/Functional/FieldEncryptTest.php b/tests/src/Functional/FieldEncryptTest.php
index e97fd88..6f031f3 100644
--- a/tests/src/Functional/FieldEncryptTest.php
+++ b/tests/src/Functional/FieldEncryptTest.php
@@ -51,17 +51,29 @@ class FieldEncryptTest extends FieldEncryptTestBase {
 
     // Check existence of EncryptedFieldValue entities.
     $encrypted_field_values = EncryptedFieldValue::loadMultiple();
-    $this->assertEqual(5, count($encrypted_field_values));
+    $this->assertEquals(5, count($encrypted_field_values));
 
     // Check if text is displayed unencrypted.
     $this->drupalGet('node/' . $this->testNode->id());
-    $this->assertText("Lorem ipsum dolor sit amet.");
-    $this->assertText("one");
-    $this->assertText("two");
-    $this->assertText("three");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Lorem ipsum dolor sit amet.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("one");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("two");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("three");
 
     $result = \Drupal::database()->query("SELECT field_test_single_value FROM {node__field_test_single} WHERE entity_id = :entity_id", [':entity_id' => $this->testNode->id()])->fetchField();
-    $this->assertEqual("[ENCRYPTED]", $result);
+    $this->assertEquals("[ENCRYPTED]", $result);
 
     $result = \Drupal::database()->query("SELECT field_test_multi_value FROM {node__field_test_multi} WHERE entity_id = :entity_id", [':entity_id' => $this->testNode->id()])->fetchAll();
     foreach ($result as $record) {
@@ -71,23 +83,41 @@ class FieldEncryptTest extends FieldEncryptTestBase {
     // Test updating entities with alternative encryption settings.
     $this->setFieldStorageSettings(TRUE, TRUE);
     // Update existing data with new field encryption settings.
-    $this->assertLinkByHref('admin/config/system/field-encrypt/field-update');
+    $this->assertSession()->linkByHrefExists('admin/config/system/field-encrypt/field-update');
     $this->drupalGet('admin/config/system/field-encrypt/field-update');
-    $this->assertText('There are 2 fields queued for encryption updates.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There are 2 fields queued for encryption updates.');
     $this->cronRun();
     $this->drupalGet('admin/config/system/field-encrypt/field-update');
-    $this->assertText('There are 0 fields queued for encryption updates.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There are 0 fields queued for encryption updates.');
 
     // Check existence of EncryptedFieldValue entities.
     $encrypted_field_values = EncryptedFieldValue::loadMultiple();
-    $this->assertEqual(5, count($encrypted_field_values));
+    $this->assertEquals(5, count($encrypted_field_values));
 
     // Check if text is displayed unencrypted.
     $this->drupalGet('node/' . $this->testNode->id());
-    $this->assertText("Lorem ipsum dolor sit amet.");
-    $this->assertText("one");
-    $this->assertText("two");
-    $this->assertText("three");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Lorem ipsum dolor sit amet.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("one");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("two");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("three");
 
     // Check values saved in the database.
     $result = \Drupal::database()->query("SELECT field_test_single_value FROM {node__field_test_single} WHERE entity_id = :entity_id", [':entity_id' => $this->testNode->id()])->fetchField();
@@ -101,12 +131,18 @@ class FieldEncryptTest extends FieldEncryptTestBase {
     // Test updating entities to remove field encryption.
     $this->setFieldStorageSettings(FALSE);
     // Update existing data with new field encryption settings.
-    $this->assertLinkByHref('admin/config/system/field-encrypt/field-update');
+    $this->assertSession()->linkByHrefExists('admin/config/system/field-encrypt/field-update');
     $this->drupalGet('admin/config/system/field-encrypt/field-update');
-    $this->assertText('There are 2 fields queued for encryption updates.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There are 2 fields queued for encryption updates.');
     $this->cronRun();
     $this->drupalGet('admin/config/system/field-encrypt/field-update');
-    $this->assertText('There are 0 fields queued for encryption updates.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There are 0 fields queued for encryption updates.');
 
     // Check removal of EncryptedFieldValue entities.
     $encrypted_field_values = EncryptedFieldValue::loadMultiple();
@@ -114,10 +150,22 @@ class FieldEncryptTest extends FieldEncryptTestBase {
 
     // Check if text is displayed unencrypted.
     $this->drupalGet('node/' . $this->testNode->id());
-    $this->assertText("Lorem ipsum dolor sit amet.");
-    $this->assertText("one");
-    $this->assertText("two");
-    $this->assertText("three");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Lorem ipsum dolor sit amet.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("one");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("two");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("three");
 
     $result = \Drupal::database()->query("SELECT field_test_single_value FROM {node__field_test_single} WHERE entity_id = :entity_id", [':entity_id' => $this->testNode->id()])->fetchField();
     $this->assertEquals("Lorem ipsum dolor sit amet.", $result);
@@ -155,7 +203,7 @@ class FieldEncryptTest extends FieldEncryptTestBase {
 
     // Ensure that the node revision has been created.
     $this->entityTypeManager->getStorage('node')->resetCache([$this->testNode->id()]);
-    $this->assertNotIdentical($this->testNode->getRevisionId(), $old_revision_id, 'A new revision has been created.');
+    $this->assertNotSame($this->testNode->getRevisionId(), $old_revision_id, 'A new revision has been created.');
 
     // Check existence of EncryptedFieldValue entities.
     $encrypted_field_values = EncryptedFieldValue::loadMultiple();
@@ -163,17 +211,41 @@ class FieldEncryptTest extends FieldEncryptTestBase {
 
     // Check if revisioned text is displayed unencrypted.
     $this->drupalGet('node/' . $this->testNode->id());
-    $this->assertText("Lorem ipsum dolor sit amet revisioned.");
-    $this->assertText("four");
-    $this->assertText("five");
-    $this->assertText("six");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Lorem ipsum dolor sit amet revisioned.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("four");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("five");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("six");
 
     // Check if original text is displayed unencrypted.
     $this->drupalGet('node/' . $this->testNode->id() . '/revisions/' . $old_revision_id . '/view');
-    $this->assertText("Lorem ipsum dolor sit amet.");
-    $this->assertText("one");
-    $this->assertText("two");
-    $this->assertText("three");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Lorem ipsum dolor sit amet.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("one");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("two");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("three");
 
     // Check values saved in the database.
     $result = \Drupal::database()->query("SELECT field_test_single_value FROM {node_revision__field_test_single} WHERE entity_id = :entity_id", [':entity_id' => $this->testNode->id()])->fetchField();
@@ -183,8 +255,9 @@ class FieldEncryptTest extends FieldEncryptTestBase {
     foreach ($result as $record) {
       $this->assertEquals("[ENCRYPTED]", $record->field_test_multi_value);
     }
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_test_multi/delete');
 
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_test_multi/delete', [], 'Delete');
+    $this->submitForm([], 'Delete');
 
     // Test if EncryptedFieldValue entities got deleted.
     $encrypted_field_values = EncryptedFieldValue::loadMultiple();
@@ -231,17 +304,41 @@ class FieldEncryptTest extends FieldEncryptTestBase {
 
     // Check if English text is displayed unencrypted.
     $this->drupalGet('node/' . $this->testNode->id());
-    $this->assertText("Lorem ipsum dolor sit amet.");
-    $this->assertText("one");
-    $this->assertText("two");
-    $this->assertText("three");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Lorem ipsum dolor sit amet.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("one");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("two");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("three");
 
     // Check if French text is displayed unencrypted.
     $this->drupalGet('fr/node/' . $this->testNode->id());
-    $this->assertText("Ceci est un text francais.");
-    $this->assertText("un");
-    $this->assertText("deux");
-    $this->assertText("trois");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Ceci est un text francais.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("un");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("deux");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("trois");
 
     // Check values saved in the database.
     $result = \Drupal::database()->query("SELECT field_test_single_value FROM {node__field_test_single} WHERE entity_id = :entity_id", [':entity_id' => $this->testNode->id()])->fetchAll();
diff --git a/tests/src/Functional/FieldEncryptTestBase.php b/tests/src/Functional/FieldEncryptTestBase.php
index deb1bfa..8596ecc 100644
--- a/tests/src/Functional/FieldEncryptTestBase.php
+++ b/tests/src/Functional/FieldEncryptTestBase.php
@@ -57,7 +57,7 @@ abstract class FieldEncryptTestBase extends EncryptTestBase {
    *
    * @TODO: Simplify setUp() by extending EncryptTestBase when https://www.drupal.org/node/2692387 lands.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create an admin user.
@@ -149,9 +149,9 @@ abstract class FieldEncryptTestBase extends EncryptTestBase {
     // Set up storage settings for first field.
     $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_test_single/storage');
     // Encrypt field found.
-    $this->assertFieldByName('field_encrypt[encrypt]', NULL);
+    $this->assertSession()->fieldExists('field_encrypt[encrypt]');
     // Encryption profile field found.
-    $this->assertFieldByName('field_encrypt[encryption_profile]', NULL);
+    $this->assertSession()->fieldExists('field_encrypt[encryption_profile]');
 
     $profile_id = ($alternate == TRUE) ? 'encryption_profile_2' : 'encryption_profile_1';
     $edit = [
@@ -161,15 +161,18 @@ abstract class FieldEncryptTestBase extends EncryptTestBase {
       'field_encrypt[encryption_profile]' => $profile_id,
       'field_encrypt[uncacheable]' => $uncacheable,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save field settings');
-    $this->assertText('Updated field Single field field settings.');
+    $this->submitForm($edit, 'Save field settings');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Updated field Single field field settings.');
 
     // Set up storage settings for second field.
     $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_test_multi/storage');
     // Encrypt field found.
-    $this->assertFieldByName('field_encrypt[encrypt]', NULL);
+    $this->assertSession()->fieldExists('field_encrypt[encrypt]');
     // Encryption profile field found.
-    $this->assertFieldByName('field_encrypt[encryption_profile]', NULL);
+    $this->assertSession()->fieldExists('field_encrypt[encryption_profile]');
 
     $profile_id = ($alternate == TRUE) ? 'encryption_profile_1' : 'encryption_profile_2';
     $edit = [
@@ -178,8 +181,11 @@ abstract class FieldEncryptTestBase extends EncryptTestBase {
       'field_encrypt[encryption_profile]' => $profile_id,
       'field_encrypt[uncacheable]' => $uncacheable,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save field settings');
-    $this->assertText('Updated field Multi field field settings.');
+    $this->submitForm($edit, 'Save field settings');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Updated field Multi field field settings.');
   }
 
   /**
diff --git a/tests/src/Unit/EncryptedFieldValueManagerTest.php b/tests/src/Unit/EncryptedFieldValueManagerTest.php
index b46ce43..73261ba 100644
--- a/tests/src/Unit/EncryptedFieldValueManagerTest.php
+++ b/tests/src/Unit/EncryptedFieldValueManagerTest.php
@@ -52,18 +52,14 @@ class EncryptedFieldValueManagerTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setup();
 
     // Set up a mock entity type manager service.
-    $this->entityManager = $this->getMockBuilder('\Drupal\Core\Entity\EntityTypeManagerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entityManager = $this->createMock('\Drupal\Core\Entity\EntityTypeManagerInterface');
 
     // Set up a mock EntityStorage.
-    $this->storage = $this->getMockBuilder('\Drupal\Core\Entity\EntityStorageInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->storage = $this->createMock('\Drupal\Core\Entity\EntityStorageInterface');
 
     // Set up expectations for the entity type manager.
     $this->entityManager->expects($this->any())
@@ -71,9 +67,7 @@ class EncryptedFieldValueManagerTest extends UnitTestCase {
       ->will($this->returnValue($this->storage));
 
     // Set up a mock entity.
-    $this->entity = $this->getMockBuilder('\Drupal\Core\Entity\ContentEntityInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity = $this->createMock('\Drupal\Core\Entity\ContentEntityInterface');
 
     // Set up language object.
     $language = $this->getMockBuilder('\Drupal\Core\Language\Language')
@@ -240,6 +234,7 @@ class EncryptedFieldValueManagerTest extends UnitTestCase {
    *
    * @covers ::__construct
    * @covers ::deleteEntityEncryptedFieldValues
+   * @doesNotPerformAssertions
    */
   public function testDeleteEntityEncryptedFieldValues() {
     // Set up expectations for storage.
@@ -263,6 +258,7 @@ class EncryptedFieldValueManagerTest extends UnitTestCase {
    * @covers ::__construct
    * @covers ::deleteEntityEncryptedFieldValuesForField
    * @covers ::getEntityRevisionId
+   * @doesNotPerformAssertions
    */
   public function testDeleteEntityEncryptedFieldValuesForField() {
     // Set up expectations for storage.
@@ -274,9 +270,7 @@ class EncryptedFieldValueManagerTest extends UnitTestCase {
       ->method('delete');
 
     // Set up entity type object.
-    $entity_type = $this->getMockBuilder('\Drupal\Core\Entity\EntityTypeInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type = $this->createMock('\Drupal\Core\Entity\EntityTypeInterface');
 
     // Set up expectations for entity type object.
     $entity_type->expects($this->once())
@@ -307,6 +301,7 @@ class EncryptedFieldValueManagerTest extends UnitTestCase {
    *
    * @covers ::__construct
    * @covers ::deleteEncryptedFieldValuesForField
+   * @doesNotPerformAssertions
    */
   public function testDeleteEncryptedFieldValuesForField() {
     // Set up expectations for storage.
diff --git a/tests/src/Unit/FieldEncryptProcessEntitiesTest.php b/tests/src/Unit/FieldEncryptProcessEntitiesTest.php
index 1df3638..489e287 100644
--- a/tests/src/Unit/FieldEncryptProcessEntitiesTest.php
+++ b/tests/src/Unit/FieldEncryptProcessEntitiesTest.php
@@ -77,18 +77,14 @@ class FieldEncryptProcessEntitiesTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Set up a mock entity.
-    $this->entity = $this->getMockBuilder('\Drupal\Core\Entity\ContentEntityInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity = $this->createMock('\Drupal\Core\Entity\ContentEntityInterface');
 
     // Set up language object.
-    $language = $this->getMockBuilder('\Drupal\Core\Language\LanguageInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $language = $this->createMock('\Drupal\Core\Language\LanguageInterface');
 
     // Set up expectations for language.
     $language->expects($this->any())
@@ -104,19 +100,13 @@ class FieldEncryptProcessEntitiesTest extends UnitTestCase {
       ->will($this->returnSelf());
 
     // Set up a mock field.
-    $this->field = $this->getMockBuilder('\Drupal\Core\Field\FieldItemListInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->field = $this->createMock('\Drupal\Core\Field\FieldItemListInterface');
 
     // Set up a mock EntityTypeManager.
-    $this->entityManager = $this->getMockBuilder('\Drupal\Core\Entity\EntityTypeManagerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entityManager = $this->createMock('\Drupal\Core\Entity\EntityTypeManagerInterface');
 
     // Set up a mock EncryptService.
-    $this->encryptService = $this->getMockBuilder('\Drupal\encrypt\EncryptServiceInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->encryptService = $this->createMock('\Drupal\encrypt\EncryptServiceInterface');
 
     // Set up expectations for EncryptService.
     $this->encryptService->expects($this->any())
@@ -127,13 +117,9 @@ class FieldEncryptProcessEntitiesTest extends UnitTestCase {
       ->will($this->returnValue('decrypted text'));
 
     // Set up a mock EncryptionProfileManager.
-    $this->encryptionProfileManager = $this->getMockBuilder('\Drupal\encrypt\EncryptionProfileManagerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->encryptionProfileManager = $this->createMock('\Drupal\encrypt\EncryptionProfileManagerInterface');
 
-    $this->encryptionProfile = $this->getMockBuilder(EncryptionProfileInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->encryptionProfile = $this->createMock(EncryptionProfileInterface::class);
 
     // Set up expectations for EncryptionProfileManager.
     $this->encryptionProfileManager->expects($this->any())
@@ -141,9 +127,7 @@ class FieldEncryptProcessEntitiesTest extends UnitTestCase {
       ->will($this->returnValue($this->encryptionProfile));
 
     // Set up a mock EncryptedFieldValueManager.
-    $this->encryptedFieldValueManager = $this->getMockBuilder('\Drupal\field_encrypt\EncryptedFieldValueManagerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->encryptedFieldValueManager = $this->createMock('\Drupal\field_encrypt\EncryptedFieldValueManagerInterface');
 
     $container = new ContainerBuilder();
     $module_handler = $this->createMock(ModuleHandlerInterface::class);
@@ -563,14 +547,10 @@ class FieldEncryptProcessEntitiesTest extends UnitTestCase {
    */
   public function testUpdateStoredField($field_name, $field_entity_type, $original_encryption_settings, $entity_id) {
     // Set up entity storage mock.
-    $entity_storage = $this->getMockBuilder('\Drupal\Core\Entity\EntityStorageInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_storage = $this->createMock('\Drupal\Core\Entity\EntityStorageInterface');
 
     // Set up a mock entity type.
-    $entity_type = $this->getMockBuilder('\Drupal\Core\Entity\EntityTypeInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type = $this->createMock('\Drupal\Core\Entity\EntityTypeInterface');
 
     // Set up expectations for entity type.
     $entity_type->expects($this->once())
