modules/contrib/responsive_image_preload/responsive_image_preload.module
modules/contrib/responsive_image_preload/src/FieldPreprocessor.php
modules/contrib/responsive_image_preload/src/PreloadGenerator.php
modules/contrib/responsive_image_preload/src/PreloadGeneratorInterface.php
modules/contrib/responsive_image_preload/src/ThirdPartySettings.php
modules/contrib/responsive_image_preload/tests/src/Functional/ResponsiveImagePreloadBrowserTestBase.php
modules/contrib/responsive_image_preload/tests/src/Functional/ResponsiveImagePreloadTest.php
modules/contrib/responsive_image_preload/tests/src/Functional/ResponsiveImagePreloadWebpTest.php
modules/contrib/responsive_image_preload/tests/src/Unit/FieldPreprocessorTest.php
modules/contrib/responsive_image_preload/tests/src/Unit/ThirdPartySettingsTest.php

4 files with changes
====================

1) modules/contrib/responsive_image_preload/tests/src/Unit/ThirdPartySettingsTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->instance = new ThirdPartySettings();
     $this->instance->setStringTranslation($this->getStringTranslationStub());
@@ @@
    *   A mocked plugin instance.
    */
   protected function getMockPlugin($id, $generate_preloads = FALSE) {
-    $plugin = $this->getMockBuilder(FormatterInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $plugin = $this->createMock(FormatterInterface::class);

     $plugin
       ->method('getPluginId')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/responsive_image_preload/tests/src/Unit/FieldPreprocessorTest.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

-    $preload_generator = $this->getMockBuilder(PreloadGeneratorInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $preload_generator = $this->createMock(PreloadGeneratorInterface::class);

     $preload_generator
       ->method('generatePreloads')
@@ @@
         'test-preload-key' => ['test-preload-data'],
       ]);

-    $this->display = $this->getMockBuilder(EntityViewDisplayInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->display = $this->createMock(EntityViewDisplayInterface::class);

-    $this->storage = $this->getMockBuilder(EntityStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->storage = $this->createMock(EntityStorageInterface::class);

     $this->storage->method('loadByProperties')
       ->willReturnCallback(function ($properties) {
@@ @@
         return $name === 'entity_test.test.test' ? NULL : $this->display;
       });

-    $entity_type_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManagerInterface::class);

     $entity_type_manager->method('getStorage')
       ->willReturn($this->storage);
@@ @@
    *   A mocked entity instance.
    */
   protected function getMockEntity($bundle = 'test') {
-    $entity = $this->getMockBuilder(FieldableEntityInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity = $this->createMock(FieldableEntityInterface::class);

     $entity->method('getEntityTypeId')
       ->willReturn('test');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/responsive_image_preload/tests/src/Functional/ResponsiveImagePreloadBrowserTestBase.php:65

    ---------- begin diff ----------
@@ @@
    *
    * @noinspection PhpHierarchyChecksInspection
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->fieldStorage = FieldStorageConfig::create([
@@ @@
     $this->entityViewDisplay->save();

     $fixture_path = implode(DIRECTORY_SEPARATOR, [
-      drupal_get_path('module', 'responsive_image_preload_test'),
+      \Drupal::service('extension.list.module')->getPath('responsive_image_preload_test'),
       'fixtures',
       'test.jpg',
     ]);
-    $file = file_save_data(
-      file_get_contents($fixture_path),
-      'public://test.jpg'
-    );
+    $file = \Drupal::service('file.repository')->writeData(file_get_contents($fixture_path), 'public://test.jpg');

     $this->entity = EntityTest::create([
       'image' => [
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileSaveDataRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/responsive_image_preload/src/PreloadGenerator.php:130

    ---------- begin diff ----------
@@ @@

                 /** @var \Drupal\image\ImageStyleInterface $image_style */
                 $image_style = $image_style_storage->load($image_style_name);
-                $image_url = file_url_transform_relative(file_create_url($image_style->buildUrl($file->getFileUri())));
+                $image_url = \Drupal::service('file_url_generator')->generateString($image_style->buildUrl($file->getFileUri()));

                 if ($this->moduleHandler->moduleExists('webp')) {
                   $image_url = preg_replace('/\.(png|jpg|jpeg)(\\?.*?)?(,| |$)/i', '.webp\\2\\3', $image_url);
@@ @@
               $image_style_name = $image_style_mapping['image_mapping'];
               /** @var \Drupal\image\ImageStyleInterface $image_style */
               $image_style = $image_style_storage->load($image_style_name);
-              $image_url = file_url_transform_relative(file_create_url($image_style->buildUrl($file->getFileUri())));
+              $image_url = \Drupal::service('file_url_generator')->generateString($image_style->buildUrl($file->getFileUri()));

               if ($this->moduleHandler->moduleExists('webp')) {
                 $image_url = preg_replace('/\.(png|jpg|jpeg)(\\?.*?)?(,| |$)/i', '.webp\\2\\3', $image_url);
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 4 files have been changed by Rector                                       

