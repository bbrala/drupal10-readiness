diff --git a/tests/src/Functional/BlockContentTest.php b/tests/src/Functional/BlockContentTest.php
index d720a4c..3e73821 100644
--- a/tests/src/Functional/BlockContentTest.php
+++ b/tests/src/Functional/BlockContentTest.php
@@ -36,7 +36,7 @@ class BlockContentTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser([
@@ -68,28 +68,29 @@ class BlockContentTest extends BrowserTestBase {
     $edit = [];
     $edit['info[0][value]'] = $block_label;
     $edit['body[0][value]'] = $block_body;
-    $this->drupalPostForm('block/add/basic', $edit, t('Save'));
+    $this->drupalGet('block/add/basic');
+    $this->submitForm($edit, t('Save'));
 
     $bc_storage = \Drupal::entityTypeManager()
       ->getStorage('block_content');
     $bc_entities = $bc_storage->loadByProperties(['info' => $block_label]);
     /** @var \Drupal\block_content\Entity\BlockContent $bc_entity */
     $bc_entity = reset($bc_entities);
-    $this->assert($bc_entity instanceof BlockContent, 'Block content failed to be created');
+    $this->assertTrue($bc_entity instanceof BlockContent, 'Block content failed to be created');
     $bc_uuid = $bc_entity->uuid();
     $bc_id = $bc_entity->id();
 
     $this->drupalGet('admin/structure/content-as-config/blocks-export');
     $edit = ['export_list[' . $bc_uuid . ']' => $bc_uuid];
-    $this->drupalPostForm(NULL, $edit, t('Export'));
+    $this->submitForm($edit, t('Export'));
 
     $config = $this->config('content_as_config.block_content');
     $bc_config_item = $config->get($bc_uuid);
     $this->assertNotEmpty($bc_config_item, 'Block content configuration was not saved.');
 
-    $this->assertEqual($bc_config_item['uuid'], $bc_uuid, 'Block content UUID does not match.');
-    $this->assertEqual($bc_config_item['id'], $bc_id, 'Block content ID does not match.');
-    $this->assertEqual($bc_config_item['info'], $block_label, 'Block content label does not match.');
+    $this->assertEquals($bc_config_item['uuid'], $bc_uuid, 'Block content UUID does not match.');
+    $this->assertEquals($bc_config_item['id'], $bc_id, 'Block content ID does not match.');
+    $this->assertEquals($bc_config_item['info'], $block_label, 'Block content label does not match.');
     // TODO: validate block body.
 
     $bc_entity->delete();
@@ -99,14 +100,14 @@ class BlockContentTest extends BrowserTestBase {
 
     $this->drupalGet('admin/structure/content-as-config/blocks-import');
     $edit = ['import_list[' . $bc_uuid . ']' => $bc_uuid];
-    $this->drupalPostForm(NULL, $edit, t('Import'));
+    $this->submitForm($edit, t('Import'));
 
     $bc_entities = $bc_storage->loadByProperties(['info' => $block_label]);
     $bc_entity = reset($bc_entities);
     $this->assertNotEmpty($bc_entity, 'Block content was not properly reconstituted.');
 
-    $this->assertEqual($bc_entity->id(), $bc_id, 'Block content ID was not properly set.');
-    $this->assertEqual($bc_entity->label(), $block_label, 'Link title was not properly set.');
+    $this->assertEquals($bc_entity->id(), $bc_id, 'Block content ID was not properly set.');
+    $this->assertEquals($bc_entity->label(), $block_label, 'Link title was not properly set.');
     // TODO: validate block body.
   }
 
diff --git a/tests/src/Functional/MenuLinksTest.php b/tests/src/Functional/MenuLinksTest.php
index c9f29df..2d8f78e 100644
--- a/tests/src/Functional/MenuLinksTest.php
+++ b/tests/src/Functional/MenuLinksTest.php
@@ -38,7 +38,7 @@ class MenuLinksTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser([
@@ -70,7 +70,7 @@ class MenuLinksTest extends BrowserTestBase {
       'link[0][uri]' => 'http://example.com/foo#bar',
       'title[0][value]' => $link_title,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
 
     $link_storage = \Drupal::entityTypeManager()
       ->getStorage('menu_link_content');
@@ -80,20 +80,20 @@ class MenuLinksTest extends BrowserTestBase {
     ]);
     /** @var \Drupal\menu_link_content\Entity\MenuLinkContent $link_entity */
     $link_entity = reset($link_entities);
-    $this->assert($link_entity instanceof MenuLinkContent, 'Link failed to be created');
+    $this->assertTrue($link_entity instanceof MenuLinkContent, 'Link failed to be created');
     $link_uuid = $link_entity->uuid();
 
     $this->drupalGet('admin/structure/content-as-config/menu-export');
     $edit = ['export_list[' . $this->menuName . ']' => $this->menuName];
-    $this->drupalPostForm(NULL, $edit, t('Export'));
+    $this->submitForm($edit, t('Export'));
 
     $config = $this->config('content_as_config.menu_link_content');
     $link_config_item = $config->get($link_uuid);
     $this->assertNotEmpty($link_config_item, 'Link configuration was not saved.');
 
-    $this->assertEqual($link_config_item['uuid'], $link_uuid, 'Link UUID does not match.');
-    $this->assertEqual($link_config_item['menu_name'], $this->menuName, 'Link not set to correct menu.');
-    $this->assertEqual($link_config_item['link'], 'http://example.com/foo#bar', 'Link should point to /node; actually points to ' . $link_config_item['link']);
+    $this->assertEquals($link_config_item['uuid'], $link_uuid, 'Link UUID does not match.');
+    $this->assertEquals($link_config_item['menu_name'], $this->menuName, 'Link not set to correct menu.');
+    $this->assertEquals($link_config_item['link'], 'http://example.com/foo#bar', 'Link should point to /node; actually points to ' . $link_config_item['link']);
 
     $link_entity->delete();
 
@@ -105,7 +105,7 @@ class MenuLinksTest extends BrowserTestBase {
 
     $this->drupalGet('admin/structure/content-as-config/menu-import');
     $edit = ['import_list[' . $link_uuid . ']' => $link_uuid];
-    $this->drupalPostForm(NULL, $edit, t('Import'));
+    $this->submitForm($edit, t('Import'));
 
     $link_entities = $link_storage->loadByProperties([
       'menu_name' => $this->menuName,
@@ -116,9 +116,9 @@ class MenuLinksTest extends BrowserTestBase {
 
     $uri = $link_entity->getUrlObject()->getUri();
 
-    $this->assertEqual($link_entity->getMenuName(), $this->menuName, 'Link menu name was not properly set.');
-    $this->assertEqual($link_entity->label(), $link_title, 'Link title was not properly set.');
-    $this->assertEqual($uri, 'http://example.com/foo#bar', 'Link URI not set properly. Expected http://example.com/foo#bar, got ' . $uri);
+    $this->assertEquals($link_entity->getMenuName(), $this->menuName, 'Link menu name was not properly set.');
+    $this->assertEquals($link_entity->label(), $link_title, 'Link title was not properly set.');
+    $this->assertEquals($uri, 'http://example.com/foo#bar', 'Link URI not set properly. Expected http://example.com/foo#bar, got ' . $uri);
   }
 
 }
\ No newline at end of file
