modules/contrib/role_expose/role_expose.module
modules/contrib/role_expose/src/ExposableRoles.php
modules/contrib/role_expose/src/ExposableRolesInterface.php
modules/contrib/role_expose/tests/src/Functional/RoleExposeHelpPageFoundTest.php
modules/contrib/role_expose/tests/src/Functional/RoleExposePermissionsAvailableTest.php
modules/contrib/role_expose/tests/src/Functional/RoleExposeRoleFormTest.php
modules/contrib/role_expose/tests/src/Functional/RoleExposeRoleFormUsageTest.php

4 files with changes
====================

1) modules/contrib/role_expose/tests/src/Functional/RoleExposeRoleFormUsageTest.php:34

    ---------- begin diff ----------
@@ @@
     $role_hidden = $this->createRole([], 'hidden', 'Role never visible');
     $this->drupalGet('admin/people/roles/manage/' . $role_hidden);
     $edit['role_expose'] = ExposableRolesInterface::EXPOSE_NEVER;
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     $role_visible_when_has = $this->createRole([], 'visible_when_has', 'Role visible when has');
     $this->drupalGet('admin/people/roles/manage/' . $role_visible_when_has);
     $edit['role_expose'] = ExposableRolesInterface::EXPOSE_WITH;
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     $role_visible_when_not_has = $this->createRole([], 'visible_when_not_has', 'Role visible when not has');
     $this->drupalGet('admin/people/roles/manage/' . $role_visible_when_not_has);
     $edit['role_expose'] = ExposableRolesInterface::EXPOSE_WITHOUT;
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     $role_visible = $this->createRole([], 'visible', 'Role always visible');
     $this->drupalGet('admin/people/roles/manage/' . $role_visible);
     $edit['role_expose'] = ExposableRolesInterface::EXPOSE_ALWAYS;
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Log the resulted Permissions -page (incl. roles and grants)
     $this->drupalGet('admin/people/permissions');
@@ @@
       'roles[visible_when_has]' => TRUE,
       'roles[visible_when_not_has]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText('The changes have been saved.', 'Roles saved');
+    $this->submitForm($edit, 'Save');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The changes have been saved.');

     // Check that we have NO roles visible in User profile page (no grants yet!)
     $this->drupalLogin($user_basic);
     $this->drupalGet('user');
-    $this->assertNoText('Roles', 'Role Expose -section is hidden (title)');
-    $this->assertNoText('The roles give different permissions on the site. Please contact your site administration for more info.', 'Role Expose -section is hidden (content check)');
-    $this->assertNoText('Role always visible', 'Role <em>Role always visible</em> is NOT printed in the UI');
-    $this->assertNoText('Role never visible', 'Role <em>Role never visible</em> is NOT printed in the UI');
-    $this->assertNoText('Role visible when has', 'Role <em>Role visible when has</em> is NOT printed in the UI');
-    $this->assertNoText('Role visible when not has', 'Role <em>Role visible when not has</em> is NOT printed in the UI');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Roles');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('The roles give different permissions on the site. Please contact your site administration for more info.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Role always visible');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Role never visible');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Role visible when has');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Role visible when not has');

     $this->drupalLogin($user_admin);

@@ @@
       'roles[visible_when_has]' => TRUE,
       'roles[visible_when_not_has]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText('The changes have been saved.', 'Roles saved');
+    $this->submitForm($edit, 'Save');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The changes have been saved.');

     // Check that we have roles in User profile page -  grants are now set!
     $this->drupalLogin($user_more_priviledged);
     $this->drupalGet('user');
-    $this->assertText('Roles', 'Role Expose -section is visible (title)');
-    $this->assertText('The roles give different permissions on the site. Please contact your site administration for more info.', 'Role Expose -section visible (content check)');
-    $this->assertText('Role always visible', 'Role <em>Role always visible</em> is printed in the UI');
-    $this->assertNoText('Role never visible', 'Role <em>Role never visible</em> is NOT printed in the UI');
-    $this->assertText('Role visible when has', 'Role <em>Role visible when has</em> is printed in the UI');
-    $this->assertNoText('Role visible when not has', 'Role <em>Role visible when not has</em> is NOT printed in the UI');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Roles');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The roles give different permissions on the site. Please contact your site administration for more info.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Role always visible');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Role never visible');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Role visible when has');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Role visible when not has');

     // Check that we have roles in User profile page -  grants are now set!
     $perms = [
@@ @@
     $this->drupalLogin($user_see_other_users_roles);
     // Go to see *other* user's profile, with 'view roles of all users' -perms.
     $this->drupalGet('user/' . $user_more_priviledged->id());
-    $this->assertText('Roles', 'Role Expose -section is visible (title)');
-    $this->assertText('Role always visible', 'Role <em>Role always visible</em> is printed in the UI');
-    $this->assertNoText('Role never visible', 'Role <em>Role never visible</em> is NOT printed in the UI');
-    $this->assertText('Role visible when has', 'Role <em>Role visible when has</em> is printed in the UI');
-    $this->assertNoText('Role visible when not has', 'Role <em>Role visible when not has</em> is NOT printed in the UI');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Roles');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Role always visible');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Role never visible');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Role visible when has');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Role visible when not has');

     // Check that we have roles in User profile page -  grants are now set!
     $perms = [
@@ @@
     $this->drupalLogin($user_see_other_users_profile);
     // Go to see *other* user's profile, with 'view roles of all users' -perms.
     $this->drupalGet('user/' . $user_more_priviledged->id());
-    $this->assertNoText('Roles', 'Role Expose -section is visible (title)');
-    $this->assertNoText('Role always visible', 'Role <em>Role always visible</em> is printed in the UI');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Roles');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Role always visible');

     $this->drupalLogin($user_admin);
     $this->drupalGet('user/' . $user_more_priviledged->id() . '/edit');
@@ @@
       'roles[visible_when_has]' => FALSE,
       'roles[visible_when_not_has]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText('The changes have been saved.', 'Roles saved');
+    $this->submitForm($edit, 'Save');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The changes have been saved.');

     // Check that we have roles in User profile page -  grants are now set!
     $this->drupalLogin($user_more_priviledged);
     $this->drupalGet('user');
-    $this->assertText('Roles', 'Role Expose -section is visible (title)');
-    $this->assertText('The roles give different permissions on the site. Please contact your site administration for more info.', 'Role Expose -section visible (content check)');
-    $this->assertText('Role always visible', 'Role <em>Role always visible</em> is printed in the UI');
-    $this->assertNoText('Role never visible', 'Role <em>Role never visible</em> is NOT printed in the UI');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Roles');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The roles give different permissions on the site. Please contact your site administration for more info.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Role always visible');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Role never visible');
     $this->assertNOText('Role visible when has', 'Role <em>Role visible when has</em> is printed in the UI');
-    $this->assertText('Role visible when not has', 'Role <em>Role visible when not has</em> is NOT printed in the UI');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Role visible when not has');

   }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/role_expose/tests/src/Functional/RoleExposeRoleFormTest.php:30

    ---------- begin diff ----------
@@ @@

     $this->drupalGet('admin/people/roles/add');
     // Check administrator -role, by form element name.
-    $this->assertText('Role expose', 'Selector label exists.');
-    $this->assertOption('edit-role-expose', '0', 'Select option "Never" is present.');
-    $this->assertOption('edit-role-expose', '1', 'Select option "User with this role" is present.');
-    $this->assertOption('edit-role-expose', '2', 'Select option "User without this role" is present.');
-    $this->assertOption('edit-role-expose', '3', 'Select option "Always" is present.');
-    $this->assertText('Choose when this role should displayed in User profile page.', 'Selector Description text found.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Role expose');
+    $this->assertSession()->optionExists('edit-role-expose', '0', 'Select option "Never" is present.');
+    $this->assertSession()->optionExists('edit-role-expose', '1', 'Select option "User with this role" is present.');
+    $this->assertSession()->optionExists('edit-role-expose', '2', 'Select option "User without this role" is present.');
+    $this->assertSession()->optionExists('edit-role-expose', '3', 'Select option "Always" is present.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Choose when this role should displayed in User profile page.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertOptionRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/role_expose/tests/src/Functional/RoleExposePermissionsAvailableTest.php:30

    ---------- begin diff ----------
@@ @@

     $this->drupalGet('admin/people/permissions');

-    $this->assertText('View own exposed roles', '"View own exposed roles" -grant available');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('View own exposed roles');

     $warning = 'Warning: Give to trusted roles only; this permission has security implications.';
     $perms_2 = 'View exposed roles for all users';
-    $this->assertText($perms_2, '"View exposed roles for all users" -grant available');
-    $this->assertRaw('<div class="permission"><span class="title">' . $perms_2
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($perms_2);
+    $this->assertSession()->responseContains('<div class="permission"><span class="title">' . $perms_2
         . '</span><div class="description"><em class="permission-warning">'
-        . $warning, '"restrict access" effective with "View exposed roles for all users" -permission');
+        . $warning);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/role_expose/tests/src/Functional/RoleExposeHelpPageFoundTest.php:31

    ---------- begin diff ----------
@@ @@

     // Verify Role Expose is listed in help pages.
     $this->drupalGet('admin/help');
-    $this->assertLink('Role Expose', 0, 'Check Help page has module name as link.', 'Role Expose');
+    $this->assertSession()->linkExists('Role Expose', 0, 'Check Help page has module name as link.', 'Role Expose');
     // Verify Role Expose page has correct content.
     $this->clickLink('Role Expose');
-    $this->assertText('Role Expose -module gives site administrators ability to expose user their own user roles.', 'Check Help page has module help test (check beginning of text).');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Role Expose -module gives site administrators ability to expose user their own user roles.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertLinkRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

