diff --git a/digital_signage_framework.install b/digital_signage_framework.install
index 456197d..57c2a07 100644
--- a/digital_signage_framework.install
+++ b/digital_signage_framework.install
@@ -102,7 +102,7 @@ function digital_signage_framework_update_8004() {
       ->execute();
   }
 
-  $config_path = drupal_get_path('module', 'digital_signage_framework') . '/config/optional';
+  $config_path = \Drupal::service('extension.list.module')->getPath('digital_signage_framework') . '/config/optional';
   $source = new FileStorage($config_path);
   $config_storage = Drupal::service('config.storage');
   $config_storage->write('views.view.emergency_entities', $source->read('views.view.emergency_entities'));
diff --git a/modules/computed_content/src/Form/ComputedContentForm.php b/modules/computed_content/src/Form/ComputedContentForm.php
index 6c120c5..98898cf 100644
--- a/modules/computed_content/src/Form/ComputedContentForm.php
+++ b/modules/computed_content/src/Form/ComputedContentForm.php
@@ -20,7 +20,7 @@ class ComputedContentForm extends ContentEntityForm {
     $link = $entity->toLink($this->t('View'))->toRenderable();
 
     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];
 
     if ($result === SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New computed content %label has been created.', $message_arguments));
diff --git a/src/Controller/Api.php b/src/Controller/Api.php
index 6672f0d..93355bd 100644
--- a/src/Controller/Api.php
+++ b/src/Controller/Api.php
@@ -646,8 +646,8 @@ class Api implements ContainerInjectionInterface {
         }
       }
     }
-    $cssFiles[] = drupal_get_path('module', 'digital_signage_framework') . '/css/digital-signage.css';
-    $cssFiles[] = drupal_get_path('module', 'digital_signage_framework') . '/css/overlays.css';
+    $cssFiles[] = \Drupal::service('extension.list.module')->getPath('digital_signage_framework') . '/css/digital-signage.css';
+    $cssFiles[] = \Drupal::service('extension.list.module')->getPath('digital_signage_framework') . '/css/overlays.css';
     foreach (explode(PHP_EOL, str_replace("\r", '', $this->config->get('css'))) as $file) {
       $cssFiles[] = $file;
     }
@@ -767,7 +767,7 @@ class Api implements ContainerInjectionInterface {
    * @return \Drupal\Core\Ajax\AjaxResponse
    */
   private function previewBinary(): AjaxResponse {
-    $file_uri = file_create_url($this->getFileUri());
+    $file_uri = \Drupal::service('file_url_generator')->generateAbsoluteString($this->getFileUri());
     switch ($this->request->query->get('type')) {
       case 'image':
         $output = '<img src="' . $file_uri . '" alt="" />';
diff --git a/src/Entity/Device.php b/src/Entity/Device.php
index 6aaa12f..1290736 100644
--- a/src/Entity/Device.php
+++ b/src/Entity/Device.php
@@ -148,7 +148,7 @@ class Device extends RevisionableContentEntityBase implements DeviceInterface {
         if ($js_asset['type'] === 'file' && $name !== 'core/misc/drupalSettingsLoader.js') {
           $scriptIndex++;
           $scripts[] = [
-            'uri' => file_create_url($js_asset['data']),
+            'uri' => \Drupal::service('file_url_generator')->generateAbsoluteString($js_asset['data']),
             'uid' => 'ajs-' . $scriptIndex . '.js',
           ];
         }
diff --git a/src/Form/Device.php b/src/Form/Device.php
index 0cf6126..91cf7ae 100644
--- a/src/Form/Device.php
+++ b/src/Form/Device.php
@@ -20,7 +20,7 @@ class Device extends ContentEntityForm {
     $link = $entity->toLink($this->t('View'))->toRenderable();
 
     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];
 
     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New device %label has been created.', $message_arguments));
