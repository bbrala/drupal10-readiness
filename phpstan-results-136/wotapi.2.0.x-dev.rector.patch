diff --git a/src/EventSubscriber/DefaultExceptionSubscriber.php b/src/EventSubscriber/DefaultExceptionSubscriber.php
index 8fa75a2..5da42b3 100644
--- a/src/EventSubscriber/DefaultExceptionSubscriber.php
+++ b/src/EventSubscriber/DefaultExceptionSubscriber.php
@@ -36,13 +36,13 @@ class DefaultExceptionSubscriber extends SerializationDefaultExceptionSubscriber
   /**
    * {@inheritdoc}
    */
-  public function onException(GetResponseForExceptionEvent $event) {
+  public function onException(\Symfony\Component\HttpKernel\Event\ExceptionEvent $event) {
     if (!$this->isWotApiExceptionEvent($event)) {
       return;
     }
-    if (($exception = $event->getException()) && !$exception instanceof HttpException) {
+    if (($exception = $event->getThrowable()) && !$exception instanceof HttpException) {
       $exception = new HttpException(500, $exception->getMessage(), $exception);
-      $event->setException($exception);
+      $event->setThrowable($exception);
     }
 
     $this->setEventResponse($event, $exception->getStatusCode());
@@ -51,9 +51,9 @@ class DefaultExceptionSubscriber extends SerializationDefaultExceptionSubscriber
   /**
    * {@inheritdoc}
    */
-  protected function setEventResponse(GetResponseForExceptionEvent $event, $status) {
+  protected function setEventResponse(\Symfony\Component\HttpKernel\Event\ExceptionEvent $event, $status) {
     /* @var \Symfony\Component\HttpKernel\Exception\HttpException $exception */
-    $exception = $event->getException();
+    $exception = $event->getThrowable();
     $response = new ResourceResponse(new WotApiDocumentTopLevel(new ErrorCollection([$exception]), new LinkCollection([])), $exception->getStatusCode(), $exception->getHeaders());
     $response->addCacheableDependency($exception);
     $event->setResponse($response);
@@ -65,13 +65,13 @@ class DefaultExceptionSubscriber extends SerializationDefaultExceptionSubscriber
    * The WOT:API format is supported if the format is explicitly set or the
    * request is for a known WOT:API route.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $exception_event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $exception_event
    *   The exception event.
    *
    * @return bool
    *   TRUE if it needs to be formatted using WOT:API. FALSE otherwise.
    */
-  protected function isWotApiExceptionEvent(GetResponseForExceptionEvent $exception_event) {
+  protected function isWotApiExceptionEvent(\Symfony\Component\HttpKernel\Event\ExceptionEvent $exception_event) {
     $request = $exception_event->getRequest();
     $parameters = $request->attributes->all();
     return $request->getRequestFormat() === 'api_json' || (bool) Routes::getResourceTypeNameFromParameters($parameters);
diff --git a/src/EventSubscriber/ResourceResponseSubscriber.php b/src/EventSubscriber/ResourceResponseSubscriber.php
index 4b49d84..0ea5099 100644
--- a/src/EventSubscriber/ResourceResponseSubscriber.php
+++ b/src/EventSubscriber/ResourceResponseSubscriber.php
@@ -68,10 +68,10 @@ class ResourceResponseSubscriber implements EventSubscriberInterface {
   /**
    * Serializes ResourceResponse responses' data, and removes that data.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(\Symfony\Component\HttpKernel\Event\ResponseEvent $event) {
     $response = $event->getResponse();
     if (!$response instanceof ResourceResponse) {
       return;
diff --git a/src/EventSubscriber/WotApiRequestValidator.php b/src/EventSubscriber/WotApiRequestValidator.php
index 5e098c8..9c5e1bb 100644
--- a/src/EventSubscriber/WotApiRequestValidator.php
+++ b/src/EventSubscriber/WotApiRequestValidator.php
@@ -21,10 +21,10 @@ class WotApiRequestValidator implements EventSubscriberInterface {
   /**
    * Validates WOT:API requests.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event to process.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     $request = $event->getRequest();
     if ($request->getRequestFormat() !== 'api_json') {
       return;
diff --git a/wotapi.info.yml b/wotapi.info.yml
index 7514846..c9471dd 100644
--- a/wotapi.info.yml
+++ b/wotapi.info.yml
@@ -1,7 +1,7 @@
 name: WOT:API
 type: module
 description: Exposes entities as a WOT:API-specification-compliant web API.
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^8.8 || ^9 || ^10
 package: WOTAPI
 dependencies:
   - drupal:serialization
