modules/contrib/forward/forward.api.php
modules/contrib/forward/forward.install
modules/contrib/forward/forward.module
modules/contrib/forward/forward.tokens.inc
modules/contrib/forward/forward.views.inc
modules/contrib/forward/src/Controller/ForwardController.php
modules/contrib/forward/src/Event/EntityForwardEvent.php
modules/contrib/forward/src/Event/EntityPreforwardEvent.php
modules/contrib/forward/src/Form/ForwardForm.php
modules/contrib/forward/src/Form/SettingsForm.php
modules/contrib/forward/src/ForwardAccessChecker.php
modules/contrib/forward/src/ForwardAccessCheckerInterface.php
modules/contrib/forward/src/ForwardFormBuilder.php
modules/contrib/forward/src/ForwardFormBuilderInterface.php
modules/contrib/forward/src/ForwardLinkBuilder.php
modules/contrib/forward/src/ForwardLinkBuilderInterface.php
modules/contrib/forward/src/Plugin/Block/ForwardFormBlock.php
modules/contrib/forward/src/Plugin/Block/ForwardLinkBlock.php
modules/contrib/forward/src/Plugin/DsField/ForwardForm.php
modules/contrib/forward/src/Plugin/DsField/ForwardFormTaxonomy.php
modules/contrib/forward/src/Plugin/DsField/ForwardFormUser.php
modules/contrib/forward/src/Plugin/DsField/ForwardLink.php
modules/contrib/forward/src/Plugin/DsField/ForwardLinkTaxonomy.php
modules/contrib/forward/src/Plugin/DsField/ForwardLinkUser.php
modules/contrib/forward/src/Plugin/Mail/ForwardMail.php
modules/contrib/forward/src/Plugin/migrate/destination/ForwardDestinationBase.php
modules/contrib/forward/src/Plugin/migrate/destination/ForwardLog.php
modules/contrib/forward/src/Plugin/migrate/destination/ForwardStatistics.php
modules/contrib/forward/src/Plugin/migrate/source/ForwardLog.php
modules/contrib/forward/src/Plugin/migrate/source/ForwardStatistics.php
modules/contrib/forward/src/Plugin/views/field/ForwardLink.php
modules/contrib/forward/src/Tests/AccessCheckerTest.php
modules/contrib/forward/src/Tests/ForwardFormTest.php
modules/contrib/forward/src/Tests/ForwardTestBase.php
modules/contrib/forward/src/Tests/PermissionsTest.php
modules/contrib/forward/tests/modules/forward_test/forward_test.module

5 files with changes
====================

1) modules/contrib/forward/src/Tests/PermissionsTest.php:15

    ---------- begin diff ----------
@@ @@
     // Users with access content permission cannot change settings.
     $this->drupalLogin($this->webUser);
     $this->drupalGet('admin/config/user-interface/forward');
-    $this->assertResponse(403, 'Users with access content permission cannot change settings.');
+    $this->assertSession()->statusCodeEquals(403, 'Users with access content permission cannot change settings.');

     // Users with access forward permission cannot change settings.
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('admin/config/user-interface/forward');
-    $this->assertResponse(403, 'Users with access forward permission cannot change settings.');
+    $this->assertSession()->statusCodeEquals(403, 'Users with access forward permission cannot change settings.');

     // Users with administer forward permission can change settings.
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/config/user-interface/forward');
-    $this->assertResponse(200, 'Users with administer forward permission can change settings.');
+    $this->assertSession()->statusCodeEquals(200, 'Users with administer forward permission can change settings.');

     // Users without override email address permission cannot change their email address on the Forward form.
     $article = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('/forward/node/' . $article->id());
-    $this->assertNoText(t('Your email address'), 'Users without override email address permission cannot change their email address on the Forward form.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('Your email address'));

     // Users with override email address permission can change their email address on the Forward form.
     $overrideUser = $this->drupalCreateUser(['access content', 'access forward', 'override email address', 'override flood control']);
@@ @@
     $article = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalLogin($overrideUser);
     $this->drupalGet('/forward/node/' . $article->id());
-    $this->assertText(t('Your email address'), 'Users with override email address permission can change their email address on the Forward form.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Your email address'));

     // Set flood control limit to 1.
     $this->drupalLogin($this->adminUser);
@@ @@
     $edit = [
       'forward_flood_control_limit' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));

     // Users without override flood control permission cannot do more than 1 forward in an hour.
     $this->drupalLogin($this->forwardUser);
@@ @@
       'recipient' => 'test@test.com',
       'message' => 'This is a test personal message.',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Send Message'));
+    $this->submitForm($edit, t('Send Message'));
     $this->drupalGet('/forward/node/' . $article->id());
     $edit = [
       'name' => 'Test Forwarder',
@@ @@
       'recipient' => 'test@test.com',
       'message' => 'This is a test personal message.',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Send Message'));
-    $this->assertNoText(t('Thank you for spreading the word about Drupal.'), 'Users without override flood control permission cannot do more than 1 forward in an hour.');
+    $this->submitForm($edit, t('Send Message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('Thank you for spreading the word about Drupal.'));

     // Users with override flood control permission can do more than 1 forward in an hour.
     $this->drupalLogin($overrideUser);
@@ @@
       'recipient' => 'test@test.com',
       'message' => 'This is a test personal message.',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Send Message'));
+    $this->submitForm($edit, t('Send Message'));
     $this->drupalGet('/forward/node/' . $article->id());
     $edit = [
       'name' => 'Test Forwarder',
@@ @@
       'recipient' => 'test@test.com',
       'message' => 'This is a test personal message.',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Send Message'));
-    $this->assertText(t('Thank you for spreading the word about Drupal.'), 'Users with override flood control permission can do more than 1 forward in an hour.');
+    $this->submitForm($edit, t('Send Message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Thank you for spreading the word about Drupal.'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/forward/src/Tests/ForwardTestBase.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * Perform any initial set up tasks that run before every test method.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create Basic page and Article node types.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/forward/src/Tests/ForwardFormTest.php:20

    ---------- begin diff ----------
@@ @@
       'forward_view_modes[full]' => 'full',
       'forward_personal_message' => 2,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));

     // Navigate to the Forward Form.
     $article = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('node/' . $article->id());
-    $this->assertText(t('Email this article'), t('The article has a Forward link.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Email this article'));
     $this->drupalGet('/forward/node/' . $article->id());
-    $this->assertText(t('Forward this article to a friend'), 'The Forward form displays for an article.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Forward this article to a friend'));

     // Submit the Forward form.
     $edit = [
@@ @@
       'recipient' => 'test@test.com',
       'message' => 'This is a test personal message.',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Send Message'));
-    $this->assertText(t('Thank you for spreading the word about Drupal.'), 'The Forward form displays a thank you message after submit.');
+    $this->submitForm($edit, t('Send Message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Thank you for spreading the word about Drupal.'));

     // Submit the Forward form without a recipient.
     $this->drupalGet('/forward/node/' . $article->id());
@@ @@
       'name' => 'Test Forwarder',
       'message' => 'This is a test personal message.',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Send Message'));
-    $this->assertText(t('Send to field is required.'), 'The Forward form displays an error message when the recipient is blank.');
+    $this->submitForm($edit, t('Send Message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Send to field is required.'));

     // Submit the Forward form without a personal message when required.
     $this->drupalLogin($this->adminUser);
@@ @@
     $edit = [
       'forward_personal_message' => 2,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('/forward/node/' . $article->id());
     $edit = [
@@ @@
       'name' => 'Test Forwarder',
       'recipient' => 'test@test.com',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Send Message'));
-    $this->assertText(t('Your personal message field is required.'), 'The Forward form displays an error message when the message is blank and one is required.');
+    $this->submitForm($edit, t('Send Message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Your personal message field is required.'));

     // Submit the Forward form without a personal message when optional.
     $this->drupalLogin($this->adminUser);
@@ @@
     $edit = [
       'forward_personal_message' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('/forward/node/' . $article->id());
     $edit = [
@@ @@
       'name' => 'Test Forwarder',
       'recipient' => 'test@test.com',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Send Message'));
-    $this->assertNoText(t('Your personal message field is required.'), 'The Forward form does not display an error message when the message is blank and optional.');
+    $this->submitForm($edit, t('Send Message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('Your personal message field is required.'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/forward/src/Tests/AccessCheckerTest.php:19

    ---------- begin diff ----------
@@ @@
       'forward_node_types[article]' => 'article',
       'forward_view_modes[full]' => 'full',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));
     $article = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('node/' . $article->id());
-    $this->assertText(t('Email this article'), 'The article has a Forward link.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Email this article'));

     // Users without "access forward" permission should not see the Forward link.
     $this->drupalLogin($this->webUser);
     $this->drupalGet('node/' . $article->id());
-    $this->assertNoText(t('Email this article'), 'The article does not have a Forward link for a user without access forward permission.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('Email this article'));

     // Users should not see the Forward link on full nodes when Forward is configured to display on Teasers only.
     $this->drupalLogin($this->adminUser);
@@ @@
     $edit = [
       'forward_view_modes[full]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));
     $article = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('node/' . $article->id());
-    $this->assertNoText(t('Email this article'), 'The article does not have a Forward link on a full article node when configured for teasers only.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('Email this article'));

     // Basic pages should not have the Forward link.
     $page = $this->drupalCreateNode(['type' => 'page']);
     $this->drupalGet('node/' . $page->id());
-    $this->assertNoText(t('Email this basic page'), 'The basic page does not have a Forward link.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('Email this basic page'));

     // Users should not have the Forward link.
     $this->drupalLogin($this->adminUser);
     $user = $this->drupalCreateUser(['access content']);
     $this->drupalGet('user/' . $user->id());
-    $this->assertNoText(t('Email this user'), 'The user does not have a Forward link.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('Email this user'));

     // Add the Forward link to users.
     $this->drupalGet('admin/config/user-interface/forward');
@@ @@
       'forward_view_modes[full]' => 'full',
       'forward_entity_types[user]' => 'user',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));
     $user = $this->drupalCreateUser(['access content']);
     $this->drupalGet('user/' . $user->id());
-    $this->assertText(t('Email this user'), 'The user has a Forward link after changing Forward settings.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Email this user'));

     // Remove the Forward link from articles.
     $article = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalLogin($this->forwardUser);
     $this->drupalGet('node/' . $article->id());
-    $this->assertText(t('Email this article'), 'The article has a Forward link.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Email this article'));

     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/config/user-interface/forward');
@@ @@
     $edit = [
       'forward_node_types[article]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));
     $this->drupalLogin($this->forwardUser);
     $article = $this->drupalCreateNode(['type' => 'article']);
     $this->drupalGet('node/' . $article->id());
-    $this->assertNoText(t('Email this article'), 'The article does not have a Forward link after configured for Users only.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('Email this article'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/forward/src/ForwardLinkBuilder.php:72

    ---------- begin diff ----------
@@ @@

     $html = FALSE;
     // Output the correct style of link.
-    $default_icon = drupal_get_path('module', 'forward') . '/images/forward.gif';
+    $default_icon = \Drupal::service('extension.list.module')->getPath('forward') . '/images/forward.gif';
     $custom_icon = $settings['forward_link_icon'];
     $link_style = $settings['forward_link_style'];
     switch ($link_style) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [ERROR] Could not process                                                      
         "modules/contrib/forward/src/Plugin/DsField/ForwardLinkUser.php" file, 
         due to:                                                                
         "Analyze error: "Class Drupal\ds\Plugin\DsField\DsFieldBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/forward/src/Plugin/DsField/ForwardLinkTaxonomy.php"   
         file, due to:                                                          
         "Analyze error: "Class Drupal\ds\Plugin\DsField\DsFieldBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/forward/src/Plugin/DsField/ForwardLink.php" file, due 
         to:                                                                    
         "Analyze error: "Class Drupal\ds\Plugin\DsField\DsFieldBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/forward/src/Plugin/DsField/ForwardFormUser.php" file, 
         due to:                                                                
         "Analyze error: "Class Drupal\ds\Plugin\DsField\DsFieldBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/forward/src/Plugin/DsField/ForwardFormTaxonomy.php"   
         file, due to:                                                          
         "Analyze error: "Class Drupal\ds\Plugin\DsField\DsFieldBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/forward/src/Plugin/DsField/ForwardForm.php" file, due 
         to:                                                                    
         "Analyze error: "Class Drupal\ds\Plugin\DsField\DsFieldBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

