modules/contrib/persistent_login/Tests/src/Functional/PersistentLoginTest.php
modules/contrib/persistent_login/persistent_login.install
modules/contrib/persistent_login/persistent_login.module
modules/contrib/persistent_login/src/Controller/UserController.php
modules/contrib/persistent_login/src/CookieHelper.php
modules/contrib/persistent_login/src/CookieHelperInterface.php
modules/contrib/persistent_login/src/EventSubscriber/TokenHandler.php
modules/contrib/persistent_login/src/Form/PersistentLoginSettingsForm.php
modules/contrib/persistent_login/src/PageCache/RequestPolicy/PendingPersistentLogin.php
modules/contrib/persistent_login/src/PersistentToken.php
modules/contrib/persistent_login/src/TokenException.php
modules/contrib/persistent_login/src/TokenManager.php

2 files with changes
====================

1) modules/contrib/persistent_login/src/EventSubscriber/TokenHandler.php:100

    ---------- begin diff ----------
@@ @@
   /**
    * Load a token on this request, if a persistent cookie is provided.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The request event.
    */
-  public function loadTokenOnRequestEvent(GetResponseEvent $event) {
+  public function loadTokenOnRequestEvent(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {

     if (!$event->isMasterRequest()) {
       return;
@@ @@
   /**
    * Set or clear a token cookie on this response, if required.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The response event.
    */
-  public function setTokenOnResponseEvent(FilterResponseEvent $event) {
+  public function setTokenOnResponseEvent(\Symfony\Component\HttpKernel\Event\ResponseEvent $event) {

     if (!$event->isMasterRequest()) {
       return;
@@ @@
         // New or updated token.
         $this->token = $this->tokenManager->updateToken($this->token);
         $response->headers->setCookie(
-          new Cookie(
-            $this->cookieHelper->getCookieName($request),
-            $this->token,
-            $this->token->getExpiry(),
-            '/',  // TODO Path should probably match the base path.
-            $sessionOptions['cookie_domain'],
-            $sessionOptions['cookie_secure']
+          \Symfony\Component\HttpFoundation\Cookie::create(
+              $this->cookieHelper->getCookieName($request),
+              $this->token,
+              $this->token->getExpiry(),
+              '/',
+              // TODO Path should probably match the base path.
+              $sessionOptions['cookie_domain'],
+              $sessionOptions['cookie_secure']
           )
         );
         $response->setPrivate();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * NewToStaticCallRector
 * AddParamTypeDeclarationRector


2) modules/contrib/persistent_login/Tests/src/Functional/PersistentLoginTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Mimic the required setup of the module by setting the session cookie
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 2 files have been changed by Rector                                       

