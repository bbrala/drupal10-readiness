modules/contrib/domain_path_redirect/domain_path_redirect.install
modules/contrib/domain_path_redirect/domain_path_redirect.module
modules/contrib/domain_path_redirect/src/DomainPathRedirectRepository.php
modules/contrib/domain_path_redirect/src/DomainPathRedirectStorageSchema.php
modules/contrib/domain_path_redirect/src/DomainPathRedirectViewsData.php
modules/contrib/domain_path_redirect/src/Entity/DomainPathRedirect.php
modules/contrib/domain_path_redirect/src/EventSubscriber/DomainPathRedirectRequestSubscriber.php
modules/contrib/domain_path_redirect/src/Form/DomainPathRedirectDeleteForm.php
modules/contrib/domain_path_redirect/src/Form/DomainPathRedirectForm.php
modules/contrib/domain_path_redirect/src/Plugin/views/filter/DomainAutocomplete.php
modules/contrib/domain_path_redirect/tests/src/Kernel/DomainPathRedirectAPITest.php
modules/contrib/domain_path_redirect/tests/src/Unit/DomainPathRedirectRequestSubscriberTest.php

2 files with changes
====================

1) modules/contrib/domain_path_redirect/tests/src/Unit/DomainPathRedirectRequestSubscriberTest.php:63

    ---------- begin diff ----------
@@ @@
     // by the redirect entity and values from the accessed url.
     $final_query = $redirect_query + $request_query;

-    $url = $this->getMockBuilder('Drupal\Core\Url')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock('Drupal\Core\Url');

     $url->expects($this->once())
       ->method('setAbsolute')
@@ @@
    * @dataProvider getDomainPathRedirectData
    */
   public function testDomainPathRedirectLogicWithoutQueryRetaining($request_uri, $request_query, $redirect_uri, $redirect_query, $hostname, $domain_id) {
-    $url = $this->getMockBuilder('Drupal\Core\Url')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock('Drupal\Core\Url');

     $url->expects($this->once())
       ->method('setAbsolute')
@@ @@
    * @param string $hostname
    *   Url to be returned from getHostname.
    *
-   * @return \PHPUnit_Framework_MockObject_MockObject
+   * @return \PHPUnit\Framework\MockObject\MockObject
    *   The mocked domain object.
    */
   protected function getDomainStub($hostname) {
-    $domain = $this->getMockBuilder('Drupal\domain\Entity\Domain')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $domain = $this->createMock('Drupal\domain\Entity\Domain');

     $domain->expects($this->any())
       ->method('getHostname')
@@ @@
    * @param int $status_code
    *   The redirect status code.
    *
-   * @return \PHPUnit_Framework_MockObject_MockObject
+   * @return \PHPUnit\Framework\MockObject\MockObject
    *   The mocked redirect object.
    */
   protected function getRedirectStub($url, $domain_id, $status_code = 301) {
-    $redirect = $this->getMockBuilder('Drupal\domain_path_redirect\Entity\DomainPathRedirect')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $redirect = $this->createMock('Drupal\domain_path_redirect\Entity\DomainPathRedirect');

     $redirect->expects($this->once())
       ->method('getRedirectUrl')
@@ @@
    * @param bool $retain_query
    *   Flag if to retain the query through the redirect.
    *
-   * @return \Symfony\Component\HttpKernel\Event\GetResponseEvent
+   * @return \Symfony\Component\HttpKernel\Event\RequestEvent
    *   The response event.
    */
   protected function callOnKernelRequestCheckDomainPathRedirect(DomainPathRedirect $redirect, DomainInterface $domain, $request_uri, array $request_query, $retain_query) {
@@ @@
     $event = $this->getGetResponseEventStub($request_uri, http_build_query($request_query));
     $request = $event->getRequest();

-    $checker = $this->getMockBuilder('Drupal\redirect\RedirectChecker')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $checker = $this->createMock('Drupal\redirect\RedirectChecker');
     $checker->expects($this->any())
       ->method('canRedirect')
       ->will($this->returnValue(TRUE));

-    $context = $this->getMockBuilder('Symfony\Component\Routing\RequestContext')->getMock();
+    $context = $this->createMock('Symfony\Component\Routing\RequestContext');

-    $inbound_path_processor = $this->getMockBuilder('Drupal\Core\PathProcessor\InboundPathProcessorInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $inbound_path_processor = $this->createMock('Drupal\Core\PathProcessor\InboundPathProcessorInterface');
     $inbound_path_processor->expects($this->any())
       ->method('processInbound')
       ->with($request->getPathInfo(), $request)
       ->will($this->returnValue($request->getPathInfo()));

-    $alias_manager = $this->getMockBuilder('Drupal\path_alias\AliasManagerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $module_handler = $this->getMockBuilder('Drupal\Core\Extension\ModuleHandlerInterface')
-      ->getMock();
-    $entity_manager = $this->getMockBuilder('Drupal\Core\Entity\EntityTypeManagerInterface')
-      ->getMock();
-    $logger = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannelFactoryInterface')
-      ->getMock();
-    $url_generator = $this->getMockBuilder('Drupal\Core\Routing\UrlGeneratorInterface')
-      ->getMock();
-    $messenger = $this->getMockBuilder('Drupal\Core\Messenger\MessengerInterface')
-      ->getMock();
-    $route_match = $this->getMockBuilder('Drupal\Core\Routing\RouteMatchInterface')
-      ->getMock();
+    $alias_manager = $this->createMock('Drupal\path_alias\AliasManagerInterface');
+    $module_handler = $this->createMock('Drupal\Core\Extension\ModuleHandlerInterface');
+    $entity_manager = $this->createMock('Drupal\Core\Entity\EntityTypeManagerInterface');
+    $logger = $this->createMock('Drupal\Core\Logger\LoggerChannelFactoryInterface');
+    $url_generator = $this->createMock('Drupal\Core\Routing\UrlGeneratorInterface');
+    $messenger = $this->createMock('Drupal\Core\Messenger\MessengerInterface');
+    $route_match = $this->createMock('Drupal\Core\Routing\RouteMatchInterface');

     $subscriber = new DomainPathRedirectRequestSubscriber(
       $this->getDomainPathRedirectRepositoryStub('findMatchingRedirect', $redirect),
@@ @@
    * @param \Drupal\domain\DomainInterface $domain
    *   The domain object to be returned.
    *
-   * @return \PHPUnit_Framework_MockObject_MockObject
+   * @return \PHPUnit\Framework\MockObject\MockObject
    *   The domain negotiator.
    */
   protected function getDomainNegotiatorStub($method, DomainInterface $domain) {
-    $domain_negotiator = $this->getMockBuilder('Drupal\domain\DomainNegotiatorInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $domain_negotiator = $this->createMock('Drupal\domain\DomainNegotiatorInterface');

     $domain_negotiator->expects($this->any())
       ->method($method)
@@ @@
    * @param \Drupal\domain_path_redirect\Entity\DomainPathRedirect $redirect
    *   The redirect entity to be returned.
    *
-   * @return \PHPUnit_Framework_MockObject_MockObject
+   * @return \PHPUnit\Framework\MockObject\MockObject
    *   The redirect repository.
    */
   protected function getDomainPathRedirectRepositoryStub($method, DomainPathRedirect $redirect) {
-    $repository = $this->getMockBuilder('Drupal\domain_path_redirect\DomainPathRedirectRepository')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $repository = $this->createMock('Drupal\domain_path_redirect\DomainPathRedirectRepository');

     $repository->expects($this->any())
       ->method($method)
@@ @@
    * @param array $headers
    *   Headers to be set into the response.
    *
-   * @return \Symfony\Component\HttpKernel\Event\PostResponseEvent
+   * @return \Symfony\Component\HttpKernel\Event\TerminateEvent
    *   The post response event object.
    */
   protected function getPostResponseEvent(array $headers = []) {
-    $http_kernel = $this->getMockBuilder('Symfony\Component\HttpKernel\HttpKernelInterface')
-      ->getMock();
-    $request = $this->getMockBuilder('Symfony\Component\HttpFoundation\Request')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_kernel = $this->createMock('Symfony\Component\HttpKernel\HttpKernelInterface');
+    $request = $this->createMock('Symfony\Component\HttpFoundation\Request');

     $response = new Response('', 301, $headers);

-    return new PostResponseEvent($http_kernel, $request, $response);
+    return new \Symfony\Component\HttpKernel\Event\TerminateEvent($http_kernel, $request, $response);
   }

   /**
@@ @@
    * @param string $query_string
    *   The query string of the request.
    *
-   * @return \Symfony\Component\HttpKernel\Event\GetResponseEvent
+   * @return \Symfony\Component\HttpKernel\Event\RequestEvent
    *   The response event.
    */
   protected function getGetResponseEventStub($path_info, $query_string) {
     $request = Request::create($path_info . '?' . $query_string, 'GET', [], [], [], ['SCRIPT_NAME' => 'index.php']);

-    $http_kernel = $this->getMockBuilder('Symfony\Component\HttpKernel\HttpKernelInterface')
-      ->getMock();
-    return new GetResponseEvent($http_kernel, $request, NULL);
+    $http_kernel = $this->createMock('Symfony\Component\HttpKernel\HttpKernelInterface');
+    return new \Symfony\Component\HttpKernel\Event\RequestEvent($http_kernel, $request, NULL);
   }

   /**
    * Gets the language manager mock object.
    *
-   * @return \Drupal\language\ConfigurableLanguageManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @return \Drupal\language\ConfigurableLanguageManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    *   The mocked language manager object.
    */
   protected function getLanguageManagerStub() {
-    $language_manager = $this->getMockBuilder('Drupal\language\ConfigurableLanguageManagerInterface')
-      ->getMock();
+    $language_manager = $this->createMock('Drupal\language\ConfigurableLanguageManagerInterface');
     $language_manager->expects($this->any())
       ->method('getCurrentLanguage')
       ->will($this->returnValue(new Language(['id' => 'en'])));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/domain_path_redirect/src/EventSubscriber/DomainPathRedirectRequestSubscriber.php:182

    ---------- begin diff ----------
@@ @@
   /**
    * Handles the domain redirect if any found.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event to process.
    */
-  public function onKernelRequestCheckDomainPathRedirect(GetResponseEvent $event) {
+  public function onKernelRequestCheckDomainPathRedirect(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     // Get a clone of the request. During inbound processing the request
     // can be altered. Allowing this here can lead to unexpected behavior.
     // For example the path_processor.files inbound processor provided by
@@ @@
   /**
    * Redirect to domain redirects listing page if there is no active domain.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event to process.
    */
-  public function onKernelRequestCheckActiveDomain(GetResponseEvent $event) {
+  public function onKernelRequestCheckActiveDomain(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     $request = $event->getRequest();
     $this->context->fromRequest($request);
     $route_name = $this->routeMatch->getRouteName();
@@ @@
   /**
    * Prior to set the response it check if we can redirect.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event to process.
    * @param \Drupal\Core\Url $url
    *   The Url where we want to redirect.
    */
-  protected function setResponse(GetResponseEvent $event, Url $url) {
+  protected function setResponse(\Symfony\Component\HttpKernel\Event\RequestEvent $event, Url $url) {
     $request = $event->getRequest();
     $this->context->fromRequest($request);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 2 files have been changed by Rector                                       

