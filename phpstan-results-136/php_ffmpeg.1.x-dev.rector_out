modules/contrib/php_ffmpeg/php_ffmpeg.install
modules/contrib/php_ffmpeg/php_ffmpeg.module
modules/contrib/php_ffmpeg/src/Form/PHPFFMpegSettings.php
modules/contrib/php_ffmpeg/src/PHPFFMpegCache.php
modules/contrib/php_ffmpeg/src/PHPFFMpegFactory.php
modules/contrib/php_ffmpeg/tests/src/Functional/PHPFFMpegTestCase.php
modules/contrib/php_ffmpeg/tests/src/Unit/PHPFFMpegCacheTest.php

1 file with changes
===================

1) modules/contrib/php_ffmpeg/tests/src/Functional/PHPFFMpegTestCase.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->fileSystem = $this->container->get('file_system');
@@ @@
     $this->drupalLogin($account);
     $this->drupalGet('admin/config/development/php-ffmpeg');

-    $this->assertFieldByName('ffmpeg_binary', $ffmpeg_binary, 'The PHP-FFMpeg settings page should provide a field for the ffmpeg binary path.');
-    $this->assertFieldByName('ffprobe_binary', $ffprobe_binary, 'The PHP-FFMpeg settings page should provide a field for the ffprobe binary path.');
-    $this->assertFieldByName('execution_timeout', $execution_timeout, 'The PHP-FFMpeg settings page should provide a field for the ffmpeg command timeout.');
-    $this->assertFieldByName('threads_amount', $threads_amount, 'The PHP-FFMpeg settings page should provide a field for the number of threads to use for ffmpeg commands.');
+    $this->assertSession()->fieldValueEquals('ffmpeg_binary', $ffmpeg_binary);
+    $this->assertSession()->fieldValueEquals('ffprobe_binary', $ffprobe_binary);
+    $this->assertSession()->fieldValueEquals('execution_timeout', $execution_timeout);
+    $this->assertSession()->fieldValueEquals('threads_amount', $threads_amount);

     $ffmpeg_binary = $this->fileSystem->realpath($this->drupalGetTestFiles('binary')[0]->uri);
     $ffprobe_binary = $this->fileSystem->realpath($this->drupalGetTestFiles('binary')[1]->uri);
@@ @@
     $execution_timeout = mt_rand(1, 42);
     $threads_amount = mt_rand(1, 42);

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'ffmpeg_binary' => $ffmpeg_binary,
       'ffprobe_binary' => $ffprobe_binary,
       'execution_timeout' => $execution_timeout,
@@ @@
     ], 'Save configuration');
     $settings = $this->config('php_ffmpeg.settings');

-    $this->assertFieldByName('ffmpeg_binary', $ffmpeg_binary, 'Submitting he PHP-FFMpeg settings page should update the value of the field for the ffmpeg binary path.');
-    $this->assertFieldByName('ffprobe_binary', $ffprobe_binary, 'Submitting he PHP-FFMpeg settings page should update the value of the field for the ffprobe binary path.');
-    $this->assertFieldByName('execution_timeout', $execution_timeout, 'Submitting he PHP-FFMpeg settings page should update the value of the field for the ffmpeg command timeout.');
-    $this->assertFieldByName('threads_amount', $threads_amount, 'Submitting he PHP-FFMpeg settings page should update the value of the field for the number of threads to use for ffmpeg commands.');
+    $this->assertSession()->fieldValueEquals('ffmpeg_binary', $ffmpeg_binary);
+    $this->assertSession()->fieldValueEquals('ffprobe_binary', $ffprobe_binary);
+    $this->assertSession()->fieldValueEquals('execution_timeout', $execution_timeout);
+    $this->assertSession()->fieldValueEquals('threads_amount', $threads_amount);

-    $this->assertEqual($settings->get('ffmpeg_binary'), $ffmpeg_binary, 'Submitting he PHP-FFMpeg settings page should update the ffmpeg binary path.');
-    $this->assertEqual($settings->get('ffprobe_binary'), $ffprobe_binary, 'Submitting he PHP-FFMpeg settings page should update the ffproe binary path.');
-    $this->assertEqual($settings->get('execution_timeout'), $execution_timeout, 'Submitting he PHP-FFMpeg settings page should update the ffmpeg command timeout.');
-    $this->assertEqual($settings->get('threads_amount'), $threads_amount, 'Submitting he PHP-FFMpeg settings page should update the number of threads to use for ffmpeg commands.');
+    $this->assertEquals($settings->get('ffmpeg_binary'), $ffmpeg_binary, 'Submitting he PHP-FFMpeg settings page should update the ffmpeg binary path.');
+    $this->assertEquals($settings->get('ffprobe_binary'), $ffprobe_binary, 'Submitting he PHP-FFMpeg settings page should update the ffproe binary path.');
+    $this->assertEquals($settings->get('execution_timeout'), $execution_timeout, 'Submitting he PHP-FFMpeg settings page should update the ffmpeg command timeout.');
+    $this->assertEquals($settings->get('threads_amount'), $threads_amount, 'Submitting he PHP-FFMpeg settings page should update the number of threads to use for ffmpeg commands.');

     $invalidFilenames = [
       $this->randomMachineName(),
@@ @@
       $this->randomMachineName(),
     ];

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'ffmpeg_binary' => $invalidFilenames[0],
       'ffprobe_binary' => $invalidFilenames[1],
       'execution_timeout' => $this->randomString(),
@@ @@
     ], 'Save configuration');
     $settings = $this->config('php_ffmpeg.settings');

-    $this->assertText("File not found: $invalidFilenames[0]", "Submission of the the PHP-FFMpeg settings page should validate the ffmpeg binary path is an existing file.");
-    $this->assertText("File not found: $invalidFilenames[1]", "Submission of the the PHP-FFMpeg settings page should validate the ffprobe binary path is an existing file.");
-    $this->assertEqual($settings->get('ffmpeg_binary'), $ffmpeg_binary, 'Submitting he PHP-FFMpeg settings page with invalid values should not update the ffmpeg binary path.');
-    $this->assertEqual($settings->get('ffprobe_binary'), $ffprobe_binary, 'Submitting he PHP-FFMpeg settings page with invalid values should not update the ffprobe path.');
-    $this->assertEqual($settings->get('execution_timeout'), $execution_timeout, 'Submitting he PHP-FFMpeg settings page with invalid values should not update the ffmpeg command time path.');
-    $this->assertEqual($settings->get('threads_amount'), $threads_amount, 'Submitting he PHP-FFMpeg settings page with invalid values should not update the ffmpeg command threads number.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("File not found: $invalidFilenames[0]");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("File not found: $invalidFilenames[1]");
+    $this->assertEquals($settings->get('ffmpeg_binary'), $ffmpeg_binary, 'Submitting he PHP-FFMpeg settings page with invalid values should not update the ffmpeg binary path.');
+    $this->assertEquals($settings->get('ffprobe_binary'), $ffprobe_binary, 'Submitting he PHP-FFMpeg settings page with invalid values should not update the ffprobe path.');
+    $this->assertEquals($settings->get('execution_timeout'), $execution_timeout, 'Submitting he PHP-FFMpeg settings page with invalid values should not update the ffmpeg command time path.');
+    $this->assertEquals($settings->get('threads_amount'), $threads_amount, 'Submitting he PHP-FFMpeg settings page with invalid values should not update the ffmpeg command threads number.');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/php_ffmpeg/tests/src/Unit/PHPFFMpegCacheTest.php" file,
         due to:                                                                
         "Analyze error: "Class Doctrine\Common\Cache\Cache not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/php_ffmpeg/src/PHPFFMpegCache.php"  
         file, due to:                                                          
         "Analyze error: "Class Doctrine\Common\Cache\Cache not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

