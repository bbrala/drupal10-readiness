modules/contrib/url_embed/src/Form/UrlEmbedDialog.php
modules/contrib/url_embed/src/Plugin/CKEditorPlugin/DrupalUrl.php
modules/contrib/url_embed/src/Plugin/EmbedType/Url.php
modules/contrib/url_embed/src/Plugin/Field/FieldFormatter/LinkEmbedFormatter.php
modules/contrib/url_embed/src/Plugin/Filter/ConvertUrlToEmbedFilter.php
modules/contrib/url_embed/src/Plugin/Filter/UrlEmbedFilter.php
modules/contrib/url_embed/src/UrlEmbed.php
modules/contrib/url_embed/src/UrlEmbedHelperTrait.php
modules/contrib/url_embed/src/UrlEmbedInterface.php
modules/contrib/url_embed/tests/src/Functional/ConvertUrlToEmbedFilterTest.php
modules/contrib/url_embed/tests/src/Functional/LinkEmbedFormatterTest.php
modules/contrib/url_embed/tests/src/Functional/UrlEmbedDialogTest.php
modules/contrib/url_embed/tests/src/Functional/UrlEmbedFilterTest.php
modules/contrib/url_embed/tests/src/Functional/UrlEmbedTestBase.php
modules/contrib/url_embed/url_embed.install
modules/contrib/url_embed/url_embed.module

6 files with changes
====================

1) modules/contrib/url_embed/tests/src/Functional/UrlEmbedTestBase.php:57

    ---------- begin diff ----------
@@ @@
   /**
    * A set up for all tests.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a page content type.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/url_embed/tests/src/Functional/UrlEmbedFilterTest.php:29

    ---------- begin diff ----------
@@ @@
     $node = $this->drupalCreateNode($settings);
     $this->drupalGet('node/' . $node->id());
     $this->assertSession()->responseContains(static::FLICKR_OUTPUT_WYSIWYG);
-    $this->assertNoText(strip_tags($content), 'Placeholder does not appear in the output when embed is successful.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(strip_tags($content));

     // Ensure that placeholder is not replaced when embed is unsuccessful.
     $content = '<drupal-url data-embed-url="">This placeholder should be rendered since specified URL does not exists.</drupal-url>';
@@ @@
     $settings['body'] = array(array('value' => $content, 'format' => 'custom_format'));
     $node = $this->drupalCreateNode($settings);
     $this->drupalGet('node/' . $node->id());
-    $this->assertNoText(strip_tags($content), 'Placeholder does not appear in the output when embed is unsuccessful.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(strip_tags($content));

     // Test that tag of container element is not replaced when it's not
     // <drupal-url>.
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/url_embed/tests/src/Functional/UrlEmbedDialogTest.php:17

    ---------- begin diff ----------
@@ @@
     // Ensure that the route is not accessible without specifying all the
     // parameters.
     $this->getEmbedDialog();
-    $this->assertResponse(404, 'Embed dialog is not accessible without specifying filter format and embed button.');
+    $this->assertSession()->statusCodeEquals(404, 'Embed dialog is not accessible without specifying filter format and embed button.');
     $this->getEmbedDialog('custom_format');
-    $this->assertResponse(404, 'Embed dialog is not accessible without specifying embed button.');
+    $this->assertSession()->statusCodeEquals(404, 'Embed dialog is not accessible without specifying embed button.');

     // Ensure that the route is not accessible with an invalid embed button.
     $this->getEmbedDialog('custom_format', 'invalid_button');
-    $this->assertResponse(404, 'Embed dialog is not accessible without specifying filter format and embed button.');
+    $this->assertSession()->statusCodeEquals(404, 'Embed dialog is not accessible without specifying filter format and embed button.');

     // Ensure that the route is not accessible with text format without the
     // button configured.
     $this->getEmbedDialog('plain_text', 'url');
-    $this->assertResponse(404, 'Embed dialog is not accessible with a filter that does not have an editor configuration.');
+    $this->assertSession()->statusCodeEquals(404, 'Embed dialog is not accessible with a filter that does not have an editor configuration.');

     // Add an empty configuration for the plain_text editor configuration.
     $editor = Editor::create([
@@ @@
     ]);
     $editor->save();
     $this->getEmbedDialog('plain_text', 'url');
-    $this->assertResponse(403, 'Embed dialog is not accessible with a filter that does not have the embed button assigned to it.');
+    $this->assertSession()->statusCodeEquals(403, 'Embed dialog is not accessible with a filter that does not have the embed button assigned to it.');

     // Ensure that the route is accessible with a valid embed button.
     // 'URL' embed button is provided by default by the module and hence the
     // request must be successful.
     $this->getEmbedDialog('custom_format', 'url');
-    $this->assertResponse(200, 'Embed dialog is accessible with correct filter format and embed button.');
+    $this->assertSession()->statusCodeEquals(200, 'Embed dialog is accessible with correct filter format and embed button.');
   }

   /**
@@ @@
     // Ensure that the route is not accessible with text format without the
     // button configured.
     $this->getEmbedDialog('plain_text', 'url');
-    $this->assertResponse(404, 'Embed dialog is not accessible with a filter that does not have an editor configuration.');
+    $this->assertSession()->statusCodeEquals(404, 'Embed dialog is not accessible with a filter that does not have an editor configuration.');
     // Add an empty configuration for the plain_text editor configuration.
     $editor = Editor::create([
       'format' => 'plain_text',
@@ @@
     ]);
     $editor->save();
     $this->getEmbedDialog('plain_text', 'url');
-    $this->assertResponse(403, 'Embed dialog is not accessible with a filter that does not have the embed button assigned to it.');
+    $this->assertSession()->statusCodeEquals(403, 'Embed dialog is not accessible with a filter that does not have the embed button assigned to it.');
     // Ensure that the route is accessible with a valid embed button.
     // 'URL' embed button is provided by default by the module and hence the
     // request must be successful.
     $this->getEmbedDialog('custom_format', 'url');
-    $this->assertResponse(200, 'Embed dialog is accessible with correct filter format and embed button.');
+    $this->assertSession()->statusCodeEquals(200, 'Embed dialog is accessible with correct filter format and embed button.');
     // Ensure form structure of the url_embed_dialog form.
-    $this->assertFieldByName('attributes[data-embed-url]', '', 'URL field is present.');
+    $this->assertSession()->fieldValueEquals('attributes[data-embed-url]', '');
     // Check that 'Embed' is a primary button.
     $this->assertFieldByXPath('//input[contains(@class, "button--primary")]', 'Embed', 'Embed is a primary button');
     $edit = ['attributes[data-embed-url]' => static::FLICKR_URL];
-    $this->drupalPostForm(NULL, $edit, 'Embed');
+    $this->submitForm($edit, 'Embed');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertResponseRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/url_embed/tests/src/Functional/ConvertUrlToEmbedFilterTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Set the configuration up.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Create a page content type.
     $this->drupalCreateContentType(['type' => 'page', 'name' => 'Basic page']);
@@ @@
     $node = $this->drupalCreateNode($settings);
     $this->drupalGet('node/' . $node->id());
     $this->assertSession()->responseContains('<drupal-url data-embed-url="https://twitter.com/drupal/status/735873777683320832"></drupal-url>');
-    $this->assertNoText(strip_tags($content), 'URL does not appear in the output when embed is successful.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(strip_tags($content));

     $content = 'before /not-valid/url after';
     $settings = [];
@@ @@
     $node = $this->drupalCreateNode($settings);
     $this->drupalGet('node/' . $node->id());
     $this->assertSession()->responseContains('<drupal-url data-embed-url="https://twitter.com/drupal/status/735873777683320832"></drupal-url>');
-    $this->assertNoText(strip_tags($content), 'URL does not appear in the output when embed is successful.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(strip_tags($content));

     $content = 'before Embed https://twitter.com/drupal/status/735873777683320832 after';
     $settings = [];
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/url_embed/src/Plugin/EmbedType/Url.php:22

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getDefaultIconUrl() {
-    return file_create_url(drupal_get_path('module', 'url_embed') . '/js/plugins/drupalurl/urlembed.png');
+    return \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('url_embed') . '/js/plugins/drupalurl/urlembed.png');
   }
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/url_embed/src/Plugin/CKEditorPlugin/DrupalUrl.php:24

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getFile() {
-    return drupal_get_path('module', 'url_embed') . '/js/plugins/drupalurl/plugin.js';
+    return \Drupal::service('extension.list.module')->getPath('url_embed') . '/js/plugins/drupalurl/plugin.js';
   }

   /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

