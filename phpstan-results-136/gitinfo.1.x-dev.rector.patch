diff --git a/gitinfo.module b/gitinfo.module
index 3d55704..d1db0b6 100644
--- a/gitinfo.module
+++ b/gitinfo.module
@@ -41,8 +41,8 @@ function gitinfo_cron() {
   $interval = $config->get('interval');
   $interval = !empty($interval) ? $interval : 0;
   $next_execution = \Drupal::state()->get('gitinfo.next_execution', 0);
-  if ($interval && REQUEST_TIME >= $next_execution) {
-    \Drupal::state()->set('gitinfo.next_execution', REQUEST_TIME + $interval);
+  if ($interval && \Drupal::time()->getRequestTime() >= $next_execution) {
+    \Drupal::state()->set('gitinfo.next_execution', \Drupal::time()->getRequestTime() + $interval);
     if (\Drupal::moduleHandler()->moduleExists('basic_auth')) {
       // Generate the report by visiting the page.
       $uri = Url::fromRoute('gitinfo.report', [], ['absolute' => TRUE])->toString();
diff --git a/src/Controller/GitinfoController.php b/src/Controller/GitinfoController.php
index aa157d9..7019eb3 100644
--- a/src/Controller/GitinfoController.php
+++ b/src/Controller/GitinfoController.php
@@ -744,7 +744,7 @@ class GitinfoController extends ControllerBase {
                 '#list_type' => 'ul',
                 '#items' => $items,
               ];
-              $resultsList = render($resultsList);
+              $resultsList = \Drupal::service('renderer')->render($resultsList);
               $logMessage = $this->t("@action<br />@operationMessage @typeMessage on the following projects:<br />@resultsList", [
                 '@action' => $action,
                 '@operationMessage' => $operationMessage,
@@ -807,7 +807,7 @@ class GitinfoController extends ControllerBase {
       '#list_type' => 'ul',
       '#items' => $items,
     ] : NULL;
-    $metadata = render($metadata);
+    $metadata = \Drupal::service('renderer')->render($metadata);
     // Log the report results.
     switch ($severity) {
       case 'error':
diff --git a/tests/src/Functional/GitinfoTest.php b/tests/src/Functional/GitinfoTest.php
index c8460c8..58b0b08 100644
--- a/tests/src/Functional/GitinfoTest.php
+++ b/tests/src/Functional/GitinfoTest.php
@@ -84,26 +84,41 @@ class GitinfoTest extends BrowserTestBase {
     $url = Url::fromRoute('gitinfo.settings');
     $this->drupalGet($url);
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Connection with the remote repos');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Connection with the remote repos');
     // Empty form submission. Check presence of the default value.
-    $this->drupalPostForm(NULL, [], 'Save configuration');
-    $this->assertText('vendor');
+    $this->submitForm([], 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('vendor');
     // Form validation testing of a non-existing directory rejection.
     $edit = ['extra_directories' => '/non-existing/directory'];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
-    $this->assertText('Directory /non-existing/directory does not exist.');
+    $this->submitForm($edit, 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Directory /non-existing/directory does not exist.');
     // Form validation testing of an invalid characters rejection.
     $edit = ['extra_directories' => '', 'aggregate_directories' => 'some/invalid/ch@r@ter$'];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
-    $this->assertText('Directory some/invalid/ch@r@ter$ is invalid.');
+    $this->submitForm($edit, 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Directory some/invalid/ch@r@ter$ is invalid.');
     // Form validation testing of an invalid date format.
     $edit = [
       'extra_directories' => '',
       'aggregate_directories' => '',
       'exact_date_format' => 'l \t\h\e jS \of F Y h:i:s Agibberish',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
-    $this->assertText('Invalid format.');
+    $this->submitForm($edit, 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Invalid format.');
     // A correct form submission.
     $edit = [
       'extra_directories' => '',
@@ -112,8 +127,11 @@ class GitinfoTest extends BrowserTestBase {
       'fuzzy_timestamp_granularity' => 9,
       'exact_date_format' => 'l \t\h\e jS \of F Y h:i:s A',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
-    $this->assertText('The configuration options have been saved.');
+    $this->submitForm($edit, 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
   }
 
 }
