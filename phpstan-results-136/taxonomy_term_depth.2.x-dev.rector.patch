diff --git a/taxonomy_term_depth.info.yml b/taxonomy_term_depth.info.yml
index 0b7df9b..a1ffd6a 100644
--- a/taxonomy_term_depth.info.yml
+++ b/taxonomy_term_depth.info.yml
@@ -1,6 +1,6 @@
 type: module
 name: Taxonomy term depth
-core_version_requirement: '^8 || ^9'
+core_version_requirement: ^8 || ^9 || ^10
 description: Provides field for storing taxonomy depth value and some wrappers integration with modules
 package: Taxonomy
 dependencies:
diff --git a/tests/src/Functional/DynamicDepthCalculationTest.php b/tests/src/Functional/DynamicDepthCalculationTest.php
index bb74780..623925d 100755
--- a/tests/src/Functional/DynamicDepthCalculationTest.php
+++ b/tests/src/Functional/DynamicDepthCalculationTest.php
@@ -28,7 +28,7 @@ class DynamicDepthCalculationTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
   }
 
@@ -71,13 +71,13 @@ class DynamicDepthCalculationTest extends BrowserTestBase {
     $term3->parent->set(1, $term2->id());
     $term3->save();
 
-    $this->assertEqual(taxonomy_term_depth_get_by_tid($term1->id()), 1, 'Depth of first term');
-    $this->assertEqual(taxonomy_term_depth_get_by_tid($term2->id()), 2, 'Depth of second term');
-    $this->assertEqual(taxonomy_term_depth_get_by_tid($term3->id()), 3, 'Depth of third term');
+    $this->assertEquals(taxonomy_term_depth_get_by_tid($term1->id()), 1, 'Depth of first term');
+    $this->assertEquals(taxonomy_term_depth_get_by_tid($term2->id()), 2, 'Depth of second term');
+    $this->assertEquals(taxonomy_term_depth_get_by_tid($term3->id()), 3, 'Depth of third term');
 
-    $this->assertEqual($term1->depth_level->first() ? $term1->depth_level->first()->value : NULL, 1, 'Saved depth of first term');
-    $this->assertEqual($term2->depth_level->first() ? $term2->depth_level->first()->value : NULL, 2, 'Saved depth of second term');
-    $this->assertEqual($term3->depth_level->first() ? $term3->depth_level->first()->value : NULL, 3, 'Saved depth of third term');
+    $this->assertEquals($term1->depth_level->first() ? $term1->depth_level->first()->value : NULL, 1, 'Saved depth of first term');
+    $this->assertEquals($term2->depth_level->first() ? $term2->depth_level->first()->value : NULL, 2, 'Saved depth of second term');
+    $this->assertEquals($term3->depth_level->first() ? $term3->depth_level->first()->value : NULL, 3, 'Saved depth of third term');
 
     $chain = taxonomy_term_depth_get_full_chain($term2->id());
     $compare = [
@@ -91,13 +91,13 @@ class DynamicDepthCalculationTest extends BrowserTestBase {
     $chain = taxonomy_term_depth_get_full_chain($term2->id(), TRUE);
     $this->assertTrue($chain === array_reverse($compare), 'Testing reversed fullchain for term2');
 
-    $this->assertEqual(\Drupal::database()
+    $this->assertEquals(\Drupal::database()
       ->query('SELECT depth_level FROM {taxonomy_term_field_data} WHERE tid=:tid', [':tid' => $term1->id()])
       ->fetchField(), 1, 'DB depth_level field of first term');
-    $this->assertEqual(\Drupal::database()
+    $this->assertEquals(\Drupal::database()
       ->query('SELECT depth_level FROM {taxonomy_term_field_data} WHERE tid=:tid', [':tid' => $term2->id()])
       ->fetchField(), 2, 'DB depth_level field of second term');
-    $this->assertEqual(\Drupal::database()
+    $this->assertEquals(\Drupal::database()
       ->query('SELECT depth_level FROM {taxonomy_term_field_data} WHERE tid=:tid', [':tid' => $term3->id()])
       ->fetchField(), 3, 'DB depth_level field of third term');
   }
