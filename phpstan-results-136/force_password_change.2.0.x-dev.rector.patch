diff --git a/src/Form/AdminForm.php b/src/Form/AdminForm.php
index 30a7ca3..2b0ff7d 100644
--- a/src/Form/AdminForm.php
+++ b/src/Form/AdminForm.php
@@ -366,7 +366,7 @@ class AdminForm extends FormBase {
         '#items' => $items,
       ];
 
-      $item_list = new FormattableMarkup('@item_list', ['@item_list' => render($list)]);
+      $item_list = new FormattableMarkup('@item_list', ['@item_list' => \Drupal::service('renderer')->render($list)]);
       // Set a message informing the user of the roles
       // that had a forced password change.
       if ($form_state->getValue('login_only')) {
diff --git a/tests/src/Unit/Service/ForcePasswordChangeServiceTest.php b/tests/src/Unit/Service/ForcePasswordChangeServiceTest.php
index b243963..17d5a0f 100644
--- a/tests/src/Unit/Service/ForcePasswordChangeServiceTest.php
+++ b/tests/src/Unit/Service/ForcePasswordChangeServiceTest.php
@@ -51,16 +51,12 @@ class ForcePasswordChangeServiceTest extends UnitTestCase {
     $this->container = new ContainerBuilder();
     \Drupal::setContainer($this->container);
 
-    $this->mapper = $this->getMockBuilder('\Drupal\force_password_change\Mapper\ForcePasswordChangeMapperInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->mapper = $this->createMock('\Drupal\force_password_change\Mapper\ForcePasswordChangeMapperInterface');
     $this->mapper->expects($this->any())
       ->method('getUserCreatedTime')
       ->willReturn(1000000);
 
-    $this->currentUser = $this->getMockBuilder('\Drupal\Core\Session\AccountProxyInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->currentUser = $this->createMock('\Drupal\Core\Session\AccountProxyInterface');
     $this->currentUser->expects($this->any())
       ->method('id')
       ->willReturn(1);
@@ -68,17 +64,11 @@ class ForcePasswordChangeServiceTest extends UnitTestCase {
       ->method('getRoles')
       ->willReturn(['authenticated']);
 
-    $this->configFactory = $this->getMockBuilder('\Drupal\Core\Config\ConfigFactoryInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->configFactory = $this->createMock('\Drupal\Core\Config\ConfigFactoryInterface');
 
-    $this->userData = $this->getMockBuilder('\Drupal\user\UserDataInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->userData = $this->createMock('\Drupal\user\UserDataInterface');
 
-    $this->time = $this->getMockBuilder('\Drupal\Component\Datetime\TimeInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->time = $this->createMock('\Drupal\Component\Datetime\TimeInterface');
     $this->time->expects($this->any())
       ->method('getRequestTime')
       ->willReturn(1000101);
