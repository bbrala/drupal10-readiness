modules/contrib/redirect/modules/redirect_404/redirect_404.install
modules/contrib/redirect/modules/redirect_404/redirect_404.module
modules/contrib/redirect/modules/redirect_404/redirect_404.views.inc
modules/contrib/redirect/modules/redirect_404/src/Controller/Fix404IgnoreController.php
modules/contrib/redirect/modules/redirect_404/src/EventSubscriber/Redirect404Subscriber.php
modules/contrib/redirect/modules/redirect_404/src/Form/RedirectFix404Form.php
modules/contrib/redirect/modules/redirect_404/src/Plugin/views/field/Language.php
modules/contrib/redirect/modules/redirect_404/src/Plugin/views/field/Redirect404Operations.php
modules/contrib/redirect/modules/redirect_404/src/RedirectNotFoundStorageInterface.php
modules/contrib/redirect/modules/redirect_404/src/Render/Redirect404LogSuppressor.php
modules/contrib/redirect/modules/redirect_404/src/SqlRedirectNotFoundStorage.php
modules/contrib/redirect/modules/redirect_404/tests/src/Functional/Fix404RedirectUILanguageTest.php
modules/contrib/redirect/modules/redirect_404/tests/src/Functional/Fix404RedirectUITest.php
modules/contrib/redirect/modules/redirect_404/tests/src/Functional/Redirect404LogSuppressorTest.php
modules/contrib/redirect/modules/redirect_404/tests/src/Functional/Redirect404TestBase.php
modules/contrib/redirect/modules/redirect_404/tests/src/Kernel/Fix404RedirectCronJobTest.php
modules/contrib/redirect/modules/redirect_404/tests/src/Unit/SqlRedirectNotFoundStorageTest.php
modules/contrib/redirect/modules/redirect_domain/redirect_domain.module
modules/contrib/redirect/modules/redirect_domain/src/EventSubscriber/DomainRedirectRequestSubscriber.php
modules/contrib/redirect/modules/redirect_domain/src/Form/RedirectDomainForm.php
modules/contrib/redirect/modules/redirect_domain/tests/src/FunctionalJavascript/RedirectDomainUITest.php
modules/contrib/redirect/modules/redirect_domain/tests/src/Unit/DomainRedirectRequestSubscriberTest.php
modules/contrib/redirect/redirect.api.php
modules/contrib/redirect/redirect.drush.inc
modules/contrib/redirect/redirect.generate.inc
modules/contrib/redirect/redirect.install
modules/contrib/redirect/redirect.module
modules/contrib/redirect/src/Entity/Redirect.php
modules/contrib/redirect/src/EventSubscriber/RedirectRequestSubscriber.php
modules/contrib/redirect/src/EventSubscriber/RedirectSettingsCacheTag.php
modules/contrib/redirect/src/EventSubscriber/RouteNormalizerRequestSubscriber.php
modules/contrib/redirect/src/Exception/RedirectLoopException.php
modules/contrib/redirect/src/Form/RedirectDeleteForm.php
modules/contrib/redirect/src/Form/RedirectDeleteMultipleForm.php
modules/contrib/redirect/src/Form/RedirectForm.php
modules/contrib/redirect/src/Form/RedirectSettingsForm.php
modules/contrib/redirect/src/Plugin/Action/DeleteRedirect.php
modules/contrib/redirect/src/Plugin/Field/FieldFormatter/RedirectSourceFormatter.php
modules/contrib/redirect/src/Plugin/Field/FieldType/RedirectSourceItem.php
modules/contrib/redirect/src/Plugin/Field/FieldWidget/RedirectSourceWidget.php
modules/contrib/redirect/src/Plugin/Validation/Constraint/SourceLinkTypeConstraint.php
modules/contrib/redirect/src/Plugin/migrate/process/PathRedirect.php
modules/contrib/redirect/src/Plugin/migrate/process/d7/PathRedirect.php
modules/contrib/redirect/src/Plugin/migrate/process/d7/RedirectSourceQuery.php
modules/contrib/redirect/src/Plugin/migrate/source/PathRedirect.php
modules/contrib/redirect/src/Plugin/migrate/source/d7/PathRedirect.php
modules/contrib/redirect/src/RedirectChecker.php
modules/contrib/redirect/src/RedirectRepository.php
modules/contrib/redirect/src/RedirectStorageSchema.php
modules/contrib/redirect/src/RedirectViewsData.php
modules/contrib/redirect/src/Routing/RouteSubscriber.php
modules/contrib/redirect/tests/fixtures/drupal6.php
modules/contrib/redirect/tests/fixtures/drupal7-no-default.php
modules/contrib/redirect/tests/fixtures/drupal7.php
modules/contrib/redirect/tests/modules/redirect_test/redirect_test.module
modules/contrib/redirect/tests/src/Functional/AssertRedirectTrait.php
modules/contrib/redirect/tests/src/Functional/GlobalRedirectTest.php
modules/contrib/redirect/tests/src/Functional/RedirectHooksTest.php
modules/contrib/redirect/tests/src/Functional/RedirectNodeFormTest.php
modules/contrib/redirect/tests/src/Functional/RedirectUILanguageTest.php
modules/contrib/redirect/tests/src/Functional/RedirectUITest.php
modules/contrib/redirect/tests/src/FunctionalJavascript/RedirectJavascriptTest.php
modules/contrib/redirect/tests/src/Kernel/Migrate/d6/PathRedirectTest.php
modules/contrib/redirect/tests/src/Kernel/Migrate/d7/PathRedirectSourceTest.php
modules/contrib/redirect/tests/src/Kernel/Migrate/d7/PathRedirectTest.php
modules/contrib/redirect/tests/src/Kernel/Migrate/d7/PathRedirectTestBase.php
modules/contrib/redirect/tests/src/Kernel/Migrate/d7/PathRedirectWithoutDefaultTest.php
modules/contrib/redirect/tests/src/Kernel/RedirectAPITest.php
modules/contrib/redirect/tests/src/Unit/RedirectCheckerTest.php
modules/contrib/redirect/tests/src/Unit/RedirectRequestSubscriberTest.php
modules/contrib/redirect/tests/src/Unit/RouteNormalizerRequestSubscriberTest.php

8 files with changes
====================

1) modules/contrib/redirect/tests/src/Unit/RouteNormalizerRequestSubscriberTest.php:139

    ---------- begin diff ----------
@@ @@
    * @return \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected function getUrlGeneratorStub($request_uri, $call_expected = TRUE) {
-    $url_generator = $this->getMockBuilder('\Drupal\Core\Routing\UrlGeneratorInterface')
-      ->getMock();
+    $url_generator = $this->createMock('\Drupal\Core\Routing\UrlGeneratorInterface');

     $options = ['absolute' => TRUE];

@@ @@
    * @return \Drupal\Core\Path\PathMatcherInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected function getPathMatcherStub($call_expected = TRUE) {
-    $path_matcher = $this->getMockBuilder('\Drupal\Core\Path\PathMatcherInterface')
-      ->getMock();
+    $path_matcher = $this->createMock('\Drupal\Core\Path\PathMatcherInterface');

     $expectation = $call_expected ? $this->once() : $this->never();

@@ @@
    * @return \Drupal\redirect\RedirectChecker|\PHPUnit\Framework\MockObject\MockObject
    */
   protected function getRedirectCheckerStub($call_expected = TRUE) {
-    $redirect_checker = $this->getMockBuilder('\Drupal\redirect\RedirectChecker')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $redirect_checker = $this->createMock('\Drupal\redirect\RedirectChecker');

     $expectation = $call_expected ? $this->once() : $this->never();

@@ @@
       $request->attributes->add(['_disable_route_normalizer' => TRUE]);
     }

-    $http_kernel = $this->getMockBuilder('\Symfony\Component\HttpKernel\HttpKernelInterface')
-      ->getMock();
+    $http_kernel = $this->createMock('\Symfony\Component\HttpKernel\HttpKernelInterface');
     return new RequestEvent($http_kernel, $request, $request_type);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/redirect/tests/src/Unit/RedirectRequestSubscriberTest.php:34

    ---------- begin diff ----------
@@ @@
     // by the redirect entity and values from the accessed url.
     $final_query = $redirect_query + $request_query;

-    $url = $this->getMockBuilder('Drupal\Core\Url')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock('Drupal\Core\Url');

     $url->expects($this->once())
       ->method('setAbsolute')
@@ @@
    */
   public function testRedirectLogicWithoutQueryRetaining($request_uri, $request_query, $redirect_uri) {

-    $url = $this->getMockBuilder('Drupal\Core\Url')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock('Drupal\Core\Url');

     $url->expects($this->once())
       ->method('setAbsolute')
@@ @@
     $event = $this->getGetResponseEventStub($request_uri, http_build_query($request_query));
     $request = $event->getRequest();

-    $checker = $this->getMockBuilder('Drupal\redirect\RedirectChecker')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $checker = $this->createMock('Drupal\redirect\RedirectChecker');
     $checker->expects($this->any())
       ->method('canRedirect')
       ->will($this->returnValue(TRUE));
@@ @@

     $context = $this->createMock('Symfony\Component\Routing\RequestContext');

-    $inbound_path_processor = $this->getMockBuilder('Drupal\Core\PathProcessor\InboundPathProcessorInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $inbound_path_processor = $this->createMock('Drupal\Core\PathProcessor\InboundPathProcessorInterface');
     $inbound_path_processor->expects($this->any())
       ->method('processInbound')
       ->with($request->getPathInfo(), $request)
@@ @@
    * @param $redirect
    *   The redirect object to be returned.
    *
-   * @return PHPUnit_Framework_MockObject_MockObject
+   * @return \PHPUnit\Framework\MockObject\MockObject
    *   The redirect repository.
    */
   protected function getRedirectRepositoryStub($method, $redirect) {
-    $repository = $this->getMockBuilder('Drupal\redirect\RedirectRepository')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $repository = $this->createMock('Drupal\redirect\RedirectRepository');

     if ($method === 'findMatchingRedirect') {
       $repository->expects($this->any())
@@ @@
    * @param int $status_code
    *   The redirect status code.
    *
-   * @return PHPUnit_Framework_MockObject_MockObject
+   * @return \PHPUnit\Framework\MockObject\MockObject
    *   The mocked redirect object.
    */
   protected function getRedirectStub($url, $status_code = 301) {
-    $redirect = $this->getMockBuilder('Drupal\redirect\Entity\Redirect')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $redirect = $this->createMock('Drupal\redirect\Entity\Redirect');
     $redirect->expects($this->once())
       ->method('getRedirectUrl')
       ->will($this->returnValue($url));
@@ @@
    *   The post response event object.
    */
   protected function getPostResponseEvent($headers = []) {
-    $http_kernel = $this->getMockBuilder('\Symfony\Component\HttpKernel\HttpKernelInterface')
-      ->getMock();
-    $request = $this->getMockBuilder('Symfony\Component\HttpFoundation\Request')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_kernel = $this->createMock('\Symfony\Component\HttpKernel\HttpKernelInterface');
+    $request = $this->createMock('Symfony\Component\HttpFoundation\Request');

     $response = new Response('', 301, $headers);

@@ @@
   protected function getGetResponseEventStub($path_info, $query_string) {
     $request = Request::create($path_info . '?' . $query_string, 'GET', [], [], [], ['SCRIPT_NAME' => 'index.php']);

-    $http_kernel = $this->getMockBuilder('\Symfony\Component\HttpKernel\HttpKernelInterface')
-      ->getMock();
+    $http_kernel = $this->createMock('\Symfony\Component\HttpKernel\HttpKernelInterface');
     return new RequestEvent($http_kernel, $request, HttpKernelInterface::MASTER_REQUEST);
   }

@@ @@
   /**
    * Gets the language manager mock object.
    *
-   * @return \Drupal\language\ConfigurableLanguageManagerInterface|PHPUnit_Framework_MockObject_MockObject
+   * @return \Drupal\language\ConfigurableLanguageManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected function getLanguageManagerStub() {
-    $language_manager = $this->getMockBuilder('Drupal\language\ConfigurableLanguageManagerInterface')
-      ->getMock();
+    $language_manager = $this->createMock('Drupal\language\ConfigurableLanguageManagerInterface');
     $language_manager->expects($this->any())
       ->method('getCurrentLanguage')
       ->will($this->returnValue(new Language(['id' => 'en'])));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/redirect/tests/src/Unit/RedirectCheckerTest.php:22

    ---------- begin diff ----------
@@ @@

     $config = ['redirect.settings' => ['ignore_admin_path' => FALSE, 'access_check' => TRUE]];

-    $state = $this->getMockBuilder('Drupal\Core\State\StateInterface')
-      ->getMock();
+    $state = $this->createMock('Drupal\Core\State\StateInterface');
     $state->expects($this->any())
       ->method('get')
       ->with('system.maintenance_mode')
       ->will($this->returnValue(FALSE));
-    $access = $this->getMockBuilder('Drupal\Core\Access\AccessManager')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $account = $this->getMockBuilder('Drupal\Core\Session\AccountInterface')
-      ->getMock();
-    $route_provider = $this->getMockBuilder('Drupal\Core\Routing\RouteProviderInterface')
-      ->getMock();
+    $access = $this->createMock('Drupal\Core\Access\AccessManager');
+    $account = $this->createMock('Drupal\Core\Session\AccountInterface');
+    $route_provider = $this->createMock('Drupal\Core\Routing\RouteProviderInterface');

     $route = new Route('/example');
     $route_provider->expects($this->any())
@@ @@
     $this->assertFalse($checker->canRedirect($request), 'Cannot redirect');

     // Maintenance mode is on.
-    $state = $this->getMockBuilder('Drupal\Core\State\StateInterface')
-      ->getMock();
+    $state = $this->createMock('Drupal\Core\State\StateInterface');
     $state->expects($this->any())
       ->method('get')
       ->with('system.maintenance_mode')
@@ @@
     $this->assertFalse($checker->canRedirect($request), 'Cannot redirect if maintenance mode is on');

     // Maintenance mode is on, but user has access to view site in maintenance mode.
-    $accountWithMaintenanceModeAccess = $this->getMockBuilder('Drupal\Core\Session\AccountInterface')
-      ->getMock();
+    $accountWithMaintenanceModeAccess = $this->createMock('Drupal\Core\Session\AccountInterface');
     $accountWithMaintenanceModeAccess->expects($this->any())
       ->method('hasPermission')
       ->with('access site in maintenance mode')
@@ @@
     $this->assertTrue($checker->canRedirect($request), 'Redirect should have worked, user has maintenance mode access.');

     // We are at a admin path.
-    $state = $this->getMockBuilder('Drupal\Core\State\StateInterface')
-      ->getMock();
+    $state = $this->createMock('Drupal\Core\State\StateInterface');
     $state->expects($this->any())
       ->method('get')
       ->with('system.maintenance_mode')
@@ @@
    * @param array $query
    *   Query paramter to be passed into request->query.
    *
-   * @return PHPUnit_Framework_MockObject_MockObject
+   * @return \PHPUnit\Framework\MockObject\MockObject
    *   Mocked request object.
    */
   protected function getRequestStub($script_name, $method, array $attributes = [], array $query = []) {
-    $request = $this->getMockBuilder('Symfony\Component\HttpFoundation\Request')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $request = $this->createMock('Symfony\Component\HttpFoundation\Request');
     $request->expects($this->any())
       ->method('getScriptName')
       ->will($this->returnValue($script_name));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/redirect/tests/src/Kernel/RedirectAPITest.php:267

    ---------- begin diff ----------
@@ @@

   /**
    * Test redirect_parse_url().
+   * @doesNotPerformAssertions
    */
   public function testParseURL() {
     //$test_cases = array(
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/redirect/redirect.install:143

    ---------- begin diff ----------
@@ @@

   // Only create if the redirect view doesn't exist and views is enabled.
   if (!View::load('redirect') && \Drupal::moduleHandler()->moduleExists('views')) {
-    $config_path = drupal_get_path('module', 'redirect') . '/config/install/views.view.redirect.yml';
+    $config_path = \Drupal::service('extension.list.module')->getPath('redirect') . '/config/install/views.view.redirect.yml';
     $data = Yaml::parse(file_get_contents($config_path));
     \Drupal::configFactory()->getEditable('views.view.redirect')->setData($data)->save(TRUE);
     $message = 'The new redirect view has been created.';
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


6) modules/contrib/redirect/redirect.generate.inc:51

    ---------- begin diff ----------
@@ @@
   return [
     'operations' => $operations,
     'finished' => 'redirect_generate_batch_finished',
-    'file' => drupal_get_path('module', 'redirect') . '/redirect.generate.inc',
+    'file' => \Drupal::service('extension.list.module')->getPath('redirect') . '/redirect.generate.inc',
   ];
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


7) modules/contrib/redirect/modules/redirect_domain/tests/src/Unit/DomainRedirectRequestSubscriberTest.php:77

    ---------- begin diff ----------
@@ @@
     ];

     // Create a mock redirect checker.
-    $checker = $this->getMockBuilder(RedirectChecker::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $checker = $this->createMock(RedirectChecker::class);
     $checker->expects($this->any())
       ->method('canRedirect')
       ->will($this->returnValue(TRUE));
@@ @@
   protected function getGetResponseEventStub($path_info, $query_string) {
     $request = Request::create($path_info . '?' . $query_string, 'GET', [], [], [], ['SCRIPT_NAME' => 'index.php']);

-    $http_kernel = $this->getMockBuilder(HttpKernelInterface::class)
-      ->getMock();
+    $http_kernel = $this->createMock(HttpKernelInterface::class);
     return new RequestEvent($http_kernel, $request, HttpKernelInterface::MASTER_REQUEST);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/redirect/modules/redirect_404/tests/src/Unit/SqlRedirectNotFoundStorageTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Mock database connection.
    *
-   * @var \Drupal\Core\Database\Connection|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Database\Connection|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $database;

@@ @@
   /**
    * Mock config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $configFactory;

@@ @@
    */
   protected function setUp(): void {
     parent::setUp();
-    $this->database = $this->getMockBuilder(Connection::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->database = $this->createMock(Connection::class);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 8 files have been changed by Rector                                       

