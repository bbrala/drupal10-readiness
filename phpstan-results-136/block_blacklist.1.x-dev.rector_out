modules/contrib/block_blacklist/block_blacklist.module
modules/contrib/block_blacklist/src/Blacklist.php
modules/contrib/block_blacklist/src/Controller/DefaultController.php
modules/contrib/block_blacklist/src/Controller/LayoutController.php
modules/contrib/block_blacklist/src/Form/SettingsForm.php
modules/contrib/block_blacklist/src/LayoutPluginAlter.php
modules/contrib/block_blacklist/src/PluginAlter.php
modules/contrib/block_blacklist/tests/src/Functional/BlockBlacklistTest.php

1 file with changes
===================

1) modules/contrib/block_blacklist/tests/src/Functional/BlockBlacklistTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Perform initial setup tasks that run before every test method.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->user = $this->DrupalCreateUser([
       'administer site configuration',
@@ @@
     ];
     foreach ($pages as $page) {
       $this->drupalGet($page);
-      $this->assertResponse(200);
+      $this->assertSession()->statusCodeEquals(200);
     }
     $this->drupalLogout();
   }
@@ @@

     // Access config page.
     $this->drupalGet('admin/config/block_blacklist/settings');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Test the form elements exist and have default values.
     $config = $this->config('block_blacklist.settings');
     
     foreach ($replace as $field => $opt) {
-      $this->assertFieldByName(
-        $field,
-        $config->get('block_blacklist.settings.' . $field),
-        $field . ' field has the default value'
-      );
+      $this->assertSession()->fieldValueEquals($field, $config->get('block_blacklist.settings.' . $field));
     }
     // Test form submission.
     $edit = [];
@@ @@
     foreach ($replace as $field => $opt) {
       $edit[$field] = $opt['rule'];
     }
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
-    $this->assertText(
-      'The configuration options have been saved.',
-      'The form was saved correctly.'
-    );
+    $this->submitForm($edit, t('Save configuration'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
     // Test the new values are there.
     $this->drupalGet('admin/config/block_blacklist/settings');
     $this->assertSession()->statusCodeEquals(200);
@@ @@
           case $type . '_match':
           case $type . '_prefix':
           case $type . '_regex':
-            $this->assertNoText($opt['hides'], $opt['label'] . ' block was not displayed .');
+            // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+            // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+            // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+            $this->assertSession()->pageTextNotContains($opt['hides']);
             break;

         }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertNoTextRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 1 file has been changed by Rector                                         

