diff --git a/field_collection.info.yml b/field_collection.info.yml
index 851df33..023cb25 100755
--- a/field_collection.info.yml
+++ b/field_collection.info.yml
@@ -1,8 +1,7 @@
 name: Field Collection
 description: 'Provides a field collection field, to which any number of fields can be attached.'
 package: Field types
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
 configure: field_collection.overview_field_collections
 type: module
 dependencies:
diff --git a/tests/src/Functional/FieldCollectionBasicTestCase.php b/tests/src/Functional/FieldCollectionBasicTestCase.php
index 84940f1..ed276e2 100644
--- a/tests/src/Functional/FieldCollectionBasicTestCase.php
+++ b/tests/src/Functional/FieldCollectionBasicTestCase.php
@@ -32,7 +32,7 @@ class FieldCollectionBasicTestCase extends BrowserTestBase {
   /**
    * Sets up the data structures for the tests.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->setUpFieldCollectionTest();
   }
@@ -45,9 +45,9 @@ class FieldCollectionBasicTestCase extends BrowserTestBase {
     /** @var \Drupal\field_collection\FieldCollectionItemInterface $field_collection_item */
     list ($node, $field_collection_item) = $this->createNodeWithFieldCollection('article');
 
-    $this->assertEqual($field_collection_item->id(), $node->{$this->field_collection_name}->target_id, 'A field_collection_item has been successfully created and referenced.');
+    $this->assertEquals($field_collection_item->id(), $node->{$this->field_collection_name}->target_id, 'A field_collection_item has been successfully created and referenced.');
 
-    $this->assertEqual($field_collection_item->revision_id->value, $node->{$this->field_collection_name}->revision_id, 'The new field_collection_item has the correct revision.');
+    $this->assertEquals($field_collection_item->revision_id->value, $node->{$this->field_collection_name}->revision_id, 'The new field_collection_item has the correct revision.');
 
     // Test adding an additional field_collection_item.
     $field_collection_item_2 = FieldCollectionItem::create(['field_name' => $this->field_collection_name]);
@@ -64,15 +64,15 @@ class FieldCollectionBasicTestCase extends BrowserTestBase {
 
     $this->assertTrue(!empty($field_collection_item_2->getRevisionId()), 'Second field_collection_item has a revision.');
 
-    $this->assertEqual(count(FieldCollectionItem::loadMultiple()), 2, 'Field_collection_items have been stored.');
+    $this->assertEquals(count(FieldCollectionItem::loadMultiple()), 2, 'Field_collection_items have been stored.');
 
-    $this->assertEqual($field_collection_item->id(), $node->{$this->field_collection_name}->target_id, 'Existing reference has been kept during update.');
+    $this->assertEquals($field_collection_item->id(), $node->{$this->field_collection_name}->target_id, 'Existing reference has been kept during update.');
 
-    $this->assertEqual($field_collection_item->getRevisionId(), $node->{$this->field_collection_name}[0]->revision_id, 'Revision: Existing reference has been kept during update.');
+    $this->assertEquals($field_collection_item->getRevisionId(), $node->{$this->field_collection_name}[0]->revision_id, 'Revision: Existing reference has been kept during update.');
 
-    $this->assertEqual($field_collection_item_2->id(), $node->{$this->field_collection_name}[1]->target_id, 'New field_collection_item has been properly referenced.');
+    $this->assertEquals($field_collection_item_2->id(), $node->{$this->field_collection_name}[1]->target_id, 'New field_collection_item has been properly referenced.');
 
-    $this->assertEqual($field_collection_item_2->getRevisionId(), $node->{$this->field_collection_name}[1]->revision_id, 'Revision: New field_collection_item has been properly referenced.');
+    $this->assertEquals($field_collection_item_2->getRevisionId(), $node->{$this->field_collection_name}[1]->revision_id, 'Revision: New field_collection_item has been properly referenced.');
 
     // Make sure deleting the field collection item removes the reference.
     $field_collection_item_2->delete();
@@ -84,7 +84,7 @@ class FieldCollectionBasicTestCase extends BrowserTestBase {
     // Make sure field_collections are removed during deletion of the host.
     $node->delete();
 
-    $this->assertIdentical(FieldCollectionItem::loadMultiple(), [], 'field_collection_item deleted when the host is deleted.');
+    $this->assertSame(FieldCollectionItem::loadMultiple(), [], 'field_collection_item deleted when the host is deleted.');
 
     // Try deleting nodes with collections without any values.
     $node = $this->drupalCreateNode(['type' => 'article']);
@@ -224,7 +224,10 @@ class FieldCollectionBasicTestCase extends BrowserTestBase {
     $path = "field_collection_item/add/field_test_collection/node/{$node->id()}";
 
     $this->drupalGet($path);
-    $this->assertText(t('Access denied'), 'Access has been denied.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Access denied'));
 
     // Login with new user that has basic edit rights.
     $user_privileged = $this->drupalCreateUser([
@@ -237,31 +240,50 @@ class FieldCollectionBasicTestCase extends BrowserTestBase {
     // Test field collection item add form.
     $this->drupalGet('admin/structure/types/manage/article/display');
     $this->drupalGet("node/{$node->id()}");
-    $this->assertLinkByHref($path, 0, 'Add link is shown.');
+    $this->assertSession()->linkByHrefExists($path, 0, 'Add link is shown.');
     $this->drupalGet($path);
 
-    $this->assertText(t($this->inner_field_definition['label']), 'Add form is shown.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t($this->inner_field_definition['label']));
 
     $edit = ["$this->inner_field_name[0][value]" => rand()];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
 
-    $this->assertText(t('Successfully added a @field.', ['@field' => $this->field_collection_name]), 'Field collection saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Successfully added a @field.', ['@field' => $this->field_collection_name]));
 
-    $this->assertText($edit["$this->inner_field_name[0][value]"], 'Added field value is shown.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($edit["$this->inner_field_name[0][value]"]);
 
     $field_collection_item = FieldCollectionItem::load(1);
 
     // Test field collection item edit form.
     $edit["$this->inner_field_name[0][value]"] = rand();
-    $this->drupalPostForm('field_collection_item/1/edit', $edit, t('Save'));
+    $this->drupalGet('field_collection_item/1/edit');
+    $this->submitForm($edit, t('Save'));
 
-    $this->assertText(t('Successfully edited @field.', ['@field' => $field_collection_item->label()]), 'Field collection saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Successfully edited @field.', ['@field' => $field_collection_item->label()]));
 
-    $this->assertText($edit["$this->inner_field_name[0][value]"], 'Field collection has been edited.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($edit["$this->inner_field_name[0][value]"]);
 
     $this->drupalGet('field_collection_item/1');
 
-    $this->assertText($edit["$this->inner_field_name[0][value]"], 'Field collection can be viewed.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($edit["$this->inner_field_name[0][value]"]);
   }
 
 }
diff --git a/tests/src/Kernel/DuplicateFieldCollectionTest.php b/tests/src/Kernel/DuplicateFieldCollectionTest.php
index 6a2fda8..28bbf3b 100644
--- a/tests/src/Kernel/DuplicateFieldCollectionTest.php
+++ b/tests/src/Kernel/DuplicateFieldCollectionTest.php
@@ -21,7 +21,7 @@ class DuplicateFieldCollectionTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['field_collection']);
   }
