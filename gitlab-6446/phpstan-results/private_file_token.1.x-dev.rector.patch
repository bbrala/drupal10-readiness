diff --git a/private_file_token.info.yml b/private_file_token.info.yml
index 1472368..770e6e4 100644
--- a/private_file_token.info.yml
+++ b/private_file_token.info.yml
@@ -2,4 +2,4 @@ name: Private file token
 description: Allow to access private files by an authentication token in the URL.
 package: auth
 type: module
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
diff --git a/private_file_token.module b/private_file_token.module
index ed6860c..985a4ea 100644
--- a/private_file_token.module
+++ b/private_file_token.module
@@ -28,7 +28,7 @@ function private_file_token_file_url_alter(string &$uri): void {
     $private_wrapper = $stream_wrapper_manager->getViaUri($uri);
     $uri = $private_wrapper->getExternalUrl();
 
-    $uri_without_scheme = file_url_transform_relative($uri);
+    $uri_without_scheme = \Drupal::service('file_url_generator')->transformRelative($uri);
     $timestamp = \Drupal::time()->getRequestTime();
 
     /** @var \Drupal\private_file_token\Access\PrivateFileTokenGenerator $private_file_token */
diff --git a/tests/src/Functional/PrivateFileTokenTest.php b/tests/src/Functional/PrivateFileTokenTest.php
index 599ce21..9db3e9b 100644
--- a/tests/src/Functional/PrivateFileTokenTest.php
+++ b/tests/src/Functional/PrivateFileTokenTest.php
@@ -66,7 +66,7 @@ class PrivateFileTokenTest extends BrowserTestBase {
   public function testPrivateImageAccess(): void {
     // Copy source test image into private files directory.
     $image_filename = 'private-file-token-test-image.png';
-    $source_image_path = drupal_get_path('module', 'private_file_token') . '/tests/image/test-image.png';
+    $source_image_path = \Drupal::service('extension.list.module')->getPath('private_file_token') . '/tests/image/test-image.png';
     $this->fileSystem->copy($source_image_path, 'private://' . $image_filename, FileSystemInterface::EXISTS_REPLACE);
     // Create a test image file entity.
     $values = [
@@ -100,7 +100,7 @@ class PrivateFileTokenTest extends BrowserTestBase {
       ->set('expiration_time', 0)
       ->save();
     $content = $this->drupalGet($image_style_url);
-    $this->assertContains('Access denied', $content);
+    $this->assertStringContainsString('Access denied', $content);
   }
 
 }
diff --git a/tests/src/Functional/PrivateFileTokenTestHelperTrait.php b/tests/src/Functional/PrivateFileTokenTestHelperTrait.php
index 169b1b1..5c2109c 100644
--- a/tests/src/Functional/PrivateFileTokenTestHelperTrait.php
+++ b/tests/src/Functional/PrivateFileTokenTestHelperTrait.php
@@ -21,7 +21,7 @@ trait PrivateFileTokenTestHelperTrait {
     // Checks that generated url has expected path and contains expected query
     // string arguments.
     $image_style_url_parts = UrlHelper::parse($image_style_url);
-    $path_part = file_url_transform_relative($image_style_url_parts['path']);
+    $path_part = \Drupal::service('file_url_generator')->transformRelative($image_style_url_parts['path']);
 
     $this->assertEquals($expected_image_style_uri, $path_part);
     $this->assertTrue(!empty($image_style_url_parts['query']['token']) && !empty($image_style_url_parts['query']['token']));
