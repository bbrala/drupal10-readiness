diff --git a/src/Controller/TetherStatsOverviewController.php b/src/Controller/TetherStatsOverviewController.php
index a1da925..fe4720c 100644
--- a/src/Controller/TetherStatsOverviewController.php
+++ b/src/Controller/TetherStatsOverviewController.php
@@ -62,7 +62,7 @@ class TetherStatsOverviewController implements ContainerInjectionInterface {
       ];
 
       $finish_date = new \DateTime();
-      $finish_date->setTimestamp(REQUEST_TIME);
+      $finish_date->setTimestamp(\Drupal::time()->getRequestTime());
 
       // Borrow a stepped chart method to normalize the current time to
       // the start of the current day.
@@ -227,7 +227,7 @@ class TetherStatsOverviewController implements ContainerInjectionInterface {
           }
 
           $finish_date = new \DateTime();
-          $finish_date->setTimestamp(REQUEST_TIME);
+          $finish_date->setTimestamp(\Drupal::time()->getRequestTime());
 
           // Borrow a stepped chart method to normalize the current time to
           // the start of the current day.
diff --git a/src/Controller/TetherStatsTrackController.php b/src/Controller/TetherStatsTrackController.php
index 2493449..9056bf3 100644
--- a/src/Controller/TetherStatsTrackController.php
+++ b/src/Controller/TetherStatsTrackController.php
@@ -115,7 +115,7 @@ class TetherStatsTrackController implements ContainerInjectionInterface {
    * @return \Symfony\Component\HttpFoundation\JsonResponse
    *   The JSON response
    */
-  public function track($event_time = REQUEST_TIME) {
+  public function track($event_time = \Drupal::time()->getRequestTime()) {
 
     $response_json = [];
 
diff --git a/src/Event/TetherStatsRequestToElementEvent.php b/src/Event/TetherStatsRequestToElementEvent.php
index 761c99c..fb656e5 100644
--- a/src/Event/TetherStatsRequestToElementEvent.php
+++ b/src/Event/TetherStatsRequestToElementEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\tether_stats\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\tether_stats\TetherStatsIdentitySetInterface;
 
diff --git a/src/EventSubscriber/TetherStatsRequestSubscriber.php b/src/EventSubscriber/TetherStatsRequestSubscriber.php
index d81ac44..31b095b 100644
--- a/src/EventSubscriber/TetherStatsRequestSubscriber.php
+++ b/src/EventSubscriber/TetherStatsRequestSubscriber.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\tether_stats\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\tether_stats\TetherStatsRequestFilterInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Drupal\Core\Routing\CurrentRouteMatch;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Config\ImmutableConfig;
@@ -107,10 +107,10 @@ class TetherStatsRequestSubscriber implements EventSubscriberInterface {
    *
    * No response will be added to the GetResponseEvent.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The get response event.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
 
     $config = $this->manager->getSettings();
     $request_uri = $event->getRequest()->getRequestUri();
@@ -127,7 +127,7 @@ class TetherStatsRequestSubscriber implements EventSubscriberInterface {
         // set for the current request.
         $element_event = new TetherStatsRequestToElementEvent($this->routeMatch, $request_uri);
 
-        $this->dispatcher->dispatch(TetherStatsEvents::REQUEST_TO_ELEMENT, $element_event);
+        $this->dispatcher->dispatch($element_event, TetherStatsEvents::REQUEST_TO_ELEMENT);
 
         if ($element_event->hasIdentityset()) {
 
diff --git a/src/Form/TetherStatsSettingsForm.php b/src/Form/TetherStatsSettingsForm.php
index f93959a..1323d2d 100644
--- a/src/Form/TetherStatsSettingsForm.php
+++ b/src/Form/TetherStatsSettingsForm.php
@@ -263,7 +263,7 @@ class TetherStatsSettingsForm extends ConfigFormBase {
     // provide a lower boundary when iterating chart data.
     if ($form_state->getValue('active') && $config->get('advanced.first_activation_time') == 0 && $form_state->getValue('first_activation_time') == 0) {
 
-      $form_state->setValue('first_activation_time', REQUEST_TIME);
+      $form_state->setValue('first_activation_time', \Drupal::time()->getRequestTime());
     }
 
     if ($form_state->getValue('use_alternate_database')) {
diff --git a/src/Plugin/tether_stats/Chart/TetherStatsChartRendererGoogle.php b/src/Plugin/tether_stats/Chart/TetherStatsChartRendererGoogle.php
index d4f692e..02e87a9 100644
--- a/src/Plugin/tether_stats/Chart/TetherStatsChartRendererGoogle.php
+++ b/src/Plugin/tether_stats/Chart/TetherStatsChartRendererGoogle.php
@@ -88,7 +88,7 @@ class TetherStatsChartRendererGoogle extends PluginBase implements TetherStatsCh
       $start = $chart->getDateStart();
       $next = $schema->nextDateTime($start);
       $current_time = new \DateTime();
-      $current_time->setTimestamp(REQUEST_TIME);
+      $current_time->setTimestamp(\Drupal::time()->getRequestTime());
 
       $iterate = [
         'start' => $start,
diff --git a/src/Tests/TetherStatsAnalyticsStorageTest.php b/src/Tests/TetherStatsAnalyticsStorageTest.php
index bc53834..f09d4b8 100644
--- a/src/Tests/TetherStatsAnalyticsStorageTest.php
+++ b/src/Tests/TetherStatsAnalyticsStorageTest.php
@@ -64,7 +64,7 @@ class TetherStatsAnalyticsStorageTest extends TetherStatsTestBase {
     // Extract the top elements within the active range  and test if
     // they line up with what they should be.
     $extracted_top_elements = $this->getAnalyticsStorage()->getTopElementsForActivity(TetherStatsAnalytics::ACTIVITY_HIT, $start, $finish, count($top_element_elids));
-    $this->assertEqual($top_element_elids, $extracted_top_elements, 'Top Elements For Hit Activity Retrieved Successfully.');
+    $this->assertEquals($top_element_elids, $extracted_top_elements, 'Top Elements For Hit Activity Retrieved Successfully.');
   }
 
   /**
@@ -104,17 +104,17 @@ class TetherStatsAnalyticsStorageTest extends TetherStatsTestBase {
 
     // Test element mining method.
     $count = $this->getAnalyticsStorage()->getElementActivityCount($element->getId(), TetherStatsAnalytics::ACTIVITY_HIT, $start, $finish);
-    $this->assertEqual($element_count, $count, 'getElementActivityCount Retrieved Correct Counts.');
+    $this->assertEquals($element_count, $count, 'getElementActivityCount Retrieved Correct Counts.');
 
     // Test all mining method.
     $all_count = $this->getAnalyticsStorage()->getAllActivityCount(TetherStatsAnalytics::ACTIVITY_HIT, $start, $finish);
-    $this->assertEqual($element_count + $other_count, $all_count, 'getAllActivityCount Retrieved Correct Counts.');
+    $this->assertEquals($element_count + $other_count, $all_count, 'getAllActivityCount Retrieved Correct Counts.');
 
     // Test the chronologically sequenced variant.
     $counts = $this->getAnalyticsStorage()->getAllActivityCount(TetherStatsAnalytics::ACTIVITY_HIT, $start, $finish, TetherStatsAnalytics::STEP_HOUR);
     $total_count = array_sum($counts);
 
-    $this->assertEqual($total_count, $all_count, 'getAllActivityCount Produced the Right Sum of Sequenced Results.');
+    $this->assertEquals($total_count, $all_count, 'getAllActivityCount Produced the Right Sum of Sequenced Results.');
   }
 
   /**
@@ -157,7 +157,7 @@ class TetherStatsAnalyticsStorageTest extends TetherStatsTestBase {
     foreach ($referrer_samples as $inx => $referrer) {
 
       $total_count = $this->getAnalyticsStorage()->getHitActivityWithReferrerCount($referrer_searches[$inx], $start, $finish);
-      $this->assertEqual($referrer_counts[$inx], $total_count, "getHitActivityWithReferrerCount Retrieved Correct Counts for {$referrer_searches[$inx]} search.");
+      $this->assertEquals($referrer_counts[$inx], $total_count, "getHitActivityWithReferrerCount Retrieved Correct Counts for {$referrer_searches[$inx]} search.");
     }
 
     // Generate element specific activity.
@@ -177,7 +177,7 @@ class TetherStatsAnalyticsStorageTest extends TetherStatsTestBase {
     foreach ($referrer_samples as $inx => $referrer) {
 
       $total_count = $this->getAnalyticsStorage()->getElementHitActivityWithReferrerCount($elid, $referrer_searches[$inx], $start, $finish);
-      $this->assertEqual($referrer_counts[$inx], $total_count, "getElementHitActivityWithReferrerCount Retrieved Correct Counts for {$referrer_searches[$inx]} search.");
+      $this->assertEquals($referrer_counts[$inx], $total_count, "getElementHitActivityWithReferrerCount Retrieved Correct Counts for {$referrer_searches[$inx]} search.");
     }
   }
 
@@ -221,7 +221,7 @@ class TetherStatsAnalyticsStorageTest extends TetherStatsTestBase {
     foreach ($browser_searches as $inx => $search) {
 
       $total_count = $this->getAnalyticsStorage()->getHitActivityWithBrowserCount($search, $start, $finish);
-      $this->assertEqual($browser_counts[$inx], $total_count, "getHitActivityWithBrowserCount Retrieved Correct Counts for {$search} search.");
+      $this->assertEquals($browser_counts[$inx], $total_count, "getHitActivityWithBrowserCount Retrieved Correct Counts for {$search} search.");
     }
 
     // Generate element specific activity.
@@ -241,7 +241,7 @@ class TetherStatsAnalyticsStorageTest extends TetherStatsTestBase {
     foreach ($browser_searches as $inx => $search) {
 
       $total_count = $this->getAnalyticsStorage()->getElementHitActivityWithBrowserCount($elid, $search, $start, $finish);
-      $this->assertEqual($browser_counts[$inx], $total_count, "getElementHitActivityWithBrowserCount Retrieved Correct Counts for {$search} search.");
+      $this->assertEquals($browser_counts[$inx], $total_count, "getElementHitActivityWithBrowserCount Retrieved Correct Counts for {$search} search.");
     }
   }
 
@@ -299,7 +299,7 @@ class TetherStatsAnalyticsStorageTest extends TetherStatsTestBase {
 
     // See if the database count matches.
     $count = $this->getAnalyticsStorage()->getElementImpressedOnElementCount($impressed_element->getId(), $source_element->getId(), $start, $finish);
-    $this->assertEqual($count, $impression_count, 'Method getElementImpressedOnElementCount produced correct count.');
+    $this->assertEquals($count, $impression_count, 'Method getElementImpressedOnElementCount produced correct count.');
 
     $total_element_impressions += $impression_count;
 
@@ -324,7 +324,7 @@ class TetherStatsAnalyticsStorageTest extends TetherStatsTestBase {
 
     // See if the database count matches.
     $count = $this->getAnalyticsStorage()->getAllElementsImpressedOnElementCount($source_element->getId(), $start, $finish);
-    $this->assertEqual($count, $impression_count + $second_impression_count, 'Method getAllElementsImpressedOnElementCount produced correct count.');
+    $this->assertEquals($count, $impression_count + $second_impression_count, 'Method getAllElementsImpressedOnElementCount produced correct count.');
 
     // Test the getElementImpressedOnNodeBundleCount method.
     $source_element = NULL;
@@ -380,7 +380,7 @@ class TetherStatsAnalyticsStorageTest extends TetherStatsTestBase {
 
     // See if the database count matches.
     $count = $this->getAnalyticsStorage()->getElementImpressedOnNodeBundleCount($impressed_element->getId(), $bundle, $start, $finish);
-    $this->assertEqual($count, $impression_count, 'Method getElementImpressedOnNodeBundleCount produced correct count.');
+    $this->assertEquals($count, $impression_count, 'Method getElementImpressedOnNodeBundleCount produced correct count.');
 
     $total_element_impressions += $impression_count;
 
@@ -420,14 +420,14 @@ class TetherStatsAnalyticsStorageTest extends TetherStatsTestBase {
 
     // See if the database count matches.
     $count = $this->getAnalyticsStorage()->getElementImpressedOnBaseUrlCount($impressed_element->getId(), $base_url, $start, $finish);
-    $this->assertEqual($count, $impression_count, 'Method getElementImpressedOnBaseUrlCount produced correct count.');
+    $this->assertEquals($count, $impression_count, 'Method getElementImpressedOnBaseUrlCount produced correct count.');
 
     $total_element_impressions += $impression_count;
 
     // See if the impressed element total impressed count matches,
     // now that it's been impressed several times above.
     $count = $this->getAnalyticsStorage()->getElementImpressedAnywhereCount($impressed_element->getId(), $start, $finish);
-    $this->assertEqual($count, $total_element_impressions, 'Method getElementImpressedAnywhereCount produced correct count.');
+    $this->assertEquals($count, $total_element_impressions, 'Method getElementImpressedAnywhereCount produced correct count.');
 
   }
 
diff --git a/src/Tests/TetherStatsIdentitySetTest.php b/src/Tests/TetherStatsIdentitySetTest.php
index 01a6bd5..9bc86f8 100644
--- a/src/Tests/TetherStatsIdentitySetTest.php
+++ b/src/Tests/TetherStatsIdentitySetTest.php
@@ -26,7 +26,7 @@ class TetherStatsIdentitySetTest extends TetherStatsTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create test page.
diff --git a/src/Tests/TetherStatsStorageTest.php b/src/Tests/TetherStatsStorageTest.php
index ef02c15..5888a57 100644
--- a/src/Tests/TetherStatsStorageTest.php
+++ b/src/Tests/TetherStatsStorageTest.php
@@ -86,7 +86,7 @@ class TetherStatsStorageTest extends TetherStatsTestBase {
     $set = $this->getRandomIdentitySet();
     $set->set('derivative', 'derivative-simple');
     $element = $this->getStorage()->createElementFromIdentitySet($set);
-    $this->assert(isset($element), 'Successfully created an element with a derivative.');
+    $this->assertTrue(isset($element), 'Successfully created an element with a derivative.');
 
     // Test derivative usage.
     $num_elements = mt_rand(1, 5);
@@ -103,7 +103,7 @@ class TetherStatsStorageTest extends TetherStatsTestBase {
 
     $count = $this->getStorage()->getDerivativeUsageCount('derivative-simple');
 
-    $this->assertEqual($count, $num_elements, "Derivative usage count {$count} was counted correctly.");
+    $this->assertEquals($count, $num_elements, "Derivative usage count {$count} was counted correctly.");
 
   }
 
@@ -142,18 +142,18 @@ class TetherStatsStorageTest extends TetherStatsTestBase {
 
     $this->assertTrue(!empty($activity), 'An activity was recorded successfully.');
 
-    $this->assertEqual($activity->type, TetherStatsAnalytics::ACTIVITY_HIT, 'Type field same in recorded activity.');
-    $this->assertEqual($activity->uid, 1, 'Uid field same in recorded activity.');
-    $this->assertEqual($activity->referrer, 'referrer', 'Referrer field same in recorded activity.');
-    $this->assertEqual($activity->ip_address, '127.0.0.1', 'IP address field same in recorded activity.');
-    $this->assertEqual($activity->sid, $fake_sid, 'Session Id field same in recorded activity.');
-    $this->assertEqual($activity->browser, 'browser A', 'Browser field same in recorded activity.');
-    $this->assertEqual($activity->created, $time->getTimestamp(), 'Created field same in recorded activity.');
-
-    $this->assertEqual($activity->hour, $hour->getTimestamp(), 'Hour field correct in recorded activity.');
-    $this->assertEqual($activity->day, $day->getTimestamp(), 'Day field correct in recorded activity.');
-    $this->assertEqual($activity->month, $month->getTimestamp(), 'Month field correct in recorded activity.');
-    $this->assertEqual($activity->year, $year->getTimestamp(), 'Year field correct in recorded activity.');
+    $this->assertEquals($activity->type, TetherStatsAnalytics::ACTIVITY_HIT, 'Type field same in recorded activity.');
+    $this->assertEquals($activity->uid, 1, 'Uid field same in recorded activity.');
+    $this->assertEquals($activity->referrer, 'referrer', 'Referrer field same in recorded activity.');
+    $this->assertEquals($activity->ip_address, '127.0.0.1', 'IP address field same in recorded activity.');
+    $this->assertEquals($activity->sid, $fake_sid, 'Session Id field same in recorded activity.');
+    $this->assertEquals($activity->browser, 'browser A', 'Browser field same in recorded activity.');
+    $this->assertEquals($activity->created, $time->getTimestamp(), 'Created field same in recorded activity.');
+
+    $this->assertEquals($activity->hour, $hour->getTimestamp(), 'Hour field correct in recorded activity.');
+    $this->assertEquals($activity->day, $day->getTimestamp(), 'Day field correct in recorded activity.');
+    $this->assertEquals($activity->month, $month->getTimestamp(), 'Month field correct in recorded activity.');
+    $this->assertEquals($activity->year, $year->getTimestamp(), 'Year field correct in recorded activity.');
 
     // Track second activity.
     $this->getStorage()->trackActivity($source_element->getId(), TetherStatsAnalytics::ACTIVITY_HIT, $time->getTimestamp(), '127.0.0.1', $fake_sid, 'browser B', 'referrer', 1);
diff --git a/src/Tests/TetherStatsTestBase.php b/src/Tests/TetherStatsTestBase.php
index dd6bcfa..6e1f1b9 100644
--- a/src/Tests/TetherStatsTestBase.php
+++ b/src/Tests/TetherStatsTestBase.php
@@ -33,7 +33,7 @@ abstract class TetherStatsTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $permissions = [
diff --git a/src/TetherStatsStorage.php b/src/TetherStatsStorage.php
index 56868e0..08db048 100644
--- a/src/TetherStatsStorage.php
+++ b/src/TetherStatsStorage.php
@@ -97,8 +97,8 @@ class TetherStatsStorage implements TetherStatsStorageInterface {
       if (empty($element_values)) {
 
         $fields = $identity_set->getIdentityParams();
-        $fields['created'] = REQUEST_TIME;
-        $fields['changed'] = REQUEST_TIME;
+        $fields['created'] = \Drupal::time()->getRequestTime();
+        $fields['changed'] = \Drupal::time()->getRequestTime();
         $fields['last_activity'] = 0;
         $fields['count'] = 0;
 
@@ -111,10 +111,10 @@ class TetherStatsStorage implements TetherStatsStorageInterface {
         $element_values = $fields;
         $element_values['elid'] = $elid;
       }
-      elseif ((REQUEST_TIME - $element_values['changed']) >= $config->get('advanced.element_ttl')) {
+      elseif ((\Drupal::time()->getRequestTime() - $element_values['changed']) >= $config->get('advanced.element_ttl')) {
 
         $fields = $identity_set->getIdentityParams();
-        $fields['changed'] = REQUEST_TIME;
+        $fields['changed'] = \Drupal::time()->getRequestTime();
 
         // Elements may sometimes need to be updated as entity urls may change.
         // The time to live setting will determine how long an element remains
