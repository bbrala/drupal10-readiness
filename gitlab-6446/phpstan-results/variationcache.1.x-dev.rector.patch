diff --git a/tests/src/Unit/VariationCacheTest.php b/tests/src/Unit/VariationCacheTest.php
index 2ffc089..527d712 100644
--- a/tests/src/Unit/VariationCacheTest.php
+++ b/tests/src/Unit/VariationCacheTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\variationcache\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Cache\Context\CacheContextsManager;
 use Drupal\Core\Cache\Context\ContextCacheKeys;
@@ -18,6 +19,7 @@ use Symfony\Component\HttpFoundation\RequestStack;
  */
 class VariationCacheTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The prophesized request stack.
    *
@@ -120,7 +122,7 @@ class VariationCacheTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->requestStack = $this->prophesize(RequestStack::class);
     $this->memoryBackend = new MemoryBackend();
@@ -391,12 +393,8 @@ class VariationCacheTest extends UnitTestCase {
    * @covers ::set
    */
   public function testIncompatibleVariationsException() {
-    // This should never happen. When someone first stores something in the
-    // cache using context A and then tries to store something using context B,
-    // something is wrong. There should always be at least one shared context at
-    // the top level or else the cache cannot do its job.
-    $this->setExpectedException(\LogicException::class, "The complete set of cache contexts for a variation cache item must contain all of the initial cache contexts.");
-
+    $this->expectExceptionMessage("The complete set of cache contexts for a variation cache item must contain all of the initial cache contexts.");
+    $this->expectException(\LogicException::class);
     $this->housingType = 'house';
     $house_cacheability = (new CacheableMetadata())
       ->setCacheContexts(['house.type']);
