modules/contrib/mailjet/lib/mailjet-api-php/src/MailjetApi.php
modules/contrib/mailjet/modules/mailjet_campaign/src/Controller/CampaignAdminController.php
modules/contrib/mailjet/modules/mailjet_event/src/Event/BlockedEvent.php
modules/contrib/mailjet/modules/mailjet_stats/mailjet_stats.install
modules/contrib/mailjet/modules/mailjet_subscription/src/Form/MailjetSubscriptionLabelsForm.php
modules/contrib/mailjet/modules/mailjet_trigger_examples/src/Controller/TriggerExamplesController.php
modules/contrib/mailjet/tests/src/Functional/MailjetReinstallTest.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Exception/ConnectException.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/PrepareBodyMiddleware.php
modules/contrib/mailjet/vendor/guzzlehttp/promises/src/TaskQueueInterface.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/Stream.php
modules/contrib/mailjet/vendor/mailjet/mailjet-apiv3-php/test/Mailjet/MailjetApiv3Test.php
modules/contrib/mailjet/vendor/guzzlehttp/promises/src/functions.php
modules/contrib/mailjet/modules/mailjet_event/src/Event/BounceEvent.php
modules/contrib/mailjet/modules/mailjet_event/src/Event/ClickEvent.php
modules/contrib/mailjet/modules/mailjet_event/src/Event/OpenEvent.php
modules/contrib/mailjet/src/Access/MailjetConfigurationAccessCheck.php
modules/contrib/mailjet/modules/mailjet_event/src/Event/SpamEvent.php
modules/contrib/mailjet/modules/mailjet_event/src/Event/TypoEvent.php
modules/contrib/mailjet/modules/mailjet_event/src/Event/UnsubscribeEvent.php
modules/contrib/mailjet/modules/mailjet_event/src/EventInterface.php
modules/contrib/mailjet/modules/mailjet_event/tests/src/Functional/MailjetEventTest.php
modules/contrib/mailjet/modules/mailjet_stats/mailjet_stats.module
modules/contrib/mailjet/modules/mailjet_stats/src/Controller/StatsAdminController.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Exception/GuzzleException.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Exception/InvalidArgumentException.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Exception/RequestException.php
modules/contrib/mailjet/modules/mailjet_campaign/src/Controller/CampaignCallbackController.php
modules/contrib/mailjet/src/Controller/MailjetController.php
modules/contrib/mailjet/src/Controller/MailjetMyAccountController.php
modules/contrib/mailjet/modules/mailjet_campaign/src/Controller/CampaignUninstallController.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/RedirectMiddleware.php
modules/contrib/mailjet/modules/mailjet_stats/src/EventSubscriber/InitSubscriber.php
modules/contrib/mailjet/src/Controller/MailjetRegisterController.php
modules/contrib/mailjet/src/Controller/MailjetUpgradeController.php
modules/contrib/mailjet/modules/mailjet_stats/src/EventSubscriber/OrderCompleteSubscriber.php
modules/contrib/mailjet/modules/mailjet_campaign/src/Entity/Campaign.php
modules/contrib/mailjet/src/EventSubscriber/InitSubscriber.php
modules/contrib/mailjet/vendor/autoload.php
modules/contrib/mailjet/vendor/composer/ClassLoader.php
modules/contrib/mailjet/src/Form/DomainSaveForm.php
modules/contrib/mailjet/modules/mailjet_subscription/src/Form/SubscriptionFormAddForm.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Exception/SeekException.php
modules/contrib/mailjet/modules/mailjet_subscription/src/Form/SubscriptionFormDeleteForm.php
modules/contrib/mailjet/modules/mailjet_list/mailjet_list.install
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Exception/ServerException.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Exception/TooManyRedirectsException.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Exception/TransferException.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Handler/CurlFactory.php
modules/contrib/mailjet/vendor/mailjet/mailjet-apiv3-php/test/Mailjet/test.php
modules/contrib/mailjet/src/Form/DomainSettingsForm.php
modules/contrib/mailjet/vendor/guzzlehttp/promises/src/functions_include.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/AppendStream.php
modules/contrib/mailjet/modules/mailjet_subscription/mailjet_subscription.install
modules/contrib/mailjet/modules/mailjet_list/mailjet_list.module
modules/contrib/mailjet/modules/mailjet_list/src/Controller/ListMailjetController.php
modules/contrib/mailjet/modules/mailjet_subscription/mailjet_subscription.module
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/StreamDecoratorTrait.php
modules/contrib/mailjet/modules/mailjet_subscription/src/Form/SubscriptionFormEditForm.php
modules/contrib/mailjet/src/Form/MailjetApiForm.php
modules/contrib/mailjet/modules/mailjet_subscription/src/Form/SubscriptionFormFormBase.php
modules/contrib/mailjet/modules/mailjet_subscription/src/Controller/SubscriptionFormBuilder.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/StreamWrapper.php
modules/contrib/mailjet/modules/mailjet_subscription/src/Entity/SubscriptionForm.php
modules/contrib/mailjet/modules/mailjet_campaign/src/Entity/CampaignViewsData.php
modules/contrib/mailjet/src/Form/MailjetSettingsForm.php
modules/contrib/mailjet/modules/mailjet_campaign/tests/src/Functional/MailjetCampaignTest.php
modules/contrib/mailjet/vendor/psr/http-message/src/MessageInterface.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/UploadedFile.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/BufferStream.php
modules/contrib/mailjet/lib/mailjet-api-php/src/UsStates.php
modules/contrib/mailjet/vendor/psr/http-message/src/RequestInterface.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/RequestOptions.php
modules/contrib/mailjet/lib/mailjet-api-php/src/mailjet.api.inc
modules/contrib/mailjet/vendor/psr/http-message/src/ResponseInterface.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/RetryMiddleware.php
modules/contrib/mailjet/vendor/psr/http-message/src/ServerRequestInterface.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/CachingStream.php
modules/contrib/mailjet/vendor/composer/autoload_classmap.php
modules/contrib/mailjet/vendor/composer/autoload_files.php
modules/contrib/mailjet/vendor/composer/autoload_namespaces.php
modules/contrib/mailjet/vendor/psr/http-message/src/StreamInterface.php
modules/contrib/mailjet/vendor/composer/autoload_psr4.php
modules/contrib/mailjet/vendor/composer/autoload_real.php
modules/contrib/mailjet/vendor/psr/http-message/src/UploadedFileInterface.php
modules/contrib/mailjet/vendor/psr/http-message/src/UriInterface.php
modules/contrib/mailjet/vendor/ralouphie/getallheaders/src/getallheaders.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/TransferStats.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/Uri.php
modules/contrib/mailjet/vendor/composer/autoload_static.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/UriTemplate.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Client.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/DroppingStream.php
modules/contrib/mailjet/modules/mailjet_event/mailjet_event.install
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/FnStream.php
modules/contrib/mailjet/modules/mailjet_event/mailjet_event.module
modules/contrib/mailjet/modules/mailjet_event/src/Controller/EventCallbackController.php
modules/contrib/mailjet/modules/mailjet_event/src/Controller/EventUninstallController.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/InflateStream.php
modules/contrib/mailjet/modules/mailjet_event/src/Entity/Event.php
modules/contrib/mailjet/modules/mailjet_subscription/src/Form/SubscriptionSignupPageForm.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/LazyOpenStream.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/LimitStream.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/MessageTrait.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/MultipartStream.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/functions.php
modules/contrib/mailjet/src/Form/MailjetTestEmailForm.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/UriNormalizer.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/NoSeekStream.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/PumpStream.php
modules/contrib/mailjet/src/Form/SubsribeEmailForm.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/UriResolver.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/Request.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/functions_include.php
modules/contrib/mailjet/vendor/guzzlehttp/promises/src/AggregateException.php
modules/contrib/mailjet/vendor/guzzlehttp/promises/src/CancellationException.php
modules/contrib/mailjet/vendor/guzzlehttp/promises/src/Coroutine.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/ClientInterface.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Handler/CurlFactoryInterface.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Cookie/CookieJar.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Handler/CurlHandler.php
modules/contrib/mailjet/src/MailjetBreadcrumbBuilder.php
modules/contrib/mailjet/vendor/guzzlehttp/promises/src/EachPromise.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/Response.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Handler/CurlMultiHandler.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/functions.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/Rfc7230.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/ServerRequest.php
modules/contrib/mailjet/mailjet.install
modules/contrib/mailjet/mailjet.module
modules/contrib/mailjet/vendor/guzzlehttp/promises/src/FulfilledPromise.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Handler/EasyHandle.php
modules/contrib/mailjet/modules/mailjet_subscription/src/Plugin/Block/SubscriptionFormBlock.php
modules/contrib/mailjet/vendor/guzzlehttp/promises/src/Promise.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Handler/MockHandler.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Cookie/CookieJarInterface.php
modules/contrib/mailjet/modules/mailjet_subscription/src/Plugin/Derivative/SubscriptionDerivativeBlock.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Cookie/FileCookieJar.php
modules/contrib/mailjet/modules/mailjet_subscription/src/SubscriptionFormController.php
modules/contrib/mailjet/modules/mailjet_trigger_examples/mailjet_trigger_examples.install
modules/contrib/mailjet/modules/mailjet_trigger_examples/mailjet_trigger_examples.module
modules/contrib/mailjet/src/Plugin/Mail/MailjetMail.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Cookie/SessionCookieJar.php
modules/contrib/mailjet/vendor/guzzlehttp/promises/src/PromiseInterface.php
modules/contrib/mailjet/vendor/guzzlehttp/promises/src/PromisorInterface.php
modules/contrib/mailjet/vendor/guzzlehttp/promises/src/RejectedPromise.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Cookie/SetCookie.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Handler/Proxy.php
modules/contrib/mailjet/vendor/guzzlehttp/promises/src/RejectionException.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Handler/StreamHandler.php
modules/contrib/mailjet/vendor/guzzlehttp/promises/src/TaskQueue.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Exception/BadResponseException.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Exception/ClientException.php
modules/contrib/mailjet/vendor/guzzlehttp/psr7/src/functions_include.php
modules/contrib/mailjet/vendor/mailjet/Mailjet-iframe-v3/example.php
modules/contrib/mailjet/vendor/mailjet/Mailjet-iframe-v3/src/MailjetApi.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/HandlerStack.php
modules/contrib/mailjet/vendor/mailjet/Mailjet-iframe-v3/src/MailjetException.php
modules/contrib/mailjet/vendor/mailjet/Mailjet-iframe-v3/src/MailjetIframe.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/MessageFormatter.php
modules/contrib/mailjet/vendor/mailjet/mailjet-apiv3-php/src/Mailjet/Client.php
modules/contrib/mailjet/modules/mailjet_campaign/mailjet_campaign.install
modules/contrib/mailjet/modules/mailjet_campaign/mailjet_campaign.module
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Middleware.php
modules/contrib/mailjet/modules/mailjet_campaign/src/CampaignInterface.php
modules/contrib/mailjet/vendor/mailjet/mailjet-apiv3-php/src/Mailjet/Config.php
modules/contrib/mailjet/vendor/mailjet/mailjet-apiv3-php/src/Mailjet/Request.php
modules/contrib/mailjet/vendor/mailjet/mailjet-apiv3-php/src/Mailjet/Resources.php
modules/contrib/mailjet/vendor/mailjet/mailjet-apiv3-php/src/Mailjet/Response.php
modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Pool.php
modules/contrib/mailjet/tests/src/Functional/LoadTest.php
modules/contrib/mailjet/tests/src/Functional/MailjetAPITest.php
modules/contrib/mailjet/tests/src/Functional/MailjetApiFormTest.php
modules/contrib/mailjet/tests/src/Functional/MailjetDomainFormTest.php

26 files with changes
=====================

1) modules/contrib/mailjet/modules/mailjet_list/src/Controller/ListMailjetController.php:5

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mailjet_list\Controller;

+use MailjetIframe\MailjetIframe;
 use Drupal\Core\Controller\ControllerBase;
 use MailjetTools\MailjetApi;

@@ @@
     }

     $mailjetIframe = MailjetApi::getMailjetIframe($config_mailjet->get('mailjet_username'), $config_mailjet->get('mailjet_password'));
-    $mailjetIframe->setInitialPage(\MailjetIframe\MailjetIframe::PAGE_CONTACTS);
+    $mailjetIframe->setInitialPage(MailjetIframe::PAGE_CONTACTS);

     $build = [
       '#type' => 'inline_template',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/mailjet/modules/mailjet_event/tests/src/Functional/MailjetEventTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {

     parent::setUp();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/mailjet/modules/mailjet_stats/src/Controller/StatsAdminController.php:5

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mailjet_stats\Controller;

+use MailjetIframe\MailjetIframe;
 use Drupal\Core\Controller\ControllerBase;
 use MailjetTools\MailjetApi;

@@ @@
     }

     $mailjetIframe = MailjetApi::getMailjetIframe($config_mailjet->get('mailjet_username'), $config_mailjet->get('mailjet_password'));
-    $mailjetIframe->setInitialPage(\MailjetIframe\MailjetIframe::PAGE_STATS);
+    $mailjetIframe->setInitialPage(MailjetIframe::PAGE_STATS);

     $build = [
       '#type' => 'inline_template',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/mailjet/modules/mailjet_campaign/tests/src/Functional/MailjetCampaignTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {

     parent::setUp();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/mailjet/modules/mailjet_campaign/src/Controller/CampaignAdminController.php:5

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mailjet_campaign\Controller;

+use MailjetIframe\MailjetIframe;
 use Drupal\Core\Controller\ControllerBase;
 use MailjetTools\MailjetApi;
 use Symfony\Component\HttpFoundation\RedirectResponse;
@@ @@
     }

     $mailjetIframe = MailjetApi::getMailjetIframe($config_mailjet->get('mailjet_username'), $config_mailjet->get('mailjet_password'));
-    $mailjetIframe->setInitialPage(\MailjetIframe\MailjetIframe::PAGE_CAMPAIGNS);
+    $mailjetIframe->setInitialPage(MailjetIframe::PAGE_CAMPAIGNS);
     $callbackurl = urlencode($base_url . '/campaigncallback');
 //    $mailjetIframe->setCallback($callbackurl);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/mailjet/modules/mailjet_subscription/src/Plugin/Block/SubscriptionFormBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mailjet_subscription\Plugin\Block;

+use Drupal\mailjet_subscription\Form\SubscriptionSignupPageForm;
 use Drupal\Core\Block\BlockBase;

 /**
@@ @@
     $signup = mailjet_subscription_load($signup_id);

     if (!empty($signup) && !is_null($signup)) {
-      $form = new \Drupal\mailjet_subscription\Form\SubscriptionSignupPageForm();
+      $form = new SubscriptionSignupPageForm();

       $form_id = 'mailjet_signup_subscribe_block_' . $signup->id() . '_form';
       $form->setFormID($form_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/RetryMiddleware.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace GuzzleHttp;

+use function GuzzleHttp\Promise\rejection_for;
 use GuzzleHttp\Promise\PromiseInterface;
 use GuzzleHttp\Promise\RejectedPromise;
 use GuzzleHttp\Psr7;
@@ @@
                 null,
                 $reason
             )) {
-                return \GuzzleHttp\Promise\rejection_for($reason);
+                return rejection_for($reason);
             }
             return $this->doRetry($req, $options);
         };
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


8) modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/RedirectMiddleware.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace GuzzleHttp;

+use GuzzleHttp\Psr7\UriResolver;
+use GuzzleHttp\Psr7\Uri;
+use function GuzzleHttp\Psr7\rewind_body;
+use function GuzzleHttp\Psr7\modify_request;
 use GuzzleHttp\Exception\BadResponseException;
 use GuzzleHttp\Exception\TooManyRedirectsException;
 use GuzzleHttp\Promise\PromiseInterface;
@@ @@
         }

         $modify['uri'] = $this->redirectUri($request, $response, $protocols);
-        Psr7\rewind_body($request);
+        rewind_body($request);

         // Add the Referer header if it is told to do so and only
         // add the header if we are not redirecting from https to http.
@@ @@
             $modify['remove_headers'][] = 'Authorization';
         }

-        return Psr7\modify_request($request, $modify);
+        return modify_request($request, $modify);
     }

     /**
@@ @@
         ResponseInterface $response,
         array $protocols
     ) {
-        $location = Psr7\UriResolver::resolve(
+        $location = UriResolver::resolve(
             $request->getUri(),
-            new Psr7\Uri($response->getHeaderLine('Location'))
+            new Uri($response->getHeaderLine('Location'))
         );

         // Ensure that the redirect URI is allowed based on the protocols.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


9) modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/PrepareBodyMiddleware.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace GuzzleHttp;

+use function GuzzleHttp\Psr7\mimetype_from_filename;
+use function GuzzleHttp\Psr7\modify_request;
 use GuzzleHttp\Promise\PromiseInterface;
 use GuzzleHttp\Psr7;
 use Psr\Http\Message\RequestInterface;
@@ @@
         // Add a default content-type if possible.
         if (!$request->hasHeader('Content-Type')) {
             if ($uri = $request->getBody()->getMetadata('uri')) {
-                if ($type = Psr7\mimetype_from_filename($uri)) {
+                if ($type = mimetype_from_filename($uri)) {
                     $modify['set_headers']['Content-Type'] = $type;
                 }
             }
@@ @@
         // Add the expect header if needed.
         $this->addExpectHeader($request, $options, $modify);

-        return $fn(Psr7\modify_request($request, $modify), $options);
+        return $fn(modify_request($request, $modify), $options);
     }

     private function addExpectHeader(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


10) modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Cookie/FileCookieJar.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace GuzzleHttp\Cookie;

+use function GuzzleHttp\json_encode;
 /**
  * Persists non-session cookies using a JSON formatted file
  */
@@ @@
             }
         }

-        $jsonStr = \GuzzleHttp\json_encode($json);
+        $jsonStr = json_encode($json);
         if (false === file_put_contents($filename, $jsonStr)) {
             throw new \RuntimeException("Unable to save file {$filename}");
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Client.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace GuzzleHttp;

+use GuzzleHttp\Psr7\Request;
+use GuzzleHttp\Psr7\UriResolver;
+use GuzzleHttp\Psr7\MultipartStream;
+use function GuzzleHttp\Psr7\uri_for;
+use function GuzzleHttp\Promise\promise_for;
+use function GuzzleHttp\Promise\rejection_for;
+use function GuzzleHttp\Psr7\_caseless_remove;
+use function GuzzleHttp\Psr7\stream_for;
+use function GuzzleHttp\Psr7\modify_request;
 use GuzzleHttp\Cookie\CookieJar;
 use GuzzleHttp\Promise;
 use GuzzleHttp\Psr7;
@@ @@

         // Convert the base_uri to a UriInterface
         if (isset($config['base_uri'])) {
-            $config['base_uri'] = Psr7\uri_for($config['base_uri']);
+            $config['base_uri'] = uri_for($config['base_uri']);
         }

         $this->configureDefaults($config);
@@ @@
         if (is_array($body)) {
             $this->invalidBody();
         }
-        $request = new Psr7\Request($method, $uri, $headers, $body, $version);
+        $request = new Request($method, $uri, $headers, $body, $version);
         // Remove the option so that they are not doubly-applied.
         unset($options['headers'], $options['body'], $options['version']);

@@ @@
     private function buildUri($uri, array $config)
     {
         // for BC we accept null which would otherwise fail in uri_for
-        $uri = Psr7\uri_for($uri === null ? '' : $uri);
+        $uri = uri_for($uri === null ? '' : $uri);

         if (isset($config['base_uri'])) {
-            $uri = Psr7\UriResolver::resolve(Psr7\uri_for($config['base_uri']), $uri);
+            $uri = UriResolver::resolve(uri_for($config['base_uri']), $uri);
         }

         return $uri->getScheme() === '' && $uri->getHost() !== '' ? $uri->withScheme('http') : $uri;
@@ @@
         $handler = $options['handler'];

         try {
-            return Promise\promise_for($handler($request, $options));
+            return promise_for($handler($request, $options));
         } catch (\Exception $e) {
-            return Promise\rejection_for($e);
+            return rejection_for($e);
         }
     }

@@ @@
             $options['body'] = http_build_query($options['form_params'], '', '&');
             unset($options['form_params']);
             // Ensure that we don't have the header in different case and set the new value.
-            $options['_conditional'] = Psr7\_caseless_remove(['Content-Type'], $options['_conditional']);
+            $options['_conditional'] = _caseless_remove(['Content-Type'], $options['_conditional']);
             $options['_conditional']['Content-Type'] = 'application/x-www-form-urlencoded';
         }

         if (isset($options['multipart'])) {
-            $options['body'] = new Psr7\MultipartStream($options['multipart']);
+            $options['body'] = new MultipartStream($options['multipart']);
             unset($options['multipart']);
         }

         if (isset($options['json'])) {
-            $options['body'] = \GuzzleHttp\json_encode($options['json']);
+            $options['body'] = json_encode($options['json']);
             unset($options['json']);
             // Ensure that we don't have the header in different case and set the new value.
-            $options['_conditional'] = Psr7\_caseless_remove(['Content-Type'], $options['_conditional']);
+            $options['_conditional'] = _caseless_remove(['Content-Type'], $options['_conditional']);
             $options['_conditional']['Content-Type'] = 'application/json';
         }

@@ @@
             && $options['decode_content'] !== true
         ) {
             // Ensure that we don't have the header in different case and set the new value.
-            $options['_conditional'] = Psr7\_caseless_remove(['Accept-Encoding'], $options['_conditional']);
+            $options['_conditional'] = _caseless_remove(['Accept-Encoding'], $options['_conditional']);
             $modify['set_headers']['Accept-Encoding'] = $options['decode_content'];
         }

@@ @@
             if (is_array($options['body'])) {
                 $this->invalidBody();
             }
-            $modify['body'] = Psr7\stream_for($options['body']);
+            $modify['body'] = stream_for($options['body']);
             unset($options['body']);
         }

@@ @@
             switch ($type) {
                 case 'basic':
                     // Ensure that we don't have the header in different case and set the new value.
-                    $modify['set_headers'] = Psr7\_caseless_remove(['Authorization'], $modify['set_headers']);
+                    $modify['set_headers'] = _caseless_remove(['Authorization'], $modify['set_headers']);
                     $modify['set_headers']['Authorization'] = 'Basic '
                         . base64_encode("$value[0]:$value[1]");
                     break;
@@ @@
             }
         }

-        $request = Psr7\modify_request($request, $modify);
-        if ($request->getBody() instanceof Psr7\MultipartStream) {
+        $request = modify_request($request, $modify);
+        if ($request->getBody() instanceof MultipartStream) {
             // Use a multipart/form-data POST if a Content-Type is not set.
             // Ensure that we don't have the header in different case and set the new value.
-            $options['_conditional'] = Psr7\_caseless_remove(['Content-Type'], $options['_conditional']);
+            $options['_conditional'] = _caseless_remove(['Content-Type'], $options['_conditional']);
             $options['_conditional']['Content-Type'] = 'multipart/form-data; boundary='
                 . $request->getBody()->getBoundary();
         }
@@ @@
                     $modify['set_headers'][$k] = $v;
                 }
             }
-            $request = Psr7\modify_request($request, $modify);
+            $request = modify_request($request, $modify);
             // Don't pass this internal value along to middleware/handlers.
             unset($options['_conditional']);
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


12) modules/contrib/mailjet/vendor/composer/autoload_real.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Composer\Autoload\ClassLoader;
+use Composer\Autoload\ComposerStaticInit9f95350bff734ea50e86827e21cea0b8;
 // autoload_real.php @generated by Composer

 class ComposerAutoloaderInit9f95350bff734ea50e86827e21cea0b8
@@ @@
         }

         spl_autoload_register(array('ComposerAutoloaderInit9f95350bff734ea50e86827e21cea0b8', 'loadClassLoader'), true, true);
-        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
+        self::$loader = $loader = new ClassLoader();
         spl_autoload_unregister(array('ComposerAutoloaderInit9f95350bff734ea50e86827e21cea0b8', 'loadClassLoader'));

         $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());
@@ @@
         if ($useStaticLoader) {
             require_once __DIR__ . '/autoload_static.php';

-            call_user_func(\Composer\Autoload\ComposerStaticInit9f95350bff734ea50e86827e21cea0b8::getInitializer($loader));
+            call_user_func(ComposerStaticInit9f95350bff734ea50e86827e21cea0b8::getInitializer($loader));
         } else {
             $map = require __DIR__ . '/autoload_namespaces.php';
             foreach ($map as $namespace => $path) {
@@ @@
         $loader->register(true);

         if ($useStaticLoader) {
-            $includeFiles = Composer\Autoload\ComposerStaticInit9f95350bff734ea50e86827e21cea0b8::$files;
+            $includeFiles = ComposerStaticInit9f95350bff734ea50e86827e21cea0b8::$files;
         } else {
             $includeFiles = require __DIR__ . '/autoload_files.php';
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


13) modules/contrib/mailjet/mailjet.module:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Symfony\Component\HttpFoundation\RedirectResponse;
+use MailjetTools\MailjetApi;
+use Drupal\Component\Utility\Html;
 /*
  * @file
  * code for Mailjet module
  */

-$path = drupal_get_path('module', 'mailjet');
+$path = \Drupal::service('extension.list.module')->getPath('mailjet');

 // Autoloading via composer
 require_once $path . '/vendor/autoload.php';
@@ @@
   }
   else {
     $redirect = $url;
-    $response = new \Symfony\Component\HttpFoundation\RedirectResponse($url);
+    $response = new RedirectResponse($url);
     $response->send();
   }
 }
@@ @@
     $config_mailjet->set('mailjet_password', $_POST['data']['secretkey']);
     $config_mailjet->save();

-    $mailjetApiClient = MailjetTools\MailjetApi::getApiClient($_POST['data']['apikey'], $_POST['data']['secretkey']);
+    $mailjetApiClient = MailjetApi::getApiClient($_POST['data']['apikey'], $_POST['data']['secretkey']);
     $params = [
       'AllowedAccess' => 'campaigns,contacts,stats,pricing,account,reports',
       'APIKeyALT' => $_POST['data']['apikey'],
@@ @@
       'IsActive' => TRUE,
       'SentData' => serialize(['plugin' => 'drupal-3.0']),
     ];
-    $response = MailjetTools\MailjetApi::createApiToken($params);
+    $response = MailjetApi::createApiToken($params);
     if (false != $response) {
       $config_mailjet->set('APItoken', $response[0]['Token']);
       $config_mailjet->save();
@@ @@
     $key = trim($config_mailjet->get('mailjet_username'));
     $secret_key = trim($config_mailjet->get('mailjet_password'));

-    $mailjetApiClient = MailjetTools\MailjetApi::getApiClient($key, $secret_key);
+    $mailjetApiClient = MailjetApi::getApiClient($key, $secret_key);
     return $mailjetApiClient;
   }
   if (!($key) && !($secret_key)) {
@@ @@
 function mailjet_user_trackingcheck() {
   $mailjetApiClient = mailjet_new();
   $filters = [
-    'APIKey' => MailjetTools\MailjetApi::$mjApiKey,
+    'APIKey' => MailjetApi::$mjApiKey,
   ];
   $response = $mailjetApiClient->get(Resources::$Eventcallbackurl, ['filters' => $filters]);
   if ($response->success()) {
@@ @@
       if (in_array($key, $check)) {
         if ($value == 1 && !array_key_exists($key, $current_events)) {
           $body = [
-            'APIKeyALT' => MailjetTools\MailjetApi::$mjApiKey,
+            'APIKeyALT' => MailjetApi::$mjApiKey,
             'EventType' => $key,
             'Url' => $tracking['Url'],
           ];
@@ @@
   //add this property by default
   $user_fields[] = ["Name" => 'name', "Datatype" => 'str'];

-  $user_info = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
+  $user_info = User::load(\Drupal::currentUser()->id());

   foreach ($user_info as $propertyName => $propertyValue) {
     if (strpos($propertyName, "field_") !== FALSE) {
@@ @@
   //get existing contact properties from MailJet
   $properties = [];
   $mailjetApiClient = mailjet_new();
-  $response = MailjetTools\MailjetApi::getContactProperties();
+  $response = MailjetApi::getContactProperties();
   if (false !== $response) {
     foreach ($response as $property) {
       $properties[$property['Name']] = (array) $property;
@@ @@
 //        drupal_set_message(t('Field '.$field['Name'].' is already in your MailJet account.'),'status'); // no need of this message - too much spam :)
       }
       else {
-        $updateResponse = MailjetTools\MailjetApi::updateMailjetContactProperty($properties[$field['Name']]['ID'], $field['Name'], $field['Datatype']);
+        $updateResponse = MailjetApi::updateMailjetContactProperty($properties[$field['Name']]['ID'], $field['Name'], $field['Datatype']);
         if (false != $updateResponse) {
 //          drupal_set_message(t('Field ' . $field['Name'] . ' is now updated in your MailJet account!'), 'status');
           $properties[$field['Name']] = $field; // Add it here, so the next loop it wont be handled again
@@ @@
       }
     }
     else {
-      $insertResponse = MailjetTools\MailjetApi::createMailjetContactProperty($field['Name'], $field['Datatype']);
+      $insertResponse = MailjetApi::createMailjetContactProperty($field['Name'], $field['Datatype']);
       if (false != $insertResponse) {
 //        drupal_set_message(t('Field ' . $field['Name'] . ' is now inserted in your MailJet account!'), 'status');
         $properties[$field['Name']] = $field; // Add it here, so the next loop it wont be handled again
@@ @@
         mailjet_properties_sync();

         // Add new contact.
-        $response = MailjetTools\MailjetApi::syncMailjetContact($listId, $contact);
+        $response = MailjetApi::syncMailjetContact($listId, $contact);

         if ($response) {
           \Drupal::logger('mailjet_messages')
@@ @@
           'Email' => $user->get('mail')->value
         ];
         //add new email
-        $response = MailjetTools\MailjetApi::syncMailjetContact($listId, $contact, $action);
+        $response = MailjetApi::syncMailjetContact($listId, $contact, $action);
         if (false == $response) {
           \Drupal::logger('mailjet_messages')
             ->notice(t('The contact was unsubscribed from list #@list.', ['@list' => $listId]));
@@ @@
 function mailjet_get_default_list_id($mailjetApiClient) {
   $mailjetApiClient = mailjet_new();
   // Gets Mailjet contact list by name
-  $contactsList = MailjetTools\MailjetApi::getMailjetContactListByName(mailjet_get_default_list_name());
+  $contactsList = MailjetApi::getMailjetContactListByName(mailjet_get_default_list_name());

   if (false != $contactsList) {
     $def_list_id = $contactsList[0]['ID'];
@@ @@
  */
 function mailjet_create_default_list() {
   $mailjetApiClient = mailjet_new();
-  $responseNewContactsList = MailjetTools\MailjetApi::createMailjetContactList(mailjet_get_default_list_name());
+  $responseNewContactsList = MailjetApi::createMailjetContactList(mailjet_get_default_list_name());
   if (false != $responseNewContactsList) {
     $def_list_id = $responseNewContactsList[0]['ID'];
     \Drupal::messenger()->addStatus(t('Default list was created!'));
@@ @@

   mailjet_properties_sync();

-  $responseInitialSync = MailjetTools\MailjetApi::syncMailjetContacts($list_id, $contacts);
+  $responseInitialSync = MailjetApi::syncMailjetContacts($list_id, $contacts);
   if (false == $responseInitialSync) {
       \Drupal::messenger()->addStatus(t('Could not create the contact list'));
   }
@@ @@
   $contact_lists = [];

   $mailjetApiClient = mailjet_new();
-  $contactsListResponse = MailjetTools\MailjetApi::getMailjetContactLists(get_mailjet_get_lists_limit());
+  $contactsListResponse = MailjetApi::getMailjetContactLists(get_mailjet_get_lists_limit());
   if (false != $contactsListResponse) {
     foreach ($contactsListResponse as $list) {
       $contact_lists[$list['ID']] = $list['Name'];
@@ @@
   //get existing contact properties from MailJet
   $properties = [];
   $mailjetApiClient = mailjet_new();
-  $response = MailjetTools\MailjetApi::getMailjetContactProperties();
+  $response = MailjetApi::getMailjetContactProperties();
   if (false != $response) {
     foreach ($response as $property) {
       $properties[$property['Name']] = $property['Name'];
@@ @@
   switch ($key) {
     case 'test_mail':
       $message['subject'] = t('Your test mail from Mailjet', $options);
-      $message['body'][] = Drupal\Component\Utility\Html::escape($params['message']);
+      $message['body'][] = Html::escape($params['message']);
       break;
     case 'activation_mail':
       $message['subject'] = t('Activation mail', $options);
@@ @@
   //get existing contact properties from MailJet
   $properties = [];
   $mailjetApiClient = mailjet_new();
-  $response = MailjetTools\MailjetApi::getMailjetContactProperties();
+  $response = MailjetApi::getMailjetContactProperties();
   if (false != $response) {
     foreach ($response as $property) {

@@ @@
  */
 function mailjet_theme_registry_alter(&$theme_registry) {

-  $theme_registry['block__local_actions_block']['path'] = drupal_get_path('module', 'mailjet') . '/templates';
+  $theme_registry['block__local_actions_block']['path'] = \Drupal::service('extension.list.module')->getPath('mailjet') . '/templates';
 }

 function mailjet_theme($existing, $type, $theme, $path) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


14) modules/contrib/mailjet/lib/mailjet-api-php/src/MailjetApi.php:1

    ---------- begin diff ----------
@@ @@

 namespace MailjetTools;

+use MailjetIframe\MailjetIframe;
 use Exception;
 use Mailjet\Client;
 use Mailjet\Resources;
@@ @@

     public static function getMailjetIframe($username, $password)
     {
-      $mailjetIframe = new \MailjetIframe\MailjetIframe($username, $password, false);
+      $mailjetIframe = new MailjetIframe($username, $password, false);

       $language = \Drupal::languageManager()->getCurrentLanguage();
       $lang_codes_map = [
@@ @@
           'contacts',
           'stats',
         ))
-        ->turnDocumentationProperties(\MailjetIframe\MailjetIframe::OFF)
-        ->turnNewContactListCreation(\MailjetIframe\MailjetIframe::ON)
-        ->turnMenu(\MailjetIframe\MailjetIframe::OFF)
-        ->turnFooter(\MailjetIframe\MailjetIframe::ON)
-        ->turnBar(\MailjetIframe\MailjetIframe::ON)
-        ->turnCreateCampaignButton(\MailjetIframe\MailjetIframe::ON)
-        ->turnSendingPolicy(\MailjetIframe\MailjetIframe::ON);
+        ->turnDocumentationProperties(MailjetIframe::OFF)
+        ->turnNewContactListCreation(MailjetIframe::ON)
+        ->turnMenu(MailjetIframe::OFF)
+        ->turnFooter(MailjetIframe::ON)
+        ->turnBar(MailjetIframe::ON)
+        ->turnCreateCampaignButton(MailjetIframe::ON)
+        ->turnSendingPolicy(MailjetIframe::ON);

       return $mailjetIframe;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


15) modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Pool.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace GuzzleHttp;

+use function GuzzleHttp\Promise\iter_for;
 use GuzzleHttp\Promise\PromisorInterface;
 use Psr\Http\Message\RequestInterface;
 use GuzzleHttp\Promise\EachPromise;
@@ @@
             $opts = [];
         }

-        $iterable = \GuzzleHttp\Promise\iter_for($requests);
+        $iterable = iter_for($requests);
         $requests = function () use ($iterable, $client, $opts) {
             foreach ($iterable as $key => $rfn) {
                 if ($rfn instanceof RequestInterface) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


16) modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Middleware.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace GuzzleHttp;

+use function GuzzleHttp\Promise\rejection_for;
 use GuzzleHttp\Cookie\CookieJarInterface;
 use GuzzleHttp\Exception\RequestException;
 use GuzzleHttp\Promise\RejectedPromise;
@@ @@
                             'error'    => $reason,
                             'options'  => $options
                         ];
-                        return \GuzzleHttp\Promise\rejection_for($reason);
+                        return rejection_for($reason);
                     }
                 );
             };
@@ @@
                             : null;
                         $message = $formatter->format($request, $response, $reason);
                         $logger->notice($message);
-                        return \GuzzleHttp\Promise\rejection_for($reason);
+                        return rejection_for($reason);
                     }
                 );
             };
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


17) modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/MessageFormatter.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace GuzzleHttp;

+use function GuzzleHttp\Psr7\str;
 use Psr\Http\Message\MessageInterface;
 use Psr\Http\Message\RequestInterface;
 use Psr\Http\Message\ResponseInterface;
@@ @@
                 $result = '';
                 switch ($matches[1]) {
                     case 'request':
-                        $result = Psr7\str($request);
+                        $result = str($request);
                         break;
                     case 'response':
-                        $result = $response ? Psr7\str($response) : '';
+                        $result = $response ? str($response) : '';
                         break;
                     case 'req_headers':
                         $result = trim($request->getMethod()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


18) modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Handler/StreamHandler.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace GuzzleHttp\Handler;

+use GuzzleHttp\Psr7\Response;
+use GuzzleHttp\Psr7\LazyOpenStream;
+use GuzzleHttp\Psr7\InflateStream;
+use function GuzzleHttp\Promise\rejection_for;
+use function GuzzleHttp\headers_from_lines;
+use function GuzzleHttp\Psr7\stream_for;
+use function GuzzleHttp\normalize_header_keys;
+use function GuzzleHttp\Psr7\copy_to_stream;
+use function GuzzleHttp\is_host_in_noproxy;
+use function GuzzleHttp\default_ca_bundle;
+use function GuzzleHttp\debug_resource;
 use GuzzleHttp\Exception\RequestException;
 use GuzzleHttp\Exception\ConnectException;
 use GuzzleHttp\Promise\FulfilledPromise;
@@ @@
             $e = RequestException::wrapException($request, $e);
             $this->invokeStats($options, $request, $startTime, null, $e);

-            return \GuzzleHttp\Promise\rejection_for($e);
+            return rejection_for($e);
         }
     }

@@ @@
         $ver = explode('/', $parts[0])[1];
         $status = $parts[1];
         $reason = isset($parts[2]) ? $parts[2] : null;
-        $headers = \GuzzleHttp\headers_from_lines($hdrs);
+        $headers = headers_from_lines($hdrs);
         list($stream, $headers) = $this->checkDecode($options, $headers, $stream);
-        $stream = Psr7\stream_for($stream);
+        $stream = stream_for($stream);
         $sink = $stream;

         if (strcasecmp('HEAD', $request->getMethod())) {
@@ @@
             $sink = $this->createSink($stream, $options);
         }

-        $response = new Psr7\Response($status, $headers, $sink, $ver, $reason);
+        $response = new Response($status, $headers, $sink, $ver, $reason);

         if (isset($options['on_headers'])) {
             try {
@@ @@
             } catch (\Exception $e) {
                 $msg = 'An error was encountered during the on_headers event';
                 $ex = new RequestException($msg, $request, $response, $e);
-                return \GuzzleHttp\Promise\rejection_for($ex);
+                return rejection_for($ex);
             }
         }

@@ @@
             : fopen('php://temp', 'r+');

         return is_string($sink)
-            ? new Psr7\LazyOpenStream($sink, 'w+')
-            : Psr7\stream_for($sink);
+            ? new LazyOpenStream($sink, 'w+')
+            : stream_for($sink);
     }

     private function checkDecode(array $options, array $headers, $stream)
@@ @@
     {
         // Automatically decode responses when instructed.
         if (!empty($options['decode_content'])) {
-            $normalizedKeys = \GuzzleHttp\normalize_header_keys($headers);
+            $normalizedKeys = normalize_header_keys($headers);
             if (isset($normalizedKeys['content-encoding'])) {
                 $encoding = $headers[$normalizedKeys['content-encoding']];
                 if ($encoding[0] === 'gzip' || $encoding[0] === 'deflate') {
-                    $stream = new Psr7\InflateStream(
-                        Psr7\stream_for($stream)
+                    $stream = new InflateStream(
+                        stream_for($stream)
                     );
                     $headers['x-encoded-content-encoding']
                         = $headers[$normalizedKeys['content-encoding']];
@@ @@
         // that number of bytes has been read. This can prevent infinitely
         // reading from a stream when dealing with servers that do not honor
         // Connection: Close headers.
-        Psr7\copy_to_stream(
+        copy_to_stream(
             $source,
             $sink,
             (strlen($contentLength) > 0 && (int) $contentLength > 0) ? (int) $contentLength : -1
@@ @@
             $scheme = $request->getUri()->getScheme();
             if (isset($value[$scheme])) {
                 if (!isset($value['no'])
-                    || !\GuzzleHttp\is_host_in_noproxy(
+                    || !is_host_in_noproxy(
                         $request->getUri()->getHost(),
                         $value['no']
                     )
@@ @@
             // PHP 5.6 or greater will find the system cert by default. When
             // < 5.6, use the Guzzle bundled cacert.
             if (PHP_VERSION_ID < 50600) {
-                $options['ssl']['cafile'] = \GuzzleHttp\default_ca_bundle();
+                $options['ssl']['cafile'] = default_ca_bundle();
             }
         } elseif (is_string($value)) {
             $options['ssl']['cafile'] = $value;
@@ @@
         static $args = ['severity', 'message', 'message_code',
             'bytes_transferred', 'bytes_max'];

-        $value = \GuzzleHttp\debug_resource($value);
+        $value = debug_resource($value);
         $ident = $request->getMethod() . ' ' . $request->getUri()->withFragment('');
         $this->addNotification(
             $params,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


19) modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Handler/MockHandler.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace GuzzleHttp\Handler;

+use Psr\Http\Message\StreamInterface;
+use function GuzzleHttp\Promise\rejection_for;
+use function GuzzleHttp\Promise\promise_for;
+use function GuzzleHttp\describe_type;
 use GuzzleHttp\Exception\RequestException;
 use GuzzleHttp\HandlerStack;
 use GuzzleHttp\Promise\PromiseInterface;
@@ @@
         }

         $response = $response instanceof \Exception
-            ? \GuzzleHttp\Promise\rejection_for($response)
-            : \GuzzleHttp\Promise\promise_for($response);
+            ? rejection_for($response)
+            : promise_for($response);

         return $response->then(
             function ($value) use ($request, $options) {
@@ @@
                         fwrite($sink, $contents);
                     } elseif (is_string($sink)) {
                         file_put_contents($sink, $contents);
-                    } elseif ($sink instanceof \Psr\Http\Message\StreamInterface) {
+                    } elseif ($sink instanceof StreamInterface) {
                         $sink->write($contents);
                     }
                 }
@@ @@
                 if ($this->onRejected) {
                     call_user_func($this->onRejected, $reason);
                 }
-                return \GuzzleHttp\Promise\rejection_for($reason);
+                return rejection_for($reason);
             }
         );
     }
@@ @@
                 $this->queue[] = $value;
             } else {
                 throw new \InvalidArgumentException('Expected a response or '
-                    . 'exception. Found ' . \GuzzleHttp\describe_type($value));
+                    . 'exception. Found ' . describe_type($value));
             }
         }
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


20) modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Handler/EasyHandle.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace GuzzleHttp\Handler;

+use function GuzzleHttp\headers_from_lines;
+use function GuzzleHttp\normalize_header_keys;
 use GuzzleHttp\Psr7\Response;
 use Psr\Http\Message\RequestInterface;
 use Psr\Http\Message\ResponseInterface;
@@ @@

         // HTTP-version SP status-code SP reason-phrase
         $startLine = explode(' ', array_shift($this->headers), 3);
-        $headers = \GuzzleHttp\headers_from_lines($this->headers);
-        $normalizedKeys = \GuzzleHttp\normalize_header_keys($headers);
+        $headers = headers_from_lines($this->headers);
+        $normalizedKeys = normalize_header_keys($headers);

         if (!empty($this->options['decode_content'])
             && isset($normalizedKeys['content-encoding'])
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


21) modules/contrib/mailjet/vendor/guzzlehttp/guzzle/src/Handler/CurlFactory.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace GuzzleHttp\Handler;

+use function GuzzleHttp\Promise\rejection_for;
+use function GuzzleHttp\Psr7\stream_for;
+use function GuzzleHttp\is_host_in_noproxy;
+use function GuzzleHttp\debug_resource;
 use GuzzleHttp\Exception\RequestException;
 use GuzzleHttp\Exception\ConnectException;
 use GuzzleHttp\Promise\FulfilledPromise;
@@ @@
         // If an exception was encountered during the onHeaders event, then
         // return a rejected promise that wraps that exception.
         if ($easy->onHeadersException) {
-            return \GuzzleHttp\Promise\rejection_for(
+            return rejection_for(
                 new RequestException(
                     'An error was encountered during the on_headers event',
                     $easy->request,
@@ @@
             ? new ConnectException($message, $easy->request, null, $ctx)
             : new RequestException($message, $easy->request, $easy->response, null, $ctx);

-        return \GuzzleHttp\Promise\rejection_for($error);
+        return rejection_for($error);
     }

     private function getDefaultConf(EasyHandle $easy)
@@ @@
         if (isset($options['sink'])) {
             $sink = $options['sink'];
             if (!is_string($sink)) {
-                $sink = \GuzzleHttp\Psr7\stream_for($sink);
+                $sink = stream_for($sink);
             } elseif (!is_dir(dirname($sink))) {
                 // Ensure that the directory exists before failing in curl.
                 throw new \RuntimeException(sprintf(
@@ @@
         } else {
             // Use a default temp stream if no sink was set.
             $conf[CURLOPT_FILE] = fopen('php://temp', 'w+');
-            $easy->sink = Psr7\stream_for($conf[CURLOPT_FILE]);
+            $easy->sink = stream_for($conf[CURLOPT_FILE]);
         }
         $timeoutRequiresNoSignal = false;
         if (isset($options['timeout'])) {
@@ @@
                 if (isset($options['proxy'][$scheme])) {
                     $host = $easy->request->getUri()->getHost();
                     if (!isset($options['proxy']['no']) ||
-                        !\GuzzleHttp\is_host_in_noproxy($host, $options['proxy']['no'])
+                        !is_host_in_noproxy($host, $options['proxy']['no'])
                     ) {
                         $conf[CURLOPT_PROXY] = $options['proxy'][$scheme];
                     }
@@ @@
         }

         if (!empty($options['debug'])) {
-            $conf[CURLOPT_STDERR] = \GuzzleHttp\debug_resource($options['debug']);
+            $conf[CURLOPT_STDERR] = debug_resource($options['debug']);
             $conf[CURLOPT_VERBOSE] = true;
         }
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


22) modules/contrib/mailjet/tests/src/Functional/MailjetDomainFormTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Perform any initial set up tasks that run before every test method
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['access content']);
   }
@@ @@
   public function testApiForm() {
     $this->drupalLogin($this->user);
     $this->drupalGet('admin/config/system/mailjet/domains/add-domain');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

-    $this->assertFieldByName('domain', 'example.com', 'The field was found with the correct value.');
+    $this->assertSession()->fieldValueEquals('domain', 'example.com');


-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'domain' => $config->get('example.com'),
     ], t('Save configuration'));
-    $this->assertText('The configuration options have been saved.', 'The form was saved correctly.');
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');


   }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/mailjet/tests/src/Functional/MailjetApiFormTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Perform any initial set up tasks that run before every test method
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['access content']);
   }
@@ @@
   public function testApiForm() {
     $this->drupalLogin($this->user);
     $this->drupalGet('admin/config/system/mailjet/api');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $config = $this->config('mailjet.settings');
-    $this->assertFieldByName('mailjet_username', $config->get('mailjet.mailjet_username'), 'The field was found with the correct value.');
-    $this->assertFieldByName('mailjet_password', $config->get('mailjet.mailjet_password'), 'The field was found with the correct value.');
+    $this->assertSession()->fieldValueEquals('mailjet_username', $config->get('mailjet.mailjet_username'));
+    $this->assertSession()->fieldValueEquals('mailjet_password', $config->get('mailjet.mailjet_password'));


-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'mailjet_username' => $config->get('mailjet_username'),
       'mailjet_username' => $config->get('mailjet_password'),
     ], t('Save configuration'));
-    $this->assertText('The configuration options have been saved.', 'The form was saved correctly.');
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');


   }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/mailjet/tests/src/Functional/LoadTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
@@ @@
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/mailjet/src/Plugin/Mail/MailjetMail.php:490

    ---------- begin diff ----------
@@ @@
               }

               $attachment_new_filename = tempnam(realpath(\Drupal::service('file_system')->getTempDirectory()), 'smtp');
-              $file_path = file_save_data($attachment, $attachment_new_filename, FileSystemInterface::EXISTS_RENAME);
+              $file_path = \Drupal::service('file.repository')->writeData($attachment, $attachment_new_filename, FileSystemInterface::EXISTS_RENAME);

               if (!$mailer->AddAttachment($file_path, $file_name)) {
                 \Drupal::messenger()->addStatus(t('Attachment could not be found or accessed.'));
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * WrapReturnRector


26) modules/contrib/mailjet/src/Form/MailjetSettingsForm.php:229

    ---------- begin diff ----------
@@ @@

     // States only show up for US citizens

-    $path = drupal_get_path('module', 'mailjet');
+    $path = \Drupal::service('extension.list.module')->getPath('mailjet');
     include $path . '/lib/mailjet-api-php/src/UsStates.php';
     $form['infos']['address_state'] = [
       '#type' => 'select',
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 26 files have been changed by Rector                                      

