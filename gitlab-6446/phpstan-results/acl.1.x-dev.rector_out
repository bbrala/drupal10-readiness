modules/contrib/acl/acl.admin.inc
modules/contrib/acl/tests/modules/acl_node_test/acl_node_test.module
modules/contrib/acl/acl.api.php
modules/contrib/acl/acl.install
modules/contrib/acl/acl.module
modules/contrib/acl/src/Plugin/migrate/destination/AclList.php
modules/contrib/acl/src/Plugin/migrate/destination/AclTable.php
modules/contrib/acl/src/Plugin/migrate/source/AclList.php
modules/contrib/acl/src/Plugin/migrate/source/AclTable.php
modules/contrib/acl/src/Tests/AclMigrationTestTrait.php
modules/contrib/acl/src/Tests/AclTest.php
modules/contrib/acl/src/Tests/Migrate/d6/MigrateAclList68Test.php
modules/contrib/acl/src/Tests/Migrate/d7/MigrateAclList78Test.php
modules/contrib/acl/tests/fixtures/d6_d7_table.php

1 file with changes
===================

1) modules/contrib/acl/src/Tests/AclTest.php:100

    ---------- begin diff ----------
@@ @@
       ->condition('acl_id', $acl_id)
       ->execute()
       ->fetchAll();
-    $this->assertEqual(count($records), 1, t('ACL was succesfully created.'), $group = 'ACL');
+    $this->assertEqualsWithDelta(count($records), 1, $group = 'ACL', t('ACL was succesfully created.'));

     // Add user (can't we use the user created in setup?).
     $web_user_1 = $this->drupalCreateUser();
@@ @@
       ->execute()
       ->fetchAll();
     // Verify user is added.
-    $this->assertEqual(count($records), 1, t('User was successfully added.'), $group = 'ACL');
+    $this->assertEqualsWithDelta(count($records), 1, $group = 'ACL', t('User was successfully added.'));

     // Remove user.
     acl_remove_user($acl_id, $web_user_1->id());
@@ @@
       ->execute()
       ->fetchAll();
     // Verify user is removed.
-    $this->assertEqual(count($records), 0, t('User was successfully removed.'), $group = 'ACL');
+    $this->assertEqualsWithDelta(count($records), 0, $group = 'ACL', t('User was successfully removed.'));
   }

   /**
@@ @@
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual($count, 2, t("2 nodes under control ($count)."), $group = 'ACL');
+    $this->assertEqualsWithDelta($count, 2, $group = 'ACL', t("2 nodes under control ($count)."));
     // Add a third node.
     acl_node_add_acl($node3->id(), $acl_id1, 1, 1, 1);
     $count = \Drupal::database()->select('acl_node')
@@ @@
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual($count, 3, t('3 nodes under control.'), $group = 'ACL');
+    $this->assertEqualsWithDelta($count, 3, $group = 'ACL', t('3 nodes under control.'));
     // Add the second node again.
     acl_node_add_acl($node2->id(), $acl_id1, 1, 1, 1);
     $count = \Drupal::database()->select('acl_node')
@@ @@
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual($count, 3, t('Still only 3 nodes under control.'), $group = 'ACL');
+    $this->assertEqualsWithDelta($count, 3, $group = 'ACL', t('Still only 3 nodes under control.'));

     // Remove the second node again.
     acl_node_remove_acl($node2->id(), $acl_id1);
@@ @@
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual($count, 2, t('2 nodes left under control.'), $group = 'ACL');
+    $this->assertEqualsWithDelta($count, 2, $group = 'ACL', t('2 nodes left under control.'));
     // Remove the second node again.
     acl_node_remove_acl($node2->id(), $acl_id1);
     $count = \Drupal::database()->select('acl_node')
@@ @@
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual($count, 2, t('Still 2 nodes left under control.'), $group = 'ACL');
+    $this->assertEqualsWithDelta($count, 2, $group = 'ACL', t('Still 2 nodes left under control.'));

     // Create another ACL and add nodes.
     $acl_id2 = acl_create_acl('test3', 'test', 2);
@@ @@
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual($count, 2, t('2 nodes under control.'), $group = 'ACL');
+    $this->assertEqualsWithDelta($count, 2, $group = 'ACL', t('2 nodes under control.'));
     // Remove a node (which has two ACLs).
     acl_node_clear_acls($node1->id(), 'test3');
     $count = \Drupal::database()->select('acl_node')
@@ @@
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual($count, 1, t('1 node left under control.'), $group = 'ACL');
+    $this->assertEqualsWithDelta($count, 1, $group = 'ACL', t('1 node left under control.'));
     $count = \Drupal::database()->select('acl_node')
       ->condition('acl_id', $acl_id2)
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual($count, 1, t('1 node left under control.'), $group = 'ACL');
+    $this->assertEqualsWithDelta($count, 1, $group = 'ACL', t('1 node left under control.'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertEqualsParameterToSpecificMethodsTypeRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-8.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 1 file has been changed by Rector                                         

