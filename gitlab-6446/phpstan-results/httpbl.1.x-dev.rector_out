modules/contrib/httpbl/drush/httpbl.drush.inc
modules/contrib/httpbl/httpbl.views.inc
modules/contrib/httpbl/src/HostQuery.php
modules/contrib/httpbl/src/Plugin/views/field/StatusEnhanced.php
modules/contrib/httpbl/src/Entity/Controller/HostListBuilder.php
modules/contrib/httpbl/src/HostStorageSchema.php
modules/contrib/httpbl/drush/phpstorm.drush.inc
modules/contrib/httpbl/src/HostViewsData.php
modules/contrib/httpbl/src/ProxyClass/Logger/HttpblLogTrapper.php
modules/contrib/httpbl/httpbl.install
modules/contrib/httpbl/src/HttpblEvaluator.php
modules/contrib/httpbl/src/Entity/Host.php
modules/contrib/httpbl/httpbl.module
modules/contrib/httpbl/src/Form/HostDeleteForm.php
modules/contrib/httpbl/src/Form/HostForm.php
modules/contrib/httpbl/src/Form/HostMultipleBanConfirm.php
modules/contrib/httpbl/src/HttpblEvaluatorInterface.php
modules/contrib/httpbl/src/HttpblMiddleware.php
modules/contrib/httpbl/src/HttpblResponse.php
modules/contrib/httpbl/src/HttpblResponseInterface.php
modules/contrib/httpbl/src/Logger/HttpblLogTrapper.php
modules/contrib/httpbl/src/Logger/HttpblLogTrapperInterface.php
modules/contrib/httpbl/src/Plugin/Action/HostMultipleBan.php
modules/contrib/httpbl/src/Form/HostMultipleDeleteConfirm.php
modules/contrib/httpbl/src/Plugin/Action/HostMultipleDelete.php
modules/contrib/httpbl/src/Plugin/Action/HostMultipleGreylist.php
modules/contrib/httpbl/src/Plugin/Action/HostMultipleRefresh.php
modules/contrib/httpbl/src/Plugin/Action/HostMultipleUnban.php
modules/contrib/httpbl/src/Form/HostMultipleGreylistConfirm.php
modules/contrib/httpbl/src/Plugin/Action/HostMultipleWhitelist.php
modules/contrib/httpbl/src/Plugin/views/field/CronExpireDate.php
modules/contrib/httpbl/src/Form/HostMultipleRefreshConfirm.php
modules/contrib/httpbl/src/Plugin/views/field/HostBulkForm.php
modules/contrib/httpbl/src/Plugin/views/field/ProjectLinkHost.php
modules/contrib/httpbl/src/Plugin/views/field/ProjectLinkSource.php
modules/contrib/httpbl/src/Form/HostMultipleUnbanConfirm.php
modules/contrib/httpbl/src/Form/HostMultipleWhitelistConfirm.php
modules/contrib/httpbl/src/Form/HttpblConfigForm.php
modules/contrib/httpbl/src/Form/HttpblWhitelistForm.php
modules/contrib/httpbl/src/Form/PrepareHttpblEntityUninstallForm.php
modules/contrib/httpbl/src/Future/HttpblManager.php
modules/contrib/httpbl/src/Future/HttpblManagerInterface.php
modules/contrib/httpbl/src/HostAccessControlHandler.php
modules/contrib/httpbl/src/HostInterface.php

7 files with changes
====================

1) modules/contrib/httpbl/src/ProxyClass/Logger/HttpblLogTrapper.php:11

    ---------- begin diff ----------
@@ @@

 namespace Drupal\httpbl\ProxyClass\Logger {

+    use Drupal\httpbl\Logger\HttpblLogTrapperInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
     /**
      * Provides a proxy class for \Drupal\httpbl\Logger\HttpblLogTrapper.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class HttpblLogTrapper implements \Drupal\httpbl\Logger\HttpblLogTrapperInterface
+    class HttpblLogTrapper implements HttpblLogTrapperInterface
     {

-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;

         /**
          * The id of the original proxied service.
@@ @@
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


2) modules/contrib/httpbl/httpbl.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Link;
+use Drupal\Core\Url;
 /**
  * @file
  * Install, update and uninstall functions for the httpbl module.
@@ @@
     if (!\Drupal::state()->get('httpbl.accesskey') ?: NULL || !\Drupal::state()->get('httpbl.check') ?: HTTPBL_CHECK_NONE ) {

       // Make Config page link.
-      $config_link = \Drupal\Core\Link::fromTextAndUrl(t('Http:BL config'), \Drupal\Core\Url::fromRoute('httpbl.admin_config'))->toString();
+      $config_link = Link::fromTextAndUrl(t('Http:BL config'), Url::fromRoute('httpbl.admin_config'))->toString();

       $requirements['httpbl'] = array(
         'description' => t('IP blacklist lookups are currently disabled; enter your access key on the @settings page and enable checks to enable blacklist lookups.', array('@settings' => $config_link)),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/httpbl/src/HttpblEvaluator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\httpbl;

+use Drupal\Core\Url;
+use Drupal\Core\Link;
 use Drupal\httpbl\Entity\Host;
 use Drupal\ban\BanIpManagerInterface;
 use Drupal\httpbl\Logger\HttpblLogTrapperInterface;
@@ @@
    *   The formatted link.
    */
   public static function projectLink($ip, $text = 'Project Honeypot') {
-    $url = \Drupal\Core\Url::fromUri('http://www.projecthoneypot.org/search_ip.php?ip=' . $ip);
+    $url = Url::fromUri('http://www.projecthoneypot.org/search_ip.php?ip=' . $ip);
     $url_options = [
       'attributes' => [
         'target' => '_blank',
@@ @@

     // Break this line up for debugging.
     //$operations = \Drupal\Core\Link::fromTextAndUrl(t($text), $url )->toString();
-    $operations = \Drupal\Core\Link::fromTextAndUrl(t($text), $url );
+    $operations = Link::fromTextAndUrl(t($text), $url );
     // Below fails (intermittently) in core url_generator, when page_cache
     // is enabled.
     $operations = $operations->toString();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


4) modules/contrib/httpbl/src/Future/HttpblManager.php:36

    ---------- begin diff ----------
@@ @@
    *   TRUE if the IP address is greylisted, FALSE otherwise.
    */
   public function isGreylisted($ip){} // @todo flesh this out.  Could still use in Host entity, perhaps.
-  
+

  /**
    * White-lists an IP address.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


5) modules/contrib/httpbl/src/Form/HttpblConfigForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\httpbl\Form;

+use Drupal\Core\Url;
+use Drupal\Core\Link;
 use Drupal\Core\Form\ConfigFormBase;
 use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
     }

     // Create link to HttpBL home page.
-    $httpblUrl = \Drupal\Core\Url::fromUri('http://www.projecthoneypot.org/httpbl.php');
+    $httpblUrl = Url::fromUri('http://www.projecthoneypot.org/httpbl.php');
     $httpblUrl_options = [
       'attributes' => [
         'target' => '_blank',
@@ @@
         'title' => t('More info about Project Honey Pot\'s http:BL service.'),
       ]];
     $httpblUrl->setOptions($httpblUrl_options);
-    $httpbl_link = \Drupal\Core\Link::fromTextAndUrl(t('http:BL homepage at projecthoneypot.org'), $httpblUrl )->toString();
+    $httpbl_link = Link::fromTextAndUrl(t('http:BL homepage at projecthoneypot.org'), $httpblUrl )->toString();

     $form['core'] = array(
       '#type' => 'details',
@@ @@
     );

     // Create link for Access Key info.
-    $keyUrl = \Drupal\Core\Url::fromUri('http://www.projecthoneypot.org/faq.php#g');
+    $keyUrl = Url::fromUri('http://www.projecthoneypot.org/faq.php#g');
     $keyUrl_options = [
       'attributes' => [
         'target' => '_blank',
@@ @@
         'title' => t('More info about an access key and how to get one if you do not have one.'),
       ]];
     $keyUrl->setOptions($keyUrl_options);
-    $key_link = \Drupal\Core\Link::fromTextAndUrl(t('Access Key'), $keyUrl )->toString();
+    $key_link = Link::fromTextAndUrl(t('Access Key'), $keyUrl )->toString();

     $form['core']['httpbl_accesskey'] = array(
       '#type' => 'textfield',
@@ @@
     }

     // Create link to Project Honeypot home page.
-    $homeUrl = \Drupal\Core\Url::fromUri('http://www.projecthoneypot.org');
+    $homeUrl = Url::fromUri('http://www.projecthoneypot.org');
     $homeUrl_options = [
       'attributes' => [
         'target' => '_blank',
@@ @@
         'title' => t('More info from Project Honeypot.'),
       ]];
     $homeUrl->setOptions($homeUrl_options);
-    $home_link = \Drupal\Core\Link::fromTextAndUrl(t('Project Honey Pot'), $homeUrl )->toString();
+    $home_link = Link::fromTextAndUrl(t('Project Honey Pot'), $homeUrl )->toString();

     $form['honeypot'] = array(
       '#type' => 'details',
@@ @@
     );

     // Create link to "own Honey Pot."
-    $ownUrl = \Drupal\Core\Url::fromUri('http://www.projecthoneypot.org/manage_honey_pots.php');
+    $ownUrl = Url::fromUri('http://www.projecthoneypot.org/manage_honey_pots.php');
     $ownUrl_options = [
       'attributes' => [
         'target' => '_blank',
@@ @@
         'title' => t('More info about managing you own honey pots.'),
       ]];
     $ownUrl->setOptions($ownUrl_options);
-    $own_link = \Drupal\Core\Link::fromTextAndUrl(t('own Honey Pots'), $ownUrl )->toString();
+    $own_link = Link::fromTextAndUrl(t('own Honey Pots'), $ownUrl )->toString();
     // Create link to "quick Honey Pot."
-    $quickUrl = \Drupal\Core\Url::fromUri('http://www.projecthoneypot.org/manage_quicklink.php');
+    $quickUrl = Url::fromUri('http://www.projecthoneypot.org/manage_quicklink.php');
     $quickUrl_options = [
       'attributes' => [
         'target' => '_blank',
@@ @@
         'title' => t('More info about using a Quick Link (other people\'s honey pots).'),
       ]];
     $quickUrl->setOptions($quickUrl_options);
-    $quick_link = \Drupal\Core\Link::fromTextAndUrl(t('QuickLink'), $quickUrl )->toString();
+    $quick_link = Link::fromTextAndUrl(t('QuickLink'), $quickUrl )->toString();

     $form['honeypot']['httpbl_link'] = array(
       '#type' => 'textfield',
@@ @@
     );

     // Create link to status report.
-    $status_link = \Drupal\Core\Link::fromTextAndUrl(t('Status Report'), \Drupal\Core\Url::fromRoute('system.status'))->toString();
+    $status_link = Link::fromTextAndUrl(t('Status Report'), Url::fromRoute('system.status'))->toString();

     $form['advanced']['httpbl_stats'] = array(
       '#type' => 'checkbox',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/httpbl/src/Entity/Host.php:5

    ---------- begin diff ----------
@@ @@

 namespace Drupal\httpbl\Entity;

+use Drupal\Core\Url;
+use Drupal\Core\Link;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityChangedTrait;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ @@
    * {@inheritdoc}
    */
   public function projectLink($text = 'Project Honeypot') {
-    $url = \Drupal\Core\Url::fromUri('http://www.projecthoneypot.org/search_ip.php?ip=' . $this->getHostIp());
+    $url = Url::fromUri('http://www.projecthoneypot.org/search_ip.php?ip=' . $this->getHostIp());
     $url_options = [
       'attributes' => [
         'target' => '_blank',
@@ @@
       ]];
     $url->setOptions($url_options);

-    return \Drupal\Core\Link::fromTextAndUrl(t($text), $url )->toString();
+    return Link::fromTextAndUrl(t($text), $url )->toString();
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/httpbl/src/Entity/Controller/HostListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\httpbl\Entity\Controller;

+use Drupal\Core\Url;
+use Drupal\Core\Link;
 use Drupal\httpbl\HttpblManager;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
     // interesting to see there. So override the default link with a link to a
     // profile on Project Honeypot.
     $host_ip = $entity->host_ip->value;
-    $url = \Drupal\Core\Url::fromUri('http://www.projecthoneypot.org/search_ip.php?ip=' . $host_ip);
+    $url = Url::fromUri('http://www.projecthoneypot.org/search_ip.php?ip=' . $host_ip);
     $url_options = [
       'attributes' => [
         'target' => '_blank',
@@ @@
         'title' => 'View this host\'s profile on Project Honeypot.',
       ]];
     $url->setOptions($url_options);
-    $project_link = \Drupal\Core\Link::fromTextAndUrl(t($host_ip), $url )->toString();
+    $project_link = Link::fromTextAndUrl(t($host_ip), $url )->toString();
     $row['name'] = $project_link;
     
     // Status with humanized conversion.
@@ @@
     if ($entity->source->value == t(HTTPBL_ORIGINAL_SOURCE)) {
       // recycle the url from above...
       $url->setOptions($url_options);
-      $project_link = \Drupal\Core\Link::fromTextAndUrl(t($entity->source->value), $url )->toString();
+      $project_link = Link::fromTextAndUrl(t($entity->source->value), $url )->toString();
       $row['source'] = $project_link;
     }
     else {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

