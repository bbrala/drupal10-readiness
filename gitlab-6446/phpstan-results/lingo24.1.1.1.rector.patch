diff --git a/lingo24.module b/lingo24.module
index 1ef1192..8a9702e 100644
--- a/lingo24.module
+++ b/lingo24.module
@@ -20,7 +20,7 @@ use Drupal\tmgmt\TMGMTException;
 function lingo24_theme() {
   return array(
     'lingo24_html_template' => array(
-      'path' => drupal_get_path('module', 'lingo24') . '/templates',
+      'path' => \Drupal::service('extension.list.module')->getPath('lingo24') . '/templates',
       'template' => 'lingo24_html_template',
       'variables' => array('tjid' => NULL, 'source_language' => NULL, 'target_language' => NULL, 'items' => NULL),
     ),
@@ -126,7 +126,7 @@ function lingo24_file_download($uri) {
     ->condition('uri', $uri)
     ->execute();
   if ($fids) {
-    $files = \Drupal\file\Entity\File::loadMultiple($fids);
+    $files = File::loadMultiple($fids);
     foreach ($files as $item) {
       // Since some database servers sometimes use a case-insensitive comparison
       // by default, double check that the filename is an exact match.
@@ -247,7 +247,7 @@ function _process_job (JobInterface $job){
           $path = $job->getSetting('scheme') . '://lingo24/' . $name . '.xlf';
           $dirname = dirname($path);
           if (\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS)) {
-            $file = file_save_data($lingo24Docs->getFileContent($file->getId()), $path, FileSystemInterface::EXISTS_REPLACE);
+            $file = \Drupal::service('file.repository')->writeData($lingo24Docs->getFileContent($file->getId()), $path, FileSystemInterface::EXISTS_REPLACE);
             $plugin = \Drupal::service('plugin.manager.lingo24.format')->createInstance('xlf');
             try {
               $job->addTranslatedData($plugin->import($path));
diff --git a/src/LingoTranslatorUi.php b/src/LingoTranslatorUi.php
index 4a5fe3b..ad2b19d 100644
--- a/src/LingoTranslatorUi.php
+++ b/src/LingoTranslatorUi.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingo24;
 
+use Lingo24\API\Docs;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityFormInterface;
 use Drupal\Core\File\FileSystemInterface;
@@ -301,7 +302,7 @@ class LingoTranslatorUi extends TranslatorPluginUiBase {
             $path = $job->getSetting('scheme') . '://lingo24/' . $name . '.xlf';
             $dirname = dirname($path);
             if (\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS)) {
-              $file = file_save_data($lingo24Docs->getFileContent($file->getId()), $path, FileSystemInterface::EXISTS_REPLACE);
+              $file = \Drupal::service('file.repository')->writeData($lingo24Docs->getFileContent($file->getId()), $path, FileSystemInterface::EXISTS_REPLACE);
               $plugin = \Drupal::service('plugin.manager.lingo24.format')->createInstance('xlf');
               try {
                 $job->addTranslatedData($plugin->import($path));
@@ -371,10 +372,10 @@ class LingoTranslatorUi extends TranslatorPluginUiBase {
     // Check if the authorization code exist and request one if doesn't.
     if (empty(\Drupal::state()->get('lingo_auth_Code'))) {
       if ($translator->getSetting('lingo_environment') == 'demo') {
-        $uri = \Lingo24\API\Docs::$AUTH_URL_DEMO . '?response_type=code';
+        $uri = Docs::$AUTH_URL_DEMO . '?response_type=code';
       }
       else {
-        $uri = \Lingo24\API\Docs::$AUTH_URL_LIVE . '?response_type=code';
+        $uri = Docs::$AUTH_URL_LIVE . '?response_type=code';
       }
       $uri .= '&client_id=' . $translator->getSetting('lingo_client_id');
       $uri .= '&redirect_uri=' . \Drupal::state()->get('lingo_redirect_uri');
diff --git a/src/Plugin/tmgmt/Translator/LingoTranslator.php b/src/Plugin/tmgmt/Translator/LingoTranslator.php
index 45e07bc..7e43936 100644
--- a/src/Plugin/tmgmt/Translator/LingoTranslator.php
+++ b/src/Plugin/tmgmt/Translator/LingoTranslator.php
@@ -49,7 +49,7 @@ class LingoTranslator extends TranslatorPluginBase {
       $translator = $job->getTranslator();
       $lingo24Docs = self::oauthClient($translator);
       // Save the file.
-      $file = file_save_data($export->export($job), $path, FileSystemInterface::EXISTS_REPLACE);
+      $file = \Drupal::service('file.repository')->writeData($export->export($job), $path, FileSystemInterface::EXISTS_REPLACE);
       // Prepare and submit translation file to Lingo24.
       if (!empty($job->getSetting('lingo_source_country')) && !empty($job->getSetting('lingo_source_region')) && !empty($job->getSetting('lingo_target_country')) && !empty($job->getSetting('lingo_target_region'))) {
         $source_locale = $lingo24Docs->getLocale($job->getSetting('lingo_source_country') . '_' . $job->getSetting('lingo_source_region'));
