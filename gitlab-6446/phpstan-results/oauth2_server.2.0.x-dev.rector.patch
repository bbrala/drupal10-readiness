diff --git a/oauth2_server.api.php b/oauth2_server.api.php
index 435f85c..df6512d 100644
--- a/oauth2_server.api.php
+++ b/oauth2_server.api.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\user\UserInterface;
 /**
  * @file
  * OAuth2 Server API documentation.
@@ -29,7 +30,7 @@ function hook_oauth2_server_pre_authorize() {
  * @return array
  *   An array of additional claims.
  */
-function hook_oauth2_server_claims(\Drupal\user\UserInterface $account, array $requested_scopes) {
+function hook_oauth2_server_claims(UserInterface $account, array $requested_scopes) {
   $claims = [];
   if (in_array('phone', $requested_scopes)) {
     $claims = [
@@ -50,7 +51,7 @@ function hook_oauth2_server_claims(\Drupal\user\UserInterface $account, array $r
  * @param array $requested_scopes
  *   An array of requested scopes.
  */
-function hook_oauth2_server_user_claims_alter(array $claims, \Drupal\user\UserInterface $account, array $requested_scopes) {
+function hook_oauth2_server_user_claims_alter(array $claims, UserInterface $account, array $requested_scopes) {
   if (in_array('phone', $requested_scopes)) {
     $claims['phone_number'] = '123456';
     $claims['phone_number_verified'] = FALSE;
diff --git a/src/Authentication/Provider/OAuth2DrupalAuthProvider.php b/src/Authentication/Provider/OAuth2DrupalAuthProvider.php
index 3506ffc..0a4708b 100644
--- a/src/Authentication/Provider/OAuth2DrupalAuthProvider.php
+++ b/src/Authentication/Provider/OAuth2DrupalAuthProvider.php
@@ -2,13 +2,13 @@
 
 namespace Drupal\oauth2_server\Authentication\Provider;
 
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Authentication\AuthenticationProviderInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException;
 use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 use Drupal\oauth2_server\OAuth2HelperInterface;
@@ -183,16 +183,16 @@ class OAuth2DrupalAuthProvider implements AuthenticationProviderInterface {
    *
    * @todo Doesn't appear to be used.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *   The exception object.
    *
    * @return bool
    *   Whether the exception s valid or not.
    */
-  public function handleException(GetResponseForExceptionEvent $event) {
-    $exception = $event->getException();
+  public function handleException(ExceptionEvent $event) {
+    $exception = $event->getThrowable();
     if ($exception instanceof AccessDeniedHttpException) {
-      $event->setException(new UnauthorizedHttpException('Invalid consumer origin.', $exception));
+      $event->setThrowable(new UnauthorizedHttpException('Invalid consumer origin.', $exception));
       return TRUE;
     }
     return FALSE;
diff --git a/src/Form/AuthorizeForm.php b/src/Form/AuthorizeForm.php
index 041c624..3b87607 100644
--- a/src/Form/AuthorizeForm.php
+++ b/src/Form/AuthorizeForm.php
@@ -118,7 +118,7 @@ class AuthorizeForm extends FormBase {
           <img src="' . base_path() . 'core/misc/icons/73b355/check.svg" alt="" width="25" height="25">
         </div>
         <div class="item">
-          <img src="' . ($this->themeConfig->get('logo.path') ? file_create_url($this->themeConfig->get('logo.path')) : base_path() . 'core/misc/logo/drupal-logo.svg') . '" alt="" width="50" height="50">
+          <img src="' . ($this->themeConfig->get('logo.path') ? \Drupal::service('file_url_generator')->generateAbsoluteString($this->themeConfig->get('logo.path')) : base_path() . 'core/misc/logo/drupal-logo.svg') . '" alt="" width="50" height="50">
         </div>
     </div>',
       ];
diff --git a/src/OAuth2Storage.php b/src/OAuth2Storage.php
index 5f5315d..78b46da 100644
--- a/src/OAuth2Storage.php
+++ b/src/OAuth2Storage.php
@@ -1022,7 +1022,7 @@ class OAuth2Storage implements OAuth2StorageInterface {
           $file->getEntityTypeId() === 'file'
           && $file->access('download')
         ) {
-          return Url::fromUri(file_create_url($file->getFileUri()))->toString();
+          return \Drupal::service('file_url_generator')->generate($file->getFileUri())->toString();
         }
       }
     }
diff --git a/src/Utility.php b/src/Utility.php
index c4293b4..a8ca13b 100644
--- a/src/Utility.php
+++ b/src/Utility.php
@@ -116,7 +116,7 @@ class Utility {
    *   - public_key: The generated public key certificate (PEM encoded X.509).
    */
   public static function generateKeys() {
-    $module_path = drupal_get_path('module', 'oauth2_server');
+    $module_path = \Drupal::service('extension.list.module')->getPath('oauth2_server');
     $module_realpath = \Drupal::service('file_system')->realpath($module_path);
     $config = [
       'config' => $module_realpath . DIRECTORY_SEPARATOR . 'oauth2_server.openssl.cnf',
diff --git a/tests/src/Functional/OAuth2ServerAdminTest.php b/tests/src/Functional/OAuth2ServerAdminTest.php
index 1b76002..d3fff61 100644
--- a/tests/src/Functional/OAuth2ServerAdminTest.php
+++ b/tests/src/Functional/OAuth2ServerAdminTest.php
@@ -37,9 +37,10 @@ class OAuth2ServerAdminTest extends BrowserTestBase {
     $this->drupalLogin($account);
 
     $server_id = strtolower($this->randomMachineName());
+    $this->drupalGet(new Url('entity.oauth2_server.add_form'));
 
     // Create a server in the UI.
-    $this->drupalPostForm(new Url('entity.oauth2_server.add_form'), [
+    $this->submitForm([
       'name' => $this->randomString(),
       'server_id' => $server_id,
     ], t('Save server'));
@@ -47,7 +48,8 @@ class OAuth2ServerAdminTest extends BrowserTestBase {
     // Create a client of the server in the UI, with a random secret.
     $client_id = strtolower($this->randomMachineName());
     $secret = $this->randomString(32);
-    $this->drupalPostForm(new Url('entity.oauth2_server.clients.add_form', ['oauth2_server' => $server_id]), [
+    $this->drupalGet(new Url('entity.oauth2_server.clients.add_form', ['oauth2_server' => $server_id]));
+    $this->submitForm([
       'name' => $this->randomString(),
       'client_id' => $client_id,
       'redirect_uri' => 'http://localhost',
@@ -57,7 +59,7 @@ class OAuth2ServerAdminTest extends BrowserTestBase {
     // Test that the raw secret does not match the saved (hashed) one.
     /** @var \Drupal\oauth2_server\ClientInterface $client */
     $client = $entity_type_manager->getStorage('oauth2_server_client')->load($client_id);
-    $this->assertNotEqual($secret, $client->client_secret, 'Raw secret does not match hashed secret.');
+    $this->assertNotEquals($secret, $client->client_secret, 'Raw secret does not match hashed secret.');
 
     // Test that the secret can be matched.
     $this->assertTrue($password_hasher->check($secret, $client->client_secret), 'Hashes match for known secret and stored secret.');
@@ -69,7 +71,7 @@ class OAuth2ServerAdminTest extends BrowserTestBase {
     ]);
     $entity_type_manager->getStorage('oauth2_server_client')->resetCache();
     $client = $entity_type_manager->getStorage('oauth2_server_client')->load($client_id);
-    $this->assertEqual($old_hashed_secret, $client->client_secret, 'Secret is not changed accidentally when editing the client.');
+    $this->assertEquals($old_hashed_secret, $client->client_secret, 'Secret is not changed accidentally when editing the client.');
 
     // Edit the client, and set a new, non-empty secret.
     $new_secret = $this->randomString(32);
@@ -94,7 +96,8 @@ class OAuth2ServerAdminTest extends BrowserTestBase {
       'oauth2_server' => $client->getServer()->id(),
       'oauth2_server_client' => $client->id(),
     ]);
-    $this->drupalPostForm($edit_uri, $values, t('Save client'));
+    $this->drupalGet($edit_uri);
+    $this->submitForm($values, t('Save client'));
   }
 
 }
diff --git a/tests/src/Functional/OAuth2ServerStorageTest.php b/tests/src/Functional/OAuth2ServerStorageTest.php
index e6b42d4..812aa86 100644
--- a/tests/src/Functional/OAuth2ServerStorageTest.php
+++ b/tests/src/Functional/OAuth2ServerStorageTest.php
@@ -59,7 +59,7 @@ class OAuth2ServerStorageTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->redirectUri = $this->buildUrl('authorized', ['absolute' => TRUE]);
@@ -166,10 +166,10 @@ class OAuth2ServerStorageTest extends BrowserTestBase {
     $this->assertArrayHasKey('client_id', $token, 'The "client_id" value is present in the token array.');
     $this->assertArrayHasKey('user_id', $token, 'The "user_id" value is present in the token array.');
     $this->assertArrayHasKey('expires', $token, 'The "expires" value is present in the token array.');
-    $this->assertEqual($token['access_token'], 'newtoken', 'The "access_token" key has the expected value.');
-    $this->assertEqual($token['client_id'], $this->clientId, 'The "client_id" key has the expected value.');
-    $this->assertEqual($token['user_id'], $user->id(), 'The "user_id" key has the expected value.');
-    $this->assertEqual($token['expires'], $expires, 'The "expires" key has the expected value.');
+    $this->assertEquals($token['access_token'], 'newtoken', 'The "access_token" key has the expected value.');
+    $this->assertEquals($token['client_id'], $this->clientId, 'The "client_id" key has the expected value.');
+    $this->assertEquals($token['user_id'], $user->id(), 'The "user_id" key has the expected value.');
+    $this->assertEquals($token['expires'], $expires, 'The "expires" key has the expected value.');
 
     // Update the token.
     $expires = time() + 42;
@@ -178,7 +178,7 @@ class OAuth2ServerStorageTest extends BrowserTestBase {
 
     $token = $this->storage->getAccessToken('newtoken');
     $this->assertTrue((bool) $token, 'An access token was successfully returned.');
-    $this->assertEqual($token['expires'], $expires, 'The expires timestamp matches the new value.');
+    $this->assertEquals($token['expires'], $expires, 'The expires timestamp matches the new value.');
   }
 
   /**
@@ -201,10 +201,10 @@ class OAuth2ServerStorageTest extends BrowserTestBase {
     $this->assertArrayHasKey('client_id', $token, 'The "client_id" value is present in the token array.');
     $this->assertArrayHasKey('user_id', $token, 'The "user_id" value is present in the token array.');
     $this->assertArrayHasKey('expires', $token, 'The "expires" value is present in the token array.');
-    $this->assertEqual($token['refresh_token'], 'refreshtoken', 'The "refresh_token" key has the expected value.');
-    $this->assertEqual($token['client_id'], $this->clientId, 'The "client_id" key has the expected value.');
-    $this->assertEqual($token['user_id'], $user->id(), 'The "user_id" key has the expected value.');
-    $this->assertEqual($token['expires'], $expires, 'The "expires" key has the expected value.');
+    $this->assertEquals($token['refresh_token'], 'refreshtoken', 'The "refresh_token" key has the expected value.');
+    $this->assertEquals($token['client_id'], $this->clientId, 'The "client_id" key has the expected value.');
+    $this->assertEquals($token['user_id'], $user->id(), 'The "user_id" key has the expected value.');
+    $this->assertEquals($token['expires'], $expires, 'The "expires" key has the expected value.');
   }
 
   /**
@@ -228,11 +228,11 @@ class OAuth2ServerStorageTest extends BrowserTestBase {
     $this->assertArrayHasKey('user_id', $code, 'The "user_id" value is present in the code array.');
     $this->assertArrayHasKey('redirect_uri', $code, 'The "redirect_uri" value is present in the code array.');
     $this->assertArrayHasKey('expires', $code, 'The "expires" value is present in the code array.');
-    $this->assertEqual($code['authorization_code'], 'newcode', 'The "authorization_code" key has the expected value.');
-    $this->assertEqual($code['client_id'], $this->clientId, 'The "client_id" key has the expected value.');
-    $this->assertEqual($code['user_id'], $user->id(), 'The "user_id" key has the expected value.');
-    $this->assertEqual($code['redirect_uri'], 'http://example.com', 'The "redirect_uri" key has the expected value.');
-    $this->assertEqual($code['expires'], $expires, 'The "expires" key has the expected value.');
+    $this->assertEquals($code['authorization_code'], 'newcode', 'The "authorization_code" key has the expected value.');
+    $this->assertEquals($code['client_id'], $this->clientId, 'The "client_id" key has the expected value.');
+    $this->assertEquals($code['user_id'], $user->id(), 'The "user_id" key has the expected value.');
+    $this->assertEquals($code['redirect_uri'], 'http://example.com', 'The "redirect_uri" key has the expected value.');
+    $this->assertEquals($code['expires'], $expires, 'The "expires" key has the expected value.');
 
     // Change an existing code.
     $expires = time() + 42;
@@ -241,7 +241,7 @@ class OAuth2ServerStorageTest extends BrowserTestBase {
 
     $code = $this->storage->getAuthorizationCode('newcode');
     $this->assertTrue((bool) $code, 'An authorization code was successfully returned.');
-    $this->assertEqual($code['expires'], $expires, 'The expires timestamp matches the new value.');
+    $this->assertEquals($code['expires'], $expires, 'The expires timestamp matches the new value.');
   }
 
   /**
diff --git a/tests/src/Functional/OAuth2ServerTest.php b/tests/src/Functional/OAuth2ServerTest.php
index c622477..0fd5b53 100644
--- a/tests/src/Functional/OAuth2ServerTest.php
+++ b/tests/src/Functional/OAuth2ServerTest.php
@@ -99,7 +99,7 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->redirectUri = $this->buildUrl('/user', ['absolute' => TRUE]);
@@ -203,7 +203,7 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
     $this->drupalLogin($user);
     $response = $this->authorizationCodeRequest('token');
 
-    $this->assertEqual($response->getStatusCode(), 302, 'The implicit flow request completed successfully');
+    $this->assertEquals($response->getStatusCode(), 302, 'The implicit flow request completed successfully');
     $parameters = $this->getRedirectParams($response, '#');
     $this->assertTokenResponse($parameters, FALSE);
 
@@ -214,10 +214,10 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
       $response = $this->httpGetRequest($verification_url);
 
       $verification_response = json_decode($response->getBody());
-      $this->assertEqual($response->getStatusCode(), 200, 'The provided access token was successfully verified.');
+      $this->assertEquals($response->getStatusCode(), 200, 'The provided access token was successfully verified.');
       $this->verbose($verification_response->scope);
       $this->verbose(urldecode($parameters['scope']));
-      $this->assertEqual($verification_response->scope, urldecode($parameters['scope']), 'The provided scope matches the scope of the verified access token.');
+      $this->assertEquals($verification_response->scope, urldecode($parameters['scope']), 'The provided scope matches the scope of the verified access token.');
     }
   }
 
@@ -240,7 +240,7 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
     ];
     $response = $this->httpPostRequest($token_url, $data);
 
-    $this->assertEqual($response->getStatusCode(), 200, 'The token request completed successfully');
+    $this->assertEquals($response->getStatusCode(), 200, 'The token request completed successfully');
 
     $payload = json_decode($response->getBody());
     $this->assertTokenResponse($payload);
@@ -258,7 +258,7 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
     ];
     $response = $this->httpPostRequest($token_url, $data);
 
-    $this->assertEqual($response->getStatusCode(), 200, 'The token request completed successfully');
+    $this->assertEquals($response->getStatusCode(), 200, 'The token request completed successfully');
     $payload = json_decode($response->getBody());
     $this->assertTokenResponse($payload, FALSE);
   }
@@ -290,7 +290,7 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
     ];
     $response = $this->httpPostRequest($token_url, $data, FALSE);
 
-    $this->assertEqual($response->getStatusCode(), 200, 'The token request completed successfully');
+    $this->assertEquals($response->getStatusCode(), 200, 'The token request completed successfully');
     $payload = json_decode($response->getBody());
     $this->assertTokenResponse($payload, FALSE);
   }
@@ -300,7 +300,7 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
    */
   public function testPasswordGrantType() {
     $response = $this->passwordGrantRequest();
-    $this->assertEqual($response->getStatusCode(), 200, 'The token request completed successfully');
+    $this->assertEquals($response->getStatusCode(), 200, 'The token request completed successfully');
     $payload = json_decode($response->getBody());
     $this->assertTokenResponse($payload);
   }
@@ -321,7 +321,7 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
     ];
     $response = $this->httpPostRequest($token_url, $data);
 
-    $this->assertEqual($response->getStatusCode(), 200, 'The token request completed successfully');
+    $this->assertEquals($response->getStatusCode(), 200, 'The token request completed successfully');
     $payload = json_decode($response->getBody());
     // The response will include a new refresh_token because
     // always_issue_new_refresh_token is TRUE.
@@ -335,7 +335,7 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
     // The default scope returned by oauth2_server_default_scope().
     $response = $this->passwordGrantRequest();
     $payload = json_decode($response->getBody());
-    $this->assertEqual($payload->scope, 'admin basic', 'The correct default scope was returned.');
+    $this->assertEquals($payload->scope, 'admin basic', 'The correct default scope was returned.');
 
     // A non-existent scope.
     try {
@@ -343,7 +343,7 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
     }
     catch (ClientException $e) {
       if ($e->hasResponse()) {
-        $this->assertEqual($e->getResponse()->getStatusCode(), 400, 'Invalid scope correctly detected.');
+        $this->assertEquals($e->getResponse()->getStatusCode(), 400, 'Invalid scope correctly detected.');
       }
     }
 
@@ -354,14 +354,14 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
     }
     catch (ClientException $e) {
       if ($e->hasResponse()) {
-        $this->assertEqual($e->getResponse()->getStatusCode(), 400, 'Inaccessible scope correctly detected.');
+        $this->assertEquals($e->getResponse()->getStatusCode(), 400, 'Inaccessible scope correctly detected.');
       }
     }
 
     // A specific requested scope.
     $response = $this->passwordGrantRequest('admin');
     $payload = json_decode($response->getBody());
-    $this->assertEqual($payload->scope, 'admin', 'The correct scope was returned.');
+    $this->assertEquals($payload->scope, 'admin', 'The correct scope was returned.');
   }
 
   /**
@@ -385,7 +385,7 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
     ];
     $response = $this->httpPostRequest($token_url, $data);
 
-    $this->assertEqual($response->getStatusCode(), 200, 'The token request completed successfully');
+    $this->assertEquals($response->getStatusCode(), 200, 'The token request completed successfully');
     $payload = json_decode($response->getBody());
     $this->assertTokenResponse($payload, FALSE);
     if (!empty($payload->id_token)) {
@@ -409,7 +409,7 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
     ];
     $response = $this->httpPostRequest($token_url, $data);
 
-    $this->assertEqual($response->getStatusCode(), 200, 'The token request completed successfully');
+    $this->assertEquals($response->getStatusCode(), 200, 'The token request completed successfully');
     $payload = json_decode($response->getBody());
     $this->assertTokenResponse($payload);
     if (!empty($payload->id_token)) {
@@ -427,7 +427,7 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
     $account = $this->drupalCreateUser(['use oauth2 server']);
     $this->drupalLogin($account);
     $response = $this->authorizationCodeRequest('id_token', 'openid email');
-    $this->assertEqual($response->getStatusCode(), 302, 'The "id_token" implicit flow request completed successfully');
+    $this->assertEquals($response->getStatusCode(), 302, 'The "id_token" implicit flow request completed successfully');
     $parameters = $this->getRedirectParams($response, '#');
     if (!empty($parameters['id_token'])) {
       $this->assertIdToken($parameters['id_token'], FALSE, $account);
@@ -437,7 +437,7 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
     }
 
     $response = $this->authorizationCodeRequest('token id_token', 'openid email profile phone');
-    $this->assertEqual($response->getStatusCode(), 302, 'The "token id_token" implicit flow request completed successfully');
+    $this->assertEquals($response->getStatusCode(), 302, 'The "token id_token" implicit flow request completed successfully');
     $parameters = $this->getRedirectParams($response, '#');
     $this->assertTokenResponse($parameters, FALSE);
     if (!empty($parameters['id_token'])) {
@@ -471,7 +471,7 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
     ];
 
     foreach ($expected_claims as $claim => $expected_value) {
-      $this->assertEqual($payload->$claim, $expected_value, 'The UserInfo endpoint returned a valid "' . $claim . '" claim');
+      $this->assertEquals($payload->$claim, $expected_value, 'The UserInfo endpoint returned a valid "' . $claim . '" claim');
     }
   }
 
@@ -490,7 +490,7 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
     $info_url = $this->buildUrl(new Url('oauth2_server.userinfo'), ['query' => $query]);
     $response = $this->httpGetRequest($info_url);
     $payload = json_decode($response->getBody(), TRUE);
-    $this->assertEqual($this->loggedInUser->name->value, $payload['sub'], 'The UserInfo "sub" is now the user\'s name.');
+    $this->assertEquals($this->loggedInUser->name->value, $payload['sub'], 'The UserInfo "sub" is now the user\'s name.');
   }
 
   /**
@@ -518,7 +518,7 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
 
     $parts = explode('.', $payload->id_token);
     $claims = json_decode(Utility::base64urlDecode($parts[1]), TRUE);
-    $this->assertEqual($this->loggedInUser->name->value, $claims['sub'], 'The ID token "sub" is now the user\'s name.');
+    $this->assertEquals($this->loggedInUser->name->value, $claims['sub'], 'The ID token "sub" is now the user\'s name.');
   }
 
   /**
@@ -531,7 +531,7 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
     $server->save();
 
     $response = $this->passwordGrantRequest();
-    $this->assertEqual($response->getStatusCode(), 200, 'The token request completed successfully');
+    $this->assertEquals($response->getStatusCode(), 200, 'The token request completed successfully');
     $payload = json_decode($response->getBody());
     // The refresh token is contained inside the crypto token.
     $this->assertTokenResponse($payload, FALSE);
@@ -565,7 +565,7 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
     }
     catch (ClientException $e) {
       if ($e->hasResponse()) {
-        $this->assertEqual($e->getResponse()->getStatusCode(), 401, 'Missing access token correctly detected.');
+        $this->assertEquals($e->getResponse()->getStatusCode(), 401, 'Missing access token correctly detected.');
       }
     }
 
@@ -579,7 +579,7 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
     }
     catch (ClientException $e) {
       if ($e->hasResponse()) {
-        $this->assertEqual($e->getResponse()->getStatusCode(), 403, 'Insufficient scope correctly detected.');
+        $this->assertEquals($e->getResponse()->getStatusCode(), 403, 'Insufficient scope correctly detected.');
       }
     }
 
@@ -631,7 +631,7 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
     }
     catch (ClientException $e) {
       if ($e->hasResponse()) {
-        $this->assertEqual($e->getResponse()->getStatusCode(), 403, 'A blocked user is denied access with 403 Forbidden.');
+        $this->assertEquals($e->getResponse()->getStatusCode(), 403, 'A blocked user is denied access with 403 Forbidden.');
       }
     }
   }
@@ -694,10 +694,10 @@ IJpQWcPiClejygMqUb8ZAkEA6SFArj46gwFaERr+D8wMizfZdxhzEuMMG3angAuV
       $this->assertArrayHasKey('email_verified', $claims, 'The id_token contains an "email_verified" claim.');
     }
 
-    $this->assertEqual($claims['aud'], $this->clientId, 'The id_token "aud" claim contains the expected client_id.');
-    $this->assertEqual($claims['nonce'], 'test', 'The id_token "nonce" claim contains the expected nonce.');
+    $this->assertEquals($claims['aud'], $this->clientId, 'The id_token "aud" claim contains the expected client_id.');
+    $this->assertEquals($claims['nonce'], 'test', 'The id_token "nonce" claim contains the expected nonce.');
     if ($account) {
-      $this->assertEqual($claims['email'], $account->mail->getValue()[0]['value']);
+      $this->assertEquals($claims['email'], $account->mail->getValue()[0]['value']);
     }
   }
 
