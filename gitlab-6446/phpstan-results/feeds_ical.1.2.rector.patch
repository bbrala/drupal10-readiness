diff --git a/feeds_ical.info.yml b/feeds_ical.info.yml
index 71903e6..e34967a 100644
--- a/feeds_ical.info.yml
+++ b/feeds_ical.info.yml
@@ -6,7 +6,7 @@ dependencies:
   - feeds:feeds
 
 type: module
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 # project: 'feeds_ical'
 
 # Information added by Drupal.org packaging script on 2021-10-16
diff --git a/feeds_ical.install b/feeds_ical.install
index d905600..5d1319b 100644
--- a/feeds_ical.install
+++ b/feeds_ical.install
@@ -1,10 +1,10 @@
 <?php
 
+use Drupal\feeds_ical\Feeds\Parser\IcalParser;
 /**
  * @file
  * Install/update/uninstall hooks.
  */
-
 /**
  * Fix feed mapping values to match machine names.
  */
@@ -25,7 +25,7 @@ function feeds_ical_update_8001() {
   ];
 
   foreach (\Drupal::entityTypeManager()->getStorage('feeds_feed_type')->loadMultiple() as $feed_type) {
-    if ($feed_type->getParser() instanceof \Drupal\feeds_ical\Feeds\Parser\IcalParser) {
+    if ($feed_type->getParser() instanceof IcalParser) {
       $mappings = $feed_type->getMappings();
       $mappings = array_map(function ($mapping) use ($properties) {
         if (!empty($mapping['map']['value']) && in_array($mapping['map']['value'], $properties)) {
diff --git a/src/Feeds/Parser/IcalParser.php b/src/Feeds/Parser/IcalParser.php
index 591b12d..018b358 100644
--- a/src/Feeds/Parser/IcalParser.php
+++ b/src/Feeds/Parser/IcalParser.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\feeds_ical\Feeds\Parser;
 
-require_once drupal_get_path('module', 'feeds_ical').DIRECTORY_SEPARATOR.'vendor'.DIRECTORY_SEPARATOR.'autoload.php';
+require_once \Drupal::service('extension.list.module')->getPath('feeds_ical').DIRECTORY_SEPARATOR.'vendor'.DIRECTORY_SEPARATOR.'autoload.php';
 
 use Drupal\feeds\Component\XmlParserTrait;
 use Drupal\feeds\Exception\EmptyFeedException;
diff --git a/vendor/composer/autoload_real.php b/vendor/composer/autoload_real.php
index 3e70300..d750e3f 100644
--- a/vendor/composer/autoload_real.php
+++ b/vendor/composer/autoload_real.php
@@ -1,5 +1,7 @@
 <?php
 
+use Composer\Autoload\ClassLoader;
+use Composer\Autoload\ComposerStaticInitf41804c989a67b26034ce47de705ea17;
 // autoload_real.php @generated by Composer
 
 class ComposerAutoloaderInitf41804c989a67b26034ce47de705ea17
@@ -20,14 +22,14 @@ class ComposerAutoloaderInitf41804c989a67b26034ce47de705ea17
         }
 
         spl_autoload_register(array('ComposerAutoloaderInitf41804c989a67b26034ce47de705ea17', 'loadClassLoader'), true, true);
-        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
+        self::$loader = $loader = new ClassLoader();
         spl_autoload_unregister(array('ComposerAutoloaderInitf41804c989a67b26034ce47de705ea17', 'loadClassLoader'));
 
         $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());
         if ($useStaticLoader) {
             require_once __DIR__ . '/autoload_static.php';
 
-            call_user_func(\Composer\Autoload\ComposerStaticInitf41804c989a67b26034ce47de705ea17::getInitializer($loader));
+            call_user_func(ComposerStaticInitf41804c989a67b26034ce47de705ea17::getInitializer($loader));
         } else {
             $map = require __DIR__ . '/autoload_namespaces.php';
             foreach ($map as $namespace => $path) {
@@ -48,7 +50,7 @@ class ComposerAutoloaderInitf41804c989a67b26034ce47de705ea17
         $loader->register(true);
 
         if ($useStaticLoader) {
-            $includeFiles = Composer\Autoload\ComposerStaticInitf41804c989a67b26034ce47de705ea17::$files;
+            $includeFiles = ComposerStaticInitf41804c989a67b26034ce47de705ea17::$files;
         } else {
             $includeFiles = require __DIR__ . '/autoload_files.php';
         }
diff --git a/vendor/nesbot/carbon/src/Carbon/Carbon.php b/vendor/nesbot/carbon/src/Carbon/Carbon.php
index d537e0b..4ed4c67 100644
--- a/vendor/nesbot/carbon/src/Carbon/Carbon.php
+++ b/vendor/nesbot/carbon/src/Carbon/Carbon.php
@@ -11,6 +11,7 @@
 
 namespace Carbon;
 
+use Symfony\Contracts\Translation\TranslatorInterface;
 use Carbon\Exceptions\InvalidDateException;
 use Closure;
 use DatePeriod;
@@ -19,7 +20,6 @@ use DateTimeZone;
 use InvalidArgumentException;
 use Symfony\Component\Translation\Loader\ArrayLoader;
 use Symfony\Component\Translation\Translator;
-use Symfony\Component\Translation\TranslatorInterface;
 
 /**
  * A simple API extension for DateTime
@@ -159,7 +159,7 @@ class Carbon extends DateTime
     /**
      * A translator to ... er ... translate stuff.
      *
-     * @var \Symfony\Component\Translation\TranslatorInterface
+     * @var \Symfony\Contracts\Translation\TranslatorInterface
      */
     protected static $translator;
 
@@ -1083,11 +1083,10 @@ class Carbon extends DateTime
     ///////////////////////////////////////////////////////////////////
     /////////////////////// LOCALIZATION //////////////////////////////
     ///////////////////////////////////////////////////////////////////
-
     /**
      * Initialize the translator instance if necessary.
      *
-     * @return \Symfony\Component\Translation\TranslatorInterface
+     * @return \Symfony\Contracts\Translation\TranslatorInterface
      */
     protected static function translator()
     {
@@ -1103,7 +1102,7 @@ class Carbon extends DateTime
     /**
      * Get the translator instance in use
      *
-     * @return \Symfony\Component\Translation\TranslatorInterface
+     * @return \Symfony\Contracts\Translation\TranslatorInterface
      */
     public static function getTranslator()
     {
@@ -1113,7 +1112,7 @@ class Carbon extends DateTime
     /**
      * Set the translator instance to use
      *
-     * @param \Symfony\Component\Translation\TranslatorInterface $translator
+     * @param \Symfony\Contracts\Translation\TranslatorInterface $translator
      */
     public static function setTranslator(TranslatorInterface $translator)
     {
diff --git a/vendor/nesbot/carbon/src/Carbon/CarbonInterval.php b/vendor/nesbot/carbon/src/Carbon/CarbonInterval.php
index 514ca6e..91bedf2 100644
--- a/vendor/nesbot/carbon/src/Carbon/CarbonInterval.php
+++ b/vendor/nesbot/carbon/src/Carbon/CarbonInterval.php
@@ -11,11 +11,11 @@
 
 namespace Carbon;
 
+use Symfony\Contracts\Translation\TranslatorInterface;
 use DateInterval;
 use InvalidArgumentException;
 use Symfony\Component\Translation\Loader\ArrayLoader;
 use Symfony\Component\Translation\Translator;
-use Symfony\Component\Translation\TranslatorInterface;
 
 /**
  * A simple API extension for DateInterval.
@@ -80,7 +80,7 @@ class CarbonInterval extends DateInterval
     /**
      * A translator to ... er ... translate stuff
      *
-     * @var \Symfony\Component\Translation\TranslatorInterface
+     * @var \Symfony\Contracts\Translation\TranslatorInterface
      */
     protected static $translator;
 
@@ -240,11 +240,10 @@ class CarbonInterval extends DateInterval
     ///////////////////////////////////////////////////////////////////
     /////////////////////// LOCALIZATION //////////////////////////////
     ///////////////////////////////////////////////////////////////////
-
     /**
      * Initialize the translator instance if necessary.
      *
-     * @return \Symfony\Component\Translation\TranslatorInterface
+     * @return \Symfony\Contracts\Translation\TranslatorInterface
      */
     protected static function translator()
     {
@@ -260,7 +259,7 @@ class CarbonInterval extends DateInterval
     /**
      * Get the translator instance in use
      *
-     * @return \Symfony\Component\Translation\TranslatorInterface
+     * @return \Symfony\Contracts\Translation\TranslatorInterface
      */
     public static function getTranslator()
     {
@@ -270,7 +269,7 @@ class CarbonInterval extends DateInterval
     /**
      * Set the translator instance to use
      *
-     * @param TranslatorInterface $translator
+     * @param \Symfony\Contracts\Translation\TranslatorInterface $translator
      */
     public static function setTranslator(TranslatorInterface $translator)
     {
