modules/contrib/order/order.module
modules/contrib/order/src/Entity/Store.php
modules/contrib/order/src/Plugin/Field/FieldType/ProductEntityReference.php
modules/contrib/order/theme/item.inc
modules/contrib/order/theme/order.inc
modules/contrib/order/theme/product.inc
modules/contrib/order/src/Annotation/Checkout.php
modules/contrib/order/src/Form/CheckoutFormBase.php
modules/contrib/order/src/Annotation/OrderProcess.php
modules/contrib/order/src/Controller/OrderController.php
modules/contrib/order/src/Form/DefaultCheckoutForm.php
modules/contrib/order/src/Form/ProductForm.php
modules/contrib/order/src/Plugin/Field/FieldWidget/ProductWidget.php
modules/contrib/order/src/Plugin/Order/Checkout/DefaultCheckout.php
modules/contrib/order/src/Plugin/Order/Process/EmailProcess.php
modules/contrib/order/src/Form/ProductRevisionDeleteForm.php
modules/contrib/order/src/Plugin/OrderProcessInterface.php
modules/contrib/order/src/Plugin/OrderProcessManager.php
modules/contrib/order/src/Plugin/OrderProcessPluginBase.php
modules/contrib/order/src/ProductAccessControlHandler.php
modules/contrib/order/src/ProductHtmlRouteProvider.php
modules/contrib/order/src/Form/ProductRevisionRevertForm.php
modules/contrib/order/src/ProductStorage.php
modules/contrib/order/src/Controller/ProductController.php
modules/contrib/order/src/Form/ProductRevisionRevertTranslationForm.php
modules/contrib/order/src/ProductStorageInterface.php
modules/contrib/order/src/ProductStorageSchema.php
modules/contrib/order/src/Form/ProductTypeDeleteForm.php
modules/contrib/order/src/ProductTypeListBuilder.php
modules/contrib/order/src/Form/ProductTypeForm.php
modules/contrib/order/src/StoreListBuilder.php
modules/contrib/order/src/Form/StoreDeleteForm.php
modules/contrib/order/src/Form/StoreForm.php
modules/contrib/order/src/Entity/Item.php
modules/contrib/order/src/Entity/Order.php
modules/contrib/order/src/ItemAccessControlHandler.php
modules/contrib/order/src/OrderAccessControlHandler.php
modules/contrib/order/src/Plugin/Block/OrderCountBlock.php
modules/contrib/order/src/Entity/Product.php
modules/contrib/order/src/Plugin/Block/OrderViewBlock.php
modules/contrib/order/src/Plugin/Block/OrderViewButtonBlock.php
modules/contrib/order/src/Plugin/CheckoutInterface.php
modules/contrib/order/src/Plugin/CheckoutManager.php
modules/contrib/order/src/Plugin/CheckoutPluginBase.php
modules/contrib/order/src/Plugin/Field/FieldFormatter/ProductReferenceAddToCartFormatter.php
modules/contrib/order/src/Entity/ProductInterface.php
modules/contrib/order/src/Entity/ProductType.php

9 files with changes
====================

1) modules/contrib/order/src/Form/StoreForm.php:261

    ---------- begin diff ----------
@@ @@

     switch ($status) {
       case SAVED_NEW:
-        drupal_set_message($this->t('Created the %label Store.', [
+        $this->messenger()->addStatus($this->t('Created the %label Store.', [
           '%label' => $store->label(),
         ]));
         break;

       default:
-        drupal_set_message($this->t('Saved the %label Store.', [
+        $this->messenger()->addStatus($this->t('Saved the %label Store.', [
           '%label' => $store->label(),
         ]));
     }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/order/src/Form/StoreDeleteForm.php:37

    ---------- begin diff ----------
@@ @@
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->entity->delete();

-    drupal_set_message(
-      $this->t('content @type: deleted @label.',
-        [
-          '@type' => $this->entity->bundle(),
-          '@label' => $this->entity->label(),
-        ]
-        )
-    );
+    $this->messenger()->addStatus($this->t('content @type: deleted @label.',
+      [
+        '@type' => $this->entity->bundle(),
+        '@label' => $this->entity->label(),
+      ]
+      ));

     $form_state->setRedirectUrl($this->getCancelUrl());
   }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/order/src/Form/ProductTypeForm.php:48

    ---------- begin diff ----------
@@ @@

     switch ($status) {
       case SAVED_NEW:
-        drupal_set_message($this->t('Created the %label Product type.', [
+        $this->messenger()->addStatus($this->t('Created the %label Product type.', [
           '%label' => $product_type->label(),
         ]));
         break;

       default:
-        drupal_set_message($this->t('Saved the %label Product type.', [
+        $this->messenger()->addStatus($this->t('Saved the %label Product type.', [
           '%label' => $product_type->label(),
         ]));
     }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/order/src/Form/ProductTypeDeleteForm.php:37

    ---------- begin diff ----------
@@ @@
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->entity->delete();

-    drupal_set_message(
-      $this->t('content @type: deleted @label.',
-        [
-          '@type' => $this->entity->bundle(),
-          '@label' => $this->entity->label(),
-        ]
-        )
-    );
+    $this->messenger()->addStatus($this->t('content @type: deleted @label.',
+      [
+        '@type' => $this->entity->bundle(),
+        '@label' => $this->entity->label(),
+      ]
+      ));

     $form_state->setRedirectUrl($this->getCancelUrl());
   }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/order/src/Form/ProductRevisionRevertTranslationForm.php:109

    ---------- begin diff ----------
@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/order/src/Form/ProductRevisionRevertForm.php:122

    ---------- begin diff ----------
@@ @@
       '%title' => $this->revision->label(),
       '%revision' => $this->revision->getRevisionId(),
     ]);
-    drupal_set_message($this->t('Product %title has been reverted to the revision from %revision-date.', [
+    $this->messenger()->addStatus($this->t('Product %title has been reverted to the revision from %revision-date.', [
       '%title' => $this->revision->label(),
       '%revision-date' => $this->dateFormatter->format($original_revision_timestamp),
     ]));
@@ @@
   protected function prepareRevertedRevision(ProductInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/order/src/Form/ProductRevisionDeleteForm.php:72

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return $this->t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => format_date($this->revision->getRevisionCreationTime())]);
+    return $this->t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime())]);
   }

   /**
@@ @@
       '%title' => $this->revision->label(),
       '%revision' => $this->revision->getRevisionId(),
     ]);
-    drupal_set_message($this->t('Revision from %revision-date of Product %title has been deleted.', [
-      '%revision-date' => format_date($this->revision->getRevisionCreationTime()),
+    $this->messenger()->addStatus($this->t('Revision from %revision-date of Product %title has been deleted.', [
+      '%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()),
       '%title' => $this->revision->label(),
     ]));
     $form_state->setRedirect(
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * FormatDateRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/order/src/Form/ProductForm.php:73

    ---------- begin diff ----------
@@ @@
       $entity->setNewRevision();

       // If a new revision is created, save the current user as revision author.
-      $entity->setRevisionCreationTime(REQUEST_TIME);
+      $entity->setRevisionCreationTime(\Drupal::time()->getRequestTime());
       $entity->setRevisionUserId($this->account->id());
     }
     else {
@@ @@

     switch ($status) {
       case SAVED_NEW:
-        drupal_set_message($this->t('Created the %label Product.', [
+        $this->messenger()->addStatus($this->t('Created the %label Product.', [
           '%label' => $entity->label(),
         ]));
         break;

       default:
-        drupal_set_message($this->t('Saved the %label Product.', [
+        $this->messenger()->addStatus($this->t('Saved the %label Product.', [
           '%label' => $entity->label(),
         ]));
     }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/order/src/Controller/ProductController.php:53

    ---------- begin diff ----------
@@ @@
    * Displays a Product revision.
    */
   public function revisionShow($product_revision) {
-    $product = $this->entityManager()->getStorage('product')->loadRevision($product_revision);
-    $view_builder = $this->entityManager()->getViewBuilder('product');
+    $product = \Drupal::service('entity_type.manager')->getStorage('product')->loadRevision($product_revision);
+    $view_builder = \Drupal::service('entity_type.manager')->getViewBuilder('product');

     return $view_builder->view($product);
   }
@@ @@
    * Page title callback for a Product revision.
    */
   public function revisionPageTitle($product_revision) {
-    $product = $this->entityManager()->getStorage('product')->loadRevision($product_revision);
+    $product = \Drupal::service('entity_type.manager')->getStorage('product')->loadRevision($product_revision);
     return $this->t('Revision of %title from %date', [
       '%title' => $product->label(),
       '%date' => $this->dateFormatter->format($product->getRevisionCreationTime()),
@@ @@
     $langname = $product->language()->getName();
     $languages = $product->getTranslationLanguages();
     $has_translations = (count($languages) > 1);
-    $product_storage = $this->entityManager()->getStorage('product');
+    $product_storage = \Drupal::service('entity_type.manager')->getStorage('product');

     $build['#title'] = $has_translations ? $this->t('@langname revisions for %title', [
       '@langname' => $langname,
@@ @@
           ]));
         }
         else {
-          $link = $product->link($date);
+          $link = $product->toLink($date)->toString();
         }

         $row = [];
    ----------- end diff -----------

Applied rules:
 * EntityInterfaceLinkRector
 * EntityManagerRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 9 files have been changed by Rector                                       

