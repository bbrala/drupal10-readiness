modules/contrib/cloudflare/cloudflare.install
modules/contrib/cloudflare/modules/cloudflarepurger/tests/src/Unit/CredentialTestCheckTest.php
modules/contrib/cloudflare/tests/modules/cloudflare_form_tester/src/Mocks/ComposerDependenciesCheckMock.php
modules/contrib/cloudflare/tests/modules/cloudflare_form_tester/src/Mocks/ZoneMock.php
modules/contrib/cloudflare/cloudflare.module
modules/contrib/cloudflare/modules/cloudflarepurger/src/EventSubscriber/CloudFlareCacheTagHeaderGenerator.php
modules/contrib/cloudflare/tests/src/Functional/CloudFlareAdminSettingsFormTest.php
modules/contrib/cloudflare/modules/cloudflarepurger/tests/src/Unit/DailyTagPurgeLimitCheckTest.php
modules/contrib/cloudflare/modules/cloudflarepurger/tests/src/Unit/DiagnosticCheckTestBase.php
modules/contrib/cloudflare/modules/cloudflarepurger/src/Plugin/Purge/DiagnosticCheck/ApiRateLimitCheck.php
modules/contrib/cloudflare/src/CloudFlareComposerDependenciesCheckInterface.php
modules/contrib/cloudflare/src/CloudFlareStateInterface.php
modules/contrib/cloudflare/src/CloudFlareTimestampInterface.php
modules/contrib/cloudflare/src/CloudFlareZoneInterface.php
modules/contrib/cloudflare/src/ComposerDependenciesCheck.php
modules/contrib/cloudflare/modules/cloudflarepurger/src/Plugin/Purge/DiagnosticCheck/ComposerDependenciesCheck.php
modules/contrib/cloudflare/modules/cloudflarepurger/src/Plugin/Purge/DiagnosticCheck/CredentialCheck.php
modules/contrib/cloudflare/src/EventSubscriber/ClientIpRestore.php
modules/contrib/cloudflare/modules/cloudflarepurger/src/Plugin/Purge/DiagnosticCheck/DailyTagPurgeLimitCheck.php
modules/contrib/cloudflare/modules/cloudflarepurger/src/Plugin/Purge/Purger/CloudFlarePurger.php
modules/contrib/cloudflare/tests/src/Functional/CloudFlareAdminSettingsInvalidFormTest.php
modules/contrib/cloudflare/modules/cloudflarepurger/tests/src/Unit/ApiRateLimitCheckTest.php
modules/contrib/cloudflare/tests/src/Functional/ComposerDependencyTest.php
modules/contrib/cloudflare/src/Exception/ComposerDependencyException.php
modules/contrib/cloudflare/src/Form/SettingsForm.php
modules/contrib/cloudflare/tests/src/Unit/ClientIpRestoreTest.php
modules/contrib/cloudflare/src/Form/ZoneSelectionForm.php
modules/contrib/cloudflare/tests/src/Unit/StateTest.php
modules/contrib/cloudflare/src/State.php
modules/contrib/cloudflare/src/Timestamp.php
modules/contrib/cloudflare/src/Wizard/ConfigWizard.php
modules/contrib/cloudflare/src/Zone.php
modules/contrib/cloudflare/tests/modules/cloudflare_form_tester/cloudflare_form_tester.module
modules/contrib/cloudflare/tests/modules/cloudflare_form_tester/src/CloudflareFormTesterServiceProvider.php

10 files with changes
=====================

1) modules/contrib/cloudflare/modules/cloudflarepurger/src/EventSubscriber/CloudFlareCacheTagHeaderGenerator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cloudflarepurger\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponseInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;

@@ @@
   /**
    * Generates a 'Cache-Tag' header in the format expected by CloudFlare.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


2) modules/contrib/cloudflare/src/EventSubscriber/ClientIpRestore.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cloudflare\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Url;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\IpUtils;
 use Psr\Log\LoggerInterface;
@@ @@
   /**
    * Restores the origination client IP delivered to Drupal from CloudFlare.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     if (!$this->isClientIpRestoreEnabled) {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


3) modules/contrib/cloudflare/modules/cloudflarepurger/tests/src/Unit/DiagnosticCheckTestBase.php:52

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalState = new CoreState(new KeyValueMemoryFactory(), new MemoryBackend('test'), new NullLockBackend());
-    $this->timestampStub = $this->getMockBuilder('Drupal\cloudflare\Timestamp')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->timestampStub = $this->createMock('Drupal\cloudflare\Timestamp');
     $this->cloudflareState = new CloudFlareState($this->drupalState, $this->timestampStub);

     $this->container = new ContainerBuilder();
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/cloudflare/modules/cloudflarepurger/tests/src/Unit/DailyTagPurgeLimitCheckTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->container = new ContainerBuilder();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/cloudflare/modules/cloudflarepurger/tests/src/Unit/CredentialTestCheckTest.php:25

    ---------- begin diff ----------
@@ @@
    */
   public function testCredentialTestCheck($cred_status, $expected_severity) {
     $config_factory = $this->createMock('\Drupal\Core\Config\ConfigFactoryInterface');
-    $config = $this->getMockBuilder('Drupal\Core\Config\Config')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock('Drupal\Core\Config\Config');
     $config->expects($this->atLeastOnce())
       ->method('get')
       ->with('valid_credentials')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/cloudflare/tests/src/Unit/StateTest.php:22

    ---------- begin diff ----------
@@ @@
    * Tests tag count tracking functionality.
    */
   public function testTagPurgeDailyCountIncrements() {
-    $timestamp_stub = $this->getMockBuilder('Drupal\cloudflare\Timestamp')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $timestamp_stub = $this->createMock('Drupal\cloudflare\Timestamp');

     // Configure the stub.
     $timestamp_stub->method('now')
@@ @@
    * Tests tag count boundary functionality.
    */
   public function testTagPurgeBoundaryIncrements() {
-    $timestamp_stub = $this->getMockBuilder('Drupal\cloudflare\Timestamp')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $timestamp_stub = $this->createMock('Drupal\cloudflare\Timestamp');

     // Configure the stub.
     $timestamp_stub->method('now')
@@ @@
    * Tests tag count tracking functionality.
    */
   public function testApiRateLimitCountIncrements() {
-    $timestamp_stub = $this->getMockBuilder('Drupal\cloudflare\Timestamp')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $timestamp_stub = $this->createMock('Drupal\cloudflare\Timestamp');

     // Configure the stub.
     $timestamp_stub->method('now')
@@ @@
    * Tests tag count boundary functionality.
    */
   public function testApiRateLimitBoundaryIncrements() {
-    $timestamp_stub = $this->getMockBuilder('Drupal\cloudflare\Timestamp')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $timestamp_stub = $this->createMock('Drupal\cloudflare\Timestamp');

     // Configure the stub.
     $timestamp_stub->method('now')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/cloudflare/tests/src/Unit/ClientIpRestoreTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\cloudflare\Unit;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Cache\MemoryBackend;
@@ @@
 use GuzzleHttp\ClientInterface;
 use Psr\Log\LoggerInterface;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

 /**
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->container = new ContainerBuilder();
     $this->container->set('string_translation', $this->getStringTranslationStub());
@@ @@
     }

     $config_factory = $this->createMock('\Drupal\Core\Config\ConfigFactoryInterface');
-    $config = $this->getMockBuilder('Drupal\Core\Config\Config')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock('Drupal\Core\Config\Config');

     // Create a map of arguments to return values.
     $map = [
@@ @@
     }

     $request->overrideGlobals();
-    $event = new GetResponseEvent($kernel, $request, 'foo', new NotFoundHttpException('foo'));
+    $event = new RequestEvent($kernel, $request, 'foo', new NotFoundHttpException('foo'));
     $client_ip_restore->onRequest($event);
     $this->assertEquals($expected_client_ip, $request->getClientIp());
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/cloudflare/tests/src/Functional/ComposerDependencyTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Setup the test.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser(['administer cloudflare']);
     $this->route = Url::fromRoute('cloudflare.admin_settings_form');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/cloudflare/tests/src/Functional/CloudFlareAdminSettingsInvalidFormTest.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * Setup the test.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser(['administer cloudflare']);
@@ @@
       'apikey' => '68ow48650j63zfzx1w9jd29cr367u0ezb6a4g',
       'email' => 'test@test.com',
     ];
-    $this->drupalPostForm($this->route, $edit, t('Next'));
+    $this->drupalGet($this->route);
+    $this->submitForm($edit, t('Next'));
     $this->assertSession()->addressEquals('/admin/config/services/cloudflare');
   }

@@ @@
       'email' => 'test@test.com',
     ];
     $this->drupalLogin($this->adminUser);
-    $this->drupalPostForm($this->route, $edit, t('Next'));
+    $this->drupalGet($this->route);
+    $this->submitForm($edit, t('Next'));
     $this->assertSession()->pageTextContains('Invalid Api Key: Key can only contain lowercase or numerical characters.');
   }

@@ @@
       'email' => 'test@test.com',
     ];
     $this->drupalLogin($this->adminUser);
-    $this->drupalPostForm($this->route, $edit, t('Next'));
+    $this->drupalGet($this->route);
+    $this->submitForm($edit, t('Next'));
     $this->assertSession()->pageTextContains('Invalid Api Key: Key should be 37 chars long.');
   }

@@ @@
       'email' => 'test@test.com',
     ];
     $this->drupalLogin($this->adminUser);
-    $this->drupalPostForm($this->route, $edit, t('Next'));
+    $this->drupalGet($this->route);
+    $this->submitForm($edit, t('Next'));
     $this->assertSession()->pageTextContains('Invalid Api Key: Key can only contain alphanumeric characters.');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/cloudflare/tests/src/Functional/CloudFlareAdminSettingsFormTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Setup the test.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser(['administer cloudflare']);
@@ @@
       'email' => 'test@test.com',
     ];
     ComposerDependenciesCheckMock::mockComposerDependenciesMet(TRUE);
-    $this->drupalPostForm($this->route, $edit, t('Next'));
+    $this->drupalGet($this->route);
+    $this->submitForm($edit, t('Next'));
     $this->assertSession()->addressEquals('/admin/config/services/cloudflare/two?js=nojs');
-    $this->drupalPostForm(NULL, [], t('Finish'));
+    $this->submitForm([], t('Finish'));
     $this->assertSession()->responseContains('68ow48650j63zfzx1w9jd29cr367u0ezb6a4g');
     $this->assertSession()->responseContains('test@test.com');
     $this->assertSession()->responseContains('testdomain.com');
@@ @@
     ];
     ComposerDependenciesCheckMock::mockComposerDependenciesMet(TRUE);
     ZoneMock::mockMultiZoneAccount(TRUE);
-    $this->drupalPostForm($this->route, $edit, t('Next'));
+    $this->drupalGet($this->route);
+    $this->submitForm($edit, t('Next'));
     $this->assertSession()->addressEquals('/admin/config/services/cloudflare/two?js=nojs');
-    $this->drupalPostForm(NULL, ['zone_selection' => "123456789999"], t('Finish'));
+    $this->submitForm(['zone_selection' => "123456789999"], t('Finish'));
     $this->assertSession()->responseContains('68ow48650j63zfzx1w9jd29cr367u0ezb6a4g');
     $this->assertSession()->responseContains('testdomain2.com');
   }
@@ @@

     $zone_mock = new ZoneMock($config_factory, $logger_channel_cloudflare, $cloudflare_state, $composer_dependencies_check);
     $container->set('cloudflare.zone', $zone_mock);
+    $this->drupalGet($this->route);

-    $this->drupalPostForm($this->route, $edit, t('Next'));
+    $this->submitForm($edit, t('Next'));
     $this->assertSession()->pageTextContains('Please enter a host without http/https');
   }

@@ @@
       'bypass_host' => 'http://blah.com',
     ];
     ZoneMock::mockAssertValidCredentials(TRUE);
-    $this->drupalPostForm($this->route, $edit, t('Next'));
+    $this->drupalGet($this->route);
+    $this->submitForm($edit, t('Next'));
     $this->assertSession()->pageTextContains('Please enter a host without http/https');
   }

@@ @@
       'client_ip_restore_enabled' => TRUE,
       'bypass_host' => 'blah!@#!@',
     ];
-    $this->drupalPostForm($this->route, $edit, t('Next'));
+    $this->drupalGet($this->route);
+    $this->submitForm($edit, t('Next'));
     $this->assertSession()->pageTextContains('You have entered an invalid host.');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process "modules/contrib/cloudflare/src/Zone.php" file, due  
         to:                                                                    
         "System error: "Method assert() was not found in reflection of class   
         Drupal\cloudflare\Zone."                                               
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 419          

 [ERROR] Could not process                                                      
         "modules/contrib/cloudflare/tests/modules/cloudflare_form_tester/src/Mo
         cks/ZoneMock.php" file, due to:                                        
         "System error: "Method assert() was not found in reflection of class   
         Drupal\cloudflare_form_tester\Mocks\ZoneMock."                         
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 419          

