diff --git a/scheduled_message.install b/scheduled_message.install
index 3b2f86b..2f0ac70 100644
--- a/scheduled_message.install
+++ b/scheduled_message.install
@@ -1,12 +1,13 @@
 <?php
 
+use Drupal\scheduled_message\Entity\ScheduledMessage;
 /**
  * Update entity field definitions to match schema.
  */
 function scheduled_message_update_8001(&$sandbox) {
   $dm = \Drupal::entityDefinitionUpdateManager();
   $entity_def = $dm->getEntityType('scheduled_message');
-  $base_fields = \Drupal\scheduled_message\Entity\ScheduledMessage::baseFieldDefinitions($entity_def);
+  $base_fields = ScheduledMessage::baseFieldDefinitions($entity_def);
 
   $remove = ['message_module', 'message_template', 'send_at', 'sent'];
   foreach ($remove as $field) {
diff --git a/scheduled_message_message/src/EventSubscriber/ScheduledMessageMessageSubscriber.php b/scheduled_message_message/src/EventSubscriber/ScheduledMessageMessageSubscriber.php
index df58040..9af61f9 100644
--- a/scheduled_message_message/src/EventSubscriber/ScheduledMessageMessageSubscriber.php
+++ b/scheduled_message_message/src/EventSubscriber/ScheduledMessageMessageSubscriber.php
@@ -9,8 +9,6 @@ use Drupal\message_notify\MessageNotifier;
 use Drupal\scheduled_message\Event\ScheduledMessageEvent;
 use Drupal\scheduled_message\Event\ScheduledMessageEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
diff --git a/src/Event/ScheduledMessageEvent.php b/src/Event/ScheduledMessageEvent.php
index 025a3a3..c0ed194 100644
--- a/src/Event/ScheduledMessageEvent.php
+++ b/src/Event/ScheduledMessageEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\scheduled_message\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\scheduled_message\Entity\ScheduledMessageInterface;
 use Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Scheduled Message event.
diff --git a/src/Form/ScheduledMessageForm.php b/src/Form/ScheduledMessageForm.php
index d341630..ae63fb4 100644
--- a/src/Form/ScheduledMessageForm.php
+++ b/src/Form/ScheduledMessageForm.php
@@ -20,7 +20,7 @@ class ScheduledMessageForm extends ContentEntityForm {
     $link = $entity->toLink($this->t('View'))->toRenderable();
 
     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];
 
     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New scheduled message %label has been created.', $message_arguments));
diff --git a/src/Plugin/QueueWorker/ScheduledMessageWorkerBase.php b/src/Plugin/QueueWorker/ScheduledMessageWorkerBase.php
index 9fe4bdb..3cf1ff2 100644
--- a/src/Plugin/QueueWorker/ScheduledMessageWorkerBase.php
+++ b/src/Plugin/QueueWorker/ScheduledMessageWorkerBase.php
@@ -73,7 +73,7 @@ abstract class ScheduledMessageWorkerBase extends QueueWorkerBase implements Con
     $schedule = $message->get('bundle')->entity;
 
     $event = new ScheduledMessageEvent($message, $schedule);
-    $this->eventDispatcher->dispatch(ScheduledMessageEvents::SEND_MESSAGE, $event);
+    $this->eventDispatcher->dispatch($event, ScheduledMessageEvents::SEND_MESSAGE);
   }
 
 }
