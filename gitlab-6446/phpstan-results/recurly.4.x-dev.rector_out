modules/contrib/recurly/modules/recurly_hosted/recurly_hosted.install
modules/contrib/recurly/modules/recurlyjs/src/Controller/RecurlyJsSubscriptionSignupController.php
modules/contrib/recurly/recurly.module
modules/contrib/recurly/src/Controller/RecurlySubscriptionReactivateController.php
modules/contrib/recurly/src/RecurlyUrlManager.php
modules/contrib/recurly/tests/modules/recurly_test_client/src/RecurlyMockClient.php
modules/contrib/recurly/modules/recurly_hosted/recurly_hosted.module
modules/contrib/recurly/src/Routing/RecurlyRouteSubscriber.php
modules/contrib/recurly/modules/recurly_hosted/src/Controller/RecurlyHostedAccountRedirectController.php
modules/contrib/recurly/src/Controller/RecurlySubscriptionSelectPlanController.php
modules/contrib/recurly/tests/modules/recurly_test_client/src/RecurlyMockClientFactory.php
modules/contrib/recurly/tests/src/Functional/SettingsFormTest.php
modules/contrib/recurly/modules/recurlyjs/src/Event/Subscription.php
modules/contrib/recurly/modules/recurly_hosted/src/Plugin/Derivative/RecurlyHostedLocalTask.php
modules/contrib/recurly/modules/recurlyjs/src/Event/SubscriptionAlter.php
modules/contrib/recurly/modules/recurlyjs/src/Event/SubscriptionCreated.php
modules/contrib/recurly/modules/recurlyjs/src/Form/RecurlyJsFormBase.php
modules/contrib/recurly/modules/recurly_hosted/src/RecurlyHostedEntityTypeInfo.php
modules/contrib/recurly/modules/recurly_hosted/src/Routing/RecurlyHostedRouteSubscriber.php
modules/contrib/recurly/modules/recurly_hosted/tests/src/Functional/SettingsFormTest.php
modules/contrib/recurly/src/Form/RecurlyConfigForm.php
modules/contrib/recurly/tests/src/Functional/SubscriptionPlansFormTest.php
modules/contrib/recurly/recurly.views.inc
modules/contrib/recurly/src/Form/RecurlyNonConfigForm.php
modules/contrib/recurly/tests/src/Functional/SubscriptionSignupTest.php
modules/contrib/recurly/src/Form/RecurlyRedeemCouponForm.php
modules/contrib/recurly/modules/recurlyjs/src/Form/RecurlyJsSubscribeForm.php
modules/contrib/recurly/modules/recurlyjs/recurlyjs.install
modules/contrib/recurly/modules/recurlyjs/recurlyjs.module
modules/contrib/recurly/src/Access/RecurlyAccess.php
modules/contrib/recurly/tests/src/Functional/UserRegistrationTest.php
modules/contrib/recurly/tests/src/Kernel/RecurlyInvoicesControllerTest.php
modules/contrib/recurly/src/Access/RecurlyAccessCancelLatest.php
modules/contrib/recurly/src/Access/RecurlyAccessList.php
modules/contrib/recurly/src/Access/RecurlyAccessLocalAccount.php
modules/contrib/recurly/src/Access/RecurlyAccessReactivateLatest.php
modules/contrib/recurly/src/Access/RecurlyAccessSelectPlan.php
modules/contrib/recurly/src/Form/RecurlySettingsForm.php
modules/contrib/recurly/src/Access/RecurlyAccessSignUp.php
modules/contrib/recurly/src/Access/RecurlyAccessUser.php
modules/contrib/recurly/src/Controller/RecurlyController.php
modules/contrib/recurly/src/Controller/RecurlyInvoicesController.php
modules/contrib/recurly/modules/recurlyjs/src/Form/RecurlyJsUpdateBillingForm.php
modules/contrib/recurly/modules/recurlyjs/src/Plugin/Derivative/RecurlyJsLocalTask.php
modules/contrib/recurly/src/Controller/RecurlyManageSubscriptionController.php
modules/contrib/recurly/src/Controller/RecurlyPushListenerController.php
modules/contrib/recurly/modules/recurlyjs/src/RecurlyJsEvents.php
modules/contrib/recurly/modules/recurlyjs/src/Routing/RecurlyJsRouteSubscriber.php
modules/contrib/recurly/tests/src/Kernel/RecurlyManageSubscriptionControllerTest.php
modules/contrib/recurly/modules/recurlyjs/tests/src/Functional/SettingsFormTest.php
modules/contrib/recurly/tests/src/Kernel/RecurlyPagerManagerTest.php
modules/contrib/recurly/src/Controller/RecurlySubscriptionCancelController.php
modules/contrib/recurly/src/Controller/RecurlySubscriptionChangeController.php
modules/contrib/recurly/src/Controller/RecurlySubscriptionListController.php
modules/contrib/recurly/tests/src/Kernel/RecurlySubscriptionSelectPlanControllerTest.php
modules/contrib/recurly/src/Form/RecurlySubscriptionCancelConfirmForm.php
modules/contrib/recurly/recurly.api.php
modules/contrib/recurly/recurly.install
modules/contrib/recurly/tests/src/Unit/RecurlyUrlManagerTest.php
modules/contrib/recurly/src/Form/RecurlySubscriptionChangeConfirmForm.php
modules/contrib/recurly/src/Form/RecurlySubscriptionPlansForm.php
modules/contrib/recurly/src/Plugin/Derivative/RecurlyLocalTask.php
modules/contrib/recurly/src/Plugin/views/field/AccountCode.php
modules/contrib/recurly/src/Plugin/views/relationship/EntityOwner.php
modules/contrib/recurly/src/Plugin/views/relationship/RecurlyEntityOwnerReverse.php
modules/contrib/recurly/src/RecurlyClientFactory.php
modules/contrib/recurly/src/RecurlyEntityOperations.php
modules/contrib/recurly/src/RecurlyEntityTypeInfo.php
modules/contrib/recurly/src/RecurlyFormatManager.php
modules/contrib/recurly/src/RecurlyPagerManager.php
modules/contrib/recurly/src/RecurlyPreprocess.php
modules/contrib/recurly/src/RecurlyTokenManager.php

11 files with changes
=====================

1) modules/contrib/recurly/tests/src/Unit/RecurlyUrlManagerTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $config_factory = $this->getConfigFactoryStub(['recurly.settings' => ['verbose' => TRUE]]);

     $this->recurlyUrlManager = new RecurlyUrlManager($config_factory);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/recurly/tests/src/Kernel/RecurlySubscriptionSelectPlanControllerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\recurly\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\recurly\Controller\RecurlySubscriptionSelectPlanController;
@@ @@
  */
 class RecurlySubscriptionSelectPlanControllerTest extends KernelTestBase {

+  use ProphecyTrait;
   use UserCreationTrait;

   /**
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['recurly', 'user', 'system']);
@@ @@
     $controller = RecurlySubscriptionSelectPlanController::create(\Drupal::getContainer());
     $response = $controller->planSelect(\Drupal::routeMatch());
     $this->assertArrayHasKey('#theme', $response);
-    $this->assertEqual($response['#mode'], RecurlySubscriptionSelectPlanController::SELECT_PLAN_MODE_SIGNUP);
+    $this->assertEquals($response['#mode'], RecurlySubscriptionSelectPlanController::SELECT_PLAN_MODE_SIGNUP);
   }

   /**
@@ @@
     $routeMatch->getParameter('user')->willReturn($user);
     $response = $controller->planSelect($routeMatch->reveal(), NULL, 'latest');
     $this->assertArrayHasKey('#theme', $response);
-    $this->assertEqual($response['#mode'], 'change');
+    $this->assertEquals($response['#mode'], 'change');

     $subscription_id = '32558dd8a07eec471fbe6642d3a422f4';
     $routeMatch = $this->prophesize(RouteMatchInterface::class);
@@ @@
     $routeMatch->getParameter('user')->willReturn($user);
     $response = $controller->planSelect($routeMatch->reveal(), NULL, $subscription_id);
     $this->assertArrayHasKey('#theme', $response);
-    $this->assertEqual($response['#mode'], 'change');
+    $this->assertEquals($response['#mode'], 'change');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/recurly/tests/src/Kernel/RecurlyPagerManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\recurly\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Pager\PagerManagerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\recurly\RecurlyPagerManager;
@@ @@
  */
 class RecurlyPagerManagerTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * Recurly pager object that mocks some features.
    *
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->mockRecurlyPager = new class extends \Recurly_Pager {
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/recurly/tests/src/Kernel/RecurlyManageSubscriptionControllerTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['recurly', 'user', 'system']);
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/recurly/tests/src/Kernel/RecurlyInvoicesControllerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\recurly\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Render\HtmlResponse;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
  */
 class RecurlyInvoicesControllerTest extends KernelTestBase {

+  use ProphecyTrait;
   use UserCreationTrait;

   /**
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['recurly', 'user', 'system']);
@@ @@
     $response = $this->controller->invoicesList($routeMatch->reveal());
     $this->assertArrayHasKey('#theme', $response);
     $this->assertArrayHasKey('#invoices', $response);
-    $this->assertEqual($response['#total'], count($response['#invoices']));
+    $this->assertEquals($response['#total'], count($response['#invoices']));
   }

   /**
@@ @@
     $routeMatch->getParameter('user')->willReturn($this->drupalUser);

     $response = $this->controller->getInvoice($routeMatch->reveal(), '1000');
-    $this->assertEqual($response['#theme'], 'recurly_invoice');
+    $this->assertEquals($response['#theme'], 'recurly_invoice');
     $this->assertArrayHasKey('#invoice', $response);
-    $this->assertEqual($response['#error_message'], NULL);
+    $this->assertEquals($response['#error_message'], NULL);

     // Verify #error_message if invoice state is not 'paid'.
     RecurlyMockClient::addResponse('GET', '/invoices/1001', 'invoices/show-200-past_due.xml');

     $response = $this->controller->getInvoice($routeMatch->reveal(), '1001');
-    $this->assertEqual($response['#theme'], 'recurly_invoice');
+    $this->assertEquals($response['#theme'], 'recurly_invoice');
     $this->assertStringContainsString('This invoice is past due!', $response['#error_message']);

     // Can't find invoice with that ID.
@@ @@
     $buffer = ob_get_contents();
     ob_end_clean();

-    $this->assertEqual($buffer, 'Here is that PDF you asked for');
+    $this->assertEquals($buffer, 'Here is that PDF you asked for');
     $this->assertInstanceOf(HtmlResponse::class, $response);
     $this->assertEquals(200, $response->getStatusCode());
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/recurly/tests/src/Functional/UserRegistrationTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $config = $this->config('user.settings');
@@ @@
     $edit['mail'] = $mail = $edit['name'] . '@example.com';
     $edit['pass[pass1]'] = $new_pass = $this->randomMachineName();
     $edit['pass[pass2]'] = $new_pass;
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, t('Create new account'));
     $this->container->get('entity_type.manager')
       ->getStorage('user')
       ->resetCache();
@@ @@
     // registration.
     // @see recurly_user_edit_form_submit_redirect()
     $url = $new_user->toUrl('recurly-signup');
-    $this->assertUrl($url);
+    $this->assertSession()->addressEquals($url);
     $this->assertSession()->pageTextContains('Silver Plan');

     $this->drupalLogout();
    ----------- end diff -----------

Applied rules:
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/recurly/tests/src/Functional/SubscriptionSignupTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Associate Recurly subscriptions with user entities. And enable the
     // "silver" mock plan.
@@ @@
     $this->drupalLogin($account);

     $this->drupalGet('user/' . $account->id() . '/subscription/signup');
-    $this->assertText('Silver Plan');
+    $this->assertSession()->pageTextContains('Silver Plan');
     // Without enabling either recurlyjs or recurly_host_pages you can't
     // get any further than this.
-    $this->assertText('Contact us to sign up');
+    $this->assertSession()->pageTextContains('Contact us to sign up');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/recurly/tests/src/Functional/SubscriptionPlansFormTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $permissions = [
@@ @@
    */
   public function testPlanFormWithoutCredentials() {
     $this->drupalGet('/admin/config/services/recurly/subscription-plans');
-    $this->assertResponse(200);
-    $this->assertText(RecurlyClientFactory::ERROR_MESSAGE_MISSING_API_KEY);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains(RecurlyClientFactory::ERROR_MESSAGE_MISSING_API_KEY);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/recurly/modules/recurlyjs/tests/src/Functional/SettingsFormTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $permissions = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/recurly/modules/recurlyjs/src/Form/RecurlyJsSubscribeForm.php:88

    ---------- begin diff ----------
@@ @@
     // Allow other modules the chance to alter the new Recurly Subscription
     // object before it is saved.
     $event = new SubscriptionAlter($subscription, $entity, $plan_code);
-    $this->eventDispatcher->dispatch(RecurlyJsEvents::SUBSCRIPTION_ALTER, $event);
+    $this->eventDispatcher->dispatch($event, RecurlyJsEvents::SUBSCRIPTION_ALTER);
     $subscription = $event->getSubscription();

     // Billing info is based on the token we retrieved from the Recurly JS API
@@ @@

     // Allow other modules to react to the new subscription being created.
     $event = new SubscriptionCreated($subscription, $entity, $plan_code);
-    $this->eventDispatcher->dispatch(RecurlyJsEvents::SUBSCRIPTION_CREATED, $event);
+    $this->eventDispatcher->dispatch($event, RecurlyJsEvents::SUBSCRIPTION_CREATED);
     $subscription = $event->getSubscription();

     $this->messenger()->addMessage($this->t('Account upgraded to @plan!', ['@plan' => $subscription->plan->name]));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/recurly/modules/recurlyjs/src/Event/Subscription.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurlyjs\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Recurly subscription event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/recurly/tests/src/Functional/SettingsFormTest.php"    
         file, due to:                                                          
         "System error: "Invalid value"                                         
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 212          

