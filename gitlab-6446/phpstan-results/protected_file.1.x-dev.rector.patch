diff --git a/protected_file.module b/protected_file.module
index 4914d4d..8eceb15 100644
--- a/protected_file.module
+++ b/protected_file.module
@@ -141,19 +141,19 @@ function template_preprocess_protected_file_widget_multiple(&$variables) {
     if ($element['#display_field']) {
       unset($widget['display']['#title']);
       $display = array(
-        'data' => render($widget['display']),
+        'data' => \Drupal::service('renderer')->render($widget['display']),
         'class' => array('checkbox'),
       );
     }
 
     unset($widget['protected_file']['#title']);
     $protected = array(
-      'data' => render($widget['protected_file']),
+      'data' => \Drupal::service('renderer')->render($widget['protected_file']),
       'class' => array('checkbox'),
     );
 
     $widget['_weight']['#attributes']['class'] = array($weight_class);
-    $weight = render($widget['_weight']);
+    $weight = \Drupal::service('renderer')->render($widget['_weight']);
 
     // Arrange the row with all of the rendered columns.
     $row = array();
@@ -230,7 +230,7 @@ function template_preprocess_protected_file_link(&$variables) {
   // to ensure different file URLs are generated for different sites in a
   // multisite setup, including HTTP and HTTPS versions of the same site.
   // Fix in https://www.drupal.org/node/2646744.
-  $url = file_create_url($file_entity->getFileUri());
+  $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file_entity->getFileUri());
   $variables['#cache']['contexts'][] = 'url.site';
   $variables['#cache']['contexts'][] = 'user.permissions';
 
@@ -281,7 +281,7 @@ function template_preprocess_protected_file_link(&$variables) {
   if (!$current_user->hasPermission('download protected file') && $protected) {
     $variables['attributes']->addClass('file--protected');
     if ($redirect_to_file) {
-      $redirect_uri = file_url_transform_relative(file_create_url($file_entity->getFileUri()));
+      $redirect_uri = \Drupal::service('file_url_generator')->generateString($file_entity->getFileUri());
     }
     else {
       $redirect_uri = \Drupal::request()->getRequestUri();
diff --git a/tests/src/Functional/ProtectedFileTest.php b/tests/src/Functional/ProtectedFileTest.php
index 53485b9..4a1c6f4 100644
--- a/tests/src/Functional/ProtectedFileTest.php
+++ b/tests/src/Functional/ProtectedFileTest.php
@@ -38,7 +38,7 @@ class ProtectedFileTest extends ProtectedFileTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
   }
 
@@ -51,10 +51,10 @@ class ProtectedFileTest extends ProtectedFileTestBase {
       'file_default_scheme' => 'private',
     ];
     // Check that public and private can be selected as default scheme.
-    $this->assertText('Public local files served by the webserver.');
-    $this->assertText('Private local files served by Drupal.');
-    $this->drupalPostForm(NULL, $fields, 'Save configuration');
-    $this->assertText('The configuration options have been saved.');
+    $this->assertSession()->pageTextContains('Public local files served by the webserver.');
+    $this->assertSession()->pageTextContains('Private local files served by Drupal.');
+    $this->submitForm($fields, 'Save configuration');
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
 
     $type_name = 'article';
     $field_name = strtolower($this->randomMachineName());
@@ -76,11 +76,11 @@ class ProtectedFileTest extends ProtectedFileTestBase {
     $this->assertFieldByXpath('//input[@id="edit-settings-uri-scheme-public" and @disabled="disabled"]', 'public', 'Upload destination setting disabled.');
 
     $this->drupalGet("admin/structure/types/manage/$type_name/display");
-    $this->assertFieldByName("fields[$field_name][type]", 'protected_file_formatter');
+    $this->assertSession()->fieldValueEquals("fields[$field_name][type]", 'protected_file_formatter');
     $this->drupalGet("admin/structure/types/manage/$type_name/form-display");
-    $this->assertFieldByName("fields[$field_name][type]", 'protected_file_widget');
+    $this->assertSession()->fieldValueEquals("fields[$field_name][type]", 'protected_file_widget');
     $this->drupalGet("admin/structure/types/manage/$type_name/fields/$field_id");
-    $this->assertFieldChecked('edit-settings-description-field');
+    $this->assertSession()->checkboxChecked('edit-settings-description-field');
 
     $contents = $this->randomMachineName(8);
     $contents_other = $this->randomMachineName(8);
@@ -95,11 +95,11 @@ class ProtectedFileTest extends ProtectedFileTestBase {
 
     $nid = $this->uploadNodeFiles([$file], $field_name, $type_name);
     $this->drupalGet("/node/$nid");
-    $this->assertText('file_test_1');
+    $this->assertSession()->pageTextContains('file_test_1');
 
     $nid = $this->uploadNodeFiles([$file_other], $field_name, $nid);
     $this->drupalGet("/node/$nid");
-    $this->assertText('file_test_2');
+    $this->assertSession()->pageTextContains('file_test_2');
 
     $node_storage = \Drupal::entityTypeManager()->getStorage('node');
     $node_storage->resetCache([$nid]);
@@ -122,44 +122,45 @@ class ProtectedFileTest extends ProtectedFileTestBase {
       $field_name . '[1][description]' => $description_other,
       $field_name . '[1][display]' => TRUE,
     );
-    $this->drupalPostForm('node/' . $nid . '/edit', $edit, t('Save'));
-    $this->assertText($description);
-    $this->assertNoText($file->getFilename());
-    $this->assertText($description_other);
+    $this->drupalGet('node/' . $nid . '/edit');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains($description);
+    $this->assertSession()->pageTextNotContains($file->getFilename());
+    $this->assertSession()->pageTextContains($description_other);
 
     $this->drupalGet("/node/$nid");
     $this->assertSession()->linkExists($description);
     $this->clickLink($description);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet("/node/$nid");
     $this->assertSession()->linkExists($description_other);
     $this->clickLink($description_other);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Anonymous can not access to file protected.
     $this->drupalLogout();
     $this->drupalGet("/node/$nid");
     $this->assertSession()->linkByHrefExists('/user/login', 0);
     $this->clickLink($description);
-    $this->assertText('Log in');
-    $this->assertResponse(200);
+    $this->assertSession()->pageTextContains('Log in');
+    $this->assertSession()->statusCodeEquals(200);
 
-    $url_file = file_create_url($file->getFileUri());
-    $url_file_other = file_create_url($file_other->getFileUri());
+    $url_file = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
+    $url_file_other = \Drupal::service('file_url_generator')->generateAbsoluteString($file_other->getFileUri());
 
     $this->drupalGet("/node/$nid");
     // Try to download the file directly.
     $this->drupalGet($url_file);
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $this->drupalGet("/node/$nid");
     $this->clickLink($description_other);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Try to download the file directly.
     $this->drupalGet($url_file_other);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalLogin($this->adminUser);
     $settings = [
@@ -176,9 +177,9 @@ class ProtectedFileTest extends ProtectedFileTestBase {
     $this->drupalLogout();
 
     $this->drupalGet("/node/$nid");
-    $file_uri = file_url_transform_relative(file_create_url($file->getFileUri()));
-    $this->assertLinkByHref('/user/login?destination=' . $file_uri, 0);
-    $this->assertLinkByHref('/user/login?destination', 0);
+    $file_uri = \Drupal::service('file_url_generator')->generateString($file->getFileUri());
+    $this->assertSession()->linkByHrefExists('/user/login?destination=' . $file_uri, 0);
+    $this->assertSession()->linkByHrefExists('/user/login?destination', 0);
   }
 
   /**
diff --git a/tests/src/Functional/ProtectedFileTestBase.php b/tests/src/Functional/ProtectedFileTestBase.php
index 84d9915..f6a09c6 100644
--- a/tests/src/Functional/ProtectedFileTestBase.php
+++ b/tests/src/Functional/ProtectedFileTestBase.php
@@ -39,7 +39,7 @@ abstract class ProtectedFileTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $permissions = array(
       'access content',
@@ -263,7 +263,7 @@ abstract class ProtectedFileTestBase extends BrowserTestBase {
       $node->save();
       $node_storage->resetCache(array($nid));
       $node = $node_storage->load($nid);
-      $this->assertNotEqual($nid, $node->getRevisionId(), 'Node revision exists.');
+      $this->assertNotEquals($nid, $node->getRevisionId(), 'Node revision exists.');
     }
 
     // Attach files to the node.
@@ -284,7 +284,8 @@ abstract class ProtectedFileTestBase extends BrowserTestBase {
         $edit[$name][] = $file_path;
       }
     }
-    $this->drupalPostForm("node/$nid/edit", $edit, 'Save');
+    $this->drupalGet("node/$nid/edit");
+    $this->submitForm($edit, 'Save');
 
     return $nid;
   }
