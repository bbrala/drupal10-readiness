diff --git a/cmrf_example/tests/src/Functional/LoadTest.php b/cmrf_example/tests/src/Functional/LoadTest.php
index c559a65..c118742 100644
--- a/cmrf_example/tests/src/Functional/LoadTest.php
+++ b/cmrf_example/tests/src/Functional/LoadTest.php
@@ -30,7 +30,7 @@ class LoadTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $entity=CMRFProfile::load('default');
     //this test will fail until you set up those properties correctly.
diff --git a/cmrf_views/src/Plugin/views/field/JSON.php b/cmrf_views/src/Plugin/views/field/JSON.php
index 2a7247a..0f2ce2c 100644
--- a/cmrf_views/src/Plugin/views/field/JSON.php
+++ b/cmrf_views/src/Plugin/views/field/JSON.php
@@ -4,6 +4,7 @@
 namespace Drupal\cmrf_views\Plugin\views\field;
 
 
+use Drupal\views\Plugin\views\field\Standard;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\display\DisplayPluginBase;
@@ -18,7 +19,7 @@ use Drupal\views\ViewExecutable;
  *
  * @ViewsField("cmrf_views_json")
  */
-class JSON extends \Drupal\views\Plugin\views\field\Standard implements MultiItemsFieldHandlerInterface {
+class JSON extends Standard implements MultiItemsFieldHandlerInterface {
 
   use MultiItemsFieldHandler;
 
@@ -58,7 +59,7 @@ class JSON extends \Drupal\views\Plugin\views\field\Standard implements MultiIte
       // Render an item list from the JSON structure as default markup.
       '#item_list' => $this->render_item_item_list($item),
     ];
-    return render($render);
+    return \Drupal::service('renderer')->render($render);
   }
 
   public function render_item_item_list($item) {
diff --git a/cmrf_views/src/Plugin/views/field/OptionList.php b/cmrf_views/src/Plugin/views/field/OptionList.php
index b12a93e..ac291ff 100644
--- a/cmrf_views/src/Plugin/views/field/OptionList.php
+++ b/cmrf_views/src/Plugin/views/field/OptionList.php
@@ -1,5 +1,6 @@
 <?php namespace Drupal\cmrf_views\Plugin\views\field;
 
+use Drupal\views\Plugin\views\field\Standard;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\display\DisplayPluginBase;
 use Drupal\views\Plugin\views\field\MultiItemsFieldHandlerInterface;
@@ -13,7 +14,7 @@ use Drupal\views\ViewExecutable;
  *
  * @ViewsField("cmrf_views_optionlist")
  */
-class OptionList extends \Drupal\views\Plugin\views\field\Standard implements MultiItemsFieldHandlerInterface {
+class OptionList extends Standard implements MultiItemsFieldHandlerInterface {
 
   use MultiItemsFieldHandler {
     getItems as MultiItemsFieldHandler_getItems;
diff --git a/cmrf_webform/cmrf_webform.module b/cmrf_webform/cmrf_webform.module
index 5f11b6b..6e03b65 100644
--- a/cmrf_webform/cmrf_webform.module
+++ b/cmrf_webform/cmrf_webform.module
@@ -92,7 +92,7 @@ function cmrf_webform_webform_delete(WebformInterface $entity) {
 /**
  * Implements hook_form_alter.
  */
-function cmrf_webform_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function cmrf_webform_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   $webform = $form_state->getFormObject();
   if ($webform instanceof EntityFormInterface) {
     $service = \Drupal::service('cmrf_webform.defaults_manager');
diff --git a/tests/src/Functional/InstantiationTests.php b/tests/src/Functional/InstantiationTests.php
index f9754dd..9178c5f 100644
--- a/tests/src/Functional/InstantiationTests.php
+++ b/tests/src/Functional/InstantiationTests.php
@@ -25,7 +25,7 @@ class InstantiationTests extends KernelTestBase {
   protected $profile = 'minimal';
   public static $modules = ['cmrf_core'];
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['cmrf_core']);
   }
@@ -36,7 +36,7 @@ class InstantiationTests extends KernelTestBase {
     $prop=new \ReflectionProperty('\Drupal\cmrf_core\Core','callfactory');
     $prop->setAccessible(true);
     $factory=$prop->getValue($core);
-    $this->assertNotEqual($factory,null);
+    $this->assertNotEquals($factory, null);
     $prop=new \ReflectionProperty('\CMRF\PersistenceLayer\SQLPersistingCallFactory','table_name');
     $prop->setAccessible(true);
     $table=$prop->getValue($factory);
