diff --git a/composer.json b/composer.json
index 8c1e12e..bdce8cc 100644
--- a/composer.json
+++ b/composer.json
@@ -8,6 +8,6 @@
   },
   "license": "GPL-2.0-or-later",
   "require": {
-    "drupal/core": "^8 || ^9"
+    "drupal/core": "^9.1 || ^10"
   }
 }
diff --git a/roleassign.info.yml b/roleassign.info.yml
index 2581a93..924277e 100644
--- a/roleassign.info.yml
+++ b/roleassign.info.yml
@@ -1,6 +1,5 @@
 name: RoleAssign
 description: 'Allows site administrators to further delegate the task of managing user''s roles.'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
 type: module
 configure: roleassign.settings
diff --git a/src/ProxyClass/RoleAssignUninstallValidator.php b/src/ProxyClass/RoleAssignUninstallValidator.php
index b8f50e2..d3b613e 100644
--- a/src/ProxyClass/RoleAssignUninstallValidator.php
+++ b/src/ProxyClass/RoleAssignUninstallValidator.php
@@ -7,15 +7,19 @@
 
 namespace Drupal\roleassign\ProxyClass {
 
+    use Drupal\Core\Extension\ModuleUninstallValidatorInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
+    use Drupal\Core\StringTranslation\TranslationInterface;
     /**
      * Provides a proxy class for \Drupal\roleassign\RoleAssignUninstallValidator.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class RoleAssignUninstallValidator implements \Drupal\Core\Extension\ModuleUninstallValidatorInterface
+    class RoleAssignUninstallValidator implements ModuleUninstallValidatorInterface
     {
 
-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;
 
         /**
          * The id of the original proxied service.
@@ -46,7 +50,7 @@ namespace Drupal\roleassign\ProxyClass {
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
@@ -78,7 +82,7 @@ namespace Drupal\roleassign\ProxyClass {
         /**
          * {@inheritdoc}
          */
-        public function setStringTranslation(\Drupal\Core\StringTranslation\TranslationInterface $translation)
+        public function setStringTranslation(TranslationInterface $translation)
         {
             return $this->lazyLoadItself()->setStringTranslation($translation);
         }
diff --git a/tests/src/Functional/RoleAssignPermissionTest.php b/tests/src/Functional/RoleAssignPermissionTest.php
index a557c9a..cb0e4a1 100644
--- a/tests/src/Functional/RoleAssignPermissionTest.php
+++ b/tests/src/Functional/RoleAssignPermissionTest.php
@@ -49,7 +49,7 @@ class RoleAssignPermissionTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Add Editor role.
@@ -83,7 +83,7 @@ class RoleAssignPermissionTest extends BrowserTestBase {
    */
   public function testRoleAssignSettings() {
     $assignable_roles = array_filter(\Drupal::config('roleassign.settings')->get('roleassign_roles'));
-    $this->assertIdentical(['editor' => 'editor', 'webmaster' => 'webmaster'], $assignable_roles);
+    $this->assertSame(['editor' => 'editor', 'webmaster' => 'webmaster'], $assignable_roles);
   }
 
   /**
@@ -97,26 +97,28 @@ class RoleAssignPermissionTest extends BrowserTestBase {
     $this->drupalGet('user/' . $this->testAccount->id() . '/edit');
 
     // Check that only assignable roles are displayed.
-    $this->assertText(t('Assignable roles'));
-    $this->assertNoFieldChecked('edit-roles-editor');
-    $this->assertNoFieldChecked('edit-roles-webmaster');
-    $this->assertNoField('edit-roles-siteadmin');
+    $this->assertSession()->pageTextContains(t('Assignable roles'));
+    $this->assertSession()->checkboxNotChecked('edit-roles-editor');
+    $this->assertSession()->checkboxNotChecked('edit-roles-webmaster');
+    $this->assertSession()->fieldNotExists('edit-roles-siteadmin');
+    $this->drupalGet('user/' . $this->testAccount->id() . '/edit');
 
     // Assign the role "editor" to the account.
-    $this->drupalPostForm('user/' . $this->testAccount->id() . '/edit', ["roles[editor]" => "editor"], t('Save'));
-    $this->assertText(t('The changes have been saved.'));
-    $this->assertFieldChecked('edit-roles-editor', 'Role editor is assigned.');
-    $this->assertNoFieldChecked('edit-roles-webmaster');
-    $this->assertNoField('edit-roles-siteadmin');
+    $this->submitForm(["roles[editor]" => "editor"], t('Save'));
+    $this->assertSession()->pageTextContains(t('The changes have been saved.'));
+    $this->assertSession()->checkboxChecked('edit-roles-editor', 'Role editor is assigned.');
+    $this->assertSession()->checkboxNotChecked('edit-roles-webmaster');
+    $this->assertSession()->fieldNotExists('edit-roles-siteadmin');
     $this->userLoadAndCheckRoleAssigned($this->testAccount, 'editor');
     $this->userLoadAndCheckRoleAssigned($this->testAccount, RoleInterface::AUTHENTICATED_ID);
+    $this->drupalGet('user/' . $this->testAccount->id() . '/edit');
 
     // Remove the role "editor" from the account.
-    $this->drupalPostForm('user/' . $this->testAccount->id() . '/edit', ["roles[editor]" => FALSE], t('Save'));
-    $this->assertText(t('The changes have been saved.'));
-    $this->assertNoFieldChecked('edit-roles-editor', 'Role editor is removed.');
-    $this->assertNoFieldChecked('edit-roles-webmaster');
-    $this->assertNoField('edit-roles-siteadmin');
+    $this->submitForm(["roles[editor]" => FALSE], t('Save'));
+    $this->assertSession()->pageTextContains(t('The changes have been saved.'));
+    $this->assertSession()->checkboxNotChecked('edit-roles-editor', 'Role editor is removed.');
+    $this->assertSession()->checkboxNotChecked('edit-roles-webmaster');
+    $this->assertSession()->fieldNotExists('edit-roles-siteadmin');
     $this->userLoadAndCheckRoleAssigned($this->testAccount, 'editor', FALSE);
     $this->userLoadAndCheckRoleAssigned($this->testAccount, RoleInterface::AUTHENTICATED_ID);
 
@@ -144,27 +146,29 @@ class RoleAssignPermissionTest extends BrowserTestBase {
     $this->drupalGet('user/' . $this->testAccount->id() . '/edit');
 
     // Check that Drupal default roles checkboxes are shown.
-    $this->assertText(t('Roles'));
-    $this->assertNoFieldChecked('edit-roles-editor');
-    $this->assertNoFieldChecked('edit-roles-webmaster');
-    $this->assertNoFieldChecked('edit-roles-siteadmin');
+    $this->assertSession()->pageTextContains(t('Roles'));
+    $this->assertSession()->checkboxNotChecked('edit-roles-editor');
+    $this->assertSession()->checkboxNotChecked('edit-roles-webmaster');
+    $this->assertSession()->checkboxNotChecked('edit-roles-siteadmin');
+    $this->drupalGet('user/' . $this->testAccount->id() . '/edit');
 
     // Assign the role "SiteAdmin" to the account.
-    $this->drupalPostForm('user/' . $this->testAccount->id() . '/edit', ["roles[siteadmin]" => "siteadmin"], t('Save'));
-    $this->assertText(t('The changes have been saved.'));
-    $this->assertFieldChecked('edit-roles-siteadmin', 'Role siteadmin is assigned.');
+    $this->submitForm(["roles[siteadmin]" => "siteadmin"], t('Save'));
+    $this->assertSession()->pageTextContains(t('The changes have been saved.'));
+    $this->assertSession()->checkboxChecked('edit-roles-siteadmin', 'Role siteadmin is assigned.');
     $this->userLoadAndCheckRoleAssigned($this->testAccount, 'siteadmin');
     $this->userLoadAndCheckRoleAssigned($this->testAccount, RoleInterface::AUTHENTICATED_ID);
 
     // Now log in as restricted user again.
     $this->drupalLogin($this->restrictedUser);
+    $this->drupalGet('user/' . $this->testAccount->id() . '/edit');
 
     // Assign the role "editor" to the account, and test that the assigned
     // "siteadmin" role doesn't get lost.
-    $this->drupalPostForm('user/' . $this->testAccount->id() . '/edit', ["roles[editor]" => "editor"], t('Save'));
-    $this->assertText(t('The changes have been saved.'));
-    $this->assertFieldChecked('edit-roles-editor', 'Role editor is assigned.');
-    $this->assertNoField('edit-roles-siteadmin');
+    $this->submitForm(["roles[editor]" => "editor"], t('Save'));
+    $this->assertSession()->pageTextContains(t('The changes have been saved.'));
+    $this->assertSession()->checkboxChecked('edit-roles-editor', 'Role editor is assigned.');
+    $this->assertSession()->fieldNotExists('edit-roles-siteadmin');
     $this->userLoadAndCheckRoleAssigned($this->testAccount, 'editor');
     $this->userLoadAndCheckRoleAssigned($this->testAccount, RoleInterface::AUTHENTICATED_ID);
     $this->userLoadAndCheckRoleAssigned($this->testAccount, 'siteadmin');
