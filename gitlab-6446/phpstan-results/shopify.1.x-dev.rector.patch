diff --git a/shopify.module b/shopify.module
index 1ac5106..724d3d5 100644
--- a/shopify.module
+++ b/shopify.module
@@ -709,7 +709,7 @@ function shopify_collection_create(\stdClass $collection, $sync_products = FALSE
  *   Remote image URL for the collection image.
  */
 function shopify_collection_save_image(Term $term, $image_url) {
-  $directory = file_build_uri('shopify_images');
+  $directory = \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . 'shopify_images'));
   if (!\Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY)) {
     // If our directory doesn't exist and can't be created, use the default.
     $directory = NULL;
diff --git a/src/Entity/ShopifyEntityTrait.php b/src/Entity/ShopifyEntityTrait.php
index e53ccb5..f828a3c 100644
--- a/src/Entity/ShopifyEntityTrait.php
+++ b/src/Entity/ShopifyEntityTrait.php
@@ -24,7 +24,7 @@ trait ShopifyEntityTrait {
    * Sets up product image.
    */
   public static function setupProductImage($image_url) {
-    $directory = file_build_uri('shopify_images');
+    $directory = \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . 'shopify_images'));
     if (!\Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY)) {
       // If our directory doesn't exist and can't be created, use the default.
       $directory = NULL;
diff --git a/src/Event/ShopifyTermRedirectSubscriber.php b/src/Event/ShopifyTermRedirectSubscriber.php
index 5a0f7c1..c244af2 100644
--- a/src/Event/ShopifyTermRedirectSubscriber.php
+++ b/src/Event/ShopifyTermRedirectSubscriber.php
@@ -2,11 +2,11 @@
 
 namespace Drupal\shopify\Event;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\shopify\Entity\ShopifyProduct;
 use Drupal\taxonomy\Entity\Term;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -21,7 +21,7 @@ class ShopifyTermRedirectSubscriber implements EventSubscriberInterface {
    *
    * @todo: Not sure this is the best way of doing things.
    */
-  public function checkForRedirection(GetResponseEvent $event) {
+  public function checkForRedirection(RequestEvent $event) {
     if (!($term = $event->getRequest()->get('taxonomy_term'))) {
       return;
     }
diff --git a/src/Event/ShopifyWebhookEvent.php b/src/Event/ShopifyWebhookEvent.php
index dec4631..b68d683 100644
--- a/src/Event/ShopifyWebhookEvent.php
+++ b/src/Event/ShopifyWebhookEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\shopify\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class ShopifyWebhookEvent.
diff --git a/tests/src/Functional/SmokeTest.php b/tests/src/Functional/SmokeTest.php
index fb414b0..763c314 100644
--- a/tests/src/Functional/SmokeTest.php
+++ b/tests/src/Functional/SmokeTest.php
@@ -24,7 +24,7 @@ class SmokeTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // Make sure to complete the normal setup steps first.
     parent::setUp();
 
@@ -46,7 +46,7 @@ class SmokeTest extends BrowserTestBase {
     $this->assertSession()->statusCodeEquals(200);
 
     // Confirm that the front page contains the standard text.
-    $this->assertText('Welcome to Drupal');
+    $this->assertSession()->pageTextContains('Welcome to Drupal');
   }
 
   /**
@@ -57,7 +57,7 @@ class SmokeTest extends BrowserTestBase {
 
     $this->drupalGet('/admin/config/system/shopify');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Shopify Store Settings');
+    $this->assertSession()->pageTextContains('Shopify Store Settings');
 
   }
 
@@ -69,7 +69,7 @@ class SmokeTest extends BrowserTestBase {
 
     $this->drupalGet('/admin/config/system/shopify_api');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Shopify API Settings');
+    $this->assertSession()->pageTextContains('Shopify API Settings');
 
   }
 
diff --git a/tests/src/Functional/SyncTest.php b/tests/src/Functional/SyncTest.php
index 65398cb..11f3b1f 100644
--- a/tests/src/Functional/SyncTest.php
+++ b/tests/src/Functional/SyncTest.php
@@ -30,13 +30,13 @@ class SyncTest extends BrowserTestBase {
     $this->drupalGet('/admin/config/system/shopify/sync');
     $this->assertSession()->statusCodeEquals(200);
 
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'num_per_batch' => 10,
       'delete_products_first' => FALSE,
       'force_update' => TRUE,
     ], 'Start Products Sync');
 
-    $this->assertText('Synced 2 products');
+    $this->assertSession()->pageTextContains('Synced 2 products');
 
     $product = \Drupal::entityTypeManager()->getStorage('shopify_product')->load(1);
     $this->assertEquals(
