diff --git a/file_upload_secure_validator.info.yml b/file_upload_secure_validator.info.yml
index 9ee5cff..66730f8 100644
--- a/file_upload_secure_validator.info.yml
+++ b/file_upload_secure_validator.info.yml
@@ -1,7 +1,6 @@
 name: File Upload Secure Validator
 type: module
 description: Secure Mime Detect
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 package: Security
 configure: file_upload_secure_validator.file-upload-secure-validator-settings
diff --git a/file_upload_secure_validator.install b/file_upload_secure_validator.install
index 9730f57..af4d772 100644
--- a/file_upload_secure_validator.install
+++ b/file_upload_secure_validator.install
@@ -1,11 +1,6 @@
 <?php
 
-/**
- * @file
- * Install, update and uninstall functions for file_upload_secure_validator.
- */
-
-use Symfony\Component\HttpFoundation\File\MimeType\FileinfoMimeTypeGuesser as SymfonyFileinfoMimeTypeGuesser;
+use Symfony\Component\Mime\FileinfoMimeTypeGuesser;
 
 /**
  * Implements hook_requirements().
@@ -18,7 +13,7 @@ function file_upload_secure_validator_requirements($phase) {
   $requirements['fileinfo_ext']['value'] = t('Found');
 
   if ($phase == 'install' || $phase == 'runtime') {
-    if (!SymfonyFileinfoMimeTypeGuesser::isSupported()) {
+    if (!FileinfoMimeTypeGuesser::isSupported()) {
       $requirements['fileinfo_ext']['value'] = t('Fileinfo extension not available');
       $requirements['fileinfo_ext']['severity'] = REQUIREMENT_ERROR;
       $requirements['fileinfo_ext']['description'] = t('File upload secure validator module uses Fileinfo extension. It seems as if Fileinfo extension is not loaded/enabled. If you are using Windows, may be, you should uncomment php_fileinfo.dll in php.ini file.');
diff --git a/src/FileUploadSecureValidatorServiceProvider.php b/src/FileUploadSecureValidatorServiceProvider.php
index ca06b4c..40e879b 100644
--- a/src/FileUploadSecureValidatorServiceProvider.php
+++ b/src/FileUploadSecureValidatorServiceProvider.php
@@ -17,7 +17,7 @@ class FileUploadSecureValidatorServiceProvider implements ServiceModifierInterfa
    * {@inheritdoc}
    */
   public function alter(ContainerBuilder $container) {
-    if (!SymfonyFileinfoMimeTypeGuesser::isSupported()) {
+    if (!\Symfony\Component\Mime\FileinfoMimeTypeGuesser::isSupported()) {
       $container->removeDefinition('file_upload_secure_validator');
     }
   }
diff --git a/src/Service/FileUploadSecureValidator.php b/src/Service/FileUploadSecureValidator.php
index 46d62d9..00236fd 100644
--- a/src/Service/FileUploadSecureValidator.php
+++ b/src/Service/FileUploadSecureValidator.php
@@ -67,7 +67,7 @@ class FileUploadSecureValidator {
     $mimeByFilename = $file->getMimeType();
     // Get mime type from fileinfo.
     try {
-      $mimeByFileinfo = (new SymfonyFileinfoMimeTypeGuesser())->guess($file->getFileUri());
+      $mimeByFileinfo = (new \Symfony\Component\Mime\FileinfoMimeTypeGuesser())->guess($file->getFileUri());
     }
     catch (FileNotFoundException $e) {
       // Return error.
diff --git a/tests/src/Unit/FileUploadSecureValidatorTest.php b/tests/src/Unit/FileUploadSecureValidatorTest.php
index 4e212c9..2536ccb 100644
--- a/tests/src/Unit/FileUploadSecureValidatorTest.php
+++ b/tests/src/Unit/FileUploadSecureValidatorTest.php
@@ -114,9 +114,7 @@ class FileUploadSecureValidatorTest extends UnitTestCase {
    * We are only interested in the uri and mimetype getters.
    */
   private function mockFile($uri, $mimetype) {
-    $fileMock = $this->getMockBuilder('Drupal\file\Entity\File')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $fileMock = $this->createMock('Drupal\file\Entity\File');
     $fileMock->expects($this->any())
       ->method('getFileUri')
       ->willReturn($uri);
@@ -132,9 +130,7 @@ class FileUploadSecureValidatorTest extends UnitTestCase {
    */
   private function getTranslationManagerMock() {
 
-    $translationManager = $this->getMockBuilder('Drupal\Core\StringTranslation\TranslationManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $translationManager = $this->createMock('Drupal\Core\StringTranslation\TranslationManager');
     $translationManager->expects($this->any())
       ->method('translate')
       ->will($this->returnArgument(0));
@@ -147,16 +143,12 @@ class FileUploadSecureValidatorTest extends UnitTestCase {
    */
   private function getLoggerFactoryMock() {
 
-    $loggerChannel = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannel')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $loggerChannel = $this->createMock('Drupal\Core\Logger\LoggerChannel');
     $loggerChannel->expects($this->any())
       ->method('error')
       ->will($this->returnValue(''));
 
-    $loggerChannelFactory = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannelFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $loggerChannelFactory = $this->createMock('Drupal\Core\Logger\LoggerChannelFactory');
     $loggerChannelFactory->expects($this->any())
       ->method('get')
       ->will($this->returnValue($loggerChannel));
@@ -215,17 +207,13 @@ class FileUploadSecureValidatorTest extends UnitTestCase {
         'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
       ],
     ];
-    $configuration = $this->getMockBuilder('Drupal\Core\Config\ConfigFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $configuration = $this->createMock('Drupal\Core\Config\ConfigFactory');
     $configuration->expects($this->any())
       ->method('get')
       ->with($this->equalTo('mime_types_equivalence_groups'))
       ->will($this->returnValue($mimeTypesEquivalenceGroups));
 
-    $configFactory = $this->getMockBuilder('Drupal\Core\Config\ConfigFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $configFactory = $this->createMock('Drupal\Core\Config\ConfigFactory');
     $configFactory->expects($this->any())
       ->method('get')
       ->with($this->equalTo('file_upload_secure_validator.settings'))
