modules/contrib/lingotek/lingotek.api.php
modules/contrib/lingotek/lingotek.post_update.php
modules/contrib/lingotek/src/Controller/LingotekSetupController.php
modules/contrib/lingotek/src/Exception/LingotekDocumentLockedException.php
modules/contrib/lingotek/src/Form/LingotekJobManagementConfigForm.php
modules/contrib/lingotek/src/Form/LingotekSettingsTabAccountForm.php
modules/contrib/lingotek/src/LingotekContentTranslationServiceInterface.php
modules/contrib/lingotek/src/Moderation/LingotekContentModerationConfigurationService.php
modules/contrib/lingotek/src/Plugin/Action/CheckTranslationStatusLingotekAction.php
modules/contrib/lingotek/src/Plugin/Field/FieldType/LingotekTranslationSourceField.php
modules/contrib/lingotek/src/Remote/LingotekHttp.php
modules/contrib/lingotek/tests/modules/lingotek_cohesion_test/lingotek_cohesion_test.install
modules/contrib/lingotek/tests/modules/lingotek_test/lingotek_test.module
modules/contrib/lingotek/tests/modules/lingotek_test/src/LingotekFakeConfigFactory.php
modules/contrib/lingotek/tests/src/Functional/Controller/LingotekSupportedLocalesControllerTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabConfigurationFormTest.php
modules/contrib/lingotek/lingotek.batch.inc
modules/contrib/lingotek/tests/modules/lingotek_test/src/Controller/FakeAuthorizationController.php
modules/contrib/lingotek/src/Annotation/RelatedEntitiesDetector.php
modules/contrib/lingotek/src/Exception/LingotekDocumentNotFoundException.php
modules/contrib/lingotek/src/Exception/LingotekDocumentTargetAlreadyCompletedException.php
modules/contrib/lingotek/src/Exception/LingotekException.php
modules/contrib/lingotek/src/Breadcrumb/TranslationJobBreadcrumbBuilder.php
modules/contrib/lingotek/src/Exception/LingotekPaymentRequiredException.php
modules/contrib/lingotek/src/Exception/LingotekProcessedWordsLimitException.php
modules/contrib/lingotek/src/Form/LingotekAccountDisconnectForm.php
modules/contrib/lingotek/src/LingotekDefaultFilterProvider.php
modules/contrib/lingotek/lingotek.drush.inc
modules/contrib/lingotek/tests/modules/lingotek_cohesion_test/lingotek_cohesion_test.module
modules/contrib/lingotek/tests/modules/lingotek_cohesion_test/src/Entity/TestCohesionLayout.php
modules/contrib/lingotek/src/LingotekFilterManager.php
modules/contrib/lingotek/lingotek.install
modules/contrib/lingotek/tests/modules/lingotek_test/src/Controller/FakeWorkbenchController.php
modules/contrib/lingotek/tests/modules/lingotek_test/src/Controller/HostsSetterController.php
modules/contrib/lingotek/tests/modules/lingotek_test/src/LingotekFakeConfigWrapper.php
modules/contrib/lingotek/src/Moderation/LingotekContentModerationHandler.php
modules/contrib/lingotek/src/Form/LingotekJobManagementContentEntitiesForm.php
modules/contrib/lingotek/tests/modules/lingotek_form_test/src/Controller/LingotekTranslationStatusController.php
modules/contrib/lingotek/tests/modules/lingotek_test/src/LingotekFake.php
modules/contrib/lingotek/lingotek.module
modules/contrib/lingotek/src/Plugin/Field/LingotekContentMetadataFieldItemList.php
modules/contrib/lingotek/src/Form/LingotekConfigFormBase.php
modules/contrib/lingotek/src/Cli/Commands/Drush8/Drush8IoWrapper.php
modules/contrib/lingotek/src/Form/LingotekConfigManagementForm.php
modules/contrib/lingotek/src/Cli/Commands/Drush9/LingotekCommands.php
modules/contrib/lingotek/src/Remote/LingotekHttpInterface.php
modules/contrib/lingotek/tests/modules/lingotek_interface_translation_test/src/Controller/InterfaceTranslationTestController.php
modules/contrib/lingotek/src/Routing/LingotekRouteSubscriber.php
modules/contrib/lingotek/tests/src/Functional/Controller/LingotekWorkbenchRedirectControllerTest.php
modules/contrib/lingotek/src/Plugin/Action/CheckUploadToLingotekAction.php
modules/contrib/lingotek/src/LingotekFilterManagerInterface.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigTranslationEditedToPendingTest.php
modules/contrib/lingotek/src/LingotekFilterProviderInterface.php
modules/contrib/lingotek/src/LingotekIntelligenceMetadataInterface.php
modules/contrib/lingotek/src/Controller/LingotekSupportedLocalesController.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabContentFormTest.php
modules/contrib/lingotek/src/Cli/LingotekCliService.php
modules/contrib/lingotek/tests/modules/lingotek_test/src/LingotekTestServiceProvider.php
modules/contrib/lingotek/src/Plugin/Action/DeleteAllTranslationsAction.php
modules/contrib/lingotek/src/LingotekIntelligenceService.php
modules/contrib/lingotek/src/Plugin/Menu/JobConfigLocalTask.php
modules/contrib/lingotek/src/Moderation/LingotekContentModerationSettingsForm.php
modules/contrib/lingotek/tests/modules/lingotek_test/src/Plugin/Block/CurrentThemeBlock.php
modules/contrib/lingotek/tests/modules/lingotek_test/src/Plugin/Block/TestRichTextBlock.php
modules/contrib/lingotek/src/Plugin/Menu/JobContentLocalTask.php
modules/contrib/lingotek/src/Form/LingotekSettingsTabConfigurationForm.php
modules/contrib/lingotek/src/Plugin/QueueWorker/LingotekDownloaderQueueWorker.php
modules/contrib/lingotek/src/Tests/Kernel/FieldFormatters/LingotekSourceStatusFormatterTest.php
modules/contrib/lingotek/src/Plugin/Action/DeleteTranslationLingotekAction.php
modules/contrib/lingotek/tests/modules/lingotek_test_config_object/src/Form/SettingsForm.php
modules/contrib/lingotek/src/Controller/LingotekWorkbenchRedirectController.php
modules/contrib/lingotek/src/Plugin/Action/Derivative/ContentEntityLingotekActionDeriver.php
modules/contrib/lingotek/src/Element/LingotekJobId.php
modules/contrib/lingotek/src/Controller/LingotekBatchController.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/EditorDetectorBase.php
modules/contrib/lingotek/tests/src/Functional/FieldFormatters/LingotekSourceStatusFormatterTest.php
modules/contrib/lingotek/tests/modules/lingotek_visitable_metadata/lingotek_visitable_metadata.module
modules/contrib/lingotek/src/Form/LingotekLanguageContentSettingsForm.php
modules/contrib/lingotek/src/Plugin/Action/DisassociateFromLingotekAction.php
modules/contrib/lingotek/src/Moderation/LingotekModerationConfigurationServiceInterface.php
modules/contrib/lingotek/src/Moderation/LingotekModerationFactory.php
modules/contrib/lingotek/tests/src/Functional/FieldFormatters/LingotekTranslationStatusFormatterTest.php
modules/contrib/lingotek/src/Element/LingotekSourceStatus.php
modules/contrib/lingotek/src/Plugin/Action/DownloadAllTranslationsFromLingotekAction.php
modules/contrib/lingotek/src/Moderation/LingotekModerationFactoryInterface.php
modules/contrib/lingotek/tests/modules/lingotek_visitable_metadata_statuses/lingotek_visitable_metadata_statuses.module
modules/contrib/lingotek/src/Moderation/LingotekModerationHandlerInterface.php
modules/contrib/lingotek/src/Form/LingotekSettingsTabContentForm.php
modules/contrib/lingotek/src/Moderation/LingotekModerationServiceInterface.php
modules/contrib/lingotek/tests/src/Functional/Actions/LingotekActionsTest.php
modules/contrib/lingotek/src/Moderation/LingotekModerationSettingsFormInterface.php
modules/contrib/lingotek/src/Moderation/LingotekNoModerationCheckTrait.php
modules/contrib/lingotek/src/Moderation/LingotekNoModerationConfigurationService.php
modules/contrib/lingotek/src/Moderation/LingotekNoModerationHandler.php
modules/contrib/lingotek/src/LingotekIntelligenceServiceConfig.php
modules/contrib/lingotek/src/Moderation/LingotekNoModerationSettingsForm.php
modules/contrib/lingotek/src/Moderation/LingotekWorkbenchModerationCheckTrait.php
modules/contrib/lingotek/src/Moderation/LingotekWorkbenchModerationConfigurationService.php
modules/contrib/lingotek/src/Form/LingotekLanguageForm.php
modules/contrib/lingotek/src/Moderation/LingotekWorkbenchModerationHandler.php
modules/contrib/lingotek/src/Plugin/Action/DownloadTranslationLingotekAction.php
modules/contrib/lingotek/src/Tests/Kernel/LingotekConfigImportTest.php
modules/contrib/lingotek/src/Moderation/LingotekWorkbenchModerationSettingsForm.php
modules/contrib/lingotek/src/Controller/LingotekConfigTranslationController.php
modules/contrib/lingotek/src/Element/LingotekTargetStatus.php
modules/contrib/lingotek/tests/src/Functional/LingotekFieldBodyBulkDebugTest.php
modules/contrib/lingotek/src/Plugin/Action/LingotekContentEntityActionBase.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigTranslationPreSaveHookTest.php
modules/contrib/lingotek/src/Element/LingotekTargetStatuses.php
modules/contrib/lingotek/src/Plugin/Action/LingotekContentEntityConfigurableActionBase.php
modules/contrib/lingotek/src/Plugin/Action/CancelLingotekAction.php
modules/contrib/lingotek/src/Views/LingotekContentMetadataViewsData.php
modules/contrib/lingotek/tests/src/Functional/FieldFormatters/LingotekTranslationStatusesFormatterTest.php
modules/contrib/lingotek/tests/modules/lingotek_test/src/LingotekFakeBC.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/EntityEmbedDetector.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/EntityReferenceDetectorBase.php
modules/contrib/lingotek/src/LingotekInterface.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeBulkDisabledTargetOverrideTranslationTest.php
modules/contrib/lingotek/src/Form/LingotekManagementForm.php
modules/contrib/lingotek/src/Plugin/Action/RequestAllTranslationsLingotekAction.php
modules/contrib/lingotek/tests/src/Functional/ChineseBulkTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContactMessageBodyTranslationTest.php
modules/contrib/lingotek/tests/fixtures/update/9402-set-preference-enable-download-interim.php
modules/contrib/lingotek/src/Plugin/Action/CancelTranslationLingotekAction.php
modules/contrib/lingotek/src/LingotekInterfaceTranslationService.php
modules/contrib/lingotek/src/Plugin/Action/RequestTranslationLingotekAction.php
modules/contrib/lingotek/tests/fixtures/update/profile-target-save-to-vault-post-update.php
modules/contrib/lingotek/tests/modules/frozenintime/src/FrozenTime.php
modules/contrib/lingotek/tests/modules/frozenintime/src/FrozenintimeServiceProvider.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/FieldLinkDetector.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeNestedParagraphsTranslationTest.php
modules/contrib/lingotek/src/Plugin/Action/CheckStatusAllTranslationsLingotekAction.php
modules/contrib/lingotek/tests/src/Functional/Form/IntelligenceMetadataFormTestTrait.php
modules/contrib/lingotek/tests/src/Functional/Form/LanguageFormTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentEntityGetProfileHookTest.php
modules/contrib/lingotek/src/Plugin/Action/Subscriber/LingotekActionsManagementSubscriber.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithParagraphsManageTranslationTabTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekFieldBodyBulkDisabledTargetOverrideTranslationTest.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/HtmlLinkDetector.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentModerationSettingsTest.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/LinkItDetector.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/NestedCohesionEntityReferenceRevisionsDetector.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/NestedEntityReferenceRevisionsDetector.php
modules/contrib/lingotek/src/Plugin/Action/UploadToLingotekAction.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/NestedEntityReferencesDetector.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/NestedErViewmodeEntitiesDetector.php
modules/contrib/lingotek/src/Plugin/RelatedEntitiesDetector/NestedLayoutBuilderEntitiesDetector.php
modules/contrib/lingotek/tests/src/Functional/Controller/LingotekNotificationControllerTest.php
modules/contrib/lingotek/src/Element/LingotekTargetTrait.php
modules/contrib/lingotek/src/Plugin/Derivative/ContentTranslationLocalTasks.php
modules/contrib/lingotek/src/Form/LingotekManagementFormBase.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeBulkLocaleTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentModerationTest.php
modules/contrib/lingotek/src/Plugin/Derivative/ContentTranslationMenuLinks.php
modules/contrib/lingotek/tests/src/Functional/LingotekFieldBodyBulkTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekAccountDisconnectFormTest.php
modules/contrib/lingotek/src/Plugin/Field/FieldFormatter/LingotekSourceStatusFormatter.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithPathTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekAccountFormTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekConfigBulkFormTest.php
modules/contrib/lingotek/src/Entity/LingotekConfigMetadata.php
modules/contrib/lingotek/src/RelatedEntities/RelatedEntitiesDetectorInterface.php
modules/contrib/lingotek/src/RelatedEntities/RelatedEntitiesDetectorManager.php
modules/contrib/lingotek/src/Remote/LingotekApi.php
modules/contrib/lingotek/tests/src/Functional/LingotekUserSettingsBulkTranslationTest.php
modules/contrib/lingotek/src/Plugin/Field/FieldFormatter/LingotekTranslationStatusFormatter.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeBulkProfileTest.php
modules/contrib/lingotek/src/Plugin/Field/FieldFormatter/LingotekTranslationStatusesFormatter.php
modules/contrib/lingotek/src/Entity/LingotekContentMetadata.php
modules/contrib/lingotek/src/Controller/LingotekContentTranslationController.php
modules/contrib/lingotek/src/Plugin/Field/FieldType/LanguageKeyValueItem.php
modules/contrib/lingotek/src/Controller/LingotekControllerBase.php
modules/contrib/lingotek/src/Controller/LingotekDashboardController.php
modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekNodeParagraphsTranslationTest.php
modules/contrib/lingotek/src/Form/LingotekSettingsTabIntegrationsForm.php
modules/contrib/lingotek/src/Entity/LingotekProfile.php
modules/contrib/lingotek/tests/src/Functional/LingotekUtilitiesDisassociateAllDocumentsTest.php
modules/contrib/lingotek/src/Form/LingotekSettingsTabLoggingForm.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithPathautoTranslationTest.php
modules/contrib/lingotek/src/Form/LingotekSettingsTabPreferencesForm.php
modules/contrib/lingotek/src/Controller/LingotekEntityController.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabIntegrationFormTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabIntelligenceMetadataFormTest.php
modules/contrib/lingotek/src/EventSubscriber/AcquiaContentHubExcludeLingotekContentMetadataFromSerializationSubscriber.php
modules/contrib/lingotek/src/EventSubscriber/DepCalcExcludeLingotekContentMetadataSubscriber.php
modules/contrib/lingotek/src/EventSubscriber/LingotekConfigSubscriber.php
modules/contrib/lingotek/src/Form/LingotekSettingsTabProfilesEditForm.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeNestedTranslatableParagraphsAsymmetricTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTranslationDocumentUploadHookTest.php
modules/contrib/lingotek/src/Remote/LingotekApiInterface.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabParagraphsIntegrationFormTest.php
modules/contrib/lingotek/tests/src/Unit/LingotekUnitTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeNestedTranslatableParagraphsEditedTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeNestedTranslatableParagraphsTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeNotificationCallbackQueueWorkerTest.php
modules/contrib/lingotek/src/Form/LingotekSettingsTabUtilitiesForm.php
modules/contrib/lingotek/src/LingotekInterfaceTranslationServiceInterface.php
modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekNodeTranslatableParagraphsAsymmetricTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTranslationPreSaveHookTest.php
modules/contrib/lingotek/src/LingotekJobManagementService.php
modules/contrib/lingotek/src/EventSubscriber/LingotekFieldDeletedConfigSubscriber.php
modules/contrib/lingotek/tests/src/Functional/LingotekViewsFunctionalTests.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabUtilitiesFormTest.php
modules/contrib/lingotek/src/Exception/LingotekApiException.php
modules/contrib/lingotek/src/Exception/LingotekContentEntityFieldTooLongStorageException.php
modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekNodeTranslatableParagraphsTranslationTest.php
modules/contrib/lingotek/src/Exception/LingotekContentEntityStorageException.php
modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekSettingsContentSingleFormTest.php
modules/contrib/lingotek/src/Helpers/LingotekManagementFormHelperTrait.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithTablefieldTranslationTest.php
modules/contrib/lingotek/src/LanguageLocaleMapper.php
modules/contrib/lingotek/src/Exception/LingotekDocumentAlreadyCompletedException.php
modules/contrib/lingotek/src/Exception/LingotekDocumentArchivedException.php
modules/contrib/lingotek/tests/src/Functional/LingotekWebformBulkTranslationTest.php
modules/contrib/lingotek/src/LanguageLocaleMapperInterface.php
modules/contrib/lingotek/src/LingotekLocale.php
modules/contrib/lingotek/src/Lingotek.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeBulkTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekAccountTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeBulkCancelTest.php
modules/contrib/lingotek/src/Controller/LingotekInterfaceTranslationController.php
modules/contrib/lingotek/tests/src/Functional/LingotekBulkDeleteTest.php
modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekSettingsTabContentFormTest.php
modules/contrib/lingotek/src/LingotekMultipleContentConfigurationServiceInterface.php
modules/contrib/lingotek/tests/src/Functional/LingotekWorkbenchModerationCustomMenuLinkTest.php
modules/contrib/lingotek/src/LingotekProfileInterface.php
modules/contrib/lingotek/src/LingotekProfileListBuilder.php
modules/contrib/lingotek/tests/src/Functional/LingotekWorkbenchModerationSettingsTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithTranslatableParagraphsManageTranslationTabTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithTranslatedAuthorTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekChangeAccountDefaultsTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigBulkProfileTest.php
modules/contrib/lingotek/src/Controller/LingotekJobManagementController.php
modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekSettingsTabContentFormWithLotsOfContentTest.php
modules/contrib/lingotek/src/LingotekProfileUsage.php
modules/contrib/lingotek/tests/src/Functional/LingotekWorkbenchModerationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeWorkbenchModerationTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeBulkDebugTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeNotificationCallbackTest.php
modules/contrib/lingotek/src/LingotekProfileUsageInterface.php
modules/contrib/lingotek/src/LingotekSetupTrait.php
modules/contrib/lingotek/src/Moderation/LingotekContentModerationCheckTrait.php
modules/contrib/lingotek/src/Controller/LingotekManagementController.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeBulkDisabledTargetOverrideTranslationTest.php
modules/contrib/lingotek/src/Controller/LingotekNotificationController.php
modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekSourceActionsTest.php
modules/contrib/lingotek/src/LingotekConfigMetadataInterface.php
modules/contrib/lingotek/src/LingotekConfigTranslationService.php
modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekSupportedLocalesControllerTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigDependenciesTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekSaveTargetDataTest.php
modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekTargetActionsTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeBulkLocaleTranslationTest.php
modules/contrib/lingotek/src/Form/LingotekContentTranslationForm.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigEntityBulkProfileTest.php
modules/contrib/lingotek/tests/src/Unit/Breadcrumb/TranslationJobBreadcrumbBuilderTest.php
modules/contrib/lingotek/tests/src/Functional/Render/Element/RenderElementTypesTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeBulkTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigEntityStatusDownloadTargetTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteBulkCancelTest.php
modules/contrib/lingotek/src/Form/LingotekDisassociateAllConfirmForm.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigEntityTranslationEditedToPendingTest.php
modules/contrib/lingotek/src/Form/LingotekElementInfoAlterForm.php
modules/contrib/lingotek/src/Controller/LingotekSettingsController.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigObjectTranslationDocumentUploadHookTest.php
modules/contrib/lingotek/tests/src/Unit/Cli/LingotekCliServiceTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigObjectTranslationPreSaveHookTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteBulkDebugTest.php
modules/contrib/lingotek/src/Form/LingotekFieldConfigEditForm.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigOverridesTest.php
modules/contrib/lingotek/src/Form/LingotekManagementRelatedEntitiesForm.php
modules/contrib/lingotek/src/Form/LingotekIntelligenceMetadataForm.php
modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteBulkLocaleTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekConnectTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigStatusDownloadTargetTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekLanguageContentSettingsFormTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekMediaBulkFormTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteBulkTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekMetadataEditFormTest.php
modules/contrib/lingotek/src/Form/LingotekInterfaceTranslationClearMetadataForm.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigSubscriberTest.php
modules/contrib/lingotek/src/Form/LingotekInterfaceTranslationForm.php
modules/contrib/lingotek/src/Form/LingotekMediaBulkForm.php
modules/contrib/lingotek/tests/src/Functional/LingotekConfigTranslationDocumentUploadHookTest.php
modules/contrib/lingotek/tests/src/Functional/Update/LingotekPostUpdateRemoveAccountSandboxHostTest.php
modules/contrib/lingotek/src/Form/LingotekJobAssignToMultipleConfigForm.php
modules/contrib/lingotek/tests/src/Functional/Update/LingotekProfileTargetSaveToVaultPostUpdateTest.php
modules/contrib/lingotek/src/Form/LingotekMetadataEditForm.php
modules/contrib/lingotek/tests/src/Functional/Update/LingotekUpgrade8221RemoveContentCloudSettingsTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekNodeBulkFormTest.php
modules/contrib/lingotek/tests/src/Functional/Update/LingotekUpgrade9000AppendTypeToTitleBooleanConversionTest.php
modules/contrib/lingotek/tests/src/Functional/Update/LingotekUpgrade9401AddUploadedAndUpdatedFieldTest.php
modules/contrib/lingotek/src/Form/LingotekJobAssignToMultipleEntitiesForm.php
modules/contrib/lingotek/tests/src/Functional/Update/LingotekUpgrade9402ClearDownloadInterimPreferenceTest.php
modules/contrib/lingotek/tests/src/Functional/Views/LingotekNodeBulkViewsCancelTest.php
modules/contrib/lingotek/src/Form/LingotekParagraphsBulkForm.php
modules/contrib/lingotek/tests/src/Functional/Views/LingotekNodeBulkViewsLocaleTranslationTest.php
modules/contrib/lingotek/src/Form/LingotekProfileAddForm.php
modules/contrib/lingotek/tests/src/Functional/Views/LingotekNodeBulkViewsTranslationTest.php
modules/contrib/lingotek/src/Form/LingotekProfileDeleteForm.php
modules/contrib/lingotek/src/Form/LingotekJobClearMultipleConfigForm.php
modules/contrib/lingotek/src/Form/LingotekJobClearMultipleEntitiesForm.php
modules/contrib/lingotek/src/Form/LingotekProfileEditForm.php
modules/contrib/lingotek/src/Form/LingotekProfileFormBase.php
modules/contrib/lingotek/tests/src/Functional/Views/LingotekNodeExistingBulkViewsTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/Views/LingotekViewsTestTrait.php
modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekFunctionalJavascriptTestBase.php
modules/contrib/lingotek/src/Form/LingotekSettingsAccountForm.php
modules/contrib/lingotek/src/Form/LingotekSettingsCommunityForm.php
modules/contrib/lingotek/src/Form/LingotekSettingsConnectForm.php
modules/contrib/lingotek/src/Form/LingotekSettingsContentSingleForm.php
modules/contrib/lingotek/tests/src/Unit/Controller/LingotekDashboardControllerTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekFieldBodyExistingBulkTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekFieldBodyNotificationCallbackTest.php
modules/contrib/lingotek/src/Form/LingotekSettingsDefaultsForm.php
modules/contrib/lingotek/src/Form/LingotekSettingsEditDefaultsForm.php
modules/contrib/lingotek/tests/src/Unit/Controller/LingotekSupportedLocalesControllerTest.php
modules/contrib/lingotek/tests/src/Unit/EventSubscriber/LingotekConfigSubscriberUnitTest.php
modules/contrib/lingotek/src/LingotekConfigTranslationServiceInterface.php
modules/contrib/lingotek/tests/src/Unit/Form/LingotekManagementFormTest.php
modules/contrib/lingotek/src/LingotekConfigurationService.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeParagraphsSettingsTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeParagraphsTranslationTest.php
modules/contrib/lingotek/tests/src/Unit/Moderation/LingotekModerationFactoryTest.php
modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/EntityEmbedDetectorTest.php
modules/contrib/lingotek/src/LingotekConfigurationServiceInterface.php
modules/contrib/lingotek/src/LingotekContentTranslationHandler.php
modules/contrib/lingotek/src/LingotekContentTranslationHandlerInterface.php
modules/contrib/lingotek/src/LingotekContentTranslationService.php
modules/contrib/lingotek/tests/src/Unit/Form/LingotekSettingsConnectFormTest.php
modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/FieldLinkDetectorTest.php
modules/contrib/lingotek/tests/src/Unit/Form/LingotekSettingsTabAccountFormTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekFieldBodyTranslationTest.php
modules/contrib/lingotek/tests/src/Unit/Form/LingotekSettingsTabUtilitiesFormTest.php
modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/HtmlLinkDetectorTest.php
modules/contrib/lingotek/tests/src/Unit/LingotekFilterManagerUnitTest.php
modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/LinkItDetectorTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeExistingBulkTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeLocaleTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeNotificationCallbackTest.php
modules/contrib/lingotek/tests/src/Unit/LingotekQueueWorkerTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeStatusDownloadTargetTest.php
modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/NestedCohesionEntityReferenceRevisionsDetectorTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeTabsThemeTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeTranslatableParagraphsAsymmetricTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeTranslatableParagraphsTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeTranslationAppendTypeTitleOptionTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteExistingBulkTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeTranslationDownloadStatusTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteLocaleTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekFieldOptionsTranslationTest.php
modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/NestedEntityReferenceRevisionsDetectorTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekNodeBulkFormWithContentModerationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeTranslationFlowNotCurrentToPendingTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekGetSourceDataTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekNodeBulkFormWithGroupModuleTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekIntelligenceMetadataTranslationTest.php
modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/NestedEntityReferencesDetectorTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekParagraphsBulkFormTest.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekProfileFormTest.php
modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/NestedErViewmodeEntitiesDetectorTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekTaxonomyTermLongTitleTranslationTest.php
modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/NestedLayoutBuilderEntitiesDetectorTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekTaxonomyTermTranslationDownloadStatusTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeCohesionRepeaterTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekTaxonomyTermTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekInterfaceTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekTestBase.php
modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabAccountFormTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeCohesionTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeWhenFieldIsRemovedTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeTranslationTest.php
modules/contrib/lingotek/tests/src/Unit/Remote/LingotekApiUnitTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeContentModerationTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithBlockfieldTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeEmbeddingBricksTranslationTest.php
modules/contrib/lingotek/tests/src/Unit/Remote/LingotekHttpUnitTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekToolbarIntegrationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeEmbeddingContactFormTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithCyclesTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeEmbeddingTagsTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekInterfaceTranslationTestTrait.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithLinkTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekJobManagementTests.php
modules/contrib/lingotek/tests/src/Functional/LingotekDashboardTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekLocaleTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekManageLingotekTranslationsPermissionTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeExistingBulkTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeLayoutBuilderAsymmetricTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekManagementTestTrait.php
modules/contrib/lingotek/tests/src/Functional/LingotekModuleInstallationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekModuleUninstallationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekModuleUninstallationWithDataTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeBulkCancelTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekEntityTestBulkTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeLayoutBuilderSymmetricTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeBulkDebugTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeLayoutBuilderWithRevisionableBlockAsymmetricTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeLocaleTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeManageTranslationTabTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekFieldBodyBulkCancelTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeMetatagsTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeMissingProfileTranslationTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeMultivaluedFieldTest.php
modules/contrib/lingotek/tests/src/Functional/LingotekNodeNestedParagraphsEditedTranslationTest.php

167 files with changes
======================

1) modules/contrib/lingotek/tests/modules/lingotek_test/src/LingotekFake.php:358

    ---------- begin diff ----------
@@ @@
     \Drupal::state()->set('lingotek.downloaded_locale', $locale);
     $type = \Drupal::state()->get('lingotek.uploaded_content_type', 'node');
     $typeWithLocale = $type . '.' . $locale;
-    $path = drupal_get_path('module', 'lingotek') . '/tests/modules/lingotek_test/document_responses/' . $typeWithLocale . '.json';
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek') . '/tests/modules/lingotek_test/document_responses/' . $typeWithLocale . '.json';

     if (!file_exists($path)) {
-      $path = drupal_get_path('module', 'lingotek') . '/tests/modules/lingotek_test/document_responses/' . $type . '.json';
+      $path = \Drupal::service('extension.list.module')->getPath('lingotek') . '/tests/modules/lingotek_test/document_responses/' . $type . '.json';
     }

     $input = file_get_contents($path);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector


2) modules/contrib/lingotek/src/Tests/Kernel/LingotekConfigImportTest.php:69

    ---------- begin diff ----------
@@ @@
     \Drupal::service('content_translation.manager')->setEnabled($entity_type_id, $entity_type_id, TRUE);

     // Verify the configuration to create does not exist yet.
-    $this->assertIdentical($storage->exists($config_name), FALSE, $config_name . ' not found.');
+    $this->assertSame($storage->exists($config_name), FALSE, $config_name . ' not found.');

     // Create new config entity for content language translation.
     $data = [
@@ @@
       ],
     ];
     $sync->write($config_name, $data);
-    $this->assertIdentical($sync->exists($config_name), TRUE, $config_name . ' found.');
+    $this->assertSame($sync->exists($config_name), TRUE, $config_name . ' found.');

     // Import.
     $this->configImporter()->import();
@@ @@

     // Verify the values appeared.
     $config = $this->config($config_name);
-    $this->assertIdentical($config->get('translate.entity.entity_test_mul.entity_test_mul.field.field_test_text'), TRUE);
+    $this->assertSame($config->get('translate.entity.entity_test_mul.entity_test_mul.field.field_test_text'), TRUE);

     /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
     $lingotek_config = \Drupal::service('lingotek.configuration');
-    $this->assertIdentical($lingotek_config->isEnabled($entity_type_id), TRUE);
+    $this->assertSame($lingotek_config->isEnabled($entity_type_id), TRUE);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/lingotek/tests/src/Functional/Controller/LingotekNotificationControllerTest.php:80

    ---------- begin diff ----------
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));

     $this->goToContentBulkManagementForm();

@@ @@

     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     // Simulate again the notification of content successfully uploaded.
     $request = $this->client->get($url, [
@@ @@

     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
   }

   /**
@@ @@
     $this->assertStringContainsString('max-age=0', $cache_control_header[0]);

     $response = (string) $request->getBody();
-    $this->assertIdentical($response, 'It works, but nothing to look here.');
+    $this->assertSame($response, 'It works, but nothing to look here.');

     // Simulate again the notification of content successfully uploaded.
     $request = $this->client->get($url, [
@@ @@
     $this->assertStringContainsString('max-age=0', $cache_control_header[0]);

     $response = (string) $request->getBody();
-    $this->assertIdentical($response, 'It works, but nothing to look here.');
+    $this->assertSame($response, 'It works, but nothing to look here.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/lingotek/tests/src/Functional/ChineseBulkTranslationTest.php:86

    ---------- begin diff ----------
@@ @@
     // And we can already request a translation.
     $this->assertLingotekRequestTranslationLink('zh_CN');
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request the German (AT) translation.
     $this->assertLingotekRequestTranslationLink('zh_CN');
     $this->clickLink('ZH');
-    $this->assertText("Locale 'zh_CN' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'zh_CN' was added as a translation target for node Llamas are cool.");
     // Check that the requested locale is the right one.
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('zh_CN');
     $this->clickLink('ZH');
-    $this->assertText('The zh_CN translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The zh_CN translation for node Llamas are cool is ready for download.');

     // Download the Spanish translation.
     $this->assertLingotekDownloadTargetLink('zh_CN');
     $this->clickLink('ZH');
-    $this->assertText('The translation of node Llamas are cool into zh_CN has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into zh_CN has been downloaded.');

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('zh_CN', 'dummy-document-hash-id', 'ZH-HANS');
@@ @@
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');

     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/system.site_information_settings/system.site_information_settings?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 1);
-    $this->assertText('System information status checked successfully');
+    $this->assertSession()->pageTextContains('System information status checked successfully');

     // Request the Chinese translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ZH');
-    $this->assertText("Translation to zh_CN requested successfully");
+    $this->assertSession()->pageTextContains("Translation to zh_CN requested successfully");
     // Check that the requested locale is the right one.
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Chinese translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/system.site_information_settings/system.site_information_settings/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ZH');
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to zh_CN checked successfully");
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to zh_CN checked successfully");

     // Download the Chinese translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/system.site_information_settings/system.site_information_settings/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ZH');
-    $this->assertText('Translation to zh_CN downloaded successfully');
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Translation to zh_CN downloaded successfully');
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('zh_CN', 'dummy-document-hash-id', 'ZH-HANS');
@@ @@
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/node_type/article/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText(t('Article uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('Article uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/node_type/article?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText('Article status checked successfully');
+    $this->assertSession()->pageTextContains('Article status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ZH');
-    $this->assertText("Translation to zh_CN requested successfully");
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to zh_CN requested successfully");
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/node_type/article/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ZH');
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to zh_CN status checked successfully");
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to zh_CN status checked successfully");

     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/node_type/article/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ZH');
-    $this->assertText('Translation to zh_CN downloaded successfully');
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Translation to zh_CN downloaded successfully');
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('zh_CN', 'dummy-document-hash-id', 'ZH-HANS');
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/lingotek/src/Controller/LingotekBatchController.php:40

    ---------- begin diff ----------
@@ @@
       'operations' => $this->getUploadOperations($entity_type, [$entity_id]),
       'error_message' => t('An error happened.'),
       'finished' => 'lingotek_operation_content_upload_finished',
-      'file' => drupal_get_path('module', 'lingotek') . '/lingotek.batch.inc',
+      'file' => \Drupal::service('extension.list.module')->getPath('lingotek') . '/lingotek.batch.inc',
     ];
     $redirect_url = \Drupal::urlGenerator()->generate("entity.$entity_type.content_translation_overview",
       [$entity_type => $entity_id], UrlGeneratorInterface::ABSOLUTE_URL);
@@ @@
       'title' => $this->t('Downloading translations from Lingotek'),
       'operations' => $this->getDownloadOperations($entity_type, [$entity_id], $locales),
       'finished' => 'lingotek_operation_content_download_finished',
-      'file' => drupal_get_path('module', 'lingotek') . '/lingotek.batch.inc',
+      'file' => \Drupal::service('extension.list.module')->getPath('lingotek') . '/lingotek.batch.inc',
     ];
     $entity = \Drupal::entityTypeManager()->getStorage($entity_type)->load($entity_id);
     $redirect_url = \Drupal::urlGenerator()->generate("entity.$entity_type.content_translation_overview",
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/lingotek/tests/src/Functional/LingotekConfigTranslationDocumentUploadHookTest.php:45

    ---------- begin diff ----------
@@ @@
     // Check that [token] is encoded via hook_lingotek_config_entity_document_upload().
     // @see lingotek_test_lingotek_config_entity_document_upload()
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
-    $this->assertEqual($data['settings.label'], 'Title with [***SITE:NAME***]');
+    $this->assertEquals($data['settings.label'], 'Title with [***SITE:NAME***]');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/lingotek/tests/src/Functional/LingotekConfigSubscriberTest.php:60

    ---------- begin diff ----------
@@ @@

     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->verbose(var_export($data, TRUE));
-    $this->assertText('Title block uploaded successfully');
+    $this->assertSession()->pageTextContains('Title block uploaded successfully');

     $this->clickLink('ES');
     $this->clickLink('ES');
     $this->clickLink('ES');

-    $this->assertText('Translation to es_MX downloaded successfully');
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');

     // Navigate to the Extend page.
     $this->drupalGet('/admin/modules');
@@ @@

     // Post the form uninstalling the lingotek module.
     $edit = ['uninstall[block]' => '1'];
-    $this->drupalPostForm(NULL, $edit, 'Uninstall');
+    $this->submitForm($edit, 'Uninstall');

     // We get an advice and we can confirm.
-    $this->assertText('The following modules will be completely uninstalled from your site, and all data from these modules will be lost!');
+    $this->assertSession()->pageTextContains('The following modules will be completely uninstalled from your site, and all data from these modules will be lost!');
     $this->assertSession()->responseContains('Block');
     $this->assertSession()->responseContains('The listed configuration will be deleted.');
     $this->assertSession()->responseContains('Lingotek Config Metadata');
     $this->assertSession()->responseContains('block.block_1');

-    $this->drupalPostForm(NULL, [], 'Uninstall');
+    $this->submitForm([], 'Uninstall');

     $this->assertSession()->responseContains('The selected modules have been uninstalled.');
   }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/lingotek/tests/src/Functional/LingotekConfigStatusDownloadTargetTest.php:60

    ---------- begin diff ----------
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/system.site_information_settings/system.site_information_settings?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX requested successfully');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX requested successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('Translation to es_MX checked successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX checked successfully');

     // Edit the object
     $config = \Drupal::service('config.factory')->getEditable('system.site');
@@ @@
        'table[system.site_information_settings]' => TRUE,
        $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check the status is edited for Spanish.
     $source_edited = $this->xpath("//a[contains(@class,'language-icon') and contains(@class, 'source-edited') and contains(@title, 'Re-upload (content has changed since last upload)')]");
-    $this->assertEqual(count($source_edited), 1, 'Edited source is shown.');
+    $this->assertEquals(count($source_edited), 1, 'Edited source is shown.');
     $this->assertTargetStatus('ES', 'edited');
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/lingotek/tests/src/Functional/LingotekConfigOverridesTest.php:13

    ---------- begin diff ----------
@@ @@

     // Container was not rebuilt yet.
     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('test_community', $defaults['community'], 'Default community could be overridden by settings.php');
+    $this->assertSame('test_community', $defaults['community'], 'Default community could be overridden by settings.php');

     // Editing settings.php forces us to rebuild the container.
     $GLOBALS['config']['lingotek.settings']['default']['community'] = 'def';
@@ @@
     $this->rebuildContainer();

     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('def', $defaults['community'], 'Default community could be overridden by settings.php');
+    $this->assertSame('def', $defaults['community'], 'Default community could be overridden by settings.php');
   }

   public function testDefaultProjectOverride() {
@@ @@

     // Container was not rebuilt yet.
     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('test_project', $defaults['project'], 'Default project could be overridden by settings.php');
+    $this->assertSame('test_project', $defaults['project'], 'Default project could be overridden by settings.php');

     // Editing settings.php forces us to rebuild the container.
     $GLOBALS['config']['lingotek.settings']['default']['project'] = 'def';
@@ @@
     $this->rebuildContainer();

     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('def', $defaults['project'], 'Default project could be overridden by settings.php');
+    $this->assertSame('def', $defaults['project'], 'Default project could be overridden by settings.php');
   }

   public function testDefaultWorkflowOverride() {
@@ @@

     // Container was not rebuilt yet.
     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('test_workflow', $defaults['workflow'], 'Default workflow could be overridden by settings.php');
+    $this->assertSame('test_workflow', $defaults['workflow'], 'Default workflow could be overridden by settings.php');

     // Editing settings.php forces us to rebuild the container.
     $GLOBALS['config']['lingotek.settings']['default']['workflow'] = 'def';
@@ @@
     $this->rebuildContainer();

     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('def', $defaults['workflow'], 'Default workflow could be overridden by settings.php');
+    $this->assertSame('def', $defaults['workflow'], 'Default workflow could be overridden by settings.php');
   }

   public function testDefaultVaultOverride() {
@@ @@

     // Container was not rebuilt yet.
     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('test_vault', $defaults['vault'], 'Default vault could be overridden by settings.php');
+    $this->assertSame('test_vault', $defaults['vault'], 'Default vault could be overridden by settings.php');

     // Editing settings.php forces us to rebuild the container.
     $GLOBALS['config']['lingotek.settings']['default']['vault'] = 'def';
@@ @@
     $this->rebuildContainer();

     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('def', $defaults['vault'], 'Default vault could be overridden by settings.php');
+    $this->assertSame('def', $defaults['vault'], 'Default vault could be overridden by settings.php');
   }

   public function testDefaultFilterOverride() {
@@ @@

     // Container was not rebuilt yet.
     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('drupal_default', $defaults['filter'], 'Default filter could be overridden by settings.php');
+    $this->assertSame('drupal_default', $defaults['filter'], 'Default filter could be overridden by settings.php');

     // Editing settings.php forces us to rebuild the container.
     $this->rebuildContainer();

     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('project_default', $defaults['filter'], 'Default filter could be overridden by settings.php');
+    $this->assertSame('project_default', $defaults['filter'], 'Default filter could be overridden by settings.php');
   }

   public function testDefaultSubfilterOverride() {
@@ @@

     // Container was not rebuilt yet.
     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('drupal_default', $defaults['subfilter'], 'Default subfilter could be overridden by settings.php');
+    $this->assertSame('drupal_default', $defaults['subfilter'], 'Default subfilter could be overridden by settings.php');

     // Editing settings.php forces us to rebuild the container.
     $this->rebuildContainer();

     $defaults = \Drupal::service('lingotek')->getDefaults();
-    $this->assertIdentical('project_default', $defaults['subfilter'], 'Default subfilter could be overridden by settings.php');
+    $this->assertSame('project_default', $defaults['subfilter'], 'Default subfilter could be overridden by settings.php');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/lingotek/tests/src/Functional/LingotekConfigObjectTranslationPreSaveHookTest.php:63

    ---------- begin diff ----------
@@ @@
     // Only the proper translatable typed properties are being uploaded.
     $this->assertFalse(isset($data['lingotek_test_config_object.settings']['property_1']));
     $this->assertFalse(isset($data['lingotek_test_config_object.settings']['property_2']));
-    $this->assertEqual($data['lingotek_test_config_object.settings']['property_3'], 'Cats feed description');
-    $this->assertEqual($data['lingotek_test_config_object.settings']['property_4'], 'Llamas feed description');
-    $this->assertEqual($data['lingotek_test_config_object.settings']['property_5'], 'Cats feed description');
-    $this->assertEqual($data['lingotek_test_config_object.settings']['property_6'], 'Llamas feed description');
+    $this->assertEquals($data['lingotek_test_config_object.settings']['property_3'], 'Cats feed description');
+    $this->assertEquals($data['lingotek_test_config_object.settings']['property_4'], 'Llamas feed description');
+    $this->assertEquals($data['lingotek_test_config_object.settings']['property_5'], 'Cats feed description');
+    $this->assertEquals($data['lingotek_test_config_object.settings']['property_6'], 'Llamas feed description');

     // Translate the config using Lingotek.
     $this->clickLink('ES');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/lingotek/tests/src/Functional/LingotekConfigObjectTranslationDocumentUploadHookTest.php:60

    ---------- begin diff ----------
@@ @@
     // Only the proper translatable typed properties are being uploaded.
     $this->assertFalse(isset($data['lingotek_test_config_object.settings']['property_1']));
     $this->assertFalse(isset($data['lingotek_test_config_object.settings']['property_2']));
-    $this->assertEqual($data['lingotek_test_config_object.settings']['property_3'], 'Cats feed description');
-    $this->assertEqual($data['lingotek_test_config_object.settings']['property_4'], 'Llamas feed description');
-    $this->assertEqual($data['lingotek_test_config_object.settings']['property_5'], 'Cats feed description');
-    $this->assertEqual($data['lingotek_test_config_object.settings']['property_6'], 'Llamas feed description');
+    $this->assertEquals($data['lingotek_test_config_object.settings']['property_3'], 'Cats feed description');
+    $this->assertEquals($data['lingotek_test_config_object.settings']['property_4'], 'Llamas feed description');
+    $this->assertEquals($data['lingotek_test_config_object.settings']['property_5'], 'Cats feed description');
+    $this->assertEquals($data['lingotek_test_config_object.settings']['property_6'], 'Llamas feed description');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/lingotek/tests/src/Functional/LingotekConfigEntityTranslationEditedToPendingTest.php:60

    ---------- begin diff ----------
@@ @@
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText(t('Body uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('Body uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/field_config/node.article.body?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX requested successfully');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX requested successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('Translation to es_MX status checked successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX status checked successfully');

     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('Translation to es_MX downloaded successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');

     // Edit the object
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', ['label' => 'Body EDITED'], t('Save settings'));
+    $this->submitForm(['label' => 'Body EDITED'], t('Save settings'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_fields');
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/lingotek/tests/src/Functional/LingotekConfigEntityStatusDownloadTargetTest.php:57

    ---------- begin diff ----------
@@ @@
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText(t('Body uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('Body uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/field_config/node.article.body?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX status checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX status checked successfully");
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');

     // Edit the object
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', ['label' => 'Body EDITED'], t('Save settings'));
+    $this->submitForm(['label' => 'Body EDITED'], t('Save settings'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_fields');
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/lingotek/tests/src/Functional/LingotekConfigEntityBulkProfileTest.php:61

    ---------- begin diff ----------
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:automatic',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Automatic Profile
     $automatic_profile = $this->xpath("//td[contains(text(), 'Automatic')]");
-    $this->assertEqual(count($automatic_profile), 1, 'Automatic Profile set');
+    $this->assertEquals(count($automatic_profile), 1, 'Automatic Profile set');

     $edit = [
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:manual',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there is one node with the Manual Profile
     // Check that there are two nodes with the Automatic Profile
     $manual_profile = $this->xpath("//td[contains(text(), 'Manual')]");
-    $this->assertEqual(count($manual_profile), 1, 'Manual Profile set');
+    $this->assertEquals(count($manual_profile), 1, 'Manual Profile set');

     $edit = [
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:disabled',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Disabled Profile
     $disabled_profile = $this->xpath("//td[contains(text(), 'Disabled')]");
-    $this->assertEqual(count($disabled_profile), 1, 'Disabled Profile set');
+    $this->assertEquals(count($disabled_profile), 1, 'Disabled Profile set');

     $edit = [
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:automatic',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Automatic Profile
     $automatic_profile = $this->xpath("//td[contains(text(), 'Automatic')]");
-    $this->assertEqual(count($automatic_profile), 1, 'Automatic Profile set');
+    $this->assertEquals(count($automatic_profile), 1, 'Automatic Profile set');
   }

   /**
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancel('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:automatic',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Automatic Profile
     $automatic_profile = $this->xpath("//td[contains(text(), 'Automatic')]");
-    $this->assertEqual(count($automatic_profile), 1, 'Automatic Profile set');
+    $this->assertEquals(count($automatic_profile), 1, 'Automatic Profile set');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/lingotek/tests/src/Functional/LingotekConfigDependenciesTest.php:57

    ---------- begin diff ----------
@@ @@

     // Upload article content type for translation.
     $this->clickLink('EN');
-    $this->assertText('article uploaded successfully');
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($content_type));
+    $this->assertSession()->pageTextContains('article uploaded successfully');
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($content_type));

     $field = \Drupal::entityTypeManager()->getStorage('field_config')->load('node.article.body');
     // Go to config translation.
@@ @@

     // Upload article body field type for translation.
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($field));
+    $this->assertSession()->pageTextContains('Body uploaded successfully');
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($field));

     // Copy all configuration to staging.
     $this->copyConfig($this->container->get('config.storage'), $this->container->get('config.storage.sync'));
@@ @@
     // Article is back.
     $type = \Drupal::entityTypeManager()->getStorage('node_type')->load('article');
     $this->assertNotNull($type, 'Article is back');
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($type));
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($type));

     // The Field is back.
     $field = \Drupal::entityTypeManager()->getStorage('field_config')->load('node.article.body');
     $this->assertNotNull($field, 'Article Body is back');
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($field));
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($field));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


16) modules/contrib/lingotek/tests/src/Functional/LingotekConfigBulkProfileTest.php:44

    ---------- begin diff ----------
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:automatic',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Automatic Profile
     $automatic_profile = $this->xpath("//td[contains(text(), 'Automatic')]");
-    $this->assertEqual(count($automatic_profile), 1, 'Automatic Profile set');
+    $this->assertEquals(count($automatic_profile), 1, 'Automatic Profile set');

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:manual',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there is one node with the Manual Profile
     // Check that there are two nodes with the Automatic Profile
     $manual_profile = $this->xpath("//td[contains(text(), 'Manual')]");
-    $this->assertEqual(count($manual_profile), 1, 'Manual Profile set');
+    $this->assertEquals(count($manual_profile), 1, 'Manual Profile set');

     $this->clickLink('EN', 1);

@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:disabled',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Disabled Profile
     $disabled_profile = $this->xpath("//td[contains(text(), 'Disabled')]");
-    $this->assertEqual(count($disabled_profile), 1, 'Disabled Profile set');
+    $this->assertEquals(count($disabled_profile), 1, 'Disabled Profile set');

     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $config_translation_service */
     $config_translation_service = \Drupal::service('lingotek.config_translation');
@@ @@
     // that hold a list of languages.
     $this->rebuildContainer();

-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'check_upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'request_translations',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'check_translations',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'download:es',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:automatic',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Automatic Profile
     $automatic_profile = $this->xpath("//td[contains(text(), 'Automatic')]");
-    $this->assertEqual(count($automatic_profile), 1, 'Automatic Profile set');
+    $this->assertEquals(count($automatic_profile), 1, 'Automatic Profile set');
   }

   /**
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:automatic',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Automatic Profile
     $automatic_profile = $this->xpath("//td[contains(text(), 'Automatic')]");
-    $this->assertEqual(count($automatic_profile), 1, 'Automatic Profile set');
+    $this->assertEquals(count($automatic_profile), 1, 'Automatic Profile set');

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'check_upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'request_translations',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'check_translations',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'download',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'cancel',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_CANCELLED);
     $this->assertTargetStatus('ES', Lingotek::STATUS_CANCELLED);
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_UNTRACKED);
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:disabled',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     drupal_static_reset();
     \Drupal::entityTypeManager()->clearCachedDefinitions();
@@ @@
       ->getMappers();
     $mapper = $mappers['system.site_information_settings'];

-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));

     $this->drupalGet('admin/config/system/site-information/translate');

@@ @@
     $edit = [
       'site_name' => 'llamas are cool',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     // that hold a list of languages.
     $this->rebuildContainer();

-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
-    $this->assertIdentical(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_DISABLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/lingotek/tests/src/Functional/LingotekChangeAccountDefaultsTest.php:18

    ---------- begin diff ----------
@@ @@

     // Click on the Community link.
     $this->clickLink(t('Edit defaults'), 0);
-    $this->drupalPostForm(NULL, ['community' => 'test_community2'], t('Save configuration'));
+    $this->submitForm(['community' => 'test_community2'], t('Save configuration'));

     $this->assertTableValue('community', 'Test community 2 (test_community2)');
     $this->assertTableValue('workflow', 'Test workflow (test_workflow)');
@@ @@

     // Click on the Project link.
     $this->clickLink(t('Edit defaults'), 1);
-    $this->drupalPostForm(NULL, ['project' => 'test_project2', 'vault' => 'test_vault2'], t('Save configuration'));
+    $this->submitForm(['project' => 'test_project2', 'vault' => 'test_vault2'], t('Save configuration'));

     $this->assertTableValue('community', 'Test community 2 (test_community2)');
     $this->assertTableValue('workflow', 'Test workflow (test_workflow)');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


18) modules/contrib/lingotek/tests/src/Functional/LingotekBulkDeleteTest.php:86

    ---------- begin diff ----------
@@ @@

     // Ensure the delete operation is there.
     $delete_option = $this->xpath('//*[@id="edit-operation"]/option[text()="Delete content"]');
-    $this->assertIdentical(1, count($delete_option), 'Delete operation must be available');
+    $this->assertSame(1, count($delete_option), 'Delete operation must be available');

     // Three nodes must be there.
     $assert_session->linkExists('Llamas are cool 2');
@@ @@
       'table[3]' => FALSE,
       $this->getBulkOperationFormName() => 'delete_nodes',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Ensure the confirmation page is shown.
-    $this->assertText(t('Are you sure you want to delete these content items?'));
-    $this->assertText('Llamas are cool');
-    $this->assertText('Llamas are cool 2');
-    $this->drupalPostForm(NULL, [], t('Delete'));
+    $this->assertSession()->pageTextContains(t('Are you sure you want to delete these content items?'));
+    $this->assertSession()->pageTextContains('Llamas are cool');
+    $this->assertSession()->pageTextContains('Llamas are cool 2');
+    $this->submitForm([], t('Delete'));

     // Only one node remains and we are back to the manage page.
-    $this->assertText('Deleted 2 content items.');
+    $this->assertSession()->pageTextContains('Deleted 2 content items.');
     $assert_session->linkNotExists('Llamas are cool 2');
     $assert_session->linkNotExists('Llamas are cool');
     $assert_session->linkExists('Llamas should stay');
-    $this->assertUrl('admin/lingotek/manage/node');
+    $this->assertSession()->addressEquals('admin/lingotek/manage/node');
   }

   /**
@@ @@
       "taxonomy_term[$bundle][fields][name]" => 1,
       "taxonomy_term[$bundle][fields][description]" => 1,
     ];
+    $this->drupalGet('admin/lingotek/settings', []);

-    $this->drupalPostForm('admin/lingotek/settings', $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

     $this->goToContentBulkManagementForm('taxonomy_term');

     // Ensure the delete operation is not there.
     $delete_option = $this->xpath('//*[@id="edit-operation"]/option[text()="Delete content"]');
-    $this->assertIdentical(0, count($delete_option), 'Delete operation should not be available');
+    $this->assertSame(0, count($delete_option), 'Delete operation should not be available');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


19) modules/contrib/lingotek/tests/src/Functional/LingotekAccountTest.php:36

    ---------- begin diff ----------
@@ @@
     $this->clickLink('Connect Lingotek Account');
     // Our fake backend generates a token, returns to the site, completes the
     // handshake and return some fake data.
-    $this->assertText('Your account settings have been saved.');
+    $this->assertSession()->pageTextContains('Your account settings have been saved.');
     // Then we can select the defaults for the different fields.
-    $this->drupalPostForm(NULL, ['community' => 'test_community'], 'Next');
-    $this->assertText('The configuration options have been saved.');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm(['community' => 'test_community'], 'Next');
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
+    $this->submitForm([
       'project' => 'test_project',
       'vault' => 'test_vault',
       'workflow' => 'test_workflow',
     ], 'Save configuration');
-    $this->assertText('The configuration options have been saved.');
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
     // We are done with the defaults, we should be redirected to the dashboard.
-    $this->assertText('Dashboard');
-    $this->assertUrl('admin/lingotek');
+    $this->assertSession()->pageTextContains('Dashboard');
+    $this->assertSession()->addressEquals('admin/lingotek');
   }

   /**
@@ @@

     // Try to navigate to the Dashboard page, and assert we are redirected.
     $this->drupalGet('admin/lingotek');
-    $this->assertUrl('admin/lingotek/setup/account');
+    $this->assertSession()->addressEquals('admin/lingotek/setup/account');
     $assert_session->linkExists('Connect Lingotek Account');
   }

@@ @@
     // This will simulate a "cancel" click, so we need to ensure we are back
     // at the same page. We cannot test that we will be redirected, as it's done
     // via js. There is no way on the server to know the hash part of the url.
-    $this->assertUrl('/admin/lingotek/setup/account');
+    $this->assertSession()->addressEquals('/admin/lingotek/setup/account');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


20) modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabUtilitiesFormTest.php:35

    ---------- begin diff ----------
@@ @@

     // Activate the settings tab.
     $this->drupalGet('admin/lingotek/settings');
-    $this->drupalPostForm(NULL, [], 'Refresh', [], 'lingoteksettings-tab-utilities-form');
+    $this->submitForm([], 'Refresh', 'lingoteksettings-tab-utilities-form');
     $assert_session->responseContains('Project, workflow, vault, and filter information have been refreshed.');

     $config = \Drupal::configFactory()->getEditable('lingotek.settings');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabParagraphsIntegrationFormTest.php:112

    ---------- begin diff ----------
@@ @@
    */
   public function testTabShownIfThereAreSettings() {
     $this->drupalGet('admin/lingotek/settings');
-    $this->assertText('Integrations Settings');
-    $this->assertText('Paragraphs');
-    $this->assertText('Enable paragraphs to be managed individually instead of embedded in their parent entity.');
+    $this->assertSession()->pageTextContains('Integrations Settings');
+    $this->assertSession()->pageTextContains('Paragraphs');
+    $this->assertSession()->pageTextContains('Enable paragraphs to be managed individually instead of embedded in their parent entity.');
   }

   /**
@@ @@
     // Activate the settings tab.
     $this->drupalGet('admin/lingotek/settings');
     $edit = ['contrib[paragraphs][enable_bulk_management]' => 1];
-    $this->drupalPostForm(NULL, $edit, 'Save settings', [], 'lingoteksettings-integrations-form');
-    $this->assertText('The configuration options have been saved.');
+    $this->submitForm($edit, 'Save settings', 'lingoteksettings-integrations-form');
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');

     // Now the tab is active.
     $this->goToContentBulkManagementForm();
@@ @@
     $assert_session->linkExists('Paragraph');

     $this->clickLink('Paragraph');
-    $this->assertText('Manage Translations');
-    $this->assertText('No content available');
+    $this->assertSession()->pageTextContains('Manage Translations');
+    $this->assertSession()->pageTextContains('No content available');
   }

   /**
@@ @@
     // Disable the settings tab.
     $this->drupalGet('admin/lingotek/settings');
     $edit = ['contrib[paragraphs][enable_bulk_management]' => FALSE];
-    $this->drupalPostForm(NULL, $edit, 'Save settings', [], 'lingoteksettings-integrations-form');
-    $this->assertText('The configuration options have been saved.');
+    $this->submitForm($edit, 'Save settings', 'lingoteksettings-integrations-form');
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');

     // Now the tab is not shown.
     $this->goToContentBulkManagementForm();
@@ @@

     $this->drupalGet('admin/lingotek/settings');

-    $this->assertNoFieldByName('paragraph[image_text][profiles]', NULL, 'The profile is not selectable for paragraphs by default.');
+    $this->assertSession()->fieldNotExists('paragraph[image_text][profiles]');

     $edit = ['contrib[paragraphs][enable_bulk_management]' => 1];
-    $this->drupalPostForm(NULL, $edit, 'Save settings', [], 'lingoteksettings-integrations-form');
-    $this->assertText('The configuration options have been saved.');
+    $this->submitForm($edit, 'Save settings', 'lingoteksettings-integrations-form');
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');

-    $this->assertFieldByName('paragraph[image_text][profiles]', NULL, 'The profile can be assigned to a paragraph if they are managed individually.');
-    $this->assertFieldByName('paragraph[image_text][profiles]', Lingotek::PROFILE_DISABLED, 'The default profile is disabled for paragraphs if they are managed individually.');
+    $this->assertSession()->fieldExists('paragraph[image_text][profiles]');
+    $this->assertSession()->fieldValueEquals('paragraph[image_text][profiles]', Lingotek::PROFILE_DISABLED);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


22) modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabIntelligenceMetadataFormTest.php:18

    ---------- begin diff ----------
@@ @@
   public function testIntelligenceMetadataIsSaved() {
     $this->drupalGet('admin/lingotek/settings');

-    $this->assertRaw('<summary role="button" aria-controls="edit-intelligence-metadata" aria-expanded="false" aria-pressed="false">Lingotek Intelligence Metadata</summary>',
-      'Lingotek Intelligence Metadata tab is present.');
+    $this->assertSession()->responseContains('<summary role="button" aria-controls="edit-intelligence-metadata" aria-expanded="false" aria-pressed="false">Lingotek Intelligence Metadata</summary>');

     // Assert defaults are correct.
     $this->assertIntelligenceFieldDefaults();
@@ @@
     ];
     $this->submitForm($edit, 'Save Lingotek Intelligence Metadata', 'lingotekintelligence-metadata-form');

-    $this->assertText('Lingotek Intelligence Metadata saved correctly.');
+    $this->assertSession()->pageTextContains('Lingotek Intelligence Metadata saved correctly.');

     // The values shown are correct.
-    $this->assertNoFieldChecked('edit-intelligence-metadata-use-contact-email-for-author');
-    $this->assertFieldByName('intelligence_metadata[default_author_email]', 'test@example.com');
-    $this->assertFieldByName('intelligence_metadata[business_unit]', 'Test Business Unit');
-    $this->assertFieldByName('intelligence_metadata[business_division]', 'Test Business Division');
-    $this->assertFieldByName('intelligence_metadata[campaign_id]', 'Campaign ID');
-    $this->assertFieldByName('intelligence_metadata[campaign_rating]', 5);
-    $this->assertFieldByName('intelligence_metadata[channel]', 'Channel Test');
-    $this->assertFieldByName('intelligence_metadata[contact_name]', 'Test Contact Name');
-    $this->assertFieldByName('intelligence_metadata[contact_email]', 'contact@example.com');
-    $this->assertFieldByName('intelligence_metadata[content_description]', 'Content description');
-    $this->assertFieldByName('intelligence_metadata[external_style_id]', 'my-style-id');
-    $this->assertFieldByName('intelligence_metadata[purchase_order]', 'PO32');
-    $this->assertFieldByName('intelligence_metadata[region]', 'region2');
+    $this->assertSession()->checkboxNotChecked('edit-intelligence-metadata-use-contact-email-for-author');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[default_author_email]', 'test@example.com');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[business_unit]', 'Test Business Unit');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[business_division]', 'Test Business Division');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[campaign_id]', 'Campaign ID');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[campaign_rating]', 5);
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[channel]', 'Channel Test');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[contact_name]', 'Test Contact Name');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[contact_email]', 'contact@example.com');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[content_description]', 'Content description');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[external_style_id]', 'my-style-id');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[purchase_order]', 'PO32');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[region]', 'region2');

     /** @var \Drupal\lingotek\LingotekIntelligenceMetadataInterface $intelligence */
     $intelligence = \Drupal::service('lingotek.intelligence');
@@ @@
     $this->assertTrue($intelligence->getBaseDomainPermission());
     $this->assertTrue($intelligence->getReferenceUrlPermission());

-    $this->assertIdentical($intelligence->getDefaultAuthorEmail(), 'test@example.com');
-    $this->assertIdentical($intelligence->getBusinessUnit(), 'Test Business Unit');
-    $this->assertIdentical($intelligence->getBusinessDivision(), 'Test Business Division');
-    $this->assertIdentical($intelligence->getCampaignId(), 'Campaign ID');
-    $this->assertIdentical($intelligence->getCampaignRating(), 5);
-    $this->assertIdentical($intelligence->getChannel(), 'Channel Test');
-    $this->assertIdentical($intelligence->getContactName(), 'Test Contact Name');
-    $this->assertIdentical($intelligence->getContactEmail(), 'contact@example.com');
-    $this->assertIdentical($intelligence->getContentDescription(), 'Content description');
-    $this->assertIdentical($intelligence->getExternalStyleId(), 'my-style-id');
-    $this->assertIdentical($intelligence->getPurchaseOrder(), 'PO32');
-    $this->assertIdentical($intelligence->getRegion(), 'region2');
+    $this->assertSame($intelligence->getDefaultAuthorEmail(), 'test@example.com');
+    $this->assertSame($intelligence->getBusinessUnit(), 'Test Business Unit');
+    $this->assertSame($intelligence->getBusinessDivision(), 'Test Business Division');
+    $this->assertSame($intelligence->getCampaignId(), 'Campaign ID');
+    $this->assertSame($intelligence->getCampaignRating(), 5);
+    $this->assertSame($intelligence->getChannel(), 'Channel Test');
+    $this->assertSame($intelligence->getContactName(), 'Test Contact Name');
+    $this->assertSame($intelligence->getContactEmail(), 'contact@example.com');
+    $this->assertSame($intelligence->getContentDescription(), 'Content description');
+    $this->assertSame($intelligence->getExternalStyleId(), 'my-style-id');
+    $this->assertSame($intelligence->getPurchaseOrder(), 'PO32');
+    $this->assertSame($intelligence->getRegion(), 'region2');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertIdenticalRector
 * AssertNoFieldCheckedRector
 * AssertRawRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


23) modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabIntegrationFormTest.php:25

    ---------- begin diff ----------
@@ @@
    */
   public function testTabNotShownIfThereAreNoSettings() {
     $this->drupalGet('admin/lingotek/settings');
-    $this->assertNoText('Integrations Settings');
+    $this->assertSession()->pageTextNotContains('Integrations Settings');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


24) modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabContentFormTest.php:60

    ---------- begin diff ----------
@@ @@
    */
   public function testNoUntranslatableEntitiesAreShown() {
     $this->drupalGet('admin/lingotek/settings');
-    $this->assertText('There are no translatable content entities specified');
+    $this->assertSession()->pageTextContains('There are no translatable content entities specified');
   }

   /**
@@ @@

     // Check the form contains the article type and only its text-based fields.
     $this->drupalGet('admin/lingotek/settings');
-    $this->assertNoText('There are no translatable content types specified');
-    $this->assertNoField('node[article][fields][langcode]');
-    $this->assertField('node[article][enabled]');
-    $this->assertField('node[article][profiles]');
-    $this->assertField('node[article][fields][title]');
-    $this->assertField('node[article][fields][body]');
+    $this->assertSession()->pageTextNotContains('There are no translatable content types specified');
+    $this->assertSession()->fieldNotExists('node[article][fields][langcode]');
+    $this->assertSession()->fieldExists('node[article][enabled]');
+    $this->assertSession()->fieldExists('node[article][profiles]');
+    $this->assertSession()->fieldExists('node[article][fields][title]');
+    $this->assertSession()->fieldExists('node[article][fields][body]');

     // Check the title and body fields.
     $edit = [
@@ @@
       'user[user][fields][user_picture]' => 1,
       'user[user][fields][user_picture:properties][alt]' => 'alt',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

     // Check that values are kept in the form.
-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldByName('node[article][profiles]', 'automatic');
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->fieldValueEquals('node[article][profiles]', 'automatic');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     // Check that the config is correctly saved.
     $config_data = $this->config('lingotek.settings')->getRawData();
@@ @@
     $this->assertTrue($config_data['translate']['entity']['node']['article']['field']['body']);
     $this->assertTrue($config_data['translate']['entity']['node']['article']['field']['field_image']);
     // As the schema here is sequence:ignore, there is no boolean casting.
-    $this->assertEqual($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['alt'], '1');
-    $this->assertEqual($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['title'], '0');
+    $this->assertEquals($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['alt'], '1');
+    $this->assertEquals($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['title'], '0');
     $this->assertFalse(array_key_exists('revision_log', $config_data['translate']['entity']['node']['article']['field']));
-    $this->assertEqual('automatic', $config_data['translate']['entity']['node']['article']['profile']);
+    $this->assertEquals('automatic', $config_data['translate']['entity']['node']['article']['profile']);
   }

   /**
@@ @@
       'user[user][fields][user_picture:properties][alt]' => FALSE,
       'user[user][fields][user_picture:properties][title]' => 'title',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

     // Check that values are kept in the form.
-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldByName('node[article][profiles]', 'automatic');
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->fieldValueEquals('node[article][profiles]', 'automatic');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-title');

     // Check that the config is correctly saved.
     $config_data = $this->config('lingotek.settings')->getRawData();
@@ @@
     $this->assertTrue($config_data['translate']['entity']['node']['article']['field']['body']);
     $this->assertTrue($config_data['translate']['entity']['node']['article']['field']['field_image']);
     // As the schema here is sequence:ignore, there is no boolean casting.
-    $this->assertEqual($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['alt'], '0');
-    $this->assertEqual($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['title'], '1');
+    $this->assertEquals($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['alt'], '0');
+    $this->assertEquals($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['title'], '1');
     $this->assertFalse(array_key_exists('revision_log', $config_data['translate']['entity']['node']['article']['field']));
-    $this->assertEqual('automatic', $config_data['translate']['entity']['node']['article']['profile']);
+    $this->assertEquals('automatic', $config_data['translate']['entity']['node']['article']['profile']);

     // Uncheck a couple of fields: body and image from node.
     $edit = [
@@ @@
       'user[user][fields][user_picture:properties][alt]' => FALSE,
       'user[user][fields][user_picture:properties][title]' => 'title',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

     // Check that values are kept in the form.
-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldByName('node[article][profiles]', 'automatic');
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertNoFieldChecked('edit-node-article-fields-body');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->fieldValueEquals('node[article][profiles]', 'automatic');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     // Check that the config is correctly saved.
     $config_data = $this->config('lingotek.settings')->getRawData();
@@ @@
     // As the schema here is sequence:ignore, there is no boolean casting.
     // This should probably just be deleted.
     $this->assertFalse(array_key_exists('alt', $config_data['translate']['entity']['node']['article']['field']['field_image:properties']));
-    $this->assertEqual($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['title'], '0');
+    $this->assertEquals($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['title'], '0');
     $this->assertFalse(array_key_exists('revision_log', $config_data['translate']['entity']['node']['article']['field']));
-    $this->assertEqual('automatic', $config_data['translate']['entity']['node']['article']['profile']);
+    $this->assertEquals('automatic', $config_data['translate']['entity']['node']['article']['profile']);

     // Uncheck user for translation.
     $edit = [
@@ @@
       'node[article][fields][field_image:properties][title]' => 'title',
       'user[user][enabled]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

     // Check that values are kept in the form.
-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldByName('node[article][profiles]', 'automatic');
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertNoFieldChecked('edit-node-article-fields-body');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->fieldValueEquals('node[article][profiles]', 'automatic');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

-    $this->assertNoFieldChecked('edit-user-user-enabled');
-    $this->assertFieldByName('user[user][profiles]', 'automatic');
-    $this->assertFieldChecked('edit-user-user-fields-user-picture');
-    $this->assertFieldChecked('edit-user-user-fields-user-pictureproperties-title');
+    $this->assertSession()->checkboxNotChecked('edit-user-user-enabled');
+    $this->assertSession()->fieldValueEquals('user[user][profiles]', 'automatic');
+    $this->assertSession()->checkboxChecked('edit-user-user-fields-user-picture');
+    $this->assertSession()->checkboxChecked('edit-user-user-fields-user-pictureproperties-title');

     // Check that the config is correctly saved.
     $config_data = $this->config('lingotek.settings')->getRawData();
@@ @@
     // As the schema here is sequence:ignore, there is no boolean casting.
     // This should probably just be deleted.
     $this->assertFalse(array_key_exists('alt', $config_data['translate']['entity']['node']['article']['field']['field_image:properties']));
-    $this->assertEqual($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['title'], '0');
+    $this->assertEquals($config_data['translate']['entity']['node']['article']['field']['field_image:properties']['title'], '0');
     $this->assertFalse(array_key_exists('revision_log', $config_data['translate']['entity']['node']['article']['field']));
-    $this->assertEqual('automatic', $config_data['translate']['entity']['node']['article']['profile']);
+    $this->assertEquals('automatic', $config_data['translate']['entity']['node']['article']['profile']);

     $this->assertFalse($config_data['translate']['entity']['user']['user']['enabled']);
     $this->assertTrue($config_data['translate']['entity']['user']['user']['field']['user_picture']);
-    $this->assertEqual($config_data['translate']['entity']['user']['user']['field']['user_picture:properties']['title'], '1');
+    $this->assertEquals($config_data['translate']['entity']['user']['user']['field']['user_picture:properties']['title'], '1');
   }

   public function testICanDisableFields() {
@@ @@
       'node[article][fields][field_image]' => 1,
       'node[article][fields][field_image:properties][alt]' => 'alt',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');
     // Assert that body translation is enabled.
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');

     // Submit again unchecking body and image including subfields.
     $edit = [
@@ @@
       'node[article][fields][field_image]' => FALSE,
       'node[article][fields][field_image:properties][alt]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

     // Those checkboxes should not be checked anymore.
-    $this->assertNoFieldChecked('edit-node-article-fields-body');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');

   }

@@ @@
       'node[article][fields][field_image]' => 1,
       'node[article][fields][field_image:properties][alt]' => 'alt',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');
     // Assert that body translation is enabled.
-    $this->assertFieldChecked('edit-node-article-fields-title', 'The title field is enabled after enabled for Lingotek translation');
-    $this->assertFieldChecked('edit-node-article-fields-body', 'The body field is enabled after enabled for Lingotek translation');
-    $this->assertFieldChecked('edit-node-article-fields-field-image', 'The image field is enabled after enabled for Lingotek translation');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt', 'The image alt property is enabled after enabled for Lingotek translation');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title', 'The title field is enabled after enabled for Lingotek translation');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body', 'The body field is enabled after enabled for Lingotek translation');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image', 'The image field is enabled after enabled for Lingotek translation');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt', 'The image alt property is enabled after enabled for Lingotek translation');

     // Go to the content language settings, and disable the body field.
     // It should result that the field is disabled in Lingotek too.
@@ @@
       'settings[node][article][fields][body]' => FALSE,
       'settings[node][article][fields][field_image]' => FALSE,
     ];
-    $this->drupalPostForm('admin/config/regional/content-language', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/regional/content-language');
+    $this->submitForm($edit, t('Save configuration'));

     // Get the form and check the fields are not available, because they cannot be translated.
     $this->drupalGet('admin/lingotek/settings');
-    $this->assertFieldChecked('edit-node-article-fields-title', 'The title field is enabled after other fields were disabled for content translation');
-    $this->assertNoFieldById('edit-node-article-fields-body', 'The body field is not present after disabled for content translation');
-    $this->assertNoFieldById('edit-node-article-fields-field-image', 'The image field is not present after disabled for content translation');
-    $this->assertNoFieldById('edit-node-article-fields-field-imageproperties-alt', 'The image alt property is not present after image was disabled for content translation');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title', 'The title field is enabled after other fields were disabled for content translation');
+    $this->assertSession()->fieldValueNotEquals('edit-node-article-fields-body', 'The body field is not present after disabled for content translation');
+    $this->assertSession()->fieldValueNotEquals('edit-node-article-fields-field-image', 'The image field is not present after disabled for content translation');
+    $this->assertSession()->fieldValueNotEquals('edit-node-article-fields-field-imageproperties-alt', 'The image alt property is not present after image was disabled for content translation');

     // But also check that the fields are not enabled.
     /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
@@ @@
     // Get the form and check the field is not available, even if the storage
     // is translatable.
     $this->drupalGet('admin/lingotek/settings');
-    $this->assertNoFieldById('edit-node-article-fields-field-image', '', 'The image field is not present after marked as not translatable.');
+    $this->assertSession()->fieldValueNotEquals('edit-node-article-fields-field-image', '');

     // Make the field translatable again.
     $field->setTranslatable(TRUE)->save();
@@ @@

     // If the field is translatable, the field is available again.
     $this->drupalGet('admin/lingotek/settings');
-    $this->assertFieldById('edit-node-article-fields-field-image', '', 'The image field is present after marked as translatable.');
+    $this->assertSession()->fieldValueEquals('edit-node-article-fields-field-image', '');
   }

   public function testAddContentTypeAndConfigureLingotekToTranslate() {
@@ @@
     // Check the form contains the article type and only its text-based fields.
     $this->drupalGet('admin/structure/types');
     $this->clickLink('Add content type');
-    $this->assertNoFieldChecked('language_configuration[language_alterable]');
-    $this->assertNoFieldChecked('language_configuration[content_translation]');
-    $this->assertNoFieldChecked('language_configuration[content_translation_for_lingotek]');
+    $this->assertSession()->checkboxNotChecked('language_configuration[language_alterable]');
+    $this->assertSession()->checkboxNotChecked('language_configuration[content_translation]');
+    $this->assertSession()->checkboxNotChecked('language_configuration[content_translation_for_lingotek]');

     $edit = [
       'name' => 'Test',
@@ @@
       'language_configuration[content_translation]' => TRUE,
       'language_configuration[content_translation_for_lingotek]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save and manage fields');
-    $this->assertText('The content type Test has been added.');
+    $this->submitForm($edit, 'Save and manage fields');
+    $this->assertSession()->pageTextContains('The content type Test has been added.');

     // It should result that the field is enabled in Lingotek settings.
     $this->drupalGet('admin/lingotek/settings');
-    $this->assertFieldChecked('edit-node-test-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-test-enabled');

     // We automatically enabled sensible defaults fields according to their type.
-    $this->assertFieldChecked('edit-node-test-fields-title');
-    $this->assertFieldChecked('edit-node-test-fields-body');
-    $this->assertNoFieldChecked('edit-node-test-fields-uid');
+    $this->assertSession()->checkboxChecked('edit-node-test-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-test-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-test-fields-uid');
   }

   /**
@@ @@
       'language_configuration[content_translation]' => FALSE,
       'language_configuration[content_translation_for_lingotek]' => FALSE,
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article', $edit, t('Save content type'));
+    $this->drupalGet('admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));

     // Check the form contains the article type and only its text-based fields.
     $this->drupalGet('admin/structure/types/manage/article');

     $this->drupalGet('admin/lingotek/settings');
-    $this->assertText('There are no translatable content entities specified');
+    $this->assertSession()->pageTextContains('There are no translatable content entities specified');

     // It should result that the field is enabled in Lingotek.
     $edit = [
@@ @@
       'language_configuration[content_translation]' => TRUE,
       'language_configuration[content_translation_for_lingotek]' => TRUE,
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article', $edit, t('Save content type'));
+    $this->drupalGet('admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));
     $this->applyEntityUpdates();

     // Check the form contains the article type and only its text-based fields.
@@ @@
     $this->drupalGet('admin/structure/types/manage/article');

     $this->drupalGet('admin/lingotek/settings');
-    $this->assertFieldChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');

     // We automatically enabled sensible defaults fields according to their type.
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertNoFieldChecked('edit-node-article-fields-uid');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-uid');
   }

   /**
@@ @@
     $this->drupalGet('admin/lingotek/settings');

     // Check the form contains the fields but they are disabled.
-    $this->assertNoFieldChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-body');

     // Check body field.
     $edit = [
@@ @@
       'node[article][profiles]' => 'automatic',
       'node[article][fields][body]' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
-    $this->assertFieldChecked('edit-node-article-fields-body');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');

     $this->drupalGet('/admin/config/regional/config-translation/node_fields');
     $this->clickLink(t('Translate'), 0);
     $this->clickLink('Edit');

-    $this->assertFieldChecked('edit-translatable-for-lingotek');
+    $this->assertSession()->checkboxChecked('edit-translatable-for-lingotek');
     // There are no properties to show.
-    $this->assertNoRaw('Lingotek translation');
+    $this->assertSession()->responseNotContains('Lingotek translation');

     $edit = [
       'translatable_for_lingotek' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
     $this->clickLink('Edit');

-    $this->assertNoFieldChecked('edit-translatable-for-lingotek');
+    $this->assertSession()->checkboxNotChecked('edit-translatable-for-lingotek');

     $this->drupalGet('/admin/lingotek/settings');

-    $this->assertNoFieldChecked("edit-node-article-fields-body");
+    $this->assertSession()->checkboxNotChecked("edit-node-article-fields-body");

     $this->drupalGet('/admin/config/regional/config-translation/node_fields');
     $this->clickLink(t('Translate'), 0);
@@ @@
     $edit = [
       'translatable_for_lingotek' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
     $this->clickLink('Edit');

-    $this->assertFieldChecked('edit-translatable-for-lingotek');
+    $this->assertSession()->checkboxChecked('edit-translatable-for-lingotek');

     $this->drupalGet('/admin/lingotek/settings');
-    $this->assertFieldChecked("edit-node-article-fields-body");
+    $this->assertSession()->checkboxChecked("edit-node-article-fields-body");
   }

   /**
@@ @@
     $this->drupalGet('admin/lingotek/settings');

     // Check the form contains the fields but they are disabled.
-    $this->assertNoFieldChecked('edit-node-article-fields-body');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');

     // Check image and alt subfield.
     $edit = [
@@ @@
       'node[article][fields][field_image]' => 1,
       'node[article][fields][field_image:properties][alt]' => 'alt',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     // Submit again unchecking image including subfields.
     $edit = [
@@ @@
       'node[article][fields][field_image]' => FALSE,
       'node[article][fields][field_image:properties][alt]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

     // Those checkboxes should not be checked anymore.
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     $this->drupalGet('/admin/config/regional/config-translation/node_fields');
     $this->clickLink(t('Translate'), 1);
     $this->clickLink('Edit');

-    $this->assertNoFieldChecked('edit-translatable-for-lingotek');
-    $this->assertNoFieldChecked('edit-third-party-settings-content-translation-translation-sync-file');
-    $this->assertFieldChecked('edit-third-party-settings-content-translation-translation-sync-alt');
-    $this->assertFieldChecked('edit-third-party-settings-content-translation-translation-sync-title');
-    $this->assertNoFieldChecked('edit-translatable-for-lingotek-properties-file');
-    $this->assertNoFieldChecked('edit-translatable-for-lingotek-properties-alt');
-    $this->assertNoFieldChecked('edit-translatable-for-lingotek-properties-title');
+    $this->assertSession()->checkboxNotChecked('edit-translatable-for-lingotek');
+    $this->assertSession()->checkboxNotChecked('edit-third-party-settings-content-translation-translation-sync-file');
+    $this->assertSession()->checkboxChecked('edit-third-party-settings-content-translation-translation-sync-alt');
+    $this->assertSession()->checkboxChecked('edit-third-party-settings-content-translation-translation-sync-title');
+    $this->assertSession()->checkboxNotChecked('edit-translatable-for-lingotek-properties-file');
+    $this->assertSession()->checkboxNotChecked('edit-translatable-for-lingotek-properties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-translatable-for-lingotek-properties-title');

     $edit = [
       'translatable_for_lingotek' => 1,
@@ @@
       'third_party_settings[content_translation][translation_sync][alt]' => 'alt',
       'translatable_for_lingotek_properties_alt' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
     $this->clickLink('Edit');

-    $this->assertFieldChecked('edit-translatable-for-lingotek');
-    $this->assertNoFieldChecked('edit-third-party-settings-content-translation-translation-sync-file');
-    $this->assertFieldChecked('edit-third-party-settings-content-translation-translation-sync-alt');
-    $this->assertFieldChecked('edit-third-party-settings-content-translation-translation-sync-title');
-    $this->assertNoFieldChecked('edit-translatable-for-lingotek-properties-file');
-    $this->assertFieldChecked('edit-translatable-for-lingotek-properties-alt');
-    $this->assertNoFieldChecked('edit-translatable-for-lingotek-properties-title');
+    $this->assertSession()->checkboxChecked('edit-translatable-for-lingotek');
+    $this->assertSession()->checkboxNotChecked('edit-third-party-settings-content-translation-translation-sync-file');
+    $this->assertSession()->checkboxChecked('edit-third-party-settings-content-translation-translation-sync-alt');
+    $this->assertSession()->checkboxChecked('edit-third-party-settings-content-translation-translation-sync-title');
+    $this->assertSession()->checkboxNotChecked('edit-translatable-for-lingotek-properties-file');
+    $this->assertSession()->checkboxChecked('edit-translatable-for-lingotek-properties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-translatable-for-lingotek-properties-title');

     $this->drupalGet('/admin/lingotek/settings');

-    $this->assertFieldChecked("edit-node-article-fields-field-image");
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked("edit-node-article-fields-field-image");
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     $edit = [
       'node[article][fields][field_image]' => 1,
@@ @@
       'node[article][fields][field_image:properties][alt]' => FALSE,
       'node[article][fields][field_image:properties][title]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     $this->drupalGet('/admin/config/regional/config-translation/node_fields');
     $this->clickLink(t('Translate'), 1);
@@ @@
       'translatable_for_lingotek_properties_title' => 1,
       'translatable_for_lingotek_properties_file' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
     $this->clickLink('Edit');

-    $this->assertFieldChecked('edit-translatable-for-lingotek');
-    $this->assertFieldChecked('edit-third-party-settings-content-translation-translation-sync-file');
-    $this->assertFieldChecked('edit-third-party-settings-content-translation-translation-sync-alt');
-    $this->assertFieldChecked('edit-third-party-settings-content-translation-translation-sync-title');
-    $this->assertFieldChecked('edit-translatable-for-lingotek-properties-file');
-    $this->assertFieldChecked('edit-translatable-for-lingotek-properties-alt');
-    $this->assertFieldChecked('edit-translatable-for-lingotek-properties-title');
+    $this->assertSession()->checkboxChecked('edit-translatable-for-lingotek');
+    $this->assertSession()->checkboxChecked('edit-third-party-settings-content-translation-translation-sync-file');
+    $this->assertSession()->checkboxChecked('edit-third-party-settings-content-translation-translation-sync-alt');
+    $this->assertSession()->checkboxChecked('edit-third-party-settings-content-translation-translation-sync-title');
+    $this->assertSession()->checkboxChecked('edit-translatable-for-lingotek-properties-file');
+    $this->assertSession()->checkboxChecked('edit-translatable-for-lingotek-properties-alt');
+    $this->assertSession()->checkboxChecked('edit-translatable-for-lingotek-properties-title');

     $this->drupalGet('/admin/lingotek/settings');

-    $this->assertFieldChecked("edit-node-article-fields-field-image");
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked("edit-node-article-fields-field-image");
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-title');

     $edit = [
       'node[article][fields][field_image]' => 1,
@@ @@
       'node[article][fields][field_image:properties][alt]' => FALSE,
       'node[article][fields][field_image:properties][title]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

-    $this->assertFieldChecked("edit-node-article-fields-field-image");
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked("edit-node-article-fields-field-image");
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     $this->drupalGet('/admin/config/regional/config-translation/node_fields');
     $this->clickLink(t('Translate'), 1);
@@ @@
       'translatable_for_lingotek_properties_title' => 1,
       'translatable_for_lingotek_properties_file' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
     $this->clickLink('Edit');

-    $this->assertFieldChecked('edit-translatable-for-lingotek');
-    $this->assertNoFieldChecked('edit-third-party-settings-content-translation-translation-sync-file');
-    $this->assertNoFieldChecked('edit-third-party-settings-content-translation-translation-sync-alt');
-    $this->assertNoFieldChecked('edit-third-party-settings-content-translation-translation-sync-title');
-    $this->assertNoFieldChecked('edit-translatable-for-lingotek-properties-file');
-    $this->assertNoFieldChecked('edit-translatable-for-lingotek-properties-alt');
-    $this->assertNoFieldChecked('edit-translatable-for-lingotek-properties-title');
+    $this->assertSession()->checkboxChecked('edit-translatable-for-lingotek');
+    $this->assertSession()->checkboxNotChecked('edit-third-party-settings-content-translation-translation-sync-file');
+    $this->assertSession()->checkboxNotChecked('edit-third-party-settings-content-translation-translation-sync-alt');
+    $this->assertSession()->checkboxNotChecked('edit-third-party-settings-content-translation-translation-sync-title');
+    $this->assertSession()->checkboxNotChecked('edit-translatable-for-lingotek-properties-file');
+    $this->assertSession()->checkboxNotChecked('edit-translatable-for-lingotek-properties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-translatable-for-lingotek-properties-title');

     $this->drupalGet('/admin/lingotek/settings');

-    $this->assertFieldChecked("edit-node-article-fields-field-image");
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked("edit-node-article-fields-field-image");
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');

     $edit = [
       'node[article][fields][field_image]' => 1,
@@ @@
       'node[article][fields][field_image:properties][title]' => FALSE,
       'node[article][fields][field_image:properties][file]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
   }

   public function testContentTypesAreNotDisabledIfThereAreLotsOfContentTypes() {
@@ @@

     // Check the form contains the fields, and have the proper values,
     // but they are disabled.
-    $this->assertFieldChecked('edit-node-article-readonly-enabled');
-    $this->assertFieldByName('node[article][profiles]', 'automatic');
+    $this->assertSession()->checkboxChecked('edit-node-article-readonly-enabled');
+    $this->assertSession()->fieldValueEquals('node[article][profiles]', 'automatic');

     $edit = ['node[article][profiles]' => 'manual'];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

     // Check the form contains the fields, and have the proper values,
     // but they are disabled.
-    $this->assertFieldChecked('edit-node-article-readonly-enabled');
-    $this->assertFieldByName('node[article][profiles]', 'manual');
+    $this->assertSession()->checkboxChecked('edit-node-article-readonly-enabled');
+    $this->assertSession()->fieldValueEquals('node[article][profiles]', 'manual');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByIdRector
 * AssertFieldByNameRector
 * AssertFieldCheckedRector
 * AssertFieldRector
 * AssertNoFieldByIdRector
 * AssertNoFieldCheckedRector
 * AssertNoFieldRector
 * AssertNoRawRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


25) modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabConfigurationFormTest.php:16

    ---------- begin diff ----------
@@ @@
   public function testConfigurationForm() {
     $this->drupalGet('admin/lingotek/settings');
     // Nothing is selected.
-    $this->assertNoFieldChecked('edit-table-configurable-language-enabled');
+    $this->assertSession()->checkboxNotChecked('edit-table-configurable-language-enabled');
     // Check the configurable language and set the manual profile.
     $edit = [
       'table[configurable_language][enabled]' => 1,
       'table[configurable_language][profile]' => 'manual',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save', [], 'lingoteksettings-tab-configuration-form');
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-configuration-form');

     // The values shown are correct.
-    $this->assertFieldChecked('edit-table-configurable-language-enabled');
-    $this->assertFieldByName('table[configurable_language][profile]', 'manual');
+    $this->assertSession()->checkboxChecked('edit-table-configurable-language-enabled');
+    $this->assertSession()->fieldValueEquals('table[configurable_language][profile]', 'manual');

     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $config_translation */
     $config_translation = \Drupal::service('lingotek.config_translation');
@@ @@
     $lingotek_config = \Drupal::service('lingotek.configuration');

     $this->assertTrue($config_translation->isEnabled('configurable_language'));
-    $this->assertEqual('manual', $lingotek_config->getConfigEntityDefaultProfileId('configurable_language'));
-    $this->assertEqual(['configurable_language'], $config_translation->getEnabledConfigTypes());
+    $this->assertEquals('manual', $lingotek_config->getConfigEntityDefaultProfileId('configurable_language'));
+    $this->assertEquals(['configurable_language'], $config_translation->getEnabledConfigTypes());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertFieldCheckedRector
 * AssertNoFieldCheckedRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


26) modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekFunctionalJavascriptTestBase.php:40

    ---------- begin diff ----------
@@ @@
   protected function connectToLingotek() {
     $this->drupalGet('admin/lingotek/setup/account');
     $this->clickLink('Connect Lingotek Account');
-    $this->drupalPostForm(NULL, ['community' => 'test_community'], 'Next');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm(['community' => 'test_community'], 'Next');
+    $this->submitForm([
       'project' => 'test_project',
       'vault' => 'test_vault',
     ], 'Save configuration');
@@ @@
         }
       }
     }
-    $this->drupalPostForm(NULL, [], 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm([], 'Save', 'lingoteksettings-tab-content-form');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


27) modules/contrib/lingotek/tests/src/Functional/Views/LingotekNodeBulkViewsTranslationTest.php:73

    ---------- begin diff ----------
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('it', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // But the disabled language won't be requested.
-    $this->assertText('Cannot request language Italian (it). That language is not enabled for Lingotek translation.');
+    $this->assertSession()->pageTextContains('Cannot request language Italian (it). That language is not enabled for Lingotek translation.');
   }

   /**
@@ @@
    */
   protected function assertSelectionIsKept(string $key) {
     // No valid selection, so permission denied message.
-    $this->assertText('You are not authorized to access this page.');
+    $this->assertSession()->pageTextContains('You are not authorized to access this page.');
   }

   /**
@@ @@
       $status_target = $this->xpath("//a[contains(@class,'language-icon') and contains(@class,'source-" . strtolower($status) . "')  and contains(text(), '" . strtoupper($language) . "')]");
       // If not found, maybe it didn't have a link.
       if (count($status_target) === 1) {
-        $this->assertEqual(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
+        $this->assertEquals(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
       }
       else {
         $status_target = $this->xpath("//span[contains(@class,'language-icon') and contains(@class,'source-" . strtolower($status) . "')  and contains(text(), '" . strtoupper($language) . "')]");
         if (count($status_target) === 1) {
-          $this->assertEqual(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
+          $this->assertEquals(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
         }
         else {
           $status_target = $this->xpath("//span[contains(@class,'language-icon')]");
-          $this->assertEqual(count($status_target), 0, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
+          $this->assertEquals(count($status_target), 0, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
         }
       }
     }
@@ @@
       $status_target = $this->xpath("//a[contains(@class,'language-icon') and contains(@class,'source-" . strtolower($status) . "')  and contains(text(), '" . strtoupper($language) . "')]");
       // If not found, maybe it didn't have a link.
       if (count($status_target) === 1) {
-        $this->assertEqual(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
+        $this->assertEquals(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
       }
       else {
         $status_target = $this->xpath("//span[contains(@class,'language-icon') and contains(@class,'source-" . strtolower($status) . "')  and contains(text(), '" . strtoupper($language) . "')]");
-        $this->assertEqual(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
+        $this->assertEquals(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
       }
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


28) modules/contrib/lingotek/tests/src/Functional/Update/LingotekUpgrade8221RemoveContentCloudSettingsTest.php:40

    ---------- begin diff ----------
@@ @@
    */
   public function testUpgrade() {
     $this->assertFalse($this->lingotekConfiguration->getPreference('enable_content_cloud'));
-    $this->assertEqual($this->lingotekConfiguration->getPreference('content_cloud_import_format'), 'article');
-    $this->assertEqual($this->lingotekConfiguration->getPreference('content_cloud_import_status'), 0);
+    $this->assertEquals($this->lingotekConfiguration->getPreference('content_cloud_import_format'), 'article');
+    $this->assertEquals($this->lingotekConfiguration->getPreference('content_cloud_import_status'), 0);

     $this->runUpdates();
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


29) modules/contrib/lingotek/tests/src/Functional/Render/Element/RenderElementTypesTest.php:179

    ---------- begin diff ----------
@@ @@
     $this->drupalGet('/lingotek_form_test/lingotek_translation_statuses/node/1');
     $this->assertSession()->responseContains('lingotek/css/base.css');
     $link = $this->xpath("//span[@class='language-icon target-untracked' and @title='Spanish - Translation exists, but it is not being tracked by Lingotek' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Span exists.');
+    $this->assertEquals(count($link), 1, 'Span exists.');

     $translation_service->setDocumentId($entity, 'test-document-id');

@@ @@

     $this->assertSession()->responseContains('lingotek/css/base.css');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/download/test-document-id/ca_ES?destination=" . $basepath . "/lingotek_form_test/lingotek_translation_statuses/node/1' and @class='language-icon target-ready' and @title='Catalan - Ready for Download' and text()='CA']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/check_target/test-document-id/de_DE?destination=" . $basepath . "/lingotek_form_test/lingotek_translation_statuses/node/1' and @class='language-icon target-pending' and @title='German - In-progress' and text()='DE']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/add_target/test-document-id/es_ES?destination=" . $basepath . "/lingotek_form_test/lingotek_translation_statuses/node/1' and @class='language-icon target-request' and @title='Spanish - Request translation' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');

     $translation_service->setTargetStatus($entity, 'es', Lingotek::STATUS_INTERMEDIATE);
     $translation_service->setTargetStatus($entity, 'de', Lingotek::STATUS_CURRENT);
@@ @@

     $this->assertSession()->responseContains('lingotek/css/base.css');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/workbench/test-document-id/ca_ES' and @target='_blank' and @class='language-icon target-edited' and @title='Catalan - Not current' and text()='CA']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/workbench/test-document-id/de_DE' and @target='_blank' and @class='language-icon target-current' and @title='German - Current' and text()='DE']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/workbench/test-document-id/es_ES' and @target='_blank' and @class='language-icon target-intermediate' and @title='Spanish - In-progress (interim translation downloaded)' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');

     $translation_service->setTargetStatus($entity, 'es', Lingotek::STATUS_ERROR);
     $this->drupalGet('/lingotek_form_test/lingotek_translation_statuses/node/1');
@@ @@

     $this->assertSession()->responseContains('lingotek/css/base.css');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/download/test-document-id/es_ES?destination=" . $basepath . "/lingotek_form_test/lingotek_translation_statuses/node/1' and @class='language-icon target-error' and @title='Spanish - Error' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');

     $translation_service->setTargetStatus($entity, 'es', Lingotek::STATUS_DISABLED);
     $this->drupalGet('/lingotek_form_test/lingotek_translation_statuses/node/1');
@@ @@

     $this->assertSession()->responseContains('lingotek/css/base.css');
     $link = $this->xpath("//span[@class='language-icon target-disabled' and @title='Spanish - Disabled' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Span exists.');
+    $this->assertEquals(count($link), 1, 'Span exists.');

     $translation_service->setTargetStatus($entity, 'es', Lingotek::STATUS_DELETED);
     $translation_service->setTargetStatus($entity, 'de', Lingotek::STATUS_ARCHIVED);
@@ @@
     $this->drupalGet('/lingotek_form_test/lingotek_translation_status/node/1');
     $this->assertSession()->responseContains('lingotek/css/base.css');
     $link = $this->xpath("//span[@class='language-icon target-untracked' and @title='Spanish - Translation exists, but it is not being tracked by Lingotek' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Span exists.');
+    $this->assertEquals(count($link), 1, 'Span exists.');

     $translation_service->setDocumentId($entity, 'test-document-id');

@@ @@

     $this->assertSession()->responseContains('lingotek/css/base.css');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/download/test-document-id/ca_ES?destination=" . $basepath . "/lingotek_form_test/lingotek_translation_status/node/1' and @class='language-icon target-ready' and @title='Catalan - Ready for Download' and text()='CA']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/check_target/test-document-id/de_DE?destination=" . $basepath . "/lingotek_form_test/lingotek_translation_status/node/1' and @class='language-icon target-pending' and @title='German - In-progress' and text()='DE']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/add_target/test-document-id/es_ES?destination=" . $basepath . "/lingotek_form_test/lingotek_translation_status/node/1' and @class='language-icon target-request' and @title='Spanish - Request translation' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');

     $translation_service->setTargetStatus($entity, 'es', Lingotek::STATUS_INTERMEDIATE);
     $translation_service->setTargetStatus($entity, 'de', Lingotek::STATUS_CURRENT);
@@ @@

     $this->assertSession()->responseContains('lingotek/css/base.css');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/workbench/test-document-id/ca_ES' and @target='_blank' and @class='language-icon target-edited' and @title='Catalan - Not current' and text()='CA']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/workbench/test-document-id/de_DE' and @target='_blank' and @class='language-icon target-current' and @title='German - Current' and text()='DE']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/workbench/test-document-id/es_ES' and @target='_blank' and @class='language-icon target-intermediate' and @title='Spanish - In-progress (interim translation downloaded)' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');

     $translation_service->setTargetStatus($entity, 'es', Lingotek::STATUS_ERROR);
     $this->drupalGet('/lingotek_form_test/lingotek_translation_status/node/1');
@@ @@

     $this->assertSession()->responseContains('lingotek/css/base.css');
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/download/test-document-id/es_ES?destination=" . $basepath . "/lingotek_form_test/lingotek_translation_status/node/1' and @class='language-icon target-error' and @title='Spanish - Error' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');

     $translation_service->setTargetStatus($entity, 'es', Lingotek::STATUS_DISABLED);
     $this->drupalGet('/lingotek_form_test/lingotek_translation_status/node/1');
@@ @@

     $this->assertSession()->responseContains('lingotek/css/base.css');
     $link = $this->xpath("//span[@class='language-icon target-disabled' and @title='Spanish - Disabled' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Span exists.');
+    $this->assertEquals(count($link), 1, 'Span exists.');

     $translation_service->setTargetStatus($entity, 'es', Lingotek::STATUS_DELETED);
     $translation_service->setTargetStatus($entity, 'de', Lingotek::STATUS_ARCHIVED);
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


30) modules/contrib/lingotek/tests/src/Functional/LingotekWorkbenchModerationTest.php:91

    ---------- begin diff ----------
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Request Review'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Request Review'));

-    $this->assertText('Article Llamas are cool has been created.');
-    $this->assertNoText('Llamas are cool sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Request Review'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Request Review'));

-    $this->assertText('Article Llamas are cool has been created.');
-    $this->assertNoText('Llamas are cool sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

-    $this->assertText('Article Llamas are cool has been created.');
-    $this->assertText('Llamas are cool sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

-    $this->assertText('Article Llamas are cool has been created.');
-    $this->assertNoText('Llamas are cool sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

-    $this->assertText('Article Llamas are cool has been created.');
-    $this->drupalPostForm('/node/1/edit', $edit, t('Save and Request Review (this translation)'));
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
+    $this->drupalGet('/node/1/edit');
+    $this->submitForm($edit, t('Save and Request Review (this translation)'));

-    $this->assertText('Article Llamas are cool has been updated.');
-    $this->assertNoText('Llamas are cool was updated and sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been updated.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool was updated and sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

-    $this->assertText('Article Llamas are cool has been created.');
-    $this->drupalPostForm('/node/1/edit', $edit, t('Save and Request Review (this translation)'));
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
+    $this->drupalGet('/node/1/edit');
+    $this->submitForm($edit, t('Save and Request Review (this translation)'));

-    $this->assertText('Article Llamas are cool has been updated.');
-    $this->assertNoText('Llamas are cool was updated and sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been updated.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool was updated and sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

-    $this->assertText('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
     $edit['title[0][value]'] = 'Llamas are cool!';
-    $this->drupalPostForm('/node/1/edit', $edit, t('Save and Create New Draft (this translation)'));
+    $this->drupalGet('/node/1/edit');
+    $this->submitForm($edit, t('Save and Create New Draft (this translation)'));

-    $this->assertText('Article Llamas are cool! has been updated.');
-    $this->assertText('Llamas are cool! was updated and sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool! has been updated.');
+    $this->assertSession()->pageTextContains('Llamas are cool! was updated and sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

-    $this->assertText('Article Llamas are cool has been created.');
-    $this->assertText('Llamas are cool sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextContains('Llamas are cool sent to Lingotek successfully.');
     $currentStatus = $this->getSession()->getPage()->find('css', 'div[id="edit-current"]');
-    $this->assertEqual($currentStatus->getText(), 'Status Draft');
+    $this->assertEquals($currentStatus->getText(), 'Status Draft');
+    $this->drupalGet('/node/1/edit');

-    $this->drupalPostForm('/node/1/edit', $edit, t('Save and Create New Draft (this translation)'));
-    $this->assertText('Article Llamas are cool has been updated.');
-    $this->assertText('Llamas are cool was updated and sent to Lingotek successfully.');
+    $this->submitForm($edit, t('Save and Create New Draft (this translation)'));
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been updated.');
+    $this->assertSession()->pageTextContains('Llamas are cool was updated and sent to Lingotek successfully.');
     $currentStatus = $this->getSession()->getPage()->find('css', 'div[id="edit-current"]');
-    $this->assertEqual($currentStatus->getText(), 'Status Draft');
+    $this->assertEquals($currentStatus->getText(), 'Status Draft');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

-    $this->assertText('Article Llamas are cool has been created.');
-    $this->drupalPostForm('/node/1/edit', $edit, t('Save and Create New Draft (this translation)'));
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
+    $this->drupalGet('/node/1/edit');
+    $this->submitForm($edit, t('Save and Create New Draft (this translation)'));

-    $this->assertText('Article Llamas are cool has been updated.');
-    $this->assertNoText('Llamas are cool was updated and sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been updated.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool was updated and sent to Lingotek successfully.');
   }

   /**
@@ @@
       'node[article][moderation][upload_status]' => 'needs_review',
       'node[article][moderation][download_transition]' => 'needs_review_published',
     ];
-    $this->drupalPostForm('admin/lingotek/settings', $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->drupalGet('admin/lingotek/settings', []);
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

     // Moderate.
     $edit = ['new_state' => 'needs_review'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
-    $this->assertText('The moderation state has been updated.');
-    $this->assertText('Llamas are cool sent to Lingotek successfully.');
+    $this->submitForm($edit, 'Apply');
+    $this->assertSession()->pageTextContains('The moderation state has been updated.');
+    $this->assertSession()->pageTextContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

     // Moderate.
     $edit = ['new_state' => 'published'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
-    $this->assertText('The moderation state has been updated.');
-    $this->assertNoText('Llamas are cool sent to Lingotek successfully.');
+    $this->submitForm($edit, 'Apply');
+    $this->assertSession()->pageTextContains('The moderation state has been updated.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

     // Moderate.
     $edit = ['new_state' => 'needs_review'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
-    $this->assertText('The moderation state has been updated.');
-    $this->assertNoText('Llamas are cool sent to Lingotek successfully.');
+    $this->submitForm($edit, 'Apply');
+    $this->assertSession()->pageTextContains('The moderation state has been updated.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

     // Moderate.
     $edit = ['new_state' => 'published'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
-    $this->assertText('The moderation state has been updated.');
-    $this->assertNoText('Llamas are cool sent to Lingotek successfully.');
+    $this->submitForm($edit, 'Apply');
+    $this->assertSession()->pageTextContains('The moderation state has been updated.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

     // The status is draft.
     $value = $this->xpath('//div[@id="edit-current"]/text()');
     $value = trim($value[1]->getText());
-    $this->assertEqual($value, 'Draft', 'Workbench current status is draft');
+    $this->assertEquals($value, 'Draft', 'Workbench current status is draft');

     // Moderate to Needs review, so it's uploaded.
     $edit = ['new_state' => 'needs_review'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
+    $this->submitForm($edit, 'Apply');

     // The status is needs review.
     $value = $this->xpath('//div[@id="edit-current"]/text()');
     $value = trim($value[1]->getText());
-    $this->assertEqual($value, 'Needs Review', 'Workbench current status is Needs Review');
+    $this->assertEquals($value, 'Needs Review', 'Workbench current status is Needs Review');

     $this->goToContentBulkManagementForm();
     // Request translation.
@@ @@

     // Let's see the current status is modified.
     $this->clickLink('Llamas are cool');
-    $this->assertNoFieldByName('new_state', 'The transition to a new workbench status happened (so no moderation form is shown).');
+    $this->assertSession()->fieldValueNotEquals('new_state', 'The transition to a new workbench status happened (so no moderation form is shown).');
   }

   public function testDownloadWhenContentModerationWasSetupAfterLingotek() {
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
-    $this->drupalPostForm('/node/add/article', $edit, t('Save and Create New Draft'));
+    $this->drupalGet('/node/add/article');
+    $this->submitForm($edit, t('Save and Create New Draft'));

     // The status is draft.
     $value = $this->xpath('//div[@id="edit-current"]/text()');
     $value = trim($value[1]->getText());
-    $this->assertEqual($value, 'Draft', 'Workbench current status is draft');
+    $this->assertEquals($value, 'Draft', 'Workbench current status is draft');

     // Moderate to Needs review, so it's uploaded.
     $edit = ['new_state' => 'needs_review'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
+    $this->submitForm($edit, 'Apply');

     // Moderate back to draft, so the transition won't happen on download.
     $edit = ['new_state' => 'draft'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
+    $this->submitForm($edit, 'Apply');

     $this->goToContentBulkManagementForm();
     // Request translation.
@@ @@
     $this->clickLink('Llamas are cool');
     $value = $this->xpath('//div[@id="edit-current"]/text()');
     $value = trim($value[1]->getText());
-    $this->assertEqual($value, 'Draft', 'The transition to a new workbench status didn\'t happen because the source wasn\'t the expected.');
+    $this->assertEquals($value, 'Draft', 'The transition to a new workbench status didn\'t happen because the source wasn\'t the expected.');
   }

   /**
@@ @@
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
     $this->saveAndPublishNodeForm($edit, 'page');

-    $this->assertText('Page Llamas are cool has been created.');
-    $this->assertText('Llamas are cool sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Page Llamas are cool has been created.');
+    $this->assertSession()->pageTextContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
    */
   protected function enableModerationThroughUI($content_type_id, array $allowed_states, $default_state) {
     $this->drupalGet('admin/structure/types/manage/' . $content_type_id . '/moderation');
-    $this->assertFieldByName('enable_moderation_state');
-    $this->assertNoFieldChecked('edit-enable-moderation-state');
+    $this->assertSession()->fieldExists('enable_moderation_state');
+    $this->assertSession()->checkboxNotChecked('edit-enable-moderation-state');

     $edit['enable_moderation_state'] = 1;

@@ @@

     $edit['default_moderation_state'] = $default_state;

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * AssertNoFieldCheckedRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


31) modules/contrib/lingotek/tests/src/Functional/LingotekWorkbenchModerationSettingsTest.php:74

    ---------- begin diff ----------
@@ @@

     // We don't have any fields for configuring workbench moderation until it's
     // enabled.
-    $this->assertNoField('node[article][moderation][upload_status]',
-      'The field for setting the state when a content should be uploaded does not exist as workbench moderation is not enabled for this bundle.');
-    $this->assertNoField('node[article][moderation][download_transition]',
-      'The field for setting the transition that must happen after download does not exist as workbench moderation is not enabled for this bundle.');
+    $this->assertSession()->fieldNotExists('node[article][moderation][upload_status]', 'The field for setting the state when a content should be uploaded does not exist as workbench moderation is not enabled for this bundle.');
+    $this->assertSession()->fieldNotExists('node[article][moderation][download_transition]', 'The field for setting the transition that must happen after download does not exist as workbench moderation is not enabled for this bundle.');

-    $this->assertNoField('node[page][moderation][upload_status]',
-      'The field for setting the state when a content should be uploaded does not exist as workbench moderation is not enabled for this bundle.');
-    $this->assertNoField('node[page][moderation][download_transition]',
-      'The field for setting the transition that must happen after download does not exist as workbench moderation is not enabled for this bundle.');
+    $this->assertSession()->fieldNotExists('node[page][moderation][upload_status]', 'The field for setting the state when a content should be uploaded does not exist as workbench moderation is not enabled for this bundle.');
+    $this->assertSession()->fieldNotExists('node[page][moderation][download_transition]', 'The field for setting the transition that must happen after download does not exist as workbench moderation is not enabled for this bundle.');

     // We show a message and link for enabling it.
-    $this->assertText('This entity bundle is not enabled for moderation with workbench_moderation. You can change its settings here.');
+    $this->assertSession()->pageTextContains('This entity bundle is not enabled for moderation with workbench_moderation. You can change its settings here.');
     $assert_session->linkByHrefExists('/admin/structure/types/manage/article/moderation');
     $assert_session->linkByHrefExists('/admin/structure/types/manage/page/moderation');

@@ @@

     // Assert the fields for setting up the integration exist and they have
     // sensible defaults.
-    $this->assertField('node[article][moderation][upload_status]',
-      'The field for setting the state when a content should be uploaded exists.');
-    $this->assertField('node[article][moderation][download_transition]',
-      'The field for setting the transition that must happen after download exists.');
+    $this->assertSession()->fieldExists('node[article][moderation][upload_status]', 'The field for setting the state when a content should be uploaded exists.');
+    $this->assertSession()->fieldExists('node[article][moderation][download_transition]', 'The field for setting the transition that must happen after download exists.');
     $assert_session->optionExists('edit-node-article-moderation-upload-status', 'published');
     $assert_session->optionExists('edit-node-article-moderation-download-transition', 'published_published');

     // The content types without moderation enabled should show a link instead
     // for configuring them.
-    $this->assertNoField('node[page][moderation][upload_status]',
-      'The field for setting the state when a content should be uploaded does not exist as workbench moderation is not enabled for this bundle.');
-    $this->assertNoField('node[page][moderation][download_transition]',
-      'The field for setting the transition that must happen after download does not exist as workbench moderation is not enabled for this bundle.');
-    $this->assertText('This entity bundle is not enabled for moderation with workbench_moderation. You can change its settings here.');
+    $this->assertSession()->fieldNotExists('node[page][moderation][upload_status]', 'The field for setting the state when a content should be uploaded does not exist as workbench moderation is not enabled for this bundle.');
+    $this->assertSession()->fieldNotExists('node[page][moderation][download_transition]', 'The field for setting the transition that must happen after download does not exist as workbench moderation is not enabled for this bundle.');
+    $this->assertSession()->pageTextContains('This entity bundle is not enabled for moderation with workbench_moderation. You can change its settings here.');
     $assert_session->linkByHrefNotExists('/admin/structure/types/manage/article/moderation');
     $assert_session->linkByHrefExists('/admin/structure/types/manage/page/moderation');

@@ @@
     $assert_session->optionExists('edit-node-article-moderation-upload-status', 'draft');
     $assert_session->optionExists('edit-node-article-moderation-download-transition', 'draft_needs_review');

-    $this->assertNoField("taxonomy_term[$vocabulary_id][moderation][upload_status]",
-      'The field for setting the state when a content should be uploaded does not exist as workbench moderation is not available for this entity type.');
-    $this->assertNoField("taxonomy_term[$vocabulary_id][moderation][download_transition]",
-      'The field for setting the transition that must happen after download does not exist as workbench moderation is not available for this entity type.');
+    $this->assertSession()->fieldNotExists("taxonomy_term[$vocabulary_id][moderation][upload_status]", 'The field for setting the state when a content should be uploaded does not exist as workbench moderation is not available for this entity type.');
+    $this->assertSession()->fieldNotExists("taxonomy_term[$vocabulary_id][moderation][download_transition]", 'The field for setting the transition that must happen after download does not exist as workbench moderation is not available for this entity type.');

     $assert_session->linkByHrefExists("/admin/structure/taxonomy/manage/$vocabulary_id/moderation");
     // Users cannot be moderated.
-    $this->assertNoField("user[user][moderation][upload_status]",
-      'The field for setting the state when a content should be uploaded does not exist as workbench moderation is not available for this entity type.');
-    $this->assertNoField("user[user][moderation][download_transition]",
-      'The field for setting the transition that must happen after download does not exist as workbench moderation is not available for this entity type.');
+    $this->assertSession()->fieldNotExists("user[user][moderation][upload_status]", 'The field for setting the state when a content should be uploaded does not exist as workbench moderation is not available for this entity type.');
+    $this->assertSession()->fieldNotExists("user[user][moderation][download_transition]", 'The field for setting the transition that must happen after download does not exist as workbench moderation is not available for this entity type.');
     $assert_session->linkByHrefNotExists("/admin/structure/user/manage/user/moderation");

     $header = $this->xpath("//details[@id='edit-entity-node']//th[text()='Workbench Moderation']");
-    $this->assertEqual(count($header), 1, 'There is a Workbench Moderation column for content.');
+    $this->assertEquals(count($header), 1, 'There is a Workbench Moderation column for content.');
     $header = $this->xpath("//details[@id='edit-entity-taxonomy-term']//th[text()='Workbench Moderation']");
-    $this->assertEqual(count($header), 1, 'There is a Workbench Moderation column for terms.');
+    $this->assertEquals(count($header), 1, 'There is a Workbench Moderation column for terms.');
     $header = $this->xpath("//details[@id='edit-entity-user']//th[text()='Workbench Moderation']");
-    $this->assertEqual(count($header), 0, 'There is no Workbench Moderation column for users.');
+    $this->assertEquals(count($header), 0, 'There is no Workbench Moderation column for users.');
   }

   /**
@@ @@
    */
   protected function enableModerationThroughUI($content_type_id, array $allowed_states, $default_state) {
     $this->drupalGet('admin/structure/types/manage/' . $content_type_id . '/moderation');
-    $this->assertFieldByName('enable_moderation_state');
-    $this->assertNoFieldChecked('edit-enable-moderation-state');
+    $this->assertSession()->fieldExists('enable_moderation_state');
+    $this->assertSession()->checkboxNotChecked('edit-enable-moderation-state');

     $edit['enable_moderation_state'] = 1;

@@ @@

     $edit['default_moderation_state'] = $default_state;

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertFieldRector
 * AssertNoFieldCheckedRector
 * AssertNoFieldRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


32) modules/contrib/lingotek/tests/src/Functional/LingotekWorkbenchModerationCustomMenuLinkTest.php:67

    ---------- begin diff ----------
@@ @@
     $edit['link[0][uri]'] = '<front>';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
-    $this->drupalPostForm('/admin/structure/menu/manage/main/add', $edit, t('Save'));
+    $this->drupalGet('/admin/structure/menu/manage/main/add');
+    $this->submitForm($edit, t('Save'));

-    $this->assertText('The menu link has been saved.');
-    $this->assertText('Llamas are cool sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('The menu link has been saved.');
+    $this->assertSession()->pageTextContains('Llamas are cool sent to Lingotek successfully.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


33) modules/contrib/lingotek/tests/src/Functional/LingotekWebformBulkTranslationTest.php:96

    ---------- begin diff ----------
@@ @@
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/webform/test/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 1);
-    $this->assertText(t('Test uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('Test uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // Check that only the configured fields have been uploaded.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
-    $this->assertEqual('Test', $data['title']);
-    $this->assertEqual(6, count($data['elements']));
-    $this->assertEqual('First name', $data['elements']['first_name']['#title']);
-    $this->assertEqual('Last name', $data['elements']['last_name']['#title']);
-    $this->assertEqual('Sex', $data['elements']['sex']['#title']);
-    $this->assertEqual('Martial status', $data['elements']['martial_status']['#title']);
-    $this->assertEqual('Employment status', $data['elements']['employment_status']['#title']);
-    $this->assertEqual('Age', $data['elements']['age']['#title']);
+    $this->assertEquals('Test', $data['title']);
+    $this->assertEquals(6, count($data['elements']));
+    $this->assertEquals('First name', $data['elements']['first_name']['#title']);
+    $this->assertEquals('Last name', $data['elements']['last_name']['#title']);
+    $this->assertEquals('Sex', $data['elements']['sex']['#title']);
+    $this->assertEquals('Martial status', $data['elements']['martial_status']['#title']);
+    $this->assertEquals('Employment status', $data['elements']['employment_status']['#title']);
+    $this->assertEquals('Age', $data['elements']['age']['#title']);

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/webform/test?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/webform/test/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 1);
-    $this->assertText('Test status checked successfully');
+    $this->assertSession()->pageTextContains('Test status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/webform/test/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/webform/test/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX status checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX status checked successfully");

     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/webform/test/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'ES');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


34) modules/contrib/lingotek/tests/src/Functional/LingotekUtilitiesDisassociateAllDocumentsTest.php:126

    ---------- begin diff ----------
@@ @@
     $edit['name[0][value]'] = 'Llamas are cool';
     $edit['description[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
+    $this->drupalGet("admin/structure/taxonomy/manage/$bundle/add");

-    $this->drupalPostForm("admin/structure/taxonomy/manage/$bundle/add", $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->goToContentBulkManagementForm('taxonomy_term');

@@ @@

   public function testDisassociateAllDocuments() {
     $this->drupalGet('/admin/lingotek/settings');
-    $this->drupalPostForm(NULL, [], 'Disassociate');
-    $this->assertRaw("Are you sure you want to disassociate everything from Lingotek?");
-    $this->drupalPostForm(NULL, [], 'Disassociate');
-    $this->assertText('All translations have been disassociated.');
+    $this->submitForm([], 'Disassociate');
+    $this->assertSession()->responseContains("Are you sure you want to disassociate everything from Lingotek?");
+    $this->submitForm([], 'Disassociate');
+    $this->assertSession()->pageTextContains('All translations have been disassociated.');

     $node = Node::load(1);
     $term = Term::load(1);
@@ @@

     // Ensure we have disassociated the node.
     $this->assertNull($content_translation_service->getDocumentId($node), 'The node has been disassociated from its Lingotek Document ID');
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($node));

     // Ensure we have disassociated the term.
     $this->assertNull($content_translation_service->getDocumentId($term), 'The term has been disassociated from its Lingotek Document ID');
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($term));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($term));

     // Ensure we are disassociated the article type.
     $article_type = \Drupal::entityTypeManager()->getStorage('node_type')->load('article');
     $this->assertNull($config_translation_service->getDocumentId($article_type), 'The article node type has been disassociated from its Lingotek Document ID');
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $config_translation_service->getSourceStatus($article_type));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $config_translation_service->getSourceStatus($article_type));

     // Ensure we are disassociated the config system.site.
     $mappers = \Drupal::service('plugin.manager.config_translation.mapper')->getMappers();
     $mapper = $mappers['system.site_information_settings'];
     $this->assertNull($config_translation_service->getConfigDocumentId($mapper), 'The system.site config mapper has been disassociated from its Lingotek Document ID');
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $config_translation_service->getConfigSourceStatus($mapper));

     // Ensure the UIs show the right statuses.
     $this->goToContentBulkManagementForm('node');
@@ @@

     // Disassociate.
     $this->drupalGet('/admin/lingotek/settings');
-    $this->drupalPostForm(NULL, [], 'Disassociate');
-    $this->assertRaw("Are you sure you want to disassociate everything from Lingotek?");
-    $this->drupalPostForm(NULL, [], 'Disassociate');
-    $this->assertText('All translations have been disassociated.');
+    $this->submitForm([], 'Disassociate');
+    $this->assertSession()->responseContains("Are you sure you want to disassociate everything from Lingotek?");
+    $this->submitForm([], 'Disassociate');
+    $this->assertSession()->pageTextContains('All translations have been disassociated.');

     $node = Node::load(1);
     $term = Term::load(1);
@@ @@

     // Ensure we have disassociated the node.
     $this->assertNull($content_translation_service->getDocumentId($node), 'The node has been disassociated from its Lingotek Document ID');
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($node));

     // Ensure we have disassociated the term.
     $this->assertNull($content_translation_service->getDocumentId($term), 'The term has been disassociated from its Lingotek Document ID');
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($term));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($term));

     // Ensure we are disassociated the article type.
     $article_type = \Drupal::entityTypeManager()->getStorage('node_type')->load('article');
     $this->assertNull($config_translation_service->getDocumentId($article_type), 'The article node type has been disassociated from its Lingotek Document ID');
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $config_translation_service->getSourceStatus($article_type));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $config_translation_service->getSourceStatus($article_type));

     // Ensure we are disassociated the config system.site.
     $mappers = \Drupal::service('plugin.manager.config_translation.mapper')->getMappers();
     $mapper = $mappers['system.site_information_settings'];
     $this->assertNull($config_translation_service->getConfigDocumentId($mapper), 'The system.site config mapper has been disassociated from its Lingotek Document ID');
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $config_translation_service->getConfigSourceStatus($mapper));

     // Ensure the UIs show the right statuses.
     $this->goToContentBulkManagementForm('node');
@@ @@

     // Let's try to disassociate then.
     $this->drupalGet('/admin/lingotek/settings');
-    $this->drupalPostForm('admin/lingotek/settings', [], 'Disassociate');
-    $this->assertRaw("Are you sure you want to disassociate everything from Lingotek?");
-    $this->drupalPostForm(NULL, [], 'Disassociate');
-    $this->assertText('All translations have been disassociated.');
+    $this->drupalGet('admin/lingotek/settings');
+    $this->submitForm([], 'Disassociate');
+    $this->assertSession()->responseContains("Are you sure you want to disassociate everything from Lingotek?");
+    $this->submitForm([], 'Disassociate');
+    $this->assertSession()->pageTextContains('All translations have been disassociated.');

     // We create manually the given data for setting up an incorrect status.
     $metadata = LingotekContentMetadata::create();
@@ @@

     // Let's try to disassociate then.
     $this->drupalGet('/admin/lingotek/settings');
-    $this->drupalPostForm('admin/lingotek/settings', [], 'Disassociate');
-    $this->assertRaw("Are you sure you want to disassociate everything from Lingotek?");
-    $this->drupalPostForm(NULL, [], 'Disassociate');
-    $this->assertText('All translations have been disassociated.');
+    $this->drupalGet('admin/lingotek/settings');
+    $this->submitForm([], 'Disassociate');
+    $this->assertSession()->responseContains("Are you sure you want to disassociate everything from Lingotek?");
+    $this->submitForm([], 'Disassociate');
+    $this->assertSession()->pageTextContains('All translations have been disassociated.');
   }

   protected function createAndCancelANode() {
@@ @@
     $edit['name[0][value]'] = 'Llamas are cool';
     $edit['description[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
+    $this->drupalGet("admin/structure/taxonomy/manage/$bundle/add");

-    $this->drupalPostForm("admin/structure/taxonomy/manage/$bundle/add", $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->goToContentBulkManagementForm('taxonomy_term');
     $edit = [
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancel('taxonomy_term'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
   }

   protected function createAndCancelANodeType() {
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancel('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
   }

   protected function createAndCancelAConfig() {
@@ @@
       'table[system.site_maintenance_mode]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancel('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


35) modules/contrib/lingotek/tests/src/Functional/LingotekUserSettingsBulkTranslationTest.php:47

    ---------- begin diff ----------
@@ @@
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/entity.user.admin_form/entity.user.admin_form/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 3);
-    $this->assertText(t('Account settings uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('Account settings uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
     $this->verbose(var_export(\Drupal::state()->get('lingotek.uploaded_content'), TRUE));

     // There is a link for checking status.
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/entity.user.admin_form/entity.user.admin_form/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 3);
-    $this->assertText('Account settings status checked successfully');
+    $this->assertSession()->pageTextContains('Account settings status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/entity.user.admin_form/entity.user.admin_form/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/entity.user.admin_form/entity.user.admin_form/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX checked successfully");

     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/entity.user.admin_form/entity.user.admin_form/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'ES');
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/entity.user.admin_form/entity.user.admin_form?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request the German (AT) translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/entity.user.admin_form/entity.user.admin_form/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('de', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/entity.user.admin_form/entity.user.admin_form/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => 'check_translation:de',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.checked_target_locale'));

     // Download the German translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/entity.user.admin_form/entity.user.admin_form/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => 'download:de',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('de_AT', 'dummy-document-hash-id', 'DE');
@@ @@
     // Add a language so we can check that it's not marked as for requesting if
     // it was already requested.
     ConfigurableLanguage::createFromLangcode('ko')->setThirdPartySetting('lingotek', 'locale', 'ko_KR')->save();
+    $this->drupalGet('/admin/config/people/accounts');

     // Edit the object
-    $this->drupalPostForm('/admin/config/people/accounts', ['anonymous' => 'Unknown user'], t('Save configuration'));
+    $this->submitForm(['anonymous' => 'Unknown user'], t('Save configuration'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@

     // Request korean, with outdated content available.
     $this->clickLink('KO');
-    $this->assertText("Translation to ko_KR requested successfully");
+    $this->assertSession()->pageTextContains("Translation to ko_KR requested successfully");

     // Reupload the content.
     $this->clickLink('EN', 3);
-    $this->assertText('Account settings has been updated.');
+    $this->assertSession()->pageTextContains('Account settings has been updated.');

     // Korean should be marked as requested, so we can check target.
     $status = $this->xpath("//a[contains(@class,'language-icon') and contains(@class, 'target-pending')  and contains(text(), 'KO')]");
-    $this->assertEqual(count($status), 1, 'Korean is requested, so we can still check the progress status of the translation');
+    $this->assertEquals(count($status), 1, 'Korean is requested, so we can still check the progress status of the translation');

     // Recheck status.
     $this->clickLink('EN', 3);
-    $this->assertText('Account settings status checked successfully');
+    $this->assertSession()->pageTextContains('Account settings status checked successfully');

     // Check the translation after having been edited.
     // Check status of the Spanish translation.
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => 'check_translation:es',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Operations completed.');

     // Download the translation.
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
   }

   /**
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // I can check current status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/entity.user.admin_form/entity.user.admin_form?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/entity.user.admin_form/entity.user.admin_form/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check status of all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/entity.user.admin_form/entity.user.admin_form/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Download all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/entity.user.admin_form/entity.user.admin_form/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[entity.user.admin_form]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
   }

   /**
@@ @@
     // There is a link for requesting the Catalan translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/entity.user.admin_form/entity.user.admin_form/ca_ES?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('CA');
-    $this->assertText("Translation to ca_ES requested successfully");
+    $this->assertSession()->pageTextContains("Translation to ca_ES requested successfully");
   }

   /**
@@ @@
    * Test that when a config is uploaded in a different locale that locale is used.
    * ToDo: Add a test for this.
    */
-  public function testAddingConfigInDifferentLocale() {
-    $this->pass('Test not implemented yet.');
+  public function testAddingConfigInDifferentLocale()
+  {
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * PassRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


36) modules/contrib/lingotek/tests/src/Unit/LingotekQueueWorkerTest.php:29

    ---------- begin diff ----------
@@ @@
   protected function setUp(): void {
     parent::setUp();
     $this->lingotekDownloaderQueueWorker = new LingotekDownloaderQueueWorker([], 'lingotek_downloader_queue_worker', []);
-    $entity_type_manager = $this->getMockBuilder(EntityTypeManager::class)->disableOriginalConstructor()
-      ->getMock();
-    $node_storage = $this->getMockBuilder(NodeStorage::class)->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManager::class);
+    $node_storage = $this->createMock(NodeStorage::class);
     $node_storage->expects($this->any())
       ->method('load')
       ->with('random')
@@ @@
       ->method('getStorage')
       ->with('random')
       ->willReturn($node_storage);
-    $logger_factory = $this->getMockBuilder(LoggerChannelFactory::class)->disableOriginalConstructor()
-      ->getMock();
+    $logger_factory = $this->createMock(LoggerChannelFactory::class);
     $logger_factory->expects($this->any())
       ->method('get')
-      ->willReturn($this->getMockBuilder(LoggerInterface::class)->disableOriginalConstructor()->getMock());
+      ->willReturn($this->createMock(LoggerInterface::class));
     $container = new ContainerBuilder();
     $container->set('entity_type.manager', $entity_type_manager);
     $container->set('logger.factory', $logger_factory);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


37) modules/contrib/lingotek/tests/src/Unit/LingotekFilterManagerUnitTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The config object.
    *
-   * @var \Drupal\Core\Config\Config|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\Config|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $config;

@@ @@
    * {@inheritdoc}
    */
   protected function setUp(): void {
-    $this->config = $this->getMockBuilder(Config::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->config = $this->createMock(Config::class);
     $configFactory = $this->createMock(ConfigFactoryInterface::class);
     $configFactory->expects($this->any())
       ->method('get')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


38) modules/contrib/lingotek/tests/src/Unit/Form/LingotekSettingsTabUtilitiesFormTest.php:23

    ---------- begin diff ----------
@@ @@
     /**
      * The Lingotek service
      *
-     * @var \Drupal\lingotek\LingotekInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\lingotek\LingotekInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $lingotek;

@@ @@
     /**
      * The config factory.
      *
-     * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $configFactory;

     /**
-     * @var \Drupal\Core\State\StateInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\State\StateInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $state;

     /**
-     * @var \Drupal\Core\Routing\RouteBuilderInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Routing\RouteBuilderInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $routeBuilder;

@@ @@
     /**
      * The url generator.
      *
-     * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $urlGenerator;

@@ @@
     /**
      * The link generator.
      *
-     * @var \Drupal\Core\Utility\LinkGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Utility\LinkGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $linkGenerator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


39) modules/contrib/lingotek/tests/src/Unit/Form/LingotekSettingsTabAccountFormTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The Lingotek service
    *
-   * @var \Drupal\lingotek\LingotekInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LingotekInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $lingotek;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $configFactory;

@@ @@
   /**
    * The Lingotek Filter manager.
    *
-   * @var \Drupal\lingotek\LingotekFilterManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LingotekFilterManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $lingotekFilterManager;

@@ @@
   /**
    * The url generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $urlGenerator;

@@ @@
   /**
    * The link generator.
    *
-   * @var \Drupal\Core\Utility\LinkGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Utility\LinkGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $linkGenerator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


40) modules/contrib/lingotek/tests/src/Unit/Form/LingotekSettingsConnectFormTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The Lingotek service
    *
-   * @var \Drupal\lingotek\LingotekInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LingotekInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $lingotek;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $configFactory;

@@ @@
   /**
    * The Lingotek Filter manager.
    *
-   * @var \Drupal\lingotek\LingotekFilterManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LingotekFilterManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $lingotekFilterManager;

@@ @@
   /**
    * The url generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $urlGenerator;

@@ @@
   /**
    * The link generator.
    *
-   * @var \Drupal\Core\Utility\LinkGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Utility\LinkGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $linkGenerator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


41) modules/contrib/lingotek/tests/src/Unit/Form/LingotekManagementFormTest.php:40

    ---------- begin diff ----------
@@ @@
     /**
      * The connection object on which to run queries.
      *
-     * @var \Drupal\Core\Database\Connection|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Database\Connection|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $connection;

@@ @@
     /**
      * The language-locale mapper.
      *
-     * @var \Drupal\lingotek\LanguageLocaleMapperInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\lingotek\LanguageLocaleMapperInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $languageLocaleMapper;

@@ @@
     /**
      * The entity manager.
      *
-     * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $entityTypeManager;

@@ @@
     /**
      * The entity field manager.
      *
-     * @var \Drupal\Core\Entity\EntityFieldManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Entity\EntityFieldManagerInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $entityFieldManager;

@@ @@
     /**
      * The entity type bundle info.
      *
-     * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $entityTypeBundleInfo;

@@ @@
     /**
      * The language manager.
      *
-     * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $languageManager;

@@ @@
     /**
      * The Lingotek configuration service.
      *
-     * @var \Drupal\lingotek\LingotekConfigurationServiceInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\lingotek\LingotekConfigurationServiceInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $lingotekConfiguration;

@@ @@
     /**
      * The Lingotek service
      *
-     * @var \Drupal\lingotek\LingotekInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\lingotek\LingotekInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $lingotek;

@@ @@
     /**
      * The content translation manager.
      *
-     * @var \Drupal\content_translation\ContentTranslationManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\content_translation\ContentTranslationManagerInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $contentTranslationManager;

@@ @@
     /**
      * The Lingotek content translation service.
      *
-     * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $contentTranslationService;

@@ @@
     /**
      * The tempstore factory.
      *
-     * @var \Drupal\Core\TempStore\PrivateTempStoreFactory|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\TempStore\PrivateTempStoreFactory|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $tempStoreFactory;

@@ @@
     /**
      * The module handler.
      *
-     * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $moduleHandler;

@@ @@
     /**
      * The state key value store.
      *
-     * @var \Drupal\Core\State\StateInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\State\StateInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $state;

@@ @@
     /**
      * The link generator.
      *
-     * @var \Drupal\Core\Utility\LinkGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Utility\LinkGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $linkGenerator;

@@ @@
     protected function setUp(): void {
       parent::setUp();

-      $this->connection = $this->getMockBuilder(Connection::class)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->connection = $this->createMock(Connection::class);
       $this->entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
       $this->entityFieldManager = $this->createMock(EntityFieldManagerInterface::class);
       $this->entityTypeBundleInfo = $this->createMock(EntityTypeBundleInfoInterface::class);
@@ @@
       $this->languageLocaleMapper = $this->createMock(LanguageLocaleMapperInterface::class);
       $this->contentTranslationManager = $this->createMock(ContentTranslationManagerInterface::class);
       $this->contentTranslationService = $this->createMock(LingotekContentTranslationServiceInterface::class);
-      $this->tempStoreFactory = $this->getMockBuilder(PrivateTempStoreFactory::class)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->tempStoreFactory = $this->createMock(PrivateTempStoreFactory::class);
       $this->state = $this->createMock(StateInterface::class);
       $this->moduleHandler = $this->createMock(ModuleHandlerInterface::class);
       $this->linkGenerator = $this->createMock(LinkGeneratorInterface::class);
@@ @@
      * @covers ::buildForm
      */
     public function testQueryExcludesUndefinedLanguageContent() {
-      $select = $this->getMockBuilder(PagerSelectExtender::class)->disableOriginalConstructor()->getMock();
+      $select = $this->createMock(PagerSelectExtender::class);
       $select->expects(($this->any()))
         ->method('extend')
         ->with('\Drupal\Core\Database\Query\PagerSelectExtender')
@@ @@
         ->method('select')
         ->willReturn($select);

-      $tempStore = $this->getMockBuilder(PrivateTempStoreFactory::class)->disableOriginalConstructor()->getMock();
+      $tempStore = $this->createMock(PrivateTempStoreFactory::class);
       $this->tempStoreFactory->expects($this->at(0))
         ->method('get')
         ->with('lingotek.management.filter.node')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


42) modules/contrib/lingotek/tests/src/Unit/EventSubscriber/LingotekConfigSubscriberUnitTest.php:24

    ---------- begin diff ----------
@@ @@
     /**
      * The Lingotek content translation service.
      *
-     * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $translationService;

@@ @@
     /**
      * The mapper manager.
      *
-     * @var \Drupal\config_translation\ConfigMapperManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\config_translation\ConfigMapperManagerInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $mapperManager;

@@ @@
     /**
      * A array of configuration mapper instances.
      *
-     * @var \Drupal\config_translation\ConfigMapperInterface[]|\PHPUnit_Framework_MockObject_MockObject[]
+     * @var \Drupal\config_translation\ConfigMapperInterface[]|\PHPUnit\Framework\MockObject\MockObject[]
      */
     protected $mappers;

@@ @@
     /**
      * A configuration mapper instance.
      *
-     * @var \Drupal\config_translation\ConfigMapperInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\config_translation\ConfigMapperInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $mapper;

@@ @@
     /**
      * The Lingotek configuration service.
      *
-     * @var \Drupal\lingotek\LingotekConfigurationServiceInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\lingotek\LingotekConfigurationServiceInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $lingotekConfiguration;

@@ @@
     /**
      * Entity manager.
      *
-     * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $entityTypeManager;

@@ @@
     /**
      * The entity field manager.
      *
-     * @var \Drupal\Core\Entity\EntityFieldManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Entity\EntityFieldManagerInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $entityFieldManager;

@@ @@
     /**
      * The entity type bundle info.
      *
-     * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface|\PHPUnit_Framework_MockObject_MockObject
+     * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface|\PHPUnit\Framework\MockObject\MockObject
      */
     protected $entityTypeBundleInfo;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


43) modules/contrib/lingotek/tests/src/Unit/Controller/LingotekSupportedLocalesControllerTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The mocked request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\HttpFoundation\Request|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $request;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $languageManager;

@@ @@
   /**
    * The Lingotek service
    *
-   * @var \Drupal\lingotek\LingotekInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LingotekInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $lingotek;

@@ @@
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LanguageLocaleMapperInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $languageLocaleMapper;

@@ @@
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $lingotekConfiguration;

@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Form\FormBuilderInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $formBuilder;

@@ @@
   /**
    * The logger channel.
    *
-   * @var \Psr\Log\LoggerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Psr\Log\LoggerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $logger;

@@ @@
   /**
    * The mocked entity storage.
    *
-   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityStorage;

@@ @@
   /**
    * The url generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $urlGenerator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


44) modules/contrib/lingotek/tests/src/Unit/Controller/LingotekDashboardControllerTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The mocked request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\HttpFoundation\Request|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $request;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $languageManager;

@@ @@
   /**
    * The Lingotek service
    *
-   * @var \Drupal\lingotek\LingotekInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LingotekInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $lingotek;

@@ @@
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LanguageLocaleMapperInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $languageLocaleMapper;

@@ @@
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $lingotekConfiguration;

@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Form\FormBuilderInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $formBuilder;

@@ @@
   /**
    * The logger channel.
    *
-   * @var \Psr\Log\LoggerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Psr\Log\LoggerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $logger;

@@ @@
   /**
    * The mocked entity storage.
    *
-   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityStorage;

@@ @@
   /**
    * The url generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $urlGenerator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


45) modules/contrib/lingotek/tests/src/Unit/Cli/LingotekCliServiceTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $translationService;

@@ @@
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LanguageLocaleMapperInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $languageLocaleMapper;

@@ @@
   /**
    * The output.
    *
-   * @var \Symfony\Component\Console\Output\OutputInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\Console\Output\OutputInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $output;

@@ @@
   /**
    * The logger channel.
    *
-   * @var \Psr\Log\LoggerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Psr\Log\LoggerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $logger;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    $this->entityTypeManager = $this->getMockBuilder(EntityTypeManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entityTypeManager = $this->createMock(EntityTypeManager::class);
     $this->languageLocaleMapper = $this->createMock(LanguageLocaleMapperInterface::class);
     $this->translationService = $this->createMock(LingotekContentTranslationServiceInterface::class);
     $this->output = $this->createMock(OutputInterface::class);
@@ @@
   }

   public function testCheckTranslationsStatuses() {
-    /** @var \Drupal\Core\Language\LanguageInterface|\PHPUnit_Framework_MockObject_MockObject $language */
+    /** @var \Drupal\Core\Language\LanguageInterface|\PHPUnit\Framework\MockObject\MockObject $language */
     $language = $this->createMock(LanguageInterface::class);
     $language->expects($this->once())
       ->method('getId')
       ->willReturn('en');
-    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit_Framework_MockObject_MockObject $entity */
+    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit\Framework\MockObject\MockObject $entity */
     $entity = $this->createMock(ContentEntityInterface::class);
     $entity->expects($this->once())
       ->method('getUntranslated')
@@ @@
   }

   public function testCheckTranslationsStatusesAll() {
-    /** @var \Drupal\Core\Language\LanguageInterface|\PHPUnit_Framework_MockObject_MockObject $language */
+    /** @var \Drupal\Core\Language\LanguageInterface|\PHPUnit\Framework\MockObject\MockObject $language */
     $language = $this->createMock(LanguageInterface::class);
     $language->expects($this->once())
       ->method('getId')
       ->willReturn('en');
-    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit_Framework_MockObject_MockObject $entity */
+    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit\Framework\MockObject\MockObject $entity */
     $entity = $this->createMock(ContentEntityInterface::class);
     $entity->expects($this->once())
       ->method('getUntranslated')
@@ @@
   }

   public function testCheckTranslationsStatusesSome() {
-    /** @var \Drupal\Core\Language\LanguageInterface|\PHPUnit_Framework_MockObject_MockObject $language */
+    /** @var \Drupal\Core\Language\LanguageInterface|\PHPUnit\Framework\MockObject\MockObject $language */
     $language = $this->createMock(LanguageInterface::class);
     $language->expects($this->once())
       ->method('getId')
       ->willReturn('en');
-    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit_Framework_MockObject_MockObject $entity */
+    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit\Framework\MockObject\MockObject $entity */
     $entity = $this->createMock(ContentEntityInterface::class);
     $entity->expects($this->once())
       ->method('getUntranslated')
@@ @@
   }

   public function testCheckTranslationsStatusesUnexistingLanguage() {
-    /** @var \Drupal\Core\Language\LanguageInterface|\PHPUnit_Framework_MockObject_MockObject $language */
+    /** @var \Drupal\Core\Language\LanguageInterface|\PHPUnit\Framework\MockObject\MockObject $language */
     $language = $this->createMock(LanguageInterface::class);
     $language->expects($this->once())
       ->method('getId')
       ->willReturn('en');
-    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit_Framework_MockObject_MockObject $entity */
+    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit\Framework\MockObject\MockObject $entity */
     $entity = $this->createMock(ContentEntityInterface::class);
     $entity->expects($this->once())
       ->method('getUntranslated')
@@ @@
   }

   public function testDownloadTranslationsAll() {
-    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit_Framework_MockObject_MockObject $entity */
+    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit\Framework\MockObject\MockObject $entity */
     $entity = $this->createMock(ContentEntityInterface::class);
     $entityStorage = $this->createMock(EntityStorageInterface::class);
     $entityStorage->expects($this->once())
@@ @@
   }

   public function testDownloadTranslationsSome() {
-    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit_Framework_MockObject_MockObject $entity */
+    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit\Framework\MockObject\MockObject $entity */
     $entity = $this->createMock(ContentEntityInterface::class);
     $entityStorage = $this->createMock(EntityStorageInterface::class);
     $entityStorage->expects($this->once())
@@ @@
   }

   public function testDownloadTranslationsUnexistingLanguage() {
-    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit_Framework_MockObject_MockObject $entity */
+    /** @var \Drupal\Core\Entity\EntityInterface|\PHPUnit\Framework\MockObject\MockObject $entity */
     $entity = $this->createMock(ContentEntityInterface::class);
     $entityStorage = $this->createMock(EntityStorageInterface::class);
     $entityStorage->expects($this->once())
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


46) modules/contrib/lingotek/tests/src/Unit/Breadcrumb/TranslationJobBreadcrumbBuilderTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\HttpFoundation\Request|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $request;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\HttpFoundation\RequestStack|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $requestStack;

@@ @@
   /**
    * The access manager.
    *
-   * @var \Drupal\Core\Access\AccessManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Access\AccessManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $accessManager;

@@ @@
   /**
    * The title resolver.
    *
-   * @var \Drupal\Core\Controller\TitleResolverInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Controller\TitleResolverInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $titleResolver;

@@ @@
   /**
    * The user currently logged in.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $currentUser;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    $cache_contexts_manager = $this->getMockBuilder(CacheContextsManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $cache_contexts_manager = $this->createMock(CacheContextsManager::class);
     $cache_contexts_manager->method('assertValidTokens')->willReturn(TRUE);
     $container = new Container();
     $container->set('cache_contexts_manager', $cache_contexts_manager);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


47) modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekTargetActionsTest.php:55

    ---------- begin diff ----------
@@ @@
     $edit['title[0][value]'] = 'Llamas are cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['body[0][value]'] = 'Llamas are very cool';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translationService = \Drupal::service('lingotek.content_translation');
@@ @@
     $edit['title[0][value]'] = 'Llamas are cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['body[0][value]'] = 'Llamas are very cool';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translationService = \Drupal::service('lingotek.content_translation');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


48) modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekSourceActionsTest.php:51

    ---------- begin diff ----------
@@ @@
     $edit['title[0][value]'] = 'Llamas are cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['body[0][value]'] = 'Llamas are very cool';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translationService = \Drupal::service('lingotek.content_translation');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


49) modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekSettingsTabContentFormWithLotsOfContentTest.php:78

    ---------- begin diff ----------
@@ @@
     $nodeTabDetails = $page->find('css', '#edit-entity-node');
     $nodeTabDetails->click();

-    $this->assertNoFieldChecked('edit-node-article-readonly-enabled');
-    $this->assertNoFieldChecked('edit-node-article-readonly-fields-title');
-    $this->assertNoFieldChecked('edit-node-article-readonly-fields-body');
-    $this->assertNoFieldChecked('edit-node-article-readonly-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-readonly-fields-field-imageproperties-file');
-    $this->assertNoFieldChecked('edit-node-article-readonly-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-readonly-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-readonly-enabled');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-readonly-fields-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-readonly-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-readonly-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-readonly-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-readonly-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-readonly-fields-field-imageproperties-title');

     $this->assertSession()->fieldDisabled('edit-node-article-readonly-enabled');
     $this->assertSession()->fieldDisabled('edit-node-article-readonly-fields-title');
@@ @@
     $this->assertSession()->assertWaitOnAjaxRequest();
     $this->assertSession()->waitForElementVisible('css', '#drupal-modal');

-    $this->assertNoFieldChecked('node[article][enabled]');
-    $this->assertNoFieldChecked('node[article][fields][title]');
-    $this->assertNoFieldChecked('node[article][fields][body]');
-    $this->assertNoFieldChecked('node[article][fields][field_image]');
-    $this->assertNoFieldChecked('node[article][fields][field_image:properties][file]');
-    $this->assertNoFieldChecked('node[article][fields][field_image:properties][alt]');
-    $this->assertNoFieldChecked('node[article][fields][field_image:properties][title]');
+    $this->assertSession()->checkboxNotChecked('node[article][enabled]');
+    $this->assertSession()->checkboxNotChecked('node[article][fields][title]');
+    $this->assertSession()->checkboxNotChecked('node[article][fields][body]');
+    $this->assertSession()->checkboxNotChecked('node[article][fields][field_image]');
+    $this->assertSession()->checkboxNotChecked('node[article][fields][field_image:properties][file]');
+    $this->assertSession()->checkboxNotChecked('node[article][fields][field_image:properties][alt]');
+    $this->assertSession()->checkboxNotChecked('node[article][fields][field_image:properties][title]');

     $fieldEnabled = $page->find('css', 'input[name="node[article][enabled]"]');
     $fieldEnabled->click();
@@ @@

     $this->assertSession()->assertWaitOnAjaxRequest();

-    $this->assertFieldChecked('node[article][enabled]');
-    $this->assertFieldChecked('node[article][fields][title]');
-    $this->assertFieldChecked('node[article][fields][body]');
-    $this->assertFieldChecked('node[article][fields][field_image]');
-    $this->assertNoFieldChecked('node[article][fields][field_image:properties][file]');
-    $this->assertFieldChecked('node[article][fields][field_image:properties][alt]');
-    $this->assertFieldChecked('node[article][fields][field_image:properties][title]');
+    $this->assertSession()->checkboxChecked('node[article][enabled]');
+    $this->assertSession()->checkboxChecked('node[article][fields][title]');
+    $this->assertSession()->checkboxChecked('node[article][fields][body]');
+    $this->assertSession()->checkboxChecked('node[article][fields][field_image]');
+    $this->assertSession()->checkboxNotChecked('node[article][fields][field_image:properties][file]');
+    $this->assertSession()->checkboxChecked('node[article][fields][field_image:properties][alt]');
+    $this->assertSession()->checkboxChecked('node[article][fields][field_image:properties][title]');

     $button_pane_buttons = $this->getSession()->getPage()->findAll('css', '.ui-dialog-buttonpane button');
     $this->assertCount(1, $button_pane_buttons);
@@ @@
     $nodeTabDetails = $page->find('css', '#edit-entity-node');
     $nodeTabDetails->click();

-    $this->assertFieldChecked('edit-node-article-readonly-enabled');
-    $this->assertFieldChecked('edit-node-article-readonly-fields-title');
-    $this->assertFieldChecked('edit-node-article-readonly-fields-body');
-    $this->assertFieldChecked('edit-node-article-readonly-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-readonly-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-readonly-fields-field-imageproperties-alt');
-    $this->assertFieldChecked('edit-node-article-readonly-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-readonly-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-article-readonly-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-readonly-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-readonly-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-readonly-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-readonly-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxChecked('edit-node-article-readonly-fields-field-imageproperties-title');

     $this->assertSession()->fieldDisabled('edit-node-article-readonly-enabled');
     $this->assertSession()->fieldDisabled('edit-node-article-readonly-fields-title');
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertNoFieldCheckedRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


50) modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekSettingsTabContentFormTest.php:63

    ---------- begin diff ----------
@@ @@
     $nodeTabDetails = $page->find('css', '#edit-entity-node');
     $nodeTabDetails->click();

-    $this->assertNoFieldChecked('edit-node-article-enabled');
-    $this->assertNoFieldChecked('edit-node-article-fields-title');
-    $this->assertNoFieldChecked('edit-node-article-fields-body');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-text');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-text');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     $fieldEnabled = $page->find('css', '#edit-node-article-enabled');
     $fieldEnabled->click();
@@ @@

     $this->assertSession()->assertWaitOnAjaxRequest();

-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-field-text');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-text');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-title');

-    $this->drupalPostForm(NULL, [], 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->submitForm([], 'Save', 'lingoteksettings-tab-content-form');

     $this->assertSession()
       ->elementTextContains('css', '.messages.messages--status', 'The configuration options have been saved.');

-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-field-text');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-text');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-title');
   }

   public function testWhenDisabledAndEnabledBackNodeArticleFieldsAreKept() {
@@ @@
     $nodeTabDetails = $page->find('css', '#edit-entity-node');
     $nodeTabDetails->click();

-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertNoFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-uid');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-text');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-uid');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-text');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     $fieldEnabled = $page->find('css', '#edit-node-article-enabled');
     $fieldEnabled->click();
@@ @@

     $this->assertSession()->assertWaitOnAjaxRequest();

-    $this->assertNoFieldChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-enabled');

     $fieldEnabled = $page->find('css', '#edit-node-article-enabled');
     $fieldEnabled->click();
@@ @@

     $this->assertSession()->assertWaitOnAjaxRequest();

-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
     // We marked body and field_text and kept the others as they were.
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-uid');
-    $this->assertFieldChecked('edit-node-article-fields-field-text');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-uid');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-text');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');
   }

   public function testFieldPropertiesDisabledIfFieldDisabled() {
@@ @@
     $nodeTabDetails = $page->find('css', '#edit-entity-node');
     $nodeTabDetails->click();

-    $this->assertNoFieldChecked('edit-node-article-enabled');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     $imageCheckbox = $page->find('css', '#edit-node-article-fields-field-image');
     $imageCheckbox->click();
@@ @@

     $this->assertSession()->assertWaitOnAjaxRequest();

-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-title');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertNoFieldCheckedRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


51) modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekSettingsContentSingleFormTest.php:58

    ---------- begin diff ----------
@@ @@

     $page = $this->getSession()->getPage();

-    $this->assertNoFieldChecked('edit-node-article-enabled');
-    $this->assertNoFieldChecked('edit-node-article-fields-title');
-    $this->assertNoFieldChecked('edit-node-article-fields-body');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     $fieldEnabled = $page->find('css', '#edit-node-article-enabled');
     $fieldEnabled->click();
@@ @@

     $this->assertSession()->assertWaitOnAjaxRequest();

-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-title');

-    $this->drupalPostForm(NULL, [], 'Save', [], 'lingoteksettings-content-single-form');
+    $this->submitForm([], 'Save', 'lingoteksettings-content-single-form');

     $this->assertSession()
       ->elementTextContains('css', '.messages.messages--status', 'The configuration options have been saved.');

-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-title');
   }

   public function testWhenDisabledAndEnabledBackNodeArticleFieldsAreKept() {
@@ @@

     $page = $this->getSession()->getPage();

-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldChecked('edit-node-article-fields-title');
-    $this->assertNoFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-uid');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-uid');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     $fieldEnabled = $page->find('css', '#edit-node-article-enabled');
     $fieldEnabled->click();
@@ @@

     $this->assertSession()->assertWaitOnAjaxRequest();

-    $this->assertNoFieldChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-enabled');

     $fieldEnabled = $page->find('css', '#edit-node-article-enabled');
     $fieldEnabled->click();
@@ @@

     $this->assertSession()->assertWaitOnAjaxRequest();

-    $this->assertFieldChecked('edit-node-article-enabled');
-    $this->assertFieldChecked('edit-node-article-fields-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-title');
     // We marked body and kept the others as they were.
-    $this->assertFieldChecked('edit-node-article-fields-body');
-    $this->assertFieldChecked('edit-node-article-fields-uid');
-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-body');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-uid');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');
   }

   public function testFieldPropertiesDisabledIfFieldDisabled() {
@@ @@

     $page = $this->getSession()->getPage();

-    $this->assertNoFieldChecked('edit-node-article-enabled');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-enabled');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-title');

     $imageCheckbox = $page->find('css', '#edit-node-article-fields-field-image');
     $imageCheckbox->click();
@@ @@

     $this->assertSession()->assertWaitOnAjaxRequest();

-    $this->assertFieldChecked('edit-node-article-fields-field-image');
-    $this->assertNoFieldChecked('edit-node-article-fields-field-imageproperties-file');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-alt');
-    $this->assertFieldChecked('edit-node-article-fields-field-imageproperties-title');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-image');
+    $this->assertSession()->checkboxNotChecked('edit-node-article-fields-field-imageproperties-file');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-alt');
+    $this->assertSession()->checkboxChecked('edit-node-article-fields-field-imageproperties-title');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertNoFieldCheckedRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


52) modules/contrib/lingotek/tests/src/FunctionalJavascript/LingotekNodeParagraphsTranslationTest.php:99

    ---------- begin diff ----------
@@ @@
     $edit['langcode[0][value]'] = 'en';
     $edit['field_paragraphs_demo[0][subform][field_text_demo][0][value]'] = 'Llamas are very cool';
     $edit['moderation_state[0][state]'] = 'published';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Check that only the configured fields have been uploaded, including metatags.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
-    $this->assertEqual($data['title'][0]['value'], 'Llamas are cool');
-    $this->assertEqual($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool');
+    $this->assertEquals($data['title'][0]['value'], 'Llamas are cool');
+    $this->assertEquals($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     $edit['field_paragraphs_demo[2][subform][field_text_demo][0][value]'] = 'Llamas are very cool for the third time';
     $edit['moderation_state[0][state]'] = 'published';

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Check that only the configured fields have been uploaded, including metatags.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
-    $this->assertEqual($data['title'][0]['value'], 'Llamas are cool');
-    $this->assertEqual($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool for the first time');
-    $this->assertEqual($data['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are very cool for the second time');
-    $this->assertEqual($data['field_paragraphs_demo'][2]['field_text_demo'][0]['value'], 'Llamas are very cool for the third time');
+    $this->assertEquals($data['title'][0]['value'], 'Llamas are cool');
+    $this->assertEquals($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool for the first time');
+    $this->assertEquals($data['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are very cool for the second time');
+    $this->assertEquals($data['field_paragraphs_demo'][2]['field_text_demo'][0]['value'], 'Llamas are very cool for the third time');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     $edit['langcode[0][value]'] = 'en';
     $edit['field_paragraphs_demo[0][subform][field_text_demo][0][value]'] = 'Llamas are very cool for the first time EDITED';
     $edit['field_paragraphs_demo[2][subform][field_text_demo][0][value]'] = 'Llamas are very cool for the third time EDITED';
-    $this->drupalPostForm(NULL, $edit, t('Save (this translation)'));
+    $this->submitForm($edit, t('Save (this translation)'));

     $assert_session->pageTextContains('Llamas are cool EDITED');
     $assert_session->pageTextContains('Llamas are very cool for the first time EDITED');
@@ @@
     $this->drupalGet('node/1/edit');
     $assert_session->fieldValueEquals('field_paragraphs_demo[0][subform][field_text_demo][0][value]', 'Llamas are very cool');

-    $this->drupalPostForm(NULL, NULL, 'Remove');
+    $this->submitForm(NULL, 'Remove');
     $assert_session->waitForElementVisible('css', 'field_paragraphs_demo_0_confirm_remove', 1000);
-    $this->drupalPostForm(NULL, NULL, 'Confirm removal');
+    $this->submitForm(NULL, 'Confirm removal');
     $assert_session->waitForElementRemoved('css', 'field_paragraphs_demo_0_confirm_remove', 1000);

-    $this->drupalPostForm(NULL, NULL, 'Save (this translation)');
+    $this->submitForm(NULL, 'Save (this translation)');
     $assert_session->waitForElementVisible('css', $messages_locator);
     $assert_session->pageTextContains('Paragraphed article Llamas are cool has been updated.');
   }
@@ @@
     $edit = [];
     $edit['settings[node][paragraphed_content_demo][fields][field_paragraphs_demo]'] = 1;
     $edit['settings[paragraph][image_text][fields][field_text_demo]'] = 1;
-    $this->drupalPostForm('/admin/config/regional/content-language', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/regional/content-language');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('Settings successfully updated.');
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


53) modules/contrib/lingotek/tests/src/Functional/Form/LingotekSettingsTabAccountFormTest.php:56

    ---------- begin diff ----------
@@ @@
       'filter' => 'test_filter2',
       'subfilter' => 'test_filter3',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');

     $this->assertTableValue('status', 'Active');
     $this->assertTableValue('plan', 'No');
@@ @@
     $this->drupalGet('admin/lingotek/settings');
     $this->clickLink('Edit defaults');
     $edit = ['workflow' => 'project_default'];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertTableValue('workflow', 'Project Default (project_default)');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


54) modules/contrib/lingotek/tests/src/Functional/Form/LingotekProfileFormTest.php:48

    ---------- begin diff ----------
@@ @@
     $this->drupalGet('admin/lingotek/settings');

     // Status of the checkbox matrix is as expected.
-    $this->assertFieldChecked('edit-profile-automatic-auto-upload');
-    $this->assertFieldChecked('edit-profile-automatic-auto-download');
-    $this->assertNoFieldChecked('edit-profile-manual-auto-upload');
-    $this->assertNoFieldChecked('edit-profile-manual-auto-download');
-    $this->assertNoFieldChecked('edit-profile-disabled-auto-upload');
-    $this->assertNoFieldChecked('edit-profile-disabled-auto-download');
+    $this->assertSession()->checkboxChecked('edit-profile-automatic-auto-upload');
+    $this->assertSession()->checkboxChecked('edit-profile-automatic-auto-download');
+    $this->assertSession()->checkboxNotChecked('edit-profile-manual-auto-upload');
+    $this->assertSession()->checkboxNotChecked('edit-profile-manual-auto-download');
+    $this->assertSession()->checkboxNotChecked('edit-profile-disabled-auto-upload');
+    $this->assertSession()->checkboxNotChecked('edit-profile-disabled-auto-download');

     // We cannot edit them.
     $assert_session->linkByHrefNotExists('/admin/lingotek/settings/profile/automatic/edit');
@@ @@
       'auto_download' => 1,
       'append_type_to_title' => 'yes',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

-    $this->assertText(t('The Lingotek profile has been successfully saved.'));
+    $this->assertSession()->pageTextContains(t('The Lingotek profile has been successfully saved.'));

     // We can edit them.
     $assert_session->linkByHrefExists("/admin/lingotek/settings/profile/$profile_id/edit");

-    $this->assertFieldChecked("edit-profile-$profile_id-auto-upload");
-    $this->assertFieldChecked("edit-profile-$profile_id-auto-request");
-    $this->assertFieldChecked("edit-profile-$profile_id-auto-download");
+    $this->assertSession()->checkboxChecked("edit-profile-$profile_id-auto-upload");
+    $this->assertSession()->checkboxChecked("edit-profile-$profile_id-auto-request");
+    $this->assertSession()->checkboxChecked("edit-profile-$profile_id-auto-download");
     $this->assertFieldEnabled("edit-profile-$profile_id-auto-upload");
     $this->assertFieldEnabled("edit-profile-$profile_id-auto-request");
     $this->assertFieldEnabled("edit-profile-$profile_id-auto-download");
@@ @@
     $this->assertTrue($profile->hasAutomaticUpload());
     $this->assertTrue($profile->hasAutomaticRequest());
     $this->assertTrue($profile->hasAutomaticDownload());
-    $this->assertIdentical('yes', $profile->getAppendContentTypeToTitle());
-    $this->assertIdentical('default', $profile->getProject());
-    $this->assertIdentical('default', $profile->getVault());
-    $this->assertIdentical('default', $profile->getWorkflow());
+    $this->assertSame('yes', $profile->getAppendContentTypeToTitle());
+    $this->assertSame('default', $profile->getProject());
+    $this->assertSame('default', $profile->getVault());
+    $this->assertSame('default', $profile->getWorkflow());
     $this->assertFalse($profile->hasIntelligenceMetadataOverrides());
-    $this->assertIdentical('drupal_default', $profile->getFilter());
-    $this->assertIdentical('drupal_default', $profile->getSubfilter());
+    $this->assertSame('drupal_default', $profile->getFilter());
+    $this->assertSame('drupal_default', $profile->getSubfilter());
   }

   /**
@@ @@
     $this->drupalGet('admin/lingotek/settings');
     $this->clickLink(t('Add new Translation Profile'));

-    $this->assertFieldByName('workflow');
+    $this->assertSession()->fieldExists('workflow');
     $assert_session->optionExists('edit-workflow', 'project_default');
     $assert_session->optionExists('edit-workflow', 'default');
   }
@@ @@
     $profile->save();
     $profile_id = $profile->id();

-    $this->assertIdentical('global_setting', $profile->getAppendContentTypeToTitle());
+    $this->assertSame('global_setting', $profile->getAppendContentTypeToTitle());
     $this->drupalGet("/admin/lingotek/settings/profile/$profile_id/edit");

     $edit = [
@@ @@
       'subfilter' => 'test_filter2',
       'append_type_to_title' => 'no',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
     $profile = LingotekProfile::load($profile_id);
     $this->assertFalse($profile->hasAutomaticUpload());
     $this->assertTrue($profile->hasAutomaticDownload());
-    $this->assertIdentical('no', $profile->getAppendContentTypeToTitle());
-    $this->assertIdentical('test_project', $profile->getProject());
-    $this->assertIdentical('test_vault', $profile->getVault());
-    $this->assertIdentical('test_workflow', $profile->getWorkflow());
-    $this->assertIdentical('test_filter', $profile->getFilter());
-    $this->assertIdentical('test_filter2', $profile->getSubfilter());
+    $this->assertSame('no', $profile->getAppendContentTypeToTitle());
+    $this->assertSame('test_project', $profile->getProject());
+    $this->assertSame('test_vault', $profile->getVault());
+    $this->assertSame('test_workflow', $profile->getWorkflow());
+    $this->assertSame('test_filter', $profile->getFilter());
+    $this->assertSame('test_filter2', $profile->getSubfilter());

     $this->drupalGet("/admin/lingotek/settings/profile/$profile_id/edit");
-    $this->assertNoFieldChecked("edit-auto-upload");
-    $this->assertFieldChecked("edit-auto-download");
+    $this->assertSession()->checkboxNotChecked("edit-auto-upload");
+    $this->assertSession()->checkboxChecked("edit-auto-download");
     $assert_session->optionExists('edit-append-type-to-title', 'no');
     $assert_session->optionExists('edit-project', 'test_project');
     $assert_session->optionExists('edit-vault', 'test_vault');
@@ @@
       "profile[$profile_id][auto_request]" => 0,
       "profile[$profile_id][auto_download]" => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration', [], 'lingotek-profile-admin-overview-form');
+    $this->submitForm($edit, 'Save configuration', 'lingotek-profile-admin-overview-form');

     /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
     $profile = LingotekProfile::load($profile_id);
@@ @@
     $this->assertFalse($profile->hasAutomaticRequest());
     $this->assertTrue($profile->hasAutomaticDownload());

-    $this->assertFieldChecked("profile[$profile_id][auto_upload]");
-    $this->assertNoFieldChecked("profile[$profile_id][auto_request]");
-    $this->assertFieldChecked("profile[$profile_id][auto_download]");
+    $this->assertSession()->checkboxChecked("profile[$profile_id][auto_upload]");
+    $this->assertSession()->checkboxNotChecked("profile[$profile_id][auto_request]");
+    $this->assertSession()->checkboxChecked("profile[$profile_id][auto_download]");

     $edit = [
       "profile[$profile_id][auto_upload]" => 1,
@@ @@
       "profile[$profile_id][auto_request]" => 1,
       "profile[$profile_id][auto_download]" => 0,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration', [], 'lingotek-profile-admin-overview-form');
+    $this->submitForm($edit, 'Save configuration', 'lingotek-profile-admin-overview-form');

     /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
     $profile = LingotekProfile::load($profile_id);
@@ @@
     $this->assertTrue($profile->hasAutomaticRequest());
     $this->assertFalse($profile->hasAutomaticDownload());

-    $this->assertFieldChecked("profile[$profile_id][auto_upload]");
-    $this->assertFieldChecked("profile[$profile_id][auto_request]");
-    $this->assertNoFieldChecked("profile[$profile_id][auto_download]");
+    $this->assertSession()->checkboxChecked("profile[$profile_id][auto_upload]");
+    $this->assertSession()->checkboxChecked("profile[$profile_id][auto_request]");
+    $this->assertSession()->checkboxNotChecked("profile[$profile_id][auto_download]");

     $edit = [
       "profile[$profile_id][auto_upload]" => 0,
@@ @@
       "profile[$profile_id][auto_request]" => 1,
       "profile[$profile_id][auto_download]" => 0,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration', [], 'lingotek-profile-admin-overview-form');
+    $this->submitForm($edit, 'Save configuration', 'lingotek-profile-admin-overview-form');

     /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
     $profile = LingotekProfile::load($profile_id);
@@ @@
     $this->assertTrue($profile->hasAutomaticRequest());
     $this->assertFalse($profile->hasAutomaticDownload());

-    $this->assertNoFieldChecked("profile[$profile_id][auto_upload]");
-    $this->assertFieldChecked("profile[$profile_id][auto_request]");
-    $this->assertNoFieldChecked("profile[$profile_id][auto_download]");
+    $this->assertSession()->checkboxNotChecked("profile[$profile_id][auto_upload]");
+    $this->assertSession()->checkboxChecked("profile[$profile_id][auto_request]");
+    $this->assertSession()->checkboxNotChecked("profile[$profile_id][auto_download]");
   }

   /**
@@ @@
     $this->drupalGet("/admin/lingotek/settings/profile/$profile_id/delete");

     // Confirm the form.
-    $this->assertText('This action cannot be undone.');
-    $this->drupalPostForm(NULL, [], t('Delete'));
+    $this->assertSession()->pageTextContains('This action cannot be undone.');
+    $this->submitForm([], t('Delete'));

     // Profile was deleted.
-    $this->assertRaw(t('The lingotek profile %profile has been deleted.', ['%profile' => $profile->label()]));
+    $this->assertSession()->responseContains(t('The lingotek profile %profile has been deleted.', ['%profile' => $profile->label()]));

     /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
     $profile = LingotekProfile::load($profile_id);
@@ @@
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = $profile_id;
     $this->saveAndPublishNodeForm($edit);
-    $this->assertUrl('/node/1', [], 'Node has been created.');
+    $this->assertSession()->addressEquals('/node/1', [], 'Node has been created.');

     $this->drupalGet("/admin/lingotek/settings/profile/$profile_id/delete");

     // Confirm the form.
-    $this->assertText(t('This action cannot be undone.'));
-    $this->drupalPostForm(NULL, [], t('Delete'));
+    $this->assertSession()->pageTextContains(t('This action cannot be undone.'));
+    $this->submitForm([], t('Delete'));

-    $this->assertNoRaw(t('The lingotek profile %profile has been deleted.', ['%profile' => $profile->label()]));
-    $this->assertRaw(t('The Lingotek profile %profile is being used so cannot be deleted.', ['%profile' => $profile->label()]));
+    $this->assertSession()->responseNotContains(t('The lingotek profile %profile has been deleted.', ['%profile' => $profile->label()]));
+    $this->assertSession()->responseContains(t('The Lingotek profile %profile is being used so cannot be deleted.', ['%profile' => $profile->label()]));

     /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
     $profile = LingotekProfile::load($profile_id);
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:' . $profile_id,
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->drupalGet("/admin/lingotek/settings/profile/$profile_id/delete");

     // Confirm the form.
-    $this->assertText(t('This action cannot be undone.'));
-    $this->drupalPostForm(NULL, [], t('Delete'));
+    $this->assertSession()->pageTextContains(t('This action cannot be undone.'));
+    $this->submitForm([], t('Delete'));

-    $this->assertNoRaw(t('The lingotek profile %profile has been deleted.', ['%profile' => $profile->label()]));
-    $this->assertRaw(t('The Lingotek profile %profile is being used so cannot be deleted.', ['%profile' => $profile->label()]));
+    $this->assertSession()->responseNotContains(t('The lingotek profile %profile has been deleted.', ['%profile' => $profile->label()]));
+    $this->assertSession()->responseContains(t('The Lingotek profile %profile is being used so cannot be deleted.', ['%profile' => $profile->label()]));

     /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
     $profile = LingotekProfile::load($profile_id);
@@ @@
     $this->drupalGet("/admin/lingotek/settings/profile/$profile_id/delete");

     // Confirm the form.
-    $this->assertText(t('This action cannot be undone.'));
-    $this->drupalPostForm(NULL, [], t('Delete'));
+    $this->assertSession()->pageTextContains(t('This action cannot be undone.'));
+    $this->submitForm([], t('Delete'));

-    $this->assertNoRaw(t('The lingotek profile %profile has been deleted.', ['%profile' => $profile->label()]));
-    $this->assertRaw(t('The Lingotek profile %profile is being used so cannot be deleted.', ['%profile' => $profile->label()]));
+    $this->assertSession()->responseNotContains(t('The lingotek profile %profile has been deleted.', ['%profile' => $profile->label()]));
+    $this->assertSession()->responseContains(t('The Lingotek profile %profile is being used so cannot be deleted.', ['%profile' => $profile->label()]));

     /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
     $profile = LingotekProfile::load($profile_id);
@@ @@
       'language_overrides[de][custom][workflow]' => 'default',
       'language_overrides[de][custom][vault]' => 'default',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
     $profile = LingotekProfile::load($profile_id);
     $this->assertFalse($profile->hasAutomaticUpload());
     $this->assertTrue($profile->hasAutomaticDownload());
-    $this->assertIdentical('default', $profile->getProject());
-    $this->assertIdentical('default', $profile->getVault());
-    $this->assertIdentical('test_workflow2', $profile->getWorkflow());
-    $this->assertIdentical('test_workflow', $profile->getWorkflowForTarget('es'));
-    $this->assertIdentical('default', $profile->getWorkflowForTarget('de'));
-    $this->assertIdentical('test_vault', $profile->getVaultForTarget('es'));
-    $this->assertIdentical('default', $profile->getVaultForTarget('de'));
+    $this->assertSame('default', $profile->getProject());
+    $this->assertSame('default', $profile->getVault());
+    $this->assertSame('test_workflow2', $profile->getWorkflow());
+    $this->assertSame('test_workflow', $profile->getWorkflowForTarget('es'));
+    $this->assertSame('default', $profile->getWorkflowForTarget('de'));
+    $this->assertSame('test_vault', $profile->getVaultForTarget('es'));
+    $this->assertSame('default', $profile->getVaultForTarget('de'));
     $this->assertFalse($profile->hasAutomaticDownloadForTarget('es'));
     $this->assertFalse($profile->hasAutomaticDownloadForTarget('de'));

     $this->drupalGet("/admin/lingotek/settings/profile/$profile_id/edit");
-    $this->assertNoFieldChecked("edit-auto-upload");
-    $this->assertFieldChecked("edit-auto-download");
+    $this->assertSession()->checkboxNotChecked("edit-auto-upload");
+    $this->assertSession()->checkboxChecked("edit-auto-download");
     $assert_session->optionExists('edit-project', 'default');
     $assert_session->optionExists('edit-vault', 'default');
     $assert_session->optionExists('edit-workflow', 'test_workflow2');
@@ @@
     $assert_session->optionExists('edit-language-overrides-es-overrides', 'custom');
     $assert_session->optionExists('edit-language-overrides-de-overrides', 'custom');
     $assert_session->optionExists('edit-language-overrides-en-overrides', 'default');
-    $this->assertNoFieldChecked('edit-language-overrides-es-custom-auto-download');
-    $this->assertNoFieldChecked('edit-language-overrides-de-custom-auto-download');
-    $this->assertFieldChecked('edit-language-overrides-en-custom-auto-download');
+    $this->assertSession()->checkboxNotChecked('edit-language-overrides-es-custom-auto-download');
+    $this->assertSession()->checkboxNotChecked('edit-language-overrides-de-custom-auto-download');
+    $this->assertSession()->checkboxChecked('edit-language-overrides-en-custom-auto-download');
     $assert_session->optionExists('edit-language-overrides-es-custom-workflow', 'test_workflow');
     $assert_session->optionExists('edit-language-overrides-de-custom-workflow', 'default');
     $assert_session->optionExists('edit-language-overrides-en-custom-workflow', 'default');
@@ @@
     // Assert that the override languages are present and ordered alphabetically.
     $selects = $this->xpath('//details[@id="edit-language-overrides"]/*/*//select');
     // There must be 2 select options for each of the 3 languages.
-    $this->assertEqual(count($selects), 3 * 3, 'There are options for all the potential language overrides.');
+    $this->assertEquals(count($selects), 3 * 3, 'There are options for all the potential language overrides.');
     // And the first one must be German alphabetically.
-    $this->assertEqual($selects[0]->getAttribute('id'), 'edit-language-overrides-de-overrides', 'Languages are ordered alphabetically.');
+    $this->assertEquals($selects[0]->getAttribute('id'), 'edit-language-overrides-de-overrides', 'Languages are ordered alphabetically.');
   }

   /**
@@ @@
       'language_overrides[de][custom][workflow]' => 'default',
       'language_overrides[de][custom][vault]' => 'default',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
     $profile = LingotekProfile::load($profile_id);
     $this->assertFalse($profile->hasAutomaticUpload());
     $this->assertTrue($profile->hasAutomaticDownload());
-    $this->assertIdentical('default', $profile->getProject());
-    $this->assertIdentical('default', $profile->getVault());
-    $this->assertIdentical('test_workflow2', $profile->getWorkflow());
-    $this->assertIdentical(NULL, $profile->getWorkflowForTarget('es'));
-    $this->assertIdentical(NULL, $profile->getVaultForTarget('es'));
+    $this->assertSame('default', $profile->getProject());
+    $this->assertSame('default', $profile->getVault());
+    $this->assertSame('test_workflow2', $profile->getWorkflow());
+    $this->assertSame(NULL, $profile->getWorkflowForTarget('es'));
+    $this->assertSame(NULL, $profile->getVaultForTarget('es'));
     $this->assertTrue($profile->hasDisabledTarget('es'));
     $this->assertFalse($profile->hasAutomaticRequestForTarget('es'));
     $this->assertTrue($profile->hasAutomaticRequestForTarget('de'));
@@ @@
     $profile_id = $profile->id();

     $this->drupalGet("/admin/lingotek/settings/profile/$profile_id/edit");
-    $this->assertFieldByName('language_overrides[es][overrides]');
+    $this->assertSession()->fieldExists('language_overrides[es][overrides]');
     $assert_session->optionExists('edit-language-overrides-de-overrides', 'default');
     $assert_session->optionExists('edit-language-overrides-de-overrides', 'default');

@@ @@

     // The form shouldn't have the field.
     $this->drupalGet("/admin/lingotek/settings/profile/$profile_id/edit");
-    $this->assertNoFieldByName('language_overrides[es][overrides]');
+    $this->assertSession()->fieldValueNotEquals('language_overrides[es][overrides]', '');
     $assert_session->optionExists('edit-language-overrides-de-overrides', 'default');

     // We enable the language back.
@@ @@
     $configLingotek->enableLanguage($es);

     $this->drupalGet("/admin/lingotek/settings/profile/$profile_id/edit");
-    $this->assertFieldByName('language_overrides[es][overrides]');
+    $this->assertSession()->fieldExists('language_overrides[es][overrides]');
     $assert_session->optionExists('edit-language-overrides-es-overrides', 'default');
     $assert_session->optionExists('edit-language-overrides-de-overrides', 'default');
   }
@@ @@
   public function testIntelligenceOverrideDefaults() {
     $this->drupalGet('admin/lingotek/settings');
     $this->clickLink(t('Add new Translation Profile'));
-    $this->assertNoFieldChecked('edit-intelligence-metadata-overrides-override');
+    $this->assertSession()->checkboxNotChecked('edit-intelligence-metadata-overrides-override');
     $this->assertIntelligenceFieldDefaults();
   }

@@ @@
       'intelligence_metadata[purchase_order]' => 'PO32',
       'intelligence_metadata[region]' => 'region2',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

-    $this->assertText(t('The Lingotek profile has been successfully saved.'));
+    $this->assertSession()->pageTextContains(t('The Lingotek profile has been successfully saved.'));

     // We can edit them.
     $assert_session->linkByHrefExists("/admin/lingotek/settings/profile/$profile_id/edit");

-    $this->assertFieldChecked("edit-profile-$profile_id-auto-upload");
-    $this->assertFieldChecked("edit-profile-$profile_id-auto-download");
+    $this->assertSession()->checkboxChecked("edit-profile-$profile_id-auto-upload");
+    $this->assertSession()->checkboxChecked("edit-profile-$profile_id-auto-download");
     $this->assertFieldEnabled("edit-profile-$profile_id-auto-upload");
     $this->assertFieldEnabled("edit-profile-$profile_id-auto-download");

@@ @@
     $this->drupalGet("/admin/lingotek/settings/profile/$profile_id/edit");

     // Assert the intelligence metadata values.
-    $this->assertFieldChecked('edit-intelligence-metadata-overrides-override');
-    $this->assertNoFieldChecked('edit-intelligence-metadata-use-contact-email-for-author');
-    $this->assertFieldByName('intelligence_metadata[default_author_email]', 'test@example.com');
-    $this->assertFieldByName('intelligence_metadata[business_unit]', 'Test Business Unit');
-    $this->assertFieldByName('intelligence_metadata[business_division]', 'Test Business Division');
-    $this->assertFieldByName('intelligence_metadata[campaign_id]', 'Campaign ID');
-    $this->assertFieldByName('intelligence_metadata[campaign_rating]', 5);
-    $this->assertFieldByName('intelligence_metadata[channel]', 'Channel Test');
-    $this->assertFieldByName('intelligence_metadata[contact_name]', 'Test Contact Name');
-    $this->assertFieldByName('intelligence_metadata[contact_email]', 'contact@example.com');
-    $this->assertFieldByName('intelligence_metadata[content_description]', 'Content description');
-    $this->assertFieldByName('intelligence_metadata[external_style_id]', 'my-style-id');
-    $this->assertFieldByName('intelligence_metadata[purchase_order]', 'PO32');
-    $this->assertFieldByName('intelligence_metadata[region]', 'region2');
+    $this->assertSession()->checkboxChecked('edit-intelligence-metadata-overrides-override');
+    $this->assertSession()->checkboxNotChecked('edit-intelligence-metadata-use-contact-email-for-author');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[default_author_email]', 'test@example.com');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[business_unit]', 'Test Business Unit');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[business_division]', 'Test Business Division');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[campaign_id]', 'Campaign ID');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[campaign_rating]', 5);
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[channel]', 'Channel Test');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[contact_name]', 'Test Contact Name');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[contact_email]', 'contact@example.com');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[content_description]', 'Content description');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[external_style_id]', 'my-style-id');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[purchase_order]', 'PO32');
+    $this->assertSession()->fieldValueEquals('intelligence_metadata[region]', 'region2');

     /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
     $profile = LingotekProfile::load($profile_id);
     $this->assertTrue($profile->hasAutomaticUpload());
     $this->assertTrue($profile->hasAutomaticDownload());
-    $this->assertIdentical('default', $profile->getProject());
-    $this->assertIdentical('default', $profile->getVault());
-    $this->assertIdentical('default', $profile->getWorkflow());
+    $this->assertSame('default', $profile->getProject());
+    $this->assertSame('default', $profile->getVault());
+    $this->assertSame('default', $profile->getWorkflow());

     // Assert the intelligence metadata values.
     $this->assertTrue($profile->hasIntelligenceMetadataOverrides());
@@ @@
     $this->assertTrue($profile->getBaseDomainPermission());
     $this->assertTrue($profile->getReferenceUrlPermission());

-    $this->assertIdentical($profile->getDefaultAuthorEmail(), 'test@example.com');
-    $this->assertIdentical($profile->getBusinessUnit(), 'Test Business Unit');
-    $this->assertIdentical($profile->getBusinessDivision(), 'Test Business Division');
-    $this->assertIdentical($profile->getCampaignId(), 'Campaign ID');
-    $this->assertIdentical($profile->getCampaignRating(), 5);
-    $this->assertIdentical($profile->getChannel(), 'Channel Test');
-    $this->assertIdentical($profile->getContactName(), 'Test Contact Name');
-    $this->assertIdentical($profile->getContactEmail(), 'contact@example.com');
-    $this->assertIdentical($profile->getContentDescription(), 'Content description');
-    $this->assertIdentical($profile->getExternalStyleId(), 'my-style-id');
-    $this->assertIdentical($profile->getPurchaseOrder(), 'PO32');
-    $this->assertIdentical($profile->getRegion(), 'region2');
+    $this->assertSame($profile->getDefaultAuthorEmail(), 'test@example.com');
+    $this->assertSame($profile->getBusinessUnit(), 'Test Business Unit');
+    $this->assertSame($profile->getBusinessDivision(), 'Test Business Division');
+    $this->assertSame($profile->getCampaignId(), 'Campaign ID');
+    $this->assertSame($profile->getCampaignRating(), 5);
+    $this->assertSame($profile->getChannel(), 'Channel Test');
+    $this->assertSame($profile->getContactName(), 'Test Contact Name');
+    $this->assertSame($profile->getContactEmail(), 'contact@example.com');
+    $this->assertSame($profile->getContentDescription(), 'Content description');
+    $this->assertSame($profile->getExternalStyleId(), 'my-style-id');
+    $this->assertSame($profile->getPurchaseOrder(), 'PO32');
+    $this->assertSame($profile->getRegion(), 'region2');
   }

   /**
@@ @@
     $this->drupalGet('admin/lingotek/settings');
     $this->clickLink(t('Add new Translation Profile'));

-    $this->assertFieldByName('filter');
-    $this->assertFieldByName('subfilter');
+    $this->assertSession()->fieldExists('filter');
+    $this->assertSession()->fieldExists('subfilter');
     $assert_session->optionExists('edit-filter', 'default');
     $assert_session->optionExists('edit-filter', 'project_default');
     $assert_session->optionExists('edit-filter', 'drupal_default');
@@ @@
     $this->drupalGet('admin/lingotek/settings');
     $this->clickLink(t('Add new Translation Profile'));

-    $this->assertFieldByName('filter');
+    $this->assertSession()->fieldExists('filter');
     $option_field = $assert_session->optionExists('edit-filter', 'drupal_default');
     $this->assertTrue($option_field->hasAttribute('selected'));
     $assert_session->optionExists('edit-filter', 'default');
@@ @@
     $assert_session->optionNotExists('edit-filter', 'test_filter');
     $assert_session->optionNotExists('edit-filter', 'test_filter2');

-    $this->assertFieldByName('subfilter');
+    $this->assertSession()->fieldExists('subfilter');
     $option_field = $assert_session->optionExists('edit-subfilter', 'drupal_default');
     $this->assertTrue($option_field->hasAttribute('selected'));
     $assert_session->optionExists('edit-subfilter', 'default');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertFieldCheckedRector
 * AssertIdenticalRector
 * AssertNoFieldByNameRector
 * AssertNoFieldCheckedRector
 * AssertNoRawRector
 * AssertRawRector
 * AssertTextRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


55) modules/contrib/lingotek/tests/src/Functional/Form/LingotekParagraphsBulkFormTest.php:85

    ---------- begin diff ----------
@@ @@
     $this->addDemoContent();

     $edit = ['contrib[paragraphs][enable_bulk_management]' => 1];
-    $this->drupalPostForm(NULL, $edit, 'Save settings', [], 'lingoteksettings-integrations-form');
-    $this->assertText('The configuration options have been saved.');
+    $this->submitForm($edit, 'Save settings', 'lingoteksettings-integrations-form');
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');

     $this->goToContentBulkManagementForm('paragraph');

-    $this->assertText('Parent');
+    $this->assertSession()->pageTextContains('Parent');
     $assert_session->linkExists('Welcome to the Paragraphs Demo module!', 4);
     $assert_session->linkExists('Library item');
   }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


56) modules/contrib/lingotek/tests/src/Functional/Form/LingotekNodeBulkFormWithGroupModuleTest.php:127

    ---------- begin diff ----------
@@ @@
     $this->goToContentBulkManagementForm();

     // Assert there is a select for group.
-    $this->assertField('filters[wrapper][group]', 'There is a filter for group');
+    $this->assertSession()->fieldExists('filters[wrapper][group]', 'There is a filter for group');
   }

   /**
@@ @@
     $this->goToContentBulkManagementForm();

     // Assert there is a select for group.
-    $this->assertNoField('filters[wrapper][group]', 'There is not a filter for group');
+    $this->assertSession()->fieldNotExists('filters[wrapper][group]', 'There is not a filter for group');
   }

   /**
@@ @@
     $this->goToContentBulkManagementForm('user');

     // Assert there is not a select for group.
-    $this->assertNoField('filters[wrapper][group]', 'There is not a filter for group');
+    $this->assertSession()->fieldNotExists('filters[wrapper][group]', 'There is not a filter for group');
   }

   /**
@@ @@
       'user[user][profiles]' => 'automatic',
       'user[user][fields][changed]' => 1,
     ];
-    $this->drupalPostForm('admin/lingotek/settings', $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->drupalGet('admin/lingotek/settings', []);
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');
   }

   /**
@@ @@
     $edit = [
       'filters[wrapper][group]' => '1',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([1, 5, 7, 11, 13] as $j) {
       $assert_session->linkExists('Llamas are cool ' . $j . ' at Group My Product 1.0');
     }
@@ @@
     $edit = [
       'filters[wrapper][group]' => '2',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([2, 4, 6, 8, 10, 12, 14] as $j) {
       $assert_session->linkExists('Llamas are cool ' . $j . ' at Group My Product 2.0');
     }
@@ @@
     $edit = [
       'filters[wrapper][group]' => '3',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([3, 9] as $j) {
       $assert_session->linkExists('Llamas are cool ' . $j . ' at Group My Product 2.4');
     }
@@ @@
     $assert_session->linkNotExists('Llamas are cool 5 at Group My Product 1.0');

     // After we reset, we get back to having a pager and all the content.
-    $this->drupalPostForm(NULL, [], 'Reset');
+    $this->submitForm([], 'Reset');
     foreach ([1, 5, 7] as $j) {
       $assert_session->linkExists('Llamas are cool ' . $j . ' at Group My Product 1.0');
     }
@@ @@
     $this->clickLink('Add group');

     $edit = ['label[0][value]' => $label];
-    $this->drupalPostForm(NULL, $edit, new FormattableMarkup('Create @group and complete your membership', ['@group' => $group_label]));
-    $this->drupalPostForm(NULL, [], 'Save group and membership');
+    $this->submitForm($edit, new FormattableMarkup('Create @group and complete your membership', ['@group' => $group_label]));
+    $this->submitForm([], 'Save group and membership');
     return $label;
   }

@@ @@
   protected function relateNodeToGroup($nid, $gid, $title) {
     $this->drupalGet('/group/' . $gid . '/content/add/group_node%3Aarticle');
     $edit = ['entity_id[0][target_id]' => $title . ' (' . $nid . ')'];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->titleEquals($title . ' | Drupal');
   }
    ----------- end diff -----------

Applied rules:
 * AssertFieldRector
 * AssertNoFieldRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


57) modules/contrib/lingotek/tests/src/Functional/Form/LingotekNodeBulkFormWithContentModerationTest.php:82

    ---------- begin diff ----------
@@ @@
     $update = [
       'filters[advanced_options][content_state]' => 'draft',
     ];
-    $this->drupalPostForm(NULL, $update, 'edit-filters-actions-submit');
+    $this->submitForm($update, 'edit-filters-actions-submit');
     $assert_session->linkExists('Llamas are cool');

-    $this->assertFieldByName('filters[advanced_options][content_state]', 'draft', 'The value is retained in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[advanced_options][content_state]', 'draft');

     // Change the content moderation state to published
     $this->saveAndKeepPublishedNodeForm($edit, 1);
@@ @@
     $update = [
       'filters[advanced_options][content_state]' => 'published',
     ];
-    $this->drupalPostForm(NULL, $update, 'edit-filters-actions-submit');
+    $this->submitForm($update, 'edit-filters-actions-submit');
     $assert_session->linkExists('Llamas are cool');

-    $this->assertFieldByName('filters[advanced_options][content_state]', 'published', 'The value is retained in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[advanced_options][content_state]', 'published');

     // Change the content moderation state to archived
     $this->saveAndArchiveNodeForm($edit, 1);
@@ @@
     $update = [
       'filters[advanced_options][content_state]' => 'archived',
     ];
-    $this->drupalPostForm(NULL, $update, 'edit-filters-actions-submit');
+    $this->submitForm($update, 'edit-filters-actions-submit');
     $assert_session->linkExists('Llamas are cool');

-    $this->assertFieldByName('filters[advanced_options][content_state]', 'archived', 'The value is retained in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[advanced_options][content_state]', 'archived');

     $update = [
       'filters[advanced_options][content_state]' => 'published',
     ];
-    $this->drupalPostForm(NULL, $update, 'edit-filters-actions-submit');
+    $this->submitForm($update, 'edit-filters-actions-submit');

     // Make sure the document does not show up when we filter by published and the document is archived
     $assert_session->linkNotExists('Llamas are cool');
@@ @@
    */
   protected function enableModerationThroughUI($content_type_id) {
     $this->drupalGet('/admin/config/workflow/workflows/manage/editorial/type/node');
-    $this->assertFieldByName("bundles[$content_type_id]");
+    $this->assertSession()->fieldExists("bundles[$content_type_id]");
     $edit["bundles[$content_type_id]"] = TRUE;
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


58) modules/contrib/lingotek/tests/src/Functional/Form/LingotekNodeBulkFormTest.php:87

    ---------- begin diff ----------
@@ @@

     // Navigate to page 2.
     $this->clickLink(t('Page 2'));
-    $this->assertUrl('admin/lingotek/manage/node?page=1');
+    $this->assertSession()->addressEquals('admin/lingotek/manage/node?page=1');

     // I can init the upload of content.
     $this->assertLingotekUploadLink(11, 'node');
@@ @@
       $key2 => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // The current page is kept.
-    $this->assertUrl('admin/lingotek/manage/node?page=1');
+    $this->assertSession()->addressEquals('admin/lingotek/manage/node?page=1');

     // There is a link for checking status.
     $this->assertLingotekCheckSourceStatusLink();
@@ @@
     // And we can already request a translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool 11 is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool 11 is complete.');

     // The current page is kept.
-    $this->assertUrl('admin/lingotek/manage/node?page=1');
+    $this->assertSession()->addressEquals('admin/lingotek/manage/node?page=1');
   }

   /**
@@ @@
     $edit = [
       'filters[advanced_options][profile][]' => 'automatic',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');

     foreach ([1, 5, 7, 11, 13] as $j) {
       // The filtered id is shown, but not others.
@@ @@
       $assert_session->linkNotExists('Llamas are cool 2');

       // The value is retained in the filter.
-      $this->assertFieldByName('filters[advanced_options][profile][]', 'automatic', 'The value is retained in the filter.');
+      $this->assertSession()->fieldValueEquals('filters[advanced_options][profile][]', 'automatic');
     }

     // After we filter by manual profile, there is no pager and the rows
@@ @@
     $edit = [
       'filters[advanced_options][profile][]' => 'manual',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');

     foreach ([2, 4, 6, 8, 10, 12, 14] as $j) {
       // The filtered id is shown, but not others.
@@ @@
       $assert_session->linkNotExists('Llamas are cool 2');

       // The value is retained in the filter.
-      $this->assertFieldByName('filters[advanced_options][profile][]', 'manual', 'The value is retained in the filter.');
+      $this->assertSession()->fieldValueEquals('filters[advanced_options][profile][]', 'manual');
     }

     // After we filter by disabled profile, there is no pager and the rows
@@ @@
     $edit = [
       'filters[advanced_options][profile][]' => 'disabled',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');

     foreach ([3, 9] as $j) {
       // The filtered id is shown, but not others.
@@ @@
       $assert_session->linkNotExists('Llamas are cool 2');

       // The value is retained in the filter.
-      $this->assertFieldByName('filters[advanced_options][profile][]', 'disabled', 'The value is retained in the filter.');
+      $this->assertSession()->fieldValueEquals('filters[advanced_options][profile][]', 'disabled');
     }

     $assert_session->linkNotExists('Llamas are cool 15');
@@ @@
     $edit = [
       'filters[wrapper][job]' => 'this job does not exist',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     $assert_session->linkNotExists('Llamas are cool');
     $assert_session->linkByHrefNotExists('?page=1');

     // After we reset, we get back to having a pager and all the content.
-    $this->drupalPostForm(NULL, [], 'Reset');
+    $this->submitForm([], 'Reset');
     foreach (range(1, 10) as $j) {
       $assert_session->linkExists('Llamas are cool ' . $indexes[$j]);
     }
@@ @@
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
       'job_id' => 'even numbers',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'table[1]' => TRUE,
@@ @@
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
       'job_id' => 'prime numbers',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Show 10 results.
     \Drupal::service('tempstore.private')->get('lingotek.management.items_per_page')->set('limit', 10);
@@ @@
     $edit = [
       'filters[wrapper][job]' => 'prime',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([1, 2, 3, 5, 7, 11, 13] as $j) {
       $assert_session->linkExists('Llamas are cool ' . $indexes[$j]);
     }
@@ @@
     $assert_session->linkNotExists('Page 2');
     $assert_session->linkNotExists('Llamas are cool ' . $indexes[4]);

-    $this->assertFieldByName('filters[wrapper][job]', 'prime', 'The value is retained in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[wrapper][job]', 'prime');

     // After we filter by even, there is no pager and the rows selected are the
     // ones expected.
@@ @@
     $edit = [
       'filters[wrapper][job]' => 'even',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([4, 6, 8, 10, 12, 14] as $j) {
       $assert_session->linkExists('Llamas are cool ' . $indexes[$j]);
     }
@@ @@
     $assert_session->linkByHrefNotExists('?page=1');
     $assert_session->linkNotExists('Llamas are cool ' . $indexes[5]);

-    $this->assertFieldByName('filters[wrapper][job]', 'even', 'The value is retained in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[wrapper][job]', 'even');

     // After we reset, we get back to having a pager and all the content.
-    $this->drupalPostForm(NULL, [], 'Reset');
+    $this->submitForm([], 'Reset');
     foreach (range(1, 10) as $j) {
       $assert_session->linkExists('Llamas are cool ' . $indexes[$j]);
     }
@@ @@
     $edit = [
       'filters[wrapper][label]' => 'Llamas',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([1, 5, 7, 11, 13] as $j) {
       $assert_session->linkExists('Llamas are cool ' . $j);
     }
@@ @@
     $assert_session->linkByHrefNotExists('?page=1');
     $assert_session->linkNotExists('Dogs are cool 2');

-    $this->assertFieldByName('filters[wrapper][label]', 'Llamas', 'The value is retained in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[wrapper][label]', 'Llamas');

     // After we filter by label 'Dogs', there is no pager and the rows selected
     // are the ones expected.
@@ @@
     $edit = [
       'filters[wrapper][label]' => 'Dogs',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([2, 4, 6, 8, 10, 12, 14] as $j) {
       $assert_session->linkExists('Dogs are cool ' . $j);
     }
@@ @@
     $assert_session->linkNotExists('Page 2');
     $assert_session->linkNotExists('Llamas are cool 1');

-    $this->assertFieldByName('filters[wrapper][label]', 'Dogs', 'The value is retained in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[wrapper][label]', 'Dogs');

     // After we filter by label 'Cats', there is no pager and the rows selected
     // are the ones expected.
@@ @@
     $edit = [
       'filters[wrapper][label]' => 'Cats',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([3, 9] as $j) {
       $assert_session->linkExists('Cats are cool ' . $j);
     }
@@ @@
     $assert_session->linkByHrefNotExists('?page=1');
     $assert_session->linkNotExists('Dogs are cool 5');

-    $this->assertFieldByName('filters[wrapper][label]', 'Cats', 'The value is retained in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[wrapper][label]', 'Cats');

     // After we reset, we get back to having a pager and all the content under
     // limit of 10.
-    $this->drupalPostForm(NULL, [], 'Reset');
+    $this->submitForm([], 'Reset');
     foreach ([1, 5, 7] as $j) {
       $assert_session->linkExists('Llamas are cool ' . $j);
     }
@@ @@
     $edit = [
       'filters[wrapper][label]' => '  Cats   ',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([3, 9] as $j) {
       $assert_session->linkExists('Cats are cool ' . $j);
     }
-    $this->assertFieldByName('filters[wrapper][label]', 'Cats', 'The value is trimmed in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[wrapper][label]', 'Cats');
   }

   /**
@@ @@
     $edit = [
       'filters[advanced_options][source_language]' => 'es',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([1, 5, 7, 11, 13] as $j) {
       $assert_session->linkExists('Llamas are cool ES ' . $j);
     }
@@ @@
     $assert_session->linkByHrefNotExists('?page=1');
     $assert_session->linkNotExists('Llamas are cool IT 2');

-    $this->assertFieldByName('filters[advanced_options][source_language]', 'es', 'The value is retained in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[advanced_options][source_language]', 'es');

     // After we filter by Italian source language, there is no pager and the
     // rows selected are the ones expected.
@@ @@
     $edit = [
       'filters[advanced_options][source_language]' => 'it',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([2, 4, 6, 8, 10, 12, 14] as $j) {
       $assert_session->linkExists('Llamas are cool IT ' . $j);
     }
@@ @@
     $assert_session->linkNotExists('Page 2');
     $assert_session->linkNotExists('Llamas are cool ES 1');

-    $this->assertFieldByName('filters[advanced_options][source_language]', 'it', 'The value is retained in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[advanced_options][source_language]', 'it');

     // After we filter by English source language, there is no pager and the
     // rows selected are the ones expected.
@@ @@
     $edit = [
       'filters[advanced_options][source_language]' => 'en',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([3, 9] as $j) {
       $assert_session->linkExists('Llamas are cool EN ' . $j);
     }
@@ @@
     $assert_session->linkByHrefNotExists('?page=1');
     $assert_session->linkNotExists('Llamas are cool ES 5');

-    $this->assertFieldByName('filters[advanced_options][source_language]', 'en', 'The value is retained in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[advanced_options][source_language]', 'en');

     // After we reset, we get back to having a pager and all the content.
-    $this->drupalPostForm(NULL, [], 'Reset');
+    $this->submitForm([], 'Reset');
     foreach ([1, 5, 7] as $j) {
       $assert_session->linkExists('Llamas are cool ES ' . $j);
     }
@@ @@
     $edit = [
       'filters[wrapper][bundle][]' => 'page',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([1, 5, 7, 11, 13] as $j) {
       $assert_session->linkExists('Llamas are cool page ' . $j);
     }
@@ @@
     $assert_session->linkByHrefNotExists('?page=1');
     $assert_session->linkNotExists('Llamas are cool article 3');

-    $this->assertFieldByName('filters[wrapper][bundle][]', 'page', 'The value is retained in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[wrapper][bundle][]', 'page');

     // After we filter by custom_type, there is no pager and the rows selected are
     // the ones expected.
@@ @@
     $edit = [
       'filters[wrapper][bundle][]' => 'custom_type',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([2, 4, 8, 10, 14] as $j) {
       $assert_session->linkExists('Llamas are cool custom_type ' . $j);
     }
@@ @@
     $assert_session->linkNotExists('Llamas are cool article 3');
     $assert_session->linkNotExists('Llamas are cool page 1');

-    $this->assertFieldByName('filters[wrapper][bundle][]', 'custom_type', 'The value is retained in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[wrapper][bundle][]', 'custom_type');

     // After we filter by article, there is no pager and the rows selected are the
     // ones expected.
@@ @@
     $edit = [
       'filters[wrapper][bundle][]' => 'article',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([3, 6, 9, 12] as $j) {
       $assert_session->linkExists('Llamas are cool article ' . $j);
     }
@@ @@
     $assert_session->linkNotExists('Page 2');
     $assert_session->linkNotExists('Llamas are cool page 1');

-    $this->assertFieldByName('filters[wrapper][bundle][]', 'article', 'The value is retained in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[wrapper][bundle][]', 'article');

     // After we filter by both page and article, there is no pager and the rows
     // selected are the ones expected.
@@ @@
         'page',
         'article',
       ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([1, 5, 7] as $j) {
       $assert_session->linkExists('Llamas are cool page ' . $j);
     }
@@ @@
     }

     // After we reset, we get back to having a pager and all the content.
-    $this->drupalPostForm(NULL, [], 'Reset');
+    $this->submitForm([], 'Reset');
     foreach ([1, 5, 7] as $j) {
       $assert_session->linkExists('Llamas are cool page ' . $j);
     }
@@ @@
       'table[1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'table[1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'table[1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancel('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_CANCELLED);
     $this->assertTargetStatus('ES', Lingotek::STATUS_CANCELLED);
@@ @@
       'table[1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // The node was re-uploaded and target statuses reset.
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
@@ @@
       'table[1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'table[1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'table[1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancel('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_CANCELLED);
     $this->assertTargetStatus('ES', Lingotek::STATUS_CANCELLED);
@@ @@
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];

-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
-    $this->assertIdentical('my_custom_job_id', \Drupal::state()->get('lingotek.uploaded_job_id'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSame('my_custom_job_id', \Drupal::state()->get('lingotek.uploaded_job_id'));

     /** @var \Drupal\lingotek\Entity\LingotekContentMetadata[] $metadatas */
     $metadatas = LingotekContentMetadata::loadMultiple();
     foreach ($metadatas as $metadata) {
-      $this->assertEqual('my_custom_job_id', $metadata->getJobId(), 'The job id was saved along with metadata.');
+      $this->assertEquals('my_custom_job_id', $metadata->getJobId(), 'The job id was saved along with metadata.');
     }

     // The column for Job ID exists and there are values.
-    $this->assertText('Job ID');
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('Job ID');
+    $this->assertSession()->pageTextContains('my_custom_job_id');
   }

   /**
@@ @@
       'job_id' => 'my_custom_job_id',
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
-    $this->assertIdentical('my_custom_job_id', \Drupal::state()->get('lingotek.uploaded_job_id'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSame('my_custom_job_id', \Drupal::state()->get('lingotek.uploaded_job_id'));

     /** @var \Drupal\lingotek\Entity\LingotekContentMetadata[] $metadatas */
     $metadatas = LingotekContentMetadata::loadMultiple();
@@ @@
     }

     // The column for Job ID exists and there are values.
-    $this->assertText('Job ID');
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('Job ID');
+    $this->assertSession()->pageTextContains('my_custom_job_id');
   }

   /**
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no upload.
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_title'));
@@ @@
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is displayed.
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');

     // And the job id is used on upload.
     $this->clickLink('EN');

-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
     // Check that the job id used was the right one.
     \Drupal::state()->resetCache();
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');

     // If we update the job ID without notification to the TMS, no update happens.
     $edit = [
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'other_job_id',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no upload.
     \Drupal::state()->resetCache();
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no update, because there are no document ids.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is displayed.
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');

     // And the job id is used on upload.
     $this->clickLink('EN');

-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
     // Check that the job id used was the right one.
     \Drupal::state()->resetCache();
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');

     // If we update the job ID with notification to the TMS, an update happens.
     $edit = [
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'other_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is an update.
     \Drupal::state()->resetCache();
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_title'));
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'other_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'other_job_id');
   }

   /**
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no update, because there are no document ids.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is displayed.
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');

     // And the job id is used on upload.
     $this->clickLink('EN');

-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
     // Check that the job id used was the right one.
     \Drupal::state()->resetCache();
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', TRUE);
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'other_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Document node Llamas are cool has a new version. The document id has been updated for all future interactions. Please try again.');
-    $this->assertText('Job ID for some content failed to sync to the TMS.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Job ID for some content failed to sync to the TMS.');

     // There is no update.
     \Drupal::state()->resetCache();
     $this->assertEquals('my_custom_job_id', \Drupal::state()->get('lingotek.uploaded_job_id'));

-    $this->assertText('my_custom_job_id');
-    $this->assertText('other_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');
+    $this->assertSession()->pageTextContains('other_job_id');
   }

   /**
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no update, because there are no document ids.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is displayed.
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');

     // And the job id is used on upload.
     $this->clickLink('EN');

-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
     // Check that the job id used was the right one.
     \Drupal::state()->resetCache();
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', TRUE);
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'other_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Document node Llamas are cool was not found. Please upload again.');
-    $this->assertText('Job ID for some content failed to sync to the TMS.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Job ID for some content failed to sync to the TMS.');

     // There is no update.
     \Drupal::state()->resetCache();
     $this->assertEquals('my_custom_job_id', \Drupal::state()->get('lingotek.uploaded_job_id'));

-    $this->assertNoText('my_custom_job_id');
-    $this->assertText('other_job_id');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id');
+    $this->assertSession()->pageTextContains('other_job_id');
   }

   /**
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no update, because there are no document ids.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is displayed.
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');

     // And the job id is used on upload.
     $this->clickLink('EN');

-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
     // Check that the job id used was the right one.
     \Drupal::state()->resetCache();
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', TRUE);
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'other_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Document node Llamas are cool has been archived. Please upload again.');
-    $this->assertText('Job ID for some content failed to sync to the TMS.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool has been archived. Please upload again.');
+    $this->assertSession()->pageTextContains('Job ID for some content failed to sync to the TMS.');

     // There is no update.
     \Drupal::state()->resetCache();
     $this->assertEquals('my_custom_job_id', \Drupal::state()->get('lingotek.uploaded_job_id'));

-    $this->assertText('my_custom_job_id');
-    $this->assertText('other_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');
+    $this->assertSession()->pageTextContains('other_job_id');
   }

   /**
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no update, because there are no document ids.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is displayed.
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');

     // And the job id is used on upload.
     $this->clickLink('EN');

-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
     // Check that the job id used was the right one.
     \Drupal::state()->resetCache();
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', TRUE);
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'other_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
-    $this->assertText('Job ID for some content failed to sync to the TMS.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Job ID for some content failed to sync to the TMS.');

     // There is no update.
     \Drupal::state()->resetCache();
     $this->assertEquals('my_custom_job_id', \Drupal::state()->get('lingotek.uploaded_job_id'));

-    $this->assertText('my_custom_job_id');
-    $this->assertText('other_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');
+    $this->assertSession()->pageTextContains('other_job_id');
   }

   /**
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no update, because there are no document ids.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is displayed.
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');

     // And the job id is used on upload.
     $this->clickLink('EN');

-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
     // Check that the job id used was the right one.
     \Drupal::state()->resetCache();
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_update', TRUE);
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'other_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
-    $this->assertText('Job ID for some content failed to sync to the TMS.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Job ID for some content failed to sync to the TMS.');

     // There is no update.
     \Drupal::state()->resetCache();
     $this->assertEquals('my_custom_job_id', \Drupal::state()->get('lingotek.uploaded_job_id'));

-    $this->assertText('my_custom_job_id');
-    $this->assertText('other_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');
+    $this->assertSession()->pageTextContains('other_job_id');
   }

   /**
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no update, because there are no document ids.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is displayed.
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');

     // And the job id is used on upload.
     $this->clickLink('EN');

-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
     // Check that the job id used was the right one.
     \Drupal::state()->resetCache();
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_error_in_upload', TRUE);
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'other_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('The Job ID change submission for node Llamas are cool failed. Please try again.');
-    $this->assertText('Job ID for some content failed to sync to the TMS.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('The Job ID change submission for node Llamas are cool failed. Please try again.');
+    $this->assertSession()->pageTextContains('Job ID for some content failed to sync to the TMS.');

     // There is no update.
     \Drupal::state()->resetCache();
     $this->assertEquals('my_custom_job_id', \Drupal::state()->get('lingotek.uploaded_job_id'));

-    $this->assertText('my_custom_job_id');
-    $this->assertText('other_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');
+    $this->assertSession()->pageTextContains('other_job_id');
   }

   /**
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'job_id' => 'my\invalid\id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('The job ID name cannot contain invalid chars as "/" or "\".');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('The job ID name cannot contain invalid chars as "/" or "\".');

     // There is no update, because it's not valid.
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));
@@ @@
       'job_id' => 'my/invalid/id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('The job ID name cannot contain invalid chars as "/" or "\".');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('The job ID name cannot contain invalid chars as "/" or "\".');

     // There is no update, because it's not valid.
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));
@@ @@
       'table[1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Llamas are cool');
-    $this->assertNoText('Dogs are cool');
-    $this->drupalPostForm(NULL, [], 'Cancel');
+    $this->assertSession()->pageTextContains('Llamas are cool');
+    $this->assertSession()->pageTextNotContains('Dogs are cool');
+    $this->submitForm([], 'Cancel');

     $edit = [
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertNoText('Llamas are cool');
-    $this->assertText('Dogs are cool');
+    $this->assertSession()->pageTextNotContains('Llamas are cool');
+    $this->assertSession()->pageTextContains('Dogs are cool');
   }

   /**
@@ @@
       'table[1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Llamas are cool');
-    $this->assertNoText('Dogs are cool');
+    $this->assertSession()->pageTextContains('Llamas are cool');
+    $this->assertSession()->pageTextNotContains('Dogs are cool');

     $this->goToContentBulkManagementForm();

@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertNoText('Llamas are cool');
-    $this->assertText('Dogs are cool');
+    $this->assertSession()->pageTextNotContains('Llamas are cool');
+    $this->assertSession()->pageTextContains('Dogs are cool');
   }

   /**
@@ @@
       'table[1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_1',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     $edit = [
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_2',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // The job id is displayed.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextContains('my_custom_job_id_2');

     $edit = [
       'table[1]' => TRUE,
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForClearJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->drupalPostForm(NULL, [], 'Clear Job ID');
-    $this->assertText('Job ID was cleared successfully.');
+    $this->submitForm([], 'Clear Job ID');
+    $this->assertSession()->pageTextContains('Job ID was cleared successfully.');

     // There is no upload.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertEquals('my_custom_job_id_1', \Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is gone.
-    $this->assertNoText('my_custom_job_id_1');
-    $this->assertNoText('my_custom_job_id_2');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_2');
   }

   /**
@@ @@
       'table[1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_1',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     $edit = [
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_2',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // The job id is displayed.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextContains('my_custom_job_id_2');

     $edit = [
       'table[1]' => TRUE,
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForClearJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->drupalPostForm(NULL, ['update_tms' => 1], 'Clear Job ID');
-    $this->assertText('Job ID was cleared successfully.');
+    $this->submitForm(['update_tms' => 1], 'Clear Job ID');
+    $this->assertSession()->pageTextContains('Job ID was cleared successfully.');

     // There is an update with empty job id.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertEquals('', \Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is gone.
-    $this->assertNoText('my_custom_job_id_1');
-    $this->assertNoText('my_custom_job_id_2');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_2');
   }

   /**
@@ @@
       'table[1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_1',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     $edit = [
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_2',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // The job id is displayed.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextContains('my_custom_job_id_2');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_error_in_upload', TRUE);
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForClearJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->drupalPostForm(NULL, ['update_tms' => 1], 'Clear Job ID');
-    $this->assertText('The Job ID change submission for node Llamas are cool failed. Please try again.');
-    $this->assertText('Job ID for some content failed to sync to the TMS.');
+    $this->submitForm(['update_tms' => 1], 'Clear Job ID');
+    $this->assertSession()->pageTextContains('The Job ID change submission for node Llamas are cool failed. Please try again.');
+    $this->assertSession()->pageTextContains('Job ID for some content failed to sync to the TMS.');

     // There is an update with empty job id.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertEquals('my_custom_job_id_1', \Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is gone.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertNoText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_2');
   }

   /**
@@ @@
       'table[1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_1',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     $edit = [
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_2',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', TRUE);

     // The job id is displayed.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextContains('my_custom_job_id_2');

     $edit = [
       'table[1]' => TRUE,
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForClearJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->drupalPostForm(NULL, ['update_tms' => 1], 'Clear Job ID');
-    $this->assertText('Document node Llamas are cool was not found. Please upload again.');
-    $this->assertText('Job ID for some content failed to sync to the TMS.');
+    $this->submitForm(['update_tms' => 1], 'Clear Job ID');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Job ID for some content failed to sync to the TMS.');

     // There is an update with empty job id.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertEquals('my_custom_job_id_1', \Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is gone.
-    $this->assertNoText('my_custom_job_id_1');
-    $this->assertNoText('my_custom_job_id_2');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_2');
   }

   /**
@@ @@
       'table[1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_1',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     $edit = [
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_2',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', TRUE);

     // The job id is displayed.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextContains('my_custom_job_id_2');

     $edit = [
       'table[1]' => TRUE,
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForClearJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->drupalPostForm(NULL, ['update_tms' => 1], 'Clear Job ID');
-    $this->assertText('Document node Llamas are cool has been archived. Please upload again.');
-    $this->assertText('Job ID for some content failed to sync to the TMS.');
+    $this->submitForm(['update_tms' => 1], 'Clear Job ID');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool has been archived. Please upload again.');
+    $this->assertSession()->pageTextContains('Job ID for some content failed to sync to the TMS.');

     // There is an update with empty job id.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertEquals('my_custom_job_id_1', \Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is gone.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertNoText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_2');
   }

   /**
@@ @@
       'table[1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_1',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     $edit = [
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_2',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // The job id is displayed.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextContains('my_custom_job_id_2');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', TRUE);
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForClearJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->drupalPostForm(NULL, ['update_tms' => 1], 'Clear Job ID');
-    $this->assertText('Document node Llamas are cool has a new version. The document id has been updated for all future interactions. Please try again.');
-    $this->assertText('Job ID for some content failed to sync to the TMS.');
+    $this->submitForm(['update_tms' => 1], 'Clear Job ID');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Job ID for some content failed to sync to the TMS.');

     // There is an update with empty job id.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertEquals('my_custom_job_id_1', \Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is gone.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertNoText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_2');
   }

   /**
@@ @@
       'table[1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_1',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     $edit = [
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_2',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // The job id is displayed.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextContains('my_custom_job_id_2');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', TRUE);
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForClearJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->drupalPostForm(NULL, ['update_tms' => 1], 'Clear Job ID');
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
-    $this->assertText('Job ID for some content failed to sync to the TMS.');
+    $this->submitForm(['update_tms' => 1], 'Clear Job ID');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Job ID for some content failed to sync to the TMS.');

     // There is an update with empty job id.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertEquals('my_custom_job_id_1', \Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is gone.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertNoText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_2');
   }

   /**
@@ @@
       'table[1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_1',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     $edit = [
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_2',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // The job id is displayed.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextContains('my_custom_job_id_2');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_update', TRUE);
@@ @@
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForClearJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->drupalPostForm(NULL, ['update_tms' => 1], 'Clear Job ID');
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
-    $this->assertText('Job ID for some content failed to sync to the TMS.');
+    $this->submitForm(['update_tms' => 1], 'Clear Job ID');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Job ID for some content failed to sync to the TMS.');

     // There is an update with empty job id.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertEquals('my_custom_job_id_1', \Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is gone.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertNoText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_2');
   }

   /**
@@ @@
     $assert_session->linkByHrefExists('?page=1');

     // After we reset, we get back to having a pager and all the content.
-    $this->drupalPostForm(NULL, [], 'Reset');
+    $this->submitForm([], 'Reset');

     foreach (range(1, 10) as $j) {
       $assert_session->linkExists('Llamas are cool ' . $j);
@@ @@
     'filters[advanced_options][document_id]' => '1',
     ];

-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');

     // Our fake doc ids are dummy-document-hash-id-X. We know we will find
     // dummy-document-hash-id, dummy-document-hash-id-1 and those after dummy-document-hash-id-10.
@@ @@
       $assert_session->linkNotExists('Llamas are cool ' . $j);
     }

-    $this->assertFieldByName('filters[advanced_options][document_id]', 1, 'The value is retained in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[advanced_options][document_id]', 1);

     $assert_session->linkByHrefNotExists('?page=1');
   }
@@ @@
       'filters[advanced_options][document_id]' => 'dummy-document-hash-id-2, dummy-document-hash-id-3',
     ];

-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');

     // Our fake doc ids are dummy-document-hash-id-X. We know we will find
     // dummy-document-hash-id-2 and dummy-document-hash-id-3.
@@ @@
     $assert_session->linkExists('Llamas are cool 4');
     $assert_session->linkNotExists('Llamas are cool 1');

-    $this->assertFieldByName('filters[advanced_options][document_id]', 'dummy-document-hash-id-2, dummy-document-hash-id-3', 'The value is retained in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[advanced_options][document_id]', 'dummy-document-hash-id-2, dummy-document-hash-id-3');

     // Assert there is no pager.
     $assert_session->linkByHrefNotExists('?page=1');
@@ @@
     $edit = [
       'filters[advanced_options][entity_id]' => '1,2,4',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');

     // The filtered id is shown, but not others.
     $assert_session->linkExists('Llamas are cool 1');
@@ @@
     $assert_session->linkNotExists('Llamas are cool 3');

     // The value is retained in the filter.
-    $this->assertFieldByName('filters[advanced_options][entity_id]', '1,2,4', 'The value is retained in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[advanced_options][entity_id]', '1,2,4');
     $assert_session->linkByHrefNotExists('?page=1');
   }

@@ @@
       $edit = [
         'filters[advanced_options][entity_id]' => $j,
       ];
-      $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+      $this->submitForm($edit, 'edit-filters-actions-submit');

       // The filtered id is shown, but not others.
       $assert_session->linkExists('Llamas are cool ' . $j);
@@ @@
       $assert_session->linkNotExists('Llamas are cool ' . ($j + 1));

       // The value is retained in the filter.
-      $this->assertFieldByName('filters[advanced_options][entity_id]', $j, 'The value is retained in the filter.');
+      $this->assertSession()->fieldValueEquals('filters[advanced_options][entity_id]', $j);
     }

     $assert_session->linkNotExists('Llamas are cool 15');
@@ @@
     $edit = [
       'filters[advanced_options][source_status]' => 'IMPORTING',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     $assert_session->linkExists('Llamas are cool');

-    $this->assertFieldByName('filters[advanced_options][source_status]', 'IMPORTING', 'The value is retained in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[advanced_options][source_status]', 'IMPORTING');

     // Ensure there is a link to upload and click it.
     $this->assertLingotekCheckSourceStatusLink();
@@ @@
     $edit = [
       'filters[advanced_options][source_status]' => 'CURRENT',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     $assert_session->linkExists('Llamas are cool');

-    $this->assertFieldByName('filters[advanced_options][source_status]', 'CURRENT', 'The value is retained in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[advanced_options][source_status]', 'CURRENT');
   }

   /**
@@ @@
     $edit = [
       'filters[advanced_options][target_status]' => 'PENDING',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
-    $this->assertFieldByName('filters[advanced_options][target_status]', 'PENDING', 'The value is retained in the filter.');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
+    $this->assertSession()->fieldValueEquals('filters[advanced_options][target_status]', 'PENDING');
     $assert_session->linkNotExists('Llamas are cool');

     // Reset filters.
-    $this->drupalPostForm(NULL, [], 'Reset');
+    $this->submitForm([], 'Reset');

     // Ensure there is a link to request and click it.
     $this->assertLingotekRequestTranslationLink('es_MX');
@@ @@
     $edit = [
       'filters[advanced_options][target_status]' => 'PENDING',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
-    $this->assertFieldByName('filters[advanced_options][target_status]', 'PENDING', 'The value is retained in the filter.');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
+    $this->assertSession()->fieldValueEquals('filters[advanced_options][target_status]', 'PENDING');
     $assert_session->linkExists('Llamas are cool');
   }

@@ @@

     $this->goToContentBulkManagementForm();

-    $this->assertText('CustomType edited ready ready');
-    $this->assertText('Article current error current');
-    $this->assertText('Article importing null null');
-    $this->assertText('Article null null null');
-    $this->assertText('CustomType edited current edited');
-    $this->assertText('CustomType edited edited current');
-    $this->assertText('Article error edited ready');
-    $this->assertText('Article current interim ready');
-    $this->assertText('CustomType error null null');
-    $this->assertText('CustomType current current ready');
-    $this->assertNoText('CustomType nothing nothing nothing');
-    $this->assertNoText('NotConfigured nothing nothing nothing');
-    $this->assertNoText('Article cancelled cancelled cancelled');
-    $this->assertNoText('Article current request null');
-    $this->assertNoText('CustomType nothing nothing nothing');
-    $this->assertNoText('NotConfigured nothing nothing nothing');
+    $this->assertSession()->pageTextContains('CustomType edited ready ready');
+    $this->assertSession()->pageTextContains('Article current error current');
+    $this->assertSession()->pageTextContains('Article importing null null');
+    $this->assertSession()->pageTextContains('Article null null null');
+    $this->assertSession()->pageTextContains('CustomType edited current edited');
+    $this->assertSession()->pageTextContains('CustomType edited edited current');
+    $this->assertSession()->pageTextContains('Article error edited ready');
+    $this->assertSession()->pageTextContains('Article current interim ready');
+    $this->assertSession()->pageTextContains('CustomType error null null');
+    $this->assertSession()->pageTextContains('CustomType current current ready');
+    $this->assertSession()->pageTextNotContains('CustomType nothing nothing nothing');
+    $this->assertSession()->pageTextNotContains('NotConfigured nothing nothing nothing');
+    $this->assertSession()->pageTextNotContains('Article cancelled cancelled cancelled');
+    $this->assertSession()->pageTextNotContains('Article current request null');
+    $this->assertSession()->pageTextNotContains('CustomType nothing nothing nothing');
+    $this->assertSession()->pageTextNotContains('NotConfigured nothing nothing nothing');

     // Change page limit
     \Drupal::service('tempstore.private')->get('lingotek.management.items_per_page')->set('limit', 50);
     $this->goToContentBulkManagementForm();

-    $this->assertText('CustomType edited ready ready');
-    $this->assertText('Article current error current');
-    $this->assertText('Article importing null null');
-    $this->assertText('Article null null null');
-    $this->assertText('CustomType edited current edited');
-    $this->assertText('CustomType edited edited current');
-    $this->assertText('Article error edited ready');
-    $this->assertText('Article current interim ready');
-    $this->assertText('CustomType error null null');
-    $this->assertText('CustomType current current ready');
-    $this->assertText('CustomType nothing nothing nothing');
-    $this->assertText('NotConfigured nothing nothing nothing');
-    $this->assertText('Article cancelled cancelled cancelled');
-    $this->assertText('Article current request null');
-    $this->assertText('CustomType nothing nothing nothing');
-    $this->assertText('NotConfigured nothing nothing nothing');
+    $this->assertSession()->pageTextContains('CustomType edited ready ready');
+    $this->assertSession()->pageTextContains('Article current error current');
+    $this->assertSession()->pageTextContains('Article importing null null');
+    $this->assertSession()->pageTextContains('Article null null null');
+    $this->assertSession()->pageTextContains('CustomType edited current edited');
+    $this->assertSession()->pageTextContains('CustomType edited edited current');
+    $this->assertSession()->pageTextContains('Article error edited ready');
+    $this->assertSession()->pageTextContains('Article current interim ready');
+    $this->assertSession()->pageTextContains('CustomType error null null');
+    $this->assertSession()->pageTextContains('CustomType current current ready');
+    $this->assertSession()->pageTextContains('CustomType nothing nothing nothing');
+    $this->assertSession()->pageTextContains('NotConfigured nothing nothing nothing');
+    $this->assertSession()->pageTextContains('Article cancelled cancelled cancelled');
+    $this->assertSession()->pageTextContains('Article current request null');
+    $this->assertSession()->pageTextContains('CustomType nothing nothing nothing');
+    $this->assertSession()->pageTextContains('NotConfigured nothing nothing nothing');

     $edit = [
       'filters[advanced_options][source_status]' => 'UPLOAD_NEEDED',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');

-    $this->assertText('CustomType edited ready ready');
-    $this->assertNoText('Article current error current');
-    $this->assertNoText('Article importing null null');
-    $this->assertText('Article null null null');
-    $this->assertText('CustomType edited current edited');
-    $this->assertText('CustomType edited edited current');
-    $this->assertText('Article error edited ready');
-    $this->assertNoText('Article current interim ready');
-    $this->assertText('CustomType error null null');
-    $this->assertNoText('CustomType current current ready');
-    $this->assertText('CustomType nothing nothing nothing');
-    $this->assertText('NotConfigured nothing nothing nothing');
-    $this->assertText('Article cancelled cancelled cancelled');
-    $this->assertNoText('Article current request null');
-    $this->assertText('CustomType nothing nothing nothing');
-    $this->assertText('NotConfigured nothing nothing nothing');
+    $this->assertSession()->pageTextContains('CustomType edited ready ready');
+    $this->assertSession()->pageTextNotContains('Article current error current');
+    $this->assertSession()->pageTextNotContains('Article importing null null');
+    $this->assertSession()->pageTextContains('Article null null null');
+    $this->assertSession()->pageTextContains('CustomType edited current edited');
+    $this->assertSession()->pageTextContains('CustomType edited edited current');
+    $this->assertSession()->pageTextContains('Article error edited ready');
+    $this->assertSession()->pageTextNotContains('Article current interim ready');
+    $this->assertSession()->pageTextContains('CustomType error null null');
+    $this->assertSession()->pageTextNotContains('CustomType current current ready');
+    $this->assertSession()->pageTextContains('CustomType nothing nothing nothing');
+    $this->assertSession()->pageTextContains('NotConfigured nothing nothing nothing');
+    $this->assertSession()->pageTextContains('Article cancelled cancelled cancelled');
+    $this->assertSession()->pageTextNotContains('Article current request null');
+    $this->assertSession()->pageTextContains('CustomType nothing nothing nothing');
+    $this->assertSession()->pageTextContains('NotConfigured nothing nothing nothing');

     $edit = [
       'filters[advanced_options][source_status]' => 'UPLOAD_NEEDED',
       'filters[wrapper][bundle][]' => ['custom_type', 'not_configured'],
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');

-    $this->assertText('CustomType edited ready ready');
-    $this->assertNoText('Article current error current');
-    $this->assertNoText('Article importing null null');
-    $this->assertNoText('Article null null null');
-    $this->assertText('CustomType edited current edited');
-    $this->assertText('CustomType edited edited current');
-    $this->assertNoText('Article error edited ready');
-    $this->assertNoText('Article current interim ready');
-    $this->assertText('CustomType error null null');
-    $this->assertNoText('CustomType current current ready');
-    $this->assertText('CustomType nothing nothing nothing');
-    $this->assertText('NotConfigured nothing nothing nothing');
-    $this->assertNoText('Article cancelled cancelled cancelled');
-    $this->assertNoText('Article current request null');
-    $this->assertText('CustomType nothing nothing nothing');
-    $this->assertText('NotConfigured nothing nothing nothing');
+    $this->assertSession()->pageTextContains('CustomType edited ready ready');
+    $this->assertSession()->pageTextNotContains('Article current error current');
+    $this->assertSession()->pageTextNotContains('Article importing null null');
+    $this->assertSession()->pageTextNotContains('Article null null null');
+    $this->assertSession()->pageTextContains('CustomType edited current edited');
+    $this->assertSession()->pageTextContains('CustomType edited edited current');
+    $this->assertSession()->pageTextNotContains('Article error edited ready');
+    $this->assertSession()->pageTextNotContains('Article current interim ready');
+    $this->assertSession()->pageTextContains('CustomType error null null');
+    $this->assertSession()->pageTextNotContains('CustomType current current ready');
+    $this->assertSession()->pageTextContains('CustomType nothing nothing nothing');
+    $this->assertSession()->pageTextContains('NotConfigured nothing nothing nothing');
+    $this->assertSession()->pageTextNotContains('Article cancelled cancelled cancelled');
+    $this->assertSession()->pageTextNotContains('Article current request null');
+    $this->assertSession()->pageTextContains('CustomType nothing nothing nothing');
+    $this->assertSession()->pageTextContains('NotConfigured nothing nothing nothing');

     $edit = [
       'filters[advanced_options][source_status]' => 'UPLOAD_NEEDED',
@@ @@
       'filters[wrapper][bundle][]' => ['custom_type', 'not_configured'],
       'filters[advanced_options][source_language]' => 'en',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');

-    $this->assertText('CustomType edited ready ready');
-    $this->assertNoText('Article current error current');
-    $this->assertNoText('Article importing null null');
-    $this->assertNoText('Article null null null');
-    $this->assertText('CustomType edited current edited');
-    $this->assertNoText('CustomType edited edited current');
-    $this->assertNoText('Article error edited ready');
-    $this->assertNoText('Article current interim ready');
-    $this->assertText('CustomType error null null');
-    $this->assertNoText('CustomType current current ready');
-    $this->assertText('CustomType nothing nothing nothing');
-    $this->assertText('NotConfigured nothing nothing nothing');
-    $this->assertNoText('Article cancelled cancelled cancelled');
-    $this->assertNoText('Article current request null');
-    $this->assertText('CustomType nothing nothing nothing');
-    $this->assertText('NotConfigured nothing nothing nothing');
+    $this->assertSession()->pageTextContains('CustomType edited ready ready');
+    $this->assertSession()->pageTextNotContains('Article current error current');
+    $this->assertSession()->pageTextNotContains('Article importing null null');
+    $this->assertSession()->pageTextNotContains('Article null null null');
+    $this->assertSession()->pageTextContains('CustomType edited current edited');
+    $this->assertSession()->pageTextNotContains('CustomType edited edited current');
+    $this->assertSession()->pageTextNotContains('Article error edited ready');
+    $this->assertSession()->pageTextNotContains('Article current interim ready');
+    $this->assertSession()->pageTextContains('CustomType error null null');
+    $this->assertSession()->pageTextNotContains('CustomType current current ready');
+    $this->assertSession()->pageTextContains('CustomType nothing nothing nothing');
+    $this->assertSession()->pageTextContains('NotConfigured nothing nothing nothing');
+    $this->assertSession()->pageTextNotContains('Article cancelled cancelled cancelled');
+    $this->assertSession()->pageTextNotContains('Article current request null');
+    $this->assertSession()->pageTextContains('CustomType nothing nothing nothing');
+    $this->assertSession()->pageTextContains('NotConfigured nothing nothing nothing');

     $edit = [
       'filters[advanced_options][source_status]' => 'UPLOAD_NEEDED',
@@ @@
       'filters[advanced_options][source_language]' => 'en',
       'filters[advanced_options][profile][]' => ['manual', 'automatic'],
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');

-    $this->assertText('CustomType edited ready ready');
-    $this->assertNoText('Article current error current');
-    $this->assertNoText('Article importing null null');
-    $this->assertNoText('Article null null null');
-    $this->assertText('CustomType edited current edited');
-    $this->assertNoText('CustomType edited edited current');
-    $this->assertNoText('Article error edited ready');
-    $this->assertNoText('Article current interim ready');
-    $this->assertText('CustomType error null null');
-    $this->assertNoText('CustomType current current ready');
-    $this->assertNoText('CustomType nothing nothing nothing');
-    $this->assertNoText('NotConfigured nothing nothing nothing');
-    $this->assertNoText('Article cancelled cancelled cancelled');
-    $this->assertNoText('Article current request null');
-    $this->assertNoText('CustomType nothing nothing nothing');
-    $this->assertNoText('NotConfigured nothing nothing nothing');
+    $this->assertSession()->pageTextContains('CustomType edited ready ready');
+    $this->assertSession()->pageTextNotContains('Article current error current');
+    $this->assertSession()->pageTextNotContains('Article importing null null');
+    $this->assertSession()->pageTextNotContains('Article null null null');
+    $this->assertSession()->pageTextContains('CustomType edited current edited');
+    $this->assertSession()->pageTextNotContains('CustomType edited edited current');
+    $this->assertSession()->pageTextNotContains('Article error edited ready');
+    $this->assertSession()->pageTextNotContains('Article current interim ready');
+    $this->assertSession()->pageTextContains('CustomType error null null');
+    $this->assertSession()->pageTextNotContains('CustomType current current ready');
+    $this->assertSession()->pageTextNotContains('CustomType nothing nothing nothing');
+    $this->assertSession()->pageTextNotContains('NotConfigured nothing nothing nothing');
+    $this->assertSession()->pageTextNotContains('Article cancelled cancelled cancelled');
+    $this->assertSession()->pageTextNotContains('Article current request null');
+    $this->assertSession()->pageTextNotContains('CustomType nothing nothing nothing');
+    $this->assertSession()->pageTextNotContains('NotConfigured nothing nothing nothing');

     $edit = [
       'filters[advanced_options][source_status]' => 'UPLOAD_NEEDED',
@@ @@
       'filters[advanced_options][profile][]' => ['manual', 'automatic'],
       'filters[advanced_options][target_status]' => 'READY',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');

-    $this->assertText('CustomType edited ready ready');
-    $this->assertNoText('Article current error current');
-    $this->assertNoText('Article importing null null');
-    $this->assertNoText('Article null null null');
-    $this->assertNoText('CustomType edited current edited');
-    $this->assertNoText('CustomType edited edited current');
-    $this->assertNoText('Article error edited ready');
-    $this->assertNoText('Article current interim ready');
-    $this->assertNoText('CustomType error null null');
-    $this->assertNoText('CustomType current current ready');
-    $this->assertNoText('CustomType nothing nothing nothing');
-    $this->assertNoText('NotConfigured nothing nothing nothing');
-    $this->assertNoText('Article cancelled cancelled cancelled');
-    $this->assertNoText('Article current request null');
-    $this->assertNoText('CustomType nothing nothing nothing');
-    $this->assertNoText('NotConfigured nothing nothing nothing');
+    $this->assertSession()->pageTextContains('CustomType edited ready ready');
+    $this->assertSession()->pageTextNotContains('Article current error current');
+    $this->assertSession()->pageTextNotContains('Article importing null null');
+    $this->assertSession()->pageTextNotContains('Article null null null');
+    $this->assertSession()->pageTextNotContains('CustomType edited current edited');
+    $this->assertSession()->pageTextNotContains('CustomType edited edited current');
+    $this->assertSession()->pageTextNotContains('Article error edited ready');
+    $this->assertSession()->pageTextNotContains('Article current interim ready');
+    $this->assertSession()->pageTextNotContains('CustomType error null null');
+    $this->assertSession()->pageTextNotContains('CustomType current current ready');
+    $this->assertSession()->pageTextNotContains('CustomType nothing nothing nothing');
+    $this->assertSession()->pageTextNotContains('NotConfigured nothing nothing nothing');
+    $this->assertSession()->pageTextNotContains('Article cancelled cancelled cancelled');
+    $this->assertSession()->pageTextNotContains('Article current request null');
+    $this->assertSession()->pageTextNotContains('CustomType nothing nothing nothing');
+    $this->assertSession()->pageTextNotContains('NotConfigured nothing nothing nothing');
   }

   public function testTargetStatusFilterPagination() {
@@ @@
     $edit = [
       'filters[advanced_options][target_status]' => Lingotek::STATUS_CANCELLED,
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     // This ensures that pagination is working correctly with the Target Status filter.
     // If it isn't, there will be fewer than 10 nodes on the content bulk management form
-    $this->assertText('Article 10');
+    $this->assertSession()->pageTextContains('Article 10');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertIdenticalRector
 * AssertNoTextRector
 * AssertTextRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


59) modules/contrib/lingotek/tests/src/Functional/Form/LingotekMetadataEditFormTest.php:67

    ---------- begin diff ----------
@@ @@
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
     $this->saveAndPublishNodeForm($edit);
-    $this->assertUrl('/node/1', [], 'Node has been created.');
+    $this->assertSession()->addressEquals('/node/1', [], 'Node has been created.');

     // The metadata local task should not be visible.
     $assert_session->linkNotExists(t('Lingotek Metadata'));
@@ @@
    */
   public function testMetadataLocalTaskAvailable() {
     $assert_session = $this->assertSession();
+    $this->drupalGet('admin/lingotek/settings');

     // Enable debug operations.
-    $this->drupalPostForm('admin/lingotek/settings', [], 'Enable debug operations');
+    $this->submitForm([], 'Enable debug operations');

     // Create a node.
     $edit = [];
@@ @@
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
     $this->saveAndPublishNodeForm($edit);
-    $this->assertUrl('/node/1', [], 'Node has been created.');
+    $this->assertSession()->addressEquals('/node/1', [], 'Node has been created.');

     // The metadata local task should be visible.
     $this->drupalGet('/node/1');
@@ @@
    */
   public function testMetadataEditForm() {
     $assert_session = $this->assertSession();
+    $this->drupalGet('admin/lingotek/settings');

     // Enable debug operations.
-    $this->drupalPostForm('admin/lingotek/settings', [], 'Enable debug operations');
+    $this->submitForm([], 'Enable debug operations');

     // Create a node.
     $edit = [];
@@ @@
     // The metadata local task should be visible.
     $this->drupalGet('/node/1');
     $this->clickLink(t('Lingotek Metadata'));
-    $this->assertUrl('/node/1/metadata', [], 'Metadata local task enables the metadata form.');
+    $this->assertSession()->addressEquals('/node/1/metadata', [], 'Metadata local task enables the metadata form.');

     // Assert that the values are correct.
-    $this->assertFieldById('edit-lingotek-document-id', 'dummy-document-hash-id');
+    $this->assertSession()->fieldValueEquals('edit-lingotek-document-id', 'dummy-document-hash-id');
     $assert_session->optionExists('edit-lingotek-source-status', Lingotek::STATUS_IMPORTING);
     $assert_session->optionExists('edit-en', Lingotek::STATUS_IMPORTING);
     $assert_session->optionExists('edit-es', Lingotek::STATUS_REQUEST);
-    $this->assertFieldById('edit-lingotek-job-id', '');
+    $this->assertSession()->fieldValueEquals('edit-lingotek-job-id', '');
     $timestamp = \Drupal::time()->getRequestTime();
     $this->assertSession()->fieldValueEquals('verbatim_area[verbatim]', <<<JSON
 {
@@ @@
 }
 JSON
     );
-    $this->assertFieldByName('lingotek_translation_management[lingotek_translation_profile]', 'automatic');
+    $this->assertSession()->fieldValueEquals('lingotek_translation_management[lingotek_translation_profile]', 'automatic');

     $edit = [
       'lingotek_document_id' => 'another-id',
@@ @@
       'lingotek_job_id' => 'a new edited job id',
       'lingotek_translation_management[lingotek_translation_profile]' => 'manual',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save metadata');
+    $this->submitForm($edit, 'Save metadata');

     // Assert that the values are correct.
-    $this->assertFieldById('edit-lingotek-document-id', 'another-id');
+    $this->assertSession()->fieldValueEquals('edit-lingotek-document-id', 'another-id');
     // ToDo: We should avoid that an upload is triggered, even if using automatic profile.
     // $assert_session->optionExists('edit-lingotek-source-status', Lingotek::STATUS_CURRENT);
     $assert_session->optionExists('edit-lingotek-source-status', Lingotek::STATUS_UNTRACKED);
     $assert_session->optionExists('edit-en', Lingotek::STATUS_UNTRACKED);
     $assert_session->optionExists('edit-es', Lingotek::STATUS_READY);
-    $this->assertFieldById('edit-lingotek-job-id', 'a new edited job id');
+    $this->assertSession()->fieldValueEquals('edit-lingotek-job-id', 'a new edited job id');
     $this->assertSession()->fieldValueEquals('verbatim_area[verbatim]', <<<JSON
 {
     "id": [
@@ @@
 }
 JSON
     );
-    $this->assertFieldByName('lingotek_translation_management[lingotek_translation_profile]', 'manual');
+    $this->assertSession()->fieldValueEquals('lingotek_translation_management[lingotek_translation_profile]', 'manual');

     /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $configuration_service */
     $configuration_service = \Drupal::service('lingotek.configuration');
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');
     $node = Node::load(1);
     // Assert that the values are correct in the service.
-    $this->assertIdentical('another-id', $content_translation_service->getDocumentId($node));
-    $this->assertIdentical('manual', $configuration_service->getEntityProfile($node, FALSE)->id());
+    $this->assertSame('another-id', $content_translation_service->getDocumentId($node));
+    $this->assertSame('manual', $configuration_service->getEntityProfile($node, FALSE)->id());
     // ToDo: We should avoid that an upload is triggered, even if using automatic profile.
     // $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($node));
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $content_translation_service->getTargetStatus($node, 'en'));
-    $this->assertIdentical(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $content_translation_service->getTargetStatus($node, 'en'));
+    $this->assertSame(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'es'));

     $metadata = LingotekContentMetadata::load(1);
-    $this->assertIdentical('a new edited job id', $metadata->getJobId(), 'Lingotek metadata job id was saved correctly.');
+    $this->assertSame('a new edited job id', $metadata->getJobId(), 'Lingotek metadata job id was saved correctly.');
   }

   /**
@@ @@
    */
   public function testMetadataEditFormWithoutEnablingBundle() {
     $assert_session = $this->assertSession();
+    $this->drupalGet('admin/lingotek/settings');

     // Enable debug operations.
-    $this->drupalPostForm('admin/lingotek/settings', [], 'Enable debug operations');
+    $this->submitForm([], 'Enable debug operations');

     // Create a node.
     $edit = [];
@@ @@
     // The metadata local task should be visible.
     $this->drupalGet('/node/1');
     $this->clickLink(t('Lingotek Metadata'));
-    $this->assertUrl('/node/1/metadata', [], 'Metadata local task enables the metadata form.');
+    $this->assertSession()->addressEquals('/node/1/metadata', [], 'Metadata local task enables the metadata form.');

     // Assert that the values are defaults.
-    $this->assertFieldById('edit-lingotek-document-id', '');
+    $this->assertSession()->fieldValueEquals('edit-lingotek-document-id', '');
     $assert_session->optionExists('edit-lingotek-source-status', Lingotek::STATUS_UNTRACKED);
     $assert_session->optionExists('edit-en', Lingotek::STATUS_UNTRACKED);
     $assert_session->optionExists('edit-es', Lingotek::STATUS_UNTRACKED);
-    $this->assertFieldById('edit-lingotek-job-id', '');
-    $this->assertFieldByName('verbatim_area[verbatim]', 'NULL');
+    $this->assertSession()->fieldValueEquals('edit-lingotek-job-id', '');
+    $this->assertSession()->fieldValueEquals('verbatim_area[verbatim]', 'NULL');

     $edit = [
       'lingotek_document_id' => 'another-id',
@@ @@
       'es' => Lingotek::STATUS_READY,
       'lingotek_job_id' => 'a new edited job id',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save metadata');
+    $this->submitForm($edit, 'Save metadata');

     $assert_session->pageTextNotContains('Metadata saved successfully');
     $assert_session->pageTextContains('This entity cannot be managed in Lingotek. Please check your configuration.');
@@ @@

   public function testMetadataEditFormWithoutExistingMetadata() {
     $assert_session = $this->assertSession();
+    $this->drupalGet('admin/lingotek/settings');

     // Enable debug operations.
-    $this->drupalPostForm('admin/lingotek/settings', [], 'Enable debug operations');
+    $this->submitForm([], 'Enable debug operations');

     // Create a node.
     $edit = [];
@@ @@
     // The metadata local task should be visible.
     $this->drupalGet('/node/1');
     $this->clickLink(t('Lingotek Metadata'));
-    $this->assertUrl('/node/1/metadata', [], 'Metadata local task enables the metadata form.');
+    $this->assertSession()->addressEquals('/node/1/metadata', [], 'Metadata local task enables the metadata form.');

     // Assert that the values are defaults.
-    $this->assertFieldById('edit-lingotek-document-id', '');
+    $this->assertSession()->fieldValueEquals('edit-lingotek-document-id', '');
     $assert_session->optionExists('edit-lingotek-source-status', Lingotek::STATUS_UNTRACKED);
     $assert_session->optionExists('edit-en', Lingotek::STATUS_UNTRACKED);
     $assert_session->optionExists('edit-es', Lingotek::STATUS_UNTRACKED);
-    $this->assertFieldById('edit-lingotek-job-id', '');
-    $this->assertFieldByName('verbatim_area[verbatim]', 'NULL');
+    $this->assertSession()->fieldValueEquals('edit-lingotek-job-id', '');
+    $this->assertSession()->fieldValueEquals('verbatim_area[verbatim]', 'NULL');

     $edit = [
       'lingotek_document_id' => 'another-id',
@@ @@
       'es' => Lingotek::STATUS_READY,
       'lingotek_job_id' => 'a new edited job id',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save metadata');
+    $this->submitForm($edit, 'Save metadata');

     $assert_session->pageTextContains('Metadata saved successfully');

     // Assert that the values are correct.
-    $this->assertFieldById('edit-lingotek-document-id', 'another-id');
+    $this->assertSession()->fieldValueEquals('edit-lingotek-document-id', 'another-id');
     // ToDo: We should avoid that an upload is triggered, even if using automatic profile.
     // $assert_session->optionExists('edit-lingotek-source-status', Lingotek::STATUS_CURRENT);
     $assert_session->optionExists('edit-lingotek-source-status', Lingotek::STATUS_UNTRACKED);
     $assert_session->optionExists('edit-en', Lingotek::STATUS_UNTRACKED);
     $assert_session->optionExists('edit-es', Lingotek::STATUS_READY);
-    $this->assertFieldById('edit-lingotek-job-id', 'a new edited job id');
+    $this->assertSession()->fieldValueEquals('edit-lingotek-job-id', 'a new edited job id');
     $this->assertSession()->fieldValueEquals('verbatim_area[verbatim]', <<<JSON
 {
     "id": [
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');
     $node = Node::load(1);
     // Assert that the values are correct in the service.
-    $this->assertIdentical('another-id', $content_translation_service->getDocumentId($node));
+    $this->assertSame('another-id', $content_translation_service->getDocumentId($node));
     // ToDo: We should avoid that an upload is triggered, even if using automatic profile.
     // $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($node));
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $content_translation_service->getTargetStatus($node, 'en'));
-    $this->assertIdentical(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $content_translation_service->getTargetStatus($node, 'en'));
+    $this->assertSame(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'es'));

     $metadata = LingotekContentMetadata::load(1);
-    $this->assertIdentical('a new edited job id', $metadata->getJobId(), 'Lingotek metadata job id was saved correctly.');
+    $this->assertSame('a new edited job id', $metadata->getJobId(), 'Lingotek metadata job id was saved correctly.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByIdRector
 * AssertFieldByNameRector
 * AssertIdenticalRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


60) modules/contrib/lingotek/tests/src/Functional/Form/LingotekMediaBulkFormTest.php:82

    ---------- begin diff ----------
@@ @@
     $edit['langcode[0][value]'] = 'en';
     $edit['files[field_media_image_0]'] = \Drupal::service('file_system')
       ->realpath($test_image->uri);
+    $this->drupalGet('media/add/image');

-    $this->drupalPostForm('media/add/image', $edit, 'field_media_image_0_upload_button');
+    $this->submitForm($edit, 'field_media_image_0_upload_button');

     unset($edit['files[field_media_image_0]']);
     $edit['field_media_image[0][alt]'] = 'Llamas are cool';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->goToContentBulkManagementForm('media');

-    $this->assertText('Thumbnail');
+    $this->assertSession()->pageTextContains('Thumbnail');
     $elements = $this->xpath("//img[@alt='Llamas are cool']");
-    $this->assertEqual(1, count($elements), "Found thumbnail.");
+    $this->assertEquals(1, count($elements), "Found thumbnail.");
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


61) modules/contrib/lingotek/tests/src/Functional/Form/LingotekLanguageContentSettingsFormTest.php:47

    ---------- begin diff ----------
@@ @@
   public function testLingotekMetadataFieldNotPresent() {
     $this->drupalGet('admin/config/regional/content-language');

-    $this->assertNoText('Lingotek translation source');
-    $this->assertNoText('Lingotek metadata');
+    $this->assertSession()->pageTextNotContains('Lingotek translation source');
+    $this->assertSession()->pageTextNotContains('Lingotek metadata');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


62) modules/contrib/lingotek/tests/src/Functional/Form/LingotekConnectTest.php:40

    ---------- begin diff ----------
@@ @@

     $this->drupalGet('admin/lingotek/setup/account');
     $this->clickLink('Connect Lingotek Account');
-    $this->drupalPostForm(NULL, ['community' => 'test_community'], 'Next');
-    $this->assertText('The configuration options have been saved.');
+    $this->submitForm(['community' => 'test_community'], 'Next');
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');

     // Assert there are options for workflows.
-    $this->assertFieldByName('workflow');
+    $this->assertSession()->fieldExists('workflow');
     $option_field = $assert_session->optionExists('edit-workflow', '- Select -');
     $this->assertTrue($option_field->hasAttribute('selected'));
     $assert_session->optionExists('edit-workflow', 'test_workflow');
@@ @@
     $assert_session->optionExists('edit-workflow', 'test_workflow2');

     // Assert there are options for filters.
-    $this->assertFieldByName('filter');
+    $this->assertSession()->fieldExists('filter');
     $option_field = $assert_session->optionExists('edit-filter', 'drupal_default');
     $this->assertTrue($option_field->hasAttribute('selected'));
     $assert_session->optionExists('edit-filter', 'project_default');
@@ @@
     $assert_session->optionExists('edit-filter', 'test_filter2');
     $assert_session->optionExists('edit-filter', 'test_filter3');

-    $this->assertFieldByName('subfilter');
+    $this->assertSession()->fieldExists('subfilter');
     $option_field = $assert_session->optionExists('edit-subfilter', 'drupal_default');
     $this->assertTrue($option_field->hasAttribute('selected'));
     $assert_session->optionExists('edit-subfilter', 'project_default');
@@ @@
     $assert_session->optionExists('edit-subfilter', 'test_filter2');
     $assert_session->optionExists('edit-subfilter', 'test_filter3');

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'project' => 'test_project',
       'vault' => 'test_vault',
       'workflow' => 'test_workflow',
@@ @@
       'filter' => 'drupal_default',
       'subfilter' => 'drupal_default',
     ], 'Save configuration');
-    $this->assertText('The configuration options have been saved.');
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
   }

   /**
@@ @@

     $this->drupalGet('admin/lingotek/setup/account');
     $this->clickLink('Connect Lingotek Account');
-    $this->drupalPostForm(NULL, ['community' => 'test_community'], 'Next');
-    $this->assertText('The configuration options have been saved.');
+    $this->submitForm(['community' => 'test_community'], 'Next');
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');

     // Assert there are options for workflows.
-    $this->assertFieldByName('workflow');
+    $this->assertSession()->fieldExists('workflow');
     $option_field = $assert_session->optionExists('edit-workflow', '- Select -');
     $this->assertTrue($option_field->hasAttribute('selected'));
     $assert_session->optionExists('edit-workflow', 'test_workflow');
@@ @@
     $assert_session->optionExists('edit-workflow', 'test_workflow2');

     // Assert there are no options for filters and no select.
-    $this->assertNoFieldByName('filter');
-    $this->assertNoFieldByName('subfilter');
+    $this->assertSession()->fieldValueNotEquals('filter', '');
+    $this->assertSession()->fieldValueNotEquals('subfilter', '');

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'project' => 'test_project',
       'workflow' => 'test_workflow',
       'vault' => 'test_vault',
     ], 'Save configuration');
-    $this->assertText('The configuration options have been saved.');
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


63) modules/contrib/lingotek/tests/src/Functional/Form/LingotekConfigBulkFormTest.php:62

    ---------- begin diff ----------
@@ @@
     // Assert that there is a "Bundle" header on the second position.
     // First position is the checkbox, that's why we care about the second.
     $second_header = $this->xpath('//*[@id="edit-table"]/thead/tr/th[2]')[0];
-    $this->assertEqual($second_header->getHtml(), 'Entity', 'There is a Entity header.');
+    $this->assertEquals($second_header->getHtml(), 'Entity', 'There is a Entity header.');
   }

   /**
@@ @@

     // Let's filter by node fields.
     $edit = ['filters[wrapper][bundle]' => 'node_fields'];
-    $this->drupalPostForm(NULL, $edit, t('Filter'));
+    $this->submitForm($edit, t('Filter'));

     // Assert that there is a "Bundle" header on the second position.
     // First position is the checkbox, that's why we care about the second.
     $second_header = $this->xpath('//*[@id="edit-table"]/thead/tr/th[2]/a')[0];
-    $this->assertEqual($second_header->getHtml(), 'Bundle', 'There is a Bundle header.');
+    $this->assertEquals($second_header->getHtml(), 'Bundle', 'There is a Bundle header.');

     $third_header = $this->xpath('//*[@id="edit-table"]/thead/tr/th[3]/a')[0];
-    $this->assertEqual($third_header->getHtml(), 'Entity', 'There is a Entity header.');
+    $this->assertEquals($third_header->getHtml(), 'Entity', 'There is a Entity header.');

     // Assert that there is a bundle printed with the Body field, and by that
     // Body must be appear twice.
@@ @@
       'job_id' => 'my_custom_job_id',
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $this->assertEquals('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
     $this->assertEquals('my_custom_job_id', \Drupal::state()->get('lingotek.uploaded_job_id'));

@@ @@
       $this->assertEquals('my_custom_job_id', $metadata->getJobId(), 'The job id was saved along with metadata.');
     }
     // The column for Job ID exists and there are values.
-    $this->assertText('Job ID');
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('Job ID');
+    $this->assertSession()->pageTextContains('my_custom_job_id');
   }

   /**
@@ @@
       'job_id' => 'my_custom_job_id',
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $this->assertEquals('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
     $this->assertEquals('my_custom_job_id', \Drupal::state()->get('lingotek.uploaded_job_id'));

@@ @@
       $this->assertEquals('my_custom_job_id', $metadata->getJobId(), 'The job id was saved along with metadata.');
     }
     // The column for Job ID exists and there are values.
-    $this->assertText('Job ID');
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('Job ID');
+    $this->assertSession()->pageTextContains('my_custom_job_id');
   }

   /**
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no upload.
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_title'));
@@ @@
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is displayed.
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');

     // And the job id is used on upload.
     $this->clickLink('EN');

-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');
     // Check that the job id used was the right one.
     \Drupal::state()->resetCache();
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');

     // If we update the job ID without notification to the TMS, no update happens.
     $edit = [
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'other_job_id',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no upload.
     \Drupal::state()->resetCache();
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no update, because there are no document ids.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is displayed.
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');

     // And the job id is used on upload.
     $this->clickLink('EN');

-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');
     // Check that the job id used was the right one.
     \Drupal::state()->resetCache();
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');

     // If we update the job ID with notification to the TMS, an update happens.
     $edit = [
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'other_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is an update.
     \Drupal::state()->resetCache();
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_title'));
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_content'));
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'other_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'other_job_id');
   }

   /**
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no update, because there are no document ids.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is displayed.
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');

     // And the job id is used on upload.
     $this->clickLink('EN');

-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');
     // Check that the job id used was the right one.
     \Drupal::state()->resetCache();
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', TRUE);
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'other_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Document node_type Article was not found. Please upload again.');
-    $this->assertText('Job ID for some config failed to sync to the TMS.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Document node_type Article was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Job ID for some config failed to sync to the TMS.');

     // There is no update.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertEquals('my_custom_job_id', \Drupal::state()->get('lingotek.uploaded_job_id'));

     // But it was saved for future uploads.
-    $this->assertNoText('my_custom_job_id');
-    $this->assertText('other_job_id');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id');
+    $this->assertSession()->pageTextContains('other_job_id');
   }

   /**
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no update, because there are no document ids.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is displayed.
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');

     // And the job id is used on upload.
     $this->clickLink('EN');

-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');
     // Check that the job id used was the right one.
     \Drupal::state()->resetCache();
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', TRUE);
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'other_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Document node_type Article has been archived. Please upload again.');
-    $this->assertText('Job ID for some config failed to sync to the TMS.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Document node_type Article has been archived. Please upload again.');
+    $this->assertSession()->pageTextContains('Job ID for some config failed to sync to the TMS.');

     // There is no update.
     \Drupal::state()->resetCache();
     $this->assertEquals('my_custom_job_id', \Drupal::state()->get('lingotek.uploaded_job_id'));

-    $this->assertText('my_custom_job_id');
-    $this->assertText('other_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');
+    $this->assertSession()->pageTextContains('other_job_id');
   }

   /**
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no update, because there are no document ids.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is displayed.
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');

     // And the job id is used on upload.
     $this->clickLink('EN');

-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');
     // Check that the job id used was the right one.
     \Drupal::state()->resetCache();
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', TRUE);
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'other_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Document node_type Article has a new version. The document id has been updated for all future interactions. Please try again.');
-    $this->assertText('Job ID for some config failed to sync to the TMS.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Document node_type Article has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Job ID for some config failed to sync to the TMS.');

     // There is no update.
     \Drupal::state()->resetCache();
     $this->assertEquals('my_custom_job_id', \Drupal::state()->get('lingotek.uploaded_job_id'));

-    $this->assertText('my_custom_job_id');
-    $this->assertText('other_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');
+    $this->assertSession()->pageTextContains('other_job_id');
   }

   /**
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no update, because there are no document ids.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is displayed.
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');

     // And the job id is used on upload.
     $this->clickLink('EN');

-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');
     // Check that the job id used was the right one.
     \Drupal::state()->resetCache();
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', TRUE);
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'other_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
-    $this->assertText('Job ID for some config failed to sync to the TMS.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Job ID for some config failed to sync to the TMS.');

     // There is no update.
     \Drupal::state()->resetCache();
     $this->assertEquals('my_custom_job_id', \Drupal::state()->get('lingotek.uploaded_job_id'));

-    $this->assertText('my_custom_job_id');
-    $this->assertText('other_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');
+    $this->assertSession()->pageTextContains('other_job_id');
   }

   /**
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no update, because there are no document ids.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is displayed.
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');

     // And the job id is used on upload.
     $this->clickLink('EN');

-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');
     // Check that the job id used was the right one.
     \Drupal::state()->resetCache();
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_update', TRUE);
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'other_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
-    $this->assertText('Job ID for some config failed to sync to the TMS.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Job ID for some config failed to sync to the TMS.');

     // There is no update.
     \Drupal::state()->resetCache();
     $this->assertEquals('my_custom_job_id', \Drupal::state()->get('lingotek.uploaded_job_id'));

-    $this->assertText('my_custom_job_id');
-    $this->assertText('other_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');
+    $this->assertSession()->pageTextContains('other_job_id');
   }

   /**
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no update, because there are no document ids.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is displayed.
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');

     // And the job id is used on upload.
     $this->clickLink('EN');

-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');
     // Check that the job id used was the right one.
     \Drupal::state()->resetCache();
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_error_in_upload', TRUE);
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'other_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('The Job ID change submission for node_type Article failed. Please try again.');
-    $this->assertText('Job ID for some config failed to sync to the TMS.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('The Job ID change submission for node_type Article failed. Please try again.');
+    $this->assertSession()->pageTextContains('Job ID for some config failed to sync to the TMS.');

     // There is no update.
     \Drupal::state()->resetCache();
     $this->assertEquals('my_custom_job_id', \Drupal::state()->get('lingotek.uploaded_job_id'));

-    $this->assertText('my_custom_job_id');
-    $this->assertText('other_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');
+    $this->assertSession()->pageTextContains('other_job_id');
   }

   /**
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'job_id' => 'my\invalid\id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('The job ID name cannot contain invalid chars as "/" or "\".');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('The job ID name cannot contain invalid chars as "/" or "\".');

     // There is no update, because it's not valid.
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));
@@ @@
       'job_id' => 'my/invalid/id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('The job ID name cannot contain invalid chars as "/" or "\".');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('The job ID name cannot contain invalid chars as "/" or "\".');

     // There is no update, because it's not valid.
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Article content type');
-    $this->assertNoText('Page content type');
-    $this->drupalPostForm(NULL, [], 'Cancel');
+    $this->assertSession()->pageTextContains('Article content type');
+    $this->assertSession()->pageTextNotContains('Page content type');
+    $this->submitForm([], 'Cancel');

     $edit = [
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertNoText('Article content type');
-    $this->assertText('Page content type');
+    $this->assertSession()->pageTextNotContains('Article content type');
+    $this->assertSession()->pageTextContains('Page content type');
   }

   /**
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Article content type');
-    $this->assertNoText('Page content type');
+    $this->assertSession()->pageTextContains('Article content type');
+    $this->assertSession()->pageTextNotContains('Page content type');

     $this->goToConfigBulkManagementForm('node_type');

@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertNoText('Article content type');
-    $this->assertText('Page content type');
+    $this->assertSession()->pageTextNotContains('Article content type');
+    $this->assertSession()->pageTextContains('Page content type');
   }

   /**
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_1',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     $edit = [
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_2',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // The job id is displayed.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextContains('my_custom_job_id_2');

     $edit = [
       'table[article]' => TRUE,
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForClearJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->drupalPostForm(NULL, [], 'Clear Job ID');
-    $this->assertText('Job ID was cleared successfully.');
+    $this->submitForm([], 'Clear Job ID');
+    $this->assertSession()->pageTextContains('Job ID was cleared successfully.');

     // There is no upload.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertEquals('my_custom_job_id_1', \Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is gone.
-    $this->assertNoText('my_custom_job_id_1');
-    $this->assertNoText('my_custom_job_id_2');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_2');
   }

   /**
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_1',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     $edit = [
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_2',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // The job id is displayed.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextContains('my_custom_job_id_2');

     $edit = [
       'table[article]' => TRUE,
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForClearJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->drupalPostForm(NULL, ['update_tms' => 1], 'Clear Job ID');
-    $this->assertText('Job ID was cleared successfully.');
+    $this->submitForm(['update_tms' => 1], 'Clear Job ID');
+    $this->assertSession()->pageTextContains('Job ID was cleared successfully.');

     // There is an update with empty job id.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertEquals('', \Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is gone.
-    $this->assertNoText('my_custom_job_id_1');
-    $this->assertNoText('my_custom_job_id_2');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_2');
   }

   /**
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_1',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     $edit = [
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_2',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // The job id is displayed.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextContains('my_custom_job_id_2');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_error_in_upload', TRUE);
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForClearJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->drupalPostForm(NULL, ['update_tms' => 1], 'Clear Job ID');
-    $this->assertText('The Job ID change submission for node_type Article failed. Please try again.');
-    $this->assertText('Job ID for some config failed to sync to the TMS.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm(['update_tms' => 1], 'Clear Job ID');
+    $this->assertSession()->pageTextContains('The Job ID change submission for node_type Article failed. Please try again.');
+    $this->assertSession()->pageTextContains('Job ID for some config failed to sync to the TMS.');

     // There is an update with empty job id.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertEquals('my_custom_job_id_1', \Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is gone.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertNoText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_2');
   }

   /**
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_1',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     $edit = [
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_2',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // The job id is displayed.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextContains('my_custom_job_id_2');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', TRUE);
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForClearJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->drupalPostForm(NULL, ['update_tms' => 1], 'Clear Job ID');
-    $this->assertText('Document node_type Article has been archived. Please upload again.');
-    $this->assertText('Job ID for some config failed to sync to the TMS.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm(['update_tms' => 1], 'Clear Job ID');
+    $this->assertSession()->pageTextContains('Document node_type Article has been archived. Please upload again.');
+    $this->assertSession()->pageTextContains('Job ID for some config failed to sync to the TMS.');

     // There is an update with empty job id.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertEquals('my_custom_job_id_1', \Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is gone.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertNoText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_2');
   }

   /**
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_1',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     $edit = [
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_2',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // The job id is displayed.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextContains('my_custom_job_id_2');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', TRUE);
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForClearJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->drupalPostForm(NULL, ['update_tms' => 1], 'Clear Job ID');
-    $this->assertText('Document node_type Article has a new version. The document id has been updated for all future interactions. Please try again.');
-    $this->assertText('Job ID for some config failed to sync to the TMS.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm(['update_tms' => 1], 'Clear Job ID');
+    $this->assertSession()->pageTextContains('Document node_type Article has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Job ID for some config failed to sync to the TMS.');

     // There is an update with empty job id.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertEquals('my_custom_job_id_1', \Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is gone.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertNoText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_2');
   }

   /**
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_1',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     $edit = [
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_2',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // The job id is displayed.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextContains('my_custom_job_id_2');

     // If we update the job ID with notification to the TMS, an update happens.
     \Drupal::state()->set('lingotek.must_error_in_upload', TRUE);
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForClearJobId('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->drupalPostForm(NULL, ['update_tms' => 1], 'Clear Job ID');
-    $this->assertText('The Job ID change submission for node_type Article failed. Please try again.');
-    $this->assertText('Job ID for some config failed to sync to the TMS.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm(['update_tms' => 1], 'Clear Job ID');
+    $this->assertSession()->pageTextContains('The Job ID change submission for node_type Article failed. Please try again.');
+    $this->assertSession()->pageTextContains('Job ID for some config failed to sync to the TMS.');

     // There is an update with empty job id.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertEquals('my_custom_job_id_1', \Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is gone.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertNoText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_2');
   }

   /**
@@ @@
     }

     $this->goToConfigBulkManagementForm('node_type');
-    $this->assertNoText('No content available');
+    $this->assertSession()->pageTextNotContains('No content available');

     // After we filter by an unexisting job, there is no content and no rows.
     $edit = [
       'filters[wrapper][job]' => 'this job does not exist',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
-    $this->assertText('No content available');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
+    $this->assertSession()->pageTextContains('No content available');

     // After we reset, we get back to having all the content.
-    $this->drupalPostForm(NULL, [], 'Reset');
+    $this->submitForm([], 'Reset');
     $this->goToConfigBulkManagementForm('node_type');
     foreach (range(1, 9) as $j) {
-      $this->assertText('Content Type ' . $indexes[$j]);
+      $this->assertSession()->pageTextContains('Content Type ' . $indexes[$j]);
     }

     // I can init the upload of content.
@@ @@
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
       'job_id' => 'even numbers',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'table[content_type_1]' => TRUE,
@@ @@
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
       'job_id' => 'prime numbers',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // After we filter by prime, there is no pager and the rows
     // selected are the ones expected.
@@ @@
     $edit = [
       'filters[wrapper][job]' => 'prime',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([1, 2, 3, 5, 7] as $j) {
-      $this->assertText('Content Type ' . $indexes[$j]);
+      $this->assertSession()->pageTextContains('Content Type ' . $indexes[$j]);
     }
-    $this->assertNoText('Content Type ' . $indexes[4]);
-    $this->assertNoText('Content Type ' . $indexes[6]);
+    $this->assertSession()->pageTextNotContains('Content Type ' . $indexes[4]);
+    $this->assertSession()->pageTextNotContains('Content Type ' . $indexes[6]);

     // After we filter by even, there is no pager and the rows selected are the
     // ones expected.
@@ @@
     $edit = [
       'filters[wrapper][job]' => 'even',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([4, 6, 8] as $j) {
-      $this->assertText('Content Type ' . $indexes[$j]);
+      $this->assertSession()->pageTextContains('Content Type ' . $indexes[$j]);
     }
-    $this->assertNoText('Content Type ' . $indexes[5]);
+    $this->assertSession()->pageTextNotContains('Content Type ' . $indexes[5]);

     // After we reset, we get back to having all the content.
-    $this->drupalPostForm(NULL, [], 'Reset');
+    $this->submitForm([], 'Reset');
     $this->goToConfigBulkManagementForm('node_type');
     foreach (range(1, 9) as $j) {
-      $this->assertText('Content Type ' . $indexes[$j]);
+      $this->assertSession()->pageTextContains('Content Type ' . $indexes[$j]);
     }
   }

@@ @@
     $assert_session = $this->assertSession();

     $this->goToConfigBulkManagementForm();
-    $this->assertNoField('filters[wrapper][label]');
+    $this->assertSession()->fieldNotExists('filters[wrapper][label]');

     \Drupal::configFactory()->getEditable('lingotek.settings')->set('translate.config.node_type.profile', 'manual')->save();

@@ @@
     }

     $this->goToConfigBulkManagementForm('node_type');
-    $this->assertField('filters[wrapper][label]');
-    $this->assertNoText('No content available');
+    $this->assertSession()->fieldExists('filters[wrapper][label]');
+    $this->assertSession()->pageTextNotContains('No content available');

     // After we filter by an unexisting label, there is no content and no rows.
     $edit = [
       'filters[wrapper][label]' => 'this label does not exist',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
-    $this->assertText('No content available');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
+    $this->assertSession()->pageTextContains('No content available');

     // After we reset, we get back to having all the content.
-    $this->drupalPostForm(NULL, [], 'Reset');
+    $this->submitForm([], 'Reset');
     $this->goToConfigBulkManagementForm('node_type');
     foreach (range(1, 9) as $j) {
-      $this->assertText('Content Type ' . $indexes[$j]);
+      $this->assertSession()->pageTextContains('Content Type ' . $indexes[$j]);
     }

     // After we filter by prime, there is no pager and the rows
@@ @@
     $edit = [
       'filters[wrapper][label]' => 'even',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([1, 3, 5, 7, 9] as $j) {
-      $this->assertText('Content Type ' . $indexes[$j]);
+      $this->assertSession()->pageTextContains('Content Type ' . $indexes[$j]);
     }
-    $this->assertNoText('Content Type ' . $indexes[2]);
-    $this->assertNoText('Content Type ' . $indexes[4]);
-    $this->assertNoText('Content Type ' . $indexes[6]);
+    $this->assertSession()->pageTextNotContains('Content Type ' . $indexes[2]);
+    $this->assertSession()->pageTextNotContains('Content Type ' . $indexes[4]);
+    $this->assertSession()->pageTextNotContains('Content Type ' . $indexes[6]);

     // After we filter by even, there is no pager and the rows selected are the
     // ones expected.
@@ @@
     $edit = [
       'filters[wrapper][label]' => 'odd',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([2, 4, 6, 8] as $j) {
-      $this->assertText('Content Type ' . $indexes[$j]);
+      $this->assertSession()->pageTextContains('Content Type ' . $indexes[$j]);
     }
-    $this->assertNoText('Content Type ' . $indexes[1]);
-    $this->assertNoText('Content Type ' . $indexes[3]);
-    $this->assertNoText('Content Type ' . $indexes[5]);
+    $this->assertSession()->pageTextNotContains('Content Type ' . $indexes[1]);
+    $this->assertSession()->pageTextNotContains('Content Type ' . $indexes[3]);
+    $this->assertSession()->pageTextNotContains('Content Type ' . $indexes[5]);

     // After we reset, we get back to having all the content.
-    $this->drupalPostForm(NULL, [], 'Reset');
+    $this->submitForm([], 'Reset');
     $this->goToConfigBulkManagementForm('node_type');
     foreach (range(1, 9) as $j) {
-      $this->assertText('Content Type ' . $indexes[$j]);
+      $this->assertSession()->pageTextContains('Content Type ' . $indexes[$j]);
     }
     // If we filter with extra spaces, we still show configs.
     $edit = [
       'filters[wrapper][label]' => '  even   ',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-filters-actions-submit');
+    $this->submitForm($edit, 'edit-filters-actions-submit');
     foreach ([1, 3, 5, 7, 9] as $j) {
-      $this->assertText('Content Type ' . $indexes[$j]);
+      $this->assertSession()->pageTextContains('Content Type ' . $indexes[$j]);
     }
-    $this->assertFieldByName('filters[wrapper][label]', 'even', 'The value is trimmed in the filter.');
+    $this->assertSession()->fieldValueEquals('filters[wrapper][label]', 'even');
   }

   /**
@@ @@
     $assert_session = $this->assertSession();

     $this->goToConfigBulkManagementForm();
-    $this->assertText('System maintenance');
+    $this->assertSession()->pageTextContains('System maintenance');
     $assert_session->linkNotExists('System maintenance');

     $this->goToConfigBulkManagementForm('configurable_language');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertFieldRector
 * AssertIdenticalRector
 * AssertNoFieldRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


64) modules/contrib/lingotek/tests/src/Functional/Form/LingotekAccountFormTest.php:17

    ---------- begin diff ----------
@@ @@
     $this->drupalGet('admin/lingotek/settings');

     $xpath = $this->xpath('//details[@data-drupal-selector="edit-account"]//tr[@data-drupal-selector="edit-account-table-status-row"]//td[text()="Active"]');
-    $this->assertIdentical(1, count($xpath), 'Status indicator found');
+    $this->assertSame(1, count($xpath), 'Status indicator found');

     $xpath = $this->xpath('//details[@data-drupal-selector="edit-account"]//tr[@data-drupal-selector="edit-account-table-plan-row"]//td[text()="No"]');
-    $this->assertIdentical(1, count($xpath), 'Enterprise plan indicator found');
+    $this->assertSame(1, count($xpath), 'Enterprise plan indicator found');

     $xpath = $this->xpath('//details[@data-drupal-selector="edit-account"]//tr[@data-drupal-selector="edit-account-table-activation-row"]//td[text()="testUser@example.com"]');
-    $this->assertIdentical(1, count($xpath), 'Activation Name found');
+    $this->assertSame(1, count($xpath), 'Activation Name found');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


65) modules/contrib/lingotek/tests/src/Functional/Form/LingotekAccountDisconnectFormTest.php:16

    ---------- begin diff ----------
@@ @@
   public function testAccountDisconnect() {
     // We try to disconnect from an already connected account.
     $this->drupalGet('admin/lingotek/settings');
-    $this->drupalPostForm(NULL, [], t('Disconnect'), [], 'lingoteksettings-tab-account-form');
+    $this->submitForm([], t('Disconnect'), 'lingoteksettings-tab-account-form');

     \Drupal::state()->set('must_remain_disconnected', TRUE);

     // We need to confirm disconnection.
-    $this->drupalPostForm(NULL, [], t('Disconnect'));
+    $this->submitForm([], t('Disconnect'));

     // We have been redirected to the account connection form.
-    $this->assertUrl('/admin/lingotek/setup/account');
+    $this->assertSession()->addressEquals('/admin/lingotek/setup/account');

     // We don't have an account anymore.
     $lingotek_config = \Drupal::config('lingotek.settings');
    ----------- end diff -----------

Applied rules:
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


66) modules/contrib/lingotek/tests/src/Functional/Form/LanguageFormTest.php:47

    ---------- begin diff ----------
@@ @@
     $edit = [
       'predefined_langcode' => 'de',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add language');
+    $this->submitForm($edit, 'Add language');

     // Click on edit for German.
     $this->clickLink('Edit', 1);

     // Assert that the locale is correct.
-    $this->assertFieldByName('lingotek_locale', 'de-DE', 'The Lingotek locale is set correctly.');
+    $this->assertSession()->fieldValueEquals('lingotek_locale', 'de-DE');
   }

   /**
@@ @@
     $this->clickLink('Edit', 1);

     // Assert that the locale is correct.
-    $this->assertFieldByName('lingotek_locale', 'de-DE', 'The Lingotek locale is set correctly.');
-    $this->drupalPostForm(NULL, ['name' => 'German (Germany)'], 'Save language');
-    $this->assertText('German (Germany)');
+    $this->assertSession()->fieldValueEquals('lingotek_locale', 'de-DE');
+    $this->submitForm(['name' => 'German (Germany)'], 'Save language');
+    $this->assertSession()->pageTextContains('German (Germany)');
   }

   /**
@@ @@
     $this->clickLink('Edit', 1);

     // Assert that the locale is correct.
-    $this->assertFieldByName('lingotek_locale', 'de-DE', 'The Lingotek locale is set correctly.');
-    $this->drupalPostForm(NULL, ['name' => 'German (Germany)'], 'Save language');
-    $this->assertText('German (Germany)');
-    $this->assertText("The Lingotek locale has not been validated.");
+    $this->assertSession()->fieldValueEquals('lingotek_locale', 'de-DE');
+    $this->submitForm(['name' => 'German (Germany)'], 'Save language');
+    $this->assertSession()->pageTextContains('German (Germany)');
+    $this->assertSession()->pageTextContains("The Lingotek locale has not been validated.");
   }

   /**
@@ @@
   public function testAddingCustomLanguage() {
     // Check that there is a select for locales.
     $this->drupalGet('admin/config/regional/language/add');
-    $this->assertField('lingotek_locale', 'There is a field for adding the Lingotek locale.');
+    $this->assertSession()->fieldExists('lingotek_locale', 'There is a field for adding the Lingotek locale.');

     // Assert that the locale is empty.
-    $this->assertFieldByName('lingotek_locale', '', 'The Lingotek locale is empty by default.');
+    $this->assertSession()->fieldValueEquals('lingotek_locale', '');
     // The Lingotek locale is enabled by default.
     $this->getSession()->getPage()->hasUncheckedField('lingotek_disabled');

@@ @@
       'direction' => 'ltr',
       'lingotek_locale' => 'es-ES',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add custom language');
-    $this->assertText('The language Spanish (Germany) has been created and can now be used.');
+    $this->submitForm($edit, 'Add custom language');
+    $this->assertSession()->pageTextContains('The language Spanish (Germany) has been created and can now be used.');

     // Ensure the language is created and with the right locale.
     $language = ConfigurableLanguage::load('es-DE');
-    $this->assertEqual('es_ES', $language->getThirdPartySetting('lingotek', 'locale'), 'The Lingotek locale has been saved successfully.');
+    $this->assertEquals('es_ES', $language->getThirdPartySetting('lingotek', 'locale'), 'The Lingotek locale has been saved successfully.');

     // Ensure the locale and langcode are correctly mapped.
     /** @var LanguageLocaleMapperInterface $locale_mapper */
     $locale_mapper = \Drupal::service('lingotek.language_locale_mapper');
-    $this->assertEqual('es_ES', $locale_mapper->getLocaleForLangcode('es-DE'), 'The language locale mapper correctly guesses the locale.');
-    $this->assertEqual('es-DE', $locale_mapper->getConfigurableLanguageForLocale('es_ES')->getId(), 'The language locale mapper correctly guesses the langcode.');
+    $this->assertEquals('es_ES', $locale_mapper->getLocaleForLangcode('es-DE'), 'The language locale mapper correctly guesses the locale.');
+    $this->assertEquals('es-DE', $locale_mapper->getConfigurableLanguageForLocale('es_ES')->getId(), 'The language locale mapper correctly guesses the langcode.');
   }

   /**
@@ @@
     $edit = [
       'lingotek_disabled' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save language');
+    $this->submitForm($edit, 'Save language');

     // Ensure the language is disabled.
     $language = ConfigurableLanguage::load('es-DE');
@@ @@
     $edit = [
       'lingotek_disabled' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save language');
+    $this->submitForm($edit, 'Save language');

     // Ensure the language is disabled.
     $language = ConfigurableLanguage::load('de-at');
@@ @@
     $this->clickLink('Edit', 1);

     // Assert that the locale is correct.
-    $this->assertFieldByName('lingotek_locale', 'de-AT', 'The Lingotek locale is set to the right language.');
+    $this->assertSession()->fieldValueEquals('lingotek_locale', 'de-AT');

     // Edit the locale.
     $edit = ['lingotek_locale' => 'de-DE'];
-    $this->drupalPostForm(NULL, $edit, 'Save language');
+    $this->submitForm($edit, 'Save language');

     // Click again on edit for German (AT).
     $this->clickLink('Edit', 1);
     // Assert that the locale is correct.
-    $this->assertFieldByName('lingotek_locale', 'de-DE', 'The Lingotek locale is set to the right language after editing.');
+    $this->assertSession()->fieldValueEquals('lingotek_locale', 'de-DE');
   }

   /**
@@ @@
     $this->clickLink('Edit', 1);

     // Assert that the locale is correct.
-    $this->assertFieldByName('lingotek_locale', 'de-AT', 'The Lingotek locale is set to the right language.');
+    $this->assertSession()->fieldValueEquals('lingotek_locale', 'de-AT');

     // Edit the locale.
     $edit = ['lingotek_locale' => 'de-IN'];
-    $this->drupalPostForm(NULL, $edit, 'Save language');
-    $this->assertText('The Lingotek locale de-IN does not exist.');
+    $this->submitForm($edit, 'Save language');
+    $this->assertSession()->pageTextContains('The Lingotek locale de-IN does not exist.');
   }

   /**
@@ @@
     $this->clickLink('Edit', 1);

     // Assert that the locale is correct.
-    $this->assertFieldByName('lingotek_locale', 'de-AT', 'The Lingotek locale is set to the right language.');
+    $this->assertSession()->fieldValueEquals('lingotek_locale', 'de-AT');

     // Edit the locale.
     $edit = ['lingotek_locale' => 'de_AT'];
-    $this->drupalPostForm(NULL, $edit, 'Save language');
+    $this->submitForm($edit, 'Save language');

     // Click on edit for German (AT).
     $this->clickLink('Edit', 1);

     // Assert that the locale is correct.
-    $this->assertFieldByName('lingotek_locale', 'de-AT', 'The Lingotek locale is set to the right language.');
+    $this->assertSession()->fieldValueEquals('lingotek_locale', 'de-AT');
   }

   /**
@@ @@
     $this->clickLink('Edit', 1);

     // Make sure that the autocomplete library is added.
-    $this->assertRaw('core/misc/autocomplete.js');
+    $this->assertSession()->responseContains('core/misc/autocomplete.js');

     // Assert that the locale is correct.
-    $this->assertFieldByName('lingotek_locale', 'de-DE', 'The Lingotek locale is set correctly.');
+    $this->assertSession()->fieldValueEquals('lingotek_locale', 'de-DE');

     // Check the autocomplete route.
     $result = $this->xpath('//input[@name="lingotek_locale" and contains(@data-autocomplete-path, "admin/lingotek/supported-locales-autocomplete")]');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertFieldRector
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


67) modules/contrib/lingotek/tests/src/Functional/FieldFormatters/LingotekTranslationStatusesFormatterTest.php:66

    ---------- begin diff ----------
@@ @@
     $this->assertSession()->responseNotContains('Lingotek translation status');

     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/add_target/dummy-document-hash-id/de_DE?destination=" . $basepath . "/metadata/1' and @class='language-icon target-request' and @title='German - Request translation' and text()='DE']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');

     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/add_target/dummy-document-hash-id/es_MX?destination=" . $basepath . "/metadata/1' and @class='language-icon target-request' and @title='Spanish - Request translation' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
   }

   public function testStatusForMissingLanguage() {
@@ @@
     $this->assertSession()->responseNotContains('Lingotek translation status');

     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/add_target/dummy-document-hash-id/de_DE?destination=" . $basepath . "/metadata/1' and @class='language-icon target-request' and @title='German - Request translation' and text()='DE']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');

     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/add_target/dummy-document-hash-id/es_MX?destination=" . $basepath . "/metadata/1' and @class='language-icon target-request' and @title='Spanish - Request translation' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


68) modules/contrib/lingotek/tests/src/Functional/FieldFormatters/LingotekTranslationStatusFormatterTest.php:67

    ---------- begin diff ----------
@@ @@
     $assert_session->responseContains('Lingotek translation status');

     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/add_target/dummy-document-hash-id/es_MX?destination=" . $basepath . "/metadata/1' and @class='language-icon target-request' and @title='Spanish - Request translation' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
   }

   public function testStatusForMissingLanguage() {
@@ @@
     $assert_session->responseContains('Lingotek translation status');

     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/add_target/dummy-document-hash-id/es_MX?destination=" . $basepath . "/metadata/1' and @class='language-icon target-request' and @title='Spanish - Request translation' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


69) modules/contrib/lingotek/tests/src/Functional/Controller/LingotekWorkbenchRedirectControllerTest.php:75

    ---------- begin diff ----------
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('ES');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Download the Spanish translation.
     $this->assertLingotekDownloadTargetLink('es_AR');
@@ @@
     $this->clickLink('ES');

     $basepath = \Drupal::request()->getSchemeAndHttpHost();
-    $this->assertUrl($basepath . '/workbench/document/dummy-document-hash-id/locale/es_AR');
+    $this->assertSession()->addressEquals($basepath . '/workbench/document/dummy-document-hash-id/locale/es_AR');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * AssertUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


70) modules/contrib/lingotek/tests/src/Functional/Controller/LingotekSupportedLocalesControllerTest.php:15

    ---------- begin diff ----------
@@ @@
    */
   public function testSupportedLocales() {
     $this->drupalGet('/admin/lingotek/supported-locales');
-    $this->assertText('German (Austria)');
-    $this->assertText('German (Germany)');
-    $this->assertText('Spanish (Spain)');
+    $this->assertSession()->pageTextContains('German (Austria)');
+    $this->assertSession()->pageTextContains('German (Germany)');
+    $this->assertSession()->pageTextContains('Spanish (Spain)');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


71) modules/contrib/lingotek/tests/src/Functional/LingotekToolbarIntegrationTest.php:76

    ---------- begin diff ----------
@@ @@

     // And there is a link for Lingotek translation in the Regional and Language section.
     $result = $this->xpath('//h3[text()="Regional and language"]/following-sibling::*//a[@href="' . $basepath . '/admin/lingotek"]/text()');
-    $this->assertEqual(1, count($result), 'There is a link in Regional Language to the dashboard.');
+    $this->assertEquals(1, count($result), 'There is a link in Regional Language to the dashboard.');

     $this->clickLink('Lingotek Translation');

     // Assert there are tabs.
     $result = $this->xpath('//nav[contains(@class,"tabs")]/ul[contains(@class,"primary")]/li[contains(@class,"is-active")]/a[@href="' . $basepath . '/admin/lingotek"]/text()');
-    $this->assertEqual(1, count($result), 'There is an active tab for the Dashboard.');
+    $this->assertEquals(1, count($result), 'There is an active tab for the Dashboard.');
     $result = $this->xpath('//nav[contains(@class,"tabs")]/ul[contains(@class,"primary")]/li/a[@href="' . $basepath . '/admin/lingotek/manage"]/text()');
-    $this->assertEqual(1, count($result), 'There is a tab for Content Bulk management.');
+    $this->assertEquals(1, count($result), 'There is a tab for Content Bulk management.');
     $result = $this->xpath('//nav[contains(@class,"tabs")]/ul[contains(@class,"primary")]/li/a[@href="' . $basepath . '/admin/lingotek/config/manage"]/text()');
-    $this->assertEqual(1, count($result), 'There is a tab for Config Bulk management.');
+    $this->assertEquals(1, count($result), 'There is a tab for Config Bulk management.');
     $result = $this->xpath('//nav[contains(@class,"tabs")]/ul[contains(@class,"primary")]/li/a[@href="' . $basepath . '/admin/lingotek/settings"]/text()');
-    $this->assertEqual(1, count($result), 'There is a tab for Settings.');
+    $this->assertEquals(1, count($result), 'There is a tab for Settings.');

     $settings = $this->getDrupalSettings();
     // The toolbar module defines a route '/toolbar/subtrees/{hash}' that
@@ @@
     $response = $this->drupalGet('/toolbar/subtrees/' . $settings['toolbar']['subtreesHash']);
     $this->assertSession()->statusCodeEquals('200');
     $response = json_decode($response, TRUE);
-    $this->assertEqual($response[0]['command'], 'setToolbarSubtrees', 'Subtrees response uses the correct command.');
+    $this->assertEquals($response[0]['command'], 'setToolbarSubtrees', 'Subtrees response uses the correct command.');
     $this->assertTrue(array_key_exists('lingotek-config-dashboard', $response[0]['subtrees']), 'There is a subtree for Lingotek config.');

     $html = $response[0]['subtrees']['lingotek-config-dashboard'];
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


72) modules/contrib/lingotek/tests/src/Functional/LingotekTestBase.php:150

    ---------- begin diff ----------
@@ @@
   protected function connectToLingotek() {
     $this->drupalGet('admin/lingotek/setup/account');
     $this->clickLink('Connect Lingotek Account');
-    $this->drupalPostForm(NULL, ['community' => 'test_community'], 'Next');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm(['community' => 'test_community'], 'Next');
+    $this->submitForm([
       'project' => 'test_project',
       'vault' => 'test_vault',
       'workflow' => 'test_workflow',
@@ @@

     if ($filter !== NULL) {
       $edit = ['filters[wrapper][bundle]' => $filter];
-      $this->drupalPostForm(NULL, $edit, t('Filter'));
+      $this->submitForm($edit, t('Filter'));
     }
   }

@@ @@
    */
   protected function assertUploadedDataFieldCount(array $data, $count) {
     // We have to add one item because of the metadata we include.
-    $this->assertEqual($count + 1, count($data));
+    $this->assertEquals($count + 1, count($data));
   }

   /**
@@ @@
   protected function assertManagementFormProfile($index, $profile) {
     $elements = $this->xpath("//*[@id='edit-table']/tbody/tr[$index]/td[6]");
     if ($profile === NULL) {
-      $this->assertEqual(0, count($elements), "Profile for $index is shown as empty");
+      $this->assertEquals(0, count($elements), "Profile for $index is shown as empty");
     }
     else {
       $shown_profile = $elements[0]->getHtml();
-      $this->assertEqual($profile, $shown_profile, "Profile for $index is shown as $profile");
+      $this->assertEquals($profile, $shown_profile, "Profile for $index is shown as $profile");
     }
   }

@@ @@
       \Drupal::service('content_moderation.moderation_information')
         ->shouldModerateEntitiesOfBundle($entity_definition, $bundle)) {
       $edit['moderation_state[0][state]'] = 'published';
-      $this->drupalPostForm($path, $edit, t('Save'));
+      $this->drupalGet($path);
+      $this->submitForm($edit, t('Save'));
     }
     else {
       $edit['status[value]'] = TRUE;
-      $this->drupalPostForm($path, $edit, t('Save'));
+      $this->drupalGet($path);
+      $this->submitForm($edit, t('Save'));
     }
   }

@@ @@
       \Drupal::service('content_moderation.moderation_information')
         ->shouldModerateEntitiesOfBundle($entity_definition, $bundle)) {
       $edit['moderation_state[0][state]'] = 'draft';
-      $this->drupalPostForm($path, $edit, t('Save'));
+      $this->drupalGet($path);
+      $this->submitForm($edit, t('Save'));
     }
     else {
       $edit['status[value]'] = FALSE;
-      $this->drupalPostForm($path, $edit, t('Save'));
+      $this->drupalGet($path);
+      $this->submitForm($edit, t('Save'));
     }
   }

@@ @@
       \Drupal::service('content_moderation.moderation_information')
         ->shouldModerateEntitiesOfBundle($entity_definition, $bundle)) {
       $edit['moderation_state[0][state]'] = 'archived';
-      $this->drupalPostForm($path, $edit, t('Save'));
+      $this->drupalGet($path);
+      $this->submitForm($edit, t('Save'));
     }
     else {
       $edit['status[value]'] = FALSE;
-      $this->drupalPostForm($path, $edit, t('Save'));
+      $this->drupalGet($path);
+      $this->submitForm($edit, t('Save'));
     }
   }

@@ @@
   protected function saveAsUnpublishedNodeForm(array $edit, $bundle = 'article') {
     $path = ($bundle !== NULL) ? "node/add/$bundle" : NULL;
     $edit['status[value]'] = FALSE;
-    $this->drupalPostForm($path, $edit, t('Save'));
+    $this->drupalGet($path);
+    $this->submitForm($edit, t('Save'));
   }

   protected function saveAsRequestReviewNodeForm(array $edit, $bundle = 'article') {
     $path = ($bundle !== NULL) ? "node/add/$bundle" : NULL;
     $edit['moderation_state[0][state]'] = 'needs_review';
-    $this->drupalPostForm($path, $edit, t('Save'));
+    $this->drupalGet($path);
+    $this->submitForm($edit, t('Save'));
   }

   protected function editAsRequestReviewNodeForm($path, array $edit) {
     $edit['moderation_state[0][state]'] = 'needs_review';
-    $this->drupalPostForm($path, $edit, t('Save'));
+    $this->drupalGet($path);
+    $this->submitForm($edit, t('Save'));
   }

   protected function saveAsNewDraftNodeForm(array $edit, $bundle = 'article') {
     $path = ($bundle !== NULL) ? "node/add/$bundle" : NULL;
     $edit['moderation_state[0][state]'] = 'draft';
-    $this->drupalPostForm($path, $edit, t('Save'));
+    $this->drupalGet($path);
+    $this->submitForm($edit, t('Save'));
   }

   protected function editAsNewDraftNodeForm($path, array $edit) {
     $edit['moderation_state[0][state]'] = 'draft';
-    $this->drupalPostForm($path, $edit, t('Save'));
+    $this->drupalGet($path);
+    $this->submitForm($edit, t('Save'));
   }

   protected function saveAndKeepPublishedNodeForm(array $edit, $nid, $usePath = TRUE) {
@@ @@
       \Drupal::service('content_moderation.moderation_information')
         ->shouldModerateEntitiesOfBundle($entity_definition, $bundle)) {
       $edit['moderation_state[0][state]'] = 'published';
-      $this->drupalPostForm($path, $edit, t('Save'));
+      $this->drupalGet($path);
+      $this->submitForm($edit, t('Save'));
     }
     else {
       $edit['status[value]'] = TRUE;
-      $this->drupalPostForm($path, $edit, t('Save'));
+      $this->drupalGet($path);
+      $this->submitForm($edit, t('Save'));
     }
   }

@@ @@
       $path = $prefix . '/' . $path;
     }
     $edit['status[value]'] = TRUE;
-    $this->drupalPostForm($path, $edit, t('Save (this translation)'));
+    $this->drupalGet($path);
+    $this->submitForm($edit, t('Save (this translation)'));
   }

   /**
@@ @@
       foreach ($bundles as $bundle) {
         $edit["bundles[$bundle]"] = $bundle;
       }
-      $this->drupalPostForm("/admin/config/workflow/workflows/manage/$workflow_id/type/$entity_type_id", $edit, 'Save');
+      $this->drupalGet("/admin/config/workflow/workflows/manage/$workflow_id/type/$entity_type_id");
+      $this->submitForm($edit, 'Save');
     }
   }

@@ @@
     $status_target = $this->xpath("//a[contains(@class,'language-icon') and contains(@class,'target-" . strtolower($status) . "')  and contains(text(), '" . strtoupper($language) . "')]");
     // If not found, maybe it didn't have a link.
     if (count($status_target) === 1) {
-      $this->assertEqual(count($status_target), 1, 'The target ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
+      $this->assertEquals(count($status_target), 1, 'The target ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
     }
     // Our query looks for containing, so it's not totally accurate. It can confuse e.g. ES with ES-AR.
     elseif (count($status_target) > 1) {
@@ @@
     }
     else {
       $status_target = $this->xpath("//span[contains(@class,'language-icon') and contains(@class,'target-" . strtolower($status) . "')  and contains(text(), '" . strtoupper($language) . "')]");
-      $this->assertEqual(count($status_target), 1, 'The target ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
+      $this->assertEquals(count($status_target), 1, 'The target ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
     }
   }

@@ @@
    */
   protected function assertNoTargetStatus($language, $status) {
     $status_target = $this->xpath("//a[contains(@class,'language-icon') and contains(@class,'target-" . strtolower($status) . "')  and contains(text(), '" . strtoupper($language) . "')]");
-    $this->assertEqual(count($status_target), 0, 'The target ' . strtoupper($language) . ' has not been marked with status ' . strtolower($status) . '.');
+    $this->assertEquals(count($status_target), 0, 'The target ' . strtoupper($language) . ' has not been marked with status ' . strtolower($status) . '.');
   }

   /**
@@ @@
     $status_target = $this->xpath("//a[contains(@class,'language-icon') and contains(@class,'source-" . strtolower($status) . "')  and contains(text(), '" . strtoupper($language) . "')]");
     // If not found, maybe it didn't have a link.
     if (count($status_target) === 1) {
-      $this->assertEqual(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
+      $this->assertEquals(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
     }
     else {
       $status_target = $this->xpath("//span[contains(@class,'language-icon') and contains(@class,'source-" . strtolower($status) . "')  and contains(text(), '" . strtoupper($language) . "')]");
-      $this->assertEqual(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
+      $this->assertEquals(count($status_target), 1, 'The source ' . strtoupper($language) . ' has been marked with status ' . strtolower($status) . '.');
     }
   }

@@ @@
     $status_target = $this->xpath("//span[contains(@class,'language-icon') and contains(@class,'source-" . strtolower($status) . "')  and ./a[contains(text(), '" . strtoupper($language) . "')]]");
     // If not found, maybe it didn't have a link.
     if (count($status_target) === 0) {
-      $this->assertEqual(count($status_target), 0, 'The source ' . strtoupper($language) . ' has not been marked with status ' . strtolower($status) . '.');
+      $this->assertEquals(count($status_target), 0, 'The source ' . strtoupper($language) . ' has not been marked with status ' . strtolower($status) . '.');
     }
     else {
       $status_target = $this->xpath("//span[contains(@class,'language-icon') and contains(@class,'source-" . strtolower($status) . "')  and contains(text(), '" . strtoupper($language) . "')]");
-      $this->assertEqual(count($status_target), 0, 'The source ' . strtoupper($language) . ' has not been marked with status ' . strtolower($status) . '.');
+      $this->assertEquals(count($status_target), 0, 'The source ' . strtoupper($language) . ' has not been marked with status ' . strtolower($status) . '.');
     }
   }

@@ @@
    */
   protected function assertNoTargetError($label, $language, $locale) {
     $source_error = $this->xpath("//span[contains(@class,'language-icon') and contains(@class,'target-error')  and ./a[contains(text(), '" . strtoupper($language) . "')]]");
-    $this->assertEqual(count($source_error), 0, 'The target ' . strtoupper($language) . ' has not been marked as error.');
-    $this->assertNoText($label . ' ' . $locale . ' translation download failed. Please try again.');
+    $this->assertEquals(count($source_error), 0, 'The target ' . strtoupper($language) . ' has not been marked as error.');
+    $this->assertSession()->pageTextNotContains($label . ' ' . $locale . ' translation download failed. Please try again.');
   }

   /**
@@ @@
    */
   protected function assertNoConfigTargetError($label, $language, $locale) {
     $source_error = $this->xpath("//span[contains(@class,'language-icon') and contains(@class,'target-error')  and ./a[contains(text(), '" . strtoupper($language) . "')]]");
-    $this->assertEqual(count($source_error), 0, 'The target ' . strtoupper($language) . ' has not been marked as error.');
-    $this->assertNoText($label . ' ' . $locale . ' translation download failed. Please try again.');
+    $this->assertEquals(count($source_error), 0, 'The target ' . strtoupper($language) . ' has not been marked as error.');
+    $this->assertSession()->pageTextNotContains($label . ' ' . $locale . ' translation download failed. Please try again.');
   }

   /**
@@ @@
         }
       }
     }
-    $this->drupalPostForm('admin/lingotek/settings', $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->drupalGet('admin/lingotek/settings', []);
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');
   }

   /**
@@ @@
       $edit['table[' . $entity_type . '][enabled]'] = 1;
       $edit['table[' . $entity_type . '][profile]'] = $profile;
     }
-    $this->drupalPostForm('admin/lingotek/settings', $edit, 'Save', [], 'lingoteksettings-tab-configuration-form');
+    $this->drupalGet('admin/lingotek/settings', []);
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-configuration-form');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNoTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


73) modules/contrib/lingotek/tests/src/Functional/LingotekTaxonomyTermTranslationTest.php:90

    ---------- begin diff ----------
@@ @@
     $edit['name[0][value]'] = 'Llamas are cool';
     $edit['description[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
+    $this->drupalGet("admin/structure/taxonomy/manage/$bundle/add");

-    $this->drupalPostForm("admin/structure/taxonomy/manage/$bundle/add", $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->term = Term::load(1);

@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 2);
     $this->assertTrue(isset($data['name'][0]['value']));
-    $this->assertEqual(1, count($data['description'][0]));
+    $this->assertEquals(1, count($data['description'][0]));
     $this->assertTrue(isset($data['description'][0]['value']));

     // Check that the translate tab is in the node.
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for taxonomy_term Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for taxonomy_term Llamas are cool is complete.');

     // Request translation.
     $this->clickLink('Request translation');
-    $this->assertText("Locale 'es_ES' was added as a translation target for taxonomy_term Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_ES' was added as a translation target for taxonomy_term Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_ES translation for taxonomy_term Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_ES translation for taxonomy_term Llamas are cool is ready for download.');

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of taxonomy_term Llamas are cool into es_ES has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of taxonomy_term Llamas are cool into es_ES has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
   }

   /**
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 2);
     $this->assertTrue(isset($data['name'][0]['value']));
-    $this->assertEqual(1, count($data['description'][0]));
+    $this->assertEquals(1, count($data['description'][0]));
     $this->assertTrue(isset($data['description'][0]['value']));

     // Check that the translate tab is in the node.
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for taxonomy_term Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for taxonomy_term Llamas are cool is complete.');

     // Request translation.
     $this->clickLink('Request translation');
-    $this->assertText("Locale 'es_ES' was added as a translation target for taxonomy_term Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_ES' was added as a translation target for taxonomy_term Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_ES translation for taxonomy_term Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_ES translation for taxonomy_term Llamas are cool is ready for download.');

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of taxonomy_term Llamas are cool into es_ES has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of taxonomy_term Llamas are cool into es_ES has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
   }

   /**
@@ @@
     // The document should not have been automatically uploaded, so let's upload it.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // Check that only the configured fields have been uploaded.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 2);
     $this->assertTrue(isset($data['name'][0]['value']));
-    $this->assertEqual(1, count($data['description'][0]));
+    $this->assertEquals(1, count($data['description'][0]));
     $this->assertTrue(isset($data['description'][0]['value']));

     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for taxonomy_term Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for taxonomy_term Llamas are cool is complete.');

     // Request translation.
     $this->clickLink('Request translation');
-    $this->assertText("Locale 'es_ES' was added as a translation target for taxonomy_term Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_ES' was added as a translation target for taxonomy_term Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_ES translation for taxonomy_term Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_ES translation for taxonomy_term Llamas are cool is ready for download.');

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of taxonomy_term Llamas are cool into es_ES has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of taxonomy_term Llamas are cool into es_ES has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


74) modules/contrib/lingotek/tests/src/Functional/LingotekTaxonomyTermTranslationDownloadStatusTest.php:97

    ---------- begin diff ----------
@@ @@
     $this->createAndDownloadATaxonomyTermTranslation(self::PUBLISHED);

     // Ensure that there is one and only one unpublished content.
-    $this->assertText('Not published');
-    $this->assertUniqueText('Not published');
+    $this->assertSession()->pageTextContains('Not published');
+    $this->assertSession()->pageTextContainsOnce('Not published');
   }

   /**
@@ @@
     $this->createAndDownloadATaxonomyTermTranslation(self::UNPUBLISHED);

     // Ensure that there is one and only one published content.
-    $this->assertText('Published');
-    $this->assertUniqueText('Published');
+    $this->assertSession()->pageTextContains('Published');
+    $this->assertSession()->pageTextContainsOnce('Published');
   }

   /**
@@ @@
     $this->createAndDownloadATaxonomyTermTranslation(self::PUBLISHED);

     // Ensure that there is more than one published content.
-    $this->assertNoText('Not published');
-    $this->assertNoUniqueText('Published');
+    $this->assertSession()->pageTextNotContains('Not published');
+    $page_text = $this->getSession()->getPage()->getText();
+    $nr_found = substr_count($page_text, 'Published');
+    $this->assertGreaterThan(1, $nr_found, "'Published' found more than once on the page");
   }

   /**
@@ @@
     $this->createAndDownloadATaxonomyTermTranslation(self::UNPUBLISHED);

     // Ensure that there is more than one unpublished content.
-    $this->assertNoText('Published');
-    $this->assertNoUniqueText('Not published');
+    $this->assertSession()->pageTextNotContains('Published');
+    $page_text = $this->getSession()->getPage()->getText();
+    $nr_found = substr_count($page_text, 'Not published');
+    $this->assertGreaterThan(1, $nr_found, "'Not published' found more than once on the page");
   }

   /**
@@ @@
     else {
       $edit['status[value]'] = FALSE;
     }
+    $this->drupalGet("admin/structure/taxonomy/manage/$bundle/add");

-    $this->drupalPostForm("admin/structure/taxonomy/manage/$bundle/add", $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->term = Term::load(1);

@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 2);
     $this->assertTrue(isset($data['name'][0]['value']));
-    $this->assertEqual(1, count($data['description'][0]));
+    $this->assertEquals(1, count($data['description'][0]));
     $this->assertTrue(isset($data['description'][0]['value']));
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the term.
     $this->drupalGet('taxonomy/term/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for taxonomy_term Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for taxonomy_term Llamas are cool is complete.');

     // Request translation.
     $this->clickLink('Request translation');
-    $this->assertText("Locale 'es_MX' was added as a translation target for taxonomy_term Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for taxonomy_term Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.added_target_locale'));

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for taxonomy_term Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_MX translation for taxonomy_term Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of taxonomy_term Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains('The translation of taxonomy_term Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.downloaded_locale'));
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertNoTextRector
 * AssertNoUniqueTextRector
 * AssertTextRector
 * AssertUniqueTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


75) modules/contrib/lingotek/tests/src/Functional/LingotekTaxonomyTermLongTitleTranslationTest.php:90

    ---------- begin diff ----------
@@ @@
     $edit['name[0][value]'] = 'Llamas are cool';
     $edit['description[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
+    $this->drupalGet("admin/structure/taxonomy/manage/$bundle/add");

-    $this->drupalPostForm("admin/structure/taxonomy/manage/$bundle/add", $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->term = Term::load(1);

@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 2);
     $this->assertTrue(isset($data['name'][0]['value']));
-    $this->assertEqual(1, count($data['description'][0]));
+    $this->assertEquals(1, count($data['description'][0]));
     $this->assertTrue(isset($data['description'][0]['value']));

     // Check that the translate tab is in the taxonomy term.
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for taxonomy_term Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for taxonomy_term Llamas are cool is complete.');

     // Request translation.
     $this->clickLink('Request translation');
-    $this->assertText("Locale 'es_ES' was added as a translation target for taxonomy_term Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_ES' was added as a translation target for taxonomy_term Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_ES translation for taxonomy_term Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_ES translation for taxonomy_term Llamas are cool is ready for download.');

     // Download translation. It must fail with a useful error message.
     $this->clickLink('Download completed translation');
-    $this->assertText('The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name.');
+    $this->assertSession()->pageTextContains('The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name.');

     // Test the error is logged.
     $status = (bool) \Drupal::database()->queryRange('SELECT 1 FROM {watchdog} WHERE message = :message', 0, 1, [':message' => "The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name."]);
-    $this->assert($status, 'A watchdog message was logged for the length of the field.');
+    $this->assertTrue($status, 'A watchdog message was logged for the length of the field.');

     // Check the right class is added.
     $this->goToContentBulkManagementForm('taxonomy_term');
@@ @@
     // Check that the Target Status is Error
     $this->term = Term::load(1);
     $content_translation_service = \Drupal::service('lingotek.content_translation');
-    $this->assertIdentical(Lingotek::STATUS_ERROR, $content_translation_service->getTargetStatus($this->term, 'es'));
+    $this->assertSame(Lingotek::STATUS_ERROR, $content_translation_service->getTargetStatus($this->term, 'es'));

     // Check that the link works
     $this->clickLink('ES');
-    $this->assertText('The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name.');
+    $this->assertSession()->pageTextContains('The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name.');

     // Test the error is logged.
     $status = (bool) \Drupal::database()->queryRange('SELECT 1 FROM {watchdog} WHERE message = :message', 0, 1, [':message' => "The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name."]);
-    $this->assert($status, 'A watchdog message was logged for the length of the field.');
+    $this->assertTrue($status, 'A watchdog message was logged for the length of the field.');
   }

   /**
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 2);
     $this->assertTrue(isset($data['name'][0]['value']));
-    $this->assertEqual(1, count($data['description'][0]));
+    $this->assertEquals(1, count($data['description'][0]));
     $this->assertTrue(isset($data['description'][0]['value']));

     // Check that the translate tab is in the taxonomy term.
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for taxonomy_term Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for taxonomy_term Llamas are cool is complete.');

     // Request translation.
     $this->clickLink('Request translation');
-    $this->assertText("Locale 'es_ES' was added as a translation target for taxonomy_term Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_ES' was added as a translation target for taxonomy_term Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_ES translation for taxonomy_term Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_ES translation for taxonomy_term Llamas are cool is ready for download.');

     // Download translation. It must fail with a useful error message.
     $this->clickLink('Download completed translation');
-    $this->assertText('The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name.');
+    $this->assertSession()->pageTextContains('The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name.');

     // Test the error is logged.
     $status = (bool) \Drupal::database()->queryRange('SELECT 1 FROM {watchdog} WHERE message = :message', 0, 1, [':message' => "The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name."]);
-    $this->assert($status, 'A watchdog message was logged for the length of the field.');
+    $this->assertTrue($status, 'A watchdog message was logged for the length of the field.');

     // Check the right class is added.
     $this->goToContentBulkManagementForm('taxonomy_term');
@@ @@
     // Check that the Target Status is Error
     $this->term = Term::load(1);
     $content_translation_service = \Drupal::service('lingotek.content_translation');
-    $this->assertIdentical(Lingotek::STATUS_ERROR, $content_translation_service->getTargetStatus($this->term, 'es'));
+    $this->assertSame(Lingotek::STATUS_ERROR, $content_translation_service->getTargetStatus($this->term, 'es'));

     // Check that the link works
     $this->clickLink('ES');
-    $this->assertText('The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name.');
+    $this->assertSession()->pageTextContains('The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name.');

     // Test the error is logged.
     $status = (bool) \Drupal::database()->queryRange('SELECT 1 FROM {watchdog} WHERE message = :message', 0, 1, [':message' => "The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name."]);
-    $this->assert($status, 'A watchdog message was logged for the length of the field.');
+    $this->assertTrue($status, 'A watchdog message was logged for the length of the field.');
   }

   /**
@@ @@
     // The document should not have been automatically uploaded, so let's upload it.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // Check that only the configured fields have been uploaded.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 2);
     $this->assertTrue(isset($data['name'][0]['value']));
-    $this->assertEqual(1, count($data['description'][0]));
+    $this->assertEquals(1, count($data['description'][0]));
     $this->assertTrue(isset($data['description'][0]['value']));

     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for taxonomy_term Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for taxonomy_term Llamas are cool is complete.');

     // Request translation.
     $this->clickLink('Request translation');
-    $this->assertText("Locale 'es_ES' was added as a translation target for taxonomy_term Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_ES' was added as a translation target for taxonomy_term Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_ES translation for taxonomy_term Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_ES translation for taxonomy_term Llamas are cool is ready for download.');

     // Download translation. It must fail with a useful error message.
     $this->clickLink('Download completed translation');
-    $this->assertText('The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name.');
+    $this->assertSession()->pageTextContains('The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name.');

     // Test the error is logged.
     $status = (bool) \Drupal::database()->queryRange('SELECT 1 FROM {watchdog} WHERE message = :message', 0, 1, [':message' => "The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name."]);
-    $this->assert($status, 'A watchdog message was logged for the length of the field.');
+    $this->assertTrue($status, 'A watchdog message was logged for the length of the field.');

     // Check the right class is added.
     $this->goToContentBulkManagementForm('taxonomy_term');
@@ @@
     // Check that the Target Status is Error
     $this->term = $this->resetStorageCachesAndReloadContentEntity('taxonomy_term', 1);
     $content_translation_service = \Drupal::service('lingotek.content_translation');
-    $this->assertIdentical(Lingotek::STATUS_ERROR, $content_translation_service->getTargetStatus($this->term, 'es'));
+    $this->assertSame(Lingotek::STATUS_ERROR, $content_translation_service->getTargetStatus($this->term, 'es'));

     // Check that the link works
     $this->clickLink('ES');
-    $this->assertText('The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name.');
+    $this->assertSession()->pageTextContains('The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name.');

     // Test the error is logged.
     $status = (bool) \Drupal::database()->queryRange('SELECT 1 FROM {watchdog} WHERE message = :message', 0, 1, [':message' => "The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name."]);
-    $this->assert($status, 'A watchdog message was logged for the length of the field.');
+    $this->assertTrue($status, 'A watchdog message was logged for the length of the field.');
   }

   /**
@@ @@
     $edit['name[0][value]'] = 'Llamas are cool';
     $edit['description[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
+    $this->drupalGet("admin/structure/taxonomy/manage/$bundle/add");

-    $this->drupalPostForm("admin/structure/taxonomy/manage/$bundle/add", $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->goToContentBulkManagementForm('taxonomy_term');

@@ @@
     // And we cannot request yet a translation.
     $this->assertNoLingotekRequestTranslationLink('es_ES', 'dummy-document-hash-id', 'taxonomy_term');
     $this->clickLink('EN');
-    $this->assertText('Taxonomy_term Llamas are cool has been uploaded.');
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains('Taxonomy_term Llamas are cool has been uploaded.');
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $this->assertLingotekCheckSourceStatusLink('dummy-document-hash-id', 'taxonomy_term');
@@ @@
     // And we can already request a translation.
     $this->assertLingotekRequestTranslationLink('es_ES', 'dummy-document-hash-id', 'taxonomy_term');
     $this->clickLink('EN');
-    $this->assertText('The import for taxonomy_term Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for taxonomy_term Llamas are cool is complete.');

     // Request the Spanish translation.
     $this->assertLingotekRequestTranslationLink('es_ES', 'dummy-document-hash-id', 'taxonomy_term');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_ES' was added as a translation target for taxonomy_term Llamas are cool.");
-    $this->assertIdentical('es_ES', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Locale 'es_ES' was added as a translation target for taxonomy_term Llamas are cool.");
+    $this->assertSame('es_ES', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_ES', 'dummy-document-hash-id', 'taxonomy_term');
     $this->clickLink('ES');
-    $this->assertIdentical('es_ES', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_ES translation for taxonomy_term Llamas are cool is ready for download.');
+    $this->assertSame('es_ES', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('The es_ES translation for taxonomy_term Llamas are cool is ready for download.');

     // Download translation. It must fail with a useful error message.
     $this->assertLingotekDownloadTargetLink('es_ES', 'dummy-document-hash-id', 'taxonomy_term');
     $this->clickLink('ES');
-    $this->assertText('The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name.');
+    $this->assertSession()->pageTextContains('The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name.');

     // Test the error is logged.
     $status = (bool) \Drupal::database()->queryRange('SELECT 1 FROM {watchdog} WHERE message = :message', 0, 1, [':message' => "The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name."]);
-    $this->assert($status, 'A watchdog message was logged for the length of the field.');
+    $this->assertTrue($status, 'A watchdog message was logged for the length of the field.');

     // Check the right class is added.
     $this->goToContentBulkManagementForm('taxonomy_term');
@@ @@
     // Check that the Target Status is Error
     $this->term = Term::load(1);
     $content_translation_service = \Drupal::service('lingotek.content_translation');
-    $this->assertIdentical(Lingotek::STATUS_ERROR, $content_translation_service->getTargetStatus($this->term, 'es'));
+    $this->assertSame(Lingotek::STATUS_ERROR, $content_translation_service->getTargetStatus($this->term, 'es'));

     // Check that the link works
     $this->clickLink('ES');
-    $this->assertText('The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name.');
+    $this->assertSession()->pageTextContains('The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name.');

     // Test the error is logged.
     $status = (bool) \Drupal::database()->queryRange('SELECT 1 FROM {watchdog} WHERE message = :message', 0, 1, [':message' => "The download for taxonomy_term Llamas are cool failed because of the length of one field translation (es_ES) value: name."]);
-    $this->assert($status, 'A watchdog message was logged for the length of the field.');
+    $this->assertTrue($status, 'A watchdog message was logged for the length of the field.');
   }

   /**
@@ @@
     $edit['name[0][value]'] = 'Llamas are cool';
     $edit['description[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
+    $this->drupalGet("admin/structure/taxonomy/manage/$bundle/add");

-    $this->drupalPostForm("admin/structure/taxonomy/manage/$bundle/add", $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->goToContentBulkManagementForm('taxonomy_term');

@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('taxonomy_term'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
     $this->assertLingotekCheckSourceStatusLink('dummy-document-hash-id', 'taxonomy_term');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('taxonomy_term'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request the German (AT) translation.
     $this->assertLingotekRequestTranslationLink('de_AT', 'dummy-document-hash-id', 'taxonomy_term');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('de', 'taxonomy_term'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the German (AT) translation.
     $this->assertLingotekCheckTargetStatusLink('de_AT', 'dummy-document-hash-id', 'taxonomy_term');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => 'check_translation:de',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.checked_target_locale'));

     // Download the German (AT) translation.
     $this->assertLingotekDownloadTargetLink('de_AT', 'dummy-document-hash-id', 'taxonomy_term');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => 'download:de',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Download translation. It must fail with a useful error message.
-    $this->assertText('The download for taxonomy_term Llamas are cool failed because of the length of one field translation (de_AT) value: name.');
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('The download for taxonomy_term Llamas are cool failed because of the length of one field translation (de_AT) value: name.');
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Test the error is logged.
     $status = (bool) \Drupal::database()->queryRange('SELECT 1 FROM {watchdog} WHERE message = :message', 0, 1, [':message' => "The download for taxonomy_term Llamas are cool failed because of the length of one field translation (de_AT) value: name."]);
-    $this->assert($status, 'A watchdog message was logged for the length of the field.');
+    $this->assertTrue($status, 'A watchdog message was logged for the length of the field.');

     // Check the right class is added.
     $this->goToContentBulkManagementForm('taxonomy_term');
@@ @@
     // Check that the Target Status is Error
     $this->term = Term::load(1);
     $content_translation_service = \Drupal::service('lingotek.content_translation');
-    $this->assertIdentical(Lingotek::STATUS_ERROR, $content_translation_service->getTargetStatus($this->term, 'de'));
+    $this->assertSame(Lingotek::STATUS_ERROR, $content_translation_service->getTargetStatus($this->term, 'de'));

     // Check that the link works
     $this->clickLink('DE');
-    $this->assertText('The download for taxonomy_term Llamas are cool failed because of the length of one field translation (de_AT) value: name.');
+    $this->assertSession()->pageTextContains('The download for taxonomy_term Llamas are cool failed because of the length of one field translation (de_AT) value: name.');

     // Test the error is logged.
     $status = (bool) \Drupal::database()->queryRange('SELECT 1 FROM {watchdog} WHERE message = :message', 0, 1, [':message' => "The download for taxonomy_term Llamas are cool failed because of the length of one field translation (de_AT) value: name."]);
-    $this->assert($status, 'A watchdog message was logged for the length of the field.');
+    $this->assertTrue($status, 'A watchdog message was logged for the length of the field.');
   }

   /**
@@ @@
     $edit['name[0][value]'] = 'Llamas are cool';
     $edit['description[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
+    $this->drupalGet("admin/structure/taxonomy/manage/$bundle/add");

-    $this->drupalPostForm("admin/structure/taxonomy/manage/$bundle/add", $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->term = Term::load(1);

@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 2);
     $this->assertTrue(isset($data['name'][0]['value']));
-    $this->assertEqual(1, count($data['description'][0]));
+    $this->assertEquals(1, count($data['description'][0]));
     $this->assertTrue(isset($data['description'][0]['value']));

     // Check that the translate tab is in the taxonomy term.
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for taxonomy_term Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for taxonomy_term Llamas are cool is complete.');

     // Request translation.
     $this->clickLink('Request translation');
-    $this->assertText("Locale 'he_IL' was added as a translation target for taxonomy_term Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'he_IL' was added as a translation target for taxonomy_term Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The he_IL translation for taxonomy_term Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The he_IL translation for taxonomy_term Llamas are cool is ready for download.');

     // Download translation. It must fail with a useful error message.
     $this->clickLink('Download completed translation');
     // Translation succeeds, even if utf-8 hebrew chars are 2-bytes.
-    $this->assertText('The translation of taxonomy_term Llamas are cool into he_IL has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of taxonomy_term Llamas are cool into he_IL has been downloaded.');

     // Check the right class is added.
     $this->goToContentBulkManagementForm('taxonomy_term');
@@ @@
     // Check that the Target Status is Error
     $this->term = Term::load(1);
     $content_translation_service = \Drupal::service('lingotek.content_translation');
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($this->term, 'he'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($this->term, 'he'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


76) modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteTranslationTest.php:46

    ---------- begin diff ----------
@@ @@
     $this->clickLink('Translate system information');

     $this->clickLink(t('Upload'));
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));

     // Check that only the configured fields have been uploaded.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
-    $this->assertEqual(1, count($data));
+    $this->assertEquals(1, count($data));
     $this->assertTrue(array_key_exists('system.site', $data));
-    $this->assertEqual(2, count($data['system.site']));
+    $this->assertEquals(2, count($data['system.site']));
     $this->assertTrue(array_key_exists('name', $data['system.site']));
     $this->assertTrue(array_key_exists('slogan', $data['system.site']));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // Ensure it has the expected timestamp for upload
     $timestamp = \Drupal::time()->getRequestTime();
@@ @@

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(NULL, $uploaded_url, 'There was not associated url.');
+    $this->assertSame(NULL, $uploaded_url, 'There was not associated url.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('manual', $used_profile, 'The manual profile was used.');
+    $this->assertSame('manual', $used_profile, 'The manual profile was used.');

     $this->clickLink(t('Check upload status'));
-    $this->assertText(t('System information status checked successfully'));
+    $this->assertSession()->pageTextContains(t('System information status checked successfully'));

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertIdentical('es_AR', \Drupal::state()->get('lingotek.added_target_locale'));
-    $this->assertText(t('Translation to es_AR requested successfully'));
+    $this->assertSame('es_AR', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains(t('Translation to es_AR requested successfully'));

     // Check translation status.
     $this->clickLink(t('Check Download'));
-    $this->assertIdentical('es_AR', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText(t('Translation to es_AR checked successfully'));
+    $this->assertSame('es_AR', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains(t('Translation to es_AR checked successfully'));

     $this->clickLink('Download');
-    $this->assertIdentical('es_AR', \Drupal::state()->get('lingotek.downloaded_locale'));
-    $this->assertText(t('Translation to es_AR downloaded successfully'));
+    $this->assertSame('es_AR', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains(t('Translation to es_AR downloaded successfully'));

     // Check that the edit link is there.
     $basepath = \Drupal::request()->getBasePath();
@@ @@
     $assert_session->linkByHrefExists($basepath . '/admin/config/system/site-information/translate/es/edit');
     // Edit the Spanish translation.
     $this->clickLink('Edit', 1);
-    $this->assertFieldByName('translation[config_names][system.site][slogan]', 'Las llamas son muy chulas');
+    $this->assertSession()->fieldValueEquals('translation[config_names][system.site][slogan]', 'Las llamas son muy chulas');

     // The content is translated and published.
     $this->drupalGet('/es/');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
   }

   /**
@@ @@

     // Edit the config.
     $edit = ['site_name' => 'The Llamas site'];
-    $this->drupalPostForm('admin/config/system/site-information', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/system/site-information');
+    $this->submitForm($edit, 'Save configuration');

     $this->clickLink('Translate system information');

@@ @@

     // Recheck status.
     $this->clickLink('Check Download');
-    $this->assertText('Translation to es_AR checked successfully');
+    $this->assertSession()->pageTextContains('Translation to es_AR checked successfully');

     // Download the translation.
     $this->clickLink('Download');
-    $this->assertText('Translation to es_AR downloaded successfully');
+    $this->assertSession()->pageTextContains('Translation to es_AR downloaded successfully');
   }

   /**
@@ @@
     $this->clickLink('Translate system information');

     $this->clickLink(t('Upload'));
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));

     // Check that only the configured fields have been uploaded.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
-    $this->assertEqual(1, count($data));
+    $this->assertEquals(1, count($data));
     $this->assertTrue(array_key_exists('system.site', $data));
-    $this->assertEqual(2, count($data['system.site']));
+    $this->assertEquals(2, count($data['system.site']));
     $this->assertTrue(array_key_exists('name', $data['system.site']));
     $this->assertTrue(array_key_exists('slogan', $data['system.site']));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('manual', $used_profile, 'The manual profile was used.');
+    $this->assertSame('manual', $used_profile, 'The manual profile was used.');

     // The document should have been uploaded, so let's check the upload status.
     $this->clickLink(t('Check upload status'));
-    $this->assertText(t('System information status checked successfully'));
+    $this->assertSession()->pageTextContains(t('System information status checked successfully'));

     // There are two links for requesting translations, or we can add them
     // manually.
@@ @@
     $this->clickLink('Translate system information');

     $this->clickLink(t('Upload'));
-    $this->assertText('System information upload failed. Please try again.');
+    $this->assertSession()->pageTextContains('System information upload failed. Please try again.');

     // The config mapper has been marked with the error status.
     /** @var \Drupal\config_translation\ConfigMapperManagerInterface $mapperManager */
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('System information uploaded successfully');
+    $this->assertSession()->pageTextContains('System information uploaded successfully');
   }

   /**
@@ @@

     $this->clickLink(t('Upload'));
     $this->checkForMetaRefresh();
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // The config mapper has been marked with the error status.
     /** @var \Drupal\config_translation\ConfigMapperManagerInterface $mapperManager */
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_upload', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('System information uploaded successfully');
+    $this->assertSession()->pageTextContains('System information uploaded successfully');
   }

   /**
@@ @@

     $this->clickLink(t('Upload'));
     $this->checkForMetaRefresh();
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // The config mapper has been marked with the error status.
     /** @var \Drupal\config_translation\ConfigMapperManagerInterface $mapperManager */
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_upload', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('System information uploaded successfully');
+    $this->assertSession()->pageTextContains('System information uploaded successfully');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('System information uploaded successfully');
+    $this->assertSession()->pageTextContains('System information uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
@@ @@

     // We failed at checking status, but we don't know what happened.
     // So we don't mark as error but keep it on importing.
-    $this->assertText('System information status check failed. Please try again.');
+    $this->assertSession()->pageTextContains('System information status check failed. Please try again.');

     // The config mapper has been marked with the error status.
     /** @var \Drupal\config_translation\ConfigMapperManagerInterface $mapperManager */
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status, 'The system information has been marked as error.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('System information uploaded successfully');
+    $this->assertSession()->pageTextContains('System information uploaded successfully');

     // The document has not been imported yet.
     \Drupal::state()->set('lingotek.document_status_completion', FALSE);
@@ @@

     // We failed at checking status, but we don't know what happened.
     // So we don't mark as error but keep it on importing.
-    $this->assertText('The import for System information is still pending.');
+    $this->assertSession()->pageTextContains('The import for System information is still pending.');

     // The config mapper has been marked with the error status.
     /** @var \Drupal\config_translation\ConfigMapperManagerInterface $mapperManager */
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status, 'The system information has been marked as error.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('System information uploaded successfully');
+    $this->assertSession()->pageTextContains('System information uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
@@ @@

     // We failed at checking status, but we don't know what happened.
     // So we don't mark as error but keep it on importing.
-    $this->assertText('Document System information was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document System information was not found. Please upload again.');

     // The config mapper has been marked with the error status.
     /** @var \Drupal\config_translation\ConfigMapperManagerInterface $mapperManager */
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status, 'The system information has been marked as error.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('System information uploaded successfully');
+    $this->assertSession()->pageTextContains('System information uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('System information status checked successfully');
+    $this->assertSession()->pageTextContains('System information status checked successfully');

     // Edit the system site information.
     $edit['site_name'] = 'Llamas are cool';
-    $this->drupalPostForm('/admin/config/system/site-information', $edit, t('Save configuration'));
+    $this->drupalGet('/admin/config/system/site-information');
+    $this->submitForm($edit, t('Save configuration'));

     // Go back to the form.
     $this->drupalGet('/admin/config/system/site-information');
@@ @@
     // Re-upload. Must fail now.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('System information update failed. Please try again.');
+    $this->assertSession()->pageTextContains('System information update failed. Please try again.');

     // The config mapper has been marked with the error status.
     /** @var \Drupal\config_translation\ConfigMapperManagerInterface $mapperManager */
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('System information has been updated.');
+    $this->assertSession()->pageTextContains('System information has been updated.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('System information uploaded successfully');
+    $this->assertSession()->pageTextContains('System information uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('System information status checked successfully');
+    $this->assertSession()->pageTextContains('System information status checked successfully');

     // Edit the system site information.
     $edit['site_name'] = 'Llamas are cool';
-    $this->drupalPostForm('/admin/config/system/site-information', $edit, t('Save configuration'));
+    $this->drupalGet('/admin/config/system/site-information');
+    $this->submitForm($edit, t('Save configuration'));

     // Go back to the form.
     $this->drupalGet('/admin/config/system/site-information');
@@ @@
     // Re-upload. Must fail now.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // The config mapper has been marked with the error status.
     /** @var \Drupal\config_translation\ConfigMapperManagerInterface $mapperManager */
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('System information has been updated.');
+    $this->assertSession()->pageTextContains('System information has been updated.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('System information uploaded successfully');
+    $this->assertSession()->pageTextContains('System information uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('System information status checked successfully');
+    $this->assertSession()->pageTextContains('System information status checked successfully');

     // Edit the system site information.
     $edit['site_name'] = 'Llamas are cool';
-    $this->drupalPostForm('/admin/config/system/site-information', $edit, t('Save configuration'));
+    $this->drupalGet('/admin/config/system/site-information');
+    $this->submitForm($edit, t('Save configuration'));

     // Go back to the form.
     $this->drupalGet('/admin/config/system/site-information');
@@ @@
     // Re-upload. Must fail now.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // The config mapper has been marked with the error status.
     /** @var \Drupal\config_translation\ConfigMapperManagerInterface $mapperManager */
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_update', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('System information has been updated.');
+    $this->assertSession()->pageTextContains('System information has been updated.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('System information uploaded successfully');
+    $this->assertSession()->pageTextContains('System information uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('System information status checked successfully');
+    $this->assertSession()->pageTextContains('System information status checked successfully');

     // Edit the system site information.
     $edit['site_name'] = 'Llamas are cool';
-    $this->drupalPostForm('/admin/config/system/site-information', $edit, t('Save configuration'));
+    $this->drupalGet('/admin/config/system/site-information');
+    $this->submitForm($edit, t('Save configuration'));

     // Go back to the form.
     $this->drupalGet('/admin/config/system/site-information');
@@ @@
     // Re-upload. Must fail now.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Document System information was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document System information was not found. Please upload again.');

     // The config mapper has been marked with the error status.
     /** @var \Drupal\config_translation\ConfigMapperManagerInterface $mapperManager */
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('System information uploaded successfully');
+    $this->assertSession()->pageTextContains('System information uploaded successfully');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('System information uploaded successfully');
+    $this->assertSession()->pageTextContains('System information uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('System information status checked successfully');
+    $this->assertSession()->pageTextContains('System information status checked successfully');

     // Edit the system site information.
     $edit['site_name'] = 'Llamas are cool';
-    $this->drupalPostForm('/admin/config/system/site-information', $edit, t('Save configuration'));
+    $this->drupalGet('/admin/config/system/site-information');
+    $this->submitForm($edit, t('Save configuration'));

     // Go back to the form.
     $this->drupalGet('/admin/config/system/site-information');
@@ @@
     // Re-upload. Must fail now, but will retry.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Document System information has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document System information has been archived. Uploading again.');

     // The config mapper has been marked with the error status.
     /** @var \Drupal\config_translation\ConfigMapperManagerInterface $mapperManager */
@@ @@
     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', FALSE);
     $this->clickLink('Check upload');
     $this->checkForMetaRefresh();
-    $this->assertText('System information status checked successfully');
+    $this->assertSession()->pageTextContains('System information status checked successfully');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('System information uploaded successfully');
+    $this->assertSession()->pageTextContains('System information uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('System information status checked successfully');
+    $this->assertSession()->pageTextContains('System information status checked successfully');

     // Edit the system site information.
     $edit['site_name'] = 'Llamas are cool';
-    $this->drupalPostForm('/admin/config/system/site-information', $edit, t('Save configuration'));
+    $this->drupalGet('/admin/config/system/site-information');
+    $this->submitForm($edit, t('Save configuration'));

     // Go back to the form.
     $this->drupalGet('/admin/config/system/site-information');
@@ @@
     // Re-upload. Must fail now.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Document System information has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document System information has a new version. The document id has been updated for all future interactions. Please try again.');

     // The config mapper has been marked with the error status.
     /** @var \Drupal\config_translation\ConfigMapperManagerInterface $mapperManager */
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_EDITED, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_EDITED, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('System information has been updated.');
+    $this->assertSession()->pageTextContains('System information has been updated.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


77) modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteLocaleTranslationTest.php:57

    ---------- begin diff ----------
@@ @@
     $this->clickLink(t('Translate'), 2);

     $this->clickLink(t('Upload'));
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));

     // Check that only the translatable fields have been uploaded.
     $data = json_decode(\Drupal::state()
       ->get('lingotek.uploaded_content', '[]'), TRUE);
-    $this->assertEqual(1, count($data));
+    $this->assertEquals(1, count($data));
     $this->assertTrue(array_key_exists('system.site', $data));
-    $this->assertEqual(2, count($data['system.site']));
+    $this->assertEquals(2, count($data['system.site']));
     $this->assertTrue(array_key_exists('name', $data['system.site']));
     $this->assertTrue(array_key_exists('slogan', $data['system.site']));

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(NULL, $uploaded_url, 'There is not URL.');
+    $this->assertSame(NULL, $uploaded_url, 'There is not URL.');
     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('manual', $used_profile, 'The manual profile was used.');
+    $this->assertSame('manual', $used_profile, 'The manual profile was used.');

     $this->clickLink(t('Check upload status'));
-    $this->assertText(t('System information status checked successfully'));
+    $this->assertSession()->pageTextContains(t('System information status checked successfully'));

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText(t('Translation to es_AR requested successfully'));
-    $this->assertIdentical('es_AR', \Drupal::state()
+    $this->assertSession()->pageTextContains(t('Translation to es_AR requested successfully'));
+    $this->assertSame('es_AR', \Drupal::state()
       ->get('lingotek.added_target_locale'));

     $this->clickLink(t('Check Download'));
-    $this->assertText(t('Translation to es_AR checked successfully'));
+    $this->assertSession()->pageTextContains(t('Translation to es_AR checked successfully'));

     $this->clickLink('Download');
-    $this->assertText(t('Translation to es_AR downloaded successfully'));
+    $this->assertSession()->pageTextContains(t('Translation to es_AR downloaded successfully'));

     // Check that the edit link is there.
     $basepath = \Drupal::request()->getBasePath();
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


78) modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteExistingBulkTranslationTest.php:56

    ---------- begin diff ----------
@@ @@
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // Assert the untracked translation is shown.
     $this->assertTargetStatus('ES', 'untracked');
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 1);
-    $this->assertText('System information status checked successfully');
+    $this->assertSession()->pageTextContains('System information status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX checked successfully");

     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'ES');
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


79) modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteBulkTranslationTest.php:50

    ---------- begin diff ----------
@@ @@
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/system.site_information_settings/system.site_information_settings?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 1);
-    $this->assertText('System information status checked successfully');
+    $this->assertSession()->pageTextContains('System information status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX checked successfully");

     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'ES');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/system.site_information_settings/system.site_information_settings?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'check_upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request the German (AT) translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'request_translation:de',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/system.site_information_settings/system.site_information_settings/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'check_translation:de',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.checked_target_locale'));

     // Download the German translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/system.site_information_settings/system.site_information_settings/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'download:de',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('de_AT', 'dummy-document-hash-id', 'DE');
@@ @@
     // Add a language so we can check that it's not marked as for requesting if
     // it was already requested.
     ConfigurableLanguage::createFromLangcode('ko')->setThirdPartySetting('lingotek', 'locale', 'ko_KR')->save();
+    $this->drupalGet('/admin/config/system/site-information');

     // Edit the object
-    $this->drupalPostForm('/admin/config/system/site-information', ['site_name' => 'My site'], t('Save configuration'));
+    $this->submitForm(['site_name' => 'My site'], t('Save configuration'));

     // Login as translation manager.
     $this->drupalLogin($this->translationManagerUser);
@@ @@

     // Request korean, with outdated content available.
     $this->clickLink('KO');
-    $this->assertText("Translation to ko_KR requested successfully");
+    $this->assertSession()->pageTextContains("Translation to ko_KR requested successfully");

     // Reupload the content.
     $this->clickLink('EN', 1);
-    $this->assertText('System information has been updated.');
+    $this->assertSession()->pageTextContains('System information has been updated.');

     // Korean should be marked as requested, so we can check target.
     $this->assertTargetStatus('KO', Lingotek::STATUS_PENDING);
@@ @@

     // Recheck status.
     $this->clickLink('EN', 1);
-    $this->assertText('System information status checked successfully');
+    $this->assertSession()->pageTextContains('System information status checked successfully');

     // Check the translation after having been edited.
     // Check status of the Spanish translation.
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'check_translation:es',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Operations completed.');

     // Download the translation.
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
   }

   /**
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // I can check current status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/system.site_information_settings/system.site_information_settings?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'check_upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'request_translations',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check status of all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'check_translations',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Download all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/system.site_information_settings/system.site_information_settings/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'download',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
   }

   /**
@@ @@
     // There is a link for requesting the Catalan translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/ca_ES?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('CA');
-    $this->assertText("Translation to ca_ES requested successfully");
+    $this->assertSession()->pageTextContains("Translation to ca_ES requested successfully");
   }

   /**
@@ @@
   /**
    * ToDo: Add a test for this.
    */
-  public function testAddingConfigInDifferentLocale() {
-    $this->pass('Test not implemented yet.');
+  public function testAddingConfigInDifferentLocale()
+  {
   }

   /**
@@ @@

     // Upload the document, which must fail.
     $this->clickLink('EN', 1);
-    $this->assertText('System information upload failed. Please try again.');
+    $this->assertSession()->pageTextContains('System information upload failed. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));
   }

   /**
@@ @@

     // Upload the document, which must fail.
     $this->clickLink('EN', 1);
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_upload', FALSE);
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));
   }

   /**
@@ @@

     // Upload the document, which must fail.
     $this->clickLink('EN', 1);
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_upload', FALSE);
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));

     // Check upload.
     $this->clickLink('EN', 1);

-    $this->assertText('System information status check failed. Please try again.');
+    $this->assertSession()->pageTextContains('System information status check failed. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status);
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status);
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));

     // The document has not been imported yet.
     \Drupal::state()->set('lingotek.document_status_completion', FALSE);
@@ @@
     // Check upload.
     $this->clickLink('EN', 1);

-    $this->assertText('The import for System information is still pending.');
+    $this->assertSession()->pageTextContains('The import for System information is still pending.');

     // Check the right class is added.
     // We failed at checking status, but we don't know what happened.
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status);
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status);
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));

     // Check upload.
     $this->clickLink('EN', 1);

-    $this->assertText('Document System information was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document System information was not found. Please upload again.');

     // Check the right class is added.
     // We cannot use assertSourceStatus() as there are 4 elements by default with that status.
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status);
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status);
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));

     // Check upload.
     $this->clickLink('EN', 1);
@@ @@

     // Edit the system site information.
     $edit = ['site_name' => 'Llamas are cool'];
-    $this->drupalPostForm('/admin/config/system/site-information', $edit, t('Save configuration'));
+    $this->drupalGet('/admin/config/system/site-information');
+    $this->submitForm($edit, t('Save configuration'));

     \Drupal::state()->set('lingotek.must_error_in_upload', TRUE);

@@ @@

     // Update the document, which must fail.
     $this->clickLink('EN', 1);
-    $this->assertText('System information update failed. Please try again.');
+    $this->assertSession()->pageTextContains('System information update failed. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('EN', 1);
-    $this->assertText('System information has been updated.');
+    $this->assertSession()->pageTextContains('System information has been updated.');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));

     // Check upload.
     $this->clickLink('EN', 1);
@@ @@

     // Edit the system site information.
     $edit = ['site_name' => 'Llamas are cool'];
-    $this->drupalPostForm('/admin/config/system/site-information', $edit, t('Save configuration'));
+    $this->drupalGet('/admin/config/system/site-information');
+    $this->submitForm($edit, t('Save configuration'));

     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', TRUE);

@@ @@

     // Update the document, which must fail.
     $this->clickLink('EN', 1);
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', FALSE);
     $this->clickLink('EN', 1);
-    $this->assertText('System information has been updated.');
+    $this->assertSession()->pageTextContains('System information has been updated.');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));

     // Check upload.
     $this->clickLink('EN', 1);
@@ @@

     // Edit the system site information.
     $edit = ['site_name' => 'Llamas are cool'];
-    $this->drupalPostForm('/admin/config/system/site-information', $edit, t('Save configuration'));
+    $this->drupalGet('/admin/config/system/site-information');
+    $this->submitForm($edit, t('Save configuration'));

     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_update', TRUE);

@@ @@

     // Update the document, which must fail.
     $this->clickLink('EN', 1);
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_process_words_limit_error_in_update', FALSE);
     $this->clickLink('EN', 1);
-    $this->assertText('System information has been updated.');
+    $this->assertSession()->pageTextContains('System information has been updated.');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));

     // Check upload.
     $this->clickLink('EN', 1);
@@ @@

     // Edit the system site information.
     $edit = ['site_name' => 'Llamas are cool'];
-    $this->drupalPostForm('/admin/config/system/site-information', $edit, t('Save configuration'));
+    $this->drupalGet('/admin/config/system/site-information');
+    $this->submitForm($edit, t('Save configuration'));

     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', TRUE);

@@ @@

     // Update the document, which must fail.
     $this->clickLink('EN', 1);
-    $this->assertText('Document System information was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document System information was not found. Please upload again.');

     // Check the right class is added.
     // We cannot use assertSourceStatus() as there are 4 elements by default with that status.
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', FALSE);
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));

     // Check upload.
     $this->clickLink('EN', 1);
@@ @@

     // Edit the system site information.
     $edit = ['site_name' => 'Llamas are cool'];
-    $this->drupalPostForm('/admin/config/system/site-information', $edit, t('Save configuration'));
+    $this->drupalGet('/admin/config/system/site-information');
+    $this->submitForm($edit, t('Save configuration'));

     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', TRUE);

@@ @@

     // Update the document, which must fail, but will retry.
     $this->clickLink('EN', 1);
-    $this->assertText('Document System information has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document System information has been archived. Uploading again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
@@ @@
     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', FALSE);
     $this->clickLink('EN', 1);
-    $this->assertText('System information status checked successfully');
+    $this->assertSession()->pageTextContains('System information status checked successfully');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));

     // Check upload.
     $this->clickLink('EN', 1);
@@ @@

     // Edit the system site information.
     $edit = ['site_name' => 'Llamas are cool'];
-    $this->drupalPostForm('/admin/config/system/site-information', $edit, t('Save configuration'));
+    $this->drupalGet('/admin/config/system/site-information');
+    $this->submitForm($edit, t('Save configuration'));

     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', TRUE);

@@ @@

     // Update the document, which must fail.
     $this->clickLink('EN', 1);
-    $this->assertText('Document System information has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document System information has a new version. The document id has been updated for all future interactions. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_EDITED);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_EDITED, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_EDITED, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', FALSE);
     $this->clickLink('EN', 1);
-    $this->assertText('System information has been updated.');
+    $this->assertSession()->pageTextContains('System information has been updated.');
   }

   /**
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('System information upload failed. Please try again.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('System information upload failed. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));
   }

   /**
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_upload', FALSE);
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));
   }

   /**
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_process_words_limit_error_in_upload', FALSE);
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));
   }

   /**
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Operations completed.');

     // Check upload.
     $this->clickLink('EN', 1);
@@ @@

     // Edit the system site information.
     $edit = ['site_name' => 'Llamas are cool'];
-    $this->drupalPostForm('/admin/config/system/site-information', $edit, t('Save configuration'));
+    $this->drupalGet('/admin/config/system/site-information');
+    $this->submitForm($edit, t('Save configuration'));

     \Drupal::state()->set('lingotek.must_error_in_upload', TRUE);

@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('System information update failed. Please try again.');
+    $this->assertSession()->pageTextContains('System information update failed. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('EN', 1);
-    $this->assertText('System information has been updated.');
+    $this->assertSession()->pageTextContains('System information has been updated.');
   }

   /**
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Operations completed.');

     // Check upload.
     $this->clickLink('EN', 1);
@@ @@

     // Edit the system site information.
     $edit = ['site_name' => 'Llamas are cool'];
-    $this->drupalPostForm('/admin/config/system/site-information', $edit, t('Save configuration'));
+    $this->drupalGet('/admin/config/system/site-information');
+    $this->submitForm($edit, t('Save configuration'));

     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', TRUE);

@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', FALSE);
     $this->clickLink('EN', 1);
-    $this->assertText('System information has been updated.');
+    $this->assertSession()->pageTextContains('System information has been updated.');
   }

   /**
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Operations completed.');

     // Check upload.
     $this->clickLink('EN', 1);
@@ @@

     // Edit the system site information.
     $edit = ['site_name' => 'Llamas are cool'];
-    $this->drupalPostForm('/admin/config/system/site-information', $edit, t('Save configuration'));
+    $this->drupalGet('/admin/config/system/site-information');
+    $this->submitForm($edit, t('Save configuration'));

     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_update', TRUE);

@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_update', FALSE);
     $this->clickLink('EN', 1);
-    $this->assertText('System information has been updated.');
+    $this->assertSession()->pageTextContains('System information has been updated.');
   }

   /**
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Operations completed.');

     // Check upload.
     $this->clickLink('EN', 1);
@@ @@

     // Edit the system site information.
     $edit = ['site_name' => 'Llamas are cool'];
-    $this->drupalPostForm('/admin/config/system/site-information', $edit, t('Save configuration'));
+    $this->drupalGet('/admin/config/system/site-information');
+    $this->submitForm($edit, t('Save configuration'));

     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', TRUE);

@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Document System information was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document System information was not found. Please upload again.');

     // Check the right class is added.
     // We cannot use assertSourceStatus() as there are 4 elements by default with that status.
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', FALSE);
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));
   }

   /**
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Operations completed.');

     // Check upload.
     $this->clickLink('EN', 1);
@@ @@

     // Edit the system site information.
     $edit = ['site_name' => 'Llamas are cool'];
-    $this->drupalPostForm('/admin/config/system/site-information', $edit, t('Save configuration'));
+    $this->drupalGet('/admin/config/system/site-information');
+    $this->submitForm($edit, t('Save configuration'));

     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', TRUE);

@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Document System information has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document System information has a new version. The document id has been updated for all future interactions. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_EDITED);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getConfigSourceStatus($mapper);
-    $this->assertEqual(Lingotek::STATUS_EDITED, $source_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_EDITED, $source_status, 'The system information has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', FALSE);
     $this->clickLink('EN', 1);
-    $this->assertText('System information has been updated.');
+    $this->assertSession()->pageTextContains('System information has been updated.');
   }

   /**
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Operations completed.');

     // Check upload.
     $this->clickLink('EN', 1);
@@ @@

     // Edit the system site information.
     $edit = ['site_name' => 'Llamas are cool'];
-    $this->drupalPostForm('/admin/config/system/site-information', $edit, t('Save configuration'));
+    $this->drupalGet('/admin/config/system/site-information');
+    $this->submitForm($edit, t('Save configuration'));

     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', TRUE);

@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Document System information has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document System information has been archived. Uploading again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
@@ @@

     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', FALSE);
     $this->clickLink('EN', 1);
-    $this->assertText('System information status checked successfully');
+    $this->assertSession()->pageTextContains('System information status checked successfully');
   }

   /**
@@ @@
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/system.site_information_settings/system.site_information_settings?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 1);
-    $this->assertText('System information status checked successfully');
+    $this->assertSession()->pageTextContains('System information status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX checked successfully");

     \Drupal::state()->set('lingotek.must_error_in_download', TRUE);
     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('System information es_MX translation download failed. Please try again.');
-    $this->assertIdentical(NULL, \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('System information es_MX translation download failed. Please try again.');
+    $this->assertSame(NULL, \Drupal::state()->get('lingotek.downloaded_locale'));

     $this->goToConfigBulkManagementForm();
     // Check the right class is added.
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $target_status = $translation_service->getConfigTargetStatus($mapper, 'es');
-    $this->assertEqual(Lingotek::STATUS_ERROR, $target_status, 'The system information has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $target_status, 'The system information has been marked as error.');

     \Drupal::state()->set('lingotek.must_error_in_download', FALSE);
     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
   }

   /**
@@ @@
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/system.site_information_settings/system.site_information_settings?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 1);
-    $this->assertText('System information status checked successfully');
+    $this->assertSession()->pageTextContains('System information status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX checked successfully");

     \Drupal::state()->set('lingotek.must_document_not_found_error_download', TRUE);
     // Download the Spanish translation.
@@ @@
     $this->assertSourceStatusStateCount(Lingotek::STATUS_UNTRACKED, 'EN', 4);

     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document System information was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document System information was not found. Please upload again.');
   }

   /**
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/system.site_information_settings/system.site_information_settings?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'check_upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Assert that I could request translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'check_translations',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Now Drupal knows that there are translations ready.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/system.site_information_settings/system.site_information_settings/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@

     // Even if I just add a new language.
     ConfigurableLanguage::createFromLangcode('de')->setThirdPartySetting('lingotek', 'locale', 'de_DE')->save();
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/system.site_information_settings/system.site_information_settings/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');

     // Ensure locales are handled correctly by setting manual values.
     \Drupal::state()->set('lingotek.document_completion_statuses', ['de-AT' => 50, 'de-DE' => 100, 'es-MX' => 10]);
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Now Drupal knows which translations are ready.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/download/system.site_information_settings/system.site_information_settings/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@

     \Drupal::state()->set('lingotek.document_completion_statuses', ['it-IT' => 100, 'de-DE' => 50, 'es-MX' => 10]);
     // Check all statuses again.
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // All translations must be updated according exclusively with the
     // information from the TMS.
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/system.site_information_settings/system.site_information_settings?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'check_upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX checked successfully");

     // Download all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'download',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // The translations not requested shouldn't change its status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/de_DE?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'check_upload',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.added_target_locale'));

     \Drupal::state()->resetCache();
@@ @@
     // Request italian.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/it_IT?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('IT');
-    $this->assertText("Translation to it_IT requested successfully");
-    $this->assertIdentical('it_IT', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to it_IT requested successfully");
+    $this->assertSame('it_IT', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX checked successfully");
+    $this->assertSession()->pageTextContains("Translation to es_MX checked successfully");

     \Drupal::state()->resetCache();

@@ @@
     // Check status of the Italian translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/system.site_information_settings/system.site_information_settings/it_IT?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('IT');
-    $this->assertIdentical('it_IT', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to it_IT checked successfully");
+    $this->assertSame('it_IT', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to it_IT checked successfully");

     // Download all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'download',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // They are marked with the right status.
     $this->assertTargetStatus('ES', 'current');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'check_translations',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // And statuses should remain the same.
     $this->assertTargetStatus('ES', 'current');
@@ @@
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/system.site_information_settings/system.site_information_settings?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 1);
-    $this->assertText('System information status checked successfully');
+    $this->assertSession()->pageTextContains('System information status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX checked successfully");

     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Let's edit the translation and assert the html decoded values.
     $this->drupalGet('/admin/config/system/site-information/translate');
     $this->clickLink('Edit');
-    $this->assertFieldByName('translation[config_names][system.site][name]', '"Durpal"');
-    $this->assertFieldByName('translation[config_names][system.site][slogan]', '"Las llamas" son muy chulas');
+    $this->assertSession()->fieldValueEquals('translation[config_names][system.site][name]', '"Durpal"');
+    $this->assertSession()->fieldValueEquals('translation[config_names][system.site][slogan]', '"Las llamas" son muy chulas');
   }

   /**
@@ @@

     $this->drupalGet('/admin/config/system/site-information/translate');
     $this->clickLink('Delete');
-    $this->drupalPostForm(NULL, [], t('Delete'));
+    $this->submitForm([], t('Delete'));

     $this->goToConfigBulkManagementForm();
     $this->assertTargetStatus('DE', Lingotek::STATUS_READY);
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // We failed at requesting a translation, but we don't know what happened.
     // So we don't mark as error but keep it on request.
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('System information translations request failed. Please try again.');
+    $this->assertSession()->pageTextContains('System information translations request failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);

     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document System information has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document System information has been archived. Uploading again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check the right class is added.
     // We cannot use assertSourceStatus() as there are 4 elements by default with that status.
@@ @@
     $this->assertSourceStatusStateCount(Lingotek::STATUS_UNTRACKED, 'EN', 4);

     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document System information was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document System information was not found. Please upload again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Document System information has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document System information has a new version. The document id has been updated for all future interactions. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
     // We failed at requesting a translation, but we don't know what happened.
     // So we don't mark as error but keep it on request.
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('System information es_MX translation request failed. Please try again.');
+    $this->assertSession()->pageTextContains('System information es_MX translation request failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);

     $this->assertLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document System information has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document System information has been archived. Uploading again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
     $this->assertSourceStatusStateCount(Lingotek::STATUS_UNTRACKED, 'EN', 4);

     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document System information was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document System information was not found. Please upload again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Document System information has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document System information has a new version. The document id has been updated for all future interactions. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // We failed at requesting a translation, but we don't know what happened.
     // So we don't mark as error but keep it on request.
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Document System information es_MX translation request failed. Please try again.');
+    $this->assertSession()->pageTextContains('Document System information es_MX translation request failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);

     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document System information has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document System information has been archived. Uploading again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check the right class is added.
     // We cannot use assertSourceStatus() as there are 4 elements by default with that status.
@@ @@
     $this->assertSourceStatusStateCount(Lingotek::STATUS_UNTRACKED, 'EN', 4);

     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document System information was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document System information was not found. Please upload again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Document System information has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document System information has a new version. The document id has been updated for all future interactions. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
   }

   protected function getBulkSelectionKey($langcode, $revision_id, $entity_type_id = 'system.site_information_settings') {
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertIdenticalRector
 * AssertTextRector
 * PassRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


80) modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteBulkLocaleTranslationTest.php:51

    ---------- begin diff ----------
@@ @@
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_AR?destination=' . $basepath . '/admin/lingotek/config/manage');
     // System information will be the second link.
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/system.site_information_settings/system.site_information_settings?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_ES?destination=' . $basepath . '/admin/lingotek/config/manage');
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_AR?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 1);
-    $this->assertText('System information status checked successfully');
+    $this->assertSession()->pageTextContains('System information status checked successfully');

     // Request the German (AT) translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('DE-AT');
-    $this->assertText("Translation to de_AT requested successfully");
+    $this->assertSession()->pageTextContains("Translation to de_AT requested successfully");
     // Check that the requested locale is the right one.
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));

     \Drupal::state()->resetCache();

@@ @@
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_ES?destination=' . $basepath . '/admin/lingotek/config/manage');
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_AR?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_AR requested successfully");
+    $this->assertSession()->pageTextContains("Translation to es_AR requested successfully");
     // Check that the requested locale is the right one.
-    $this->assertIdentical('es_AR', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSame('es_AR', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/system.site_information_settings/system.site_information_settings/es_AR?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_AR', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_AR checked successfully");
+    $this->assertSame('es_AR', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_AR checked successfully");

     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/system.site_information_settings/system.site_information_settings/es_AR?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_AR downloaded successfully');
-    $this->assertIdentical('es_AR', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_AR downloaded successfully');
+    $this->assertSame('es_AR', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'ES');
@@ @@

     // Upload it
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/system.site_information_settings/system.site_information_settings?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     // Request the German (AT) translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('DE-AT');
-    $this->assertText("Translation to de_AT requested successfully");
+    $this->assertSession()->pageTextContains("Translation to de_AT requested successfully");

     // Check that the source status has been updated.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/check_upload/system.site_information_settings/system.site_information_settings?destination=' . $basepath . '/admin/lingotek/config/manage');
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


81) modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteBulkDebugTest.php:44

    ---------- begin diff ----------
@@ @@

     // Enable the debug operations.
     $this->drupalGet('admin/lingotek/settings');
-    $this->drupalPostForm(NULL, [], t('Enable debug operations'));
+    $this->submitForm([], t('Enable debug operations'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@

     // Enable the debug operations.
     $this->drupalGet('admin/lingotek/settings');
-    $this->drupalPostForm(NULL, [], t('Enable debug operations'));
+    $this->submitForm([], t('Enable debug operations'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'debug.export',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Exports available');
+    $this->assertSession()->pageTextContains('Exports available');
     // Download the file.
     $this->clickLink('config.system.site_information_settings.json');

     $response = json_decode($this->getSession()->getPage()->getContent(), TRUE);
-    $this->assertIdentical('Drupal', $response['system.site']['name']);
-    $this->assertIdentical('', $response['system.site']['slogan']);
-    $this->assertIdentical('system.site_information_settings (config): System information', $response['_debug']['title']);
-    $this->assertIdentical('manual', $response['_debug']['profile']);
-    $this->assertIdentical('en_US', $response['_debug']['source_locale']);
+    $this->assertSame('Drupal', $response['system.site']['name']);
+    $this->assertSame('', $response['system.site']['slogan']);
+    $this->assertSame('system.site_information_settings (config): System information', $response['_debug']['title']);
+    $this->assertSame('manual', $response['_debug']['profile']);
+    $this->assertSame('en_US', $response['_debug']['source_locale']);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


82) modules/contrib/lingotek/tests/src/Functional/LingotekSystemSiteBulkCancelTest.php:47

    ---------- begin diff ----------
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'cancel',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $config_translation_service */
     $config_translation_service = \Drupal::service('lingotek.config_translation');
@@ @@

     // Assert that The document has been cancelled remotely.
     $cancelled_docs = \Drupal::state()->get('lingotek.cancelled_docs', []);
-    $this->assertEqual(1, count($cancelled_docs), 'The document has been cancelled remotely.');
+    $this->assertEquals(1, count($cancelled_docs), 'The document has been cancelled remotely.');

     // Assert that no document has been deleted remotely.
     $deleted_docs = \Drupal::state()->get('lingotek.deleted_docs', []);
-    $this->assertEqual(0, count($deleted_docs), 'No document has been deleted remotely.');
+    $this->assertEquals(0, count($deleted_docs), 'No document has been deleted remotely.');

     $mappers = \Drupal::service('plugin.manager.config_translation.mapper')->getMappers();
     $mapper = $mappers['system.site_information_settings'];
@@ @@
     $this->assertSourceStatus('EN', Lingotek::STATUS_CANCELLED);
     $this->assertTargetStatus('ES', Lingotek::STATUS_CANCELLED);

-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $config_translation_service->getConfigSourceStatus($mapper));
-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));

     // We can request again.
     $basepath = \Drupal::request()->getBasePath();
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => 'cancel:es',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $config_translation_service */
     $config_translation_service = \Drupal::service('lingotek.config_translation');
@@ @@
     $this->assertSourceStatus('EN', Lingotek::STATUS_CURRENT);
     $this->assertTargetStatus('ES', Lingotek::STATUS_CANCELLED);

-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getConfigSourceStatus($mapper));
-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getConfigSourceStatus($mapper));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $config_translation_service->getConfigTargetStatus($mapper, 'es'));

     // We cannot request again.
     $basepath = \Drupal::request()->getBasePath();
@@ @@

     // Clicking English must init the upload of content.
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));

     // There is a link for checking status.
     $this->clickLink('EN', 1);
-    $this->assertText('System information status checked successfully');
+    $this->assertSession()->pageTextContains('System information status checked successfully');

     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_ES?destination=' . $basepath . '/admin/lingotek/config/manage');

     // Request the Spanish translation.
     $this->clickLink('ES');
-    $this->assertText("Translation to es_ES requested successfully");
+    $this->assertSession()->pageTextContains("Translation to es_ES requested successfully");

     // Check status of the Spanish translation.
     $this->clickLink('ES');
-    $this->assertText("Translation to es_ES checked successfully");
+    $this->assertSession()->pageTextContains("Translation to es_ES checked successfully");

     // Download the Spanish translation.
     $this->clickLink('ES');
-    $this->assertText('Translation to es_ES downloaded successfully');
+    $this->assertSession()->pageTextContains('Translation to es_ES downloaded successfully');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


83) modules/contrib/lingotek/tests/src/Functional/LingotekSaveTargetDataTest.php:126

    ---------- begin diff ----------
@@ @@
     $node = \Drupal::entityTypeManager()->getStorage('node')->load(1);
     $node = $node->getTranslation('es');

-    $this->assertEqual('es body', $node->body->value, 'The body is translated correctly.');
-    $this->assertEqual('Revision 2 ES', $node->getTitle(), 'The title in the revision translation is the one given.');
-    $this->assertEqual(3, $node->getRevisionId(), 'The translation is saved in the newest revision.');
+    $this->assertEquals('es body', $node->body->value, 'The body is translated correctly.');
+    $this->assertEquals('Revision 2 ES', $node->getTitle(), 'The title in the revision translation is the one given.');
+    $this->assertEquals(3, $node->getRevisionId(), 'The translation is saved in the newest revision.');
   }

   public function testFieldsAreNotExtractedIfNotTranslatableEvenIfStorageIsTranslatable() {
@@ @@

     $node = $translation_service->saveTargetData($node, 'es', $es_data);

-    $this->assertEqual('es body', $node->getTranslation('es')->body->value, 'The body is translated if the field is translatable.');
-    $this->assertEqual($body, $node->getTranslation('en')->body->value, 'The body in the original language is not overridden.');
-    $this->assertEqual('es title', $node->getTranslation('es')->getTitle(), 'The title in the translation is the one given.');
-    $this->assertEqual($title, $node->getTranslation('en')->getTitle(), 'The title in the original language is not overridden.');
+    $this->assertEquals('es body', $node->getTranslation('es')->body->value, 'The body is translated if the field is translatable.');
+    $this->assertEquals($body, $node->getTranslation('en')->body->value, 'The body in the original language is not overridden.');
+    $this->assertEquals('es title', $node->getTranslation('es')->getTitle(), 'The title in the translation is the one given.');
+    $this->assertEquals($title, $node->getTranslation('en')->getTitle(), 'The title in the original language is not overridden.');

     // Make the field as not translatable.
     $field->setTranslatable(FALSE)->save();
@@ @@
     // If the field is not translatable, the field is not there.
     $node = $translation_service->saveTargetData($node, 'de', $de_data);

-    $this->assertEqual($body, $node->getTranslation('de')->body->value, 'The body is not written if the field is not translatable.');
-    $this->assertEqual($body, $node->getTranslation('en')->body->value, 'The body is not overridden if the field is not translatable.');
-    $this->assertEqual('de title', $node->getTranslation('de')->getTitle(), 'The title in the translation is the one given.');
-    $this->assertEqual($title, $node->getTranslation('en')->getTitle(), 'The title in the original language is not overridden.');
+    $this->assertEquals($body, $node->getTranslation('de')->body->value, 'The body is not written if the field is not translatable.');
+    $this->assertEquals($body, $node->getTranslation('en')->body->value, 'The body is not overridden if the field is not translatable.');
+    $this->assertEquals('de title', $node->getTranslation('de')->getTitle(), 'The title in the translation is the one given.');
+    $this->assertEquals($title, $node->getTranslation('en')->getTitle(), 'The title in the original language is not overridden.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


84) modules/contrib/lingotek/tests/src/Functional/LingotekNodeWorkbenchModerationTranslationTest.php:100

    ---------- begin diff ----------
@@ @@
     // And we cannot request yet a translation.
     $this->assertNoLingotekRequestTranslationLink('es_MX');
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     $this->clickLink('Llamas are cool');

@@ @@
       ->pager(50)
       ->count()
       ->execute();
-    $this->assertEqual(1, $result, 'Only one revision is stored.');
+    $this->assertEquals(1, $result, 'Only one revision is stored.');

     $this->goToContentBulkManagementForm();

@@ @@
     // And we can already request a translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request the Spanish translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_MX');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // Download the Spanish translation.
     $this->assertLingotekDownloadTargetLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'ES');
@@ @@
     $assert_session->linkExists('Revisions');
     $this->clickLink('Revisions');
     $this->drupalGet('es/node/1/revisions');
-    $this->assertText('Document translated into ES by Lingotek.');
+    $this->assertSession()->pageTextContains('Document translated into ES by Lingotek.');

     // Only one revision stored.
     /** @var \Drupal\node\NodeStorageInterface $node_storage */
@@ @@
       ->pager(50)
       ->count()
       ->execute();
-    $this->assertEqual(2, $result, 'A new revision is stored.');
+    $this->assertEquals(2, $result, 'A new revision is stored.');
   }

   /**
@@ @@
    */
   protected function enableModerationThroughUI($content_type_id, array $allowed_states, $default_state) {
     $this->drupalGet('admin/structure/types/manage/' . $content_type_id . '/moderation');
-    $this->assertFieldByName('enable_moderation_state');
-    $this->assertNoFieldChecked('edit-enable-moderation-state');
+    $this->assertSession()->fieldExists('enable_moderation_state');
+    $this->assertSession()->checkboxNotChecked('edit-enable-moderation-state');

     $edit['enable_moderation_state'] = 1;

@@ @@

     $edit['default_moderation_state'] = $default_state;

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
   }

   /**
@@ @@
     // And we cannot request yet a translation.
     $this->assertNoLingotekRequestTranslationLink('es_MX');
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     $this->clickLink('Llamas are cool');

@@ @@
       ->pager(50)
       ->count()
       ->execute();
-    $this->assertEqual(1, $result, 'Only one revision is stored.');
+    $this->assertEquals(1, $result, 'Only one revision is stored.');

     $this->goToContentBulkManagementForm();

@@ @@
     // And we can already request a translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request the Spanish translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_MX');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // Download the Spanish translation.
     $this->assertLingotekDownloadTargetLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'ES');
@@ @@
       ->pager(50)
       ->count()
       ->execute();
-    $this->assertEqual(1, $result, 'A new revision has not been stored.');
+    $this->assertEquals(1, $result, 'A new revision has not been stored.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertIdenticalRector
 * AssertNoFieldCheckedRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


85) modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithTranslatedAuthorTranslationTest.php:92

    ---------- begin diff ----------
@@ @@
     $this->verbose(json_encode($data));
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(1, count($data['uid']));
+    $this->assertEquals(1, count($data['uid']));
     // There is a uid, but there is no data as it's not configured in Lingotek.
     $this->assertUploadedDataFieldCount($data['uid'], 0);

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
     // The author is still the same, even with a different value given by
     // Lingotek.
     $assert_session->linkExists('admin');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


86) modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithTablefieldTranslationTest.php:138

    ---------- begin diff ----------
@@ @@
     // Because we cannot do ajax requests in this test, we submit and edit later.
     $this->saveAndPublishNodeForm($edit);

-    $this->assertText('Llamas are cool sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Llamas are cool sent to Lingotek successfully.');

-    $this->assertText('Table caption');
-    $this->assertText('Header 1');
-    $this->assertText('Header 2');
-    $this->assertText('Header 3');
-    $this->assertText('Row 1-1');
-    $this->assertText('Row 1-2');
-    $this->assertText('Row 1-3');
-    $this->assertText('Row 2-1');
-    $this->assertText('Row 2-2');
-    $this->assertText('Row 2-3');
+    $this->assertSession()->pageTextContains('Table caption');
+    $this->assertSession()->pageTextContains('Header 1');
+    $this->assertSession()->pageTextContains('Header 2');
+    $this->assertSession()->pageTextContains('Header 3');
+    $this->assertSession()->pageTextContains('Row 1-1');
+    $this->assertSession()->pageTextContains('Row 1-2');
+    $this->assertSession()->pageTextContains('Row 1-3');
+    $this->assertSession()->pageTextContains('Row 2-1');
+    $this->assertSession()->pageTextContains('Row 2-2');
+    $this->assertSession()->pageTextContains('Row 2-3');

     $this->node = Node::load(1);

@@ @@
     $this->verbose(var_export($data, TRUE));
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(6, count($data['field_table'][0]));
-    $this->assertEqual($data['field_table'][0]['caption'], 'Table caption');
+    $this->assertEquals(6, count($data['field_table'][0]));
+    $this->assertEquals($data['field_table'][0]['caption'], 'Table caption');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
-    $this->assertText('Texto de la leyenda de la tabla');
-    $this->assertText('Cabecera 1');
-    $this->assertText('Cabecera 2');
-    $this->assertText('Cabecera 3');
-    $this->assertText('Texto celda 1 1');
-    $this->assertText('Texto celda 1 2');
-    $this->assertText('Texto celda 1 3');
-    $this->assertText('Texto celda 2 1');
-    $this->assertText('Texto celda 2 2');
-    $this->assertText('Texto celda 2 3');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Texto de la leyenda de la tabla');
+    $this->assertSession()->pageTextContains('Cabecera 1');
+    $this->assertSession()->pageTextContains('Cabecera 2');
+    $this->assertSession()->pageTextContains('Cabecera 3');
+    $this->assertSession()->pageTextContains('Texto celda 1 1');
+    $this->assertSession()->pageTextContains('Texto celda 1 2');
+    $this->assertSession()->pageTextContains('Texto celda 1 3');
+    $this->assertSession()->pageTextContains('Texto celda 2 1');
+    $this->assertSession()->pageTextContains('Texto celda 2 2');
+    $this->assertSession()->pageTextContains('Texto celda 2 3');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


87) modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithPathautoTranslationTest.php:99

    ---------- begin diff ----------
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(1, count($data['path'][0]));
-    $this->assertEqual($data['path'][0]['alias'], '/node/llamas-are-cool');
+    $this->assertEquals(1, count($data['path'][0]));
+    $this->assertEquals($data['path'][0]['alias'], '/node/llamas-are-cool');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/llamas-are-cool'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/llamas-are-cool'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/llamas-are-cool');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();

-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
     // Url won't be overwritten by pathauto.
-    $this->assertUrl('/es-ar/las-llamas-son-chulas');
+    $this->assertSession()->addressEquals('/es-ar/las-llamas-son-chulas');
   }

   /**
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 2);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
     $this->assertFalse(isset($data['path']));

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
     // Url will be auto-generated by pathauto.
-    $this->assertUrl('/es-ar/node/las-llamas-son-chulas');
+    $this->assertSession()->addressEquals('/es-ar/node/las-llamas-son-chulas');
   }

   /**
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(1, count($data['path'][0]));
+    $this->assertEquals(1, count($data['path'][0]));
     // Pathauto overrides the alias.
-    $this->assertEqual($data['path'][0]['alias'], '/node/llamas-are-cool');
+    $this->assertEquals($data['path'][0]['alias'], '/node/llamas-are-cool');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/llamas-are-cool'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/llamas-are-cool'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('/node/llamas-are-cool');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
     // The uri is not overridden by pathauto.
-    $this->assertUrl('/es-ar/las-llamas-son-chulas');
+    $this->assertSession()->addressEquals('/es-ar/las-llamas-son-chulas');
   }

   /**
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(1, count($data['path'][0]));
-    $this->assertEqual($data['path'][0]['alias'], '/node/llamas-are-cool');
+    $this->assertEquals(1, count($data['path'][0]));
+    $this->assertEquals($data['path'][0]['alias'], '/node/llamas-are-cool');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/llamas-are-cool'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/llamas-are-cool'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/llamas-are-cool');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
     // Url will be auto-generated by pathauto.
-    $this->assertUrl('/es-ar/node/las-llamas-son-chulas');
+    $this->assertSession()->addressEquals('/es-ar/node/las-llamas-son-chulas');
     // Test the error is logged.
     $status = (bool) \Drupal::database()->queryRange('SELECT 1 FROM {watchdog} WHERE message = :message', 0, 1, [':message' => "Alias for node Llamas are cool in language es-ar not saved, invalid uri \"an invalid path\""]);
-    $this->assert($status, 'A watchdog message was logged for the invalid uri in a field');
+    $this->assertTrue($status, 'A watchdog message was logged for the invalid uri in a field');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertRector
 * AssertTextRector
 * AssertUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


88) modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithPathTranslationTest.php:96

    ---------- begin diff ----------
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(1, count($data['path'][0]));
-    $this->assertEqual($data['path'][0]['alias'], '/llamas-are-cool');
+    $this->assertEquals(1, count($data['path'][0]));
+    $this->assertEquals($data['path'][0]['alias'], '/llamas-are-cool');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/llamas-are-cool'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/llamas-are-cool'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
-    $this->assertUrl('/es-ar/las-llamas-son-chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
+    $this->assertSession()->addressEquals('/es-ar/las-llamas-son-chulas');
   }

   /**
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 2);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
     $this->assertFalse(isset($data['path']));

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
-    $this->assertUrl('/es-ar/node/1');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
+    $this->assertSession()->addressEquals('/es-ar/node/1');
   }

   /**
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(1, count($data['path'][0]));
-    $this->assertEqual($data['path'][0]['alias'], '/llamas-are-cool');
+    $this->assertEquals(1, count($data['path'][0]));
+    $this->assertEquals($data['path'][0]['alias'], '/llamas-are-cool');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/llamas-are-cool'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/llamas-are-cool'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('/llamas-are-cool');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');

     // Test the error is logged.
     $status = (bool) \Drupal::database()->queryRange('SELECT 1 FROM {watchdog} WHERE message = :message', 0, 1, [':message' => "Alias for node Llamas are cool in language es-ar not saved, invalid uri \"an invalid path\""]);
-    $this->assert($status, 'A watchdog message was logged for the invalid uri in a field');
+    $this->assertTrue($status, 'A watchdog message was logged for the invalid uri in a field');
     // Url will be the same as before.
-    $this->assertUrl(\Drupal::request()->getUriForPath('/es-ar/llamas-are-cool'));
-    $this->assertUrl('/es-ar/llamas-are-cool');
+    $this->assertSession()->addressEquals(\Drupal::request()->getUriForPath('/es-ar/llamas-are-cool'));
+    $this->assertSession()->addressEquals('/es-ar/llamas-are-cool');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertRector
 * AssertTextRector
 * AssertUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


89) modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithParagraphsManageTranslationTabTest.php:85

    ---------- begin diff ----------
@@ @@
     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_content_demo');

-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
     // And we cannot request yet a translation.
     $this->assertNoLingotekRequestTranslationLink('es_MX');
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $this->assertLingotekCheckSourceStatusLink();
@@ @@
     // And we can already request a translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request the Spanish translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_MX');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // Download the Spanish translation.
     $this->assertLingotekDownloadTargetLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'ES');
@@ @@
     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_content_demo');

-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
       'table[node:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
     $this->assertLingotekCheckSourceStatusLink();
@@ @@
       'table[node:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request the German (AT) translation.
     $this->assertLingotekRequestTranslationLink('de_AT');
@@ @@
       'table[node:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('de', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('de_AT');
@@ @@
       'table[node:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslation('de', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.checked_target_locale'));

     // Download the Spanish translation.
     $this->assertLingotekDownloadTargetLink('de_AT');
@@ @@
       'table[node:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslation('de', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('de_AT', 'dummy-document-hash-id', 'DE');
@@ @@
     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_content_demo');

-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
     $edit = [];
     $edit['settings[node][paragraphed_content_demo][fields][field_paragraphs_demo]'] = 1;
     $edit['settings[paragraph][image_text][fields][field_text_demo]'] = 1;
-    $this->drupalPostForm('/admin/config/regional/content-language', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/regional/content-language');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('Settings successfully updated.');
   }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


90) modules/contrib/lingotek/tests/src/Unit/Remote/LingotekHttpUnitTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The HTTP client to interact with the Lingotek service.
    *
-   * @var \GuzzleHttp\ClientInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \GuzzleHttp\ClientInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $httpClient;

   /**
-   * @var \Drupal\Core\Config\Config|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\Config|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $config;

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $configFactory;

@@ @@
       ->addMethods(['get', 'post', 'patch', 'delete'])
       ->getMockForAbstractClass();

-    $this->config = $this->getMockBuilder(Config::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->config = $this->createMock(Config::class);
     $this->config->expects($this->any())
       ->method('get')
       ->will($this->returnValueMap([['account.host', 'http://example.com'], ['account.access_token', 'the_token']]));
@@ @@
    * @covers ::get
    */
   public function testGet() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $this->httpClient->expects($this->at(0))
       ->method('get')
       ->with('http://example.com/test', [
@@ @@
    * @covers ::post
    */
   public function testPost() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $this->httpClient->expects($this->at(0))
       ->method('post')
       ->with('http://example.com/test', [
@@ @@
    * @covers ::patch
    */
   public function testPatch() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $this->httpClient->expects($this->at(0))
       ->method('patch')
       ->with('http://example.com/test', [
@@ @@
    * @covers ::delete
    */
   public function testDelete() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $this->httpClient->expects($this->at(0))
       ->method('delete')
       ->with('http://example.com/test', [
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


91) modules/contrib/lingotek/tests/src/Unit/Remote/LingotekApiUnitTest.php:32

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   protected function setUp(): void {
-    $this->client = $this->getMockBuilder(LingotekHttpInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $logger = $this->getMockBuilder(LoggerInterface::class)->getMock();
+    $this->client = $this->createMock(LingotekHttpInterface::class);
+    $logger = $this->createMock(LoggerInterface::class);

     $this->lingotek_api = new LingotekApi($this->client, $logger);
   }
@@ @@
    */
   public function testAddTranslation() {
     // Ensure that the workflow is set when it's need to be.
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $this->client->expects($this->at(0))
       ->method('post')
       ->with('/api/document/fancy-document-id/translation', ['locale_code' => 'es_ES', 'workflow_id' => 'my_workflow'])
@@ @@
    */
   public function testAddTranslationWithException() {
     // Ensure that the workflow is set when it's need to be.
-    $request = $this->getMockBuilder(RequestInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $request = $this->createMock(RequestInterface::class);
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getStatusCode')
       ->willReturn(Response::HTTP_BAD_REQUEST);
@@ @@
    * @covers ::cancelDocument
    */
   public function testCancelDocument() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getStatusCode')
       ->willReturn(Response::HTTP_NO_CONTENT);
@@ @@
    * @covers ::cancelDocumentTarget
    */
   public function testCancelDocumentTarget() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getStatusCode')
       ->willReturn(Response::HTTP_NO_CONTENT);
@@ @@
    */
   public function testGetCommunities() {
     // Ensure that the limit is set.
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $this->client->expects($this->once())
       ->method('get')
       ->with('/api/community', ['limit' => 100])
@@ @@
    */
   public function testGetProjects() {
     // Ensure that the limit and the community_id are set.
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $this->client->expects($this->once())
       ->method('get')
       ->with('/api/project', ['community_id' => 'my_community_id', 'limit' => 1000])
@@ @@
    */
   public function testGetVaults() {
     // Ensure that the limit is set and the community_id is ignored.
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $this->client->expects($this->once())
       ->method('get')
       ->with('/api/vault', ['limit' => 100, 'is_owned' => 'TRUE'])
@@ @@
   public function testGetWorkflows() {
     $community_id = 'my_community_id';
     // Ensure that the limit is set.
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $this->client->expects($this->once())
       ->method('get')
       ->with('/api/workflow', ['community_id' => $community_id, 'limit' => 1000])
@@ @@

   public function testGetTranslation() {
     // Ensure that the useSource is set when it needs to be.
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);

     $this->client->expects($this->at(0))
       ->method('get')
@@ @@
   public function testGetProcess() {
     $process_id = 'my-process-id';
     // Ensure that the limit is set.
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $this->client->expects($this->once())
       ->method('get')
       ->with('/api/process/my-process-id')
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


92) modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/NestedLayoutBuilderEntitiesDetectorTest.php:98

    ---------- begin diff ----------
@@ @@
       ->method('getLabel')
       ->willReturn('Entity');

-    $blockManager = $this->getMockBuilder(BlockManager::class)->disableOriginalConstructor()->getMock();
+    $blockManager = $this->createMock(BlockManager::class);
     $blockManager->expects($this->any())
       ->method('getDefinition')
       ->with('inline_block')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


93) modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/LinkItDetectorTest.php:56

    ---------- begin diff ----------
@@ @@
   protected $lingotekConfiguration;

   /**
-   * @var \Drupal\Core\Entity\ContentEntityTypeInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\ContentEntityTypeInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityType;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


94) modules/contrib/lingotek/tests/src/Unit/Plugin/RelatedEntitiesDetector/EntityEmbedDetectorTest.php:56

    ---------- begin diff ----------
@@ @@
   protected $lingotekConfiguration;

   /**
-   * @var \Drupal\Core\Entity\ContentEntityTypeInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\ContentEntityTypeInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityType;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


95) modules/contrib/lingotek/tests/src/Unit/LingotekUnitTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LanguageLocaleMapperInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $languageLocaleMapper;

   /**
-   * @var \Drupal\lingotek\Remote\LingotekHttpInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\Remote\LingotekHttpInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $api;

   /**
-   * @var \Drupal\Core\Config\Config|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\Config|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $config;

   /**
-   * @var \Drupal\Core\Config\Config|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\Config|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $configEditable;

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $configFactory;

@@ @@
   /**
    * The Lingotek Filter manager.
    *
-   * @var \Drupal\lingotek\LingotekFilterManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LingotekFilterManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $lingotekFilterManager;

@@ @@
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $lingotekConfiguration;

@@ @@
   protected function setUp(): void {
     $this->api = $this->createMock(LingotekApiInterface::class);
     $this->languageLocaleMapper = $this->createMock(LanguageLocaleMapperInterface::class);
-    $this->config = $this->getMockBuilder(Config::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->configEditable = $this->getMockBuilder(Config::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->config = $this->createMock(Config::class);
+    $this->configEditable = $this->createMock(Config::class);

     $this->lingotekFilterManager = $this->createMock(LingotekFilterManagerInterface::class);
     $this->configFactory = $this->createMock(ConfigFactoryInterface::class);
@@ @@
    * @covers ::uploadDocument
    */
   public function testUploadDocument() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getStatusCode')
       ->willReturn(Response::HTTP_ACCEPTED);
@@ @@
    * @covers ::updateDocument
    */
   public function testUpdateDocumentBC() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getStatusCode')
       ->willReturn(Response::HTTP_ACCEPTED);
@@ @@
    * @covers ::addTarget
    */
   public function testAddTarget() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getStatusCode')
       ->willReturn(Response::HTTP_CREATED);
@@ @@
    * @covers ::addTarget
    */
   public function testAddTargetPaymentRequired() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getStatusCode')
       ->willReturn(Response::HTTP_PAYMENT_REQUIRED);
@@ @@
    * @covers ::addTarget
    */
   public function testAddTargetGone() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getStatusCode')
       ->willReturn(Response::HTTP_GONE);
@@ @@
    * @covers ::addTarget
    */
   public function testAddTargetLocked() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getStatusCode')
       ->willReturn(Response::HTTP_LOCKED);
@@ @@
    * @covers ::addTarget
    */
   public function testAddTargetProcessedWordsLimit() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getStatusCode')
       ->willReturn(Response::HTTP_TOO_MANY_REQUESTS);
@@ @@
    * @covers ::cancelDocument
    */
   public function testCancelDocument() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->at(0))
       ->method('getStatusCode')
       ->willReturn(Response::HTTP_NO_CONTENT);
@@ @@
    * @covers ::cancelDocumentTarget
    */
   public function testCancelDocumentTarget() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->at(0))
       ->method('getStatusCode')
       ->willReturn(Response::HTTP_NO_CONTENT);
@@ @@
    * @covers ::getDocumentTranslationStatus
    */
   public function testGetDocumentTranslationStatus() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getStatusCode')
       ->willReturn(Response::HTTP_OK);
@@ @@
    * @covers ::getDocumentTranslationStatus
    */
   public function testGetDocumentTranslationStatusWithStrings() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getStatusCode')
       ->willReturn(Response::HTTP_OK);
@@ @@
    * @covers ::getDocumentTranslationStatus
    */
   public function testGetDocumentTranslationStatusCancelled() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getStatusCode')
       ->willReturn(Response::HTTP_OK);
@@ @@
    * @covers ::uploadDocument
    */
   public function testUploadWithNoMetadataLeaked() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getStatusCode')
       ->willReturn(Response::HTTP_ACCEPTED);
@@ @@
    * @covers ::updateDocument
    */
   public function testUpdateWithNoMetadataLeaked() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getStatusCode')
       ->willReturn(Response::HTTP_ACCEPTED);
@@ @@
    * @covers ::updateDocument
    */
   public function testUpdateDocument() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $this->lingotekFilterManager->expects($this->any())
       ->method('getFilterId')
       ->willReturn('4f91482b-5aa1-4a4a-a43f-712af7b39625');
@@ @@
    * @covers ::updateDocument
    */
   public function testUpdateDocumentManualProfile() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getStatusCode')
       ->willReturn(Response::HTTP_ACCEPTED);
@@ @@
    * @covers ::updateDocument
    */
   public function testUpdateDocumentPaymentRequired() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $this->lingotekFilterManager->expects($this->any())
       ->method('getFilterId')
       ->willReturn('4f91482b-5aa1-4a4a-a43f-712af7b39625');
@@ @@
    * @covers ::updateDocument
    */
   public function testUpdateDocumentGone() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $this->lingotekFilterManager->expects($this->any())
       ->method('getFilterId')
       ->willReturn('4f91482b-5aa1-4a4a-a43f-712af7b39625');
@@ @@
    * @covers ::updateDocument
    */
   public function testUpdateDocumentLocked() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $this->lingotekFilterManager->expects($this->any())
       ->method('getFilterId')
       ->willReturn('4f91482b-5aa1-4a4a-a43f-712af7b39625');
@@ @@
    * @covers::updateDocument
    */
   public function testUpdateDocumentProcessedWordsLimit() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $this->lingotekFilterManager->expects($this->any())
       ->method('getFilterId')
       ->willReturn('4f91482b-5aa1-4a4a-a43f-712af7b39625');
@@ @@
    * @covers ::uploadDocument
    */
   public function testUploadDocumentPaymentRequired() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $this->lingotekFilterManager->expects($this->any())
       ->method('getFilterId')
       ->willReturn('4f91482b-5aa1-4a4a-a43f-712af7b39625');
@@ @@
    * @covers ::uploadDocument
    */
   public function testUploadDocumentProcessedWordsLimit() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);

     $this->lingotekFilterManager->expects($this->any())
       ->method('getFilterId')
@@ @@
    * @covers ::downloadDocument
    */
   public function testDownloadDocument() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getStatusCode')
       ->willReturn(Response::HTTP_OK);
@@ @@
    * @covers ::downloadDocument
    */
   public function testDownloadDocumentGone() {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getStatusCode')
       ->willReturn(Response::HTTP_GONE);
@@ @@
    * @dataProvider dataProviderGetProcessStatus
    */
   public function testGetProcessStatus($httpCode, $status, $progress, $expected) {
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getStatusCode')
       ->willReturn($httpCode);
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


96) modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithLinkTranslationTest.php:131

    ---------- begin diff ----------
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(2, count($data[$this->field_name][0]));
-    $this->assertEqual($data[$this->field_name][0]['title'], 'My field link title');
-    $this->assertEqual($data[$this->field_name][0]['uri'], 'http://drupal.org');
+    $this->assertEquals(2, count($data[$this->field_name][0]));
+    $this->assertEquals($data[$this->field_name][0]['title'], 'My field link title');
+    $this->assertEquals($data[$this->field_name][0]['uri'], 'http://drupal.org');
     $this->verbose(var_export($data, TRUE));

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
-    $this->assertText('Enlace con fotos de llamas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Enlace con fotos de llamas');
     $assert_session->linkByHrefExists('http://drupal.org/es');
   }

@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(2, count($data[$this->field_name][0]));
-    $this->assertEqual($data[$this->field_name][0]['title'], 'My field link title');
-    $this->assertEqual($data[$this->field_name][0]['uri'], 'http://drupal.org');
+    $this->assertEquals(2, count($data[$this->field_name][0]));
+    $this->assertEquals($data[$this->field_name][0]['title'], 'My field link title');
+    $this->assertEquals($data[$this->field_name][0]['uri'], 'http://drupal.org');
     $this->verbose(var_export($data, TRUE));

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
-    $this->assertText('Enlace con fotos de llamas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Enlace con fotos de llamas');
     // There is no invalid link.
     $assert_session->linkByHrefNotExists('this is not a valid uri');
     // The original link is kept.
@@ @@
     $assert_session->linkByHrefExists('http://drupal.org');
     // Test the error is logged.
     $status = (bool) \Drupal::database()->queryRange('SELECT 1 FROM {watchdog} WHERE message = :message', 0, 1, [':message' => "Field field_link for node Llamas are cool in language es-ar not saved, invalid uri \"this is not a valid uri\""]);
-    $this->assert($status, 'A watchdog message was logged for the invalid uri in a field');
+    $this->assertTrue($status, 'A watchdog message was logged for the invalid uri in a field');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


97) modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithCyclesTranslationTest.php:109

    ---------- begin diff ----------
@@ @@
     $this->verbose(var_export($data, TRUE));
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('manual', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('manual', $used_profile, 'The automatic profile was used.');

     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $this->clickLink('Request translation');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


98) modules/contrib/lingotek/tests/src/Functional/LingotekNodeWithBlockfieldTranslationTest.php:169

    ---------- begin diff ----------
@@ @@
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
     $this->saveAndKeepPublishedNodeForm($edit, 1);

-    $this->assertText('Current theme overridden title block');
-    $this->assertText('Current theme: stark');
+    $this->assertSession()->pageTextContains('Current theme overridden title block');
+    $this->assertSession()->pageTextContains('Current theme: stark');

     // Ensure it has the expected timestamp for updated and upload
     $timestamp = \Drupal::time()->getRequestTime();
@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(1, count($data['field_block'][0]));
-    $this->assertEqual($data['field_block'][0]['label'], 'Current theme overridden title block');
+    $this->assertEquals(1, count($data['field_block'][0]));
+    $this->assertEquals($data['field_block'][0]['label'], 'Current theme overridden title block');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
-    $this->assertText('Tema actual titulo sobreescrito del bloque');
-    $this->assertText('Current theme: stark');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Tema actual titulo sobreescrito del bloque');
+    $this->assertSession()->pageTextContains('Current theme: stark');
   }

   /**
@@ @@
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
     $this->saveAndKeepPublishedNodeForm($edit, 1);

-    $this->assertText('Custom block title');
-    $this->assertText('Custom block body');
+    $this->assertSession()->pageTextContains('Custom block title');
+    $this->assertSession()->pageTextContains('Custom block body');

     $this->node = Node::load(1);

@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(2, count($data['field_block'][0]));
-    $this->assertEqual($data['field_block'][0]['label'], 'Custom block title');
-    $this->assertEqual($data['field_block'][0]['rich_text.value'], 'Custom block body');
+    $this->assertEquals(2, count($data['field_block'][0]));
+    $this->assertEquals($data['field_block'][0]['label'], 'Custom block title');
+    $this->assertEquals($data['field_block'][0]['rich_text.value'], 'Custom block body');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
-    $this->assertText('Título de bloque personalizado');
-    $this->assertText('Cuerpo de bloque personalizado');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Título de bloque personalizado');
+    $this->assertSession()->pageTextContains('Cuerpo de bloque personalizado');

     // The original content didn't change.
     $this->drupalGet('node/1');
-    $this->assertText('Llamas are cool');
-    $this->assertText('Llamas are very cool');
-    $this->assertText('Custom block title');
-    $this->assertText('Custom block body');
+    $this->assertSession()->pageTextContains('Llamas are cool');
+    $this->assertSession()->pageTextContains('Llamas are very cool');
+    $this->assertSession()->pageTextContains('Custom block title');
+    $this->assertSession()->pageTextContains('Custom block body');
   }

   /**
@@ @@
     $edit = [];
     $edit['info[0][value]'] = 'Dogs block';
     $edit['body[0][value]'] = 'Dogs are very cool block';
-    $this->drupalPostForm('block/add/custom_content_block', $edit, t('Save'));
+    $this->drupalGet('block/add/custom_content_block');
+    $this->submitForm($edit, t('Save'));

     $dogsBlock = BlockContent::load(1);

@@ @@
     $edit = [];
     $edit['info[0][value]'] = 'Cats block';
     $edit['body[0][value]'] = 'Cats are very cool block';
-    $this->drupalPostForm('block/add/custom_content_block', $edit, t('Save'));
+    $this->drupalGet('block/add/custom_content_block');
+    $this->submitForm($edit, t('Save'));

     $catsBlock = BlockContent::load(2);

     // Create a node.
     $this->drupalGet('node/add/article');
-    $this->drupalPostForm(NULL, [], 'Add another item');
+    $this->submitForm([], 'Add another item');
     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
     $edit['body[0][value]'] = 'Llamas are very cool';
@@ @@
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
     $this->saveAndKeepPublishedNodeForm($edit, 1);

-    $this->assertText('Dogs overridden title block');
-    $this->assertText('Dogs are very cool block');
-    $this->assertText('Cats overridden title block');
-    $this->assertText('Cats are very cool block');
+    $this->assertSession()->pageTextContains('Dogs overridden title block');
+    $this->assertSession()->pageTextContains('Dogs are very cool block');
+    $this->assertSession()->pageTextContains('Cats overridden title block');
+    $this->assertSession()->pageTextContains('Cats are very cool block');

     $this->node = Node::load(1);

@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(2, count($data['field_block']));
-    $this->assertEqual(3, count($data['field_block'][0]));
-    $this->assertEqual(3, count($data['field_block'][1]));
-    $this->assertEqual($data['field_block'][0]['label'], 'Dogs overridden title block');
-    $this->assertEqual($data['field_block'][0]['info'], '');
+    $this->assertEquals(2, count($data['field_block']));
+    $this->assertEquals(3, count($data['field_block'][0]));
+    $this->assertEquals(3, count($data['field_block'][1]));
+    $this->assertEquals($data['field_block'][0]['label'], 'Dogs overridden title block');
+    $this->assertEquals($data['field_block'][0]['info'], '');
     $this->assertTrue(isset($data['field_block'][0]['entity']));
-    $this->assertEqual($data['field_block'][0]['entity']['body'][0]['value'], 'Dogs are very cool block');
-    $this->assertEqual($data['field_block'][0]['entity']['_lingotek_metadata']['_entity_type_id'], 'block_content');
-    $this->assertEqual($data['field_block'][0]['entity']['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertEqual($data['field_block'][1]['label'], 'Cats overridden title block');
-    $this->assertEqual($data['field_block'][1]['info'], '');
+    $this->assertEquals($data['field_block'][0]['entity']['body'][0]['value'], 'Dogs are very cool block');
+    $this->assertEquals($data['field_block'][0]['entity']['_lingotek_metadata']['_entity_type_id'], 'block_content');
+    $this->assertEquals($data['field_block'][0]['entity']['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertEquals($data['field_block'][1]['label'], 'Cats overridden title block');
+    $this->assertEquals($data['field_block'][1]['info'], '');
     $this->assertTrue(isset($data['field_block'][1]['entity']));
-    $this->assertEqual($data['field_block'][1]['entity']['body'][0]['value'], 'Cats are very cool block');
-    $this->assertEqual($data['field_block'][1]['entity']['_lingotek_metadata']['_entity_type_id'], 'block_content');
-    $this->assertEqual($data['field_block'][1]['entity']['_lingotek_metadata']['_entity_id'], '2');
+    $this->assertEquals($data['field_block'][1]['entity']['body'][0]['value'], 'Cats are very cool block');
+    $this->assertEquals($data['field_block'][1]['entity']['_lingotek_metadata']['_entity_type_id'], 'block_content');
+    $this->assertEquals($data['field_block'][1]['entity']['_lingotek_metadata']['_entity_id'], '2');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
-    $this->assertText('Bloque sobreescrito con título Perros');
-    $this->assertText('Bloque Los perros son muy chulos');
-    $this->assertText('Bloque sobreescrito con título Gatos');
-    $this->assertText('Bloque Los gatos son muy chulos');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Bloque sobreescrito con título Perros');
+    $this->assertSession()->pageTextContains('Bloque Los perros son muy chulos');
+    $this->assertSession()->pageTextContains('Bloque sobreescrito con título Gatos');
+    $this->assertSession()->pageTextContains('Bloque Los gatos son muy chulos');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


99) modules/contrib/lingotek/tests/src/Functional/LingotekNodeWhenFieldIsRemovedTest.php:93

    ---------- begin diff ----------
@@ @@
     // And we cannot request yet a translation.
     $this->assertNoLingotekRequestTranslationLink('es_MX');
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // Check that only the configured fields have been uploaded.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(1, count($data['new_field'][0]));
+    $this->assertEquals(1, count($data['new_field'][0]));
     $this->assertTrue(isset($data['new_field'][0]['value']));

     // There is a link for checking status.
@@ @@
     // And we can already request a translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Now we remove the field!
     $this->removeField('node', 'article', 'new_field');
@@ @@
     // Request the Spanish translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_MX');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // Download the Spanish translation.
     $this->assertLingotekDownloadTargetLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'ES');
@@ @@
     $this->clickLink('Llamas are cool');
     $this->clickLink('Translate');
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
   }

   /**
@@ @@
     $assert_session->linkByHrefExists("/admin/structure/types/manage/$bundle/fields/$entity_type_id.$bundle.$field_name/delete");

     $this->drupalGet("/admin/structure/types/manage/$bundle/fields/$entity_type_id.$bundle.$field_name/delete");
-    $this->drupalPostForm(NULL, [], 'Delete');
+    $this->submitForm([], 'Delete');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


100) modules/contrib/lingotek/tests/src/Functional/LingotekNodeTranslationTest.php:101

    ---------- begin diff ----------
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['files[field_image_0]'] = \Drupal::service('file_system')->realpath($test_image->uri);
+    $this->drupalGet('node/add/article');

-    $this->drupalPostForm('node/add/article', $edit, t('Preview'));
+    $this->submitForm($edit, t('Preview'));

     unset($edit['files[field_image_0]']);
     $edit['field_image[0][alt]'] = 'Llamas are cool';
@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(1, count($data['field_image'][0]));
+    $this->assertEquals(1, count($data['field_image'][0]));
     $this->assertTrue(isset($data['field_image'][0]['alt']));
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status, 'The node has been marked as importing.');
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status, 'The node has been marked as importing.');

     // Assert the updated time and uploaded time have expected values
     $metadata = $this->node->lingotek_metadata->entity;
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Assert the link keeps the language.
     $this->assertLingotekRequestTranslationLink('es_MX');
@@ @@

     // Request translation.
     $this->clickLink('Request translation');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.added_target_locale'));

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.downloaded_locale'));

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
   }

   /**
@@ @@
     $edit['title[0][value]'] = 'Pages are cool';
     $edit['body[0][value]'] = 'Pages are very cool';
     $edit['langcode[0][value]'] = 'en';
-    $this->drupalPostForm('node/add/page', $edit, t('Save'));
+    $this->drupalGet('node/add/page');
+    $this->submitForm($edit, t('Save'));

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     $edit['langcode[0][value]'] = 'en';
     $edit['files[field_image_0]'] = \Drupal::service('file_system')->realpath($test_image->uri);
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
+    $this->drupalGet('node/add/article');

-    $this->drupalPostForm('node/add/article', $edit, t('Preview'));
+    $this->submitForm($edit, t('Preview'));

     unset($edit['files[field_image_0]']);
     $edit['field_image[0][alt]'] = 'Llamas are cool';
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status, 'The node has been marked as untracked.');
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status, 'The node has been marked as untracked.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // Upload the document.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // Check that only the configured fields have been uploaded.
     $data = json_decode(\Drupal::state()
@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(1, count($data['field_image'][0]));
+    $this->assertEquals(1, count($data['field_image'][0]));
     $this->assertTrue(isset($data['field_image'][0]['alt']));
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('manual', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('manual', $used_profile, 'The automatic profile was used.');

     // The document should have been uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Assert the link keeps the language.
     $this->assertLingotekRequestTranslationLink('es_MX');
@@ @@

     // Request translation.
     $this->clickLink('Request translation');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.added_target_locale'));

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.downloaded_locale'));

     $assert_session->linkNotExists('Download completed translation');
@@ @@

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
   }

   /**
@@ @@

     // Recheck status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_MX translation for node Llamas are cool EDITED is ready for download.');
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool EDITED is ready for download.');

     // Download the translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool EDITED into es_MX has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool EDITED into es_MX has been downloaded.');

     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
   }

   /**
@@ @@
     // Re-upload.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // Check that only the configured fields have been uploaded.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
@@ @@

     // Recheck status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_MX translation for node Llamas are cool EDITED is ready for download.');
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool EDITED is ready for download.');

     // Download the translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool EDITED into es_MX has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool EDITED into es_MX has been downloaded.');

     $this->clickLink('Las llamas son chulas EDITADO');
-    $this->assertNoText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextNotContains('Las llamas son muy chulas');
   }

   /**
@@ @@
     $edit['langcode[0][value]'] = 'es';
     $this->saveAndPublishNodeForm($edit);

-    $this->assertText('Llamas are cool es-MX sent to Lingotek successfully.');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains('Llamas are cool es-MX sent to Lingotek successfully.');
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.uploaded_locale'));
   }

@@ @@
     // Get the node form.
     $this->drupalGet('node/add/article');
     // Assert translation profile cannot be assigned.
-    $this->assertNoField('lingotek_translation_management[lingotek_translation_profile]');
+    $this->assertSession()->fieldNotExists('lingotek_translation_management[lingotek_translation_profile]');

     $translation_manager = $this->drupalCreateUser([
       'bypass node access',
@@ @@
     // Get the node form.
     $this->drupalGet('node/add/article');
     // Assert translation profile can be assigned.
-    $this->assertField('lingotek_translation_management[lingotek_translation_profile]');
+    $this->assertSession()->fieldExists('lingotek_translation_management[lingotek_translation_profile]');
   }

   /**
@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // There are two links for requesting translations, or we can add them
     // manually.
@@ @@
     // Upload the document, which must fail.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('The upload for node Llamas are cool failed. Please try again.');
+    $this->assertSession()->pageTextContains('The upload for node Llamas are cool failed. Please try again.');

     // The node has been marked with the error status.
     $this->node = Node::load(1);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');

     $metadata = $this->node->lingotek_metadata->entity;
     $expected_time = \Drupal::time()->getRequestTime();
@@ @@
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     $this->node = $this->resetStorageCachesAndReloadNode();
     $metadata = $this->node->lingotek_metadata->entity;
@@ @@
     // Upload the document, which must fail.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // The node has been marked with the error status.
     $this->node = Node::load(1);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_upload', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');
   }

   /**
@@ @@
     // Upload the document, which must fail.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // The node has been marked with the error status.
     $this->node = Node::load(1);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_upload', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // Check that the upload succeeded.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Edit the node.
     $edit['title[0][value]'] = 'Llamas are cool EDITED';
@@ @@
     // Re-upload. Must fail now.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('The update for node Llamas are cool EDITED failed. Please try again.');
+    $this->assertSession()->pageTextContains('The update for node Llamas are cool EDITED failed. Please try again.');

     // The node has been marked with the error status.
     $this->node = Node::load(1);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // Check that the upload succeeded.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Edit the node.
     $edit['title[0][value]'] = 'Llamas are cool EDITED';
@@ @@
     // Re-upload. Must fail now.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // The node has been marked with the error status.
     $this->node = Node::load(1);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // Check that the upload succeeded.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Edit the node.
     $edit['title[0][value]'] = 'Llamas are cool EDITED';
@@ @@
     // Re-upload. Must fail now.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // The node has been marked with the error status.
     $this->node = Node::load(1);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_update', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // Check that the upload succeeded.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Edit the node.
     $edit['title[0][value]'] = 'Llamas are cool EDITED';
@@ @@
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();

-    $this->assertText('Document node Llamas are cool EDITED was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool EDITED was not found. Please upload again.');

     // The node has been marked with the error status.
     $this->node = Node::load(1);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status, 'The node has been marked as untracked, needs new upload.');
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status, 'The node has been marked as untracked, needs new upload.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // Check that the upload succeeded.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Edit the node.
     $edit['title[0][value]'] = 'Llamas are cool EDITED';
@@ @@
     // Re-upload. Must fail now.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Document node Llamas are cool EDITED has been archived. Please upload again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool EDITED has been archived. Please upload again.');

     // The node has been marked with the error status.
     $this->node = Node::load(1);
@@ @@
     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');
   }

   /**
@@ @@
     $this->saveAndKeepPublishedNodeForm($edit, 1);

     // The document was updated automatically and failed.
-    $this->assertText('Document node Llamas are cool EDITED has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool EDITED has been archived. Uploading again.');

     // The node has been marked with the error status.
     $this->node = Node::load(1);
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // Check that the upload succeeded.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Edit the node.
     $edit['title[0][value]'] = 'Llamas are cool EDITED';
@@ @@
     // Re-upload. Must fail now.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Document node Llamas are cool EDITED has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool EDITED has a new version. The document id has been updated for all future interactions. Please try again.');

     // The node has been marked with the error status.
     $this->node = Node::load(1);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_EDITED, $source_status, 'The node has been marked as edited, needs new upload.');
+    $this->assertEquals(Lingotek::STATUS_EDITED, $source_status, 'The node has been marked as edited, needs new upload.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');
   }

   /**
@@ @@
     $this->saveAndKeepPublishedNodeForm($edit, 1);

     // The document was updated automatically and failed.
-    $this->assertText('Document node Llamas are cool EDITED has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool EDITED has a new version. The document id has been updated for all future interactions. Please try again.');

     // The node has been marked with the error status.
     $this->node = Node::load(1);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_EDITED, $source_status, 'The node has been marked as edited, needs new upload.');
+    $this->assertEquals(Lingotek::STATUS_EDITED, $source_status, 'The node has been marked as edited, needs new upload.');
   }

   /**
@@ @@
     $this->saveAndPublishNodeForm($edit);

     // The document was uploaded automatically and failed.
-    $this->assertText('The upload for node Llamas are cool failed. Please try again.');
+    $this->assertSession()->pageTextContains('The upload for node Llamas are cool failed. Please try again.');

     // The node has been marked with the error status.
     $this->node = Node::load(1);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
   }

   /**
@@ @@
     $this->saveAndPublishNodeForm($edit);

     // The document was uploaded automatically and failed.
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // The node has been marked with the error status.
     $this->node = Node::load(1);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
   }

   /**
@@ @@
     $this->saveAndPublishNodeForm($edit);

     // The document was uploaded automatically and failed.
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // The node has been marked with the error status.
     $this->node = Node::load(1);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
   }

   /**
@@ @@
     // Upload the document.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
-    $this->assertLink('Check Upload Status');
+    $this->assertSession()->linkExists('Check Upload Status');

     $this->clickLink('Check Upload Status');

@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status);
-    $this->assertText('The check for node status failed. Please try again.');
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status);
+    $this->assertSession()->pageTextContains('The check for node status failed. Please try again.');
   }

   /**
@@ @@
     // Upload the document.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
-    $this->assertLink('Check Upload Status');
+    $this->assertSession()->linkExists('Check Upload Status');

     // The document has not been imported yet.
     \Drupal::state()->set('lingotek.document_status_completion', FALSE);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status);
-    $this->assertText('The import for node Llamas are cool is still pending.');
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status);
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is still pending.');
   }

   /**
@@ @@
     // Upload the document.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
-    $this->assertLink('Check Upload Status');
+    $this->assertSession()->linkExists('Check Upload Status');
     $this->clickLink('Check Upload Status');

     $this->node = Node::load(1);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status);
-    $this->assertText('Document node Llamas are cool was not found. Please upload again.');
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status);
+    $this->assertSession()->pageTextContains('Document node Llamas are cool was not found. Please upload again.');
   }

   /**
@@ @@
     $this->saveAndKeepPublishedNodeForm($edit, 1);

     // The document was updated automatically and failed.
-    $this->assertText('The update for node Llamas are cool EDITED failed. Please try again.');
+    $this->assertSession()->pageTextContains('The update for node Llamas are cool EDITED failed. Please try again.');

     // The node has been marked with the error status.
     $this->node = Node::load(1);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
   }

   /**
@@ @@
     $this->saveAndKeepPublishedNodeForm($edit, 1);

     // The document was updated automatically and failed.
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // The node has been marked with the error status.
     $this->node = Node::load(1);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
   }

   /**
@@ @@
     $this->saveAndKeepPublishedNodeForm($edit, 1);

     // The document was updated automatically and failed.
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // The node has been marked with the error status.
     $this->node = Node::load(1);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
   }

   /**
@@ @@
     $this->saveAndKeepPublishedNodeForm($edit, 1);

     // The document was updated automatically and failed.
-    $this->assertText('Document node Llamas are cool EDITED was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool EDITED was not found. Please upload again.');

     $this->node = Node::load(1);
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status);
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status);
   }

   /**
@@ @@
     // Upload the document.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $this->clickLink('Request translation');
@@ @@

     // We failed at requesting a translation, but we don't know what happened.
     // So we don't mark as error but keep it on request.
-    $this->assertText('The translation request for node failed. Please try again.');
+    $this->assertSession()->pageTextContains('The translation request for node failed. Please try again.');

     // The node has been marked with the error status.
     $this->node = Node::load(1);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_CURRENT, $source_status, 'The node has not been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_CURRENT, $source_status, 'The node has not been marked as error.');
   }

   /**
@@ @@
     // Upload the document.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $this->clickLink('Request translation');

-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     $this->node = Node::load(1);
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual($source_status, Lingotek::STATUS_CURRENT);
-    $this->assertEqual($translation_service->getTargetStatus($this->node, 'ES'), Lingotek::STATUS_UNTRACKED);
+    $this->assertEquals($source_status, Lingotek::STATUS_CURRENT);
+    $this->assertEquals($translation_service->getTargetStatus($this->node, 'ES'), Lingotek::STATUS_UNTRACKED);
   }

   /**
@@ @@
     // Upload the document.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $this->clickLink('Request translation');

-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     $this->node = Node::load(1);
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual($source_status, Lingotek::STATUS_CURRENT);
-    $this->assertEqual($translation_service->getTargetStatus($this->node, 'ES'), Lingotek::STATUS_UNTRACKED);
+    $this->assertEquals($source_status, Lingotek::STATUS_CURRENT);
+    $this->assertEquals($translation_service->getTargetStatus($this->node, 'ES'), Lingotek::STATUS_UNTRACKED);
   }

   /**
@@ @@
     // Upload the document.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $this->clickLink('Request translation');

-    $this->assertText('Document node Llamas are cool has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool has been archived. Uploading again.');

     $this->node = Node::load(1);
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
@@ @@
     // Upload the document.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $this->clickLink('Request translation');

-    $this->assertText('Document node Llamas are cool was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool was not found. Please upload again.');

     $this->node = Node::load(1);
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual($source_status, Lingotek::STATUS_UNTRACKED);
-    $this->assertEqual($translation_service->getTargetStatus($this->node, 'ES'), Lingotek::STATUS_UNTRACKED);
+    $this->assertEquals($source_status, Lingotek::STATUS_UNTRACKED);
+    $this->assertEquals($translation_service->getTargetStatus($this->node, 'ES'), Lingotek::STATUS_UNTRACKED);
   }

   /**
@@ @@
     // Upload the document.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $this->clickLink('Request translation');

-    $this->assertText('Document node Llamas are cool has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool has a new version. The document id has been updated for all future interactions. Please try again.');

     $this->node = Node::load(1);
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual($source_status, Lingotek::STATUS_CURRENT);
-    $this->assertEqual($translation_service->getTargetStatus($this->node, 'ES'), Lingotek::STATUS_UNTRACKED);
+    $this->assertEquals($source_status, Lingotek::STATUS_CURRENT);
+    $this->assertEquals($translation_service->getTargetStatus($this->node, 'ES'), Lingotek::STATUS_UNTRACKED);
   }

   /**
@@ @@
     // Check that the translate tab is in the node.
     $this->clickLink('Translate');
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $this->clickLink('Request translation');
@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->assertTrue($response['result']['download'], 'Spanish language has been downloaded after notification automatically.');
-    $this->assertEqual('Document downloaded.', $response['messages'][0]);
+    $this->assertEquals('Document downloaded.', $response['messages'][0]);

     $this->drupalGet('node/1/translations');
-    $this->assertText('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldRector
 * AssertIdenticalRector
 * AssertLinkRector
 * AssertNoFieldRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


101) modules/contrib/lingotek/tests/src/Functional/LingotekNodeTranslationFlowNotCurrentToPendingTest.php:74

    ---------- begin diff ----------
@@ @@
     $this->assertNoLingotekRequestTranslationLink('es_MX');
     $this->assertNoLingotekRequestTranslationLink('de_AT');
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $this->assertLingotekCheckSourceStatusLink();
@@ @@
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->assertLingotekRequestTranslationLink('de_AT');
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request the Spanish translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_MX');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // Download the Spanish translation.
     $this->assertLingotekDownloadTargetLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Edit the Source
     $edit = [];
@@ @@
     // Clicking English must init the upload of content.
     $this->assertLingotekUpdateLink();
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool EDITED has been updated.');
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains('Node Llamas are cool EDITED has been updated.');
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $this->assertLingotekCheckSourceStatusLink('dummy-document-hash-id-1');
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool EDITED is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool EDITED is complete.');

     $this->assertTargetStatus('ES', Lingotek::STATUS_PENDING);
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


102) modules/contrib/lingotek/tests/src/Functional/LingotekNodeTranslationDownloadStatusTest.php:83

    ---------- begin diff ----------
@@ @@
     $this->createAndDownloadANodeTranslation(self::PUBLISHED);

     // Ensure that there is one and only one unpublished content.
-    $this->assertText('Not published');
-    $this->assertUniqueText('Not published');
+    $this->assertSession()->pageTextContains('Not published');
+    $this->assertSession()->pageTextContainsOnce('Not published');
   }

   /**
@@ @@
     $this->createAndDownloadANodeTranslation(self::UNPUBLISHED);

     // Ensure that there is one and only one published content.
-    $this->assertText('Published');
-    $this->assertUniqueText('Published');
+    $this->assertSession()->pageTextContains('Published');
+    $this->assertSession()->pageTextContainsOnce('Published');
   }

   /**
@@ @@
     $this->createAndDownloadANodeTranslation(self::PUBLISHED);

     // Ensure that there is more than one published content.
-    $this->assertNoText('Not published');
-    $this->assertNoUniqueText('Published');
+    $this->assertSession()->pageTextNotContains('Not published');
+    $page_text = $this->getSession()->getPage()->getText();
+    $nr_found = substr_count($page_text, 'Published');
+    $this->assertGreaterThan(1, $nr_found, "'Published' found more than once on the page");
   }

   /**
@@ @@
     $this->createAndDownloadANodeTranslation(self::UNPUBLISHED);

     // Ensure that there is more than one unpublished content.
-    $this->assertNoText('Published');
-    $this->assertNoUniqueText('Not published');
+    $this->assertSession()->pageTextNotContains('Published');
+    $page_text = $this->getSession()->getPage()->getText();
+    $nr_found = substr_count($page_text, 'Not published');
+    $this->assertGreaterThan(1, $nr_found, "'Not published' found more than once on the page");
   }

   /**
@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 2);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $this->clickLink('Request translation');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.added_target_locale'));

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.downloaded_locale'));
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertNoTextRector
 * AssertNoUniqueTextRector
 * AssertTextRector
 * AssertUniqueTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


103) modules/contrib/lingotek/tests/src/Functional/LingotekNodeTranslationAppendTypeTitleOptionTest.php:83

    ---------- begin diff ----------
@@ @@
     $edit = [
       'append_type_to_title' => $value,
     ];
-    $this->drupalPostForm('admin/lingotek/settings', $edit, 'Save', [], 'lingoteksettings-tab-preferences-form');
+    $this->drupalGet('admin/lingotek/settings', []);
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-preferences-form');
   }

   /**
@@ @@

     // Check that the title used was the right one.
     $uploaded_title = \Drupal::state()->get('lingotek.uploaded_title');
-    $this->assertIdentical('article (node): Llamas are cool', $uploaded_title, 'The node title was used appending type.');
+    $this->assertSame('article (node): Llamas are cool', $uploaded_title, 'The node title was used appending type.');
   }

   /**
@@ @@

     // Check that the title used was the right one.
     $uploaded_title = \Drupal::state()->get('lingotek.uploaded_title');
-    $this->assertIdentical('Llamas are cool', $uploaded_title, 'The node title was used without appending type.');
+    $this->assertSame('Llamas are cool', $uploaded_title, 'The node title was used without appending type.');
   }

   /**
@@ @@

     // Check that the title used was the right one.
     $uploaded_title = \Drupal::state()->get('lingotek.uploaded_title');
-    $this->assertIdentical('article (node): Llamas are cool', $uploaded_title, 'The node title was used appending type.');
+    $this->assertSame('article (node): Llamas are cool', $uploaded_title, 'The node title was used appending type.');
   }

   /**
@@ @@

     // Check that the title used was the right one.
     $uploaded_title = \Drupal::state()->get('lingotek.uploaded_title');
-    $this->assertIdentical('Llamas are cool', $uploaded_title, 'The node title was used without appending type.');
+    $this->assertSame('Llamas are cool', $uploaded_title, 'The node title was used without appending type.');
   }

   /**
@@ @@

     // Check that the title used was the right one.
     $uploaded_title = \Drupal::state()->get('lingotek.uploaded_title');
-    $this->assertIdentical('article (node): Llamas are cool', $uploaded_title, 'The node title was used appending type.');
+    $this->assertSame('article (node): Llamas are cool', $uploaded_title, 'The node title was used appending type.');
   }

   /**
@@ @@

     // Check that the title used was the right one.
     $uploaded_title = \Drupal::state()->get('lingotek.uploaded_title');
-    $this->assertIdentical('Llamas are cool', $uploaded_title, 'The node title was used without appending type.');
+    $this->assertSame('Llamas are cool', $uploaded_title, 'The node title was used without appending type.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


104) modules/contrib/lingotek/tests/src/Functional/LingotekNodeTabsThemeTest.php:32

    ---------- begin diff ----------
@@ @@
     $edit = [];
     $edit['admin_theme'] = 'seven';
     $edit['use_admin_theme'] = TRUE;
-    $this->drupalPostForm('admin/appearance', $edit, t('Save configuration'));
+    $this->drupalGet('admin/appearance');
+    $this->submitForm($edit, t('Save configuration'));

     // Place the blocks.
     foreach (['bartik', 'seven'] as $theme) {
@@ @@
     $edit['langcode[0][value]'] = 'en';

     $this->saveAndPublishNodeForm($edit);
-    $this->assertText('Current theme: bartik');
+    $this->assertSession()->pageTextContains('Current theme: bartik');

     $this->clickLink('Edit');
-    $this->assertText('Current theme: seven');
+    $this->assertSession()->pageTextContains('Current theme: seven');

     $this->clickLink('Manage Translations');
-    $this->assertText('Current theme: seven');
+    $this->assertSession()->pageTextContains('Current theme: seven');

     $edit = ['use_admin_theme' => FALSE];
-    $this->drupalPostForm('admin/appearance', $edit, t('Save configuration'));
+    $this->drupalGet('admin/appearance');
+    $this->submitForm($edit, t('Save configuration'));

     $this->drupalGet('node/1');
-    $this->assertText('Current theme: bartik');
+    $this->assertSession()->pageTextContains('Current theme: bartik');

     $this->clickLink('Edit');
-    $this->assertText('Current theme: bartik');
+    $this->assertSession()->pageTextContains('Current theme: bartik');

     $this->clickLink('Manage Translations');
-    $this->assertText('Current theme: bartik');
+    $this->assertSession()->pageTextContains('Current theme: bartik');
   }

   /**
@@ @@
     $edit['title[0][value]'] = 'Llamas are cool';
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
+    $this->drupalGet('admin/lingotek/settings');

     // Enable debug operations.
-    $this->drupalPostForm('admin/lingotek/settings', [], 'Enable debug operations');
+    $this->submitForm([], 'Enable debug operations');

     $this->saveAndPublishNodeForm($edit);
-    $this->assertText('Current theme: bartik');
+    $this->assertSession()->pageTextContains('Current theme: bartik');

     $this->clickLink('Edit');
-    $this->assertText('Current theme: seven');
+    $this->assertSession()->pageTextContains('Current theme: seven');

     $this->clickLink('Lingotek Metadata');
-    $this->assertText('Current theme: seven');
+    $this->assertSession()->pageTextContains('Current theme: seven');

     $edit = ['use_admin_theme' => FALSE];
-    $this->drupalPostForm('admin/appearance', $edit, t('Save configuration'));
+    $this->drupalGet('admin/appearance');
+    $this->submitForm($edit, t('Save configuration'));

     $this->drupalGet('node/1');
-    $this->assertText('Current theme: bartik');
+    $this->assertSession()->pageTextContains('Current theme: bartik');

     $this->clickLink('Edit');
-    $this->assertText('Current theme: bartik');
+    $this->assertSession()->pageTextContains('Current theme: bartik');

     $this->clickLink('Lingotek Metadata');
-    $this->assertText('Current theme: bartik');
+    $this->assertSession()->pageTextContains('Current theme: bartik');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


105) modules/contrib/lingotek/tests/src/Functional/LingotekNodeStatusDownloadTargetTest.php:70

    ---------- begin diff ----------
@@ @@
     // And we cannot request yet a translation.
     $this->assertNoLingotekRequestTranslationLink('es_MX');
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $this->assertLingotekCheckSourceStatusLink();
@@ @@
     // And we can already request a translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request the Spanish translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_MX');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // Edit the Source
     $edit = [];
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that the Spanish translation is still 'Ready'.
     $this->assertTargetStatus('ES', Lingotek::STATUS_READY);
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check the status is not Current for source.
     $source_edited = $this->xpath("//a[contains(@class,'language-icon') and contains(@class, 'source-edited') and contains(@title, 'Re-upload (content has changed since last upload)')]");
-    $this->assertEqual(count($source_edited), 1, 'Source is marked as edited.');
+    $this->assertEquals(count($source_edited), 1, 'Source is marked as edited.');
     $this->assertTargetStatus('ES', Lingotek::STATUS_EDITED);

   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


106) modules/contrib/lingotek/tests/src/Functional/LingotekNodeParagraphsTranslationTest.php:104

    ---------- begin diff ----------
@@ @@
     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_content_demo');

-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
     $edit['langcode[0][value]'] = 'en';
     $edit['field_paragraphs_demo[0][subform][field_text_demo][0][value]'] = 'Llamas are very cool';
     $edit['moderation_state[0][state]'] = 'published';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->node = Node::load(1);

@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->verbose(var_export($data, TRUE));
     $this->assertUploadedDataFieldCount($data, 2);
-    $this->assertEqual($data['title'][0]['value'], 'Llamas are cool');
-    $this->assertEqual($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool');
+    $this->assertEquals($data['title'][0]['value'], 'Llamas are cool');
+    $this->assertEquals($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
   }

   /**
@@ @@

     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_content_demo');
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
     $edit['field_paragraphs_demo[1][subform][field_text_demo][0][value]'] = 'Llamas are very cool for the second time';

     $edit['moderation_state[0][state]'] = 'published';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->node = Node::load(1);

@@ @@
     $this->verbose(var_export($serialized_node, TRUE));
     // Main node metadata is there.
     $this->assertTrue(isset($serialized_node['_lingotek_metadata']), 'The Lingotek metadata is included in the extracted data.');
-    $this->assertEqual('node', $serialized_node['_lingotek_metadata']['_entity_type_id'], 'Entity type id is included as metadata.');
-    $this->assertEqual(1, $serialized_node['_lingotek_metadata']['_entity_id'], 'Entity id is included as metadata.');
-    $this->assertEqual(1, $serialized_node['_lingotek_metadata']['_entity_revision'], 'Entity revision id is included as metadata.');
+    $this->assertEquals('node', $serialized_node['_lingotek_metadata']['_entity_type_id'], 'Entity type id is included as metadata.');
+    $this->assertEquals(1, $serialized_node['_lingotek_metadata']['_entity_id'], 'Entity id is included as metadata.');
+    $this->assertEquals(1, $serialized_node['_lingotek_metadata']['_entity_revision'], 'Entity revision id is included as metadata.');
   }

   /**
@@ @@

     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_content_demo');
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
     $edit['field_paragraphs_demo[1][subform][field_text_demo][0][value]'] = 'Llamas are very cool for the second time';

     $edit['moderation_state[0][state]'] = 'published';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->goToContentBulkManagementForm('paragraph');
-    $this->assertNoField('filters[wrapper][label]', 'There is no filter by label as paragraphs have no label.');
+    $this->assertSession()->fieldNotExists('filters[wrapper][label]', 'There is no filter by label as paragraphs have no label.');
   }

   /**
@@ @@

     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_content_demo');
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
     $edit['field_paragraphs_demo[1][subform][field_text_demo][0][value]'] = 'Llamas are very cool for the second time';

     $edit['moderation_state[0][state]'] = 'published';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
+    $this->drupalGet('admin/lingotek/settings', []);

     // Ensure paragraphs tab is enabled.
-    $this->drupalPostForm('admin/lingotek/settings', ['contrib[paragraphs][enable_bulk_management]' => 1], 'Save settings', [], 'lingoteksettings-integrations-form');
+    $this->submitForm(['contrib[paragraphs][enable_bulk_management]' => 1], 'Save settings', 'lingoteksettings-integrations-form');

     $this->goToContentBulkManagementForm('paragraph');
     // Assert there is at least one paragraph in the list.
-    $this->assertText('Image + Text');
+    $this->assertSession()->pageTextContains('Image + Text');

     // Set a filter, and there should still be paragraphs.
     /** @var \Drupal\user\PrivateTempStore $tempStore */
@@ @@
     $tempStore->set('label', 'Llamas');

     $this->goToContentBulkManagementForm('paragraph');
-    $this->assertText('Image + Text');
+    $this->assertSession()->pageTextContains('Image + Text');
   }

   public function testParagraphEditsAreKeptWhenTranslating() {
@@ @@
     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_content_demo');

-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
     $edit['field_paragraphs_demo[0][subform][field_text_demo][0][value]'] = 'Llamas are very cool for the first time';
     $edit['field_paragraphs_demo[1][subform][field_text_demo][0][value]'] = 'Llamas are very cool for the second time';
     $edit['moderation_state[0][state]'] = 'published';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->node = Node::load(1);

@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->verbose(var_export($data, TRUE));
     $this->assertUploadedDataFieldCount($data, 2);
-    $this->assertEqual($data['title'][0]['value'], 'Llamas are cool');
-    $this->assertEqual($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool for the first time');
-    $this->assertEqual($data['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are very cool for the second time');
+    $this->assertEquals($data['title'][0]['value'], 'Llamas are cool');
+    $this->assertEquals($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool for the first time');
+    $this->assertEquals($data['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are very cool for the second time');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     $this->saveAndKeepPublishedNodeForm($edit, 1, FALSE);

-    $this->assertText('Paragraphed article Dogs are cool has been updated.');
-    $this->assertText('Dogs are very cool for the first time');
-    $this->assertText('Dogs are very cool for the second time');
+    $this->assertSession()->pageTextContains('Paragraphed article Dogs are cool has been updated.');
+    $this->assertSession()->pageTextContains('Dogs are very cool for the first time');
+    $this->assertSession()->pageTextContains('Dogs are very cool for the second time');

     // Go back to translations.
     $this->clickLink('Translate');
@@ @@

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Dogs are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Dogs are cool is ready for download.');

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Dogs are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Dogs are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas por primera vez');
-    $this->assertText('Las llamas son chulas por segunda vez');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas por primera vez');
+    $this->assertSession()->pageTextContains('Las llamas son chulas por segunda vez');

     // The saved revision is kept.
     $this->clickLink('Translate');
     $this->clickLink('Dogs are cool');
-    $this->assertText('Dogs are very cool for the first time');
-    $this->assertText('Dogs are very cool for the second time');
+    $this->assertSession()->pageTextContains('Dogs are very cool for the first time');
+    $this->assertSession()->pageTextContains('Dogs are very cool for the second time');
   }

   public function testParagraphRevisionsAreKeptWhenTranslating() {
@@ @@
     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_content_demo');

-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
     $edit['field_paragraphs_demo[0][subform][field_text_demo][0][value]'] = 'Llamas are very cool for the first time';
     $edit['field_paragraphs_demo[1][subform][field_text_demo][0][value]'] = 'Llamas are very cool for the second time';
     $edit['moderation_state[0][state]'] = 'published';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->node = Node::load(1);

@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->verbose(var_export($data, TRUE));
     $this->assertUploadedDataFieldCount($data, 2);
-    $this->assertEqual($data['title'][0]['value'], 'Llamas are cool');
-    $this->assertEqual($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool for the first time');
-    $this->assertEqual($data['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are very cool for the second time');
+    $this->assertEquals($data['title'][0]['value'], 'Llamas are cool');
+    $this->assertEquals($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool for the first time');
+    $this->assertEquals($data['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are very cool for the second time');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@
     $edit['revision'] = 1;
     $this->saveAndUnpublishNodeForm($edit, 1, FALSE);

-    $this->assertText('Paragraphed article Dogs are cool has been updated.');
-    $this->assertText('Dogs are very cool for the first time');
-    $this->assertText('Dogs are very cool for the second time');
+    $this->assertSession()->pageTextContains('Paragraphed article Dogs are cool has been updated.');
+    $this->assertSession()->pageTextContains('Dogs are very cool for the first time');
+    $this->assertSession()->pageTextContains('Dogs are very cool for the second time');

     // Go back to translations.
     $this->clickLink('Translate');
@@ @@
     // Re-upload, as drafts are not re-uploaded automatically.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Llamas are cool was updated and sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Llamas are cool was updated and sent to Lingotek successfully.');

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas por primera vez');
-    $this->assertText('Las llamas son chulas por segunda vez');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas por primera vez');
+    $this->assertSession()->pageTextContains('Las llamas son chulas por segunda vez');

     // The published revision is the one visible.
     $this->clickLink('Translate');
     $this->clickLink('Dogs are cool');
-    $this->assertText('Llamas are cool');
-    $this->assertText('Llamas are very cool for the first time');
-    $this->assertText('Llamas are very cool for the second time');
+    $this->assertSession()->pageTextContains('Llamas are cool');
+    $this->assertSession()->pageTextContains('Llamas are very cool for the first time');
+    $this->assertSession()->pageTextContains('Llamas are very cool for the second time');

     // The pending revision is not updated.
     $this->drupalGet('node/1/latest');
-    $this->assertText('Dogs are very cool for the first time');
-    $this->assertText('Dogs are very cool for the second time');
+    $this->assertSession()->pageTextContains('Dogs are very cool for the first time');
+    $this->assertSession()->pageTextContains('Dogs are very cool for the second time');
   }

   /**
@@ @@
     $this->testNodeWithParagraphsTranslation();

     $this->drupalGet('node/1/edit');
-    $this->drupalPostForm(NULL, [], 'Remove');
-    $this->drupalPostForm(NULL, [], 'Confirm removal');
-    $this->drupalPostForm(NULL, [], 'Save (this translation)');
+    $this->submitForm([], 'Remove');
+    $this->submitForm([], 'Confirm removal');
+    $this->submitForm([], 'Save (this translation)');

     // Check that only the configured fields have been uploaded, including metatags.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
@@ @@

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertNoText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextNotContains('Las llamas son muy chulas');
   }

   /**
@@ @@
     $paragraph->save();

     $this->drupalGet('node/1/edit');
-    $this->drupalPostForm(NULL, [], 'Remove');
-    $this->drupalPostForm(NULL, [], 'Confirm removal');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Remove');
+    $this->submitForm([], 'Confirm removal');
+    $this->submitForm([], 'Save');

     // The content is edited successfully.
-    $this->assertText('Llamas are cool');
+    $this->assertSession()->pageTextContains('Llamas are cool');
   }

   /**
@@ @@

     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_content_demo');
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
     $edit['field_paragraphs_demo[1][subform][field_text_demo][0][value]'] = 'Llamas are very cool for the second time';
     $edit['field_paragraphs_demo[2][subform][field_text_demo][0][value]'] = 'Llamas are very cool for the third time';
     $edit['moderation_state[0][state]'] = 'published';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Check that only the configured fields have been uploaded, including metatags.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     \Drupal::messenger()->addStatus(var_export($data, TRUE));
     $this->assertUploadedDataFieldCount($data, 2);
-    $this->assertEqual($data['title'][0]['value'], 'Llamas are cool');
-    $this->assertEqual($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool for the first time');
-    $this->assertEqual($data['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are very cool for the second time');
-    $this->assertEqual($data['field_paragraphs_demo'][2]['field_text_demo'][0]['value'], 'Llamas are very cool for the third time');
+    $this->assertEquals($data['title'][0]['value'], 'Llamas are cool');
+    $this->assertEquals($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool for the first time');
+    $this->assertEquals($data['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are very cool for the second time');
+    $this->assertEquals($data['field_paragraphs_demo'][2]['field_text_demo'][0]['value'], 'Llamas are very cool for the third time');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas por primera vez');
-    $this->assertText('Las llamas son muy chulas por segunda vez');
-    $this->assertText('Las llamas son muy chulas por tercera vez');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas por primera vez');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas por segunda vez');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas por tercera vez');

     // This is a hack for avoiding writing different lingotek endpoint mocks.
     \Drupal::state()->set('lingotek.uploaded_content_type', 'node+paragraphs_multiple_after_removal');
@@ @@

     $this->drupalGet('node/1/edit');

-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_demo_1_remove');
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_demo_1_confirm_remove');
+    $this->submitForm(NULL, 'field_paragraphs_demo_1_remove');
+    $this->submitForm(NULL, 'field_paragraphs_demo_1_confirm_remove');

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool EDITED';
@@ @@
     $edit['field_paragraphs_demo[0][subform][field_text_demo][0][value]'] = 'Llamas are very cool for the first time EDITED';
     $edit['field_paragraphs_demo[2][subform][field_text_demo][0][value]'] = 'Llamas are very cool for the third time EDITED';
     $edit['revision'] = TRUE;
-    $this->drupalPostForm(NULL, $edit, t('Save (this translation)'));
+    $this->submitForm($edit, t('Save (this translation)'));

-    $this->assertText('Llamas are cool EDITED');
-    $this->assertText('Llamas are very cool for the first time EDITED');
-    $this->assertNoText('Llamas are very cool for the second time EDITED');
-    $this->assertText('Llamas are very cool for the third time EDITED');
+    $this->assertSession()->pageTextContains('Llamas are cool EDITED');
+    $this->assertSession()->pageTextContains('Llamas are very cool for the first time EDITED');
+    $this->assertSession()->pageTextNotContains('Llamas are very cool for the second time EDITED');
+    $this->assertSession()->pageTextContains('Llamas are very cool for the third time EDITED');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically updated, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool EDITED is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool EDITED is complete.');

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool EDITED is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool EDITED is ready for download.');

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool EDITED into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool EDITED into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas EDITADO');
-    $this->assertText('Las llamas son chulas EDITADO');
-    $this->assertText('Las llamas son muy chulas por primera vez EDITADO');
-    $this->assertNoText('Las llamas son muy chulas por segunda vez EDITADO');
-    $this->assertText('Las llamas son muy chulas por tercera vez EDITADO');
+    $this->assertSession()->pageTextContains('Las llamas son chulas EDITADO');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas por primera vez EDITADO');
+    $this->assertSession()->pageTextNotContains('Las llamas son muy chulas por segunda vez EDITADO');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas por tercera vez EDITADO');

     $paragraphs = $this->xpath('//div[contains(@class, "paragraph")]');
     $this->assertCount(2, $paragraphs);
@@ @@
     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_content_demo');

-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
     $edit['langcode[0][value]'] = 'en';
     $edit['field_paragraphs_demo[0][subform][field_text_demo][0][value]'] = 'Llamas are very cool';
     $edit['moderation_state[0][state]'] = 'published';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $metadata = LingotekContentMetadata::loadMultiple();
-    $this->assertEqual(2, count($metadata), 'There is metadata saved for the parent entity and the child entity.');
+    $this->assertEquals(2, count($metadata), 'There is metadata saved for the parent entity and the child entity.');
   }

   /**
@@ @@
     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_content_demo');

-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
     $edit['field_paragraphs_demo[0][subform][field_text_demo][0][value]'] = 'Llamas are very cool';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
     $edit['moderation_state[0][state]'] = 'published';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     Paragraph::load(1)->delete();

@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->verbose(var_export($data, TRUE));
     $this->assertUploadedDataFieldCount($data, 1);
-    $this->assertEqual($data['title'][0]['value'], 'Llamas are cool');
+    $this->assertEquals($data['title'][0]['value'], 'Llamas are cool');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('manual', $used_profile, 'The manual profile was used.');
+    $this->assertSame('manual', $used_profile, 'The manual profile was used.');

     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertNoText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextNotContains('Las llamas son muy chulas');
   }

   /**
@@ @@
     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_content_demo');

-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
     $edit['field_paragraphs_demo[1][subform][field_text_demo][0][value]'] = 'Llamas are cool for the second time';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
     $edit['moderation_state[0][state]'] = 'published';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->goToContentBulkManagementForm();
     $key = $this->getBulkSelectionKey('en', 1);
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that only the configured fields have been uploaded,
     // but not the missing one.
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->verbose(var_export($data, TRUE));
     $this->assertUploadedDataFieldCount($data, 2);
-    $this->assertEqual($data['title'][0]['value'], 'Llamas are cool');
-    $this->assertEqual($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are cool for the first time');
-    $this->assertEqual($data['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are cool for the second time');
+    $this->assertEquals($data['title'][0]['value'], 'Llamas are cool');
+    $this->assertEquals($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are cool for the first time');
+    $this->assertEquals($data['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are cool for the second time');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('manual', $used_profile, 'The manual profile was used.');
+    $this->assertSame('manual', $used_profile, 'The manual profile was used.');

     // Request translation.
     $key = $this->getBulkSelectionKey('en', 1);
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es-ar', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->drupalGet('node/1');
     $this->clickLink('Edit');
-    $this->drupalPostForm(NULL, NULL, t('Remove'));
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Remove'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are very cool';
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => 'download:es-ar',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('es_AR', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('es_AR', \Drupal::state()->get('lingotek.downloaded_locale'));

     $this->drupalGet('node/1/translations');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
     if ($this->paragraphsTranslatable) {
-      $this->assertText('Las llamas son chulas por primera vez');
-      $this->assertText('Las llamas son chulas por segunda vez');
-      $this->assertNoText('Las llamas son chulas por tercera vez');
-      $this->assertNoText('Llamas are very cool for the third time');
+      $this->assertSession()->pageTextContains('Las llamas son chulas por primera vez');
+      $this->assertSession()->pageTextContains('Las llamas son chulas por segunda vez');
+      $this->assertSession()->pageTextNotContains('Las llamas son chulas por tercera vez');
+      $this->assertSession()->pageTextNotContains('Llamas are very cool for the third time');
     }
     else {
-      $this->assertNoText('Las llamas son chulas por primera vez');
-      $this->assertText('Las llamas son chulas por segunda vez');
-      $this->assertText('Llamas are very cool for the third time');
+      $this->assertSession()->pageTextNotContains('Las llamas son chulas por primera vez');
+      $this->assertSession()->pageTextContains('Las llamas son chulas por segunda vez');
+      $this->assertSession()->pageTextContains('Llamas are very cool for the third time');
     }

     $this->clickLink('Translate');
     $this->clickLink('Llamas are very cool');

-    $this->assertText('Llamas are very cool');
-    $this->assertNoText('Llamas are very cool for the first time');
-    $this->assertText('Llamas are very cool for the second time');
-    $this->assertText('Llamas are very cool for the third time');
+    $this->assertSession()->pageTextContains('Llamas are very cool');
+    $this->assertSession()->pageTextNotContains('Llamas are very cool for the first time');
+    $this->assertSession()->pageTextContains('Llamas are very cool for the second time');
+    $this->assertSession()->pageTextContains('Llamas are very cool for the third time');
   }

   public function testEditingAfterNodeWithParagraphsTranslation() {
@@ @@
     $this->drupalGet('node/1/edit');
     $assert_session->fieldValueEquals('field_paragraphs_demo[0][subform][field_text_demo][0][value]', 'Llamas are very cool');

-    $this->drupalPostForm(NULL, NULL, t('Remove'));
-    $this->drupalPostForm(NULL, NULL, t('Confirm removal'));
+    $this->submitForm(NULL, t('Remove'));
+    $this->submitForm(NULL, t('Confirm removal'));

     $page->pressButton('Save (this translation)');
     $assert_session->pageTextContains('Llamas are cool has been updated.');
@@ @@
     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_content_demo');

-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
     $edit['langcode[0][value]'] = 'en';
     $edit['field_paragraphs_demo[0][subform][field_text_demo][0][value]'] = 'Llamas are very cool';
     $edit['moderation_state[0][state]'] = 'published';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->node = Node::load(1);

@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->verbose(var_export($data, TRUE));
     $this->assertUploadedDataFieldCount($data, 2);
-    $this->assertEqual($data['title'][0]['value'], 'Llamas are cool');
-    $this->assertEqual($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool');
+    $this->assertEquals($data['title'][0]['value'], 'Llamas are cool');
+    $this->assertEquals($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool');

     // Create a translation.
     /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
@@ @@

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');

     $this->drupalGet('es-ar/node/1/edit');
     $assert_session->fieldValueEquals('field_paragraphs_demo[0][subform][field_text_demo][0][value]', 'Las llamas son muy chulas');
@@ @@
     $this->drupalGet('node/1/edit');
     $assert_session->fieldValueEquals('field_paragraphs_demo[0][subform][field_text_demo][0][value]', 'Llamas are very cool');

-    $this->drupalPostForm(NULL, NULL, t('Remove'));
-    $this->drupalPostForm(NULL, NULL, t('Confirm removal'));
+    $this->submitForm(NULL, t('Remove'));
+    $this->submitForm(NULL, t('Confirm removal'));

     $page->pressButton('Save (this translation)');
     $assert_session->pageTextContains('Llamas are cool has been updated.');
@@ @@
     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_content_demo');

-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
     $edit['field_paragraphs_demo[1][subform][field_text_demo][0][value]'] = 'Llamas are cool for the second time';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
     $edit['moderation_state[0][state]'] = 'published';
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->goToContentBulkManagementForm();
     $key = $this->getBulkSelectionKey('en', 1);
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that only the configured fields have been uploaded,
     // but not the missing one.
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->verbose(var_export($data, TRUE));
     $this->assertUploadedDataFieldCount($data, 2);
-    $this->assertEqual($data['title'][0]['value'], 'Llamas are cool');
-    $this->assertEqual($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are cool for the first time');
-    $this->assertEqual($data['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are cool for the second time');
+    $this->assertEquals($data['title'][0]['value'], 'Llamas are cool');
+    $this->assertEquals($data['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are cool for the first time');
+    $this->assertEquals($data['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are cool for the second time');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('manual', $used_profile, 'The manual profile was used.');
+    $this->assertSame('manual', $used_profile, 'The manual profile was used.');

     $this->drupalGet('node/1');
     $this->clickLink('Edit');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('es-ar'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Download all translations.
     $this->goToContentBulkManagementForm();
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->drupalGet('node/1/translations');

     // The content is translated and published in all languages.
-    $this->assertLink('I lama sono belle');
-    $this->assertLink('Las llamas son chulas es-ES');
-    $this->assertText('Las llamas son chulas');
-    $this->assertLink('Dogs are cool');
+    $this->assertSession()->linkExists('I lama sono belle');
+    $this->assertSession()->linkExists('Las llamas son chulas es-ES');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->linkExists('Dogs are cool');

     $this->clickLink('I lama sono belle');

-    $this->assertText('I lama sono belle');
-    $this->assertText('I lama sono belle la prima volta');
-    $this->assertText('I lama sono belle la seconda volta');
+    $this->assertSession()->pageTextContains('I lama sono belle');
+    $this->assertSession()->pageTextContains('I lama sono belle la prima volta');
+    $this->assertSession()->pageTextContains('I lama sono belle la seconda volta');

     $this->drupalGet('node/1/translations');
     $this->clickLink('Las llamas son chulas es-ES');

-    $this->assertText('Las llamas son chulas es-ES');
-    $this->assertText('Las llamas son chulas por primera vez es-ES');
-    $this->assertText('Las llamas son chulas por segunda vez es-ES');
+    $this->assertSession()->pageTextContains('Las llamas son chulas es-ES');
+    $this->assertSession()->pageTextContains('Las llamas son chulas por primera vez es-ES');
+    $this->assertSession()->pageTextContains('Las llamas son chulas por segunda vez es-ES');

     $this->drupalGet('node/1/translations');
     $this->clickLink('Dogs are cool');

-    $this->assertText('Dogs are cool');
-    $this->assertNoText('Llamas are cool for the first time');
-    $this->assertNoText('Llamas are cool for the second time');
-    $this->assertText('Dogs are cool for the first time');
-    $this->assertText('Dogs are cool for the second time');
+    $this->assertSession()->pageTextContains('Dogs are cool');
+    $this->assertSession()->pageTextNotContains('Llamas are cool for the first time');
+    $this->assertSession()->pageTextNotContains('Llamas are cool for the second time');
+    $this->assertSession()->pageTextContains('Dogs are cool for the first time');
+    $this->assertSession()->pageTextContains('Dogs are cool for the second time');
   }

   protected function setParagraphFieldsTranslatability(): void {
@@ @@
     $edit = [];
     $edit['settings[node][paragraphed_content_demo][fields][field_paragraphs_demo]'] = 1;
     $edit['settings[paragraph][image_text][fields][field_text_demo]'] = 1;
-    $this->drupalPostForm('/admin/config/regional/content-language', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/regional/content-language');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('Settings successfully updated.');
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertLinkRector
 * AssertNoFieldRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


107) modules/contrib/lingotek/tests/src/Functional/LingotekNodeParagraphsSettingsTest.php:81

    ---------- begin diff ----------
@@ @@
    */
   public function testDisablingContentTranslationDoesntDisableLingotekTranslationForParagraphs() {
     $this->drupalGet('admin/lingotek/settings');
-    $this->assertFieldByName('node[paragraphed_content_demo][fields][field_paragraphs_demo]', TRUE);
-    $this->assertFieldByName('paragraph[image_text][fields][field_text_demo]', TRUE);
+    $this->assertSession()->fieldValueEquals('node[paragraphed_content_demo][fields][field_paragraphs_demo]', TRUE);
+    $this->assertSession()->fieldValueEquals('paragraph[image_text][fields][field_text_demo]', TRUE);

     $edit = [];
     $edit['settings[node][paragraphed_content_demo][fields][field_paragraphs_demo]'] = FALSE;
     $edit['settings[paragraph][image_text][fields][field_text_demo]'] = FALSE;
-    $this->drupalPostForm('/admin/config/regional/content-language', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/regional/content-language');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('Settings successfully updated.');

     $this->drupalGet('admin/lingotek/settings');
     // The paragraph is still enabled.
-    $this->assertFieldByName('node[paragraphed_content_demo][fields][field_paragraphs_demo]', TRUE);
+    $this->assertSession()->fieldValueEquals('node[paragraphed_content_demo][fields][field_paragraphs_demo]', TRUE);
     // The text field was disabled, and it's not even present.
     /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotekConfig */
     $lingotekConfig = \Drupal::service('lingotek.configuration');
     $this->assertFalse($lingotekConfig->isFieldLingotekEnabled('paragraph', 'image_text', 'field_text_demo'));
-    $this->assertNoFieldByName('paragraph[image_text][fields][field_text_demo]');
+    $this->assertSession()->fieldValueNotEquals('paragraph[image_text][fields][field_text_demo]', '');
   }

   protected function setParagraphFieldsTranslatability(): void {
@@ @@
     $edit = [];
     $edit['settings[node][paragraphed_content_demo][fields][field_paragraphs_demo]'] = 1;
     $edit['settings[paragraph][image_text][fields][field_text_demo]'] = 1;
-    $this->drupalPostForm('/admin/config/regional/content-language', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/regional/content-language');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('Settings successfully updated.');
   }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


108) modules/contrib/lingotek/tests/src/Functional/LingotekNodeNotificationCallbackTest.php:104

    ---------- begin diff ----------
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));

     $this->goToContentBulkManagementForm();

@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     $this->goToContentBulkManagementForm();

@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));

     $this->goToContentBulkManagementForm();

@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the target is ready.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'es'));

     $this->goToContentBulkManagementForm();
   }
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));

     $this->goToContentBulkManagementForm();
     $this->clickLink('ES');
@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
     // Assert the target is intermediate.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));

     // Assert a translation has been downloaded.
     $this->drupalGet('node/1/translations');
@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the target is ready.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'es'));

     $this->goToContentBulkManagementForm();
   }
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));

     $this->goToContentBulkManagementForm();
     $this->clickLink('ES');
@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));

     // Simulate the notification of content successfully translated.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));

     $this->goToContentBulkManagementForm();
     $this->clickLink('ES');
@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));

     // Simulate the notification of content successfully translated.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));

     $this->goToContentBulkManagementForm();
     $this->clickLink('ES');
@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
     // Assert the target is intermediate.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));

     // Assert a translation has NOT been downloaded.
     $this->drupalGet('node/1/translations');
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));

     $this->goToContentBulkManagementForm();
     $this->clickLink('ES');
@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
     // Assert the target is intermediate.
-    $this->assertIdentical(Lingotek::STATUS_INTERMEDIATE, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_INTERMEDIATE, $content_translation_service->getTargetStatus($node, 'es'));

     // Assert a translation has been downloaded.
     $this->drupalGet('node/1/translations');
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');

     // Assert the content is edited, but not auto-uploaded.
-    $this->assertIdentical(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_UNTRACKED, $content_translation_service->getSourceStatus($node));

     $this->goToContentBulkManagementForm();
     // Clicking English must init the upload of content.
@@ @@
     $response = json_decode($request->getBody(), TRUE);

     // Translations are not requested.
-    $this->assertIdentical([], $response['result']['request_translations'], 'No translations has been requested after notification automatically.');
+    $this->assertSame([], $response['result']['request_translations'], 'No translations has been requested after notification automatically.');

     $this->goToContentBulkManagementForm();

@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
     // Assert the target is ready to be requested.
-    $this->assertIdentical(Lingotek::STATUS_REQUEST, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_REQUEST, $content_translation_service->getTargetStatus($node, 'es'));

     // Go to the bulk node management page and request a translation.
     $this->goToContentBulkManagementForm();
@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the target is ready.
-    $this->assertIdentical(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'es'));

     // Go to the bulk node management page and download them.
     $this->goToContentBulkManagementForm();
@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the target is current.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'es'));
   }

   /**
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));

     $this->goToContentBulkManagementForm();

@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical(['de', 'it'], $response['result']['request_translations'], 'German and Italian languages has been requested after notification automatically.');
+    $this->assertSame(['de', 'it'], $response['result']['request_translations'], 'German and Italian languages has been requested after notification automatically.');

     $this->goToContentBulkManagementForm();

@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_REQUEST, $content_translation_service->getTargetStatus($node, 'es'));
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'de'));
+    $this->assertSame(Lingotek::STATUS_REQUEST, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'de'));
     // We assert for the UI, as the status is not really stored.
     // TODO: This should actually be stored.
     $this->assertTargetStatus('ca', Lingotek::STATUS_DISABLED);
@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the target is ready.
-    $this->assertIdentical(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'es'));
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'de'));
+    $this->assertSame(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'de'));
     // We assert for the UI, as the status is not really stored.
     // TODO: This should actually be stored.
     $this->assertTargetStatus('ca', Lingotek::STATUS_DISABLED);
@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the target is current.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'es'));
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'de'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'de'));
   }

   /**
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));

     $this->goToContentBulkManagementForm();

@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     $this->goToContentBulkManagementForm();

@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
-    $this->assertIdentical(Lingotek::STATUS_REQUEST, $content_translation_service->getTargetStatus($node, 'de'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_REQUEST, $content_translation_service->getTargetStatus($node, 'de'));

     $this->goToContentBulkManagementForm();

@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the target is ready.
-    $this->assertIdentical(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'es'));
-    $this->assertIdentical(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'de'));
+    $this->assertSame(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'de'));

     // Go to the bulk node management page and download them.
     $this->goToContentBulkManagementForm();
@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the target is current.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'es'));
-    $this->assertIdentical(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'de'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'de'));
   }

   /**
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));

     $this->goToContentBulkManagementForm();

@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical(['it', 'es'], $response['result']['request_translations'], 'Spanish and Italian languages have been requested after notification automatically.');
+    $this->assertSame(['it', 'es'], $response['result']['request_translations'], 'Spanish and Italian languages have been requested after notification automatically.');

     /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
     $lingotek_config = \Drupal::service('lingotek.configuration');
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Italian language has not been requested after notification automatically because it is disabled.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Italian language has not been requested after notification automatically because it is disabled.');
   }

   /**
@@ @@

     // Upload the node.
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request languages.
     $languages = [
@@ @@
     ];
     foreach ($languages as $langcode => $locale) {
       $this->clickLink($langcode);
-      $this->assertText(new FormattableMarkup("Locale '@locale' was added as a translation target for node Llamas are cool.", ['@locale' => $locale]));
+      $this->assertSession()->pageTextContains(new FormattableMarkup("Locale '@locale' was added as a translation target for node Llamas are cool.", ['@locale' => $locale]));
     }

     /** @var \GuzzleHttp\Promise\PromiseInterface[] $requests */
@@ @@

     // All the links are current.
     $current_links = $this->xpath("//a[contains(@class,'language-icon') and contains(@class, 'target-current')]");
-    $this->assertEqual(count($current_links), count($languages) - $count, new FormattableMarkup('Various languages (@var) are current.', ['@var' => count($languages) - $count]));
+    $this->assertEquals(count($current_links), count($languages) - $count, new FormattableMarkup('Various languages (@var) are current.', ['@var' => count($languages) - $count]));
     $this->assertTrue(TRUE, new FormattableMarkup('@count target languages failed, but error where given back so the TMS can retry.', ['@count' => $count]));
-    $this->assertEqual(5, count($current_links), new FormattableMarkup('All languages (@var) are current.', ['@var' => count($current_links)]));
+    $this->assertEquals(5, count($current_links), new FormattableMarkup('All languages (@var) are current.', ['@var' => count($current_links)]));

     $this->clickLink('Llamas are cool');
     $this->clickLink('Translate');
@@ @@
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
     $this->assertTrue($response['result']['download'], 'Spanish language has been downloaded after notification automatically.');
-    $this->assertEqual('Document downloaded.', $response['messages'][0]);
+    $this->assertEquals('Document downloaded.', $response['messages'][0]);

     // Go to the bulk node management page.
     $this->goToContentBulkManagementForm();
@@ @@

     // All the links are current.
     $current_links = $this->xpath("//a[contains(@class,'language-icon') and contains(@class, 'target-current')]");
-    $this->assertEqual(count($current_links), 1, 'Translation "es_ES" is current.');
+    $this->assertEquals(count($current_links), 1, 'Translation "es_ES" is current.');

     // We ensure it fails.
     \Drupal::state()->set('lingotek.must_error_in_download', TRUE);
@@ @@
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
     $this->assertFalse(isset($response['result']['download']), 'Italian language has not been downloaded after notification automatically.');
-    $this->assertEqual('Download of target it_IT for document dummy-document-hash-id failed', $response['messages'][0]);
+    $this->assertEquals('Download of target it_IT for document dummy-document-hash-id failed', $response['messages'][0]);

     $url = Url::fromRoute('lingotek.notify', [], [
       'query' => [
@@ @@
     }
     catch (ServerException $exception) {
       if ($exception->getCode() === Response::HTTP_SERVICE_UNAVAILABLE) {
-        $this->pass('The request returned a 503 status code.');
-      }
-      else {
+      } else {
         $this->fail('The request didn\'t fail with the expected status code.');
       }
     }
@@ @@

     // Download the Italian translation.
     $this->clickLink('IT');
-    $this->assertText('The download for node Llamas are cool failed. Please try again.');
+    $this->assertSession()->pageTextContains('The download for node Llamas are cool failed. Please try again.');

     // Check the right class is added.
     $this->assertTargetStatus('IT', Lingotek::STATUS_ERROR);
@@ @@
     // Check that the Target Status is Error
     $node = Node::load(1);
     $content_translation_service = \Drupal::service('lingotek.content_translation');
-    $this->assertIdentical(Lingotek::STATUS_ERROR, $content_translation_service->getTargetStatus($node, 'it'));
+    $this->assertSame(Lingotek::STATUS_ERROR, $content_translation_service->getTargetStatus($node, 'it'));
   }

   /**
@@ @@

     // All the links are current.
     $current_links = $this->xpath("//a[contains(@class,'language-icon') and contains(@class, 'target-current')]");
-    $this->assertEqual(count($current_links), 2, 'Translation "es_ES" and "it_IT" are current.');
+    $this->assertEquals(count($current_links), 2, 'Translation "es_ES" and "it_IT" are current.');

     // Simulate the notification of target deleted.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));

     $this->goToContentBulkManagementForm();

@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     $this->goToContentBulkManagementForm();

@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));

     $this->goToContentBulkManagementForm();

@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     $this->assertNull($content_translation_service->getDocumentId($node));
-    $this->assertIdentical(Lingotek::STATUS_ARCHIVED, $content_translation_service->getSourceStatus($node));
-    $this->assertIdentical(Lingotek::STATUS_ARCHIVED, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_ARCHIVED, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_ARCHIVED, $content_translation_service->getTargetStatus($node, 'es'));
   }

   /**
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
-    $this->assertIdentical($content_translation_service->getDocumentId($node), 'dummy-document-hash-id');
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame($content_translation_service->getDocumentId($node), 'dummy-document-hash-id');

     $this->goToContentBulkManagementForm();

@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical($response['messages'][0], 'Document import for entity Llamas are cool failed. Reverting dummy-document-hash-id to previous id (NULL)');
+    $this->assertSame($response['messages'][0], 'Document import for entity Llamas are cool failed. Reverting dummy-document-hash-id to previous id (NULL)');

     $this->goToContentBulkManagementForm();

@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     $this->assertNull($content_translation_service->getDocumentId($node));
-    $this->assertIdentical(Lingotek::STATUS_ERROR, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_ERROR, $content_translation_service->getSourceStatus($node));
   }

   /**
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
-    $this->assertIdentical($content_translation_service->getDocumentId($node), 'dummy-document-hash-id');
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame($content_translation_service->getDocumentId($node), 'dummy-document-hash-id');

     $this->goToContentBulkManagementForm();

@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     $this->goToContentBulkManagementForm();

@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));

     // Edit the node.
     $edit = [];
@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
     // Assert the document id changed.
-    $this->assertIdentical($content_translation_service->getDocumentId($node), 'dummy-document-hash-id-1');
+    $this->assertSame($content_translation_service->getDocumentId($node), 'dummy-document-hash-id-1');

     // Simulate the notification of failed import document.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);

-    $this->assertIdentical($response['messages'][0], 'Document import for entity Llamas are cool EDITED failed. Reverting dummy-document-hash-id-1 to previous id dummy-document-hash-id');
+    $this->assertSame($response['messages'][0], 'Document import for entity Llamas are cool EDITED failed. Reverting dummy-document-hash-id-1 to previous id dummy-document-hash-id');

     $this->goToContentBulkManagementForm();

@@ @@

     // Assert the document id was restored.
     $this->assertEquals($content_translation_service->getDocumentId($node), 'dummy-document-hash-id');
-    $this->assertIdentical(Lingotek::STATUS_ERROR, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_ERROR, $content_translation_service->getSourceStatus($node));
   }

   /**
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
-    $this->assertIdentical($content_translation_service->getDocumentId($node), 'dummy-document-hash-id');
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame($content_translation_service->getDocumentId($node), 'dummy-document-hash-id');

     $this->goToContentBulkManagementForm();

@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     $this->goToContentBulkManagementForm();

@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));

     // Edit the node.
     $edit = [];
@@ @@
     ConfigurableLanguage::createFromLangcode('it')->save();

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
     // Assert the document id changed.
-    $this->assertIdentical($content_translation_service->getDocumentId($node), 'dummy-document-hash-id-1');
+    $this->assertSame($content_translation_service->getDocumentId($node), 'dummy-document-hash-id-1');

     // Simulate the notification of content successfully updated.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical(['it'], $response['result']['request_translations'], 'Italian language has been requested after notification automatically.');
+    $this->assertSame(['it'], $response['result']['request_translations'], 'Italian language has been requested after notification automatically.');

     $this->goToContentBulkManagementForm();

@@ @@

     // Assert the document id and the CURRENT status.
     $this->assertEquals($content_translation_service->getDocumentId($node), 'dummy-document-hash-id-1');
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'it'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'it'));
   }

   /**
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
-    $this->assertIdentical($content_translation_service->getDocumentId($node), 'dummy-document-hash-id');
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame($content_translation_service->getDocumentId($node), 'dummy-document-hash-id');

     // Simulate the notification of content successfully uploaded.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     $this->goToContentBulkManagementForm();

@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));

     // Simulate the notification of document_cancelled document.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical($response['messages'][0], 'Document Llamas are cool cancelled in TMS.');
+    $this->assertSame($response['messages'][0], 'Document Llamas are cool cancelled in TMS.');

     $this->goToContentBulkManagementForm();

@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     $this->assertNull($content_translation_service->getDocumentId($node));
-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $content_translation_service->getSourceStatus($node));
-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $content_translation_service->getTargetStatus($node, 'es'));
   }

   /**
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
-    $this->assertIdentical($content_translation_service->getDocumentId($node), 'dummy-document-hash-id');
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame($content_translation_service->getDocumentId($node), 'dummy-document-hash-id');

     // Simulate the notification of content successfully uploaded.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     $this->goToContentBulkManagementForm();

@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));

     // Simulate the notification of document_cancelled document.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical($response['messages'][0], 'Document Llamas are cool target es_ES cancelled in TMS.');
+    $this->assertSame($response['messages'][0], 'Document Llamas are cool target es_ES cancelled in TMS.');

     $this->goToContentBulkManagementForm();

     $node = $this->resetStorageCachesAndReloadNode();

-    $this->assertIdentical('dummy-document-hash-id', $content_translation_service->getDocumentId($node));
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame('dummy-document-hash-id', $content_translation_service->getDocumentId($node));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $content_translation_service->getTargetStatus($node, 'es'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * PassRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


109) modules/contrib/lingotek/tests/src/Functional/LingotekNodeNotificationCallbackQueueWorkerTest.php:90

    ---------- begin diff ----------
@@ @@
     $content_translation_service = \Drupal::service('lingotek.content_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));

     $this->goToContentBulkManagementForm();

@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     $this->goToContentBulkManagementForm();

@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));

     $this->goToContentBulkManagementForm();

@@ @@
     $node = $this->resetStorageCachesAndReloadNode();

     // Assert the target is ready, but was not downloaded.
-    $this->assertIdentical(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'es'));

     $this->goToContentBulkManagementForm();
     $this->assertTargetStatus('ES', Lingotek::STATUS_READY);
@@ @@

     // Upload the node.
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request languages.
     $languages = [
@@ @@
     ];
     foreach ($languages as $langcode => $locale) {
       $this->clickLink($langcode);
-      $this->assertText(new FormattableMarkup("Locale '@locale' was added as a translation target for node Llamas are cool.", ['@locale' => $locale]));
+      $this->assertSession()->pageTextContains(new FormattableMarkup("Locale '@locale' was added as a translation target for node Llamas are cool.", ['@locale' => $locale]));
     }

     /** @var \GuzzleHttp\Promise\PromiseInterface[] $requests */
@@ @@

     // All the links are ready.
     $current_links = $this->xpath("//a[contains(@class,'language-icon') and contains(@class, 'target-ready')]");
-    $this->assertEqual(count($current_links), count($languages) - $count, new FormattableMarkup('Various languages (@var) are ready.', ['@var' => count($languages) - $count]));
+    $this->assertEquals(count($current_links), count($languages) - $count, new FormattableMarkup('Various languages (@var) are ready.', ['@var' => count($languages) - $count]));
     $this->assertTrue(TRUE, new FormattableMarkup('@count target languages failed, but error where given back so the TMS can retry.', ['@count' => $count]));
-    $this->assertEqual(5, count($current_links), new FormattableMarkup('All languages (@var) are ready.', ['@var' => count($current_links)]));
+    $this->assertEquals(5, count($current_links), new FormattableMarkup('All languages (@var) are ready.', ['@var' => count($current_links)]));

     // Run cron.
     $this->container->get('cron')->run();
@@ @@
     $this->goToContentBulkManagementForm();

     $current_links = $this->xpath("//a[contains(@class,'language-icon') and contains(@class, 'target-current')]");
-    $this->assertEqual(count($current_links), count($languages) - $count, new FormattableMarkup('Various languages (@var) are current.', ['@var' => count($languages) - $count]));
+    $this->assertEquals(count($current_links), count($languages) - $count, new FormattableMarkup('Various languages (@var) are current.', ['@var' => count($languages) - $count]));
     $this->assertTrue(TRUE, new FormattableMarkup('@count target languages failed, but error where given back so the TMS can retry.', ['@count' => $count]));
-    $this->assertEqual(5, count($current_links), new FormattableMarkup('All languages (@var) are current.', ['@var' => count($current_links)]));
+    $this->assertEquals(5, count($current_links), new FormattableMarkup('All languages (@var) are current.', ['@var' => count($current_links)]));
   }

   /**
@@ @@
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
     $this->assertTrue($response['result']['download_queued'], 'Spanish language has been queued after notification automatically.');
-    $this->assertEqual('Download for target es_ES in document dummy-document-hash-id has been queued.', $response['messages'][0]);
+    $this->assertEquals('Download for target es_ES in document dummy-document-hash-id has been queued.', $response['messages'][0]);

     // Go to the bulk node management page.
     $this->goToContentBulkManagementForm();
@@ @@
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
     $this->assertTrue($response['result']['download_queued'], 'Italian language has been queued after notification automatically.');
-    $this->assertEqual('Download for target it_IT in document dummy-document-hash-id has been queued.', $response['messages'][0]);
+    $this->assertEquals('Download for target it_IT in document dummy-document-hash-id has been queued.', $response['messages'][0]);

     $url = Url::fromRoute('lingotek.notify', [], [
       'query' => [
@@ @@

     // Try to re-download the Italian translation.
     $this->clickLink('IT');
-    $this->assertText('The download for node Llamas are cool failed. Please try again.');
+    $this->assertSession()->pageTextContains('The download for node Llamas are cool failed. Please try again.');

     // Check that the Target Status is Error
     $node = Node::load(1);
     $content_translation_service = \Drupal::service('lingotek.content_translation');
-    $this->assertIdentical(Lingotek::STATUS_ERROR, $content_translation_service->getTargetStatus($node, 'it'));
+    $this->assertSame(Lingotek::STATUS_ERROR, $content_translation_service->getTargetStatus($node, 'it'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


110) modules/contrib/lingotek/tests/src/Functional/LingotekNodeNestedParagraphsTranslationTest.php:101

    ---------- begin diff ----------
@@ @@
     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_nested_content');

-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->verbose(var_export($data, TRUE));
     $this->assertUploadedDataFieldCount($data, 2);
-    $this->assertEqual($data['title'][0]['value'], 'Llamas are cool');
-    $this->assertEqual($data['field_paragraph_container'][0]['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool');
+    $this->assertEquals($data['title'][0]['value'], 'Llamas are cool');
+    $this->assertEquals($data['field_paragraph_container'][0]['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
   }

   /**
@@ @@

     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_nested_content');
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
     $this->verbose(var_export($serialized_node, TRUE));
     // Main node metadata is there.
     $this->assertTrue(isset($serialized_node['_lingotek_metadata']), 'The Lingotek metadata is included in the extracted data.');
-    $this->assertEqual('node', $serialized_node['_lingotek_metadata']['_entity_type_id'], 'Entity type id is included as metadata.');
-    $this->assertEqual(1, $serialized_node['_lingotek_metadata']['_entity_id'], 'Entity id is included as metadata.');
-    $this->assertEqual(1, $serialized_node['_lingotek_metadata']['_entity_revision'], 'Entity revision id is included as metadata.');
+    $this->assertEquals('node', $serialized_node['_lingotek_metadata']['_entity_type_id'], 'Entity type id is included as metadata.');
+    $this->assertEquals(1, $serialized_node['_lingotek_metadata']['_entity_id'], 'Entity id is included as metadata.');
+    $this->assertEquals(1, $serialized_node['_lingotek_metadata']['_entity_revision'], 'Entity revision id is included as metadata.');
   }

   /**
@@ @@

     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_nested_content');
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
     $this->saveAndPublishNodeForm($edit, NULL);

     $this->goToContentBulkManagementForm('paragraph');
-    $this->assertNoField('filters[wrapper][label]', 'There is no filter by label as paragraphs have no label.');
+    $this->assertSession()->fieldNotExists('filters[wrapper][label]', 'There is no filter by label as paragraphs have no label.');
   }

   /**
@@ @@

     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_nested_content');
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
     $edit['field_paragraph_container[0][subform][field_paragraphs_demo][1][subform][field_text_demo][0][value]'] = 'Llamas are very cool for the second time';

     $this->saveAndPublishNodeForm($edit, NULL);
+    $this->drupalGet('admin/lingotek/settings', []);

     // Ensure paragraphs tab is enabled.
-    $this->drupalPostForm('admin/lingotek/settings', ['contrib[paragraphs][enable_bulk_management]' => 1], 'Save settings', [], 'lingoteksettings-integrations-form');
+    $this->submitForm(['contrib[paragraphs][enable_bulk_management]' => 1], 'Save settings', 'lingoteksettings-integrations-form');

     $this->goToContentBulkManagementForm('paragraph');
     // Assert there is at least one paragraph in the list.
-    $this->assertText('Image + Text');
+    $this->assertSession()->pageTextContains('Image + Text');

     // Set a filter, and there should still be paragraphs.
     /** @var \Drupal\user\PrivateTempStore $tempStore */
@@ @@
     $tempStore->set('label', 'Llamas');

     $this->goToContentBulkManagementForm('paragraph');
-    $this->assertText('Image + Text');
+    $this->assertSession()->pageTextContains('Image + Text');
   }

   public function testParagraphEditsAreKeptWhenTranslating() {
@@ @@
     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_nested_content');

-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $this->createNestedParagraphedNode('automatic');

@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->verbose(var_export($data, TRUE));
     $this->assertUploadedDataFieldCount($data, 2);
-    $this->assertEqual($data['title'][0]['value'], 'Llamas are cool');
-    $this->assertEqual($data['field_paragraph_container'][0]['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool for the first time');
-    $this->assertEqual($data['field_paragraph_container'][0]['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are very cool for the second time');
+    $this->assertEquals($data['title'][0]['value'], 'Llamas are cool');
+    $this->assertEquals($data['field_paragraph_container'][0]['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool for the first time');
+    $this->assertEquals($data['field_paragraph_container'][0]['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are very cool for the second time');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     $this->saveAndKeepPublishedNodeForm($edit, 1, FALSE);

-    $this->assertText('Paragraphed nested content Dogs are cool has been updated.');
-    $this->assertText('Dogs are very cool for the first time');
-    $this->assertText('Dogs are very cool for the second time');
+    $this->assertSession()->pageTextContains('Paragraphed nested content Dogs are cool has been updated.');
+    $this->assertSession()->pageTextContains('Dogs are very cool for the first time');
+    $this->assertSession()->pageTextContains('Dogs are very cool for the second time');

     // Go back to translations.
     $this->clickLink('Translate');
@@ @@

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Dogs are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Dogs are cool is ready for download.');

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Dogs are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Dogs are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas por primera vez');
-    $this->assertText('Las llamas son muy chulas por segunda vez');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas por primera vez');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas por segunda vez');

     // The saved revision is kept.
     $this->clickLink('Translate');
     $this->clickLink('Dogs are cool');
-    $this->assertText('Dogs are very cool for the first time');
-    $this->assertText('Dogs are very cool for the second time');
+    $this->assertSession()->pageTextContains('Dogs are very cool for the first time');
+    $this->assertSession()->pageTextContains('Dogs are very cool for the second time');
   }

   public function testParagraphRevisionsAreKeptWhenTranslating() {
@@ @@
     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_nested_content');

-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $this->createNestedParagraphedNode('automatic');

@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->verbose(var_export($data, TRUE));
     $this->assertUploadedDataFieldCount($data, 2);
-    $this->assertEqual($data['title'][0]['value'], 'Llamas are cool');
-    $this->assertEqual($data['field_paragraph_container'][0]['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool for the first time');
-    $this->assertEqual($data['field_paragraph_container'][0]['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are very cool for the second time');
-    $this->assertEqual($data['field_paragraph_container'][1]['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Dogs are very cool for the first time');
-    $this->assertEqual($data['field_paragraph_container'][1]['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Dogs are very cool for the second time');
+    $this->assertEquals($data['title'][0]['value'], 'Llamas are cool');
+    $this->assertEquals($data['field_paragraph_container'][0]['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool for the first time');
+    $this->assertEquals($data['field_paragraph_container'][0]['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are very cool for the second time');
+    $this->assertEquals($data['field_paragraph_container'][1]['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Dogs are very cool for the first time');
+    $this->assertEquals($data['field_paragraph_container'][1]['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Dogs are very cool for the second time');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@
     $edit['revision'] = 1;
     $this->saveAndUnpublishNodeForm($edit, 1, FALSE);

-    $this->assertText('Paragraphed nested content Cats are cool has been updated.');
-    $this->assertText('Cats are very cool for the first time');
-    $this->assertText('Cats are very cool for the second time');
+    $this->assertSession()->pageTextContains('Paragraphed nested content Cats are cool has been updated.');
+    $this->assertSession()->pageTextContains('Cats are very cool for the first time');
+    $this->assertSession()->pageTextContains('Cats are very cool for the second time');

     // Go back to translations.
     $this->clickLink('Translate');
@@ @@

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Cats are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Cats are cool is ready for download.');

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Cats are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Cats are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas por primera vez');
-    $this->assertText('Las llamas son muy chulas por segunda vez');
-    $this->assertText('Los perros son muy chulos por primera vez');
-    $this->assertText('Los perros son muy chulos por segunda vez');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas por primera vez');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas por segunda vez');
+    $this->assertSession()->pageTextContains('Los perros son muy chulos por primera vez');
+    $this->assertSession()->pageTextContains('Los perros son muy chulos por segunda vez');

     // The latest revision is kept.
     $this->clickLink('Translate');
     $this->clickLink('Cats are cool');
-    $this->assertText('Cats are very cool for the first time');
-    $this->assertText('Cats are very cool for the second time');
-    $this->assertText('Dogs are very cool for the first time');
-    $this->assertText('Dogs are very cool for the second time');
-    $this->assertNoText('Llamas are very cool for the first time');
-    $this->assertNoText('Llamas are very cool for the second time');
+    $this->assertSession()->pageTextContains('Cats are very cool for the first time');
+    $this->assertSession()->pageTextContains('Cats are very cool for the second time');
+    $this->assertSession()->pageTextContains('Dogs are very cool for the first time');
+    $this->assertSession()->pageTextContains('Dogs are very cool for the second time');
+    $this->assertSession()->pageTextNotContains('Llamas are very cool for the first time');
+    $this->assertSession()->pageTextNotContains('Llamas are very cool for the second time');

     // The published revision is not updated.
     $this->drupalGet('node/1/revisions/1/view');
-    $this->assertText('Llamas are very cool for the first time');
-    $this->assertText('Llamas are very cool for the second time');
-    $this->assertText('Dogs are very cool for the first time');
-    $this->assertText('Dogs are very cool for the second time');
-    $this->assertNoText('Cats are very cool for the first time');
-    $this->assertNoText('Cats are very cool for the second time');
+    $this->assertSession()->pageTextContains('Llamas are very cool for the first time');
+    $this->assertSession()->pageTextContains('Llamas are very cool for the second time');
+    $this->assertSession()->pageTextContains('Dogs are very cool for the first time');
+    $this->assertSession()->pageTextContains('Dogs are very cool for the second time');
+    $this->assertSession()->pageTextNotContains('Cats are very cool for the first time');
+    $this->assertSession()->pageTextNotContains('Cats are very cool for the second time');
   }

   /**
@@ @@
     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_nested_content');

-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
     $this->saveAndPublishNodeForm($edit, NULL);

     $metadata = LingotekContentMetadata::loadMultiple();
-    $this->assertEqual(3, count($metadata), 'There is metadata saved for the parent entity and the child nested entities.');
+    $this->assertEquals(3, count($metadata), 'There is metadata saved for the parent entity and the child nested entities.');
   }

   /**
@@ @@
     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_nested_content');

-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
@@ @@
     $this->verbose(var_export($data, TRUE));
     $this->assertUploadedDataFieldCount($data, 2);
     $this->assertUploadedDataFieldCount($data['field_paragraph_container'][0], 0);
-    $this->assertEqual($data['title'][0]['value'], 'Llamas are cool');
+    $this->assertEquals($data['title'][0]['value'], 'Llamas are cool');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('manual', $used_profile, 'The manual profile was used.');
+    $this->assertSame('manual', $used_profile, 'The manual profile was used.');

     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertNoText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextNotContains('Las llamas son muy chulas');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that only the configured fields have been uploaded,
     // but not the missing one.
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->verbose(var_export($data, TRUE));
     $this->assertUploadedDataFieldCount($data, 2);
-    $this->assertEqual($data['title'][0]['value'], 'Llamas are cool');
-    $this->assertEqual($data['field_paragraph_container'][0]['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool for the first time');
-    $this->assertEqual($data['field_paragraph_container'][0]['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are very cool for the second time');
-    $this->assertEqual($data['field_paragraph_container'][1]['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Dogs are very cool for the first time');
-    $this->assertEqual($data['field_paragraph_container'][1]['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Dogs are very cool for the second time');
+    $this->assertEquals($data['title'][0]['value'], 'Llamas are cool');
+    $this->assertEquals($data['field_paragraph_container'][0]['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool for the first time');
+    $this->assertEquals($data['field_paragraph_container'][0]['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are very cool for the second time');
+    $this->assertEquals($data['field_paragraph_container'][1]['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Dogs are very cool for the first time');
+    $this->assertEquals($data['field_paragraph_container'][1]['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Dogs are very cool for the second time');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('manual', $used_profile, 'The manual profile was used.');
+    $this->assertSame('manual', $used_profile, 'The manual profile was used.');

     // Request translation.
     $key = $this->getBulkSelectionKey('en', 1);
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => 'request_translation:es-ar',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->drupalGet('node/1');
     $this->clickLink('Edit');
-    $this->drupalPostForm(NULL, NULL, t('Remove'));
-    $this->drupalPostForm(NULL, NULL, t('Confirm removal'));
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Remove'));
+    $this->submitForm(NULL, t('Confirm removal'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $edit = [];
     $edit['field_paragraph_container[1][subform][field_paragraphs_demo][0][subform][field_text_demo][0][value]'] = 'Cats are very cool for the second time';
@@ @@
     $edit['field_paragraph_container[1][subform][field_paragraphs_demo][2][subform][field_text_demo][0][value]'] = 'Cats are very cool for the FOURTH time';
     $this->saveAndKeepPublishedNodeForm($edit, 1, FALSE);

-    $this->assertNoText('Llamas are very cool for the first time');
-    $this->assertNoText('Llamas are very cool for the second time');
+    $this->assertSession()->pageTextNotContains('Llamas are very cool for the first time');
+    $this->assertSession()->pageTextNotContains('Llamas are very cool for the second time');

-    $this->assertNoText('Dogs are very cool for the first time');
-    $this->assertNoText('Dogs are very cool for the second time');
+    $this->assertSession()->pageTextNotContains('Dogs are very cool for the first time');
+    $this->assertSession()->pageTextNotContains('Dogs are very cool for the second time');

-    $this->assertNoText('Cats are very cool for the first time');
-    $this->assertText('Cats are very cool for the second time');
-    $this->assertText('Cats are very cool for the third time');
-    $this->assertText('Cats are very cool for the FOURTH time');
+    $this->assertSession()->pageTextNotContains('Cats are very cool for the first time');
+    $this->assertSession()->pageTextContains('Cats are very cool for the second time');
+    $this->assertSession()->pageTextContains('Cats are very cool for the third time');
+    $this->assertSession()->pageTextContains('Cats are very cool for the FOURTH time');

     // Download translation.
     $this->goToContentBulkManagementForm();
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => 'download:es-ar',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('es_AR', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('es_AR', \Drupal::state()->get('lingotek.downloaded_locale'));

     $this->drupalGet('node/1/translations');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');

     if ($this->paragraphsTranslatable) {
-      $this->assertText('Las llamas son muy chulas por primera vez');
-      $this->assertText('Las llamas son muy chulas por segunda vez');
+      $this->assertSession()->pageTextContains('Las llamas son muy chulas por primera vez');
+      $this->assertSession()->pageTextContains('Las llamas son muy chulas por segunda vez');
     }
     else {
-      $this->assertNoText('Las llamas son muy chulas por primera vez');
-      $this->assertNoText('Las llamas son muy chulas por segunda vez');
+      $this->assertSession()->pageTextNotContains('Las llamas son muy chulas por primera vez');
+      $this->assertSession()->pageTextNotContains('Las llamas son muy chulas por segunda vez');
       // We show the data that was actually uploaded and translated from the
       // previous revision. The first revision is missing, as it was not
       // translated.
-      $this->assertText('Los perros son muy chulos por primera vez');
-      $this->assertText('Los perros son muy chulos por segunda vez');
+      $this->assertSession()->pageTextContains('Los perros son muy chulos por primera vez');
+      $this->assertSession()->pageTextContains('Los perros son muy chulos por segunda vez');
       // That paragraph exists, but was not translated so it's not shown at all.
-      $this->assertNoText('Los gatos son muy chulos por primera vez');
-      $this->assertNoText('Los gatos son muy chulos por segunda vez');
-      $this->assertNoText('Los gatos son muy chulos por tercera vez');
-      $this->assertNoText('Los gatos son muy chulos por cuarta vez');
+      $this->assertSession()->pageTextNotContains('Los gatos son muy chulos por primera vez');
+      $this->assertSession()->pageTextNotContains('Los gatos son muy chulos por segunda vez');
+      $this->assertSession()->pageTextNotContains('Los gatos son muy chulos por tercera vez');
+      $this->assertSession()->pageTextNotContains('Los gatos son muy chulos por cuarta vez');
     }

     $this->clickLink('Translate');
     $this->clickLink('Llamas are cool');

-    $this->assertText('Llamas are cool');
-    $this->assertNoText('Llamas are very cool for the first time');
-    $this->assertNoText('Llamas are very cool for the second time');
+    $this->assertSession()->pageTextContains('Llamas are cool');
+    $this->assertSession()->pageTextNotContains('Llamas are very cool for the first time');
+    $this->assertSession()->pageTextNotContains('Llamas are very cool for the second time');

-    $this->assertNoText('Dogs are very cool for the first time');
-    $this->assertNoText('Dogs are very cool for the second time');
+    $this->assertSession()->pageTextNotContains('Dogs are very cool for the first time');
+    $this->assertSession()->pageTextNotContains('Dogs are very cool for the second time');

-    $this->assertNoText('Cats are very cool for the first time');
-    $this->assertText('Cats are very cool for the FOURTH time');
-    $this->assertText('Cats are very cool for the third time');
-    $this->assertText('Cats are very cool for the second time');
+    $this->assertSession()->pageTextNotContains('Cats are very cool for the first time');
+    $this->assertSession()->pageTextContains('Cats are very cool for the FOURTH time');
+    $this->assertSession()->pageTextContains('Cats are very cool for the third time');
+    $this->assertSession()->pageTextContains('Cats are very cool for the second time');
   }

   public function testEditingAfterNodeWithParagraphsTranslation() {
@@ @@
     $this->drupalGet('node/1/edit');
     $assert_session->fieldValueEquals('field_paragraph_container[0][subform][field_paragraphs_demo][0][subform][field_text_demo][0][value]', 'Llamas are very cool');

-    $this->drupalPostForm(NULL, NULL, t('Remove'));
-    $this->drupalPostForm(NULL, NULL, t('Confirm removal'));
+    $this->submitForm(NULL, t('Remove'));
+    $this->submitForm(NULL, t('Confirm removal'));

     $page->pressButton('Save (this translation)');
     $assert_session->pageTextContains('Llamas are cool has been updated.');
@@ @@
     $edit = [];
     $edit['settings[node][paragraphed_nested_content][fields][field_paragraph_container]'] = 1;
     $edit['settings[paragraph][paragraph_container][fields][field_paragraphs_demo]'] = 1;
-    $this->drupalPostForm('/admin/config/regional/content-language', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/regional/content-language');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('Settings successfully updated.');
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertNoFieldRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


111) modules/contrib/lingotek/tests/src/Functional/LingotekNodeBulkDebugTest.php:62

    ---------- begin diff ----------
@@ @@

     // Enable the debug operations.
     $this->drupalGet('admin/lingotek/settings');
-    $this->drupalPostForm(NULL, [], t('Enable debug operations'));
+    $this->submitForm([], t('Enable debug operations'));

     // Back to the bulk node management page.
     $this->goToContentBulkManagementForm();
@@ @@

     // Enable the debug operations.
     $this->drupalGet('admin/lingotek/settings');
-    $this->drupalPostForm(NULL, [], t('Enable debug operations'));
+    $this->submitForm([], t('Enable debug operations'));

     $this->goToContentBulkManagementForm();

@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => 'debug.export',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Exports available');
+    $this->assertSession()->pageTextContains('Exports available');
     // Download the file.
     $this->clickLink('node.article.1.json');

     $response = json_decode($this->getSession()->getPage()->getContent(), TRUE);
-    $this->assertIdentical('Llamas are cool', $response['title'][0]['value']);
-    $this->assertIdentical('Llamas are very cool', $response['body'][0]['value']);
-    $this->assertIdentical('article (node): Llamas are cool', $response['_debug']['title']);
-    $this->assertIdentical('manual', $response['_debug']['profile']);
-    $this->assertIdentical('en_US', $response['_debug']['source_locale']);
+    $this->assertSame('Llamas are cool', $response['title'][0]['value']);
+    $this->assertSame('Llamas are very cool', $response['body'][0]['value']);
+    $this->assertSame('article (node): Llamas are cool', $response['_debug']['title']);
+    $this->assertSame('manual', $response['_debug']['profile']);
+    $this->assertSame('en_US', $response['_debug']['source_locale']);
   }

   public function testDebugExportError() {
@@ @@

     // Enable the debug operations.
     $this->drupalGet('admin/lingotek/settings');
-    $this->drupalPostForm(NULL, [], t('Enable debug operations'));
+    $this->submitForm([], t('Enable debug operations'));

     $this->goToContentBulkManagementForm();

@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => 'debug.export',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('The Article Llamas are cool has no profile assigned so it was not processed.');
-    $this->assertNoText('Exports available');
+    $this->assertSession()->pageTextContains('The Article Llamas are cool has no profile assigned so it was not processed.');
+    $this->assertSession()->pageTextNotContains('Exports available');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


112) modules/contrib/lingotek/tests/src/Functional/LingotekNodeBulkCancelTest.php:72

    ---------- begin diff ----------
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancel('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $content_translation_service */
     $content_translation_service = \Drupal::service('lingotek.content_translation');
@@ @@

     // Assert that The document has been cancelled remotely.
     $cancelled_docs = \Drupal::state()->get('lingotek.cancelled_docs', []);
-    $this->assertEqual(1, count($cancelled_docs), 'The document has been cancelled remotely.');
+    $this->assertEquals(1, count($cancelled_docs), 'The document has been cancelled remotely.');

     // Assert that no document has been deleted remotely.
     $deleted_docs = \Drupal::state()->get('lingotek.deleted_docs', []);
-    $this->assertEqual(0, count($deleted_docs), 'No document has been deleted remotely.');
+    $this->assertEquals(0, count($deleted_docs), 'No document has been deleted remotely.');

     $node = Node::load(1);
     $this->assertNull($content_translation_service->getDocumentId($node));
@@ @@
     $this->assertSourceStatus('EN', Lingotek::STATUS_CANCELLED);
     $this->assertTargetStatus('ES', Lingotek::STATUS_CANCELLED);

-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $content_translation_service->getSourceStatus($node));
-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $content_translation_service->getTargetStatus($node, 'es'));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $content_translation_service->getTargetStatus($node, 'es'));

     // We can request again.
     $this->assertLingotekUploadLink();
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancelTarget('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $content_translation_service */
     $content_translation_service = \Drupal::service('lingotek.content_translation');
@@ @@
     $this->assertSourceStatus('EN', Lingotek::STATUS_CURRENT);
     $this->assertTargetStatus('ES', Lingotek::STATUS_CANCELLED);

-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($entity));
-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $content_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $content_translation_service->getTargetStatus($entity, 'es'));

     // We cannot request again.
     $this->assertNoLingotekRequestTranslationLink('es_ES');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancelTarget('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $content_translation_service */
     $content_translation_service = \Drupal::service('lingotek.content_translation');
@@ @@
     $this->assertSourceStatus('EN', Lingotek::STATUS_CURRENT);
     $this->assertTargetStatus('ES', Lingotek::STATUS_CURRENT);

-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($entity));

-    $this->assertText('Target es for node Llamas are cool was already completed in the TMS and cannot be cancelled unless the entire document is cancelled.');
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSession()->pageTextContains('Target es for node Llamas are cool was already completed in the TMS and cannot be cancelled unless the entire document is cancelled.');
+    $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($entity, 'es'));
   }

   protected function createAndTranslateNodeWithLinks() {
@@ @@

     // Clicking English must init the upload of content.
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');

     // There is a link for checking status.
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request the Spanish translation.
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_ES' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_ES' was added as a translation target for node Llamas are cool.");

     // Check status of the Spanish translation.
     $this->clickLink('ES');
-    $this->assertText('The es_ES translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_ES translation for node Llamas are cool is ready for download.');

     // Download the Spanish translation.
     $this->clickLink('ES');
-    $this->assertText('The translation of node Llamas are cool into es_ES has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_ES has been downloaded.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


113) modules/contrib/lingotek/tests/src/Functional/LingotekModuleUninstallationWithDataTest.php:68

    ---------- begin diff ----------
@@ @@

     $this->assertSession()->fieldDisabled('edit-uninstall-lingotek');
     // Plural reasons.
-    $this->assertText('The following reasons prevent Lingotek Translation from being uninstalled:');
+    $this->assertSession()->pageTextContains('The following reasons prevent Lingotek Translation from being uninstalled:');

     // Post the form uninstalling the lingotek_test module.
     $edit = ['uninstall[lingotek_test]' => '1'];
-    $this->drupalPostForm(NULL, $edit, 'Uninstall');
-    $this->drupalPostForm(NULL, [], 'Uninstall');
-    $this->assertText('The selected modules have been uninstalled.');
+    $this->submitForm($edit, 'Uninstall');
+    $this->submitForm([], 'Uninstall');
+    $this->assertSession()->pageTextContains('The selected modules have been uninstalled.');

     // Singular reason.
-    $this->assertText('The following reason prevents Lingotek Translation from being uninstalled:');
-    $this->assertText('There is content for the entity type: Lingotek Content Metadata');
+    $this->assertSession()->pageTextContains('The following reason prevents Lingotek Translation from being uninstalled:');
+    $this->assertSession()->pageTextContains('There is content for the entity type: Lingotek Content Metadata');
     $assert_session->linkExists('Remove lingotek content metadata entities');

     $this->assertSession()->fieldDisabled('edit-uninstall-lingotek');

     $this->clickLink('Remove lingotek content metadata entities');
-    $this->assertText('Are you sure you want to delete all lingotek content metadata entities?');
-    $this->assertText('This will delete 1 lingotek content metadata.');
-    $this->drupalPostForm(NULL, [], 'Delete all lingotek content metadata entities');
+    $this->assertSession()->pageTextContains('Are you sure you want to delete all lingotek content metadata entities?');
+    $this->assertSession()->pageTextContains('This will delete 1 lingotek content metadata.');
+    $this->submitForm([], 'Delete all lingotek content metadata entities');

     $this->assertFalse($this->getSession()->getPage()->findField('edit-uninstall-lingotek')->hasAttribute('disabled'));

     // Post the form uninstalling the lingotek module.
     $edit = ['uninstall[lingotek]' => '1'];
-    $this->drupalPostForm(NULL, $edit, 'Uninstall');
+    $this->submitForm($edit, 'Uninstall');

     // We get an advice and we can confirm.
-    $this->assertText('The following modules will be completely uninstalled from your site, and all data from these modules will be lost!');
-    $this->assertText('The listed configuration will be deleted.');
-    $this->assertText('Lingotek Profile');
+    $this->assertSession()->pageTextContains('The following modules will be completely uninstalled from your site, and all data from these modules will be lost!');
+    $this->assertSession()->pageTextContains('The listed configuration will be deleted.');
+    $this->assertSession()->pageTextContains('Lingotek Profile');

-    $this->drupalPostForm(NULL, [], 'Uninstall');
+    $this->submitForm([], 'Uninstall');

-    $this->assertText('The selected modules have been uninstalled.');
+    $this->assertSession()->pageTextContains('The selected modules have been uninstalled.');
   }

   /**
@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 2);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('manual', $used_profile, 'The manual profile was used.');
+    $this->assertSame('manual', $used_profile, 'The manual profile was used.');

     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     $this->clickLink('Request translation');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.added_target_locale'));

     $this->clickLink('Check translation status');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.downloaded_locale'));
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


114) modules/contrib/lingotek/tests/src/Functional/LingotekModuleUninstallationTest.php:43

    ---------- begin diff ----------
@@ @@

     // Post the form uninstalling the lingotek module.
     $edit = ['uninstall[lingotek]' => '1'];
-    $this->drupalPostForm(NULL, $edit, 'Uninstall');
+    $this->submitForm($edit, 'Uninstall');

     // We get an advice and we can confirm.
-    $this->assertText('The following modules will be completely uninstalled from your site, and all data from these modules will be lost!');
+    $this->assertSession()->pageTextContains('The following modules will be completely uninstalled from your site, and all data from these modules will be lost!');
     $this->assertSession()->responseContains('The listed configuration will be deleted.');
     $this->assertSession()->responseContains('Lingotek Profile');

-    $this->drupalPostForm(NULL, [], 'Uninstall');
+    $this->submitForm([], 'Uninstall');

     $this->assertSession()->responseContains('The selected modules have been uninstalled.');
   }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


115) modules/contrib/lingotek/tests/src/Functional/LingotekModuleInstallationTest.php:26

    ---------- begin diff ----------
@@ @@
     $this->drupalGet('/admin/modules');

     // Ensure the module is not enabled yet.
-    $this->assertNoFieldChecked('edit-modules-lingotek-enable');
+    $this->assertSession()->checkboxNotChecked('edit-modules-lingotek-enable');

     // Post the form enabling the lingotek module.
     $edit = ['modules[lingotek][enable]' => '1'];
-    $this->drupalPostForm(NULL, $edit, 'Install');
+    $this->submitForm($edit, 'Install');

     // Dependencies installation is requested.
-    $this->assertText('Some required modules must be enabled');
-    $this->drupalPostForm(NULL, [], 'Continue');
+    $this->assertSession()->pageTextContains('Some required modules must be enabled');
+    $this->submitForm([], 'Continue');

     // The module is enabled successfully with its dependencies.
-    $this->assertText('modules have been enabled: Lingotek Translation');
+    $this->assertSession()->pageTextContains('modules have been enabled: Lingotek Translation');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertNoFieldCheckedRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


116) modules/contrib/lingotek/tests/src/Functional/LingotekManageLingotekTranslationsPermissionTest.php:70

    ---------- begin diff ----------
@@ @@
     // Get the settings form.
     $this->drupalGet('admin/lingotek/settings');
     // Assert translation profile can be assigned.
-    $this->assertNoText('You are not authorized to access this page.');
+    $this->assertSession()->pageTextNotContains('You are not authorized to access this page.');

     $user = $this->drupalCreateUser([
       'assign lingotek translation profiles',
@@ @@
     // Get the settings form.
     $this->drupalGet('admin/lingotek/settings');
     // Assert translation profile cannot be assigned.
-    $this->assertText('You are not authorized to access this page.');
+    $this->assertSession()->pageTextContains('You are not authorized to access this page.');
   }

   /**
@@ @@
     // Assert in the configuration panes we have access to Lingotek Translation.
     $this->clickLink('Configuration');

-    $this->assertText('Regional and language');
+    $this->assertSession()->pageTextContains('Regional and language');
     $this->clickLink('Lingotek Translation');

     // Assert we see the dashboard and can navigate to content.
     $assert_session->linkExists('Content');
     $this->clickLink('Content');
-    $this->assertText('Manage Translations');
+    $this->assertSession()->pageTextContains('Manage Translations');
   }

   /**
@@ @@
     // Assert in the configuration panes we have access to Lingotek Translation.
     $this->clickLink('Configuration');

-    $this->assertText('Regional and language');
+    $this->assertSession()->pageTextContains('Regional and language');
     $this->clickLink('Lingotek Translation');

     // Config shouldn't be visible unless we can translate settings too.
@@ @@
     // Assert in the configuration panes we have access to Lingotek Translation.
     $this->clickLink('Configuration');

-    $this->assertText('Regional and language');
+    $this->assertSession()->pageTextContains('Regional and language');
     $this->clickLink('Lingotek Translation');

     // Assert we see the dashboard and can navigate to config.
     $assert_session->linkExists('Config');
     $this->clickLink('Config');
-    $this->assertText('Manage Configuration Translation');
+    $this->assertSession()->pageTextContains('Manage Configuration Translation');
   }

   /**
@@ @@

     $response = json_decode($request, TRUE);
     $this->verbose(var_export($response, TRUE));
-    $this->assertIdentical('GET', $response['method']);
-    $this->assertIdentical(2, $response['count']);
-    $this->assertIdentical('en', $response['languages']['en_US']['xcode']);
-    $this->assertIdentical(1, $response['languages']['en_US']['active']);
-    $this->assertIdentical(1, $response['languages']['en_US']['enabled']);
-    $this->assertIdentical('es', $response['languages']['es_ES']['xcode']);
-    $this->assertIdentical(1, $response['languages']['es_ES']['active']);
-    $this->assertIdentical(1, $response['languages']['es_ES']['enabled']);
+    $this->assertSame('GET', $response['method']);
+    $this->assertSame(2, $response['count']);
+    $this->assertSame('en', $response['languages']['en_US']['xcode']);
+    $this->assertSame(1, $response['languages']['en_US']['active']);
+    $this->assertSame(1, $response['languages']['en_US']['enabled']);
+    $this->assertSame('es', $response['languages']['es_ES']['xcode']);
+    $this->assertSame(1, $response['languages']['es_ES']['active']);
+    $this->assertSame(1, $response['languages']['es_ES']['enabled']);
   }

   /**
@@ @@

     // We don't have any operations or actions available.
     $assert_session->linkNotExists('Upload');
-    $this->assertNoFieldByName('op');
+    $this->assertSession()->fieldValueNotEquals('op', '');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertNoFieldByNameRector
 * AssertNoTextRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


117) modules/contrib/lingotek/tests/src/Functional/LingotekLocaleTest.php:20

    ---------- begin diff ----------
@@ @@

   public function testConvertDrupal2Lingotek() {
     // ToDo: Improve testing coverage.
-    $this->assertIdentical('zh-hans', LingotekLocale::convertLingotek2Drupal('zh_CN'));
+    $this->assertSame('zh-hans', LingotekLocale::convertLingotek2Drupal('zh_CN'));
   }

   public function testConvertLingotek2Drupal() {
     // ToDo: Improve testing coverage.
-    $this->assertIdentical('zh_CN', LingotekLocale::convertDrupal2Lingotek('zh-hans'));
+    $this->assertSame('zh_CN', LingotekLocale::convertDrupal2Lingotek('zh-hans'));
   }

   public function testGenerateLingotek2Drupal() {
     $language = LingotekLocale::generateLingotek2Drupal('es_ES');
-    $this->assertEqual('es', $language);
+    $this->assertEquals('es', $language);

     $language = LingotekLocale::generateLingotek2Drupal('de-AT');
-    $this->assertEqual('de', $language);
+    $this->assertEquals('de', $language);

     $language = LingotekLocale::generateLingotek2Drupal('ar');
-    $this->assertEqual('ar', $language);
+    $this->assertEquals('ar', $language);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


118) modules/contrib/lingotek/tests/src/Functional/LingotekJobManagementTests.php:112

    ---------- begin diff ----------
@@ @@
     $assert_session->linkExists('Translation Jobs');
     $this->clickLink('Translation Jobs');

-    $this->assertText('There are no translation jobs. Use the Content or Config tabs to assign them.');
+    $this->assertSession()->pageTextContains('There are no translation jobs. Use the Content or Config tabs to assign them.');
   }

   public function testJobTranslationTab() {
@@ @@
     $assert_session->linkExists('Translation Jobs');
     $this->clickLink('Translation Jobs');

-    $this->assertText('my-test-job-id-1');
-    $this->assertText('3 content items, 1 config items');
+    $this->assertSession()->pageTextContains('my-test-job-id-1');
+    $this->assertSession()->pageTextContains('3 content items, 1 config items');
     $assert_session->linkExists('View translation job', 0);
-    $this->assertLinkByHref('/admin/lingotek/job/my-test-job-id-1');
+    $this->assertSession()->linkByHrefExists('/admin/lingotek/job/my-test-job-id-1');

-    $this->assertText('my-test-job-id-2');
-    $this->assertText('1 content items, 0 config items');
+    $this->assertSession()->pageTextContains('my-test-job-id-2');
+    $this->assertSession()->pageTextContains('1 content items, 0 config items');
     $assert_session->linkExists('View translation job', 1);
     $assert_session->linkByHrefExists('/admin/lingotek/job/my-test-job-id-2');
   }
@@ @@
     $assert_session->linkNotExists('Awesome');

     // Assert the fields are not there.
-    $this->assertNoField('show_advanced');
-    $this->assertNoField('job_id');
+    $this->assertSession()->fieldNotExists('show_advanced');
+    $this->assertSession()->fieldNotExists('job_id');
   }

   public function testJobTranslationConfigTab() {
@@ @@
     $this->assertSame('Job my-test-job-id-1 Configuration', $this->xpath('//h1')[0]->getText());

     // Assert config listed.
-    $this->assertText('System information');
-    $this->assertNoText('Account settings');
+    $this->assertSession()->pageTextContains('System information');
+    $this->assertSession()->pageTextNotContains('Account settings');

     // Assert the fields are not there.
-    $this->assertNoField('filters[wrapper][job]');
-    $this->assertNoField('job_id');
+    $this->assertSession()->fieldNotExists('filters[wrapper][job]');
+    $this->assertSession()->fieldNotExists('job_id');
   }

   public function testJobTranslationContentTabHasOwnFilter() {
@@ @@

     // Let's see the differences in the regular config tab.
     $this->goToConfigBulkManagementForm();
-    $this->assertText('System information');
-    $this->assertText('Account settings');
+    $this->assertSession()->pageTextContains('System information');
+    $this->assertSession()->pageTextContains('Account settings');
   }

   protected function createContent() {
    ----------- end diff -----------

Applied rules:
 * AssertLinkByHrefRector
 * AssertNoFieldRector
 * AssertNoTextRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


119) modules/contrib/lingotek/tests/src/Functional/LingotekInterfaceTranslationTest.php:54

    ---------- begin diff ----------
@@ @@

     // Post the form uninstalling the lingotek module.
     $edit = ['uninstall[potx]' => '1'];
-    $this->drupalPostForm(NULL, $edit, 'Uninstall');
+    $this->submitForm($edit, 'Uninstall');

     // We get an advice and we can confirm.
     $assert_session->responseContains('The following modules will be completely uninstalled from your site, and <em>all data from these modules will be lost</em>!');
     $assert_session->responseContains('Translation template extractor');

-    $this->drupalPostForm(NULL, [], 'Uninstall');
+    $this->submitForm([], 'Uninstall');

     $this->goToInterfaceTranslationManagementForm();

@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 2;
     $assert_session = $this->assertSession();
@@ @@
     $this->assertLingotekInterfaceTranslationRequestTranslationLink($component, 'es_MX');
     $this->clickLink('ES');
     $assert_session->responseContains('Locale \'es_MX\' was added as a translation target for <em class="placeholder">' . $component . '</em>.');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekInterfaceTranslationCheckTargetStatusLink($component, 'es_MX');
@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path1 = drupal_get_path('module', 'lingotek_interface_translation_test');
-    $path2 = drupal_get_path('module', 'lingotek_test');
+    $path1 = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
+    $path2 = \Drupal::service('extension.list.module')->getPath('lingotek_test');
     $component1 = $path1;
     $component2 = $path2;
     $indexOfModuleLink1 = 2;
@@ @@
     $this->clickLink('ES');
     $assert_session->responseContains('Locale \'es_MX\' was added as a translation target for <em class="placeholder">' . $component1 . '</em>.');

-    $this->drupalPostForm(NULL, [], 'Clear Lingotek interface translation metadata');
+    $this->submitForm([], 'Clear Lingotek interface translation metadata');
     $assert_session->responseContains('This will remove the metadata stored about your Lingotek interface translations, so you will need to re-upload those in case you want to translate them.');

-    $this->drupalPostForm(NULL, [], 'Clear metadata');
+    $this->submitForm([], 'Clear metadata');
     $assert_session->responseContains('You have cleared the Lingotek metadata for interface translations.');

     // Download the Spanish translation.
@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;

     $this->assertLingotekInterfaceTranslationRequestTranslationLink($component, 'ca_ES');
@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 2;
     $assert_session = $this->assertSession();
@@ @@
     /** @var \Drupal\lingotek\LingotekInterfaceTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.interface_translation');
     $source_status = $translation_service->getSourceStatus($component);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The source upload has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The source upload has been marked as error.');
     $this->assertEmpty($translation_service->getLastUploaded($component));

     // I can still re-try the upload.
@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 2;
     $assert_session = $this->assertSession();
@@ @@
     /** @var \Drupal\lingotek\LingotekInterfaceTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.interface_translation');
     $source_status = $translation_service->getSourceStatus($component);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The source upload has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The source upload has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_upload', FALSE);
@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 2;
     $assert_session = $this->assertSession();
@@ @@
     /** @var \Drupal\lingotek\LingotekInterfaceTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.interface_translation');
     $source_status = $translation_service->getSourceStatus($component);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The source upload has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The source upload has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_upload', FALSE);
@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 2;
     $assert_session = $this->assertSession();
@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 2;
     $assert_session = $this->assertSession();
@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 2;
     $assert_session = $this->assertSession();
@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 2;
     $assert_session = $this->assertSession();
@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 2;
     $assert_session = $this->assertSession();
@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 2;
     $assert_session = $this->assertSession();
@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 2;
     $assert_session = $this->assertSession();
@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 2;
     $assert_session = $this->assertSession();
@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 2;
     $assert_session = $this->assertSession();
@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 2;
     $assert_session = $this->assertSession();
@@ @@

     $this->clickLink('EN', $indexOfModuleLink);
     $assert_session->responseContains('<em class="placeholder">' . $component . '</em> uploaded successfully');
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 2;
     $assert_session = $this->assertSession();
@@ @@

     $this->clickLink('EN', $indexOfModuleLink);
     $assert_session->responseContains('<em class="placeholder">' . $component . '</em> uploaded successfully');
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 2;
     $assert_session = $this->assertSession();
@@ @@

     $this->clickLink('EN', $indexOfModuleLink);
     $assert_session->responseContains('<em class="placeholder">' . $component . '</em> uploaded successfully');
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 2;
     $assert_session = $this->assertSession();
@@ @@
     /** @var \Drupal\lingotek\LingotekInterfaceTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.interface_translation');
     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $translation_service->getSourceStatus($component));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $translation_service->getSourceStatus($component));

     $this->goToInterfaceTranslationManagementForm();

@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical([], $response['result']['request_translations'], 'No translations have been requested after notification automatically.');
+    $this->assertSame([], $response['result']['request_translations'], 'No translations have been requested after notification automatically.');

     $this->goToInterfaceTranslationManagementForm();

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $translation_service->getSourceStatus($component));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $translation_service->getSourceStatus($component));
     // Assert the target is ready for requesting.
-    $this->assertIdentical(Lingotek::STATUS_REQUEST, $translation_service->getTargetStatus($component, 'es'));
+    $this->assertSame(Lingotek::STATUS_REQUEST, $translation_service->getTargetStatus($component, 'es'));

     // Request Spanish manually.
     $this->clickLink('ES');
     // Assert the target is pending.
     $this->goToInterfaceTranslationManagementForm();
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $translation_service->getTargetStatus($component, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $translation_service->getTargetStatus($component, 'es'));

     // Simulate the notification of content successfully translated.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     $this->assertFalse($response['result']['download'], 'No targets have been downloaded after notification automatically.');

     $this->goToInterfaceTranslationManagementForm();
-    $this->assertIdentical(Lingotek::STATUS_READY, $translation_service->getTargetStatus($component, 'es'));
+    $this->assertSame(Lingotek::STATUS_READY, $translation_service->getTargetStatus($component, 'es'));

     // Download Spanish manually.
     $this->clickLink('ES');
@@ @@

     // Assert the target is downloaded.
     $this->goToInterfaceTranslationManagementForm();
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $translation_service->getTargetStatus($component, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $translation_service->getTargetStatus($component, 'es'));
   }

   /**
@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 2;
     $assert_session = $this->assertSession();
@@ @@
     /** @var \Drupal\lingotek\LingotekInterfaceTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.interface_translation');
     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $translation_service->getSourceStatus($component));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $translation_service->getSourceStatus($component));

     $this->goToInterfaceTranslationManagementForm();

@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical([], $response['result']['request_translations'], 'No translations have been requested after notification automatically.');
+    $this->assertSame([], $response['result']['request_translations'], 'No translations have been requested after notification automatically.');

     $this->goToInterfaceTranslationManagementForm();

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $translation_service->getSourceStatus($component));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $translation_service->getSourceStatus($component));
     // Assert the target is ready for requesting.
-    $this->assertIdentical(Lingotek::STATUS_REQUEST, $translation_service->getTargetStatus($component, 'es'));
+    $this->assertSame(Lingotek::STATUS_REQUEST, $translation_service->getTargetStatus($component, 'es'));

     // Request Spanish manually.
     $this->clickLink('ES');
     // Assert the target is pending.
     $this->goToInterfaceTranslationManagementForm();
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $translation_service->getTargetStatus($component, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $translation_service->getTargetStatus($component, 'es'));

     // Simulate the notification of content successfully translated.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     $this->assertEquals($response['messages'][0], "Document $path was archived in Lingotek.");

     $this->goToInterfaceTranslationManagementForm();
-    $this->assertIdentical(Lingotek::STATUS_ARCHIVED, $translation_service->getSourceStatus($component));
-    $this->assertIdentical(Lingotek::STATUS_ARCHIVED, $translation_service->getTargetStatus($component, 'es'));
+    $this->assertSame(Lingotek::STATUS_ARCHIVED, $translation_service->getSourceStatus($component));
+    $this->assertSame(Lingotek::STATUS_ARCHIVED, $translation_service->getTargetStatus($component, 'es'));

     $link = $this->xpath("//span[@class='language-icon target-archived' and @title='Spanish - This target was archived in Lingotek.' and text()='ES']");
     $this->assertEquals(1, count($link), 'Span exists.');
@@ @@

     // In Drupal.org CI the module will be at modules/conrtib/lingotek.
     // We need to generate the path and not hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 2;
     $assert_session = $this->assertSession();
@@ @@
     /** @var \Drupal\lingotek\LingotekInterfaceTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.interface_translation');
     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $translation_service->getSourceStatus($component));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $translation_service->getSourceStatus($component));

     $this->goToInterfaceTranslationManagementForm();

@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical([], $response['result']['request_translations'], 'No translations have been requested after notification automatically.');
+    $this->assertSame([], $response['result']['request_translations'], 'No translations have been requested after notification automatically.');

     $this->goToInterfaceTranslationManagementForm();

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $translation_service->getSourceStatus($component));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $translation_service->getSourceStatus($component));
     // Assert the target is ready for requesting.
-    $this->assertIdentical(Lingotek::STATUS_REQUEST, $translation_service->getTargetStatus($component, 'es'));
+    $this->assertSame(Lingotek::STATUS_REQUEST, $translation_service->getTargetStatus($component, 'es'));

     // Request Spanish manually.
     $this->clickLink('ES');
     // Assert the target is pending.
     $this->goToInterfaceTranslationManagementForm();
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $translation_service->getTargetStatus($component, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $translation_service->getTargetStatus($component, 'es'));

     // Simulate the notification of document deleted.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     $this->assertEquals($response['messages'][0], "Document for entity $path deleted by user@example.com in the TMS.");

     $this->goToInterfaceTranslationManagementForm();
-    $this->assertIdentical(Lingotek::STATUS_DELETED, $translation_service->getSourceStatus($component));
-    $this->assertIdentical(Lingotek::STATUS_DELETED, $translation_service->getTargetStatus($component, 'es'));
+    $this->assertSame(Lingotek::STATUS_DELETED, $translation_service->getSourceStatus($component));
+    $this->assertSame(Lingotek::STATUS_DELETED, $translation_service->getTargetStatus($component, 'es'));

     $link = $this->xpath("//span[@class='language-icon target-deleted' and @title='Spanish - This target was deleted in Lingotek.' and text()='ES']");
     $this->assertEquals(1, count($link), 'Span exists.');
@@ @@
     // In Drupal.org CI the module will be at modules/contrib/lingotek.
     // In my local that's modules/lingotek. We need to generate the path and not
     // hardcode it.
-    $path = drupal_get_path('module', 'lingotek_interface_translation_test');
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek_interface_translation_test');
     $component = $path;
     $indexOfModuleLink = 2;
     $assert_session = $this->assertSession();
@@ @@
     /** @var \Drupal\lingotek\LingotekInterfaceTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.interface_translation');
     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $translation_service->getSourceStatus($component));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $translation_service->getSourceStatus($component));

     $this->goToInterfaceTranslationManagementForm();

@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical([], $response['result']['request_translations'], 'No translations have been requested after notification automatically.');
+    $this->assertSame([], $response['result']['request_translations'], 'No translations have been requested after notification automatically.');

     $this->goToInterfaceTranslationManagementForm();

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $translation_service->getSourceStatus($component));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $translation_service->getSourceStatus($component));
     // Assert the target is ready for requesting.
-    $this->assertIdentical(Lingotek::STATUS_REQUEST, $translation_service->getTargetStatus($component, 'es'));
+    $this->assertSame(Lingotek::STATUS_REQUEST, $translation_service->getTargetStatus($component, 'es'));

     // Request Spanish manually.
     $this->clickLink('ES');
     // Assert the target is pending.
     $this->goToInterfaceTranslationManagementForm();
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $translation_service->getTargetStatus($component, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $translation_service->getTargetStatus($component, 'es'));

     // Simulate the notification of content successfully translated.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     $this->assertEquals($response['messages'][0], "Document $path cancelled in TMS.");

     $this->goToInterfaceTranslationManagementForm();
-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $translation_service->getTargetStatus($component, 'es'));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $translation_service->getTargetStatus($component, 'es'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * DrupalGetPathRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


120) modules/contrib/lingotek/tests/src/Functional/LingotekIntelligenceMetadataTranslationTest.php:110

    ---------- begin diff ----------
@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
     $this->assertTrue(isset($data['uid']));
     $this->assertFalse(isset($data['uid'][0]['_lingotek_metadata']['_intelligence']));
-    $this->assertIdentical($data['uid'][0]['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertIdentical($data['uid'][0]['_lingotek_metadata']['_entity_type_id'], 'user');
+    $this->assertSame($data['uid'][0]['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertSame($data['uid'][0]['_lingotek_metadata']['_entity_type_id'], 'user');
     $this->assertNull($data['uid'][0]['_lingotek_metadata']['_entity_revision']);
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

-    $this->assertEqual(4, count($data['_lingotek_metadata']));
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_revision'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_type_id'], 'node');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['external_document_id'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['content_type'], 'node - article');
+    $this->assertEquals(4, count($data['_lingotek_metadata']));
+    $this->assertSame($data['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_entity_revision'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_entity_type_id'], 'node');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['external_document_id'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['content_type'], 'node - article');
   }

   public function testUploadNodeWithDefaultSettings() {
@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
     $this->assertTrue(isset($data['uid']));
     $this->assertFalse(isset($data['uid'][0]['_lingotek_metadata']['_intelligence']));
-    $this->assertIdentical($data['uid'][0]['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertIdentical($data['uid'][0]['_lingotek_metadata']['_entity_type_id'], 'user');
+    $this->assertSame($data['uid'][0]['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertSame($data['uid'][0]['_lingotek_metadata']['_entity_type_id'], 'user');
     $this->assertNull($data['uid'][0]['_lingotek_metadata']['_entity_revision']);
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

-    $this->assertEqual(4, count($data['_lingotek_metadata']));
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_revision'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_type_id'], 'node');
+    $this->assertEquals(4, count($data['_lingotek_metadata']));
+    $this->assertSame($data['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_entity_revision'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_entity_type_id'], 'node');

-    $this->assertEqual(17, count($data['_lingotek_metadata']['_intelligence']));
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['external_document_id'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['content_type'], 'node - article');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['domain'], $domain);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['reference_url'], $this->node->toUrl()->setAbsolute(TRUE)->toString());
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['author_name'], 'admin');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['author_email'], 'admin@example.com');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['business_unit'], NULL);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['business_division'], NULL);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['campaign_id'], NULL);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['campaign_rating'], 0);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['channel'], NULL);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['contact_name'], NULL);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['contact_email'], NULL);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['content_description'], NULL);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['external_style_id'], NULL);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['purchase_order'], NULL);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['region'], NULL);
+    $this->assertEquals(17, count($data['_lingotek_metadata']['_intelligence']));
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['external_document_id'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['content_type'], 'node - article');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['domain'], $domain);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['reference_url'], $this->node->toUrl()->setAbsolute(TRUE)->toString());
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['author_name'], 'admin');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['author_email'], 'admin@example.com');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['business_unit'], NULL);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['business_division'], NULL);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['campaign_id'], NULL);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['campaign_rating'], 0);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['channel'], NULL);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['contact_name'], NULL);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['contact_email'], NULL);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['content_description'], NULL);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['external_style_id'], NULL);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['purchase_order'], NULL);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['region'], NULL);
   }

   /**
@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
     $this->assertTrue(isset($data['uid']));
     $this->assertFalse(isset($data['uid'][0]['_lingotek_metadata']['_intelligence']));
-    $this->assertIdentical($data['uid'][0]['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertIdentical($data['uid'][0]['_lingotek_metadata']['_entity_type_id'], 'user');
+    $this->assertSame($data['uid'][0]['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertSame($data['uid'][0]['_lingotek_metadata']['_entity_type_id'], 'user');
     $this->assertNull($data['uid'][0]['_lingotek_metadata']['_entity_revision']);
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

-    $this->assertEqual(4, count($data['_lingotek_metadata']));
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_revision'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_type_id'], 'node');
+    $this->assertEquals(4, count($data['_lingotek_metadata']));
+    $this->assertSame($data['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_entity_revision'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_entity_type_id'], 'node');

-    $this->assertEqual(17, count($data['_lingotek_metadata']['_intelligence']));
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['external_document_id'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['content_type'], 'node - article');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['domain'], $domain);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['reference_url'], $this->node->toUrl()->setAbsolute(TRUE)->toString());
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['author_name'], 'admin');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['author_email'], 'admin@example.com');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['business_unit'], 'General Business Unit');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['business_division'], 'General Business Division');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['campaign_id'], 'General Campaign ID');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['campaign_rating'], 3);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['channel'], 'General Channel Test');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['contact_name'], 'General Test Contact Name');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['contact_email'], 'general@example.com');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['content_description'], 'General Content description');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['external_style_id'], 'general-my-style-id');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['purchase_order'], 'General PO32');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['region'], 'region2');
+    $this->assertEquals(17, count($data['_lingotek_metadata']['_intelligence']));
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['external_document_id'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['content_type'], 'node - article');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['domain'], $domain);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['reference_url'], $this->node->toUrl()->setAbsolute(TRUE)->toString());
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['author_name'], 'admin');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['author_email'], 'admin@example.com');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['business_unit'], 'General Business Unit');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['business_division'], 'General Business Division');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['campaign_id'], 'General Campaign ID');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['campaign_rating'], 3);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['channel'], 'General Channel Test');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['contact_name'], 'General Test Contact Name');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['contact_email'], 'general@example.com');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['content_description'], 'General Content description');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['external_style_id'], 'general-my-style-id');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['purchase_order'], 'General PO32');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['region'], 'region2');
   }

   public function testUploadNodeWithContactEmailAsAuthorSetting() {
@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
     $this->assertTrue(isset($data['uid']));
     $this->assertFalse(isset($data['uid'][0]['_lingotek_metadata']['_intelligence']));
-    $this->assertIdentical($data['uid'][0]['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertIdentical($data['uid'][0]['_lingotek_metadata']['_entity_type_id'], 'user');
+    $this->assertSame($data['uid'][0]['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertSame($data['uid'][0]['_lingotek_metadata']['_entity_type_id'], 'user');
     $this->assertNull($data['uid'][0]['_lingotek_metadata']['_entity_revision']);
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

-    $this->assertEqual(4, count($data['_lingotek_metadata']));
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_revision'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_type_id'], 'node');
+    $this->assertEquals(4, count($data['_lingotek_metadata']));
+    $this->assertSame($data['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_entity_revision'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_entity_type_id'], 'node');

-    $this->assertEqual(17, count($data['_lingotek_metadata']['_intelligence']));
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['external_document_id'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['content_type'], 'node - article');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['domain'], $domain);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['reference_url'], $this->node->toUrl()->setAbsolute(TRUE)->toString());
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['author_name'], 'admin');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['author_email'], 'general@example.com');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['business_unit'], 'General Business Unit');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['business_division'], 'General Business Division');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['campaign_id'], 'General Campaign ID');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['campaign_rating'], 3);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['channel'], 'General Channel Test');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['contact_name'], 'General Test Contact Name');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['contact_email'], 'general@example.com');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['content_description'], 'General Content description');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['external_style_id'], 'general-my-style-id');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['purchase_order'], 'General PO32');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['region'], 'region2');
+    $this->assertEquals(17, count($data['_lingotek_metadata']['_intelligence']));
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['external_document_id'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['content_type'], 'node - article');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['domain'], $domain);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['reference_url'], $this->node->toUrl()->setAbsolute(TRUE)->toString());
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['author_name'], 'admin');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['author_email'], 'general@example.com');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['business_unit'], 'General Business Unit');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['business_division'], 'General Business Division');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['campaign_id'], 'General Campaign ID');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['campaign_rating'], 3);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['channel'], 'General Channel Test');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['contact_name'], 'General Test Contact Name');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['contact_email'], 'general@example.com');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['content_description'], 'General Content description');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['external_style_id'], 'general-my-style-id');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['purchase_order'], 'General PO32');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['region'], 'region2');
   }

   public function testUploadNodeWithProfileOverride() {
@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
     $this->assertTrue(isset($data['uid']));
     $this->assertFalse(isset($data['uid'][0]['_lingotek_metadata']['_intelligence']));
-    $this->assertIdentical($data['uid'][0]['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertIdentical($data['uid'][0]['_lingotek_metadata']['_entity_type_id'], 'user');
+    $this->assertSame($data['uid'][0]['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertSame($data['uid'][0]['_lingotek_metadata']['_entity_type_id'], 'user');
     $this->assertNull($data['uid'][0]['_lingotek_metadata']['_entity_revision']);
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('intelligent_profile', $used_profile, 'The Intelligent Profile profile was used.');
+    $this->assertSame('intelligent_profile', $used_profile, 'The Intelligent Profile profile was used.');

-    $this->assertEqual(4, count($data['_lingotek_metadata']));
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_revision'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_type_id'], 'node');
+    $this->assertEquals(4, count($data['_lingotek_metadata']));
+    $this->assertSame($data['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_entity_revision'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_entity_type_id'], 'node');

-    $this->assertEqual(17, count($data['_lingotek_metadata']['_intelligence']));
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['external_document_id'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['content_type'], 'node - article');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['domain'], $domain);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['reference_url'], $this->node->toUrl()->setAbsolute(TRUE)->toString());
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['author_name'], 'admin');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['author_email'], 'admin@example.com');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['business_unit'], 'Profile Business Unit');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['business_division'], 'Profile Business Division');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['campaign_id'], 'Profile Campaign ID');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['campaign_rating'], 4);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['channel'], 'Profile Channel Test');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['contact_name'], 'Profile Test Contact Name');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['contact_email'], 'profile@example.com');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['content_description'], 'Profile Content description');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['external_style_id'], 'profile-my-style-id');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['purchase_order'], 'Profile PO42');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['region'], 'region2');
+    $this->assertEquals(17, count($data['_lingotek_metadata']['_intelligence']));
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['external_document_id'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['content_type'], 'node - article');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['domain'], $domain);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['reference_url'], $this->node->toUrl()->setAbsolute(TRUE)->toString());
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['author_name'], 'admin');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['author_email'], 'admin@example.com');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['business_unit'], 'Profile Business Unit');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['business_division'], 'Profile Business Division');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['campaign_id'], 'Profile Campaign ID');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['campaign_rating'], 4);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['channel'], 'Profile Channel Test');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['contact_name'], 'Profile Test Contact Name');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['contact_email'], 'profile@example.com');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['content_description'], 'Profile Content description');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['external_style_id'], 'profile-my-style-id');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['purchase_order'], 'Profile PO42');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['region'], 'region2');
   }

   public function testUpdateNodeWithNoSettings() {
@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
     $this->assertTrue(isset($data['uid']));
     $this->assertFalse(isset($data['uid'][0]['_lingotek_metadata']['_intelligence']));
-    $this->assertIdentical($data['uid'][0]['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertIdentical($data['uid'][0]['_lingotek_metadata']['_entity_type_id'], 'user');
+    $this->assertSame($data['uid'][0]['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertSame($data['uid'][0]['_lingotek_metadata']['_entity_type_id'], 'user');
     $this->assertNull($data['uid'][0]['_lingotek_metadata']['_entity_revision']);
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

-    $this->assertEqual(4, count($data['_lingotek_metadata']));
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_revision'], '2');
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_type_id'], 'node');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['external_document_id'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['content_type'], 'node - article');
+    $this->assertEquals(4, count($data['_lingotek_metadata']));
+    $this->assertSame($data['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_entity_revision'], '2');
+    $this->assertSame($data['_lingotek_metadata']['_entity_type_id'], 'node');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['external_document_id'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['content_type'], 'node - article');
   }

   public function testUpdateNodeWithDefaultSettings() {
@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
     $this->assertTrue(isset($data['uid']));
     $this->assertFalse(isset($data['uid'][0]['_lingotek_metadata']['_intelligence']));
-    $this->assertIdentical($data['uid'][0]['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertIdentical($data['uid'][0]['_lingotek_metadata']['_entity_type_id'], 'user');
+    $this->assertSame($data['uid'][0]['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertSame($data['uid'][0]['_lingotek_metadata']['_entity_type_id'], 'user');
     $this->assertNull($data['uid'][0]['_lingotek_metadata']['_entity_revision']);
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

-    $this->assertEqual(4, count($data['_lingotek_metadata']));
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_revision'], '2');
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_type_id'], 'node');
+    $this->assertEquals(4, count($data['_lingotek_metadata']));
+    $this->assertSame($data['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_entity_revision'], '2');
+    $this->assertSame($data['_lingotek_metadata']['_entity_type_id'], 'node');

-    $this->assertEqual(17, count($data['_lingotek_metadata']['_intelligence']));
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['external_document_id'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['content_type'], 'node - article');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['domain'], $domain);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['reference_url'], $this->node->toUrl()->setAbsolute(TRUE)->toString());
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['author_name'], 'admin');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['author_email'], 'admin@example.com');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['business_unit'], NULL);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['business_division'], NULL);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['campaign_id'], NULL);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['campaign_rating'], 0);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['channel'], NULL);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['contact_name'], NULL);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['contact_email'], NULL);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['content_description'], NULL);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['external_style_id'], NULL);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['purchase_order'], NULL);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['region'], NULL);
+    $this->assertEquals(17, count($data['_lingotek_metadata']['_intelligence']));
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['external_document_id'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['content_type'], 'node - article');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['domain'], $domain);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['reference_url'], $this->node->toUrl()->setAbsolute(TRUE)->toString());
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['author_name'], 'admin');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['author_email'], 'admin@example.com');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['business_unit'], NULL);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['business_division'], NULL);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['campaign_id'], NULL);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['campaign_rating'], 0);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['channel'], NULL);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['contact_name'], NULL);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['contact_email'], NULL);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['content_description'], NULL);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['external_style_id'], NULL);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['purchase_order'], NULL);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['region'], NULL);
   }

   /**
@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
     $this->assertTrue(isset($data['uid']));
     $this->assertFalse(isset($data['uid'][0]['_lingotek_metadata']['_intelligence']));
-    $this->assertIdentical($data['uid'][0]['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertIdentical($data['uid'][0]['_lingotek_metadata']['_entity_type_id'], 'user');
+    $this->assertSame($data['uid'][0]['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertSame($data['uid'][0]['_lingotek_metadata']['_entity_type_id'], 'user');
     $this->assertNull($data['uid'][0]['_lingotek_metadata']['_entity_revision']);
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

-    $this->assertEqual(4, count($data['_lingotek_metadata']));
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_revision'], '2');
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_type_id'], 'node');
+    $this->assertEquals(4, count($data['_lingotek_metadata']));
+    $this->assertSame($data['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_entity_revision'], '2');
+    $this->assertSame($data['_lingotek_metadata']['_entity_type_id'], 'node');

-    $this->assertEqual(17, count($data['_lingotek_metadata']['_intelligence']));
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['external_document_id'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['content_type'], 'node - article');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['domain'], $domain);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['reference_url'], $this->node->toUrl()->setAbsolute(TRUE)->toString());
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['author_name'], 'admin');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['author_email'], 'admin@example.com');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['business_unit'], 'General Business Unit');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['business_division'], 'General Business Division');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['campaign_id'], 'General Campaign ID');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['campaign_rating'], 3);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['channel'], 'General Channel Test');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['contact_name'], 'General Test Contact Name');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['contact_email'], 'general@example.com');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['content_description'], 'General Content description');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['external_style_id'], 'general-my-style-id');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['purchase_order'], 'General PO32');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['region'], 'region2');
+    $this->assertEquals(17, count($data['_lingotek_metadata']['_intelligence']));
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['external_document_id'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['content_type'], 'node - article');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['domain'], $domain);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['reference_url'], $this->node->toUrl()->setAbsolute(TRUE)->toString());
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['author_name'], 'admin');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['author_email'], 'admin@example.com');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['business_unit'], 'General Business Unit');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['business_division'], 'General Business Division');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['campaign_id'], 'General Campaign ID');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['campaign_rating'], 3);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['channel'], 'General Channel Test');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['contact_name'], 'General Test Contact Name');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['contact_email'], 'general@example.com');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['content_description'], 'General Content description');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['external_style_id'], 'general-my-style-id');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['purchase_order'], 'General PO32');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['region'], 'region2');
   }

   public function testUpdateNodeWithContactEmailAsAuthorSetting() {
@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
     $this->assertTrue(isset($data['uid']));
     $this->assertFalse(isset($data['uid'][0]['_lingotek_metadata']['_intelligence']));
-    $this->assertIdentical($data['uid'][0]['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertIdentical($data['uid'][0]['_lingotek_metadata']['_entity_type_id'], 'user');
+    $this->assertSame($data['uid'][0]['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertSame($data['uid'][0]['_lingotek_metadata']['_entity_type_id'], 'user');
     $this->assertNull($data['uid'][0]['_lingotek_metadata']['_entity_revision']);
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

-    $this->assertEqual(4, count($data['_lingotek_metadata']));
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_revision'], '2');
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_type_id'], 'node');
+    $this->assertEquals(4, count($data['_lingotek_metadata']));
+    $this->assertSame($data['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_entity_revision'], '2');
+    $this->assertSame($data['_lingotek_metadata']['_entity_type_id'], 'node');

-    $this->assertEqual(17, count($data['_lingotek_metadata']['_intelligence']));
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['external_document_id'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['content_type'], 'node - article');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['domain'], $domain);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['reference_url'], $this->node->toUrl()->setAbsolute(TRUE)->toString());
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['author_name'], 'admin');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['author_email'], 'general@example.com');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['business_unit'], 'General Business Unit');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['business_division'], 'General Business Division');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['campaign_id'], 'General Campaign ID');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['campaign_rating'], 3);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['channel'], 'General Channel Test');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['contact_name'], 'General Test Contact Name');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['contact_email'], 'general@example.com');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['content_description'], 'General Content description');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['external_style_id'], 'general-my-style-id');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['purchase_order'], 'General PO32');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['region'], 'region2');
+    $this->assertEquals(17, count($data['_lingotek_metadata']['_intelligence']));
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['external_document_id'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['content_type'], 'node - article');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['domain'], $domain);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['reference_url'], $this->node->toUrl()->setAbsolute(TRUE)->toString());
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['author_name'], 'admin');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['author_email'], 'general@example.com');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['business_unit'], 'General Business Unit');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['business_division'], 'General Business Division');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['campaign_id'], 'General Campaign ID');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['campaign_rating'], 3);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['channel'], 'General Channel Test');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['contact_name'], 'General Test Contact Name');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['contact_email'], 'general@example.com');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['content_description'], 'General Content description');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['external_style_id'], 'general-my-style-id');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['purchase_order'], 'General PO32');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['region'], 'region2');
   }

   public function testUpdateNodeWithProfileOverride() {
@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
     $this->assertTrue(isset($data['uid']));
     $this->assertFalse(isset($data['uid'][0]['_lingotek_metadata']['_intelligence']));
-    $this->assertIdentical($data['uid'][0]['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertIdentical($data['uid'][0]['_lingotek_metadata']['_entity_type_id'], 'user');
+    $this->assertSame($data['uid'][0]['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertSame($data['uid'][0]['_lingotek_metadata']['_entity_type_id'], 'user');
     $this->assertNull($data['uid'][0]['_lingotek_metadata']['_entity_revision']);
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('intelligent_profile', $used_profile, 'The Intelligent Profile profile was used.');
+    $this->assertSame('intelligent_profile', $used_profile, 'The Intelligent Profile profile was used.');

-    $this->assertEqual(4, count($data['_lingotek_metadata']));
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_id'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_revision'], '2');
-    $this->assertIdentical($data['_lingotek_metadata']['_entity_type_id'], 'node');
+    $this->assertEquals(4, count($data['_lingotek_metadata']));
+    $this->assertSame($data['_lingotek_metadata']['_entity_id'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_entity_revision'], '2');
+    $this->assertSame($data['_lingotek_metadata']['_entity_type_id'], 'node');

-    $this->assertEqual(17, count($data['_lingotek_metadata']['_intelligence']));
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['external_document_id'], '1');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['content_type'], 'node - article');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['domain'], $domain);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['reference_url'], $this->node->toUrl()->setAbsolute(TRUE)->toString());
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['author_name'], 'admin');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['author_email'], 'admin@example.com');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['business_unit'], 'Profile Business Unit');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['business_division'], 'Profile Business Division');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['campaign_id'], 'Profile Campaign ID');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['campaign_rating'], 4);
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['channel'], 'Profile Channel Test');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['contact_name'], 'Profile Test Contact Name');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['contact_email'], 'profile@example.com');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['content_description'], 'Profile Content description');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['external_style_id'], 'profile-my-style-id');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['purchase_order'], 'Profile PO42');
-    $this->assertIdentical($data['_lingotek_metadata']['_intelligence']['region'], 'region2');
+    $this->assertEquals(17, count($data['_lingotek_metadata']['_intelligence']));
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['external_document_id'], '1');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['content_type'], 'node - article');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['domain'], $domain);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['reference_url'], $this->node->toUrl()->setAbsolute(TRUE)->toString());
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['author_name'], 'admin');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['author_email'], 'admin@example.com');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['business_unit'], 'Profile Business Unit');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['business_division'], 'Profile Business Division');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['campaign_id'], 'Profile Campaign ID');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['campaign_rating'], 4);
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['channel'], 'Profile Channel Test');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['contact_name'], 'Profile Test Contact Name');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['contact_email'], 'profile@example.com');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['content_description'], 'Profile Content description');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['external_style_id'], 'profile-my-style-id');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['purchase_order'], 'Profile PO42');
+    $this->assertSame($data['_lingotek_metadata']['_intelligence']['region'], 'region2');
   }

   protected function disableIntelligenceMetadata() {
@@ @@
       'intelligence_metadata[use_base_domain]' => FALSE,
       'intelligence_metadata[use_reference_url]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save Lingotek Intelligence Metadata', [], 'lingotekintelligence-metadata-form');
+    $this->submitForm($edit, 'Save Lingotek Intelligence Metadata', 'lingotekintelligence-metadata-form');
   }

   protected function setupIntelligenceProfileSettings() {
@@ @@
       'intelligence_metadata[purchase_order]' => 'Profile PO42',
       'intelligence_metadata[region]' => 'region2',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

   }

@@ @@
       'intelligence_metadata[purchase_order]' => 'General PO32',
       'intelligence_metadata[region]' => 'region2',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save Lingotek Intelligence Metadata', [], 'lingotekintelligence-metadata-form');
+    $this->submitForm($edit, 'Save Lingotek Intelligence Metadata', 'lingotekintelligence-metadata-form');
   }

   protected function setupContactEmailForAuthorIntelligenceSettings() {
@@ @@
     $edit = [
       'intelligence_metadata[use_contact_email_for_author]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save Lingotek Intelligence Metadata', [], 'lingotekintelligence-metadata-form');
+    $this->submitForm($edit, 'Save Lingotek Intelligence Metadata', 'lingotekintelligence-metadata-form');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


121) modules/contrib/lingotek/tests/src/Functional/LingotekGetSourceDataTest.php:96

    ---------- begin diff ----------
@@ @@
     $translation_service = \Drupal::service('lingotek.content_translation');
     $serialized_node = $translation_service->getSourceData($node);
     $this->assertTrue(isset($serialized_node['_lingotek_metadata']), 'The Lingotek metadata is included in the extracted data.');
-    $this->assertEqual('node', $serialized_node['_lingotek_metadata']['_entity_type_id'], 'Entity type id is included as metadata.');
-    $this->assertEqual(1, $serialized_node['_lingotek_metadata']['_entity_id'], 'Entity id is included as metadata.');
-    $this->assertEqual(1, $serialized_node['_lingotek_metadata']['_entity_revision'], 'Entity revision id is included as metadata.');
+    $this->assertEquals('node', $serialized_node['_lingotek_metadata']['_entity_type_id'], 'Entity type id is included as metadata.');
+    $this->assertEquals(1, $serialized_node['_lingotek_metadata']['_entity_id'], 'Entity id is included as metadata.');
+    $this->assertEquals(1, $serialized_node['_lingotek_metadata']['_entity_revision'], 'Entity revision id is included as metadata.');

     $node->setNewRevision();
     $node->setTitle($this->randomString(10));
@@ @@

     $serialized_node = $translation_service->getSourceData($node);
     $this->assertTrue(isset($serialized_node['_lingotek_metadata']), 'The Lingotek metadata is included in the extracted data.');
-    $this->assertEqual('node', $serialized_node['_lingotek_metadata']['_entity_type_id'], 'Entity type id is included as metadata.');
-    $this->assertEqual(1, $serialized_node['_lingotek_metadata']['_entity_id'], 'Entity id is included as metadata.');
-    $this->assertEqual(2, $serialized_node['_lingotek_metadata']['_entity_revision'], 'Entity revision id is included as metadata, and has changed.');
+    $this->assertEquals('node', $serialized_node['_lingotek_metadata']['_entity_type_id'], 'Entity type id is included as metadata.');
+    $this->assertEquals(1, $serialized_node['_lingotek_metadata']['_entity_id'], 'Entity id is included as metadata.');
+    $this->assertEquals(2, $serialized_node['_lingotek_metadata']['_entity_revision'], 'Entity revision id is included as metadata, and has changed.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


122) modules/contrib/lingotek/tests/src/Functional/LingotekFieldOptionsTranslationTest.php:62

    ---------- begin diff ----------
@@ @@
     $this->clickLink(t('Translate'), 1);

     $this->clickLink(t('Upload'));
-    $this->assertText(t('Options uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('Options uploaded successfully'));

     // Check that only the translatable fields have been uploaded.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
@@ @@
     $this->assertTrue(array_key_exists('settings.allowed_values.0.label', $data['field.storage.node.field_options']));
     $this->assertTrue(array_key_exists('settings.allowed_values.1.label', $data['field.storage.node.field_options']));

-    $this->assertEqual('Options', $data['field.field.node.article.field_options']['label']);
-    $this->assertEqual('Zero', $data['field.storage.node.field_options']['settings.allowed_values.0.label']);
-    $this->assertEqual('One', $data['field.storage.node.field_options']['settings.allowed_values.1.label']);
+    $this->assertEquals('Options', $data['field.field.node.article.field_options']['label']);
+    $this->assertEquals('Zero', $data['field.storage.node.field_options']['settings.allowed_values.0.label']);
+    $this->assertEquals('One', $data['field.storage.node.field_options']['settings.allowed_values.1.label']);

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     $this->clickLink(t('Check upload status'));
-    $this->assertText('Options status checked successfully');
+    $this->assertSession()->pageTextContains('Options status checked successfully');

     $this->clickLink(t('Request translation'));
-    $this->assertText(t('Translation to es_MX requested successfully'));
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains(t('Translation to es_MX requested successfully'));
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     $this->clickLink(t('Check Download'));
-    $this->assertText(t('Translation to es_MX status checked successfully'));
+    $this->assertSession()->pageTextContains(t('Translation to es_MX status checked successfully'));

     $this->clickLink('Download');
-    $this->assertText(t('Translation to es_MX downloaded successfully'));
+    $this->assertSession()->pageTextContains(t('Translation to es_MX downloaded successfully'));

     // Check that the edit link is there.
     $basepath = \Drupal::request()->getBasePath();
@@ @@
     // and this alters the order. See https://www.drupal.org/project/drupal/issues/3257407.
     $index = version_compare(\Drupal::VERSION, '9.4', '>=') ? 2 : 1;
     $this->clickLink('Edit', $index);
-    $this->assertFieldByName('translation[config_names][field.field.node.article.field_options][label]', 'Opciones');
-    $this->assertFieldByName('translation[config_names][field.field.node.article.field_options][description]', 'Descripción del campo');
-    $this->assertFieldByName('translation[config_names][field.storage.node.field_options][settings][allowed_values][0][label]', 'Cero');
-    $this->assertFieldByName('translation[config_names][field.storage.node.field_options][settings][allowed_values][1][label]', 'Uno');
+    $this->assertSession()->fieldValueEquals('translation[config_names][field.field.node.article.field_options][label]', 'Opciones');
+    $this->assertSession()->fieldValueEquals('translation[config_names][field.field.node.article.field_options][description]', 'Descripción del campo');
+    $this->assertSession()->fieldValueEquals('translation[config_names][field.storage.node.field_options][settings][allowed_values][0][label]', 'Cero');
+    $this->assertSession()->fieldValueEquals('translation[config_names][field.storage.node.field_options][settings][allowed_values][1][label]', 'Uno');
   }

   /**
@@ @@
     $input_string = "zero|Zero\none|One";

     $edit = ['settings[allowed_values]' => $input_string];
-    $this->drupalPostForm($adminPath, $edit, t('Save field settings'));
+    $this->drupalGet($adminPath);
+    $this->submitForm($edit, t('Save field settings'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


123) modules/contrib/lingotek/tests/src/Functional/LingotekFieldBodyTranslationTest.php:67

    ---------- begin diff ----------
@@ @@
     $this->clickLink(t('Translate'));

     $this->clickLink(t('Upload'));
-    $this->assertText(t('Body uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('Body uploaded successfully'));

     // Check that only the translatable fields have been uploaded.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
@@ @@

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     $this->clickLink(t('Check upload status'));
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     $this->clickLink(t('Request translation'));
-    $this->assertText(t('Translation to es_MX requested successfully'));
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains(t('Translation to es_MX requested successfully'));
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     $this->clickLink(t('Check Download'));
-    $this->assertText(t('Translation to es_MX status checked successfully'));
+    $this->assertSession()->pageTextContains(t('Translation to es_MX status checked successfully'));

     $this->clickLink('Download');
-    $this->assertText(t('Translation to es_MX downloaded successfully'));
+    $this->assertSession()->pageTextContains(t('Translation to es_MX downloaded successfully'));

     // Check that the edit link is there.
     $basepath = \Drupal::request()->getBasePath();
@@ @@
     // and this alters the order. See https://www.drupal.org/project/drupal/issues/3257407.
     $index = version_compare(\Drupal::VERSION, '9.4', '>=') ? 2 : 1;
     $this->clickLink('Edit', $index);
-    $this->assertFieldByName('translation[config_names][field.field.node.article.body][label]', 'Cuerpo');
-    $this->assertFieldByName('translation[config_names][field.field.node.article.body][description]', 'Cuerpo del contenido');
+    $this->assertSession()->fieldValueEquals('translation[config_names][field.field.node.article.body][label]', 'Cuerpo');
+    $this->assertSession()->fieldValueEquals('translation[config_names][field.field.node.article.body][description]', 'Cuerpo del contenido');
   }

   /**
@@ @@

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');

     $this->clickLink(t('Translate'));

@@ @@

     // Recheck status.
     $this->clickLink('Check Download');
-    $this->assertText('Translation to es_MX status checked successfully');
+    $this->assertSession()->pageTextContains('Translation to es_MX status checked successfully');

     // Download the translation.
     $this->clickLink('Download');
-    $this->assertText('Translation to es_MX downloaded successfully');
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
   }

   /**
@@ @@
     $this->clickLink(t('Translate'));

     $this->clickLink(t('Upload'));
-    $this->assertText(t('Body uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('Body uploaded successfully'));

     // Check that only the translatable fields have been uploaded.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->verbose(var_export($data, TRUE));
-    $this->assertEqual(2, count($data['field.field.node.article.body']));
+    $this->assertEquals(2, count($data['field.field.node.article.body']));
     $this->assertTrue(array_key_exists('label', $data['field.field.node.article.body']));
     // Cannot use isset, the key exists but we are not providing values, so NULL.
     $this->assertTrue(array_key_exists('description', $data['field.field.node.article.body']));
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check upload status');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     // There are two links for requesting translations, or we can add them
     // manually.
@@ @@
     // Upload the document, which must fail.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Body upload failed. Please try again.');
+    $this->assertSession()->pageTextContains('Body upload failed. Please try again.');

     // The field has been marked with the error status.
     $fieldConfig = FieldConfig::load('node.article.body');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
@@ @@

     // We failed at checking status, but we don't know what happened.
     // So we don't mark as error but keep it on importing.
-    $this->assertText('Body status check failed. Please try again.');
+    $this->assertSession()->pageTextContains('Body status check failed. Please try again.');

     // The field has been marked with the error status.
     $fieldConfig = FieldConfig::load('node.article.body');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status);
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status);
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // The document has not been imported yet.
     \Drupal::state()->set('lingotek.document_status_completion', FALSE);
@@ @@

     // We failed at checking status, but we don't know what happened.
     // So we don't mark as error but keep it on importing.
-    $this->assertText('The import for Body is still pending.');
+    $this->assertSession()->pageTextContains('The import for Body is still pending.');

     // The field has been marked with the error status.
     $fieldConfig = FieldConfig::load('node.article.body');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status);
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status);
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
@@ @@

     // We failed at checking status, but we don't know what happened.
     // So we don't mark as error but keep it on importing.
-    $this->assertText('Document Body was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document Body was not found. Please upload again.');

     // The field has been marked with the error status.
     $fieldConfig = FieldConfig::load('node.article.body');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status);
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status);
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');

     // Go back to the form.
     $this->drupalGet('/admin/config/regional/config-translation/node_fields');
@@ @@
     // Re-upload. Must fail now.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Contents update failed. Please try again.');
+    $this->assertSession()->pageTextContains('Contents update failed. Please try again.');

     // The field has been marked with the error status.
     $fieldConfig = FieldConfig::load('node.article.body');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Contents has been updated.');
+    $this->assertSession()->pageTextContains('Contents has been updated.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     \Drupal::state()->set('lingotek.must_error_in_upload', TRUE);

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
-    $this->assertText('The update for field_config Contents failed. Please try again.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');
+    $this->assertSession()->pageTextContains('The update for field_config Contents failed. Please try again.');

     // The field has been marked with the error status.
     $fieldConfig = FieldConfig::load('node.article.body');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
@@ @@
     $this->clickLink(t('Translate'));
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Contents has been updated.');
+    $this->assertSession()->pageTextContains('Contents has been updated.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');

     // Go back to the form.
     $this->drupalGet('/admin/config/regional/config-translation/node_fields');
@@ @@
     // Re-upload. Must fail now.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Document Contents has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document Contents has been archived. Uploading again.');

     // The field has been marked with the error status.
     $fieldConfig = FieldConfig::load('node.article.body');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status);
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status);

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', FALSE);
     $this->clickLink('Check upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Contents status checked successfully');
+    $this->assertSession()->pageTextContains('Contents status checked successfully');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', TRUE);

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
-    $this->assertText('Document field_config Contents has been archived. Uploading again.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');
+    $this->assertSession()->pageTextContains('Document field_config Contents has been archived. Uploading again.');

     // The field has been marked with the error status.
     $fieldConfig = FieldConfig::load('node.article.body');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status);
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status);

     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', FALSE);
     $this->clickLink(t('Translate'));
     $this->clickLink('Check upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Contents status checked successfully');
+    $this->assertSession()->pageTextContains('Contents status checked successfully');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');

     // Go back to the form.
     $this->drupalGet('/admin/config/regional/config-translation/node_fields');
@@ @@
     // Re-upload. Must fail now.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Document field_config Contents has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document field_config Contents has a new version. The document id has been updated for all future interactions. Please try again.');

     // The field has been marked with the error status.
     $fieldConfig = FieldConfig::load('node.article.body');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_EDITED, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_EDITED, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Contents has been updated.');
+    $this->assertSession()->pageTextContains('Contents has been updated.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', TRUE);

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
-    $this->assertText('Document field_config Contents has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');
+    $this->assertSession()->pageTextContains('Document field_config Contents has a new version. The document id has been updated for all future interactions. Please try again.');

     // The field has been marked with the error status.
     $fieldConfig = FieldConfig::load('node.article.body');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_EDITED, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_EDITED, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', FALSE);
@@ @@
     $this->clickLink(t('Translate'));
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Contents has been updated.');
+    $this->assertSession()->pageTextContains('Contents has been updated.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');

     // Go back to the form.
     $this->drupalGet('/admin/config/regional/config-translation/node_fields');
@@ @@
     // Re-upload. Must fail now.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // The field has been marked with the error status.
     $fieldConfig = FieldConfig::load('node.article.body');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Contents has been updated.');
+    $this->assertSession()->pageTextContains('Contents has been updated.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');

     // Go back to the form.
     $this->drupalGet('/admin/config/regional/config-translation/node_fields');
@@ @@
     // Re-upload. Must fail now.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // The field has been marked with the error status.
     $fieldConfig = FieldConfig::load('node.article.body');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_update', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Contents has been updated.');
+    $this->assertSession()->pageTextContains('Contents has been updated.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');

     // Go back to the form.
     $this->drupalGet('/admin/config/regional/config-translation/node_fields');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status);
-    $this->assertText('Document Contents was not found. Please upload again.');
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status);
+    $this->assertSession()->pageTextContains('Document Contents was not found. Please upload again.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Contents uploaded successfully');
+    $this->assertSession()->pageTextContains('Contents uploaded successfully');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', TRUE);

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // The field has been marked with the error status.
     $fieldConfig = FieldConfig::load('node.article.body');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', FALSE);
@@ @@
     $this->clickLink(t('Translate'));
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Contents has been updated.');
+    $this->assertSession()->pageTextContains('Contents has been updated.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_update', TRUE);

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // The field has been marked with the error status.
     $fieldConfig = FieldConfig::load('node.article.body');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_update', FALSE);
@@ @@
     $this->clickLink(t('Translate'));
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Contents has been updated.');
+    $this->assertSession()->pageTextContains('Contents has been updated.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', TRUE);

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');

     $fieldConfig = FieldConfig::load('node.article.body');
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status);
-    $this->assertText('Document field_config Contents was not found. Please upload again.');
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status);
+    $this->assertSession()->pageTextContains('Document field_config Contents was not found. Please upload again.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', FALSE);
@@ @@
     $this->clickLink(t('Translate'));
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Contents uploaded successfully');
+    $this->assertSession()->pageTextContains('Contents uploaded successfully');
   }

   /**
@@ @@

     // Create a field.
     $edit = ['label' => 'Excerpt', 'new_storage_type' => 'text', 'field_name' => 'excerpt'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/add-field', $edit, 'Save and continue');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/add-field');
+    $this->submitForm($edit, 'Save and continue');

     // The document was uploaded automatically and failed.
-    $this->assertText('The upload for field_config Excerpt failed. Please try again.');
+    $this->assertSession()->pageTextContains('The upload for field_config Excerpt failed. Please try again.');

     // The field has been marked with the error status.
     $fieldConfig = FieldConfig::load('node.article.field_excerpt');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
   }

   /**
@@ @@
     // Upload the document, which must fail.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // The field has been marked with the error status.
     $fieldConfig = FieldConfig::load('node.article.body');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_upload', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');
   }

   /**
@@ @@
     // Upload the document, which must fail.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // The field has been marked with the error status.
     $fieldConfig = FieldConfig::load('node.article.body');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_upload', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');
   }

   /**
@@ @@

     // Create a field.
     $edit = ['label' => 'Excerpt', 'new_storage_type' => 'text', 'field_name' => 'excerpt'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/add-field', $edit, 'Save and continue');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/add-field');
+    $this->submitForm($edit, 'Save and continue');

     // The document was uploaded automatically and failed.
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // The field has been marked with the error status.
     $fieldConfig = FieldConfig::load('node.article.field_excerpt');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
   }

   /**
@@ @@

     // Create a field.
     $edit = ['label' => 'Excerpt', 'new_storage_type' => 'text', 'field_name' => 'excerpt'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/add-field', $edit, 'Save and continue');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/add-field');
+    $this->submitForm($edit, 'Save and continue');

     // The document was uploaded automatically and failed.
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // The field has been marked with the error status.
     $fieldConfig = FieldConfig::load('node.article.field_excerpt');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


124) modules/contrib/lingotek/tests/src/Functional/LingotekFieldBodyNotificationCallbackTest.php:61

    ---------- begin diff ----------
@@ @@
     $entity = \Drupal::entityTypeManager()->getStorage('field_config')->load('node.article.body');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));

     // Simulate the notification of content successfully uploaded.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $entity = $field_storage->load('node.article.body');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));

     $this->goToConfigBulkManagementForm();

@@ @@
     $entity = $field_storage->load('node.article.body');

     // Assert the target is ready.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $entity = \Drupal::entityTypeManager()->getStorage('field_config')->load('node.article.body');

     // Assert the content is edited, but not auto-uploaded.
-    $this->assertIdentical(Lingotek::STATUS_EDITED, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_EDITED, $config_translation_service->getSourceStatus($entity));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_fields');
@@ @@
     $response = json_decode($request->getBody(), TRUE);

     // Translations are not requested.
-    $this->assertIdentical([], $response['result']['request_translations'], 'No translations has been requested after notification automatically.');
+    $this->assertSame([], $response['result']['request_translations'], 'No translations has been requested after notification automatically.');

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $entity = $field_storage->load('node.article.body');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is ready to be requested.
-    $this->assertIdentical(Lingotek::STATUS_REQUEST, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_REQUEST, $config_translation_service->getTargetStatus($entity, 'es'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $entity = $field_storage->load('node.article.body');

     // Assert the target is ready.
-    $this->assertIdentical(Lingotek::STATUS_READY, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_READY, $config_translation_service->getTargetStatus($entity, 'es'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $entity = $field_storage->load('node.article.body');

     // Assert the target is current.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));
   }

   /**
@@ @@
     $entity = \Drupal::entityTypeManager()->getStorage('field_config')->load('node.article.body');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_fields');
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical(['de', 'it'], $response['result']['request_translations'], 'German and Italian languages has been requested after notification automatically.');
+    $this->assertSame(['de', 'it'], $response['result']['request_translations'], 'German and Italian languages has been requested after notification automatically.');

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $entity = $field_storage->load('node.article.body');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_REQUEST, $config_translation_service->getTargetStatus($entity, 'es'));
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'de'));
+    $this->assertSame(Lingotek::STATUS_REQUEST, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'de'));
     // We assert for the UI, as the status is not really stored.
     // TODO: This should actually be stored.
     $this->assertTargetStatus('ca', Lingotek::STATUS_DISABLED);
@@ @@
     $entity = $field_storage->load('node.article.body');

     // Assert the target is ready.
-    $this->assertIdentical(Lingotek::STATUS_READY, $config_translation_service->getTargetStatus($entity, 'es'));
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'de'));
+    $this->assertSame(Lingotek::STATUS_READY, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'de'));
     // We assert for the UI, as the status is not really stored.
     // TODO: This should actually be stored.
     $this->assertTargetStatus('ca', Lingotek::STATUS_DISABLED);
@@ @@
     $field_storage->resetCache();
     $entity = $field_storage->load('node.article.body');
     // Assert the target is current.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'de'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'de'));
   }

   /**
@@ @@
     $entity = \Drupal::entityTypeManager()->getStorage('field_config')->load('node.article.body');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_fields');
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $entity = $field_storage->load('node.article.body');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
-    $this->assertIdentical(Lingotek::STATUS_REQUEST, $config_translation_service->getTargetStatus($entity, 'de'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_REQUEST, $config_translation_service->getTargetStatus($entity, 'de'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $entity = $field_storage->load('node.article.body');

     // Assert the target is ready.
-    $this->assertIdentical(Lingotek::STATUS_READY, $config_translation_service->getTargetStatus($entity, 'es'));
-    $this->assertIdentical(Lingotek::STATUS_READY, $config_translation_service->getTargetStatus($entity, 'de'));
+    $this->assertSame(Lingotek::STATUS_READY, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_READY, $config_translation_service->getTargetStatus($entity, 'de'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $field_storage->resetCache();
     $entity = $field_storage->load('node.article.body');
     // Assert the target is current.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));
-    $this->assertIdentical(Lingotek::STATUS_READY, $config_translation_service->getTargetStatus($entity, 'de'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_READY, $config_translation_service->getTargetStatus($entity, 'de'));
   }

   /**
@@ @@
     // The node cache needs to be reset before reload.
     $field_storage->resetCache();
     $entity = $field_storage->load('node.article.body');
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_fields');
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical(['it', 'es'], $response['result']['request_translations'], 'Spanish and Italian languages have been requested after notification automatically.');
+    $this->assertSame(['it', 'es'], $response['result']['request_translations'], 'Spanish and Italian languages have been requested after notification automatically.');

     /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
     $lingotek_config = \Drupal::service('lingotek.configuration');
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Italian language has not been requested after notification automatically because it is disabled.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Italian language has not been requested after notification automatically because it is disabled.');
   }

   /**
@@ @@

     // All the links are current.
     $current_links = $this->xpath("//a[contains(@class,'language-icon') and contains(@class, 'target-current')]");
-    $this->assertEqual(count($current_links), 2, 'Translation "es_ES" and "it_IT" are current.');
+    $this->assertEquals(count($current_links), 2, 'Translation "es_ES" and "it_IT" are current.');

     // Simulate the notification of target deleted.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     $config_translation_service = \Drupal::service('lingotek.config_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
-    $this->assertIdentical($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');

     $this->goToConfigBulkManagementForm('node_fields');

@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical($response['messages'][0], 'Document import for entity Body failed. Reverting dummy-document-hash-id to previous id (NULL)');
+    $this->assertSame($response['messages'][0], 'Document import for entity Body failed. Reverting dummy-document-hash-id to previous id (NULL)');

     $this->goToConfigBulkManagementForm('node_fields');

@@ @@
     $entity = $field_storage->load('node.article.body');

     $this->assertNull($config_translation_service->getDocumentId($entity));
-    $this->assertIdentical(Lingotek::STATUS_ERROR, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_ERROR, $config_translation_service->getSourceStatus($entity));
   }

   /**
@@ @@
     $config_translation_service = \Drupal::service('lingotek.config_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
-    $this->assertIdentical($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');

     $this->goToConfigBulkManagementForm('node_fields');

@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     $this->goToConfigBulkManagementForm('node_fields');

@@ @@
     $entity = $field_storage->load('node.article.body');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));

     // Edit the field.
     $edit = ['label' => 'Body EDITED'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));

     $this->goToConfigBulkManagementForm('node_fields');

@@ @@
     $entity = $field_storage->load('node.article.body');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
     // Assert the document id changed.
-    $this->assertIdentical($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id-1');
+    $this->assertSame($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id-1');

     // Simulate the notification of failed import document.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);

-    $this->assertIdentical($response['messages'][0], 'Document import for entity Body EDITED failed. Reverting dummy-document-hash-id-1 to previous id dummy-document-hash-id');
+    $this->assertSame($response['messages'][0], 'Document import for entity Body EDITED failed. Reverting dummy-document-hash-id-1 to previous id dummy-document-hash-id');

     $this->goToConfigBulkManagementForm('node_fields');

@@ @@

     // Assert the document id was restored.
     $this->assertEquals($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');
-    $this->assertIdentical(Lingotek::STATUS_ERROR, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_ERROR, $config_translation_service->getSourceStatus($entity));
   }

   /**
@@ @@
     $config_translation_service = \Drupal::service('lingotek.config_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
-    $this->assertIdentical($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');

     $this->goToConfigBulkManagementForm('node_fields');

@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     $this->goToConfigBulkManagementForm('node_fields');

@@ @@
     $entity = $field_storage->load('node.article.body');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));

     // Edit the field.
     $edit = ['label' => 'Body EDITED'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));

     $this->goToConfigBulkManagementForm('node_fields');

@@ @@
     $entity = $field_storage->load('node.article.body');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
     // Assert the document id changed.
-    $this->assertIdentical($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id-1');
+    $this->assertSame($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id-1');

     // Simulate the notification of content successfully updated.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@

     // Assert the document id and the CURRENT status.
     $this->assertEquals($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id-1');
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
   }

   /**
@@ @@
     $config_translation_service = \Drupal::service('lingotek.config_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
-    $this->assertIdentical($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');

     $this->goToConfigBulkManagementForm('node_fields');

@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     $this->goToConfigBulkManagementForm('node_fields');

@@ @@
     $entity = $field_storage->load('node.article.body');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));

     // Simulate the notification of document_cancelled document.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);

-    $this->assertIdentical($response['messages'][0], 'Document Body cancelled in TMS.');
+    $this->assertSame($response['messages'][0], 'Document Body cancelled in TMS.');

     $this->goToConfigBulkManagementForm('node_fields');

@@ @@
     $entity = $field_storage->load('node.article.body');

     $this->assertNull($config_translation_service->getDocumentId($entity));
-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $config_translation_service->getSourceStatus($entity));
-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $config_translation_service->getTargetStatus($entity, 'es'));
   }

   /**
@@ @@
     $config_translation_service = \Drupal::service('lingotek.config_translation');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
-    $this->assertIdentical($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');

     $this->goToConfigBulkManagementForm('node_fields');

@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     $this->goToConfigBulkManagementForm('node_fields');

@@ @@
     $entity = $field_storage->load('node.article.body');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));

     // Simulate the notification of document_cancelled document.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);

-    $this->assertIdentical($response['messages'][0], 'Document Body target es_ES cancelled in TMS.');
+    $this->assertSame($response['messages'][0], 'Document Body target es_ES cancelled in TMS.');

     $this->goToConfigBulkManagementForm('node_fields');

@@ @@
     $field_storage->resetCache();
     $entity = $field_storage->load('node.article.body');

-    $this->assertIdentical('dummy-document-hash-id', $config_translation_service->getDocumentId($entity));
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame('dummy-document-hash-id', $config_translation_service->getDocumentId($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $config_translation_service->getTargetStatus($entity, 'es'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


125) modules/contrib/lingotek/tests/src/Functional/LingotekFieldBodyExistingBulkTranslationTest.php:64

    ---------- begin diff ----------
@@ @@
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText(t('Body uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('Body uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // Assert the untracked translation is shown.
     $this->assertTargetStatus('ES', 'untracked');
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX status checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX status checked successfully");

     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'ES');
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


126) modules/contrib/lingotek/tests/src/Functional/LingotekFieldBodyBulkTranslationTest.php:60

    ---------- begin diff ----------
@@ @@
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText(t('Body uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('Body uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/field_config/node.article.body?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX status checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX status checked successfully");

     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'ES');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/field_config/node.article.body?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request the German (AT) translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('de', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/field_config/node.article.body/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => 'check_translation:de',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.checked_target_locale'));

     // Download the German translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/field_config/node.article.body/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => 'download:de',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('de_AT', 'dummy-document-hash-id', 'DE');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // I can check current status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/field_config/node.article.body?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check status of all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/field_config/node.article.body/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Download all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
   }

   /**
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:manual',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Add a language so we can check that it's not marked as dirty if there are
     // no translations.
@@ @@
     // Add a language so we can check that it's not marked as for requesting if
     // it was already requested.
     ConfigurableLanguage::createFromLangcode('ko')->setThirdPartySetting('lingotek', 'locale', 'ko_KR')->save();
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');

     // Edit the object
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', ['label' => 'Body EDITED'], t('Save settings'));
+    $this->submitForm(['label' => 'Body EDITED'], t('Save settings'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_fields');
@@ @@

     // Request korean, with outdated content available.
     $this->clickLink('KO');
-    $this->assertText("Translation to ko_KR requested successfully");
+    $this->assertSession()->pageTextContains("Translation to ko_KR requested successfully");

     // Reupload the content.
     $this->clickLink('EN');
-    $this->assertText('Body EDITED has been updated.');
+    $this->assertSession()->pageTextContains('Body EDITED has been updated.');

     // Recheck status.
     $this->clickLink('EN');
-    $this->assertText('Body EDITED status checked successfully');
+    $this->assertSession()->pageTextContains('Body EDITED status checked successfully');

     // Korean should still be marked as requested, so we can check target.
     $this->assertTargetStatus('KO', 'pending');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Operations completed.');

     // Download the translation.
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
   }

   /**
@@ @@
     // Add a language so we can check that it's not marked as dirty if there are
     // no translations.
     ConfigurableLanguage::createFromLangcode('eu')->setThirdPartySetting('lingotek', 'locale', 'eu_ES')->save();
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');

     // Edit the object
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', ['label' => 'Body EDITED'], t('Save settings'));
+    $this->submitForm(['label' => 'Body EDITED'], t('Save settings'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_fields');
@@ @@

     // Recheck status.
     $this->clickLink('EN');
-    $this->assertText('Body EDITED status checked successfully');
+    $this->assertSession()->pageTextContains('Body EDITED status checked successfully');

     // Check the translation after having been edited.
     $edit = [
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Operations completed.');

     // Download the translation.
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
   }

   /**
@@ @@
     // There is a link for requesting the Catalan translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/ca_ES?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('CA');
-    $this->assertText("Translation to ca_ES requested successfully");
+    $this->assertSession()->pageTextContains("Translation to ca_ES requested successfully");
   }

   /**
@@ @@
    * Test that when a config is uploaded in a different locale that locale is used.
    * ToDo: Add a test for this.
    */
-  public function testAddingConfigInDifferentLocale() {
-    $this->pass('Test not implemented yet.');
+  public function testAddingConfigInDifferentLocale()
+  {
   }

   /**
@@ @@

     // Upload the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Body upload failed. Please try again.');
+    $this->assertSession()->pageTextContains('Body upload failed. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');
   }

   /**
@@ @@

     // Upload the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');
   }

   /**
@@ @@

     // Upload the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check upload.
     $this->assertLingotekCheckSourceStatusLink();
@@ @@
     // So we don't mark as error but keep it on importing.
     $this->assertNoSourceStatus('EN', Lingotek::STATUS_REQUEST);
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
-    $this->assertText('Body status check failed. Please try again.');
+    $this->assertSession()->pageTextContains('Body status check failed. Please try again.');

     $fieldConfig = FieldConfig::load('node.article.body');
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status);
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status);
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // The document has not been imported yet.
     \Drupal::state()->set('lingotek.document_status_completion', FALSE);
@@ @@
     // So we don't mark as error but keep it on importing.
     $this->assertNoSourceStatus('EN', Lingotek::STATUS_REQUEST);
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
-    $this->assertText('The import for Body is still pending.');
+    $this->assertSession()->pageTextContains('The import for Body is still pending.');

     $fieldConfig = FieldConfig::load('node.article.body');
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status);
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status);
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check upload.
     $this->assertLingotekCheckSourceStatusLink();
@@ @@
     // We failed at checking status, but we don't know what happened.
     // So we don't mark as error but keep it on importing.
     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
-    $this->assertText('Document Body was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document Body was not found. Please upload again.');

     $fieldConfig = FieldConfig::load('node.article.body');
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status);
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status);
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');

     \Drupal::state()->set('lingotek.must_error_in_upload', TRUE);

@@ @@

     // Update the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Contents update failed. Please try again.');
+    $this->assertSession()->pageTextContains('Contents update failed. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Contents has been updated.');
+    $this->assertSession()->pageTextContains('Contents has been updated.');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');

     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', TRUE);

@@ @@

     // Update the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Contents has been updated.');
+    $this->assertSession()->pageTextContains('Contents has been updated.');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');

     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_update', TRUE);

@@ @@

     // Update the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Contents has been updated.');
+    $this->assertSession()->pageTextContains('Contents has been updated.');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');

     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', TRUE);

@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status);
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status);

     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document field_config Contents was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document field_config Contents was not found. Please upload again.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Contents uploaded successfully');
+    $this->assertSession()->pageTextContains('Contents uploaded successfully');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');

     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', TRUE);

@@ @@

     // Update the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Document field_config Contents has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document field_config Contents has been archived. Uploading again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Contents status checked successfully');
+    $this->assertSession()->pageTextContains('Contents status checked successfully');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');

     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', TRUE);

@@ @@

     // Update the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Document field_config Contents has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document field_config Contents has a new version. The document id has been updated for all future interactions. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_EDITED);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_EDITED, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_EDITED, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Contents has been updated.');
+    $this->assertSession()->pageTextContains('Contents has been updated.');
   }

   /**
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Body upload failed. Please try again.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Body upload failed. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');

     \Drupal::state()->set('lingotek.must_error_in_upload', TRUE);

@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Contents update failed. Please try again.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Contents update failed. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Contents has been updated.');
+    $this->assertSession()->pageTextContains('Contents has been updated.');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');

     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', TRUE);

@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Contents has been updated.');
+    $this->assertSession()->pageTextContains('Contents has been updated.');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');

     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_update', TRUE);

@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Contents has been updated.');
+    $this->assertSession()->pageTextContains('Contents has been updated.');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');

     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', TRUE);

@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $fieldConfig = FieldConfig::load('node.article.body');
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status);
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status);

     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document field_config Contents was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document field_config Contents was not found. Please upload again.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Contents uploaded successfully');
+    $this->assertSession()->pageTextContains('Contents uploaded successfully');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');

     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', TRUE);

@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Document field_config Contents has been archived. Uploading again.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Document field_config Contents has been archived. Uploading again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Contents status checked successfully');
+    $this->assertSession()->pageTextContains('Contents status checked successfully');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the field.
     $edit = ['label' => 'Contents'];
-    $this->drupalPostForm('/admin/structure/types/manage/article/fields/node.article.body', $edit, t('Save settings'));
-    $this->assertText('Saved Contents configuration.');
+    $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body');
+    $this->submitForm($edit, t('Save settings'));
+    $this->assertSession()->pageTextContains('Saved Contents configuration.');

     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', TRUE);

@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Document field_config Contents has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Document field_config Contents has a new version. The document id has been updated for all future interactions. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_EDITED);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_EDITED, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_EDITED, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Contents has been updated.');
+    $this->assertSession()->pageTextContains('Contents has been updated.');
   }

   /**
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');
   }

   /**
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($fieldConfig);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The field has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
+    $this->assertSession()->pageTextContains('Body uploaded successfully');
   }

   /**
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/field_config/node.article.body?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Assert that I could request translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Now Drupal knows that there are translations ready.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/field_config/node.article.body/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@

     // Even if I just add a new language.
     ConfigurableLanguage::createFromLangcode('de')->setThirdPartySetting('lingotek', 'locale', 'de_DE')->save();
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/field_config/node.article.body/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');

     // Ensure locales are handled correctly by setting manual values.
     \Drupal::state()->set('lingotek.document_completion_statuses', ['de-AT' => 50, 'de-DE' => 100, 'es-MX' => 10]);
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Now Drupal knows which translations are ready.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/download/field_config/node.article.body/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@

     \Drupal::state()->set('lingotek.document_completion_statuses', ['it-IT' => 100, 'de-DE' => 50, 'es-MX' => 10]);
     // Check all statuses again.
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // All translations must be updated according exclusively with the
     // information from the TMS.
@@ @@
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText(t('Body uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('Body uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/field_config/node.article.body?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX status checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX status checked successfully");

     \Drupal::state()->set('lingotek.must_error_in_download', TRUE);
     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Body es_MX translation download failed. Please try again.');
-    $this->assertIdentical(NULL, \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Body es_MX translation download failed. Please try again.');
+    $this->assertSame(NULL, \Drupal::state()->get('lingotek.downloaded_locale'));

     $this->goToConfigBulkManagementForm('node_fields');
     // Check the right class is added.
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $target_status = $translation_service->getTargetStatus($fieldConfig, 'es');
-    $this->assertEqual(Lingotek::STATUS_ERROR, $target_status, 'The field has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $target_status, 'The field has been marked as error.');

     \Drupal::state()->set('lingotek.must_error_in_download', FALSE);
     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
   }

   /**
@@ @@
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText(t('Body uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('Body uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/field_config/node.article.body?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX status checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX status checked successfully");

     \Drupal::state()->set('lingotek.must_document_not_found_error_download', TRUE);
     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Document Body was not found. Please upload again.');
-    $this->assertIdentical(NULL, \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Document Body was not found. Please upload again.');
+    $this->assertSame(NULL, \Drupal::state()->get('lingotek.downloaded_locale'));

     $this->goToConfigBulkManagementForm('node_fields');
     // Check the right class is added.
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/field_config/node.article.body?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX status checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX status checked successfully");

     // Download all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // The translations not requested shouldn't change its status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/de_DE?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.added_target_locale'));

     \Drupal::state()->resetCache();
@@ @@
     // Request italian.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/it_IT?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('IT');
-    $this->assertText("Translation to it_IT requested successfully");
-    $this->assertIdentical('it_IT', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to it_IT requested successfully");
+    $this->assertSame('it_IT', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX status checked successfully");
+    $this->assertSession()->pageTextContains("Translation to es_MX status checked successfully");

     \Drupal::state()->resetCache();

@@ @@
     // Check status of the Italian translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/field_config/node.article.body/it_IT?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('IT');
-    $this->assertIdentical('it_IT', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to it_IT status checked successfully");
+    $this->assertSame('it_IT', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to it_IT status checked successfully");

     // Download all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // They are marked with the right status.
     $this->assertTargetStatus('ES', 'current');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // And statuses should remain the same.
     $this->assertTargetStatus('ES', 'current');
@@ @@

     $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.body/translate');
     $this->clickLink('Delete');
-    $this->drupalPostForm(NULL, [], t('Delete'));
+    $this->submitForm([], t('Delete'));

     $this->goToConfigBulkManagementForm('node_fields');
     $this->assertTargetStatus('DE', Lingotek::STATUS_READY);
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // We failed at requesting a translation, but we don't know what happened.
     // So we don't mark as error but keep it on request.
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Document field_config Body translations request failed. Please try again.');
+    $this->assertSession()->pageTextContains('Document field_config Body translations request failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document field_config Body has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document field_config Body has been archived. Uploading again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document field_config Body was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document field_config Body was not found. Please upload again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Document field_config Body has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document field_config Body has a new version. The document id has been updated for all future interactions. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
     // We failed at requesting a translation, but we don't know what happened.
     // So we don't mark as error but keep it on request.
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Body es_MX translation request failed. Please try again.');
+    $this->assertSession()->pageTextContains('Body es_MX translation request failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document field_config Body has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document field_config Body has been archived. Uploading again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@

     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document field_config Body was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document field_config Body was not found. Please upload again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Document field_config Body has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document field_config Body has a new version. The document id has been updated for all future interactions. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // We failed at requesting a translation, but we don't know what happened.
     // So we don't mark as error but keep it on request.
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Document field_config Body es_MX translation request failed. Please try again.');
+    $this->assertSession()->pageTextContains('Document field_config Body es_MX translation request failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document field_config Body has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document field_config Body has been archived. Uploading again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document field_config Body was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document field_config Body was not found. Please upload again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Document field_config Body has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document field_config Body has a new version. The document id has been updated for all future interactions. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
   }

   protected function getBulkSelectionKey($langcode, $revision_id, $entity_type_id = 'node.article.body') {
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * PassRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


127) modules/contrib/lingotek/tests/src/Functional/LingotekFieldBodyBulkDisabledTargetOverrideTranslationTest.php:75

    ---------- begin diff ----------
@@ @@
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/ca_ES?destination=' . $basepath . '/admin/lingotek/config/manage');

     $this->clickLink('EN');
-    $this->assertText('Body uploaded successfully');
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSession()->pageTextContains('Body uploaded successfully');
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
@@ @@
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/ca_ES?destination=' . $basepath . '/admin/lingotek/config/manage');

     $this->clickLink('EN');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/ca_ES?destination=' . $basepath . '/admin/lingotek/config/manage');
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

-    $this->assertText('Operations completed.');
+    $this->assertSession()->pageTextContains('Operations completed.');

     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/ca_ES?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('ca', 'node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical(NULL, \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame(NULL, \Drupal::state()
       ->get('lingotek.added_target_locale'));
-    $this->assertIdentical(NULL, \Drupal::state()
+    $this->assertSame(NULL, \Drupal::state()
       ->get('lingotek.requested_locales'));

-    $this->assertText('Operations completed.');
+    $this->assertSession()->pageTextContains('Operations completed.');

     $this->assertTargetStatus('es', Lingotek::STATUS_REQUEST);
     $this->assertTargetStatus('ca', Lingotek::STATUS_DISABLED);
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => 'check_translation:ca',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical(NULL, \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame(NULL, \Drupal::state()
       ->get('lingotek.checked_target_locale'));

     $this->assertTargetStatus('es', Lingotek::STATUS_REQUEST);
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => 'download:ca',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical(NULL, \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame(NULL, \Drupal::state()
       ->get('lingotek.downloaded_locale'));

     $this->assertTargetStatus('es', Lingotek::STATUS_REQUEST);
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

-    $this->assertText('Operations completed.');
+    $this->assertSession()->pageTextContains('Operations completed.');

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/field_config/node.article.body?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

-    $this->assertText('Operations completed.');
+    $this->assertSession()->pageTextContains('Operations completed.');

     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/ca_ES?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical(['dummy-document-hash-id' => ['es_MX']], \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame(['dummy-document-hash-id' => ['es_MX']], \Drupal::state()
       ->get('lingotek.requested_locales'));

-    $this->assertText('Operations completed.');
+    $this->assertSession()->pageTextContains('Operations completed.');

     $this->assertTargetStatus('es', Lingotek::STATUS_PENDING);
     $this->assertTargetStatus('ca', Lingotek::STATUS_DISABLED);
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical(NULL, \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame(NULL, \Drupal::state()
       ->get('lingotek.checked_target_locale'));

     $this->assertTargetStatus('es', Lingotek::STATUS_READY);
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.downloaded_locale'));

     $this->assertTargetStatus('es', Lingotek::STATUS_CURRENT);
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


128) modules/contrib/lingotek/tests/src/Functional/LingotekFieldBodyBulkDebugTest.php:51

    ---------- begin diff ----------
@@ @@

     // Enable the debug operations.
     $this->drupalGet('admin/lingotek/settings');
-    $this->drupalPostForm(NULL, [], t('Enable debug operations'));
+    $this->submitForm([], t('Enable debug operations'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@

     // Enable the debug operations.
     $this->drupalGet('admin/lingotek/settings');
-    $this->drupalPostForm(NULL, [], t('Enable debug operations'));
+    $this->submitForm([], t('Enable debug operations'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_fields');
@@ @@
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:manual',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'table[node.article.body]' => TRUE,
       $this->getBulkOperationFormName() => 'debug.export',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Exports available');
+    $this->assertSession()->pageTextContains('Exports available');
     // Download the file.
     $this->clickLink('config.node.article.body.json');

     $response = json_decode($this->getSession()->getPage()->getContent(), TRUE);
-    $this->assertIdentical('Body', $response['field.field.node.article.body']['label']);
-    $this->assertIdentical('', $response['field.field.node.article.body']['description']);
-    $this->assertIdentical('node.article.body (config): Body', $response['_debug']['title']);
-    $this->assertIdentical('manual', $response['_debug']['profile']);
-    $this->assertIdentical('en_US', $response['_debug']['source_locale']);
+    $this->assertSame('Body', $response['field.field.node.article.body']['label']);
+    $this->assertSame('', $response['field.field.node.article.body']['description']);
+    $this->assertSame('node.article.body (config): Body', $response['_debug']['title']);
+    $this->assertSame('manual', $response['_debug']['profile']);
+    $this->assertSame('en_US', $response['_debug']['source_locale']);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


129) modules/contrib/lingotek/tests/src/Functional/LingotekFieldBodyBulkCancelTest.php:58

    ---------- begin diff ----------
@@ @@
       'table[node.article.body]' => 'node.article.body',
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancel('node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $config_translation_service */
     $config_translation_service = \Drupal::service('lingotek.config_translation');
@@ @@

     // Assert that The document has been cancelled remotely.
     $cancelled_docs = \Drupal::state()->get('lingotek.cancelled_docs', []);
-    $this->assertEqual(1, count($cancelled_docs), 'The document has been cancelled remotely.');
+    $this->assertEquals(1, count($cancelled_docs), 'The document has been cancelled remotely.');

     // Assert that no document has been deleted remotely.
     $deleted_docs = \Drupal::state()->get('lingotek.deleted_docs', []);
-    $this->assertEqual(0, count($deleted_docs), 'No document has been deleted remotely.');
+    $this->assertEquals(0, count($deleted_docs), 'No document has been deleted remotely.');

     $this->assertNull($config_translation_service->getDocumentId($entity));

@@ @@
     \Drupal::entityTypeManager()->getStorage('field_config')->resetCache();
     $entity = \Drupal::entityTypeManager()->getStorage('field_config')->load('node.article.body');

-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $config_translation_service->getSourceStatus($entity));
-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $config_translation_service->getTargetStatus($entity, 'es'));

     // We cannot request again.
     $basepath = \Drupal::request()->getBasePath();
@@ @@
       'table[node.article.body]' => 'node.article.body',
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancelTarget('es', 'node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $config_translation_service */
     $config_translation_service = \Drupal::service('lingotek.config_translation');
@@ @@
     $this->assertSourceStatus('EN', Lingotek::STATUS_CURRENT);
     $this->assertTargetStatus('ES', Lingotek::STATUS_CANCELLED);

-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $config_translation_service->getTargetStatus($entity, 'es'));

     // We cannot request again.
     $basepath = \Drupal::request()->getBasePath();
@@ @@
       'table[node.article.body]' => 'node.article.body',
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancelTarget('es', 'node_fields'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $config_translation_service */
     $config_translation_service = \Drupal::service('lingotek.config_translation');
@@ @@
     $this->assertSourceStatus('EN', Lingotek::STATUS_CURRENT);
     $this->assertTargetStatus('ES', Lingotek::STATUS_CURRENT);

-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));

-    $this->assertText('Target es for Body was already completed in the TMS and cannot be cancelled unless the entire document is cancelled.');
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSession()->pageTextContains('Target es for Body was already completed in the TMS and cannot be cancelled unless the entire document is cancelled.');
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));
   }

   protected function createAndTranslateFieldWithLinks() {
@@ @@

     // Clicking English must init the upload of content.
     $this->clickLink('EN');
-    $this->assertText(t('Body uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('Body uploaded successfully'));

     // There is a link for checking status.
     $this->clickLink('EN');
-    $this->assertText('Body status checked successfully');
+    $this->assertSession()->pageTextContains('Body status checked successfully');

     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/field_config/node.article.body/es_ES?destination=' . $basepath . '/admin/lingotek/config/manage');

     // Request the Spanish translation.
     $this->clickLink('ES');
-    $this->assertText("Translation to es_ES requested successfully");
+    $this->assertSession()->pageTextContains("Translation to es_ES requested successfully");

     // Check status of the Spanish translation.
     $this->clickLink('ES');
-    $this->assertText("Translation to es_ES status checked successfully");
+    $this->assertSession()->pageTextContains("Translation to es_ES status checked successfully");

     // Download the Spanish translation.
     $this->clickLink('ES');
-    $this->assertText('Translation to es_ES downloaded successfully');
+    $this->assertSession()->pageTextContains('Translation to es_ES downloaded successfully');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


130) modules/contrib/lingotek/tests/src/Functional/LingotekEntityTestBulkTranslationTest.php:76

    ---------- begin diff ----------
@@ @@
     $edit['field_test_text[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
-    $this->drupalPostForm('/entity_test_mul/add/entity_test_mul', $edit, t('Save'));
+    $this->drupalGet('/entity_test_mul/add/entity_test_mul');
+    $this->submitForm($edit, t('Save'));

     $this->goToContentBulkManagementForm('entity_test_mul');

@@ @@
     // And we cannot request yet a translation.
     $this->assertNoLingotekRequestTranslationLink('es_MX', 'dummy-document-hash-id', 'entity_test_mul');
     $this->clickLink('EN');
-    $this->assertText('Entity_test_mul Llamas are cool has been uploaded.');
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains('Entity_test_mul Llamas are cool has been uploaded.');
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $this->assertLingotekCheckSourceStatusLink('dummy-document-hash-id', 'entity_test_mul');
@@ @@
     // And we can already request a translation.
     $this->assertLingotekRequestTranslationLink('es_MX', 'dummy-document-hash-id', 'entity_test_mul');
     $this->clickLink('EN');
-    $this->assertText('The import for entity_test_mul Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for entity_test_mul Llamas are cool is complete.');

     // Request the Spanish translation.
     $this->assertLingotekRequestTranslationLink('es_MX', 'dummy-document-hash-id', 'entity_test_mul');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_MX' was added as a translation target for entity_test_mul Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for entity_test_mul Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_MX', 'dummy-document-hash-id', 'entity_test_mul');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for entity_test_mul Llamas are cool is ready for download.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('The es_MX translation for entity_test_mul Llamas are cool is ready for download.');

     // Download the Spanish translation.
     $this->assertLingotekDownloadTargetLink('es_MX', 'dummy-document-hash-id', 'entity_test_mul');
     $this->clickLink('ES');
-    $this->assertText('The translation of entity_test_mul Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('The translation of entity_test_mul Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'ES');
@@ @@
     $edit['field_test_text[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
-    $this->drupalPostForm('/entity_test_mul/add/entity_test_mul', $edit, t('Save'));
+    $this->drupalGet('/entity_test_mul/add/entity_test_mul');
+    $this->submitForm($edit, t('Save'));

     $this->goToContentBulkManagementForm('entity_test_mul');

@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('entity_test_mul'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
     $this->assertLingotekCheckSourceStatusLink('dummy-document-hash-id', 'entity_test_mul');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('entity_test_mul'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request the German (AT) translation.
     $this->assertLingotekRequestTranslationLink('de_AT', 'dummy-document-hash-id', 'entity_test_mul');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('de', 'entity_test_mul'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the German (AT) translation.
     $this->assertLingotekCheckTargetStatusLink('de_AT', 'dummy-document-hash-id', 'entity_test_mul');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => 'check_translation:de',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.checked_target_locale'));

     // Download the German (AT) translation.
     $this->assertLingotekDownloadTargetLink('de_AT', 'dummy-document-hash-id', 'entity_test_mul');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => 'download:de',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('de_AT', 'dummy-document-hash-id', 'DE');
@@ @@
     $edit['field_test_text[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
-    $this->drupalPostForm('/entity_test_mul/add/entity_test_mul', $edit, t('Save'));
+    $this->drupalGet('/entity_test_mul/add/entity_test_mul');
+    $this->submitForm($edit, t('Save'));

     $this->goToContentBulkManagementForm('entity_test_mul');

@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('entity_test_mul'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
     $this->assertLingotekCheckSourceStatusLink('dummy-document-hash-id', 'entity_test_mul');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('entity_test_mul'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Assert that I could request translations.
     $this->assertLingotekRequestTranslationLink('de_AT', 'dummy-document-hash-id', 'entity_test_mul');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('entity_test_mul'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Now Drupal knows that there are translations ready.
     $this->assertLingotekDownloadTargetLink('de_AT', 'dummy-document-hash-id', 'entity_test_mul');
@@ @@

     // Even if I just add a new language.
     ConfigurableLanguage::createFromLangcode('de')->setThirdPartySetting('lingotek', 'locale', 'de_DE')->save();
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $this->assertLingotekDownloadTargetLink('de_DE', 'dummy-document-hash-id', 'entity_test_mul');

     // Ensure locales are handled correctly by setting manual values.
     \Drupal::state()->set('lingotek.document_completion_statuses', ['de-AT' => 50, 'de-DE' => 100, 'es-MX' => 10]);
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Now Drupal knows which translations are ready.
     $this->assertNoLingotekDownloadTargetLink('de_AT', 'dummy-document-hash-id', 'entity_test_mul');
@@ @@

     \Drupal::state()->set('lingotek.document_completion_statuses', ['it-IT' => 100, 'de-DE' => 50, 'es-MX' => 10]);
     // Check all statuses again.
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // All translations must be updated according exclusively with the
     // information from the TMS.
@@ @@
     $edit['field_test_text[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
-    $this->drupalPostForm('/entity_test_mul/add/entity_test_mul', $edit, t('Save'));
+    $this->drupalGet('/entity_test_mul/add/entity_test_mul');
+    $this->submitForm($edit, t('Save'));

     $this->goToContentBulkManagementForm('entity_test_mul');

@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('entity_test_mul'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
     $this->assertLingotekCheckSourceStatusLink('dummy-document-hash-id', 'entity_test_mul');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('entity_test_mul'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // I can check current status, because it wasn't imported but it's not marked
     // as an error.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('entity_test_mul'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Assert that targets can be requested.
     $this->assertLingotekRequestTranslationLink('es_MX', 'dummy-document-hash-id', 'entity_test_mul');
@@ @@
     $edit['field_test_text[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
-    $this->drupalPostForm('/entity_test_mul/add/entity_test_mul', $edit, t('Save'));
+    $this->drupalGet('/entity_test_mul/add/entity_test_mul');
+    $this->submitForm($edit, t('Save'));

     $this->goToContentBulkManagementForm('entity_test_mul');

@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('entity_test_mul'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
     $this->assertLingotekCheckSourceStatusLink('dummy-document-hash-id', 'entity_test_mul');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('entity_test_mul'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request the Spanish translation.
     $this->assertLingotekRequestTranslationLink('es_MX', 'dummy-document-hash-id', 'entity_test_mul');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_MX' was added as a translation target for entity_test_mul Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for entity_test_mul Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_MX', 'dummy-document-hash-id', 'entity_test_mul');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for entity_test_mul Llamas are cool is ready for download.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('The es_MX translation for entity_test_mul Llamas are cool is ready for download.');

     // Download all the translations.
     $this->assertLingotekDownloadTargetLink('es_MX', 'dummy-document-hash-id', 'entity_test_mul');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('entity_test_mul'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // The translations not requested shouldn't change its status.
     $this->assertLingotekRequestTranslationLink('de_DE', 'dummy-document-hash-id', 'entity_test_mul');
@@ @@
     $edit['field_test_text[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
-    $this->drupalPostForm('/entity_test_mul/add/entity_test_mul', $edit, t('Save'));
+    $this->drupalGet('/entity_test_mul/add/entity_test_mul');
+    $this->submitForm($edit, t('Save'));

     $this->goToContentBulkManagementForm('entity_test_mul');

@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('entity_test_mul'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('entity_test_mul'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request the Spanish translation.
     $this->assertLingotekRequestTranslationLink('es_MX', 'dummy-document-hash-id', 'entity_test_mul');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_MX' was added as a translation target for entity_test_mul Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for entity_test_mul Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.added_target_locale'));

     \Drupal::state()->resetCache();
@@ @@
     // Request italian.
     $this->assertLingotekRequestTranslationLink('it_IT', 'dummy-document-hash-id', 'entity_test_mul');
     $this->clickLink('IT');
-    $this->assertText("Locale 'it_IT' was added as a translation target for entity_test_mul Llamas are cool.");
-    $this->assertIdentical('it_IT', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Locale 'it_IT' was added as a translation target for entity_test_mul Llamas are cool.");
+    $this->assertSame('it_IT', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_MX', 'dummy-document-hash-id', 'entity_test_mul');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for entity_test_mul Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_MX translation for entity_test_mul Llamas are cool is ready for download.');

     \Drupal::state()->resetCache();

@@ @@
     // Check status of the Italian translation.
     $this->assertLingotekCheckTargetStatusLink('it_IT', 'dummy-document-hash-id', 'entity_test_mul');
     $this->clickLink('IT');
-    $this->assertIdentical('it_IT', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('The it_IT translation for entity_test_mul Llamas are cool is ready for download.');
+    $this->assertSame('it_IT', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('The it_IT translation for entity_test_mul Llamas are cool is ready for download.');

     // Download all the translations.
     $this->assertLingotekDownloadTargetLink('es_MX', 'dummy-document-hash-id', 'entity_test_mul');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('entity_test_mul'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // They are marked with the right status.
     $this->assertTargetStatus('ES', 'current');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('entity_test_mul'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // And statuses should remain the same.
     $this->assertTargetStatus('ES', 'current');
@@ @@
     // Get the node form.
     $this->drupalGet('entity_test_mul/add/entity_test_mul');
     // Assert translation profile cannot be assigned.
-    $this->assertNoField('lingotek_translation_management[lingotek_translation_profile]');
+    $this->assertSession()->fieldNotExists('lingotek_translation_management[lingotek_translation_profile]');

     $translation_manager = $this->drupalCreateUser([
       'administer entity_test content',
@@ @@
     // Get the node form.
     $this->drupalGet('entity_test_mul/add/entity_test_mul');
     // Assert translation profile can be assigned.
-    $this->assertField('lingotek_translation_management[lingotek_translation_profile]');
+    $this->assertSession()->fieldExists('lingotek_translation_management[lingotek_translation_profile]');

     // Create a entity_test_mul.
     $edit = [];
@@ @@
     $edit['field_test_text[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
-    $this->drupalPostForm('/entity_test_mul/add/entity_test_mul', $edit, t('Save'));
+    $this->drupalGet('/entity_test_mul/add/entity_test_mul');
+    $this->submitForm($edit, t('Save'));
     $this->clickLink('Edit');

-    $this->assertFieldById('edit-lingotek-translation-management-lingotek-translation-profile', 'manual');
+    $this->assertSession()->fieldValueEquals('edit-lingotek-translation-management-lingotek-translation-profile', 'manual');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByIdRector
 * AssertFieldRector
 * AssertIdenticalRector
 * AssertNoFieldRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


131) modules/contrib/lingotek/tests/src/Functional/LingotekDashboardTest.php:40

    ---------- begin diff ----------
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical('it', $response['xcode']);
-    $this->assertIdentical('it_IT', $response['locale']);
-    $this->assertIdentical(1, $response['active']);
-    $this->assertIdentical(1, $response['enabled']);
-    $this->assertIdentical(0, $response['source']['total']);
-    $this->assertIdentical(0, $response['target']['total']);
+    $this->assertSame('it', $response['xcode']);
+    $this->assertSame('it_IT', $response['locale']);
+    $this->assertSame(1, $response['active']);
+    $this->assertSame(1, $response['enabled']);
+    $this->assertSame(0, $response['source']['total']);
+    $this->assertSame(0, $response['target']['total']);

     $italian_language = ConfigurableLanguage::load('it');
     /** @var \Drupal\language\ConfigurableLanguageInterface $italian_language */
     $this->assertNotNull($italian_language, 'Italian language has been added.');
-    $this->assertIdentical('Italian', $italian_language->getName());
-    $this->assertIdentical(ConfigurableLanguage::DIRECTION_LTR, $italian_language->getDirection());
+    $this->assertSame('Italian', $italian_language->getName());
+    $this->assertSame(ConfigurableLanguage::DIRECTION_LTR, $italian_language->getDirection());

     // @ToDo: The native language is not saved.
     // $config_translation = \Drupal::languageManager()->getLanguageConfigOverride('it', $italian_language->id());
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical('ar', $response['xcode']);
-    $this->assertIdentical('ar_AE', $response['locale']);
-    $this->assertIdentical(1, $response['active']);
-    $this->assertIdentical(1, $response['enabled']);
-    $this->assertIdentical(0, $response['source']['total']);
-    $this->assertIdentical(0, $response['target']['total']);
+    $this->assertSame('ar', $response['xcode']);
+    $this->assertSame('ar_AE', $response['locale']);
+    $this->assertSame(1, $response['active']);
+    $this->assertSame(1, $response['enabled']);
+    $this->assertSame(0, $response['source']['total']);
+    $this->assertSame(0, $response['target']['total']);

     $arabic_language = ConfigurableLanguage::load('ar');
     /** @var \Drupal\language\ConfigurableLanguageInterface $italian_language */
     $this->assertNotNull($arabic_language, 'Arabic language has been added.');
-    $this->assertIdentical('Arabic', $arabic_language->getName());
-    $this->assertIdentical(ConfigurableLanguage::DIRECTION_RTL, $arabic_language->getDirection());
+    $this->assertSame('Arabic', $arabic_language->getName());
+    $this->assertSame(ConfigurableLanguage::DIRECTION_RTL, $arabic_language->getDirection());

     // @ToDo: The native language is not saved.
   }
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical('ar', $response['xcode']);
-    $this->assertIdentical('ar', $response['locale']);
-    $this->assertIdentical(1, $response['active']);
-    $this->assertIdentical(1, $response['enabled']);
-    $this->assertIdentical(0, $response['source']['total']);
-    $this->assertIdentical(0, $response['target']['total']);
+    $this->assertSame('ar', $response['xcode']);
+    $this->assertSame('ar', $response['locale']);
+    $this->assertSame(1, $response['active']);
+    $this->assertSame(1, $response['enabled']);
+    $this->assertSame(0, $response['source']['total']);
+    $this->assertSame(0, $response['target']['total']);

     $arabic_language = ConfigurableLanguage::load('ar');
     /** @var \Drupal\language\ConfigurableLanguageInterface $italian_language */
     $this->assertNotNull($arabic_language, 'Arabic language has been added.');
-    $this->assertIdentical('Arabic', $arabic_language->getName());
-    $this->assertIdentical(ConfigurableLanguage::DIRECTION_RTL, $arabic_language->getDirection());
+    $this->assertSame('Arabic', $arabic_language->getName());
+    $this->assertSame(ConfigurableLanguage::DIRECTION_RTL, $arabic_language->getDirection());

     // @ToDo: The native language is not saved.
   }
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical('es', $response['xcode']);
-    $this->assertIdentical('es_ES', $response['locale']);
-    $this->assertIdentical(1, $response['active']);
-    $this->assertIdentical(1, $response['enabled']);
-    $this->assertIdentical(0, $response['source']['total']);
-    $this->assertIdentical(0, $response['target']['total']);
+    $this->assertSame('es', $response['xcode']);
+    $this->assertSame('es_ES', $response['locale']);
+    $this->assertSame(1, $response['active']);
+    $this->assertSame(1, $response['enabled']);
+    $this->assertSame(0, $response['source']['total']);
+    $this->assertSame(0, $response['target']['total']);

     $esEsLanguage = ConfigurableLanguage::load('es');
     /** @var \Drupal\language\ConfigurableLanguageInterface $esEsLanguage */
     $this->assertNotNull($esEsLanguage, 'Spanish (Spain) language has been added.');
-    $this->assertIdentical('Spanish (Spain)', $esEsLanguage->getName());
-    $this->assertIdentical(ConfigurableLanguage::DIRECTION_LTR, $esEsLanguage->getDirection());
+    $this->assertSame('Spanish (Spain)', $esEsLanguage->getName());
+    $this->assertSame(ConfigurableLanguage::DIRECTION_LTR, $esEsLanguage->getDirection());

     // The language must be returned in the dashboard.
     $request = $this->client->get($url, [
@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $returned_languages = array_keys($response['languages']);
-    $this->assertIdentical(['en_US', 'es_ES'], $returned_languages);
+    $this->assertSame(['en_US', 'es_ES'], $returned_languages);

     $post = [
       'code' => 'es_AR',
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical('es-ar', $response['xcode']);
-    $this->assertIdentical('es_AR', $response['locale']);
-    $this->assertIdentical(1, $response['active']);
-    $this->assertIdentical(1, $response['enabled']);
-    $this->assertIdentical(0, $response['source']['total']);
-    $this->assertIdentical(0, $response['target']['total']);
+    $this->assertSame('es-ar', $response['xcode']);
+    $this->assertSame('es_AR', $response['locale']);
+    $this->assertSame(1, $response['active']);
+    $this->assertSame(1, $response['enabled']);
+    $this->assertSame(0, $response['source']['total']);
+    $this->assertSame(0, $response['target']['total']);

     $esArLanguage = ConfigurableLanguage::load('es-ar');
     /** @var \Drupal\language\ConfigurableLanguageInterface $esArLanguage */
     $this->assertNotNull($esArLanguage, 'Spanish (Argentina) language has been added.');
-    $this->assertIdentical('Spanish (Argentina)', $esArLanguage->getName());
-    $this->assertIdentical(ConfigurableLanguage::DIRECTION_LTR, $esArLanguage->getDirection());
+    $this->assertSame('Spanish (Argentina)', $esArLanguage->getName());
+    $this->assertSame(ConfigurableLanguage::DIRECTION_LTR, $esArLanguage->getDirection());

     // The language must be returned in the dashboard.
     $request = $this->client->get($url, [
@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $returned_languages = array_keys($response['languages']);
-    $this->assertIdentical(['en_US', 'es_AR', 'es_ES'], $returned_languages);
+    $this->assertSame(['en_US', 'es_AR', 'es_ES'], $returned_languages);
   }

   /**
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical('es', $response['xcode']);
-    $this->assertIdentical('es_AR', $response['locale']);
-    $this->assertIdentical(1, $response['active']);
-    $this->assertIdentical(1, $response['enabled']);
-    $this->assertIdentical(0, $response['source']['total']);
-    $this->assertIdentical(0, $response['target']['total']);
+    $this->assertSame('es', $response['xcode']);
+    $this->assertSame('es_AR', $response['locale']);
+    $this->assertSame(1, $response['active']);
+    $this->assertSame(1, $response['enabled']);
+    $this->assertSame(0, $response['source']['total']);
+    $this->assertSame(0, $response['target']['total']);

     $esArLanguage = ConfigurableLanguage::load('es');
     /** @var \Drupal\language\ConfigurableLanguageInterface $esArLanguage */
     $this->assertNotNull($esArLanguage, 'Spanish (Argentina) language has been added.');
-    $this->assertIdentical('Spanish (Argentina)', $esArLanguage->getName());
-    $this->assertIdentical(ConfigurableLanguage::DIRECTION_LTR, $esArLanguage->getDirection());
+    $this->assertSame('Spanish (Argentina)', $esArLanguage->getName());
+    $this->assertSame(ConfigurableLanguage::DIRECTION_LTR, $esArLanguage->getDirection());

     // The language must be returned in the dashboard.
     $request = $this->client->get($url, [
@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $returned_languages = array_keys($response['languages']);
-    $this->assertIdentical(['en_US', 'es_AR'], $returned_languages);
+    $this->assertSame(['en_US', 'es_AR'], $returned_languages);

     $post = [
       'code' => 'es_ES',
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical('es-es', $response['xcode']);
-    $this->assertIdentical('es_ES', $response['locale']);
-    $this->assertIdentical(1, $response['active']);
-    $this->assertIdentical(1, $response['enabled']);
-    $this->assertIdentical(0, $response['source']['total']);
-    $this->assertIdentical(0, $response['target']['total']);
+    $this->assertSame('es-es', $response['xcode']);
+    $this->assertSame('es_ES', $response['locale']);
+    $this->assertSame(1, $response['active']);
+    $this->assertSame(1, $response['enabled']);
+    $this->assertSame(0, $response['source']['total']);
+    $this->assertSame(0, $response['target']['total']);

     $esEsLanguage = ConfigurableLanguage::load('es-es');
     /** @var \Drupal\language\ConfigurableLanguageInterface $esEsLanguage */
     $this->assertNotNull($esEsLanguage, 'Spanish (Spain) language has been added.');
-    $this->assertIdentical('Spanish (Spain)', $esEsLanguage->getName());
-    $this->assertIdentical(ConfigurableLanguage::DIRECTION_LTR, $esEsLanguage->getDirection());
+    $this->assertSame('Spanish (Spain)', $esEsLanguage->getName());
+    $this->assertSame(ConfigurableLanguage::DIRECTION_LTR, $esEsLanguage->getDirection());

     // The language must be returned in the dashboard.
     $request = $this->client->get($url, [
@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $returned_languages = array_keys($response['languages']);
-    $this->assertIdentical(['en_US', 'es_AR', 'es_ES'], $returned_languages);
+    $this->assertSame(['en_US', 'es_AR', 'es_ES'], $returned_languages);
   }

   /**
@@ @@
     /** @var \Drupal\Core\Language\LanguageManagerInterface $language_manager */
     $language_manager = \Drupal::service('language_manager');
     $languages = $language_manager->getLanguages();
-    $this->assertIdentical(2, count($languages));
+    $this->assertSame(2, count($languages));

     // Check the properties of the language.
     $request = $this->client->get(Url::fromRoute('lingotek.dashboard_endpoint', ['code' => 'es_ES'])->setAbsolute()->toString(), [
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical('GET', $response['method']);
-    $this->assertIdentical('es', $response['xcode']);
-    $this->assertIdentical('es_ES', $response['locale']);
-    $this->assertIdentical(1, $response['active']);
-    $this->assertIdentical(1, $response['enabled']);
+    $this->assertSame('GET', $response['method']);
+    $this->assertSame('es', $response['xcode']);
+    $this->assertSame('es_ES', $response['locale']);
+    $this->assertSame(1, $response['active']);
+    $this->assertSame(1, $response['enabled']);

     $language = ConfigurableLanguage::load('es');
-    $this->assertIdentical($language->getThirdPartySetting('lingotek', 'disabled', NULL), FALSE, 'The Spanish language is enabled');
+    $this->assertSame($language->getThirdPartySetting('lingotek', 'disabled', NULL), FALSE, 'The Spanish language is enabled');

     $request = $this->client->delete($url, [
       'body' => http_build_query(['code' => 'es_ES']),
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical('DELETE', $response['method']);
-    $this->assertIdentical('es', $response['language']);
-    $this->assertIdentical('Language disabled: es_ES', $response['message']);
+    $this->assertSame('DELETE', $response['method']);
+    $this->assertSame('es', $response['language']);
+    $this->assertSame('Language disabled: es_ES', $response['message']);

     // Rebuild the container so that the new languages are picked up by services
     // that hold a list of languages.
@@ @@
     $this->rebuildContainer();

     $languages = $language_manager->getLanguages();
-    $this->assertIdentical(2, count($languages), 'Spanish language is disabled, but not deleted.');
+    $this->assertSame(2, count($languages), 'Spanish language is disabled, but not deleted.');

     $language = ConfigurableLanguage::load('es');
-    $this->assertIdentical($language->getThirdPartySetting('lingotek', 'disabled', NULL), TRUE, 'The Spanish language is disabled');
+    $this->assertSame($language->getThirdPartySetting('lingotek', 'disabled', NULL), TRUE, 'The Spanish language is disabled');

     // Check the properties of the language.
     $request = $this->client->get(Url::fromRoute('lingotek.dashboard_endpoint', ['code' => 'es_ES'])->setAbsolute()->toString(), [
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical('GET', $response['method']);
-    $this->assertIdentical('es', $response['xcode']);
-    $this->assertIdentical('es_ES', $response['locale']);
-    $this->assertIdentical(0, $response['active']);
-    $this->assertIdentical(1, $response['enabled']);
+    $this->assertSame('GET', $response['method']);
+    $this->assertSame('es', $response['xcode']);
+    $this->assertSame('es_ES', $response['locale']);
+    $this->assertSame(0, $response['active']);
+    $this->assertSame(1, $response['enabled']);

     $post = [
       'code' => 'es_ES',
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical('POST', $response['method']);
-    $this->assertIdentical('es', $response['xcode']);
-    $this->assertIdentical('es_ES', $response['locale']);
-    $this->assertIdentical(1, $response['active']);
-    $this->assertIdentical(1, $response['enabled']);
+    $this->assertSame('POST', $response['method']);
+    $this->assertSame('es', $response['xcode']);
+    $this->assertSame('es_ES', $response['locale']);
+    $this->assertSame(1, $response['active']);
+    $this->assertSame(1, $response['enabled']);

     // Check the properties of the language.
     $request = $this->client->get(Url::fromRoute('lingotek.dashboard_endpoint', ['code' => 'es_ES'])->setAbsolute()->toString(), [
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical('GET', $response['method']);
-    $this->assertIdentical('es', $response['xcode']);
-    $this->assertIdentical('es_ES', $response['locale']);
-    $this->assertIdentical(1, $response['active']);
-    $this->assertIdentical(1, $response['enabled']);
+    $this->assertSame('GET', $response['method']);
+    $this->assertSame('es', $response['xcode']);
+    $this->assertSame('es_ES', $response['locale']);
+    $this->assertSame(1, $response['active']);
+    $this->assertSame(1, $response['enabled']);

     $languages = $language_manager->getLanguages();
-    $this->assertIdentical(2, count($languages), 'Spanish language is enabled again, no new languages added.');
+    $this->assertSame(2, count($languages), 'Spanish language is enabled again, no new languages added.');

     // Rebuild the container so that the new languages are picked up by services
     // that hold a list of languages.
@@ @@
     $this->rebuildContainer();

     $language = ConfigurableLanguage::load('es');
-    $this->assertIdentical($language->getThirdPartySetting('lingotek', 'disabled', NULL), FALSE, 'The Spanish language is enabled');
+    $this->assertSame($language->getThirdPartySetting('lingotek', 'disabled', NULL), FALSE, 'The Spanish language is enabled');
   }

   /**
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical('POST', $response['method']);
-    $this->assertIdentical('es', $response['xcode']);
-    $this->assertIdentical('es_ES', $response['locale']);
-    $this->assertIdentical(1, $response['active']);
-    $this->assertIdentical(1, $response['enabled']);
+    $this->assertSame('POST', $response['method']);
+    $this->assertSame('es', $response['xcode']);
+    $this->assertSame('es_ES', $response['locale']);
+    $this->assertSame(1, $response['active']);
+    $this->assertSame(1, $response['enabled']);

     // Rebuild the container so that the new languages are picked up by services
     // that hold a list of languages.
@@ @@
     /** @var LanguageManagerInterface $language_manager */
     $language_manager = \Drupal::service('language_manager');
     $languages = $language_manager->getLanguages();
-    $this->assertIdentical(2, count($languages));
+    $this->assertSame(2, count($languages));

     // Check the stats.
     $request = $this->client->get($url, [
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical('GET', $response['method']);
-    $this->assertIdentical(2, $response['count']);
-    $this->assertIdentical('en', $response['languages']['en_US']['xcode']);
-    $this->assertIdentical(1, $response['languages']['en_US']['active']);
-    $this->assertIdentical(1, $response['languages']['en_US']['enabled']);
-    $this->assertIdentical('es', $response['languages']['es_ES']['xcode']);
-    $this->assertIdentical(1, $response['languages']['es_ES']['active']);
-    $this->assertIdentical(1, $response['languages']['es_ES']['enabled']);
+    $this->assertSame('GET', $response['method']);
+    $this->assertSame(2, $response['count']);
+    $this->assertSame('en', $response['languages']['en_US']['xcode']);
+    $this->assertSame(1, $response['languages']['en_US']['active']);
+    $this->assertSame(1, $response['languages']['en_US']['enabled']);
+    $this->assertSame('es', $response['languages']['es_ES']['xcode']);
+    $this->assertSame(1, $response['languages']['es_ES']['active']);
+    $this->assertSame(1, $response['languages']['es_ES']['enabled']);

     // Disable Spanish.
     $request = $this->client->delete($url, [
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical('DELETE', $response['method']);
-    $this->assertIdentical('es', $response['language']);
-    $this->assertIdentical('Language disabled: es_ES', $response['message']);
+    $this->assertSame('DELETE', $response['method']);
+    $this->assertSame('es', $response['language']);
+    $this->assertSame('Language disabled: es_ES', $response['message']);

     // Rebuild the container so that the new languages are picked up by services
     // that hold a list of languages.
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical('GET', $response['method']);
-    $this->assertIdentical(2, $response['count']);
-    $this->assertIdentical('en', $response['languages']['en_US']['xcode']);
-    $this->assertIdentical(1, $response['languages']['en_US']['active']);
-    $this->assertIdentical(1, $response['languages']['en_US']['enabled']);
-    $this->assertIdentical('es', $response['languages']['es_ES']['xcode']);
-    $this->assertIdentical(0, $response['languages']['es_ES']['active']);
-    $this->assertIdentical(1, $response['languages']['es_ES']['enabled']);
+    $this->assertSame('GET', $response['method']);
+    $this->assertSame(2, $response['count']);
+    $this->assertSame('en', $response['languages']['en_US']['xcode']);
+    $this->assertSame(1, $response['languages']['en_US']['active']);
+    $this->assertSame(1, $response['languages']['en_US']['enabled']);
+    $this->assertSame('es', $response['languages']['es_ES']['xcode']);
+    $this->assertSame(0, $response['languages']['es_ES']['active']);
+    $this->assertSame(1, $response['languages']['es_ES']['enabled']);
   }

   /**
@@ @@

     // One language added, there are missing translations.
     $this->drupalGet('admin/lingotek');
-    $this->assertRaw(t('Missing translations for: @languages. See the <a href=":updates">Available translation updates</a> page for more information.', ['@languages' => t('Spanish'), ':updates' => Url::fromRoute('locale.translate_status')->toString()]), 'Missing translations message');
+    $this->assertSession()->responseContains(t('Missing translations for: @languages. See the <a href=":updates">Available translation updates</a> page for more information.', ['@languages' => t('Spanish'), ':updates' => Url::fromRoute('locale.translate_status')->toString()]));

     // Override Drupal core translation status as 'up-to-date'.
     $status = locale_translation_get_status();
@@ @@

     // There are no missing translations, translations are current.
     $this->drupalGet('admin/lingotek');
-    $this->assertNoRaw(t('Missing translations for: @languages. See the <a href=":updates">Available translation updates</a> page for more information.', ['@languages' => t('Spanish'), ':updates' => Url::fromRoute('locale.translate_status')->toString()]), 'No missing translations message with current translations');
+    $this->assertSession()->responseNotContains(t('Missing translations for: @languages. See the <a href=":updates">Available translation updates</a> page for more information.', ['@languages' => t('Spanish'), ':updates' => Url::fromRoute('locale.translate_status')->toString()]));

     // Set lingotek module to have a local translation available.
     $status = locale_translation_get_status();
@@ @@

     // There are no missing translations, translations are local.
     $this->drupalGet('admin/lingotek');
-    $this->assertNoRaw(t('Missing translations for: @languages. See the <a href=":updates">Available translation updates</a> page for more information.', ['@languages' => t('Spanish'), ':updates' => Url::fromRoute('locale.translate_status')->toString()]), 'No missing translations message with local translations');
+    $this->assertSession()->responseNotContains(t('Missing translations for: @languages. See the <a href=":updates">Available translation updates</a> page for more information.', ['@languages' => t('Spanish'), ':updates' => Url::fromRoute('locale.translate_status')->toString()]));
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertNoRawRector
 * AssertRawRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


132) modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeTranslationTest.php:61

    ---------- begin diff ----------
@@ @@
     $this->clickLink(t('Translate'));

     $this->clickLink(t('Upload'));
-    $this->assertText(t('Article uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('Article uploaded successfully'));

     // Check that only the translatable fields have been uploaded.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
-    $this->assertEqual(3, count($data));
+    $this->assertEquals(3, count($data));
     $this->assertTrue(array_key_exists('name', $data));
     // Cannot use isset, the key exists but we are not providing values, so NULL.
     $this->assertTrue(array_key_exists('description', $data));
@@ @@

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     $this->clickLink(t('Check upload status'));
-    $this->assertText(t('Article status checked successfully'));
+    $this->assertSession()->pageTextContains(t('Article status checked successfully'));

     $this->clickLink(t('Request translation'));
-    $this->assertText(t('Translation to es_MX requested successfully'));
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains(t('Translation to es_MX requested successfully'));
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     $this->clickLink(t('Check Download'));
-    $this->assertText(t('Translation to es_MX status checked successfully'));
+    $this->assertSession()->pageTextContains(t('Translation to es_MX status checked successfully'));

     $this->clickLink('Download');
-    $this->assertText(t('Translation to es_MX downloaded successfully'));
+    $this->assertSession()->pageTextContains(t('Translation to es_MX downloaded successfully'));

     // Check that the edit link is there.
     $basepath = \Drupal::request()->getBasePath();
@@ @@

     // Edit the content type.
     $edit['name'] = 'Blogpost';
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
-    $this->assertText('The content type Blogpost has been updated.');
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));
+    $this->assertSession()->pageTextContains('The content type Blogpost has been updated.');

     $this->clickLink(t('Translate'));

@@ @@

     // Recheck status.
     $this->clickLink('Check Download');
-    $this->assertText('Translation to es_MX status checked successfully');
+    $this->assertSession()->pageTextContains('Translation to es_MX status checked successfully');

     // Download the translation.
     $this->clickLink('Download');
-    $this->assertText('Translation to es_MX downloaded successfully');
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
   }

   /**
@@ @@
     $this->clickLink(t('Translate'));

     $this->clickLink(t('Upload'));
-    $this->assertText(t('Article uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('Article uploaded successfully'));

     // Check that only the translatable fields have been uploaded.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
-    $this->assertEqual(3, count($data));
+    $this->assertEquals(3, count($data));
     $this->assertTrue(array_key_exists('name', $data));
     // Cannot use isset, the key exists but we are not providing values, so NULL.
     $this->assertTrue(array_key_exists('description', $data));
     $this->assertTrue(array_key_exists('help', $data));
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check upload status');
-    $this->assertText(t('Article status checked successfully'));
+    $this->assertSession()->pageTextContains(t('Article status checked successfully'));

     // There are two links for requesting translations, or we can add them
     // manually.
@@ @@
     // Upload the document, which must fail.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Article upload failed. Please try again.');
+    $this->assertSession()->pageTextContains('Article upload failed. Please try again.');

     // The node type has been marked with the error status.
     $nodeType = NodeType::load('article');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');
   }

   /**
@@ @@
     // Upload the document, which must fail.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // The node type has been marked with the error status.
     $nodeType = NodeType::load('article');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_upload', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');
   }

   /**
@@ @@

     // Create a content type.
     $edit = ['name' => 'Landing Page', 'type' => 'landing_page'];
-    $this->drupalPostForm('admin/structure/types/add', $edit, 'Save content type');
+    $this->drupalGet('admin/structure/types/add');
+    $this->submitForm($edit, 'Save content type');

     // The document was uploaded automatically and failed.
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // The node type has been marked with the error status.
     $nodeType = NodeType::load('landing_page');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Article status checked successfully');
+    $this->assertSession()->pageTextContains('Article status checked successfully');

     // Edit the content type.
     $edit['name'] = 'Blogpost';
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
-    $this->assertText('The content type Blogpost has been updated.');
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));
+    $this->assertSession()->pageTextContains('The content type Blogpost has been updated.');

     // Go back to the form.
     $this->drupalGet('/admin/config/regional/config-translation/node_type');
@@ @@
     // Re-upload. Must fail now.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // The node type has been marked with the error status.
     $nodeType = NodeType::load('article');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Blogpost has been updated.');
+    $this->assertSession()->pageTextContains('Blogpost has been updated.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Article status checked successfully');
+    $this->assertSession()->pageTextContains('Article status checked successfully');

     // Edit the content type.
     $edit['name'] = 'Blogpost';
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
-    $this->assertText('The content type Blogpost has been updated.');
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));
+    $this->assertSession()->pageTextContains('The content type Blogpost has been updated.');

     // Go back to the form.
     $this->drupalGet('/admin/config/regional/config-translation/node_type');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status);
-    $this->assertText('Document Blogpost was not found. Please upload again.');
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status);
+    $this->assertSession()->pageTextContains('Document Blogpost was not found. Please upload again.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Blogpost uploaded successfully');
+    $this->assertSession()->pageTextContains('Blogpost uploaded successfully');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Article status checked successfully');
+    $this->assertSession()->pageTextContains('Article status checked successfully');

     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', TRUE);

     // Edit the content type.
     $edit['name'] = 'Blogpost';
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
-    $this->assertText('The content type Blogpost has been updated.');
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));
+    $this->assertSession()->pageTextContains('The content type Blogpost has been updated.');

-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // The node type has been marked with the error status.
     $nodeType = NodeType::load('article');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', FALSE);
@@ @@
     $this->clickLink(t('Translate'));
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Blogpost has been updated.');
+    $this->assertSession()->pageTextContains('Blogpost has been updated.');
   }

   /**
@@ @@
     // Upload the document, will fail
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // The node type has been marked with the error status.
     $nodeType = Nodetype::load('article');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');

   }

@@ @@

     // Create content type
     $edit = ['name' => 'Landing Page', 'type' => 'landing_page'];
-    $this->drupalPostForm('admin/structure/types/add', $edit, 'Save content type');
+    $this->drupalGet('admin/structure/types/add');
+    $this->submitForm($edit, 'Save content type');

     // The document was uploaded automatically and failed.
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // The node type has been marked with the error status.
     $nodeType = NodeType::load('landing_page');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
   }

   /**
@@ @@
     // Upload the document successfully
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check that upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Article status checked successfully');
+    $this->assertSession()->pageTextContains('Article status checked successfully');

     // Edit the content type.
     $edit['name'] = 'Blogpost';
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
-    $this->assertText('The content type Blogpost has been updated');
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));
+    $this->assertSession()->pageTextContains('The content type Blogpost has been updated');

     // Go back to the form
     $this->drupalGet('/admin/config/regional/config-translation/node_type');
@@ @@
     // Re-upload. Must fail now.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // The node type has been marked with the error status.
     $nodeType = NodeType::load('article');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Article status checked successfully');
+    $this->assertSession()->pageTextContains('Article status checked successfully');

     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_update', TRUE);

     // Edit the content type.
     $edit['name'] = 'Blogpost';
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
-    $this->assertText('The content type Blogpost has been updated.');
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));
+    $this->assertSession()->pageTextContains('The content type Blogpost has been updated.');

-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // The node type has been marked with the error status.
     $nodeType = NodeType::load('article');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Article status checked successfully');
+    $this->assertSession()->pageTextContains('Article status checked successfully');

     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', TRUE);

     // Edit the content type.
     $edit['name'] = 'Blogpost';
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
-    $this->assertText('The content type Blogpost has been updated.');
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));
+    $this->assertSession()->pageTextContains('The content type Blogpost has been updated.');

     $nodeType = NodeType::load('article');
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status);
-    $this->assertText('Document node_type Blogpost was not found. Please upload again.');
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status);
+    $this->assertSession()->pageTextContains('Document node_type Blogpost was not found. Please upload again.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', FALSE);
@@ @@
     $this->clickLink(t('Translate'));
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Blogpost uploaded successfully');
+    $this->assertSession()->pageTextContains('Blogpost uploaded successfully');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Article status checked successfully');
+    $this->assertSession()->pageTextContains('Article status checked successfully');

     // Edit the content type.
     $edit['name'] = 'Blogpost';
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
-    $this->assertText('The content type Blogpost has been updated.');
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));
+    $this->assertSession()->pageTextContains('The content type Blogpost has been updated.');

     // Go back to the form.
     $this->drupalGet('/admin/config/regional/config-translation/node_type');
@@ @@
     // Re-upload. Must fail now.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Blogpost update failed. Please try again.');
+    $this->assertSession()->pageTextContains('Blogpost update failed. Please try again.');

     // The node type has been marked with the error status.
     $nodeType = NodeType::load('article');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Blogpost has been updated.');
+    $this->assertSession()->pageTextContains('Blogpost has been updated.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
@@ @@

     // We failed at checking status, but we don't know what happened.
     // So we don't mark as error but keep it on importing.
-    $this->assertText('Article status check failed. Please try again.');
+    $this->assertSession()->pageTextContains('Article status check failed. Please try again.');

     $nodeType = NodeType::load('article');
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status);
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status);
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // The document has not been imported yet.
     \Drupal::state()->set('lingotek.document_status_completion', FALSE);
@@ @@
     // Check that the upload succeeded.
     $this->clickLink('Check upload status');

-    $this->assertText('The import for Article is still pending.');
+    $this->assertSession()->pageTextContains('The import for Article is still pending.');

     $nodeType = NodeType::load('article');
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status);
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status);
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');

-    $this->assertText('Document Article was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document Article was not found. Please upload again.');

     $nodeType = NodeType::load('article');
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status);
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status);
   }

   /**
@@ @@
   public function testUpdatingWithAnErrorViaAutomaticUpload() {
     // Create a content type.
     $edit = ['name' => 'Landing Page', 'type' => 'landing_page'];
-    $this->drupalPostForm('admin/structure/types/add', $edit, 'Save content type');
+    $this->drupalGet('admin/structure/types/add');
+    $this->submitForm($edit, 'Save content type');

     \Drupal::state()->set('lingotek.must_error_in_upload', TRUE);

     // Edit the content type.
     $edit['name'] = 'Landing Page EDITED';
-    $this->drupalPostForm('/admin/structure/types/manage/landing_page', $edit, t('Save content type'));
+    $this->drupalGet('/admin/structure/types/manage/landing_page');
+    $this->submitForm($edit, t('Save content type'));

     // The document was updated automatically and failed.
-    $this->assertText('The update for node_type Landing Page EDITED failed. Please try again.');
+    $this->assertSession()->pageTextContains('The update for node_type Landing Page EDITED failed. Please try again.');

     // The node type has been marked with the error status.
     $nodeType = NodeType::load('landing_page');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Article status checked successfully');
+    $this->assertSession()->pageTextContains('Article status checked successfully');

     // Edit the content type.
     $edit['name'] = 'Blogpost';
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
-    $this->assertText('The content type Blogpost has been updated.');
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));
+    $this->assertSession()->pageTextContains('The content type Blogpost has been updated.');

     // Go back to the form.
     $this->drupalGet('/admin/config/regional/config-translation/node_type');
@@ @@
     // Re-upload. Must fail now.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Document Blogpost has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document Blogpost has been archived. Uploading again.');

     // The node type has been marked with the error status.
     $nodeType = NodeType::load('article');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status);
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status);

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', FALSE);
     $this->clickLink('Check upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Blogpost status checked successfully');
+    $this->assertSession()->pageTextContains('Blogpost status checked successfully');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Article status checked successfully');
+    $this->assertSession()->pageTextContains('Article status checked successfully');

     // Edit the content type.
     $edit['name'] = 'Blogpost';
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
-    $this->assertText('The content type Blogpost has been updated.');
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));
+    $this->assertSession()->pageTextContains('The content type Blogpost has been updated.');

     // Go back to the form.
     $this->drupalGet('/admin/config/regional/config-translation/node_type');
@@ @@
     // Re-upload. Must fail now.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Document node_type Blogpost has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document node_type Blogpost has a new version. The document id has been updated for all future interactions. Please try again.');

     // The node type has been marked with the error status.
     $nodeType = NodeType::load('article');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_EDITED, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_EDITED, $source_status, 'The node type has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', FALSE);
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Blogpost has been updated.');
+    $this->assertSession()->pageTextContains('Blogpost has been updated.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Article status checked successfully');
+    $this->assertSession()->pageTextContains('Article status checked successfully');

     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', TRUE);

     // Edit the content type.
     $edit['name'] = 'Blogpost';
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
-    $this->assertText('The content type Blogpost has been updated.');
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));
+    $this->assertSession()->pageTextContains('The content type Blogpost has been updated.');

-    $this->assertText('Document node_type Blogpost has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document node_type Blogpost has a new version. The document id has been updated for all future interactions. Please try again.');

     // The node type has been marked with the error status.
     $nodeType = NodeType::load('article');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_EDITED, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_EDITED, $source_status, 'The node type has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', FALSE);
@@ @@
     $this->clickLink(t('Translate'));
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Blogpost has been updated.');
+    $this->assertSession()->pageTextContains('Blogpost has been updated.');
   }

   /**
@@ @@
     // Upload the document, which must succeed.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check that the upload succeeded.
     $this->clickLink('Check upload status');
-    $this->assertText('Article status checked successfully');
+    $this->assertSession()->pageTextContains('Article status checked successfully');

     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', TRUE);

     // Edit the content type.
     $edit['name'] = 'Blogpost';
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
-    $this->assertText('The content type Blogpost has been updated.');
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));
+    $this->assertSession()->pageTextContains('The content type Blogpost has been updated.');

-    $this->assertText('Document node_type Blogpost has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document node_type Blogpost has been archived. Uploading again.');

     // The node type has been marked with the error status.
     $nodeType = NodeType::load('article');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status);
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status);

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', FALSE);
@@ @@
     $this->clickLink(t('Translate'));
     $this->clickLink('Check upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Blogpost status checked successfully');
+    $this->assertSession()->pageTextContains('Blogpost status checked successfully');
   }

   /**
@@ @@

     // Create a content type.
     $edit = ['name' => 'Landing Page', 'type' => 'landing_page'];
-    $this->drupalPostForm('admin/structure/types/add', $edit, 'Save content type');
+    $this->drupalGet('admin/structure/types/add');
+    $this->submitForm($edit, 'Save content type');

     // The document was uploaded automatically and failed.
-    $this->assertText('The upload for node_type Landing Page failed. Please try again.');
+    $this->assertSession()->pageTextContains('The upload for node_type Landing Page failed. Please try again.');

     // The node type has been marked with the error status.
     $nodeType = NodeType::load('landing_page');
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
   }

   /**
@@ @@
     $this->drupalGet('/admin/config/regional/config-translation');
     $this->drupalGet('/admin/config/regional/config-translation/node_type');
     $this->clickLink('Translate');
-    $this->assertText('Translations for AAA Test Content Type content type');
-    $this->assertText('Unknown (nap) (original)');
+    $this->assertSession()->pageTextContains('Translations for AAA Test Content Type content type');
+    $this->assertSession()->pageTextContains('Unknown (nap) (original)');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


133) modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeNotificationCallbackTest.php:45

    ---------- begin diff ----------
@@ @@
     $this->saveLingotekConfigTranslationSettings([
       'node_type' => 'automatic',
     ]);
+    $this->drupalGet('/admin/structure/types/add');

     // Create Article node types. We use the form at least once to ensure that
     // we don't break anything. E.g. see https://www.drupal.org/node/2645202.
-    $this->drupalPostForm('/admin/structure/types/add', ['type' => 'article', 'name' => 'Article'], 'Save content type');
+    $this->submitForm(['type' => 'article', 'name' => 'Article'], 'Save content type');

     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $config_translation_service */
     $config_translation_service = \Drupal::service('lingotek.config_translation');
@@ @@
     $entity = \Drupal::entityTypeManager()->getStorage('node_type')->load('article');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_type');
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $entity = $node_storage->load('article');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));

     $this->goToConfigBulkManagementForm('node_type');

@@ @@
     $entity = $node_storage->load('article');

     // Assert the target is ready.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $entity = \Drupal::entityTypeManager()->getStorage('node_type')->load('article');

     // Assert the content is edited, but not auto-uploaded.
-    $this->assertIdentical(Lingotek::STATUS_EDITED, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_EDITED, $config_translation_service->getSourceStatus($entity));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_type');
@@ @@
     $response = json_decode($request->getBody(), TRUE);

     // Translations are not requested.
-    $this->assertIdentical([], $response['result']['request_translations'], 'No translations has been requested after notification automatically.');
+    $this->assertSame([], $response['result']['request_translations'], 'No translations has been requested after notification automatically.');

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $entity = $node_storage->load('article');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is ready to be requested.
-    $this->assertIdentical(Lingotek::STATUS_REQUEST, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_REQUEST, $config_translation_service->getTargetStatus($entity, 'es'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $entity = $node_storage->load('article');

     // Assert the target is ready.
-    $this->assertIdentical(Lingotek::STATUS_READY, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_READY, $config_translation_service->getTargetStatus($entity, 'es'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $entity = $node_storage->load('article');

     // Assert the target is current.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));
   }

   /**
@@ @@
     $this->saveLingotekConfigTranslationSettings([
       'node_type' => 'automatic',
     ]);
+    $this->drupalGet('/admin/structure/types/add');

     // Create Article node types. We use the form at least once to ensure that
     // we don't break anything. E.g. see https://www.drupal.org/node/2645202.
-    $this->drupalPostForm('/admin/structure/types/add', ['type' => 'article', 'name' => 'Article'], 'Save content type');
+    $this->submitForm(['type' => 'article', 'name' => 'Article'], 'Save content type');

     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $config_translation_service */
     $config_translation_service = \Drupal::service('lingotek.config_translation');
@@ @@
     $entity = \Drupal::entityTypeManager()->getStorage('node_type')->load('article');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_type');
@@ @@
     $entity = $node_storage->load('article');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is intermediate.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));

     // Assert a translation has been downloaded.
     $this->drupalGet('admin/structure/types/manage/article/translate');
@@ @@
     $entity = $node_storage->load('article');

     // Assert the target is ready.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $this->saveLingotekConfigTranslationSettings([
       'node_type' => 'automatic',
     ]);
+    $this->drupalGet('/admin/structure/types/add');

     // Create Article node types. We use the form at least once to ensure that
     // we don't break anything. E.g. see https://www.drupal.org/node/2645202.
-    $this->drupalPostForm('/admin/structure/types/add', ['type' => 'article', 'name' => 'Article'], 'Save content type');
+    $this->submitForm(['type' => 'article', 'name' => 'Article'], 'Save content type');

     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $config_translation_service */
     $config_translation_service = \Drupal::service('lingotek.config_translation');
@@ @@
     $entity = \Drupal::entityTypeManager()->getStorage('node_type')->load('article');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_type');
@@ @@
     $entity = $node_storage->load('article');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $this->saveLingotekConfigTranslationSettings([
       'node_type' => 'automatic',
     ]);
+    $this->drupalGet('/admin/structure/types/add');

     // Create Article node types. We use the form at least once to ensure that
     // we don't break anything. E.g. see https://www.drupal.org/node/2645202.
-    $this->drupalPostForm('/admin/structure/types/add', ['type' => 'article', 'name' => 'Article'], 'Save content type');
+    $this->submitForm(['type' => 'article', 'name' => 'Article'], 'Save content type');

     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $config_translation_service */
     $config_translation_service = \Drupal::service('lingotek.config_translation');
@@ @@
     $entity = \Drupal::entityTypeManager()->getStorage('node_type')->load('article');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_type');
@@ @@
     $entity = $node_storage->load('article');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is intermediate.
-    $this->assertIdentical(Lingotek::STATUS_INTERMEDIATE, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_INTERMEDIATE, $config_translation_service->getTargetStatus($entity, 'es'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $this->saveLingotekConfigTranslationSettings([
       'node_type' => 'automatic',
     ]);
+    $this->drupalGet('/admin/structure/types/add');

     // Create Article node types. We use the form at least once to ensure that
     // we don't break anything. E.g. see https://www.drupal.org/node/2645202.
-    $this->drupalPostForm('/admin/structure/types/add', ['type' => 'article', 'name' => 'Article'], 'Save content type');
+    $this->submitForm(['type' => 'article', 'name' => 'Article'], 'Save content type');

     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $config_translation_service */
     $config_translation_service = \Drupal::service('lingotek.config_translation');
@@ @@
     $entity = \Drupal::entityTypeManager()->getStorage('node_type')->load('article');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_type');
@@ @@
     $entity = $node_storage->load('article');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));

     // Assert a translation has been downloaded.
     $this->drupalGet('admin/structure/types/manage/article/translate');
@@ @@
     $this->saveLingotekConfigTranslationSettings([
       'node_type' => 'automatic',
     ]);
+    $this->drupalGet('/admin/structure/types/add');

     // Create Article node types. We use the form at least once to ensure that
     // we don't break anything. E.g. see https://www.drupal.org/node/2645202.
-    $this->drupalPostForm('/admin/structure/types/add', ['type' => 'article', 'name' => 'Article'], 'Save content type');
+    $this->submitForm(['type' => 'article', 'name' => 'Article'], 'Save content type');

     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $config_translation_service */
     $config_translation_service = \Drupal::service('lingotek.config_translation');
@@ @@
     $entity = \Drupal::entityTypeManager()->getStorage('node_type')->load('article');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_type');
@@ @@
     $entity = $node_storage->load('article');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is intermediate.
-    $this->assertIdentical(Lingotek::STATUS_INTERMEDIATE, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_INTERMEDIATE, $config_translation_service->getTargetStatus($entity, 'es'));

     // Assert a translation has been downloaded.
     $this->drupalGet('admin/structure/types/manage/article/translate');
@@ @@
     $entity = \Drupal::entityTypeManager()->getStorage('node_type')->load('article');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_type');
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical(['de', 'it'], $response['result']['request_translations'], 'German and Italian languages has been requested after notification automatically.');
+    $this->assertSame(['de', 'it'], $response['result']['request_translations'], 'German and Italian languages has been requested after notification automatically.');

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $entity = $node_storage->load('article');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_REQUEST, $config_translation_service->getTargetStatus($entity, 'es'));
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'de'));
+    $this->assertSame(Lingotek::STATUS_REQUEST, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'de'));
     // We assert for the UI, as the status is not really stored.
     // TODO: This should actually be stored.
     $this->assertTargetStatus('ca', Lingotek::STATUS_DISABLED);
@@ @@
     $entity = $node_storage->load('article');

     // Assert the target is ready.
-    $this->assertIdentical(Lingotek::STATUS_READY, $config_translation_service->getTargetStatus($entity, 'es'));
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'de'));
+    $this->assertSame(Lingotek::STATUS_READY, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'de'));
     // We assert for the UI, as the status is not really stored.
     // TODO: This should actually be stored.
     $this->assertTargetStatus('ca', Lingotek::STATUS_DISABLED);
@@ @@
     $node_storage->resetCache();
     $entity = $node_storage->load('article');
     // Assert the target is current.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'de'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'de'));
   }

   /**
@@ @@
     $entity = \Drupal::entityTypeManager()->getStorage('node_type')->load('article');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_type');
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $entity = $node_storage->load('article');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
-    $this->assertIdentical(Lingotek::STATUS_REQUEST, $config_translation_service->getTargetStatus($entity, 'de'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_REQUEST, $config_translation_service->getTargetStatus($entity, 'de'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $entity = $node_storage->load('article');

     // Assert the target is ready.
-    $this->assertIdentical(Lingotek::STATUS_READY, $config_translation_service->getTargetStatus($entity, 'es'));
-    $this->assertIdentical(Lingotek::STATUS_READY, $config_translation_service->getTargetStatus($entity, 'de'));
+    $this->assertSame(Lingotek::STATUS_READY, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_READY, $config_translation_service->getTargetStatus($entity, 'de'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@
     $node_storage->resetCache();
     $entity = $node_storage->load('article');
     // Assert the target is current.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));
-    $this->assertIdentical(Lingotek::STATUS_READY, $config_translation_service->getTargetStatus($entity, 'de'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_READY, $config_translation_service->getTargetStatus($entity, 'de'));
   }

   /**
@@ @@
     $this->saveLingotekConfigTranslationSettings([
       'node_type' => 'automatic',
     ]);
+    $this->drupalGet('/admin/structure/types/add');

     // Create Article node types. We use the form at least once to ensure that
     // we don't break anything. E.g. see https://www.drupal.org/node/2645202.
-    $this->drupalPostForm('/admin/structure/types/add', ['type' => 'article', 'name' => 'Article'], 'Save content type');
+    $this->submitForm(['type' => 'article', 'name' => 'Article'], 'Save content type');
+    $this->drupalGet('/admin/structure/types/add');

     // Create Page node type. We use the form at least once to ensure that
     // we don't break anything. E.g. see https://www.drupal.org/node/2645202.
-    $this->drupalPostForm('/admin/structure/types/add', ['type' => 'page', 'name' => 'Page'], 'Save content type');
+    $this->submitForm(['type' => 'page', 'name' => 'Page'], 'Save content type');

     // Login as admin.
     $this->drupalLogin($this->rootUser);
@@ @@

     // Assert the content is importing.
     $entity = \Drupal::entityTypeManager()->getStorage('node_type')->load('article');
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_type');
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical(['it', 'es'], $response['result']['request_translations'], 'Spanish and Italian languages have been requested after notification automatically.');
+    $this->assertSame(['it', 'es'], $response['result']['request_translations'], 'Spanish and Italian languages have been requested after notification automatically.');

     /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
     $lingotek_config = \Drupal::service('lingotek.configuration');
@@ @@
       'http_errors' => FALSE,
     ]);
     $response = json_decode($request->getBody(), TRUE);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Italian language has not been requested after notification automatically because it is disabled.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Italian language has not been requested after notification automatically because it is disabled.');
   }

   /**
@@ @@
     $this->saveLingotekConfigTranslationSettings([
       'node_type' => 'automatic',
     ]);
+    $this->drupalGet('/admin/structure/types/add');

     // Create Article node types. We use the form at least once to ensure that
     // we don't break anything. E.g. see https://www.drupal.org/node/2645202.
-    $this->drupalPostForm('/admin/structure/types/add', ['type' => 'article', 'name' => 'Article'], 'Save content type');
+    $this->submitForm(['type' => 'article', 'name' => 'Article'], 'Save content type');

     // Simulate the notification of content successfully uploaded.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@

     // All the links are current.
     $current_links = $this->xpath("//a[contains(@class,'language-icon') and contains(@class, 'target-current')]");
-    $this->assertEqual(count($current_links), 2, 'Translation "es_ES" and "it_IT" are current.');
+    $this->assertEquals(count($current_links), 2, 'Translation "es_ES" and "it_IT" are current.');

     // Simulate the notification of target deleted.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     $this->saveLingotekConfigTranslationSettings([
       'node_type' => 'automatic',
     ]);
+    $this->drupalGet('/admin/structure/types/add');

     // Create Article node types. We use the form at least once to ensure that
     // we don't break anything. E.g. see https://www.drupal.org/node/2645202.
-    $this->drupalPostForm('/admin/structure/types/add', ['type' => 'article', 'name' => 'Article'], 'Save content type');
+    $this->submitForm(['type' => 'article', 'name' => 'Article'], 'Save content type');

     // Simulate the notification of content successfully uploaded.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     $this->saveLingotekConfigTranslationSettings([
       'node_type' => 'automatic',
     ]);
+    $this->drupalGet('/admin/structure/types/add');

     // Create Article node types. We use the form at least once to ensure that
     // we don't break anything. E.g. see https://www.drupal.org/node/2645202.
-    $this->drupalPostForm('/admin/structure/types/add', ['type' => 'article', 'name' => 'Article'], 'Save content type');
+    $this->submitForm(['type' => 'article', 'name' => 'Article'], 'Save content type');

     /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $node_storage */
     $node_storage = $this->container->get('entity_type.manager')->getStorage('node_type');
@@ @@
     $entity = $node_storage->load('article');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
-    $this->assertIdentical($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');

     $this->goToConfigBulkManagementForm('node_type');

@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical($response['messages'][0], 'Document import for entity Article failed. Reverting dummy-document-hash-id to previous id (NULL)');
+    $this->assertSame($response['messages'][0], 'Document import for entity Article failed. Reverting dummy-document-hash-id to previous id (NULL)');

     $this->goToConfigBulkManagementForm('node_type');

@@ @@
     $entity = $node_storage->load('article');

     $this->assertNull($config_translation_service->getDocumentId($entity));
-    $this->assertIdentical(Lingotek::STATUS_ERROR, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_ERROR, $config_translation_service->getSourceStatus($entity));
   }

   /**
@@ @@
     $this->saveLingotekConfigTranslationSettings([
       'node_type' => 'automatic',
     ]);
+    $this->drupalGet('/admin/structure/types/add');

     // Create Article node types. We use the form at least once to ensure that
     // we don't break anything. E.g. see https://www.drupal.org/node/2645202.
-    $this->drupalPostForm('/admin/structure/types/add', ['type' => 'article', 'name' => 'Article'], 'Save content type');
+    $this->submitForm(['type' => 'article', 'name' => 'Article'], 'Save content type');

     /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $node_storage */
     $node_storage = $this->container->get('entity_type.manager')->getStorage('node_type');
@@ @@
     $entity = $node_storage->load('article');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
-    $this->assertIdentical($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');

     $this->goToConfigBulkManagementForm('node_type');

@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     $this->goToConfigBulkManagementForm('node_type');

@@ @@
     $entity = $node_storage->load('article');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->drupalGet('/admin/structure/types/manage/article');

     // Edit the node.
-    $this->drupalPostForm('/admin/structure/types/manage/article', ['name' => 'Article EDITED'], 'Save content type');
+    $this->submitForm(['name' => 'Article EDITED'], 'Save content type');

     $this->goToConfigBulkManagementForm('node_type');
     $entity = $node_storage->load('article');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
     // Assert the document id changed.
-    $this->assertIdentical($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id-1');
+    $this->assertSame($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id-1');

     // Simulate the notification of failed import document.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);

-    $this->assertIdentical($response['messages'][0], 'Document import for entity Article EDITED failed. Reverting dummy-document-hash-id-1 to previous id dummy-document-hash-id');
+    $this->assertSame($response['messages'][0], 'Document import for entity Article EDITED failed. Reverting dummy-document-hash-id-1 to previous id dummy-document-hash-id');

     $this->goToConfigBulkManagementForm('node_type');

@@ @@

     // Assert the document id was restored.
     $this->assertEquals($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');
-    $this->assertIdentical(Lingotek::STATUS_ERROR, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_ERROR, $config_translation_service->getSourceStatus($entity));
   }

   /**
@@ @@
     $this->saveLingotekConfigTranslationSettings([
       'node_type' => 'automatic',
     ]);
+    $this->drupalGet('/admin/structure/types/add');

     // Create Article node types. We use the form at least once to ensure that
     // we don't break anything. E.g. see https://www.drupal.org/node/2645202.
-    $this->drupalPostForm('/admin/structure/types/add', ['type' => 'article', 'name' => 'Article'], 'Save content type');
+    $this->submitForm(['type' => 'article', 'name' => 'Article'], 'Save content type');

     /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $node_storage */
     $node_storage = $this->container->get('entity_type.manager')->getStorage('node_type');
@@ @@
     $entity = $node_storage->load('article');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
-    $this->assertIdentical($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');

     $this->goToConfigBulkManagementForm('node_type');

@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     $this->goToConfigBulkManagementForm('node_type');

@@ @@
     $entity = $node_storage->load('article');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->drupalGet('/admin/structure/types/manage/article');

     // Edit the node.
-    $this->drupalPostForm('/admin/structure/types/manage/article', ['name' => 'Article EDITED'], 'Save content type');
+    $this->submitForm(['name' => 'Article EDITED'], 'Save content type');

     $this->goToConfigBulkManagementForm('node_type');
     $entity = $node_storage->load('article');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
     // Assert the document id changed.
-    $this->assertIdentical($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id-1');
+    $this->assertSame($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id-1');

     // Simulate the notification of content successfully updated.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@

     // Assert the document id and the CURRENT status.
     $this->assertEquals($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id-1');
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
   }

   /**
@@ @@
     $this->saveLingotekConfigTranslationSettings([
       'node_type' => 'automatic',
     ]);
+    $this->drupalGet('/admin/structure/types/add');

     // Create Article node types. We use the form at least once to ensure that
     // we don't break anything. E.g. see https://www.drupal.org/node/2645202.
-    $this->drupalPostForm('/admin/structure/types/add', ['type' => 'article', 'name' => 'Article'], 'Save content type');
+    $this->submitForm(['type' => 'article', 'name' => 'Article'], 'Save content type');

     /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $node_storage */
     $node_storage = $this->container->get('entity_type.manager')->getStorage('node_type');
@@ @@
     $entity = $node_storage->load('article');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
-    $this->assertIdentical($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');

     $this->goToConfigBulkManagementForm('node_type');

@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     $this->goToConfigBulkManagementForm('node_type');

@@ @@
     $entity = $node_storage->load('article');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));

     // Simulate the notification of document_cancelled document.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);

-    $this->assertIdentical($response['messages'][0], 'Document Article cancelled in TMS.');
+    $this->assertSame($response['messages'][0], 'Document Article cancelled in TMS.');

     $this->goToConfigBulkManagementForm('node_type');

@@ @@
     $entity = $node_storage->load('article');

     $this->assertNull($config_translation_service->getDocumentId($entity));
-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $config_translation_service->getSourceStatus($entity));
-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $config_translation_service->getTargetStatus($entity, 'es'));
   }

   /**
@@ @@
     $this->saveLingotekConfigTranslationSettings([
       'node_type' => 'automatic',
     ]);
+    $this->drupalGet('/admin/structure/types/add');

     // Create Article node types. We use the form at least once to ensure that
     // we don't break anything. E.g. see https://www.drupal.org/node/2645202.
-    $this->drupalPostForm('/admin/structure/types/add', ['type' => 'article', 'name' => 'Article'], 'Save content type');
+    $this->submitForm(['type' => 'article', 'name' => 'Article'], 'Save content type');

     /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $node_storage */
     $node_storage = $this->container->get('entity_type.manager')->getStorage('node_type');
@@ @@
     $entity = $node_storage->load('article');

     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
-    $this->assertIdentical($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame($config_translation_service->getDocumentId($entity), 'dummy-document-hash-id');

     $this->goToConfigBulkManagementForm('node_type');

@@ @@
     ]);
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');

     $this->goToConfigBulkManagementForm('node_type');

@@ @@
     $entity = $node_storage->load('article');

     // Assert the content is imported.
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
     // Assert the target is pending.
-    $this->assertIdentical(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_PENDING, $config_translation_service->getTargetStatus($entity, 'es'));

     // Simulate the notification of document_cancelled document.
     $url = Url::fromRoute('lingotek.notify', [], [
@@ @@
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);

-    $this->assertIdentical($response['messages'][0], 'Document Article target es_ES cancelled in TMS.');
+    $this->assertSame($response['messages'][0], 'Document Article target es_ES cancelled in TMS.');

     $this->goToConfigBulkManagementForm('node_type');

     $entity = $node_storage->load('article');

-    $this->assertIdentical('dummy-document-hash-id', $config_translation_service->getDocumentId($entity));
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame('dummy-document-hash-id', $config_translation_service->getDocumentId($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $config_translation_service->getTargetStatus($entity, 'es'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


134) modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeLocaleTranslationTest.php:64

    ---------- begin diff ----------
@@ @@
     $this->clickLink(t('Translate'));

     $this->clickLink(t('Upload'));
-    $this->assertText(t('Article uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('Article uploaded successfully'));

     // Check that only the translatable fields have been uploaded.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
-    $this->assertEqual(3, count($data));
+    $this->assertEquals(3, count($data));
     $this->assertTrue(array_key_exists('name', $data));
     // Cannot use isset, the key exists but we are not providing values, so NULL.
     $this->assertTrue(array_key_exists('description', $data));
@@ @@

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/admin/structure/types/manage/article'), $uploaded_url, 'The article type url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/admin/structure/types/manage/article'), $uploaded_url, 'The article type url was used.');
     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     $this->clickLink(t('Check upload status'));
-    $this->assertText(t('Article status checked successfully'));
+    $this->assertSession()->pageTextContains(t('Article status checked successfully'));

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText(t('Translation to es_AR requested successfully'));
-    $this->assertIdentical('es_AR', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains(t('Translation to es_AR requested successfully'));
+    $this->assertSame('es_AR', \Drupal::state()->get('lingotek.added_target_locale'));

     $this->clickLink(t('Check Download'));
-    $this->assertText(t('Translation to es_AR status checked successfully'));
+    $this->assertSession()->pageTextContains(t('Translation to es_AR status checked successfully'));

     $this->clickLink('Download');
-    $this->assertText(t('Translation to es_AR downloaded successfully'));
+    $this->assertSession()->pageTextContains(t('Translation to es_AR downloaded successfully'));

     // Check that the edit link is there.
     $basepath = \Drupal::request()->getBasePath();
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


135) modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeExistingBulkTranslationTest.php:62

    ---------- begin diff ----------
@@ @@
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText(t('Article uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('Article uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // Assert the untracked translation is shown.
     $this->assertTargetStatus('ES', 'untracked');
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText('Article status checked successfully');
+    $this->assertSession()->pageTextContains('Article status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX status checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX status checked successfully");

     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'ES');
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


136) modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeBulkTranslationTest.php:60

    ---------- begin diff ----------
@@ @@
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText(t('Article uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('Article uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // Ensure it has the expected timestamp for updated and upload
     $timestamp = \Drupal::time()->getRequestTime();
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText('Article status checked successfully');
+    $this->assertSession()->pageTextContains('Article status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX status checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX status checked successfully");

     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'ES');
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/node_type/article?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request the German (AT) translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('de', 'node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/node_type/article/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslation('de', 'node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.checked_target_locale'));

     // Download the German translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/node_type/article/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => 'download:de',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('de_AT', 'dummy-document-hash-id', 'DE');
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // I can check current status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/node_type/article?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check status of all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/node_type/article/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Download all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[page]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
   }

   /**
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:manual',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Add a language so we can check that it's not marked as dirty if there are
     // no translations.
@@ @@
     // Add a language so we can check that it's not marked as for requesting if
     // it was already requested.
     ConfigurableLanguage::createFromLangcode('ko')->setThirdPartySetting('lingotek', 'locale', 'ko_KR')->save();
+    $this->drupalGet('/admin/structure/types/manage/article');

     // Edit the object
-    $this->drupalPostForm('/admin/structure/types/manage/article', ['name' => 'Article EDITED'], t('Save content type'));
+    $this->submitForm(['name' => 'Article EDITED'], t('Save content type'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_type');
@@ @@

     // Request korean, with outdated content available.
     $this->clickLink('KO');
-    $this->assertText("Translation to ko_KR requested successfully");
+    $this->assertSession()->pageTextContains("Translation to ko_KR requested successfully");

     // Reupload the content.
     $this->clickLink('EN');
-    $this->assertText('Article EDITED has been updated.');
+    $this->assertSession()->pageTextContains('Article EDITED has been updated.');

     // Recheck status.
     $this->clickLink('EN');
-    $this->assertText('Article EDITED status checked successfully');
+    $this->assertSession()->pageTextContains('Article EDITED status checked successfully');

     // Korean should still be marked as requested, so we can check target.
     $this->assertTargetStatus('KO', 'pending');
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Operations completed.');

     // Download the translation.
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
   }

   /**
@@ @@
     // Add a language so we can check that it's not marked as dirty if there are
     // no translations.
     ConfigurableLanguage::createFromLangcode('eu')->setThirdPartySetting('lingotek', 'locale', 'eu_ES')->save();
+    $this->drupalGet('/admin/structure/types/manage/article');

     // Edit the object
-    $this->drupalPostForm('/admin/structure/types/manage/article', ['name' => 'Article EDITED'], t('Save content type'));
+    $this->submitForm(['name' => 'Article EDITED'], t('Save content type'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_type');
@@ @@

     // Recheck status.
     $this->clickLink('EN');
-    $this->assertText('Article EDITED status checked successfully');
+    $this->assertSession()->pageTextContains('Article EDITED status checked successfully');

     // Check the translation after having been edited.
     $edit = [
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Operations completed.');

     // Download the translation.
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
   }

   /**
@@ @@
     // There is a link for requesting the Catalan translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/ca_ES?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('CA');
-    $this->assertText("Translation to ca_ES requested successfully");
+    $this->assertSession()->pageTextContains("Translation to ca_ES requested successfully");
   }

   /**
@@ @@
    * Test that when a config is uploaded in a different locale that locale is used.
    * ToDo: Add a test for this.
    */
-  public function testAddingConfigInDifferentLocale() {
-    $this->pass('Test not implemented yet.');
+  public function testAddingConfigInDifferentLocale()
+  {
   }

   /**
@@ @@

     // Upload the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Article upload failed. Please try again.');
+    $this->assertSession()->pageTextContains('Article upload failed. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');
   }

   /**
@@ @@

     // Upload the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');
   }

   /**
@@ @@

     // Upload the document. Must fail.
     $this->clickLink('EN');
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check upload.
     $this->assertLingotekCheckSourceStatusLink();
@@ @@
     // So we don't mark as error but keep it on importing.
     $this->assertNoSourceStatus('EN', Lingotek::STATUS_REQUEST);
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
-    $this->assertText('Article status check failed. Please try again.');
+    $this->assertSession()->pageTextContains('Article status check failed. Please try again.');

     $nodeType = NodeType::load('article');
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status);
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status);
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // The document has not been imported yet.
     \Drupal::state()->set('lingotek.document_status_completion', FALSE);
@@ @@
     // So we don't mark as error but keep it on importing.
     $this->assertNoSourceStatus('EN', Lingotek::STATUS_REQUEST);
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
-    $this->assertText('The import for Article is still pending.');
+    $this->assertSession()->pageTextContains('The import for Article is still pending.');

     $nodeType = NodeType::load('article');
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status);
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status);
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check upload.
     $this->assertLingotekCheckSourceStatusLink();
@@ @@
     $this->clickLink('EN');

     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
-    $this->assertText('Document Article was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document Article was not found. Please upload again.');

     $nodeType = NodeType::load('article');
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status);
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status);
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the node type.
     $edit = ['name' => 'Blogpost'];
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));

     \Drupal::state()->set('lingotek.must_error_in_upload', TRUE);

@@ @@

     // Update the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Blogpost update failed. Please try again.');
+    $this->assertSession()->pageTextContains('Blogpost update failed. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Blogpost has been updated.');
+    $this->assertSession()->pageTextContains('Blogpost has been updated.');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the node type.
     $edit = ['name' => 'Blogpost'];
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));

     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', TRUE);

@@ @@

     // Update the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Blogpost has been updated.');
+    $this->assertSession()->pageTextContains('Blogpost has been updated.');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the node type.
     $edit = ['name' => 'Blogpost'];
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));

     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_update', TRUE);

@@ @@

     // Update the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the node type.
     $edit = ['name' => 'Blogpost'];
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));

     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', TRUE);

@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status);
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status);

     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document node_type Blogpost was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document node_type Blogpost was not found. Please upload again.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Blogpost uploaded successfully');
+    $this->assertSession()->pageTextContains('Blogpost uploaded successfully');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the node type.
     $edit = ['name' => 'Blogpost'];
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));

     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', TRUE);

@@ @@

     // Update the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Document node_type Blogpost has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document node_type Blogpost has been archived. Uploading again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
@@ @@
     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Blogpost status checked successfully');
+    $this->assertSession()->pageTextContains('Blogpost status checked successfully');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the node type.
     $edit = ['name' => 'Blogpost'];
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));

     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', TRUE);

@@ @@

     // Update the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Document node_type Blogpost has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document node_type Blogpost has a new version. The document id has been updated for all future interactions. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_EDITED);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_EDITED, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_EDITED, $source_status, 'The node type has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Blogpost has been updated.');
+    $this->assertSession()->pageTextContains('Blogpost has been updated.');
   }

   /**
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Article upload failed. Please try again.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Article upload failed. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');
   }

   /**
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Article uploaded successfully');
+    $this->assertSession()->pageTextContains('Article uploaded successfully');
   }

   /**
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
   }

   /**
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Operations completed.');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the node type.
     $edit = ['name' => 'Blogpost'];
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));

     \Drupal::state()->set('lingotek.must_error_in_upload', TRUE);

@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Blogpost update failed. Please try again.');
+    $this->assertSession()->pageTextContains('Blogpost update failed. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Blogpost has been updated.');
+    $this->assertSession()->pageTextContains('Blogpost has been updated.');
   }

   /**
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Operations completed.');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the node type.
     $edit = ['name' => 'Blogpost'];
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));

     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', TRUE);

@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Document node_type Blogpost has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document node_type Blogpost has a new version. The document id has been updated for all future interactions. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_EDITED);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_EDITED, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_EDITED, $source_status, 'The node type has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Blogpost has been updated.');
+    $this->assertSession()->pageTextContains('Blogpost has been updated.');
   }

   /**
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Operations completed.');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the node type.
     $edit = ['name' => 'Blogpost'];
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));

     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', TRUE);

@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Blogpost has been updated.');
+    $this->assertSession()->pageTextContains('Blogpost has been updated.');
   }

   /**
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Operations completed.');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the node type.
     $edit = ['name' => 'Blogpost'];
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));

     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', TRUE);

@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $nodeType = NodeType::load('article');
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status);
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status);

     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document node_type Blogpost was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document node_type Blogpost was not found. Please upload again.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_not_found_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Blogpost uploaded successfully');
+    $this->assertSession()->pageTextContains('Blogpost uploaded successfully');
   }

   /**
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Operations completed.');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the node type.
     $edit = ['name' => 'Blogpost'];
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));

     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', TRUE);

@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Document node_type Blogpost has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document node_type Blogpost has been archived. Uploading again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status);
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status);

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Blogpost status checked successfully');
+    $this->assertSession()->pageTextContains('Blogpost status checked successfully');
   }

   /**
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Operations completed.');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Edit the node type.
     $edit = ['name' => 'Blogpost'];
-    $this->drupalPostForm('/admin/structure/types/manage/article', $edit, t('Save content type'));
+    $this->drupalGet('/admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));

     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_update', TRUE);

@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $source_status = $translation_service->getSourceStatus($nodeType);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node type has been marked as error.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // We failed at requesting a translation, but we don't know what happened.
     // So we don't mark as error but keep it on request.
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Document node_type Article translations request failed. Please try again.');
+    $this->assertSession()->pageTextContains('Document node_type Article translations request failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document node_type Article has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document node_type Article has been archived. Uploading again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document node_type Article was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document node_type Article was not found. Please upload again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Document node_type Article has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document node_type Article has a new version. The document id has been updated for all future interactions. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // Check current status.
     $this->assertLingotekCheckSourceStatusLink();
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
     // We failed at requesting a translation, but we don't know what happened.
     // So we don't mark as error but keep it on request.
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Article es_MX translation request failed. Please try again.');
+    $this->assertSession()->pageTextContains('Article es_MX translation request failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // Check current status.
     $this->assertLingotekCheckSourceStatusLink();
@@ @@

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document node_type Article has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document node_type Article has been archived. Uploading again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@

     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document node_type Article was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document node_type Article was not found. Please upload again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Document node_type Article has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document node_type Article has a new version. The document id has been updated for all future interactions. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // We failed at requesting a translation, but we don't know what happened.
     // So we don't mark as error but keep it on request.
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Document node_type Article es_MX translation request failed. Please try again.');
+    $this->assertSession()->pageTextContains('Document node_type Article es_MX translation request failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document node_type Article has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document node_type Article has been archived. Uploading again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document node_type Article was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document node_type Article was not found. Please upload again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Document node_type Article has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document node_type Article has a new version. The document id has been updated for all future interactions. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // Check current status.
     $this->assertLingotekCheckSourceStatusLink();
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
   }

   /**
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/node_type/article?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Assert that I could request translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Now Drupal knows that there are translations ready.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/node_type/article/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@

     // Even if I just add a new language.
     ConfigurableLanguage::createFromLangcode('de')->setThirdPartySetting('lingotek', 'locale', 'de_DE')->save();
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/node_type/article/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');

     // Ensure locales are handled correctly by setting manual values.
     \Drupal::state()->set('lingotek.document_completion_statuses', ['de-AT' => 50, 'de-DE' => 100, 'es-MX' => 10]);
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Now Drupal knows which translations are ready.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/download/node_type/article/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@

     \Drupal::state()->set('lingotek.document_completion_statuses', ['it-IT' => 100, 'de-DE' => 50, 'es-MX' => 10]);
     // Check all statuses again.
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // All translations must be updated according exclusively with the
     // information from the TMS.
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/node_type/article?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX status checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX status checked successfully");

     // Download all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // The translations not requested shouldn't change its status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/de_DE?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.added_target_locale'));

     \Drupal::state()->resetCache();
@@ @@
     // Request italian.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/it_IT?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('IT');
-    $this->assertText("Translation to it_IT requested successfully");
-    $this->assertIdentical('it_IT', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to it_IT requested successfully");
+    $this->assertSame('it_IT', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX status checked successfully");
+    $this->assertSession()->pageTextContains("Translation to es_MX status checked successfully");

     \Drupal::state()->resetCache();

@@ @@
     // Check status of the Italian translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/node_type/article/it_IT?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('IT');
-    $this->assertIdentical('it_IT', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to it_IT status checked successfully");
+    $this->assertSame('it_IT', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to it_IT status checked successfully");

     // Download all the translations.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // They are marked with the right status.
     $this->assertTargetStatus('ES', 'current');
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // And statuses should remain the same.
     $this->assertTargetStatus('ES', 'current');
@@ @@
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText(t('Article uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('Article uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/node_type/article?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText('Article status checked successfully');
+    $this->assertSession()->pageTextContains('Article status checked successfully');

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_MX requested successfully");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX requested successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_MX status checked successfully");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_MX status checked successfully");

     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX downloaded successfully');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Let's edit the translation and assert the html decoded values.
     $this->drupalGet('/admin/structure/types');
     $this->clickLink('Translate');
     $this->clickLink('Edit', 1);
-    $this->assertFieldByName('translation[config_names][node.type.article][name]', 'Clase de "Artículo"');
-    $this->assertFieldByName('translation[config_names][node.type.article][description]', 'Uso de "artículos" sensibles al tiempo.');
+    $this->assertSession()->fieldValueEquals('translation[config_names][node.type.article][name]', 'Clase de "Artículo"');
+    $this->assertSession()->fieldValueEquals('translation[config_names][node.type.article][description]', 'Uso de "artículos" sensibles al tiempo.');
   }

   /**
@@ @@

     $this->drupalGet('/admin/structure/types/manage/article/translate');
     $this->clickLink('Delete');
-    $this->drupalPostForm(NULL, [], t('Delete'));
+    $this->submitForm([], t('Delete'));

     $this->goToConfigBulkManagementForm('node_type');
     $this->assertTargetStatus('DE', Lingotek::STATUS_READY);
@@ @@
     // Nothing was uploaded even with automatic profile, and nothing is listed
     // for upload.
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_title'));
-    $this->assertNoText('Not specified language content type');
-    $this->assertText('Article content type');
+    $this->assertSession()->pageTextNotContains('Not specified language content type');
+    $this->assertSession()->pageTextContains('Article content type');
   }

   protected function getBulkSelectionKey($langcode, $revision_id, $entity_type_id = 'article') {
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertIdenticalRector
 * AssertNoTextRector
 * AssertTextRector
 * PassRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


137) modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeBulkLocaleTranslationTest.php:62

    ---------- begin diff ----------
@@ @@
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/node_type/article/es_AR?destination=' . $basepath . '/admin/lingotek/config/manage');

     $this->clickLink('EN');
-    $this->assertText(t('Article uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains(t('Article uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/node_type/article?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/es_ES?destination=' . $basepath . '/admin/lingotek/config/manage');
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/es_AR?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText('Article status checked successfully');
+    $this->assertSession()->pageTextContains('Article status checked successfully');

     // Request the German (AT) translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('DE-AT');
-    $this->assertText("Translation to de_AT requested successfully");
+    $this->assertSession()->pageTextContains("Translation to de_AT requested successfully");
     // Check that the requested locale is the right one.
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));

     \Drupal::state()->resetCache();

@@ @@
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/es_ES?destination=' . $basepath . '/admin/lingotek/config/manage');
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/es_AR?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText("Translation to es_AR requested successfully");
+    $this->assertSession()->pageTextContains("Translation to es_AR requested successfully");
     // Check that the requested locale is the right one.
-    $this->assertIdentical('es_AR', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSame('es_AR', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/node_type/article/es_AR?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_AR', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to es_AR status checked successfully");
+    $this->assertSame('es_AR', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains("Translation to es_AR status checked successfully");

     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/node_type/article/es_AR?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_AR downloaded successfully');
-    $this->assertIdentical('es_AR', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_AR downloaded successfully');
+    $this->assertSame('es_AR', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'ES');
@@ @@

     // Check that the order of target languages is always alphabetical.
     $target_links = $this->xpath("//a[contains(@class,'language-icon')]");
-    $this->assertEqual(count($target_links), 3, 'The three languages appear as targets');
-    $this->assertEqual('DE-AT', $target_links[0]->getHtml(), 'DE-AT is the first language');
-    $this->assertEqual('ES', $target_links[1]->getHtml(), 'ES is the second language');
-    $this->assertEqual('ES-ES', $target_links[2]->getHtml(), 'ES-ES is the third language');
+    $this->assertEquals(count($target_links), 3, 'The three languages appear as targets');
+    $this->assertEquals('DE-AT', $target_links[0]->getHtml(), 'DE-AT is the first language');
+    $this->assertEquals('ES', $target_links[1]->getHtml(), 'ES is the second language');
+    $this->assertEquals('ES-ES', $target_links[2]->getHtml(), 'ES-ES is the third language');
   }

   /**
@@ @@

     // Upload it
     $this->clickLink('EN');
-    $this->assertText(t('Article uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('Article uploaded successfully'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/node_type/article?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
     // Request the German (AT) translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/de_AT?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('DE-AT');
-    $this->assertText("Translation to de_AT requested successfully");
+    $this->assertSession()->pageTextContains("Translation to de_AT requested successfully");

     // Check that the source status has been updated.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/check_upload/node_type/article?destination=' . $basepath . '/admin/lingotek/config/manage');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


138) modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeBulkDisabledTargetOverrideTranslationTest.php:74

    ---------- begin diff ----------
@@ @@
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/node_type/article/ca_ES?destination=' . $basepath . '/admin/lingotek/config/manage');

     $this->clickLink('EN');
-    $this->assertText('Article uploaded successfully');
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSession()->pageTextContains('Article uploaded successfully');
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
@@ @@
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/node_type/article/ca_ES?destination=' . $basepath . '/admin/lingotek/config/manage');

     $this->clickLink('EN');
-    $this->assertText('Article status checked successfully');
+    $this->assertSession()->pageTextContains('Article status checked successfully');

     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/node_type/article/ca_ES?destination=' . $basepath . '/admin/lingotek/config/manage');
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

-    $this->assertText('Operations completed.');
+    $this->assertSession()->pageTextContains('Operations completed.');

     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/node_type/article/ca_ES?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('ca', 'node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical(NULL, \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame(NULL, \Drupal::state()
       ->get('lingotek.added_target_locale'));
-    $this->assertIdentical(NULL, \Drupal::state()
+    $this->assertSame(NULL, \Drupal::state()
       ->get('lingotek.requested_locales'));

-    $this->assertText('Operations completed.');
+    $this->assertSession()->pageTextContains('Operations completed.');

     $this->assertTargetStatus('es', Lingotek::STATUS_REQUEST);
     $this->assertTargetStatus('ca', Lingotek::STATUS_DISABLED);
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => 'check_translation:ca',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical(NULL, \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame(NULL, \Drupal::state()
       ->get('lingotek.checked_target_locale'));

     $this->assertTargetStatus('es', Lingotek::STATUS_REQUEST);
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => 'download:ca',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical(NULL, \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame(NULL, \Drupal::state()
       ->get('lingotek.downloaded_locale'));

     $this->assertTargetStatus('es', Lingotek::STATUS_REQUEST);
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

-    $this->assertText('Operations completed.');
+    $this->assertSession()->pageTextContains('Operations completed.');

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/node_type/article?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

-    $this->assertText('Operations completed.');
+    $this->assertSession()->pageTextContains('Operations completed.');

     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/node_type/article/ca_ES?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical(['dummy-document-hash-id' => ['es_MX']], \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame(['dummy-document-hash-id' => ['es_MX']], \Drupal::state()
       ->get('lingotek.requested_locales'));

-    $this->assertText('Operations completed.');
+    $this->assertSession()->pageTextContains('Operations completed.');

     $this->assertTargetStatus('es', Lingotek::STATUS_PENDING);
     $this->assertTargetStatus('ca', Lingotek::STATUS_DISABLED);
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical(NULL, \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame(NULL, \Drupal::state()
       ->get('lingotek.checked_target_locale'));

     $this->assertTargetStatus('es', Lingotek::STATUS_READY);
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.downloaded_locale'));

     $this->assertTargetStatus('es', Lingotek::STATUS_CURRENT);
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


139) modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeBulkDebugTest.php:50

    ---------- begin diff ----------
@@ @@

     // Enable the debug operations.
     $this->drupalGet('admin/lingotek/settings');
-    $this->drupalPostForm(NULL, [], t('Enable debug operations'));
+    $this->submitForm([], t('Enable debug operations'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm();
@@ @@

     // Enable the debug operations.
     $this->drupalGet('admin/lingotek/settings');
-    $this->drupalPostForm(NULL, [], t('Enable debug operations'));
+    $this->submitForm([], t('Enable debug operations'));

     // Go to the bulk config management page.
     $this->goToConfigBulkManagementForm('node_type');
@@ @@
       'table[article]' => TRUE,
       $this->getBulkOperationFormName() => 'debug.export',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Exports available');
+    $this->assertSession()->pageTextContains('Exports available');
     // Download the file.
     $this->clickLink('config.node_type.json');

     $response = json_decode($this->getSession()->getPage()->getContent(), TRUE);
-    $this->assertIdentical('Article', $response['node.type.article']['name']);
-    $this->assertIdentical(NULL, $response['node.type.article']['description']);
-    $this->assertIdentical(NULL, $response['node.type.article']['help']);
-    $this->assertIdentical('node_type (config): Article content type', $response['_debug']['title']);
-    $this->assertIdentical('automatic', $response['_debug']['profile']);
-    $this->assertIdentical('en_US', $response['_debug']['source_locale']);
+    $this->assertSame('Article', $response['node.type.article']['name']);
+    $this->assertSame(NULL, $response['node.type.article']['description']);
+    $this->assertSame(NULL, $response['node.type.article']['help']);
+    $this->assertSame('node_type (config): Article content type', $response['_debug']['title']);
+    $this->assertSame('automatic', $response['_debug']['profile']);
+    $this->assertSame('en_US', $response['_debug']['source_locale']);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


140) modules/contrib/lingotek/tests/src/Functional/LingotekContentTypeBulkCancelTest.php:55

    ---------- begin diff ----------
@@ @@
       'table[article]' => 'article',
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancel('node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $config_translation_service */
     $config_translation_service = \Drupal::service('lingotek.config_translation');
@@ @@

     // Assert that the document has been cancelled remotely.
     $cancelled_docs = \Drupal::state()->get('lingotek.cancelled_docs', []);
-    $this->assertEqual(1, count($cancelled_docs), 'The document has been cancelled remotely.');
+    $this->assertEquals(1, count($cancelled_docs), 'The document has been cancelled remotely.');

     // Assert that no document has been deleted remotely.
     $deleted_docs = \Drupal::state()->get('lingotek.deleted_docs', []);
-    $this->assertEqual(0, count($deleted_docs), 'No document has been deleted remotely.');
+    $this->assertEquals(0, count($deleted_docs), 'No document has been deleted remotely.');

     \Drupal::entityTypeManager()->getStorage('node_type')->resetCache();
     $entity = \Drupal::entityTypeManager()->getStorage('node_type')->load('article');
@@ @@
     $this->assertSourceStatus('EN', Lingotek::STATUS_CANCELLED);
     $this->assertTargetStatus('ES', Lingotek::STATUS_CANCELLED);

-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $config_translation_service->getSourceStatus($entity));
-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $config_translation_service->getTargetStatus($entity, 'es'));

     // We can request again.
     $basepath = \Drupal::request()->getBasePath();
@@ @@
       'table[article]' => 'article',
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancelTarget('es', 'node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $config_translation_service */
     $config_translation_service = \Drupal::service('lingotek.config_translation');
@@ @@
     $this->assertSourceStatus('EN', Lingotek::STATUS_CURRENT);
     $this->assertTargetStatus('ES', Lingotek::STATUS_CANCELLED);

-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
-    $this->assertIdentical(Lingotek::STATUS_CANCELLED, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CANCELLED, $config_translation_service->getTargetStatus($entity, 'es'));

     // We cannot request again.
     $basepath = \Drupal::request()->getBasePath();
@@ @@
       'table[article]' => 'article',
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancelTarget('es', 'node_type'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $config_translation_service */
     $config_translation_service = \Drupal::service('lingotek.config_translation');
@@ @@
     $this->assertSourceStatus('EN', Lingotek::STATUS_CURRENT);
     $this->assertTargetStatus('ES', Lingotek::STATUS_CURRENT);

-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getSourceStatus($entity));

-    $this->assertText('Target es for Article was already completed in the TMS and cannot be cancelled unless the entire document is cancelled.');
-    $this->assertIdentical(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));
+    $this->assertSession()->pageTextContains('Target es for Article was already completed in the TMS and cannot be cancelled unless the entire document is cancelled.');
+    $this->assertSame(Lingotek::STATUS_CURRENT, $config_translation_service->getTargetStatus($entity, 'es'));
   }

   protected function createAndTranslateContentTypeWithLinks() {
@@ @@

     // Clicking English must init the upload of content.
     $this->clickLink('EN');
-    $this->assertText(t('Article uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('Article uploaded successfully'));

     // There is a link for checking status.
     $this->clickLink('EN');
-    $this->assertText('Article status checked successfully');
+    $this->assertSession()->pageTextContains('Article status checked successfully');

     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/es_ES?destination=' . $basepath . '/admin/lingotek/config/manage');

     // Request the Spanish translation.
     $this->clickLink('ES');
-    $this->assertText("Translation to es_ES requested successfully");
+    $this->assertSession()->pageTextContains("Translation to es_ES requested successfully");

     // Check status of the Spanish translation.
     $this->clickLink('ES');
-    $this->assertText("Translation to es_ES status checked successfully");
+    $this->assertSession()->pageTextContains("Translation to es_ES status checked successfully");

     // Download the Spanish translation.
     $this->clickLink('ES');
-    $this->assertText('Translation to es_ES downloaded successfully');
+    $this->assertSession()->pageTextContains('Translation to es_ES downloaded successfully');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


141) modules/contrib/lingotek/tests/src/Functional/LingotekContentTranslationPreSaveHookTest.php:92

    ---------- begin diff ----------
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['files[field_image_0]'] = \Drupal::service('file_system')->realpath($test_image->uri);
+    $this->drupalGet('node/add/press_release');

-    $this->drupalPostForm('node/add/press_release', $edit, t('Preview'));
+    $this->submitForm($edit, t('Preview'));

     unset($edit['files[field_image_0]']);
     $edit['field_image[0][alt]'] = 'Llamas are cool';
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(1, count($data['field_image'][0]));
+    $this->assertEquals(1, count($data['field_image'][0]));
     $this->assertTrue(isset($data['field_image'][0]['alt']));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $this->clickLink('Request translation');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // No translation is unpublished yet.
-    $this->assertNoText('Not published');
+    $this->assertSession()->pageTextNotContains('Not published');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // This translation has been downloaded as unpublished.
-    $this->assertText('Not published');
+    $this->assertSession()->pageTextContains('Not published');

     // The content is translated and unpublished.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
-    $this->assertRaw('node--unpublished');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
+    $this->assertSession()->responseContains('node--unpublished');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertNoTextRector
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


142) modules/contrib/lingotek/tests/src/Functional/LingotekContentTranslationDocumentUploadHookTest.php:86

    ---------- begin diff ----------
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['files[field_image_0]'] = \Drupal::service('file_system')->realpath($test_image->uri);
+    $this->drupalGet('node/add/animal');

-    $this->drupalPostForm('node/add/animal', $edit, t('Preview'));
+    $this->submitForm($edit, t('Preview'));

     unset($edit['files[field_image_0]']);
     $edit['field_image[0][alt]'] = 'Llamas are cool';
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 4);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(1, count($data['field_image'][0]));
+    $this->assertEquals(1, count($data['field_image'][0]));
     $this->assertTrue(isset($data['field_image'][0]['alt']));
     $this->assertTrue(isset($data['animal_date']));
-    $this->assertEqual('2016-05-01', $data['animal_date']);
+    $this->assertEquals('2016-05-01', $data['animal_date']);

     // Assert the locale used was correct.
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getBasePath() . '/animal/2016/llamas-are-cool', $uploaded_url, 'The altered url was used.');
+    $this->assertSame(\Drupal::request()->getBasePath() . '/animal/2016/llamas-are-cool', $uploaded_url, 'The altered url was used.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


143) modules/contrib/lingotek/tests/src/Functional/LingotekContentModerationTest.php:100

    ---------- begin diff ----------
@@ @@
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
     $this->saveAsRequestReviewNodeForm($edit, 'article');

-    $this->assertText('Article Llamas are cool has been created.');
-    $this->assertNoText('Llamas are cool sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
     $this->saveAsRequestReviewNodeForm($edit, 'article');

-    $this->assertText('Article Llamas are cool has been created.');
-    $this->assertNoText('Llamas are cool sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
     $this->saveAsNewDraftNodeForm($edit, 'article');

-    $this->assertText('Article Llamas are cool has been created.');
-    $this->assertText('Llamas are cool sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
     $this->saveAsNewDraftNodeForm($edit, 'article');

-    $this->assertText('Article Llamas are cool has been created.');
-    $this->assertNoText('Llamas are cool sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
     $this->saveAsNewDraftNodeForm($edit, 'article');

-    $this->assertText('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
     $this->editAsRequestReviewNodeForm('/node/1/edit', $edit);

-    $this->assertText('Article Llamas are cool has been updated.');
-    $this->assertNoText('Llamas are cool was updated and sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been updated.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool was updated and sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
     $this->saveAsNewDraftNodeForm($edit, 'article');

-    $this->assertText('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
     $this->editAsRequestReviewNodeForm('/node/1/edit', $edit);

-    $this->assertText('Article Llamas are cool has been updated.');
-    $this->assertNoText('Llamas are cool was updated and sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been updated.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool was updated and sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
     $this->saveAsNewDraftNodeForm($edit, 'article');

-    $this->assertText('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
     $edit['body[0][value]'] = 'Llamas are very cool!';
     $this->editAsNewDraftNodeForm('/node/1/edit', $edit);

-    $this->assertText('Article Llamas are cool has been updated.');
-    $this->assertText('Llamas are cool was updated and sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been updated.');
+    $this->assertSession()->pageTextContains('Llamas are cool was updated and sent to Lingotek successfully.');
   }

   /**
@@ @@
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
     $this->saveAsNewDraftNodeForm($edit, 'article');

-    $this->assertText('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
     $this->editAsNewDraftNodeForm('/node/1/edit', $edit);

-    $this->assertText('Article Llamas are cool has been updated.');
-    $this->assertNoText('Llamas are cool was updated and sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been updated.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool was updated and sent to Lingotek successfully.');
   }

   protected function configureNeedsReviewAsUploadState() {
@@ @@

     // Moderate.
     $edit = ['new_state' => 'needs_review'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
-    $this->assertText('The moderation state has been updated.');
-    $this->assertText('Llamas are cool sent to Lingotek successfully.');
+    $this->submitForm($edit, 'Apply');
+    $this->assertSession()->pageTextContains('The moderation state has been updated.');
+    $this->assertSession()->pageTextContains('Llamas are cool sent to Lingotek successfully.');
   }

   public function testModerationToNonUploadStateWithAutomaticProfileDoesntTriggerUpload() {
@@ @@

     // Moderate.
     $edit = ['new_state' => 'published'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
-    $this->assertText('The moderation state has been updated.');
-    $this->assertNoText('Llamas are cool sent to Lingotek successfully.');
+    $this->submitForm($edit, 'Apply');
+    $this->assertSession()->pageTextContains('The moderation state has been updated.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool sent to Lingotek successfully.');
   }

   public function testModerationToUploadStateWithManualProfileDoesntTriggerUpload() {
@@ @@

     // Moderate.
     $edit = ['new_state' => 'needs_review'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
-    $this->assertText('The moderation state has been updated.');
-    $this->assertNoText('Llamas are cool sent to Lingotek successfully.');
+    $this->submitForm($edit, 'Apply');
+    $this->assertSession()->pageTextContains('The moderation state has been updated.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool sent to Lingotek successfully.');
   }

   public function testModerationToNonUploadStateWithManualProfileDoesntTriggerUpload() {
@@ @@

     // Moderate.
     $edit = ['new_state' => 'published'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
-    $this->assertText('The moderation state has been updated.');
-    $this->assertNoText('Llamas are cool sent to Lingotek successfully.');
+    $this->submitForm($edit, 'Apply');
+    $this->assertSession()->pageTextContains('The moderation state has been updated.');
+    $this->assertSession()->pageTextNotContains('Llamas are cool sent to Lingotek successfully.');
   }

   public function testDownloadFromUploadStateTriggersATransition() {
@@ @@
     // The status is draft.
     $value = $this->xpath('//div[@id="edit-current"]/text()');
     $value = trim($value[1]->getText());
-    $this->assertEqual($value, 'Draft', 'Workbench current status is draft');
+    $this->assertEquals($value, 'Draft', 'Workbench current status is draft');

     // Moderate to Needs review, so it's uploaded.
     $edit = ['new_state' => 'needs_review'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
+    $this->submitForm($edit, 'Apply');

     // The status is needs review.
     $value = $this->xpath('//div[@id="edit-current"]/text()');
     $value = trim($value[1]->getText());
-    $this->assertEqual($value, 'Needs Review', 'Workbench current status is Needs Review');
+    $this->assertEquals($value, 'Needs Review', 'Workbench current status is Needs Review');

     $this->goToContentBulkManagementForm();
     // Request translation.
@@ @@

     // Let's see the current status is modified.
     $this->clickLink('Llamas are cool');
-    $this->assertNoFieldByName('new_state', 'The transition to a new content moderation status happened (so no moderation form is shown).');
+    $this->assertSession()->fieldValueNotEquals('new_state', 'The transition to a new content moderation status happened (so no moderation form is shown).');
   }

   public function testDownloadWhenContentModerationWasSetupAfterLingotek() {
@@ @@

     // Moderate to Needs review, so it's uploaded.
     $edit = ['new_state' => 'needs_review'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
+    $this->submitForm($edit, 'Apply');

     // The status is needs review.
     $value = $this->xpath('//div[@id="edit-current"]/text()');
@@ @@
     $this->clickLink('ES');
     // Download translation.
     $this->clickLink('ES');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');

     // Let's see the current status is modified.
     $this->clickLink('Llamas are cool');
@@ @@

     // Moderate to Needs review, so it's uploaded.
     $edit = ['new_state' => 'needs_review'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
+    $this->submitForm($edit, 'Apply');

     // Moderate back to draft, so the transition won't happen on download.
     $edit = ['new_state' => 'draft'];
-    $this->drupalPostForm(NULL, $edit, 'Apply');
+    $this->submitForm($edit, 'Apply');

     $this->goToContentBulkManagementForm();
     // Request translation.
@@ @@
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
     $this->saveAndPublishNodeForm($edit, 'article');
-    $this->assertText('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');

     $this->goToContentBulkManagementForm();

     // Upload.
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');

     // Request translation.
     $this->clickLink('ES');
-    $this->assertText('Locale \'es_MX\' was added as a translation target for node Llamas are cool.');
+    $this->assertSession()->pageTextContains('Locale \'es_MX\' was added as a translation target for node Llamas are cool.');
     // Check translation.
     $this->clickLink('ES');
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // Edit the original as a new draft.
     $edit = [];
@@ @@
     $edit['title[0][value]'] = 'Dogs are cool';
     $edit['body[0][value]'] = 'Dogs are very cool';
     $this->editAsNewDraftNodeForm('/node/1/edit', $edit);
-    $this->assertNoText('Dogs are cool was updated and sent to Lingotek successfully.');
-    $this->assertText('Article Dogs are cool has been updated.');
+    $this->assertSession()->pageTextNotContains('Dogs are cool was updated and sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Dogs are cool has been updated.');

     // The source published revision is the default one.
     $this->drupalGet('node/1');
-    $this->assertText('Llamas are cool');
+    $this->assertSession()->pageTextContains('Llamas are cool');

     $this->goToContentBulkManagementForm();

@@ @@
       'table[1]' => TRUE,
       'operation' => 'download:es',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Execute'));
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, t('Execute'));
+    $this->assertSession()->pageTextContains('Operations completed.');

     // The source published revision must be the same still.
     $this->drupalGet('node/1');
-    $this->assertText('Llamas are cool');
+    $this->assertSession()->pageTextContains('Llamas are cool');

     // But the latest revision should keep the unpublished revision content.
     $this->drupalGet('node/1/latest');
-    $this->assertText('Dogs are cool');
+    $this->assertSession()->pageTextContains('Dogs are cool');

     // The published revision for the translated content is the right one.
     $this->drupalGet('es/node/1');
-    $this->assertText('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');

     // There's only one revision for Spanish so we cannot check the latest.
   }
@@ @@
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
     $this->saveAndPublishNodeForm($edit, 'article');
-    $this->assertText('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');

     $this->goToContentBulkManagementForm();

     // Upload.
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');

     // Request translation.
     $this->clickLink('ES');
-    $this->assertText('Locale \'es_MX\' was added as a translation target for node Llamas are cool.');
+    $this->assertSession()->pageTextContains('Locale \'es_MX\' was added as a translation target for node Llamas are cool.');
     // Check translation.
     $this->clickLink('ES');
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // Request translation.
     $this->clickLink('IT');
-    $this->assertText('Locale \'it_IT\' was added as a translation target for node Llamas are cool.');
+    $this->assertSession()->pageTextContains('Locale \'it_IT\' was added as a translation target for node Llamas are cool.');
     // Check translation.
     $this->clickLink('IT');
-    $this->assertText('The it_IT translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The it_IT translation for node Llamas are cool is ready for download.');

     // Edit the original as a new draft.
     $edit = [];
@@ @@
     $edit['title[0][value]'] = 'Dogs are cool';
     $edit['body[0][value]'] = 'Dogs are very cool';
     $this->editAsNewDraftNodeForm('/node/1/edit', $edit);
-    $this->assertNoText('Dogs are cool was updated and sent to Lingotek successfully.');
-    $this->assertText('Article Dogs are cool has been updated.');
+    $this->assertSession()->pageTextNotContains('Dogs are cool was updated and sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Dogs are cool has been updated.');

     // The source published revision is the default one.
     $this->drupalGet('node/1');
-    $this->assertText('Llamas are cool');
+    $this->assertSession()->pageTextContains('Llamas are cool');

     $this->goToContentBulkManagementForm();

@@ @@
       'table[1]' => TRUE,
       'operation' => 'download',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Execute'));
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, t('Execute'));
+    $this->assertSession()->pageTextContains('Operations completed.');

     // The source published revision must be the same still.
     $this->drupalGet('node/1');
-    $this->assertText('Llamas are cool');
+    $this->assertSession()->pageTextContains('Llamas are cool');

     // But the latest revision should keep the unpublished revision content.
     $this->drupalGet('node/1/latest');
-    $this->assertText('Dogs are cool');
+    $this->assertSession()->pageTextContains('Dogs are cool');

     // The published revision for the Spanish translated content is the right one.
     $this->drupalGet('es/node/1');
-    $this->assertText('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');

     // There's only one revision for Spanish so we cannot check the latest.

     // The published revision for the Italian translated content is the right one.
     $this->drupalGet('it/node/1');
-    $this->assertText('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');

     // There's only one revision for Italian too so we cannot check the latest.
   }
@@ @@
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
     $this->saveAndPublishNodeForm($edit, 'article');
-    $this->assertText('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');

     // Edit the original as a new draft.
     $edit = [];
@@ @@
     $edit['title[0][value]'] = 'Dogs are cool';
     $edit['body[0][value]'] = 'Dogs are very cool';
     $this->editAsNewDraftNodeForm('/node/1/edit', $edit);
-    $this->assertNoText('Dogs are cool was updated and sent to Lingotek successfully.');
-    $this->assertText('Article Dogs are cool has been updated.');
+    $this->assertSession()->pageTextNotContains('Dogs are cool was updated and sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Dogs are cool has been updated.');

     $this->goToContentBulkManagementForm();

     // Upload.
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');

     // Request translation.
     $this->clickLink('ES');
-    $this->assertText('Locale \'es_MX\' was added as a translation target for node Llamas are cool.');
+    $this->assertSession()->pageTextContains('Locale \'es_MX\' was added as a translation target for node Llamas are cool.');
     // Check translation.
     $this->clickLink('ES');
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // The source published revision is the default one.
     $this->drupalGet('node/1');
-    $this->assertText('Llamas are cool');
+    $this->assertSession()->pageTextContains('Llamas are cool');

     $this->goToContentBulkManagementForm();

@@ @@
       'table[1]' => TRUE,
       'operation' => 'download:es',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Execute'));
-    $this->assertText('Operations completed.');
+    $this->submitForm($edit, t('Execute'));
+    $this->assertSession()->pageTextContains('Operations completed.');

     // The source published revision must be the same still.
     $this->drupalGet('node/1');
-    $this->assertText('Llamas are cool');
+    $this->assertSession()->pageTextContains('Llamas are cool');

     // But the latest revision should keep the unpublished revision content.
     $this->drupalGet('node/1/latest');
-    $this->assertText('Dogs are cool');
+    $this->assertSession()->pageTextContains('Dogs are cool');

     // The translated revision is not published, so the source published
     // revision is displayed.
     $this->drupalGet('es/node/1');
-    $this->assertText('Llamas are cool');
+    $this->assertSession()->pageTextContains('Llamas are cool');

     // And it's also the latest published revision.
     $this->drupalGet('es/node/1/latest');
-    $this->assertText('Los perros son chulos');
+    $this->assertSession()->pageTextContains('Los perros son chulos');
   }

   public function testBulkManagementUploadsLatestDraftRevision() {
@@ @@
     $edit['langcode[0][value]'] = 'en';
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'manual';
     $this->saveAndPublishNodeForm($edit, 'article');
-    $this->assertText('Article Llamas are cool has been created.');
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');

     // Edit the original as a new draft.
     $edit = [];
@@ @@
     $edit['title[0][value]'] = 'Dogs are cool';
     $edit['body[0][value]'] = 'Dogs are very cool';
     $this->editAsNewDraftNodeForm('/node/1/edit', $edit);
-    $this->assertNoText('Dogs are cool was updated and sent to Lingotek successfully.');
-    $this->assertText('Article Dogs are cool has been updated.');
+    $this->assertSession()->pageTextNotContains('Dogs are cool was updated and sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Article Dogs are cool has been updated.');

     $this->goToContentBulkManagementForm();

     // Upload.
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');

     // Check that only the last revision fields have been uploaded.
     $data = json_decode(\Drupal::state()
@@ @@
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
     $this->saveAndPublishNodeForm($edit, 'page');

-    $this->assertText('Page Llamas are cool has been created.');
-    $this->assertText('Llamas are cool sent to Lingotek successfully.');
+    $this->assertSession()->pageTextContains('Page Llamas are cool has been created.');
+    $this->assertSession()->pageTextContains('Llamas are cool sent to Lingotek successfully.');
   }

   /**
@@ @@
    */
   protected function enableModerationThroughUI($content_type_id) {
     $this->drupalGet('/admin/config/workflow/workflows/manage/editorial/type/node');
-    $this->assertFieldByName("bundles[$content_type_id]");
+    $this->assertSession()->fieldExists("bundles[$content_type_id]");
     $edit["bundles[$content_type_id]"] = TRUE;
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


144) modules/contrib/lingotek/tests/src/Functional/LingotekContentModerationSettingsTest.php:76

    ---------- begin diff ----------
@@ @@

     $this->drupalGet('admin/lingotek/settings');

-    $this->assertNoField('content_moderation_state[content_moderation_state][enabled]',
-      'The content moderation state entity should not be available for Lingotek translation.');
+    $this->assertSession()->fieldNotExists('content_moderation_state[content_moderation_state][enabled]', 'The content moderation state entity should not be available for Lingotek translation.');

     // See content_moderation_entity_bundle_info_alter().
     $this->enableModerationThroughUI('article', ['draft', 'needs_review', 'published'], 'draft');
@@ @@

     $this->drupalGet('admin/lingotek/settings');

-    $this->assertNoField('content_moderation_state[content_moderation_state][enabled]',
-      'The content moderation state entity should not be available for Lingotek translation.');
+    $this->assertSession()->fieldNotExists('content_moderation_state[content_moderation_state][enabled]', 'The content moderation state entity should not be available for Lingotek translation.');
   }

   /**
@@ @@

     // We don't have any fields for configuring content moderation until it's
     // enabled.
-    $this->assertNoField('node[article][moderation][upload_status]',
-      'The field for setting the state when a content should be uploaded does not exist as content moderation is not enabled for this bundle.');
-    $this->assertNoField('node[article][moderation][download_transition]',
-      'The field for setting the transition that must happen after download does not exist as content moderation is not enabled for this bundle.');
+    $this->assertSession()->fieldNotExists('node[article][moderation][upload_status]', 'The field for setting the state when a content should be uploaded does not exist as content moderation is not enabled for this bundle.');
+    $this->assertSession()->fieldNotExists('node[article][moderation][download_transition]', 'The field for setting the transition that must happen after download does not exist as content moderation is not enabled for this bundle.');

-    $this->assertNoField('node[page][moderation][upload_status]',
-      'The field for setting the state when a content should be uploaded does not exist as content moderation is not enabled for this bundle.');
-    $this->assertNoField('node[page][moderation][download_transition]',
-      'The field for setting the transition that must happen after download does not exist as content moderation is not enabled for this bundle.');
+    $this->assertSession()->fieldNotExists('node[page][moderation][upload_status]', 'The field for setting the state when a content should be uploaded does not exist as content moderation is not enabled for this bundle.');
+    $this->assertSession()->fieldNotExists('node[page][moderation][download_transition]', 'The field for setting the transition that must happen after download does not exist as content moderation is not enabled for this bundle.');

     // We show a message and link for enabling it.
-    $this->assertText('This entity bundle is not enabled for moderation with content_moderation. You can change its settings here.');
+    $this->assertSession()->pageTextContains('This entity bundle is not enabled for moderation with content_moderation. You can change its settings here.');

     $assert_session->linkByHrefExists('/admin/config/workflow/workflows', 0);
     $assert_session->linkByHrefExists('/admin/config/workflow/workflows', 1);
@@ @@

     // Assert the fields for setting up the integration exist and they have
     // sensible defaults.
-    $this->assertField('node[article][moderation][upload_status]',
-      'The field for setting the state when a content should be uploaded exists.');
-    $this->assertField('node[article][moderation][download_transition]',
-      'The field for setting the transition that must happen after download exists.');
+    $this->assertSession()->fieldExists('node[article][moderation][upload_status]', 'The field for setting the state when a content should be uploaded exists.');
+    $this->assertSession()->fieldExists('node[article][moderation][download_transition]', 'The field for setting the transition that must happen after download exists.');
     $assert_session->optionExists('edit-node-article-moderation-upload-status', 'published');
     $assert_session->optionExists('edit-node-article-moderation-download-transition', 'publish');

     // But not for the other content types. There is still a message for configuring.
-    $this->assertNoField('node[page][moderation][upload_status]',
-      'The field for setting the state when a content should be uploaded does not exist as content moderation is not enabled for this bundle.');
-    $this->assertNoField('node[page][moderation][download_transition]',
-      'The field for setting the transition that must happen after download does not exist as content moderation is not enabled for this bundle.');
-    $this->assertText('This entity bundle is not enabled for moderation with content_moderation. You can change its settings here.');
+    $this->assertSession()->fieldNotExists('node[page][moderation][upload_status]', 'The field for setting the state when a content should be uploaded does not exist as content moderation is not enabled for this bundle.');
+    $this->assertSession()->fieldNotExists('node[page][moderation][download_transition]', 'The field for setting the transition that must happen after download does not exist as content moderation is not enabled for this bundle.');
+    $this->assertSession()->pageTextContains('This entity bundle is not enabled for moderation with content_moderation. You can change its settings here.');

     $assert_session->linkByHrefExists('/admin/config/workflow/workflows', 0);

@@ @@
     $assert_session->optionExists('edit-node-article-moderation-download-transition', 'archive');

     // It never existed for taxonomies.
-    $this->assertNoField("taxonomy_term[{$this->vocabulary->id()}][moderation][upload_status]",
-      'The field for setting the state when a content should be uploaded does not exist as content moderation is not available for this entity type.');
-    $this->assertNoField("taxonomy_term[{$this->vocabulary->id()}][moderation][download_transition]",
-      'The field for setting the transition that must happen after download does not exist as content moderation is not available for this entity type.');
+    $this->assertSession()->fieldNotExists("taxonomy_term[{$this->vocabulary->id()}][moderation][upload_status]", 'The field for setting the state when a content should be uploaded does not exist as content moderation is not available for this entity type.');
+    $this->assertSession()->fieldNotExists("taxonomy_term[{$this->vocabulary->id()}][moderation][download_transition]", 'The field for setting the transition that must happen after download does not exist as content moderation is not available for this entity type.');
     $assert_session->linkByHrefNotExists("/admin/structure/taxonomy/manage/{$this->vocabulary->id()}/moderation", 'There is no link to moderation settings in taxonomies as they cannot be moderated.');

     $header = $this->xpath("//details[@id='edit-entity-node']//th[text()='Content moderation']");
-    $this->assertEqual(count($header), 1, 'There is a content moderation column for content.');
+    $this->assertEquals(count($header), 1, 'There is a content moderation column for content.');
     $header = $this->xpath("//details[@id='edit-entity-taxonomy-term']//th[text()='Content moderation']");
-    $this->assertEqual(count($header), 0, 'There is no content moderation column for taxonomies.');
+    $this->assertEquals(count($header), 0, 'There is no content moderation column for taxonomies.');

   }

@@ @@
    */
   protected function enableModerationThroughUI($content_type_id) {
     $this->drupalGet('/admin/config/workflow/workflows/manage/editorial/type/node');
-    $this->assertFieldByName("bundles[$content_type_id]");
+    $this->assertSession()->fieldExists("bundles[$content_type_id]");
     $edit["bundles[$content_type_id]"] = TRUE;
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertFieldRector
 * AssertNoFieldRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


145) modules/contrib/lingotek/tests/src/Functional/LingotekContentEntityGetProfileHookTest.php:139

    ---------- begin diff ----------
@@ @@
     $edit = [];
     $edit['subject[0][value]'] = 'Group 1 test';
     $edit['comment_body[0][value]'] = 'Group 1 test body';
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Check that the configured fields have been uploaded, but also the one
     // added via the hook.
@@ @@
     $edit = [];
     $edit['subject[0][value]'] = 'Group 2 test';
     $edit['comment_body[0][value]'] = 'Group 2 test body';
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Check that the configured fields have been uploaded, but also the one
     // added via the hook.
@@ @@
     $edit = [];
     $edit['subject[0][value]'] = 'First test';
     $edit['comment_body[0][value]'] = 'First test body';
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     $this->saveLingotekContentTranslationSettings([
       'node' => [
@@ @@
     $edit = [];
     $edit['subject[0][value]'] = 'Second test';
     $edit['comment_body[0][value]'] = 'Second test body';
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     $this->goToContentBulkManagementForm('comment');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


146) modules/contrib/lingotek/tests/src/Functional/LingotekContactMessageBodyTranslationTest.php:73

    ---------- begin diff ----------
@@ @@
     $this->clickLink(t('Translate'));

     $this->clickLink(t('Upload'));
-    $this->assertText(t('field_test uploaded successfully'));
+    $this->assertSession()->pageTextContains(t('field_test uploaded successfully'));

     // Check that only the translatable fields have been uploaded.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
@@ @@

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     $this->clickLink(t('Check upload status'));
-    $this->assertText('field_test status checked successfully');
+    $this->assertSession()->pageTextContains('field_test status checked successfully');

     $this->clickLink(t('Request translation'));
-    $this->assertText(t('Translation to es_MX requested successfully'));
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains(t('Translation to es_MX requested successfully'));
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     $this->clickLink(t('Check Download'));
-    $this->assertText(t('Translation to es_MX status checked successfully'));
+    $this->assertSession()->pageTextContains(t('Translation to es_MX status checked successfully'));

     $this->clickLink('Download');
-    $this->assertText(t('Translation to es_MX downloaded successfully'));
+    $this->assertSession()->pageTextContains(t('Translation to es_MX downloaded successfully'));

     // Check that the edit link is there.
     $basepath = \Drupal::request()->getBasePath();
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


147) modules/contrib/lingotek/tests/src/Functional/LingotekConfigTranslationPreSaveHookTest.php:53

    ---------- begin diff ----------
@@ @@
     // @see lingotek_test_lingotek_config_entity_document_upload()
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->verbose(var_export($data, TRUE));
-    $this->assertEqual($data['settings.label'], 'Title with [***SITE:NAME***]');
+    $this->assertEquals($data['settings.label'], 'Title with [***SITE:NAME***]');

     // Translate the block using the Lingotek translate config admin form.
     $this->drupalGet("admin/structure/block/manage/$block_id/translate");
@@ @@
     // Check that [token] is decoded via hook_lingotek_config_entity_translation_presave().
     // @see lingotek_test_lingotek_config_entity_translation_presave()
     $this->drupalGet("admin/structure/block/manage/$block_id/translate/es/edit");
-    $this->assertFieldByName("translation[config_names][block.block.$block_id][settings][label]", 'Título con [site:name]');
+    $this->assertSession()->fieldValueEquals("translation[config_names][block.block.$block_id][settings][label]", 'Título con [site:name]');

     $this->drupalGet('es/user');
-    $this->assertText('Título con [site:name]');
+    $this->assertSession()->pageTextContains('Título con [site:name]');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


148) modules/contrib/lingotek/tests/src/Functional/LingotekConfigTranslationEditedToPendingTest.php:64

    ---------- begin diff ----------
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/system.site_information_settings/system.site_information_settings?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertText('Translation to es_MX requested successfully');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX requested successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('Translation to es_MX checked successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX checked successfully');

     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/system.site_information_settings/system.site_information_settings/es_MX?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('Translation to es_MX downloaded successfully');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('Translation to es_MX downloaded successfully');

     // Edit the object
     $config2 = \Drupal::service('config.factory')->getEditable('system.site');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/system.site_information_settings/system.site_information_settings?destination=' . $basepath . '/admin/lingotek/config/manage');
@@ @@
       'table[system.site_information_settings]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('config'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // Check the status is pending for Spanish.
     $this->assertTargetStatus('ES', Lingotek::STATUS_PENDING);
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


149) modules/contrib/lingotek/tests/src/Functional/LingotekNodeNestedParagraphsEditedTranslationTest.php:98

    ---------- begin diff ----------
@@ @@
     // Add paragraphed content.
     $this->drupalGet('node/add/paragraphed_nested_content');

-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
-    $this->drupalPostForm(NULL, NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));
+    $this->submitForm(NULL, t('Add Image + Text'));

     $this->createNestedParagraphedNode('manual');

@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->verbose(var_export($data, TRUE));
     $this->assertUploadedDataFieldCount($data, 2);
-    $this->assertEqual($data['title'][0]['value'], 'Llamas are cool');
-    $this->assertEqual($data['field_paragraph_container'][0]['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool for the first time');
-    $this->assertEqual($data['field_paragraph_container'][0]['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are very cool for the second time');
+    $this->assertEquals($data['title'][0]['value'], 'Llamas are cool');
+    $this->assertEquals($data['field_paragraph_container'][0]['field_paragraphs_demo'][0]['field_text_demo'][0]['value'], 'Llamas are very cool for the first time');
+    $this->assertEquals($data['field_paragraph_container'][0]['field_paragraphs_demo'][1]['field_text_demo'][0]['value'], 'Llamas are very cool for the second time');

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('manual', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('manual', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     $this->saveAndKeepPublishedNodeForm($edit, 1, FALSE);

-    $this->assertText('Paragraphed nested content Llamas are cool has been updated.');
-    $this->assertText('Cats are very cool for the first time');
-    $this->assertText('Cats are very cool for the second time');
-    $this->assertText('Dogs are very cool for the first time');
-    $this->assertText('Dogs are very cool for the second time');
+    $this->assertSession()->pageTextContains('Paragraphed nested content Llamas are cool has been updated.');
+    $this->assertSession()->pageTextContains('Cats are very cool for the first time');
+    $this->assertSession()->pageTextContains('Cats are very cool for the second time');
+    $this->assertSession()->pageTextContains('Dogs are very cool for the first time');
+    $this->assertSession()->pageTextContains('Dogs are very cool for the second time');

     $this->goToContentBulkManagementForm();

@@ @@
     $edit = [];
     $edit['settings[node][paragraphed_nested_content][fields][field_paragraph_container]'] = 1;
     $edit['settings[paragraph][paragraph_container][fields][field_paragraphs_demo]'] = 1;
-    $this->drupalPostForm('/admin/config/regional/content-language', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/regional/content-language');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('Settings successfully updated.');
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


150) modules/contrib/lingotek/tests/src/Functional/LingotekNodeMultivaluedFieldTest.php:125

    ---------- begin diff ----------
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->verbose(var_export($data, TRUE));

-    $this->assertIdentical($data['foo'][0]['value'], 'Llamas are very cool field 1');
-    $this->assertIdentical($data['foo'][1]['value'], 'Llamas are very cool field 2');
-    $this->assertIdentical($data['foo'][2]['value'], 'Llamas are very cool field 3');
+    $this->assertSame($data['foo'][0]['value'], 'Llamas are very cool field 1');
+    $this->assertSame($data['foo'][1]['value'], 'Llamas are very cool field 2');
+    $this->assertSame($data['foo'][2]['value'], 'Llamas are very cool field 3');

     $this->goToContentBulkManagementForm();

     // There is a link for checking status.
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request the Spanish translation.
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // This is a hack for avoiding writing different lingotek endpoint mocks.
     \Drupal::state()->set('lingotek.uploaded_content_type', 'node+multivalue0');
@@ @@

     // Download the Spanish translation.
     $this->clickLink('ES');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');

     $this->clickLink('Llamas are cool');
     $this->clickLink('Translate');
     $this->clickLink('Las llamas son chulas');

-    $this->assertNoText('Las llamas son muy chulas campo 1');
-    $this->assertNoText('Las llamas son muy chulas campo 2');
-    $this->assertNoText('Las llamas son muy chulas campo 3');
+    $this->assertSession()->pageTextNotContains('Las llamas son muy chulas campo 1');
+    $this->assertSession()->pageTextNotContains('Las llamas son muy chulas campo 2');
+    $this->assertSession()->pageTextNotContains('Las llamas son muy chulas campo 3');

     // This is a hack for avoiding writing different lingotek endpoint mocks.
     \Drupal::state()->set('lingotek.uploaded_content_type', 'node+multivalue1');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     $this->clickLink('Llamas are cool');
     $this->clickLink('Translate');
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas campo 1');
-    $this->assertText('Las llamas son muy chulas campo 2');
-    $this->assertText('Las llamas son muy chulas campo 3');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas campo 1');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas campo 2');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas campo 3');

     // This is a hack for avoiding writing different lingotek endpoint mocks.
     \Drupal::state()->set('lingotek.uploaded_content_type', 'node+multivalue2');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     $this->clickLink('Llamas are cool');
     $this->clickLink('Translate');
     $this->clickLink('Las llamas son chulas');

-    $this->assertText('Las llamas son muy chulas campo 1');
-    $this->assertText('Las llamas son muy chulas con distinto campo 2');
-    $this->assertNoText('Las llamas son muy chulas campo 3');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas campo 1');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas con distinto campo 2');
+    $this->assertSession()->pageTextNotContains('Las llamas son muy chulas campo 3');

     // This is a hack for avoiding writing different lingotek endpoint mocks.
     \Drupal::state()->set('lingotek.uploaded_content_type', 'node+multivalue3');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     $this->clickLink('Llamas are cool');
     $this->clickLink('Translate');
     $this->clickLink('Las llamas son chulas');

-    $this->assertText('Las llamas son muy chulas campo 1');
-    $this->assertText('Las llamas son muy chulas con distinto campo 2');
-    $this->assertText('Las llamas son muy chulas con distinto campo 3');
-    $this->assertText('Las llamas son muy chulas con distinto campo 4');
-    $this->assertText('Las llamas son muy chulas con distinto campo 5');
-    $this->assertText('Las llamas son muy chulas con distinto campo 6');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas campo 1');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas con distinto campo 2');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas con distinto campo 3');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas con distinto campo 4');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas con distinto campo 5');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas con distinto campo 6');
   }

   /**
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->verbose(var_export($data, TRUE));

-    $this->assertIdentical($data['foo'][0]['value'], '"Llamas are very cool field 1"');
-    $this->assertIdentical($data['foo'][1]['value'], '"Llamas are very cool field 2"');
-    $this->assertIdentical($data['foo'][2]['value'], '"Llamas are very cool field 3"');
+    $this->assertSame($data['foo'][0]['value'], '"Llamas are very cool field 1"');
+    $this->assertSame($data['foo'][1]['value'], '"Llamas are very cool field 2"');
+    $this->assertSame($data['foo'][2]['value'], '"Llamas are very cool field 3"');

     $this->goToContentBulkManagementForm();

@@ @@
     // Request the Spanish translation.
     $this->clickLink('ES');
     $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node \"Llamas are cool\".");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
     $this->assertSession()->pageTextContains('The es_MX translation for node "Llamas are cool" is ready for download.');

     // Download the Spanish translation.
@@ @@
     $this->clickLink('Translate');
     $this->clickLink('"Las llamas son chulas"');

-    $this->assertNoText('"Las llamas son muy chulas campo 1"');
-    $this->assertNoText('"Las llamas son muy chulas campo 2"');
-    $this->assertNoText('"Las llamas son muy chulas campo 3"');
+    $this->assertSession()->pageTextNotContains('"Las llamas son muy chulas campo 1"');
+    $this->assertSession()->pageTextNotContains('"Las llamas son muy chulas campo 2"');
+    $this->assertSession()->pageTextNotContains('"Las llamas son muy chulas campo 3"');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


151) modules/contrib/lingotek/tests/src/Functional/LingotekNodeMissingProfileTranslationTest.php:80

    ---------- begin diff ----------
@@ @@
     $this->assertNoLingotekRequestTranslationLink('es_MX');

     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');

     // Check that only the configured fields have been uploaded.
     $data = json_decode(\Drupal::state()
@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 2);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
@@ @@
     $this->assertLingotekRequestTranslationLink('es_MX');

     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request the Spanish translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_MX');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // Download the Spanish translation.
     $this->assertLingotekDownloadTargetLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
@@ @@
     $this->saveAndPublishNodeForm($edit, NULL);

     // No errors on saving even if the profile was missing.
-    $this->assertText('Article Cats are cool has been updated.');
+    $this->assertSession()->pageTextContains('Article Cats are cool has been updated.');
     // Automatic profile wasn't being used automatically.
-    $this->assertNoText('Cats are cool was updated and sent to Lingotek successfully.');
+    $this->assertSession()->pageTextNotContains('Cats are cool was updated and sent to Lingotek successfully.');
   }

   /**
@@ @@
     $this->assertNoLingotekRequestTranslationLink('es_MX');

     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');

     // Check that only the configured fields have been uploaded.
     $data = json_decode(\Drupal::state()
@@ @@
       ->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 2);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
@@ @@
     $this->assertLingotekRequestTranslationLink('es_MX');

     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request the Spanish translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_MX');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // Download the Spanish translation.
     $this->assertLingotekDownloadTargetLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
@@ @@
     $this->saveAndPublishNodeForm($edit, NULL);

     // No errors on saving even if the profile was missing.
-    $this->assertText('Article Cats are cool has been updated.');
+    $this->assertSession()->pageTextContains('Article Cats are cool has been updated.');
     // Automatic profile wasn't being used automatically.
-    $this->assertNoText('Cats are cool was updated and sent to Lingotek successfully.');
+    $this->assertSession()->pageTextNotContains('Cats are cool was updated and sent to Lingotek successfully.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertNoTextRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


152) modules/contrib/lingotek/tests/src/Functional/LingotekNodeMetatagsTranslationTest.php:96

    ---------- begin diff ----------
@@ @@
     $this->verbose(var_export($data, TRUE));
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(1, count($data['field_metatag']));
-    $this->assertEqual('This text will help SEO find my llamas.', $data['field_metatag'][0]['description']);
+    $this->assertEquals(1, count($data['field_metatag']));
+    $this->assertEquals('This text will help SEO find my llamas.', $data['field_metatag'][0]['description']);

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
-    $this->assertRaw('<meta name="description" content="Este texto ayudará al SEO a encontrar mis llamas." />');
-    $this->assertRaw('<title>Las llamas son chulas | Drupal</title>');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
+    $this->assertSession()->responseContains('<meta name="description" content="Este texto ayudará al SEO a encontrar mis llamas." />');
+    $this->assertSession()->responseContains('<title>Las llamas son chulas | Drupal</title>');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertRawRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


153) modules/contrib/lingotek/tests/src/Functional/LingotekNodeManageTranslationTabTest.php:155

    ---------- begin diff ----------
@@ @@
     $this->drupalGet('node/1');
     $this->clickLink('Manage Translations');

-    $this->assertText('Llamas are cool');
-    $this->assertText('Camelid');
-    $this->assertText('Herbivorous');
+    $this->assertSession()->pageTextContains('Llamas are cool');
+    $this->assertSession()->pageTextContains('Camelid');
+    $this->assertSession()->pageTextContains('Herbivorous');
     // Assert second level is not included.
-    $this->assertNoText('Hominid');
+    $this->assertSession()->pageTextNotContains('Hominid');
     // Assert third level is not included.
-    $this->assertNoText('Ruminant');
+    $this->assertSession()->pageTextNotContains('Ruminant');

-    $this->drupalPostForm(NULL, ['depth' => 2], 'Apply');
+    $this->submitForm(['depth' => 2], 'Apply');

-    $this->assertText('Llamas are cool');
-    $this->assertText('Camelid');
-    $this->assertText('Herbivorous');
+    $this->assertSession()->pageTextContains('Llamas are cool');
+    $this->assertSession()->pageTextContains('Camelid');
+    $this->assertSession()->pageTextContains('Herbivorous');
     // Assert second level is included.
-    $this->assertText('Hominid');
+    $this->assertSession()->pageTextContains('Hominid');
     // Assert third level is not included.
-    $this->assertNoText('Ruminant');
+    $this->assertSession()->pageTextNotContains('Ruminant');

-    $this->drupalPostForm(NULL, ['depth' => 3], 'Apply');
+    $this->submitForm(['depth' => 3], 'Apply');

-    $this->assertText('Llamas are cool');
-    $this->assertText('Camelid');
-    $this->assertText('Herbivorous');
+    $this->assertSession()->pageTextContains('Llamas are cool');
+    $this->assertSession()->pageTextContains('Camelid');
+    $this->assertSession()->pageTextContains('Herbivorous');
     // Assert second level is included.
-    $this->assertText('Hominid');
+    $this->assertSession()->pageTextContains('Hominid');
     // Assert third level is also included.
-    $this->assertText('Ruminant');
+    $this->assertSession()->pageTextContains('Ruminant');

     // Clicking English must init the upload of content.
     $this->assertLingotekUploadLink();
@@ @@
     // And we cannot request yet a translation.
     $this->assertNoLingotekRequestTranslationLink('es_MX');
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
     $this->assertLingotekCheckSourceStatusLink();
@@ @@
     // And we can already request a translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request the Spanish translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_MX');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // Download the Spanish translation.
     $this->assertLingotekDownloadTargetLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'ES');
@@ @@
     $edit = [];
     $edit['title[0][value]'] = 'Pages are cool';
     $edit['body[0][value]'] = 'Pages are very cool';
-    $this->drupalPostForm('node/add/page', $edit, t('Save'));
+    $this->drupalGet('node/add/page');
+    $this->submitForm($edit, t('Save'));

     // Check that the manage translations tab is in the node.
     $this->drupalGet('node/1');
@@ @@
       'table[node:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertIdentical(NULL, \Drupal::state()
+    $this->assertSame(NULL, \Drupal::state()
       ->get('lingotek.uploaded_locale'));
     $assert_session->pageTextContains('Cannot upload Page Pages are cool. That Content type is not enabled for translation.');
   }
@@ @@
     $edit['title[0][value]'] = 'Pages are cool';
     $edit['body[0][value]'] = 'Pages are very cool';
     $edit['langcode[0][value]'] = 'en';
-    $this->drupalPostForm('node/add/page', $edit, t('Save'));
+    $this->drupalGet('node/add/page');
+    $this->submitForm($edit, t('Save'));

     // Check that the manage translations tab is in the node.
     $this->drupalGet('node/1');
@@ @@
       'table[node:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertIdentical(NULL, \Drupal::state()
+    $this->assertSame(NULL, \Drupal::state()
       ->get('lingotek.uploaded_locale'));
     $assert_session->pageTextContains('Cannot upload Page Pages are cool. That Content type is not enabled for Lingotek translation.');
   }
@@ @@
     $this->drupalGet('node/1');
     $this->clickLink('Manage Translations');

-    $this->assertText('Llamas are cool');
-    $this->assertText('Camelid');
-    $this->assertText('Herbivorous');
+    $this->assertSession()->pageTextContains('Llamas are cool');
+    $this->assertSession()->pageTextContains('Camelid');
+    $this->assertSession()->pageTextContains('Herbivorous');
     // Assert second level is not included.
-    $this->assertNoText('Hominid');
+    $this->assertSession()->pageTextNotContains('Hominid');
     // Assert third level is not included.
-    $this->assertNoText('Ruminant');
+    $this->assertSession()->pageTextNotContains('Ruminant');

     // I can init the upload of content.
     $this->assertLingotekUploadLink();
@@ @@
       'table[node:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
     $this->assertLingotekCheckSourceStatusLink();
@@ @@
       'table[node:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request the German (AT) translation.
     $this->assertLingotekRequestTranslationLink('de_AT');
@@ @@
       'table[node:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('de', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the German (AT) translation.
     $this->assertLingotekCheckTargetStatusLink('de_AT');
@@ @@
       'table[node:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslation('de', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.checked_target_locale'));

     // Download the German (AT) translation.
     $this->assertLingotekDownloadTargetLink('de_AT');
@@ @@
       'table[node:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslation('de', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('de_AT', 'dummy-document-hash-id', 'DE');
@@ @@
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];

-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
-    $this->assertIdentical('my_custom_job_id', \Drupal::state()->get('lingotek.uploaded_job_id'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSame('my_custom_job_id', \Drupal::state()->get('lingotek.uploaded_job_id'));

     // The column for Job ID exists and there are values.
-    $this->assertText('Job ID');
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('Job ID');
+    $this->assertSession()->pageTextContains('my_custom_job_id');
   }

   /**
@@ @@
       'table[taxonomy_term:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no upload.
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_title'));
@@ @@
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is displayed.
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');

     // And the job id is used on upload.
     $this->clickLink('EN');

-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
     // Check that the job id used was the right one.
     \Drupal::state()->resetCache();
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');

     // If we update the job ID without notification to the TMS, no update happens.
     $edit = [
@@ @@
       'table[taxonomy_term:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'other_job_id',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no upload.
     \Drupal::state()->resetCache();
@@ @@
       'table[taxonomy_term:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is no update, because there are no document ids.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is displayed.
-    $this->assertText('my_custom_job_id');
+    $this->assertSession()->pageTextContains('my_custom_job_id');

     // And the job id is used on upload.
     $this->clickLink('EN');

-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
     // Check that the job id used was the right one.
     \Drupal::state()->resetCache();
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'my_custom_job_id');

     // If we update the job ID with notification to the TMS, an update happens.
     $edit = [
@@ @@
       'table[taxonomy_term:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'other_job_id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // There is an update.
     \Drupal::state()->resetCache();
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_title'));
-    $this->assertIdentical(\Drupal::state()->get('lingotek.uploaded_job_id'), 'other_job_id');
+    $this->assertSame(\Drupal::state()->get('lingotek.uploaded_job_id'), 'other_job_id');
   }

   /**
@@ @@
       'table[taxonomy_term:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $edit = [
       'job_id' => 'my\invalid\id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('The job ID name cannot contain invalid chars as "/" or "\".');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('The job ID name cannot contain invalid chars as "/" or "\".');

     // There is no update, because it's not valid.
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));
@@ @@
       'job_id' => 'my/invalid/id',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('The job ID name cannot contain invalid chars as "/" or "\".');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('The job ID name cannot contain invalid chars as "/" or "\".');

     // There is no update, because it's not valid.
     $this->assertNull(\Drupal::state()->get('lingotek.uploaded_job_id'));
@@ @@
       'table[taxonomy_term:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Camelid');
-    $this->assertNoText('Llamas are cool');
-    $this->drupalPostForm(NULL, [], 'Cancel');
+    $this->assertSession()->pageTextContains('Camelid');
+    $this->assertSession()->pageTextNotContains('Llamas are cool');
+    $this->submitForm([], 'Cancel');

     $edit = [
       'table[node:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertNoText('Camelid');
-    $this->assertText('Llamas are cool');
+    $this->assertSession()->pageTextNotContains('Camelid');
+    $this->assertSession()->pageTextContains('Llamas are cool');
   }

   /**
@@ @@
       'table[taxonomy_term:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Camelid');
-    $this->assertNoText('Llamas are cool');
+    $this->assertSession()->pageTextContains('Camelid');
+    $this->assertSession()->pageTextNotContains('Llamas are cool');

     $this->goToContentBulkManagementForm();

@@ @@
       'table[node:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertNoText('Camelid');
-    $this->assertText('Llamas are cool');
+    $this->assertSession()->pageTextNotContains('Camelid');
+    $this->assertSession()->pageTextContains('Llamas are cool');
   }

   /**
@@ @@
       'table[node:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_1',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     $edit = [
       'table[taxonomy_term:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_2',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // The job id is displayed.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextContains('my_custom_job_id_2');

     $edit = [
       'table[node:1]' => TRUE,
@@ @@
       'table[taxonomy_term:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForClearJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->drupalPostForm(NULL, [], 'Clear Job ID');
-    $this->assertText('Job ID was cleared successfully.');
+    $this->submitForm([], 'Clear Job ID');
+    $this->assertSession()->pageTextContains('Job ID was cleared successfully.');

     // There is no upload.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertEquals('my_custom_job_id_1', \Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is gone.
-    $this->assertNoText('my_custom_job_id_1');
-    $this->assertNoText('my_custom_job_id_2');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_2');
   }

   /**
@@ @@
       'table[node:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_1',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     $edit = [
       'table[taxonomy_term:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForAssignJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $edit = [
       'job_id' => 'my_custom_job_id_2',
       'update_tms' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Assign Job ID');
-    $this->assertText('Job ID was assigned successfully.');
+    $this->submitForm($edit, 'Assign Job ID');
+    $this->assertSession()->pageTextContains('Job ID was assigned successfully.');

     // The job id is displayed.
-    $this->assertText('my_custom_job_id_1');
-    $this->assertText('my_custom_job_id_2');
+    $this->assertSession()->pageTextContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextContains('my_custom_job_id_2');

     $edit = [
       'table[node:1]' => TRUE,
@@ @@
       'table[taxonomy_term:1]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForClearJobId('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->drupalPostForm(NULL, ['update_tms' => 1], 'Clear Job ID');
-    $this->assertText('Job ID was cleared successfully.');
+    $this->submitForm(['update_tms' => 1], 'Clear Job ID');
+    $this->assertSession()->pageTextContains('Job ID was cleared successfully.');

     // There is an update with empty job id.
     \Drupal::state()->resetCache();
@@ @@
     $this->assertEquals('', \Drupal::state()->get('lingotek.uploaded_job_id'));

     // The job id is gone.
-    $this->assertNoText('my_custom_job_id_1');
-    $this->assertNoText('my_custom_job_id_2');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_1');
+    $this->assertSession()->pageTextNotContains('my_custom_job_id_2');
   }

   public function testCorrectTargetsInNonSourceLanguage() {
@@ @@
     // Assert third level is not included.
     $assert_session->elementNotContains('css', 'table#edit-table', 'Ruminant');

-    $this->drupalPostForm(NULL, ['depth' => 2], 'Apply');
+    $this->submitForm(['depth' => 2], 'Apply');

     $assert_session->elementContains('css', 'table#edit-table', 'Llamas are cool');
     // Assert first level is included.
@@ @@
     // Assert third level is not included.
     $assert_session->elementNotContains('css', 'table#edit-table', 'Ruminant');

-    $this->drupalPostForm(NULL, ['depth' => 3], 'Apply');
+    $this->submitForm(['depth' => 3], 'Apply');

     $assert_session->elementContains('css', 'table#edit-table', 'Llamas are cool');
     // Assert first level is included.
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


154) modules/contrib/lingotek/tests/src/Functional/LingotekNodeLocaleTranslationTest.php:88

    ---------- begin diff ----------
@@ @@
     $edit['body[0][value]'] = 'Llamas are very cool';
     $edit['langcode[0][value]'] = 'en';
     $edit['files[field_image_0]'] = \Drupal::service('file_system')->realpath($test_image->uri);
+    $this->drupalGet('node/add/article');

-    $this->drupalPostForm('node/add/article', $edit, t('Preview'));
+    $this->submitForm($edit, t('Preview'));

     unset($edit['files[field_image_0]']);
     $edit['field_image[0][alt]'] = 'Llamas are cool';
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(1, count($data['field_image'][0]));
+    $this->assertEquals(1, count($data['field_image'][0]));
     $this->assertTrue(isset($data['field_image'][0]['alt']));

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


155) modules/contrib/lingotek/tests/src/Functional/LingotekNodeLayoutBuilderSymmetricTranslationTest.php:132

    ---------- begin diff ----------
@@ @@

     $edit['langcode[0][value]'] = 'en';

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Add a block with a custom label.
     $page->clickLink('Layout');
@@ @@

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()
+    $this->assertSame(\Drupal::request()
       ->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('manual', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('manual', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@

     $edit['langcode[0][value]'] = 'en';

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Add a block with a custom label.
     $page->clickLink('Layout');
@@ @@

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()
+    $this->assertSame(\Drupal::request()
       ->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('manual', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('manual', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // From the manage display page, go to manage the layout.
     foreach ($nodeTypes as $nodeType) {
       $this->drupalGet("admin/structure/types/manage/$nodeType/display/default");
-      $this->drupalPostForm(NULL, ['layout[enabled]' => TRUE], 'Save');
-      $this->drupalPostForm(NULL, ['layout[allow_custom]' => TRUE], 'Save');
+      $this->submitForm(['layout[enabled]' => TRUE], 'Save');
+      $this->submitForm(['layout[allow_custom]' => TRUE], 'Save');
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


156) modules/contrib/lingotek/tests/src/Functional/LingotekNodeLayoutBuilderAsymmetricTranslationTest.php:85

    ---------- begin diff ----------
@@ @@
       ->setEnabled('block_content', 'custom_content_block', TRUE);

     $edit['settings[node][article][fields][layout_builder__layout]'] = 1;
-    $this->drupalPostForm('/admin/config/regional/content-language', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/regional/content-language');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('Settings successfully updated.');

     drupal_static_reset();
@@ @@

     $edit['langcode[0][value]'] = 'en';

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Add a block with a custom label.
     $page->clickLink('Layout');
@@ @@

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()
+    $this->assertSame(\Drupal::request()
       ->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('manual', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('manual', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@

     $edit['langcode[0][value]'] = 'en';

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Add a block with a custom label.
     $page->clickLink('Layout');
@@ @@

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()
+    $this->assertSame(\Drupal::request()
       ->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('manual', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('manual', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // From the manage display page, go to manage the layout.
     foreach ($nodeTypes as $nodeType) {
       $this->drupalGet("admin/structure/types/manage/$nodeType/display/default");
-      $this->drupalPostForm(NULL, ['layout[enabled]' => TRUE], 'Save');
-      $this->drupalPostForm(NULL, ['layout[allow_custom]' => TRUE], 'Save');
+      $this->submitForm(['layout[enabled]' => TRUE], 'Save');
+      $this->submitForm(['layout[allow_custom]' => TRUE], 'Save');
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


157) modules/contrib/lingotek/tests/src/Functional/LingotekNodeExistingBulkTranslationTest.php:82

    ---------- begin diff ----------
@@ @@
     // And we cannot request yet a translation.
     $this->assertNoLingotekRequestTranslationLink('es_MX');
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // Assert the untracked translation is shown.
     $this->assertTargetStatus('ES', 'untracked');
@@ @@
     // And we can already request a translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request the Spanish translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_MX');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // Download the Spanish translation.
     $this->assertLingotekDownloadTargetLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'ES');
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


158) modules/contrib/lingotek/tests/src/Functional/LingotekNodeEmbeddingTagsTranslationTest.php:134

    ---------- begin diff ----------
@@ @@
     $edit['langcode[0][value]'] = 'en';
     $edit['field_tags[target_id]'] = implode(',', ['Camelid', 'Herbivorous']);
     $edit['files[field_image_0]'] = \Drupal::service('file_system')->realpath($test_image->uri);
+    $this->drupalGet('node/add/article');

-    $this->drupalPostForm('node/add/article', $edit, t('Preview'));
+    $this->submitForm($edit, t('Preview'));

     unset($edit['files[field_image_0]']);
     $edit['field_image[0][alt]'] = 'Llamas are cool';
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 4);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(1, count($data['field_image'][0]));
+    $this->assertEquals(1, count($data['field_image'][0]));
     $this->assertTrue(isset($data['field_image'][0]['alt']));
-    $this->assertEqual(2, count($data['field_tags']));
-    $this->assertEqual('Camelid', $data['field_tags'][0]['name'][0]['value']);
-    $this->assertEqual('Herbivorous', $data['field_tags'][1]['name'][0]['value']);
+    $this->assertEquals(2, count($data['field_tags']));
+    $this->assertEquals('Camelid', $data['field_tags'][0]['name'][0]['value']);
+    $this->assertEquals('Herbivorous', $data['field_tags'][1]['name'][0]['value']);

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
-    $this->assertText('Camélido');
-    $this->assertText('Hervíboro');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Camélido');
+    $this->assertSession()->pageTextContains('Hervíboro');
   }

   /**
@@ @@
     $this->node = Node::load(1);

     $term = Term::load(1);
-    $this->assertEqual('Camelid', $term->label());
+    $this->assertEquals('Camelid', $term->label());
     $term->delete();

     // Check that the translate tab is in the node.
@@ @@
     // the upload status.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // Check that only the configured fields have been uploaded, including tags.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 4);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
     // Only one tag does really exist.
-    $this->assertEqual(1, count($data['field_tags']));
-    $this->assertEqual('Herbivorous', $data['field_tags'][1]['name'][0]['value']);
+    $this->assertEquals(1, count($data['field_tags']));
+    $this->assertEquals('Herbivorous', $data['field_tags'][1]['name'][0]['value']);

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('manual', $used_profile, 'The manual profile was used.');
+    $this->assertSame('manual', $used_profile, 'The manual profile was used.');

     // The document should have been imported, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
-    $this->assertText('Hervíboro');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Hervíboro');

     $this->drupalGet('/taxonomy/term/2/translations');
     $this->drupalGet('/es-ar/taxonomy/term/2');
@@ @@
     // the upload status.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // Check that only the configured fields have been uploaded, including tags.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 4);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
     // Only one tag does really exist.
-    $this->assertEqual(2, count($data['field_tags']));
-    $this->assertEqual('Camelid', $data['field_tags'][0]['name'][0]['value']);
-    $this->assertEqual('Herbivorous', $data['field_tags'][1]['name'][0]['value']);
+    $this->assertEquals(2, count($data['field_tags']));
+    $this->assertEquals('Camelid', $data['field_tags'][0]['name'][0]['value']);
+    $this->assertEquals('Herbivorous', $data['field_tags'][1]['name'][0]['value']);

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('manual', $used_profile, 'The manual profile was used.');
+    $this->assertSame('manual', $used_profile, 'The manual profile was used.');

     // Now we create a new revision, and this is removing a field tag reference.
     $this->node = Node::load(1);
@@ @@

     // Check that we removed it correctly.
     $this->drupalGet('node/1');
-    $this->assertNoText('Camelid');
-    $this->assertText('Herbivorous');
+    $this->assertSession()->pageTextNotContains('Camelid');
+    $this->assertSession()->pageTextContains('Herbivorous');

     // We go back to the translations.
     $this->clickLink('Translate');
@@ @@
     // The document should have been imported, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');

     // The tags are BOTH there. Because we have translated an older revision.
-    $this->assertText('Camélido');
-    $this->assertText('Hervíboro');
+    $this->assertSession()->pageTextContains('Camélido');
+    $this->assertSession()->pageTextContains('Hervíboro');
   }

   /**
@@ @@

     // Check that we removed the tags correctly.
     $this->drupalGet('node/1');
-    $this->assertNoText('Camelid');
-    $this->assertNoText('Herbivorous');
+    $this->assertSession()->pageTextNotContains('Camelid');
+    $this->assertSession()->pageTextNotContains('Herbivorous');

     // We go back to the translations.
     $this->clickLink('Translate');
@@ @@
     // And we reupload it.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // Check that only the configured fields have been uploaded, including tags
     // and image even if not set.
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 4);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
     $this->assertTrue(isset($data['field_image']));
     $this->assertTrue(isset($data['field_tags']));
@@ @@

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');

     // The tags have been removed from the content when re-downloading.
-    $this->assertNoText('Camélido');
-    $this->assertNoText('Hervíboro');
+    $this->assertSession()->pageTextNotContains('Camélido');
+    $this->assertSession()->pageTextNotContains('Hervíboro');
   }

   /**
@@ @@
     $edit = [
       'node[article][fields][field_other_tags]' => 1,
     ];
-    $this->drupalPostForm('admin/lingotek/settings', $edit, 'Save', [], 'lingoteksettings-tab-content-form');
+    $this->drupalGet('admin/lingotek/settings', []);
+    $this->submitForm($edit, 'Save', 'lingoteksettings-tab-content-form');

     // Create the terms.
     Term::create(['name' => 'Camelid', 'vid' => $this->vocabulary->id()])->save();
@@ @@
     // the upload status.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // Check that only the configured fields have been uploaded, including tags.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 5);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
     // Two tags exist.
-    $this->assertEqual(2, count($data['field_tags']));
-    $this->assertEqual('Camelid', $data['field_tags'][0]['name'][0]['value']);
-    $this->assertEqual('1', $data['field_tags'][0]['_lingotek_metadata']['_entity_id']);
-    $this->assertEqual('Herbivorous', $data['field_tags'][1]['name'][0]['value']);
-    $this->assertEqual('2', $data['field_tags'][1]['_lingotek_metadata']['_entity_id']);
+    $this->assertEquals(2, count($data['field_tags']));
+    $this->assertEquals('Camelid', $data['field_tags'][0]['name'][0]['value']);
+    $this->assertEquals('1', $data['field_tags'][0]['_lingotek_metadata']['_entity_id']);
+    $this->assertEquals('Herbivorous', $data['field_tags'][1]['name'][0]['value']);
+    $this->assertEquals('2', $data['field_tags'][1]['_lingotek_metadata']['_entity_id']);

     // Also in the other field, but in some cases only the metadata.
-    $this->assertEqual(3, count($data['field_other_tags']));
+    $this->assertEquals(3, count($data['field_other_tags']));

     $this->assertFalse(isset($data['field_other_tags'][0]['name']));
-    $this->assertEqual('1', $data['field_other_tags'][0]['_lingotek_metadata']['_entity_id']);
+    $this->assertEquals('1', $data['field_other_tags'][0]['_lingotek_metadata']['_entity_id']);

-    $this->assertEqual('Spitting', $data['field_other_tags'][1]['name'][0]['value']);
-    $this->assertEqual('3', $data['field_other_tags'][1]['_lingotek_metadata']['_entity_id']);
+    $this->assertEquals('Spitting', $data['field_other_tags'][1]['name'][0]['value']);
+    $this->assertEquals('3', $data['field_other_tags'][1]['_lingotek_metadata']['_entity_id']);

     $this->assertFalse(isset($data['field_other_tags'][2]['name']));
-    $this->assertEqual('2', $data['field_other_tags'][2]['_lingotek_metadata']['_entity_id']);
+    $this->assertEquals('2', $data['field_other_tags'][2]['_lingotek_metadata']['_entity_id']);

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('manual', $used_profile, 'The manual profile was used.');
+    $this->assertSame('manual', $used_profile, 'The manual profile was used.');

     // The document should have been imported, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
     $this->assertSession()->pageTextContains('Camélido');
     $this->assertSession()->pageTextContains('Hervíboro');
     $this->assertSession()->pageTextContains('Esputo');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertNoTextRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


159) modules/contrib/lingotek/tests/src/Functional/LingotekNodeEmbeddingContactFormTranslationTest.php:124

    ---------- begin diff ----------
@@ @@
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(1, count($data['field_contact_form']));
-    $this->assertEqual('Test contact form', $data['field_contact_form'][0]['label']);
-    $this->assertEqual('', $data['field_contact_form'][0]['reply']);
+    $this->assertEquals(1, count($data['field_contact_form']));
+    $this->assertEquals('Test contact form', $data['field_contact_form'][0]['label']);
+    $this->assertEquals('', $data['field_contact_form'][0]['reply']);

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
-    $this->assertText('Formulario de Contacto');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Formulario de Contacto');
   }

   /**
@@ @@
     // the upload status.
     $this->clickLink('Upload');
     $this->checkForMetaRefresh();
-    $this->assertText('Uploaded 1 document to Lingotek.');
+    $this->assertSession()->pageTextContains('Uploaded 1 document to Lingotek.');

     // Check that only the configured fields have been uploaded, including tags.
     $data = json_decode(\Drupal::state()->get('lingotek.uploaded_content', '[]'), TRUE);
     $this->assertUploadedDataFieldCount($data, 2);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
     // The contact form is not there.
     $this->assertFalse(isset($data['field_contact_form']));
@@ @@

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('manual', $used_profile, 'The manual profile was used.');
+    $this->assertSame('manual', $used_profile, 'The manual profile was used.');

     // The document should have been automatically imported, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
-    $this->assertNoText('Formulario de Contacto');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
+    $this->assertSession()->pageTextNotContains('Formulario de Contacto');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertNoTextRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


160) modules/contrib/lingotek/tests/src/Functional/LingotekNodeEmbeddingBricksTranslationTest.php:85

    ---------- begin diff ----------
@@ @@
     $edit = [
       'settings[node][article][fields][field_brick]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');

     $bundle = $this->vocabulary->id();
     $this->saveLingotekContentTranslationSettings([
@@ @@
     $this->verbose(var_export($data, TRUE));
     $this->assertUploadedDataFieldCount($data, 3);
     $this->assertTrue(isset($data['title'][0]['value']));
-    $this->assertEqual(1, count($data['body'][0]));
+    $this->assertEquals(1, count($data['body'][0]));
     $this->assertTrue(isset($data['body'][0]['value']));
-    $this->assertEqual(1, count($data['field_brick']));
-    $this->assertEqual('Camelid', $data['field_brick'][0]['name'][0]['value']);
+    $this->assertEquals(1, count($data['field_brick']));
+    $this->assertEquals('Camelid', $data['field_brick'][0]['name'][0]['value']);

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');
+    $this->assertSame(\Drupal::request()->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
-    $this->assertText('Camélido');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Camélido');
   }

   protected function addBrickField() {
@@ @@
       'label' => 'Brick field',
       'field_name' => 'brick',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save and continue');
+    $this->submitForm($edit, 'Save and continue');
     $edit = [
       'cardinality' => -1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save field settings');
+    $this->submitForm($edit, 'Save field settings');

     $edit = [
       'settings[handler_settings][auto_create]' => TRUE,
       'settings[handler_settings][target_bundles][' . $this->vocabulary->id() . ']' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');

   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


161) modules/contrib/lingotek/tests/src/Functional/LingotekNodeContentModerationTranslationTest.php:80

    ---------- begin diff ----------
@@ @@
     // And we cannot request yet a translation.
     $this->assertNoLingotekRequestTranslationLink('es_MX');
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     $this->clickLink('Llamas are cool');

@@ @@
       ->pager(50)
       ->count()
       ->execute();
-    $this->assertEqual(1, $result, 'Only one revision is stored.');
+    $this->assertEquals(1, $result, 'Only one revision is stored.');

     $this->goToContentBulkManagementForm();

@@ @@
     // And we can already request a translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request the Spanish translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_MX');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // Download the Spanish translation.
     $this->assertLingotekDownloadTargetLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'ES');
@@ @@
     $assert_session->linkExists('Revisions');
     $this->clickLink('Revisions');
     $this->drupalGet('es/node/1/revisions');
-    $this->assertText('Document translated into ES by Lingotek.');
+    $this->assertSession()->pageTextContains('Document translated into ES by Lingotek.');

     // Only one revision stored.
     /** @var \Drupal\node\NodeStorageInterface $node_storage */
@@ @@
       ->pager(50)
       ->count()
       ->execute();
-    $this->assertEqual(2, $result, 'A new revision is stored.');
+    $this->assertEquals(2, $result, 'A new revision is stored.');
   }

   /**
@@ @@
     // And we cannot request yet a translation.
     $this->assertNoLingotekRequestTranslationLink('es_MX');
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     $this->clickLink('Llamas are cool');

@@ @@
       ->pager(50)
       ->count()
       ->execute();
-    $this->assertEqual(1, $result, 'Only one revision is stored.');
+    $this->assertEquals(1, $result, 'Only one revision is stored.');

     $this->goToContentBulkManagementForm();

@@ @@
     // And we can already request a translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request the Spanish translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_MX');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.checked_target_locale'));
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // Download the Spanish translation.
     $this->assertLingotekDownloadTargetLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_MX', 'dummy-document-hash-id', 'ES');
@@ @@
       ->pager(50)
       ->count()
       ->execute();
-    $this->assertEqual(1, $result, 'A new revision has not been stored.');
+    $this->assertEquals(1, $result, 'A new revision has not been stored.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


162) modules/contrib/lingotek/tests/src/Functional/LingotekNodeCohesionTranslationTest.php:151

    ---------- begin diff ----------
@@ @@
       ->setValue($edit['layout_canvas[0][target_id][json_values]']);
     unset($edit['layout_canvas[0][target_id][json_values]']);

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->node = Node::load(1);
     /** @var \Drupal\cohesion_elements\Entity\CohesionLayout $layout */
@@ @@

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()
+    $this->assertSame(\Drupal::request()
       ->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'Edit in Lingotek Workbench');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');

     /** @var \Drupal\Core\Entity\EntityStorageInterface $cohesionLayoutStorage */
     $cohesionLayoutStorage = $this->container->get('entity_type.manager')->getStorage('cohesion_layout');
@@ @@

     // The original content didn't change.
     $this->drupalGet('node/1');
-    $this->assertText('Llamas are cool');
-    $this->assertText('Llamas are very cool');
+    $this->assertSession()->pageTextContains('Llamas are cool');
+    $this->assertSession()->pageTextContains('Llamas are very cool');
   }

   /**
@@ @@
    */
   public function testDisablingContentTranslationDoesntDisableLingotekTranslationForCohesionLayout() {
     $this->drupalGet('admin/lingotek/settings');
-    $this->assertFieldByName('node[article][fields][layout_canvas]', TRUE);
+    $this->assertSession()->fieldValueEquals('node[article][fields][layout_canvas]', TRUE);

     $edit = [];
     $edit['settings[node][article][fields][layout_canvas]'] = FALSE;
-    $this->drupalPostForm('/admin/config/regional/content-language', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/regional/content-language');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('Settings successfully updated.');

     $this->drupalGet('admin/lingotek/settings');
     // The canvas layout is still enabled.
-    $this->assertFieldByName('node[article][fields][layout_canvas]', TRUE);
+    $this->assertSession()->fieldValueEquals('node[article][fields][layout_canvas]', TRUE);
   }

   protected function createCohesionField($entity_type_id, $bundle, $field_name = 'layout_canvas', $field_label = 'Layout canvas', $target_entity_type = 'cohesion_layout', $selection_handler = 'default', $selection_handler_settings = [], $cardinality = 1) {
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


163) modules/contrib/lingotek/tests/src/Functional/LingotekNodeCohesionRepeaterTranslationTest.php:151

    ---------- begin diff ----------
@@ @@
       ->setValue($edit['layout_canvas[0][target_id][json_values]']);
     unset($edit['layout_canvas[0][target_id][json_values]']);

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->node = Node::load(1);
     /** @var \Drupal\cohesion_elements\Entity\CohesionLayout $layout */
@@ @@

     // Check that the url used was the right one.
     $uploaded_url = \Drupal::state()->get('lingotek.uploaded_url');
-    $this->assertIdentical(\Drupal::request()
+    $this->assertSame(\Drupal::request()
       ->getUriForPath('/node/1'), $uploaded_url, 'The node url was used.');

     // Check that the profile used was the right one.
     $used_profile = \Drupal::state()->get('lingotek.used_profile');
-    $this->assertIdentical('automatic', $used_profile, 'The automatic profile was used.');
+    $this->assertSame('automatic', $used_profile, 'The automatic profile was used.');

     // Check that the translate tab is in the node.
     $this->drupalGet('node/1');
@@ @@
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('Check Upload Status');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request translation.
     $link = $this->xpath('//a[normalize-space()="Request translation" and contains(@href,"es_AR")]');
     $link[0]->click();
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");

     // Check translation status.
     $this->clickLink('Check translation status');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Check that the Edit link points to the workbench and it is opened in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR');
@@ @@

     // Download translation.
     $this->clickLink('Download completed translation');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // The content is translated and published.
     $this->clickLink('Las llamas son chulas');
-    $this->assertText('Las llamas son chulas');
-    $this->assertText('Las llamas son muy chulas');
-    $this->assertText('Los perros son muy chulos');
-    $this->assertText('Los gatos son muy chulos');
+    $this->assertSession()->pageTextContains('Las llamas son chulas');
+    $this->assertSession()->pageTextContains('Las llamas son muy chulas');
+    $this->assertSession()->pageTextContains('Los perros son muy chulos');
+    $this->assertSession()->pageTextContains('Los gatos son muy chulos');

     /** @var \Drupal\Core\Entity\EntityStorageInterface $cohesionLayoutStorage */
     $cohesionLayoutStorage = $this->container->get('entity_type.manager')->getStorage('cohesion_layout');
@@ @@

     // The original content didn't change.
     $this->drupalGet('node/1');
-    $this->assertText('Llamas are cool');
-    $this->assertText('Llamas are very cool');
-    $this->assertText('Dogs are very cool');
-    $this->assertText('Cats are very cool');
+    $this->assertSession()->pageTextContains('Llamas are cool');
+    $this->assertSession()->pageTextContains('Llamas are very cool');
+    $this->assertSession()->pageTextContains('Dogs are very cool');
+    $this->assertSession()->pageTextContains('Cats are very cool');
   }

   protected function createCohesionField($entity_type_id, $bundle, $field_name = 'layout_canvas', $field_label = 'Layout canvas', $target_entity_type = 'cohesion_layout', $selection_handler = 'default', $selection_handler_settings = [], $cardinality = 1) {
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


164) modules/contrib/lingotek/tests/src/Functional/LingotekNodeBulkTranslationTest.php:84

    ---------- begin diff ----------
@@ @@
     $this->assertNoLingotekRequestTranslationLink('es_MX');

     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
@@ @@
     $this->assertLingotekRequestTranslationLink('es_MX');

     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request the Spanish translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_MX');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // Download the Spanish translation.
     $this->assertLingotekDownloadTargetLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
@@ @@
     $edit['title[0][value]'] = 'Pages are cool';
     $edit['body[0][value]'] = 'Pages are very cool';
     $edit['langcode[0][value]'] = 'en';
-    $this->drupalPostForm('node/add/page', $edit, t('Save'));
+    $this->drupalGet('node/add/page');
+    $this->submitForm($edit, t('Save'));

     $this->goToContentBulkManagementForm();

@@ @@
     $edit['title[0][value]'] = 'Pages are cool';
     $edit['body[0][value]'] = 'Pages are very cool';
     $edit['langcode[0][value]'] = 'en';
-    $this->drupalPostForm('node/add/page', $edit, t('Save'));
+    $this->drupalGet('node/add/page');
+    $this->submitForm($edit, t('Save'));

     $this->goToContentBulkManagementForm();

@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertIdentical(NULL, \Drupal::state()
+    $this->assertSame(NULL, \Drupal::state()
       ->get('lingotek.uploaded_locale'));
     $assert_session->pageTextContains('Cannot upload Page Pages are cool. That Content type is not enabled for Lingotek translation.');
   }
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request the German (AT) translation.
     $this->assertLingotekRequestTranslationLink('de_AT');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('de', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()
       ->get('lingotek.added_target_locale'));

     // Check status of the German (AT) translation.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslation('de', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()
       ->get('lingotek.checked_target_locale'));

     // Download the Spanish translation.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslation('de', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('de_AT', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('de_AT', \Drupal::state()
       ->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request all translations.
     $this->assertLingotekRequestTranslationLink('de_AT');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.added_target_locale'));

     // Check all statuses.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Download all translations.
     $this->assertLingotekDownloadTargetLink('de_AT');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Download all translations.
     $this->assertLingotekDownloadTargetLink('de_AT', 'dummy-document-hash-id-1');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.downloaded_locale'));

     // Now the link is to the workbench, and it opens in a new tab.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Ensure that the statuses are set to PENDING since the source has been
     // reuploaded and the targets are being translated. It is possible that
@@ @@
       $key2 => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // I can check current status.
     $this->assertLingotekCheckSourceStatusLink('dummy-document-hash-id');
@@ @@
       $key2 => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request all the translations.
     $this->assertLingotekRequestTranslationLink('de_AT', 'dummy-document-hash-id');
@@ @@
       $key2 => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check status of all the translations.
     $this->assertLingotekCheckTargetStatusLink('de_AT', 'dummy-document-hash-id');
@@ @@
       $key2 => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Download all the translations.
     $this->assertLingotekDownloadTargetLink('de_AT', 'dummy-document-hash-id');
@@ @@
       $key2 => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
   }

   public function testAddContentLinkPresent() {
@@ @@
     $this->clickLink('Add content');

     // And we should have been redirected to the article form.
-    $this->assertUrl(Url::fromRoute('node.add', ['node_type' => 'article']));
+    $this->assertSession()->addressEquals(Url::fromRoute('node.add', ['node_type' => 'article']));
   }

   /**
@@ @@

     // Request korean, with outdated content available.
     $this->clickLink('KO');
-    $this->assertText("Locale 'ko_KR' was added as a translation target for node Llamas are cool EDITED.");
+    $this->assertSession()->pageTextContains("Locale 'ko_KR' was added as a translation target for node Llamas are cool EDITED.");

     // Reupload the content.
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool EDITED has been updated.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool EDITED has been updated.');

     // Korean should be marked as requested, so we can check target.
     $this->assertTargetStatus('KO', 'pending');
@@ @@

     // Recheck status.
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool EDITED is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool EDITED is complete.');

     // Korean should still be marked as requested, so we can check target.
     $this->assertTargetStatus('KO', 'pending');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $this->assertTargetStatus('ES', 'ready');

     // Download the translation.
     $this->clickLink('ES');
-    $this->assertText('The translation of node Llamas are cool EDITED into es_MX has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool EDITED into es_MX has been downloaded.');
   }

   /**
@@ @@

     // Recheck status.
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool EDITED is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool EDITED is complete.');

     // Check the translation after having been edited.
     $key = $this->getBulkSelectionKey('en', 1);
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $this->assertTargetStatus('ES', 'ready');

     // Download the translation.
     $this->clickLink('ES');
-    $this->assertText('The translation of node Llamas are cool EDITED into es_MX has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool EDITED into es_MX has been downloaded.');
   }

   /**
@@ @@
     // There is a link for requesting the Catalan translation.
     $this->assertLingotekRequestTranslationLink('ca_ES');
     $this->clickLink('CA');
-    $this->assertText("Locale 'ca_ES' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'ca_ES' was added as a translation target for node Llamas are cool.");
   }

   /**
@@ @@
     $edit['title[0][value]'] = 'Las llamas son chulas EDITED';
     $this->saveAndKeepPublishedThisTranslationNodeForm($edit, 1, 'es');

-    $this->assertText('Las llamas son chulas EDITED');
+    $this->assertSession()->pageTextContains('Las llamas son chulas EDITED');

     // Login as translation manager.
     $this->drupalLogin($this->translationManagerUser);
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $this->assertTargetStatus('ES', Lingotek::STATUS_READY);

     // Download the translation.
     $this->clickLink('ES');
-    $this->assertText('The translation of node Llamas are cool into es_MX has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_MX has been downloaded.');
     $this->assertTargetStatus('ES', Lingotek::STATUS_CURRENT);

     $this->drupalGet('es/node/1');
-    $this->assertNoText('Las llamas son chulas EDITED');
+    $this->assertSession()->pageTextNotContains('Las llamas son chulas EDITED');
   }

   /**
@@ @@
     // And we cannot request yet a translation.
     $this->assertNoLingotekRequestTranslationLink('en_US', 'dummy-document-hash-id', 'node', 'es');
     $this->clickLink('ES');
-    $this->assertText('Node Llamas are cool es-MX has been uploaded.');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains('Node Llamas are cool es-MX has been uploaded.');
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.uploaded_locale'));
   }

@@ @@

     // Upload the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('The upload for node Llamas are cool failed. Please try again.');
+    $this->assertSession()->pageTextContains('The upload for node Llamas are cool failed. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', 'error');
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
   }

   /**
@@ @@

     // Upload the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
   }

   /**
@@ @@

     // Upload the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Update the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('The update for node Llamas are cool EDITED failed. Please try again.');
+    $this->assertSession()->pageTextContains('The update for node Llamas are cool EDITED failed. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool EDITED has been updated.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool EDITED has been updated.');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Update the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool EDITED has been updated.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool EDITED has been updated.');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Update the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool EDITED has been updated.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool EDITED has been updated.');
   }

   /**
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');

     // Check upload.
     $this->clickLink('EN');
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status, 'The node has been marked as error.');

     // We cannot click, as for views there won't be a link.
     // $this->clickLink('EN');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
   }

@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Update the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Document node Llamas are cool EDITED has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool EDITED has been archived. Uploading again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     // We cannot click, as for views there won't be a link.
     // $this->assertText('Node Llamas are cool EDITED has been uploaded.');
     $this->assertSourceStatus('EN', Lingotek::STATUS_CURRENT);
@@ @@

     // Upload the document, which must succeed.
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');

     // Check upload.
     $this->clickLink('EN');
@@ @@

     // Update the document, which must fail.
     $this->clickLink('EN');
-    $this->assertText('Document node Llamas are cool EDITED has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool EDITED has a new version. The document id has been updated for all future interactions. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_EDITED);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_EDITED, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_EDITED, $source_status, 'The node has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool EDITED has been updated.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool EDITED has been updated.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('The upload for node Llamas are cool failed. Please try again.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('The upload for node Llamas are cool failed. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', 'error');
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $this->assertSourceStatus('EN', 'importing');

     // Check upload.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('The update for node Llamas are cool EDITED failed. Please try again.');
+    $this->assertSession()->pageTextContains('The update for node Llamas are cool EDITED failed. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', 'error');
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_error_in_upload', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool EDITED has been updated.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool EDITED has been updated.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);

     // Check upload.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Document node Llamas are cool EDITED has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool EDITED has been archived. Uploading again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_IMPORTING, $source_status);
+    $this->assertEquals(Lingotek::STATUS_IMPORTING, $source_status);

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_archived_error_in_update', FALSE);
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     // We cannot click, as for views there won't be a link.
     // $this->assertText('Node Llamas are cool EDITED has been uploaded.');
     $this->assertSourceStatus('EN', Lingotek::STATUS_CURRENT);
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);

     // Check upload.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Document node Llamas are cool EDITED has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool EDITED has a new version. The document id has been updated for all future interactions. Please try again.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_EDITED);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_EDITED, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_EDITED, $source_status, 'The node has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_document_locked_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool EDITED has been updated.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool EDITED has been updated.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);

     // Check upload.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_payment_required_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool EDITED has been updated.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool EDITED has been updated.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);

     // Check upload.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_ERROR);
@@ @@
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_ERROR, $source_status, 'The node has been marked as error.');

     // I can still re-try the upload.
     \Drupal::state()->set('lingotek.must_processed_words_limit_error_in_update', FALSE);
     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool EDITED has been updated.');
+    $this->assertSession()->pageTextContains('Node Llamas are cool EDITED has been updated.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);

     // Check upload.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document node Llamas are cool EDITED was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool EDITED was not found. Please upload again.');

     $this->node = Node::load(1);
     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $source_status = $translation_service->getSourceStatus($this->node);
-    $this->assertEqual(Lingotek::STATUS_UNTRACKED, $source_status, 'The node has been marked as error.');
+    $this->assertEquals(Lingotek::STATUS_UNTRACKED, $source_status, 'The node has been marked as error.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Assert that I could request translations.
     $this->assertLingotekRequestTranslationLink('de_AT', 'dummy-document-hash-id');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Now Drupal knows that there are translations ready.
     $this->assertLingotekDownloadTargetLink('de_AT');
@@ @@
     ConfigurableLanguage::createFromLangcode('de')
       ->setThirdPartySetting('lingotek', 'locale', 'de_DE')
       ->save();
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $this->assertLingotekDownloadTargetLink('de_DE');

     // Ensure locales are handled correctly by setting manual values.
@@ @@
         'de-DE' => 100,
         'es-MX' => 10,
       ]);
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Now Drupal knows which translations are ready.
     $this->assertNoLingotekDownloadTargetLink('de_AT');
@@ @@
         'es-MX' => 10,
       ]);
     // Check all statuses again.
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // All translations must be updated according exclusively with the
     // information from the TMS.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // I can check current status, because it wasn't imported but it's not marked
     // as an error.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Assert that targets can be requested.
     $this->assertLingotekRequestTranslationLink('es_MX');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // It was marked as error and I can try the update.
     // Check the right class is added.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // It was marked as error and I can try the update.
     // Check the right class is added.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);

     $this->assertLingotekCheckSourceStatusLink();
-    $this->assertText('The import for node Llamas are cool is still pending.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is still pending.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check the right class is added.
     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
-    $this->assertText('Document node Llamas are cool was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool was not found. Please upload again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
     // So we don't mark as error but keep it on importing.
     $this->assertNoSourceStatus('EN', Lingotek::STATUS_REQUEST);
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
-    $this->assertText('The check for node status failed. Please try again.');
+    $this->assertSession()->pageTextContains('The check for node status failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // We failed at checking status, but we don't know what happened.
     // So we don't mark as error but keep it on importing.
     $this->assertNoSourceStatus('EN', Lingotek::STATUS_REQUEST);
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
-    $this->assertText('The upload status check for node Llamas are cool translation failed. Please try again.');
+    $this->assertSession()->pageTextContains('The upload status check for node Llamas are cool translation failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
     // We failed at requesting a translation, but we don't know what happened.
     // So we don't mark as error but keep it on request.
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('The translation request for node failed. Please try again.');
+    $this->assertSession()->pageTextContains('The translation request for node failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertLingotekRequestTranslationLink('es_MX', 'dummy-document-hash-id-1');
-    $this->assertText('Document node Llamas are cool has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool has been archived. Uploading again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@

     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document node Llamas are cool was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool was not found. Please upload again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Document node Llamas are cool has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool has a new version. The document id has been updated for all future interactions. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // We failed at requesting a translation, but we don't know what happened.
     // So we don't mark as error but keep it on request.
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('The request for node Llamas are cool translation failed. Please try again.');
+    $this->assertSession()->pageTextContains('The request for node Llamas are cool translation failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertLingotekRequestTranslationLink('es_MX', 'dummy-document-hash-id-1');
-    $this->assertText('Document node Llamas are cool has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool has been archived. Uploading again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document node Llamas are cool was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool was not found. Please upload again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Document node Llamas are cool has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool has a new version. The document id has been updated for all future interactions. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('The request for node Llamas are cool translation failed. Please try again.');
+    $this->assertSession()->pageTextContains('The request for node Llamas are cool translation failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertLingotekRequestTranslationLink('es_MX', 'dummy-document-hash-id-1');
-    $this->assertText('Document node Llamas are cool has been archived. Uploading again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool has been archived. Uploading again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document node Llamas are cool was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool was not found. Please upload again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Document node Llamas are cool has a new version. The document id has been updated for all future interactions. Please try again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool has a new version. The document id has been updated for all future interactions. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
+    $this->assertSession()->pageTextContains('Community has been disabled. Please contact support@lingotek.com to re-enable your community.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
+    $this->assertSession()->pageTextContains('Processed word limit exceeded. Please contact your local administrator or Lingotek Client Success (sales@lingotek.com) for assistance.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
     // We failed at checking a translation, but we don't know what happened.
     // So we don't mark as error but keep it on request.
     $this->assertTargetStatus('ES', Lingotek::STATUS_PENDING);
-    $this->assertText('The request for node translation status failed. Please try again.');
+    $this->assertSession()->pageTextContains('The request for node translation status failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
     // We failed at checking a translation, as it was missing.
     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoTargetStatus('ES', Lingotek::STATUS_PENDING);
-    $this->assertText('Document node Llamas are cool was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool was not found. Please upload again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // We failed at checking a translation, but we don't know what happened.
     // So we don't mark as error but keep it on request.
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('The request for node Llamas are cool translation status failed. Please try again.');
+    $this->assertSession()->pageTextContains('The request for node Llamas are cool translation status failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // We failed at checking a translation, as it was missing.
     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoTargetStatus('ES', Lingotek::STATUS_PENDING);
-    $this->assertText('Document node Llamas are cool was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool was not found. Please upload again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // We failed at checking a translation, but we don't know what happened.
     // So we don't mark as error but keep it on request.
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('The request for node Llamas are cool translation status failed. Please try again.');
+    $this->assertSession()->pageTextContains('The request for node Llamas are cool translation status failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // We failed at checking a translation, as it was missing.
     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoTargetStatus('ES', Lingotek::STATUS_PENDING);
-    $this->assertText('Document node Llamas are cool was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool was not found. Please upload again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@

     // We failed at downloading a translation. Mark as error.
     $this->assertTargetStatus('ES', Lingotek::STATUS_ERROR);
-    $this->assertText('The download for node Llamas are cool failed. Please try again.');
+    $this->assertSession()->pageTextContains('The download for node Llamas are cool failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@

     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document node Llamas are cool was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool was not found. Please upload again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // We failed at downloading a translation. Mark as error.
     $this->assertTargetStatus('ES', Lingotek::STATUS_ERROR);
-    $this->assertText('The download for node Llamas are cool translation failed. Please try again.');
+    $this->assertSession()->pageTextContains('The download for node Llamas are cool translation failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document node Llamas are cool was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool was not found. Please upload again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $this->assertTargetStatus('ES', Lingotek::STATUS_READY);

     // Download translation.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // We failed at downloading a translation. Mark as error.
     $this->assertTargetStatus('ES', Lingotek::STATUS_ERROR);
-    $this->assertText('The download for node Llamas are cool translation failed. Please try again.');
+    $this->assertSession()->pageTextContains('The download for node Llamas are cool translation failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $this->assertTargetStatus('ES', Lingotek::STATUS_READY);

     // Download translation.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document node Llamas are cool was not found. Please upload again.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool was not found. Please upload again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancel('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // We failed at cancelling.
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('The cancellation of node Llamas are cool failed. Please try again.');
+    $this->assertSession()->pageTextContains('The cancellation of node Llamas are cool failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancel('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // We failed at cancelling.
     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document node Llamas are cool was not found, so nothing to cancel.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool was not found, so nothing to cancel.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancelTarget('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // We failed at cancelling.
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
-    $this->assertText('The cancellation of node Llamas are cool translation to es failed. Please try again.');
+    $this->assertSession()->pageTextContains('The cancellation of node Llamas are cool translation to es failed. Please try again.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancelTarget('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // We failed at cancelling.
     $this->assertSourceStatus('EN', Lingotek::STATUS_UNTRACKED);
     $this->assertNoLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Document node Llamas are cool was not found, so nothing to cancel.');
+    $this->assertSession()->pageTextContains('Document node Llamas are cool was not found, so nothing to cancel.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancelTarget('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // We failed at cancelling because it was already completed.
     $this->assertSourceStatus('EN', Lingotek::STATUS_IMPORTING);
     $this->assertTargetStatus('ES', Lingotek::STATUS_REQUEST);
     $this->assertLingotekRequestTranslationLink('es_MX');
-    $this->assertText('Target es for node Llamas are cool was already completed in the TMS and cannot be cancelled unless the entire document is cancelled.');
+    $this->assertSession()->pageTextContains('Target es for node Llamas are cool was already completed in the TMS and cannot be cancelled unless the entire document is cancelled.');
   }

   /**
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancelTarget('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // We succeeded at cancelling.
     $this->assertTargetStatus('ES', Lingotek::STATUS_CANCELLED);
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Still target is cancelled.
     $this->assertTargetStatus('ES', Lingotek::STATUS_CANCELLED);
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request the Spanish translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_MX');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     // Download all the translations.
     $this->assertLingotekDownloadTargetLink('es_MX');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // The translations not requested shouldn't change its status.
     $this->assertLingotekRequestTranslationLink('de_DE');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Request the Spanish translation.
     $this->assertLingotekRequestTranslationLink('es_MX');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSession()->pageTextContains("Locale 'es_MX' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.added_target_locale'));

     \Drupal::state()->resetCache();
@@ @@
     // Request italian.
     $this->assertLingotekRequestTranslationLink('it_IT');
     $this->clickLink('IT');
-    $this->assertText("Locale 'it_IT' was added as a translation target for node Llamas are cool.");
-    $this->assertIdentical('it_IT', \Drupal::state()
+    $this->assertSession()->pageTextContains("Locale 'it_IT' was added as a translation target for node Llamas are cool.");
+    $this->assertSame('it_IT', \Drupal::state()
       ->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_MX');
     $this->clickLink('ES');
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.checked_target_locale'));
-    $this->assertText('The es_MX translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_MX translation for node Llamas are cool is ready for download.');

     \Drupal::state()->resetCache();

@@ @@
     // Check status of the Italian translation.
     $this->assertLingotekCheckTargetStatusLink('it_IT');
     $this->clickLink('IT');
-    $this->assertIdentical('it_IT', \Drupal::state()
+    $this->assertSame('it_IT', \Drupal::state()
       ->get('lingotek.checked_target_locale'));
-    $this->assertText('The it_IT translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The it_IT translation for node Llamas are cool is ready for download.');

     // Download all the translations.
     $this->assertLingotekDownloadTargetLink('es_MX');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // They are marked with the right status.
     $this->assertTargetStatus('ES', 'current');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // And statuses should remain the same.
     $this->assertTargetStatus('ES', 'current');
@@ @@

     $this->drupalGet('node/1/translations');
     $this->clickLink('Delete');
-    $this->drupalPostForm(NULL, [], t('Delete @language translation', ['@language' => ConfigurableLanguage::load('de')->getName()]));
+    $this->submitForm([], t('Delete @language translation', ['@language' => ConfigurableLanguage::load('de')->getName()]));

     $this->goToContentBulkManagementForm();
     $this->assertTargetStatus('DE', Lingotek::STATUS_READY);
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDeleteTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $this->confirmBulkDeleteTranslation(1, 1);

     $this->assertLingotekDownloadTargetLink('es_MX');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDeleteTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

-    $this->assertText('No valid translations for deletion.');
+    $this->assertSession()->pageTextContains('No valid translations for deletion.');
     // Assert we kept selection.
     $this->assertSelectionIsKept($key);

@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDeleteTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
     $this->confirmBulkDeleteTranslations(1, 2);

     $this->assertLingotekDownloadTargetLink('es_MX');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // I can check current status.
@@ @@
   }

   protected function confirmBulkDeleteTranslation($nodeCount, $translationCount) {
-    $this->drupalPostForm(NULL, [], t('Delete'));
-    $this->assertText("Deleted $translationCount content item.");
+    $this->submitForm([], t('Delete'));
+    $this->assertSession()->pageTextContains("Deleted $translationCount content item.");
   }

   protected function confirmBulkDeleteTranslations($nodeCount, $translationCount) {
-    $this->drupalPostForm(NULL, [], t('Delete'));
-    $this->assertText("Deleted $translationCount content items.");
+    $this->submitForm([], t('Delete'));
+    $this->assertSession()->pageTextContains("Deleted $translationCount content items.");
   }

   /**
@@ @@
   protected function assertSelectionIsKept(string $key) {
     $assert_session = $this->assertSession();
     $assert_session->optionExists($this->getBulkOperationFormName(), $this->getBulkOperationNameForDeleteTranslation('es', 'node'));
-    $this->assertFieldChecked($key);
+    $this->assertSession()->checkboxChecked($key);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldCheckedRector
 * AssertIdenticalRector
 * AssertNoTextRector
 * AssertTextRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


165) modules/contrib/lingotek/tests/src/Functional/LingotekNodeBulkProfileTest.php:81

    ---------- begin diff ----------
@@ @@
       'table[3]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));

     // I can check current status.
     $this->assertLingotekCheckSourceStatusLink();
@@ @@
       'table[3]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Manual Profile
     $manual_profile = $this->xpath("//td[contains(text(), 'Manual')]");
-    $this->assertEqual(count($manual_profile), 3, 'There are three nodes with the Manual Profile set.');
+    $this->assertEquals(count($manual_profile), 3, 'There are three nodes with the Manual Profile set.');

     $key = $this->getBulkSelectionKey('en', 1);
     $edit = [
@@ @@
       'table[3]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:automatic',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Automatic Profile
     $automatic_profile = $this->xpath("//td[contains(text(), 'Automatic')]");
-    $this->assertEqual(count($automatic_profile), 3, 'There are three nodes with the Automatic Profile set.');
+    $this->assertEquals(count($automatic_profile), 3, 'There are three nodes with the Automatic Profile set.');

     $edit = [
       'table[2]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:manual',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there is one node with the Manual Profile
     // Check that there are two nodes with the Automatic Profile
     $manual_profile = $this->xpath("//td[contains(text(), 'Manual')]");
-    $this->assertEqual(count($manual_profile), 1, 'There is one node with the Manual Profile set.');
+    $this->assertEquals(count($manual_profile), 1, 'There is one node with the Manual Profile set.');
     $automatic_profile = $this->xpath("//td[contains(text(), 'Automatic')]");
-    $this->assertEqual(count($automatic_profile), 2, 'There are two nodes with the Automatic Profile set.');
+    $this->assertEquals(count($automatic_profile), 2, 'There are two nodes with the Automatic Profile set.');

     $key = $this->getBulkSelectionKey('en', 1);
     $edit = [
@@ @@
       'table[3]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:disabled',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Disabled Profile
     $disabled_profile = $this->xpath("//td[contains(text(), 'Disabled')]");
-    $this->assertEqual(count($disabled_profile), 3, 'There are three nodes with the Disabled Profile set.');
+    $this->assertEquals(count($disabled_profile), 3, 'There are three nodes with the Disabled Profile set.');

     /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $content_translation_service */
     $content_translation_service = \Drupal::service('lingotek.content_translation');
@@ @@
     $this->goToContentBulkManagementForm();
     for ($i = 1; $i < 4; $i++) {
       $node = Node::load($i);
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getSourceStatus($node));
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'en'));
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'es'));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getSourceStatus($node));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'en'));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'es'));
     }
     $key = $this->getBulkSelectionKey('en', 1);
     $edit = [
@@ @@
       'table[3]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     for ($i = 1; $i < 4; $i++) {
       $node = Node::load($i);
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getSourceStatus($node));
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'en'));
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'es'));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getSourceStatus($node));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'en'));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'es'));
     }

     $key = $this->getBulkSelectionKey('en', 1);
@@ @@
       'table[3]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     for ($i = 1; $i < 4; $i++) {
       $node = Node::load($i);
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getSourceStatus($node));
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'en'));
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'es'));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getSourceStatus($node));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'en'));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'es'));
     }

     $key = $this->getBulkSelectionKey('en', 1);
@@ @@
       'table[3]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     for ($i = 1; $i < 4; $i++) {
       $node = Node::load($i);
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getSourceStatus($node));
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'en'));
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'es'));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getSourceStatus($node));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'en'));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'es'));
     }

     $key = $this->getBulkSelectionKey('en', 1);
@@ @@
       'table[3]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     for ($i = 1; $i < 4; $i++) {
       $node = Node::load($i);
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getSourceStatus($node));
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'en'));
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'es'));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getSourceStatus($node));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'en'));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'es'));
     }

     $key = $this->getBulkSelectionKey('en', 1);
@@ @@
       'table[3]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslation('es', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     for ($i = 1; $i < 4; $i++) {
       $node = Node::load($i);
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getSourceStatus($node));
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'en'));
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'es'));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getSourceStatus($node));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'en'));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'es'));
     }

     $key = $this->getBulkSelectionKey('en', 1);
@@ @@
       'table[3]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:automatic',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Automatic Profile
     $automatic_profile = $this->xpath("//td[contains(text(), 'Automatic')]");
-    $this->assertEqual(count($automatic_profile), 3, 'There are three nodes with the Automatic Profile set.');
+    $this->assertEquals(count($automatic_profile), 3, 'There are three nodes with the Automatic Profile set.');

     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     \Drupal::entityTypeManager()->getStorage('lingotek_content_metadata')->resetCache();
@@ @@

     for ($i = 1; $i < 4; $i++) {
       $node = Node::load($i);
-      $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
-      $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'en'));
-      $this->assertIdentical(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'es'));
+      $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+      $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'en'));
+      $this->assertSame(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'es'));
     }

     $key = $this->getBulkSelectionKey('en', 1);
@@ @@
       'table[3]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     \Drupal::entityTypeManager()->getStorage('lingotek_content_metadata')->resetCache();
@@ @@

     for ($i = 1; $i < 4; $i++) {
       $node = Node::load($i);
-      $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
-      $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getTargetStatus($node, 'en'));
-      $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
+      $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+      $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getTargetStatus($node, 'en'));
+      $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
     }

     $key = $this->getBulkSelectionKey('en', 1);
@@ @@
       'table[3]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     \Drupal::entityTypeManager()->getStorage('lingotek_content_metadata')->resetCache();
@@ @@

     for ($i = 1; $i < 4; $i++) {
       $node = Node::load($i);
-      $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
-      $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'en'));
-      $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
+      $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+      $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'en'));
+      $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
     }

     $key = $this->getBulkSelectionKey('en', 1);
@@ @@
       'table[3]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     \Drupal::entityTypeManager()->getStorage('lingotek_content_metadata')->resetCache();
@@ @@

     for ($i = 1; $i < 4; $i++) {
       $node = Node::load($i);
-      $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
-      $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'en'));
-      $this->assertIdentical(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
+      $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+      $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'en'));
+      $this->assertSame(Lingotek::STATUS_PENDING, $content_translation_service->getTargetStatus($node, 'es'));
     }

     $key = $this->getBulkSelectionKey('en', 1);
@@ @@
       'table[3]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     \Drupal::entityTypeManager()->getStorage('lingotek_content_metadata')->resetCache();
@@ @@

     for ($i = 1; $i < 4; $i++) {
       $node = Node::load($i);
-      $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
-      $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'en'));
-      $this->assertIdentical(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'es'));
+      $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+      $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'en'));
+      $this->assertSame(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'es'));
     }

     $key = $this->getBulkSelectionKey('en', 1);
@@ @@
       'table[3]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     \Drupal::entityTypeManager()->getStorage('lingotek_content_metadata')->resetCache();
@@ @@

     for ($i = 1; $i < 4; $i++) {
       $node = Node::load($i);
-      $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
-      $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'en'));
-      $this->assertIdentical(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'es'));
+      $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+      $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'en'));
+      $this->assertSame(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'es'));
     }

     // Edit the nodes.
@@ @@

     for ($i = 1; $i < 4; $i++) {
       $node = Node::load($i);
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getSourceStatus($node));
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'en'));
-      $this->assertIdentical(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'es'));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getSourceStatus($node));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'en'));
+      $this->assertSame(Lingotek::STATUS_DISABLED, $content_translation_service->getTargetStatus($node, 'es'));
     }

     // Edit the nodes.
@@ @@

     for ($i = 1; $i < 4; $i++) {
       $node = Node::load($i);
-      $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
-      $this->assertIdentical(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'en'));
-      $this->assertIdentical(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'es'));
+      $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getSourceStatus($node));
+      $this->assertSame(Lingotek::STATUS_CURRENT, $content_translation_service->getTargetStatus($node, 'en'));
+      $this->assertSame(Lingotek::STATUS_READY, $content_translation_service->getTargetStatus($node, 'es'));
     }
   }

@@ @@
       'table[3]' => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCancel('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $key = $this->getBulkSelectionKey('en', 1);
     $edit = [
@@ @@
       'table[3]' => TRUE,
       $this->getBulkOperationFormName() => 'change_profile:automatic',
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     // Check that there are three nodes with the Automatic Profile
     $automatic_profile = $this->xpath("//td[contains(text(), 'Automatic')]");
-    $this->assertEqual(count($automatic_profile), 3, 'There are three nodes with the Automatic Profile set.');
+    $this->assertEquals(count($automatic_profile), 3, 'There are three nodes with the Automatic Profile set.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


166) modules/contrib/lingotek/tests/src/Functional/LingotekNodeBulkLocaleTranslationTest.php:83

    ---------- begin diff ----------
@@ @@
     $this->assertLingotekRequestTranslationLink('es_ES');
     $this->assertLingotekRequestTranslationLink('es_AR');
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     // Request the German (AT) translation.
     $this->assertLingotekRequestTranslationLink('de_AT', 'dummy-document-hash-id');
     $this->clickLink('DE-AT');
-    $this->assertText("Locale 'de_AT' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'de_AT' was added as a translation target for node Llamas are cool.");
     // Check that the requested locale is the right one.
-    $this->assertIdentical('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSame('de_AT', \Drupal::state()->get('lingotek.added_target_locale'));

     \Drupal::state()->resetCache();

@@ @@
     $this->assertLingotekRequestTranslationLink('es_ES');
     $this->assertLingotekRequestTranslationLink('es_AR');
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
     // Check that the requested locale is the right one.
-    $this->assertIdentical('es_AR', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSame('es_AR', \Drupal::state()->get('lingotek.added_target_locale'));

     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('es_AR');
     $this->clickLink('ES');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');

     // Download the Spanish translation.
     $this->assertLingotekDownloadTargetLink('es_AR');
     $this->clickLink('ES');
-    $this->assertText('The translation of node Llamas are cool into es_AR has been downloaded.');
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into es_AR has been downloaded.');

     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('es_AR', 'dummy-document-hash-id', 'ES');
@@ @@

     // Check that the order of target languages is always alphabetical.
     $target_links = $this->xpath("//a[contains(@class,'language-icon')]");
-    $this->assertEqual(count($target_links), 3, 'The three languages appear as targets');
-    $this->assertEqual('DE-AT', $target_links[0]->getHtml(), 'DE-AT is the first language');
-    $this->assertEqual('ES', $target_links[1]->getHtml(), 'ES is the second language');
-    $this->assertEqual('ES-ES', $target_links[2]->getHtml(), 'ES-ES is the third language');
+    $this->assertEquals(count($target_links), 3, 'The three languages appear as targets');
+    $this->assertEquals('DE-AT', $target_links[0]->getHtml(), 'DE-AT is the first language');
+    $this->assertEquals('ES', $target_links[1]->getHtml(), 'ES is the second language');
+    $this->assertEquals('ES-ES', $target_links[2]->getHtml(), 'ES-ES is the third language');
   }

   /**
@@ @@
     // Request the German (AT) translation.
     $this->assertLingotekRequestTranslationLink('de_AT', 'dummy-document-hash-id');
     $this->clickLink('DE-AT');
-    $this->assertText("Locale 'de_AT' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'de_AT' was added as a translation target for node Llamas are cool.");

     // Check that the source status has been updated.
     $this->assertNoLingotekCheckSourceStatusLink();
@@ @@
     // Request the German (AT) translation.
     $this->assertLingotekRequestTranslationLink('de_AT', 'dummy-document-hash-id');
     $this->clickLink('ES-ES');
-    $this->assertText("Locale 'es_ES' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_ES' was added as a translation target for node Llamas are cool.");
     $this->clickLink('DE-AT');
-    $this->assertText("Locale 'de_AT' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'de_AT' was added as a translation target for node Llamas are cool.");

     $key = $this->getBulkSelectionKey('en', 1);
     $edit = [
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertTargetStatus('DE-AT', Lingotek::STATUS_CURRENT);
     $this->assertTargetStatus('ES-ES', Lingotek::STATUS_CURRENT);
@@ @@
     // Request the German (AT) translation.
     $this->assertLingotekRequestTranslationLink('de_AT', 'dummy-document-hash-id');
     $this->clickLink('ES-ES');
-    $this->assertText("Locale 'es_ES' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'es_ES' was added as a translation target for node Llamas are cool.");
     $this->clickLink('DE-AT');
-    $this->assertText("Locale 'de_AT' was added as a translation target for node Llamas are cool.");
+    $this->assertSession()->pageTextContains("Locale 'de_AT' was added as a translation target for node Llamas are cool.");

     $key = $this->getBulkSelectionKey('en', 1);
     $edit = [
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());

     $this->assertTargetStatus('DE-AT', Lingotek::STATUS_CURRENT);
     $this->assertTargetStatus('ES-ES', Lingotek::STATUS_CURRENT);
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


167) modules/contrib/lingotek/tests/src/Functional/LingotekNodeBulkDisabledTargetOverrideTranslationTest.php:94

    ---------- begin diff ----------
@@ @@
     $this->assertNoLingotekRequestTranslationLink('es_MX');

     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
@@ @@
     $this->assertLingotekRequestTranslationLink('es_MX');

     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');

     $this->assertNoLingotekRequestTranslationLink('ca_ES');
     $this->assertLingotekRequestTranslationLink('es_MX');
@@ @@
     $this->assertNoLingotekRequestTranslationLink('es_MX');

     $this->clickLink('EN');
-    $this->assertText('Node Llamas are cool has been uploaded.');
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->assertSession()->pageTextContains('Node Llamas are cool has been uploaded.');
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

     // There is a link for checking status.
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

-    $this->assertText('Operations completed.');
+    $this->assertSession()->pageTextContains('Operations completed.');

     $this->assertNoLingotekRequestTranslationLink('ca_ES');
     $this->assertLingotekRequestTranslationLink('es_MX');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslation('ca', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical(NULL, \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame(NULL, \Drupal::state()
       ->get('lingotek.added_target_locale'));
-    $this->assertIdentical(NULL, \Drupal::state()
+    $this->assertSame(NULL, \Drupal::state()
       ->get('lingotek.requested_locales'));

-    $this->assertText('Operations completed.');
+    $this->assertSession()->pageTextContains('Operations completed.');

     $this->assertTargetStatus('es', Lingotek::STATUS_REQUEST);
     $this->assertTargetStatus('ca', Lingotek::STATUS_DISABLED);
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslation('ca', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical(NULL, \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame(NULL, \Drupal::state()
       ->get('lingotek.checked_target_locale'));

     $this->assertTargetStatus('es', Lingotek::STATUS_REQUEST);
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslation('ca', 'node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical(NULL, \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame(NULL, \Drupal::state()
       ->get('lingotek.downloaded_locale'));

     $this->assertTargetStatus('es', Lingotek::STATUS_REQUEST);
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

-    $this->assertText('Operations completed.');
+    $this->assertSession()->pageTextContains('Operations completed.');

     // There is a link for checking status.
     $this->assertLingotekCheckSourceStatusLink();
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckUpload('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('en_US', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('en_US', \Drupal::state()
       ->get('lingotek.uploaded_locale'));

-    $this->assertText('Operations completed.');
+    $this->assertSession()->pageTextContains('Operations completed.');

     $this->assertNoLingotekRequestTranslationLink('ca_ES');
     $this->assertLingotekRequestTranslationLink('es_MX');
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForRequestTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical(['dummy-document-hash-id' => ['es_MX']], \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame(['dummy-document-hash-id' => ['es_MX']], \Drupal::state()
       ->get('lingotek.requested_locales'));

-    $this->assertText('Operations completed.');
+    $this->assertSession()->pageTextContains('Operations completed.');

     $this->assertTargetStatus('es', Lingotek::STATUS_PENDING);
     $this->assertTargetStatus('ca', Lingotek::STATUS_DISABLED);
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForCheckTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical(NULL, \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame(NULL, \Drupal::state()
       ->get('lingotek.checked_target_locale'));

     $this->assertTargetStatus('es', Lingotek::STATUS_READY);
@@ @@
       $key => TRUE,
       $this->getBulkOperationFormName() => $this->getBulkOperationNameForDownloadTranslations('node'),
     ];
-    $this->drupalPostForm(NULL, $edit, $this->getApplyActionsButtonLabel());
-    $this->assertIdentical('es_MX', \Drupal::state()
+    $this->submitForm($edit, $this->getApplyActionsButtonLabel());
+    $this->assertSame('es_MX', \Drupal::state()
       ->get('lingotek.downloaded_locale'));

     $this->assertTargetStatus('es', Lingotek::STATUS_CURRENT);
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/lingotek/tests/src/Functional/Form/IntelligenceMetadat
         aFormTestTrait.php" file, due to:                                      
         "System error: "Method assertFieldChecked() was not found in reflection
         of class                                                               
         Drupal\Tests\lingotek\Functional\Form\IntelligenceMetadataFormTestTrait
         ."                                                                     
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 419          

 [ERROR] Could not process                                                      
         "modules/contrib/lingotek/tests/src/Functional/LingotekManagementTestTr
         ait.php" file, due to:                                                 
         "System error: "Method assertLinkByHref() was not found in reflection  
         of class Drupal\Tests\lingotek\Functional\LingotekManagementTestTrait."
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 419          

