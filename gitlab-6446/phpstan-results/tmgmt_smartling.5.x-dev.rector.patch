diff --git a/modules/tmgmt_smartling_acquia_cohesion/tests/src/Kernel/AcquiaCohesionDataConverterTest.php b/modules/tmgmt_smartling_acquia_cohesion/tests/src/Kernel/AcquiaCohesionDataConverterTest.php
index d23f6df..cb2b6cc 100644
--- a/modules/tmgmt_smartling_acquia_cohesion/tests/src/Kernel/AcquiaCohesionDataConverterTest.php
+++ b/modules/tmgmt_smartling_acquia_cohesion/tests/src/Kernel/AcquiaCohesionDataConverterTest.php
@@ -137,19 +137,11 @@ class AcquiaCohesionDataConverterTest extends SmartlingTestBase {
 
     $acquiaDataConverter = new AcquiaCohesionDataConverter($this->loggerMock);
 
-    $this->assertEqual(
-      $acquiaDataConverter->findAndConvertCohesionJsonDataToCohesionXmlData($input),
-      $expected
-    );
+    $this->assertEquals($acquiaDataConverter->findAndConvertCohesionJsonDataToCohesionXmlData($input), $expected);
   }
 
   public function testXmlToJsonTransformation() {
-    $jobItemMock = $this->getMockBuilder(JobItem::class)
-      ->disableOriginalConstructor()
-      ->setMethods([
-        'getData'
-      ])
-    ->getMock();
+    $jobItemMock = $this->createMock(JobItem::class);
 
     $jobItemMock->expects($this->exactly(2))
       ->method('getData')
@@ -247,11 +239,8 @@ class AcquiaCohesionDataConverterTest extends SmartlingTestBase {
         ]
     ];
 
-    $this->assertEqual(
-      $acquiaDataConverter->findAndConvertCohesionXmlDataToCohesionJsonData(
-        $input
-      ),
-      $expected
-    );
+    $this->assertEquals($acquiaDataConverter->findAndConvertCohesionXmlDataToCohesionJsonData(
+      $input
+    ), $expected);
   }
 }
diff --git a/modules/tmgmt_smartling_acquia_cohesion/tests/src/Kernel/AcquiaCohesionDataSuggesterTest.php b/modules/tmgmt_smartling_acquia_cohesion/tests/src/Kernel/AcquiaCohesionDataSuggesterTest.php
index fa63a74..9300877 100644
--- a/modules/tmgmt_smartling_acquia_cohesion/tests/src/Kernel/AcquiaCohesionDataSuggesterTest.php
+++ b/modules/tmgmt_smartling_acquia_cohesion/tests/src/Kernel/AcquiaCohesionDataSuggesterTest.php
@@ -18,13 +18,7 @@ class AcquiaCohesionDataSuggesterTest extends SmartlingTestBase {
    * Returns component content job items from job items data as suggestions.
    */
   public function testJobItemsSuggestions() {
-    $componentContentMock = $this->getMockBuilder(ComponentContent::class)
-      ->disableOriginalConstructor()
-      ->setMethods([
-        'getEntityTypeId',
-        'id'
-      ])
-      ->getMock();
+    $componentContentMock = $this->createMock(ComponentContent::class);
 
     $componentContentMock->expects($this->once())
       ->method('getEntityTypeId')
@@ -34,25 +28,14 @@ class AcquiaCohesionDataSuggesterTest extends SmartlingTestBase {
       ->method('id')
       ->willReturn(4);
 
-    $acquiaDataSuggester = $this->getMockBuilder(AcquiaCohesionDataSuggester::class)
-      ->disableOriginalConstructor()
-      ->setMethods([
-        'loadComponentContent'
-      ])
-      ->getMock();
+    $acquiaDataSuggester = $this->createMock(AcquiaCohesionDataSuggester::class);
 
     $acquiaDataSuggester->expects($this->once())
       ->method('loadComponentContent')
       ->with(4)
       ->willReturn($componentContentMock);
 
-    $jobItemMock = $this->getMockBuilder(JobItem::class)
-      ->disableOriginalConstructor()
-      ->setMethods([
-        'getData',
-        'id'
-      ])
-      ->getMock();
+    $jobItemMock = $this->createMock(JobItem::class);
 
     $jobItemMock->expects($this->once())
       ->method('getData')
@@ -78,24 +61,12 @@ class AcquiaCohesionDataSuggesterTest extends SmartlingTestBase {
 
     $result = $acquiaDataSuggester->suggestCohesionContentComponents([$jobItemMock]);
 
-    $this->assertEqual(
-      count($result),
-      1
-    );
+    $this->assertEquals(count($result), 1);
 
-    $this->assertEqual(
-      $result[0]["from_item"],
-      1
-    );
+    $this->assertEquals($result[0]["from_item"], 1);
 
-    $this->assertEqual(
-      $result[0]["job_item"] instanceof JobItemInterface,
-      true
-    );
+    $this->assertEquals($result[0]["job_item"] instanceof JobItemInterface, true);
 
-    $this->assertEqual(
-      (string) $result[0]["reason"],
-      "Referenced content component"
-    );
+    $this->assertEquals((string) $result[0]["reason"], "Referenced content component");
   }
 }
diff --git a/modules/tmgmt_smartling_log_settings/tests/src/Functional/TmgmtSmartlingLogSettingsTest.php b/modules/tmgmt_smartling_log_settings/tests/src/Functional/TmgmtSmartlingLogSettingsTest.php
index a95acfd..3b4616c 100644
--- a/modules/tmgmt_smartling_log_settings/tests/src/Functional/TmgmtSmartlingLogSettingsTest.php
+++ b/modules/tmgmt_smartling_log_settings/tests/src/Functional/TmgmtSmartlingLogSettingsTest.php
@@ -28,7 +28,7 @@ class TmgmtSmartlingLogSettingsTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $admin_user = $this->drupalCreateUser(['administer site configuration']);
@@ -39,7 +39,8 @@ class TmgmtSmartlingLogSettingsTest extends BrowserTestBase {
    * Tests the tmgmt_smartling_log_settings settings page.
    */
   public function testValidSettingsNotEmptyConfig() {
-    $this->drupalPostForm('admin/config/development/logging', ['tmgmt_smartling_log_settings_severity_mapping' => "smartling_api: info\r\ntmgmt_smartling: notice"], t('Save configuration'));
+    $this->drupalGet('admin/config/development/logging');
+    $this->submitForm(['tmgmt_smartling_log_settings_severity_mapping' => "smartling_api: info\r\ntmgmt_smartling: notice"], t('Save configuration'));
     $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));
   }
 
@@ -47,7 +48,8 @@ class TmgmtSmartlingLogSettingsTest extends BrowserTestBase {
    * Tests the tmgmt_smartling_log_settings settings page: empty config.
    */
   public function testValidSettingsEmptyConfig() {
-    $this->drupalPostForm('admin/config/development/logging', ['tmgmt_smartling_log_settings_severity_mapping' => ""], t('Save configuration'));
+    $this->drupalGet('admin/config/development/logging');
+    $this->submitForm(['tmgmt_smartling_log_settings_severity_mapping' => ""], t('Save configuration'));
     $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));
   }
 
@@ -55,7 +57,8 @@ class TmgmtSmartlingLogSettingsTest extends BrowserTestBase {
    * Tests the tmgmt_smartling_log_settings settings page: invalid yaml.
    */
   public function testSettingsInvalidYaml() {
-    $this->drupalPostForm('admin/config/development/logging', ['tmgmt_smartling_log_settings_severity_mapping' => "smartling_api: info\r\n- tmgmt_smartling: notice"], t('Save configuration'));
+    $this->drupalGet('admin/config/development/logging');
+    $this->submitForm(['tmgmt_smartling_log_settings_severity_mapping' => "smartling_api: info\r\n- tmgmt_smartling: notice"], t('Save configuration'));
     $this->assertSession()->pageTextContains(t('Config must be a valid yaml.'));
   }
 
@@ -63,7 +66,8 @@ class TmgmtSmartlingLogSettingsTest extends BrowserTestBase {
    * Tests the tmgmt_smartling_log_settings settings page: not array.
    */
   public function testSettingsInvalidConfigNotArray() {
-    $this->drupalPostForm('admin/config/development/logging', ['tmgmt_smartling_log_settings_severity_mapping' => "smartling_api info"], t('Save configuration'));
+    $this->drupalGet('admin/config/development/logging');
+    $this->submitForm(['tmgmt_smartling_log_settings_severity_mapping' => "smartling_api info"], t('Save configuration'));
     $this->assertSession()->pageTextContains(t('Invalid config format.'));
   }
 
@@ -71,7 +75,8 @@ class TmgmtSmartlingLogSettingsTest extends BrowserTestBase {
    * Tests the tmgmt_smartling_log_settings settings page: keys are not strings.
    */
   public function testSettingsInvalidConfigKeysAreNotStrings() {
-    $this->drupalPostForm('admin/config/development/logging', ['tmgmt_smartling_log_settings_severity_mapping' => "- smartling_api: info\r\n- tmgmt_smartling: notice"], t('Save configuration'));
+    $this->drupalGet('admin/config/development/logging');
+    $this->submitForm(['tmgmt_smartling_log_settings_severity_mapping' => "- smartling_api: info\r\n- tmgmt_smartling: notice"], t('Save configuration'));
     $this->assertSession()->pageTextContains(t('Invalid config format.'));
   }
 
@@ -79,7 +84,8 @@ class TmgmtSmartlingLogSettingsTest extends BrowserTestBase {
    * Tests the tmgmt_smartling_log_settings settings page: values are not strings.
    */
   public function testSettingsInvalidConfigOneOrMoreValuesAreNotValidSeverityLevel() {
-    $this->drupalPostForm('admin/config/development/logging', ['tmgmt_smartling_log_settings_severity_mapping' => "smartling_api: info\r\ntmgmt_smartling: severity_level"], t('Save configuration'));
+    $this->drupalGet('admin/config/development/logging');
+    $this->submitForm(['tmgmt_smartling_log_settings_severity_mapping' => "smartling_api: info\r\ntmgmt_smartling: severity_level"], t('Save configuration'));
     $this->assertSession()->pageTextContains(t('Invalid config format.'));
   }
 
diff --git a/modules/tmgmt_smartling_log_settings/tests/src/Kernel/TmgmtSmartlingLogSettingsTest.php b/modules/tmgmt_smartling_log_settings/tests/src/Kernel/TmgmtSmartlingLogSettingsTest.php
index fe4e797..37c603c 100644
--- a/modules/tmgmt_smartling_log_settings/tests/src/Kernel/TmgmtSmartlingLogSettingsTest.php
+++ b/modules/tmgmt_smartling_log_settings/tests/src/Kernel/TmgmtSmartlingLogSettingsTest.php
@@ -16,7 +16,7 @@ class TmgmtSmartlingLogSettingsTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['syslog', 'tmgmt_smartling_log_settings']);
   }
diff --git a/src/Context/ContextUploader.php b/src/Context/ContextUploader.php
index cee6940..5555c10 100644
--- a/src/Context/ContextUploader.php
+++ b/src/Context/ContextUploader.php
@@ -126,7 +126,7 @@ class ContextUploader {
 
       // Save context file.
       if (\Drupal::service('file_system')->prepareDirectory($smartling_context_directory, FileSystemInterface::CREATE_DIRECTORY) &&
-          ($file = file_save_data($html, $smartling_context_file, FileSystemInterface::EXISTS_REPLACE))
+          ($file = \Drupal::service('file.repository')->writeData($html, $smartling_context_file, FileSystemInterface::EXISTS_REPLACE))
       ) {
         $response = $this->uploadContextBody($url, $file, $proj_settings, $filename);
         $this->uploadContextMissingResources($smartling_context_directory, $proj_settings);
@@ -291,7 +291,7 @@ class ContextUploader {
             // be able to fopen() resource which is behind basic auth. So
             // download it first (with a help of curl), save it to smartling's
             // directory and then upload.
-            if ($file = file_save_data($smartling_context_resource_file_content, $smartling_context_resource_file, FileSystemInterface::EXISTS_REPLACE)) {
+            if ($file = \Drupal::service('file.repository')->writeData($smartling_context_resource_file_content, $smartling_context_resource_file, FileSystemInterface::EXISTS_REPLACE)) {
               $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager')->getViaUri($file->getFileUri());
               $params = new UploadResourceParameters();
               $params->setFile($stream_wrapper_manager->realpath());
diff --git a/src/Event/AfterFileDownloadEvent.php b/src/Event/AfterFileDownloadEvent.php
index 4f8bafb..e890b33 100644
--- a/src/Event/AfterFileDownloadEvent.php
+++ b/src/Event/AfterFileDownloadEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\tmgmt_smartling\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 class AfterFileDownloadEvent extends Event implements JobBasedEventInterface {
   use JobBasedEventTrait;
diff --git a/src/Event/RequestTranslationEvent.php b/src/Event/RequestTranslationEvent.php
index 79b2a16..e32a553 100644
--- a/src/Event/RequestTranslationEvent.php
+++ b/src/Event/RequestTranslationEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\tmgmt_smartling\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 class RequestTranslationEvent extends Event implements JobBasedEventInterface {
   use JobBasedEventTrait;
diff --git a/src/Plugin/tmgmt/Translator/SmartlingTranslator.php b/src/Plugin/tmgmt/Translator/SmartlingTranslator.php
index 06c8269..1e8b13d 100755
--- a/src/Plugin/tmgmt/Translator/SmartlingTranslator.php
+++ b/src/Plugin/tmgmt/Translator/SmartlingTranslator.php
@@ -275,9 +275,9 @@ class SmartlingTranslator extends TranslatorPluginBase implements
 
     if (\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY)) {
       $data = $export->export($job);
-      $file = file_save_data($data, $path, FileSystemInterface::EXISTS_REPLACE);
+      $file = \Drupal::service('file.repository')->writeData($data, $path, FileSystemInterface::EXISTS_REPLACE);
       $this->fileUsage->add($file, 'tmgmt_smartling', 'tmgmt_job', $job->id());
-      $job->submitted('Exported file can be downloaded <a href="@link">here</a>.', array('@link' => file_create_url($path)));
+      $job->submitted('Exported file can be downloaded <a href="@link">here</a>.', array('@link' => \Drupal::service('file_url_generator')->generateAbsoluteString($path)));
     }
     else {
       $e = new \Exception('It is not possible to create a directory ' . $dirname);
@@ -337,7 +337,7 @@ class SmartlingTranslator extends TranslatorPluginBase implements
         ]);
       }
 
-      $this->eventDispatcher->dispatch(RequestTranslationEvent::REQUEST_TRANSLATION_EVENT, new RequestTranslationEvent($job));
+      $this->eventDispatcher->dispatch(new RequestTranslationEvent($job), RequestTranslationEvent::REQUEST_TRANSLATION_EVENT);
 
       if (!$this->translationRequestManager->commitSuccessfulUpload($job, $translation_request)) {
         $warning_message = 'Can\'t update submitted date for translation request = @translation_request.';
diff --git a/tests/src/Functional/BaseFlowTest.php b/tests/src/Functional/BaseFlowTest.php
index d7d127f..2998ec9 100644
--- a/tests/src/Functional/BaseFlowTest.php
+++ b/tests/src/Functional/BaseFlowTest.php
@@ -21,16 +21,16 @@ class BaseFlowTest extends SmartlingTestBase {
 
       // Check fr node title before translation (should be same as en title).
       $this->drupalGet("$this->targetLanguage/node/$this->testNodeId");
-      $this->assertResponse(200);
-      $this->assertText($this->testNodeTitle);
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->pageTextContains($this->testNodeTitle);
 
       // Download translated file.
       $this->downloadAndCheckTranslatedFile($job->id(), $fileName);
 
       // Check translation.
       $this->drupalGet("$this->targetLanguage/node/$this->testNodeId");
-      $this->assertResponse(200);
-      $this->assertNoText($this->testNodeTitle);
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->pageTextNotContains($this->testNodeTitle);
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -45,19 +45,24 @@ class BaseFlowTest extends SmartlingTestBase {
    */
   public function testRequestTranslationWhenOneProviderAvailable() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/translators/manage/smartling', $this->smartlingPluginProviderSettings, t('Save'));
-      $this->drupalPostForm('/admin/tmgmt/translators/manage/local/delete', [], t('Delete'));
-      $this->drupalPostForm('/admin/tmgmt/translators/manage/file/delete', [], t('Delete'));
-      $this->drupalPostForm('/admin/tmgmt/translators/manage/test_translator/delete', [], t('Delete'));
+      $this->drupalGet('/admin/tmgmt/translators/manage/smartling');
+      $this->submitForm($this->smartlingPluginProviderSettings, t('Save'));
+      $this->drupalGet('/admin/tmgmt/translators/manage/local/delete');
+      $this->submitForm([], t('Delete'));
+      $this->drupalGet('/admin/tmgmt/translators/manage/file/delete');
+      $this->submitForm([], t('Delete'));
+      $this->drupalGet('/admin/tmgmt/translators/manage/test_translator/delete');
+      $this->submitForm([], t('Delete'));
+      $this->drupalGet('/admin/tmgmt/sources');
 
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         'items[1]' => 1,
         'target_language' => 'de',
       ], t('Request translation'));
 
-      $this->assertText('One job needs to be checked out.');
-      $this->assertText('Create new job');
-      $this->assertText('Add to job');
+      $this->assertSession()->pageTextContains('One job needs to be checked out.');
+      $this->assertSession()->pageTextContains('Create new job');
+      $this->assertSession()->pageTextContains('Add to job');
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
diff --git a/tests/src/Functional/ContextTest.php b/tests/src/Functional/ContextTest.php
index b93a4e1..4b4b800 100644
--- a/tests/src/Functional/ContextTest.php
+++ b/tests/src/Functional/ContextTest.php
@@ -21,21 +21,22 @@ class ContextTest extends SmartlingTestBase {
       $translator = $this->setUpSmartlingProviderSettings($this->smartlingPluginProviderSettings);
       $job = $this->requestTranslationForNode($this->testNodeId, $this->targetLanguage, $translator);
       $fileName = $job->getTranslatorPlugin()->getFileName($job);
-      $this->drupalPostForm('admin/tmgmt/job_items', [
-        'action' => 'tmgmt_smartling_send_context',
-        'tmgmt_job_item_bulk_form[0]' => 'WyJ1bmQiLCIxIl0=',
-      ], t('Apply to selected items'), [
+      $this->drupalGet('admin/tmgmt/job_items', [
         'query' => [
           'state' => 'All',
           'source_language' => 'All',
           'target_language' => 'All',
         ],
       ]);
-      $this->drupalPostForm(NULL, [], t('Send Context to Smartling'));
+      $this->submitForm([
+        'action' => 'tmgmt_smartling_send_context',
+        'tmgmt_job_item_bulk_form[0]' => 'WyJ1bmQiLCIxIl0=',
+      ], t('Apply to selected items'));
+      $this->submitForm([], t('Send Context to Smartling'));
       $this->drupalGet('admin/reports/dblog');
-      $this->assertRaw('We are about to switch user');
-      $this->assertRaw('User was successfully switched');
-      $this->assertRaw(t('Context upload for file @filename completed successfully.', ['@filename' => $fileName]));
+      $this->assertSession()->responseContains('We are about to switch user');
+      $this->assertSession()->responseContains('User was successfully switched');
+      $this->assertSession()->responseContains(t('Context upload for file @filename completed successfully.', ['@filename' => $fileName]));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -52,9 +53,9 @@ class ContextTest extends SmartlingTestBase {
       $fileName = $job->getTranslatorPlugin()->getFileName($job);
       $this->cronRun();
       $this->drupalGet('admin/reports/dblog');
-      $this->assertRaw('We are about to switch user');
-      $this->assertRaw('User was successfully switched');
-      $this->assertRaw(t('Context upload for file @filename completed successfully.', ['@filename' => $fileName]));
+      $this->assertSession()->responseContains('We are about to switch user');
+      $this->assertSession()->responseContains('User was successfully switched');
+      $this->assertSession()->responseContains(t('Context upload for file @filename completed successfully.', ['@filename' => $fileName]));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -67,12 +68,13 @@ class ContextTest extends SmartlingTestBase {
   public function testSmartlingContextDebuggerShowContext() {
     if (!empty($this->smartlingPluginProviderSettings)) {
       global $base_url;
+      $this->drupalGet('admin/tmgmt/smartling-context-debug');
 
-      $this->drupalPostForm('admin/tmgmt/smartling-context-debug', [
+      $this->submitForm([
         'do_direct_output' => TRUE,
         'url' => 'https://www.smartling.com',
       ], t('Test context'));
-      $this->assertText("Move the World with Words");
+      $this->assertSession()->pageTextContains("Move the World with Words");
       $this->drupalGet('admin/reports/dblog');
     }
     else {
@@ -96,7 +98,7 @@ class ContextTest extends SmartlingTestBase {
       }
 
       $this->drupalGet('admin/tmgmt/smartling-context-debug');
-      $this->assertText('No Smartling configs found. Please create Smartling config first');
+      $this->assertSession()->pageTextContains('No Smartling configs found. Please create Smartling config first');
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -109,27 +111,29 @@ class ContextTest extends SmartlingTestBase {
   public function testSmartlingContextDebuggerSendContext() {
     if (!empty($this->smartlingPluginProviderSettings)) {
       global $base_url;
+      $this->drupalGet('admin/tmgmt/translators/manage/smartling');
 
       // Workaround: TmgmtSmartlingContextDebugForm::submitForm() uses global
       // config not provider config:
       // \Drupal::config('tmgmt.translator.smartling')->get('settings');
-      $this->drupalPostForm('admin/tmgmt/translators/manage/smartling', $this->smartlingPluginProviderSettings, t('Save'));
+      $this->submitForm($this->smartlingPluginProviderSettings, t('Save'));
 
       $translator = $this->setUpSmartlingProviderSettings($this->smartlingPluginProviderSettings);
       $job = $this->requestTranslationForNode($this->testNodeId, $this->targetLanguage, $translator);
       $fileName = $job->getTranslatorPlugin()->getFileName($job);
       $this->checkGeneratedFile($fileName, $this->testNodeTitle);
+      $this->drupalGet('admin/tmgmt/smartling-context-debug');
 
-      $this->drupalPostForm('admin/tmgmt/smartling-context-debug', [
+      $this->submitForm([
         'do_direct_output' => FALSE,
         'filename' => $fileName,
         'url' => $base_url . '/node/' . $this->testNodeId,
       ], t('Test context'));
-      $this->assertNoText($this->testNodeTitle);
-      $this->assertNoText($this->testNodeBody);
-      $this->assertText('Smartling response');
+      $this->assertSession()->pageTextNotContains($this->testNodeTitle);
+      $this->assertSession()->pageTextNotContains($this->testNodeBody);
+      $this->assertSession()->pageTextContains('Smartling response');
       $this->drupalGet('admin/reports/dblog');
-      $this->assertRaw(t('Context upload for file @filename completed successfully.', ['@filename' => $fileName]));
+      $this->assertSession()->responseContains(t('Context upload for file @filename completed successfully.', ['@filename' => $fileName]));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -146,15 +150,15 @@ class ContextTest extends SmartlingTestBase {
       $fileName = $job->getTranslatorPlugin()->getFileName($job);
       $this->cronRun();
       $this->drupalGet('admin/reports/dblog');
-      $this->assertRaw('We are about to switch user');
-      $this->assertRaw(t('User @name has logged out.', [
+      $this->assertSession()->responseContains('We are about to switch user');
+      $this->assertSession()->responseContains(t('User @name has logged out.', [
         '@name' => 'Anonymous',
       ]));
-      $this->assertRaw(t('User @name has logged in.', [
+      $this->assertSession()->responseContains(t('User @name has logged in.', [
         '@name' => $this->smartlingPluginProviderSettings['settings[contextUsername]'],
       ]));
-      $this->assertRaw('User was successfully switched');
-      $this->assertRaw(t('Context upload for file @filename completed successfully.', ['@filename' => $fileName]));
+      $this->assertSession()->responseContains('User was successfully switched');
+      $this->assertSession()->responseContains(t('Context upload for file @filename completed successfully.', ['@filename' => $fileName]));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -175,15 +179,15 @@ class ContextTest extends SmartlingTestBase {
       $fileName = $job->getTranslatorPlugin()->getFileName($job);
       $this->cronRun();
       $this->drupalGet('admin/reports/dblog');
-      $this->assertRaw('We are about to switch user');
-      $this->assertNoRaw(t('User @name has logged out.', [
+      $this->assertSession()->responseContains('We are about to switch user');
+      $this->assertSession()->responseNotContains(t('User @name has logged out.', [
         '@name' => 'Anonymous',
       ]));
-      $this->assertNoRaw(t('User @name has logged in.', [
+      $this->assertSession()->responseNotContains(t('User @name has logged in.', [
         '@name' => $this->smartlingPluginProviderSettings['settings[contextUsername]'],
       ]));
-      $this->assertRaw('User was successfully switched');
-      $this->assertRaw(t('Context upload for file @filename completed successfully.', ['@filename' => $fileName]));
+      $this->assertSession()->responseContains('User was successfully switched');
+      $this->assertSession()->responseContains(t('Context upload for file @filename completed successfully.', ['@filename' => $fileName]));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -201,17 +205,18 @@ class ContextTest extends SmartlingTestBase {
       $translator = $this->setUpSmartlingProviderSettings($this->smartlingPluginProviderSettings);
       $job = $this->requestTranslationForNode($this->testNodeId, $this->targetLanguage, $translator);
       $fileName = $job->getTranslatorPlugin()->getFileName($job);
-      $this->drupalPostForm('admin/tmgmt/job_items', [
-        'action' => 'tmgmt_smartling_send_context',
-        'tmgmt_job_item_bulk_form[0]' => 'WyJ1bmQiLCIxIl0=',
-      ], t('Apply to selected items'), [
+      $this->drupalGet('admin/tmgmt/job_items', [
         'query' => [
           'state' => 'All',
           'source_language' => 'All',
           'target_language' => 'All',
         ],
       ]);
-      $this->drupalPostForm(NULL, [], t('Send Context to Smartling'));
+      $this->submitForm([
+        'action' => 'tmgmt_smartling_send_context',
+        'tmgmt_job_item_bulk_form[0]' => 'WyJ1bmQiLCIxIl0=',
+      ], t('Apply to selected items'));
+      $this->submitForm([], t('Send Context to Smartling'));
 
       $fileName = str_replace('.', '_', $fileName);
       $file_path = \Drupal::getContainer()->get('file_system')->realpath(\Drupal::config('system.file')->get('default_scheme') . "://tmgmt_smartling_context/{$fileName}.html");
diff --git a/tests/src/Functional/FileNameTest.php b/tests/src/Functional/FileNameTest.php
index ec0584f..fad1988 100644
--- a/tests/src/Functional/FileNameTest.php
+++ b/tests/src/Functional/FileNameTest.php
@@ -16,13 +16,13 @@ class FileNameTest extends SmartlingTestBase {
     $translator = $this->setUpSmartlingProviderSettings($this->smartlingPluginProviderSettings);
     $job = $this->requestTranslationForNode($this->testNodeId, $this->targetLanguage, $translator);
     $fileName = $job->getTranslatorPlugin()->getFileName($job);
-    $this->assertEqual($fileName, 'JobID1_en_fr.xml');
+    $this->assertEquals($fileName, 'JobID1_en_fr.xml');
 
     $newJob = $this->requestTranslationForNode($this->testNodeId, 'de', $translator);
     $newFileName = $newJob->getTranslatorPlugin()->getFileName($newJob);
-    $this->assertEqual($newFileName, 'JobID2_en_de.xml');
-    $this->assertNotEqual($job->id(), $newJob->id());
-    $this->assertNotEqual($fileName, $newFileName);
+    $this->assertEquals($newFileName, 'JobID2_en_de.xml');
+    $this->assertNotEquals($job->id(), $newJob->id());
+    $this->assertNotEquals($fileName, $newFileName);
   }
 
   /**
@@ -32,7 +32,7 @@ class FileNameTest extends SmartlingTestBase {
     $translator = $this->setUpSmartlingProviderSettings($this->smartlingPluginProviderSettings);
     $job = $this->requestTranslationForNode($this->testNodeId, $this->targetLanguage, $translator);
     $fileName = $job->getTranslatorPlugin()->getFileName($job);
-    $this->assertEqual($fileName, 'JobID1_en_fr.xml');
+    $this->assertEquals($fileName, 'JobID1_en_fr.xml');
   }
 
   /**
@@ -44,8 +44,8 @@ class FileNameTest extends SmartlingTestBase {
     $translator = $this->setUpSmartlingProviderSettings($this->smartlingPluginProviderSettings);
     $job = $this->requestTranslationForNode($this->testNodeId, $this->targetLanguage, $translator);
     $fileName = $job->getTranslatorPlugin()->getFileName($job);
-    $this->assertNotEqual($fileName, 'JobID1_en_fr.xml');
-    $this->assertEqual($fileName, 'TEST_job_id_1.xml');
+    $this->assertNotEquals($fileName, 'JobID1_en_fr.xml');
+    $this->assertEquals($fileName, 'TEST_job_id_1.xml');
   }
 
 }
diff --git a/tests/src/Functional/JobsTest.php b/tests/src/Functional/JobsTest.php
index 4c37c31..6d28587 100644
--- a/tests/src/Functional/JobsTest.php
+++ b/tests/src/Functional/JobsTest.php
@@ -36,8 +36,9 @@ class JobsTest extends SmartlingTestBase {
     }
     catch (SchemaObjectExistsException $e) {
     }
+    $this->drupalGet('/admin/tmgmt/translators/manage/smartling');
 
-    $this->drupalPostForm('/admin/tmgmt/translators/manage/smartling', [
+    $this->submitForm([
       'settings[project_id]' => $this->smartlingPluginProviderSettings['settings[project_id]'],
       'settings[user_id]' => $this->smartlingPluginProviderSettings['settings[user_id]'],
       'settings[token_secret]' => $this->smartlingPluginProviderSettings['settings[token_secret]'],
@@ -47,7 +48,7 @@ class JobsTest extends SmartlingTestBase {
   /**
    * {@inheritdoc}
    */
-  public function tearDown() {
+  public function tearDown(): void {
     $api_wrapper = Drupal::service('tmgmt_smartling.smartling_api_wrapper');
     $api_wrapper->setSettings([
       'user_id' => $this->smartlingPluginProviderSettings['settings[user_id]'],
@@ -83,16 +84,16 @@ class JobsTest extends SmartlingTestBase {
     $job->requestTranslation();
 
     $this->drupalGet('/admin/reports/dblog');
-    $this->assertUniqueText(t('File @name (job id = @job_id) wasn\'t uploaded', [
+    $this->assertSession()->pageTextContainsOnce(t('File @name (job id = @job_id) wasn\'t uploaded', [
       '@name' => $job->getTranslatorPlugin()->getFileName($job),
       '@job_id' => $job->id(),
     ]));
-    $this->assertNoText(t('Smartling updated a job'));
-    $this->assertNoText(t('Smartling created a batch'));
-    $this->assertNoText(t('File uploaded. Job id: @job_id.', [
+    $this->assertSession()->pageTextNotContains(t('Smartling updated a job'));
+    $this->assertSession()->pageTextNotContains(t('Smartling created a batch'));
+    $this->assertSession()->pageTextNotContains(t('File uploaded. Job id: @job_id.', [
       '@job_id' => $job->id(),
     ]));
-    $this->assertNoText(t('Smartling executed a batch'));
+    $this->assertSession()->pageTextNotContains(t('Smartling executed a batch'));
   }
 
   /**
@@ -107,12 +108,12 @@ class JobsTest extends SmartlingTestBase {
     $method->setAccessible(true);
 
     $job_bucket_name = $method->invokeArgs($bucket_job_manager, []);
-    $this->assertNotEqual($job_bucket_name, $name);
+    $this->assertNotEquals($job_bucket_name, $name);
 
     \Drupal::service('module_installer')->install(['tmgmt_smartling_test_alter_filename']);
 
     $job_bucket_name = $method->invokeArgs($bucket_job_manager, []);
-    $this->assertEqual($job_bucket_name, $name);
+    $this->assertEquals($job_bucket_name, $name);
   }
 
   /**
@@ -120,13 +121,14 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testBucketJob() {
     if (!empty($this->smartlingPluginProviderSettings)) {
+      $this->drupalGet('/admin/tmgmt/sources');
       // 1. Send content in a job.
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         'items[1]' => 1,
         'target_language' => '_all',
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => 'Drupal TMGMT connector test ' . mt_rand(),
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -150,8 +152,8 @@ class JobsTest extends SmartlingTestBase {
       $batch_uid_old_1 = $data1[0]['batch_uid'];
       $batch_uid_old_2 = $data1[1]['batch_uid'];
 
-      $this->assertEqual($batch_uid_old_1, $batch_uid_old_2, 'First two files will be uploaded into the same batch.');
-      $this->assertEqual($data1, [
+      $this->assertEquals($batch_uid_old_1, $batch_uid_old_2, 'First two files will be uploaded into the same batch.');
+      $this->assertEquals($data1, [
         [
           'id' => 1,
           'batch_uid' => $batch_uid_old_1,
@@ -176,9 +178,9 @@ class JobsTest extends SmartlingTestBase {
       $batch_uid_new_1 = $data2[2]['batch_uid'];
       $batch_uid_new_2 = $data2[3]['batch_uid'];
 
-      $this->assertEqual($batch_uid_new_1, $batch_uid_new_2, 'Second two files will be uploaded into the same batch.');
-      $this->assertNotEqual($batch_uid_old_1, $batch_uid_new_1, 'First and second batches are different.');
-      $this->assertEqual($data2, [
+      $this->assertEquals($batch_uid_new_1, $batch_uid_new_2, 'Second two files will be uploaded into the same batch.');
+      $this->assertNotEquals($batch_uid_old_1, $batch_uid_new_1, 'First and second batches are different.');
+      $this->assertEquals($data2, [
         [
           'id' => 1,
           'batch_uid' => $batch_uid_old_1,
@@ -211,11 +213,12 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testCreateJobEmptyNameValidation() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->drupalGet('/admin/tmgmt/sources');
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => '',
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -224,7 +227,7 @@ class JobsTest extends SmartlingTestBase {
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
 
-      $this->assertText(t('Job Name field is required.'));
+      $this->assertSession()->pageTextContains(t('Job Name field is required.'));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -237,12 +240,13 @@ class JobsTest extends SmartlingTestBase {
   public function testCreateJobExistingNameValidation() {
     if (!empty($this->smartlingPluginProviderSettings)) {
       $existing_job_name = 'Drupal TMGMT connector test: EXISTING JOB';
+      $this->drupalGet('/admin/tmgmt/sources');
 
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => $existing_job_name,
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -250,12 +254,13 @@ class JobsTest extends SmartlingTestBase {
         'settings[create_new_job_tab][authorize]' => TRUE,
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
+      $this->drupalGet('/admin/tmgmt/sources');
 
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => $existing_job_name,
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -264,7 +269,7 @@ class JobsTest extends SmartlingTestBase {
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
 
-      $this->assertText(t('Job with name "@name" already exists. Please choose another job name.', [
+      $this->assertSession()->pageTextContains(t('Job with name "@name" already exists. Please choose another job name.', [
         '@name' => $existing_job_name,
       ]));
     }
@@ -278,11 +283,12 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testCreateJobDueDateValidation() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->drupalGet('/admin/tmgmt/sources');
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => 'Test',
         'settings[create_new_job_tab][due_date][date]' => '2012-12-12',
@@ -291,8 +297,8 @@ class JobsTest extends SmartlingTestBase {
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
 
-      $this->assertText(t('Due date can not be in the past.'));
-      $this->assertNoText(t('Please enter a date in the format'));
+      $this->assertSession()->pageTextContains(t('Due date can not be in the past.'));
+      $this->assertSession()->pageTextNotContains(t('Please enter a date in the format'));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -304,11 +310,12 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testCreateJobDueDateValidationInvalidDate() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->drupalGet('/admin/tmgmt/sources');
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => 'Test',
         'settings[create_new_job_tab][due_date][date]' => '2012-12-12',
@@ -317,14 +324,15 @@ class JobsTest extends SmartlingTestBase {
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
 
-      $this->assertText(t('Please enter a date in the format'));
-      $this->assertNoText(t('Due date can not be in the past.'));
+      $this->assertSession()->pageTextContains(t('Please enter a date in the format'));
+      $this->assertSession()->pageTextNotContains(t('Due date can not be in the past.'));
+      $this->drupalGet('/admin/tmgmt/sources');
 
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => 'Test',
         'settings[create_new_job_tab][due_date][date]' => '',
@@ -333,8 +341,8 @@ class JobsTest extends SmartlingTestBase {
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
 
-      $this->assertText(t('Please enter a date in the format'));
-      $this->assertNoText(t('Due date can not be in the past.'));
+      $this->assertSession()->pageTextContains(t('Please enter a date in the format'));
+      $this->assertSession()->pageTextNotContains(t('Due date can not be in the past.'));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -346,11 +354,12 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testAddToJobDueDateValidation() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->drupalGet('/admin/tmgmt/sources');
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[switcher]' => TMGMT_SMARTLING_ADD_TO_JOB,
         'settings[add_to_job_tab][container][job_info][due_date][date]' => '2012-12-12',
@@ -359,8 +368,8 @@ class JobsTest extends SmartlingTestBase {
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
 
-      $this->assertText(t('Due date can not be in the past.'));
-      $this->assertNoText(t('Please enter a date in the format'));
+      $this->assertSession()->pageTextContains(t('Due date can not be in the past.'));
+      $this->assertSession()->pageTextNotContains(t('Please enter a date in the format'));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -372,11 +381,12 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testAddToJobDueDateValidationInvalidDate() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->drupalGet('/admin/tmgmt/sources');
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[switcher]' => TMGMT_SMARTLING_ADD_TO_JOB,
         'settings[add_to_job_tab][container][job_info][due_date][date]' => '2012-12-12',
@@ -385,14 +395,15 @@ class JobsTest extends SmartlingTestBase {
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
 
-      $this->assertText(t('Please enter a date in the format'));
-      $this->assertNoText(t('Due date can not be in the past.'));
+      $this->assertSession()->pageTextContains(t('Please enter a date in the format'));
+      $this->assertSession()->pageTextNotContains(t('Due date can not be in the past.'));
+      $this->drupalGet('/admin/tmgmt/sources');
 
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[switcher]' => TMGMT_SMARTLING_ADD_TO_JOB,
         'settings[add_to_job_tab][container][job_info][due_date][date]' => '',
@@ -401,8 +412,8 @@ class JobsTest extends SmartlingTestBase {
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
 
-      $this->assertText(t('Please enter a date in the format'));
-      $this->assertNoText(t('Due date can not be in the past.'));
+      $this->assertSession()->pageTextContains(t('Please enter a date in the format'));
+      $this->assertSession()->pageTextNotContains(t('Due date can not be in the past.'));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -414,11 +425,12 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testCreateJobSingleSync() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->drupalGet('/admin/tmgmt/sources');
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => 'Drupal TMGMT connector test ' . mt_rand(),
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -430,18 +442,18 @@ class JobsTest extends SmartlingTestBase {
       $job = Job::load(1);
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertUniqueText(t('Smartling created a job'));
-      $this->assertNoText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a job'));
+      $this->assertSession()->pageTextNotContains(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertUniqueText(t('Smartling executed a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 1);
     }
@@ -455,12 +467,13 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testCreateJobQueueSync() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->drupalGet('/admin/tmgmt/sources');
+      $this->submitForm([
         'items[1]' => 1,
         'target_language' => '_all',
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => 'Drupal TMGMT connector test ' . mt_rand(),
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -473,26 +486,26 @@ class JobsTest extends SmartlingTestBase {
       $job2 = Job::load(2);
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertUniqueText(t('Smartling created a job'));
-      $this->assertNoText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a job'));
+      $this->assertSession()->pageTextNotContains(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertUniqueText(t('Smartling executed a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 2);
     }
@@ -506,15 +519,17 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testCreateJobSingleAsync() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/translators/manage/smartling', [
+      $this->drupalGet('/admin/tmgmt/translators/manage/smartling');
+      $this->submitForm([
         'settings[async_mode]' => TRUE,
       ], t('Save'));
+      $this->drupalGet('/admin/tmgmt/sources');
 
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => 'Drupal TMGMT connector test ' . mt_rand(),
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -523,23 +538,23 @@ class JobsTest extends SmartlingTestBase {
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
 
-      $this->assertText(t('Job has been put into upload queue.'));
+      $this->assertSession()->pageTextContains(t('Job has been put into upload queue.'));
 
       $job = Job::load(1);
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertUniqueText(t('Smartling created a job'));
-      $this->assertNoText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertNoText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a job'));
+      $this->assertSession()->pageTextNotContains(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      $this->assertSession()->pageTextNotContains(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertNoText(t('Smartling executed a batch'));
+      $this->assertSession()->pageTextNotContains(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('tmgmt_extension_suit_upload') == 1);
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 0);
@@ -547,18 +562,18 @@ class JobsTest extends SmartlingTestBase {
       $this->processQueue('tmgmt_extension_suit_upload');
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertUniqueText(t('Smartling created a job'));
-      $this->assertNoText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a job'));
+      $this->assertSession()->pageTextNotContains(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertUniqueText(t('Smartling executed a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('tmgmt_extension_suit_upload') == 0);
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 1);
@@ -573,16 +588,18 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testCreateJobQueueAsync() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/translators/manage/smartling', [
+      $this->drupalGet('/admin/tmgmt/translators/manage/smartling');
+      $this->submitForm([
         'settings[async_mode]' => TRUE,
       ], t('Save'));
+      $this->drupalGet('/admin/tmgmt/sources');
 
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         'items[1]' => 1,
         'target_language' => '_all',
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => 'Drupal TMGMT connector test ' . mt_rand(),
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -591,32 +608,32 @@ class JobsTest extends SmartlingTestBase {
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider and continue'));
 
-      $this->assertText(t('Job has been put into upload queue.'));
+      $this->assertSession()->pageTextContains(t('Job has been put into upload queue.'));
 
       $job1 = Job::load(1);
       $job2 = Job::load(2);
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertUniqueText(t('Smartling created a job'));
-      $this->assertNoText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertNoText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a job'));
+      $this->assertSession()->pageTextNotContains(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      $this->assertSession()->pageTextNotContains(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertNoText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertNoText(t('Smartling executed a batch'));
+      $this->assertSession()->pageTextNotContains(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('tmgmt_extension_suit_upload') == 2);
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 0);
@@ -624,26 +641,26 @@ class JobsTest extends SmartlingTestBase {
       $this->processQueue('tmgmt_extension_suit_upload');
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertUniqueText(t('Smartling created a job'));
-      $this->assertNoText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a job'));
+      $this->assertSession()->pageTextNotContains(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertUniqueText(t('Smartling executed a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('tmgmt_extension_suit_upload') == 0);
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 2);
@@ -658,11 +675,12 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testAddToJobSingleSync() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->drupalGet('/admin/tmgmt/sources');
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[switcher]' => TMGMT_SMARTLING_ADD_TO_JOB,
         'settings[add_to_job_tab][container][job_info][due_date][date]' => '2120-12-12',
@@ -674,18 +692,18 @@ class JobsTest extends SmartlingTestBase {
       $job = Job::load(1);
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertNoText(t('Smartling created a job'));
-      $this->assertUniqueText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Smartling created a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertUniqueText(t('Smartling executed a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 1);
     }
@@ -699,12 +717,13 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testAddToJobQueueSync() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->drupalGet('/admin/tmgmt/sources');
+      $this->submitForm([
         'items[1]' => 1,
         'target_language' => '_all',
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[switcher]' => TMGMT_SMARTLING_ADD_TO_JOB,
         'settings[add_to_job_tab][container][job_info][due_date][date]' => '2120-12-12',
@@ -717,26 +736,26 @@ class JobsTest extends SmartlingTestBase {
       $job2 = Job::load(2);
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertNoText(t('Smartling created a job'));
-      $this->assertUniqueText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Smartling created a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertUniqueText(t('Smartling executed a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 2);
     }
@@ -751,16 +770,18 @@ class JobsTest extends SmartlingTestBase {
   public function testAddToJobSingleAsync() {
     if (!empty($this->smartlingPluginProviderSettings)) {
       if (!empty($this->smartlingPluginProviderSettings)) {
-        $this->drupalPostForm('/admin/tmgmt/translators/manage/smartling', [
+        $this->drupalGet('/admin/tmgmt/translators/manage/smartling');
+        $this->submitForm([
           'settings[async_mode]' => TRUE,
         ], t('Save'));
       }
+      $this->drupalGet('/admin/tmgmt/sources');
 
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[switcher]' => TMGMT_SMARTLING_ADD_TO_JOB,
         'settings[add_to_job_tab][container][job_info][due_date][date]' => '2120-12-12',
@@ -772,18 +793,18 @@ class JobsTest extends SmartlingTestBase {
       $job = Job::load(1);
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertNoText(t('Smartling created a job'));
-      $this->assertUniqueText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertNoText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Smartling created a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      $this->assertSession()->pageTextNotContains(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertNoText(t('Smartling executed a batch'));
+      $this->assertSession()->pageTextNotContains(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('tmgmt_extension_suit_upload') == 1);
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 0);
@@ -791,18 +812,18 @@ class JobsTest extends SmartlingTestBase {
       $this->processQueue('tmgmt_extension_suit_upload');
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertNoText(t('Smartling created a job'));
-      $this->assertUniqueText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Smartling created a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertUniqueText(t('Smartling executed a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('tmgmt_extension_suit_upload') == 0);
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 1);
@@ -818,17 +839,19 @@ class JobsTest extends SmartlingTestBase {
   public function testAddToJobQueueAsync() {
     if (!empty($this->smartlingPluginProviderSettings)) {
       if (!empty($this->smartlingPluginProviderSettings)) {
-        $this->drupalPostForm('/admin/tmgmt/translators/manage/smartling', [
+        $this->drupalGet('/admin/tmgmt/translators/manage/smartling');
+        $this->submitForm([
           'settings[async_mode]' => TRUE,
         ], t('Save'));
       }
+      $this->drupalGet('/admin/tmgmt/sources');
 
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         'items[1]' => 1,
         'target_language' => '_all',
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[switcher]' => TMGMT_SMARTLING_ADD_TO_JOB,
         'settings[add_to_job_tab][container][job_info][due_date][date]' => '2120-12-12',
@@ -841,26 +864,26 @@ class JobsTest extends SmartlingTestBase {
       $job2 = Job::load(2);
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertNoText(t('Smartling created a job'));
-      $this->assertUniqueText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertNoText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Smartling created a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      $this->assertSession()->pageTextNotContains(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertNoText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertNoText(t('Smartling executed a batch'));
+      $this->assertSession()->pageTextNotContains(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('tmgmt_extension_suit_upload') == 2);
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 0);
@@ -868,26 +891,26 @@ class JobsTest extends SmartlingTestBase {
       $this->processQueue('tmgmt_extension_suit_upload');
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertNoText(t('Smartling created a job'));
-      $this->assertUniqueText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Smartling created a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertUniqueText(t('Smartling executed a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('tmgmt_extension_suit_upload') == 0);
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 2);
diff --git a/tests/src/Functional/LockFieldsTest.php b/tests/src/Functional/LockFieldsTest.php
index e14df6a..e0a942c 100644
--- a/tests/src/Functional/LockFieldsTest.php
+++ b/tests/src/Functional/LockFieldsTest.php
@@ -25,7 +25,8 @@ class LockFieldsTest extends SmartlingTestBase {
    */
   public function testFieldLockingLogic() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/translators/manage/smartling', [
+      $this->drupalGet('/admin/tmgmt/translators/manage/smartling');
+      $this->submitForm([
         'auto_accept' => $this->smartlingPluginProviderSettings['auto_accept'],
         'settings[project_id]' => $this->smartlingPluginProviderSettings['settings[project_id]'],
         'settings[user_id]' => $this->smartlingPluginProviderSettings['settings[user_id]'],
@@ -33,27 +34,28 @@ class LockFieldsTest extends SmartlingTestBase {
         'settings[contextUsername]' => $this->smartlingPluginProviderSettings['settings[contextUsername]'],
         'settings[retrieval_type]' => $this->smartlingPluginProviderSettings['settings[retrieval_type]'],
       ], 'Save');
+      $this->drupalGet('admin/tmgmt/extension-settings');
 
-      $this->drupalPostForm('admin/tmgmt/extension-settings', [
+      $this->submitForm([
         'do_track_changes' => FALSE,
       ], t('Save configuration'));
+      $this->drupalGet("node/add/translatable_node");
 
-      $this->drupalPostForm(
-        "node/add/translatable_node", [
-          'title[0][value]' => 'test title',
-          'body[0][value]' => 'test body',
-          'langcode[0][value]' => 'en',
-        ], t('Save')
-      );
+      $this->submitForm([
+        'title[0][value]' => 'test title',
+        'body[0][value]' => 'test body',
+        'langcode[0][value]' => 'en',
+      ], t('Save'));
 
       $nid = 4;
+      $this->drupalGet('/admin/tmgmt/sources');
 
       // 1. Translate node into FR and DE.
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         "items[$nid]" => $nid,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'fr',
         'settings[create_new_job_tab][name]' => 'Drupal TMGMT connector test FR ' . mt_rand(),
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -61,12 +63,13 @@ class LockFieldsTest extends SmartlingTestBase {
         'settings[create_new_job_tab][authorize]' => TRUE,
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
+      $this->drupalGet('/admin/tmgmt/sources');
 
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         "items[$nid]" => $nid,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => 'Drupal TMGMT connector test DE ' . mt_rand(),
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -74,68 +77,68 @@ class LockFieldsTest extends SmartlingTestBase {
         'settings[create_new_job_tab][authorize]' => TRUE,
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
+      $this->drupalGet("admin/tmgmt/jobs/1");
 
-      $this->drupalPostForm("admin/tmgmt/jobs/1", [], t('Download'));
-      $this->drupalPostForm("admin/tmgmt/jobs/2", [], t('Download'));
+      $this->submitForm([], t('Download'));
+      $this->drupalGet("admin/tmgmt/jobs/2");
+      $this->submitForm([], t('Download'));
 
       $this->drupalGet("node/$nid/edit");
-      $this->assertNoText('Smartling management');
-      $this->assertNoText('Lock fields');
-      $this->assertResponse(200);
+      $this->assertSession()->pageTextNotContains('Smartling management');
+      $this->assertSession()->pageTextNotContains('Lock fields');
+      $this->assertSession()->statusCodeEquals(200);
 
       $this->drupalGet("fr/node/$nid/edit");
-      $this->assertText('Smartling management');
-      $this->assertText('Lock fields');
-      $this->assertNoFieldChecked('locked_fields[title]');
-      $this->assertNoFieldChecked('locked_fields[body]');
-      $this->assertResponse(200);
+      $this->assertSession()->pageTextContains('Smartling management');
+      $this->assertSession()->pageTextContains('Lock fields');
+      $this->assertSession()->checkboxNotChecked('locked_fields[title]');
+      $this->assertSession()->checkboxNotChecked('locked_fields[body]');
+      $this->assertSession()->statusCodeEquals(200);
 
       $this->drupalGet("de/node/$nid/edit");
-      $this->assertText('Smartling management');
-      $this->assertText('Lock fields');
-      $this->assertNoFieldChecked('locked_fields[title]');
-      $this->assertNoFieldChecked('locked_fields[body]');
-      $this->assertResponse(200);
+      $this->assertSession()->pageTextContains('Smartling management');
+      $this->assertSession()->pageTextContains('Lock fields');
+      $this->assertSession()->checkboxNotChecked('locked_fields[title]');
+      $this->assertSession()->checkboxNotChecked('locked_fields[body]');
+      $this->assertSession()->statusCodeEquals(200);
+      $this->drupalGet("fr/node/$nid/edit");
 
       // 2. Lock title for FR.
-      $this->drupalPostForm(
-        "fr/node/$nid/edit", [
-          'title[0][value]' => 'Manually edited title',
-          'locked_fields[title]' => 'title',
-        ], t('Save (this translation)')
-      );
+      $this->submitForm([
+        'title[0][value]' => 'Manually edited title',
+        'locked_fields[title]' => 'title',
+      ], t('Save (this translation)'));
 
       $this->drupalGet("fr/node/$nid/edit");
-      $this->assertFieldChecked('locked_fields[title]');
-      $this->assertNoFieldChecked('locked_fields[body]');
-      $this->assertResponse(200);
+      $this->assertSession()->checkboxChecked('locked_fields[title]');
+      $this->assertSession()->checkboxNotChecked('locked_fields[body]');
+      $this->assertSession()->statusCodeEquals(200);
+      $this->drupalGet("de/node/$nid/edit");
 
       // 3. Lock body for DE.
-      $this->drupalPostForm(
-        "de/node/$nid/edit", [
-          'body[0][value]' => 'Manually edited body',
-          'locked_fields[body]' => 'body',
-        ], t('Save (this translation)')
-      );
+      $this->submitForm([
+        'body[0][value]' => 'Manually edited body',
+        'locked_fields[body]' => 'body',
+      ], t('Save (this translation)'));
 
       $this->drupalGet("de/node/$nid/edit");
-      $this->assertNoFieldChecked('locked_fields[title]');
-      $this->assertFieldChecked('locked_fields[body]');
-      $this->assertResponse(200);
+      $this->assertSession()->checkboxNotChecked('locked_fields[title]');
+      $this->assertSession()->checkboxChecked('locked_fields[body]');
+      $this->assertSession()->statusCodeEquals(200);
+      $this->drupalGet("node/$nid/edit");
 
       // 4. Download updated translations.
-      $this->drupalPostForm(
-        "node/$nid/edit", [
-          'title[0][value]' => 'test title new',
-          'body[0][value]' => 'test body new',
-        ], t('Save (this translation)')
-      );
-
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
+        'title[0][value]' => 'test title new',
+        'body[0][value]' => 'test body new',
+      ], t('Save (this translation)'));
+      $this->drupalGet('/admin/tmgmt/sources');
+
+      $this->submitForm([
         "items[$nid]" => $nid,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'fr',
         'settings[create_new_job_tab][name]' => 'Drupal TMGMT connector test FR ' . mt_rand(),
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -143,12 +146,13 @@ class LockFieldsTest extends SmartlingTestBase {
         'settings[create_new_job_tab][authorize]' => TRUE,
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
+      $this->drupalGet('/admin/tmgmt/sources');
 
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         "items[$nid]" => $nid,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => 'Drupal TMGMT connector test DE ' . mt_rand(),
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -156,51 +160,51 @@ class LockFieldsTest extends SmartlingTestBase {
         'settings[create_new_job_tab][authorize]' => TRUE,
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
+      $this->drupalGet("admin/tmgmt/jobs/3");
 
-      $this->drupalPostForm("admin/tmgmt/jobs/3", [], t('Download'));
-      $this->drupalPostForm("admin/tmgmt/jobs/4", [], t('Download'));
+      $this->submitForm([], t('Download'));
+      $this->drupalGet("admin/tmgmt/jobs/4");
+      $this->submitForm([], t('Download'));
 
       // 5. FR: only body updated.
       $this->drupalGet("fr/node/$nid");
-      $this->assertResponse(200);
-      $this->assertText('Manually edited title');
-      $this->assertText('[t~ést ~bódý ~ñéw]');
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->pageTextContains('Manually edited title');
+      $this->assertSession()->pageTextContains('[t~ést ~bódý ~ñéw]');
 
       // 6. DE: only title updated.
       $this->drupalGet("de/node/$nid");
-      $this->assertResponse(200);
-      $this->assertText('[t~ést t~ítlé ~ñéw]');
-      $this->assertText('Manually edited body');
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->pageTextContains('[t~ést t~ítlé ~ñéw]');
+      $this->assertSession()->pageTextContains('Manually edited body');
+      $this->drupalGet("fr/node/$nid/edit");
 
       // 7. Unlock all fields for FR.
-      $this->drupalPostForm(
-        "fr/node/$nid/edit", [
-          'locked_fields[title]' => FALSE,
-          'locked_fields[body]' => FALSE,
-        ], t('Save (this translation)')
-      );
+      $this->submitForm([
+        'locked_fields[title]' => FALSE,
+        'locked_fields[body]' => FALSE,
+      ], t('Save (this translation)'));
+      $this->drupalGet("de/node/$nid/edit");
 
       // 8. Unlock all fields for DE.
-      $this->drupalPostForm(
-        "de/node/$nid/edit", [
-            'locked_fields[title]' => FALSE,
-            'locked_fields[body]' => FALSE,
-          ], t('Save (this translation)')
-      );
+      $this->submitForm([
+          'locked_fields[title]' => FALSE,
+          'locked_fields[body]' => FALSE,
+        ], t('Save (this translation)'));
+      $this->drupalGet("node/$nid/edit");
 
       // 9. Download updated translations.
-      $this->drupalPostForm(
-        "node/$nid/edit", [
-          'title[0][value]' => 'test title brand new',
-          'body[0][value]' => 'test body brand new',
-        ], t('Save (this translation)')
-      );
-
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
+        'title[0][value]' => 'test title brand new',
+        'body[0][value]' => 'test body brand new',
+      ], t('Save (this translation)'));
+      $this->drupalGet('/admin/tmgmt/sources');
+
+      $this->submitForm([
         "items[$nid]" => $nid,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'fr',
         'settings[create_new_job_tab][name]' => 'Drupal TMGMT connector test FR ' . mt_rand(),
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -208,12 +212,13 @@ class LockFieldsTest extends SmartlingTestBase {
         'settings[create_new_job_tab][authorize]' => TRUE,
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
+      $this->drupalGet('/admin/tmgmt/sources');
 
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         "items[$nid]" => $nid,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => 'Drupal TMGMT connector test DE ' . mt_rand(),
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -221,20 +226,22 @@ class LockFieldsTest extends SmartlingTestBase {
         'settings[create_new_job_tab][authorize]' => TRUE,
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
+      $this->drupalGet("admin/tmgmt/jobs/5");
 
-      $this->drupalPostForm("admin/tmgmt/jobs/5", [], t('Download'));
-      $this->drupalPostForm("admin/tmgmt/jobs/6", [], t('Download'));
+      $this->submitForm([], t('Download'));
+      $this->drupalGet("admin/tmgmt/jobs/6");
+      $this->submitForm([], t('Download'));
 
       // 10. FR and DE are updated as well.
       $this->drupalGet("fr/node/$nid");
-      $this->assertResponse(200);
-      $this->assertText('[t~ést t~ítlé ~bráñ~d ñéw]');
-      $this->assertText('[t~ést b~ódý b~ráñd ~ñéw]');
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->pageTextContains('[t~ést t~ítlé ~bráñ~d ñéw]');
+      $this->assertSession()->pageTextContains('[t~ést b~ódý b~ráñd ~ñéw]');
 
       $this->drupalGet("de/node/$nid");
-      $this->assertResponse(200);
-      $this->assertText('[t~ést t~ítlé ~bráñ~d ñéw]');
-      $this->assertText('[t~ést b~ódý b~ráñd ~ñéw]');
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->pageTextContains('[t~ést t~ítlé ~bráñ~d ñéw]');
+      $this->assertSession()->pageTextContains('[t~ést b~ódý b~ráñd ~ñéw]');
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
diff --git a/tests/src/Functional/LoggingTest.php b/tests/src/Functional/LoggingTest.php
index dc99f70..1c26df5 100644
--- a/tests/src/Functional/LoggingTest.php
+++ b/tests/src/Functional/LoggingTest.php
@@ -35,8 +35,9 @@ class LoggingTest extends SmartlingTestBase {
     }
     catch (SchemaObjectExistsException $e) {
     }
+    $this->drupalGet('/admin/tmgmt/translators/manage/smartling');
 
-    $this->drupalPostForm('/admin/tmgmt/translators/manage/smartling', [
+    $this->submitForm([
       'settings[project_id]' => $this->smartlingPluginProviderSettings['settings[project_id]'],
       'settings[user_id]' => $this->smartlingPluginProviderSettings['settings[user_id]'],
       'settings[token_secret]' => $this->smartlingPluginProviderSettings['settings[token_secret]'],
@@ -59,11 +60,12 @@ class LoggingTest extends SmartlingTestBase {
    */
   public function testRequestTranslationEventLogging() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->drupalGet('/admin/tmgmt/sources');
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => 'Drupal TMGMT connector test ' . mt_rand(),
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -75,12 +77,12 @@ class LoggingTest extends SmartlingTestBase {
       $this->drupalGet('/admin/reports/dblog');
 
       // File triggered/queued.
-      $this->assertRaw('File upload triggered (request translation). Job id: 1, file name: JobID1_en_de.xml.');
-      $this->assertNoRaw('File upload queued (track entity changes). Job id: 1, file name: JobID1_en_de.xml.');
+      $this->assertSession()->responseContains('File upload triggered (request translation). Job id: 1, file name: JobID1_en_de.xml.');
+      $this->assertSession()->responseNotContains('File upload queued (track entity changes). Job id: 1, file name: JobID1_en_de.xml.');
 
       // File uploaded.
-      $this->assertRaw('File uploaded. Job id: 1, file name: JobID1_en_de.xml.');
-      $this->assertNoRaw('File uploaded. Job id: 2, file name: JobID2_en_fr.xml.');
+      $this->assertSession()->responseContains('File uploaded. Job id: 1, file name: JobID1_en_de.xml.');
+      $this->assertSession()->responseNotContains('File uploaded. Job id: 2, file name: JobID2_en_fr.xml.');
 
       $api_wrapper = Drupal::service('tmgmt_smartling.smartling_api_wrapper');
       $api_wrapper->setSettings([
@@ -119,9 +121,10 @@ class LoggingTest extends SmartlingTestBase {
       // Create a job. It is needed for test.
       $translator = Translator::load('smartling');
       $this->requestTranslationForNode($this->testNodeId, 'de', $translator);
+      $this->drupalGet('/admin/reports/dblog/confirm');
 
       // Clean log messages after job submission.
-      $this->drupalPostForm('/admin/reports/dblog/confirm', [], t('Confirm'));
+      $this->submitForm([], t('Confirm'));
 
       $node = Node::load($this->testNodeId);
       $node->setTitle('New title');
@@ -130,11 +133,11 @@ class LoggingTest extends SmartlingTestBase {
       $this->drupalGet('/admin/reports/dblog');
 
       // File triggered/queued.
-      $this->assertNoRaw('File upload triggered (request translation). Job id: 1, file name: JobID1_en_de.xml.');
-      $this->assertRaw('File upload queued (track entity changes). Job id: 1, file name: JobID1_en_de.xml.');
+      $this->assertSession()->responseNotContains('File upload triggered (request translation). Job id: 1, file name: JobID1_en_de.xml.');
+      $this->assertSession()->responseContains('File upload queued (track entity changes). Job id: 1, file name: JobID1_en_de.xml.');
 
       // File uploaded.
-      $this->assertNoRaw('File uploaded. Job id: 1, file name: JobID1_en_de.xml.');
+      $this->assertSession()->responseNotContains('File uploaded. Job id: 1, file name: JobID1_en_de.xml.');
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
diff --git a/tests/src/Functional/PushBackControllerTest.php b/tests/src/Functional/PushBackControllerTest.php
index fb0d2ab..2d9074f 100644
--- a/tests/src/Functional/PushBackControllerTest.php
+++ b/tests/src/Functional/PushBackControllerTest.php
@@ -26,7 +26,7 @@ class PushBackControllerTest extends SmartlingTestBase {
           'locale' => 'fr-FR',
         ],
       ]);
-      $this->assertResponse(404);
+      $this->assertSession()->statusCodeEquals(404);
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -45,7 +45,7 @@ class PushBackControllerTest extends SmartlingTestBase {
 
       // Try to push back existing job without locale and fileUri parameters.
       $this->drupalGet("tmgmt-smartling-callback/{$job->id()}");
-      $this->assertResponse(404);
+      $this->assertSession()->statusCodeEquals(404);
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -68,7 +68,7 @@ class PushBackControllerTest extends SmartlingTestBase {
           'fileUri' => $fileName,
         ],
       ]);
-      $this->assertResponse(404);
+      $this->assertSession()->statusCodeEquals(404);
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -90,7 +90,7 @@ class PushBackControllerTest extends SmartlingTestBase {
           'locale' => 'fr-FR',
         ],
       ]);
-      $this->assertResponse(404);
+      $this->assertSession()->statusCodeEquals(404);
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -109,8 +109,8 @@ class PushBackControllerTest extends SmartlingTestBase {
 
       // Check fr node title before translation (should be same as en title).
       $this->drupalGet("$this->targetLanguage/node/$this->testNodeId");
-      $this->assertResponse(200);
-      $this->assertText($this->testNodeTitle);
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->pageTextContains($this->testNodeTitle);
 
       // Try to push back existing job.
       $this->drupalGet("tmgmt-smartling-callback/{$job->id()}", [
@@ -119,12 +119,12 @@ class PushBackControllerTest extends SmartlingTestBase {
           'locale' => 'fr-FR',
         ],
       ]);
-      $this->assertResponse(200);
+      $this->assertSession()->statusCodeEquals(200);
 
       // Check fr node title after translation (should be same as en title).
       $this->drupalGet("$this->targetLanguage/node/$this->testNodeId");
-      $this->assertResponse(200);
-      $this->assertNoText($this->testNodeTitle);
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->pageTextNotContains($this->testNodeTitle);
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -171,7 +171,7 @@ class PushBackControllerTest extends SmartlingTestBase {
       $translatorPlugin = $job->getTranslatorPlugin();
       $callbackUrl = $this->invokeMethod($translatorPlugin, 'getCallbackUrl', [$job]);
 
-      $this->assertNotEqual($base_url, $testHost);
+      $this->assertNotEquals($base_url, $testHost);
       $this->assertTrue($testHost . '/tmgmt-smartling-callback/1', $callbackUrl);
     }
     else {
diff --git a/tests/src/Functional/RequirementsTest.php b/tests/src/Functional/RequirementsTest.php
index be625fc..4739ca7 100644
--- a/tests/src/Functional/RequirementsTest.php
+++ b/tests/src/Functional/RequirementsTest.php
@@ -14,9 +14,9 @@ class RequirementsTest extends SmartlingTestBase {
    */
   public function testRequirements() {
     $this->drupalGet("/admin/reports/status");
-    $this->assertText("Smartling PHP max_execution_time");
-    $this->assertText("PHP max_execution_time is recommended to be set at least 300. Current value is 30");
-    $this->assertText("Background processes might take time to be done");
+    $this->assertSession()->pageTextContains("Smartling PHP max_execution_time");
+    $this->assertSession()->pageTextContains("PHP max_execution_time is recommended to be set at least 300. Current value is 30");
+    $this->assertSession()->pageTextContains("Background processes might take time to be done");
   }
 
 }
diff --git a/tests/src/Functional/RevisionInflationTest.php b/tests/src/Functional/RevisionInflationTest.php
index 9e56604..3f3954f 100644
--- a/tests/src/Functional/RevisionInflationTest.php
+++ b/tests/src/Functional/RevisionInflationTest.php
@@ -46,33 +46,33 @@ class RevisionInflationTest extends SmartlingTestBase {
       $job = $this->requestTranslationForNode([$node_1->id(), $node_2->id()], $this->targetLanguage, $translator);
 
       $this->drupalGet("/admin/tmgmt/jobs/1");
-      $this->assertResponse(200);
-      $this->assertNoText("has been accepted as");
-      $this->assertNoText("Import of downloaded file was skipped: downloaded and existing translations are equal.");
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->pageTextNotContains("has been accepted as");
+      $this->assertSession()->pageTextNotContains("Import of downloaded file was skipped: downloaded and existing translations are equal.");
       $this->assertTrue($job->isActive());
 
       $job->getTranslatorPlugin()->downloadTranslation($job);
       $job = Job::load($job->id());
       $this->drupalGet("/admin/tmgmt/jobs/1");
-      $this->assertResponse(200);
-      $this->assertText("The translation for Post 1 title has been accepted");
-      $this->assertText("The translation for Post 2 title has been accepted");
-      $this->assertNoText("Import of downloaded file was skipped: downloaded and existing translations are equal.");
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->pageTextContains("The translation for Post 1 title has been accepted");
+      $this->assertSession()->pageTextContains("The translation for Post 2 title has been accepted");
+      $this->assertSession()->pageTextNotContains("Import of downloaded file was skipped: downloaded and existing translations are equal.");
       $this->assertTrue($job->isFinished());
 
       foreach ($job->getItems() as $item) {
-        $this->assertEqual($item->isAccepted(), TRUE);
+        $this->assertEquals($item->isAccepted(), TRUE);
       }
 
       $job->getTranslatorPlugin()->downloadTranslation($job);
       $job = Job::load($job->id());
       $this->drupalGet("/admin/tmgmt/jobs/1");
-      $this->assertResponse(200);
-      $this->assertText("Import of downloaded file was skipped: downloaded and existing translations are equal.");
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->pageTextContains("Import of downloaded file was skipped: downloaded and existing translations are equal.");
       $this->assertTrue($job->isFinished());
 
       foreach ($job->getItems() as $item) {
-        $this->assertEqual($item->isAccepted(), TRUE);
+        $this->assertEquals($item->isAccepted(), TRUE);
       }
 
       foreach ($job->getMessages() as $message) {
@@ -85,34 +85,34 @@ class RevisionInflationTest extends SmartlingTestBase {
       $node_1->save();
 
       $this->drupalGet("/admin/tmgmt/jobs/1");
-      $this->assertResponse(200);
-      $this->assertNoText("has been accepted as");
-      $this->assertNoText("Import of downloaded file was skipped: downloaded and existing translations are equal.");
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->pageTextNotContains("has been accepted as");
+      $this->assertSession()->pageTextNotContains("Import of downloaded file was skipped: downloaded and existing translations are equal.");
       $this->assertTrue($job->isFinished());
 
       $job->getTranslatorPlugin()->downloadTranslation($job);
       $job = Job::load($job->id());
       $this->drupalGet("/admin/tmgmt/jobs/1");
-      $this->assertResponse(200);
-      $this->assertText("The translation for Post 1 title has been accepted");
-      $this->assertNoText("The translation for Post 2 title has been accepted");
-      $this->assertNoText("Import of downloaded file was skipped: downloaded and existing translations are equal.");
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->pageTextContains("The translation for Post 1 title has been accepted");
+      $this->assertSession()->pageTextNotContains("The translation for Post 2 title has been accepted");
+      $this->assertSession()->pageTextNotContains("Import of downloaded file was skipped: downloaded and existing translations are equal.");
       $this->assertTrue($job->isFinished());
 
       foreach ($job->getItems() as $item) {
-        $this->assertEqual($item->isAccepted(), TRUE);
+        $this->assertEquals($item->isAccepted(), TRUE);
       }
 
       $job->getTranslatorPlugin()->downloadTranslation($job);
       $job = Job::load($job->id());
       $this->drupalGet("/admin/tmgmt/jobs/1");
-      $this->assertResponse(200);
-      $this->assertNoText("The translation for Post 2 title has been accepted");
-      $this->assertText("Import of downloaded file was skipped: downloaded and existing translations are equal.");
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->pageTextNotContains("The translation for Post 2 title has been accepted");
+      $this->assertSession()->pageTextContains("Import of downloaded file was skipped: downloaded and existing translations are equal.");
       $this->assertTrue($job->isFinished());
 
       foreach ($job->getItems() as $item) {
-        $this->assertEqual($item->isAccepted(), TRUE);
+        $this->assertEquals($item->isAccepted(), TRUE);
       }
 
       foreach ($job->getMessages() as $message) {
@@ -129,33 +129,33 @@ class RevisionInflationTest extends SmartlingTestBase {
       $node_2->save();
 
       $this->drupalGet("/admin/tmgmt/jobs/1");
-      $this->assertResponse(200);
-      $this->assertNoText("has been accepted as");
-      $this->assertNoText("Import of downloaded file was skipped: downloaded and existing translations are equal.");
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->pageTextNotContains("has been accepted as");
+      $this->assertSession()->pageTextNotContains("Import of downloaded file was skipped: downloaded and existing translations are equal.");
       $this->assertTrue($job->isFinished());
 
       $job->getTranslatorPlugin()->downloadTranslation($job);
       $job = Job::load($job->id());
       $this->drupalGet("/admin/tmgmt/jobs/1");
-      $this->assertResponse(200);
-      $this->assertText("The translation for Post 1 title has been accepted");
-      $this->assertText("The translation for Post 2 title has been accepted");
-      $this->assertNoText("Import of downloaded file was skipped: downloaded and existing translations are equal.");
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->pageTextContains("The translation for Post 1 title has been accepted");
+      $this->assertSession()->pageTextContains("The translation for Post 2 title has been accepted");
+      $this->assertSession()->pageTextNotContains("Import of downloaded file was skipped: downloaded and existing translations are equal.");
       $this->assertTrue($job->isFinished());
 
       foreach ($job->getItems() as $item) {
-        $this->assertEqual($item->isAccepted(), TRUE);
+        $this->assertEquals($item->isAccepted(), TRUE);
       }
 
       $job->getTranslatorPlugin()->downloadTranslation($job);
       $job = Job::load($job->id());
       $this->drupalGet("/admin/tmgmt/jobs/1");
-      $this->assertResponse(200);
-      $this->assertText("Import of downloaded file was skipped: downloaded and existing translations are equal.");
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->pageTextContains("Import of downloaded file was skipped: downloaded and existing translations are equal.");
       $this->assertTrue($job->isFinished());
 
       foreach ($job->getItems() as $item) {
-        $this->assertEqual($item->isAccepted(), TRUE);
+        $this->assertEquals($item->isAccepted(), TRUE);
       }
     }
     else {
@@ -174,15 +174,15 @@ class RevisionInflationTest extends SmartlingTestBase {
       $job = $this->requestTranslationForNode($this->testNodeId, $this->targetLanguage, $translator);
 
       $this->drupalGet("/admin/tmgmt/jobs/1");
-      $this->assertResponse(200);
-      $this->assertNoText("is finished and can now be reviewed.");
-      $this->assertNoText("Import of downloaded file was skipped: downloaded and existing translations are equal.");
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->pageTextNotContains("is finished and can now be reviewed.");
+      $this->assertSession()->pageTextNotContains("Import of downloaded file was skipped: downloaded and existing translations are equal.");
 
       $job->getTranslatorPlugin()->downloadTranslation($job);
       $this->drupalGet("/admin/tmgmt/jobs/1");
-      $this->assertResponse(200);
-      $this->assertText("is finished and can now be reviewed.");
-      $this->assertNoText("Import of downloaded file was skipped: downloaded and existing translations are equal.");
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->pageTextContains("is finished and can now be reviewed.");
+      $this->assertSession()->pageTextNotContains("Import of downloaded file was skipped: downloaded and existing translations are equal.");
 
       foreach ($job->getItems() as $item) {
         $item->acceptTranslation();
@@ -190,8 +190,8 @@ class RevisionInflationTest extends SmartlingTestBase {
 
       $job->getTranslatorPlugin()->downloadTranslation($job);
       $this->drupalGet("/admin/tmgmt/jobs/1");
-      $this->assertResponse(200);
-      $this->assertText("Import of downloaded file was skipped: downloaded and existing translations are equal.");
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->pageTextContains("Import of downloaded file was skipped: downloaded and existing translations are equal.");
       $this->drupalGet("/admin/tmgmt/jobs/1");
     }
     else {
diff --git a/tests/src/Functional/SettingsFormTest.php b/tests/src/Functional/SettingsFormTest.php
index 3e8e9de..ad449c1 100644
--- a/tests/src/Functional/SettingsFormTest.php
+++ b/tests/src/Functional/SettingsFormTest.php
@@ -24,7 +24,7 @@ class SettingsFormTest extends SmartlingTestBase {
       $translator = $this->setUpSmartlingProviderSettings($settings);
       $supported_remote_languages = $translator->getPlugin()->getSupportedRemoteLanguages($translator);
 
-      $this->assertEqual(0, count($supported_remote_languages));
+      $this->assertEquals(0, count($supported_remote_languages));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -39,7 +39,7 @@ class SettingsFormTest extends SmartlingTestBase {
       // Validation with correct parameters.
       $translator = $this->setUpSmartlingProviderSettings($this->smartlingPluginProviderSettings);
       $supported_remote_languages = $translator->getPlugin()->getSupportedRemoteLanguages($translator);
-      $this->assertNotEqual(0, count($supported_remote_languages));
+      $this->assertNotEquals(0, count($supported_remote_languages));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
diff --git a/tests/src/Functional/SmartlingTestBase.php b/tests/src/Functional/SmartlingTestBase.php
index ef412e0..9fda60f 100644
--- a/tests/src/Functional/SmartlingTestBase.php
+++ b/tests/src/Functional/SmartlingTestBase.php
@@ -251,14 +251,15 @@ abstract class SmartlingTestBase extends TMGMTTestBase {
    * @throws \Exception
    */
   protected function downloadAndCheckTranslatedFile($jobId, $fileName) {
-    $this->drupalPostForm("admin/tmgmt/jobs/$jobId", [], t('Download'));
+    $this->drupalGet("admin/tmgmt/jobs/$jobId");
+    $this->submitForm([], t('Download'));
     $this->drupalGet('admin/reports/dblog');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // TODO: don't know why assertLink and assertRaw doesn't work with quoted
     // strings.
-    $this->assertRaw('Translation for');
-    $this->assertRaw($fileName);
-    $this->assertRaw('was successfully downloaded and imported.');
+    $this->assertSession()->responseContains('Translation for');
+    $this->assertSession()->responseContains($fileName);
+    $this->assertSession()->responseContains('was successfully downloaded and imported.');
   }
 
   /**
diff --git a/tests/src/Kernel/BaseFlowTest.php b/tests/src/Kernel/BaseFlowTest.php
index 104207a..d4054fd 100644
--- a/tests/src/Kernel/BaseFlowTest.php
+++ b/tests/src/Kernel/BaseFlowTest.php
@@ -17,14 +17,9 @@ class BaseFlowTest extends SmartlingTestBase {
   public function setUp(): void {
     parent::setUp();
 
-    $api_factory_mock = $this->getMockBuilder('\Drupal\tmgmt_smartling\Smartling\SmartlingApiFactory')
-      ->setMethods(NULL)
-      ->getMock();
+    $api_factory_mock = $this->createMock('\Drupal\tmgmt_smartling\Smartling\SmartlingApiFactory');
 
-    $logger_mock = $this->getMockBuilder('\Drupal\Core\Logger\LoggerChannel')
-      ->setMethods(NULL)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger_mock = $this->createMock('\Drupal\Core\Logger\LoggerChannel');
 
     $this->apiWrapperMock = $this->getMockBuilder('\Drupal\tmgmt_smartling\Smartling\SmartlingApiWrapper')
       ->setMethods([
diff --git a/tests/src/Kernel/BufferLoggerTest.php b/tests/src/Kernel/BufferLoggerTest.php
index 638563e..14b0abe 100644
--- a/tests/src/Kernel/BufferLoggerTest.php
+++ b/tests/src/Kernel/BufferLoggerTest.php
@@ -21,12 +21,7 @@ class BufferLoggerTest extends SmartlingTestBase {
   public function setUp(): void {
     parent::setUp();
 
-    $this->httpClient = $this->getMockBuilder('GuzzleHttp\Client')
-      ->setMethods([
-        'request',
-      ])
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->httpClient = $this->createMock('GuzzleHttp\Client');
 
     $this->channel = new LoggerChannel('tmgmt_smartling');
     $this->logger = \Drupal::getContainer()->get('logger.smartling');
diff --git a/tests/src/Kernel/DownloadFlowTest.php b/tests/src/Kernel/DownloadFlowTest.php
index 2b5bb55..7aaafb9 100644
--- a/tests/src/Kernel/DownloadFlowTest.php
+++ b/tests/src/Kernel/DownloadFlowTest.php
@@ -437,12 +437,7 @@ class DownloadFlowTest extends SmartlingTestBase {
       'batch_execute_on_job' => 1,
     ]);
 
-    $field_item_list = $this->getMockBuilder(FieldItemList::class)
-      ->disableOriginalConstructor()
-      ->setMethods([
-        'getValue'
-      ])
-      ->getMock();
+    $field_item_list = $this->createMock(FieldItemList::class);
 
     $field_item_list->expects($this->any())
       ->method('getValue')
@@ -452,17 +447,7 @@ class DownloadFlowTest extends SmartlingTestBase {
         ]
       ]);
 
-    $job_item_mock_1 = $this->getMockBuilder(JobItem::class)
-      ->disableOriginalConstructor()
-      ->setMethods([
-        'save',
-        'id',
-        'setState',
-        'addTranslatedData',
-        'getItemId',
-        'getItemType'
-      ])
-      ->getMock();
+    $job_item_mock_1 = $this->createMock(JobItem::class);
 
     $job_item_mock_1->expects($this->any())
       ->method('id')
@@ -483,16 +468,7 @@ class DownloadFlowTest extends SmartlingTestBase {
     $job_item_mock_1->expects($this->once())
       ->method('addTranslatedData');
 
-    $job_item_mock_2 = $this->getMockBuilder(JobItem::class)
-      ->disableOriginalConstructor()
-      ->setMethods([
-        'id',
-        'setState',
-        'addTranslatedData',
-        'getItemId',
-        'getItemType'
-      ])
-      ->getMock();
+    $job_item_mock_2 = $this->createMock(JobItem::class);
 
     $job_item_mock_2->expects($this->any())
       ->method('id')
@@ -513,23 +489,7 @@ class DownloadFlowTest extends SmartlingTestBase {
     $job_item_mock_2->expects($this->once())
       ->method('addTranslatedData');
 
-    $translate_job = $this->getMockBuilder(Job::class)
-      ->disableOriginalConstructor()
-      ->setMethods([
-        'id',
-        'getItems',
-        'getTranslator',
-        'getTranslatorPlugin',
-        'getSetting',
-        'getSourceLangcode',
-        'getTargetLangcode',
-        'save',
-        'set',
-        'get',
-        'addMessage',
-        'getFieldDefinitions'
-      ])
-      ->getMock();
+    $translate_job = $this->createMock(Job::class);
 
     $translate_job->expects($this->any())
       ->method('id')
@@ -632,12 +592,7 @@ class DownloadFlowTest extends SmartlingTestBase {
       'batch_execute_on_job' => 1,
     ]);
 
-    $field_item_list = $this->getMockBuilder(FieldItemList::class)
-      ->disableOriginalConstructor()
-      ->setMethods([
-        'getValue'
-      ])
-      ->getMock();
+    $field_item_list = $this->createMock(FieldItemList::class);
 
     $field_item_list->expects($this->any())
       ->method('getValue')
@@ -647,17 +602,7 @@ class DownloadFlowTest extends SmartlingTestBase {
         ]
       ]);
 
-    $job_item_mock_1 = $this->getMockBuilder(JobItem::class)
-      ->disableOriginalConstructor()
-      ->setMethods([
-        'save',
-        'id',
-        'setState',
-        'addTranslatedData',
-        'getItemId',
-        'getItemType'
-      ])
-      ->getMock();
+    $job_item_mock_1 = $this->createMock(JobItem::class);
 
     $job_item_mock_1->expects($this->any())
       ->method('id')
@@ -678,16 +623,7 @@ class DownloadFlowTest extends SmartlingTestBase {
     $job_item_mock_1->expects($this->never())
       ->method('addTranslatedData');
 
-    $job_item_mock_2 = $this->getMockBuilder(JobItem::class)
-      ->disableOriginalConstructor()
-      ->setMethods([
-        'id',
-        'setState',
-        'addTranslatedData',
-        'getItemId',
-        'getItemType'
-      ])
-      ->getMock();
+    $job_item_mock_2 = $this->createMock(JobItem::class);
 
     $job_item_mock_2->expects($this->any())
       ->method('id')
@@ -708,23 +644,7 @@ class DownloadFlowTest extends SmartlingTestBase {
     $job_item_mock_2->expects($this->once())
       ->method('addTranslatedData');
 
-    $translate_job = $this->getMockBuilder(Job::class)
-      ->disableOriginalConstructor()
-      ->setMethods([
-        'id',
-        'getItems',
-        'getTranslator',
-        'getTranslatorPlugin',
-        'getSetting',
-        'getSourceLangcode',
-        'getTargetLangcode',
-        'save',
-        'set',
-        'get',
-        'addMessage',
-        'getFieldDefinitions'
-      ])
-      ->getMock();
+    $translate_job = $this->createMock(Job::class);
 
     $translate_job->expects($this->any())
       ->method('id')
diff --git a/tests/src/Kernel/SmartlingTestBase.php b/tests/src/Kernel/SmartlingTestBase.php
index 67d2b97..ec5e20d 100644
--- a/tests/src/Kernel/SmartlingTestBase.php
+++ b/tests/src/Kernel/SmartlingTestBase.php
@@ -41,49 +41,23 @@ abstract class SmartlingTestBase extends TMGMTKernelTestBase {
     $this->installEntitySchema('file');
     $this->installEntitySchema('tmgmt_remote');
 
-    $this->pluginMock = $this->getMockBuilder('\Drupal\tmgmt_smartling\Plugin\tmgmt_file\Format\Xml')
-      ->setMethods(['validateImport', 'import'])
-      ->getMock();
+    $this->pluginMock = $this->createMock('\Drupal\tmgmt_smartling\Plugin\tmgmt_file\Format\Xml');
 
-    $format_manager_mock = $this->getMockBuilder('\Drupal\tmgmt_file\Format\FormatManager')
-      ->disableOriginalConstructor()
-      ->setMethods(['createInstance'])
-      ->getMock();
+    $format_manager_mock = $this->createMock('\Drupal\tmgmt_file\Format\FormatManager');
 
     $format_manager_mock->expects($this->any())
       ->method('createInstance')
       ->willReturn($this->pluginMock);
 
-    $api_factory_mock = $this->getMockBuilder('\Drupal\tmgmt_smartling\Smartling\SmartlingApiFactory')
-      ->setMethods(NULL)
-      ->getMock();
+    $api_factory_mock = $this->createMock('\Drupal\tmgmt_smartling\Smartling\SmartlingApiFactory');
 
-    $this->loggerMock = $this->getMockBuilder('\Drupal\Core\Logger\LoggerChannel')
-      ->setMethods(NULL)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->loggerMock = $this->createMock('\Drupal\Core\Logger\LoggerChannel');
 
-    $this->batchApiMock = $this->getMockBuilder(BatchApi::class)
-      ->disableOriginalConstructor()
-      ->setMethods(['uploadBatchFile'])
-      ->getMock();
+    $this->batchApiMock = $this->createMock(BatchApi::class);
 
-    $this->fileApiMock = $this->getMockBuilder(FileApi::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->fileApiMock = $this->createMock(FileApi::class);
 
-    $this->translationRequestManagerMock = $this->getMockBuilder(TranslationRequestManager::class)
-      ->disableOriginalConstructor()
-      ->setMethods([
-        'getSubmitterName',
-        'getBucketName',
-        'upsertTranslationRequest',
-        'getTranslationRequest',
-        'commitSuccessfulDownload',
-        'commitSuccessfulUpload',
-        'commitError'
-      ])
-      ->getMock();
+    $this->translationRequestManagerMock = $this->createMock(TranslationRequestManager::class);
 
     $this->translationRequestManagerMock->expects($this->any())
       ->method('getSubmitterName')
@@ -112,7 +86,7 @@ abstract class SmartlingTestBase extends TMGMTKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     restore_error_handler();
   }
 
diff --git a/tests/src/Kernel/SmartlingTranslatorTest.php b/tests/src/Kernel/SmartlingTranslatorTest.php
index 2f4e395..a857e1e 100644
--- a/tests/src/Kernel/SmartlingTranslatorTest.php
+++ b/tests/src/Kernel/SmartlingTranslatorTest.php
@@ -27,15 +27,9 @@ class SmartlingTranslatorTest extends SmartlingTestBase {
   public function setUp(): void {
     parent::setUp();
 
-    $this->smartlingTranslator = $this->getMockBuilder(SmartlingTranslatorBeingTested::class)
-      ->disableOriginalConstructor()
-      ->setMethods(NULL)
-      ->getMock();
-
-    $this->moduleHandler = $this->getMockBuilder(ModuleHandler::class)
-      ->setMethods(['alter'])
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->smartlingTranslator = $this->createMock(SmartlingTranslatorBeingTested::class);
+
+    $this->moduleHandler = $this->createMock(ModuleHandler::class);
 
     $this->smartlingTranslator->moduleHandler = $this->moduleHandler;
   }
diff --git a/tests/src/Kernel/TranslationRequestManagerTest.php b/tests/src/Kernel/TranslationRequestManagerTest.php
index d1d6103..35caa7c 100644
--- a/tests/src/Kernel/TranslationRequestManagerTest.php
+++ b/tests/src/Kernel/TranslationRequestManagerTest.php
@@ -27,18 +27,13 @@ class TranslationRequestManagerTest extends SmartlingTestBase {
   public function setUp(): void {
     parent::setUp();
 
-    $api_factory_mock = $this->getMockBuilder('\Drupal\tmgmt_smartling\Smartling\SmartlingApiFactory')
-      ->setMethods(NULL)
-      ->getMock();
+    $api_factory_mock = $this->createMock('\Drupal\tmgmt_smartling\Smartling\SmartlingApiFactory');
 
     $this->apiWrapperMock = $this->getMockBuilder('\Drupal\tmgmt_smartling\Smartling\SmartlingApiWrapper')
       ->setConstructorArgs([$api_factory_mock, $this->loggerMock])
       ->getMock();
 
-    $this->stateMock = $this->getMockBuilder('\Drupal\Core\State\State')
-      ->setMethods(['get'])
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->stateMock = $this->createMock('\Drupal\Core\State\State');
 
     $this->stateMock->expects($this->any())
       ->method('get')
diff --git a/tests/src/Kernel/XmlPluginTest.php b/tests/src/Kernel/XmlPluginTest.php
index 10a7dca..b938f8c 100644
--- a/tests/src/Kernel/XmlPluginTest.php
+++ b/tests/src/Kernel/XmlPluginTest.php
@@ -45,7 +45,7 @@ class XmlPluginTest extends SmartlingTestBase {
 
     $this->assertTrue(strstr($exported_content, "1 new comment!PLURAL_STRING_DELIMITER@count new comments!PLURAL_STRING_DELIMITER@count brand new comments") !== FALSE);
 
-    $file = file_save_data($exported_content, "public://test.xml", FileSystemInterface::EXISTS_REPLACE);
+    $file = \Drupal::service('file.repository')->writeData($exported_content, "public://test.xml", FileSystemInterface::EXISTS_REPLACE);
 
     $imported_string = $this->xmlPlugin->import($file->getFileUri(), $job)[1]['dummy']['deep_nesting']['#text'];
 
@@ -60,11 +60,11 @@ class XmlPluginTest extends SmartlingTestBase {
       $this->xmlPlugin, 'parseSmartlingSlVariantKey', ['node-1-title][0][value']
     );
 
-    $this->assertEqual($parsed_sl_variant['entity_type'], 'node');
-    $this->assertEqual($parsed_sl_variant['entity_id'], 1);
-    $this->assertEqual($parsed_sl_variant['field_name'], 'title');
-    $this->assertEqual($parsed_sl_variant['field_index'], 0);
-    $this->assertEqual($parsed_sl_variant['field_value_name'], 'value');
+    $this->assertEquals($parsed_sl_variant['entity_type'], 'node');
+    $this->assertEquals($parsed_sl_variant['entity_id'], 1);
+    $this->assertEquals($parsed_sl_variant['field_name'], 'title');
+    $this->assertEquals($parsed_sl_variant['field_index'], 0);
+    $this->assertEquals($parsed_sl_variant['field_value_name'], 'value');
   }
 
   /**
@@ -75,7 +75,7 @@ class XmlPluginTest extends SmartlingTestBase {
       $this->xmlPlugin, 'parseSmartlingSlVariantKey', ['node-title][0][value']
     );
 
-    $this->assertEqual($parsed_sl_variant, []);
+    $this->assertEquals($parsed_sl_variant, []);
   }
 
   /**
@@ -86,6 +86,6 @@ class XmlPluginTest extends SmartlingTestBase {
       $this->xmlPlugin, 'parseSmartlingSlVariantKey', ['node-1-title][0]']
     );
 
-    $this->assertEqual($parsed_sl_variant, []);
+    $this->assertEquals($parsed_sl_variant, []);
   }
 }
diff --git a/tmgmt_smartling.module b/tmgmt_smartling.module
index 1505a25..c6f4c5a 100644
--- a/tmgmt_smartling.module
+++ b/tmgmt_smartling.module
@@ -211,7 +211,7 @@ function tmgmt_smartling_download_file(JobInterface $job, JobItemInterface $pass
   $path = $job->getSetting('scheme') . '://tmgmt_smartling_translations/' . $filename;
   $dirname = dirname($path);
 
-  if (\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY) && ($file = file_save_data($xml, $path, FileSystemInterface::EXISTS_REPLACE))) {
+  if (\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY) && ($file = \Drupal::service('file.repository')->writeData($xml, $path, FileSystemInterface::EXISTS_REPLACE))) {
     $plugin = \Drupal::service('plugin.manager.tmgmt_file.format')->createInstance($extension);
 
     if ($plugin) {
@@ -392,7 +392,7 @@ function tmgmt_smartling_theme() {
       'variables' => ['proj_id' => '', 'file_name' => ''],
     ],
     'tmgmt_smartling_xml_template' => [
-      'path' => drupal_get_path('module', 'tmgmt_smartling') . '/templates',
+      'path' => \Drupal::service('extension.list.module')->getPath('tmgmt_smartling') . '/templates',
       'template' => 'tmgmt-smartling-xml-template',
       'variables' => [
         'items' => NULL,
