modules/contrib/weerly/src/EventSubscriber/WeerlyRedirect.php
modules/contrib/weerly/src/WeerlyHelper.php
modules/contrib/weerly/weerly.install
modules/contrib/weerly/weerly.module
modules/contrib/weerly/src/EventSubscriber/WeerlyRedirectOn403Subscriber.php
modules/contrib/weerly/src/Plugin/Validation/Constraint/WeerlyUrlCheckingConstraint.php
modules/contrib/weerly/src/Plugin/Validation/Constraint/WeerlyUrlCheckingConstraintValidator.php

2 files with changes
====================

1) modules/contrib/weerly/src/EventSubscriber/WeerlyRedirectOn403Subscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\weerly\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\EventSubscriber\HttpExceptionSubscriberBase;
 use Drupal\Core\Routing\TrustedRedirectResponse;
@@ @@
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\CurrentRouteMatch;
 use Drupal\Core\Url;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;

 /**
  * Redirect whenever a 403 meets the criteria for unpublished nodes.
@@ @@
   /**
    * Redirects on 403 Access Denied kernel exceptions.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *   The Event to process.
    */
-  public function on403(GetResponseForExceptionEvent $event) {
+  public function on403(ExceptionEvent $event) {

     $request = clone $event->getRequest();
     if ($request->attributes->get('node') != NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/weerly/src/EventSubscriber/WeerlyRedirect.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\weerly\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\TrustedRedirectResponse;
 use Drupal\Core\Session\AccountProxy;
@@ @@
 use Drupal\Core\Url;
 use Drupal\Core\Path\CurrentPathStack;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Redirect requests for `weerly URL` nodes to their destination url.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   Event object of current event.
    */
-  public function redirect(GetResponseEvent $event) {
+  public function redirect(RequestEvent $event) {
     $path = $this->currentPath->getPath();
     $current_path = str_replace("/", "", $path);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


 [OK] 2 files have been changed by Rector                                       

