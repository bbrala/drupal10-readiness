diff --git a/certificate.api.php b/certificate.api.php
index 6d22f1e..5725eae 100644
--- a/certificate.api.php
+++ b/certificate.api.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Access\AccessResult;
 /**
  * @file certificate.api.php
  * Document certificate hooks.
@@ -24,10 +25,10 @@ use Drupal\Core\Session\AccountInterface;
 function hook_entity_access(EntityInterface $entity, $operation, AccountInterface $user) {
   if ($operation == 'certificate') {
     if (get_score($user) > passing_score($entity)) {
-      return \Drupal\Core\Access\AccessResult::allowed();
+      return AccessResult::allowed();
     }
     else {
-      return \Drupal\Core\Access\AccessResult::forbidden();
+      return AccessResult::forbidden();
     }
   }
 }
diff --git a/certificate.module b/certificate.module
index 933ba33..dabae23 100644
--- a/certificate.module
+++ b/certificate.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Link;
 use Drupal\certificate\Form\CertificateConfigForm;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -90,7 +91,7 @@ function certificate_page_attachments(&$page) {
 /**
  * Implements hook_help().
  */
-function certificate_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
+function certificate_help($route_name, RouteMatchInterface $route_match) {
   switch ($route_name) {
     case 'entity.certificate_type.collection':
       return '<p>' . t('Certificate template types are used to create certificate templates. For example instead of a single WYSIWYG field, you can create a certificate template type that uses text fields and image uploads. Then you can use view modes to configure the certificate output.') . '</p>';
diff --git a/modules/quiz_certificate/quiz_certificate.module b/modules/quiz_certificate/quiz_certificate.module
index ce27c23..4aa6eaf 100644
--- a/modules/quiz_certificate/quiz_certificate.module
+++ b/modules/quiz_certificate/quiz_certificate.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\quiz\Entity\Quiz;
+use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
 
@@ -8,7 +10,7 @@ use Drupal\Core\Session\AccountInterface;
  */
 function quiz_certificate_entity_access(EntityInterface $entity, $operation, AccountInterface $user) {
   if ($operation == 'certificate') {
-    if (is_a($entity, \Drupal\quiz\Entity\Quiz::class)) {
+    if (is_a($entity, Quiz::class)) {
       $qrids = \Drupal::entityQuery('quiz_result')
         ->condition('uid', $user->id())
         ->condition('qid', $entity->id())
@@ -17,11 +19,11 @@ function quiz_certificate_entity_access(EntityInterface $entity, $operation, Acc
       $results = \Drupal::entityTypeManager()->getStorage('quiz_result')->loadMultiple($qrids);
       foreach ($results as $result) {
         if ($result->score->value >= $entity->pass_rate->value) {
-          return \Drupal\Core\Access\AccessResult::allowed();
+          return AccessResult::allowed();
         }
       }
 
-      return \Drupal\Core\Access\AccessResult::forbidden();
+      return AccessResult::forbidden();
     }
   }
 }
diff --git a/src/Access/CertificateMappingAccessControlHandler.php b/src/Access/CertificateMappingAccessControlHandler.php
index 9b1ae8c..28b5190 100644
--- a/src/Access/CertificateMappingAccessControlHandler.php
+++ b/src/Access/CertificateMappingAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\certificate\Access;
 
+use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\entity\UncacheableEntityAccessControlHandler;
@@ -10,7 +11,7 @@ class CertificateMappingAccessControlHandler extends UncacheableEntityAccessCont
 
   protected function checkCreateAccess(AccountInterface $account, array $context, $entity_bundle = NULL) {
     if ($account->hasPermission('assign certificates')) {
-      return \Drupal\Core\Access\AccessResultAllowed::allowed();
+      return AccessResultAllowed::allowed();
     }
 
     return parent::checkCreateAccess($account, $context, $entity_bundle);
@@ -18,7 +19,7 @@ class CertificateMappingAccessControlHandler extends UncacheableEntityAccessCont
 
   function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
     if ($account->hasPermission('assign certificates')) {
-      return \Drupal\Core\Access\AccessResultAllowed::allowed();
+      return AccessResultAllowed::allowed();
     }
 
     return parent::checkAccess($entity, $operation, $account);
diff --git a/src/Controller/CertificateController.php b/src/Controller/CertificateController.php
index 01b1ca2..bcfbaf6 100644
--- a/src/Controller/CertificateController.php
+++ b/src/Controller/CertificateController.php
@@ -215,7 +215,7 @@ class CertificateController extends ControllerBase {
     // If no snapshot HTML found, load the entity
     if (empty($html)) {
       $renderView = $certificate_template->renderView($user, $entity);
-      $html = render($renderView);
+      $html = \Drupal::service('renderer')->render($renderView);
     }
 
     // Add base HREF so images work.
diff --git a/src/Entity/CertificateTemplate.php b/src/Entity/CertificateTemplate.php
index d18924f..302a57b 100644
--- a/src/Entity/CertificateTemplate.php
+++ b/src/Entity/CertificateTemplate.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\certificate\Entity;
 
+use Drupal\entity_print\Plugin\PrintEngineBase;
 use Drupal;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EditorialContentEntityBase;
@@ -91,8 +92,8 @@ class CertificateTemplate extends EditorialContentEntityBase {
 
     $fields['orientation'] = BaseFieldDefinition::create('list_string')
       ->setLabel('Orientation')
-      ->setSetting('allowed_values', [\Drupal\entity_print\Plugin\PrintEngineBase::PORTRAIT => 'Portrait', \Drupal\entity_print\Plugin\PrintEngineBase::LANDSCAPE => 'Landscape'])
-      ->setDefaultValue(\Drupal\entity_print\Plugin\PrintEngineBase::PORTRAIT)
+      ->setSetting('allowed_values', [PrintEngineBase::PORTRAIT => 'Portrait', PrintEngineBase::LANDSCAPE => 'Landscape'])
+      ->setDefaultValue(PrintEngineBase::PORTRAIT)
       ->setDisplayOptions('form', [
       'label' => 'above',
       'type' => 'options_buttons',
diff --git a/tests/src/Functional/CertificateTest.php b/tests/src/Functional/CertificateTest.php
index 20d6b98..ef91741 100644
--- a/tests/src/Functional/CertificateTest.php
+++ b/tests/src/Functional/CertificateTest.php
@@ -26,7 +26,7 @@ class CertificateTest extends BrowserTestBase {
   // @todo remove node as dep, something in PDF requiring it
   protected static $modules = ['certificate', 'certificate_test', 'node'];
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->admin_user = $this->createUser(array('administer certificate'));
 
