diff --git a/src/Tests/QuickTabsAdminTest.php b/src/Tests/QuickTabsAdminTest.php
index d5aeb4e..338103c 100644
--- a/src/Tests/QuickTabsAdminTest.php
+++ b/src/Tests/QuickTabsAdminTest.php
@@ -40,7 +40,7 @@ class QuickTabsAdminTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $perms = [
@@ -77,17 +77,17 @@ class QuickTabsAdminTest extends BrowserTestBase {
    */
   public function testQuickTabsAdmin() {
     $this->drupalGet('admin/structure/quicktabs');
-    $this->assertResponse(200);
-    $this->assertRaw('Quick Tabs');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseContains('Quick Tabs');
     $this->drupalGet('admin/structure/quicktabs/add');
-    $this->assertResponse(200);
-    $this->assertRaw('Add QuickTabs Instance');
-    $this->assertRaw('Name');
-    $this->assertRaw('Renderer');
-    $this->assertRaw('Default tab');
-    $this->assertRaw('Hide empty tabs');
-    $this->assertRaw('Add tab');
-    $this->assertRaw('Save');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseContains('Add QuickTabs Instance');
+    $this->assertSession()->responseContains('Name');
+    $this->assertSession()->responseContains('Renderer');
+    $this->assertSession()->responseContains('Default tab');
+    $this->assertSession()->responseContains('Hide empty tabs');
+    $this->assertSession()->responseContains('Add tab');
+    $this->assertSession()->responseContains('Save');
 
     $node1 = $this->drupalCreateNode([
       'title' => $this->t('Node 1'),
@@ -116,31 +116,33 @@ class QuickTabsAdminTest extends BrowserTestBase {
       'configuration_data[1][content][node_content][options][view_mode]' => 'full',
       'configuration_data[1][content][node_content][options][hide_title]' => 1,
     ];
+    $this->drupalGet('admin/structure/quicktabs/add');
 
-    $this->drupalPostForm('admin/structure/quicktabs/add', $edit, $this->t('Save'));
+    $this->submitForm($edit, $this->t('Save'));
 
     $qt = \Drupal::service('entity_type.manager')->getStorage('quicktabs_instance')->load($edit['id']);
 
-    $this->assertEqual('Drupal\quicktabs\Entity\QuickTabsInstance', get_class($qt));
-    $this->assertEqual($qt->id(), $edit['id']);
-    $this->assertEqual($qt->label(), $edit['label']);
-    $this->assertEqual($qt->getRenderer(), $edit['renderer']);
-    $this->assertEqual($qt->getHideEmptyTabs(), $edit['hide_empty_tabs']);
-    $this->assertEqual($qt->getDefaultTab(), $edit['default_tab']);
+    $this->assertEquals('Drupal\quicktabs\Entity\QuickTabsInstance', get_class($qt));
+    $this->assertEquals($qt->id(), $edit['id']);
+    $this->assertEquals($qt->label(), $edit['label']);
+    $this->assertEquals($qt->getRenderer(), $edit['renderer']);
+    $this->assertEquals($qt->getHideEmptyTabs(), $edit['hide_empty_tabs']);
+    $this->assertEquals($qt->getDefaultTab(), $edit['default_tab']);
 
     $configurationData = $qt->getConfigurationData();
-    $this->assertEqual($configurationData[0]['title'], $edit['configuration_data[0][title]']);
-    $this->assertEqual($configurationData[1]['title'], $edit['configuration_data[1][title]']);
-    $this->assertEqual($configurationData[0]['type'], $edit['configuration_data[0][type]']);
-    $this->assertEqual($configurationData[1]['type'], $edit['configuration_data[1][type]']);
-    $this->assertEqual($configurationData[0]['content']['node_content']['options']['nid'], $edit['configuration_data[0][content][node_content][options][nid]']);
-    $this->assertEqual($configurationData[1]['content']['node_content']['options']['nid'], $edit['configuration_data[1][content][node_content][options][nid]']);
-    $this->assertEqual($configurationData[0]['content']['node_content']['options']['view_mode'], $edit['configuration_data[0][content][node_content][options][view_mode]']);
-    $this->assertEqual($configurationData[1]['content']['node_content']['options']['view_mode'], $edit['configuration_data[1][content][node_content][options][view_mode]']);
-    $this->assertEqual($configurationData[0]['content']['node_content']['options']['hide_title'], $edit['configuration_data[0][content][node_content][options][hide_title]']);
-    $this->assertEqual($configurationData[1]['content']['node_content']['options']['hide_title'], $edit['configuration_data[1][content][node_content][options][hide_title]']);
-
-    $this->drupalPostForm('admin/structure/quicktabs/' . $qt->id() . '/delete', [], $this->t('Delete'));
+    $this->assertEquals($configurationData[0]['title'], $edit['configuration_data[0][title]']);
+    $this->assertEquals($configurationData[1]['title'], $edit['configuration_data[1][title]']);
+    $this->assertEquals($configurationData[0]['type'], $edit['configuration_data[0][type]']);
+    $this->assertEquals($configurationData[1]['type'], $edit['configuration_data[1][type]']);
+    $this->assertEquals($configurationData[0]['content']['node_content']['options']['nid'], $edit['configuration_data[0][content][node_content][options][nid]']);
+    $this->assertEquals($configurationData[1]['content']['node_content']['options']['nid'], $edit['configuration_data[1][content][node_content][options][nid]']);
+    $this->assertEquals($configurationData[0]['content']['node_content']['options']['view_mode'], $edit['configuration_data[0][content][node_content][options][view_mode]']);
+    $this->assertEquals($configurationData[1]['content']['node_content']['options']['view_mode'], $edit['configuration_data[1][content][node_content][options][view_mode]']);
+    $this->assertEquals($configurationData[0]['content']['node_content']['options']['hide_title'], $edit['configuration_data[0][content][node_content][options][hide_title]']);
+    $this->assertEquals($configurationData[1]['content']['node_content']['options']['hide_title'], $edit['configuration_data[1][content][node_content][options][hide_title]']);
+    $this->drupalGet('admin/structure/quicktabs/' . $qt->id() . '/delete');
+
+    $this->submitForm([], $this->t('Delete'));
 
     $qt = \Drupal::service('entity_type.manager')->getStorage('quicktabs_instance')->load($edit['id']);
     $this->assertNull($qt, $this->t('QuickTabs instance not found in database'));
diff --git a/tests/src/Kernel/QuicktabsConfigSchemaTest.php b/tests/src/Kernel/QuicktabsConfigSchemaTest.php
index 5dc239c..58c6788 100644
--- a/tests/src/Kernel/QuicktabsConfigSchemaTest.php
+++ b/tests/src/Kernel/QuicktabsConfigSchemaTest.php
@@ -25,7 +25,7 @@ class QuicktabsConfigSchemaTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->typedConfig = \Drupal::service('config.typed');
@@ -130,7 +130,7 @@ class QuicktabsConfigSchemaTest extends KernelTestBase {
       ]);
       $quicktabs->save();
       $config = $this->config("quicktabs.quicktabs_instance.$id");
-      $this->assertEqual($config->get('id'), $id);
+      $this->assertEquals($config->get('id'), $id);
       $this->assertConfigSchema($this->typedConfig, $config->getName(), $config->get());
     }
   }
