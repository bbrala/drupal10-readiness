modules/contrib/private_message/modules/private_message_notify/private_message_notify.api.php
modules/contrib/private_message/private_message.theme.inc
modules/contrib/private_message/src/Controller/PrivateMessageController.php
modules/contrib/private_message/src/Plugin/Field/FieldFormatter/PrivateMessageThreadMemberFormatter.php
modules/contrib/private_message/tests/src/Functional/PrivateMessageThreadMembersTest.php
modules/contrib/private_message/modules/private_message_notify/private_message_notify.module
modules/contrib/private_message/modules/private_message_notify/src/Service/PrivateMessageNotifier.php
modules/contrib/private_message/private_message.tokens.inc
modules/contrib/private_message/src/Controller/PrivateMessageControllerInterface.php
modules/contrib/private_message/src/Entity/Access/PrivateMessageAccessControlHandler.php
modules/contrib/private_message/src/Ajax/PrivateMessageInboxInsertThreadsCommand.php
modules/contrib/private_message/modules/private_message_notify/src/Service/PrivateMessageNotifierInterface.php
modules/contrib/private_message/private_message.api.php
modules/contrib/private_message/private_message.install
modules/contrib/private_message/src/Ajax/PrivateMessageInboxTriggerUpdateCommand.php
modules/contrib/private_message/src/Ajax/PrivateMessageInboxUpdateCommand.php
modules/contrib/private_message/src/Ajax/PrivateMessageInsertMessagesCommand.php
modules/contrib/private_message/src/Ajax/PrivateMessageInsertNewMessagesCommand.php
modules/contrib/private_message/src/Entity/Access/PrivateMessageThreadAccessControlHandler.php
modules/contrib/private_message/src/Ajax/PrivateMessageInsertPreviousMessagesCommand.php
modules/contrib/private_message/src/Entity/Builder/PrivateMessageThreadViewBuilder.php
modules/contrib/private_message/src/Ajax/PrivateMessageInsertThreadCommand.php
modules/contrib/private_message/src/Ajax/PrivateMessageLoadNewMessagesCommand.php
modules/contrib/private_message/src/Ajax/PrivateMessageMemberUsernameValidatedCommand.php
modules/contrib/private_message/src/Ajax/PrivateMessageMembersAutocompleteResponseCommand.php
modules/contrib/private_message/src/Ajax/PrivateMessageUpdateUnreadThreadCountCommand.php
modules/contrib/private_message/src/Annotation/PrivateMessageConfigForm.php
modules/contrib/private_message/src/Cache/Context/PrivateMessageThreadCacheContext.php
modules/contrib/private_message/src/Commands/PrivateMessageCommands.php
modules/contrib/private_message/src/Entity/Builder/PrivateMessageViewBuilder.php
modules/contrib/private_message/private_message.module
modules/contrib/private_message/src/Controller/AjaxController.php
modules/contrib/private_message/tests/src/Functional/PrivateMessageUnreadCountTest.php
modules/contrib/private_message/src/Entity/PrivateMessage.php
modules/contrib/private_message/src/Plugin/Field/FieldFormatter/PrivateMessageThreadMessageFormatter.php
modules/contrib/private_message/src/Entity/PrivateMessageInterface.php
modules/contrib/private_message/src/Entity/PrivateMessageThread.php
modules/contrib/private_message/src/Plugin/Field/FieldWidget/PrivateMessageThreadMemberWidget.php
modules/contrib/private_message/src/Plugin/PrivateMessageConfigForm/PrivateMessageConfigFormBase.php
modules/contrib/private_message/src/Plugin/PrivateMessageConfigForm/PrivateMessageConfigFormPluginInterface.php
modules/contrib/private_message/src/Controller/AjaxControllerInterface.php
modules/contrib/private_message/src/Plugin/RulesAction/SendPrivateMessage.php
modules/contrib/private_message/src/Entity/PrivateMessageThreadInterface.php
modules/contrib/private_message/src/Form/AdminUninstallForm.php
modules/contrib/private_message/src/Plugin/Validation/Constraint/PrivateMessageThreadMemberConstraint.php
modules/contrib/private_message/src/Plugin/Validation/Constraint/PrivateMessageThreadMemberConstraintValidator.php
modules/contrib/private_message/src/PluginManager/PrivateMessageConfigFormManager.php
modules/contrib/private_message/src/Form/ConfigForm.php
modules/contrib/private_message/src/PluginManager/PrivateMessageConfigFormManagerInterface.php
modules/contrib/private_message/src/Service/PrivateMessageService.php
modules/contrib/private_message/src/Form/PrivateMessageForm.php
modules/contrib/private_message/src/Service/PrivateMessageServiceInterface.php
modules/contrib/private_message/src/Service/PrivateMessageThreadManager.php
modules/contrib/private_message/src/Service/PrivateMessageThreadManagerInterface.php
modules/contrib/private_message/tests/src/Functional/PrivateMessageNotificationTest.php
modules/contrib/private_message/tests/src/Functional/PrivateMessageSettingsFormTest.php
modules/contrib/private_message/src/Form/PrivateMessageThreadClearPersonalHistoryForm.php
modules/contrib/private_message/src/Form/PrivateMessageThreadDeleteForm.php
modules/contrib/private_message/src/Mapper/PrivateMessageMapper.php
modules/contrib/private_message/src/Mapper/PrivateMessageMapperInterface.php
modules/contrib/private_message/src/Plugin/Block/PrivateMessageActionsBlock.php
modules/contrib/private_message/src/Plugin/Block/PrivateMessageInboxBlock.php
modules/contrib/private_message/src/Plugin/Block/PrivateMessageNotificationBlock.php

6 files with changes
====================

1) modules/contrib/private_message/tests/src/Functional/PrivateMessageUnreadCountTest.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * SetUp the test class.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->userA = $this->drupalCreateUser([
       'use private messaging system',
@@ @@
     $this->drupalLogin($this->userA);

     $this->drupalGet('/private-message/create');
-    $this->assertResponse(200);
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->statusCodeEquals(200);
+    $this->submitForm([
       'members[0][target_id]' => $this->userB->getDisplayName(),
       'message[0][value]' => $this->getRandomGenerator()->sentences(5),
     ], 'Send');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // I should not see a notification for my own message.
     $this->assertSession()->elementTextContains('css', 'a.private-message-page-link', 0);
     // When going to a different page, I should still not see a notification for
@@ @@

     // We visit the thread directly.
     $this->drupalGet('private-messages/1');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->elementTextContains('css', 'a.private-message-page-link', 0);

     // We are not already looking at the thread.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'message[0][value]' => $this->getRandomGenerator()->sentences(5),
     ], 'Send');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // I should not see a notification for my own message.
     $this->assertSession()->elementTextContains('css', 'a.private-message-page-link', 0);
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/private_message/tests/src/Functional/PrivateMessageThreadMembersTest.php:45

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->userA = $this->drupalCreateUser([
       'use private messaging system',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/private_message/private_message.theme.inc:11

    ---------- begin diff ----------
@@ @@
  * Implements hook_preprocess_private_message_notification_block().
  */
 function template_preprocess_private_message_notification_block(&$vars) {
-  $vars['notification_image_path'] = base_path() . drupal_get_path('module', 'private_message') . '/images/private-message-notification-icon.png';
+  $vars['notification_image_path'] = base_path() . \Drupal::service('extension.list.module')->getPath('private_message') . '/images/private-message-notification-icon.png';
   $link_title = $vars['new_message_count'] ? \Drupal::service('string_translation')->formatPlural($vars['new_message_count'], 'You have 1 unread private message', 'You have @count unread private messages') : t('You have no unread private messages');
   $url = Url::fromRoute('private_message.private_message_page', [], ['attributes' => ['title' => $link_title, 'class' => ['private-message-page-link']]]);
   $count = $vars['new_message_count'] > 99 ? '99+' : $vars['new_message_count'];
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


4) modules/contrib/private_message/tests/src/Functional/PrivateMessageSettingsFormTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * SetUp the test class.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->user = $this->DrupalCreateUser();
     $this->adminUser = $this->DrupalCreateUser([
@@ @@
   public function testSettingsPageExists() {
     $this->drupalLogin($this->user);
     $this->drupalGet('admin/config/private-message/config');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/config/private-message/config');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

   /**
@@ @@
   public function testConfigForm() {
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/config/private-message/config');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Test form submission.
-    $this->drupalPostForm(NULL, [], t('Save configuration'));
-    $this->assertText(
-      'The configuration options have been saved.'
-    );
+    $this->submitForm([], t('Save configuration'));
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/private_message/tests/src/Functional/PrivateMessageNotificationTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * SetUp the test class.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->userA = $this->drupalCreateUser([
       'use private messaging system',
@@ @@
     $this->drupalLogin($this->userA);

     $this->drupalGet('/private-message/create');
-    $this->assertResponse(200);
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->statusCodeEquals(200);
+    $this->submitForm([
       'members[0][target_id]' => $this->userB->getDisplayName(),
       'message[0][value]' => $this->getRandomGenerator()->sentences(5),
     ], 'Send');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalLogin($this->userB);
     $this->drupalGet('private-message/create');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->elementTextContains('css', 'a.private-message-page-link', 1);
   }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/private_message/src/Plugin/Field/FieldFormatter/PrivateMessageThreadMemberFormatter.php:284

    ---------- begin diff ----------
@@ @@
           }
           elseif ($this->getSetting('display_type') == 'entity') {
             $renderable = $view_builder->view($user, $this->getSetting('entity_display_mode'));
-            $users[$user->id()] = render($renderable);
+            $users[$user->id()] = \Drupal::service('renderer')->render($renderable);
           }
         }
       }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

