modules/contrib/simple_fb_connect/modules/simple_fb_connect_rules/src/Plugin/Condition/UserHasFacebookAccessToken.php
modules/contrib/simple_fb_connect/src/SimpleFbConnectUserManager.php
modules/contrib/simple_fb_connect/simple_fb_connect.install
modules/contrib/simple_fb_connect/simple_fb_connect.module
modules/contrib/simple_fb_connect/src/Controller/SimpleFbConnectController.php
modules/contrib/simple_fb_connect/src/Form/SimpleFbConnectSettingsForm.php
modules/contrib/simple_fb_connect/src/SimpleFbConnectFbFactory.php
modules/contrib/simple_fb_connect/src/SimpleFbConnectFbManager.php
modules/contrib/simple_fb_connect/tests/src/Unit/SimpleFbConnectFbFactoryTest.php
modules/contrib/simple_fb_connect/src/SimpleFbConnectPersistentDataHandler.php
modules/contrib/simple_fb_connect/tests/src/Unit/SimpleFbConnectFbManagerTest.php
modules/contrib/simple_fb_connect/src/SimpleFbConnectPostLoginManager.php
modules/contrib/simple_fb_connect/tests/src/Unit/SimpleFbConnectPersistentDataHandlerTest.php
modules/contrib/simple_fb_connect/tests/src/Unit/SimpleFbConnectPostLoginManagerTest.php
modules/contrib/simple_fb_connect/tests/src/Unit/SimpleFbConnectUserManagerTest.php
modules/contrib/simple_fb_connect/tests/src/Unit/TestSimpleFbConnectUserManager.php

6 files with changes
====================

1) modules/contrib/simple_fb_connect/src/SimpleFbConnectFbManager.php:111

    ---------- begin diff ----------
@@ @@
     // Set the scope twice on the event: as the main subject but also in the
     // list of arguments.
     $e = new GenericEvent($scope, ['scope' => $scope]);
-    $event = $this->eventDispatcher->dispatch('simple_fb_connect.scope', $e);
+    $event = $this->eventDispatcher->dispatch($e, 'simple_fb_connect.scope');
     $final_scope = $event->getArgument('scope');

     // Generate and return the URL where we should redirect the user.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


2) modules/contrib/simple_fb_connect/tests/src/Unit/SimpleFbConnectUserManagerTest.php:110

    ---------- begin diff ----------
@@ @@
       ->setMethods(['load'])
       ->getMockForAbstractClass();

-    $this->entityFieldManager = $this->getMockBuilder('Drupal\Core\Entity\EntityFieldManagerInterface')
-      ->getMock();
+    $this->entityFieldManager = $this->createMock('Drupal\Core\Entity\EntityFieldManagerInterface');

-    $this->token = $this->getMockBuilder('Drupal\Core\Utility\Token')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->token = $this->createMock('Drupal\Core\Utility\Token');

-    $this->transliteration = $this->getMockBuilder('Drupal\Core\Transliteration\PhpTransliteration')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->transliteration = $this->createMock('Drupal\Core\Transliteration\PhpTransliteration');

-    $this->languageManager = $this->getMockBuilder('Drupal\Core\Language\LanguageManagerInterface')
-      ->getMock();
+    $this->languageManager = $this->createMock('Drupal\Core\Language\LanguageManagerInterface');

-    $this->fileSystem = $this->getMockBuilder('Drupal\Core\File\FileSystemInterface')
-      ->getMock();
+    $this->fileSystem = $this->createMock('Drupal\Core\File\FileSystemInterface');

     // Note that we are creating an instance of TestSimpleFbConnectUserManager
     // instead of SimpleFbConnectUserManager. The test class overriders the
@@ @@
    * @dataProvider loginUserDataProvider
    */
   public function testLoginUser($user, $expected) {
-    $logger_channel = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannel')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger_channel = $this->createMock('Drupal\Core\Logger\LoggerChannel');

     $this->loggerFactory
       ->expects($this->any())
@@ @@
    * @see ::testLoginuser()
    */
   public function loginUserDataProvider() {
-    $user_1 = $this->getMockBuilder('Drupal\user\Entity\User')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user_1 = $this->createMock('Drupal\user\Entity\User');
     $user_1
       ->expects($this->any())
       ->method('id')
       ->willReturn(1);

-    $user_2 = $this->getMockBuilder('Drupal\user\Entity\User')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user_2 = $this->createMock('Drupal\user\Entity\User');
     $user_2
       ->expects($this->any())
       ->method('id')
@@ @@
       ->method('getRoles')
       ->willReturn(['authenticated', 'blocked_role']);

-    $user_3 = $this->getMockBuilder('Drupal\user\Entity\User')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user_3 = $this->createMock('Drupal\user\Entity\User');
     $user_3
       ->expects($this->any())
       ->method('id')
@@ @@
       ->method('isActive')
       ->willReturn(FALSE);

-    $user_4 = $this->getMockBuilder('Drupal\user\Entity\User')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user_4 = $this->createMock('Drupal\user\Entity\User');
     $user_4
       ->expects($this->any())
       ->method('id')
@@ @@
     );
     $this->userManager->setConfigFactory($new_config_factory);

-    $logger_channel = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannel')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger_channel = $this->createMock('Drupal\Core\Logger\LoggerChannel');

     $this->loggerFactory
       ->expects($this->any())
@@ @@
       ->with('simple_fb_connect')
       ->willReturn($logger_channel);

-    $fb_profile_pic = $this->getMockBuilder('Facebook\GraphNodes\GraphNode')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $fb_profile_pic = $this->createMock('Facebook\GraphNodes\GraphNode');

     $this->assertFalse($this->userManager->createUser('Firstname Lastname', 'foo@example.com', 12345, $fb_profile_pic));
   }
@@ @@
    */
   public function testCreateUser() {
     // User object that will be created in this test.
-    $user = $this->getMockBuilder('Drupal\user\Entity\User')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user = $this->createMock('Drupal\user\Entity\User');

     // Storage object that will be created in this test.
-    $storage = $this->getMockBuilder('Drupal\Core\Entity\EntityStorageInterface')
-      ->getMock();
+    $storage = $this->createMock('Drupal\Core\Entity\EntityStorageInterface');

     // Language object that will be created in this test.
-    $language = $this->getMockBuilder('Drupal\Core\Language\LanguageInterface')
-      ->getMock();
+    $language = $this->createMock('Drupal\Core\Language\LanguageInterface');

     // Called when we're generating an unique username.
     $storage
@@ @@
       ->method('getCurrentLanguage')
       ->willReturn($language);

-    $logger_channel = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannel')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger_channel = $this->createMock('Drupal\Core\Logger\LoggerChannel');

     $this->loggerFactory
       ->expects($this->any())
@@ @@
       ->with('simple_fb_connect')
       ->willReturn($logger_channel);

-    $fb_profile_pic = $this->getMockBuilder('Facebook\GraphNodes\GraphNode')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $fb_profile_pic = $this->createMock('Facebook\GraphNodes\GraphNode');

     $this->assertInstanceOf('Drupal\user\Entity\User', $this->userManager->createUser('Firstname Lastname', 'foo@example.com', 12345, $fb_profile_pic));
   }
@@ @@
    * @dataProvider generateUniqueUsernameWithNoConflictsDataProvider
    */
   public function testGenerateUniqueUsernameWithNoConflicts($fb_name, $expected) {
-    $storage = $this->getMockBuilder('Drupal\Core\Entity\EntityStorageInterface')
-      ->getMock();
+    $storage = $this->createMock('Drupal\Core\Entity\EntityStorageInterface');

     $storage
       ->expects($this->once())
@@ @@
    * @dataProvider generateUniqueUsernameWithConflictDataProvider
    */
   public function testGenerateUniqueUsernameWithConflict($fb_name, $expected) {
-    $existing_user = $this->getMockBuilder('Drupal\user\Entity\User')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $existing_user = $this->createMock('Drupal\user\Entity\User');

-    $storage = $this->getMockBuilder('Drupal\Core\Entity\EntityStorageInterface')
-      ->getMock();
+    $storage = $this->createMock('Drupal\Core\Entity\EntityStorageInterface');

     $storage
       ->expects($this->any())
@@ @@
       ->method('transliterate')
       ->willReturn($picture_directory);

-    $logger_channel = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannel')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger_channel = $this->createMock('Drupal\Core\Logger\LoggerChannel');

     $this->loggerFactory
       ->expects($this->any())
@@ @@
         ));

     // File object.
-    $file = $this->getMockBuilder('Drupal\file\Entity\File')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $file = $this->createMock('Drupal\file\Entity\File');
     $file
       ->expects($this->once())
       ->method('id')
       ->willReturn(1);

-    $storage = $this->getMockBuilder('Drupal\Core\Entity\EntityStorageInterface')
-      ->getMock();
+    $storage = $this->createMock('Drupal\Core\Entity\EntityStorageInterface');

     $storage
       ->expects($this->once())
@@ @@
       ->with('file')
       ->willReturn($storage);

-    $user = $this->getMockBuilder('Drupal\user\Entity\User')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user = $this->createMock('Drupal\user\Entity\User');

     $this->assertTrue($this->userManager->setProfilePic($user, 'http://www.example.com/picture.jpg', '12345'));
   }
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/simple_fb_connect/tests/src/Unit/SimpleFbConnectPostLoginManagerTest.php:66

    ---------- begin diff ----------
@@ @@
       ->setMethods(['getUrlIfValid', 'toString'])
       ->getMockForAbstractClass();

-    $this->persistentDataHandler = $this->getMockBuilder('Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->persistentDataHandler = $this->createMock('Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler');

     $this->postLoginManager = new SimpleFbConnectPostLoginManager(
       $this->configFactory,
@@ @@
    * @covers ::getPathToUserForm
    */
   public function testGetPathToUserForm() {
-    $user = $this->getMockBuilder('Drupal\user\Entity\User')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user = $this->createMock('Drupal\user\Entity\User');

     $user
       ->expects($this->any())
@@ @@
    *   Value to be returned from 'toString' method.
    */
   protected function generateStubUrl($external, $path) {
-    $url = $this->getMockBuilder('Drupal\Core\Url')
-      ->disableOriginalConstructor()
-      ->setMethods(['isExternal', 'toString'])
-      ->getMock();
+    $url = $this->createMock('Drupal\Core\Url');

     $url
       ->expects($this->any())
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/simple_fb_connect/tests/src/Unit/SimpleFbConnectFbManagerTest.php:73

    ---------- begin diff ----------
@@ @@

     $this->urlGenerator = $this->createMock('Drupal\Core\Routing\UrlGeneratorInterface');

-    $this->persistentDataHandler = $this->getMockBuilder('Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->persistentDataHandler = $this->createMock('Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler');

     $this->fbManager = new SimpleFbConnectFbManager(
       $this->loggerFactory,
@@ @@
       $this->persistentDataHandler
     );

-    $this->facebook = $this->getMockBuilder('Facebook\Facebook')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->facebook = $this->createMock('Facebook\Facebook');
     $this->fbManager->setFacebookService($this->facebook);
   }

@@ @@
    * @covers ::getFbReRequestUrl
    */
   public function testGetFbReRequestUrl() {
-    $login_helper = $this->getMockBuilder('Facebook\Helpers\FacebookRedirectLoginHelper')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $login_helper = $this->createMock('Facebook\Helpers\FacebookRedirectLoginHelper');

     $login_helper
       ->expects($this->once())
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/simple_fb_connect/tests/src/Unit/SimpleFbConnectFbFactoryTest.php:46

    ---------- begin diff ----------
@@ @@

     $this->loggerFactory = $this->createMock('Drupal\Core\Logger\LoggerChannelFactoryInterface');

-    $this->persistentDataHandler = $this->getMockBuilder('Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->persistentDataHandler = $this->createMock('Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler');
   }

   /**
@@ @@
    * @dataProvider getFbServiceBadDataProvider
    */
   public function testGetFbServiceWithBadData($app_id, $app_secret) {
-    $logger_channel = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannel')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger_channel = $this->createMock('Drupal\Core\Logger\LoggerChannel');

     $this->loggerFactory
       ->expects($this->any())
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/simple_fb_connect/src/SimpleFbConnectUserManager.php:254

    ---------- begin diff ----------
@@ @@
       'account' => $new_user,
       'fbid' => $fbid,
     ]);
-    $this->eventDispatcher->dispatch('simple_fb_connect.user_created', $event);
+    $this->eventDispatcher->dispatch($event, 'simple_fb_connect.user_created');

     // Validate the new user.
     /** @var \Drupal\user\UserInterface $new_user */
@@ @@
       // Set the account twice on the event: as the main subject but also in the
       // list of arguments.
       $event = new GenericEvent($drupal_user, ['account' => $drupal_user]);
-      $this->eventDispatcher->dispatch('simple_fb_connect.user_login', $event);
+      $this->eventDispatcher->dispatch($event, 'simple_fb_connect.user_login');

       // @todo Add Boost cookie if Boost module is enabled
       // https://www.drupal.org/node/2524372
@@ @@
    * @see user_password
    */
   protected function userPassword($length) {
-    return user_password($length);
+    return \Drupal::service('password_generator')->generate($length);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


 [OK] 6 files have been changed by Rector                                       

