modules/contrib/changed_fields/examples/changed_fields_basic_usage/changed_fields_basic_usage.module
modules/contrib/changed_fields/examples/changed_fields_basic_usage/src/BasicUsageObserver.php
modules/contrib/changed_fields/examples/changed_fields_extended_field_comparator/changed_fields_extended_field_comparator.module
modules/contrib/changed_fields/examples/changed_fields_extended_field_comparator/src/ExtendedFieldComparatorObserver.php
modules/contrib/changed_fields/examples/changed_fields_extended_field_comparator/src/Plugin/FieldComparator/ExtendedFieldComparator.php
modules/contrib/changed_fields/src/EntitySubject.php
modules/contrib/changed_fields/src/FieldComparatorPluginManager.php
modules/contrib/changed_fields/src/ObserverInterface.php
modules/contrib/changed_fields/src/Plugin/FieldComparator/DefaultFieldComparator.php
modules/contrib/changed_fields/tests/src/Unit/DefaultFieldComparatorTest.php
modules/contrib/changed_fields/tests/src/Unit/EntitySubjectTest.php

2 files with changes
====================

1) modules/contrib/changed_fields/tests/src/Unit/EntitySubjectTest.php:38

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function setUp(): void {
-    $this->entitySubject = $this->getMockBuilder('\Drupal\changed_fields\EntitySubject')
-      ->setMethods(NULL)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entitySubject = $this->createMock('\Drupal\changed_fields\EntitySubject');
   }

   /**
@@ @@
    * Observer 3: listens to media:image.
    */
   public function testNotifyObservers() {
-    $observer_1 = $this->getMockBuilder('Drupal\changed_fields\ObserverInterface')
-      ->setMethods(['getInfo', 'update'])
-      ->getMock();
+    $observer_1 = $this->createMock('Drupal\changed_fields\ObserverInterface');

     $observer_1->expects($this->once())
       ->method('getInfo')
@@ @@
     $observer_1->expects($this->once())
       ->method('update');

-    $observer_2 = $this->getMockBuilder('Drupal\changed_fields\ObserverInterface')
-      ->setMethods(['getInfo', 'update'])
-      ->getMock();
+    $observer_2 = $this->createMock('Drupal\changed_fields\ObserverInterface');

     $observer_2->expects($this->once())
       ->method('getInfo')
@@ @@
     $observer_2->expects($this->once())
       ->method('update');

-    $observer_3 = $this->getMockBuilder('Drupal\changed_fields\ObserverInterface')
-      ->setMethods(['getInfo', 'update'])
-      ->getMock();
+    $observer_3 = $this->createMock('Drupal\changed_fields\ObserverInterface');

     $observer_3->expects($this->once())
       ->method('getInfo')
@@ @@
     $observer_3->expects($this->never())
       ->method('update');

-    $field_definition_mock = $this->getMockBuilder('Drupal\field\Entity\FieldConfig')
-      ->disableOriginalConstructor()
-      ->setMethods(['getType'])
-      ->getMock();
+    $field_definition_mock = $this->createMock('Drupal\field\Entity\FieldConfig');

     $field_definition_mock->expects($this->any())
       ->method('getType')
       ->willReturn('string');

-    $field_item_list_mock = $this->getMockBuilder('Drupal\Core\Field\FieldItemList')
-      ->disableOriginalConstructor()
-      ->setMethods(['getValue', 'getFieldDefinition'])
-      ->getMock();
+    $field_item_list_mock = $this->createMock('Drupal\Core\Field\FieldItemList');

     $field_item_list_mock->expects($this->any())
       ->method('getValue')
@@ @@
       ->method('getFieldDefinition')
       ->willReturn($field_definition_mock);

-    $entity_mock = $this->getMockBuilder('Drupal\node\Entity\Node')
-      ->disableOriginalConstructor()
-      ->setMethods(['isNew', 'getEntityTypeId', 'bundle', 'get'])
-      ->getMock();
+    $entity_mock = $this->createMock('Drupal\node\Entity\Node');

     $entity_mock->expects($this->once())
       ->method('isNew')
@@ @@
       ->method('get')
       ->willReturn($field_item_list_mock);

-    $original_entity_mock = $this->getMockBuilder('Drupal\node\Entity\Node')
-      ->disableOriginalConstructor()
-      ->setMethods(['get'])
-      ->getMock();
+    $original_entity_mock = $this->createMock('Drupal\node\Entity\Node');

     $original_entity_mock->expects($this->any())
       ->method('get')
       ->willReturn($field_item_list_mock);

-    $field_comparator_plugin_mock = $this->getMockBuilder('Drupal\changed_fields\Plugin\FieldComparator\DefaultFieldComparator')
-      ->disableOriginalConstructor()
-      ->setMethods(['compareFieldValues'])
-      ->getMock();
+    $field_comparator_plugin_mock = $this->createMock('Drupal\changed_fields\Plugin\FieldComparator\DefaultFieldComparator');

     $field_comparator_plugin_mock->expects($this->any())
       ->method('compareFieldValues')
@@ @@
    * Entity: node:article.
    */
   public function testNotifyNewEntity() {
-    $observer = $this->getMockBuilder('Drupal\changed_fields\ObserverInterface')
-      ->setMethods(['getInfo', 'update'])
-      ->getMock();
+    $observer = $this->createMock('Drupal\changed_fields\ObserverInterface');

     $observer->expects($this->never())
       ->method('getInfo');
@@ @@
     $observer->expects($this->never())
       ->method('update');

-    $entity_mock = $this->getMockBuilder('Drupal\node\Entity\Node')
-      ->disableOriginalConstructor()
-      ->setMethods(['isNew', 'getEntityTypeId', 'bundle'])
-      ->getMock();
+    $entity_mock = $this->createMock('Drupal\node\Entity\Node');

     $entity_mock->expects($this->once())
       ->method('isNew')
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/changed_fields/tests/src/Unit/DefaultFieldComparatorTest.php:51

    ---------- begin diff ----------
@@ @@
    */
   public function setUp(): void {
     $this->fieldComparator = new DefaultFieldComparator([], '', []);
-    $this->fieldDefinitionMock = $this->getMockBuilder('Drupal\field\Entity\FieldConfig')
-      ->disableOriginalConstructor()
-      ->setMethods(['getType', 'getSetting'])
-      ->getMock();
+    $this->fieldDefinitionMock = $this->createMock('Drupal\field\Entity\FieldConfig');
   }

   /**
@@ @@
       ->method('getType')
       ->willReturn('string');

-    $field_comparator_mock = $this->getMockBuilder('\Drupal\changed_fields\Plugin\FieldComparator\DefaultFieldComparator')
-      ->setMethods(['getDefaultComparableProperties'])
-      ->disableOriginalConstructor()
-      ->getMock();
+    $field_comparator_mock = $this->createMock('\Drupal\changed_fields\Plugin\FieldComparator\DefaultFieldComparator');

     $field_comparator_mock->expects($this->never())
       ->method('getDefaultComparableProperties');
@@ @@
       ->method('getType')
       ->willReturn('string');

-    $field_comparator_mock = $this->getMockBuilder('\Drupal\changed_fields\Plugin\FieldComparator\DefaultFieldComparator')
-      ->setMethods(['extendComparableProperties'])
-      ->disableOriginalConstructor()
-      ->getMock();
+    $field_comparator_mock = $this->createMock('\Drupal\changed_fields\Plugin\FieldComparator\DefaultFieldComparator');

     $field_comparator_mock->expects($this->once())
       ->method('extendComparableProperties');
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 2 files have been changed by Rector                                       

