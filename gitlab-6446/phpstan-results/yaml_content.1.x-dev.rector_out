modules/contrib/yaml_content/src/Annotation/YamlContentProcess.php
modules/contrib/yaml_content/src/Plugin/yaml_content/process/File.php
modules/contrib/yaml_content/yaml_content.api.php
modules/contrib/yaml_content/yaml_content.drush.inc
modules/contrib/yaml_content/src/Commands/YamlContentCommands.php
modules/contrib/yaml_content/src/ContentLoader/ContentLoader.php
modules/contrib/yaml_content/src/Plugin/yaml_content/process/LayoutSection.php
modules/contrib/yaml_content/src/Plugin/yaml_content/process/Reference.php
modules/contrib/yaml_content/src/Plugin/yaml_content/process/ReferenceUri.php
modules/contrib/yaml_content/src/Service/EntityLoadHelper.php
modules/contrib/yaml_content/src/Service/LoadHelper.php
modules/contrib/yaml_content/tests/src/Functional/NodeImportTest.php
modules/contrib/yaml_content/src/ContentLoader/ContentLoaderInterface.php
modules/contrib/yaml_content/src/Event/ContentParsedEvent.php
modules/contrib/yaml_content/src/Event/DataImportEvent.php
modules/contrib/yaml_content/src/Event/EntityImportEvent.php
modules/contrib/yaml_content/src/Event/EntityPostSaveEvent.php
modules/contrib/yaml_content/src/Event/EntityPreSaveEvent.php
modules/contrib/yaml_content/src/Event/EventBase.php
modules/contrib/yaml_content/src/Event/FieldImportEvent.php
modules/contrib/yaml_content/src/Event/YamlContentEvents.php
modules/contrib/yaml_content/src/EventSubscriber/MenuHierarchySubscriber.php
modules/contrib/yaml_content/tests/src/Functional/Plugin/yaml_content/process/FileTest.php
modules/contrib/yaml_content/src/Plugin/ProcessingContext.php
modules/contrib/yaml_content/src/Plugin/YamlContentProcessBase.php
modules/contrib/yaml_content/src/Plugin/YamlContentProcessInterface.php
modules/contrib/yaml_content/src/Plugin/YamlContentProcessManager.php
modules/contrib/yaml_content/tests/src/Functional/TaxonomyImportTest.php
modules/contrib/yaml_content/tests/src/Traits/LoadFixturesTrait.php
modules/contrib/yaml_content/tests/src/Unit/ContentLoader/ContentLoaderTest.php
modules/contrib/yaml_content/tests/src/Unit/ContentLoader/ContentLoaderTestBase.php
modules/contrib/yaml_content/tests/src/Unit/ContentLoader/ExistenceCheckingTest.php
modules/contrib/yaml_content/tests/src/Unit/EntityLoadHelper/EntityLoadHelperTest.php
modules/contrib/yaml_content/tests/src/Unit/Plugin/yaml_content/process/FileTest.php
modules/contrib/yaml_content/tests/src/Unit/Plugin/yaml_content/process/ReferenceTest.php

12 files with changes
=====================

1) modules/contrib/yaml_content/src/Event/EventBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\yaml_content\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\yaml_content\ContentLoader\ContentLoaderInterface;

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/yaml_content/src/ContentLoader/ContentLoader.php:290

    ---------- begin diff ----------
@@ @@

     // Dispatch the event notification.
     $content_parsed_event = new ContentParsedEvent($this, $this->contentFile, $this->parsedContent);
-    $this->getEventDispatcher()->dispatch(YamlContentEvents::CONTENT_PARSED, $content_parsed_event);
+    $this->getEventDispatcher()->dispatch($content_parsed_event, YamlContentEvents::CONTENT_PARSED);

     return $this->parsedContent;
   }
@@ @@

       // Dispatch the pre-save event.
       $entity_pre_save_event = new EntityPreSaveEvent($this, $entity, $content_item);
-      $this->getEventDispatcher()->dispatch(YamlContentEvents::ENTITY_PRE_SAVE, $entity_pre_save_event);
+      $this->getEventDispatcher()->dispatch($entity_pre_save_event, YamlContentEvents::ENTITY_PRE_SAVE);

       $entity->save();

       // Dispatch the post-save event.
       $entity_post_save_event = new EntityPostSaveEvent($this, $entity, $content_item);
-      $this->getEventDispatcher()->dispatch(YamlContentEvents::ENTITY_POST_SAVE, $entity_post_save_event);
+      $this->getEventDispatcher()->dispatch($entity_post_save_event, YamlContentEvents::ENTITY_POST_SAVE);

       $loaded_content[] = $entity;
     }
@@ @@

     // Dispatch the entity import event.
     $entity_import_event = new EntityImportEvent($this, $entity_definition, $content_data);
-    $this->getEventDispatcher()->dispatch(YamlContentEvents::IMPORT_ENTITY, $entity_import_event);
+    $this->getEventDispatcher()->dispatch($entity_import_event, YamlContentEvents::IMPORT_ENTITY);

     // Parse properties for creation and fields for processing.
     $attributes = $this->getContentAttributes($entity_type, $content_data);
@@ @@

           // Dispatch field import event prior to populating fields.
           $field_import_event = new FieldImportEvent($this, $entity, $field_instance, $field_data);
-          $this->getEventDispatcher()->dispatch(YamlContentEvents::IMPORT_FIELD, $field_import_event);
+          $this->getEventDispatcher()->dispatch($field_import_event, YamlContentEvents::IMPORT_FIELD);

           $this->populateField($field_instance, $field_data);
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


3) modules/contrib/yaml_content/tests/src/Unit/Plugin/yaml_content/process/ReferenceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\yaml_content\Unit\Plugin\yaml_content\process;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
  */
 class ReferenceTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The entity type manager service mock.
    *
@@ @@
   /**
    * Setup mocks and a reference plugin for all tests.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->entityTypeManager = $this->prophesize(EntityTypeManagerInterface::class);
     $this->entityStorageHandler = $this->prophesize(EntityStorageInterface::class);
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/yaml_content/tests/src/Unit/Plugin/yaml_content/process/FileTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\yaml_content\Unit\Plugin\yaml_content\process;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\UnitTestCase;
 use Drupal\Tests\yaml_content\Traits\LoadFixturesTrait;
 use Drupal\yaml_content\ContentLoader\ContentLoader;
@@ @@
  */
 class FileTest extends UnitTestCase {

+  use ProphecyTrait;
   use LoadFixturesTrait;

   /**
@@ @@
   /**
    * Setup the file process plugin for all tests.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $args = [
       'my_entity',
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/yaml_content/tests/src/Unit/EntityLoadHelper/EntityLoadHelperTest.php:41

    ---------- begin diff ----------
@@ @@
    */
   protected function getEntityLoadHelperMock($stubbed_methods = NULL) {
     // Partially mock the ContentLoader for testing specific methods.
-    $mock = $this->getMockBuilder(EntityLoadHelper::class)
-      ->disableOriginalConstructor()
-      ->setMethods($stubbed_methods)
-      ->getMock();
+    $mock = $this->createMock(EntityLoadHelper::class);

     return $mock;
   }
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/yaml_content/tests/src/Unit/ContentLoader/ContentLoaderTestBase.php:33

    ---------- begin diff ----------
@@ @@
    */
   protected function getContentLoaderMock($stubbed_methods = NULL) {
     // Partially mock the ContentLoader for testing specific methods.
-    $this->contentLoader = $this->getMockBuilder(ContentLoader::class)
-      ->disableOriginalConstructor()
-      ->setMethods($stubbed_methods)
-      ->getMock();
+    $this->contentLoader = $this->createMock(ContentLoader::class);

     return $this->contentLoader;
   }
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Prepare the directory structure.
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/yaml_content/tests/src/Unit/ContentLoader/ContentLoaderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\yaml_content\Unit\ContentLoader;

+use PHPUnit\Framework\Error\Warning;
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Field\FieldItemList;
@@ @@
      $this->contentLoader->setContentPath($this->root->url());

      // Parse the test file expecting an error for the missing file.
-     $this->expectException(\PHPUnit\Framework\Error\Warning::class);
+     $this->expectException(Warning::class);
      $this->contentLoader->parseContent($test_file);
    }
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/yaml_content/tests/src/Functional/TaxonomyImportTest.php:46

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Prepare the content loader.
     $this->contentLoader = \Drupal::service('yaml_content.content_loader');
     // Look for content files in the tests directory.
-    $this->contentLoader->setContentPath(drupal_get_path('module', 'yaml_content') . '/tests');
+    $this->contentLoader->setContentPath(\Drupal::service('extension.list.module')->getPath('yaml_content') . '/tests');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/yaml_content/tests/src/Functional/Plugin/yaml_content/process/FileTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\yaml_content\Functional\Plugin\yaml_content\process;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Field\FieldItemList;
 use Drupal\Core\TypedData\DataDefinition;
@@ @@
  */
 class FileTest extends BrowserTestBase {

+  use ProphecyTrait;
   use LoadFixturesTrait;

   protected static $modules = ['file'];
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/yaml_content/tests/src/Functional/NodeImportTest.php:54

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create our article content type.
@@ @@
     // Prepare the content loader.
     $this->contentLoader = \Drupal::service('yaml_content.content_loader');
     // Look for content files in the tests directory.
-    $this->contentLoader->setContentPath(drupal_get_path('module', 'yaml_content') . '/tests');
+    $this->contentLoader->setContentPath(\Drupal::service('extension.list.module')->getPath('yaml_content') . '/tests');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/yaml_content/src/Service/LoadHelper.php:80

    ---------- begin diff ----------
@@ @@
    *   matching `*.content.yml` are queued for import.
    */
   public function importModule($module, $file = NULL) {
-    $path = drupal_get_path('module', $module);
+    $path = \Drupal::service('extension.list.module')->getPath($module);

     $this->loader->setContentPath($path);

@@ @@
    *   matching `*.content.yml` are queued for import.
    */
   public function importProfile($profile, $file = NULL) {
-    $path = drupal_get_path('profile', $profile);
+    $path = \Drupal::service('extension.list.profile')->getPath($profile);

     $this->loader->setContentPath($path);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector


12) modules/contrib/yaml_content/src/Plugin/yaml_content/process/File.php:49

    ---------- begin diff ----------
@@ @@
         ->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY);

       // Save the file data or return an existing file.
-      $file = file_save_data($output, $destination . $filename, FileSystemInterface::EXISTS_REPLACE);
+      $file = \Drupal::service('file.repository')->writeData($output, $destination . $filename, FileSystemInterface::EXISTS_REPLACE);

       // Use the newly created file id as the value.
       $field_data['target_id'] = $file->id();
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 12 files have been changed by Rector                                      

