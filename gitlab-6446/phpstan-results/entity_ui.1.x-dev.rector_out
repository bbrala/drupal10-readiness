modules/contrib/entity_ui/entity_ui.api.php
modules/contrib/entity_ui/src/EntityHandler/EntityUIAdminInterface.php
modules/contrib/entity_ui/src/Routing/AdminRouteProviderSubscriber.php
modules/contrib/entity_ui/entity_ui.module
modules/contrib/entity_ui/src/EntityHandler/FieldUIWithoutBundleEntityProxy.php
modules/contrib/entity_ui/entity_ui.tokens.inc
modules/contrib/entity_ui/src/Annotation/EntityTabContent.php
modules/contrib/entity_ui/src/Breadcrumb/AdminBreadcrumbBuilder.php
modules/contrib/entity_ui/src/Routing/EntityTabAdminRouteProvider.php
modules/contrib/entity_ui/src/Routing/TabRouteProvider.php
modules/contrib/entity_ui/src/EntityHandler/PlainBundlesEntityUIAdmin.php
modules/contrib/entity_ui/src/TargetEntityTypes.php
modules/contrib/entity_ui/tests/src/Functional/AdminUITest.php
modules/contrib/entity_ui/src/EntityTabsLoader.php
modules/contrib/entity_ui/src/EntityUiPermissions.php
modules/contrib/entity_ui/src/Controller/EntityTabAddPage.php
modules/contrib/entity_ui/src/Form/EntityTabDeleteForm.php
modules/contrib/entity_ui/src/Controller/EntityTabController.php
modules/contrib/entity_ui/src/Form/EntityTabForm.php
modules/contrib/entity_ui/src/Entity/EntityTab.php
modules/contrib/entity_ui/tests/src/Functional/OwnerAssignTabTest.php
modules/contrib/entity_ui/tests/src/Kernel/ActionDerivativesTest.php
modules/contrib/entity_ui/src/Entity/EntityTabInterface.php
modules/contrib/entity_ui/src/EntityHandler/BasicFieldUI.php
modules/contrib/entity_ui/tests/src/Kernel/AdminUIHandlerTest.php
modules/contrib/entity_ui/src/EntityHandler/BundleEntityCollection.php
modules/contrib/entity_ui/src/Plugin/Derivative/ActionsConfigurableActionTabContentDeriver.php
modules/contrib/entity_ui/src/EntityHandler/EntityTabListBuilder.php
modules/contrib/entity_ui/src/Plugin/Derivative/EntityLocalTasks.php
modules/contrib/entity_ui/src/Plugin/Derivative/EntityTabsAdminLocalActions.php
modules/contrib/entity_ui/src/Plugin/Derivative/EntityTabsAdminLocalTasks.php
modules/contrib/entity_ui/src/Plugin/EntityTabContent/ActionsConfigurableAction.php
modules/contrib/entity_ui/src/Plugin/EntityTabContent/EntityForm.php
modules/contrib/entity_ui/src/EntityHandler/EntityUIAdminBase.php
modules/contrib/entity_ui/src/Plugin/EntityTabContent/EntityView.php
modules/contrib/entity_ui/src/Plugin/EntityTabContent/OwnerAssign.php
modules/contrib/entity_ui/src/Plugin/EntityTabContentBase.php
modules/contrib/entity_ui/src/Plugin/EntityTabContentFormBase.php
modules/contrib/entity_ui/src/Plugin/EntityTabContentInterface.php
modules/contrib/entity_ui/src/Plugin/EntityTabContentManager.php
modules/contrib/entity_ui/src/Plugin/EntityTabLazyPluginCollection.php

7 files with changes
====================

1) modules/contrib/entity_ui/tests/src/Kernel/AdminUIHandlerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_ui\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\entity_ui\EntityHandler\BundleEntityCollection;
+use Drupal\entity_ui\EntityHandler\FieldUIWithoutBundleEntityProxy;
+use Symfony\Component\Routing\Route;
+use Symfony\Component\Routing\RouteCollection;
+use Drupal\entity_ui\EntityHandler\BasicFieldUI;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
  */
 class AdminUIHandlerTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * Modules to enable.
    *
@@ @@
     'entity_ui',
   ];

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('node');
     $this->installEntitySchema('user');
@@ @@

     $expected_handlers = [
       // Entity type ID => expected handler class.
-      'node' => \Drupal\entity_ui\EntityHandler\BundleEntityCollection::class,
-      'user' => \Drupal\entity_ui\EntityHandler\FieldUIWithoutBundleEntityProxy::class,
-      'taxonomy_term' => \Drupal\entity_ui\EntityHandler\BundleEntityCollection::class,
+      'node' => BundleEntityCollection::class,
+      'user' => FieldUIWithoutBundleEntityProxy::class,
+      'taxonomy_term' => BundleEntityCollection::class,
     ];

     foreach ($expected_handlers as $entity_type_id => $handler_class) {
@@ @@
     $user_entity_type = $entity_type_manager->getDefinition('user');
     $user_handler = $entity_type_manager->getHandler('user', 'entity_ui_admin');

-    $route_prophecy = $this->prophesize(\Symfony\Component\Routing\Route ::CLASS);
+    $route_prophecy = $this->prophesize(Route ::CLASS);
     $route_prophecy->getPath()->willReturn('/admin/config/people/accounts');

-    $route_collection_prophecy = $this->prophesize(\Symfony\Component\Routing\RouteCollection::CLASS);
+    $route_collection_prophecy = $this->prophesize(RouteCollection::CLASS);
     $route_collection_prophecy->get($user_entity_type->get('field_ui_base_route'))
       ->willReturn($route_prophecy->reveal());

@@ @@
     $property->setAccessible(TRUE);
     $real_user_handler = $property->getValue($user_handler);

-    $this->assertEquals(\Drupal\entity_ui\EntityHandler\BasicFieldUI::class, get_class($real_user_handler));
+    $this->assertEquals(BasicFieldUI::class, get_class($real_user_handler));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_ui/tests/src/Kernel/ActionDerivativesTest.php:26

    ---------- begin diff ----------
@@ @@
     'entity_ui',
   ];

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['node']);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_ui/tests/src/Functional/OwnerAssignTabTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->nodeStorage = $this->container->get('entity_type.manager')
@@ @@
     $edit = [
       'owner_uid' => $new_owner->getAccountName() . ' (' . $new_owner->id() . ')',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Change owner');
+    $this->submitForm($edit, 'Change owner');

     // Reload the node.
     $node = $this->nodeStorage->load($node->id());
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entity_ui/tests/src/Functional/AdminUITest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create an Article node type.
@@ @@

     // Check the collection page has the expected elements.
     // Check the node type collection tab is shown.
-    $this->assertLinkByHref('admin/structure/types');
+    $this->assertSession()->linkByHrefExists('admin/structure/types');

     // Check the built-in tabs on nodes are shown.
     $this->assertSession()->pageTextContains(t('View'));
@@ @@
     $this->assertSession()->pageTextContains(t('Delete'));

     $this->assertSession()->pageTextContains(t('Add entity tab'));
-    $this->assertLinkByHref('admin/structure/entity_ui/entity_tab/add/node');
+    $this->assertSession()->linkByHrefExists('admin/structure/entity_ui/entity_tab/add/node');

     // Create a new entity tab on nodes.
     $this->clickLink(t('Add entity tab'));
@@ @@
       'content_plugin' => 'entity_view',
       'content_config[view_mode]' => 'default',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Check the new tab is now shown in the collection listing.
     $this->assertSession()->pageTextContains($edit['label']);
-    $this->assertLinkByHref("admin/structure/entity_ui/entity_tab/node.{$edit['id']}/edit");
+    $this->assertSession()->linkByHrefExists("admin/structure/entity_ui/entity_tab/node.{$edit['id']}/edit");


     // todo:
@@ @@

     // Check the collection page has the expected elements.
     // Check the user accounts setings tab is shown.
-    $this->assertLinkByHref('admin/config/people/accounts');
+    $this->assertSession()->linkByHrefExists('admin/config/people/accounts');

     // Check the built-in tabs on users are shown.
     $this->assertSession()->pageTextContains(t('View'));
@@ @@
     $this->assertSession()->pageTextContains(t('Edit'));

     $this->assertSession()->pageTextContains(t('Add entity tab'));
-    $this->assertLinkByHref('admin/structure/entity_ui/entity_tab/add/user');
+    $this->assertSession()->linkByHrefExists('admin/structure/entity_ui/entity_tab/add/user');

     // Create a new entity tab on users.
     $this->clickLink(t('Add entity tab'));
@@ @@
       'content_plugin' => 'entity_view',
       'content_config[view_mode]' => 'default',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Check the new tab is now shown in the collection listing.
     $this->assertSession()->pageTextContains($edit['label']);
-    $this->assertLinkByHref("admin/structure/entity_ui/entity_tab/user.{$edit['id']}/edit");
+    $this->assertSession()->linkByHrefExists("admin/structure/entity_ui/entity_tab/user.{$edit['id']}/edit");


     // todo:
    ----------- end diff -----------

Applied rules:
 * AssertLinkByHrefRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity_ui/src/Entity/EntityTab.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_ui\Entity;

+use Drupal\entity_ui\Plugin\EntityTabLazyPluginCollection;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    */
   protected function getContentPluginCollection() {
     if (!$this->contentPluginCollection) {
-      $this->contentPluginCollection = new \Drupal\entity_ui\Plugin\EntityTabLazyPluginCollection(
+      $this->contentPluginCollection = new EntityTabLazyPluginCollection(
         \Drupal::service('plugin.manager.entity_ui_tab_content'),
         $this->content_plugin,
         $this->content_config,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity_ui/entity_ui.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\entity_ui\Routing\TabRouteProvider;
+use Drupal\entity_ui\EntityHandler\BundleEntityCollection;
+use Drupal\entity_ui\EntityHandler\FieldUIWithoutBundleEntityProxy;
 /**
  * @file
  * Provides an admin UI for building tabs on content entities.
@@ @@
     // we have to do it the sloppy way for now.
     $providers = $entity_type->getRouteProviderClasses() ?: [];
     if (empty($providers['entity_ui'])) {
-      $providers['entity_ui'] = Drupal\entity_ui\Routing\TabRouteProvider::class;
+      $providers['entity_ui'] = TabRouteProvider::class;
       $entity_type->setHandlerClass('route_provider', $providers);
     }

@@ @@
         // our handler can't do anything, but this causes problems in tests and
         // if we are enabled at the same time as entity type modules.
         // See https://www.drupal.org/node/2896669.
-        $entity_type->setHandlerClass('entity_ui_admin', \Drupal\entity_ui\EntityHandler\BundleEntityCollection::class);
+        $entity_type->setHandlerClass('entity_ui_admin', BundleEntityCollection::class);

         // Done with this entity type.
         continue;
@@ @@
     $field_ui_base_route_name = $entity_type->get('field_ui_base_route');

     if ($field_ui_base_route_name) {
-      $entity_type->setHandlerClass('entity_ui_admin', \Drupal\entity_ui\EntityHandler\FieldUIWithoutBundleEntityProxy::class);
+      $entity_type->setHandlerClass('entity_ui_admin', FieldUIWithoutBundleEntityProxy::class);

       // Done with this entity type.
       continue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


7) modules/contrib/entity_ui/src/EntityHandler/FieldUIWithoutBundleEntityProxy.php:133

    ---------- begin diff ----------
@@ @@
       // hook_entity_bundle_info(). We detect this by the presence of a 'bundle'
       // parameter at the end of the field UI route path, which Field UI module
       // expects when the bundles are not config entities.
-      $handler_class = \Drupal\entity_ui\EntityHandler\PlainBundlesEntityUIAdmin::class;
+      $handler_class = PlainBundlesEntityUIAdmin::class;
     }
     else {
       // The entity type has only a single bundle.
-      $handler_class = \Drupal\entity_ui\EntityHandler\BasicFieldUI::class;
+      $handler_class = BasicFieldUI::class;
     }

     $this->realHandler = $this->entityTypeManager->createHandlerInstance($handler_class, $this->entityType);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


 [OK] 7 files have been changed by Rector                                       

