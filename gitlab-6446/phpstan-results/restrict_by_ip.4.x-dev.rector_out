modules/contrib/restrict_by_ip/restrict_by_ip.module
modules/contrib/restrict_by_ip/src/RestrictByIpServiceProvider.php
modules/contrib/restrict_by_ip/src/RoleFirewall.php
modules/contrib/restrict_by_ip/src/RoleFirewallInterface.php
modules/contrib/restrict_by_ip/src/Session/AccountProxy.php
modules/contrib/restrict_by_ip/src/EventSubscriber/FirewallSubscriber.php
modules/contrib/restrict_by_ip/tests/src/Functional/LoginTest.php
modules/contrib/restrict_by_ip/src/Exception/IPOutOfRangeException.php
modules/contrib/restrict_by_ip/src/Exception/InvalidIPException.php
modules/contrib/restrict_by_ip/src/Form/GeneralSettingsForm.php
modules/contrib/restrict_by_ip/src/Form/LoginSettingsForm.php
modules/contrib/restrict_by_ip/src/Form/RoleSettingsForm.php
modules/contrib/restrict_by_ip/src/Form/UserSettingsForm.php
modules/contrib/restrict_by_ip/tests/src/Functional/RedirectTest.php
modules/contrib/restrict_by_ip/tests/src/Functional/RestrictByIPWebTestBase.php
modules/contrib/restrict_by_ip/src/IPTools.php
modules/contrib/restrict_by_ip/tests/src/Functional/RoleTest.php
modules/contrib/restrict_by_ip/src/IPToolsInterface.php
modules/contrib/restrict_by_ip/src/LoginFirewall.php
modules/contrib/restrict_by_ip/src/LoginFirewallInterface.php
modules/contrib/restrict_by_ip/tests/src/Functional/UiTest.php
modules/contrib/restrict_by_ip/tests/src/Unit/UnitTest.php

7 files with changes
====================

1) modules/contrib/restrict_by_ip/src/Form/UserSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\restrict_by_ip\Form;

+use Drupal\user\Entity\User;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@

     // Current restrictions.
     foreach ($config->get('user') as $key => $value) {
-      $account = \Drupal\user\Entity\User::load($key);
+      $account = User::load($key);
       $form['restrict_by_ip_user_' . $key] = [
         '#type' => 'textfield',
         '#title' => $this->t('@name user IP range', ['@name' => $account->label()]),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/restrict_by_ip/src/EventSubscriber/FirewallSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\restrict_by_ip\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\restrict_by_ip\LoginFirewallInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;

 /**
  * Triggers the restrict by IP login firewall.
@@ @@
   /**
    * This method is called whenever the kernel.request event is dispatched.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event.
    */
-  public function loginFirewall(GetResponseEvent $event) {
+  public function loginFirewall(RequestEvent $event) {
     $this->loginFirewall->execute($this->currentUser);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


3) modules/contrib/restrict_by_ip/restrict_by_ip.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\restrict_by_ip\Exception\InvalidIPException;
 /**
  * @file
  * Restrict logins or roles to whitelisted IP addresses.
@@ @@
       try {
         $ip_tools->validateIP($ip);
       }
-      catch (\Drupal\restrict_by_ip\Exception\InvalidIPException $e) {
+      catch (InvalidIPException $e) {
         $form_state->setErrorByName('restrict_by_ip_address', t($e->getMessage()));
       }
     }
@@ @@
       $user->removeRole($role);
     }
   }
-}
+}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


4) modules/contrib/restrict_by_ip/tests/src/Functional/UiTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     // Enable modules needed for these tests.
     parent::setUp();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/restrict_by_ip/tests/src/Functional/RoleTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create a role with administer permissions so we can load the user edit,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/restrict_by_ip/tests/src/Functional/RestrictByIPWebTestBase.php:55

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     // Enable modules needed for these tests.
     parent::setUp();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/restrict_by_ip/tests/src/Functional/RedirectTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create a page users will get redirected to when denied login.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

