diff --git a/src/Controller/RequestReportController.php b/src/Controller/RequestReportController.php
index 5840adc..835409d 100644
--- a/src/Controller/RequestReportController.php
+++ b/src/Controller/RequestReportController.php
@@ -159,7 +159,7 @@ class RequestReportController extends ControllerBase {
    * Returns preview app summary.
    */
   public function previewApp(Request $request) {
-    $build_path = '/' . drupal_get_path('module', 'qtools_profiler') . '/react-app/chrome-extension/build';
+    $build_path = '/' . \Drupal::service('extension.list.module')->getPath('qtools_profiler') . '/react-app/chrome-extension/build';
     $build = [
       '#theme' => 'qtools_profiler_preview_iframe',
       '#build_path' => $build_path,
diff --git a/src/EventSubscriber/OnKernelEvents.php b/src/EventSubscriber/OnKernelEvents.php
index 8e9bac4..b71a96a 100644
--- a/src/EventSubscriber/OnKernelEvents.php
+++ b/src/EventSubscriber/OnKernelEvents.php
@@ -2,14 +2,14 @@
 
 namespace Drupal\qtools_profiler\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\TerminateEvent;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Render\HtmlResponse;
 use Drupal\Core\Url;
 use Drupal\dynamic_page_cache\EventSubscriber\DynamicPageCacheSubscriber;
 use Drupal\qtools_profiler\PerformanceService;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
-use Symfony\Component\HttpKernel\Event\PostResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -36,7 +36,7 @@ class OnKernelEvents implements EventSubscriberInterface {
   /**
    * Handles kernel terminate event.
    */
-  public function onKernelTerminate(PostResponseEvent $event) {
+  public function onKernelTerminate(TerminateEvent $event) {
     if ($this->performanceService->getRequestId() !== NULL) {
       $this->performanceService->monitoringFinish($event);
     }
@@ -45,7 +45,7 @@ class OnKernelEvents implements EventSubscriberInterface {
   /**
    * Handles kernel response event.
    */
-  public function onKernelResponse(FilterResponseEvent $event) {
+  public function onKernelResponse(ResponseEvent $event) {
     $request_id = $this->performanceService->getRequestId();
 
     if (!empty($request_id)) {
@@ -140,7 +140,7 @@ class OnKernelEvents implements EventSubscriberInterface {
   /**
    * Handles kernel request event.
    */
-  public function onKernelRequestEarly(GetResponseEvent $event) {
+  public function onKernelRequestEarly(RequestEvent $event) {
     // Ensure cookie client.
     $this->performanceService->monitoringEnsureCookie($event);
 
@@ -153,7 +153,7 @@ class OnKernelEvents implements EventSubscriberInterface {
   /**
    * Handles kernel request event.
    */
-  public function onKernelRequestWithRoute(GetResponseEvent $event) {
+  public function onKernelRequestWithRoute(RequestEvent $event) {
     if ($this->performanceService->monitoringActive()) {
       $route = $event->getRequest()->attributes->get('_route');
       if (!empty($route)) {
diff --git a/src/PerformanceService.php b/src/PerformanceService.php
index 95fe743..1425833 100644
--- a/src/PerformanceService.php
+++ b/src/PerformanceService.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\qtools_profiler;
 
+use Symfony\Component\HttpKernel\Event\TerminateEvent;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Database\Connection;
@@ -15,10 +18,7 @@ use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\qtools_common\QToolsCryptHelper;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Drupal\Core\Path\PathMatcherInterface;
-use Symfony\Component\HttpKernel\Event\PostResponseEvent;
 
 /**
  * Class PerformanceService.
@@ -397,7 +397,7 @@ class PerformanceService {
   /**
    * Handle request termination.
    */
-  public function monitoringFinish(PostResponseEvent $event) {
+  public function monitoringFinish(TerminateEvent $event) {
     // Only act if we have valid requestID.
     if (!$this->monitoringActive()) {
       $this->finishProfiling(FALSE);
@@ -443,7 +443,7 @@ class PerformanceService {
   /**
    * Handle request completion.
    */
-  public function monitoringComplete(FilterResponseEvent $event) {
+  public function monitoringComplete(ResponseEvent $event) {
     // Only act if we have valid requestID.
     if (!$this->monitoringActive()) {
       $this->finishProfiling(FALSE);
@@ -476,7 +476,7 @@ class PerformanceService {
   /**
    * Add tracking information to supported responses.
    */
-  public function addTrackingInformation(FilterResponseEvent $event, $requestId, $in_progress_stats = NULL) {
+  public function addTrackingInformation(ResponseEvent $event, $requestId, $in_progress_stats = NULL) {
     // Add header to any request.
     $summary = $this->getRequestSummary($requestId, $in_progress_stats);
     $event->getResponse()->headers->set('X-QTools-Profiler-RequestId', $requestId);
@@ -597,7 +597,7 @@ class PerformanceService {
   /**
    * Make sure we have monitoring cookie set.
    */
-  public function monitoringEnsureCookie(GetResponseEvent $event) {
+  public function monitoringEnsureCookie(RequestEvent $event) {
     $cookie = $event->getRequest()->cookies->get(static::COOKIE_PROFILER_CLIENT);
     if (empty($cookie) || QToolsCryptHelper::check($cookie) !== QToolsCryptHelper::CHECK_VALID) {
       $cookie = QToolsCryptHelper::sign(uniqid(), QToolsCryptHelper::SIGN_SITE);
@@ -642,7 +642,7 @@ class PerformanceService {
   /**
    * Start collection routine.
    */
-  public function monitoringStart(GetResponseEvent $event) {
+  public function monitoringStart(RequestEvent $event) {
     // If we already started then this is subrequest,
     // that we merge into main one.
     if ($this->monitoringActive()) {
@@ -733,7 +733,7 @@ class PerformanceService {
    * @return bool
    *   Result of the allowed check.
    */
-  public function monitoringAllowed(GetResponseEvent $event) {
+  public function monitoringAllowed(RequestEvent $event) {
     // Don't log if we not supposed to.
     $conf = $this->confGet();
     if (!empty($conf['enabled'])) {
@@ -759,7 +759,7 @@ class PerformanceService {
    * @return bool
    *   Result of the allowed check.
    */
-  protected function profilingAllowed(GetResponseEvent $event) {
+  protected function profilingAllowed(RequestEvent $event) {
     $conf = $this->confGet();
 
     // Get profiling rules.
@@ -934,7 +934,7 @@ class PerformanceService {
   /**
    * Check if rule is valid.
    */
-  protected function rulesValid($rules_text, GetResponseEvent $event) {
+  protected function rulesValid($rules_text, RequestEvent $event) {
     // Check by rules.
     $rules = explode(PHP_EOL, $rules_text);
     $validation_context = $this->getRuleValidaionContext($event);
@@ -985,7 +985,7 @@ class PerformanceService {
   /**
    * Check if rule is valid.
    */
-  protected function getRuleValidaionContext(GetResponseEvent $event) {
+  protected function getRuleValidaionContext(RequestEvent $event) {
     $context = [
       'path' => $event->getRequest()->getRequestUri(),
       'uid' => $this->currentUser->id(),
