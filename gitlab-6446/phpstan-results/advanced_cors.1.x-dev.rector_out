modules/contrib/advanced_cors/advanced_cors.module
modules/contrib/advanced_cors/src/Entity/RouteConfigEntity.php
modules/contrib/advanced_cors/src/Entity/RouteConfigEntityInterface.php
modules/contrib/advanced_cors/src/EventSubscriber/AdvancedCorsEventSubscriber.php
modules/contrib/advanced_cors/src/Form/RouteConfigEntityDeleteForm.php
modules/contrib/advanced_cors/src/Form/RouteConfigEntityForm.php
modules/contrib/advanced_cors/src/PatternsCache.php
modules/contrib/advanced_cors/src/RouteConfigEntityHtmlRouteProvider.php
modules/contrib/advanced_cors/src/RouteConfigEntityListBuilder.php
modules/contrib/advanced_cors/tests/src/Unit/EventSubscriber/AdvancedCorsResponseEventSubscriberTest.php

1 file with changes
===================

1) modules/contrib/advanced_cors/src/EventSubscriber/AdvancedCorsEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\advanced_cors\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\advanced_cors\Entity\RouteConfigEntityInterface;
 use Drupal\advanced_cors\PatternsCache;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
 use Drupal\path_alias\AliasManagerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Adds headers to the response.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $request = $event->getRequest();
     $path_info = $request->getPathInfo();
     $current_path = $this->aliasManager->getPathByAlias($path_info);
@@ @@
   /**
    * Adds CORS headers to the response.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The response event from Drupal core (contains request and response).
    * @param \Drupal\advanced_cors\Entity\RouteConfigEntityInterface $config
    *   The configuration for this module.
    */
-  protected function addCorsHeaders(FilterResponseEvent $event,
+  protected function addCorsHeaders(ResponseEvent $event,
                                     RouteConfigEntityInterface $config) {
     $mapping_headers = [
       'allowed_headers' => 'Access-Control-Allow-Headers',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


 [OK] 1 file has been changed by Rector                                         

