diff --git a/plugins/content_types/scheduler_form_pane.inc b/plugins/content_types/scheduler_form_pane.inc
index 2972187..9e6e978 100644
--- a/plugins/content_types/scheduler_form_pane.inc
+++ b/plugins/content_types/scheduler_form_pane.inc
@@ -18,7 +18,7 @@ $plugin = [
   'edit form' => 'scheduler_form_pane_node_form_menu_content_type_edit_form',
   'render callback' => 'scheduler_form_pane_content_type_render',
   'title' => t('Node form scheduler'),
-  'icon' => drupal_get_path('module', 'ctools') . '/plugins/content_types/node_form/icon_node_form.png',
+  'icon' => \Drupal::service('extension.list.module')->getPath('ctools') . '/plugins/content_types/node_form/icon_node_form.png',
   'description' => t('Scheduler date options on the Node form.'),
   'required context' => new ctools_context_required(t('Form'), 'node_form'),
   'category' => t('Form'),
diff --git a/scheduler.module b/scheduler.module
index 0fb2418..62e1792 100644
--- a/scheduler.module
+++ b/scheduler.module
@@ -31,7 +31,7 @@ function scheduler_help($route_name, RouteMatchInterface $route_match) {
       $output = '<h3>' . t('About') . '</h3>';
       $output .= '<p>' . t('The Scheduler module provides the functionality for automatic publishing and unpublishing of nodes at specified future dates.') . '</p>';
       $output .= '<p>' . t('You can read more in the <a href="@readme">readme</a> file or our <a href="@project">project page on Drupal.org</a>.', [
-        '@readme' => $GLOBALS['base_url'] . '/' . drupal_get_path('module', 'scheduler') . '/README.md',
+        '@readme' => $GLOBALS['base_url'] . '/' . \Drupal::service('extension.list.module')->getPath('scheduler') . '/README.md',
         '@project' => 'https://drupal.org/project/scheduler',
       ]) . '</p>';
       break;
diff --git a/scheduler_rules_integration/tests/src/Functional/SchedulerRulesActionsTest.php b/scheduler_rules_integration/tests/src/Functional/SchedulerRulesActionsTest.php
index a84e703..96759ba 100644
--- a/scheduler_rules_integration/tests/src/Functional/SchedulerRulesActionsTest.php
+++ b/scheduler_rules_integration/tests/src/Functional/SchedulerRulesActionsTest.php
@@ -118,7 +118,8 @@ class SchedulerRulesActionsTest extends SchedulerBrowserTestBase {
       'title[0][value]' => 'New node - Trigger Action Rule 1',
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/add/' . $this->type, $edit, 'Save');
+    $this->drupalGet('node/add/' . $this->type);
+    $this->submitForm($edit, 'Save');
     $node = $this->drupalGetNodeByTitle('New node - Trigger Action Rule 1');
     $this->assertSession()->pageTextContains(sprintf('%s is scheduled to be published %s', 'New node - Trigger Action Rule 1', $publish_on_formatted));
 
@@ -137,7 +138,8 @@ class SchedulerRulesActionsTest extends SchedulerBrowserTestBase {
       'title[0][value]' => 'Edit node - but no rules will be triggered',
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     $this->nodeStorage->resetCache([$node->id()]);
     $node = $this->nodeStorage->load($node->id());
     // Check that neither of the rules are triggered, no publish and unpublish
@@ -153,7 +155,8 @@ class SchedulerRulesActionsTest extends SchedulerBrowserTestBase {
       'title[0][value]' => 'Edit node - Trigger Action Rule 1',
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     $this->nodeStorage->resetCache([$node->id()]);
     $node = $this->nodeStorage->load($node->id());
     // Check that rule 1 is triggered and rule 2 is not. Check that a publishing
@@ -169,7 +172,8 @@ class SchedulerRulesActionsTest extends SchedulerBrowserTestBase {
       'title[0][value]' => 'Edit node - Trigger Action Rule 2',
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     $this->nodeStorage->resetCache([$node->id()]);
     $node = $this->nodeStorage->load($node->id());
     // Check that rule 2 is triggered and rule 1 is not. Check that the
@@ -185,7 +189,8 @@ class SchedulerRulesActionsTest extends SchedulerBrowserTestBase {
       'title[0][value]' => 'New non-enabled node - Trigger Action Rule 1',
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/add/' . $this->nonSchedulerNodeType->id(), $edit, 'Save');
+    $this->drupalGet('node/add/' . $this->nonSchedulerNodeType->id());
+    $this->submitForm($edit, 'Save');
     $node = $this->drupalGetNodeByTitle('New non-enabled node - Trigger Action Rule 1');
     // Check that rule 1 issued a warning message.
     $assert->pageTextContains('warning message');
@@ -209,7 +214,8 @@ class SchedulerRulesActionsTest extends SchedulerBrowserTestBase {
       'title[0][value]' => 'Edit non-enabled node - Trigger Action Rule 1',
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     // Check that rule 1 issued a warning message.
     $assert->pageTextContains('warning message');
     $assert->elementExists('xpath', '//div[@aria-label="Warning message" and contains(string(), "Action")]');
@@ -229,7 +235,8 @@ class SchedulerRulesActionsTest extends SchedulerBrowserTestBase {
       'title[0][value]' => 'Edit non-enabled node - Trigger Action Rule 2',
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     // Check that rule 2 issued a warning message.
     $assert->pageTextContains('warning message');
     $assert->elementExists('xpath', '//div[@aria-label="Warning message" and contains(string(), "Action")]');
@@ -315,7 +322,8 @@ class SchedulerRulesActionsTest extends SchedulerBrowserTestBase {
       'title[0][value]' => 'New node - Trigger Action Rule 3',
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/add/' . $this->type, $edit, 'Save');
+    $this->drupalGet('node/add/' . $this->type);
+    $this->submitForm($edit, 'Save');
     $node = $this->drupalGetNodeByTitle('New node - Trigger Action Rule 3');
     $this->assertSession()->pageTextContains(sprintf('%s is scheduled to be unpublished %s', 'New node - Trigger Action Rule 3', $unpublish_on_formatted));
 
@@ -334,7 +342,8 @@ class SchedulerRulesActionsTest extends SchedulerBrowserTestBase {
       'title[0][value]' => 'Edit node - but no rules will be triggered',
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     $this->nodeStorage->resetCache([$node->id()]);
     $node = $this->nodeStorage->load($node->id());
     // Check that neither of the rules are triggered, no publish and unpublish
@@ -350,7 +359,8 @@ class SchedulerRulesActionsTest extends SchedulerBrowserTestBase {
       'title[0][value]' => 'Edit node - Trigger Action Rule 3',
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     $this->nodeStorage->resetCache([$node->id()]);
     $node = $this->nodeStorage->load($node->id());
     // Check that rule 3 is triggered and rule 4 is not. Check that an
@@ -366,7 +376,8 @@ class SchedulerRulesActionsTest extends SchedulerBrowserTestBase {
       'title[0][value]' => 'Edit node - Trigger Action Rule 4',
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     $this->nodeStorage->resetCache([$node->id()]);
     $node = $this->nodeStorage->load($node->id());
     // Check that rule 4 is triggered and rule 3 is not. Check that the
@@ -382,7 +393,8 @@ class SchedulerRulesActionsTest extends SchedulerBrowserTestBase {
       'title[0][value]' => 'New non-enabled node - Trigger Action Rule 3',
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/add/' . $this->nonSchedulerNodeType->id(), $edit, 'Save');
+    $this->drupalGet('node/add/' . $this->nonSchedulerNodeType->id());
+    $this->submitForm($edit, 'Save');
     $node = $this->drupalGetNodeByTitle('New non-enabled node - Trigger Action Rule 3');
     // Check that rule 3 issued a warning message.
     $assert->pageTextContains('warning message');
@@ -406,7 +418,8 @@ class SchedulerRulesActionsTest extends SchedulerBrowserTestBase {
       'title[0][value]' => 'Edit non-enabled node - Trigger Action Rule 3',
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     // Check that rule 3 issued a warning message.
     $assert->pageTextContains('warning message');
     $assert->elementExists('xpath', '//div[@aria-label="Warning message" and contains(string(), "Action")]');
@@ -426,7 +439,8 @@ class SchedulerRulesActionsTest extends SchedulerBrowserTestBase {
       'title[0][value]' => 'Edit non-enabled node - Trigger Action Rule 4',
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     // Check that rule 4 issued a warning message.
     $assert->pageTextContains('warning message');
     $assert->elementExists('xpath', '//div[@aria-label="Warning message" and contains(string(), "Action")]');
diff --git a/scheduler_rules_integration/tests/src/Functional/SchedulerRulesConditionsTest.php b/scheduler_rules_integration/tests/src/Functional/SchedulerRulesConditionsTest.php
index 95270df..7deb0af 100644
--- a/scheduler_rules_integration/tests/src/Functional/SchedulerRulesConditionsTest.php
+++ b/scheduler_rules_integration/tests/src/Functional/SchedulerRulesConditionsTest.php
@@ -229,7 +229,8 @@ class SchedulerRulesConditionsTest extends SchedulerBrowserTestBase {
     $edit = [
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/' . $this->node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $this->node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
 
     $assert->pageTextContains($message5);
     $assert->pageTextContains($message6);
@@ -241,7 +242,8 @@ class SchedulerRulesConditionsTest extends SchedulerBrowserTestBase {
       'publish_on[0][value][date]' => date('Y-m-d', strtotime('+1 day', $this->requestTime)),
       'publish_on[0][value][time]' => date('H:i:s', strtotime('+1 day', $this->requestTime)),
     ];
-    $this->drupalPostForm('node/' . $this->node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $this->node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
 
     $assert->pageTextNotContains($message5);
     $assert->pageTextContains($message6);
@@ -253,7 +255,8 @@ class SchedulerRulesConditionsTest extends SchedulerBrowserTestBase {
       'unpublish_on[0][value][date]' => date('Y-m-d', strtotime('+2 day', $this->requestTime)),
       'unpublish_on[0][value][time]' => date('H:i:s', strtotime('+2 day', $this->requestTime)),
     ];
-    $this->drupalPostForm('node/' . $this->node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $this->node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
 
     $assert->pageTextNotContains($message5);
     $assert->pageTextNotContains($message6);
diff --git a/scheduler_rules_integration/tests/src/Functional/SchedulerRulesEventsTest.php b/scheduler_rules_integration/tests/src/Functional/SchedulerRulesEventsTest.php
index 3ddda30..f186311 100644
--- a/scheduler_rules_integration/tests/src/Functional/SchedulerRulesEventsTest.php
+++ b/scheduler_rules_integration/tests/src/Functional/SchedulerRulesEventsTest.php
@@ -78,7 +78,8 @@ class SchedulerRulesEventsTest extends SchedulerBrowserTestBase {
       'title[0][value]' => 'Test for no events',
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/add/' . $this->type, $edit, 'Save');
+    $this->drupalGet('node/add/' . $this->type);
+    $this->submitForm($edit, 'Save');
     $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
     $assert->pageTextNotContains($this->message[1]);
     $assert->pageTextNotContains($this->message[2]);
@@ -91,7 +92,8 @@ class SchedulerRulesEventsTest extends SchedulerBrowserTestBase {
     $edit = [
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     $assert->pageTextNotContains($this->message[1]);
     $assert->pageTextNotContains($this->message[2]);
     $assert->pageTextNotContains($this->message[3]);
@@ -114,7 +116,8 @@ class SchedulerRulesEventsTest extends SchedulerBrowserTestBase {
       'publish_on[0][value][time]' => date('H:i:s', time() + 3),
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/add/' . $this->type, $edit, 'Save');
+    $this->drupalGet('node/add/' . $this->type);
+    $this->submitForm($edit, 'Save');
     $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
     $assert->pageTextContains($this->message[1]);
     $assert->pageTextNotContains($this->message[2]);
@@ -128,7 +131,8 @@ class SchedulerRulesEventsTest extends SchedulerBrowserTestBase {
       'title[0][value]' => 'Edit node with publish-on date',
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     $assert->pageTextNotContains($this->message[1]);
     $assert->pageTextContains($this->message[2]);
     $assert->pageTextNotContains($this->message[3]);
@@ -163,7 +167,8 @@ class SchedulerRulesEventsTest extends SchedulerBrowserTestBase {
       'unpublish_on[0][value][time]' => date('H:i:s', time() + 3),
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/add/' . $this->type, $edit, 'Save');
+    $this->drupalGet('node/add/' . $this->type);
+    $this->submitForm($edit, 'Save');
     $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
     $assert->pageTextNotContains($this->message[1]);
     $assert->pageTextNotContains($this->message[2]);
@@ -177,7 +182,8 @@ class SchedulerRulesEventsTest extends SchedulerBrowserTestBase {
       'title[0][value]' => 'Edit node with unpublish-on date',
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     $assert->pageTextNotContains($this->message[1]);
     $assert->pageTextNotContains($this->message[2]);
     $assert->pageTextNotContains($this->message[3]);
@@ -214,7 +220,8 @@ class SchedulerRulesEventsTest extends SchedulerBrowserTestBase {
       'unpublish_on[0][value][time]' => date('H:i:s', time() + 4),
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/add/' . $this->type, $edit, 'Save');
+    $this->drupalGet('node/add/' . $this->type);
+    $this->submitForm($edit, 'Save');
     $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
     $assert->pageTextContains($this->message[1]);
     $assert->pageTextNotContains($this->message[2]);
@@ -228,7 +235,8 @@ class SchedulerRulesEventsTest extends SchedulerBrowserTestBase {
       'title[0][value]' => 'Edit node with both dates',
       'body[0][value]' => $this->randomString(30),
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
     $assert->pageTextNotContains($this->message[1]);
     $assert->pageTextContains($this->message[2]);
diff --git a/src/SchedulerManager.php b/src/SchedulerManager.php
index 262baff..4a4b651 100644
--- a/src/SchedulerManager.php
+++ b/src/SchedulerManager.php
@@ -115,7 +115,7 @@ class SchedulerManager {
     }
     else {
       // Replicate the existing dispatch signature.
-      $this->eventDispatcher->dispatch($event_name, $event);
+      $this->eventDispatcher->dispatch($event, $event_name);
     }
   }
 
diff --git a/tests/src/Functional/SchedulerAdminSettingsTest.php b/tests/src/Functional/SchedulerAdminSettingsTest.php
index 688ca0c..c6407c2 100644
--- a/tests/src/Functional/SchedulerAdminSettingsTest.php
+++ b/tests/src/Functional/SchedulerAdminSettingsTest.php
@@ -30,7 +30,8 @@ class SchedulerAdminSettingsTest extends SchedulerBrowserTestBase {
       'allow_date_only' => TRUE,
       'default_time' => '6:30',
     ];
-    $this->drupalPostForm('admin/config/content/scheduler', $settings, 'Save configuration');
+    $this->drupalGet('admin/config/content/scheduler');
+    $this->submitForm($settings, 'Save configuration');
     // Verify that the values have been saved correctly.
     $this->assertTrue($this->config('scheduler.settings')->get('allow_date_only'), 'The config setting for allow_date_only is stored correctly.');
     $this->assertEquals('06:30:00', $this->config('scheduler.settings')->get('default_time'), 'The config setting for default_time is stored correctly.');
@@ -40,7 +41,8 @@ class SchedulerAdminSettingsTest extends SchedulerBrowserTestBase {
       'allow_date_only' => TRUE,
       'default_time' => '123',
     ];
-    $this->drupalPostForm('admin/config/content/scheduler', $settings, 'Save configuration');
+    $this->drupalGet('admin/config/content/scheduler');
+    $this->submitForm($settings, 'Save configuration');
     // Verify that the value has not been saved and an error is displayed.
     $this->assertEquals('06:30:00', $this->config('scheduler.settings')->get('default_time'), 'The config setting for default_time has not changed.');
     $this->assertSession()->pageTextContains('The default time should be in the format HH:MM:SS');
@@ -49,7 +51,8 @@ class SchedulerAdminSettingsTest extends SchedulerBrowserTestBase {
     $settings = [
       'hide_seconds' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/content/scheduler', $settings, 'Save configuration');
+    $this->drupalGet('admin/config/content/scheduler');
+    $this->submitForm($settings, 'Save configuration');
     // Verify that the hide seconds option is saved and the default time is
     // stored in HH:MM format with no seconds.
     $this->assertTrue($this->config('scheduler.settings')->get('hide_seconds'), 'The config setting for hide_seconds is stored correctly.');
@@ -59,7 +62,8 @@ class SchedulerAdminSettingsTest extends SchedulerBrowserTestBase {
     $settings = [
       'default_time' => '456',
     ];
-    $this->drupalPostForm('admin/config/content/scheduler', $settings, 'Save configuration');
+    $this->drupalGet('admin/config/content/scheduler');
+    $this->submitForm($settings, 'Save configuration');
     // Verify that the value has not been saved, and that an error message is
     // displayed showing the correct format HH:MM not HH:MM:SS.
     $this->assertEquals('06:30', $this->config('scheduler.settings')->get('default_time'), 'The config setting for default_time has not changed.');
diff --git a/tests/src/Functional/SchedulerApiTest.php b/tests/src/Functional/SchedulerApiTest.php
index e469fea..a8e283c 100644
--- a/tests/src/Functional/SchedulerApiTest.php
+++ b/tests/src/Functional/SchedulerApiTest.php
@@ -68,7 +68,8 @@ class SchedulerApiTest extends SchedulerBrowserTestBase {
       'publish_on[0][value][date]' => date('Y-m-d', time() + 3),
       'publish_on[0][value][time]' => date('H:i:s', time() + 3),
     ];
-    $this->drupalPostForm('node/add/' . $this->customName, $edit, 'Save');
+    $this->drupalGet('node/add/' . $this->customName);
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('is scheduled for publishing, but will not be published until approved.');
 
     // Create a node that is scheduled but not approved for publication. Then
@@ -105,7 +106,8 @@ class SchedulerApiTest extends SchedulerBrowserTestBase {
 
     // Check that a node can be approved and published via edit form.
     $node = $this->createUnapprovedNode('publish_on');
-    $this->drupalPostForm('node/' . $node->id() . '/edit', ['field_approved_publishing[value]' => '1'], 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm(['field_approved_publishing[value]' => '1'], 'Save');
     $this->nodeStorage->resetCache([$node->id()]);
     $node = $this->nodeStorage->load($node->id());
     $this->assertTrue($node->isPublished(), 'An approved node with a date in the past is published immediately after saving via edit form.');
@@ -135,7 +137,8 @@ class SchedulerApiTest extends SchedulerBrowserTestBase {
       'unpublish_on[0][value][date]' => date('Y-m-d', time() + 3),
       'unpublish_on[0][value][time]' => date('H:i:s', time() + 3),
     ];
-    $this->drupalPostForm('node/add/' . $this->customName, $edit, 'Save');
+    $this->drupalGet('node/add/' . $this->customName);
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('is scheduled for unpublishing, but will not be unpublished until approved.');
 
     // Create a node that is scheduled but not approved for unpublication. Then
@@ -257,7 +260,8 @@ class SchedulerApiTest extends SchedulerBrowserTestBase {
       'publish_on[0][value][date]' => date('Y-m-d', strtotime('-2 day', $this->requestTime)),
       'publish_on[0][value][time]' => date('H:i:s', strtotime('-2 day', $this->requestTime)),
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     // Verify that the values have been altered as expected.
     $this->nodeStorage->resetCache([$node->id()]);
     $node = $this->nodeStorage->load($node->id());
diff --git a/tests/src/Functional/SchedulerBasicTest.php b/tests/src/Functional/SchedulerBasicTest.php
index f18cace..5649b91 100644
--- a/tests/src/Functional/SchedulerBasicTest.php
+++ b/tests/src/Functional/SchedulerBasicTest.php
@@ -52,7 +52,8 @@ class SchedulerBasicTest extends SchedulerBrowserTestBase {
    * Schedules content, runs cron and asserts status.
    */
   protected function helpTestScheduler($edit) {
-    $this->drupalPostForm('node/add/' . $this->type, $edit, 'Save');
+    $this->drupalGet('node/add/' . $this->type);
+    $this->submitForm($edit, 'Save');
     // Verify that the node was created.
     $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
     $this->assertNotEmpty($node, sprintf('"%s" was created sucessfully.', $edit['title[0][value]']));
diff --git a/tests/src/Functional/SchedulerDefaultTimeTest.php b/tests/src/Functional/SchedulerDefaultTimeTest.php
index ad2c512..1b00753 100644
--- a/tests/src/Functional/SchedulerDefaultTimeTest.php
+++ b/tests/src/Functional/SchedulerDefaultTimeTest.php
@@ -85,8 +85,9 @@ class SchedulerDefaultTimeTest extends SchedulerBrowserTestBase {
       'publish_on[0][value][date]' => $this->publishTime->format('Y-m-d'),
       'unpublish_on[0][value][date]' => $this->unpublishTime->format('Y-m-d'),
     ];
+    $this->drupalGet('node/add/' . $this->type);
     // Create a node and check that the expected error messages are shown.
-    $this->drupalPostForm('node/add/' . $this->type, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     // By default it is required to enter a time when scheduling content for
     // publishing and for unpublishing.
     $this->assertSession()->pageTextNotMatches('/' . $edit['title[0][value]'] . ' is scheduled to be published .* and unpublished .*/');
@@ -95,9 +96,10 @@ class SchedulerDefaultTimeTest extends SchedulerBrowserTestBase {
 
     // Allow the user to enter only a date with no time.
     $config->set('allow_date_only', TRUE)->save();
+    $this->drupalGet('node/add/' . $this->type);
 
     // Create a node and check that the validation messages are not shown.
-    $this->drupalPostForm('node/add/' . $this->type, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextNotContains($publish_validation_message);
     $this->assertSession()->pageTextNotContains($unpublish_validation_message);
 
@@ -163,8 +165,9 @@ class SchedulerDefaultTimeTest extends SchedulerBrowserTestBase {
       'publish_on[0][value][date]' => $this->publishTime->format('Y-m-d'),
       'unpublish_on[0][value][date]' => $this->unpublishTime->format('Y-m-d'),
     ];
+    $this->drupalGet('node/add/' . $type);
     // Create a node and check that the expected default time has been saved.
-    $this->drupalPostForm('node/add/' . $type, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
 
     // Get the pattern of the 'long' default date format.
     $date_format_storage = $this->container->get('entity_type.manager')->getStorage('date_format');
diff --git a/tests/src/Functional/SchedulerDevelGenerateTest.php b/tests/src/Functional/SchedulerDevelGenerateTest.php
index b483441..4fef5d0 100644
--- a/tests/src/Functional/SchedulerDevelGenerateTest.php
+++ b/tests/src/Functional/SchedulerDevelGenerateTest.php
@@ -106,7 +106,8 @@ class SchedulerDevelGenerateTest extends SchedulerBrowserTestBase {
     $generate_settings = [
       "edit-node-types-$this->type" => TRUE,
     ];
-    $this->drupalPostForm('admin/config/development/generate/content', $generate_settings, 'Generate');
+    $this->drupalGet('admin/config/development/generate/content');
+    $this->submitForm($generate_settings, 'Generate');
     // Display the full content list and the scheduled list. Calls to these
     // pages are for information and debug only. They could be removed.
     $this->drupalGet('admin/content');
@@ -126,7 +127,8 @@ class SchedulerDevelGenerateTest extends SchedulerBrowserTestBase {
       'scheduler_publishing' => 100,
       'scheduler_unpublishing' => 0,
     ];
-    $this->drupalPostForm('admin/config/development/generate/content', $generate_settings, 'Generate');
+    $this->drupalGet('admin/config/development/generate/content');
+    $this->submitForm($generate_settings, 'Generate');
     $this->drupalGet('admin/content');
     $this->drupalGet('admin/content/scheduled');
 
@@ -145,7 +147,8 @@ class SchedulerDevelGenerateTest extends SchedulerBrowserTestBase {
       'scheduler_publishing' => 0,
       'scheduler_unpublishing' => 100,
     ];
-    $this->drupalPostForm('admin/config/development/generate/content', $generate_settings, 'Generate');
+    $this->drupalGet('admin/config/development/generate/content');
+    $this->submitForm($generate_settings, 'Generate');
     $this->drupalGet('admin/content');
     $this->drupalGet('admin/content/scheduled');
 
@@ -165,7 +168,8 @@ class SchedulerDevelGenerateTest extends SchedulerBrowserTestBase {
       'scheduler_publishing' => 100,
       'scheduler_unpublishing' => 100,
     ];
-    $this->drupalPostForm('admin/config/development/generate/content', $generate_settings, 'Generate');
+    $this->drupalGet('admin/config/development/generate/content');
+    $this->submitForm($generate_settings, 'Generate');
     $this->drupalGet('admin/content');
     $this->drupalGet('admin/content/scheduled');
 
diff --git a/tests/src/Functional/SchedulerFieldsDisplayTest.php b/tests/src/Functional/SchedulerFieldsDisplayTest.php
index 806ca70..9921934 100644
--- a/tests/src/Functional/SchedulerFieldsDisplayTest.php
+++ b/tests/src/Functional/SchedulerFieldsDisplayTest.php
@@ -161,7 +161,8 @@ class SchedulerFieldsDisplayTest extends SchedulerBrowserTestBase {
     $edit = [
       'fields[publish_on][region]' => 'hidden',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/' . $this->type . '/form-display', $edit, 'Save');
+    $this->drupalGet('admin/structure/types/manage/' . $this->type . '/form-display');
+    $this->submitForm($edit, 'Save');
 
     // Check that a scheduler vertical tab is displayed.
     $this->drupalGet('node/add/' . $this->type);
@@ -175,7 +176,8 @@ class SchedulerFieldsDisplayTest extends SchedulerBrowserTestBase {
       'fields[publish_on][region]' => 'content',
       'fields[unpublish_on][region]' => 'hidden',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/' . $this->type . '/form-display', $edit, 'Save');
+    $this->drupalGet('admin/structure/types/manage/' . $this->type . '/form-display');
+    $this->submitForm($edit, 'Save');
 
     // Check that a scheduler vertical tab is displayed.
     $this->drupalGet('node/add/' . $this->type);
@@ -189,7 +191,8 @@ class SchedulerFieldsDisplayTest extends SchedulerBrowserTestBase {
       'fields[publish_on][region]' => 'hidden',
       'fields[unpublish_on][region]' => 'hidden',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/' . $this->type . '/form-display', $edit, 'Save');
+    $this->drupalGet('admin/structure/types/manage/' . $this->type . '/form-display');
+    $this->submitForm($edit, 'Save');
 
     // Check that no vertical tab is displayed.
     $this->drupalGet('node/add/' . $this->type);
diff --git a/tests/src/Functional/SchedulerLightweightCronTest.php b/tests/src/Functional/SchedulerLightweightCronTest.php
index a182fd4..9d06d95 100644
--- a/tests/src/Functional/SchedulerLightweightCronTest.php
+++ b/tests/src/Functional/SchedulerLightweightCronTest.php
@@ -57,21 +57,24 @@ class SchedulerLightweightCronTest extends SchedulerBrowserTestBase {
     $key = $key_xpath[0]->getText();
     $this->assertNotEmpty($key, 'The default lightweight cron key field should not be empty');
     $this->assertEquals(20, strlen($key), 'The default lightweight cron key string length should be 20');
+    $this->drupalGet($this->routeCronForm);
 
     // Check that a new random key can be generated.
-    $this->drupalPostForm($this->routeCronForm, [], 'Generate new random key');
+    $this->submitForm([], 'Generate new random key');
     $new_key_xpath = $this->xpath('//input[@id="edit-lightweight-access-key"]/@value');
     $new_key = $new_key_xpath[0]->getText();
     $this->assertNotEmpty($new_key, 'The lightweight cron key field should not be empty after generating a new key');
     $this->assertEquals(20, strlen($new_key), 'The new lightweight cron key string length should be 20');
     $this->assertNotEquals($new_key, $key, 'The new lightweight cron key should be different from the previous key.');
+    $this->drupalGet($this->routeCronForm);
 
     // Check that the 'run lightweight cron' button works.
-    $this->drupalPostForm($this->routeCronForm, [], "Run Scheduler's lightweight cron now");
+    $this->submitForm([], "Run Scheduler's lightweight cron now");
     $this->assertSession()->pageTextContains('Lightweight cron run completed.');
+    $this->drupalGet($this->routeCronForm);
 
     // Check that the form cannot be saved if the cron key is blank.
-    $this->drupalPostForm($this->routeCronForm, ['lightweight_access_key' => ''], 'Save configuration');
+    $this->submitForm(['lightweight_access_key' => ''], 'Save configuration');
     $this->assertSession()->pageTextContains('Lightweight cron access key field is required.');
     $this->assertSession()->pageTextNotContains('The configuration options have been saved.');
   }
diff --git a/tests/src/Functional/SchedulerMessageTest.php b/tests/src/Functional/SchedulerMessageTest.php
index 8ca8415..0669aba 100644
--- a/tests/src/Functional/SchedulerMessageTest.php
+++ b/tests/src/Functional/SchedulerMessageTest.php
@@ -31,7 +31,8 @@ class SchedulerMessageTest extends SchedulerBrowserTestBase {
       'publish_on[0][value][date]' => date('Y-m-d', $publish_on),
       'publish_on[0][value][time]' => date('H:i:s', $publish_on),
     ];
-    $this->drupalPostForm('node/add/' . $this->type, $edit, 'Save');
+    $this->drupalGet('node/add/' . $this->type);
+    $this->submitForm($edit, 'Save');
     $node1 = $this->drupalGetNodeByTitle($title1);
     $this->assertSession()->pageTextContains(sprintf('%s is scheduled to be published %s', $title1, $publish_on_formatted));
 
@@ -41,7 +42,8 @@ class SchedulerMessageTest extends SchedulerBrowserTestBase {
       'unpublish_on[0][value][date]' => date('Y-m-d', $unpublish_on),
       'unpublish_on[0][value][time]' => date('H:i:s', $unpublish_on),
     ];
-    $this->drupalPostForm('node/add/' . $this->type, $edit, 'Save');
+    $this->drupalGet('node/add/' . $this->type);
+    $this->submitForm($edit, 'Save');
     $node2 = $this->drupalGetNodeByTitle($title2);
     $this->assertSession()->pageTextContains(sprintf('%s is scheduled to be unpublished %s', $title2, $unpublish_on_formatted));
 
@@ -53,26 +55,33 @@ class SchedulerMessageTest extends SchedulerBrowserTestBase {
       'unpublish_on[0][value][date]' => date('Y-m-d', $unpublish_on),
       'unpublish_on[0][value][time]' => date('H:i:s', $unpublish_on),
     ];
-    $this->drupalPostForm('node/add/' . $this->type, $edit, 'Save');
+    $this->drupalGet('node/add/' . $this->type);
+    $this->submitForm($edit, 'Save');
     $node3 = $this->drupalGetNodeByTitle($title3);
     $this->assertSession()->pageTextContains(sprintf('%s is scheduled to be published %s and unpublished %s', $title3, $publish_on_formatted, $unpublish_on_formatted));
 
     // Change the option to not display the messages.
     $this->nodetype->setThirdPartySetting('scheduler', 'show_message_after_update', FALSE)->save();
-    $this->drupalPostForm('node/' . $node1->id() . '/edit', [], 'Save');
+    $this->drupalGet('node/' . $node1->id() . '/edit');
+    $this->submitForm([], 'Save');
     $this->assertSession()->pageTextNotContains('is scheduled to be published');
-    $this->drupalPostForm('node/' . $node2->id() . '/edit', [], 'Save');
+    $this->drupalGet('node/' . $node2->id() . '/edit');
+    $this->submitForm([], 'Save');
     $this->assertSession()->pageTextNotContains('is scheduled to be unpublished');
-    $this->drupalPostForm('node/' . $node3->id() . '/edit', [], 'Save');
+    $this->drupalGet('node/' . $node3->id() . '/edit');
+    $this->submitForm([], 'Save');
     $this->assertSession()->pageTextNotContains('is scheduled to be published');
 
     // Set back to display the messages, and check after edit.
     $this->nodetype->setThirdPartySetting('scheduler', 'show_message_after_update', TRUE)->save();
-    $this->drupalPostForm('node/' . $node1->id() . '/edit', [], 'Save');
+    $this->drupalGet('node/' . $node1->id() . '/edit');
+    $this->submitForm([], 'Save');
     $this->assertSession()->pageTextContains(sprintf('%s is scheduled to be published %s', $title1, $publish_on_formatted));
-    $this->drupalPostForm('node/' . $node2->id() . '/edit', [], 'Save');
+    $this->drupalGet('node/' . $node2->id() . '/edit');
+    $this->submitForm([], 'Save');
     $this->assertSession()->pageTextContains(sprintf('%s is scheduled to be unpublished %s', $title2, $unpublish_on_formatted));
-    $this->drupalPostForm('node/' . $node3->id() . '/edit', [], 'Save');
+    $this->drupalGet('node/' . $node3->id() . '/edit');
+    $this->submitForm([], 'Save');
     $this->assertSession()->pageTextContains(sprintf('%s is scheduled to be published %s and unpublished %s', $title3, $publish_on_formatted, $unpublish_on_formatted));
   }
 
diff --git a/tests/src/Functional/SchedulerMetaInformationTest.php b/tests/src/Functional/SchedulerMetaInformationTest.php
index b4b8116..d9528f3 100644
--- a/tests/src/Functional/SchedulerMetaInformationTest.php
+++ b/tests/src/Functional/SchedulerMetaInformationTest.php
@@ -37,7 +37,8 @@ class SchedulerMetaInformationTest extends SchedulerBrowserTestBase {
       'unpublish_on[0][value][date]' => $this->dateFormatter->format($unpublish_date, 'custom', 'Y-m-d'),
       'unpublish_on[0][value][time]' => $this->dateFormatter->format($unpublish_date, 'custom', 'H:i:s'),
     ];
-    $this->drupalPostForm('node/' . $published_node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $published_node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
 
     // The node page should now have an X-Robots-Tag header with an
     // unavailable_after-directive and RFC850 date- and time-value.
diff --git a/tests/src/Functional/SchedulerNonEnabledTypeTest.php b/tests/src/Functional/SchedulerNonEnabledTypeTest.php
index 69232e4..a49fa25 100644
--- a/tests/src/Functional/SchedulerNonEnabledTypeTest.php
+++ b/tests/src/Functional/SchedulerNonEnabledTypeTest.php
@@ -51,7 +51,8 @@ class SchedulerNonEnabledTypeTest extends SchedulerBrowserTestBase {
     // setting remains on, the node must be able to be saved without a date.
     $this->nonSchedulerNodeType->setThirdPartySetting('scheduler', 'publish_required', !$publishing_enabled)->save();
     $this->nonSchedulerNodeType->setThirdPartySetting('scheduler', 'unpublish_required', !$unpublishing_enabled)->save();
-    $this->drupalPostForm('node/add/' . $this->nonSchedulerNodeType->id(), ['title[0][value]' => $title], 'Save');
+    $this->drupalGet('node/add/' . $this->nonSchedulerNodeType->id());
+    $this->submitForm(['title[0][value]' => $title], 'Save');
     // Check that the node has saved OK.
     $string = sprintf('%s %s has been created.', $this->nonSchedulerNodeType->get('name'), $title);
     $this->assertSession()->pageTextContains($string);
diff --git a/tests/src/Functional/SchedulerPastDatesTest.php b/tests/src/Functional/SchedulerPastDatesTest.php
index 6440ac7..f6b2a59 100644
--- a/tests/src/Functional/SchedulerPastDatesTest.php
+++ b/tests/src/Functional/SchedulerPastDatesTest.php
@@ -28,17 +28,20 @@ class SchedulerPastDatesTest extends SchedulerBrowserTestBase {
       'publish_on[0][value][date]' => $this->dateFormatter->format(strtotime('-1 day', $this->requestTime), 'custom', 'Y-m-d'),
       'publish_on[0][value][time]' => $this->dateFormatter->format(strtotime('-1 day', $this->requestTime), 'custom', 'H:i:s'),
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains("The 'publish on' date must be in the future");
 
     // Test the 'error' behavior explicitly.
     $this->nodetype->setThirdPartySetting('scheduler', 'publish_past_date', 'error')->save();
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains("The 'publish on' date must be in the future");
 
     // Test the 'publish' behavior: the node should be published immediately.
     $this->nodetype->setThirdPartySetting('scheduler', 'publish_past_date', 'publish')->save();
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     // Check that no error message is shown when the publication date is in the
     // past and the "publish" behavior is chosen.
     $this->assertSession()->pageTextNotContains("The 'publish on' date must be in the future");
@@ -59,7 +62,8 @@ class SchedulerPastDatesTest extends SchedulerBrowserTestBase {
     $this->nodetype->setThirdPartySetting('scheduler', 'publish_past_date', 'schedule')->save();
     $node = $this->drupalCreateNode(['type' => $this->type, 'status' => FALSE]);
     $created_time = $node->getCreatedTime();
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     // Check that no error is shown when the publish_on date is in the past.
     $this->assertSession()->pageTextNotContains("The 'publish on' date must be in the future");
     $this->assertSession()->pageTextContains(sprintf('%s is scheduled to be published', $edit['title[0][value]']));
@@ -95,7 +99,8 @@ class SchedulerPastDatesTest extends SchedulerBrowserTestBase {
 
       // Create a new node, edit and save.
       $node = $this->drupalCreateNode(['type' => $this->type, 'status' => FALSE]);
-      $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+      $this->drupalGet('node/' . $node->id() . '/edit');
+      $this->submitForm($edit, 'Save');
 
       if ($option == 'schedule') {
         scheduler_cron();
@@ -116,7 +121,8 @@ class SchedulerPastDatesTest extends SchedulerBrowserTestBase {
       'unpublish_on[0][value][date]' => $this->dateFormatter->format($this->requestTime - 3600, 'custom', 'Y-m-d'),
       'unpublish_on[0][value][time]' => $this->dateFormatter->format($this->requestTime - 3600, 'custom', 'H:i:s'),
     ];
-    $this->drupalPostForm('node/add/' . $this->type, $edit, 'Save');
+    $this->drupalGet('node/add/' . $this->type);
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains("The 'unpublish on' date must be in the future");
   }
 
diff --git a/tests/src/Functional/SchedulerPermissionsTest.php b/tests/src/Functional/SchedulerPermissionsTest.php
index d2de79f..2d6fa44 100644
--- a/tests/src/Functional/SchedulerPermissionsTest.php
+++ b/tests/src/Functional/SchedulerPermissionsTest.php
@@ -38,14 +38,16 @@ class SchedulerPermissionsTest extends SchedulerBrowserTestBase {
     // Check that a new node can be saved and published.
     $title = $this->randomString(15);
     $edit = ['title[0][value]' => $title, 'status[value]' => TRUE];
-    $this->drupalPostForm('node/add/' . $this->type, $edit, 'Save');
+    $this->drupalGet('node/add/' . $this->type);
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains(sprintf('%s %s has been created.', $this->typeName, $title));
     $this->assertTrue($this->drupalGetNodeByTitle($title)->isPublished(), 'The new node is published');
 
     // Check that a new node can be saved as unpublished.
     $title = $this->randomString(15);
     $edit = ['title[0][value]' => $title, 'status[value]' => FALSE];
-    $this->drupalPostForm('node/add/' . $this->type, $edit, 'Save');
+    $this->drupalGet('node/add/' . $this->type);
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains(sprintf('%s %s has been created.', $this->typeName, $title));
     $this->assertFalse($this->drupalGetNodeByTitle($title)->isPublished(), 'The new node is unpublished');
 
@@ -97,7 +99,8 @@ class SchedulerPermissionsTest extends SchedulerBrowserTestBase {
 
     // Edit the unpublished node and save.
     $title = 'For Publishing ' . $this->randomString(10);
-    $this->drupalPostForm('node/' . $unpublished_node->id() . '/edit', ['title[0][value]' => $title], 'Save');
+    $this->drupalGet('node/' . $unpublished_node->id() . '/edit');
+    $this->submitForm(['title[0][value]' => $title], 'Save');
 
     // Check the updated title, to verify that edit and save was sucessful.
     $unpublished_node = $this->nodeStorage->load($unpublished_node->id());
@@ -112,7 +115,8 @@ class SchedulerPermissionsTest extends SchedulerBrowserTestBase {
 
     // Edit the published node and save.
     $title = 'For Unpublishing ' . $this->randomString(10);
-    $this->drupalPostForm('node/' . $published_node->id() . '/edit', ['title[0][value]' => $title], 'Save');
+    $this->drupalGet('node/' . $published_node->id() . '/edit');
+    $this->submitForm(['title[0][value]' => $title], 'Save');
 
     // Check the updated title, to verify that edit and save was sucessful.
     $published_node = $this->nodeStorage->load($published_node->id());
diff --git a/tests/src/Functional/SchedulerRequiredTest.php b/tests/src/Functional/SchedulerRequiredTest.php
index f780136..d168158 100644
--- a/tests/src/Functional/SchedulerRequiredTest.php
+++ b/tests/src/Functional/SchedulerRequiredTest.php
@@ -72,8 +72,9 @@ class SchedulerRequiredTest extends SchedulerBrowserTestBase {
       'unpublish_on[0][value][date]' => '',
       'unpublish_on[0][value][time]' => '',
     ];
+    $this->drupalGet($path);
     // Add or edit the node.
-    $this->drupalPostForm($path, $values, 'Save');
+    $this->submitForm($values, 'Save');
 
     // Check for the expected result.
     if ($publish_expected) {
diff --git a/tests/src/Functional/SchedulerTokenReplaceTest.php b/tests/src/Functional/SchedulerTokenReplaceTest.php
index 5aeebb0..9b73d9c 100644
--- a/tests/src/Functional/SchedulerTokenReplaceTest.php
+++ b/tests/src/Functional/SchedulerTokenReplaceTest.php
@@ -46,7 +46,8 @@ class SchedulerTokenReplaceTest extends SchedulerBrowserTestBase {
       $edit = [
         'body[0][value]' => 'Publish on: [node:scheduler-publish' . $test_data['token_format'] . ']. Unpublish on: [node:scheduler-unpublish' . $test_data['token_format'] . '].',
       ];
-      $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+      $this->drupalGet('node/' . $node->id() . '/edit');
+      $this->submitForm($edit, 'Save');
       $this->drupalGet('node/' . $node->id());
 
       // Refresh the node and get the body output value.
diff --git a/tests/src/Functional/SchedulerValidationTest.php b/tests/src/Functional/SchedulerValidationTest.php
index 370f325..10dc05c 100644
--- a/tests/src/Functional/SchedulerValidationTest.php
+++ b/tests/src/Functional/SchedulerValidationTest.php
@@ -46,7 +46,8 @@ class SchedulerValidationTest extends SchedulerBrowserTestBase {
       'status' => FALSE,
     ]);
     $edit = ['status[value]' => TRUE];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     // Check that validation prevents publishing the node directly without an
     // unpublish-on date if unpublishing is required.
     $this->assertSession()->pageTextContains("Either you must set an 'unpublish on' date or save this node as unpublished.");
@@ -64,7 +65,8 @@ class SchedulerValidationTest extends SchedulerBrowserTestBase {
       'unpublish_on[0][value][date]' => $this->dateFormatter->format($this->requestTime + 1800, 'custom', 'Y-m-d'),
       'unpublish_on[0][value][time]' => $this->dateFormatter->format($this->requestTime + 1800, 'custom', 'H:i:s'),
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     // Check that validation prevents entering an unpublish-on date which is
     // earlier than the publish-on date.
     $this->assertSession()->pageTextContains("The 'unpublish on' date must be later than the 'publish on' date.");
