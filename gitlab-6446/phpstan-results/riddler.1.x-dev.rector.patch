diff --git a/tests/src/Functional/RiddlerTestCase.php b/tests/src/Functional/RiddlerTestCase.php
index b24c625..6427e1b 100644
--- a/tests/src/Functional/RiddlerTestCase.php
+++ b/tests/src/Functional/RiddlerTestCase.php
@@ -39,7 +39,7 @@ class RiddlerTestCase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser(['administer CAPTCHA settings']);
     $this->drupalLogin($this->adminUser);
@@ -64,35 +64,28 @@ class RiddlerTestCase extends BrowserTestBase {
 
     // Check that the admin form exists.
     $this->drupalGet(self::RIDDLER_ADMIN_PATH);
-    $this->assertText(t('Add questions that you require users to answer.'),
-      'Admin should be able to see the Riddler admin form.', 'Riddler');
+    $this->assertSession()->pageTextContains(t('Add questions that you require users to answer.'));
+    $this->drupalGet(self::RIDDLER_ADMIN_PATH);
 
     // This creates a new set of question and response.
-    $ajax = $this->drupalPostForm(self::RIDDLER_ADMIN_PATH, $form_values_1_question, $addAnotherButton);
-    $this->assertText(t('Riddle 2'),
-      'Admin should be able to ajax add a new riddle row.', 'Riddler');
+    $ajax = $this->submitForm($form_values_1_question, $addAnotherButton);
+    $this->assertSession()->pageTextContains(t('Riddle 2'));
 
-    $this->drupalPostForm(NULL, $form_values_2_question, 'Save configuration');
-    $this->assertFieldByName('riddler[1][question]', t('What color is Druplicon?'),
-      'Admin should be able to add a new question.', 'Riddler');
-    $this->assertFieldByName('riddler[1][response]', t('blue'),
-      'Admin should be able to add a new response.', 'Riddler');
+    $this->submitForm($form_values_2_question, 'Save configuration');
+    $this->assertSession()->fieldValueEquals('riddler[1][question]', t('What color is Druplicon?'), 'Admin should be able to add a new question.', 'Riddler');
+    $this->assertSession()->fieldValueEquals('riddler[1][response]', t('blue'), 'Admin should be able to add a new response.', 'Riddler');
+    $this->drupalGet(self::RIDDLER_ADMIN_PATH);
 
     // This deletes a set of question and response.
-    $ajax = $this->drupalPostForm(self::RIDDLER_ADMIN_PATH, $form_values_2_question, 'riddle-remove-1');
-    $this->assertNoFieldByName('riddler[1][question]', NULL,
-      'Admin should be able to ajax remove a new question.', 'Riddler');
-    $this->assertNoFieldByName('riddler[1][response]', NULL,
-      'Admin should be able to ajax remove a new response.', 'Riddler');
+    $ajax = $this->submitForm($form_values_2_question, 'riddle-remove-1');
+    $this->assertSession()->fieldNotExists('riddler[1][question]');
+    $this->assertSession()->fieldNotExists('riddler[1][response]');
 
     // Save the config form without the deleted riddle.
-    $this->drupalPostForm(NULL, $form_values_1_question, 'Save configuration');
-    $this->assertNoText(t('Riddle 2'),
-      'Admin should be able to save without a deleted riddle.', 'Riddler');
-    $this->assertNoFieldByName('riddler[1][question]', NULL,
-      'Admin should be able to save to remove a new question.', 'Riddler');
-    $this->assertNoFieldByName('riddler[1][response]', NULL,
-      'Admin should be able to save to remove a new response.', 'Riddler');
+    $this->submitForm($form_values_1_question, 'Save configuration');
+    $this->assertSession()->pageTextNotContains(t('Riddle 2'));
+    $this->assertSession()->fieldNotExists('riddler[1][question]');
+    $this->assertSession()->fieldNotExists('riddler[1][response]');
   }
 
 }
