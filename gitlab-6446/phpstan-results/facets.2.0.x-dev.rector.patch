diff --git a/modules/facets_range_widget/tests/src/Unit/Plugin/processor/RangeSliderProcessorTest.php b/modules/facets_range_widget/tests/src/Unit/Plugin/processor/RangeSliderProcessorTest.php
index 92b9248..9492537 100644
--- a/modules/facets_range_widget/tests/src/Unit/Plugin/processor/RangeSliderProcessorTest.php
+++ b/modules/facets_range_widget/tests/src/Unit/Plugin/processor/RangeSliderProcessorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\facets_range_widget\Unit\Plugin\processor;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Routing\UrlGeneratorInterface;
@@ -23,6 +24,7 @@ use Prophecy\Argument;
  */
 class RangeSliderProcessorTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The processor we're testing.
    *
diff --git a/modules/facets_range_widget/tests/src/Unit/Plugin/processor/SliderProcessorTest.php b/modules/facets_range_widget/tests/src/Unit/Plugin/processor/SliderProcessorTest.php
index 8ab01f0..5731fce 100644
--- a/modules/facets_range_widget/tests/src/Unit/Plugin/processor/SliderProcessorTest.php
+++ b/modules/facets_range_widget/tests/src/Unit/Plugin/processor/SliderProcessorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\facets_range_widget\Unit\Plugin\processor;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\facets\Entity\Facet;
 use Drupal\facets\Plugin\facets\widget\ArrayWidget;
@@ -18,6 +19,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class SliderProcessorTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The processor we're testing.
    *
diff --git a/modules/facets_range_widget/tests/src/Unit/Plugin/widget/SliderWidgetTest.php b/modules/facets_range_widget/tests/src/Unit/Plugin/widget/SliderWidgetTest.php
index a7eb42d..e5e80a8 100644
--- a/modules/facets_range_widget/tests/src/Unit/Plugin/widget/SliderWidgetTest.php
+++ b/modules/facets_range_widget/tests/src/Unit/Plugin/widget/SliderWidgetTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\facets_range_widget\Unit\Plugin\widget;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Routing\UrlGeneratorInterface;
 use Drupal\Core\Url;
 use Drupal\facets\Entity\Facet;
@@ -18,6 +19,7 @@ use Symfony\Component\DependencyInjection\ContainerBuilder;
  */
 class SliderWidgetTest extends WidgetTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
diff --git a/modules/facets_searchbox_widget/tests/src/Unit/Plugin/widget/SearchboxLinksWidgetTest.php b/modules/facets_searchbox_widget/tests/src/Unit/Plugin/widget/SearchboxLinksWidgetTest.php
index 357b224..032ad17 100644
--- a/modules/facets_searchbox_widget/tests/src/Unit/Plugin/widget/SearchboxLinksWidgetTest.php
+++ b/modules/facets_searchbox_widget/tests/src/Unit/Plugin/widget/SearchboxLinksWidgetTest.php
@@ -245,9 +245,7 @@ class SearchboxLinksWidgetTest extends LinksWidgetTest {
    * Sets up a container.
    */
   protected function createContainer() {
-    $router = $this->getMockBuilder(TestRouterInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $router = $this->createMock(TestRouterInterface::class);
     $router->expects($this->any())
       ->method('matchRequest')
       ->willReturn([
@@ -255,21 +253,15 @@ class SearchboxLinksWidgetTest extends LinksWidgetTest {
         '_route' => 'test',
       ]);
 
-    $url_processor = $this->getMockBuilder(UrlProcessorInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url_processor = $this->createMock(UrlProcessorInterface::class);
 
-    $manager = $this->getMockBuilder(FacetSourcePluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $manager = $this->createMock(FacetSourcePluginManager::class);
     $manager->expects($this->exactly(1))
       ->method('createInstance')
       ->willReturn($url_processor);
 
     $storage = $this->createMock(EntityStorageInterface::class);
-    $em = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $em = $this->createMock(EntityTypeManagerInterface::class);
     $em->expects($this->exactly(1))
       ->method('getStorage')
       ->willReturn($storage);
diff --git a/modules/facets_summary/tests/src/Functional/IntegrationTest.php b/modules/facets_summary/tests/src/Functional/IntegrationTest.php
index a716469..1fdd60a 100644
--- a/modules/facets_summary/tests/src/Functional/IntegrationTest.php
+++ b/modules/facets_summary/tests/src/Functional/IntegrationTest.php
@@ -214,7 +214,7 @@ class IntegrationTest extends FacetsTestBase {
     $block = $this->drupalPlaceBlock('facets_summary_block:owl', $block);
 
     $this->drupalGet('search-api-test-fulltext');
-    $this->assertText('Displaying 5 search results');
+    $this->assertSession()->pageTextContains('Displaying 5 search results');
     $this->clickLink('item');
 
     /** @var \Behat\Mink\Element\NodeElement[] $list_items */
diff --git a/modules/facets_summary/tests/src/Unit/Plugin/Processor/HideWhenNotRenderedProcessorTest.php b/modules/facets_summary/tests/src/Unit/Plugin/Processor/HideWhenNotRenderedProcessorTest.php
index 552b0a9..ce58600 100644
--- a/modules/facets_summary/tests/src/Unit/Plugin/Processor/HideWhenNotRenderedProcessorTest.php
+++ b/modules/facets_summary/tests/src/Unit/Plugin/Processor/HideWhenNotRenderedProcessorTest.php
@@ -87,15 +87,11 @@ class HideWhenNotRenderedProcessorTest extends UnitTestCase {
    *   The value for rendered in current request.
    */
   protected function createContainer($renderedInCurrentRequestValue) {
-    $fsi = $this->getMockBuilder(FacetSourcePluginInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $fsi = $this->createMock(FacetSourcePluginInterface::class);
     $fsi->method('isRenderedInCurrentRequest')
       ->willReturn($renderedInCurrentRequestValue);
 
-    $facetSourceManager = $this->getMockBuilder(FacetSourcePluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $facetSourceManager = $this->createMock(FacetSourcePluginManager::class);
     $facetSourceManager->method('createInstance')
       ->willReturn($fsi);
 
diff --git a/modules/facets_summary/tests/src/Unit/Plugin/Processor/ResetFacetsProcessorTest.php b/modules/facets_summary/tests/src/Unit/Plugin/Processor/ResetFacetsProcessorTest.php
index 5cf421c..aff1238 100644
--- a/modules/facets_summary/tests/src/Unit/Plugin/Processor/ResetFacetsProcessorTest.php
+++ b/modules/facets_summary/tests/src/Unit/Plugin/Processor/ResetFacetsProcessorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\facets_summary\Unit\Plugin\Processor;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\facets_summary\Entity\FacetsSummary;
@@ -16,6 +17,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class ResetFacetsProcessorTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The processor we're testing.
    *
diff --git a/modules/facets_summary/tests/src/Unit/Plugin/Processor/ShowTextWhenEmptyProcessorTest.php b/modules/facets_summary/tests/src/Unit/Plugin/Processor/ShowTextWhenEmptyProcessorTest.php
index 249c1e6..5b6c704 100644
--- a/modules/facets_summary/tests/src/Unit/Plugin/Processor/ShowTextWhenEmptyProcessorTest.php
+++ b/modules/facets_summary/tests/src/Unit/Plugin/Processor/ShowTextWhenEmptyProcessorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\facets_summary\Unit\Plugin\Processor;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\StringTranslation\TranslationInterface;
@@ -17,6 +18,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class ShowTextWhenEmptyProcessorTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The processor we're testing.
    *
diff --git a/tests/src/Functional/ProcessorIntegrationTest.php b/tests/src/Functional/ProcessorIntegrationTest.php
index a5c18dd..973f3c6 100644
--- a/tests/src/Functional/ProcessorIntegrationTest.php
+++ b/tests/src/Functional/ProcessorIntegrationTest.php
@@ -85,8 +85,8 @@ class ProcessorIntegrationTest extends FacetsTestBase {
     $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->checkboxChecked('edit-facet-settings-count-limit-status');
     $this->assertSession()->checkboxChecked('edit-facet-settings-hide-non-narrowing-result-processor-status');
-    $this->assertOptionSelected('edit-processors-count-limit-weights-build', 50);
-    $this->assertOptionSelected('edit-processors-hide-non-narrowing-result-processor-weights-build', 40);
+    $this->assertTrue($this->assertSession()->optionExists('edit-processors-count-limit-weights-build', 50)->hasAttribute('selected'));
+    $this->assertTrue($this->assertSession()->optionExists('edit-processors-hide-non-narrowing-result-processor-weights-build', 40)->hasAttribute('selected'));
 
     // Change the weight of one of the processors and test that the weight
     // change persisted.
@@ -98,8 +98,8 @@ class ProcessorIntegrationTest extends FacetsTestBase {
     $this->submitForm($form, 'Save');
     $this->assertSession()->checkboxChecked('edit-facet-settings-count-limit-status');
     $this->assertSession()->checkboxChecked('edit-facet-settings-hide-non-narrowing-result-processor-status');
-    $this->assertOptionSelected('edit-processors-count-limit-weights-build', 50);
-    $this->assertOptionSelected('edit-processors-hide-non-narrowing-result-processor-weights-build', 5);
+    $this->assertTrue($this->assertSession()->optionExists('edit-processors-count-limit-weights-build', 50)->hasAttribute('selected'));
+    $this->assertTrue($this->assertSession()->optionExists('edit-processors-hide-non-narrowing-result-processor-weights-build', 5)->hasAttribute('selected'));
   }
 
   /**
diff --git a/tests/src/Kernel/FacetManager/DefaultFacetManagerTest.php b/tests/src/Kernel/FacetManager/DefaultFacetManagerTest.php
index 72d19d7..6990f8a 100644
--- a/tests/src/Kernel/FacetManager/DefaultFacetManagerTest.php
+++ b/tests/src/Kernel/FacetManager/DefaultFacetManagerTest.php
@@ -191,7 +191,7 @@ class DefaultFacetManagerTest extends EntityKernelTestBase {
    * @param array $expected_metadata
    *   The expected cache metadata for the given facet source.
    *
-   * @dataProvider testBuildCacheabilityMetadataProvider
+   * @dataProvider buildCacheabilityMetadataProvider
    */
   public function testBuildCacheabilityMetadata(string $facet_source_id, array $expected_metadata) {
     $facet = $this->createAndSaveFacet('mars', $facet_source_id);
@@ -318,7 +318,7 @@ class DefaultFacetManagerTest extends EntityKernelTestBase {
    *
    * @see ::testBuildCacheabilityMetadata
    */
-  public function testBuildCacheabilityMetadataProvider() {
+  public function buildCacheabilityMetadataProvider() {
     $basic = [
       'contexts' => [
         // Facet API uses Request query params to populate active facets values.
diff --git a/tests/src/Kernel/Plugin/query_type/SearchApiDateTest.php b/tests/src/Kernel/Plugin/query_type/SearchApiDateTest.php
index 3eb7cfa..53a3fdc 100644
--- a/tests/src/Kernel/Plugin/query_type/SearchApiDateTest.php
+++ b/tests/src/Kernel/Plugin/query_type/SearchApiDateTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\facets\Kernel\Plugin\query_type;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\facets\FacetInterface;
 use Drupal\facets\Result\ResultInterface;
 use Drupal\KernelTests\KernelTestBase;
@@ -19,6 +20,7 @@ use Drupal\search_api\ServerInterface;
  */
 class SearchApiDateTest extends KernelTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
diff --git a/tests/src/Unit/FacetSource/FacetSourcePluginManagerTest.php b/tests/src/Unit/FacetSource/FacetSourcePluginManagerTest.php
index 1c76ed3..268d971 100644
--- a/tests/src/Unit/FacetSource/FacetSourcePluginManagerTest.php
+++ b/tests/src/Unit/FacetSource/FacetSourcePluginManagerTest.php
@@ -20,28 +20,28 @@ class FacetSourcePluginManagerTest extends UnitTestCase {
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $cache;
 
   /**
    * The plugin discovery.
    *
-   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $discovery;
 
   /**
    * The plugin factory.
    *
-   * @var \Drupal\Component\Plugin\Factory\DefaultFactory|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Factory\DefaultFactory|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $factory;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $moduleHandler;
 
@@ -58,9 +58,7 @@ class FacetSourcePluginManagerTest extends UnitTestCase {
   public function setUp(): void {
     $this->discovery = $this->createMock(DiscoveryInterface::class);
 
-    $this->factory = $this->getMockBuilder(DefaultFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->factory = $this->createMock(DefaultFactory::class);
 
     $this->moduleHandler = $this->createMock(ModuleHandlerInterface::class);
 
diff --git a/tests/src/Unit/Plugin/processor/CountLimitProcessorTest.php b/tests/src/Unit/Plugin/processor/CountLimitProcessorTest.php
index 526df50..f4c341e 100644
--- a/tests/src/Unit/Plugin/processor/CountLimitProcessorTest.php
+++ b/tests/src/Unit/Plugin/processor/CountLimitProcessorTest.php
@@ -53,9 +53,7 @@ class CountLimitProcessorTest extends UnitTestCase {
       ],
     ];
 
-    $manager = $this->getMockBuilder(ProcessorPluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $manager = $this->createMock(ProcessorPluginManager::class);
     $manager->expects($this->any())
       ->method('getDefinitions')
       ->willReturn($processor_definitions);
diff --git a/tests/src/Unit/Plugin/processor/DependentFacetProcessorTest.php b/tests/src/Unit/Plugin/processor/DependentFacetProcessorTest.php
index 6d90b71..9a2ebe3 100644
--- a/tests/src/Unit/Plugin/processor/DependentFacetProcessorTest.php
+++ b/tests/src/Unit/Plugin/processor/DependentFacetProcessorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\facets\Unit\Plugin\processor;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\Entity\ConfigEntityType;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -22,6 +23,7 @@ use Symfony\Component\EventDispatcher\EventDispatcher;
  */
 class DependentFacetProcessorTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * An array of results.
    *
@@ -42,28 +44,20 @@ class DependentFacetProcessorTest extends UnitTestCase {
       new Result($facet, 'barn_owl', 'Barn owl', 1),
     ];
 
-    $facet_entity_type = $this->getMockBuilder(ConfigEntityType::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $facet_entity_type = $this->createMock(ConfigEntityType::class);
     $facet_entity_type->method('getConfigPrefix')
       ->willReturn('facets.facet');
 
-    $entity_type_manager = $this->getMockBuilder(EntityTypeManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManager::class);
     $entity_type_manager->method('getDefinition')
       ->with('facets_facet')
       ->willReturn($facet_entity_type);
 
-    $processor_plugin_manager = $this->getMockBuilder(ProcessorPluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $processor_plugin_manager = $this->createMock(ProcessorPluginManager::class);
     $processor_plugin_manager->method('getDefinitions')
       ->willReturn([]);
 
-    $event_dispatcher = $this->getMockBuilder(EventDispatcher::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $event_dispatcher = $this->createMock(EventDispatcher::class);
 
     $container = new ContainerBuilder();
     $container->set('entity_type.manager', $entity_type_manager);
diff --git a/tests/src/Unit/Plugin/processor/DisplayValueWidgetOrderProcessorTest.php b/tests/src/Unit/Plugin/processor/DisplayValueWidgetOrderProcessorTest.php
index 542adb6..0c05484 100644
--- a/tests/src/Unit/Plugin/processor/DisplayValueWidgetOrderProcessorTest.php
+++ b/tests/src/Unit/Plugin/processor/DisplayValueWidgetOrderProcessorTest.php
@@ -46,9 +46,7 @@ class DisplayValueWidgetOrderProcessorTest extends UnitTestCase {
       new Result($facet, '2', '2', 22),
     ];
 
-    $transliteration = $this->getMockBuilder(TransliterationInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $transliteration = $this->createMock(TransliterationInterface::class);
     $transliteration
       ->expects($this->any())
       ->method('removeDiacritics')
diff --git a/tests/src/Unit/Plugin/processor/ExcludeSpecifiedItemsProcessorTest.php b/tests/src/Unit/Plugin/processor/ExcludeSpecifiedItemsProcessorTest.php
index 96daaab..f0d6cfd 100644
--- a/tests/src/Unit/Plugin/processor/ExcludeSpecifiedItemsProcessorTest.php
+++ b/tests/src/Unit/Plugin/processor/ExcludeSpecifiedItemsProcessorTest.php
@@ -68,9 +68,7 @@ class ExcludeSpecifiedItemsProcessorTest extends UnitTestCase {
       ],
     ];
 
-    $manager = $this->getMockBuilder(ProcessorPluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $manager = $this->createMock(ProcessorPluginManager::class);
     $manager->expects($this->any())
       ->method('getDefinitions')
       ->willReturn($processor_definitions);
diff --git a/tests/src/Unit/Plugin/processor/HideOnlyOneItemProcessorTest.php b/tests/src/Unit/Plugin/processor/HideOnlyOneItemProcessorTest.php
index 951dabb..cd7c339 100644
--- a/tests/src/Unit/Plugin/processor/HideOnlyOneItemProcessorTest.php
+++ b/tests/src/Unit/Plugin/processor/HideOnlyOneItemProcessorTest.php
@@ -26,9 +26,7 @@ class HideOnlyOneItemProcessorTest extends UnitTestCase {
     $results = [
       new Result($facet, '1', 1, 1),
     ];
-    $facet = $this->getMockBuilder(Facet::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $facet = $this->createMock(Facet::class);
     $processed_results = $processor->build($facet, $results);
     $this->assertCount(0, $processed_results);
   }
@@ -45,9 +43,7 @@ class HideOnlyOneItemProcessorTest extends UnitTestCase {
       new Result($facet, '1', 1, 1),
     ];
     $results[0]->setActiveState(TRUE);
-    $facet = $this->getMockBuilder(Facet::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $facet = $this->createMock(Facet::class);
     $processed_results = $processor->build($facet, $results);
     $this->assertCount(1, $processed_results);
   }
@@ -64,9 +60,7 @@ class HideOnlyOneItemProcessorTest extends UnitTestCase {
       new Result($facet, '1', 1, 1),
       new Result($facet, '2', 2, 2),
     ];
-    $facet = $this->getMockBuilder(Facet::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $facet = $this->createMock(Facet::class);
     $processed_results = $processor->build($facet, $results);
     $this->assertCount(2, $processed_results);
   }
diff --git a/tests/src/Unit/Plugin/processor/ListItemProcessorTest.php b/tests/src/Unit/Plugin/processor/ListItemProcessorTest.php
index 9e9d96e..bfecd6c 100644
--- a/tests/src/Unit/Plugin/processor/ListItemProcessorTest.php
+++ b/tests/src/Unit/Plugin/processor/ListItemProcessorTest.php
@@ -57,17 +57,11 @@ class ListItemProcessorTest extends UnitTestCase {
       new Result($facet, 3, 3, 15),
     ];
 
-    $config_manager = $this->getMockBuilder(ConfigManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config_manager = $this->createMock(ConfigManager::class);
 
-    $entity_field_manager = $this->getMockBuilder(EntityFieldManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_field_manager = $this->createMock(EntityFieldManager::class);
 
-    $entity_type_bundle_info = $this->getMockBuilder(EntityTypeBundleInfo::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_bundle_info = $this->createMock(EntityTypeBundleInfo::class);
 
     // Create a search api based facet source and make the property definition
     // return null.
@@ -75,9 +69,7 @@ class ListItemProcessorTest extends UnitTestCase {
     $data_definition->expects($this->any())
       ->method('getPropertyDefinition')
       ->willReturn(NULL);
-    $facet_source = $this->getMockBuilder(FacetSourcePluginInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $facet_source = $this->createMock(FacetSourcePluginInterface::class);
     $facet_source->expects($this->any())
       ->method('getDataDefinition')
       ->willReturn($data_definition);
@@ -92,9 +84,7 @@ class ListItemProcessorTest extends UnitTestCase {
       ->willReturn(CacheBackendInterface::CACHE_PERMANENT);
 
     // Add the plugin manager.
-    $pluginManager = $this->getMockBuilder(FacetSourcePluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $pluginManager = $this->createMock(FacetSourcePluginManager::class);
     $pluginManager->expects($this->any())
       ->method('hasDefinition')
       ->willReturn(TRUE);
@@ -104,28 +94,20 @@ class ListItemProcessorTest extends UnitTestCase {
 
     $this->processor = new ListItemProcessor([], 'list_item', [], $config_manager, $entity_field_manager, $entity_type_bundle_info);
 
-    $facet_entity_type = $this->getMockBuilder(ConfigEntityType::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $facet_entity_type = $this->createMock(ConfigEntityType::class);
     $facet_entity_type->method('getConfigPrefix')
       ->willReturn('facets.facet');
 
-    $entity_type_manager = $this->getMockBuilder(EntityTypeManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManager::class);
     $entity_type_manager->method('getDefinition')
       ->with('facets_facet')
       ->willReturn($facet_entity_type);
 
-    $this->processor_plugin_manager = $this->getMockBuilder(ProcessorPluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->processor_plugin_manager = $this->createMock(ProcessorPluginManager::class);
     $this->processor_plugin_manager->method('getDefinitions')
       ->willReturn(['list_item' => ['class' => ListItemProcessor::class]]);
 
-    $event_dispatcher = $this->getMockBuilder(EventDispatcher::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $event_dispatcher = $this->createMock(EventDispatcher::class);
 
     $container = new ContainerBuilder();
     $container->set('plugin.manager.facets.facet_source', $pluginManager);
@@ -139,9 +121,7 @@ class ListItemProcessorTest extends UnitTestCase {
    * Tests facet build with field.module field.
    */
   public function testBuildConfigurableField() {
-    $module_field = $this->getMockBuilder(FieldStorageConfig::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $module_field = $this->createMock(FieldStorageConfig::class);
     // Return cache field metadata.
     $module_field->expects($this->exactly(1))
       ->method('getCacheContexts')
@@ -155,20 +135,14 @@ class ListItemProcessorTest extends UnitTestCase {
 
     // Make sure that when the processor calls loadConfigEntityByName the field
     // we created here is called.
-    $config_manager = $this->getMockBuilder(ConfigManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config_manager = $this->createMock(ConfigManager::class);
     $config_manager->expects($this->exactly(2))
       ->method('loadConfigEntityByName')
       ->willReturn($module_field);
 
-    $entity_field_manager = $this->getMockBuilder(EntityFieldManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_field_manager = $this->createMock(EntityFieldManager::class);
 
-    $entity_type_bundle_info = $this->getMockBuilder(EntityTypeBundleInfo::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_bundle_info = $this->createMock(EntityTypeBundleInfo::class);
 
     $processor = new ListItemProcessor([], 'list_item', [], $config_manager, $entity_field_manager, $entity_type_bundle_info);
     $this->processor_plugin_manager->method('createInstance')
@@ -200,9 +174,7 @@ class ListItemProcessorTest extends UnitTestCase {
    * Tests facet build with field.module field.
    */
   public function testBuildBundle() {
-    $module_field = $this->getMockBuilder(FieldStorageConfig::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $module_field = $this->createMock(FieldStorageConfig::class);
     // Return cache field metadata.
     $module_field->expects($this->exactly(1))
       ->method('getCacheContexts')
@@ -214,20 +186,14 @@ class ListItemProcessorTest extends UnitTestCase {
       ->method('getCacheMaxAge')
       ->willReturn(54321);
 
-    $config_manager = $this->getMockBuilder(ConfigManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config_manager = $this->createMock(ConfigManager::class);
     $config_manager->expects($this->exactly(2))
       ->method('loadConfigEntityByName')
       ->willReturn($module_field);
 
-    $entity_field_manager = $this->getMockBuilder(EntityFieldManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_field_manager = $this->createMock(EntityFieldManager::class);
 
-    $entity_type_bundle_info = $this->getMockBuilder(EntityTypeBundleInfo::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_bundle_info = $this->createMock(EntityTypeBundleInfo::class);
 
     $processor = new ListItemProcessor([], 'list_item', [], $config_manager, $entity_field_manager, $entity_type_bundle_info);
     $this->processor_plugin_manager->method('createInstance')
@@ -260,13 +226,9 @@ class ListItemProcessorTest extends UnitTestCase {
    * Tests facet build with base props.
    */
   public function testBuildBaseField() {
-    $config_manager = $this->getMockBuilder(ConfigManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config_manager = $this->createMock(ConfigManager::class);
 
-    $base_field = $this->getMockBuilder(BaseFieldDefinition::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $base_field = $this->createMock(BaseFieldDefinition::class);
     // Return cache field metadata.
     $base_field->expects($this->exactly(1))
       ->method('getCacheContexts')
@@ -278,9 +240,7 @@ class ListItemProcessorTest extends UnitTestCase {
       ->method('getCacheMaxAge')
       ->willReturn(1235813);
 
-    $entity_field_manager = $this->getMockBuilder(EntityFieldManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_field_manager = $this->createMock(EntityFieldManager::class);
     $entity_field_manager->expects($this->any())
       ->method('getFieldDefinitions')
       ->with('node', '')
@@ -288,9 +248,7 @@ class ListItemProcessorTest extends UnitTestCase {
         'test_facet_baseprop' => $base_field,
       ]);
 
-    $entity_type_bundle_info = $this->getMockBuilder(EntityTypeBundleInfo::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_bundle_info = $this->createMock(EntityTypeBundleInfo::class);
 
     $processor = new ListItemProcessor([], 'list_item', [], $config_manager, $entity_field_manager, $entity_type_bundle_info);
     $this->processor_plugin_manager->method('createInstance')
diff --git a/tests/src/Unit/Plugin/processor/TermWeightWidgetOrderProcessorTest.php b/tests/src/Unit/Plugin/processor/TermWeightWidgetOrderProcessorTest.php
index 425e5a0..963b596 100644
--- a/tests/src/Unit/Plugin/processor/TermWeightWidgetOrderProcessorTest.php
+++ b/tests/src/Unit/Plugin/processor/TermWeightWidgetOrderProcessorTest.php
@@ -34,28 +34,28 @@ class TermWeightWidgetOrderProcessorTest extends UnitTestCase {
   /**
    * The mocked entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityTypeManager;
 
   /**
    * Mocked term, used for comparison.
    *
-   * @var \Drupal\Core\Entity\EntityManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $termA;
 
   /**
    * Mocked term, used for comparison.
    *
-   * @var \Drupal\Core\Entity\EntityManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $termB;
 
   /**
    * Mocked entity (term) storage.
    *
-   * @var \Drupal\Core\Entity\EntityManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $termStorage;
 
@@ -67,12 +67,8 @@ class TermWeightWidgetOrderProcessorTest extends UnitTestCase {
 
     // Build up a chain of mocks that we will have the processor use to fetch
     // the weight of the terms that are being compared.
-    $this->termStorage = $this->getMockBuilder(EntityStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->entityTypeManager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->termStorage = $this->createMock(EntityStorageInterface::class);
+    $this->entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
     $this->entityTypeManager->expects($this->any())
       ->method('getStorage')
       ->willReturn($this->termStorage);
@@ -83,12 +79,8 @@ class TermWeightWidgetOrderProcessorTest extends UnitTestCase {
     // Setup two mock terms that will be set up to have specific weights before
     // the processor is used to compare them.
     // The mocks are used in the individual tests.
-    $this->termA = $this->getMockBuilder(Term::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->termB = $this->getMockBuilder(Term::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->termA = $this->createMock(Term::class);
+    $this->termB = $this->createMock(Term::class);
 
     // Prepare the terms that will be returned when the processor loads its list
     // of term-ids from the Results raw values.
diff --git a/tests/src/Unit/Plugin/processor/TranslateEntityProcessorTest.php b/tests/src/Unit/Plugin/processor/TranslateEntityProcessorTest.php
index 7030d2b..2954b46 100644
--- a/tests/src/Unit/Plugin/processor/TranslateEntityProcessorTest.php
+++ b/tests/src/Unit/Plugin/processor/TranslateEntityProcessorTest.php
@@ -28,14 +28,14 @@ class TranslateEntityProcessorTest extends UnitTestCase {
   /**
    * The mocked language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $languageManager;
 
   /**
    * The mocked entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityTypeManager;
 
@@ -46,18 +46,14 @@ class TranslateEntityProcessorTest extends UnitTestCase {
     parent::setUp();
 
     // Mock language manager.
-    $this->languageManager = $this->getMockBuilder(LanguageManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->languageManager = $this->createMock(LanguageManagerInterface::class);
     $language = new Language(['langcode' => 'en']);
     $this->languageManager->expects($this->any())
       ->method('getCurrentLanguage')
       ->will($this->returnValue($language));
 
     // Mock entity type manager.
-    $this->entityTypeManager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
 
     // Create and set a global container with the language manager and entity
     // type manager.
@@ -100,9 +96,7 @@ class TranslateEntityProcessorTest extends UnitTestCase {
         ->willReturn([$property_definition]);
 
       // Create the actual facet.
-      $facet = $this->getMockBuilder(Facet::class)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $facet = $this->createMock(Facet::class);
       $facet->expects($this->any())
         ->method('getDataDefinition')
         ->willReturn($data_definition);
@@ -134,9 +128,7 @@ class TranslateEntityProcessorTest extends UnitTestCase {
    */
   public function testNodeResultsChanged(FacetInterface $facet, array $results) {
     // Mock a node and add the label to it.
-    $node = $this->getMockBuilder(Node::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $node = $this->createMock(Node::class);
     $node->expects($this->any())
       ->method('label')
       ->willReturn('shaken not stirred');
@@ -184,9 +176,7 @@ class TranslateEntityProcessorTest extends UnitTestCase {
    */
   public function testTermResultsChanged(FacetInterface $facet, array $results) {
     // Mock term.
-    $term = $this->getMockBuilder(Term::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $term = $this->createMock(Term::class);
     $term->expects($this->once())
       ->method('label')
       ->willReturn('Burrowing owl');
diff --git a/tests/src/Unit/Plugin/processor/UrlProcessorHandlerTest.php b/tests/src/Unit/Plugin/processor/UrlProcessorHandlerTest.php
index 76ff67c..c391d0e 100644
--- a/tests/src/Unit/Plugin/processor/UrlProcessorHandlerTest.php
+++ b/tests/src/Unit/Plugin/processor/UrlProcessorHandlerTest.php
@@ -98,21 +98,15 @@ class UrlProcessorHandlerTest extends UnitTestCase {
    * Sets up a container.
    */
   protected function createContainer() {
-    $url_processor = $this->getMockBuilder(UrlProcessorInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url_processor = $this->createMock(UrlProcessorInterface::class);
 
-    $manager = $this->getMockBuilder(FacetSourcePluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $manager = $this->createMock(FacetSourcePluginManager::class);
     $manager->expects($this->exactly(1))
       ->method('createInstance')
       ->willReturn($url_processor);
 
     $storage = $this->createMock(EntityStorageInterface::class);
-    $em = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $em = $this->createMock(EntityTypeManagerInterface::class);
     $em->expects($this->exactly(1))
       ->method('getStorage')
       ->willReturn($storage);
diff --git a/tests/src/Unit/Plugin/query_type/SearchApiGranularTest.php b/tests/src/Unit/Plugin/query_type/SearchApiGranularTest.php
index b15b226..658f3d7 100644
--- a/tests/src/Unit/Plugin/query_type/SearchApiGranularTest.php
+++ b/tests/src/Unit/Plugin/query_type/SearchApiGranularTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\facets\Unit\Plugin\query_type;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\facets\Entity\Facet;
 use Drupal\facets\FacetInterface;
@@ -23,6 +24,7 @@ use Prophecy\Argument;
  */
 class SearchApiGranularTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
diff --git a/tests/src/Unit/Plugin/url_processor/QueryStringTest.php b/tests/src/Unit/Plugin/url_processor/QueryStringTest.php
index 39e7312..a6fdbe1 100644
--- a/tests/src/Unit/Plugin/url_processor/QueryStringTest.php
+++ b/tests/src/Unit/Plugin/url_processor/QueryStringTest.php
@@ -115,9 +115,7 @@ class QueryStringTest extends UnitTestCase {
     $storage->expects($this->any())
       ->method('loadByProperties')
       ->willReturn([$facet]);
-    $entityTypeManager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
     $entityTypeManager->expects($this->any())
       ->method('getStorage')
       ->willReturn($storage);
@@ -152,9 +150,7 @@ class QueryStringTest extends UnitTestCase {
     $storage->expects($this->atLeastOnce())
       ->method('loadByProperties')
       ->willReturnOnConsecutiveCalls([$facet], [$facet], []);
-    $entityTypeManager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
     $entityTypeManager->expects($this->any())
       ->method('getStorage')
       ->willReturn($storage);
@@ -233,9 +229,7 @@ class QueryStringTest extends UnitTestCase {
     $storage->expects($this->atLeastOnce())
       ->method('loadByProperties')
       ->willReturnOnConsecutiveCalls([$facet2], [$facet2], [$facet2], [$facet2], [$facet2], [$facet2]);
-    $entityTypeManager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
     $entityTypeManager->expects($this->any())
       ->method('getStorage')
       ->willReturn($storage);
@@ -299,9 +293,7 @@ class QueryStringTest extends UnitTestCase {
     $storage->expects($this->once())
       ->method('load')
       ->willReturn($facet_source);
-    $em = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $em = $this->createMock(EntityTypeManagerInterface::class);
     $em->expects($this->any())
       ->method('getStorage')
       ->willReturn($storage);
@@ -350,9 +342,7 @@ class QueryStringTest extends UnitTestCase {
    */
   public function testContextualFilters() {
     // Override router.
-    $router = $this->getMockBuilder(TestRouterInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $router = $this->createMock(TestRouterInterface::class);
     $router->expects($this->any())
       ->method('matchRequest')
       ->willReturn([
@@ -385,18 +375,14 @@ class QueryStringTest extends UnitTestCase {
    */
   public function testUnroutedPath() {
     // Override router.
-    $router = $this->getMockBuilder(TestRouterInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $router = $this->createMock(TestRouterInterface::class);
     $router->expects($this->any())
       ->method('matchRequest')
       ->willThrowException(new ResourceNotFoundException());
 
     $request = new Request();
 
-    $request_stack = $this->getMockBuilder(RequestStack::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $request_stack = $this->createMock(RequestStack::class);
     $request_stack->expects($this->any())
       ->method('getCurrentRequest')
       ->willReturn($request);
@@ -427,9 +413,7 @@ class QueryStringTest extends UnitTestCase {
    * Sets up a container.
    */
   protected function setContainer() {
-    $router = $this->getMockBuilder(TestRouterInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $router = $this->createMock(TestRouterInterface::class);
     $router->expects($this->any())
       ->method('matchRequest')
       ->willReturn([
@@ -439,24 +423,18 @@ class QueryStringTest extends UnitTestCase {
 
     $validator = $this->createMock(PathValidatorInterface::class);
 
-    $fsi = $this->getMockBuilder(FacetSourcePluginInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $fsi = $this->createMock(FacetSourcePluginInterface::class);
     $fsi->method('getPath')
       ->willReturn('/test');
 
-    $manager = $this->getMockBuilder(FacetSourcePluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $manager = $this->createMock(FacetSourcePluginManager::class);
     $manager->method('createInstance')
       ->willReturn($fsi);
     $manager->method('hasDefinition')
       ->with('facet_source__dummy')
       ->willReturn(TRUE);
 
-    $facetentity = $this->getMockBuilder(Facet::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $facetentity = $this->createMock(Facet::class);
     $facetentity->method('id')
       ->willReturn('king');
 
@@ -464,9 +442,7 @@ class QueryStringTest extends UnitTestCase {
     $storage->expects($this->any())
       ->method('loadByProperties')
       ->willReturn([$facetentity]);
-    $em = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $em = $this->createMock(EntityTypeManagerInterface::class);
     $em->expects($this->any())
       ->method('getStorage')
       ->willReturn($storage);
diff --git a/tests/src/Unit/Plugin/widget/LinksWidgetTest.php b/tests/src/Unit/Plugin/widget/LinksWidgetTest.php
index e23a4ae..cbae6fe 100644
--- a/tests/src/Unit/Plugin/widget/LinksWidgetTest.php
+++ b/tests/src/Unit/Plugin/widget/LinksWidgetTest.php
@@ -245,9 +245,7 @@ class LinksWidgetTest extends WidgetTestBase {
    * Sets up a container.
    */
   protected function createContainer() {
-    $router = $this->getMockBuilder(TestRouterInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $router = $this->createMock(TestRouterInterface::class);
     $router->expects($this->any())
       ->method('matchRequest')
       ->willReturn([
@@ -255,28 +253,20 @@ class LinksWidgetTest extends WidgetTestBase {
         '_route' => 'test',
       ]);
 
-    $url_processor = $this->getMockBuilder(UrlProcessorInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url_processor = $this->createMock(UrlProcessorInterface::class);
 
-    $manager = $this->getMockBuilder(FacetSourcePluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $manager = $this->createMock(FacetSourcePluginManager::class);
     $manager->expects($this->exactly(1))
       ->method('createInstance')
       ->willReturn($url_processor);
 
     $storage = $this->createMock(EntityStorageInterface::class);
-    $em = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $em = $this->createMock(EntityTypeManagerInterface::class);
     $em->expects($this->exactly(1))
       ->method('getStorage')
       ->willReturn($storage);
 
-    $facets_url_generator = $this->getMockBuilder(FacetsUrlGenerator::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $facets_url_generator = $this->createMock(FacetsUrlGenerator::class);
 
     $container = new ContainerBuilder();
     $container->set('router.no_access_checks', $router);
diff --git a/tests/src/Unit/Plugin/widget/WidgetTestBase.php b/tests/src/Unit/Plugin/widget/WidgetTestBase.php
index 927785d..ce83caa 100644
--- a/tests/src/Unit/Plugin/widget/WidgetTestBase.php
+++ b/tests/src/Unit/Plugin/widget/WidgetTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\facets\Unit\Plugin\widget;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\facets\Entity\Facet;
 use Drupal\facets\FacetInterface;
 use Drupal\facets\Result\Result;
@@ -17,6 +18,7 @@ use Symfony\Component\DependencyInjection\ContainerBuilder;
  */
 abstract class WidgetTestBase extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The widget to be tested.
    *
diff --git a/tests/src/Unit/Processor/ProcessorPluginManagerTest.php b/tests/src/Unit/Processor/ProcessorPluginManagerTest.php
index 3b28388..e089d1f 100644
--- a/tests/src/Unit/Processor/ProcessorPluginManagerTest.php
+++ b/tests/src/Unit/Processor/ProcessorPluginManagerTest.php
@@ -21,35 +21,35 @@ class ProcessorPluginManagerTest extends UnitTestCase {
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $cache;
 
   /**
    * The plugin discovery.
    *
-   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $discovery;
 
   /**
    * The plugin factory.
    *
-   * @var \Drupal\Component\Plugin\Factory\DefaultFactory|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Factory\DefaultFactory|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $factory;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $moduleHandler;
 
   /**
    * The translator interface.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $translator;
 
@@ -66,9 +66,7 @@ class ProcessorPluginManagerTest extends UnitTestCase {
   public function setUp(): void {
     $this->discovery = $this->createMock(DiscoveryInterface::class);
 
-    $this->factory = $this->getMockBuilder(DefaultFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->factory = $this->createMock(DefaultFactory::class);
 
     $this->moduleHandler = $this->createMock(ModuleHandlerInterface::class);
 
diff --git a/tests/src/Unit/QueryType/QueryTypePluginManagerTest.php b/tests/src/Unit/QueryType/QueryTypePluginManagerTest.php
index 7a4842f..cc85ce9 100644
--- a/tests/src/Unit/QueryType/QueryTypePluginManagerTest.php
+++ b/tests/src/Unit/QueryType/QueryTypePluginManagerTest.php
@@ -19,28 +19,28 @@ class QueryTypePluginManagerTest extends UnitTestCase {
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $cache;
 
   /**
    * The plugin discovery.
    *
-   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $discovery;
 
   /**
    * The plugin factory.
    *
-   * @var \Drupal\Component\Plugin\Factory\DefaultFactory|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Factory\DefaultFactory|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $factory;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $moduleHandler;
 
@@ -57,9 +57,7 @@ class QueryTypePluginManagerTest extends UnitTestCase {
   public function setUp(): void {
     $this->discovery = $this->createMock(DiscoveryInterface::class);
 
-    $this->factory = $this->getMockBuilder(DefaultFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->factory = $this->createMock(DefaultFactory::class);
 
     $this->moduleHandler = $this->createMock(ModuleHandlerInterface::class);
 
diff --git a/tests/src/Unit/UrlProcessor/UrlProcessorPluginManagerTest.php b/tests/src/Unit/UrlProcessor/UrlProcessorPluginManagerTest.php
index 93eb4ac..849724d 100644
--- a/tests/src/Unit/UrlProcessor/UrlProcessorPluginManagerTest.php
+++ b/tests/src/Unit/UrlProcessor/UrlProcessorPluginManagerTest.php
@@ -20,35 +20,35 @@ class UrlProcessorPluginManagerTest extends UnitTestCase {
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $cache;
 
   /**
    * The plugin discovery.
    *
-   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $discovery;
 
   /**
    * The plugin factory.
    *
-   * @var \Drupal\Component\Plugin\Factory\DefaultFactory|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Factory\DefaultFactory|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $factory;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $moduleHandler;
 
   /**
    * The translator interface.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $translator;
 
@@ -65,9 +65,7 @@ class UrlProcessorPluginManagerTest extends UnitTestCase {
   public function setUp(): void {
     $this->discovery = $this->createMock(DiscoveryInterface::class);
 
-    $this->factory = $this->getMockBuilder(DefaultFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->factory = $this->createMock(DefaultFactory::class);
 
     $this->moduleHandler = $this->createMock(ModuleHandlerInterface::class);
 
diff --git a/tests/src/Unit/Utility/FacetsUrlGeneratorTest.php b/tests/src/Unit/Utility/FacetsUrlGeneratorTest.php
index 16a98c6..12fdccb 100644
--- a/tests/src/Unit/Utility/FacetsUrlGeneratorTest.php
+++ b/tests/src/Unit/Utility/FacetsUrlGeneratorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\facets\Unit\Utility;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\facets\UrlProcessor\UrlProcessorPluginManager;
@@ -17,6 +18,7 @@ use Prophecy\Argument;
  */
 class FacetsUrlGeneratorTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests that passing an invalid facet ID throws an InvalidArgumentException.
    *
diff --git a/tests/src/Unit/Widget/WidgetPluginManagerTest.php b/tests/src/Unit/Widget/WidgetPluginManagerTest.php
index fc3a563..83dd700 100644
--- a/tests/src/Unit/Widget/WidgetPluginManagerTest.php
+++ b/tests/src/Unit/Widget/WidgetPluginManagerTest.php
@@ -20,35 +20,35 @@ class WidgetPluginManagerTest extends UnitTestCase {
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $cache;
 
   /**
    * The plugin discovery.
    *
-   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $discovery;
 
   /**
    * The plugin factory.
    *
-   * @var \Drupal\Component\Plugin\Factory\DefaultFactory|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Component\Plugin\Factory\DefaultFactory|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $factory;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $moduleHandler;
 
   /**
    * The translator interface.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\StringTranslation\TranslationInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $translator;
 
@@ -65,9 +65,7 @@ class WidgetPluginManagerTest extends UnitTestCase {
   public function setUp(): void {
     $this->discovery = $this->createMock(DiscoveryInterface::class);
 
-    $this->factory = $this->getMockBuilder(DefaultFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->factory = $this->createMock(DefaultFactory::class);
 
     $this->moduleHandler = $this->createMock(ModuleHandlerInterface::class);
 
