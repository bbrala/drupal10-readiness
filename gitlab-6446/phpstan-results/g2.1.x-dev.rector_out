modules/contrib/g2/g2.admin.inc
modules/contrib/g2/g2.install
modules/contrib/g2/src/Plugin/Block/AlphabarBlock.php
modules/contrib/g2/g2.install.php
modules/contrib/g2/src/Plugin/Block/LatestBlock.php
modules/contrib/g2/src/Plugin/Block/Random.php
modules/contrib/g2/src/Plugin/Block/TopBlock.php
modules/contrib/g2/src/Plugin/Block/Wotd.php
modules/contrib/g2/g2.module
modules/contrib/g2/src/Requirements.php
modules/contrib/g2/src/Tests/AlphabarTest.php
modules/contrib/g2/src/Tests/G2UnitTest.php
modules/contrib/g2/src/Top.php
modules/contrib/g2/src/TopRecord.php
modules/contrib/g2/views/g2.views.inc
modules/contrib/g2/src/Alphabar.php
modules/contrib/g2/src/Controller/Feed.php
modules/contrib/g2/src/Controller/Homonyms.php
modules/contrib/g2/src/Controller/Initial.php
modules/contrib/g2/src/Controller/Main.php
modules/contrib/g2/src/Form/RefererWipe.php
modules/contrib/g2/src/Form/SettingsForm.php
modules/contrib/g2/src/G2.php
modules/contrib/g2/src/Latest.php
modules/contrib/g2/src/ParamConverter/NodeMatch.php

6 files with changes
====================

1) modules/contrib/g2/g2.admin.inc:229

    ---------- begin diff ----------
@@ @@
 function g2_admin_settings_validate($form, &$form_state) {
   $main = $form_state['values']['g2_main'];
   if (is_numeric($main)) {
-    if ($main != 0 && !is_object(node_load($main))) {
+    if ($main != 0 && !is_object(\Drupal::service('entity_type.manager')->getStorage('node')->load($main))) {
       form_set_error('g2_main', t('The node chosen for the main page must be a valid one, or 0: "@nid" is not a valid node id.',
         array('@nid' => $main)));
     }
@@ @@
   }

   $nid = $form_state['values']['g2_homonyms'];
-  if ($nid != 0 && !is_object(node_load($nid))) {
+  if ($nid != 0 && !is_object(\Drupal::service('entity_type.manager')->getStorage('node')->load($nid))) {
     form_set_error('g2_homonyms', t('The node chosen for the homonyms disambiguation page must be a valid one, or 0: "@nid" is not a valid node id.',
       array('@nid' => $nid)));
   }
    ----------- end diff -----------

Applied rules:
 * NodeLoadRector
 * ArgumentRemoverRector


2) modules/contrib/g2/src/Tests/AlphabarTest.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installConfig(static::MODULES);
     $this->installSchema('system', 'router');
@@ @@
     $links = $this->alphabar->getLinks();
     $this->assertTrue(is_array($links));

-    $expected = Unicode::strlen($this->alphabar->getContents());
+    $expected = mb_strlen($this->alphabar->getContents());
     $actual = count($links);
     $this->assertEquals($expected, $actual, 'The number of links matches the number of runes in alphabar.contents');
   }
    ----------- end diff -----------

Applied rules:
 * UnicodeStrlenRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/g2/src/Form/SettingsForm.php:499

    ---------- begin diff ----------
@@ @@
   public function submitControllerForm() {
     // @TODO Really necessary ? We change selected routes, not modifying them.
     $this->routerBuilder->rebuild();
-    drupal_set_message($this->t('The router has been rebuilt.'));
+    $this->messenger()->addStatus($this->t('The router has been rebuilt.'));
   }

   /**
@@ @@
       $this->{$handler}();
     }

-    drupal_set_message($this->t('The configuration options have been saved.'));
+    $this->messenger()->addStatus($this->t('The configuration options have been saved.'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/g2/src/Alphabar.php:84

    ---------- begin diff ----------
@@ @@
     $initials = $this->config['contents'];
     $route_name = $this->routeName;

-    for ($i = 0; $i < Unicode::strlen($initials); $i++) {
-      $initial = Unicode::substr($initials, $i, 1);
+    for ($i = 0; $i < mb_strlen($initials); $i++) {
+      $initial = mb_substr($initials, $i, 1);
       $path = G2::encodeTerminal($initial);
       $parameters = ['g2_initial' => $path];
       $url = Url::fromRoute($route_name, $parameters, $options);
    ----------- end diff -----------

Applied rules:
 * UnicodeStrlenRector
 * UnicodeSubstrRector
 * ArgumentRemoverRector
 * WrapReturnRector


5) modules/contrib/g2/g2.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\g2\G2\DELTARANDOM;
+use Drupal\g2\G2\VARRANDOMSTORE;
+use Drupal\g2\G2\DEFRANDOMSTORE;
+use Drupal\g2\G2\VARRANDOMTERMS;
+use Drupal\g2\G2\DEFRANDOMTERMS;
+use Drupal\g2\G2\DELTATOP;
+use Drupal\g2\G2\VARTOPITEMCOUNT;
+use Drupal\g2\G2\DEFTOPITEMCOUNT;
+use Drupal\g2\G2\DELTAWOTD;
+use Drupal\g2\G2\VARWOTDENTRY;
+use Drupal\g2\G2\DEFWOTDENTRY;
+use Drupal\g2\G2\PATHAUTOCOMPLETE;
+use Drupal\g2\G2\VARWOTDBODYSIZE;
+use Drupal\g2\G2\DEFWOTDBODYSIZE;
+use Drupal\g2\G2\VARWOTDAUTOCHANGE;
+use Drupal\g2\G2\DEFWOTDAUTOCHANGE;
+use Drupal\g2\G2\VARWOTDTERMS;
+use Drupal\g2\G2\DEFWOTDTERMS;
+use Drupal\g2\G2\VARWOTDTITLE;
+use Drupal\g2\G2\VARWOTDFEEDLINK;
+use Drupal\g2\G2\DEFWOTDFEEDLINK;
+use Drupal\g2\G2\VARWOTDFEEDTITLE;
+use Drupal\g2\G2\VARWOTDFEEDAUTHOR;
+use Drupal\g2\G2\DEFWOTDFEEDAUTHOR;
+use Drupal\g2\G2\VARWOTDFEEDDESCR;
+use Drupal\g2\G2\VARWOTDDATE;
+use Drupal\g2\G2\NODETYPE;
+use Drupal\g2\G2\PATHNODEADD;
+use Drupal\g2\G2\PATHSETTINGS;
+use Drupal\g2\G2\PERMVIEW;
+use Drupal\g2\G2\PATHWOTDFEED;
+use Drupal\g2\G2\TITLEWOTDFEED;
+use Drupal\g2\G2\PERMADMIN;
+use Drupal\g2\G2\TITLEMAIN;
+use Drupal\g2\G2\VARPATHMAIN;
+use Drupal\g2\G2\DEFPATHMAIN;
+use Drupal\g2\G2\VARLOGREFERRERS;
+use Drupal\g2\G2\DEFLOGREFERRERS;
+use Drupal\g2\G2\VARHIDDENTITLE;
+use Drupal\g2\G2\DEFHIDDENTITLE;
+use function Drupal\g2\G2\block_cache_decode;
+use function Drupal\g2\G2\random;
+use function Drupal\g2\G2\wotd;
+use function Drupal\g2\G2\override_site_name;
+use function Drupal\g2\G2\log_referrers;
 /**
  * @file
  * This defines a node-based glossary module, as opposed to the term-based
@@ @@
       $definition = $block->getPlugin()->getPluginDefinition();
       if ($definition['provider'] === 'g2') {
         $id = $block->getPluginId();
-        $delta = \Drupal\Component\Utility\Unicode::substr($id, 3);
+        $delta = mb_substr($id, 3);
         $helps = [
           G2::DELTA_ALPHABAR => t('This block displays a clickable list of initials from the G2 glossary.'),
           G2::DELTA_RANDOM => t('This block displays a pseudo-random entry from the G2 glossary.'),
@@ @@
     . "WHERE n.type = '%s' AND (n.status = 1) "
     . "  AND NOT (n.title = '%s' OR n.nid = %d)";
   $sq = db_rewrite_sql($sq);
-  $q = db_query($sq, G2NODETYPE, $random, $wotd_nid);
+  $q = \Drupal::database()->query($sq, G2NODETYPE, $random, $wotd_nid);
   $n = db_result($q);

   $rand = mt_rand(0, $n - 1); // no need to mt_srand() since PHP 4.2
@@ @@
   $sq = db_rewrite_sql($sq);
   $q = db_query_range($sq, G2NODETYPE, $random, $wotd_nid, $rand, 1);
   $nid = db_result($q);
-  $node = node_load($nid);
+  $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($nid);
   $node->taxonomy = variable_get(G2VARRANDOMTERMS, G2DEFRANDOMTERMS)
     ? _g2_comb_taxonomy($node->taxonomy)
     : [];
@@ @@
     . "WHERE gr.nid = %d "
     . tablesort_sql($header);
   $sq = db_rewrite_sql($sq);
-  $q = db_query($sq, $nid);
+  $q = \Drupal::database()->query($sq, $nid);
   $rows = [];
   while (is_object($o = db_fetch_object($q))) {
     $sts = preg_match('/node\/(\d+)/', $o->referer, $matches);
     if ($sts) {
-      $node = node_load($matches[1]);
+      $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($matches[1]);
       $title = l($node->title, 'node/' . $node->nid);
     }
     else {
@@ @@
 function _g2_referer_wipe($nid = NULL) {
   if (isset($nid)) {
     $sq = 'DELETE from {g2_referer} WHERE nid = %d';
-    db_query($sq, $nid);
+    \Drupal::database()->query($sq, $nid);
     drupal_goto('node/' . $nid);
   }
   else {
     $sq = 'DELETE from {g2_referer}';
-    db_query($sq);
+    \Drupal::database()->query($sq);
   }
 }

@@ @@
 function _g2_wotd($bodysize = 0) {
   // No need for a static: this function is normally never called twice.
   $nid = variable_get(G2VARWOTDENTRY, G2DEFWOTDENTRY);
-  $node = node_load($nid);
+  $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($nid);
   if (empty($node)) {
     return NULL;
   }
@@ @@
          * @see _g2_autocomplete()
          */
         $nid = variable_get(G2VARWOTDENTRY, G2DEFWOTDENTRY);
-        $node = node_load($nid);
+        $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($nid);
         if (empty($node)) {
           $node = new stdClass();
           $node->nid = 0;
@@ @@
  * Implement hook_delete().
  */
 function g2_delete(&$node) {
-  db_query('DELETE FROM {g2_node} WHERE nid = %d', $node->nid);
+  \Drupal::database()->query('DELETE FROM {g2_node} WHERE nid = %d', $node->nid);
 }

 /**
@@ @@
   $min_status = user_access('administer nodes')
     ? NODE_NOT_PUBLISHED
     : NODE_PUBLISHED;
-  $q = db_query($sq, G2NODETYPE, $min_status, $title);
+  $q = \Drupal::database()->query($sq, G2NODETYPE, $min_status, $title);
   $nodes = [];
   while (is_object($node = db_fetch_object($q))) {
-    $nodes[$node->nid] = node_load($node->nid);
+    $nodes[$node->nid] = \Drupal::service('entity_type.manager')->getStorage('node')->load($node->nid);
   }
   return $nodes;
 }
@@ @@
  * @XXX New feature to add: make extra node info revision-aware
  */
 function g2_load($node) {
-  $ret = db_fetch_object(db_query('SELECT * FROM {g2_node} WHERE nid = %s', $node->nid));
+  $ret = db_fetch_object(\Drupal::database()->query('SELECT * FROM {g2_node} WHERE nid = %s', $node->nid));
   return $ret;
 }

@@ @@
  */
 function g2_referer_wipe_confirm_form_submit($form, &$form_state) {
   _g2_referer_wipe();
-  drupal_set_message(t('Referer information has been erased on all G2 entries'));
+  \Drupal::messenger()->addStatus(t('Referer information has been erased on all G2 entries'));
   $form_state['redirect'] = G2PATHSETTINGS;
 }

@@ @@
     $sq = 'UPDATE {g2_referer} '
       . 'SET incoming = incoming + 1 '
       . "WHERE nid = %d AND referer = '%s'";
-    db_query($sq, $node->nid, $referer);
+    \Drupal::database()->query($sq, $node->nid, $referer);
     if (!db_affected_rows()) {
       $sq = 'INSERT INTO {g2_referer} '
         . '  (nid, referer, incoming) '
         . "VALUES (%d, '%s', 1) ";
-      db_query($sq, $node->nid, $referer);
+      \Drupal::database()->query($sq, $node->nid, $referer);
     }
   }
   else {
@@ @@
 function g2_views_api() {
   return [
     'api' => '2.0',
-    'path' => drupal_get_path('module', 'g2') . '/views',
+    'path' => \Drupal::service('extension.list.module')->getPath('g2') . '/views',
   ];
 }

@@ @@
   $info = g2_block_info();
   $info = $info[$delta];
   $form['caching'] = [
-    '#markup' => t('<p>Caching mode: @mode</p>', ['@mode' => G2\block_cache_decode($info['cache'])]),
+    '#markup' => t('<p>Caching mode: @mode</p>', ['@mode' => block_cache_decode($info['cache'])]),
   ];

   switch ($delta) {
-    case G2\DELTARANDOM:
-      $form[G2\VARRANDOMSTORE] = [
+    case DELTARANDOM:
+      $form[VARRANDOMSTORE] = [
         '#type' => 'checkbox',
         '#title' => t('Store latest random entry'),
-        '#default_value' => variable_get(G2\VARRANDOMSTORE, G2\DEFRANDOMSTORE),
+        '#default_value' => variable_get(VARRANDOMSTORE, DEFRANDOMSTORE),
         '#description' => t(
           'When this setting is TRUE (default value),
       the latest random value is kept in the DB to avoid showing the same pseudo-random
@@ @@
       For larger sites, unchecking this setting will remove one database write with locking.'
         ),
       ];
-      $form[G2\VARRANDOMTERMS] = [
+      $form[VARRANDOMTERMS] = [
         '#type' => 'checkbox',
         '#title' => t('Return taxonomy terms for the current entry'),
-        '#default_value' => variable_get(G2\VARRANDOMTERMS, G2\DEFRANDOMTERMS),
+        '#default_value' => variable_get(VARRANDOMTERMS, DEFRANDOMTERMS),
         '#description' => t(
           'The taxonomy terms will be returned by the API and made available to the theme.
          Default G2 themeing will display them.'
@@ @@
       ];
       break;

-    case G2\DELTATOP:
-      $form[G2\VARTOPITEMCOUNT] = [
+    case DELTATOP:
+      $form[VARTOPITEMCOUNT] = [
         '#type' => 'select',
         '#title' => t('Number of items'),
-        '#default_value' => variable_get(G2\VARTOPITEMCOUNT, G2\DEFTOPITEMCOUNT),
+        '#default_value' => variable_get(VARTOPITEMCOUNT, DEFTOPITEMCOUNT),
         '#options' => $count_options,
       ];
       break;

-    case G2\DELTAWOTD:
+    case DELTAWOTD:
       // Convert nid to "title [<nid>]" even if missing.
       // @see autocomplete()
-      $nid = variable_get(G2\VARWOTDENTRY, G2\DEFWOTDENTRY);
-      $node = node_load($nid);
+      $nid = variable_get(VARWOTDENTRY, DEFWOTDENTRY);
+      $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($nid);
       if (empty($node)) {
         $node = new stdClass();
         $node->nid = 0;
         $node->title = NULL;
       }
-      $form[G2\VARWOTDENTRY] = [
+      $form[VARWOTDENTRY] = [
         '#type' => 'textfield',
         '#title' => t('Entry for the day'),
         '#maxlength' => 60,
-        '#autocomplete_path' => G2\PATHAUTOCOMPLETE,
+        '#autocomplete_path' => PATHAUTOCOMPLETE,
         '#required' => TRUE,
         // !title: we don't filter since this is input, not output,
         // and can contain normally escaped characters, to accommodate
@@ @@
           ]
         ),
       ];
-      $form[G2\VARWOTDBODYSIZE] = [
+      $form[VARWOTDBODYSIZE] = [
         '#type' => 'textfield',
         '#title' => t('Number of text characters to be displayed from entry definition body, if one exists'),
         '#size' => 4,
         '#maxlength' => 4,
         '#required' => TRUE,
-        '#default_value' => variable_get(G2\VARWOTDBODYSIZE, G2\DEFWOTDBODYSIZE),
+        '#default_value' => variable_get(VARWOTDBODYSIZE, DEFWOTDBODYSIZE),
       ];
-      $form[G2\VARWOTDAUTOCHANGE] = [
+      $form[VARWOTDAUTOCHANGE] = [
         '#type' => 'checkbox',
         '#title' => t('Auto-change daily'),
         '#required' => TRUE,
-        '#default_value' => variable_get(G2\VARWOTDAUTOCHANGE, G2\DEFWOTDAUTOCHANGE),
+        '#default_value' => variable_get(VARWOTDAUTOCHANGE, DEFWOTDAUTOCHANGE),
         '#description' => t('This setting will only work if cron or poormanscron is used.'),
       ];
-      $form[G2\VARWOTDTERMS] = [
+      $form[VARWOTDTERMS] = [
         '#type' => 'checkbox',
         '#title' => t('Return taxonomy terms for the current entry'),
-        '#default_value' => variable_get(G2\VARWOTDTERMS, G2\DEFWOTDTERMS),
+        '#default_value' => variable_get(VARWOTDTERMS, DEFWOTDTERMS),
         '#description' => t(
           'The taxonomy terms will be returned by the API and made available to the theme.
          Default G2 themeing will display them.'
@@ @@
         ),
       ];
       $default_wotd_title = t('Word of the day in the G2 glossary');
-      $form[G2\VARWOTDTITLE] = [
+      $form[VARWOTDTITLE] = [
         '#type' => 'textfield',
         '#title' => t('Title for the WOTD block'),
         '#description' => t(
@@ @@
           'This title is also the default title for the WOTD feed, if none is defined. It is overridden by the default Drupal block title, if the latter is not empty.'
         ),
         '#required' => TRUE,
-        '#default_value' => variable_get(G2\VARWOTDTITLE, $default_wotd_title),
+        '#default_value' => variable_get(VARWOTDTITLE, $default_wotd_title),
       ];

       $form['wotd_feed'] = [
@@ @@
         '#type' => 'fieldset',
         '#title' => t('RSS Feed'),
       ];
-      $form['wotd_feed'][G2\VARWOTDFEEDLINK] = [
+      $form['wotd_feed'][VARWOTDFEEDLINK] = [
         '#type' => 'checkbox',
         '#title' => t('Display feed link'),
-        '#default_value' => variable_get(G2\VARWOTDFEEDLINK, G2\DEFWOTDFEEDLINK),
+        '#default_value' => variable_get(VARWOTDFEEDLINK, DEFWOTDFEEDLINK),
         '#description' => t('Should the theme display the link to the RSS feed for this block ?'),
       ];
-      $form['wotd_feed'][G2\VARWOTDFEEDTITLE] = [
+      $form['wotd_feed'][VARWOTDFEEDTITLE] = [
         '#type' => 'textfield',
         '#title' => t('The feed title'),
         '#size' => 60,
         '#maxlength' => 60,
         '#required' => TRUE,
-        '#default_value' => variable_get(G2\VARWOTDFEEDTITLE, variable_get(G2\VARWOTDTITLE, $default_wotd_title)),
+        '#default_value' => variable_get(VARWOTDFEEDTITLE, variable_get(VARWOTDTITLE, $default_wotd_title)),
         '#description' => t(
           'The title for the feed itself.
          This will typically be used by aggregators to remind users of the feed and link to it.
@@ @@
          If nulled, G2 will reset it to the title of the block.'
         ),
       ];
-      $form['wotd_feed'][G2\VARWOTDFEEDAUTHOR] = [
+      $form['wotd_feed'][VARWOTDFEEDAUTHOR] = [
         '#type' => 'textfield',
         '#title' => t('The feed item author'),
         '#size' => 60,
         '#maxlength' => 60,
         '#required' => TRUE,
-        '#default_value' => variable_get(G2\VARWOTDFEEDAUTHOR, G2\DEFWOTDFEEDAUTHOR),
+        '#default_value' => variable_get(VARWOTDFEEDAUTHOR, DEFWOTDFEEDAUTHOR),
         '#description' => t(
           'The author name to be included in the feed entries.
       In this string @author will be replaced by the actual author information.'
         ),
       ];
-      $form['wotd_feed'][G2\VARWOTDFEEDDESCR] = [
+      $form['wotd_feed'][VARWOTDFEEDDESCR] = [
         '#type' => 'textfield',
         '#title' => t('The feed description'),
         '#size' => 60,
         '#maxlength' => 60,
         '#required' => TRUE,
-        '#default_value' => variable_get(G2\VARWOTDFEEDDESCR, t('A daily definition from the G2 Glossary at !site')),
+        '#default_value' => variable_get(VARWOTDFEEDDESCR, t('A daily definition from the G2 Glossary at !site')),
         '#description' => t(
           'The description for the feed itself.
       This will typically be used by aggregators when describing the feed prior to subscription.
@@ @@
  */
 function Zg2_block_info() {
   $blocks = [];
-  $blocks[G2\DELTARANDOM]['info'] = variable_get('g2_random_info', t('G2 Random'));
-  $blocks[G2\DELTATOP]['info'] = variable_get('g2_top_info', t('G2 Top'));
-  $blocks[G2\DELTAWOTD]['info'] = variable_get('g2_wotd_info', t('G2 Word of the day'));
+  $blocks[DELTARANDOM]['info'] = variable_get('g2_random_info', t('G2 Random'));
+  $blocks[DELTATOP]['info'] = variable_get('g2_top_info', t('G2 Top'));
+  $blocks[DELTAWOTD]['info'] = variable_get('g2_wotd_info', t('G2 Word of the day'));

   // Else it couldn't be random.
-  $blocks[G2\DELTARANDOM]['cache'] = DRUPAL_NO_CACHE;
+  $blocks[DELTARANDOM]['cache'] = DRUPAL_NO_CACHE;
   // Can contain unpublished nodes.
-  $blocks[G2\DELTATOP]['cache'] = DRUPAL_CACHE_PER_ROLE;
+  $blocks[DELTATOP]['cache'] = DRUPAL_CACHE_PER_ROLE;
   // Not all roles have g2 view permission.
-  $blocks[G2\DELTAWOTD]['cache'] = DRUPAL_CACHE_PER_ROLE;
+  $blocks[DELTAWOTD]['cache'] = DRUPAL_CACHE_PER_ROLE;
   return $blocks;
 }

@@ @@
  */
 function Zg2_block_save($delta, $edit) {
   switch ($delta) {
-    case G2\DELTARANDOM:
-      variable_set(G2\VARRANDOMSTORE, $edit[G2\VARRANDOMSTORE]);
-      variable_set(G2\VARRANDOMTERMS, $edit[G2\VARRANDOMTERMS]);
+    case DELTARANDOM:
+      variable_set(VARRANDOMSTORE, $edit[VARRANDOMSTORE]);
+      variable_set(VARRANDOMTERMS, $edit[VARRANDOMTERMS]);
       break;

-    case G2\DELTATOP:
-      variable_set(G2\VARTOPITEMCOUNT, $edit[G2\VARTOPITEMCOUNT]);
+    case DELTATOP:
+      variable_set(VARTOPITEMCOUNT, $edit[VARTOPITEMCOUNT]);
       break;

-    case G2\DELTAWOTD:
+    case DELTAWOTD:
       // Convert "some title [<nid>, sticky]" to nid.
-      $entry = $edit[G2\VARWOTDENTRY];
+      $entry = $edit[VARWOTDENTRY];
       $matches = [];
       $count = preg_match('/.*\[(\d*).*\]$/', $entry, $matches);
       $nid = $count ? $matches[1] : 0;

-      variable_set(G2\VARWOTDENTRY, $nid);
-      variable_set(G2\VARWOTDBODYSIZE, $edit[G2\VARWOTDBODYSIZE]);
-      variable_set(G2\VARWOTDAUTOCHANGE, $edit[G2\VARWOTDAUTOCHANGE]);
-      variable_set(G2\VARWOTDDATE, REQUEST_TIME);
-      variable_set(G2\VARWOTDTERMS, $edit[G2\VARWOTDTERMS]);
-      variable_set(G2\VARWOTDFEEDLINK, $edit[G2\VARWOTDFEEDLINK]);
-      variable_set(G2\VARWOTDFEEDTITLE, $edit[G2\VARWOTDFEEDTITLE]);
-      variable_set(G2\VARWOTDFEEDDESCR, $edit[G2\VARWOTDFEEDDESCR]);
-      variable_set(G2\VARWOTDFEEDAUTHOR, $edit[G2\VARWOTDFEEDAUTHOR]);
-      variable_set(G2\VARWOTDTITLE, $edit[G2\VARWOTDTITLE]);
+      variable_set(VARWOTDENTRY, $nid);
+      variable_set(VARWOTDBODYSIZE, $edit[VARWOTDBODYSIZE]);
+      variable_set(VARWOTDAUTOCHANGE, $edit[VARWOTDAUTOCHANGE]);
+      variable_set(VARWOTDDATE, \Drupal::time()->getRequestTime());
+      variable_set(VARWOTDTERMS, $edit[VARWOTDTERMS]);
+      variable_set(VARWOTDFEEDLINK, $edit[VARWOTDFEEDLINK]);
+      variable_set(VARWOTDFEEDTITLE, $edit[VARWOTDFEEDTITLE]);
+      variable_set(VARWOTDFEEDDESCR, $edit[VARWOTDFEEDDESCR]);
+      variable_set(VARWOTDFEEDAUTHOR, $edit[VARWOTDFEEDAUTHOR]);
+      variable_set(VARWOTDTITLE, $edit[VARWOTDTITLE]);
       break;

     default:
@@ @@
 function Zg2_block_view($delta) {
   // watchdog('g2', "hook_block/view/$delta");
   switch ($delta) {
-    case G2\DELTARANDOM:
+    case DELTARANDOM:
       $block['subject'] = t('Random G2 glossary entry');
-      $block['content'] = theme('g2_random', ['node' => G2\random()]);
+      $block['content'] = theme('g2_random', ['node' => random()]);
       break;

-    case G2\DELTATOP:
-      $max = variable_get(G2\VARTOPITEMCOUNT, G2\DEFTOPITEMCOUNT);
+    case DELTATOP:
+      $max = variable_get(VARTOPITEMCOUNT, DEFTOPITEMCOUNT);
       $block['subject'] = t(
         '@count most popular G2 glossary entries',
         ['@count' => $max]
@@ @@
       $block['content'] = theme('g2_node_list', ['nodes' => G2\top($max, FALSE, TRUE)]);
       break;

-    case G2\DELTAWOTD:
-      $block['subject'] = variable_get(G2\VARWOTDTITLE, t('Word of the day in the G2 glossary'));
-      $block['content'] = theme('g2_wotd', ['node' => G2\wotd(variable_get(G2\VARWOTDBODYSIZE, G2\DEFWOTDBODYSIZE))]);
+    case DELTAWOTD:
+      $block['subject'] = variable_get(VARWOTDTITLE, t('Word of the day in the G2 glossary'));
+      $block['content'] = theme('g2_wotd', ['node' => wotd(variable_get(VARWOTDBODYSIZE, DEFWOTDBODYSIZE))]);
       break;

     // Should happen only when using a new code version on an older schema
@@ @@
  * which is the default case.
  */
 function Zg2_cron() {
-  if (variable_get(G2\VARWOTDAUTOCHANGE, G2\DEFWOTDAUTOCHANGE)) {
-    $date0 = date('z', variable_get(G2\VARWOTDDATE, REQUEST_TIME));
+  if (variable_get(VARWOTDAUTOCHANGE, DEFWOTDAUTOCHANGE)) {
+    $date0 = date('z', variable_get(VARWOTDDATE, \Drupal::time()->getRequestTime()));
     $date1 = date('z');
     if ($date1 <> $date0) {
-      $random = G2\random();
+      $random = random();
       // watchdog("g2_cron", "d0 = $date0, d1 = $date1, random : "
       // . print_r($random,TRUE) . "</pre>", NULL, WATCHDOG_INFO);
-      variable_set(G2\VARWOTDENTRY, $random->nid);
-      variable_set(G2\VARWOTDDATE, mktime());
+      variable_set(VARWOTDENTRY, $random->nid);
+      variable_set(VARWOTDDATE, mktime());
     }
   }
 }
@@ @@
   if ($module == 'context' && $api == 'context') {
     $ret = [
       'version' => 3,
-      'path' => drupal_get_path('module', 'g2') . '/context',
+      'path' => \Drupal::service('extension.list.module')->getPath('g2') . '/context',
       // Not until http://drupal.org/node/1242632 is fixed
       // 'file' => 'g2.context_defaults.inc',
     ];
@@ @@
  */
 function Zg2_delete($node) {
   // dsm($node, __FUNCTION__);
-  db_delete('g2_node')
+  \Drupal::database()->delete('g2_node')
     ->condition('nid', $node->nid)
     ->execute();
 }
@@ @@
     'weight' => 99,
   ];

-  $extra['node'][G2\NODETYPE] = [
+  $extra['node'][NODETYPE] = [
     'form' => [
       'expansion' => $expansion,
       'period' => $period,
@@ @@
     $node->title = check_plain(
       drupal_substr(
         $_GET['q'],
-        drupal_strlen(G2\PATHNODEADD) + 1
+        drupal_strlen(PATHNODEADD) + 1
       )
     );
   }
@@ @@
     '#weight' => -5,
     '#access' => $admin,
     '#attached' => [
-      'js' => [drupal_get_path('module', 'g2') . '/g2.js'],
+      'js' => [\Drupal::service('extension.list.module')->getPath('g2') . '/g2.js'],
     ],
   ];
   $form['publishing']['complement'] = [
@@ @@
  * XXX New feature to add: make extra node info revision-aware.
  */
 function Zg2_load($nodes) {
-  $q = db_select('g2_node', 'gn');
+  $q = \Drupal::database()->select('g2_node', 'gn');
   $result = $q->fields('gn')
     ->condition('gn.nid', array_keys($nodes), 'IN')
     ->execute();
@@ @@
 function Zg2_menu() {
   $items = [];

-  $items[G2\PATHSETTINGS] = [
+  $items[PATHSETTINGS] = [
     'title' => 'G2 glossary',
     'description' => 'Define the various parameters used by the G2 module',
     'page callback' => 'drupal_get_form',
@@ @@
   ];

   // AJAX autocomplete callback, so no menu entry.
-  $items[G2\PATHAUTOCOMPLETE] = [
+  $items[PATHAUTOCOMPLETE] = [
     'page callback' => 'G2\autocomplete',
-    'access arguments' => [G2\PERMVIEW],
+    'access arguments' => [PERMVIEW],
     'type' => MENU_CALLBACK,
   ];

-  $items[G2\PATHWOTDFEED] = [
-    'title' => G2\TITLEWOTDFEED,
+  $items[PATHWOTDFEED] = [
+    'title' => TITLEWOTDFEED,
     'page callback' => 'G2\wotd_feed',
-    'access arguments' => [G2\PERMVIEW],
+    'access arguments' => [PERMVIEW],
     'type' => MENU_CALLBACK,
   ];

@@ @@
   $items['g2/wipe'] = [
     'page callback' => 'drupal_get_form',
     'page arguments' => ['G2\referer_wipe_confirm_form'],
-    'access arguments' => [G2\PERMADMIN],
+    'access arguments' => [PERMADMIN],
     'type' => MENU_CALLBACK,
   ];

@@ @@
   $items['g2/wipe/%g2_nid'] = [
     'page callback' => 'drupal_get_form',
     'page arguments' => ['G2\referer_wipe_confirm_form', 2],
-    'access arguments' => [G2\PERMADMIN],
+    'access arguments' => [PERMADMIN],
     'type' => MENU_CALLBACK,
   ];

@@ @@
     'title' => 'Referers',
     'page callback' => 'drupal_get_form',
     'page arguments' => ['G2\referer_links', 1],
-    'access arguments' => [G2\PERMADMIN],
+    'access arguments' => [PERMADMIN],
     'type' => MENU_LOCAL_TASK,
     'weight' => 2,
   ];
@@ @@
  *   - FALSE otherwise
  */
 function Zg2_nid_load($us_nid = 0) {
-  $node = node_load($us_nid);
-  if ($node->type != G2\NODETYPE) {
+  $node = \Drupal::service('entity_type.manager')->getStorage('node')->load($us_nid);
+  if ($node->type != NODETYPE) {
     $node = NULL;
   }
   return $node;
@@ @@
     case 'create':
     case 'delete':
     case 'update':
-      $ret = user_access(G2\PERMADMIN, $account);
+      $ret = user_access(PERMADMIN, $account);
       break;

     case 'view':
-      $ret = user_access(G2\PERMVIEW, $account);
+      $ret = user_access(PERMVIEW, $account);
       break;

     default:
@@ @@
  */
 function Zg2_node_info() {
   $ret = [
-    G2\NODETYPE => [
+    NODETYPE => [
       'name' => t('G2 entry'),
       'base' => 'g2',
       'description' => t(
@@ @@
  * - Do not apply to non-WOTD feeds.
  */
 function Zg2_node_view($node, $view_mode, $langcode) {
-  if ($view_mode == 'rss' && $node->type == G2\NODETYPE && ($_GET['q'] == G2\PATHWOTDFEED)) {
-    $node->created = variable_get(G2\VARWOTDDATE, REQUEST_TIME);
+  if ($view_mode == 'rss' && $node->type == NODETYPE && ($_GET['q'] == PATHWOTDFEED)) {
+    $node->created = variable_get(VARWOTDDATE, \Drupal::time()->getRequestTime());
     $node->name = filter_xss_admin(
       strtr(
-        variable_get(G2\VARWOTDFEEDAUTHOR, '@author'),
+        variable_get(VARWOTDFEEDAUTHOR, '@author'),
         ['@author' => check_plain($node->name)]
       )
     );
@@ @@
  */
 function Zg2_permission() {
   $ret = [
-    G2\PERMADMIN => [
+    PERMADMIN => [
       'title' => t('Administer G2 entries'),
       'description' => t(
         'Access administrative information on G2 entries. This permission does not grant access to the module settings, which are controlled by the "administer site configuration" permission.'
@@ @@
       ),
       'restrict access' => TRUE,
     ],
-    G2\PERMVIEW => [
+    PERMVIEW => [
       'title' => t('View G2 entries'),
       'description' => t('This permission allows viewing G2 entries, subject to additional node access control.'),
     ],
@@ @@
  * Implements hook_user_load().
  */
 function Zg2_user_load($users) {
-  $q = db_select('node', 'n');
+  $q = \Drupal::database()->select('node', 'n');
   $result = $q->fields('n', ['nid', 'title', 'uid', 'type'])
-    ->condition('n.type', G2\NODETYPE)
+    ->condition('n.type', NODETYPE)
     ->condition('n.status', 1)
     ->condition('n.uid', array_keys($users), 'IN')
     ->orderBy('n.changed', 'DESC')
@@ @@

   if (node_is_page($node)) {
     $bc = drupal_get_breadcrumb();
-    $bc[] = l(G2\TITLEMAIN, $g2_home = variable_get(G2\VARPATHMAIN, G2\DEFPATHMAIN));
+    $bc[] = l(TITLEMAIN, $g2_home = variable_get(VARPATHMAIN, DEFPATHMAIN));
     $initial = drupal_substr($title, 0, 1);
     $bc[] = l($title[0], $g2_home . '/initial/' . $initial);
     unset($initial);
     drupal_set_breadcrumb($bc);
-    G2\override_site_name();
+    override_site_name();

     // Only log referrers on full page views.
-    if (variable_get(G2\VARLOGREFERRERS, G2\DEFLOGREFERRERS)) {
-      G2\log_referrers($node);
+    if (variable_get(VARLOGREFERRERS, DEFLOGREFERRERS)) {
+      log_referrers($node);
     }

     // Activate context.
@@ @@
   // The following line adds invisible text that will be prepended to
   // the node in case some search routine favors the beginning of the
   // body. It can be turned off in case search engines frown upon this.
-  if (variable_get(G2\VARHIDDENTITLE, G2\DEFHIDDENTITLE)) {
+  if (variable_get(VARHIDDENTITLE, DEFHIDDENTITLE)) {
     $node->content['g2_extra_title'] = [
       '#markup' => '<div class="g2-extra-title">'
         . check_plain($node->title)
@@ @@
 function Zg2_views_api() {
   return [
     'api' => '3.0',
-    'path' => drupal_get_path('module', 'g2') . '/views',
+    'path' => \Drupal::service('extension.list.module')->getPath('g2') . '/views',
   ];
 }

@@ @@
       'title' => t('&nbsp;(+)'),
     ]
   );
-  if (variable_get(G2\VARWOTDFEEDLINK, G2\DEFWOTDFEEDLINK)) {
+  if (variable_get(VARWOTDFEEDLINK, DEFWOTDFEEDLINK)) {
     $ret .= theme(
       'feed_icon',
       [
-        'url' => url(G2\PATHWOTDFEED, ['absolute' => TRUE]),
+        'url' => url(PATHWOTDFEED, ['absolute' => TRUE]),
         // TODO: find a better title.
         'title' => t('Glossary feed'),
       ]
    ----------- end diff -----------

Applied rules:
 * DBDeleteRector
 * DBQueryRector
 * DBSelectRector
 * DrupalGetPathRector
 * DrupalSetMessageRector
 * NodeLoadRector
 * RequestTimeConstRector
 * UnicodeSubstrRector
 * ArgumentRemoverRector


6) modules/contrib/g2/g2.install.php:130

    ---------- begin diff ----------
@@ @@
   OR v.name LIKE 'g2/%%'
 SQL;

-  $result = db_query($sql);
+  $result = \Drupal::database()->query($sql);

   $count = 0;
   while (is_object($row = db_fetch_object($result))) {
@@ @@
   else {
     $message = t('No obsolete variable to clean.');
   }
+  // @noRector
   drupal_set_message($message, status);

   /* Convert Drupal 4.7.x/5.x block deltas
@@ @@
   $sql = "UPDATE {blocks} b SET delta = '%s' WHERE module = '%s' AND delta = %d ";
   $count = 0;
   foreach ($delta_changes as $old => $new) {
-    db_query($sql, $new, 'g2', $old);
+    \Drupal::database()->query($sql, $new, 'g2', $old);
     $count += db_affected_rows();
   }

@@ @@
     $message = t('No obsolete delta to convert.');
   }

-  drupal_set_message($message, 'status');
+  \Drupal::messenger()->addStatus($message);
   return array();
 }

@@ @@
   else {
     $message = t('No old token to convert for the WOTD feed settings.');
   }
-  drupal_set_message($message, 'status');
+  \Drupal::messenger()->addStatus($message);
   return array();
 }

@@ @@
   else {
     $message = t('g2_referer table was there. No need to recreate it.');
   }
-  drupal_set_message($message, 'status');
+  \Drupal::messenger()->addStatus($message);
   return $ret;
 }
    ----------- end diff -----------

Applied rules:
 * DBQueryRector
 * DrupalSetMessageRector
 * ArgumentRemoverRector


 [OK] 6 files have been changed by Rector                                       

