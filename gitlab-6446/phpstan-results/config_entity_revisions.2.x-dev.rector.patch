diff --git a/modules/views_revisions/src/ProxyClass/ParamConverter/ViewsRevisionsConverter.php b/modules/views_revisions/src/ProxyClass/ParamConverter/ViewsRevisionsConverter.php
index 676fbbe..e7412f7 100644
--- a/modules/views_revisions/src/ProxyClass/ParamConverter/ViewsRevisionsConverter.php
+++ b/modules/views_revisions/src/ProxyClass/ParamConverter/ViewsRevisionsConverter.php
@@ -7,15 +7,19 @@
 
 namespace Drupal\views_revisions\ProxyClass\ParamConverter {
 
+    use Drupal\Core\ParamConverter\ParamConverterInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
+    use Symfony\Component\Routing\Route;
     /**
      * Provides a proxy class for \Drupal\views_revisions\ParamConverter\ViewsRevisionsConverter.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class ViewsRevisionsConverter implements \Drupal\Core\ParamConverter\ParamConverterInterface
+    class ViewsRevisionsConverter implements ParamConverterInterface
     {
 
-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;
 
         /**
          * The id of the original proxied service.
@@ -46,7 +50,7 @@ namespace Drupal\views_revisions\ProxyClass\ParamConverter {
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
@@ -78,7 +82,7 @@ namespace Drupal\views_revisions\ProxyClass\ParamConverter {
         /**
          * {@inheritdoc}
          */
-        public function applies($definition, $name, \Symfony\Component\Routing\Route $route)
+        public function applies($definition, $name, Route $route)
         {
             return $this->lazyLoadItself()->applies($definition, $name, $route);
         }
diff --git a/modules/views_revisions/views_revisions.module b/modules/views_revisions/views_revisions.module
index 4cfb368..329e659 100644
--- a/modules/views_revisions/views_revisions.module
+++ b/modules/views_revisions/views_revisions.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\views_revisions\ViewsRevisionFields;
 use Drupal\views_revisions\Controller\ViewsRevisionsController;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
@@ -123,7 +125,7 @@ function views_revisions_view_delete(ViewsRevisions $view) {
 /**
  * Implements hook_menu_local_tasks_alter().
  */
-function views_revisions_menu_local_tasks_alter(&$data, $route_name, \Drupal\Core\Cache\RefinableCacheableDependencyInterface &$cacheability) {
+function views_revisions_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
   if (strpos($route_name, 'entity.view') === 0) {
     foreach ($data['tabs'] as $tab_level) {
       foreach ($tab_level as $tab) {
@@ -161,7 +163,7 @@ function views_revisions_entity_type_alter(&$entity_types) {
 /**
  * Implements hook_entity_operation_alter().
  */
-function views_revisions_entity_operation_alter(array &$operations, \Drupal\Core\Entity\EntityInterface $entity) {
+function views_revisions_entity_operation_alter(array &$operations, EntityInterface $entity) {
   if ($entity->access('revisions') && $entity->hasLinkTemplate('revisions')) {
     $operations['revisions'] = [
       'title' => t('Revisions'),
diff --git a/modules/webform_revisions/webform_revisions.module b/modules/webform_revisions/webform_revisions.module
index 0f4d3c5..c73bcc1 100644
--- a/modules/webform_revisions/webform_revisions.module
+++ b/modules/webform_revisions/webform_revisions.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\config_entity_revisions\ConfigEntityRevisionsControllerInterface;
 use Drupal\config_entity_revisions\ConfigEntityRevisionsInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
@@ -136,7 +138,7 @@ function webform_revisions_webform_delete(WebformRevisions $webform) {
 /**
  * Implements hook_menu_local_tasks_alter().
  */
-function webform_revisions_menu_local_tasks_alter(&$data, $route_name, \Drupal\Core\Cache\RefinableCacheableDependencyInterface &$cacheability) {
+function webform_revisions_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
   // ISSUE:
   // Devel routes do not use 'webform' parameter which throws the error below.
   // Some mandatory parameters are missing ("webform") to generate a URL for
@@ -184,14 +186,14 @@ function webform_revisions_menu_local_tasks_alter(&$data, $route_name, \Drupal\C
  *
  * @ingroup form_api
  */
-function webform_revisions_webform_submission_form_alter(array &$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function webform_revisions_webform_submission_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
   WebformRevisionsController::submission_form_alter($form, $form_state, $form_id);
 }
 
 /**
  * Implements hook_entity_base_field_info_alter().
  */
-function webform_revisions_entity_base_field_info_alter(&$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type) {
+function webform_revisions_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
   if ($entity_type->id() == 'webform_submission') {
     $fields['webform_revision'] = BaseFieldDefinition::create('entity_reference')
       ->setLabel('Webform revision')
diff --git a/tests/src/Unit/ConfigEntityRevisionsRevertFormBaseTest.php b/tests/src/Unit/ConfigEntityRevisionsRevertFormBaseTest.php
index 26185a6..7c42dc4 100644
--- a/tests/src/Unit/ConfigEntityRevisionsRevertFormBaseTest.php
+++ b/tests/src/Unit/ConfigEntityRevisionsRevertFormBaseTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\config_entity_revisions\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\config_entity_revisions\ConfigEntityRevisionsRevertFormBase;
 use Drupal\Core\Form\FormState;
 use Drupal\Tests\UnitTestCase;
@@ -32,6 +33,7 @@ use Prophecy\Argument;
  */
 class ConfigEntityRevisionsRevertFormBaseTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @var Container
    */
@@ -70,7 +72,7 @@ class ConfigEntityRevisionsRevertFormBaseTest extends UnitTestCase {
   /**
    * Set up for a test.
    */
-  public function setup() {
+  public function setup(): void {
 
     $entityTypeManager = $this->prophesize(EntityTypeManager::CLASS);
 
diff --git a/tests/src/Unit/ConfigEntityRevisionsTraitTest.php b/tests/src/Unit/ConfigEntityRevisionsTraitTest.php
index 96c389a..e7eea3d 100644
--- a/tests/src/Unit/ConfigEntityRevisionsTraitTest.php
+++ b/tests/src/Unit/ConfigEntityRevisionsTraitTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\config_entity_revisions\Unit;
 
+use Drupal\config_entity_revisions\ConfigEntityRevisionsConfigTrait;
 use Drupal\Tests\UnitTestCase;
 
 /**
@@ -25,5 +26,5 @@ class ConfigEntityRevisionsTraitTest extends UnitTestCase {
 }
 
 class TraitTest {
-  use \Drupal\config_entity_revisions\ConfigEntityRevisionsConfigTrait;
+  use ConfigEntityRevisionsConfigTrait;
 }
