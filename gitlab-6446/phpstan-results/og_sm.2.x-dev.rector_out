modules/contrib/og_sm/og_sm.admin.inc
modules/contrib/og_sm/og_sm_admin_menu/src/Controller/SiteAdminController.php
modules/contrib/og_sm/og_sm_config/tests/src/Kernel/ConfigTest.php
modules/contrib/og_sm/og_sm_context/src/Plugin/OgGroupResolver/GroupPathGroupResolver.php
modules/contrib/og_sm/og_sm_menu/src/Controller/SiteMenuController.php
modules/contrib/og_sm/og_sm_path/src/EventSubscriber/EventSubscriber.php
modules/contrib/og_sm/og_sm_routing/src/Plugin/OgGroupResolver/SiteRouteGroupResolver.php
modules/contrib/og_sm/og_sm_taxonomy/src/FormAlter/TermOverviewFormAlter.php
modules/contrib/og_sm/src/Plugin/views/filter/ManageableSitesByCurrentUser.php
modules/contrib/og_sm/og_sm.api.php
modules/contrib/og_sm/og_sm.module
modules/contrib/og_sm/og_sm_path/src/EventSubscriber/SiteSubscriber.php
modules/contrib/og_sm/og_sm_routing/src/SiteRoutesSubscriberBase.php
modules/contrib/og_sm/og_sm_routing/tests/modules/og_sm_routing_test/src/Controller/PublishedController.php
modules/contrib/og_sm/og_sm_menu/src/EventSubscriber/GroupPermissionEventSubscriber.php
modules/contrib/og_sm/og_sm_routing/tests/modules/og_sm_routing_test/src/EventSubscriber/SiteRoutesSubscriber.php
modules/contrib/og_sm/og_sm_context/src/Plugin/OgGroupResolver/NodeGroupResolver.php
modules/contrib/og_sm/og_sm_admin_menu/src/Controller/ToolbarController.php
modules/contrib/og_sm/og_sm_path/src/EventSubscriber/SiteTypeSubscriber.php
modules/contrib/og_sm/og_sm_menu/src/Form/SiteMenuForm.php
modules/contrib/og_sm/og_sm_routing/tests/modules/og_sm_routing_test/src/EventSubscriber/SiteSubscriber.php
modules/contrib/og_sm/og_sm_admin_menu/src/EventSubscriber/GroupPermissionEventSubscriber.php
modules/contrib/og_sm/og_sm.views.inc
modules/contrib/og_sm/og_sm_context/src/Plugin/OgGroupResolver/OgSmGroupResolverBase.php
modules/contrib/og_sm/og_sm_admin_menu/src/Render/Element/SiteManagerAdminToolbar.php
modules/contrib/og_sm/og_sm_admin_menu/og_sm_admin_menu.module
modules/contrib/og_sm/og_sm_context/src/Plugin/OgGroupResolver/QueryParamGroupResolver.php
modules/contrib/og_sm/og_sm_routing/tests/src/Kernel/SiteRoutingTest.php
modules/contrib/og_sm/src/Plugin/views/filter/SitesFilter.php
modules/contrib/og_sm/og_sm_path/src/OgSmPath.php
modules/contrib/og_sm/og_sm_taxonomy/src/Plugin/OgGroupResolver/TaxonomyGroupResolver.php
modules/contrib/og_sm/og_sm_admin_menu/src/Routing/RouteSubscriber.php
modules/contrib/og_sm/og_sm_menu/src/Form/SiteMenuLinkEditForm.php
modules/contrib/og_sm/og_sm_context/tests/src/Unit/GroupPathGroupResolverTest.php
modules/contrib/og_sm/og_sm_path/src/PathProcessor/SitePathProcessor.php
modules/contrib/og_sm/og_sm_admin_menu/tests/src/Functional/AdminMenuTest.php
modules/contrib/og_sm/og_sm_admin_menu/og_sm_admin_menu.og_sm.inc
modules/contrib/og_sm/og_sm_taxonomy/src/SiteTaxonomyManager.php
modules/contrib/og_sm/og_sm_menu/src/Routing/RouteSubscriber.php
modules/contrib/og_sm/src/ProxyClass/ParamConverter/SiteConverter.php
modules/contrib/og_sm/og_sm_context/tests/src/Unit/NodeGroupResolverTest.php
modules/contrib/og_sm/og_sm_menu/src/SiteMenuManager.php
modules/contrib/og_sm/src/SiteManager.php
modules/contrib/og_sm/og_sm_context/tests/src/Unit/OgSmGroupResolverTestBase.php
modules/contrib/og_sm/og_sm_menu/src/SiteMenuManagerInterface.php
modules/contrib/og_sm/og_sm_menu/tests/src/Kernel/SiteMenuManagerTest.php
modules/contrib/og_sm/og_sm_taxonomy/src/SiteTaxonomyManagerInterface.php
modules/contrib/og_sm/og_sm_path/src/Plugin/OgGroupResolver/PathGroupResolver.php
modules/contrib/og_sm/src/Access/SitePermissionAccessCheck.php
modules/contrib/og_sm/og_sm_routing/tests/src/Unit/SiteRouteGroupResolverTest.php
modules/contrib/og_sm/og_sm_content/og_sm_content.module
modules/contrib/og_sm/src/Event/SiteEvent.php
modules/contrib/og_sm/og_sm_path/src/SitePathManager.php
modules/contrib/og_sm/src/Event/SiteEvents.php
modules/contrib/og_sm/src/Event/SiteTypeEvent.php
modules/contrib/og_sm/src/Event/SiteTypeEvents.php
modules/contrib/og_sm/src/EventManager.php
modules/contrib/og_sm/og_sm_taxonomy/og_sm_taxonomy.module
modules/contrib/og_sm/src/EventManagerInterface.php
modules/contrib/og_sm/src/EventSubscriber/GroupPermissionEventSubscriber.php
modules/contrib/og_sm/og_sm_context/tests/src/Unit/QueryParamGroupResolverTest.php
modules/contrib/og_sm/src/OgSm.php
modules/contrib/og_sm/src/OgSmServiceProvider.php
modules/contrib/og_sm/og_sm_context/tests/src/Unit/RouteTrait.php
modules/contrib/og_sm/src/SiteManagerInterface.php
modules/contrib/og_sm/og_sm_menu/og_sm_menu.install
modules/contrib/og_sm/src/SiteTypeManager.php
modules/contrib/og_sm/og_sm_path/og_sm_path.admin.inc
modules/contrib/og_sm/src/ParamConverter/SiteConverter.php
modules/contrib/og_sm/og_sm_taxonomy/src/Access/SiteVocabularyAccessCheck.php
modules/contrib/og_sm/og_sm_config/src/Config/SiteConfigCollectionNameTrait.php
modules/contrib/og_sm/og_sm_content/og_sm_content.og_sm.inc
modules/contrib/og_sm/src/Plugin/Derivative/SiteMenuLink.php
modules/contrib/og_sm/og_sm_menu/og_sm_menu.module
modules/contrib/og_sm/og_sm_content/src/Access/SiteContentAddAccessCheck.php
modules/contrib/og_sm/og_sm_config/src/Config/SiteConfigFactoryOverride.php
modules/contrib/og_sm/og_sm_taxonomy/src/Controller/SiteTaxonomyController.php
modules/contrib/og_sm/og_sm_content/src/Controller/SiteContentController.php
modules/contrib/og_sm/og_sm_path/src/SitePathManagerInterface.php
modules/contrib/og_sm/og_sm_path/src/UserToolbarLinkBuilder.php
modules/contrib/og_sm/src/SiteTypeManagerInterface.php
modules/contrib/og_sm/src/Tests/SiteCreationTrait.php
modules/contrib/og_sm/og_sm_path/tests/src/Functional/SitePathFormTest.php
modules/contrib/og_sm/src/Plugin/EntityReferenceSelection/DefaultSelection.php
modules/contrib/og_sm/src/Plugin/EntityReferenceSelection/SiteManagerTrait.php
modules/contrib/og_sm/og_sm_path/og_sm_path.batch.inc
modules/contrib/og_sm/src/Plugin/Menu/SiteMenuLink.php
modules/contrib/og_sm/og_sm_taxonomy/src/EventSubscriber/SiteEventSubscriber.php
modules/contrib/og_sm/og_sm_content/src/EventSubscriber/GroupPermissionEventSubscriber.php
modules/contrib/og_sm/og_sm_taxonomy/src/Form/TermDeleteForm.php
modules/contrib/og_sm/og_sm_content/src/NodeListBuilder.php
modules/contrib/og_sm/og_sm_config/src/Config/SiteConfigFactoryOverrideInterface.php
modules/contrib/og_sm/og_sm_config/src/Config/SiteConfigOverride.php
modules/contrib/og_sm/src/Plugin/views/argument_validator/Site.php
modules/contrib/og_sm/og_sm_taxonomy/src/Form/VocabularyResetForm.php
modules/contrib/og_sm/og_sm_content/src/OgSmContentServiceProvider.php
modules/contrib/og_sm/og_sm_path/og_sm_path.module
modules/contrib/og_sm/og_sm_config/src/Form/SiteConfigFormBase.php
modules/contrib/og_sm/og_sm_content/src/PathProcessor/SiteContentPathProcessor.php
modules/contrib/og_sm/og_sm_path/og_sm_path.tokens.inc
modules/contrib/og_sm/og_sm_config/src/OgSmConfig.php
modules/contrib/og_sm/og_sm_config/tests/modules/og_sm_config_test/src/Form/BasicForm.php
modules/contrib/og_sm/og_sm_content/src/Plugin/EntityReferenceSelection/NodeSelection.php
modules/contrib/og_sm/src/Theme/AdminNegotiator.php
modules/contrib/og_sm/og_sm_path/src/Event/AjaxPathEvent.php
modules/contrib/og_sm/og_sm_content/tests/src/Functional/SiteContentTest.php
modules/contrib/og_sm/og_sm_path/src/Event/AjaxPathEvents.php
modules/contrib/og_sm/og_sm_path/src/Event/SitePathEvent.php
modules/contrib/og_sm/og_sm_path/src/Event/SitePathEvents.php
modules/contrib/og_sm/og_sm_config/tests/src/Kernel/ConfigDefaultsTest.php
modules/contrib/og_sm/og_sm_path/tests/src/Kernel/ChangeAccessTest.php
modules/contrib/og_sm/tests/modules/og_sm_test/og_sm_test.module
modules/contrib/og_sm/tests/modules/og_sm_test/og_sm_test.og_sm.inc
modules/contrib/og_sm/tests/src/Functional/NodeTypeTest.php
modules/contrib/og_sm/og_sm_path/tests/src/Kernel/PathTokensTest.php
modules/contrib/og_sm/og_sm_path/tests/src/Kernel/SitePathTest.php
modules/contrib/og_sm/tests/src/Functional/OgSmWebTestBase.php
modules/contrib/og_sm/tests/src/Kernel/NodeTypeTest.php
modules/contrib/og_sm/og_sm_path/tests/src/Unit/PathGroupResolverTest.php
modules/contrib/og_sm/tests/src/Kernel/OgSmKernelTestBase.php
modules/contrib/og_sm/tests/src/Kernel/SiteApiTest.php
modules/contrib/og_sm/og_sm_path/tests/src/Unit/SitePathProcessorTest.php
modules/contrib/og_sm/og_sm_content/tests/src/Unit/SiteContentPathProcessorTest.php
modules/contrib/og_sm/og_sm_routing/src/Event/SiteRoutingEvent.php
modules/contrib/og_sm/og_sm_routing/src/Event/SiteRoutingEvents.php
modules/contrib/og_sm/og_sm_routing/src/EventSubscriber/SiteRoutes.php
modules/contrib/og_sm/tests/src/Kernel/SiteContentTest.php
modules/contrib/og_sm/tests/src/Kernel/SiteUserTest.php

24 files with changes
=====================

1) modules/contrib/og_sm/og_sm.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\node\NodeInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 /**
  * @file
  * API documentation about the og_sm module.
@@ @@
  *
  * @see hook_node_view()
  */
-function hook_og_sm_site_view(array &$build, \Drupal\node\NodeInterface $site, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
+function hook_og_sm_site_view(array &$build, NodeInterface $site, EntityViewDisplayInterface $display, $view_mode) {

 }

@@ @@
  * @param array $route_parameters
  *   The route parameters.
  */
-function hook_og_sm_site_homepage_alter(\Drupal\node\NodeInterface $site, &$route_name, array &$route_parameters) {
+function hook_og_sm_site_homepage_alter(NodeInterface $site, &$route_name, array &$route_parameters) {
   $route_name = 'og_sm.site.dashboard';
 }
    ----------- end diff -----------

2) modules/contrib/og_sm/og_sm_context/tests/src/Unit/QueryParamGroupResolverTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og_sm_context\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\og_sm_context\Plugin\OgGroupResolver\QueryParamGroupResolver;
 use Symfony\Component\HttpFoundation\ParameterBag;
 use Symfony\Component\HttpFoundation\Request;
@@ @@
  */
 class QueryParamGroupResolverTest extends OgSmGroupResolverTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/og_sm/og_sm_context/tests/src/Unit/OgSmGroupResolverTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og_sm_context\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\node\NodeInterface;
 use Drupal\og\OgResolvedGroupCollectionInterface;
 use Drupal\og_sm\SiteManager;
@@ @@
  */
 abstract class OgSmGroupResolverTestBase extends OgGroupResolverTestBase {

+  use ProphecyTrait;
   /**
    * The mocked site manager.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/og_sm/og_sm_context/tests/src/Unit/NodeGroupResolverTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og_sm_context\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\og_sm_context\Plugin\OgGroupResolver\NodeGroupResolver;
@@ @@
  */
 class NodeGroupResolverTest extends OgSmGroupResolverTestBase {

+  use ProphecyTrait;
   use RouteTrait;

   /**
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/og_sm/og_sm_context/tests/src/Unit/GroupPathGroupResolverTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og_sm_context\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\og_sm_context\Plugin\OgGroupResolver\GroupPathGroupResolver;

@@ @@
  */
 class GroupPathGroupResolverTest extends OgSmGroupResolverTestBase {

+  use ProphecyTrait;
   use RouteTrait;

   /**
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/og_sm/og_sm_routing/tests/src/Unit/SiteRouteGroupResolverTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og_sm_routing\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\og_sm_routing\Plugin\OgGroupResolver\SiteRouteGroupResolver;
 use Drupal\Tests\og_sm_context\Unit\OgSmGroupResolverTestBase;
@@ @@
  */
 class SiteRouteGroupResolverTest extends OgSmGroupResolverTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/og_sm/og_sm_routing/tests/src/Kernel/SiteRoutingTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('node', ['node_access']);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/og_sm/og_sm_path/og_sm_path.batch.inc:17

    ---------- begin diff ----------
@@ @@
  *   The Site to create the batch for.
  */
 function og_sm_path_site_alias_update_batch(NodeInterface $site) {
-  $file = drupal_get_path('module', 'og_sm_path') . '/og_sm_path.batch.inc';
+  $file = \Drupal::service('extension.list.module')->getPath('og_sm_path') . '/og_sm_path.batch.inc';

   $batch = [
     'title' => t('Update Site content aliases'),
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


9) modules/contrib/og_sm/og_sm_menu/tests/src/Kernel/SiteMenuManagerTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installConfig(['og_menu', 'og_sm_menu']);
     $this->installEntitySchema('ogmenu');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/og_sm/og_sm_config/tests/src/Kernel/ConfigDefaultsTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installConfig(['og_sm_config_test']);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/og_sm/og_sm_content/tests/src/Unit/SiteContentPathProcessorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og_sm_content\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\node\NodeInterface;
 use Drupal\og_sm\SiteManagerInterface;
@@ @@
  */
 class SiteContentPathProcessorTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The mocked request stack.
    *
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     /** @var \Drupal\og_sm_path\SitePathManagerInterface $site_path_manager */
     $site_path_manager = $this->prophesize(SitePathManagerInterface::class);
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/og_sm/og_sm_content/tests/src/Functional/SiteContentTest.php:71

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create Sites.
@@ @@

     // Login as admin.
     $this->drupalLogin($this->userAdministrator);
+    $this->drupalGet($site2_path . '/content/add');
     // Create a node as admin on site 2.
-    $this->drupalPostForm($site2_path . '/content/add', [
+    $this->submitForm([
       'title[0][value]' => 'test site 2 content by admin',
     ], 'Save');
     $site2_node = $this->getNodeByTitle('test site 2 content by admin');
     // Verify that the newly created node is linked to site 2.
     $this->assertEquals($this->site2->id(), $site_manager->getSiteFromEntity($site2_node)->id());
+    $this->drupalGet($site1_path . '/content/add');

-    $this->drupalPostForm($site1_path . '/content/add', [
+    $this->submitForm([
       'title[0][value]' => 'test site 1 content by admin',
     ], 'Save');
     $site1_node = $this->getNodeByTitle('test site 1 content by admin');
@@ @@
     $this->assertSession()->statusCodeEquals(200);
     // Verify that the site manager can access the promote checkbox.
     $this->assertSession()->fieldExists('promote[value]');
+    $this->drupalGet($site1_path . '/content/add');

-    $this->drupalPostForm($site1_path . '/content/add', [
+    $this->submitForm([
       'title[0][value]' => 'test site 1 content by site manager',
     ], 'Save');
     $site1_node2 = $this->getNodeByTitle('test site 1 content by site manager');
@@ @@
     $this->assertSession()->statusCodeEquals(403);
     $this->drupalGet('node/' . $site1_node2->id() . '/edit');
     $this->assertSession()->statusCodeEquals(403);
-    $this->drupalPostForm($site1_path . '/content/add', [
+    $this->drupalGet($site1_path . '/content/add');
+    $this->submitForm([
       'title[0][value]' => 'test site 1 content by site editor',
     ], 'Save');
     $site1_node3 = $this->getNodeByTitle('test site 1 content by site editor');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/og_sm/og_sm_config/tests/src/Kernel/ConfigTest.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->configFactoryOverride = $this->container->get('og_sm.config_factory_override');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/og_sm/og_sm_path/tests/src/Unit/SitePathProcessorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og_sm_path\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Path\PathValidatorInterface;
 use Drupal\Core\Render\BubbleableMetadata;
@@ @@
  */
 class SitePathProcessorTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The mocked request stack.
    *
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->sitePathManager = $this->prophesize(SitePathManagerInterface::class);
     $this->siteManager = $this->prophesize(SiteManagerInterface::class);
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/og_sm/og_sm_path/tests/src/Unit/PathGroupResolverTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\og_sm_path\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\og_sm_path\Plugin\OgGroupResolver\PathGroupResolver;
 use Drupal\og_sm_path\SitePathManagerInterface;
 use Drupal\Tests\og_sm_context\Unit\OgSmGroupResolverTestBase;
@@ @@
  */
 class PathGroupResolverTest extends OgSmGroupResolverTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/og_sm/og_sm_path/tests/src/Kernel/SitePathTest.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $type = $this->createGroupNodeType(OgSmKernelTestBase::TYPE_IS_GROUP);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/og_sm/og_sm_path/tests/src/Kernel/PathTokensTest.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create the Site node.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/og_sm/og_sm_path/tests/src/Kernel/ChangeAccessTest.php:104

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('og_membership');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/og_sm/og_sm_path/tests/src/Functional/SitePathFormTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->userAdministrator = $this->drupalCreateUser([], NULL, TRUE);
@@ @@
       'title[0][value]' => 'Site node test 1',
       'site_path' => '/site-node-test-me',
     ];
-    $this->drupalPostForm('node/add/is_site_type', $edit, 'Save');
+    $this->drupalGet('node/add/is_site_type');
+    $this->submitForm($edit, 'Save');
     $site_node = $this->getNodeByTitle('Site node test 1');
     $this->assertEquals($edit['site_path'], OgSmPath::sitePathManager()->getPathFromSite($site_node), 'Site path is saved as Site variable');

@@ @@
       'title[0][value]' => 'Site node test 2',
       'site_path' => '/site-node-test-me',
     ];
-    $this->drupalPostForm('node/add/is_site_type', $edit, 'Save');
+    $this->drupalGet('node/add/is_site_type');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('The Site path /site-node-test-me is already in use.');

     // Creating a new Site with an invalid path should result in a form error.
@@ @@
       'title[0][value]' => 'Site node test 2',
       'site_path' => '/site path not valid',
     ];
-    $this->drupalPostForm('node/add/is_site_type', $edit, 'Save');
+    $this->drupalGet('node/add/is_site_type');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('The Site path may contain only lowercase letters, numbers and dashes.');
     $edit = [
       'title[0][value]' => 'Site node test 2',
       'site_path' => 'site-path-not-valid',
     ];
-    $this->drupalPostForm('node/add/is_site_type', $edit, 'Save');
+    $this->drupalGet('node/add/is_site_type');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('The alias needs to start with a slash.');

     // The site path should be in the edit form for users with the proper
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/og_sm/tests/src/Kernel/SiteUserTest.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('og_membership');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/og_sm/tests/src/Kernel/SiteApiTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('og_membership');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/og_sm/tests/src/Kernel/OgSmKernelTestBase.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public static function setUpBeforeClass() {
+  public static function setUpBeforeClass(): void {

   }

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installConfig(['field', 'og', 'og_sm']);
     $this->installSchema('system', ['sequences']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/og_sm/tests/src/Functional/NodeTypeTest.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $user = $this->drupalCreateUser(['administer content types']);
@@ @@
     // Check if the Site Manager field is in the form.
     $this->drupalGet($url_not_group);
     $this->assertSession()->fieldExists('edit-og-sm-site-type');
+    $this->drupalGet($url_not_group);

     // Post the form with Site settings enabled for a non Group, this should
     // result in an error on screen.
-    $this->drupalPostForm($url_not_group, ['og_sm_site_type' => TRUE], $submit);
+    $this->submitForm(['og_sm_site_type' => TRUE], $submit);
     $this->assertSession()->pageTextContains(new TranslatableMarkup('A content type can only be a Site if it also a Group type.'));
     $this->assertEquals([], $site_type_manager->getSiteTypes());
+    $this->drupalGet($url_is_group);

     // Post it for a Group node should be successful.
-    $this->drupalPostForm($url_is_group, ['og_sm_site_type' => TRUE], $submit);
+    $this->submitForm(['og_sm_site_type' => TRUE], $submit);
     $this->assertSession()->responseContains(new TranslatableMarkup('The content type %type has been updated.', ['%type' => $type_is_group->label()]));
     $type_is_group = NodeType::load($type_is_group->id());
     $this->assertEquals([$type_is_group->id() => $type_is_group], $site_type_manager->getSiteTypes());
@@ @@
     // Check if the checkbox is active.
     $this->drupalGet($url_is_group);
     $this->assertSession()->fieldExists('edit-og-sm-site-type');
+    $this->drupalGet($url_is_group);

     // Remove a node type from the Site types.
-    $this->drupalPostForm($url_is_group, ['og_sm_site_type' => FALSE], $submit);
+    $this->submitForm(['og_sm_site_type' => FALSE], $submit);
     $this->assertSession()->responseContains(new TranslatableMarkup('The content type %type has been updated.', ['%type' => $type_is_group->label()]));
     $this->assertEquals([], $site_type_manager->getSiteTypes());

@@ @@
     $this->assertEquals([$type_is_group->id() => $type_is_group], $site_type_manager->getSiteTypes());

     $url_delete = 'admin/structure/types/manage/' . $type_is_group->id() . '/delete';
-    $this->drupalPostForm($url_delete, [], new TranslatableMarkup('Delete'));
+    $this->drupalGet($url_delete);
+    $this->submitForm([], new TranslatableMarkup('Delete'));
     $this->assertEquals([], $site_type_manager->getSiteTypes());
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/og_sm/src/ProxyClass/ParamConverter/SiteConverter.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og_sm\ProxyClass\ParamConverter {

+    use Drupal\Core\ParamConverter\ParamConverterInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
+    use Symfony\Component\Routing\Route;
     /**
      * Provides a proxy class for \Drupal\og_sm\ParamConverter\SiteConverter.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class SiteConverter implements \Drupal\Core\ParamConverter\ParamConverterInterface
+    class SiteConverter implements ParamConverterInterface
     {

-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;

         /**
          * The id of the original proxied service.
@@ @@
          *
          * @SuppressWarnings(PHPMD.LongVariable)
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $originalServiceId)
+        public function __construct(ContainerInterface $container, $originalServiceId)
         {
             $this->container = $container;
             $this->originalServiceId = $originalServiceId;
@@ @@
         /**
          * {@inheritdoc}
          */
-        public function applies($definition, $name, \Symfony\Component\Routing\Route $route)
+        public function applies($definition, $name, Route $route)
         {
             return $this->lazyLoadItself()->applies($definition, $name, $route);
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


 [OK] 24 files have been changed by Rector                                      

