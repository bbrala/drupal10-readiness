diff --git a/modules/salesforce_example/src/EventSubscriber/SalesforceExampleSubscriber.php b/modules/salesforce_example/src/EventSubscriber/SalesforceExampleSubscriber.php
index 88752223..c0e60740 100644
--- a/modules/salesforce_example/src/EventSubscriber/SalesforceExampleSubscriber.php
+++ b/modules/salesforce_example/src/EventSubscriber/SalesforceExampleSubscriber.php
@@ -165,7 +165,7 @@ class SalesforceExampleSubscriber implements EventSubscriberInterface {
 
         // Attach the new file id to the user entity.
         /* var \Drupal\file\FileInterface */
-        if ($file = file_save_data($file_data, $destination, FileSystemInterface::EXISTS_REPLACE)) {
+        if ($file = \Drupal::service('file.repository')->writeData($file_data, $destination, FileSystemInterface::EXISTS_REPLACE)) {
           $account->user_picture->target_id = $file->id();
         }
         else {
diff --git a/modules/salesforce_jwt/tests/src/FunctionalJavascript/SalesforceJwtTest.php b/modules/salesforce_jwt/tests/src/FunctionalJavascript/SalesforceJwtTest.php
index da9d5087..93f07095 100644
--- a/modules/salesforce_jwt/tests/src/FunctionalJavascript/SalesforceJwtTest.php
+++ b/modules/salesforce_jwt/tests/src/FunctionalJavascript/SalesforceJwtTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\salesforce_jwt\FunctionalJavascript;
 
+use Drupal\key\Entity\Key;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 
 /**
@@ -59,7 +60,7 @@ class SalesforceJwtTest extends WebDriverTestBase {
     $this->adminUser = $this->drupalCreateUser(['authorize salesforce']);
     $this->drupalLogin($this->adminUser);
     $this->createTestKey(self::KEY_ID, 'authentication', 'file');
-    \Drupal\key\Entity\Key::load(self::KEY_ID)
+    Key::load(self::KEY_ID)
       ->set('key_provider_settings', [
         'file_location' => __DIR__ . '/testKey.pem',
         'strip_line_breaks' => FALSE,
@@ -121,7 +122,7 @@ class SalesforceJwtTest extends WebDriverTestBase {
     if ($provider != NULL) {
       $keyArgs['key_provider'] = $provider;
     }
-    $this->testKey = \Drupal\key\Entity\Key::create($keyArgs);
+    $this->testKey = Key::create($keyArgs);
     $this->testKey->save();
     return $this->testKey;
   }
diff --git a/modules/salesforce_mapping/tests/src/Unit/MappedObjectTest.php b/modules/salesforce_mapping/tests/src/Unit/MappedObjectTest.php
index 3622aeb3..813a25d9 100644
--- a/modules/salesforce_mapping/tests/src/Unit/MappedObjectTest.php
+++ b/modules/salesforce_mapping/tests/src/Unit/MappedObjectTest.php
@@ -57,7 +57,7 @@ class MappedObjectTest extends UnitTestCase {
       ->method('__toString')
       ->willReturn($this->salesforce_id);
 
-    $this->entityType = $this->getMockBuilder(EntityTypeInterface::class)->getMock();
+    $this->entityType = $this->createMock(EntityTypeInterface::class);
     $this->entityType->expects($this->any())
       ->method('getKeys')
       ->will($this->returnValue([
@@ -65,13 +65,13 @@ class MappedObjectTest extends UnitTestCase {
         'uuid' => 'uuid',
       ]));
 
-    $this->etm = $this->getMockBuilder(EntityTypeManagerInterface::class)->getMock();
+    $this->etm = $this->createMock(EntityTypeManagerInterface::class);
     $this->etm->expects($this->any())
       ->method('getDefinition')
       ->with($this->entityTypeId)
       ->will($this->returnValue($this->entityType));
 
-    $this->mappedObjectEntityType = $this->getMockBuilder(EntityTypeInterface::class)->getMock();
+    $this->mappedObjectEntityType = $this->createMock(EntityTypeInterface::class);
     $this->mappedObjectEntityType->expects($this->any())
       ->method('getKeys')
       ->will($this->returnValue([
@@ -85,13 +85,11 @@ class MappedObjectTest extends UnitTestCase {
       ->with('salesforce_mapped_object')
       ->will($this->returnValue($this->mappedObjectEntityType));
 
-    $this->event_dispatcher = $this->getMockBuilder(EventDispatcherInterface::class)->getMock();
+    $this->event_dispatcher = $this->createMock(EventDispatcherInterface::class);
 
-    $this->client = $this->getMockBuilder(RestClientInterface::CLASS)->getMock();
+    $this->client = $this->createMock(RestClientInterface::CLASS);
 
-    $this->fieldTypePluginManager = $this->getMockBuilder('\Drupal\Core\Field\FieldTypePluginManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->fieldTypePluginManager = $this->createMock('\Drupal\Core\Field\FieldTypePluginManager');
     $this->fieldTypePluginManager->expects($this->any())
       ->method('getDefaultStorageSettings')
       ->will($this->returnValue([]));
@@ -101,9 +99,9 @@ class MappedObjectTest extends UnitTestCase {
     $this->fieldTypePluginManager->expects($this->any())
       ->method('createFieldItemList')
       ->will($this->returnValue(
-        $this->getMockBuilder(FieldItemListInterface::class)->getMock()));
+        $this->createMock(FieldItemListInterface::class)));
 
-    $this->time = $this->getMockBuilder(TimeInterface::CLASS)->getMock();
+    $this->time = $this->createMock(TimeInterface::CLASS);
 
     $container = new ContainerBuilder();
     $container->set('entity_type.manager', $this->etm);
@@ -113,7 +111,7 @@ class MappedObjectTest extends UnitTestCase {
     $container->set('datetime.time', $this->time);
     \Drupal::setContainer($container);
 
-    $this->entity = $this->getMockBuilder(ContentEntityInterface::class)->getMock();
+    $this->entity = $this->createMock(ContentEntityInterface::class);
     $this->entity
       ->expects($this->any())
       ->method('id')
@@ -125,7 +123,7 @@ class MappedObjectTest extends UnitTestCase {
       ->willReturn(FALSE);
 
     // Mock salesforce mapping.
-    $this->mapping = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $this->mapping = $this->createMock(SalesforceMappingInterface::CLASS);
     $this->mapping
       ->expects($this->any())
       ->method('getFieldMappings')
@@ -139,19 +137,7 @@ class MappedObjectTest extends UnitTestCase {
       ->method('getSalesforceObjectType')
       ->willReturn('dummy_sf_object_type');
 
-    $this->mapped_object = $this->getMockBuilder(MappedObject::CLASS)
-      ->disableOriginalConstructor()
-      ->setMethods([
-        'getMappedEntity',
-        'getMapping',
-        'getEntityType',
-        'sfid',
-        'set',
-        'save',
-        'setNewRevision',
-        'client',
-      ])
-      ->getMock();
+    $this->mapped_object = $this->createMock(MappedObject::CLASS);
     $this->mapped_object->expects($this->any())
       ->method('getMappedEntity')
       ->willReturn($this->entity);
diff --git a/modules/salesforce_mapping/tests/src/Unit/SalesforceMappingStorageTest.php b/modules/salesforce_mapping/tests/src/Unit/SalesforceMappingStorageTest.php
index 35f68c0a..313da93a 100644
--- a/modules/salesforce_mapping/tests/src/Unit/SalesforceMappingStorageTest.php
+++ b/modules/salesforce_mapping/tests/src/Unit/SalesforceMappingStorageTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\salesforce_mapping\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\Entity\ConfigEntityType;
@@ -18,6 +19,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class SalesforceMappingStorageTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The type ID of the entity under test.
    *
@@ -63,7 +65,7 @@ class SalesforceMappingStorageTest extends UnitTestCase {
   /**
    * Mapping storage service mock.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var \PHPUnit\Framework\MockObject\MockObject
    */
   protected $salesforceMappingStorage;
 
@@ -92,9 +94,7 @@ class SalesforceMappingStorageTest extends UnitTestCase {
     $this->uuidService = $this->createMock(UuidInterface::class);
     $this->languageManager = $this->createMock(LanguageManagerInterface::class);
     $this->configFactory = $this->createMock(ConfigFactoryInterface::class);
-    $this->etm = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->etm = $this->createMock(EntityTypeManagerInterface::class);
     $this->etm->expects($this->any())
       ->method('getDefinition')
       ->with($this->equalTo('test_entityType'))
diff --git a/modules/salesforce_mapping/tests/src/Unit/SalesforceMappingTest.php b/modules/salesforce_mapping/tests/src/Unit/SalesforceMappingTest.php
index 0ae99397..e6497d99 100644
--- a/modules/salesforce_mapping/tests/src/Unit/SalesforceMappingTest.php
+++ b/modules/salesforce_mapping/tests/src/Unit/SalesforceMappingTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\salesforce_mapping\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\Entity\ConfigEntityTypeInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -21,6 +22,7 @@ use Prophecy\Argument;
  */
 class SalesforceMappingTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Required modules.
    *
diff --git a/modules/salesforce_pull/tests/src/Unit/DeleteHandlerTest.php b/modules/salesforce_pull/tests/src/Unit/DeleteHandlerTest.php
index cf531814..6f246f74 100644
--- a/modules/salesforce_pull/tests/src/Unit/DeleteHandlerTest.php
+++ b/modules/salesforce_pull/tests/src/Unit/DeleteHandlerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\salesforce_pull\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Core\Entity\EntityStorageBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -24,6 +25,7 @@ use Prophecy\Argument;
  */
 class DeleteHandlerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Required modules.
    *
@@ -54,14 +56,12 @@ class DeleteHandlerTest extends UnitTestCase {
     $this->sfapi = $prophecy->reveal();
 
     // Mock an atribtary Drupal entity.
-    $this->entity = $this->getMockBuilder(User::CLASS)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity = $this->createMock(User::CLASS);
     $this->entity->expects($this->any())->method('delete')->willReturn(TRUE);
     $this->entity->expects($this->any())->method('id')->willReturn(1);
     $this->entity->expects($this->any())->method('label')->willReturn('foo');
 
-    $this->mapping = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $this->mapping = $this->createMock(SalesforceMappingInterface::CLASS);
     $this->mapping->expects($this->any())
       ->method('__get')
       ->with($this->equalTo('id'))
@@ -89,7 +89,7 @@ class DeleteHandlerTest extends UnitTestCase {
     $this->entityId->value = '1';
     $this->entityRef->entity = $this->mapping;
 
-    $this->mappedObject = $this->getMockBuilder(MappedObjectInterface::CLASS)->getMock();
+    $this->mappedObject = $this->createMock(MappedObjectInterface::CLASS);
     $this->mappedObject
       ->expects($this->any())
       ->method('delete')
@@ -117,9 +117,7 @@ class DeleteHandlerTest extends UnitTestCase {
     $this->configStorage = $prophecy->reveal();
 
     // Mock mapped object EntityStorage object.
-    $this->entityStorage = $this->getMockBuilder(MappedObjectStorage::CLASS)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entityStorage = $this->createMock(MappedObjectStorage::CLASS);
     $this->entityStorage->expects($this->any())
       ->method('loadBySfid')
       ->willReturn([$this->mappedObject]);
diff --git a/modules/salesforce_pull/tests/src/Unit/PullBaseTest.php b/modules/salesforce_pull/tests/src/Unit/PullBaseTest.php
index 497760d3..86b48cb8 100644
--- a/modules/salesforce_pull/tests/src/Unit/PullBaseTest.php
+++ b/modules/salesforce_pull/tests/src/Unit/PullBaseTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\salesforce_pull\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\Entity\ConfigEntityStorage;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityStorageBase;
@@ -30,6 +31,7 @@ use Symfony\Component\DependencyInjection\ContainerBuilder;
  */
 class PullBaseTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Required modules.
    *
@@ -53,21 +55,14 @@ class PullBaseTest extends UnitTestCase {
     $this->sfid = $prophecy->reveal();
 
     // Mock StringItem for mock Entity.
-    $changed_value = $this->getMockBuilder(StringItem::CLASS)
-      ->setMethods(['__get'])
-      ->disableOriginalConstructor()
-      // ->setConstructorArgs([$ddi,null,null])
-      ->getMock();
+    $changed_value = $this->createMock(StringItem::CLASS);
     $changed_value->expects($this->any())
       ->method('__get')
       ->with($this->equalTo('value'))
       ->willReturn('999999');
 
     // Mock content entity.
-    $this->entity = $this->getMockBuilder(ContentEntityBase::CLASS)
-      ->setMethods(['__construct', '__get', '__set', 'label', 'id', '__isset'])
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity = $this->createMock(ContentEntityBase::CLASS);
     $this->entity->expects($this->any())
       ->method('__get')
       ->with($this->equalTo('changed'))
@@ -81,7 +76,7 @@ class PullBaseTest extends UnitTestCase {
       ->willReturn(TRUE);
 
     // Mock mapping object.
-    $this->mapping = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $this->mapping = $this->createMock(SalesforceMappingInterface::CLASS);
     $this->mapping->expects($this->any())
       ->method('__get')
       ->with($this->equalTo('id'))
@@ -102,7 +97,7 @@ class PullBaseTest extends UnitTestCase {
       ->willReturn([]);
 
     // Mock mapped object.
-    $this->mappedObject = $this->getMockBuilder(MappedObjectInterface::CLASS)->getMock();
+    $this->mappedObject = $this->createMock(MappedObjectInterface::CLASS);
     $this->mappedObject->expects($this->any())
       ->method('getChanged')
       ->willReturn('1486490500');
@@ -186,7 +181,7 @@ class PullBaseTest extends UnitTestCase {
     $this->sqr = new SelectQueryResult($result);
 
     // Mock rest cient.
-    $this->sfapi = $this->getMockBuilder(RestClientInterface::CLASS)->getMock();
+    $this->sfapi = $this->createMock(RestClientInterface::CLASS);
     $this->sfapi
       ->expects($this->any())
       ->method('query')
@@ -201,7 +196,7 @@ class PullBaseTest extends UnitTestCase {
       ->willReturn($this->sfid);
 
     // Mock event dispatcher.
-    $this->ed = $this->getMockBuilder('\Symfony\Component\EventDispatcher\EventDispatcherInterface')->getMock();
+    $this->ed = $this->createMock('\Symfony\Component\EventDispatcher\EventDispatcherInterface');
     $this->ed
       ->expects($this->any())
       ->method('dispatch')
diff --git a/modules/salesforce_pull/tests/src/Unit/PullQueueItemTest.php b/modules/salesforce_pull/tests/src/Unit/PullQueueItemTest.php
index 6cd4999a..0023717b 100644
--- a/modules/salesforce_pull/tests/src/Unit/PullQueueItemTest.php
+++ b/modules/salesforce_pull/tests/src/Unit/PullQueueItemTest.php
@@ -27,7 +27,7 @@ class PullQueueItemTest extends UnitTestCase {
   public function testObject() {
     $sobject = new SObject(['id' => '1234567890abcde', 'attributes' => ['type' => 'dummy']]);
     // OF COURSE Prophesy doesn't do magic methods well.
-    $mapping = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $mapping = $this->createMock(SalesforceMappingInterface::CLASS);
     $mapping->expects($this->any())
       ->method('__get')
       ->with($this->equalTo('id'))
diff --git a/modules/salesforce_pull/tests/src/Unit/QueueHandlerTest.php b/modules/salesforce_pull/tests/src/Unit/QueueHandlerTest.php
index 08667a88..4578659a 100644
--- a/modules/salesforce_pull/tests/src/Unit/QueueHandlerTest.php
+++ b/modules/salesforce_pull/tests/src/Unit/QueueHandlerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\salesforce_pull\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Queue\QueueDatabaseFactory;
@@ -26,6 +27,7 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
  */
 class QueueHandlerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Required modules.
    *
@@ -65,7 +67,7 @@ class QueueHandlerTest extends UnitTestCase {
       ->willReturn($this->sqrDone);
     $this->sfapi = $prophecy->reveal();
 
-    $this->mapping = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $this->mapping = $this->createMock(SalesforceMappingInterface::CLASS);
     $this->mapping->expects($this->any())
       ->method('__get')
       ->with($this->equalTo('id'))
@@ -121,7 +123,7 @@ class QueueHandlerTest extends UnitTestCase {
     $prophecy->dispatch(Argument::any(), Argument::any())->willReturn();
     $this->ed = $prophecy->reveal();
 
-    $this->time = $this->getMockBuilder(TimeInterface::CLASS)->getMock();
+    $this->time = $this->createMock(TimeInterface::CLASS);
 
     $this->qh = $this->getMockBuilder(QueueHandler::CLASS)
       ->setMethods(['parseUrl'])
diff --git a/modules/salesforce_push/tests/src/Unit/PushQueueTest.php b/modules/salesforce_push/tests/src/Unit/PushQueueTest.php
index 04a56638..bfe80dc9 100644
--- a/modules/salesforce_push/tests/src/Unit/PushQueueTest.php
+++ b/modules/salesforce_push/tests/src/Unit/PushQueueTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\salesforce_push\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -31,45 +32,38 @@ use Prophecy\Argument;
  * @group salesforce_push
  */
 class PushQueueTest extends UnitTestCase {
+  use ProphecyTrait;
   static protected $modules = ['salesforce_push'];
 
   /**
    * {@inheritdoc}
    */
   protected function setUp(): void {
-    $this->schema = $this->getMockBuilder(Schema::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->schema = $this->createMock(Schema::class);
     $this->schema->expects($this->any())
       ->method('tableExists')
       ->willReturn(TRUE);
-    $this->database = $this->getMockBuilder(Connection::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->database = $this->createMock(Connection::class);
     $this->database->expects($this->any())
       ->method('schema')
       ->willReturn($this->schema);
-    $this->state = $this->getMockBuilder(StateInterface::class)->getMock();
+    $this->state = $this->createMock(StateInterface::class);
     $this->push_queue_processor_plugin_manager =
-      $this->getMockBuilder(PushQueueProcessorPluginManager::class)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->createMock(PushQueueProcessorPluginManager::class);
     $this->entityTypeManager =
-      $this->getMockBuilder(EntityTypeManagerInterface::class)->getMock();
-    $this->eventDispatcher = $this->getMockBuilder(EventDispatcherInterface::CLASS)->getMock();
+      $this->createMock(EntityTypeManagerInterface::class);
+    $this->eventDispatcher = $this->createMock(EventDispatcherInterface::CLASS);
     $this->eventDispatcher->expects($this->any())
       ->method('dispatch')
       ->willReturn(NULL);
-    $this->string_translation = $this->getMockBuilder(TranslationInterface::class)->getMock();
-    $this->time = $this->getMockBuilder(TimeInterface::class)->getMock();
+    $this->string_translation = $this->createMock(TranslationInterface::class);
+    $this->time = $this->createMock(TimeInterface::class);
 
-    $this->mappingStorage = $this->getMockBuilder(SalesforceMappingStorage::CLASS)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->mappingStorage = $this->createMock(SalesforceMappingStorage::CLASS);
 
-    $this->mappedObjectStorage = $this->getMockBuilder(SqlEntityStorageInterface::CLASS)->getMock();
+    $this->mappedObjectStorage = $this->createMock(SqlEntityStorageInterface::CLASS);
 
-    $this->entityStorage = $this->getMockBuilder(SqlEntityStorageInterface::CLASS)->getMock();
+    $this->entityStorage = $this->createMock(SqlEntityStorageInterface::CLASS);
 
     $this->entityTypeManager->expects($this->exactly(2))
       ->method('getStorage')
@@ -116,7 +110,7 @@ class PushQueueTest extends UnitTestCase {
 
     // Test claiming items.
     $items = [1, 2, 3];
-    $this->queryRange = $this->getMockBuilder(StatementInterface::class)->getMock();
+    $this->queryRange = $this->createMock(StatementInterface::class);
     $this->queryRange->expects($this->once())
       ->method('fetchAllAssoc')
       ->willReturn($items);
@@ -124,9 +118,7 @@ class PushQueueTest extends UnitTestCase {
       ->method('queryRange')
       ->willReturn($this->queryRange);
 
-    $this->updateQuery = $this->getMockBuilder(Update::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->updateQuery = $this->createMock(Update::class);
     $this->updateQuery->expects($this->once())
       ->method('fields')
       ->willReturn($this->updateQuery);
@@ -147,7 +139,7 @@ class PushQueueTest extends UnitTestCase {
    * @covers ::processQueues
    */
   public function testProcessQueue() {
-    $mapping1 = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $mapping1 = $this->createMock(SalesforceMappingInterface::CLASS);
     $mapping1->expects($this->any())
       ->method('getNextPushTime')
       ->willReturn(0);
@@ -157,7 +149,7 @@ class PushQueueTest extends UnitTestCase {
     $mapping1->push_limit = 1;
     $mapping1->push_retries = 1;
 
-    $this->worker = $this->getMockBuilder(PushQueueProcessorInterface::class)->getMock();
+    $this->worker = $this->createMock(PushQueueProcessorInterface::class);
     $this->worker->expects($this->any())
       ->method('process')
       ->willReturn(NULL);
diff --git a/modules/salesforce_push/tests/src/Unit/SalesforcePushQueueProcessorRestTest.php b/modules/salesforce_push/tests/src/Unit/SalesforcePushQueueProcessorRestTest.php
index ba3ae473..87f649ee 100644
--- a/modules/salesforce_push/tests/src/Unit/SalesforcePushQueueProcessorRestTest.php
+++ b/modules/salesforce_push/tests/src/Unit/SalesforcePushQueueProcessorRestTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\salesforce_push\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -30,6 +31,7 @@ use Drupal\Core\StringTranslation\TranslationInterface;
  */
 class SalesforcePushQueueProcessorRestTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Required modules.
    *
@@ -43,17 +45,17 @@ class SalesforcePushQueueProcessorRestTest extends UnitTestCase {
   protected function setUp(): void {
     $this->entityType = 'default';
 
-    $this->queue = $this->getMockBuilder(PushQueueInterface::CLASS)->getMock();
-    $this->client = $this->getMockBuilder(RestClientInterface::CLASS)->getMock();
-    $this->eventDispatcher = $this->getMockBuilder(EventDispatcherInterface::CLASS)->getMock();
+    $this->queue = $this->createMock(PushQueueInterface::CLASS);
+    $this->client = $this->createMock(RestClientInterface::CLASS);
+    $this->eventDispatcher = $this->createMock(EventDispatcherInterface::CLASS);
     $this->eventDispatcher->expects($this->any())
       ->method('dispatch')
       ->willReturn(NULL);
-    $this->entity_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)->getMock();
+    $this->entity_manager = $this->createMock(EntityTypeManagerInterface::class);
 
-    $this->string_translation = $this->getMockBuilder(TranslationInterface::class)->getMock();
+    $this->string_translation = $this->createMock(TranslationInterface::class);
 
-    $this->mapping = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $this->mapping = $this->createMock(SalesforceMappingInterface::CLASS);
 
     $this->mapping->expects($this->any())
       ->method('id')
@@ -64,12 +66,12 @@ class SalesforcePushQueueProcessorRestTest extends UnitTestCase {
       ->with($this->equalTo('drupal_entity_type'))
       ->willReturn($this->entityType);
 
-    $this->mappingStorage = $this->getMockBuilder(ConfigEntityStorageInterface::CLASS)->getMock();
+    $this->mappingStorage = $this->createMock(ConfigEntityStorageInterface::CLASS);
     $this->mappingStorage->expects($this->any())
       ->method('load')
       ->willReturn($this->mapping);
 
-    $this->mappedObjectStorage = $this->getMockBuilder(SqlEntityStorageInterface::CLASS)->getMock();
+    $this->mappedObjectStorage = $this->createMock(SqlEntityStorageInterface::CLASS);
 
     $prophecy = $this->prophesize(EntityTypeManagerInterface::class);
     $prophecy->getStorage('salesforce_mapping')
@@ -78,11 +80,9 @@ class SalesforcePushQueueProcessorRestTest extends UnitTestCase {
       ->willReturn($this->mappedObjectStorage);
     $this->entityTypeManager = $prophecy->reveal();
 
-    $this->authToken = $this->getMockBuilder(TokenInterface::CLASS)->getMock();
+    $this->authToken = $this->createMock(TokenInterface::CLASS);
     $this->authMan =
-      $this->getMockBuilder(SalesforceAuthProviderPluginManager::CLASS)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->createMock(SalesforceAuthProviderPluginManager::CLASS);
     $this->authMan->expects($this->any())
       ->method('getToken')
       ->willReturn($this->authToken);
@@ -104,9 +104,7 @@ class SalesforcePushQueueProcessorRestTest extends UnitTestCase {
    */
   public function testProcessMissingAuth() {
     $this->authMan =
-      $this->getMockBuilder(SalesforceAuthProviderPluginManager::CLASS)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->createMock(SalesforceAuthProviderPluginManager::CLASS);
     $this->authMan->expects($this->any())
       ->method('getToken')
       ->willReturn(NULL);
@@ -174,7 +172,7 @@ class SalesforcePushQueueProcessorRestTest extends UnitTestCase {
       ->setMethods(['getMappedObject'])
       ->getMock();
 
-    $mappedObject = $this->getMockBuilder(MappedObjectInterface::class)->getMock();
+    $mappedObject = $this->createMock(MappedObjectInterface::class);
     $mappedObject->expects($this->once())
       ->method('isNew')
       ->willReturn(TRUE);
@@ -201,7 +199,7 @@ class SalesforcePushQueueProcessorRestTest extends UnitTestCase {
       'name' => 'bar',
     ];
 
-    $this->mappedObject = $this->getMockBuilder(MappedObjectInterface::class)->getMock();
+    $this->mappedObject = $this->createMock(MappedObjectInterface::class);
 
     $this->mappedObject->expects($this->once())
       ->method('pushDelete')
@@ -234,15 +232,15 @@ class SalesforcePushQueueProcessorRestTest extends UnitTestCase {
    */
   public function testProcessItemPush() {
     // Test push on op == insert / update.
-    $this->mappedObject = $this->getMockBuilder(MappedObjectInterface::class)->getMock();
+    $this->mappedObject = $this->createMock(MappedObjectInterface::class);
     $this->queueItem = (object) [
       'entity_id' => 'foo',
       'op' => NULL,
       'mapped_object_id' => NULL,
       'name' => NULL,
     ];
-    $this->entity = $this->getMockBuilder(EntityInterface::class)->getMock();
-    $this->entityStorage = $this->getMockBuilder(SqlEntityStorageInterface::CLASS)->getMock();
+    $this->entity = $this->createMock(EntityInterface::class);
+    $this->entityStorage = $this->createMock(SqlEntityStorageInterface::CLASS);
     $this->entityStorage->expects($this->once())
       ->method('load')
       ->willReturn($this->entity);
@@ -296,12 +294,12 @@ class SalesforcePushQueueProcessorRestTest extends UnitTestCase {
       'entity_id' => 'foo',
     ];
 
-    $this->mappedObject = $this->getMockBuilder(MappedObjectInterface::class)->getMock();
+    $this->mappedObject = $this->createMock(MappedObjectInterface::class);
     $this->mappedObject->expects($this->any())
       ->method('isNew')
       ->willReturn(TRUE);
 
-    $this->entityStorage = $this->getMockBuilder(SqlEntityStorageInterface::CLASS)->getMock();
+    $this->entityStorage = $this->createMock(SqlEntityStorageInterface::CLASS);
     $prophecy = $this->prophesize(EntityTypeManagerInterface::class);
     $prophecy->getStorage($this->entityType)
       ->willReturn($this->entityStorage);
diff --git a/salesforce.install b/salesforce.install
index 2d75bbb4..e33c3feb 100644
--- a/salesforce.install
+++ b/salesforce.install
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\salesforce_oauth\Consumer\SalesforceOAuthCredentials;
+use Drupal\salesforce\Rest\RestClient;
 /**
  * @file
  * Salesforce install file.
@@ -398,7 +400,7 @@ function salesforce_update_8402() {
     return;
   }
   $credentials = $authConfig->getPlugin()->getCredentials();
-  if (!$credentials instanceof \Drupal\salesforce_oauth\Consumer\SalesforceOAuthCredentials) { // @codingStandardsIgnoreLine
+  if (!$credentials instanceof SalesforceOAuthCredentials) { // @codingStandardsIgnoreLine
     // If we're not using OAuth, we are done.
     return;
   }
@@ -464,12 +466,12 @@ function salesforce_update_8800() {
   $settings = \Drupal::configFactory()->getEditable('salesforce.settings');
   $save = FALSE;
   if (!$settings->get('short_term_cache_lifetime')) {
-    $settings->set('short_term_cache_lifetime', \Drupal\salesforce\Rest\RestClient::CACHE_LIFETIME);
+    $settings->set('short_term_cache_lifetime', RestClient::CACHE_LIFETIME);
     $save = TRUE;
   }
   if (!$settings->get('long_term_cache_lifetime')) {
-    $settings->set('long_term_cache_lifetime', \Drupal\salesforce\Rest\RestClient::LONGTERM_CACHE_LIFETIME);
+    $settings->set('long_term_cache_lifetime', RestClient::LONGTERM_CACHE_LIFETIME);
     $save = TRUE;
   }
   $settings->save();
-}
\ No newline at end of file
+}
diff --git a/src/Tests/TestHttpClientFactory.php b/src/Tests/TestHttpClientFactory.php
index 0604e130..6d97e60c 100644
--- a/src/Tests/TestHttpClientFactory.php
+++ b/src/Tests/TestHttpClientFactory.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\salesforce\Tests;
 
+use function GuzzleHttp\default_user_agent;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Site\Settings;
 use Drupal\Core\Http\ClientFactory;
@@ -31,7 +32,7 @@ class TestHttpClientFactory extends ClientFactory {
       'verify' => TRUE,
       'timeout' => 30,
       'headers' => [
-        'User-Agent' => 'Drupal/' . \Drupal::VERSION . ' (+https://www.drupal.org/) ' . \GuzzleHttp\default_user_agent(),
+        'User-Agent' => 'Drupal/' . \Drupal::VERSION . ' (+https://www.drupal.org/) ' . default_user_agent(),
       ],
       'handler' => $this->stack,
       // Security consideration: prevent Guzzle from using environment variables
diff --git a/src/Tests/TestHttpClientWrapper.php b/src/Tests/TestHttpClientWrapper.php
index 0d07746f..cc087dd9 100644
--- a/src/Tests/TestHttpClientWrapper.php
+++ b/src/Tests/TestHttpClientWrapper.php
@@ -39,7 +39,7 @@ class TestHttpClientWrapper implements ClientInterface {
   ) {
     // This method is only used to Salesforce OAuth. Based on the given args,
     // return a hard-coded version of the expected response.
-    $dir = drupal_get_path('module', 'salesforce') . '/src/Tests/';
+    $dir = \Drupal::service('extension.list.module')->getPath('salesforce') . '/src/Tests/';
     if ($endpoint->getPath() == '/services/oauth2/token') {
       switch ($requestBody['grant_type']) {
         case 'authorization_code':
diff --git a/tests/src/Unit/RestClientTest.php b/tests/src/Unit/RestClientTest.php
index 2eff70c3..8d518d39 100644
--- a/tests/src/Unit/RestClientTest.php
+++ b/tests/src/Unit/RestClientTest.php
@@ -48,34 +48,24 @@ class RestClientTest extends UnitTestCase {
       'httpRequest',
     ];
 
-    $this->httpClient = $this->getMockBuilder(Client::CLASS)->getMock();
+    $this->httpClient = $this->createMock(Client::CLASS);
     $this->configFactory =
-      $this->getMockBuilder(ConfigFactory::CLASS)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->createMock(ConfigFactory::CLASS);
     $this->state =
-      $this->getMockBuilder(State::CLASS)
-        ->disableOriginalConstructor()
-        ->getMock();
-    $this->cache = $this->getMockBuilder(CacheBackendInterface::CLASS)->getMock();
-    $this->json = $this->getMockBuilder(Json::CLASS)->getMock();
-    $this->time = $this->getMockBuilder(TimeInterface::CLASS)->getMock();
-    $this->authToken = $this->getMockBuilder(TokenInterface::CLASS)->getMock();
-    $this->authProvider = $this->getMockBuilder(SalesforceAuthProviderInterface::CLASS)
-      ->disableOriginalConstructor()
-      ->getMock();
+      $this->createMock(State::CLASS);
+    $this->cache = $this->createMock(CacheBackendInterface::CLASS);
+    $this->json = $this->createMock(Json::CLASS);
+    $this->time = $this->createMock(TimeInterface::CLASS);
+    $this->authToken = $this->createMock(TokenInterface::CLASS);
+    $this->authProvider = $this->createMock(SalesforceAuthProviderInterface::CLASS);
     $this->authProvider->expects($this->any())
       ->method('getApiEndpoint')
       ->willReturn('https://example.com');
     $this->authConfig =
-      $this->getMockBuilder(SalesforceAuthConfig::CLASS)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->createMock(SalesforceAuthConfig::CLASS);
 
     $this->authMan =
-      $this->getMockBuilder(SalesforceAuthProviderPluginManager::CLASS)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->createMock(SalesforceAuthProviderPluginManager::CLASS);
     $this->authMan->expects($this->any())
       ->method('getToken')
       ->willReturn($this->authToken);
