diff --git a/post_api.info.yml b/post_api.info.yml
index 7ea123a..355a4d1 100644
--- a/post_api.info.yml
+++ b/post_api.info.yml
@@ -1,6 +1,5 @@
 name: 'Post API'
 type: module
 description: 'Developer tools to support POST requests to external endpoints for any data queued via Queue API.'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 package: 'Custom'
diff --git a/src/Event/QueueItemProcessedEvent.php b/src/Event/QueueItemProcessedEvent.php
index f7017ff..bddf1f1 100644
--- a/src/Event/QueueItemProcessedEvent.php
+++ b/src/Event/QueueItemProcessedEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\post_api\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Defines the "Queue Item Processed" event.
diff --git a/src/Event/QueueProcessingCompleteEvent.php b/src/Event/QueueProcessingCompleteEvent.php
index f473195..c26f5f7 100644
--- a/src/Event/QueueProcessingCompleteEvent.php
+++ b/src/Event/QueueProcessingCompleteEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\post_api\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Defines the Queue processing finished event.
diff --git a/src/Plugin/QueueWorker/PostApiQueueBase.php b/src/Plugin/QueueWorker/PostApiQueueBase.php
index 3584754..5868069 100644
--- a/src/Plugin/QueueWorker/PostApiQueueBase.php
+++ b/src/Plugin/QueueWorker/PostApiQueueBase.php
@@ -137,7 +137,7 @@ abstract class PostApiQueueBase extends QueueWorkerBase implements ContainerFact
           // Dispatch an event to which Event Subscribers can react.
           // E.g. need special logging for various 20* responses.
           $event_item_processed = new QueueItemProcessedEvent($response_code, $item->data);
-          $this->eventDispatcher->dispatch('post_api_queue_item_processed_event', $event_item_processed);
+          $this->eventDispatcher->dispatch($event_item_processed, 'post_api_queue_item_processed_event');
 
           // API POST is a success - delete processed item from queue.
           $queue->deleteItem($item);
@@ -165,7 +165,7 @@ abstract class PostApiQueueBase extends QueueWorkerBase implements ContainerFact
 
     // Dispatch an event to which Event Subscribers can react.
     $event_queue_complete = new QueueProcessingCompleteEvent($number_in_queue, $number_released);
-    $this->eventDispatcher->dispatch('post_api_queue_processing_complete_event', $event_queue_complete);
+    $this->eventDispatcher->dispatch($event_queue_complete, 'post_api_queue_processing_complete_event');
   }
 
   /**
diff --git a/tests/src/Kernel/PostApiQueueTest.php b/tests/src/Kernel/PostApiQueueTest.php
index ecc4775..67fdcdb 100644
--- a/tests/src/Kernel/PostApiQueueTest.php
+++ b/tests/src/Kernel/PostApiQueueTest.php
@@ -138,7 +138,7 @@ class PostApiQueueTest extends KernelTestBase {
     $new_items[] = $item->data;
 
     // First two dequeued items should match the first two items we queued.
-    $this->assertEqual($this->queueScore($data, $new_items), 2, 'Two items matched');
+    $this->assertEquals($this->queueScore($data, $new_items), 2, 'Two items matched');
 
     // Add two more items.
     $queue->createItem($data[2]);
@@ -154,10 +154,10 @@ class PostApiQueueTest extends KernelTestBase {
 
     // All dequeued items should match the items we queued exactly once,
     // therefore the score must be exactly 4.
-    $this->assertEqual($this->queueScore($data, $new_items), 4, 'Four items matched');
+    $this->assertEquals($this->queueScore($data, $new_items), 4, 'Four items matched');
 
     // There should be no duplicate items.
-    $this->assertEqual($this->queueScore($new_items, $new_items), 4, 'Four items matched');
+    $this->assertEquals($this->queueScore($new_items, $new_items), 4, 'Four items matched');
 
     $this->clearQueue($queue, $items);
 
