modules/contrib/instagram_feeds/instagram_feeds.install
modules/contrib/instagram_feeds/src/EventSubscriber/InstagramPostsObtainedSubscriber.php
modules/contrib/instagram_feeds/instagram_feeds.module
modules/contrib/instagram_feeds/instagram_feeds.tokens.inc
modules/contrib/instagram_feeds/src/CronHandler.php
modules/contrib/instagram_feeds/src/Form/InstagramAccountDeleteForm.php
modules/contrib/instagram_feeds/src/Form/InstagramAccountForm.php
modules/contrib/instagram_feeds/src/Form/SettingsForm.php
modules/contrib/instagram_feeds/src/Entity/InstagramAccount.php
modules/contrib/instagram_feeds/src/InstagramAccountListBuilder.php
modules/contrib/instagram_feeds/src/InstagramApiTrait.php
modules/contrib/instagram_feeds/src/Plugin/Action/Derivative/RefreshInstagramTokenActionDeriver.php
modules/contrib/instagram_feeds/src/Plugin/Action/RefreshInstagramTokenAction.php
modules/contrib/instagram_feeds/src/Entity/InstagramAccountInterface.php
modules/contrib/instagram_feeds/src/Event/InstagramFeedsEventBase.php
modules/contrib/instagram_feeds/src/Event/InstagramPostsObtainedEvent.php
modules/contrib/instagram_feeds/src/Event/MediaEntityInstantiatedEvent.php

3 files with changes
====================

1) modules/contrib/instagram_feeds/src/Event/InstagramFeedsEventBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\instagram_feeds\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\instagram_feeds\Entity\InstagramAccountInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * En event occurs when instagram_feeds creates a new media entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/instagram_feeds/src/CronHandler.php:157

    ---------- begin diff ----------
@@ @@
     }
     // Dispatch the event.
     $event = new InstagramPostsObtainedEvent($this->config, $account, $result ?? []);
-    $this->eventDispatcher->dispatch(InstagramPostsObtainedEvent::getEventName(), $event);
+    $this->eventDispatcher->dispatch($event, InstagramPostsObtainedEvent::getEventName());
     return $event->posts;
   }

@@ @@
     $media_entity = $this->mediaStorage->create($entity_array);
     // Dispatch an event, so other modules can modify media entity before save.
     $event = new MediaEntityInstantiatedEvent($this->config, $account, $media_entity, $post);
-    $this->eventDispatcher->dispatch(MediaEntityInstantiatedEvent::getEventName(), $event);
+    $this->eventDispatcher->dispatch($event, MediaEntityInstantiatedEvent::getEventName());

     $event->mediaEntity->save();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


3) modules/contrib/instagram_feeds/src/EventSubscriber/InstagramPostsObtainedSubscriber.php:41

    ---------- begin diff ----------
@@ @@
     // Added for compatibility with Drupal < 8.7.0.
     $this->file_exists_replace = defined('\Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE')
       ? FileSystemInterface::EXISTS_REPLACE
-      : FILE_EXISTS_REPLACE;
+      : FileSystemInterface::EXISTS_REPLACE;
   }

   /**
@@ @@
         $full_name = $owner['full_name'] ?? 'Instagram Avatar';
         $avatar_file_extension = pathinfo(parse_url($owner['profile_pic_url'], PHP_URL_PATH), PATHINFO_EXTENSION);
         $file_uri_destination = $avatar_dir . '/' . $account->id() . '.' . $avatar_file_extension;
-        $file = file_save_data($file_data, $file_uri_destination, $this->file_exists_replace);
+        $file = \Drupal::service('file.repository')->writeData($file_data, $file_uri_destination, $this->file_exists_replace);
       }

     }
@@ @@
       return \Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY);
     }
     else {
-      return file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
+      return \Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY);
     }
   }
    ----------- end diff -----------

Applied rules:
 * FileCreateDirectoryRector
 * FileExistsReplaceRector
 * FilePrepareDirectoryRector
 * FileSaveDataRector
 * ArgumentRemoverRector
 * WrapReturnRector


 [OK] 3 files have been changed by Rector                                       

