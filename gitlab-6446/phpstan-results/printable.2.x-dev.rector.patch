diff --git a/modules/printable_pdf/printable_pdf.module b/modules/printable_pdf/printable_pdf.module
index 815075b..9f6684e 100644
--- a/modules/printable_pdf/printable_pdf.module
+++ b/modules/printable_pdf/printable_pdf.module
@@ -9,7 +9,7 @@
  * Implements hook_theme().
  */
 function printable_pdf_theme() {
-  $module_path = drupal_get_path('module', 'printable_pdf');
+  $module_path = \Drupal::service('extension.list.module')->getPath('printable_pdf');
   return [
     'printable_pdf_footer' => [
       'template' => 'printable-footer',
diff --git a/modules/printable_pdf/src/Plugin/PrintableFormat/PdfFormat.php b/modules/printable_pdf/src/Plugin/PrintableFormat/PdfFormat.php
index 2826c9c..ba72215 100755
--- a/modules/printable_pdf/src/Plugin/PrintableFormat/PdfFormat.php
+++ b/modules/printable_pdf/src/Plugin/PrintableFormat/PdfFormat.php
@@ -240,7 +240,7 @@ class PdfFormat extends PrintableFormatBase {
     $pdf_header = [
       '#theme' => 'printable_pdf_header',
     ];
-    return render($pdf_header);
+    return \Drupal::service('renderer')->render($pdf_header);
   }
 
   /**
@@ -253,7 +253,7 @@ class PdfFormat extends PrintableFormatBase {
     $pdf_footer = [
       '#theme' => 'printable_pdf_footer',
     ];
-    return render($pdf_footer);
+    return \Drupal::service('renderer')->render($pdf_footer);
   }
 
   /**
@@ -264,7 +264,7 @@ class PdfFormat extends PrintableFormatBase {
    */
   public function buildPdfContent() {
     $content = parent::buildContent();
-    $content = render($content);
+    $content = \Drupal::service('renderer')->render($content);
 
     $content = preg_replace(['#printable://#', '/\?itok=.*"/'], ['', '"'], $content);
     $rendered_page = parent::extractLinks($content);
diff --git a/printable.module b/printable.module
index 9e3c749..cef5853 100755
--- a/printable.module
+++ b/printable.module
@@ -73,7 +73,7 @@ function printable_permission() {
  * Implements hook_theme().
  */
 function printable_theme() {
-  $module_path = drupal_get_path('module', 'printable');
+  $module_path = \Drupal::service('extension.list.module')->getPath('printable');
   return [
     'printable_navigation' => [
       'variables' => ['printable_link' => NULL],
@@ -120,7 +120,7 @@ function template_preprocess_printable(array &$variables) {
   global $base_url;
 
   $config = \Drupal::config('printable.settings');
-  $variables['base_url'] = $base_url . '/' . drupal_get_path('module', 'printable');
+  $variables['base_url'] = $base_url . '/' . \Drupal::service('extension.list.module')->getPath('printable');
 
   $request = \Drupal::request();
   $title = '';
diff --git a/src/Plugin/PrintableFormatBase.php b/src/Plugin/PrintableFormatBase.php
index dfd2b01..aa05a78 100644
--- a/src/Plugin/PrintableFormatBase.php
+++ b/src/Plugin/PrintableFormatBase.php
@@ -175,7 +175,7 @@ abstract class PrintableFormatBase extends PluginBase implements PrintableFormat
     $this->footerContent = NULL;
     if ($this->configFactory->get('printable.settings')
       ->get('list_attribute')) {
-      $this->footerContent = $this->linkExtractor->listAttribute((string) render($this->content));
+      $this->footerContent = $this->linkExtractor->listAttribute((string) \Drupal::service('renderer')->render($this->content));
     }
   }
 
@@ -250,7 +250,7 @@ abstract class PrintableFormatBase extends PluginBase implements PrintableFormat
   public function getOutput() {
     $content = $this->buildContent();
     // @todo add a renderer service over here.
-    return $this->extractLinks(render($content));
+    return $this->extractLinks(\Drupal::service('renderer')->render($content));
   }
 
 }
diff --git a/src/Tests/PrintableBlockTest.php b/src/Tests/PrintableBlockTest.php
index d350a28..87a1390 100644
--- a/src/Tests/PrintableBlockTest.php
+++ b/src/Tests/PrintableBlockTest.php
@@ -34,7 +34,7 @@ class PrintableBlockTest extends NodeTestBase {
   /**
    * Perform any initial set up tasks that run before every test method.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create users and test node.
@@ -62,7 +62,8 @@ class PrintableBlockTest extends NodeTestBase {
       'visibility[node_type][bundles][article]' => 'article',
     ];
     $theme = \Drupal::service('theme_handler')->getDefault();
-    $this->drupalPostForm("admin/structure/block/add/printable_links_block%3Anode/$theme", $edit, t('Save block'));
+    $this->drupalGet("admin/structure/block/add/printable_links_block%3Anode/$theme");
+    $this->submitForm($edit, t('Save block'));
 
     $block = Block::load($edit['id']);
     $visibility = $block->getVisibility();
@@ -71,9 +72,9 @@ class PrintableBlockTest extends NodeTestBase {
     // Test deleting the block from the edit form.
     $this->drupalGet('admin/structure/block/manage/' . $edit['id']);
     $this->clickLink(t('Delete'));
-    $this->assertRaw(t('Are you sure you want to delete the block %name?', ['%name' => $edit['settings[label]']]));
-    $this->drupalPostForm(NULL, [], t('Delete'));
-    $this->assertRaw(t('The block %name has been deleted.', ['%name' => $edit['settings[label]']]));
+    $this->assertSession()->responseContains(t('Are you sure you want to delete the block %name?', ['%name' => $edit['settings[label]']]));
+    $this->submitForm([], t('Delete'));
+    $this->assertSession()->responseContains(t('The block %name has been deleted.', ['%name' => $edit['settings[label]']]));
   }
 
 }
diff --git a/src/Tests/PrintableFormTest.php b/src/Tests/PrintableFormTest.php
index 71f28b5..52bc4f9 100644
--- a/src/Tests/PrintableFormTest.php
+++ b/src/Tests/PrintableFormTest.php
@@ -33,7 +33,7 @@ class PrintableFormTest extends BrowserTestBase {
   /**
    * Perform any initial set up tasks that run before every test method.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer printable']);
     $this->drupalLogin($this->user);
@@ -45,17 +45,17 @@ class PrintableFormTest extends BrowserTestBase {
   public function testPrintFormWorks() {
     $this->drupalLogin($this->user);
     $this->drupalGet('admin/config/user-interface/printable/print');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $config = $this->config('printable.settings');
-    $this->assertFieldByName('print_html_sendtoprinter', $config->get('printable.send_to_printer'), 'The field was found with the correct value.');
+    $this->assertSession()->fieldValueEquals('print_html_sendtoprinter', $config->get('printable.send_to_printer'));
 
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'print_html_sendtoprinter' => 1,
     ], t('Submit'));
     $this->drupalGet('admin/config/user-interface/printable/print');
-    $this->assertResponse(200);
-    $this->assertFieldByName('print_html_sendtoprinter', 1, 'The field was found with the correct value.');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldValueEquals('print_html_sendtoprinter', 1);
   }
 
 }
diff --git a/src/Tests/PrintableLinkTest.php b/src/Tests/PrintableLinkTest.php
index 9306553..030310f 100644
--- a/src/Tests/PrintableLinkTest.php
+++ b/src/Tests/PrintableLinkTest.php
@@ -26,7 +26,7 @@ class PrintableLinkTest extends NodeTestBase {
   /**
    * Perform any initial set up tasks that run before every test method.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $user = $this->drupalCreateUser([
       'create page content',
@@ -42,13 +42,13 @@ class PrintableLinkTest extends NodeTestBase {
    */
   public function testPrintLinkExists() {
     $this->drupalGet('admin/config/user-interface/printable/links');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Enable the print link in content area.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'print_print_link_pos' => 'node',
     ], t('Submit'));
     $this->drupalGet('admin/config/user-interface/printable/pdf');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $node_type_storage = \Drupal::entityTypeManager()->getStorage('node_type');
 
@@ -60,13 +60,14 @@ class PrintableLinkTest extends NodeTestBase {
     $edit = [];
     $edit['title[0][value]'] = $this->randomMachineName(8);
     $edit['body[0][value]'] = $this->randomMachineName(16);
-    $this->drupalPostForm('node/add/page', $edit, t('Save'));
+    $this->drupalGet('node/add/page');
+    $this->submitForm($edit, t('Save'));
 
     // Check that the Basic page has been created.
-    $this->assertRaw(t('@post %title has been created.', [
+    $this->assertSession()->responseContains(t('@post %title has been created.', [
       '@post' => 'Basic page',
       '%title' => $edit['title[0][value]'],
-    ]), 'Basic page created.');
+    ]));
 
     // Check that the node exists in the database.
     $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
@@ -74,9 +75,9 @@ class PrintableLinkTest extends NodeTestBase {
 
     // Verify that pages do not show submitted information by default.
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
-    $this->assertRaw('Print', 'Print link discovered successfully in the printable page');
+    $this->assertSession()->responseContains('Print');
   }
 
 }
diff --git a/src/Tests/PrintablePageTest.php b/src/Tests/PrintablePageTest.php
index e2736c0..d5a57ec 100644
--- a/src/Tests/PrintablePageTest.php
+++ b/src/Tests/PrintablePageTest.php
@@ -31,7 +31,7 @@ class PrintablePageTest extends NodeTestBase {
   /**
    * Perform any initial set up tasks that run before every test method.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $web_user = $this->drupalCreateUser([
       'create page content',
@@ -52,20 +52,21 @@ class PrintablePageTest extends NodeTestBase {
     // Test /node/add page with only one content type.
     $node_type_storage->load('article')->delete();
     $this->drupalGet('node/add');
-    $this->assertResponse(200);
-    $this->assertUrl('node/add/page');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('node/add/page');
     // Create a node.
     $edit = [];
     $edit['title[0][value]'] = $this->randomMachineName(8);
     $bodytext = $this->randomMachineName(16) . 'This is functional test which I am writing for printable module.';
     $edit['body[0][value]'] = $bodytext;
-    $this->drupalPostForm('node/add/page', $edit, t('Save'));
+    $this->drupalGet('node/add/page');
+    $this->submitForm($edit, t('Save'));
 
     // Check that the Basic page has been created.
-    $this->assertRaw(t('@post %title has been created.', [
+    $this->assertSession()->responseContains(t('@post %title has been created.', [
       '@post' => 'Basic page',
       '%title' => $edit['title[0][value]'],
-    ]), 'Basic page created.');
+    ]));
 
     // Check that the node exists in the database.
     $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
@@ -73,37 +74,37 @@ class PrintablePageTest extends NodeTestBase {
 
     // Verify that pages do not show submitted information by default.
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet('node/' . $node->id() . '/printable/print');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Checks the presence of header in the page.
-    $this->assertRaw($edit['title[0][value]'], 'Title discovered successfully in the printable page');
+    $this->assertSession()->responseContains($edit['title[0][value]']);
     // Checks the presence of image in the header.
-    $this->assertRaw(theme_get_setting('logo.url'), 'Image discovered successfully in the printable page');
+    $this->assertSession()->responseContains(theme_get_setting('logo.url'));
     // Checks the presence of body in the page.
-    $this->assertRaw($edit['body[0][value]'], 'Body discovered successfully in the printable page');
+    $this->assertSession()->responseContains($edit['body[0][value]']);
     // Check if footer is rendering correctly.
-    $this->assertRaw($base_url . '/node/' . $node->id(), 'Source Url discovered in the printable page');
+    $this->assertSession()->responseContains($base_url . '/node/' . $node->id());
     $this->verbose($base_url);
     // Enable the option of showing links present in the footer of page.
     $this->drupalGet('admin/config/user-interface/printable/print');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'print_html_display_sys_urllist' => 1,
     ], t('Submit'));
 
     // Check that the printable URL can be retrieved without error.
     $this->drupalGet('node/' . $node->id() . '/printable/print');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Check that invalid plugin URLs throw a 404.
     $this->drupalGet('node/' . $node->id() . '/printable/UNDEFINED');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     // Checks whether the URLs in the footer region are rendering properly.
-    $this->assertRaw('List of links present in page', 'Main heading for displaying URLs discovered in the printable page');
-    $this->assertRaw($base_url . '/node/' . $node->id(), 'First link discovered successfully');
-    $this->assertRaw('/user/1', 'Second link discovered successfully');
-    $this->assertRaw('/node/' . $node->id() . '/printable/print', 'Third link discovered successfully');
+    $this->assertSession()->responseContains('List of links present in page');
+    $this->assertSession()->responseContains($base_url . '/node/' . $node->id());
+    $this->assertSession()->responseContains('/user/1');
+    $this->assertSession()->responseContains('/node/' . $node->id() . '/printable/print');
   }
 
 }
diff --git a/src/Tests/PrintablePdfFormTest.php b/src/Tests/PrintablePdfFormTest.php
index ad880be..f24508b 100644
--- a/src/Tests/PrintablePdfFormTest.php
+++ b/src/Tests/PrintablePdfFormTest.php
@@ -33,7 +33,7 @@ class PrintablePdfFormTest extends BrowserTestBase {
   /**
    * Perform any initial set up tasks that run before every test method.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer printable']);
     $this->drupalLogin($this->user);
@@ -45,16 +45,16 @@ class PrintablePdfFormTest extends BrowserTestBase {
   public function testPdfFormWorks() {
     $this->drupalLogin($this->user);
     $this->drupalGet('admin/config/user-interface/printable/pdf');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $config = $this->config('printable.settings');
-    $this->assertFieldByName('print_pdf_pdf_tool', $config->get('printable.pdf_tool'), 'The field was found with the correct value.');
-    $this->assertFieldByName('print_pdf_content_disposition', $config->get('printable.save_pdf'), 'The field was found with the correct value.');
-    $this->assertFieldByName('print_pdf_paper_size', $config->get('printable.paper_size'), 'The field was found with the correct value.');
-    $this->assertFieldByName('print_pdf_page_orientation', $config->get('printable.page_orientation'), 'The field was found with the correct value.');
-    $this->assertFieldByName('print_pdf_filename', $config->get('printable.pdf_location'), 'The field was found with the correct value.');
+    $this->assertSession()->fieldValueEquals('print_pdf_pdf_tool', $config->get('printable.pdf_tool'));
+    $this->assertSession()->fieldValueEquals('print_pdf_content_disposition', $config->get('printable.save_pdf'));
+    $this->assertSession()->fieldValueEquals('print_pdf_paper_size', $config->get('printable.paper_size'));
+    $this->assertSession()->fieldValueEquals('print_pdf_page_orientation', $config->get('printable.page_orientation'));
+    $this->assertSession()->fieldValueEquals('print_pdf_filename', $config->get('printable.pdf_location'));
 
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'print_pdf_pdf_tool' => 'wkhtmltopdf',
       'print_pdf_content_disposition' => 1,
       'print_pdf_paper_size' => 'A10',
@@ -62,12 +62,12 @@ class PrintablePdfFormTest extends BrowserTestBase {
       'print_pdf_filename' => 'test_pdf',
     ], t('Submit'));
     $this->drupalGet('admin/config/user-interface/printable/pdf');
-    $this->assertResponse(200);
-    $this->assertFieldByName('print_pdf_pdf_tool', 'wkhtmltopdf', 'The field was found with the correct value.');
-    $this->assertFieldByName('print_pdf_content_disposition', 1, 'The field was found with the correct value.');
-    $this->assertFieldByName('print_pdf_paper_size', 'A10', 'The field was found with the correct value.');
-    $this->assertFieldByName('print_pdf_page_orientation', 'landscape', 'The field was found with the correct value.');
-    $this->assertFieldByName('print_pdf_filename', 'test_pdf', 'The field was found with the correct value.');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldValueEquals('print_pdf_pdf_tool', 'wkhtmltopdf');
+    $this->assertSession()->fieldValueEquals('print_pdf_content_disposition', 1);
+    $this->assertSession()->fieldValueEquals('print_pdf_paper_size', 'A10');
+    $this->assertSession()->fieldValueEquals('print_pdf_page_orientation', 'landscape');
+    $this->assertSession()->fieldValueEquals('print_pdf_filename', 'test_pdf');
   }
 
 }
diff --git a/src/Tests/PrintablePdfTest.php b/src/Tests/PrintablePdfTest.php
index 865c92e..4f681e4 100644
--- a/src/Tests/PrintablePdfTest.php
+++ b/src/Tests/PrintablePdfTest.php
@@ -39,7 +39,7 @@ class PrintablePdfTest extends NodeTestBase {
   /**
    * Perform any initial set up tasks that run before every test method.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $web_user = $this->drupalCreateUser([
       'create page content',
@@ -60,20 +60,21 @@ class PrintablePdfTest extends NodeTestBase {
     // Test /node/add page with only one content type.
     $node_type_storage->load('article')->delete();
     $this->drupalGet('node/add');
-    $this->assertResponse(200);
-    $this->assertUrl('node/add/page');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('node/add/page');
     // Create a node.
     $edit = [];
     $edit['title[0][value]'] = $this->randomMachineName(8);
     $bodytext = $this->randomMachineName(16) . 'This is functional test which I am writing for printable module.';
     $edit['body[0][value]'] = $bodytext;
-    $this->drupalPostForm('node/add/page', $edit, t('Save'));
+    $this->drupalGet('node/add/page');
+    $this->submitForm($edit, t('Save'));
 
     // Check that the Basic page has been created.
-    $this->assertRaw(t('@post %title has been created.', [
+    $this->assertSession()->responseContains(t('@post %title has been created.', [
       '@post' => 'Basic page',
       '%title' => $edit['title[0][value]'],
-    ]), 'Basic page created.');
+    ]));
 
     // Check that the node exists in the database.
     $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
@@ -81,17 +82,17 @@ class PrintablePdfTest extends NodeTestBase {
 
     // Verify that pages do not show submitted information by default.
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Set the PDF generating tool.
     $this->drupalGet('admin/config/user-interface/printable/pdf');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'print_pdf_pdf_tool' => 'mPDF',
       'print_pdf_content_disposition' => 1,
       'print_pdf_filename' => 'modules/custom/printable/src/Tests/testPDF',
     ], t('Submit'));
     $this->drupalGet('admin/config/user-interface/printable/pdf');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Test whether PDF page is being generated.
     $this->drupalGet('node/' . $node->id() . '/printable/pdf');
@@ -106,16 +107,17 @@ class PrintablePdfTest extends NodeTestBase {
     $new_edit['title[0][value]'] = $this->randomMachineName(8);
     $bodytext = $text;
     $new_edit['body[0][value]'] = $bodytext;
-    $this->drupalPostForm('node/add/page', $new_edit, t('Save'));
+    $this->drupalGet('node/add/page');
+    $this->submitForm($new_edit, t('Save'));
     $new_node = $this->drupalGetNodeByTitle($new_edit['title[0][value]']);
     $this->drupalGet('node/' . $new_node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Checks the presence of body in the page.
-    $this->assertRaw($edit['body[0][value]'], 'Body discovered successfully in the printable page');
+    $this->assertSession()->responseContains($edit['body[0][value]']);
 
     // Check if footer is rendering correctly.
-    $this->assertRaw($base_url . '/node/' . $node->id(), 'Source Url discovered in the printable page');
+    $this->assertSession()->responseContains($base_url . '/node/' . $node->id());
   }
 
 }
diff --git a/src/Tests/PrintableUninstallTest.php b/src/Tests/PrintableUninstallTest.php
index 547382e..d328f70 100644
--- a/src/Tests/PrintableUninstallTest.php
+++ b/src/Tests/PrintableUninstallTest.php
@@ -26,7 +26,7 @@ class PrintableUninstallTest extends NodeTestBase {
   /**
    * Perform any initial set up tasks that run before every test method.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $web_user = $this->drupalCreateUser([
       'create page content',
@@ -45,19 +45,20 @@ class PrintableUninstallTest extends NodeTestBase {
     // Test /node/add page with only one content type.
     $node_type_storage->load('article')->delete();
     $this->drupalGet('node/add');
-    $this->assertResponse(200);
-    $this->assertUrl('node/add/page');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('node/add/page');
     // Create a node.
     $edit = [];
     $edit['title[0][value]'] = $this->randomMachineName(8);
     $edit['body[0][value]'] = $this->randomMachineName(16);
-    $this->drupalPostForm('node/add/page', $edit, t('Save'));
+    $this->drupalGet('node/add/page');
+    $this->submitForm($edit, t('Save'));
 
     // Check that the Basic page has been created.
-    $this->assertRaw(t('@post %title has been created.', [
+    $this->assertSession()->responseContains(t('@post %title has been created.', [
       '@post' => 'Basic page',
       '%title' => $edit['title[0][value]'],
-    ]), 'Basic page created.');
+    ]));
 
     // Check that the node exists in the database.
     $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
@@ -65,15 +66,15 @@ class PrintableUninstallTest extends NodeTestBase {
 
     // Verify that pages do not show submitted information by default.
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet('node/' . $node->id() . '/printable/print');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Uninstall the printable module and check the printable version of node
     // is also deleted.
     \Drupal::service('module_installer')->uninstall(['printable']);
     $this->drupalGet('node/' . $node->id() . '/printable/print');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
   }
 
 }
diff --git a/tests/src/Unit/Plugin/Block/PrintableLinkBlockTest.php b/tests/src/Unit/Plugin/Block/PrintableLinkBlockTest.php
index 7521d86..ce17951 100644
--- a/tests/src/Unit/Plugin/Block/PrintableLinkBlockTest.php
+++ b/tests/src/Unit/Plugin/Block/PrintableLinkBlockTest.php
@@ -45,10 +45,7 @@ class PrintableLinkBlockTest extends UnitTestCase {
    * @covers PrintableLinksBlock::build
    */
   public function testBuild() {
-    $routematch = $this->getMockBuilder('Drupal\Core\Routing\CurrentRouteMatch')
-      ->disableOriginalConstructor()
-      ->setMethods(['getMasterRouteMatch', 'getParameter'])
-      ->getMock();
+    $routematch = $this->createMock('Drupal\Core\Routing\CurrentRouteMatch');
     $routematch->expects($this->exactly(2))
       ->method('getMasterRouteMatch')
       ->will($this->returnSelf());
@@ -62,9 +59,7 @@ class PrintableLinkBlockTest extends UnitTestCase {
         'target' => '_blank',
       ],
     ];
-    $links_builder = $this->getMockBuilder('Drupal\printable\PrintableLinkBuilderInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $links_builder = $this->createMock('Drupal\printable\PrintableLinkBuilderInterface');
     $links_builder->expects($this->once())
       ->method('buildLinks')
       ->will($this->returnValue($links));
diff --git a/tests/src/Unit/Plugin/Derivative/PrintableFormatConfigureTabsTest.php b/tests/src/Unit/Plugin/Derivative/PrintableFormatConfigureTabsTest.php
index c542ae6..7b0ccba 100644
--- a/tests/src/Unit/Plugin/Derivative/PrintableFormatConfigureTabsTest.php
+++ b/tests/src/Unit/Plugin/Derivative/PrintableFormatConfigureTabsTest.php
@@ -29,9 +29,7 @@ class PrintableFormatConfigureTabsTest extends UnitTestCase {
    * @covers PrintableFormatConfigureTabs::GetDerivativeDefinitions
    */
   public function testGetDerivativeDefinitions() {
-    $printable_format_manager = $this->getMockBuilder('Drupal\printable\PrintableFormatPluginManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $printable_format_manager = $this->createMock('Drupal\printable\PrintableFormatPluginManager');
     $printable_format_manager->expects($this->once())
       ->method('getDefinitions')
       ->will($this->returnValue([
diff --git a/tests/src/Unit/Plugin/Derivative/PrintableLinksBlockTest.php b/tests/src/Unit/Plugin/Derivative/PrintableLinksBlockTest.php
index 81fb6f7..6c653f8 100644
--- a/tests/src/Unit/Plugin/Derivative/PrintableLinksBlockTest.php
+++ b/tests/src/Unit/Plugin/Derivative/PrintableLinksBlockTest.php
@@ -29,13 +29,9 @@ class PrintableLinksBlockTest extends UnitTestCase {
    * @covers PrintableLinksBlock::GetDerivativeDefinitions
    */
   public function testGetDerivativeDefinitions() {
-    $entity_definition = $this->getMockBuilder('Drupal\Core\Entity\EntityType')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_definition = $this->createMock('Drupal\Core\Entity\EntityType');
 
-    $printable_format_manager = $this->getMockBuilder('Drupal\printable\PrintableEntityManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $printable_format_manager = $this->createMock('Drupal\printable\PrintableEntityManager');
     $printable_format_manager->expects($this->once())
       ->method('getPrintableEntities')
       ->will($this->returnValue([
diff --git a/tests/src/Unit/Plugin/PrintableFormat/PrintFormatTest.php b/tests/src/Unit/Plugin/PrintableFormat/PrintFormatTest.php
index fe3e235..aa478ff 100644
--- a/tests/src/Unit/Plugin/PrintableFormat/PrintFormatTest.php
+++ b/tests/src/Unit/Plugin/PrintableFormat/PrintFormatTest.php
@@ -120,9 +120,7 @@ class PrintFormatTest extends UnitTestCase {
   public function testSetConfiguration() {
     $new_configuration = ['show_print_dialogue' => FALSE];
 
-    $config_mock = $this->getMockBuilder('\Drupal\Core\Config\Config')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config_mock = $this->createMock('\Drupal\Core\Config\Config');
     $config_mock->expects($this->once())
       ->method('set')
       ->with('print', $new_configuration)
@@ -130,9 +128,7 @@ class PrintFormatTest extends UnitTestCase {
     $config_mock->expects($this->once())
       ->method('save');
 
-    $config_factory_mock = $this->getMockBuilder('\Drupal\Core\Config\ConfigFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config_factory_mock = $this->createMock('\Drupal\Core\Config\ConfigFactory');
     $config_factory_mock->expects($this->once())
       ->method('get')
       ->with('printable.format')
@@ -148,18 +144,14 @@ class PrintFormatTest extends UnitTestCase {
    * Get the CSS include stub.
    */
   protected function getCssIncludeStub() {
-    return $this->getMockBuilder('Drupal\printable\PrintableCssIncludeInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    return $this->createMock('Drupal\printable\PrintableCssIncludeInterface');
   }
 
   /**
    * Get the Link extractor stub.
    */
   protected function getLinkExtractorIncludeStub() {
-    return $this->getMockBuilder('Drupal\printable\LinkExtractor\LinkExtractorInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    return $this->createMock('Drupal\printable\LinkExtractor\LinkExtractorInterface');
   }
 
 }
diff --git a/tests/src/Unit/PrintableCssIncludeTest.php b/tests/src/Unit/PrintableCssIncludeTest.php
index 9d36e2f..bde50aa 100644
--- a/tests/src/Unit/PrintableCssIncludeTest.php
+++ b/tests/src/Unit/PrintableCssIncludeTest.php
@@ -37,9 +37,7 @@ class PrintableCssIncludeTest extends UnitTestCase {
       'bartik' => new \stdClass(),
     ];
     $theme_info['bartik']->uri = 'core/themes/bartik/bartik.info.yml';
-    $theme_handler = $this->getMockBuilder('Drupal\Core\Extension\ThemeHandlerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $theme_handler = $this->createMock('Drupal\Core\Extension\ThemeHandlerInterface');
     $theme_handler->expects($this->any())
       ->method('listInfo')
       ->will($this->returnValue($theme_info));
diff --git a/tests/src/Unit/PrintableEntityManagerTest.php b/tests/src/Unit/PrintableEntityManagerTest.php
index a2177ce..7640bf0 100644
--- a/tests/src/Unit/PrintableEntityManagerTest.php
+++ b/tests/src/Unit/PrintableEntityManagerTest.php
@@ -30,9 +30,7 @@ class PrintableEntityManagerTest extends UnitTestCase {
    */
   public function testGetPrintableEntities() {
     // Construct a printable entity manager and it's dependencies.
-    $entity_definition = $this->getMockBuilder('Drupal\Core\Entity\EntityType')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_definition = $this->createMock('Drupal\Core\Entity\EntityType');
     $entity_definition->expects($this->any())
       ->method('hasHandlerClass')
       ->will($this->returnValue(TRUE));
diff --git a/tests/src/Unit/PrintableLinkBuilderTest.php b/tests/src/Unit/PrintableLinkBuilderTest.php
index 29298fc..47b8eaa 100644
--- a/tests/src/Unit/PrintableLinkBuilderTest.php
+++ b/tests/src/Unit/PrintableLinkBuilderTest.php
@@ -43,9 +43,7 @@ class PrintableLinkBuilderTest extends UnitTestCase {
 
     $config = $this->getConfigFactoryStub(['printable.settings' => ['open_target_blank' => TRUE]]);
 
-    $printable_manager = $this->getMockBuilder('Drupal\printable\PrintableFormatPluginManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $printable_manager = $this->createMock('Drupal\printable\PrintableFormatPluginManager');
     $printable_manager->expects($this->once())
       ->method('getDefinitions')
       ->will($this->returnValue($definitions));
