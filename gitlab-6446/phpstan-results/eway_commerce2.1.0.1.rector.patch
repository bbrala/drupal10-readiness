diff --git a/eway_gate.module b/eway_gate.module
index 748ab14..fbd61cb 100644
--- a/eway_gate.module
+++ b/eway_gate.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Core\Config\ImmutableConfig;
+use Eway\Rapid;
+use Eway\Rapid\Enum\ApiMethod;
 /**
  * @file
  * Main functions of the module.
@@ -30,7 +33,7 @@ function eway_gate_help($route_name, RouteMatchInterface $route_match) {
 /**
  * Submits an API request to eWAY.
  */
-function eway_gate_api_request(array $transaction, \Drupal\Core\Config\ImmutableConfig $config) {
+function eway_gate_api_request(array $transaction, ImmutableConfig $config) {
   if (!$config->get('eway_gate.api_key') || $config->get('eway_gate.api_pass')) {
     Drupal::logger('eway_gate')->alert('eWay credentials are not set up properly.');
 
@@ -38,19 +41,19 @@ function eway_gate_api_request(array $transaction, \Drupal\Core\Config\Immutable
   }
 
   // POST payment to eWAY API.
-  $client = \Eway\Rapid::createClient(
+  $client = Rapid::createClient(
     $config->get('eway_gate.api_key'),
     $config->get('eway_gate.api_pass'),
     $config->get('eway_gate.api_env'),
   );
 
-  $response = $client->createTransaction(\Eway\Rapid\Enum\ApiMethod::TRANSPARENT_REDIRECT, $transaction);
+  $response = $client->createTransaction(ApiMethod::TRANSPARENT_REDIRECT, $transaction);
 
   if (!$response->getErrors()) {
     return $response;
   } else {
     foreach ($response->getErrors() as $error) {
-      Drupal::logger('eway_gate')->error(\Eway\Rapid::getMessage($error));
+      Drupal::logger('eway_gate')->error(Rapid::getMessage($error));
     }
   }
 
diff --git a/src/EwayTransactionManager.php b/src/EwayTransactionManager.php
index fb869d9..36902b1 100644
--- a/src/EwayTransactionManager.php
+++ b/src/EwayTransactionManager.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\eway_gate;
 
+use Eway\Rapid;
+use Eway\Rapid\Enum\ApiMethod;
+use Eway\Rapid\Enum\TransactionType;
 use Drupal\commerce_payment\Entity\PaymentInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\commerce_payment\Entity\PaymentMethodInterface;
@@ -119,7 +122,7 @@ class EwayTransactionManager implements TransactionManagerInterface {
 
   public function getClient() {
     if (!$this->client && $this->apiKey && $this->apiPass && $this->apiEnv) {
-      $this->client = $client = \Eway\Rapid::createClient(
+      $this->client = $client = Rapid::createClient(
         $this->apiKey, $this->apiPass, $this->apiEnv
       );
     }
@@ -168,14 +171,14 @@ class EwayTransactionManager implements TransactionManagerInterface {
       $customer['Country'] = $billing_address->getCountryCode();
     }
 
-    $response = $client->createCustomer(\Eway\Rapid\Enum\ApiMethod::DIRECT, $customer);
+    $response = $client->createCustomer(ApiMethod::DIRECT, $customer);
 
     if (!$response->getErrors()) {
       return $response->Customer->TokenCustomerID;
     } else {
       foreach ($response->getErrors() as $error) {
         \Drupal::logger('eway_gate')->error('eWay Error: @message.', [
-          '@message' => \Eway\Rapid::getMessage($error)
+          '@message' => Rapid::getMessage($error)
         ]);
       }
 
@@ -198,7 +201,7 @@ class EwayTransactionManager implements TransactionManagerInterface {
     } else {
       foreach ($response->getErrors() as $error) {
         \Drupal::logger('eway_gate')->error('eWay Error: @message.', [
-          '@message' => \Eway\Rapid::getMessage($error)
+          '@message' => Rapid::getMessage($error)
         ]);
       }
 
@@ -221,10 +224,10 @@ class EwayTransactionManager implements TransactionManagerInterface {
         'TotalAmount' => $amount->getNumber() * 100,
         'InvoiceReference' => $payment->getOrderId()
       ],
-      'TransactionType' => \Eway\Rapid\Enum\TransactionType::RECURRING,
+      'TransactionType' => TransactionType::RECURRING,
     ];
 
-    $response = $client->createTransaction(\Eway\Rapid\Enum\ApiMethod::DIRECT, $transaction);
+    $response = $client->createTransaction(ApiMethod::DIRECT, $transaction);
 
     if ($response->TransactionStatus) {
       return $response->TransactionID;
@@ -232,7 +235,7 @@ class EwayTransactionManager implements TransactionManagerInterface {
       if ($response->getErrors()) {
         foreach ($response->getErrors() as $error) {
           \Drupal::logger('eway_gate')->error('eWay Error: @message.', [
-            '@message' => \Eway\Rapid::getMessage($error)
+            '@message' => Rapid::getMessage($error)
           ]);
         }
       } else {
@@ -259,14 +262,14 @@ class EwayTransactionManager implements TransactionManagerInterface {
       ]
     ];
 
-    $response = $client->updateCustomer(\Eway\Rapid\Enum\ApiMethod::DIRECT, $customer);
+    $response = $client->updateCustomer(ApiMethod::DIRECT, $customer);
 
     if (!$response->getErrors()) {
       return $response->Customer->TokenCustomerID;
     } else {
       foreach ($response->getErrors() as $error) {
         \Drupal::logger('eway_gate')->error('eWay Error: @message.', [
-          '@message' => \Eway\Rapid::getMessage($error)
+          '@message' => Rapid::getMessage($error)
         ]);
       }
 
