modules/contrib/media_download_path/media_download_path.module
modules/contrib/media_download_path/src/MediaDownloadPathMediaHelperTrait.php
modules/contrib/media_download_path/src/MediaDownloadPathTwigExtension.php
modules/contrib/media_download_path/src/PageCache/CacheableBinaryFileResponse.php
modules/contrib/media_download_path/src/Plugin/Field/FieldType/MediaDownloadPathFieldItemList.php
modules/contrib/media_download_path/src/Plugin/Field/FieldType/MediaDownloadPathItem.php
modules/contrib/media_download_path/src/Plugin/Field/FieldWidget/MediaDownloadPathWidget.php
modules/contrib/media_download_path/tests/src/Functional/DownloadAliasTest.php

1 file with changes
===================

1) modules/contrib/media_download_path/tests/src/Functional/DownloadAliasTest.php:52

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create test user and log in.
@@ @@

     // Alias1.
     $alias1 = '/' . $this->randomMachineName();
-    $this->drupalPostForm('media/' . $media->id() . '/edit', [
+    $this->drupalGet('media/' . $media->id() . '/edit');
+    $this->submitForm([
       'media_download_path[0][alias]' => $alias1,
     ], $this->t('Save'));
     $this->assertSession()->pageTextContains("Only the alias with the following extensions are allowed: {$extensions}.");
@@ @@

     // Alias2.
     $alias2 = $alias1 . '.png';
-    $this->drupalPostForm('media/' . $media->id() . '/edit', [
+    $this->drupalGet('media/' . $media->id() . '/edit');
+    $this->submitForm([
       'media_download_path[0][alias]' => $alias2,
     ], $this->t('Save'));
     $this->assertSession()->pageTextContains("Only the alias with the following extensions are allowed: {$extensions}.");
@@ @@

     // Alias3.
     $alias3 = $alias1 . '.txt';
-    $this->drupalPostForm('media/' . $media->id() . '/edit', [
+    $this->drupalGet('media/' . $media->id() . '/edit');
+    $this->submitForm([
       'media_download_path[0][alias]' => $alias3,
     ], $this->t('Save'));
     $this->assertSession()->pageTextNotContains("Only the alias with the following extensions are allowed: {$extensions}.");
@@ @@
     ]);
     $this->assertTrue(1 === count($aliases));
     $this->drupalGet(trim($alias3, '/'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

   /**
@@ @@
     $this->assertEquals($this->fileExtensions, $extensions_imploder, 'Media Extensions correct');

     $alias1 = '/' . $this->randomMachineName();
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'name[0][value]' => $title,
       'media_download_path[0][alias]' => $alias1,
     ], $this->t('Save'));
@@ @@
     $this->assertEquals($this->fileExtensions, $extensions_imploder, 'Media Extensions correct');

     $alias2 = $alias1 . '.pdf';
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'name[0][value]' => $title,
       'media_download_path[0][alias]' => $alias2,
     ], $this->t('Save'));
@@ @@
     $this->assertEquals('txt', $extensions_imploder, 'Media Extensions correct');

     $alias3 = $alias1 . '.pdf';
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'name[0][value]' => $title,
       'media_download_path[0][alias]' => $alias3,
     ], $this->t('Save'));
@@ @@
     $this->assertSession()->pageTextContains("Only the alias with the following extensions are allowed: {$extensions_imploder}.");

     $alias4 = $alias1 . '.txt';
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'name[0][value]' => $title,
       'media_download_path[0][alias]' => $alias4,
     ], $this->t('Save'));
@@ @@
     $alias_obj = array_shift($aliases);
     $this->assertEquals($alias4, $alias_obj->getAlias(), 'Media download path correct');
     $this->drupalGet(trim($alias4, '/'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

   /**
@@ @@

     // @scenario 1: Alias creation.
     $test_alias = '/' . $this->randomMachineName() . '.txt';
-    $this->drupalPostForm('media/' . $media->id() . '/edit', [
+    $this->drupalGet('media/' . $media->id() . '/edit');
+    $this->submitForm([
       'media_download_path[0][alias]' => $test_alias,
     ], $this->t('Save'));

@@ @@

     // Confirm that the alias works.
     $this->drupalGet(trim($test_alias, '/'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // @scenario 2: Alias update.
     $test_alias_2 = '/' . $this->randomMachineName() . '.txt';
-    $this->drupalPostForm('media/' . $media->id() . '/edit', [
+    $this->drupalGet('media/' . $media->id() . '/edit');
+    $this->submitForm([
       'media_download_path[0][alias]' => $test_alias_2
     ], $this->t('Save'));

@@ @@

     // Confirm that the alias works.
     $this->drupalGet(trim($test_alias, '/'));
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->drupalGet(trim($test_alias_2, '/'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // @scenario 3: Alias deletion.
     $test_alias_3 = '';
-    $this->drupalPostForm('media/' . $media->id() . '/edit', [
+    $this->drupalGet('media/' . $media->id() . '/edit');
+    $this->submitForm([
       'media_download_path[0][alias]' => $test_alias_3,
     ], $this->t('Save'));

@@ @@

     // Confirm that the alias works.
     $this->drupalGet(trim($test_alias, '/'));
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->drupalGet(trim($test_alias_2, '/'));
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $this->drupalGet(trim(MediaDownloadPathItem::getMediaDownloadPath($media)));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

   /**
@@ @@
   public function testDuplicateAliases() {
     // @scenario 1: Alias creation.
     $test_alias = '/' . $this->randomMachineName() . '.txt';
+    $this->drupalGet('media/add/' . $this->mediaType->id());

-    $this->drupalPostForm('media/add/' . $this->mediaType->id(), [
+    $this->submitForm([
       'name[0][value]' => $this->randomString(),
       'media_download_path[0][alias]' => $test_alias,
     ], $this->t('Save'));
@@ @@
     $this->aliasStorage->resetCache();

     $test_alias_2 = '/' . $this->randomMachineName() . '.txt';
+    $this->drupalGet('media/' . $media->id() . '/edit');

-    $this->drupalPostForm('media/' . $media->id() . '/edit', [
+    $this->submitForm([
       'media_download_path[0][alias]' => $test_alias_2
     ], $this->t('Save'));

@@ @@
     $this->aliasStorage->resetCache();

     $test_alias_3 = '';
+    $this->drupalGet('media/' . $media->id() . '/edit');

-    $this->drupalPostForm('media/' . $media->id() . '/edit', [
+    $this->submitForm([
       'media_download_path[0][alias]' => $test_alias_3
     ], $this->t('Save'));
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 1 file has been changed by Rector                                         

