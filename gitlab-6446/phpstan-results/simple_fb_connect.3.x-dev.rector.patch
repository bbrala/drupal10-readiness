diff --git a/src/SimpleFbConnectFbManager.php b/src/SimpleFbConnectFbManager.php
index 1934ad8..ec30e42 100644
--- a/src/SimpleFbConnectFbManager.php
+++ b/src/SimpleFbConnectFbManager.php
@@ -112,7 +112,7 @@ class SimpleFbConnectFbManager {
     // Set the scope twice on the event: as the main subject but also in the
     // list of arguments.
     $e = new GenericEvent($scope, ['scope' => $scope]);
-    $event = $this->eventDispatcher->dispatch('simple_fb_connect.scope', $e);
+    $event = $this->eventDispatcher->dispatch($e, 'simple_fb_connect.scope');
     $final_scope = $event->getArgument('scope');
 
     // Generate and return the URL where we should redirect the user.
diff --git a/src/SimpleFbConnectUserManager.php b/src/SimpleFbConnectUserManager.php
index ce9ea3b..eea626b 100644
--- a/src/SimpleFbConnectUserManager.php
+++ b/src/SimpleFbConnectUserManager.php
@@ -255,7 +255,7 @@ class SimpleFbConnectUserManager {
       'account' => $new_user,
       'fbid' => $fbid,
     ]);
-    $this->eventDispatcher->dispatch('simple_fb_connect.user_created', $event);
+    $this->eventDispatcher->dispatch($event, 'simple_fb_connect.user_created');
 
     // Validate the new user.
     /** @var \Drupal\user\UserInterface $new_user */
@@ -338,7 +338,7 @@ class SimpleFbConnectUserManager {
       // Set the account twice on the event: as the main subject but also in the
       // list of arguments.
       $event = new GenericEvent($drupal_user, ['account' => $drupal_user]);
-      $this->eventDispatcher->dispatch('simple_fb_connect.user_login', $event);
+      $this->eventDispatcher->dispatch($event, 'simple_fb_connect.user_login');
 
       // @todo Add Boost cookie if Boost module is enabled
       // https://www.drupal.org/node/2524372
@@ -685,7 +685,7 @@ class SimpleFbConnectUserManager {
    * @see user_password
    */
   protected function userPassword($length) {
-    return user_password($length);
+    return \Drupal::service('password_generator')->generate($length);
   }
 
   /**
diff --git a/tests/src/Unit/SimpleFbConnectFbFactoryTest.php b/tests/src/Unit/SimpleFbConnectFbFactoryTest.php
index a458787..081a4a8 100644
--- a/tests/src/Unit/SimpleFbConnectFbFactoryTest.php
+++ b/tests/src/Unit/SimpleFbConnectFbFactoryTest.php
@@ -47,9 +47,7 @@ class SimpleFbConnectFbFactoryTest extends UnitTestCase {
 
     $this->loggerFactory = $this->createMock('Drupal\Core\Logger\LoggerChannelFactoryInterface');
 
-    $this->persistentDataHandler = $this->getMockBuilder('Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->persistentDataHandler = $this->createMock('Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler');
   }
 
   /**
@@ -96,9 +94,7 @@ class SimpleFbConnectFbFactoryTest extends UnitTestCase {
    * @dataProvider getFbServiceBadDataProvider
    */
   public function testGetFbServiceWithBadData($app_id, $app_secret) {
-    $logger_channel = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannel')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger_channel = $this->createMock('Drupal\Core\Logger\LoggerChannel');
 
     $this->loggerFactory
       ->expects($this->any())
diff --git a/tests/src/Unit/SimpleFbConnectFbManagerTest.php b/tests/src/Unit/SimpleFbConnectFbManagerTest.php
index 82799e7..2155e93 100644
--- a/tests/src/Unit/SimpleFbConnectFbManagerTest.php
+++ b/tests/src/Unit/SimpleFbConnectFbManagerTest.php
@@ -74,9 +74,7 @@ class SimpleFbConnectFbManagerTest extends UnitTestCase {
 
     $this->urlGenerator = $this->createMock('Drupal\Core\Routing\UrlGeneratorInterface');
 
-    $this->persistentDataHandler = $this->getMockBuilder('Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->persistentDataHandler = $this->createMock('Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler');
 
     $this->fbManager = new SimpleFbConnectFbManager(
       $this->loggerFactory,
@@ -86,9 +84,7 @@ class SimpleFbConnectFbManagerTest extends UnitTestCase {
       $this->persistentDataHandler
     );
 
-    $this->facebook = $this->getMockBuilder('Facebook\Facebook')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->facebook = $this->createMock('Facebook\Facebook');
     $this->fbManager->setFacebookService($this->facebook);
   }
 
@@ -98,9 +94,7 @@ class SimpleFbConnectFbManagerTest extends UnitTestCase {
    * @covers ::getFbReRequestUrl
    */
   public function testGetFbReRequestUrl() {
-    $login_helper = $this->getMockBuilder('Facebook\Helpers\FacebookRedirectLoginHelper')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $login_helper = $this->createMock('Facebook\Helpers\FacebookRedirectLoginHelper');
 
     $login_helper
       ->expects($this->once())
diff --git a/tests/src/Unit/SimpleFbConnectPostLoginManagerTest.php b/tests/src/Unit/SimpleFbConnectPostLoginManagerTest.php
index c693461..3b85a80 100644
--- a/tests/src/Unit/SimpleFbConnectPostLoginManagerTest.php
+++ b/tests/src/Unit/SimpleFbConnectPostLoginManagerTest.php
@@ -67,9 +67,7 @@ class SimpleFbConnectPostLoginManagerTest extends UnitTestCase {
       ->setMethods(['getUrlIfValid', 'toString'])
       ->getMockForAbstractClass();
 
-    $this->persistentDataHandler = $this->getMockBuilder('Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->persistentDataHandler = $this->createMock('Drupal\simple_fb_connect\SimpleFbConnectPersistentDataHandler');
 
     $this->postLoginManager = new SimpleFbConnectPostLoginManager(
       $this->configFactory,
@@ -213,9 +211,7 @@ class SimpleFbConnectPostLoginManagerTest extends UnitTestCase {
    * @covers ::getPathToUserForm
    */
   public function testGetPathToUserForm() {
-    $user = $this->getMockBuilder('Drupal\user\Entity\User')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user = $this->createMock('Drupal\user\Entity\User');
 
     $user
       ->expects($this->any())
@@ -244,10 +240,7 @@ class SimpleFbConnectPostLoginManagerTest extends UnitTestCase {
    *   Value to be returned from 'toString' method.
    */
   protected function generateStubUrl($external, $path) {
-    $url = $this->getMockBuilder('Drupal\Core\Url')
-      ->disableOriginalConstructor()
-      ->setMethods(['isExternal', 'toString'])
-      ->getMock();
+    $url = $this->createMock('Drupal\Core\Url');
 
     $url
       ->expects($this->any())
diff --git a/tests/src/Unit/SimpleFbConnectUserManagerTest.php b/tests/src/Unit/SimpleFbConnectUserManagerTest.php
index 301dcf0..b885bcb 100644
--- a/tests/src/Unit/SimpleFbConnectUserManagerTest.php
+++ b/tests/src/Unit/SimpleFbConnectUserManagerTest.php
@@ -111,22 +111,15 @@ class SimpleFbConnectUserManagerTest extends UnitTestCase {
       ->setMethods(['load'])
       ->getMockForAbstractClass();
 
-    $this->entityFieldManager = $this->getMockBuilder('Drupal\Core\Entity\EntityFieldManagerInterface')
-      ->getMock();
+    $this->entityFieldManager = $this->createMock('Drupal\Core\Entity\EntityFieldManagerInterface');
 
-    $this->token = $this->getMockBuilder('Drupal\Core\Utility\Token')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->token = $this->createMock('Drupal\Core\Utility\Token');
 
-    $this->transliteration = $this->getMockBuilder('Drupal\Core\Transliteration\PhpTransliteration')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->transliteration = $this->createMock('Drupal\Core\Transliteration\PhpTransliteration');
 
-    $this->languageManager = $this->getMockBuilder('Drupal\Core\Language\LanguageManagerInterface')
-      ->getMock();
+    $this->languageManager = $this->createMock('Drupal\Core\Language\LanguageManagerInterface');
 
-    $this->fileSystem = $this->getMockBuilder('Drupal\Core\File\FileSystemInterface')
-      ->getMock();
+    $this->fileSystem = $this->createMock('Drupal\Core\File\FileSystemInterface');
 
     // Note that we are creating an instance of TestSimpleFbConnectUserManager
     // instead of SimpleFbConnectUserManager. The test class overriders the
@@ -155,9 +148,7 @@ class SimpleFbConnectUserManagerTest extends UnitTestCase {
    * @dataProvider loginUserDataProvider
    */
   public function testLoginUser($user, $expected) {
-    $logger_channel = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannel')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger_channel = $this->createMock('Drupal\Core\Logger\LoggerChannel');
 
     $this->loggerFactory
       ->expects($this->any())
@@ -177,17 +168,13 @@ class SimpleFbConnectUserManagerTest extends UnitTestCase {
    * @see ::testLoginuser()
    */
   public function loginUserDataProvider() {
-    $user_1 = $this->getMockBuilder('Drupal\user\Entity\User')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user_1 = $this->createMock('Drupal\user\Entity\User');
     $user_1
       ->expects($this->any())
       ->method('id')
       ->willReturn(1);
 
-    $user_2 = $this->getMockBuilder('Drupal\user\Entity\User')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user_2 = $this->createMock('Drupal\user\Entity\User');
     $user_2
       ->expects($this->any())
       ->method('id')
@@ -197,9 +184,7 @@ class SimpleFbConnectUserManagerTest extends UnitTestCase {
       ->method('getRoles')
       ->willReturn(['authenticated', 'blocked_role']);
 
-    $user_3 = $this->getMockBuilder('Drupal\user\Entity\User')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user_3 = $this->createMock('Drupal\user\Entity\User');
     $user_3
       ->expects($this->any())
       ->method('id')
@@ -213,9 +198,7 @@ class SimpleFbConnectUserManagerTest extends UnitTestCase {
       ->method('isActive')
       ->willReturn(FALSE);
 
-    $user_4 = $this->getMockBuilder('Drupal\user\Entity\User')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user_4 = $this->createMock('Drupal\user\Entity\User');
     $user_4
       ->expects($this->any())
       ->method('id')
@@ -254,9 +237,7 @@ class SimpleFbConnectUserManagerTest extends UnitTestCase {
     );
     $this->userManager->setConfigFactory($new_config_factory);
 
-    $logger_channel = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannel')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger_channel = $this->createMock('Drupal\Core\Logger\LoggerChannel');
 
     $this->loggerFactory
       ->expects($this->any())
@@ -264,9 +245,7 @@ class SimpleFbConnectUserManagerTest extends UnitTestCase {
       ->with('simple_fb_connect')
       ->willReturn($logger_channel);
 
-    $fb_profile_pic = $this->getMockBuilder('Facebook\GraphNodes\GraphNode')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $fb_profile_pic = $this->createMock('Facebook\GraphNodes\GraphNode');
 
     $this->assertFalse($this->userManager->createUser('Firstname Lastname', 'foo@example.com', 12345, $fb_profile_pic));
   }
@@ -279,17 +258,13 @@ class SimpleFbConnectUserManagerTest extends UnitTestCase {
    */
   public function testCreateUser() {
     // User object that will be created in this test.
-    $user = $this->getMockBuilder('Drupal\user\Entity\User')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user = $this->createMock('Drupal\user\Entity\User');
 
     // Storage object that will be created in this test.
-    $storage = $this->getMockBuilder('Drupal\Core\Entity\EntityStorageInterface')
-      ->getMock();
+    $storage = $this->createMock('Drupal\Core\Entity\EntityStorageInterface');
 
     // Language object that will be created in this test.
-    $language = $this->getMockBuilder('Drupal\Core\Language\LanguageInterface')
-      ->getMock();
+    $language = $this->createMock('Drupal\Core\Language\LanguageInterface');
 
     // Called when we're generating an unique username.
     $storage
@@ -322,9 +297,7 @@ class SimpleFbConnectUserManagerTest extends UnitTestCase {
       ->method('getCurrentLanguage')
       ->willReturn($language);
 
-    $logger_channel = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannel')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger_channel = $this->createMock('Drupal\Core\Logger\LoggerChannel');
 
     $this->loggerFactory
       ->expects($this->any())
@@ -332,9 +305,7 @@ class SimpleFbConnectUserManagerTest extends UnitTestCase {
       ->with('simple_fb_connect')
       ->willReturn($logger_channel);
 
-    $fb_profile_pic = $this->getMockBuilder('Facebook\GraphNodes\GraphNode')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $fb_profile_pic = $this->createMock('Facebook\GraphNodes\GraphNode');
 
     $this->assertInstanceOf('Drupal\user\Entity\User', $this->userManager->createUser('Firstname Lastname', 'foo@example.com', 12345, $fb_profile_pic));
   }
@@ -348,8 +319,7 @@ class SimpleFbConnectUserManagerTest extends UnitTestCase {
    * @dataProvider generateUniqueUsernameWithNoConflictsDataProvider
    */
   public function testGenerateUniqueUsernameWithNoConflicts($fb_name, $expected) {
-    $storage = $this->getMockBuilder('Drupal\Core\Entity\EntityStorageInterface')
-      ->getMock();
+    $storage = $this->createMock('Drupal\Core\Entity\EntityStorageInterface');
 
     $storage
       ->expects($this->once())
@@ -393,12 +363,9 @@ class SimpleFbConnectUserManagerTest extends UnitTestCase {
    * @dataProvider generateUniqueUsernameWithConflictDataProvider
    */
   public function testGenerateUniqueUsernameWithConflict($fb_name, $expected) {
-    $existing_user = $this->getMockBuilder('Drupal\user\Entity\User')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $existing_user = $this->createMock('Drupal\user\Entity\User');
 
-    $storage = $this->getMockBuilder('Drupal\Core\Entity\EntityStorageInterface')
-      ->getMock();
+    $storage = $this->createMock('Drupal\Core\Entity\EntityStorageInterface');
 
     $storage
       ->expects($this->any())
@@ -489,9 +456,7 @@ class SimpleFbConnectUserManagerTest extends UnitTestCase {
       ->method('transliterate')
       ->willReturn($picture_directory);
 
-    $logger_channel = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannel')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger_channel = $this->createMock('Drupal\Core\Logger\LoggerChannel');
 
     $this->loggerFactory
       ->expects($this->any())
@@ -542,16 +507,13 @@ class SimpleFbConnectUserManagerTest extends UnitTestCase {
         ));
 
     // File object.
-    $file = $this->getMockBuilder('Drupal\file\Entity\File')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $file = $this->createMock('Drupal\file\Entity\File');
     $file
       ->expects($this->once())
       ->method('id')
       ->willReturn(1);
 
-    $storage = $this->getMockBuilder('Drupal\Core\Entity\EntityStorageInterface')
-      ->getMock();
+    $storage = $this->createMock('Drupal\Core\Entity\EntityStorageInterface');
 
     $storage
       ->expects($this->once())
@@ -565,9 +527,7 @@ class SimpleFbConnectUserManagerTest extends UnitTestCase {
       ->with('file')
       ->willReturn($storage);
 
-    $user = $this->getMockBuilder('Drupal\user\Entity\User')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user = $this->createMock('Drupal\user\Entity\User');
 
     $this->assertTrue($this->userManager->setProfilePic($user, 'http://www.example.com/picture.jpg', '12345'));
   }
