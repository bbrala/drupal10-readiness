modules/contrib/jsonapi_layout_builder/jsonapi_layout_builder.module
modules/contrib/jsonapi_layout_builder/src-impostor-normalizers/FieldNormalizerImpostor.php
modules/contrib/jsonapi_layout_builder/src/IncludeResolver.php
modules/contrib/jsonapi_layout_builder/src/JsonapiLayoutBuilderServiceProvider.php
modules/contrib/jsonapi_layout_builder/src/Layout/LayoutSettings.php
modules/contrib/jsonapi_layout_builder/src/LayoutBuilderLoaderManager.php
modules/contrib/jsonapi_layout_builder/src/Normalizer/FieldNormalizer.php
modules/contrib/jsonapi_layout_builder/src/Normalizer/JsonApiNormalizerDecoratorBase.php
modules/contrib/jsonapi_layout_builder/src/Routing/Routes.php

2 files with changes
====================

1) modules/contrib/jsonapi_layout_builder/src/LayoutBuilderLoaderManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_layout_builder;

+use Symfony\Component\Routing\Route;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Plugin\Context\Context;
@@ @@
     if ($this->route === NULL) {
       $this->route = \Drupal::routeMatch()->getRouteObject();
     }
-    if (!$this->route instanceof \Symfony\Component\Routing\Route || !$this->route->hasDefault('_is_jsonapi')) {
+    if (!$this->route instanceof Route || !$this->route->hasDefault('_is_jsonapi')) {
       return FALSE;
     }
     return TRUE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


2) modules/contrib/jsonapi_layout_builder/jsonapi_layout_builder.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\jsonapi_layout_builder\Layout\LayoutSettings;
+use Drupal\block_content\Entity\BlockContent;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 /**
  * @file
  * Contains jsonapi_layout_builder.module.
@@ @@
   foreach ($definitions as $id => $def) {
     /** @var \Drupal\Core\Layout\LayoutDefinition $def */
     $class = $def->getClass();
-    $def->setClass(\Drupal\jsonapi_layout_builder\Layout\LayoutSettings::class);
+    $def->setClass(LayoutSettings::class);
     $def->set('base_class', $class);
   }
 }
@@ @@
       if (strpos($config['id'], 'inline_block:') === 0) {
         $block = \Drupal::service('entity.repository')
           ->loadEntityByUuid('block_content', $config['uuid']);
-        if (!$block instanceof \Drupal\block_content\Entity\BlockContent) {
+        if (!$block instanceof BlockContent) {
           continue;
         }
         $components[$uuid] = $block->id();
@@ @@
         'field_name' => $field_name,
         'type' => 'entity_reference',
         'locked' => TRUE,
-        'cardinality' => \Drupal\Core\Field\FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,
+        'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,
         'settings' => [
           'target_type' => 'block_content',
         ],
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 2 files have been changed by Rector                                       

