diff --git a/knowledge.module b/knowledge.module
index 6fef87f..31e609c 100644
--- a/knowledge.module
+++ b/knowledge.module
@@ -37,7 +37,7 @@ use Drupal\user\UserInterface;
  *
  * @todo Remove when https://www.drupal.org/node/1029708 lands.
  */
-define('KNOWLEDGE_NEW_LIMIT', REQUEST_TIME - 30 * 24 * 60 * 60);
+define('KNOWLEDGE_NEW_LIMIT', \Drupal::time()->getRequestTime() - 30 * 24 * 60 * 60);
 
 /**
  * Implements hook_help().
diff --git a/modules/knowledge_external_incident/src/Controller/ExternalIncidentController.php b/modules/knowledge_external_incident/src/Controller/ExternalIncidentController.php
index 95b5e2f..c1d7683 100644
--- a/modules/knowledge_external_incident/src/Controller/ExternalIncidentController.php
+++ b/modules/knowledge_external_incident/src/Controller/ExternalIncidentController.php
@@ -124,7 +124,7 @@ class ExternalIncidentController extends ControllerBase implements ContainerInje
           ]));
         }
         else {
-          $link = $external_incident->link($date);
+          $link = $external_incident->toLink($date)->toString();
         }
 
         $row = [];
diff --git a/modules/knowledge_external_incident/tests/src/Functional/LoadTest.php b/modules/knowledge_external_incident/tests/src/Functional/LoadTest.php
index 2af91dc..d244bc9 100644
--- a/modules/knowledge_external_incident/tests/src/Functional/LoadTest.php
+++ b/modules/knowledge_external_incident/tests/src/Functional/LoadTest.php
@@ -29,7 +29,7 @@ class LoadTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
diff --git a/modules/knowledge_incident/src/Controller/IncidentController.php b/modules/knowledge_incident/src/Controller/IncidentController.php
index 4fe70ed..bf0f884 100644
--- a/modules/knowledge_incident/src/Controller/IncidentController.php
+++ b/modules/knowledge_incident/src/Controller/IncidentController.php
@@ -124,7 +124,7 @@ class IncidentController extends ControllerBase implements ContainerInjectionInt
           ]));
         }
         else {
-          $link = $incident->link($date);
+          $link = $incident->toLink($date)->toString();
         }
 
         $row = [];
diff --git a/src/KnowledgeForm.php b/src/KnowledgeForm.php
index 33d3c59..aa58064 100644
--- a/src/KnowledgeForm.php
+++ b/src/KnowledgeForm.php
@@ -245,7 +245,7 @@ class KnowledgeForm extends ContentEntityForm {
       $knowledge->setCreatedTime($form_state->getValue('date')->getTimestamp());
     }
     else {
-      $knowledge->setCreatedTime(REQUEST_TIME);
+      $knowledge->setCreatedTime(\Drupal::time()->getRequestTime());
     }
     // Empty author ID should revert to anonymous.
     $author_id = $form_state->getValue('uid');
diff --git a/src/KnowledgeStatistics.php b/src/KnowledgeStatistics.php
index 876a558..82faca9 100644
--- a/src/KnowledgeStatistics.php
+++ b/src/KnowledgeStatistics.php
@@ -132,7 +132,7 @@ class KnowledgeStatistics implements KnowledgeStatisticsInterface {
         $last_knowledge_uid = $this->currentUser->id();
       }
       // Default to REQUEST_TIME when entity does not have a changed property.
-      $last_knowledge_timestamp = REQUEST_TIME;
+      $last_knowledge_timestamp = \Drupal::time()->getRequestTime();
       // @todo Make knowledge statistics language aware and add some tests. See
       //   https://www.drupal.org/node/2318875
       if ($entity instanceof EntityChangedInterface) {
@@ -300,7 +300,7 @@ class KnowledgeStatistics implements KnowledgeStatisticsInterface {
           'short_count' => 0,
           // Use the changed date of the entity if it's set, or default to
           // REQUEST_TIME.
-          'last_knowledge_timestamp' => ($entity instanceof EntityChangedInterface) ? $entity->getChangedTimeAcrossTranslations() : REQUEST_TIME,
+          'last_knowledge_timestamp' => ($entity instanceof EntityChangedInterface) ? $entity->getChangedTimeAcrossTranslations() : \Drupal::time()->getRequestTime(),
           'last_knowledge_uid' => $last_knowledge_uid,
         ])
         ->condition('entity_id', $knowledge->getKnowledgeedEntityId())
diff --git a/tests/src/Functional/KnowledgeBlockTest.php b/tests/src/Functional/KnowledgeBlockTest.php
index 09d6623..d845ca4 100644
--- a/tests/src/Functional/KnowledgeBlockTest.php
+++ b/tests/src/Functional/KnowledgeBlockTest.php
@@ -47,7 +47,7 @@ class KnowledgeBlockTest extends KnowledgeTestBase {
     // Add some test knowledge, with and without subjects. Because the 10 newest
     // knowledge should be shown by the block, we create 11 to test that behavior
     // below.
-    $timestamp = REQUEST_TIME;
+    $timestamp = \Drupal::time()->getRequestTime();
     for ($i = 0; $i < 11; ++$i) {
       $subject = ($i % 2) ? $this->randomMachineName() : '';
       $knowledge_links[$i] = $this->postKnowledge($this->node, $this->randomMachineName(), $subject);
diff --git a/tests/src/Functional/KnowledgeTestBase.php b/tests/src/Functional/KnowledgeTestBase.php
index 7b45a7b..cd7aeae 100644
--- a/tests/src/Functional/KnowledgeTestBase.php
+++ b/tests/src/Functional/KnowledgeTestBase.php
@@ -54,7 +54,7 @@ abstract class KnowledgeTestBase extends BrowserTestBase {
    */
   protected $node;
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create an article content type only if it does not yet exist, so that
diff --git a/tests/src/Functional/KnowledgeTranslationUITest.php b/tests/src/Functional/KnowledgeTranslationUITest.php
index aeb8824..12467bc 100644
--- a/tests/src/Functional/KnowledgeTranslationUITest.php
+++ b/tests/src/Functional/KnowledgeTranslationUITest.php
@@ -174,7 +174,7 @@ class KnowledgeTranslationUITest extends ContentTranslationUITestBase {
       $user = $this->drupalCreateUser();
       $values[$langcode] = [
         'uid' => $user->id(),
-        'created' => REQUEST_TIME - mt_rand(0, 1000),
+        'created' => \Drupal::time()->getRequestTime() - mt_rand(0, 1000),
       ];
       /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
       $date_formatter = $this->container->get('date.formatter');
diff --git a/tests/src/Functional/Views/DefaultViewRecentKnowledgesTest.php b/tests/src/Functional/Views/DefaultViewRecentKnowledgesTest.php
index ea40750..52e0d80 100644
--- a/tests/src/Functional/Views/DefaultViewRecentKnowledgesTest.php
+++ b/tests/src/Functional/Views/DefaultViewRecentKnowledgesTest.php
@@ -96,7 +96,7 @@ class DefaultViewRecentKnowledgesTest extends ViewTestBase {
       $knowledge->knowledge_body->format = 'full_html';
 
       // Ensure knowledge are sorted in ascending order.
-      $time = REQUEST_TIME + ($this->defaultDisplayResults - $i);
+      $time = \Drupal::time()->getRequestTime() + ($this->defaultDisplayResults - $i);
       $knowledge->setCreatedTime($time);
       $knowledge->changed->value = $time;
 
diff --git a/tests/src/Functional/Views/KnowledgeTestBase.php b/tests/src/Functional/Views/KnowledgeTestBase.php
index 9689b94..aee927f 100644
--- a/tests/src/Functional/Views/KnowledgeTestBase.php
+++ b/tests/src/Functional/Views/KnowledgeTestBase.php
@@ -55,7 +55,7 @@ abstract class KnowledgeTestBase extends ViewTestBase {
    */
   protected $knowledge;
 
-  protected function setUp($import_test_views = TRUE, $modules = ['knowledge_test_views']) {
+  protected function setUp($import_test_views = TRUE, $modules = ['knowledge_test_views']): void {
     parent::setUp($import_test_views, $modules);
 
     // Add two users, create a node with the user1 as author and another node
diff --git a/tests/src/Kernel/Views/KnowledgeViewsKernelTestBase.php b/tests/src/Kernel/Views/KnowledgeViewsKernelTestBase.php
index 2fb552d..3e7606d 100644
--- a/tests/src/Kernel/Views/KnowledgeViewsKernelTestBase.php
+++ b/tests/src/Kernel/Views/KnowledgeViewsKernelTestBase.php
@@ -39,7 +39,7 @@ abstract class KnowledgeViewsKernelTestBase extends ViewsKernelTestBase {
    */
   protected $userStorage;
 
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);
 
     ViewTestData::createTestViews(static::class, ['knowledge_test_views']);
diff --git a/tests/src/Unit/KnowledgeManagerTest.php b/tests/src/Unit/KnowledgeManagerTest.php
index b7e8ea9..dc451cf 100644
--- a/tests/src/Unit/KnowledgeManagerTest.php
+++ b/tests/src/Unit/KnowledgeManagerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\knowledge\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\knowledge\KnowledgeManager;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -16,6 +17,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class KnowledgeManagerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests the getFields method.
    *
diff --git a/tests/src/Unit/KnowledgeStatisticsUnitTest.php b/tests/src/Unit/KnowledgeStatisticsUnitTest.php
index 833a29d..6ad4994 100644
--- a/tests/src/Unit/KnowledgeStatisticsUnitTest.php
+++ b/tests/src/Unit/KnowledgeStatisticsUnitTest.php
@@ -51,17 +51,13 @@ class KnowledgeStatisticsUnitTest extends UnitTestCase {
    * Sets up required mocks and the KnowledgeStatistics service under test.
    */
   protected function setUp(): void {
-    $this->statement = $this->getMockBuilder('Drupal\sqlite\Driver\Database\sqlite\Statement')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->statement = $this->createMock('Drupal\sqlite\Driver\Database\sqlite\Statement');
 
     $this->statement->expects($this->any())
       ->method('fetchObject')
       ->willReturnCallback([$this, 'fetchObjectCallback']);
 
-    $this->select = $this->getMockBuilder('Drupal\Core\Database\Query\Select')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->select = $this->createMock('Drupal\Core\Database\Query\Select');
 
     $this->select->expects($this->any())
       ->method('fields')
@@ -75,9 +71,7 @@ class KnowledgeStatisticsUnitTest extends UnitTestCase {
       ->method('execute')
       ->will($this->returnValue($this->statement));
 
-    $this->database = $this->getMockBuilder('Drupal\Core\Database\Connection')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->database = $this->createMock('Drupal\Core\Database\Connection');
 
     $this->database->expects($this->once())
       ->method('select')
diff --git a/tests/src/Unit/Plugin/views/field/KnowledgeBulkFormTest.php b/tests/src/Unit/Plugin/views/field/KnowledgeBulkFormTest.php
index 3934dcc..0e6773a 100644
--- a/tests/src/Unit/Plugin/views/field/KnowledgeBulkFormTest.php
+++ b/tests/src/Unit/Plugin/views/field/KnowledgeBulkFormTest.php
@@ -60,9 +60,7 @@ class KnowledgeBulkFormTest extends UnitTestCase {
 
     $messenger = $this->createMock('Drupal\Core\Messenger\MessengerInterface');
 
-    $views_data = $this->getMockBuilder('Drupal\views\ViewsData')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $views_data = $this->createMock('Drupal\views\ViewsData');
     $views_data->expects($this->any())
       ->method('get')
       ->with('knowledge')
@@ -78,14 +76,10 @@ class KnowledgeBulkFormTest extends UnitTestCase {
       ->with('base_table')
       ->will($this->returnValue('knowledge'));
 
-    $executable = $this->getMockBuilder('Drupal\views\ViewExecutable')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $executable = $this->createMock('Drupal\views\ViewExecutable');
     $executable->storage = $storage;
 
-    $display = $this->getMockBuilder('Drupal\views\Plugin\views\display\DisplayPluginBase')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $display = $this->createMock('Drupal\views\Plugin\views\display\DisplayPluginBase');
 
     $definition['title'] = '';
     $options = [];
