diff --git a/src/Controller/ProductController.php b/src/Controller/ProductController.php
index b9829ed..191ddbe 100644
--- a/src/Controller/ProductController.php
+++ b/src/Controller/ProductController.php
@@ -54,8 +54,8 @@ class ProductController extends ControllerBase implements ContainerInjectionInte
    * Displays a Product revision.
    */
   public function revisionShow($product_revision) {
-    $product = $this->entityManager()->getStorage('product')->loadRevision($product_revision);
-    $view_builder = $this->entityManager()->getViewBuilder('product');
+    $product = \Drupal::service('entity_type.manager')->getStorage('product')->loadRevision($product_revision);
+    $view_builder = \Drupal::service('entity_type.manager')->getViewBuilder('product');
 
     return $view_builder->view($product);
   }
@@ -64,7 +64,7 @@ class ProductController extends ControllerBase implements ContainerInjectionInte
    * Page title callback for a Product revision.
    */
   public function revisionPageTitle($product_revision) {
-    $product = $this->entityManager()->getStorage('product')->loadRevision($product_revision);
+    $product = \Drupal::service('entity_type.manager')->getStorage('product')->loadRevision($product_revision);
     return $this->t('Revision of %title from %date', [
       '%title' => $product->label(),
       '%date' => $this->dateFormatter->format($product->getRevisionCreationTime()),
@@ -80,7 +80,7 @@ class ProductController extends ControllerBase implements ContainerInjectionInte
     $langname = $product->language()->getName();
     $languages = $product->getTranslationLanguages();
     $has_translations = (count($languages) > 1);
-    $product_storage = $this->entityManager()->getStorage('product');
+    $product_storage = \Drupal::service('entity_type.manager')->getStorage('product');
 
     $build['#title'] = $has_translations ? $this->t('@langname revisions for %title', [
       '@langname' => $langname,
@@ -117,7 +117,7 @@ class ProductController extends ControllerBase implements ContainerInjectionInte
           ]));
         }
         else {
-          $link = $product->link($date);
+          $link = $product->toLink($date)->toString();
         }
 
         $row = [];
diff --git a/src/Form/ProductForm.php b/src/Form/ProductForm.php
index 57cbcd7..3749ecd 100644
--- a/src/Form/ProductForm.php
+++ b/src/Form/ProductForm.php
@@ -74,7 +74,7 @@ class ProductForm extends ContentEntityForm {
       $entity->setNewRevision();
 
       // If a new revision is created, save the current user as revision author.
-      $entity->setRevisionCreationTime(REQUEST_TIME);
+      $entity->setRevisionCreationTime(\Drupal::time()->getRequestTime());
       $entity->setRevisionUserId($this->account->id());
     }
     else {
@@ -85,13 +85,13 @@ class ProductForm extends ContentEntityForm {
 
     switch ($status) {
       case SAVED_NEW:
-        drupal_set_message($this->t('Created the %label Product.', [
+        $this->messenger()->addStatus($this->t('Created the %label Product.', [
           '%label' => $entity->label(),
         ]));
         break;
 
       default:
-        drupal_set_message($this->t('Saved the %label Product.', [
+        $this->messenger()->addStatus($this->t('Saved the %label Product.', [
           '%label' => $entity->label(),
         ]));
     }
diff --git a/src/Form/ProductRevisionDeleteForm.php b/src/Form/ProductRevisionDeleteForm.php
index f8b748c..4cf6dab 100644
--- a/src/Form/ProductRevisionDeleteForm.php
+++ b/src/Form/ProductRevisionDeleteForm.php
@@ -73,7 +73,7 @@ class ProductRevisionDeleteForm extends ConfirmFormBase {
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return $this->t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => format_date($this->revision->getRevisionCreationTime())]);
+    return $this->t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime())]);
   }
 
   /**
@@ -110,8 +110,8 @@ class ProductRevisionDeleteForm extends ConfirmFormBase {
       '%title' => $this->revision->label(),
       '%revision' => $this->revision->getRevisionId(),
     ]);
-    drupal_set_message($this->t('Revision from %revision-date of Product %title has been deleted.', [
-      '%revision-date' => format_date($this->revision->getRevisionCreationTime()),
+    $this->messenger()->addStatus($this->t('Revision from %revision-date of Product %title has been deleted.', [
+      '%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()),
       '%title' => $this->revision->label(),
     ]));
     $form_state->setRedirect(
diff --git a/src/Form/ProductRevisionRevertForm.php b/src/Form/ProductRevisionRevertForm.php
index 0e499d4..c0dc79a 100644
--- a/src/Form/ProductRevisionRevertForm.php
+++ b/src/Form/ProductRevisionRevertForm.php
@@ -123,7 +123,7 @@ class ProductRevisionRevertForm extends ConfirmFormBase {
       '%title' => $this->revision->label(),
       '%revision' => $this->revision->getRevisionId(),
     ]);
-    drupal_set_message($this->t('Product %title has been reverted to the revision from %revision-date.', [
+    $this->messenger()->addStatus($this->t('Product %title has been reverted to the revision from %revision-date.', [
       '%title' => $this->revision->label(),
       '%revision-date' => $this->dateFormatter->format($original_revision_timestamp),
     ]));
@@ -147,7 +147,7 @@ class ProductRevisionRevertForm extends ConfirmFormBase {
   protected function prepareRevertedRevision(ProductInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());
 
     return $revision;
   }
diff --git a/src/Form/ProductRevisionRevertTranslationForm.php b/src/Form/ProductRevisionRevertTranslationForm.php
index de6091f..b7e5884 100644
--- a/src/Form/ProductRevisionRevertTranslationForm.php
+++ b/src/Form/ProductRevisionRevertTranslationForm.php
@@ -110,7 +110,7 @@ class ProductRevisionRevertTranslationForm extends ProductRevisionRevertForm {
 
     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());
 
     return $latest_revision_translation;
   }
diff --git a/src/Form/ProductTypeDeleteForm.php b/src/Form/ProductTypeDeleteForm.php
index 8a7d1cb..f411580 100644
--- a/src/Form/ProductTypeDeleteForm.php
+++ b/src/Form/ProductTypeDeleteForm.php
@@ -38,14 +38,12 @@ class ProductTypeDeleteForm extends EntityConfirmFormBase {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->entity->delete();
 
-    drupal_set_message(
-      $this->t('content @type: deleted @label.',
-        [
-          '@type' => $this->entity->bundle(),
-          '@label' => $this->entity->label(),
-        ]
-        )
-    );
+    $this->messenger()->addStatus($this->t('content @type: deleted @label.',
+      [
+        '@type' => $this->entity->bundle(),
+        '@label' => $this->entity->label(),
+      ]
+      ));
 
     $form_state->setRedirectUrl($this->getCancelUrl());
   }
diff --git a/src/Form/ProductTypeForm.php b/src/Form/ProductTypeForm.php
index 83d33d3..f0e08bc 100644
--- a/src/Form/ProductTypeForm.php
+++ b/src/Form/ProductTypeForm.php
@@ -49,13 +49,13 @@ class ProductTypeForm extends EntityForm {
 
     switch ($status) {
       case SAVED_NEW:
-        drupal_set_message($this->t('Created the %label Product type.', [
+        $this->messenger()->addStatus($this->t('Created the %label Product type.', [
           '%label' => $product_type->label(),
         ]));
         break;
 
       default:
-        drupal_set_message($this->t('Saved the %label Product type.', [
+        $this->messenger()->addStatus($this->t('Saved the %label Product type.', [
           '%label' => $product_type->label(),
         ]));
     }
diff --git a/src/Form/StoreDeleteForm.php b/src/Form/StoreDeleteForm.php
index e657fca..bb0ad56 100644
--- a/src/Form/StoreDeleteForm.php
+++ b/src/Form/StoreDeleteForm.php
@@ -38,14 +38,12 @@ class StoreDeleteForm extends EntityConfirmFormBase {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->entity->delete();
 
-    drupal_set_message(
-      $this->t('content @type: deleted @label.',
-        [
-          '@type' => $this->entity->bundle(),
-          '@label' => $this->entity->label(),
-        ]
-        )
-    );
+    $this->messenger()->addStatus($this->t('content @type: deleted @label.',
+      [
+        '@type' => $this->entity->bundle(),
+        '@label' => $this->entity->label(),
+      ]
+      ));
 
     $form_state->setRedirectUrl($this->getCancelUrl());
   }
diff --git a/src/Form/StoreForm.php b/src/Form/StoreForm.php
index 49bc55f..801ee99 100644
--- a/src/Form/StoreForm.php
+++ b/src/Form/StoreForm.php
@@ -262,13 +262,13 @@ class StoreForm extends EntityForm {
 
     switch ($status) {
       case SAVED_NEW:
-        drupal_set_message($this->t('Created the %label Store.', [
+        $this->messenger()->addStatus($this->t('Created the %label Store.', [
           '%label' => $store->label(),
         ]));
         break;
 
       default:
-        drupal_set_message($this->t('Saved the %label Store.', [
+        $this->messenger()->addStatus($this->t('Saved the %label Store.', [
           '%label' => $store->label(),
         ]));
     }
