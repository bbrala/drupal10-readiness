modules/contrib/smsframework/modules/sms_blast/src/SmsBlastForm.php
modules/contrib/smsframework/modules/sms_devel/src/Form/SmsDevelMessageForm.php
modules/contrib/smsframework/modules/sms_user/sms_user.module
modules/contrib/smsframework/sms.install
modules/contrib/smsframework/src/Entity/SmsGateway.php
modules/contrib/smsframework/src/Exception/SmsStorageException.php
modules/contrib/smsframework/src/Plugin/SmsGateway/LogGateway.php
modules/contrib/smsframework/src/Provider/SmsProviderInterface.php
modules/contrib/smsframework/tests/modules/sms_test_gateway/sms_test_gateway.module
modules/contrib/smsframework/tests/src/Functional/SmsFrameworkIncomingBrowserTest.php
modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkMessageEntityTest.php
modules/contrib/smsframework/src/Form/PhoneNumberSettingsDeleteForm.php
modules/contrib/smsframework/src/Provider/SmsQueueProcessor.php
modules/contrib/smsframework/modules/sms_user/src/AccountRegistration.php
modules/contrib/smsframework/tests/modules/sms_test_gateway/src/EventSubscriber/SmsTestGatewayEventSubscriber.php
modules/contrib/smsframework/sms.module
modules/contrib/smsframework/sms.tokens.inc
modules/contrib/smsframework/src/Plugin/SmsGateway/SmsIncomingEventInterface.php
modules/contrib/smsframework/tests/modules/sms_test_gateway/src/Plugin/SmsGateway/DefaultCapabilities.php
modules/contrib/smsframework/src/Plugin/SmsGateway/SmsIncomingEventProcessorInterface.php
modules/contrib/smsframework/src/Form/PhoneNumberSettingsForm.php
modules/contrib/smsframework/src/Plugin/SmsGatewayPluginBase.php
modules/contrib/smsframework/tests/modules/sms_test_gateway/src/Plugin/SmsGateway/Incoming.php
modules/contrib/smsframework/src/Access/SupportsPushedReportsAccessCheck.php
modules/contrib/smsframework/src/Plugin/SmsGatewayPluginCollection.php
modules/contrib/smsframework/modules/sms_blast/tests/src/Functional/SmsBlastBrowserTest.php
modules/contrib/smsframework/src/Plugin/SmsGatewayPluginInterface.php
modules/contrib/smsframework/src/Provider/SmsQueueProcessorInterface.php
modules/contrib/smsframework/src/Plugin/SmsGatewayPluginManager.php
modules/contrib/smsframework/src/Routing/Enhancer/SmsRouteEnhancer.php
modules/contrib/smsframework/src/Plugin/SmsGatewayPluginManagerInterface.php
modules/contrib/smsframework/src/Plugin/migrate/destination/PhoneNumberSettings.php
modules/contrib/smsframework/src/Entity/SmsGatewayInterface.php
modules/contrib/smsframework/src/Routing/RouteSubscriber.php
modules/contrib/smsframework/src/Entity/SmsMessage.php
modules/contrib/smsframework/src/Annotation/SmsGateway.php
modules/contrib/smsframework/tests/modules/sms_test_gateway/src/Plugin/SmsGateway/Memory.php
modules/contrib/smsframework/src/DeliveryReportController.php
modules/contrib/smsframework/tests/src/Functional/SmsFrameworkMessageResultTestTrait.php
modules/contrib/smsframework/src/Direction.php
modules/contrib/smsframework/src/Entity/PhoneNumberSettings.php
modules/contrib/smsframework/src/SmsIncomingController.php
modules/contrib/smsframework/src/Plugin/migrate/destination/SmsVerification.php
modules/contrib/smsframework/tests/src/Functional/SmsFrameworkMessageTestTrait.php
modules/contrib/smsframework/src/SmsProcessingResponse.php
modules/contrib/smsframework/src/Views/SmsMessageViewsData.php
modules/contrib/smsframework/src/Entity/PhoneNumberSettingsInterface.php
modules/contrib/smsframework/src/Entity/PhoneNumberVerification.php
modules/contrib/smsframework/tests/bootstrap.php
modules/contrib/smsframework/tests/modules/sms_test_gateway/src/Plugin/SmsGateway/MemoryChunked.php
modules/contrib/smsframework/tests/modules/sms_test_gateway/src/Plugin/SmsGateway/MemoryOutgoingResult.php
modules/contrib/smsframework/tests/modules/sms_test_gateway/src/Plugin/SmsGateway/NoIncoming.php
modules/contrib/smsframework/tests/fixtures/migrate/drupal6.php
modules/contrib/smsframework/tests/modules/sms_test_gateway/src/Plugin/SmsGateway/ScheduleAware.php
modules/contrib/smsframework/tests/modules/sms_test_time/src/SmsTestTime.php
modules/contrib/smsframework/src/Form/SmsGatewayDeleteForm.php
modules/contrib/smsframework/src/Plugin/migrate/process/PhoneNumberSettings.php
modules/contrib/smsframework/tests/fixtures/migrate/drupal7.php
modules/contrib/smsframework/tests/fixtures/migrate/sms_confirmation_message_d6.php
modules/contrib/smsframework/src/Plugin/migrate/process/VerificationStatus.php
modules/contrib/smsframework/src/Form/SmsGatewayForm.php
modules/contrib/smsframework/tests/fixtures/migrate/sms_confirmation_message_d7.php
modules/contrib/smsframework/tests/src/Functional/SmsFrameworkBrowserTest.php
modules/contrib/smsframework/src/Plugin/migrate/source/D6SmsNumber.php
modules/contrib/smsframework/tests/fixtures/migrate/sms_user_drupal6.php
modules/contrib/smsframework/tests/src/Functional/SmsFrameworkPhoneNumberAdminTest.php
modules/contrib/smsframework/tests/fixtures/migrate/sms_user_drupal7.php
modules/contrib/smsframework/src/Plugin/migrate/source/D7SmsNumber.php
modules/contrib/smsframework/src/Entity/PhoneNumberVerificationInterface.php
modules/contrib/smsframework/tests/modules/sms_test/src/EventSubscriber/SmsTestEventSubscriber.php
modules/contrib/smsframework/src/Plugin/views/field/SmsMessageDirection.php
modules/contrib/smsframework/modules/sms_user/src/AccountRegistrationInterface.php
modules/contrib/smsframework/src/Entity/SmsDeliveryReport.php
modules/contrib/smsframework/modules/sms_user/src/ActiveHours.php
modules/contrib/smsframework/src/Provider/DefaultSmsProvider.php
modules/contrib/smsframework/modules/sms_user/src/ActiveHoursDates.php
modules/contrib/smsframework/modules/sms_user/src/ActiveHoursInterface.php
modules/contrib/smsframework/modules/sms_user/src/EventSubscriber/SmsEventSubscriber.php
modules/contrib/smsframework/modules/sms_user/src/Form/AdminSettingsForm.php
modules/contrib/smsframework/tests/src/Functional/SmsFrameworkBrowserTestBase.php
modules/contrib/smsframework/src/Form/SmsSettingsForm.php
modules/contrib/smsframework/src/Entity/SmsDeliveryReportInterface.php
modules/contrib/smsframework/tests/src/Functional/SmsFrameworkDeliveryReportTest.php
modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkMessageResultEntityTest.php
modules/contrib/smsframework/src/Form/VerifyPhoneNumberForm.php
modules/contrib/smsframework/src/Entity/SmsMessageInterface.php
modules/contrib/smsframework/src/Entity/SmsMessageResult.php
modules/contrib/smsframework/src/Provider/PhoneNumberProvider.php
modules/contrib/smsframework/tests/src/Functional/SmsFrameworkPhoneNumberTest.php
modules/contrib/smsframework/modules/sms_devel/tests/src/Functional/SmsDevelMessageTest.php
modules/contrib/smsframework/src/Provider/PhoneNumberProviderInterface.php
modules/contrib/smsframework/src/Provider/PhoneNumberVerification.php
modules/contrib/smsframework/src/Lists/PhoneNumberSettingsListBuilder.php
modules/contrib/smsframework/tests/src/Functional/SmsFrameworkDeliveryReportTestTrait.php
modules/contrib/smsframework/tests/src/Functional/SmsFrameworkGatewayAdminTest.php
modules/contrib/smsframework/src/Lists/SmsGatewayListBuilder.php
modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkPhoneNumberProviderTest.php
modules/contrib/smsframework/src/Entity/SmsMessageResultInterface.php
modules/contrib/smsframework/src/Event/RecipientGatewayEvent.php
modules/contrib/smsframework/tests/src/Functional/SmsFrameworkPhoneNumberVerifyForm.php
modules/contrib/smsframework/src/Message/SmsDeliveryReport.php
modules/contrib/smsframework/src/Message/SmsDeliveryReportInterface.php
modules/contrib/smsframework/src/Message/SmsMessage.php
modules/contrib/smsframework/src/Event/SmsDeliveryReportEvent.php
modules/contrib/smsframework/src/Event/SmsEntityPhoneNumber.php
modules/contrib/smsframework/modules/sms_user/src/Plugin/Derivative/SmsUserMenuLink.php
modules/contrib/smsframework/src/Event/SmsEvents.php
modules/contrib/smsframework/src/Provider/PhoneNumberVerificationInterface.php
modules/contrib/smsframework/modules/sms_user/tests/src/Functional/SmsFrameworkUserMenuLinksTest.php
modules/contrib/smsframework/src/Event/SmsMessageEvent.php
modules/contrib/smsframework/src/EventSubscriber/SmsDeliveryReportsProcessor.php
modules/contrib/smsframework/src/Message/SmsMessageInterface.php
modules/contrib/smsframework/src/EventSubscriber/SmsEntityPhoneNumberProcessor.php
modules/contrib/smsframework/tests/src/Functional/SmsFrameworkPhoneNumberWidgetTest.php
modules/contrib/smsframework/src/Message/SmsMessageReportStatus.php
modules/contrib/smsframework/src/Message/SmsMessageResult.php
modules/contrib/smsframework/src/EventSubscriber/SmsMessageProcessor.php
modules/contrib/smsframework/src/Message/SmsMessageResultInterface.php
modules/contrib/smsframework/src/Message/SmsMessageResultStatus.php
modules/contrib/smsframework/src/Message/SmsMessageStatus.php
modules/contrib/smsframework/src/Plugin/Field/FieldWidget/SmsTelephoneWidget.php
modules/contrib/smsframework/modules/sms_user/tests/src/Functional/SmsFrameworkUserSettingsTest.php
modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkPhoneNumberVerificationTest.php
modules/contrib/smsframework/modules/sms_sendtophone/sms_sendtophone.module
modules/contrib/smsframework/tests/src/Functional/SmsFrameworkSettingsTest.php
modules/contrib/smsframework/src/Plugin/QueueWorker/SmsProcessor.php
modules/contrib/smsframework/modules/sms_sendtophone/src/Form/AdminOverviewForm.php
modules/contrib/smsframework/tests/src/Functional/SmsFrameworkTestTrait.php
modules/contrib/smsframework/src/Exception/NoPhoneNumberException.php
modules/contrib/smsframework/src/Exception/PhoneNumberSettingsException.php
modules/contrib/smsframework/src/Exception/RecipientRouteException.php
modules/contrib/smsframework/src/Exception/SmsDirectionException.php
modules/contrib/smsframework/src/Exception/SmsException.php
modules/contrib/smsframework/src/Exception/SmsPluginReportException.php
modules/contrib/smsframework/modules/sms_sendtophone/src/Form/SendToPhoneForm.php
modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkProcessorTest.php
modules/contrib/smsframework/tests/src/Functional/SmsFrameworkUpdateTest.php
modules/contrib/smsframework/modules/sms_sendtophone/src/Plugin/Field/FieldFormatter/SmsLinkFormatter.php
modules/contrib/smsframework/modules/sms_user/tests/src/Kernel/SmsFrameworkUserAccountRegistrationServiceTest.php
modules/contrib/smsframework/modules/sms_sendtophone/src/Plugin/Field/FieldWidget/SmsSendWidget.php
modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkProviderTest.php
modules/contrib/smsframework/modules/sms_sendtophone/src/Plugin/Filter/FilterInlineSms.php
modules/contrib/smsframework/tests/src/FunctionalJavascript/SmsFrameworkPhoneNumberAdminTest.php
modules/contrib/smsframework/modules/sms_sendtophone/tests/src/Functional/SmsSendToPhoneBrowserTest.php
modules/contrib/smsframework/tests/src/Kernel/Migrate/MigrateD6SmsPhoneNumberTest.php
modules/contrib/smsframework/tests/src/Kernel/Migrate/MigrateD7SmsPhoneNumberTest.php
modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkPushedDeliveryReportTest.php
modules/contrib/smsframework/modules/sms_user/tests/src/Kernel/SmsFrameworkUserActiveHoursServiceTest.php
modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkQueueTest.php
modules/contrib/smsframework/tests/src/Kernel/Migrate/MigratePhoneNumberTestTrait.php
modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkRecipientGatewayEventTest.php
modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkSmsSendTest.php
modules/contrib/smsframework/modules/sms_user/tests/src/Kernel/SmsFrameworkUserTest.php
modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkDeliveryReportEntityTest.php
modules/contrib/smsframework/sms.api.php
modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkTokenTest.php
modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkVerificationMaintenanceTest.php
modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkViewsTest.php
modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkDeliveryReportUpdateTest.php
modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkGatewayEntityTest.php
modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkGatewayPluginTest.php
modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkIncomingRouteTest.php
modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkKernelBase.php
modules/contrib/smsframework/tests/src/Unit/Event/RecipientGatewayEventTest.php
modules/contrib/smsframework/tests/src/Unit/Message/SmsFrameworkDeliveryReportUnitTest.php
modules/contrib/smsframework/tests/src/Unit/Message/SmsFrameworkResultUnitTest.php
modules/contrib/smsframework/tests/src/Unit/Message/SmsMessageTest.php

50 files with changes
=====================

1) modules/contrib/smsframework/modules/sms_blast/tests/src/Functional/SmsBlastBrowserTest.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->drupalCreateUser(['Send SMS Blast']));

@@ @@
     $this->resetTestMessages();

     $edit['message'] = $this->randomString();
-    $this->drupalPostForm('sms_blast', $edit, t('Send'));
-    $this->assertResponse(200);
-    $this->assertText('Message sent to 3 users.');
+    $this->drupalGet('sms_blast');
+    $this->submitForm($edit, t('Send'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('Message sent to 3 users.');

     // Get the resulting message that was sent and confirm.
-    $this->assertEqual(3, count($this->getTestMessages($this->gateway)), 'Sent three messages.');
+    $this->assertEquals(3, count($this->getTestMessages($this->gateway)), 'Sent three messages.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/smsframework/tests/modules/sms_test/src/EventSubscriber/SmsTestEventSubscriber.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sms_test\EventSubscriber;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Drupal\sms\Entity\SmsGateway;
 use Drupal\sms\Event\SmsEvents;
@@ @@
   /**
    * Adds event name to execution order when a message is processed.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   The event.
    * @param string $eventName
    *   The event name.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


3) modules/contrib/smsframework/src/Provider/PhoneNumberProvider.php:51

    ---------- begin diff ----------
@@ @@
     $event = new SmsEntityPhoneNumber($entity, $verified);
     /** @var \Drupal\sms\Event\SmsEntityPhoneNumber $event */
     $event = $this->eventDispatcher
-      ->dispatch(SmsEvents::ENTITY_PHONE_NUMBERS, $event);
+      ->dispatch($event, SmsEvents::ENTITY_PHONE_NUMBERS);
     return $event->getPhoneNumbers();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


4) modules/contrib/smsframework/src/Provider/DefaultSmsProvider.php:154

    ---------- begin diff ----------
@@ @@
       ->setResponse($response)
       ->setReports($reports);
     $this->eventDispatcher
-      ->dispatch(SmsEvents::DELIVERY_REPORT_POST_PROCESS, $event);
+      ->dispatch($event, SmsEvents::DELIVERY_REPORT_POST_PROCESS);

     return $event->getResponse();
   }
@@ @@
   protected function dispatchEvent($event_name, array $sms_messages) {
     $event = new SmsMessageEvent($sms_messages);
     return $this->eventDispatcher
-      ->dispatch($event_name, $event);
+      ->dispatch($event, $event_name);
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


5) modules/contrib/smsframework/tests/src/Functional/SmsFrameworkGatewayAdminTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->smsGatewayStorage = \Drupal::entityTypeManager()
       ->getStorage('sms_gateway');
@@ @@

     // Test no access for anonymous.
     $this->drupalGet(Url::fromRoute('sms.gateway.list'));
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $account = $this->drupalCreateUser(['administer smsframework']);
     $this->drupalLogin($account);

     $this->drupalGet(Url::fromRoute('sms.gateway.list'));
-    $this->assertResponse(200);
-    $this->assertRaw('<td>Drupal log</td>');
-    $this->assertRaw('<td>Memory</td>');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseContains('<td>Drupal log</td>');
+    $this->assertSession()->responseContains('<td>Memory</td>');

     // Delete all gateways.
     $this->smsGatewayStorage->delete($this->smsGatewayStorage->loadMultiple());
     $this->drupalGet(Url::fromRoute('sms.gateway.list'));
-    $this->assertRaw(t('No gateways found.'));
+    $this->assertSession()->responseContains(t('No gateways found.'));
   }

   /**
@@ @@
     // Test initial fallback gateway.
     $sms_gateway_fallback = SmsGateway::load($this->config('sms.settings')->get('fallback_gateway'));

-    $this->assertEqual($sms_gateway_fallback->id(), 'log', 'Initial fallback gateway is "log".');
+    $this->assertEquals($sms_gateway_fallback->id(), 'log', 'Initial fallback gateway is "log".');

     $this->drupalLogin($this->drupalCreateUser(['administer smsframework']));
+    $this->drupalGet(Url::fromRoute('sms.settings'));

     // Change fallback gateway.
-    $this->drupalPostForm(Url::fromRoute('sms.settings'), [
+    $this->submitForm([
       'fallback_gateway' => $test_gateway->id(),
     ], 'Save configuration');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $sms_gateway_fallback = SmsGateway::load($this->config('sms.settings')->get('fallback_gateway'));
-    $this->assertEqual($sms_gateway_fallback->id(), $test_gateway->id(), 'Fallback gateway changed.');
+    $this->assertEquals($sms_gateway_fallback->id(), $test_gateway->id(), 'Fallback gateway changed.');
   }

   /**
@@ @@
     $this->drupalLogin($account);

     $this->drupalGet(Url::fromRoute('entity.sms_gateway.add'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $edit = [
       'label' => $this->randomString(),
@@ @@
       'status' => TRUE,
       'plugin_id' => 'memory',
     ];
-    $this->drupalPostForm(Url::fromRoute('entity.sms_gateway.add'), $edit, t('Save'));
-    $this->assertResponse(200);
+    $this->drupalGet(Url::fromRoute('entity.sms_gateway.add'));
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->statusCodeEquals(200);

-    $this->assertUrl(Url::fromRoute('entity.sms_gateway.edit_form', [
+    $this->assertSession()->addressEquals(Url::fromRoute('entity.sms_gateway.edit_form', [
       'sms_gateway' => $edit['id'],
     ]));
-    $this->assertRaw(t('Gateway created.'));
+    $this->assertSession()->responseContains(t('Gateway created.'));

     $this->drupalGet(Url::fromRoute('sms.gateway.list'));
-    $this->assertRaw('<td>' . t('@label', ['@label' => $edit['label']]) . '</td>', 'New gateway appears on list.');
+    $this->assertSession()->responseContains('<td>' . t('@label', ['@label' => $edit['label']]) . '</td>');
   }

   /**
@@ @@
     $this->drupalGet(Url::fromRoute('entity.sms_gateway.edit_form', [
       'sms_gateway' => $test_gateway->id(),
     ]));
-    $this->assertResponse(200);
-    $this->assertFieldByName('widget');
-    $this->assertNoFieldChecked('edit-skip-queue');
-    $this->assertFieldByName('retention_duration_incoming', '0');
-    $this->assertFieldByName('retention_duration_outgoing', '0');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldExists('widget');
+    $this->assertSession()->checkboxNotChecked('edit-skip-queue');
+    $this->assertSession()->fieldValueEquals('retention_duration_incoming', '0');
+    $this->assertSession()->fieldValueEquals('retention_duration_outgoing', '0');

     // Memory gateway supports pushed reports, so the URL should display.
-    $this->assertFieldByName('delivery_reports[push_path]', $test_gateway->getPushReportPath());
+    $this->assertSession()->fieldValueEquals('delivery_reports[push_path]', $test_gateway->getPushReportPath());

     // Memory gateway has a decoy configuration form.
     $edit = [
@@ @@
       'retention_duration_incoming' => '3600',
       'retention_duration_outgoing' => '-1',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertUrl(Url::fromRoute('sms.gateway.list'));
-    $this->assertResponse(200);
-    $this->assertRaw('Gateway saved.');
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->addressEquals(Url::fromRoute('sms.gateway.list'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseContains('Gateway saved.');

     // Reload the gateway, check configuration saved to config entity.
     /** @var \Drupal\sms\Entity\SmsGatewayInterface $test_gateway */
@@ @@
       ->load($test_gateway->id());

     // Gateway settings.
-    $this->assertEqual(TRUE, $test_gateway->getSkipQueue());
-    $this->assertEqual($edit['retention_duration_incoming'], $test_gateway->getRetentionDuration(Direction::INCOMING));
-    $this->assertEqual($edit['retention_duration_outgoing'], $test_gateway->getRetentionDuration(Direction::OUTGOING));
+    $this->assertEquals(TRUE, $test_gateway->getSkipQueue());
+    $this->assertEquals($edit['retention_duration_incoming'], $test_gateway->getRetentionDuration(Direction::INCOMING));
+    $this->assertEquals($edit['retention_duration_outgoing'], $test_gateway->getRetentionDuration(Direction::OUTGOING));

     // Plugin form.
     $config = $test_gateway->getPlugin()
       ->getConfiguration();
-    $this->assertEqual($edit['widget'], $config['widget'], 'Plugin configuration changed.');
+    $this->assertEquals($edit['widget'], $config['widget'], 'Plugin configuration changed.');
   }

   /**
@@ @@
     $this->drupalGet(Url::fromRoute('entity.sms_gateway.edit_form', [
       'sms_gateway' => $test_gateway->id(),
     ]));
-    $this->assertResponse(200);
-    $this->assertRaw('Edit gateway');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseContains('Edit gateway');

-    $this->assertNoFieldByName('delivery_reports[push_path]');
+    $this->assertSession()->fieldValueNotEquals('delivery_reports[push_path]', '');
   }

   /**
@@ @@
     $delete_url = Url::fromRoute('entity.sms_gateway.delete_form', [
       'sms_gateway' => $test_gateway->id(),
     ]);
-    $this->assertUrl($delete_url);
-    $this->assertRaw(t('Are you sure you want to delete SMS gateway %label?', [
+    $this->assertSession()->addressEquals($delete_url);
+    $this->assertSession()->responseContains(t('Are you sure you want to delete SMS gateway %label?', [
       '%label' => $test_gateway->label(),
     ]));
-    $this->drupalPostForm($delete_url, [], t('Delete'));
+    $this->drupalGet($delete_url);
+    $this->submitForm([], t('Delete'));

-    $this->assertUrl(Url::fromRoute('sms.gateway.list'));
-    $this->assertResponse(200);
-    $this->assertRaw(t('Gateway %label was deleted.', [
+    $this->assertSession()->addressEquals(Url::fromRoute('sms.gateway.list'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseContains(t('Gateway %label was deleted.', [
       '%label' => $test_gateway->label(),
     ]));
-    $this->assertNoRaw('<td>' . t('@label', ['@label' => $test_gateway->label()]) . '</td>');
+    $this->assertSession()->responseNotContains('<td>' . t('@label', ['@label' => $test_gateway->label()]) . '</td>');
   }

   /**
@@ @@
     $edit = [
       'incoming_messages[push_path]' => $incoming_route,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Reload the gateway, check properties modified.
     $gateway = SmsGateway::load($gateway->id());
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * AssertNoFieldCheckedRector
 * AssertNoRawRector
 * AssertRawRector
 * AssertResponseRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/smsframework/tests/src/Functional/SmsFrameworkDeliveryReportTest.php:30

    ---------- begin diff ----------
@@ @@

     $result = $sms_messages[0]->getResult();
     $this->assertTrue($result instanceof SmsMessageResultInterface);
-    $this->assertEqual(count($sms_message->getRecipients()), count($result->getReports()));
+    $this->assertEquals(count($sms_message->getRecipients()), count($result->getReports()));
     $reports = $result->getReports();

     /** @var \Drupal\sms\Message\SmsDeliveryReportInterface $first_report */
@@ @@
     $first_report = reset($reports);
     $message_id = $first_report->getMessageId();
     $this->assertTrue($first_report instanceof SmsDeliveryReportInterface);
-    $this->assertEqual($first_report->getStatus(), SmsMessageReportStatus::QUEUED);
+    $this->assertEquals($first_report->getStatus(), SmsMessageReportStatus::QUEUED);

     // Get the delivery reports url and simulate push delivery report.
     $url = $test_gateway->getPushReportUrl()->setAbsolute()->toString();
@@ @@
    ]
 }
 EOF;
-    /** @var \Symfony\Component\BrowserKit\Client $client */
+    /** @var \Symfony\Component\BrowserKit\AbstractBrowser $client */
     $client = $this->getSession()->getDriver()->getClient();
     $client->request('post', $url, ['delivery_report' => $delivery_report]);
-    $this->assertText('custom response content');
+    $this->assertSession()->pageTextContains('custom response content');
     \Drupal::state()->resetCache();

     // Get the stored report and verify that it was properly parsed.
     $second_report = $this->getTestMessageReport($message_id, $test_gateway);
     $this->assertTrue($second_report instanceof SmsDeliveryReportInterface);
-    $this->assertEqual("status message", $second_report->getStatusMessage());
-    $this->assertEqual($delivered_time, $second_report->getTimeDelivered());
-    $this->assertEqual($message_id, $second_report->getMessageId());
+    $this->assertEquals("status message", $second_report->getStatusMessage());
+    $this->assertEquals($delivered_time, $second_report->getTimeDelivered());
+    $this->assertEquals($message_id, $second_report->getMessageId());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertTextRector
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/smsframework/tests/src/Functional/SmsFrameworkBrowserTestBase.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->gatewayManager = $this->container->get('plugin.manager.sms_gateway');
     $this->defaultSmsProvider = $this->container->get('sms.provider');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/smsframework/tests/src/Functional/SmsFrameworkBrowserTest.php:45

    ---------- begin diff ----------
@@ @@
     $this->drupalLogin($this->rootUser);
     $this->drupalGet(Url::fromRoute('system.status'));

-    $this->assertRaw('There are 2 messages in the incoming queue.');
-    $this->assertRaw('There are 4 messages in the outgoing queue.');
+    $this->assertSession()->responseContains('There are 2 messages in the incoming queue.');
+    $this->assertSession()->responseContains('There are 4 messages in the outgoing queue.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/smsframework/src/EventSubscriber/SmsMessageProcessor.php:223

    ---------- begin diff ----------
@@ @@
     $event = new RecipientGatewayEvent($recipient);
     /** @var \Drupal\sms\Event\RecipientGatewayEvent $event */
     $event = $this->eventDispatcher
-      ->dispatch(SmsEvents::MESSAGE_GATEWAY, $event);
+      ->dispatch($event, SmsEvents::MESSAGE_GATEWAY);

     $gateways = $event->getGatewaysSorted();
     // Use the gateway with the greatest weight.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


10) modules/contrib/smsframework/src/Event/SmsMessageEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sms\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Event fired when SMS messages are processed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/smsframework/src/Event/SmsEntityPhoneNumber.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sms\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event fired when resolving phone numbers for an entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/smsframework/src/Event/SmsDeliveryReportEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sms\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Symfony\Component\HttpFoundation\Response;

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/smsframework/src/Event/RecipientGatewayEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sms\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\sms\Entity\SmsGatewayInterface;

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/smsframework/modules/sms_sendtophone/tests/src/Functional/SmsSendToPhoneBrowserTest.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create Basic page and Article node types.
@@ @@
     $edit = [];
     $expected = [];
     foreach (NodeType::loadMultiple() as $type) {
-      $this->assertText($type->get('name'));
+      $this->assertSession()->pageTextContains($type->get('name'));
       if (rand(0, 1) > 0.5) {
         $edit["content_types[" . $type->get('type') . "]"] = $expected[$type->get('type')] = $type->get('type');
       }
@@ @@
     }
     // Ensure at least one type is enabled.
     $edit["content_types[page]"] = $expected['page'] = 'page';
-    $this->drupalPostForm('admin/config/smsframework/sendtophone', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/smsframework/sendtophone');
+    $this->submitForm($edit, 'Save configuration');
     $saved = $this->config('sms_sendtophone.settings')->get('content_types', []);
-    $this->assertEqual($expected, $saved);
+    $this->assertEquals($expected, $saved);

     // Create a new node with sendtophone enabled and verify that the button is
     // added.
@@ @@
     $node = $this->drupalCreateNode(['type' => $types[0]]);
     $this->drupalGet($node->toUrl());
     // Confirm message for user without confirmed number.
-    $this->assertText(t('Set up and confirm your mobile number to send to phone.'));
+    $this->assertSession()->pageTextContains(t('Set up and confirm your mobile number to send to phone.'));

     // Confirm phone number.
     $phone_number = $this->randomPhoneNumbers(1)[0];
@@ @@

     $this->drupalGet($node->toUrl());
     // Confirm message for user without confirmed number.
-    $this->assertText('Send to phone');
+    $this->assertSession()->pageTextContains('Send to phone');
     $this->assertFieldByXPath('//a[@title="Send a link via SMS." and @class="sms-sendtophone"]', NULL);

     // Navigate to the "Send to phone" link.
     $this->clickLink('Send to phone');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

-    $this->assertFieldByName('number', $phone_number);
-    $this->assertFieldByName('message_display', $node->toUrl()->setAbsolute()->toString());
+    $this->assertSession()->fieldValueEquals('number', $phone_number);
+    $this->assertSession()->fieldValueEquals('message_display', $node->toUrl()->setAbsolute()->toString());

     // Click the send button there.
-    $this->drupalPostForm(NULL, ['number' => $phone_number], t('Send'));
+    $this->submitForm(['number' => $phone_number], t('Send'));

     $sms_message = $this->getLastTestMessage($this->gateway);
     $this->assertTrue(in_array($phone_number, $sms_message->getRecipients()));
-    $this->assertEqual($sms_message->getMessage(), $node->toUrl()->setAbsolute()->toString());
+    $this->assertEquals($sms_message->getMessage(), $node->toUrl()->setAbsolute()->toString());
   }

   /**
@@ @@
       'filters[filter_inline_sms][status]' => TRUE,
       'filters[filter_inline_sms][settings][display]' => 'text',
     ];
-    $this->drupalPostForm('admin/config/content/formats/manage/plain_text', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/content/formats/manage/plain_text');
+    $this->submitForm($edit, t('Save configuration'));
     // Create a new node sms markup and verify that a link is created.
     $type_names = array_keys(NodeType::loadMultiple());
     $node_body = $this->randomMachineName(30);
@@ @@

     // Unconfirmed users.
     $this->drupalGet('sms/sendtophone/inline');
-    $this->assertText('You need to set up and confirm your mobile phone to send messages');
+    $this->assertSession()->pageTextContains('You need to set up and confirm your mobile phone to send messages');

     // Confirm phone number.
     $phone_number = $this->randomPhoneNumbers(1)[0];
@@ @@

     $this->drupalGet($node->toUrl());
     // Confirm link was created for Send to phone.
-    $this->assertText("$node_body (Send to phone)");
+    $this->assertSession()->pageTextContains("$node_body (Send to phone)");

     $this->clickLink('(Send to phone)');
-    $this->assertResponse(200);
-    $this->assertText($node_body);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains($node_body);

     // Submit phone number and confirm message received.
-    $this->drupalPostForm(NULL, [], t('Send'), [
-      'query' => ['text' => $node_body],
-    ]);
+    $this->submitForm([], t('Send'));

     $sms_message = $this->getLastTestMessage($this->gateway);
-    $this->assertEqual($sms_message->getMessage(), $node_body, 'Message body "' . $node_body . '" successfully sent.');
+    $this->assertEquals($sms_message->getMessage(), $node_body, 'Message body "' . $node_body . '" successfully sent.');
   }

   /**
@@ @@

     // This is a quick-fix. Need to find out how to add display filters in code.
     $this->drupalLogin($this->rootUser);
-    $this->drupalPostForm('admin/structure/types/manage/article/display', ['fields[' . $field_name . '][type]' => 'sms_link'], 'Save');
+    $this->drupalGet('admin/structure/types/manage/article/display');
+    $this->submitForm(['fields[' . $field_name . '][type]' => 'sms_link'], 'Save');

     // Confirm phone number.
     $user = $this->drupalCreateUser();
@@ @@

     // Click send button.
     $this->drupalGet('node/' . $test_node->id());
-    $this->assertText($random_text, 'Field format works');
-    $this->assertText($random_text . ' (Send to phone)');
+    $this->assertSession()->pageTextContains($random_text);
+    $this->assertSession()->pageTextContains($random_text . ' (Send to phone)');
     $this->clickLink('Send to phone');

     // Click the send button there.
-    $this->drupalPostForm(NULL, [], 'Send', ['query' => ['text' => $random_text]]);
+    $this->submitForm([], 'Send');

     $sms_message = $this->getLastTestMessage($this->gateway);
     $this->assertTrue(in_array($phone_number, $sms_message->getRecipients()), 'Message sent to correct number');
-    $this->assertEqual($sms_message->getMessage(), $random_text, 'Field content sent to user');
+    $this->assertEquals($sms_message->getMessage(), $random_text, 'Field content sent to user');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/smsframework/modules/sms_sendtophone/src/Plugin/Filter/FilterInlineSms.php:104

    ---------- begin diff ----------
@@ @@
       case 'icon':
       default:
         if (!isset($this->settings["default_icon"]) || $this->settings["default_icon"] == 1) {
-          $icon_path = drupal_get_path('module', 'sms_sendtophone') . '/sms-send.gif';
+          $icon_path = \Drupal::service('extension.list.module')->getPath('sms_sendtophone') . '/sms-send.gif';
         }
         else {
           $icon_path = $this->settings["custom_icon_path"];
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


16) modules/contrib/smsframework/modules/sms_devel/tests/src/Functional/SmsDevelMessageTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $user = $this->drupalCreateUser(['sms_devel form']);
@@ @@
     $edit['number'] = $this->randomPhoneNumbers(1)[0];
     $edit['message'] = $this->randomString();
     $edit['skip_queue'] = TRUE;
+    $this->drupalGet(Url::fromRoute('sms_devel.message'));

-    $this->drupalPostForm(Url::fromRoute('sms_devel.message'), $edit, t('Send'));
+    $this->submitForm($edit, t('Send'));
     $this->assertSession()->responseContains('Message was processed, 1 delivery reports were generated.');

     $messages = $this->getTestMessages($this->gateway);
@@ @@
     $edit['number'] = $this->randomPhoneNumbers(1)[0];
     $edit['message'] = $this->randomString();
     $edit['skip_queue'] = FALSE;
+    $this->drupalGet(Url::fromRoute('sms_devel.message'));

-    $this->drupalPostForm(Url::fromRoute('sms_devel.message'), $edit, t('Send'));
+    $this->submitForm($edit, t('Send'));
     $this->assertSession()->responseContains('Message added to the outgoing queue.');

     $messages = SmsMessage::loadMultiple();
@@ @@
     $edit['message'] = $this->randomString();
     $edit['gateway'] = $this->gateway->id();
     $edit['skip_queue'] = TRUE;
+    $this->drupalGet(Url::fromRoute('sms_devel.message'));

-    $this->drupalPostForm(Url::fromRoute('sms_devel.message'), $edit, t('Receive'));
+    $this->submitForm($edit, t('Receive'));
     $this->assertSession()->responseContains('Message was processed, 1 delivery reports were generated.');

     $this->assertEquals($edit['message'], sms_test_gateway_get_incoming()['message']);
@@ @@
     $edit['message'] = $this->randomString();
     $edit['gateway'] = $this->gateway->id();
     $edit['skip_queue'] = FALSE;
+    $this->drupalGet(Url::fromRoute('sms_devel.message'));

-    $this->drupalPostForm(Url::fromRoute('sms_devel.message'), $edit, t('Receive'));
+    $this->submitForm($edit, t('Receive'));
     $this->assertSession()->responseContains('Message added to the incoming queue.');

     $messages = SmsMessage::loadMultiple();
@@ @@
    */
   public function testReceiveGatewayInvalid() {
     $edit['gateway'] = '';
+    $this->drupalGet(Url::fromRoute('sms_devel.message'));

-    $this->drupalPostForm(Url::fromRoute('sms_devel.message'), $edit, t('Receive'));
+    $this->submitForm($edit, t('Receive'));
     $this->assertSession()->responseContains('Gateway must be selected if receiving a message.');
   }

@@ @@
     $edit['message'] = $this->randomString();
     $edit['skip_queue'] = FALSE;
     $edit['automated'] = FALSE;
+    $this->drupalGet(Url::fromRoute('sms_devel.message'));

-    $this->drupalPostForm(Url::fromRoute('sms_devel.message'), $edit, t('Send'));
+    $this->submitForm($edit, t('Send'));

     $messages = SmsMessage::loadMultiple();
     $message = reset($messages);
@@ @@
     $date_user->setTimezone(new \DateTimeZone(date_default_timezone_get()));
     $edit['send_on[date]'] = $date_user->format('Y-m-d');
     $edit['send_on[time]'] = $date_user->format('H:i:s');
-    $this->drupalPostForm(Url::fromRoute('sms_devel.message'), $edit, t('Send'));
+    $this->drupalGet(Url::fromRoute('sms_devel.message'));
+    $this->submitForm($edit, t('Send'));

     $messages = SmsMessage::loadMultiple();
     $message = reset($messages);
@@ @@
     $edit['number'] = $this->randomPhoneNumbers(1)[0];
     $edit['message'] = $this->randomString();
     $edit['skip_queue'] = TRUE;
+    $this->drupalGet(Url::fromRoute('sms_devel.message'));

-    $this->drupalPostForm(Url::fromRoute('sms_devel.message'), $edit, t('Send'));
+    $this->submitForm($edit, t('Send'));
     $this->assertSession()->responseContains('Message could not be sent');

     $messages = $this->getTestMessages($this->gateway);
@@ @@
     $edit['message'] = $this->randomString();
     $edit['skip_queue'] = TRUE;
     $edit['verbose'] = TRUE;
+    $this->drupalGet(Url::fromRoute('sms_devel.message'));

-    $this->drupalPostForm(Url::fromRoute('sms_devel.message'), $edit, t('Send'));
+    $this->submitForm($edit, t('Send'));
     $this->assertSession()->responseContains('Message was processed, 1 delivery reports were generated.');

     $first_row = '#edit-results > tbody > tr:nth-child(1)';
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/smsframework/sms.api.php:1

    ---------- begin diff ----------
@@ @@

 declare(strict_types = 1);

+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Symfony\Component\EventDispatcher\EventSubscriberInterface;
+use Drupal\sms\Event\SmsEntityPhoneNumber;
+use Drupal\sms\Event\SmsMessageEvent;
+use Drupal\sms\Event\RecipientGatewayEvent;
+use Drupal\sms\Event\SmsDeliveryReportEvent;
+use Drupal\sms\Event\SmsEvents;
+
 // @codingStandardsIgnoreFile

 /**
@@ @@
  *   An array of gateway definitions keyed by plugin ID.
  */
 function hook_sms_gateway_info_alter(array &$gateways) {
-  $gateways['log']['label'] = new \Drupal\Core\StringTranslation\TranslatableMarkup('The Logger');
+  $gateways['log']['label'] = new TranslatableMarkup('The Logger');
 }

 /**
@@ @@
  *
  * @see \Drupal\sms_test\EventSubscriber\SmsTestEventSubscriber
  */
-class MySmsEventSubscriber implements \Symfony\Component\EventDispatcher\EventSubscriberInterface {
+class MySmsEventSubscriber implements EventSubscriberInterface {

   /**
    * An example event subscriber.
@@ @@
    *
    * @see \Drupal\sms\Event\SmsEvents::ENTITY_PHONE_NUMBERS
    */
-  public function myEntityPhoneNumbers(\Drupal\sms\Event\SmsEntityPhoneNumber $event) {
+  public function myEntityPhoneNumbers(SmsEntityPhoneNumber $event) {
     // Entity to get phone numbers for.
     $entity = $event->getEntity();
     // Add a phone number for above entity.
@@ @@
    *
    * @see \Drupal\sms\Event\SmsEvents::MESSAGE_PRE_PROCESS
    */
-  public function mySmsMessagePreprocess(\Drupal\sms\Event\SmsMessageEvent $event) {
+  public function mySmsMessagePreprocess(SmsMessageEvent $event) {
     $result = [];
     foreach ($event->getMessages() as $message) {
       // Modify or chunk messages.
@@ @@
    *
    * @see \Drupal\sms\Event\SmsEvents::MESSAGE_POST_PROCESS
    */
-  public function mySmsMessagePostProcess(\Drupal\sms\Event\SmsMessageEvent $event) {
+  public function mySmsMessagePostProcess(SmsMessageEvent $event) {
     $result = [];
     foreach ($event->getMessages() as $message) {
       // Modify or chunk messages.
@@ @@
    *
    * @see \Drupal\sms\Event\SmsEvents::MESSAGE_GATEWAY
    */
-  public function mySmsMessageGateway(\Drupal\sms\Event\RecipientGatewayEvent $event) {
+  public function mySmsMessageGateway(RecipientGatewayEvent $event) {
     // The recipient phone number.
     $event->getRecipient();
     // Add a gateway for a phone number.
@@ @@
    *
    * @see \Drupal\sms\Event\SmsEvents::DELIVERY_REPORT_POST_PROCESS
    */
-  public function myDeliveryReportPostProcessor(\Drupal\sms\Event\SmsDeliveryReportEvent $event) {
+  public function myDeliveryReportPostProcessor(SmsDeliveryReportEvent $event) {
     $event->getReports();
   }

@@ @@
    * {@inheritdoc}
    */
   public static function getSubscribedEvents() {
-    $events[\Drupal\sms\Event\SmsEvents::ENTITY_PHONE_NUMBERS][] = ['myEntityPhoneNumbers'];
-    $events[\Drupal\sms\Event\SmsEvents::MESSAGE_PRE_PROCESS][] = ['mySmsMessagePreprocess'];
-    $events[\Drupal\sms\Event\SmsEvents::MESSAGE_POST_PROCESS][] = ['mySmsMessagePostprocess'];
-    $events[\Drupal\sms\Event\SmsEvents::MESSAGE_GATEWAY][] = ['mySmsMessageGateway'];
-    $events[\Drupal\sms\Event\SmsEvents::DELIVERY_REPORT_POST_PROCESS][] = ['myDeliveryReportPostProcessor'];
+    $events[SmsEvents::ENTITY_PHONE_NUMBERS][] = ['myEntityPhoneNumbers'];
+    $events[SmsEvents::MESSAGE_PRE_PROCESS][] = ['mySmsMessagePreprocess'];
+    $events[SmsEvents::MESSAGE_POST_PROCESS][] = ['mySmsMessagePostprocess'];
+    $events[SmsEvents::MESSAGE_GATEWAY][] = ['mySmsMessageGateway'];
+    $events[SmsEvents::DELIVERY_REPORT_POST_PROCESS][] = ['myDeliveryReportPostProcessor'];
     return $events;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


18) modules/contrib/smsframework/modules/sms_user/tests/src/Kernel/SmsFrameworkUserTest.php:46

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installSchema('system', ['sequences']);
     $this->installConfig('sms_user');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/smsframework/modules/sms_user/tests/src/Kernel/SmsFrameworkUserActiveHoursServiceTest.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->activeHoursService = $this->container->get('sms_user.active_hours');
     $this->smsProvider = $this->container->get('sms.provider');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/smsframework/modules/sms_user/tests/src/Kernel/SmsFrameworkUserAccountRegistrationServiceTest.php:76

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installSchema('system', ['sequences']);
     $this->installConfig('sms_user');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/smsframework/modules/sms_user/tests/src/Functional/SmsFrameworkUserSettingsTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $account = $this->drupalCreateUser([
       'administer smsframework',
@@ @@
    */
   public function testSettingsForm() {
     $this->drupalGet(Url::fromRoute('sms_user.options'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

-    $this->assertFieldByName('active_hours[status]');
-    $this->assertNoFieldChecked('edit-active-hours-status');
+    $this->assertSession()->fieldExists('active_hours[status]');
+    $this->assertSession()->checkboxNotChecked('edit-active-hours-status');

     // Ensure default select field values.
     foreach ($this->days as $day) {
-      $this->assertOptionSelected('edit-active-hours-days-' . $day . '-start', -1);
+      $this->assertTrue($this->assertSession()->optionExists('edit-active-hours-days-' . $day . '-start', -1)->hasAttribute('selected'));
     }
     foreach ($this->days as $day) {
-      $this->assertOptionSelected('edit-active-hours-days-' . $day . '-end', 24);
+      $this->assertTrue($this->assertSession()->optionExists('edit-active-hours-days-' . $day . '-end', 24)->hasAttribute('selected'));
     }

     $edit = [
@@ @@
       'active_hours[days][thursday][start]' => -1,
       'active_hours[days][thursday][end]' => 18,
     ];
-    $this->drupalPostForm(Url::fromRoute('sms_user.options'), $edit, 'Save configuration');
-    $this->assertRaw('The configuration options have been saved.');
+    $this->drupalGet(Url::fromRoute('sms_user.options'));
+    $this->submitForm($edit, 'Save configuration');
+    $this->assertSession()->responseContains('The configuration options have been saved.');

     // Check values are saved and form reflects this.
-    $this->assertFieldChecked('edit-active-hours-status');
-    $this->assertOptionSelected('edit-active-hours-days-sunday-start', 2);
-    $this->assertOptionSelected('edit-active-hours-days-sunday-end', 22);
-    $this->assertOptionSelected('edit-active-hours-days-tuesday-start', 0);
-    $this->assertOptionSelected('edit-active-hours-days-tuesday-end', 24);
-    $this->assertOptionSelected('edit-active-hours-days-thursday-start', -1);
-    $this->assertOptionSelected('edit-active-hours-days-thursday-end', 24);
+    $this->assertSession()->checkboxChecked('edit-active-hours-status');
+    $this->assertTrue($this->assertSession()->optionExists('edit-active-hours-days-sunday-start', 2)->hasAttribute('selected'));
+    $this->assertTrue($this->assertSession()->optionExists('edit-active-hours-days-sunday-end', 22)->hasAttribute('selected'));
+    $this->assertTrue($this->assertSession()->optionExists('edit-active-hours-days-tuesday-start', 0)->hasAttribute('selected'));
+    $this->assertTrue($this->assertSession()->optionExists('edit-active-hours-days-tuesday-end', 24)->hasAttribute('selected'));
+    $this->assertTrue($this->assertSession()->optionExists('edit-active-hours-days-thursday-start', -1)->hasAttribute('selected'));
+    $this->assertTrue($this->assertSession()->optionExists('edit-active-hours-days-thursday-end', 24)->hasAttribute('selected'));

     $ranges_expected = [
       ['start' => 'sunday 2:00', 'end' => 'sunday 22:00'],
@@ @@
       'active_hours[days][wednesday][start]' => 10,
       'active_hours[days][wednesday][end]' => 9,
     ];
+    $this->drupalGet(Url::fromRoute('sms_user.options'));

-    $this->drupalPostForm(Url::fromRoute('sms_user.options'), $edit, 'Save configuration');
-    $this->assertRaw('End time must be greater than start time.');
+    $this->submitForm($edit, 'Save configuration');
+    $this->assertSession()->responseContains('End time must be greater than start time.');

     // Active hours enabled but no days.
     $edit = [
@@ @@
       'active_hours[days][wednesday][start]' => -1,
       'active_hours[days][wednesday][end]' => 24,
     ];
-    $this->drupalPostForm(Url::fromRoute('sms_user.options'), $edit, 'Save configuration');
-    $this->assertRaw('If active hours hours are enabled there must be at least one enabled day.');
+    $this->drupalGet(Url::fromRoute('sms_user.options'));
+    $this->submitForm($edit, 'Save configuration');
+    $this->assertSession()->responseContains('If active hours hours are enabled there must be at least one enabled day.');
   }

   /**
@@ @@
     $edit = [
       'account_registration[behaviour]' => 'none',
     ];
-    $this->drupalPostForm(Url::fromRoute('sms_user.options'), $edit, 'Save configuration');
-    $this->assertRaw('The configuration options have been saved.');
+    $this->drupalGet(Url::fromRoute('sms_user.options'));
+    $this->submitForm($edit, 'Save configuration');
+    $this->assertSession()->responseContains('The configuration options have been saved.');

     $settings = $this->config('sms_user.settings')->get('account_registration');
     $this->assertFalse($settings['unrecognized_sender']['status']);
@@ @@
    */
   public function testAccountRegistrationReplyTokens() {
     $this->drupalGet(Url::fromRoute('sms_user.options'));
-    $this->assertResponse(200);
-    $this->assertRaw('Available tokens include: [sms-message:*] [user:*]');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->responseContains('Available tokens include: [sms-message:*] [user:*]');
   }

   /**
@@ @@
       'account_registration[all_options][reply_status]' => TRUE,
       'account_registration[all_options][reply][message]' => $reply_message,
     ];
-    $this->drupalPostForm(Url::fromRoute('sms_user.options'), $edit, 'Save configuration');
-    $this->assertRaw('The configuration options have been saved.');
+    $this->drupalGet(Url::fromRoute('sms_user.options'));
+    $this->submitForm($edit, 'Save configuration');
+    $this->assertSession()->responseContains('The configuration options have been saved.');

     $settings = $this->config('sms_user.settings')->get('account_registration');

@@ @@
       'account_registration[incoming_pattern_options][reply][message_success]' => $reply_message_success,
       'account_registration[incoming_pattern_options][reply][message_failure]' => $reply_message_failure,
     ];
-    $this->drupalPostForm(Url::fromRoute('sms_user.options'), $edit, 'Save configuration');
-    $this->assertRaw('The configuration options have been saved.');
+    $this->drupalGet(Url::fromRoute('sms_user.options'));
+    $this->submitForm($edit, 'Save configuration');
+    $this->assertSession()->responseContains('The configuration options have been saved.');

     $settings = $this->config('sms_user.settings')->get('account_registration');

@@ @@
       'account_registration[all_options][reply_status]' => TRUE,
       'account_registration[all_options][reply][message]' => '',
     ];
-    $this->drupalPostForm(Url::fromRoute('sms_user.options'), $edit, 'Save configuration');
-    $this->assertRaw('Reply message must have a value if reply is enabled.', 'Validation failed for message on all unrecognised numbers when reply status is enabled.');
+    $this->drupalGet(Url::fromRoute('sms_user.options'));
+    $this->submitForm($edit, 'Save configuration');
+    $this->assertSession()->responseContains('Reply message must have a value if reply is enabled.');

     $edit = [
       'account_registration[behaviour]' => 'incoming_pattern',
@@ @@
       'account_registration[incoming_pattern_options][reply_status]' => TRUE,
       'account_registration[incoming_pattern_options][reply][message_success]' => '',
     ];
-    $this->drupalPostForm(Url::fromRoute('sms_user.options'), $edit, 'Save configuration');
-    $this->assertRaw('Reply message must have a value if reply is enabled.', 'Validation failed for message_success on incoming_pattern when reply status is enabled.');
+    $this->drupalGet(Url::fromRoute('sms_user.options'));
+    $this->submitForm($edit, 'Save configuration');
+    $this->assertSession()->responseContains('Reply message must have a value if reply is enabled.');

     $edit = [
       'account_registration[behaviour]' => 'incoming_pattern',
@@ @@
       'account_registration[incoming_pattern_options][reply_status]' => TRUE,
       'account_registration[incoming_pattern_options][reply][message_failure]' => '',
     ];
-    $this->drupalPostForm(Url::fromRoute('sms_user.options'), $edit, 'Save configuration');
-    $this->assertRaw('Reply message must have a value if reply is enabled.', 'Validation failed for message_failure on incoming_pattern when reply status is enabled.');
+    $this->drupalGet(Url::fromRoute('sms_user.options'));
+    $this->submitForm($edit, 'Save configuration');
+    $this->assertSession()->responseContains('Reply message must have a value if reply is enabled.');
   }

   /**
@@ @@
       'account_registration[behaviour]' => 'incoming_pattern',
       'account_registration[incoming_pattern_options][incoming_message]' => '',
     ];
-    $this->drupalPostForm(Url::fromRoute('sms_user.options'), $edit, 'Save configuration');
-    $this->assertRaw('Incoming message must be filled if using pre-incoming_pattern option');
+    $this->drupalGet(Url::fromRoute('sms_user.options'));
+    $this->submitForm($edit, 'Save configuration');
+    $this->assertSession()->responseContains('Incoming message must be filled if using pre-incoming_pattern option');

     $edit = [
       'account_registration[behaviour]' => 'incoming_pattern',
@@ @@
       'account_registration[incoming_pattern_options][send_activation_email]' => TRUE,
       'account_registration[incoming_pattern_options][incoming_message]' => $this->randomString(),
     ];
-    $this->drupalPostForm(Url::fromRoute('sms_user.options'), $edit, 'Save configuration');
-    $this->assertRaw('Activation email cannot be sent if [email] placeholder is missing.');
+    $this->drupalGet(Url::fromRoute('sms_user.options'));
+    $this->submitForm($edit, 'Save configuration');
+    $this->assertSession()->responseContains('Activation email cannot be sent if [email] placeholder is missing.');

     $edit = [
       'account_registration[behaviour]' => 'incoming_pattern',
@@ @@
       'account_registration[incoming_pattern_options][send_activation_email]' => TRUE,
       'account_registration[incoming_pattern_options][incoming_message]' => 'E [email] P [password]',
     ];
-    $this->drupalPostForm(Url::fromRoute('sms_user.options'), $edit, 'Save configuration');
-    $this->assertRaw('Activation email cannot be sent if [password] placeholder is present.');
+    $this->drupalGet(Url::fromRoute('sms_user.options'));
+    $this->submitForm($edit, 'Save configuration');
+    $this->assertSession()->responseContains('Activation email cannot be sent if [password] placeholder is present.');

     // Placeholder seperation.
     // Tests separator so regex doesn't have problems.
@@ @@
       'account_registration[behaviour]' => 'incoming_pattern',
       'account_registration[incoming_pattern_options][incoming_message]' => 'Email [email][password]',
     ];
-    $this->drupalPostForm(Url::fromRoute('sms_user.options'), $edit, 'Save configuration');
-    $this->assertRaw('There must be a separator between placeholders.');
+    $this->drupalGet(Url::fromRoute('sms_user.options'));
+    $this->submitForm($edit, 'Save configuration');
+    $this->assertSession()->responseContains('There must be a separator between placeholders.');
   }

   /**
@@ @@
    */
   public function testFormNoUserPhoneNumberSettings() {
     $this->drupalGet(Url::fromRoute('sms_user.options'));
-    $this->assertRaw('There are no phone number settings configured for the user entity type. Some features cannot operate without these settings. <a href="' . Url::fromRoute('entity.phone_number_settings.add')->toString() . '">Add phone number settings</a>.', 'Warning message displayed for no phone number settings.');
+    $this->assertSession()->responseContains('There are no phone number settings configured for the user entity type. Some features cannot operate without these settings. <a href="' . Url::fromRoute('entity.phone_number_settings.add')->toString() . '">Add phone number settings</a>.');

     $input = $this->xpath('//input[@name="account_registration[behaviour]" and @disabled="disabled" and @value="all"]');
     $this->assertTrue(count($input) === 1, "The 'All unrecognised phone numbers' radio is disabled.");
@@ @@
   public function testFormUserPhoneNumberSettings() {
     $this->createPhoneNumberSettings('user', 'user');
     $this->drupalGet(Url::fromRoute('sms_user.options'));
-    $this->assertNoRaw('There are no phone number settings configured for the user entity type. Some features cannot operate without these settings.', 'Warning message displayed for no phone number settings.');
+    $this->assertSession()->responseNotContains('There are no phone number settings configured for the user entity type. Some features cannot operate without these settings.');

     $input = $this->xpath('//input[@name="account_registration[behaviour]" and @disabled="disabled" and @value="all"]');
     $this->assertTrue(count($input) === 0, "The 'All unrecognised phone numbers' radio is not disabled.");
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertFieldCheckedRector
 * AssertNoFieldCheckedRector
 * AssertNoRawRector
 * AssertOptionSelectedRector
 * AssertRawRector
 * AssertResponseRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/smsframework/modules/sms_user/tests/src/Functional/SmsFrameworkUserMenuLinksTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $user = $this->drupalCreateUser([
       'access administration pages',
@@ @@
     $entityDisplayRepo->getFormDisplay('user', 'user', 'default')->save();
     $this->createPhoneNumberSettings('user', 'user');
     $this->drupalGet(Url::fromRoute('user.admin_index'));
-    $this->assertLink('User phone number');
+    $this->assertSession()->linkExists('User phone number');
   }

   /**
@@ @@
    */
   public function testNoDynamicMenuLinks() {
     $this->drupalGet(Url::fromRoute('user.admin_index'));
-    $this->assertNoLink('User phone number');
+    $this->assertSession()->linkNotExists('User phone number');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertLinkRector
 * AssertNoLinkRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/smsframework/modules/sms_user/src/AccountRegistration.php:120

    ---------- begin diff ----------
@@ @@
     $user->{$phone_field_name}[] = $sender_number;

     // Password.
-    $password = user_password();
+    $password = \Drupal::service('password_generator')->generate();
     $user->setPassword($password);

     $validate = $this->removeAcceptableViolations($user->validate());
@@ @@
           $user->setEmail($matches['email'][0]);
         }

-        $password = (!empty($matches['password'][0]) && $contains_password) ? $matches['password'][0] : user_password();
+        $password = (!empty($matches['password'][0]) && $contains_password) ? $matches['password'][0] : \Drupal::service('password_generator')->generate();
         $user->setPassword($password);

         $validate = $this->removeAcceptableViolations($user->validate(), $incoming_form);
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * WrapReturnRector


24) modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkKernelBase.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('sms');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkIncomingRouteTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->routeProvider = $this->container->get('router.route_provider');
   }
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkGatewayPluginTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('sms');
     $this->installEntitySchema('sms_result');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkDeliveryReportUpdateTest.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->httpClient = $this->container->get('http_client');
     $this->defaultSmsProvider = $this->container->get('sms.provider');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkDeliveryReportEntityTest.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('entity_test');
     $this->installEntitySchema('user');
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/smsframework/tests/src/Kernel/Migrate/MigrateD6SmsPhoneNumberTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->loadFixture(__DIR__ . '/../../../fixtures/migrate/drupal6.php');
   }
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/smsframework/tests/src/FunctionalJavascript/SmsFrameworkPhoneNumberAdminTest.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->entityTypeManager = $this->container->get('entity_type.manager');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/smsframework/tests/src/Functional/SmsFrameworkUpdateTest.php:66

    ---------- begin diff ----------
@@ @@
     // Confirm that the existing SMS message was not clobbered.
     /** @var \Drupal\sms\Entity\SmsMessageInterface[] $sms_messages */
     $sms_messages = SmsMessage::loadMultiple();
-    $this->assertEqual(1, count($sms_messages));
-    $this->assertEqual(2, count($sms_messages[1]->getRecipients()));
+    $this->assertEquals(1, count($sms_messages));
+    $this->assertEquals(2, count($sms_messages[1]->getRecipients()));
     $this->assertNull($sms_messages[1]->getResult());

     // Create new SMS with delivery report and save it.
@@ @@
     \Drupal::entityTypeManager()->getStorage('sms')->resetCache();

     $sms_messages = SmsMessage::loadMultiple();
-    $this->assertEqual(2, count($sms_messages));
+    $this->assertEquals(2, count($sms_messages));
     $this->assertTrue($sms_messages[2]->getResult() instanceof SmsMessageResultInterface);
-    $this->assertEqual(count($sms_message->getRecipients()), count($sms_messages[2]->getResult()->getReports()));
+    $this->assertEquals(count($sms_message->getRecipients()), count($sms_messages[2]->getResult()->getReports()));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


32) modules/contrib/smsframework/tests/src/Functional/SmsFrameworkSettingsTest.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $account = $this->drupalCreateUser([
       'administer smsframework',
@@ @@
   public function testSettingsForm() {
     $edit['fallback_gateway'] = '';
     $edit['pages[verify]'] = '/' . $this->randomMachineName();
-    $this->drupalPostForm(Url::fromRoute('sms.settings'), $edit, 'Save configuration');
-    $this->assertRaw(t('SMS settings saved.'));
+    $this->drupalGet(Url::fromRoute('sms.settings'));
+    $this->submitForm($edit, 'Save configuration');
+    $this->assertSession()->responseContains(t('SMS settings saved.'));
   }

   /**
@@ @@
     $gateway = $this->createMemoryGateway();
     $edit['fallback_gateway'] = $gateway->id();
     $edit['pages[verify]'] = '/' . $this->randomMachineName();
-    $this->drupalPostForm(Url::fromRoute('sms.settings'), $edit, 'Save configuration');
-    $this->assertRaw(t('SMS settings saved.'));
+    $this->drupalGet(Url::fromRoute('sms.settings'));
+    $this->submitForm($edit, 'Save configuration');
+    $this->assertSession()->responseContains(t('SMS settings saved.'));
   }

   /**
@@ @@
   public function testVerificationPathInvalid() {
     // Test invalid path.
     $edit['pages[verify]'] = $this->randomMachineName() . '/' . $this->randomMachineName();
-    $this->drupalPostForm(Url::fromRoute('sms.settings'), $edit, 'Save configuration');
-    $this->assertRaw(t("Path must begin with a '/' character."));
+    $this->drupalGet(Url::fromRoute('sms.settings'));
+    $this->submitForm($edit, 'Save configuration');
+    $this->assertSession()->responseContains(t("Path must begin with a '/' character."));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/smsframework/tests/src/Functional/SmsFrameworkPhoneNumberWidgetTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $account = $this->drupalCreateUser([
@@ @@
       '@url' => Url::fromRoute('sms.phone.verify')->toString(),
       '@time' => '1 hour',
     ];
-    $this->assertRaw(t('Enter a phone number. A verification code will be sent as an SMS message, you must enter the code into the <a href="@url">verification form</a> within @time.', $t_args));
+    $this->assertSession()->responseContains(t('Enter a phone number. A verification code will be sent as an SMS message, you must enter the code into the <a href="@url">verification form</a> within @time.', $t_args));

     // Create verification code, wait for confirmation.
     $edit = [
       $form_field_phone_number => '+123123123',
     ];
-    $this->drupalPostForm($test_entity->toUrl('edit-form'), $edit, t('Save'));
+    $this->drupalGet($test_entity->toUrl('edit-form'));
+    $this->submitForm($edit, t('Save'));

-    $this->assertRaw(t('A verification code has been sent to this phone number. Go to the <a href="@url">verification form</a> and enter the code. The code will expire if it is not verified in', $t_args));
+    $this->assertSession()->responseContains(t('A verification code has been sent to this phone number. Go to the <a href="@url">verification form</a> and enter the code. The code will expire if it is not verified in', $t_args));

     $input = $this->xpath('//input[@name="' . $form_field_phone_number . '" and @disabled="disabled"]');
     $this->assertTrue(count($input) === 1, 'The phone number text field is disabled.');
@@ @@

     // Check phone number is verified.
     $this->drupalGet($test_entity->toUrl('edit-form'));
-    $this->assertRaw(t('This phone number is verified. <strong>Warning:</strong> Modifying this phone number will remove verification.'));
+    $this->assertSession()->responseContains(t('This phone number is verified. <strong>Warning:</strong> Modifying this phone number will remove verification.'));

     $input = $this->xpath('//input[@name="' . $form_field_phone_number . '" and @disabled="disabled"]');
     $this->assertTrue(count($input) === 0, 'The phone number text field is enabled.');
@@ @@
       ->save();

     $this->drupalGet($test_entity->toUrl('edit-form'));
-    $this->assertRaw(t('Verification code expired. Try again later.'));
+    $this->assertSession()->responseContains(t('Verification code expired. Try again later.'));

     $this->cronRun();
     $this->drupalGet($test_entity->toUrl('edit-form'));
@@ @@

     // Ensure phone number was purged.
     $field_phone_number = $phone_number_settings->getFieldName('phone_number');
-    $this->assertFieldByName($field_phone_number . '[0][value]', '');
-    $this->assertRaw(t('Enter a phone number. A verification code will be sent as an SMS message, you must enter the code into the <a href="@url">verification form</a> within @time.', $t_args));
+    $this->assertSession()->fieldValueEquals($field_phone_number . '[0][value]', '');
+    $this->assertSession()->responseContains(t('Enter a phone number. A verification code will be sent as an SMS message, you must enter the code into the <a href="@url">verification form</a> within @time.', $t_args));
   }

   /**
@@ @@
     // Ensure phone number value was removed from the field.
     $this->drupalGet($test_entity->toUrl('edit-form'));
     $field_phone_number = $phone_number_settings->getFieldName('phone_number');
-    $this->assertFieldByName($field_phone_number . '[0][value]', '');
+    $this->assertSession()->fieldValueEquals($field_phone_number . '[0][value]', '');
   }

   /**
@@ @@
       '@url' => Url::fromRoute('sms.phone.verify')->toString(),
       '@time' => '1 hour',
     ];
-    $this->assertRaw(t('Save this form to send a new verification code as an SMS message, you must enter the code into the <a href="@url">verification form</a> within @time.', $t_args));
+    $this->assertSession()->responseContains(t('Save this form to send a new verification code as an SMS message, you must enter the code into the <a href="@url">verification form</a> within @time.', $t_args));
     $field_phone_number = $phone_number_settings->getFieldName('phone_number');
-    $this->assertFieldByName($field_phone_number . '[0][value]', '+123123123');
+    $this->assertSession()->fieldValueEquals($field_phone_number . '[0][value]', '+123123123');
   }

   // @todo test multi cardinality phone field.
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertRawRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/smsframework/tests/src/Functional/SmsFrameworkPhoneNumberVerifyForm.php:23

    ---------- begin diff ----------
@@ @@
   public function testVerifyFormAccess() {
     // Anonymous.
     $this->drupalGet(Url::fromRoute('sms.phone.verify'));
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // User with permission.
     $account = $this->drupalCreateUser([
@@ @@
     ]);
     $this->drupalLogin($account);
     $this->drupalGet(Url::fromRoute('sms.phone.verify'));
-    $this->assertResponse(200);
-    $this->assertText(t('Verify a phone number'));
-    $this->assertText(t('Enter the code you received from a SMS message.'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains(t('Verify a phone number'));
+    $this->assertSession()->pageTextContains(t('Enter the code you received from a SMS message.'));
   }

   /**
@@ @@

     // Invalid code.
     $edit['code'] = $this->randomMachineName();
-    $this->drupalPostForm(Url::fromRoute('sms.phone.verify'), $edit, t('Verify code'));
-    $this->assertText(t('Invalid verification code.'));
+    $this->drupalGet(Url::fromRoute('sms.phone.verify'));
+    $this->submitForm($edit, t('Verify code'));
+    $this->assertSession()->pageTextContains(t('Invalid verification code.'));

     // Valid code.
     $edit['code'] = $code;
-    $this->drupalPostForm(Url::fromRoute('sms.phone.verify'), $edit, t('Verify code'));
-    $this->assertText(t('Phone number is now verified.'));
+    $this->drupalGet(Url::fromRoute('sms.phone.verify'));
+    $this->submitForm($edit, t('Verify code'));
+    $this->assertSession()->pageTextContains(t('Phone number is now verified.'));

     // Reset verification code static cache.
     $this->resetAll();
@@ @@
     $this->drupalLogin($account);

     $edit['code'] = $this->randomMachineName();
-    $this->drupalPostForm(Url::fromRoute('sms.phone.verify'), $edit, t('Verify code'));
-    $this->assertNoText(t('There has been too many failed verification attempts. Try again later.'));
-    $this->drupalPostForm(Url::fromRoute('sms.phone.verify'), $edit, t('Verify code'));
-    $this->assertText(t('There has been too many failed verification attempts. Try again later.'));
+    $this->drupalGet(Url::fromRoute('sms.phone.verify'));
+    $this->submitForm($edit, t('Verify code'));
+    $this->assertSession()->pageTextNotContains(t('There has been too many failed verification attempts. Try again later.'));
+    $this->drupalGet(Url::fromRoute('sms.phone.verify'));
+    $this->submitForm($edit, t('Verify code'));
+    $this->assertSession()->pageTextContains(t('There has been too many failed verification attempts. Try again later.'));
   }

   /**
@@ @@

     // Hard code path, don't use Url::fromRoute.
     $this->drupalGet('/verify');
-    $this->assertResponse(200, 'Default phone number verification route exists at /verify');
+    $this->assertSession()->statusCodeEquals(200, 'Default phone number verification route exists at /verify');

     $path_verify = '/' . $this->randomMachineName() . '/' . $this->randomMachineName();
     $edit = [
       'pages[verify]' => $path_verify,
     ];
-    $this->drupalPostForm(Url::fromRoute('sms.settings'), $edit, 'Save configuration');
+    $this->drupalGet(Url::fromRoute('sms.settings'));
+    $this->submitForm($edit, 'Save configuration');

     // Ensure the route cache is rebuilt by getting the verify route.
     $this->drupalGet($path_verify);
-    $this->assertResponse(200, 'Phone number verification route changed to ' . $path_verify);
+    $this->assertSession()->statusCodeEquals(200, 'Phone number verification route changed to ' . $path_verify);
     $this->drupalGet('/verify');
-    $this->assertResponse(404, 'Previous route path was invalidated.');
+    $this->assertSession()->statusCodeEquals(404, 'Previous route path was invalidated.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


35) modules/contrib/smsframework/tests/src/Functional/SmsFrameworkPhoneNumberTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $test_gateway = $this->createMemoryGateway(['skip_queue' => TRUE]);
     $this->setFallbackGateway($test_gateway);
@@ @@
     for ($quantity = 1; $quantity < 3; $quantity++) {
       $test_entity = $this->createEntityWithPhoneNumber($phone_number_settings, array_slice($phone_numbers, 0, $quantity));

-      $this->assertEqual($quantity, $this->countVerificationCodes($test_entity), 'There is ' . $quantity . ' verification code.');
+      $this->assertEquals($quantity, $this->countVerificationCodes($test_entity), 'There is ' . $quantity . ' verification code.');

       // Ensure post-save did not create verification codes if one already
       // exists.
       $test_entity->save();
-      $this->assertEqual($quantity, $this->countVerificationCodes($test_entity), 'Additional verification codes were not created.');
+      $this->assertEquals($quantity, $this->countVerificationCodes($test_entity), 'Additional verification codes were not created.');
     }
   }

@@ @@

     $sms_message = $this->getLastTestMessage($test_gateway);
     $this->assertTrue($sms_message instanceof SmsMessageInterface, 'SMS verification message sent.');
-    $this->assertEqual($sms_message->getRecipients(), $phone_numbers, 'Sent to correct phone number.');
+    $this->assertEquals($sms_message->getRecipients(), $phone_numbers, 'Sent to correct phone number.');

     $phone_verification = $this->getLastVerification();
     $data['sms_verification_code'] = $phone_verification->getCode();
@@ @@
       $phone_number_settings->getVerificationMessage(),
       $data
     );
-    $this->assertEqual($sms_message->getMessage(), $message, 'Sent correct message.');
+    $this->assertEquals($sms_message->getMessage(), $message, 'Sent correct message.');
   }

   /**
@@ @@
       $entities[] = $this->createEntityWithPhoneNumber($phone_number_settings, $phone_numbers);
     }

-    $this->assertEqual(6, $this->countVerificationCodes());
+    $this->assertEquals(6, $this->countVerificationCodes());
     $entities[1]->delete();
-    $this->assertEqual(4, $this->countVerificationCodes(), 'Verification codes deleted.');
+    $this->assertEquals(4, $this->countVerificationCodes(), 'Verification codes deleted.');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/smsframework/tests/src/Functional/SmsFrameworkPhoneNumberAdminTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->entityTypeManager = $this->container->get('entity_type.manager');

@@ @@
    */
   public function testPhoneNumberList() {
     $this->drupalGet('admin/config/smsframework/phone_number');
-    $this->assertRaw(t('No phone number settings found.'));
-    $this->assertLinkByHref('admin/config/smsframework/phone_number/add');
+    $this->assertSession()->responseContains(t('No phone number settings found.'));
+    $this->assertSession()->linkByHrefExists('admin/config/smsframework/phone_number/add');

     // Ensure statistics are appearing on list.
     $this->createPhoneNumberSettings('entity_test', 'entity_test');
@@ @@
     }

     $this->drupalGet('admin/config/smsframework/phone_number');
-    $this->assertRaw('<td>entity_test</td>
+    $this->assertSession()->responseContains('<td>entity_test</td>
                       <td>' . $quantity[0] . '</td>
                       <td>' . $quantity[1] . '</td>
                       <td>' . ($quantity[0] + $quantity[2]) . '</td>
@@ @@
   public function testPhoneNumberCrud() {
     // Add a new phone number config.
     $this->drupalGet('admin/config/smsframework/phone_number/add');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $edit = [
       'entity_bundle' => 'entity_test|entity_test',
       'field_mapping[phone_number]' => '!create',
     ];
-    $this->drupalPostForm('admin/config/smsframework/phone_number/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/smsframework/phone_number/add');
+    $this->submitForm($edit, t('Save'));

-    $this->assertUrl('admin/config/smsframework/phone_number');
+    $this->assertSession()->addressEquals('admin/config/smsframework/phone_number');
     $t_args = ['%id' => 'entity_test.entity_test'];
-    $this->assertRaw(t('Phone number settings %id created.', $t_args));
-    $this->assertRaw('<td>entity_test</td>
-                      <td>entity_test</td>', 'Phone number settings displayed as row.');
-    $this->assertLinkByHref('admin/config/smsframework/phone_number/entity_test.entity_test');
-    $this->assertLinkByHref('admin/config/smsframework/phone_number/entity_test.entity_test/delete');
+    $this->assertSession()->responseContains(t('Phone number settings %id created.', $t_args));
+    $this->assertSession()->responseContains('<td>entity_test</td>
+                      <td>entity_test</td>');
+    $this->assertSession()->linkByHrefExists('admin/config/smsframework/phone_number/entity_test.entity_test');
+    $this->assertSession()->linkByHrefExists('admin/config/smsframework/phone_number/entity_test.entity_test/delete');

     // Ensure a phone number config cannot have the same bundle as pre-existing.
     $this->drupalGet('admin/config/smsframework/phone_number/add');
-    $this->assertNoOption('edit-entity-bundle', 'entity_test|entity_test');
+    $this->assertSession()->optionNotExists('edit-entity-bundle', 'entity_test|entity_test');

     // Edit phone number settings.
     $this->drupalGet('admin/config/smsframework/phone_number/entity_test.entity_test');
-    $this->assertField('field_mapping[phone_number]', 'Phone number field exists.');
-    $this->assertNoField('entity_bundle', 'Bundle field does not exist.');
-    $this->assertOptionSelected('edit-field-mapping-phone-number', 'phone_number');
+    $this->assertSession()->fieldExists('field_mapping[phone_number]', 'Phone number field exists.');
+    $this->assertSession()->fieldNotExists('entity_bundle', 'Bundle field does not exist.');
+    $this->assertTrue($this->assertSession()->optionExists('edit-field-mapping-phone-number', 'phone_number')->hasAttribute('selected'));

     // Ensure edit form is saving correctly.
     $edit = [
       'code_lifetime' => '7777',
     ];
-    $this->drupalPostForm('admin/config/smsframework/phone_number/entity_test.entity_test', $edit, t('Save'));
-    $this->assertEqual(7777, $this->config('sms.phone.entity_test.entity_test')->get('verification_code_lifetime'));
+    $this->drupalGet('admin/config/smsframework/phone_number/entity_test.entity_test');
+    $this->submitForm($edit, t('Save'));
+    $this->assertEquals(7777, $this->config('sms.phone.entity_test.entity_test')->get('verification_code_lifetime'));

     // Delete new phone number settings.
     $this->drupalGet('admin/config/smsframework/phone_number/entity_test.entity_test/delete');
-    $this->assertRaw(t('Are you sure you want to delete SMS phone number settings %label?', [
+    $this->assertSession()->responseContains(t('Are you sure you want to delete SMS phone number settings %label?', [
       '%label' => 'entity_test.entity_test',
     ]));
-    $this->drupalPostForm('admin/config/smsframework/phone_number/entity_test.entity_test/delete', [], t('Delete'));
-    $this->assertUrl('admin/config/smsframework/phone_number');
-    $this->assertRaw(t('Phone number settings %label was deleted.', [
+    $this->drupalGet('admin/config/smsframework/phone_number/entity_test.entity_test/delete');
+    $this->submitForm([], t('Delete'));
+    $this->assertSession()->addressEquals('admin/config/smsframework/phone_number');
+    $this->assertSession()->responseContains(t('Phone number settings %label was deleted.', [
       '%label' => 'entity_test.entity_test',
     ]));
-    $this->assertRaw('No phone number settings found.');
+    $this->assertSession()->responseContains('No phone number settings found.');
   }

   /**
@@ @@
       'entity_bundle' => 'entity_test|entity_test',
       'field_mapping[phone_number]' => '!create',
     ];
-    $this->drupalPostForm('admin/config/smsframework/phone_number/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/smsframework/phone_number/add');
+    $this->submitForm($edit, t('Save'));

     $field_name_telephone .= '_2';
     $field_config = $field_storage->load('entity_test.' . $field_name_telephone);
@@ @@

     // Ensure field name is associated with config.
     $this->drupalGet('admin/config/smsframework/phone_number/entity_test.entity_test');
-    $this->assertResponse(200);
-    $this->assertOptionSelected('edit-field-mapping-phone-number', $field_name_telephone);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertTrue($this->assertSession()->optionExists('edit-field-mapping-phone-number', $field_name_telephone)->hasAttribute('selected'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldRector
 * AssertLinkByHrefRector
 * AssertNoFieldRector
 * AssertNoOptionRector
 * AssertOptionSelectedRector
 * AssertRawRector
 * AssertResponseRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/smsframework/tests/src/Functional/SmsFrameworkIncomingBrowserTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->httpClient = $this->container->get('http_client');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkViewsTest.php:54

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);

     $this->installEntitySchema('user');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkVerificationMaintenanceTest.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('entity_test');
     $this->installEntitySchema('sms_phone_number_verification');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkTokenTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->tokenService = $this->container->get('token');
     $this->installConfig(['system']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkSmsSendTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->defaultSmsProvider = $this->container->get('sms.provider');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkRecipientGatewayEventTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('sms');
     $this->smsProvider = $this->container->get('sms.provider');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkQueueTest.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('sms');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkPushedDeliveryReportTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->routeProvider = $this->container->get('router.route_provider');
   }
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkProviderTest.php:62

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('sms');
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkProcessorTest.php:56

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('sms');
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkPhoneNumberVerificationTest.php:65

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('entity_test');
     $this->installEntitySchema('sms_phone_number_verification');
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkPhoneNumberProviderTest.php:64

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('entity_test');
     $this->installEntitySchema('sms_phone_number_verification');
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkMessageResultEntityTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('entity_test');
     $this->installEntitySchema('user');
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/smsframework/tests/src/Kernel/SmsFrameworkMessageEntityTest.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('sms');
     $this->installEntitySchema('sms_result');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/smsframework/tests/src/Kernel/Migrate/MigrateD7SmsPhon
         eNumberTest.php" file, due to:                                         
         "System error: "Scope not available on "PhpParser\Node\Expr\MethodCall"
         node with parent node of "PhpParser\Node\Stmt\Expression", but is      
         required by a refactorWithScope() method of                            
         "Rector\Renaming\Rector\MethodCall\RenameMethodRector" rule. Fix scope 
         refresh on changed nodes first"                                        
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 47           

