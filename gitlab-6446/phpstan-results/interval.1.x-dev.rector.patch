diff --git a/interval.info.yml b/interval.info.yml
index 2c4a71a..1c3d21a 100644
--- a/interval.info.yml
+++ b/interval.info.yml
@@ -2,7 +2,6 @@ name: Interval Field
 type: module
 description: 'Provides a field and widget to allow entry of a date/time interval.'
 package: Field types
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
 dependencies:
   - drupal:field
diff --git a/tests/src/Functional/IntervalTest.php b/tests/src/Functional/IntervalTest.php
index 7eddc84..4ce999e 100644
--- a/tests/src/Functional/IntervalTest.php
+++ b/tests/src/Functional/IntervalTest.php
@@ -57,7 +57,7 @@ class IntervalTest extends BrowserTestBase {
   /**
    * Sets the test up.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser($this->permissions);
   }
@@ -74,13 +74,13 @@ class IntervalTest extends BrowserTestBase {
       'field_name' => 'foobar',
       'new_storage_type' => 'interval',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save and continue'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm($edit, t('Save and continue'));
+    $this->submitForm([
       'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,
     ], t('Save field settings'));
 
-    $this->drupalPostForm(NULL, [], t('Save settings'));
-    $this->assertRaw(t('Saved %name configuration', ['%name' => 'Foobar']));
+    $this->submitForm([], t('Save settings'));
+    $this->assertSession()->responseContains(t('Saved %name configuration', ['%name' => 'Foobar']));
 
     // Setup widget and formatters.
     EntityFormDisplay::load('entity_test.entity_test.default')
@@ -100,8 +100,8 @@ class IntervalTest extends BrowserTestBase {
 
     // Test the fields values/widget.
     $this->drupalGet('entity_test/add');
-    $this->assertField('field_foobar[0][interval]', 'Found foobar field interval');
-    $this->assertField('field_foobar[0][period]', 'Found foobar field period');
+    $this->assertSession()->fieldExists('field_foobar[0][interval]', 'Found foobar field interval');
+    $this->assertSession()->fieldExists('field_foobar[0][period]', 'Found foobar field period');
 
     // Add some extra fields.
     $button = $this->getSession()->getPage()->findButton('Add another item');
@@ -119,18 +119,18 @@ class IntervalTest extends BrowserTestBase {
       'user_id[0][target_id]' => 'foo (' . $this->adminUser->id() . ')',
     ];
 
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->resetAll();
     $entities = \Drupal::entityTypeManager()->getStorage('entity_test')->loadByProperties([
       'name' => 'Barfoo',
     ]);
-    $this->assertEqual(1, count($entities), 'Entity was saved');
+    $this->assertEquals(1, count($entities), 'Entity was saved');
     $entity = reset($entities);
     $this->drupalGet('entity_test/' . $entity->id());
-    $this->assertText('Barfoo');
-    $this->assertText('1 Week');
-    $this->assertText('3 Days');
-    $this->assertText('1 Quarter');
+    $this->assertSession()->pageTextContains('Barfoo');
+    $this->assertSession()->pageTextContains('1 Week');
+    $this->assertSession()->pageTextContains('3 Days');
+    $this->assertSession()->pageTextContains('1 Quarter');
 
     // Change the formatter to raw.
     EntityViewDisplay::load('entity_test.entity_test.default')
@@ -141,9 +141,9 @@ class IntervalTest extends BrowserTestBase {
       ])
       ->save();
     $this->drupalGet('entity_test/' . $entity->id());
-    $this->assertText('1 Week');
-    $this->assertText('3 Days');
-    $this->assertText('1 Quarter');
+    $this->assertSession()->pageTextContains('1 Week');
+    $this->assertSession()->pageTextContains('3 Days');
+    $this->assertSession()->pageTextContains('1 Quarter');
 
     // Change the formatter to php.
     EntityViewDisplay::load('entity_test.entity_test.default')
@@ -154,9 +154,9 @@ class IntervalTest extends BrowserTestBase {
       ])
       ->save();
     $this->drupalGet('entity_test/' . $entity->id());
-    $this->assertText('7 days');
-    $this->assertText('3 days');
-    $this->assertText('3 months');
+    $this->assertSession()->pageTextContains('7 days');
+    $this->assertSession()->pageTextContains('3 days');
+    $this->assertSession()->pageTextContains('3 months');
 
     $this->drupalGet('entity_test/manage/' . $entity->id() . '/edit');
     $edit = [
@@ -164,13 +164,13 @@ class IntervalTest extends BrowserTestBase {
       // Remove one child.
       'field_foobar[2][interval]' => '',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->drupalGet('entity_test/' . $entity->id());
-    $this->assertText('Bazbar');
+    $this->assertSession()->pageTextContains('Bazbar');
     // Reload entity.
     \Drupal::entityTypeManager()->getStorage('entity_test')->resetCache([$entity->id()]);
     $entity = \Drupal::entityTypeManager()->getStorage('entity_test')->load($entity->id());
-    $this->assertEqual(count($entity->field_foobar), 2, 'Two values in field');
+    $this->assertEquals(count($entity->field_foobar), 2, 'Two values in field');
   }
 
 }
diff --git a/tests/src/Kernel/IntervalItemTest.php b/tests/src/Kernel/IntervalItemTest.php
index b80422e..2db9a51 100644
--- a/tests/src/Kernel/IntervalItemTest.php
+++ b/tests/src/Kernel/IntervalItemTest.php
@@ -38,7 +38,7 @@ class IntervalItemTest extends FieldKernelTestBase {
   /**
    * @inheritDoc
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a field with settings to validate.
@@ -71,16 +71,16 @@ class IntervalItemTest extends FieldKernelTestBase {
     $this->entityValidateAndSave($entity);
 
     // Verify initial field value
-    $this->assertEqual($entity->field_interval->interval, $value['interval']);
-    $this->assertEqual($entity->field_interval->period, $value['period']);
-    $this->assertEqual($entity->get('field_interval')->first()->buildPHPString(), '30 minutes');
+    $this->assertEquals($entity->field_interval->interval, $value['interval']);
+    $this->assertEquals($entity->field_interval->period, $value['period']);
+    $this->assertEquals($entity->get('field_interval')->first()->buildPHPString(), '30 minutes');
 
     // Verify changing the date value.
     $new_value = ['interval' => 2, 'period' => 'hour'];
     $entity->field_interval = $new_value;
-    $this->assertEqual($entity->field_interval->interval, $new_value['interval']);
-    $this->assertEqual($entity->field_interval->period, $new_value['period']);
-    $this->assertEqual($entity->get('field_interval')->first()->buildPHPString(), '2 hours');
+    $this->assertEquals($entity->field_interval->interval, $new_value['interval']);
+    $this->assertEquals($entity->field_interval->period, $new_value['period']);
+    $this->assertEquals($entity->get('field_interval')->first()->buildPHPString(), '2 hours');
   }
 
 }
