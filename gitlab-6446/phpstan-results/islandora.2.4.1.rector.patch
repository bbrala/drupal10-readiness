diff --git a/modules/islandora_advanced_search/islandora_advanced_search.module b/modules/islandora_advanced_search/islandora_advanced_search.module
index cbf5266..7bae23c 100644
--- a/modules/islandora_advanced_search/islandora_advanced_search.module
+++ b/modules/islandora_advanced_search/islandora_advanced_search.module
@@ -48,7 +48,7 @@ function islandora_advanced_search_theme() {
 function islandora_advanced_search_library_info_alter(&$libraries, $extension) {
   if ($extension == 'facets') {
     // Override facets module javascript with customizations.
-    $path = '/' . drupal_get_path('module', 'islandora_advanced_search') . '/js/facets';
+    $path = '/' . \Drupal::service('extension.list.module')->getPath('islandora_advanced_search') . '/js/facets';
     $libraries['soft-limit']['js'] = [
       "$path/soft-limit.js" => [],
     ];
diff --git a/modules/islandora_audio/tests/src/Functional/GenerateAudioDerivativeTest.php b/modules/islandora_audio/tests/src/Functional/GenerateAudioDerivativeTest.php
index fc1c618..766ceac 100644
--- a/modules/islandora_audio/tests/src/Functional/GenerateAudioDerivativeTest.php
+++ b/modules/islandora_audio/tests/src/Functional/GenerateAudioDerivativeTest.php
@@ -68,7 +68,8 @@ class GenerateAudioDerivativeTest extends GenerateDerivativeTestBase {
       'field_media_of[0][target_id]' => 'Test Node',
       'field_tags[0][target_id]' => 'Preservation Master',
     ];
-    $this->drupalPostForm('media/add/' . $this->testMediaType->id(), $values, $this->t('Save'));
+    $this->drupalGet('media/add/' . $this->testMediaType->id());
+    $this->submitForm($values, $this->t('Save'));
 
     $expected = [
       'source_uri' => 'test_file.txt',
diff --git a/modules/islandora_breadcrumbs/tests/src/Functional/BreadcrumbsTest.php b/modules/islandora_breadcrumbs/tests/src/Functional/BreadcrumbsTest.php
index 80f5dbe..1754470 100644
--- a/modules/islandora_breadcrumbs/tests/src/Functional/BreadcrumbsTest.php
+++ b/modules/islandora_breadcrumbs/tests/src/Functional/BreadcrumbsTest.php
@@ -56,7 +56,7 @@ class BreadcrumbsTest extends IslandoraFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create some nodes.
diff --git a/modules/islandora_image/tests/src/Functional/GenerateImageDerivativeTest.php b/modules/islandora_image/tests/src/Functional/GenerateImageDerivativeTest.php
index b6e016f..295eae9 100644
--- a/modules/islandora_image/tests/src/Functional/GenerateImageDerivativeTest.php
+++ b/modules/islandora_image/tests/src/Functional/GenerateImageDerivativeTest.php
@@ -70,7 +70,8 @@ class GenerateImageDerivativeTest extends GenerateDerivativeTestBase {
       'field_media_of[0][target_id]' => 'Test Node',
       'field_tags[0][target_id]' => 'Preservation Master',
     ];
-    $this->drupalPostForm('media/add/' . $this->testMediaType->id(), $values, $this->t('Save'));
+    $this->drupalGet('media/add/' . $this->testMediaType->id());
+    $this->submitForm($values, $this->t('Save'));
 
     $expected = [
       'source_uri' => 'test_file.txt',
diff --git a/modules/islandora_text_extraction/src/Controller/MediaSourceController.php b/modules/islandora_text_extraction/src/Controller/MediaSourceController.php
index 14c36eb..caa72eb 100644
--- a/modules/islandora_text_extraction/src/Controller/MediaSourceController.php
+++ b/modules/islandora_text_extraction/src/Controller/MediaSourceController.php
@@ -98,7 +98,7 @@ class MediaSourceController extends ControllerBase {
       if (!$this->fileSystem->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS)) {
         throw new HttpException(500, "The destination directory does not exist, could not be created, or is not writable");
       }
-      $file = file_save_data($contents, $content_location, FileSystemInterface::EXISTS_REPLACE);
+      $file = \Drupal::service('file.repository')->writeData($contents, $content_location, FileSystemInterface::EXISTS_REPLACE);
       if ($media->hasField($destination_field)) {
         $media->{$destination_field}->setValue([
           'target_id' => $file->id(),
diff --git a/modules/islandora_text_extraction/tests/src/Functional/LoadTest.php b/modules/islandora_text_extraction/tests/src/Functional/LoadTest.php
index 31dca62..99f9cc0 100644
--- a/modules/islandora_text_extraction/tests/src/Functional/LoadTest.php
+++ b/modules/islandora_text_extraction/tests/src/Functional/LoadTest.php
@@ -29,7 +29,7 @@ class LoadTest extends IslandoraFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
diff --git a/modules/islandora_video/tests/src/Functional/GenerateVideoDerivativeTest.php b/modules/islandora_video/tests/src/Functional/GenerateVideoDerivativeTest.php
index 8714a2f..17e8bd5 100644
--- a/modules/islandora_video/tests/src/Functional/GenerateVideoDerivativeTest.php
+++ b/modules/islandora_video/tests/src/Functional/GenerateVideoDerivativeTest.php
@@ -65,7 +65,8 @@ class GenerateVideoDerivativeTest extends GenerateDerivativeTestBase {
       'field_media_of[0][target_id]' => 'Test Node',
       'field_tags[0][target_id]' => 'Preservation Master',
     ];
-    $this->drupalPostForm('media/add/' . $this->testMediaType->id(), $values, $this->t('Save'));
+    $this->drupalGet('media/add/' . $this->testMediaType->id());
+    $this->submitForm($values, $this->t('Save'));
 
     $expected = [
       'source_uri' => 'test_file.txt',
diff --git a/src/Event/StompHeaderEvent.php b/src/Event/StompHeaderEvent.php
index d6d93c2..9a46cf8 100644
--- a/src/Event/StompHeaderEvent.php
+++ b/src/Event/StompHeaderEvent.php
@@ -2,11 +2,11 @@
 
 namespace Drupal\islandora\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
 
 use Symfony\Component\HttpFoundation\ParameterBag;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event used to build headers for STOMP.
diff --git a/src/EventGenerator/EmitEvent.php b/src/EventGenerator/EmitEvent.php
index 683f3e8..feaa57a 100644
--- a/src/EventGenerator/EmitEvent.php
+++ b/src/EventGenerator/EmitEvent.php
@@ -159,8 +159,8 @@ abstract class EmitEvent extends ConfigurableActionBase implements ContainerFact
       $data = $this->generateData($entity);
 
       $event = $this->eventDispatcher->dispatch(
-        StompHeaderEvent::EVENT_NAME,
-        new StompHeaderEvent($entity, $user, $data, $this->getConfiguration())
+        new StompHeaderEvent($entity, $user, $data, $this->getConfiguration()),
+        StompHeaderEvent::EVENT_NAME
       );
 
       $message = new Message(
diff --git a/src/EventSubscriber/LinkHeaderSubscriber.php b/src/EventSubscriber/LinkHeaderSubscriber.php
index ce33ce2..f7e5725 100644
--- a/src/EventSubscriber/LinkHeaderSubscriber.php
+++ b/src/EventSubscriber/LinkHeaderSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\islandora\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Access\AccessManagerInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -13,7 +14,6 @@ use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RequestStack;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -312,9 +312,9 @@ abstract class LinkHeaderSubscriber implements EventSubscriberInterface {
   /**
    * Adds resource-specific link headers to appropriate responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   Event containing the response.
    */
-  abstract public function onResponse(FilterResponseEvent $event);
+  abstract public function onResponse(ResponseEvent $event);
 
 }
diff --git a/src/EventSubscriber/MediaLinkHeaderSubscriber.php b/src/EventSubscriber/MediaLinkHeaderSubscriber.php
index 3cebbba..0f406cf 100644
--- a/src/EventSubscriber/MediaLinkHeaderSubscriber.php
+++ b/src/EventSubscriber/MediaLinkHeaderSubscriber.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\islandora\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Url;
 use Drupal\media\MediaInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 
 /**
  * Subscribes to MediaLinkHeader Event.
@@ -17,7 +17,7 @@ class MediaLinkHeaderSubscriber extends LinkHeaderSubscriber implements EventSub
   /**
    * {@inheritdoc}
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $response = $event->getResponse();
 
     $media = $this->getObject($response, 'media');
diff --git a/src/EventSubscriber/NodeLinkHeaderSubscriber.php b/src/EventSubscriber/NodeLinkHeaderSubscriber.php
index e00533f..c4cdaea 100644
--- a/src/EventSubscriber/NodeLinkHeaderSubscriber.php
+++ b/src/EventSubscriber/NodeLinkHeaderSubscriber.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\islandora\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\node\NodeInterface;
 use Drupal\islandora\IslandoraUtils;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
 /**
@@ -17,10 +17,10 @@ class NodeLinkHeaderSubscriber extends LinkHeaderSubscriber implements EventSubs
   /**
    * Adds node-specific link headers to appropriate responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   Event containing the response.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $response = $event->getResponse();
 
     $node = $this->getObject($response, 'node');
diff --git a/src/Flysystem/Adapter/FedoraAdapter.php b/src/Flysystem/Adapter/FedoraAdapter.php
index 58be909..791a7d9 100644
--- a/src/Flysystem/Adapter/FedoraAdapter.php
+++ b/src/Flysystem/Adapter/FedoraAdapter.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\islandora\Flysystem\Adapter;
 
+use Symfony\Component\Mime\MimeTypesInterface;
+use GuzzleHttp\Psr7\Header;
+use function GuzzleHttp\Psr7\parse_header;
 use Islandora\Chullo\IFedoraApi;
 use League\Flysystem\AdapterInterface;
 use League\Flysystem\Adapter\Polyfill\NotSupportingVisibilityTrait;
@@ -9,7 +12,6 @@ use League\Flysystem\Adapter\Polyfill\StreamedCopyTrait;
 use League\Flysystem\Config;
 use GuzzleHttp\Psr7\Response;
 use GuzzleHttp\Psr7\StreamWrapper;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 
 /**
  * Fedora adapter for Flysystem.
@@ -41,7 +43,7 @@ class FedoraAdapter implements AdapterInterface {
    * @param \Symfony\Component\HttpFoundation\File\Mimetype\MimeTypeGuesserInterface $mime_type_guesser
    *   Mimetype guesser.
    */
-  public function __construct(IFedoraApi $fedora, MimeTypeGuesserInterface $mime_type_guesser) {
+  public function __construct(IFedoraApi $fedora, MimeTypesInterface $mime_type_guesser) {
     $this->fedora = $fedora;
     $this->mimeTypeGuesser = $mime_type_guesser;
   }
@@ -144,11 +146,11 @@ class FedoraAdapter implements AdapterInterface {
     // directory.
     $type = 'dir';
     // phpcs:disable
-    if (class_exists(\GuzzleHttp\Psr7\Header::class)) {
-      $links = \GuzzleHttp\Psr7\Header::parse($response->getHeader('Link'));
+    if (class_exists(Header::class)) {
+      $links = Header::parse($response->getHeader('Link'));
     }
     else {
-      $links = \GuzzleHttp\Psr7\parse_header($response->getHeader('Link'));
+      $links = parse_header($response->getHeader('Link'));
     }
     // phpcs:enable
     foreach ($links as $link) {
@@ -387,11 +389,11 @@ class FedoraAdapter implements AdapterInterface {
     if ($response->getStatusCode() == 410) {
       $return = FALSE;
       // phpcs:disable
-      if (class_exists(\GuzzleHttp\Psr7\Header::class)) {
-        $link_headers = \GuzzleHttp\Psr7\Header::parse($response->getHeader('Link'));
+      if (class_exists(Header::class)) {
+        $link_headers = Header::parse($response->getHeader('Link'));
       }
       else {
-        $link_headers = \GuzzleHttp\Psr7\parse_header($response->getHeader('Link'));
+        $link_headers = parse_header($response->getHeader('Link'));
       }
       // phpcs:enable
       if ($link_headers) {
diff --git a/src/Flysystem/Fedora.php b/src/Flysystem/Fedora.php
index fe7af7b..3cbd317 100644
--- a/src/Flysystem/Fedora.php
+++ b/src/Flysystem/Fedora.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\islandora\Flysystem;
 
+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -17,7 +18,6 @@ use Islandora\Chullo\IFedoraApi;
 use Islandora\Chullo\FedoraApi;
 use Psr\Http\Message\RequestInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 
 /**
  * Drupal plugin for the Fedora Flysystem adapter.
@@ -61,7 +61,7 @@ class Fedora implements FlysystemPluginInterface, ContainerFactoryPluginInterfac
    */
   public function __construct(
     IFedoraApi $fedora,
-    MimeTypeGuesserInterface $mime_type_guesser,
+    MimeTypesInterface $mime_type_guesser,
     LanguageManagerInterface $language_manager
   ) {
     $this->fedora = $fedora;
diff --git a/tests/src/Functional/AddChildTest.php b/tests/src/Functional/AddChildTest.php
index 9fc2f9e..f27f9db 100644
--- a/tests/src/Functional/AddChildTest.php
+++ b/tests/src/Functional/AddChildTest.php
@@ -12,7 +12,7 @@ class AddChildTest extends IslandoraFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->parent =
diff --git a/tests/src/Functional/AddMediaToNodeTest.php b/tests/src/Functional/AddMediaToNodeTest.php
index 3290977..4b0b62c 100644
--- a/tests/src/Functional/AddMediaToNodeTest.php
+++ b/tests/src/Functional/AddMediaToNodeTest.php
@@ -31,7 +31,7 @@ class AddMediaToNodeTest extends IslandoraFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->node = $this->container->get('entity_type.manager')->getStorage('node')->create([
diff --git a/tests/src/Functional/ContentEntityTypeTest.php b/tests/src/Functional/ContentEntityTypeTest.php
index 362ff7f..5ed2294 100644
--- a/tests/src/Functional/ContentEntityTypeTest.php
+++ b/tests/src/Functional/ContentEntityTypeTest.php
@@ -52,7 +52,8 @@ class ContentEntityTypeTest extends IslandoraFunctionalTestBase {
       'name[0][value]' => 'Test Media',
       'files[field_media_file_0]' => __DIR__ . '/../../fixtures/test_file.txt',
     ];
-    $this->drupalPostForm('media/add/' . $this->testMediaType->id(), $values, $this->t('Save'));
+    $this->drupalGet('media/add/' . $this->testMediaType->id());
+    $this->submitForm($values, $this->t('Save'));
     $this->assertSession()->pageTextNotContains("Hello World!");
   }
 
diff --git a/tests/src/Functional/DeleteMediaTest.php b/tests/src/Functional/DeleteMediaTest.php
index f112c70..6d1c233 100644
--- a/tests/src/Functional/DeleteMediaTest.php
+++ b/tests/src/Functional/DeleteMediaTest.php
@@ -47,7 +47,7 @@ class DeleteMediaTest extends IslandoraFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create a test user.
diff --git a/tests/src/Functional/DerivativeReactionTest.php b/tests/src/Functional/DerivativeReactionTest.php
index e1b1c82..00e0e5a 100644
--- a/tests/src/Functional/DerivativeReactionTest.php
+++ b/tests/src/Functional/DerivativeReactionTest.php
@@ -19,7 +19,7 @@ class DerivativeReactionTest extends IslandoraFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->node = $this->container->get('entity_type.manager')->getStorage('node')->create([
@@ -52,7 +52,8 @@ class DerivativeReactionTest extends IslandoraFunctionalTestBase {
       'files[field_media_file_0]' => __DIR__ . '/../../fixtures/test_file.txt',
       'field_media_of[0][target_id]' => 'Test Node',
     ];
-    $this->drupalPostForm('media/add/' . $this->testMediaType->id(), $values, $this->t('Save'));
+    $this->drupalGet('media/add/' . $this->testMediaType->id());
+    $this->submitForm($values, $this->t('Save'));
 
     // field_media_of is set and there's a file, so derivatives should fire.
     $this->assertSession()->pageTextContains("Hello World!");
diff --git a/tests/src/Functional/GenerateDerivativeTestBase.php b/tests/src/Functional/GenerateDerivativeTestBase.php
index 0f67d59..c5ec970 100644
--- a/tests/src/Functional/GenerateDerivativeTestBase.php
+++ b/tests/src/Functional/GenerateDerivativeTestBase.php
@@ -29,7 +29,7 @@ abstract class GenerateDerivativeTestBase extends IslandoraFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->createUserAndLogin();
diff --git a/tests/src/Functional/IndexingTest.php b/tests/src/Functional/IndexingTest.php
index e995329..ff21528 100644
--- a/tests/src/Functional/IndexingTest.php
+++ b/tests/src/Functional/IndexingTest.php
@@ -12,7 +12,7 @@ class IndexingTest extends IslandoraFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create an action that dsm's "Goodbye, Cruel World!".
@@ -63,9 +63,10 @@ class IndexingTest extends IslandoraFunctionalTestBase {
 
     // Add the Goodbye World reaction.
     $this->addPresetReaction('test', 'delete', 'goodbye_world');
+    $this->drupalGet("$url/delete");
 
     // Delete the node.
-    $this->drupalPostForm("$url/delete", [], $this->t('Delete'));
+    $this->submitForm([], $this->t('Delete'));
     $this->assertSession()->statusCodeEquals(200);
 
     // Confirm Goodbye, Cruel World! is printed to the screen.
diff --git a/tests/src/Functional/IslandoraFunctionalTestBase.php b/tests/src/Functional/IslandoraFunctionalTestBase.php
index c154c5c..666be72 100644
--- a/tests/src/Functional/IslandoraFunctionalTestBase.php
+++ b/tests/src/Functional/IslandoraFunctionalTestBase.php
@@ -88,7 +88,7 @@ class IslandoraFunctionalTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Delete the node rest config that's bootstrapped with Drupal.
@@ -278,11 +278,11 @@ EOD;
    * Creates a test context.
    */
   protected function createContext($label, $name) {
-    $this->drupalPostForm('admin/structure/context/add', [
+    $this->drupalGet('admin/structure/context/add');
+    $this->submitForm([
       'label' => $label,
       'name' => $name,
-    ],
-      $this->t('Save'));
+    ], $this->t('Save'));
     $this->assertSession()->statusCodeEquals(200);
   }
 
@@ -312,7 +312,8 @@ EOD;
    * Create a new node by posting its add form.
    */
   protected function postNodeAddForm($bundle_id, $values, $button_text) {
-    $this->drupalPostForm("node/add/$bundle_id", $values, $this->t('@text', ['@text' => $button_text]));
+    $this->drupalGet("node/add/$bundle_id");
+    $this->submitForm($values, $this->t('@text', ['@text' => $button_text]));
     $this->assertSession()->statusCodeEquals(200);
   }
 
@@ -320,7 +321,8 @@ EOD;
    * Create a new node by posting its add form.
    */
   protected function postTermAddForm($taxomony_id, $values, $button_text) {
-    $this->drupalPostForm("admin/structure/taxonomy/manage/$taxomony_id/add", $values, $this->t('@text', ['@text' => $button_text]));
+    $this->drupalGet("admin/structure/taxonomy/manage/$taxomony_id/add");
+    $this->submitForm($values, $this->t('@text', ['@text' => $button_text]));
     $this->assertSession()->statusCodeEquals(200);
   }
 
@@ -328,7 +330,8 @@ EOD;
    * Edits a node by posting its edit form.
    */
   protected function postEntityEditForm($entity_url, $values, $button_text) {
-    $this->drupalPostForm("$entity_url/edit", $values, $this->t('@text', ['@text' => $button_text]));
+    $this->drupalGet("$entity_url/edit");
+    $this->submitForm($values, $this->t('@text', ['@text' => $button_text]));
     $this->assertSession()->statusCodeEquals(200);
   }
 
diff --git a/tests/src/Functional/IslandoraImageFormatterTest.php b/tests/src/Functional/IslandoraImageFormatterTest.php
index 33f6e1e..84ea551 100644
--- a/tests/src/Functional/IslandoraImageFormatterTest.php
+++ b/tests/src/Functional/IslandoraImageFormatterTest.php
@@ -92,7 +92,7 @@ class IslandoraImageFormatterTest extends IslandoraFunctionalTestBase {
         ':title' => 'Some Title',
       ]
     );
-    $this->assertEqual(count($elements), 1, 'Image linked to content formatter displaying points to Node and not Media.');
+    $this->assertEquals(count($elements), 1, 'Image linked to content formatter displaying points to Node and not Media.');
   }
 
 }
diff --git a/tests/src/Functional/IslandoraSettingsFormTest.php b/tests/src/Functional/IslandoraSettingsFormTest.php
index 92cfc6a..80a327a 100644
--- a/tests/src/Functional/IslandoraSettingsFormTest.php
+++ b/tests/src/Functional/IslandoraSettingsFormTest.php
@@ -14,7 +14,7 @@ class IslandoraSettingsFormTest extends IslandoraFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create a test user.
@@ -36,20 +36,25 @@ class IslandoraSettingsFormTest extends IslandoraFunctionalTestBase {
     $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->pageTextContains("JWT Expiry");
     $this->assertSession()->fieldValueEquals('edit-jwt-expiry', '+2 hour');
+    $this->drupalGet('/admin/config/islandora/core');
     // Blank is not allowed.
-    $this->drupalPostForm('/admin/config/islandora/core', ['edit-jwt-expiry' => ""], $this->t('Save configuration'));
+    $this->submitForm(['edit-jwt-expiry' => ""], $this->t('Save configuration'));
     $this->assertSession()->pageTextContainsOnce('"" is not a valid time or interval expression.');
+    $this->drupalGet('/admin/config/islandora/core');
     // Negative is not allowed.
-    $this->drupalPostForm('/admin/config/islandora/core', ['edit-jwt-expiry' => "-2 hours"], $this->t('Save configuration'));
+    $this->submitForm(['edit-jwt-expiry' => "-2 hours"], $this->t('Save configuration'));
     $this->assertSession()->pageTextContainsOnce('Time or interval expression cannot be negative');
+    $this->drupalGet('/admin/config/islandora/core');
     // Must include an integer value.
-    $this->drupalPostForm('/admin/config/islandora/core', ['edit-jwt-expiry' => "last hour"], $this->t('Save configuration'));
+    $this->submitForm(['edit-jwt-expiry' => "last hour"], $this->t('Save configuration'));
     $this->assertSession()->pageTextContainsOnce('No numeric interval specified, for example "1 day"');
+    $this->drupalGet('/admin/config/islandora/core');
     // Must have an accepted interval.
-    $this->drupalPostForm('/admin/config/islandora/core', ['edit-jwt-expiry' => "1 fortnight"], $this->t('Save configuration'));
+    $this->submitForm(['edit-jwt-expiry' => "1 fortnight"], $this->t('Save configuration'));
     $this->assertSession()->pageTextContainsOnce('No time interval found, please include one of');
+    $this->drupalGet('/admin/config/islandora/core');
     // Test a valid setting.
-    $this->drupalPostForm('/admin/config/islandora/core', ['edit-jwt-expiry' => "2 weeks"], $this->t('Save configuration'));
+    $this->submitForm(['edit-jwt-expiry' => "2 weeks"], $this->t('Save configuration'));
     $this->assertSession()->pageTextContainsOnce('The configuration options have been saved.');
 
   }
diff --git a/tests/src/Functional/JsonldSelfReferenceReactionTest.php b/tests/src/Functional/JsonldSelfReferenceReactionTest.php
index f3c8827..7ad8f01 100644
--- a/tests/src/Functional/JsonldSelfReferenceReactionTest.php
+++ b/tests/src/Functional/JsonldSelfReferenceReactionTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\islandora\Functional;
 
+use function GuzzleHttp\json_decode;
 /**
  * Class MappingUriPredicateReactionTest.
  *
@@ -13,7 +14,7 @@ class JsonldSelfReferenceReactionTest extends IslandoraFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $types = ['schema:Thing'];
@@ -61,7 +62,7 @@ class JsonldSelfReferenceReactionTest extends IslandoraFunctionalTestBase {
 
     $contents = $this->drupalGet($url . '?_format=jsonld');
     $this->assertSession()->statusCodeEquals(200);
-    $json = \GuzzleHttp\json_decode($contents, TRUE);
+    $json = json_decode($contents, TRUE);
     $this->assertArrayHasKey('http://purl.org/dc/terms/title',
       $json['@graph'][0], 'Missing dcterms:title key');
     $this->assertEquals(
@@ -103,7 +104,7 @@ class JsonldSelfReferenceReactionTest extends IslandoraFunctionalTestBase {
     drupal_flush_all_caches();
 
     $new_contents = $this->drupalGet($url . '?_format=jsonld');
-    $json = \GuzzleHttp\json_decode($new_contents, TRUE);
+    $json = json_decode($new_contents, TRUE);
     $this->assertEquals(
       'Test Node',
       $json['@graph'][0]['http://purl.org/dc/terms/title'][0]['@value'],
@@ -123,7 +124,7 @@ class JsonldSelfReferenceReactionTest extends IslandoraFunctionalTestBase {
     $this->assertSession()
       ->pageTextContains("The context $context_name has been saved");
     $new_contents = $this->drupalGet($url . '?_format=jsonld');
-    $json = \GuzzleHttp\json_decode($new_contents, TRUE);
+    $json = json_decode($new_contents, TRUE);
     $this->assertEquals(
       'Test Node',
       $json['@graph'][0]['http://purl.org/dc/terms/title'][0]['@value'],
@@ -161,7 +162,7 @@ class JsonldSelfReferenceReactionTest extends IslandoraFunctionalTestBase {
 
     $contents = $this->drupalGet($media_url . '?_format=jsonld');
     $this->assertSession()->statusCodeEquals(200);
-    $json = \GuzzleHttp\json_decode($contents, TRUE);
+    $json = json_decode($contents, TRUE);
     $this->assertEquals(
       "$media_url?_format=jsonld",
       $json['@graph'][0]['@id'],
@@ -186,7 +187,7 @@ class JsonldSelfReferenceReactionTest extends IslandoraFunctionalTestBase {
     drupal_flush_all_caches();
 
     $new_contents = $this->drupalGet($media_url . '?_format=jsonld');
-    $json = \GuzzleHttp\json_decode($new_contents, TRUE);
+    $json = json_decode($new_contents, TRUE);
     $this->assertEquals(
       "$media_url?_format=jsonld",
       $json['@graph'][0]['http://www.iana.org/assignments/relation/describedby'][0]['@id'],
diff --git a/tests/src/Functional/JsonldTypeAlterReactionTest.php b/tests/src/Functional/JsonldTypeAlterReactionTest.php
index e5d21ab..58e8bf6 100644
--- a/tests/src/Functional/JsonldTypeAlterReactionTest.php
+++ b/tests/src/Functional/JsonldTypeAlterReactionTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\islandora\Functional;
 
+use function GuzzleHttp\json_decode;
 /**
  * Tests Jsonld Alter Reaction.
  *
@@ -20,17 +21,18 @@ class JsonldTypeAlterReactionTest extends JsonldSelfReferenceReactionTest {
       'administer node fields',
     ]);
     $this->drupalLogin($account);
+    $this->drupalGet('admin/structure/types/manage/test_type/fields/add-field');
 
     // Add the typed predicate we will select in the reaction config.
     // Taken from FieldUiTestTrait->fieldUIAddNewField.
-    $this->drupalPostForm('admin/structure/types/manage/test_type/fields/add-field', [
+    $this->submitForm([
       'new_storage_type' => 'string',
       'label' => 'Typed Predicate',
       'field_name' => 'type_predicate',
     ], $this->t('Save and continue'));
-    $this->drupalPostForm(NULL, [], $this->t('Save field settings'));
-    $this->drupalPostForm(NULL, [], $this->t('Save settings'));
-    $this->assertRaw('field_type_predicate', 'Redirected to "Manage fields" page.');
+    $this->submitForm([], $this->t('Save field settings'));
+    $this->submitForm([], $this->t('Save settings'));
+    $this->assertSession()->responseContains('field_type_predicate');
 
     // Add the test node.
     $this->postNodeAddForm('test_type', [
@@ -46,7 +48,7 @@ class JsonldTypeAlterReactionTest extends JsonldSelfReferenceReactionTest {
 
     $contents = $this->drupalGet($url . '?_format=jsonld');
     $this->assertSession()->statusCodeEquals(200);
-    $json = \GuzzleHttp\json_decode($contents, TRUE);
+    $json = json_decode($contents, TRUE);
     $this->assertArrayHasKey('@type',
       $json['@graph'][0], 'Missing @type');
     $this->assertEquals(
@@ -81,7 +83,7 @@ class JsonldTypeAlterReactionTest extends JsonldSelfReferenceReactionTest {
 
     // Check for the new @type from the field_type_predicate value.
     $new_contents = $this->drupalGet($url . '?_format=jsonld');
-    $json = \GuzzleHttp\json_decode($new_contents, TRUE);
+    $json = json_decode($new_contents, TRUE);
     $this->assertTrue(
       in_array('http://schema.org/Organization', $json['@graph'][0]['@type']),
       'Missing altered @type value of http://schema.org/Organization'
diff --git a/tests/src/Functional/LinkHeaderTest.php b/tests/src/Functional/LinkHeaderTest.php
index 7cb741d..98b36c6 100644
--- a/tests/src/Functional/LinkHeaderTest.php
+++ b/tests/src/Functional/LinkHeaderTest.php
@@ -42,7 +42,7 @@ class LinkHeaderTest extends IslandoraFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $account = $this->createUserAndLogin();
diff --git a/tests/src/Functional/MediaSourceUpdateTest.php b/tests/src/Functional/MediaSourceUpdateTest.php
index fdea6ae..3c97c69 100644
--- a/tests/src/Functional/MediaSourceUpdateTest.php
+++ b/tests/src/Functional/MediaSourceUpdateTest.php
@@ -35,7 +35,7 @@ class MediaSourceUpdateTest extends IslandoraFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Make a user with appropriate permissions.
diff --git a/tests/src/Functional/NodeHasTermTest.php b/tests/src/Functional/NodeHasTermTest.php
index eff5b5c..2b4ee16 100644
--- a/tests/src/Functional/NodeHasTermTest.php
+++ b/tests/src/Functional/NodeHasTermTest.php
@@ -13,7 +13,7 @@ class NodeHasTermTest extends IslandoraFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
 
     parent::setUp();
 
diff --git a/tests/src/Functional/ViewModeAlterReactionTest.php b/tests/src/Functional/ViewModeAlterReactionTest.php
index 72cdfe4..19660bd 100644
--- a/tests/src/Functional/ViewModeAlterReactionTest.php
+++ b/tests/src/Functional/ViewModeAlterReactionTest.php
@@ -26,7 +26,7 @@ class ViewModeAlterReactionTest extends IslandoraFunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Node to be referenced via member of.
diff --git a/tests/src/FunctionalJavascript/IntegerWeightTest.php b/tests/src/FunctionalJavascript/IntegerWeightTest.php
index ba289aa..2572c19 100644
--- a/tests/src/FunctionalJavascript/IntegerWeightTest.php
+++ b/tests/src/FunctionalJavascript/IntegerWeightTest.php
@@ -80,7 +80,7 @@ class IntegerWeightTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser(
diff --git a/tests/src/Kernel/EventGeneratorTest.php b/tests/src/Kernel/EventGeneratorTest.php
index c423cda..a9c1f08 100644
--- a/tests/src/Kernel/EventGeneratorTest.php
+++ b/tests/src/Kernel/EventGeneratorTest.php
@@ -41,7 +41,7 @@ class EventGeneratorTest extends IslandoraKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create a test user.
diff --git a/tests/src/Kernel/FedoraAdapterTest.php b/tests/src/Kernel/FedoraAdapterTest.php
index 10c5beb..3a30bed 100644
--- a/tests/src/Kernel/FedoraAdapterTest.php
+++ b/tests/src/Kernel/FedoraAdapterTest.php
@@ -2,12 +2,15 @@
 
 namespace Drupal\Tests\islandora\Kernel;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use GuzzleHttp\Psr7\Utils;
+use Symfony\Component\Mime\MimeTypesInterface;
+use function GuzzleHttp\Psr7\stream_for;
 use Drupal\islandora\Flysystem\Adapter\FedoraAdapter;
 use GuzzleHttp\Psr7\Response;
 use Islandora\Chullo\IFedoraApi;
 use League\Flysystem\Config;
 use Prophecy\Argument;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 
 /**
  * Tests the Fedora adapter for Flysystem.
@@ -17,6 +20,7 @@ use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
  */
 class FedoraAdapterTest extends IslandoraKernelTestBase {
 
+  use ProphecyTrait;
   /**
    * Shared functionality for an adapter.
    */
@@ -33,10 +37,10 @@ class FedoraAdapterTest extends IslandoraKernelTestBase {
     $prophecy->getHeader('Content-Type')->willReturn(['text/plain']);
     $prophecy->getHeader('Content-Length')->willReturn([strlen("DERP")]);
     // phpcs:disable
-    if (class_exists(\GuzzleHttp\Psr7\Utils::class)) {
-      $prophecy->getBody()->willReturn(\GuzzleHttp\Psr7\Utils::streamFor("DERP"));
+    if (class_exists(Utils::class)) {
+      $prophecy->getBody()->willReturn(Utils::streamFor("DERP"));
     } else {
-      $prophecy->getBody()->willReturn(\GuzzleHttp\Psr7\stream_for("DERP"));
+      $prophecy->getBody()->willReturn(stream_for("DERP"));
     }
     // phpcs:enable
     return $prophecy;
@@ -55,7 +59,7 @@ class FedoraAdapterTest extends IslandoraKernelTestBase {
     $prophecy->getResource('', ['Connection' => 'close'])->willReturn($response);
     $api = $prophecy->reveal();
 
-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();
 
     return new FedoraAdapter($api, $mime_guesser);
@@ -73,7 +77,7 @@ class FedoraAdapterTest extends IslandoraKernelTestBase {
     $prophecy->getResource('', ['Connection' => 'close'])->willReturn($response);
     $api = $prophecy->reveal();
 
-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();
 
     return new FedoraAdapter($api, $mime_guesser);
@@ -98,7 +102,7 @@ class FedoraAdapterTest extends IslandoraKernelTestBase {
     $prophecy->getResourceHeaders('', ['Connection' => 'close'])->willReturn($response);
     $api = $prophecy->reveal();
 
-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();
 
     return new FedoraAdapter($api, $mime_guesser);
@@ -126,7 +130,7 @@ class FedoraAdapterTest extends IslandoraKernelTestBase {
 
     $api = $fedora_prophecy->reveal();
 
-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();
 
     return new FedoraAdapter($api, $mime_guesser);
@@ -149,7 +153,7 @@ class FedoraAdapterTest extends IslandoraKernelTestBase {
 
     $api = $fedora_prophecy->reveal();
 
-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();
 
     return new FedoraAdapter($api, $mime_guesser);
@@ -180,7 +184,7 @@ class FedoraAdapterTest extends IslandoraKernelTestBase {
 
     $api = $fedora_prophecy->reveal();
 
-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();
 
     return new FedoraAdapter($api, $mime_guesser);
@@ -199,7 +203,7 @@ class FedoraAdapterTest extends IslandoraKernelTestBase {
     $fedora_prophecy->getResourceHeaders('', ['Connection' => 'close'])->willReturn($prophecy->reveal());
     $api = $fedora_prophecy->reveal();
 
-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();
 
     return new FedoraAdapter($api, $mime_guesser);
@@ -218,7 +222,7 @@ class FedoraAdapterTest extends IslandoraKernelTestBase {
 
     $api = $fedora_prophecy->reveal();
 
-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();
 
     return new FedoraAdapter($api, $mime_guesser);
@@ -249,7 +253,7 @@ class FedoraAdapterTest extends IslandoraKernelTestBase {
 
     $api = $fedora_prophecy->reveal();
 
-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();
 
     return new FedoraAdapter($api, $mime_guesser);
@@ -280,7 +284,7 @@ class FedoraAdapterTest extends IslandoraKernelTestBase {
 
     $api = $fedora_prophecy->reveal();
 
-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();
 
     return new FedoraAdapter($api, $mime_guesser);
@@ -644,7 +648,7 @@ class FedoraAdapterTest extends IslandoraKernelTestBase {
 
     $api = $fedora_prophecy->reveal();
 
-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();
 
     $adapter = new FedoraAdapter($api, $mime_guesser);
@@ -664,7 +668,7 @@ class FedoraAdapterTest extends IslandoraKernelTestBase {
 
     $api = $fedora_prophecy->reveal();
 
-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)
       ->reveal();
 
     $adapter = new FedoraAdapter($api, $mime_guesser);
diff --git a/tests/src/Kernel/FedoraPluginTest.php b/tests/src/Kernel/FedoraPluginTest.php
index 6749150..80dbb03 100644
--- a/tests/src/Kernel/FedoraPluginTest.php
+++ b/tests/src/Kernel/FedoraPluginTest.php
@@ -2,11 +2,12 @@
 
 namespace Drupal\Tests\islandora\Kernel;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\islandora\Flysystem\Fedora;
 use League\Flysystem\AdapterInterface;
 use Islandora\Chullo\IFedoraApi;
 use Psr\Http\Message\ResponseInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 
 /**
  * Tests the Fedora plugin for Flysystem.
@@ -16,6 +17,7 @@ use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
  */
 class FedoraPluginTest extends IslandoraKernelTestBase {
 
+  use ProphecyTrait;
   /**
    * Mocks up a plugin.
    */
@@ -29,7 +31,7 @@ class FedoraPluginTest extends IslandoraKernelTestBase {
     $prophecy->getBaseUri()->willReturn("");
     $api = $prophecy->reveal();
 
-    $mime_guesser = $this->prophesize(MimeTypeGuesserInterface::class)->reveal();
+    $mime_guesser = $this->prophesize(MimeTypesInterface::class)->reveal();
 
     $language_manager = $this->container->get('language_manager');
 
diff --git a/tests/src/Kernel/IslandoraKernelTestBase.php b/tests/src/Kernel/IslandoraKernelTestBase.php
index 5a95cb6..d2a14e0 100644
--- a/tests/src/Kernel/IslandoraKernelTestBase.php
+++ b/tests/src/Kernel/IslandoraKernelTestBase.php
@@ -43,7 +43,7 @@ abstract class IslandoraKernelTestBase extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Bootstrap minimal Drupal environment to run the tests.
diff --git a/tests/src/Kernel/JwtEventSubscriberTest.php b/tests/src/Kernel/JwtEventSubscriberTest.php
index f97eab9..9493ab7 100644
--- a/tests/src/Kernel/JwtEventSubscriberTest.php
+++ b/tests/src/Kernel/JwtEventSubscriberTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\islandora\Kernel;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\jwt\Authentication\Event\JwtAuthGenerateEvent;
 use Drupal\jwt\Authentication\Event\JwtAuthValidEvent;
 use Drupal\jwt\Authentication\Event\JwtAuthValidateEvent;
@@ -19,6 +20,7 @@ use Drupal\islandora\EventSubscriber\JwtEventSubscriber;
  */
 class JwtEventSubscriberTest extends IslandoraKernelTestBase {
 
+  use ProphecyTrait;
   use UserCreationTrait;
 
   /**
@@ -31,7 +33,7 @@ class JwtEventSubscriberTest extends IslandoraKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->user = $this->createUser();
