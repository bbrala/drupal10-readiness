modules/contrib/tome/modules/tome_base/src/CommandBase.php
modules/contrib/tome/modules/tome_static/src/EventSubscriber/EntityPathSubscriber.php
modules/contrib/tome/modules/tome_static/modules/tome_static_super_cache/src/SuperStaticCache.php
modules/contrib/tome/modules/tome_static/src/StaticGenerator.php
modules/contrib/tome/modules/tome_static/tome_static.install
modules/contrib/tome/modules/tome_sync/src/ContentHasher.php
modules/contrib/tome/modules/tome_sync/src/Normalizer/ContentEntityNormalizer.php
modules/contrib/tome/modules/tome_sync/tests/src/Kernel/ImporterTest.php
modules/contrib/tome/modules/tome_sync/modules/tome_sync_autoclean/src/EventSubscriber/ExportEventSubscriber.php
modules/contrib/tome/modules/tome_static/modules/tome_static_super_cache/src/TomeStaticSuperCacheTagsInvalidator.php
modules/contrib/tome/modules/tome_static/modules/tome_static_super_cache/tests/src/Kernel/SmartTagTest.php
modules/contrib/tome/modules/tome_base/src/Commands/CliWorkaroundCommands.php
modules/contrib/tome/modules/tome_base/src/ExecutableFinderTrait.php
modules/contrib/tome/modules/tome_sync/src/AccountSwitcherTrait.php
modules/contrib/tome/modules/tome_sync/src/Normalizer/EntityReferenceItemNormalizer.php
modules/contrib/tome/modules/tome_sync/src/CleanFilesTrait.php
modules/contrib/tome/modules/tome_sync/src/ContentHasherInterface.php
modules/contrib/tome/modules/tome_base/src/PathTrait.php
modules/contrib/tome/modules/tome_sync/src/ContentIndexerTrait.php
modules/contrib/tome/modules/tome_base/src/ProcessTrait.php
modules/contrib/tome/modules/tome_sync/src/Normalizer/EntityReferenceRevisionItemNormalizer.php
modules/contrib/tome/modules/tome_sync/src/Normalizer/FieldItemNormalizer.php
modules/contrib/tome/modules/tome_sync/src/Commands/CleanFilesCommand.php
modules/contrib/tome/modules/tome_sync/src/Normalizer/PathAliasNormalizer.php
modules/contrib/tome/modules/tome_static/src/EventSubscriber/ExcludePathSubscriber.php
modules/contrib/tome/modules/tome_static/src/EventSubscriber/LanguagePathSubscriber.php
modules/contrib/tome/modules/tome_static/modules/tome_static_super_cache/tests/src/Kernel/SuperStaticCacheTest.php
modules/contrib/tome/modules/tome_base/tests/src/Kernel/TestBase.php
modules/contrib/tome/modules/tome_sync/src/Commands/DeleteContentCommand.php
modules/contrib/tome/modules/tome_static/modules/tome_static_super_cache/tome_static_super_cache.module
modules/contrib/tome/modules/tome_static/src/EventSubscriber/MediaOembedPathSubscriber.php
modules/contrib/tome/modules/tome_sync/src/Normalizer/PathItemNormalizer.php
modules/contrib/tome/modules/tome_sync/src/Normalizer/PathautoItemNormalizer.php
modules/contrib/tome/modules/tome_sync/src/Normalizer/UriNormalizer.php
modules/contrib/tome/modules/tome_sync/src/Commands/ExportCommand.php
modules/contrib/tome/modules/tome_static/src/EventSubscriber/PageCacheRequestPrepareSubscriber.php
modules/contrib/tome/modules/tome_static/src/EventSubscriber/PagerPathSubscriber.php
modules/contrib/tome/modules/tome_sync/src/Normalizer/UserEntityNormalizer.php
modules/contrib/tome/modules/tome_base/tests/src/Unit/ExecutableFinderTraitTest.php
modules/contrib/tome/modules/tome_sync/src/NullFileSync.php
modules/contrib/tome/modules/tome_sync/src/TomeSyncHelper.php
modules/contrib/tome/modules/tome_static/src/EventSubscriber/RedirectPathSubscriber.php
modules/contrib/tome/modules/tome_sync/src/TomeSyncServiceProvider.php
modules/contrib/tome/modules/tome_static/src/Commands/StaticCommand.php
modules/contrib/tome/modules/tome_base/tests/src/Unit/PathTraitTest.php
modules/contrib/tome/modules/tome_sync/src/Commands/ExportContentCommand.php
modules/contrib/tome/modules/tome_sync/src/Encoder/YamlEncoder.php
modules/contrib/tome/modules/tome_static/src/EventSubscriber/RoutePathSubscriber.php
modules/contrib/tome/modules/tome_static/modules/tome_static_cron/src/Form/TomeStaticCronSettingsForm.php
modules/contrib/tome/modules/tome_sync/src/Event/ContentCrudEvent.php
modules/contrib/tome/modules/tome_sync/src/Event/TomeSyncEvents.php
modules/contrib/tome/modules/tome_sync/src/YamlFileStorage.php
modules/contrib/tome/modules/tome_sync/src/EventSubscriber/BookEventSubscriber.php
modules/contrib/tome/modules/tome_static/src/EventSubscriber/StaticPreviewRequestSubscriber.php
modules/contrib/tome/modules/tome_sync/src/YamlFileStorageFactory.php
modules/contrib/tome/modules/tome_static/modules/tome_static_cron/src/Plugin/QueueWorker/TomeStaticQueueWorker.php
modules/contrib/tome/modules/tome_sync/tests/src/Functional/BookTest.php
modules/contrib/tome/modules/tome_sync/tests/src/Kernel/LinkItemTest.php
modules/contrib/tome/modules/tome_sync/src/Commands/ImportCommand.php
modules/contrib/tome/modules/tome_static/modules/tome_static_cron/tests/src/Functional/TomeStaticCronTest.php
modules/contrib/tome/modules/tome_sync/src/EventSubscriber/ConfigEventSubscriber.php
modules/contrib/tome/modules/tome_static/src/Form/StaticGeneratorForm.php
modules/contrib/tome/modules/tome_sync/tests/src/Kernel/PathAliasTest.php
modules/contrib/tome/modules/tome_sync/tests/src/Functional/ImportPartialFormTest.php
modules/contrib/tome/modules/tome_sync/src/EventSubscriber/ContentHasherEventSubscriber.php
modules/contrib/tome/modules/tome_static/src/Commands/StaticExportPathCommand.php
modules/contrib/tome/modules/tome_sync/src/EventSubscriber/LanguageConfigEventSubscriber.php
modules/contrib/tome/modules/tome_static/src/StaticGeneratorInterface.php
modules/contrib/tome/modules/tome_sync/src/Exporter.php
modules/contrib/tome/modules/tome_static/src/StaticUITrait.php
modules/contrib/tome/modules/tome_sync/tests/src/Kernel/PathautoTest.php
modules/contrib/tome/modules/tome_sync/src/Commands/ImportCompleteCommand.php
modules/contrib/tome/modules/tome_sync/src/Commands/ImportContentCommand.php
modules/contrib/tome/modules/tome_static/src/Commands/StaticPreviewCommand.php
modules/contrib/tome/modules/tome_sync/src/Commands/ImportPartialCommand.php
modules/contrib/tome/modules/tome_static/src/TomeStaticHelper.php
modules/contrib/tome/modules/tome_static/src/Form/StaticPreviewForm.php
modules/contrib/tome/modules/tome_static/src/TomeStaticServiceProvider.php
modules/contrib/tome/modules/tome_static/src/LazyResettableContextRepository.php
modules/contrib/tome/modules/tome_sync/tests/src/Unit/Normalizer/ContentEntityNormalizerTest.php
modules/contrib/tome/modules/tome_static/src/PageCache/RequestPolicy/CoreRequestPolicy.php
modules/contrib/tome/modules/tome_static/src/PageCache/RequestPolicy/DynamicRequestPolicy.php
modules/contrib/tome/modules/tome_static/src/PageCache/RequestPolicy/UnsafeMethod.php
modules/contrib/tome/modules/tome_static/src/RequestPreparer.php
modules/contrib/tome/modules/tome_sync/tests/src/Kernel/ContentHasherTest.php
modules/contrib/tome/modules/tome_static/src/Controller/StaticDownloadController.php
modules/contrib/tome/modules/tome_sync/src/ExporterInterface.php
modules/contrib/tome/modules/tome_sync/src/FileSync.php
modules/contrib/tome/modules/tome_static/tests/modules/tome_test/src/Controller/TestController.php
modules/contrib/tome/modules/tome_static/src/ResettablePathMatcher.php
modules/contrib/tome/modules/tome_static/src/StackMiddleware/ResettablePageCache.php
modules/contrib/tome/modules/tome_static/src/StaticCache.php
modules/contrib/tome/modules/tome_static/tests/src/Functional/TomeStaticGeneratorFormTest.php
modules/contrib/tome/modules/tome_sync/src/FileSyncInterface.php
modules/contrib/tome/modules/tome_sync/src/Form/CleanFilesForm.php
modules/contrib/tome/modules/tome_sync/tests/src/Unit/Normalizer/EntityReferenceItemNormalizerTest.php
modules/contrib/tome/modules/tome_sync/tests/src/Kernel/ExporterTest.php
modules/contrib/tome/modules/tome_static/modules/tome_static_cron/tome_static_cron.module
modules/contrib/tome/modules/tome_static/src/Controller/StaticPreviewController.php
modules/contrib/tome/modules/tome_sync/src/Form/ImportPartialForm.php
modules/contrib/tome/modules/tome_static/modules/tome_static_super_cache/src/Commands/TomeSuperCacheRebuildCommand.php
modules/contrib/tome/modules/tome_static/src/Event/CollectPathsEvent.php
modules/contrib/tome/modules/tome_static/modules/tome_static_super_cache/src/Plugin/views/cache/SmartTag.php
modules/contrib/tome/modules/tome_static/src/StaticCacheInterface.php
modules/contrib/tome/modules/tome_static/src/Event/FileSavedEvent.php
modules/contrib/tome/modules/tome_sync/tests/src/Unit/Normalizer/FieldItemNormalizerTest.php
modules/contrib/tome/modules/tome_static/src/Event/ModifyDestinationEvent.php
modules/contrib/tome/modules/tome_static/src/Event/ModifyHtmlEvent.php
modules/contrib/tome/modules/tome_static/src/Event/PathPlaceholderEvent.php
modules/contrib/tome/modules/tome_static/src/Event/TomeStaticEvents.php
modules/contrib/tome/modules/tome_sync/tests/src/Unit/Normalizer/UserEntityNormalizerTest.php
modules/contrib/tome/modules/tome_sync/src/Importer.php
modules/contrib/tome/modules/tome_sync/tome_sync.install
modules/contrib/tome/modules/tome_sync/tome_sync.module
modules/contrib/tome/tests/performance/create_articles.php
modules/contrib/tome/modules/tome_static/tests/src/Functional/TomeStaticPreviewTest.php
modules/contrib/tome/modules/tome_sync/tests/src/Kernel/FieldDeletionTest.php
modules/contrib/tome/modules/tome_static/tests/src/Kernel/CollectPathsEventTest.php
modules/contrib/tome/modules/tome_sync/src/ImporterInterface.php
modules/contrib/tome/modules/tome_sync/src/JsonFileStorage.php
modules/contrib/tome/modules/tome_sync/src/JsonFileStorageFactory.php
modules/contrib/tome/modules/tome_sync/tests/src/Kernel/FileSyncTest.php
modules/contrib/tome/tome.install
modules/contrib/tome/modules/tome_static/tests/src/Kernel/FileSavedEventTest.php
modules/contrib/tome/modules/tome_static/tests/src/Kernel/ModifyDestinationEventTest.php
modules/contrib/tome/modules/tome_static/tests/src/Kernel/ModifyHtmlEventTest.php
modules/contrib/tome/modules/tome_static/tests/src/Kernel/PathPlaceholderEventTest.php
modules/contrib/tome/modules/tome_static/tests/src/Kernel/StaticCacheTest.php
modules/contrib/tome/modules/tome_static/tests/src/Kernel/StaticGeneratorTest.php
modules/contrib/tome/modules/tome_static/tests/src/Kernel/StaticRedirectTest.php
modules/contrib/tome/modules/tome_static/tests/src/Kernel/TomeStaticEventTestBase.php

50 files with changes
=====================

1) modules/contrib/tome/modules/tome_sync/src/Commands/ImportPartialCommand.php:55

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     if (!$this->contentHasher->hashesExist()) {
       $this->io()->error('No content hashes exist to perform a partial import. Please run a full Tome install and export (i.e. "drush tome:install && drush tome:export"), which will ensure hashes exist in the database and filesystem.');
       return 1;
@@ @@
     $this->state->set(ImporterInterface::STATE_KEY_IMPORTING, FALSE);

     $this->io()->success('Imported config, content, and files.');
+    return 0;
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * ConsoleExecuteReturnIntRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/tome/modules/tome_sync/src/Commands/ImportContentCommand.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $names = $input->getArgument('names');
     $names = explode(',', $names);
     foreach ($names as $name) {
@@ @@
       list($entity_type_id, $uuid, $langcode) = TomeSyncHelper::getPartsFromContentName($name);
       $this->importer->importContent($entity_type_id, $uuid, $langcode);
     }
+    return 0;
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * ConsoleExecuteReturnIntRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/tome/modules/tome_sync/src/Commands/ImportCompleteCommand.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_sync\Commands;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\tome_base\CommandBase;
 use Drupal\tome_sync\Event\TomeSyncEvents;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;

 /**
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
-    $this->eventDispatcher->dispatch(TomeSyncEvents::IMPORT_ALL, new Event());
+  protected function execute(InputInterface $input, OutputInterface $output): int {
+    $this->eventDispatcher->dispatch(new Event(), TomeSyncEvents::IMPORT_ALL);
+    return 0;
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * ConsoleExecuteReturnIntRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/tome/modules/tome_sync/src/Commands/ImportCommand.php:85

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $options = $input->getOptions();

     if (!$options['yes'] && !$this->io()->confirm('Your local site\'s config, content, and files will be deleted and replaced.', FALSE)) {
@@ @@
     $this->state->set(ImporterInterface::STATE_KEY_IMPORTING, FALSE);

     $this->io()->success('Imported config, content, and files.');
+    return 0;
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * ConsoleExecuteReturnIntRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/tome/modules/tome_sync/src/Commands/ExportContentCommand.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function execute(InputInterface $input, OutputInterface $output) {
+  public function execute(InputInterface $input, OutputInterface $output): int {
     $chunk = $input->getArgument('chunk');
     $id_pairs = explode(',', $chunk);
     $storages = [];
@@ @@
         $this->exporter->exportContent($entity->getTranslation($language->getId()));
       }
     }
+    return 0;
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * ConsoleExecuteReturnIntRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/tome/modules/tome_sync/src/Commands/ExportCommand.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_sync\Commands;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\tome_base\CommandBase;
 use Drupal\tome_sync\Event\TomeSyncEvents;
@@ @@
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Input\InputOption;
 use Symfony\Component\Console\Output\OutputInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;

 /**
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $options = $input->getOptions();
     if (!$options['yes'] && !$this->io()->confirm('The files in your export directory will be deleted and replaced.', FALSE)) {
       return 0;
@@ @@
       return 1;
     }

-    $this->eventDispatcher->dispatch(TomeSyncEvents::EXPORT_ALL, new Event());
+    $this->eventDispatcher->dispatch(new Event(), TomeSyncEvents::EXPORT_ALL);

     $this->io()->success('Exported config, content, and files.');
+    return 0;
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * ConsoleExecuteReturnIntRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/tome/modules/tome_sync/src/Commands/DeleteContentCommand.php:53

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function execute(InputInterface $input, OutputInterface $output) {
+  public function execute(InputInterface $input, OutputInterface $output): int {
     $this->configInstaller->setSyncing(TRUE);
     $this->importer->isImporting(TRUE);

@@ @@

     $this->importer->isImporting(FALSE);
     $this->configInstaller->setSyncing(FALSE);
+    return 0;
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * ConsoleExecuteReturnIntRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/tome/modules/tome_sync/src/Commands/CleanFilesCommand.php:83

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $options = $input->getOptions();

     $this->io()->writeLn('Searching for unused files...');
@@ @@
       $this->fileSync->deleteFile($filename);
     }
     $this->io()->success('Deleted all unused files.');
+    return 0;
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * ConsoleExecuteReturnIntRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/tome/modules/tome_static/src/EventSubscriber/StaticPreviewRequestSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_static\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Routing\CurrentRouteMatch;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Url;
@@ @@
 use Symfony\Component\HttpFoundation\File\File;
 use Symfony\Component\HttpFoundation\Response;
 use Symfony\Component\HttpFoundation\Session\Session;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Sets a response in case of a Dynamic Page Cache hit.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event to process.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     $request = $event->getRequest();
     if (!$this->session->get(static::SESSION_KEY) || $this->routeMatch->getRouteName() === 'tome_static.preview_exit') {
       return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


10) modules/contrib/tome/modules/tome_static/src/Event/PathPlaceholderEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_static\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Allows modules that provide placeholder paths to load the real path.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/tome/modules/tome_static/src/Event/ModifyHtmlEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_static\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Allows modules to modify the HTML of a static page before save.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/tome/modules/tome_static/src/Event/ModifyDestinationEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_static\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Allows modules to modify the HTML of a static page before save.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/tome/modules/tome_static/src/Event/FileSavedEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_static\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Allows modules to react to a file save.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/tome/modules/tome_static/src/Event/CollectPathsEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_static\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Wraps an array of paths that will be processed by the static generator.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/tome/modules/tome_static/src/Commands/StaticPreviewCommand.php:48

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     if (!file_exists($this->static->getStaticDirectory())) {
       $this->io()->error('Static directory does not exist. Have you ran the "tome:static" command yet?');
       return 1;
@@ @@
     $url = '127.0.0.1:' . $options['port'];
     $this->startBrowser('http://' . $url . base_path(), 2);
     $this->runCommand('php -S ' . escapeshellarg($url), $this->static->getStaticDirectory(), NULL);
+    return 0;
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * ConsoleExecuteReturnIntRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


16) modules/contrib/tome/modules/tome_static/src/Commands/StaticExportPathCommand.php:59

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $chunk = $input->getArgument('chunk');
     $paths = explode(',', $chunk);
     $invoke_paths = [];
@@ @@
     else {
       $this->exportPaths($invoke_paths, $paths, $options['process-count'], $options['path-count'], FALSE, $options['retry-count'], $options['uri']);
     }
+    return 0;
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * ConsoleExecuteReturnIntRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/tome/modules/tome_static/src/Commands/StaticCommand.php:85

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $options = $input->getOptions();

     if ($this->state->get(StaticGeneratorInterface::STATE_KEY_BUILDING, FALSE)) {
@@ @@
     if ($options['run-server']) {
       $this->runCommand($this->executable . ' tome:preview --port=' . escapeshellarg($options['port']), NULL, NULL);
     }
+    return 0;
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * ConsoleExecuteReturnIntRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


18) modules/contrib/tome/modules/tome_static/modules/tome_static_super_cache/src/Commands/TomeSuperCacheRebuildCommand.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $GLOBALS[SuperStaticCache::FULL_REBUILD_KEY] = TRUE;
     drupal_flush_all_caches();
     $this->io()->success('Full cache rebuild complete.');
+    return 0;
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * ConsoleExecuteReturnIntRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


19) modules/contrib/tome/modules/tome_static/modules/tome_static_cron/tests/src/Functional/TomeStaticCronTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->createContentType([
@@ @@
     _tome_static_cron_queue_paths(['/node/' . $node->id()], 'http://google.com');

     $filename = $static->getStaticDirectory() . '/node/' . $node->id() . '/index.html';
-    $image_filename = $static->getStaticDirectory() . file_url_transform_relative(file_create_url(ImageStyle::load('large')->buildUri($file->getFileUri())));
-    $this->assertFileNotExists($filename);
-    $this->assertFileNotExists($image_filename);
+    $image_filename = $static->getStaticDirectory() . \Drupal::service('file_url_generator')->generateString(ImageStyle::load('large')->buildUri($file->getFileUri()));
+    $this->assertFileDoesNotExist($filename);
+    $this->assertFileDoesNotExist($image_filename);
     $this->cronRun();
     $this->assertFileExists($filename);
     $this->assertFileExists($image_filename);
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/tome/modules/tome_base/tests/src/Unit/ExecutableFinderTraitTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_base\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\UnitTestCase;
 use Drupal\tome_base\ExecutableFinderTrait;
 use Symfony\Component\Console\Input\InputInterface;
@@ @@
  */
 class ExecutableFinderTraitTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @covers \Drupal\tome_base\ExecutableFinderTrait::findExecutable
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/tome/modules/tome_base/tests/src/Kernel/TestBase.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->setUpFilesystem();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/tome/modules/tome_sync/src/Importer.php:227

    ---------- begin diff ----------
@@ @@
     $this->isImporting(FALSE);
     if (isset($imported_entity)) {
       $event = new ContentCrudEvent($imported_entity);
-      $this->eventDispatcher->dispatch(TomeSyncEvents::IMPORT_CONTENT, $event);
+      $this->eventDispatcher->dispatch($event, TomeSyncEvents::IMPORT_CONTENT);
     }
     $this->switchBack();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


23) modules/contrib/tome/modules/tome_sync/src/Exporter.php:154

    ---------- begin diff ----------
@@ @@
       $this->fileSync->exportFile($entity);
     }
     $event = new ContentCrudEvent($entity);
-    $this->eventDispatcher->dispatch(TomeSyncEvents::EXPORT_CONTENT, $event);
+    $this->eventDispatcher->dispatch($event, TomeSyncEvents::EXPORT_CONTENT);
     $this->switchBack();
   }

@@ @@
       $this->fileSync->deleteFileExport($entity);
     }
     $event = new ContentCrudEvent($entity);
-    $this->eventDispatcher->dispatch(TomeSyncEvents::DELETE_CONTENT, $event);
+    $this->eventDispatcher->dispatch($event, TomeSyncEvents::DELETE_CONTENT);
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


24) modules/contrib/tome/modules/tome_sync/src/Event/ContentCrudEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tome_sync\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Wraps a content event for listeners.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


25) modules/contrib/tome/modules/tome_sync/tests/src/Unit/Normalizer/UserEntityNormalizerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_sync\Unit\Normalizer;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
  */
 class UserEntityNormalizerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Tests the normalize() method.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


26) modules/contrib/tome/modules/tome_sync/tests/src/Unit/Normalizer/FieldItemNormalizerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_sync\Unit\Normalizer;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Core\TypedData\ComplexDataDefinitionInterface;
 use Drupal\Core\TypedData\DataDefinitionInterface;
@@ @@
  */
 class FieldItemNormalizerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Tests the normalize() method.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


27) modules/contrib/tome/modules/tome_sync/tests/src/Unit/Normalizer/EntityReferenceItemNormalizerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_sync\Unit\Normalizer;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
  */
 class EntityReferenceItemNormalizerTest extends UnitTestCase {

+  use ProphecyTrait;
   use InternalTypedDataTestTrait;

   /**
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


28) modules/contrib/tome/modules/tome_sync/tests/src/Unit/Normalizer/ContentEntityNormalizerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tome_sync\Unit\Normalizer;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
  */
 class ContentEntityNormalizerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Tests the normalize() method.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


29) modules/contrib/tome/modules/tome_sync/tests/src/Kernel/PathautoTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
     $this->installEntitySchema('path_alias');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/tome/modules/tome_sync/tests/src/Kernel/PathAliasTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
     $this->installEntitySchema('path_alias');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/tome/modules/tome_sync/tests/src/Kernel/LinkItemTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
     $this->installEntitySchema('path_alias');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/tome/modules/tome_sync/tests/src/Kernel/ImporterTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
   }
@@ @@
     $yml_file = Settings::get('tome_content_directory', '../content') . '/node.' . $uuid . '.yml';
     $json_file = Settings::get('tome_content_directory', '../content') . '/node.' . $uuid . '.json';
     $this->assertFileExists($yml_file);
-    $this->assertFileNotExists($json_file);
+    $this->assertFileDoesNotExist($json_file);

     $this->assertFalse((bool) $repository->loadEntityByUuid('node', $uuid));
     $importer->importContent('node', $uuid);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/tome/modules/tome_sync/tests/src/Kernel/FileSyncTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->fileSystem = \Drupal::service('file_system');
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/tome/modules/tome_sync/tests/src/Kernel/FieldDeletionTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/tome/modules/tome_sync/tests/src/Kernel/ExporterTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
     if (\Drupal::entityTypeManager()->hasDefinition('path_alias')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/tome/modules/tome_sync/tests/src/Kernel/ContentHasherTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/tome/modules/tome_sync/tests/src/Functional/ImportPartialFormTest.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Note: The format for ::writeSettings is really weird.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/tome/modules/tome_sync/tests/src/Functional/BookTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('system_breadcrumb_block');
     $this->drupalPlaceBlock('page_title_block');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/tome/modules/tome_static/tests/src/Kernel/TomeStaticEventTestBase.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->eventDispatcher = \Drupal::service('event_dispatcher');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/tome/modules/tome_static/tests/src/Kernel/StaticRedirectTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('redirect');
     // @see \Drupal\redirect\RedirectChecker::canRedirect
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/tome/modules/tome_static/tests/src/Kernel/StaticGeneratorTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     User::create([
@@ @@
     \Drupal::entityTypeManager()->getAccessControlHandler('node')->resetCache();
     $static->requestPath('/');
     $static->requestPath('_entity:node:en:1');
-    $this->assertFileNotExists("$base_dir/node/1/index.html");
+    $this->assertFileDoesNotExist("$base_dir/node/1/index.html");
     $static->requestPath('_entity:node:fr:1');
     $this->assertFileExists("$base_dir/french/node/1/index.html");
   }
@@ @@
     $static = \Drupal::service('tome_static.generator');

     $invoke_paths = $static->requestPath('/tome-test/complex-page');
-    $module_path = drupal_get_path('module', 'tome_test');
+    $module_path = \Drupal::service('extension.list.module')->getPath('tome_test');
     $base_dir = Settings::get('tome_static_directory');

     $this->assertContains("/$module_path/assets/srcset-test1.png", $invoke_paths);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/tome/modules/tome_static/tests/src/Kernel/StaticCacheTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     User::create([
@@ @@
     $this->assertFileExists("$base_dir/node/1/index.html");
     $article->delete();
     $static->cleanupStaticDirectory();
-    $this->assertFileNotExists("$base_dir/node/1/index.html");
+    $this->assertFileDoesNotExist("$base_dir/node/1/index.html");
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/tome/modules/tome_static/tests/src/Kernel/PathPlaceholderEventTest.php:50

    ---------- begin diff ----------
@@ @@
    */
   protected function pathPlaceholder($path = '/my-path/{placeholder}') {
     $event = new PathPlaceholderEvent($path);
-    $this->eventDispatcher->dispatch($this->eventName, $event);
+    $this->eventDispatcher->dispatch($event, $this->eventName);
     return $event;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


44) modules/contrib/tome/modules/tome_static/tests/src/Kernel/ModifyHtmlEventTest.php:73

    ---------- begin diff ----------
@@ @@
    */
   protected function modifyHtml($html = 'HTML', $path = '/my-path') {
     $event = new ModifyHtmlEvent($html, $path);
-    $this->eventDispatcher->dispatch($this->eventName, $event);
+    $this->eventDispatcher->dispatch($event, $this->eventName);
     return $event;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


45) modules/contrib/tome/modules/tome_static/tests/src/Kernel/ModifyDestinationEventTest.php:39

    ---------- begin diff ----------
@@ @@
    */
   protected function modifyDestination($destination = '/my-destination') {
     $event = new ModifyDestinationEvent($destination);
-    $this->eventDispatcher->dispatch($this->eventName, $event);
+    $this->eventDispatcher->dispatch($event, $this->eventName);
     return $event->getDestination();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


46) modules/contrib/tome/modules/tome_static/tests/src/Kernel/FileSavedEventTest.php:38

    ---------- begin diff ----------
@@ @@
    */
   protected function fileSaved($path = '/my-file-path') {
     $event = new FileSavedEvent($path);
-    $this->eventDispatcher->dispatch($this->eventName, $event);
+    $this->eventDispatcher->dispatch($event, $this->eventName);
     return $event;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


47) modules/contrib/tome/modules/tome_static/tests/src/Kernel/CollectPathsEventTest.php:83

    ---------- begin diff ----------
@@ @@
    */
   protected function collectPaths(array $paths = []) {
     $event = new CollectPathsEvent($paths);
-    $this->eventDispatcher->dispatch($this->eventName, $event);
+    $this->eventDispatcher->dispatch($event, $this->eventName);
     return $event->getPaths();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


48) modules/contrib/tome/modules/tome_static/tests/src/Functional/TomeStaticGeneratorFormTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->createContentType([
@@ @@
     ]);

     $filename = $static->getStaticDirectory() . base_path() . 'node/' . $node->id() . '/index.html';
-    $image_filename = $static->getStaticDirectory() . file_url_transform_relative(file_create_url(ImageStyle::load('large')->buildUri($file->getFileUri())));
-    $this->assertFileNotExists($filename);
-    $this->assertFileNotExists($image_filename);
+    $image_filename = $static->getStaticDirectory() . \Drupal::service('file_url_generator')->generateString(ImageStyle::load('large')->buildUri($file->getFileUri()));
+    $this->assertFileDoesNotExist($filename);
+    $this->assertFileDoesNotExist($image_filename);

     $this->drupalGet('/admin/config/tome/static/generate');
     $this->submitForm([], 'Submit');
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/tome/modules/tome_static/tests/modules/tome_test/src/Controller/TestController.php:25

    ---------- begin diff ----------
@@ @@
    * Outputs a more complex test page.
    */
   public function testComplexPage(Request $request) {
-    $module_path = drupal_get_path('module', 'tome_test');
+    $module_path = \Drupal::service('extension.list.module')->getPath('tome_test');
     return [
       '#children' => "<p>Hello, complex world</p>
 <img src=\"/$module_path/assets/druplicon-1.png\">
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


50) modules/contrib/tome/modules/tome_static/src/StaticGenerator.php:114

    ---------- begin diff ----------
@@ @@
   public function getPaths() {
     $this->accountSwitcher->switchTo(new AnonymousUserSession());
     $event = new CollectPathsEvent([]);
-    $this->eventDispatcher->dispatch(TomeStaticEvents::COLLECT_PATHS, $event);
+    $this->eventDispatcher->dispatch($event, TomeStaticEvents::COLLECT_PATHS);
     $paths = $event->getPaths();

     $paths = $this->cache->filterUncachedPaths($this->currentRequest->getSchemeAndHttpHost(), $paths);
@@ @@
     $original_path = $path;

     $event = new PathPlaceholderEvent($path);
-    $this->eventDispatcher->dispatch(TomeStaticEvents::PATH_PLACEHOLDER, $event);
+    $this->eventDispatcher->dispatch($event, TomeStaticEvents::PATH_PLACEHOLDER);

     if ($event->isInvalid()) {
       $this->accountSwitcher->switchBack();
@@ @@
         $content = $response->getContent();
         if (strpos($response->headers->get('Content-Type'), 'text/html') === 0) {
           $event = new ModifyHtmlEvent($content, $path);
-          $this->eventDispatcher->dispatch(TomeStaticEvents::MODIFY_HTML, $event);
+          $this->eventDispatcher->dispatch($event, TomeStaticEvents::MODIFY_HTML);
           $content = $event->getHtml();
           $invoke_paths = array_merge($invoke_paths, $this->getHtmlAssets($content, $path), $event->getInvokePaths());
           $invoke_paths = array_diff($invoke_paths, $event->getExcludePaths());
@@ @@
         }
         file_put_contents($destination, $content);
       }
-      $this->eventDispatcher->dispatch(TomeStaticEvents::FILE_SAVED, new FileSavedEvent($destination));
+      $this->eventDispatcher->dispatch(new FileSavedEvent($destination), TomeStaticEvents::FILE_SAVED);

       if ($response instanceof RedirectResponse) {
         $target_url = $this->makeExternalUrlLocal($response->getTargetUrl());
@@ @@
    */
   protected function getDestination($path) {
     $event = new ModifyDestinationEvent($path);
-    $this->eventDispatcher->dispatch(TomeStaticEvents::MODIFY_DESTINATION, $event);
+    $this->eventDispatcher->dispatch($event, TomeStaticEvents::MODIFY_DESTINATION);
     $path = $event->getDestination();
     $path = urldecode($path);
     $path = $this->sanitizePath($path);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


 [OK] 50 files have been changed by Rector                                      

