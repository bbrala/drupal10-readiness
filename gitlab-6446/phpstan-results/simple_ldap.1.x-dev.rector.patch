diff --git a/modules/simple_ldap_user/simple_ldap_user.module b/modules/simple_ldap_user/simple_ldap_user.module
index 670463f..f4a024b 100644
--- a/modules/simple_ldap_user/simple_ldap_user.module
+++ b/modules/simple_ldap_user/simple_ldap_user.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\user\Entity\User;
 use Drupal\user\UserInterface;
@@ -7,7 +8,7 @@ use Drupal\user\UserInterface;
 /**
  * Implements hook_form_FORM_ID_alter().
  */
-function simple_ldap_user_form_user_login_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function simple_ldap_user_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   // Put our validation function after Drupal's auth (::validateAuthentication)
   // and before ::validateFinal. This way, we have the chance to set the uid
   // so ::validateFinal passes. By doing it this way, we still benefit from
@@ -25,7 +26,7 @@ function simple_ldap_user_form_user_login_form_alter(&$form, \Drupal\Core\Form\F
 /**
  * Implements hook_form_FORM_ID_alter().
  */
-function simple_ldap_user_form_user_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function simple_ldap_user_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   $server = \Drupal::service('simple_ldap.server');
   /** @var \Drupal\user\UserInterface $user */
   $user = $form_state->getFormObject()->getEntity();
@@ -56,7 +57,7 @@ function simple_ldap_user_form_user_form_alter(&$form, \Drupal\Core\Form\FormSta
  *
  * Attempts LDAP authentication for user login attempts.
  */
-function simple_ldap_user_login_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
+function simple_ldap_user_login_validate(&$form, FormStateInterface $form_state) {
   $name = $form_state->getValue('name');
   $password = $form_state->getValue('pass');
 
@@ -100,7 +101,7 @@ function simple_ldap_user_login_validate(&$form, \Drupal\Core\Form\FormStateInte
 /**
  * Custom validation handler for the user profile form.
  */
-function simple_ldap_user_profile_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
+function simple_ldap_user_profile_validate(&$form, FormStateInterface $form_state) {
   // Only do this validation if the Submit button was pressed. Otherwise, it
   // gets annoying.
   if ($form_state->getTriggeringElement() !== 'submit') {
diff --git a/modules/simple_ldap_user/src/SimpleLdapUserSync.php b/modules/simple_ldap_user/src/SimpleLdapUserSync.php
index a3d8f95..ed22fe7 100644
--- a/modules/simple_ldap_user/src/SimpleLdapUserSync.php
+++ b/modules/simple_ldap_user/src/SimpleLdapUserSync.php
@@ -122,7 +122,7 @@ class SimpleLdapUserSync {
     $event = new SimpleLdapUserEvent($user, $account);
     // If save is enforced we can safely skip serialization.
     $hashed_pre = $save_happening ? '' : $this->serialize($account);
-    $this->eventDispatcher->dispatch(Events::USER_SYNCHRONIZATION, $event);
+    $this->eventDispatcher->dispatch($event, Events::USER_SYNCHRONIZATION);
     $hashed_post = $save_happening ? '' : $this->serialize($account);
     $has_changed = $hashed_pre !== $hashed_post;
     if (empty($scheduled_saves[$uuid]) && ($has_changed || $force_save)) {
diff --git a/modules/simple_ldap_user/tests/src/Functional/SimpleLdapUserTest.php b/modules/simple_ldap_user/tests/src/Functional/SimpleLdapUserTest.php
index 9dc4176..8474124 100644
--- a/modules/simple_ldap_user/tests/src/Functional/SimpleLdapUserTest.php
+++ b/modules/simple_ldap_user/tests/src/Functional/SimpleLdapUserTest.php
@@ -25,7 +25,7 @@ class SimpleLdapUserTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     if (!extension_loaded('ldap')) {
       $this->markTestSkipped("Skipping because the PHP LDAP extension is not enabled.");
     }
@@ -73,23 +73,26 @@ class SimpleLdapUserTest extends BrowserTestBase {
       'name' => 'einstein',
       'pass' => 'password',
     ];
-    $this->drupalPostForm($user_login_url, $edit, t('Log in'));
-    $this->assertText(t('New user created for einstein.'));
+    $this->drupalGet($user_login_url);
+    $this->submitForm($edit, t('Log in'));
+    $this->assertSession()->pageTextContains(t('New user created for einstein.'));
 
     // 2. Correct username & incorrect password.
     $edit = [
       'name' => 'einstein',
       'pass' => 'incorrect!',
     ];
-    $this->drupalPostForm($user_login_url, $edit, t('Log in'));
-    $this->assertText(t('Could not authenticate with your username/password in LDAP. Please contact your site administrator.'));
+    $this->drupalGet($user_login_url);
+    $this->submitForm($edit, t('Log in'));
+    $this->assertSession()->pageTextContains(t('Could not authenticate with your username/password in LDAP. Please contact your site administrator.'));
 
     // 3. Incorrect username & incorrect password.
     $edit = [
       'name' => 'nobodyNotExists',
       'pass' => 'incorrect!',
     ];
-    $this->drupalPostForm($user_login_url, $edit, t('Log in'));
-    $this->assertText(t('An account could not be found or an ID conflict has been detected. Please contact your site administrator.'));
+    $this->drupalGet($user_login_url);
+    $this->submitForm($edit, t('Log in'));
+    $this->assertSession()->pageTextContains(t('An account could not be found or an ID conflict has been detected. Please contact your site administrator.'));
   }
 }
diff --git a/modules/simple_ldap_user/tests/src/Unit/SimpleLdapUserManagerTest.php b/modules/simple_ldap_user/tests/src/Unit/SimpleLdapUserManagerTest.php
index e742d34..2bc01ab 100644
--- a/modules/simple_ldap_user/tests/src/Unit/SimpleLdapUserManagerTest.php
+++ b/modules/simple_ldap_user/tests/src/Unit/SimpleLdapUserManagerTest.php
@@ -49,20 +49,14 @@ class SimpleLdapUserManagerTest extends SimpleLdapTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
-    $this->server = $this->getMockBuilder('\Drupal\simple_ldap\SimpleLdapServer')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->server = $this->createMock('\Drupal\simple_ldap\SimpleLdapServer');
 
-    $this->query_factory = $this->getMockBuilder('\Drupal\Core\Entity\Query\QueryFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->query_factory = $this->createMock('\Drupal\Core\Entity\Query\QueryFactory');
 
-    $this->entity_manager = $this->getMockBuilder('\Drupal\Core\Entity\EntityTypeManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity_manager = $this->createMock('\Drupal\Core\Entity\EntityTypeManager');
   }
 
   /**
@@ -110,9 +104,7 @@ class SimpleLdapUserManagerTest extends SimpleLdapTestBase {
     $attributes = $ldap_user->getAttributes();
     $this->setUpDrupalUserTests();
 
-    $query = $this->getMockBuilder('\Drupal\Core\Entity\Query\QueryInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $query = $this->createMock('\Drupal\Core\Entity\Query\QueryInterface');
     $query->expects($this->exactly(2))
       ->method('condition')
       ->willReturn($query);
@@ -124,9 +116,7 @@ class SimpleLdapUserManagerTest extends SimpleLdapTestBase {
       ->method('get')
       ->willReturn($query);
 
-    $user_storage = $this->getMockBuilder('\Drupal\user\UserStorage')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user_storage = $this->createMock('\Drupal\user\UserStorage');
     $user_storage->expects($this->once())
       ->method('load')
       ->with(5)
@@ -161,14 +151,9 @@ class SimpleLdapUserManagerTest extends SimpleLdapTestBase {
         'mail'
       ));
 
-    $user_storage = $this->getMockBuilder('\Drupal\user\UserStorage')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user_storage = $this->createMock('\Drupal\user\UserStorage');
 
-    $user = $this->getMockBuilder('\Drupal\user\User')
-      ->disableOriginalConstructor()
-      ->setMethods(array('enforceIsNew', 'activate', 'save'))
-      ->getMock();
+    $user = $this->createMock('\Drupal\user\User');
     $user->expects($this->once())
       ->method('enforceIsNew');
     $user->expects($this->once())
diff --git a/tests/src/Functional/SimpleLdapTest.php b/tests/src/Functional/SimpleLdapTest.php
index 3ef1093..81a837a 100644
--- a/tests/src/Functional/SimpleLdapTest.php
+++ b/tests/src/Functional/SimpleLdapTest.php
@@ -51,7 +51,7 @@ class SimpleLdapTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     if (!extension_loaded('ldap')) {
       $this->markTestSkipped("Skipping because the PHP LDAP extension is not enabled.");
     }
@@ -117,13 +117,13 @@ class SimpleLdapTest extends BrowserTestBase {
     $server = \Drupal::service('simple_ldap.ldap_wrapper');
     $server->connect();
     // Test that the server is connected.
-    $this->assertEqual("simple_ldap.ldap_wrapper", $server->_serviceId);
+    $this->assertEquals("simple_ldap.ldap_wrapper", $server->_serviceId);
     // Test that the server is unbound.
-    $this->assertEqual(FALSE, $server->isBound());
+    $this->assertEquals(FALSE, $server->isBound());
 
     // Test SimpleLdap::ldapBind().
     $server->ldapBind($this->binddn, $this->bindpw);
-    $this->assertEqual(TRUE, $server->isBound());
+    $this->assertEquals(TRUE, $server->isBound());
 
     // Test SimpleLdap::ldapSearch() and SimpleLdap::getEntries().
     $base_dn = 'dc=example,dc=com';
@@ -131,18 +131,18 @@ class SimpleLdapTest extends BrowserTestBase {
     $attributes = array();
     $search_results = $server->ldapSearch($base_dn, $search_filter, $attributes);
     $search_info = $server->getEntries($search_results);
-    $this->assertEqual(1, $search_info['count']);
+    $this->assertEquals(1, $search_info['count']);
 
     // Test SimpleLdap::ldapRead().
     $object_class_filter = 'objectClass=*';
     $read_results = $server->ldapRead($base_dn, $object_class_filter, $attributes);
     $read_info = $server->getEntries($read_results);
-    $this->assertEqual(1, $read_info['count']);
+    $this->assertEquals(1, $read_info['count']);
 
     // Test SimpleLdap::ldapList().
     $list_filter = "ou=mathematicians";
     $list_results = $server->ldapList($base_dn, $list_filter, $attributes);
     $list_info = $server->getEntries($list_results);
-    $this->assertEqual(1, $list_info['count']);
+    $this->assertEquals(1, $list_info['count']);
   }
 }
diff --git a/tests/src/Unit/SimpleLdapServerTest.php b/tests/src/Unit/SimpleLdapServerTest.php
index b0b5647..e045c6f 100644
--- a/tests/src/Unit/SimpleLdapServerTest.php
+++ b/tests/src/Unit/SimpleLdapServerTest.php
@@ -31,12 +31,10 @@ class SimpleLdapServerTest extends SimpleLdapTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
-    $this->ldap = $this->getMockBuilder('\Drupal\simple_ldap\SimpleLdap')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->ldap = $this->createMock('\Drupal\simple_ldap\SimpleLdap');
   }
 
   /**
diff --git a/tests/src/Unit/SimpleLdapTestBase.php b/tests/src/Unit/SimpleLdapTestBase.php
index 9781b13..777774c 100644
--- a/tests/src/Unit/SimpleLdapTestBase.php
+++ b/tests/src/Unit/SimpleLdapTestBase.php
@@ -36,16 +36,12 @@ abstract class SimpleLdapTestBase extends UnitTestCase {
    *
    * @param string $config_name
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
-    $this->config = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->config = $this->createMock('\Drupal\Core\Config\ImmutableConfig');
 
-    $this->config_factory = $this->getMockBuilder('\Drupal\Core\Config\ConfigFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->config_factory = $this->createMock('\Drupal\Core\Config\ConfigFactory');
     $this->config_factory->expects($this->once())
       ->method('get')
       ->with($this->config_name)
