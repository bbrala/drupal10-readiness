diff --git a/modules/quant_api/src/Client/QuantClient.php b/modules/quant_api/src/Client/QuantClient.php
index 426f896..0da32df 100644
--- a/modules/quant_api/src/Client/QuantClient.php
+++ b/modules/quant_api/src/Client/QuantClient.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\quant_api\Client;
 
+use function GuzzleHttp\Psr7\stream_for;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use GuzzleHttp\Client;
 use GuzzleHttp\RequestOptions;
@@ -235,7 +236,7 @@ class QuantClient implements QuantClientInterface {
 
     // Prepare a stream.
     $resource = fopen($file, 'r');
-    $stream = Psr7\stream_for($resource);
+    $stream = stream_for($resource);
 
     $headers = [
       'Quant-File-Url' => $url,
diff --git a/modules/quant_api/src/EventSubscriber/QuantApi.php b/modules/quant_api/src/EventSubscriber/QuantApi.php
index 434804e..c4a130b 100644
--- a/modules/quant_api/src/EventSubscriber/QuantApi.php
+++ b/modules/quant_api/src/EventSubscriber/QuantApi.php
@@ -184,7 +184,7 @@ class QuantApi implements EventSubscriberInterface {
       // If the file exists we send it directly to quant otherwise we add it
       // to the queue to generate assets on the next run.
       if (file_exists($fileOnDisk)) {
-        $this->eventDispatcher->dispatch(QuantFileEvent::OUTPUT, new QuantFileEvent($fileOnDisk, $item['full_path'] ?? $file));
+        $this->eventDispatcher->dispatch(new QuantFileEvent($fileOnDisk, $item['full_path'] ?? $file), QuantFileEvent::OUTPUT);
       }
       else {
         $file_item = new FileItem([
diff --git a/modules/quant_sitemap/tests/src/Unit/CollectionSubscriberTest.php b/modules/quant_sitemap/tests/src/Unit/CollectionSubscriberTest.php
index bbf7544..f60a0b6 100644
--- a/modules/quant_sitemap/tests/src/Unit/CollectionSubscriberTest.php
+++ b/modules/quant_sitemap/tests/src/Unit/CollectionSubscriberTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\quant_sitemap\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\KeyValueStore\StorageBase;
 use Drupal\Core\Language\Language;
 use Drupal\Tests\UnitTestCase;
@@ -17,6 +18,7 @@ use Drupal\xmlsitemap\Entity\XmlSitemap;
  */
 class CollectionSubscriberTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Ensure that the XmlSitemapItems are generated correctly.
    */
diff --git a/src/Event/ConfigFormEventBase.php b/src/Event/ConfigFormEventBase.php
index 4e60b15..8d066b1 100644
--- a/src/Event/ConfigFormEventBase.php
+++ b/src/Event/ConfigFormEventBase.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\quant\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\quant\Plugin\QueueItem\RouteItem;
 
diff --git a/src/Event/NodeInsertEvent.php b/src/Event/NodeInsertEvent.php
index ef6b289..ac65865 100644
--- a/src/Event/NodeInsertEvent.php
+++ b/src/Event/NodeInsertEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\quant\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
 
 /**
diff --git a/src/Event/QuantEvent.php b/src/Event/QuantEvent.php
index 51bab6f..2b7dfee 100644
--- a/src/Event/QuantEvent.php
+++ b/src/Event/QuantEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\quant\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * The transport event.
diff --git a/src/Event/QuantFileEvent.php b/src/Event/QuantFileEvent.php
index 6a40af3..68c575d 100644
--- a/src/Event/QuantFileEvent.php
+++ b/src/Event/QuantFileEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\quant\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * The transport event (files).
diff --git a/src/Event/QuantRedirectEvent.php b/src/Event/QuantRedirectEvent.php
index aee073d..26da9ce 100644
--- a/src/Event/QuantRedirectEvent.php
+++ b/src/Event/QuantRedirectEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\quant\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * The transport event (redirects).
diff --git a/src/EventSubscriber/TokenAccessSubscriber.php b/src/EventSubscriber/TokenAccessSubscriber.php
index ba9cd5f..3c62479 100644
--- a/src/EventSubscriber/TokenAccessSubscriber.php
+++ b/src/EventSubscriber/TokenAccessSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\quant\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\quant\Exception\ExpiredTokenException;
 use Drupal\quant\Exception\InvalidTokenException;
@@ -9,7 +10,6 @@ use Drupal\quant\Exception\StrictTokenException;
 use Drupal\quant\Exception\TokenValidationDisabledException;
 use Drupal\quant\TokenManager;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\HttpKernel\Exception\ServiceUnavailableHttpException;
 
@@ -51,7 +51,7 @@ class TokenAccessSubscriber implements EventSubscriberInterface {
   /**
    * Validate the token on the incoming request.
    */
-  public function validateToken(GetResponseEvent $event) {
+  public function validateToken(RequestEvent $event) {
     /** @var Symfony\Component\HttpFoundation\Request $request */
     $request = $event->getRequest();
 
diff --git a/src/Form/SeedForm.php b/src/Form/SeedForm.php
index bae1d66..d6d3ecc 100644
--- a/src/Form/SeedForm.php
+++ b/src/Form/SeedForm.php
@@ -352,23 +352,23 @@ class SeedForm extends FormBase {
     if ($form_state->getValue('redirects')) {
       // Collect the redirects for the seed.
       $event = new CollectRedirectsEvent($form_state);
-      $this->dispatcher->dispatch(QuantCollectionEvents::REDIRECTS, $event);
+      $this->dispatcher->dispatch($event, QuantCollectionEvents::REDIRECTS);
     }
 
     if ($form_state->getValue('entity_node') || $form_state->getValue('entity_node_revisions')) {
       $event = new CollectEntitiesEvent($form_state);
-      $this->dispatcher->dispatch(QuantCollectionEvents::ENTITIES, $event);
+      $this->dispatcher->dispatch($event, QuantCollectionEvents::ENTITIES);
     }
 
     $event = new CollectRoutesEvent($form_state);
-    $this->dispatcher->dispatch(QuantCollectionEvents::ROUTES, $event);
+    $this->dispatcher->dispatch($event, QuantCollectionEvents::ROUTES);
 
     foreach ($routes as $route) {
       $event->queueItem($route);
     }
 
     $event = new CollectFilesEvent($form_state);
-    $this->dispatcher->dispatch(QuantCollectionEvents::FILES, $event);
+    $this->dispatcher->dispatch($event, QuantCollectionEvents::FILES);
 
     foreach ($assets as $asset) {
       $event->queueItem($asset);
diff --git a/src/Seed.php b/src/Seed.php
index 0233a34..1f04142 100644
--- a/src/Seed.php
+++ b/src/Seed.php
@@ -59,8 +59,8 @@ class Seed {
       $files[] = str_replace(DRUPAL_ROOT, '', $filename->getPathname());
     }
 
-    $files[] = '/' . drupal_get_path('module', 'lunr') . '/js/search.worker.js';
-    $files[] = '/' . drupal_get_path('module', 'lunr') . '/js/vendor/lunr/lunr.min.js';
+    $files[] = '/' . \Drupal::service('extension.list.module')->getPath('lunr') . '/js/search.worker.js';
+    $files[] = '/' . \Drupal::service('extension.list.module')->getPath('lunr') . '/js/vendor/lunr/lunr.min.js';
 
     return $files;
   }
