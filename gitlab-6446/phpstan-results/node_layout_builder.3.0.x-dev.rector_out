modules/contrib/node_layout_builder/src/Helpers/NodeLayoutBuilderHelper.php
modules/contrib/node_layout_builder/node_layout_builder.data.templates.inc
modules/contrib/node_layout_builder/node_layout_builder.install
modules/contrib/node_layout_builder/node_layout_builder.module
modules/contrib/node_layout_builder/src/Controller/DataController.php
modules/contrib/node_layout_builder/src/Helpers/NodeLayoutFileHelper.php
modules/contrib/node_layout_builder/src/Controller/LayoutElementController.php
modules/contrib/node_layout_builder/src/NodeLayoutBuilderEditor.php
modules/contrib/node_layout_builder/src/Entity/NodeLayoutBuilder.php
modules/contrib/node_layout_builder/src/Entity/NodeLayoutBuilderTemplate.php
modules/contrib/node_layout_builder/src/Form/AddElementForm.php
modules/contrib/node_layout_builder/src/NodeLayoutBuilderStyle.php
modules/contrib/node_layout_builder/src/Services/NodeLayoutBuilderManager.php

6 files with changes
====================

1) modules/contrib/node_layout_builder/src/Form/AddElementForm.php:295

    ---------- begin diff ----------
@@ @@
     $prefix = '<' . $tag_element . ' class="updated ' . $class . ' ' . $type_element . ' ' . $attributes['class'] . '" id="' . $new_id_element . '" data-id="' . $new_id_element . '" data-parent="' . $parent . '" data-type="nlb_' . $type_element . '" style="' . $styles_element . '">';
     $suffix = '</' . $tag_element . '>';

-    $content = $prefix . render($element) . $suffix;
+    $content = $prefix . \Drupal::service('renderer')->render($element) . $suffix;

     // Response.
     $response = new AjaxResponse();
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/node_layout_builder/src/Controller/LayoutElementController.php:327

    ---------- begin diff ----------
@@ @@
     $prefix = '<' . $tag_element . ' class="updated ' . $class . ' ' . $element_duplicate['#type'] . ' ' . $element_duplicate['#attributes']['container']['class'] . '" id="' . $duplicate_id_element . '" data-id="' . $duplicate_id_element . '" data-parent="' . $element_duplicate['#parent'] . '" data-type="nlb_' . $element_duplicate['#type'] . '" style="' . $styles_element . '">';
     $suffix = '</' . $tag_element . '>';

-    $content = $prefix . render($element) . $suffix;
+    $content = $prefix . \Drupal::service('renderer')->render($element) . $suffix;

     $response = new AjaxResponse();
     if ($element_duplicate['#parent'] == 0) {
@@ @@
     $response->addCommand(
       new OpenModalDialogCommand(
         $this->t('Choose a template'),
-        render($list_template),
+        \Drupal::service('renderer')->render($list_template),
         [
           'width' => '70%',
           'height' => 'auto',
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/node_layout_builder/node_layout_builder.module:358

    ---------- begin diff ----------
@@ @@
           $renderer = \Drupal::service('renderer');
           $renderer->addCacheableDependency($image_theme, $file);

-          $variables['content_element'] = render($image_theme);
+          $variables['content_element'] = \Drupal::service('renderer')->render($image_theme);
         }
       }
       break;
@@ @@
         'responsive' => $values['video_youtube']['responsive'],
       ];
       $video = NodeLayoutBuilderHelper::embedVideoYoutube($url, $options);
-      $variables['content_element'] = render($video);
+      $variables['content_element'] = \Drupal::service('renderer')->render($video);
       break;

     case 'audio':
@@ @@
         '#url' => $url,
         '#style' => $style,
       ];
-      $variables['content_element'] = render($audio_player);
+      $variables['content_element'] = \Drupal::service('renderer')->render($audio_player);
       break;

     case 'block':
@@ @@
       $nid = !empty($values['node']) ? $values['node'] : NULL;
       $view_mode = !empty($values['view_mode']) ? $values['view_mode'] : 'teaser';
       $node_output = NodeLayoutBuilderHelper::loadNodeView($nid, $view_mode);
-      $variables['content_element'] = render($node_output);
+      $variables['content_element'] = \Drupal::service('renderer')->render($node_output);
       break;

     case 'field':
@@ @@
       $field_name = $values['entity_field'];
       $field_view = $node->$field_name
         ->view($values['view_mode']);
-      $variables['content_element'] = render($field_view);
+      $variables['content_element'] = \Drupal::service('renderer')->render($field_view);
       break;

     case 'views':
@@ @@
           ],
         ],
       ];
-      $variables['content_element'] = render($map);
+      $variables['content_element'] = \Drupal::service('renderer')->render($map);
       break;
   }
 }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector


4) modules/contrib/node_layout_builder/src/NodeLayoutBuilderStyle.php:69

    ---------- begin diff ----------
@@ @@
           $fid = $styles['background']['image'][0];
           $file = NodeLayoutFileHelper::loadFileByFid($fid);
           if ($file) {
-            $path = file_create_url($file->getFileUri());
+            $path = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
             $bg_img .= 'background-image: url(' . $path . ');';
           }
           if (!empty($styles['background']['img_style'])) {
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector


5) modules/contrib/node_layout_builder/src/NodeLayoutBuilderEditor.php:107

    ---------- begin diff ----------
@@ @@
     $build[] = [
       '#theme' => 'node_layout_builder_ui',
       '#btns_import_export' => $list_btns_import_export,
-      '#btn_add_section' => render($btn_add_section),
-      '#btn_save_data' => render($btn_save_data),
+      '#btn_add_section' => \Drupal::service('renderer')->render($btn_add_section),
+      '#btn_save_data' => \Drupal::service('renderer')->render($btn_save_data),
       '#nid' => $nid,
       '#data' => 'data',
       '#btn_save_layout' => $btn_save_layout,
@@ @@
         $prefix = '<' . $tag_element . ' class="updated ' . $class . ' ' . $child['#type'] . ' ' . $child['#attributes']['container']['class'] . '" id="' . $id_element_child . '" data-id="' . $id_element_child . '" data-parent="' . $child['#parent'] . '" data-type="nlb_' . $child['#type'] . '" style="' . $styles_element . '">';
         $suffix = '</' . $tag_element . '>';

-        $children_output .= $prefix . render($children_theme) . $suffix;
+        $children_output .= $prefix . \Drupal::service('renderer')->render($children_theme) . $suffix;
       }
     }

@@ @@
       '#parent' => $values['parent'],
       '#settings' => $values['settings'],
       '#styles' => $styles_element,
-      '#content_element' => render($values['children']),
+      '#content_element' => \Drupal::service('renderer')->render($values['children']),
       '#editable' => $values['editable'],
       '#class' => $class,
       '#cache' => [
@@ @@
     $prefix = '<' . $tag_element . ' class="' . $class . ' ' . $values['type_element'] . '" id="' . $values['id_element'] . '" data-id="' . $values['id_element'] . '" data-parent="' . $values['parent'] . '" data-type="nlb_' . $values['type_element'] . '" style="' . $styles_element . '">';
     $suffix = '</' . $tag_element . '>';

-    $output = $prefix . render($element_tpl) . $suffix;
+    $output = $prefix . \Drupal::service('renderer')->render($element_tpl) . $suffix;

     return $output;
   }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * WrapReturnRector


6) modules/contrib/node_layout_builder/src/Helpers/NodeLayoutBuilderHelper.php:449

    ---------- begin diff ----------
@@ @@
             $renderer = \Drupal::service('renderer');
             $renderer->addCacheableDependency($image_theme, $file);

-            $variables['content_element'] = render($image_theme);
+            $variables['content_element'] = \Drupal::service('renderer')->render($image_theme);
           }
         }
         break;
@@ @@
           'responsive' => $values['video_youtube']['responsive'],
         ];
         $video = NodeLayoutBuilderHelper::embedVideoYoutube($url, $options);
-        $variables['content_element'] = render($video);
+        $variables['content_element'] = \Drupal::service('renderer')->render($video);
         break;

       case 'audio':
@@ @@
           '#style' => $style,
         ];

-        $variables['content_element'] = render($audio_player);
+        $variables['content_element'] = \Drupal::service('renderer')->render($audio_player);
         break;

       case 'block':
@@ @@
         $nid = !empty($values['node']) ? $values['node'] : NULL;
         $view_mode = !empty($values['view_mode']) ? $values['view_mode'] : 'teaser';
         $node_output = NodeLayoutBuilderHelper::loadNodeView($nid, $view_mode);
-        $variables['content_element'] = render($node_output);
+        $variables['content_element'] = \Drupal::service('renderer')->render($node_output);
         break;

       case 'field':
@@ @@
           $field_name = $values['entity_field'];
           $field_view = $node->$field_name
             ->view($values['view_mode']);
-          $variables['content_element'] = render($field_view);
+          $variables['content_element'] = \Drupal::service('renderer')->render($field_view);
         }
         else {
           $variables['content_element'] = '';
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * WrapReturnRector


 [OK] 6 files have been changed by Rector                                       

