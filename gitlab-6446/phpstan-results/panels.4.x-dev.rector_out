modules/contrib/panels/panels.api.php
modules/contrib/panels/panels_ipe/src/Exception/EmptyRequestContentException.php
modules/contrib/panels/panels_ipe/tests/src/Unit/RemoveBlockRequestHandlerTest.php
modules/contrib/panels/src/PanelsVariantEvent.php
modules/contrib/panels/tests/src/Functional/PanelsConfigSchemaTest.php
modules/contrib/panels/panels.install
modules/contrib/panels/panels_ipe/src/Form/PanelsIPEBlockContentForm.php
modules/contrib/panels/src/Plugin/DisplayBuilder/DisplayBuilderBase.php
modules/contrib/panels/panels.module
modules/contrib/panels/src/Plugin/DisplayBuilder/DisplayBuilderInterface.php
modules/contrib/panels/src/Plugin/DisplayBuilder/DisplayBuilderManager.php
modules/contrib/panels/src/Plugin/DisplayBuilder/DisplayBuilderManagerInterface.php
modules/contrib/panels/src/Plugin/DisplayBuilder/StandardDisplayBuilder.php
modules/contrib/panels/panels_ipe/tests/src/Unit/RequestHandlerTestBase.php
modules/contrib/panels/panels_ipe/src/Form/PanelsIPEBlockPluginForm.php
modules/contrib/panels/panels_ipe/panels_ipe.api.php
modules/contrib/panels/panels_ipe/panels_ipe.install
modules/contrib/panels/panels_ipe/panels_ipe.module
modules/contrib/panels/panels_ipe/src/Annotation/IPEAccess.php
modules/contrib/panels/tests/src/Functional/PanelsTest.php
modules/contrib/panels/panels_ipe/src/Controller/PanelsIPEPageController.php
modules/contrib/panels/panels_ipe/tests/src/Unit/UpdateLayoutRequestHandlerTest.php
modules/contrib/panels/src/Annotation/DisplayBuilder.php
modules/contrib/panels/src/Annotation/PanelsPattern.php
modules/contrib/panels/src/Annotation/PanelsStorage.php
modules/contrib/panels/src/CachedValuesGetterTrait.php
modules/contrib/panels/tests/src/Kernel/LayoutAlterHookTest.php
modules/contrib/panels/src/Controller/Panels.php
modules/contrib/panels/panels_ipe/src/Form/PanelsIPELayoutForm.php
modules/contrib/panels/src/Plugin/DisplayVariant/PanelsDisplayVariant.php
modules/contrib/panels/tests/src/Kernel/PanelsStorageManagerTest.php
modules/contrib/panels/src/Form/LayoutChangeRegions.php
modules/contrib/panels/tests/src/Unit/PanelsDisplayVariantTest.php
modules/contrib/panels/panels_ipe/src/Helpers/RemoveBlockRequestHandler.php
modules/contrib/panels/panels_ipe/src/Helpers/RequestHandlerBase.php
modules/contrib/panels/panels_ipe/src/Helpers/RequestHandlerInterface.php
modules/contrib/panels/panels_ipe/src/Helpers/UpdateLayoutRequestHandler.php
modules/contrib/panels/src/Form/LayoutChangeSettings.php
modules/contrib/panels/tests/src/Unit/PanelsStorageTest.php
modules/contrib/panels/panels_ipe/src/PanelsIPEBlockRendererTrait.php
modules/contrib/panels/panels_ipe/src/Plugin/DisplayBuilder/InPlaceEditorDisplayBuilder.php
modules/contrib/panels/src/Form/LayoutPluginSelector.php
modules/contrib/panels/src/Plugin/PanelsPattern/DefaultPattern.php
modules/contrib/panels/src/Form/PanelsAddBlockForm.php
modules/contrib/panels/src/Plugin/PanelsPattern/PanelsPatternInterface.php
modules/contrib/panels/panels_ipe/src/Plugin/IPEAccessBase.php
modules/contrib/panels/panels_ipe/src/Plugin/IPEAccessInterface.php
modules/contrib/panels/panels_ipe/src/Plugin/IPEAccessManager.php
modules/contrib/panels/src/Plugin/PanelsStorage/PageManagerPanelsStorage.php
modules/contrib/panels/src/Form/PanelsBlockConfigureFormBase.php
modules/contrib/panels/panels_ipe/src/Plugin/IPEAccessManagerInterface.php
modules/contrib/panels/panels_ipe/tests/src/FunctionalJavascript/PageManagerIntegrationTest.php
modules/contrib/panels/tests/src/Unit/StandardDisplayBuilderTest.php
modules/contrib/panels/src/Storage/PanelsStorageAccess.php
modules/contrib/panels/src/Storage/PanelsStorageBase.php
modules/contrib/panels/src/Storage/PanelsStorageInterface.php
modules/contrib/panels/src/Storage/PanelsStorageManager.php
modules/contrib/panels/src/Form/PanelsContentForm.php
modules/contrib/panels/src/Storage/PanelsStorageManagerInterface.php
modules/contrib/panels/tests/modules/panels_test/src/Plugin/Layout/LayoutExampleTest.php
modules/contrib/panels/tests/src/Functional/PageManagerPanelsStorageIntegrationTest.php
modules/contrib/panels/panels_ipe/tests/src/FunctionalJavascript/PanelsIPETestBase.php
modules/contrib/panels/panels_ipe/tests/src/FunctionalJavascript/PanelsIPETestTrait.php
modules/contrib/panels/src/Form/PanelsDeleteBlockForm.php
modules/contrib/panels/src/Form/PanelsEditBlockForm.php
modules/contrib/panels/src/PanelsDisplayManager.php
modules/contrib/panels/src/PanelsDisplayManagerInterface.php
modules/contrib/panels/src/PanelsEvents.php
modules/contrib/panels/src/PanelsPatternManager.php

14 files with changes
=====================

1) modules/contrib/panels/panels_ipe/src/Controller/PanelsIPEPageController.php:171

    ---------- begin diff ----------
@@ @@
     $base_path = base_path();
     $data = [];
     foreach ($layouts as $id => $layout) {
-      $icon = $layout->getIconPath() ?: drupal_get_path('module', 'panels') . '/layouts/no-layout-preview.png';
+      $icon = $layout->getIconPath() ?: \Drupal::service('extension.list.module')->getPath('panels') . '/layouts/no-layout-preview.png';
       $data[] = [
         'id' => $id,
         'label' => $layout->getLabel(),
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/panels/panels.module:50

    ---------- begin diff ----------
@@ @@
       continue;
     }
     if (in_array($layout_name, $core_layouts) && empty($definitions[$layout_name]->getIcon())) {
-      $definitions[$layout_name]->setIconPath(drupal_get_path('module', 'panels') . '/layouts/'.$layout_name.'/'.$layout_name.'.png');
+      $definitions[$layout_name]->setIconPath(\Drupal::service('extension.list.module')->getPath('panels') . '/layouts/'.$layout_name.'/'.$layout_name.'.png');
     }
     if (empty($definitions[$layout_name]->getIcon())) {
-      $definitions[$layout_name]->setIconPath(drupal_get_path('module', 'panels') . '/layouts/no-layout-preview.png');
+      $definitions[$layout_name]->setIconPath(\Drupal::service('extension.list.module')->getPath('panels') . '/layouts/no-layout-preview.png');
     }
   }
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


3) modules/contrib/panels/tests/src/Unit/StandardDisplayBuilderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\panels\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Plugin\Context\ContextHandlerInterface;
@@ @@
  */
 class StandardDisplayBuilderTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @var \Drupal\panels\Plugin\DisplayBuilder\StandardDisplayBuilder
    */
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     $context_handler = $this->prophesize(ContextHandlerInterface::class)
       ->reveal();
     $account = $this->prophesize(AccountInterface::class)
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/panels/tests/src/Unit/PanelsStorageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\panels\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
  */
 class PanelsStorageTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant|\Prophecy\Prophecy\ProphecyInterface
    */
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->panelsDisplay = $this->prophesize(PanelsDisplayVariant::class);
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/panels/tests/src/Unit/PanelsDisplayVariantTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\panels\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Block\BlockManager;
 use Drupal\Core\Condition\ConditionManager;
@@ @@
  */
 class PanelsDisplayVariantTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @var \Drupal\Core\Session\AccountInterface
    */
@@ @@
    */
   protected $variant;

-  public function setUp() {
+  public function setUp(): void {
     $this->account = $this->prophesize(AccountInterface::class);
     $this->contextHandler = $this->prophesize(ContextHandlerInterface::class);
     $this->uuidGenerator = $this->prophesize(UuidInterface::class);
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/panels/tests/src/Functional/PanelsTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('local_tasks_block');
@@ @@
       'path' => 'testing',
       'variant_plugin_id' => 'panels_variant',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     // Add variant with a layout that has settings.
     $edit = [
       'page_variant_label' => 'Default',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     // Choose a layout.
     $edit = [
       'layout' => 'layout_example_test',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     // Update the layout's settings.
-    $this->assertFieldByName('layout_settings_wrapper[layout_settings][setting_1]', 'Default');
+    $this->assertSession()->fieldValueEquals('layout_settings_wrapper[layout_settings][setting_1]', 'Default');
     $edit = [
       'layout_settings_wrapper[layout_settings][setting_1]' => 'Abracadabra',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     // Add a block.
     $this->clickLink('Add new block');
@@ @@
     $edit = [
       'region' => 'top',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add block');
+    $this->submitForm($edit, 'Add block');

     // Finish the page add wizard.
-    $this->drupalPostForm(NULL, [], 'Finish');
+    $this->submitForm([], 'Finish');

     // View the page and make sure the setting is present.
     $this->drupalGet('testing');
-    $this->assertText('Blah:');
-    $this->assertText('Abracadabra');
-    $this->assertText('Powered by Drupal');
+    $this->assertSession()->pageTextContains('Blah:');
+    $this->assertSession()->pageTextContains('Abracadabra');
+    $this->assertSession()->pageTextContains('Powered by Drupal');
   }

   /**
@@ @@
       'path' => 'testing',
       'variant_plugin_id' => 'panels_variant',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     // Use default variant settings.
     $edit = [
       'page_variant_label' => 'Default',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     // Choose a simple layout.
     $edit = [
       'layout' => 'layout_onecol',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     // In Drupal 8.8 and later, the layout may have settings of its own. If
     // that's the case, submit the layout settings form without any changes.
@@ @@
     $edit = [
       'page_title' => '[user:name]',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Finish');
+    $this->submitForm($edit, 'Finish');

     // View the page and make sure the page title is valid.
     $this->drupalGet('testing');
     // We expect "'" to be escaped only once, which is why we're doing a raw
     // assertion here.
-    $this->assertRaw('<h1 class="page-title">My User&#039;s Name</h1>');
+    $this->assertSession()->responseContains('<h1 class="page-title">My User&#039;s Name</h1>');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/panels/tests/src/Functional/PanelsConfigSchemaTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->panelsManager = \Drupal::service('panels.display_manager');
@@ @@
     // This will throw an exception if it doesn't validate.
     $new_panels_display = $this->panelsManager->importDisplay($config, TRUE);

-    $this->assertEqual($panels_display->getConfiguration(), $new_panels_display->getConfiguration());
+    $this->assertEquals($panels_display->getConfiguration(), $new_panels_display->getConfiguration());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/panels/tests/src/Functional/PageManagerPanelsStorageIntegrationTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('local_tasks_block');
@@ @@
       'path' => 'testing',
       'variant_plugin_id' => 'panels_variant',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     // Add a Panels variant which uses the IPE.
     $edit = [
@@ @@
       // This option won't be present at all if our integration isn't working!
       'variant_settings[builder]' => 'ipe',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     // Choose a layout.
     $edit = [
       'layout' => 'layout_twocol',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Next');
+    $this->submitForm($edit, 'Next');

     // In Drupal 8.8 and later, the layout may have settings of its own. If
     // that's the case, submit the layout settings form without any changes.
@@ @@
     }

     // Finish without adding any blocks.
-    $this->drupalPostForm(NULL, [], 'Finish');
+    $this->submitForm([], 'Finish');

     /** @var \Drupal\page_manager\PageVariantInterface $page_variant */
     $page_variant = PageVariant::load('foo-panels_variant-0');
@@ @@
     $panels_display = $page_variant->getVariantPlugin();

     // Make sure the storage type and id were set to the right value.
-    $this->assertEqual($panels_display->getStorageType(), 'page_manager');
-    $this->assertEqual($panels_display->getStorageId(), 'foo-panels_variant-0');
+    $this->assertEquals($panels_display->getStorageType(), 'page_manager');
+    $this->assertEquals($panels_display->getStorageId(), 'foo-panels_variant-0');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/panels/src/Storage/PanelsStorageManager.php:97

    ---------- begin diff ----------
@@ @@
     // Allow event subscribers to react to the variant being saved.
     $event = new PanelsVariantEvent($panels_display);

-    $this->eventDispatcher->dispatch(PanelsEvents::VARIANT_PRE_SAVE, $event);
+    $this->eventDispatcher->dispatch($event, PanelsEvents::VARIANT_PRE_SAVE);
     $storage = $this->getStorage($panels_display->getStorageType());
     $storage->save($panels_display);
-    $this->eventDispatcher->dispatch(PanelsEvents::VARIANT_POST_SAVE, $event);
+    $this->eventDispatcher->dispatch($event, PanelsEvents::VARIANT_POST_SAVE);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/panels/src/PanelsVariantEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\panels;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event object for events relating to Panels display variants.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/panels/panels_ipe/tests/src/FunctionalJavascript/PageManagerIntegrationTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a user with appropriate permissions to use Panels IPE.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/panels/panels_ipe/tests/src/Unit/UpdateLayoutRequestHandlerTest.php:13

    ---------- begin diff ----------
@@ @@
  */
 class UpdateLayoutRequestHandlerTest extends RequestHandlerTestBase {

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->sut = new UpdateLayoutRequestHandler($this->moduleHandler, $this->panelsStore, $this->tempStore);
   }
@@ @@
   }

   private function setPanelsDisplayExpectations() {
-    $block = $this->getMockBuilder(BlockBase::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $block = $this->createMock(BlockBase::class);
     $block->expects($this->exactly(4))->method('setConfigurationValue');
     $block->expects($this->exactly(2))
       ->method('getConfiguration')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/panels/panels_ipe/tests/src/Unit/RequestHandlerTestBase.php:6

    ---------- begin diff ----------
@@ @@
 use Drupal\panels\Storage\PanelsStorageManagerInterface;
 use Drupal\Core\TempStore\SharedTempStore;
 use PHPUnit\Framework\TestCase;
-use PHPUnit_Framework_MockObject_MockObject;
 use Symfony\Component\HttpFoundation\JsonResponse;
 use Symfony\Component\HttpFoundation\Request;

@@ @@
   protected $sut;

   /**
-   * @var PHPUnit_Framework_MockObject_MockObject */
+   * @var \PHPUnit\Framework\MockObject\MockObject */
   protected $moduleHandler;

   /**
-   * @var PHPUnit_Framework_MockObject_MockObject */
+   * @var \PHPUnit\Framework\MockObject\MockObject */
   protected $panelsStore;

   /**
-   * @var PHPUnit_Framework_MockObject_MockObject */
+   * @var \PHPUnit\Framework\MockObject\MockObject */
   protected $tempStore;

   /**
-   * @var PHPUnit_Framework_MockObject_MockObject */
+   * @var \PHPUnit\Framework\MockObject\MockObject */
   protected $panelsDisplay;

   /**
    *
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->moduleHandler = $this->getMockForAbstractClass(ModuleHandlerInterface::class);
     $this->panelsStore = $this->getMockForAbstractClass(PanelsStorageManagerInterface::class);
-    $this->tempStore = $this->getMockBuilder(SharedTempStore::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->tempStore = $this->createMock(SharedTempStore::class);

-    $this->panelsDisplay = $this->getMockBuilder(PanelsDisplayVariant::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->panelsDisplay = $this->createMock(PanelsDisplayVariant::class);
   }

   protected function createRequest($content = NULL) {
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/panels/panels_ipe/tests/src/Unit/RemoveBlockRequestHandlerTest.php:11

    ---------- begin diff ----------
@@ @@
  */
 class RemoveBlockRequestHandlerTest extends RequestHandlerTestBase {

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->sut = new RemoveBlockRequestHandler($this->moduleHandler, $this->panelsStore, $this->tempStore);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 14 files have been changed by Rector                                      

