diff --git a/modules/pdb_ng2/src/Plugin/Block/Ng2Block.php b/modules/pdb_ng2/src/Plugin/Block/Ng2Block.php
index dfe34b2..3abcff3 100644
--- a/modules/pdb_ng2/src/Plugin/Block/Ng2Block.php
+++ b/modules/pdb_ng2/src/Plugin/Block/Ng2Block.php
@@ -59,7 +59,7 @@ class Ng2Block extends PdbBlock {
         'ngClassName' => $component['ng_class_name'],
       ];
     }
-    $attached['drupalSettings']['pdb']['ng2']['module_path'] = drupal_get_path('module', 'pdb_ng2');
+    $attached['drupalSettings']['pdb']['ng2']['module_path'] = \Drupal::service('extension.list.module')->getPath('pdb_ng2');
 
     $config_settings = \Drupal::config('pdb_ng2.settings');
     if (isset($config_settings)) {
diff --git a/src/ComponentDiscovery.php b/src/ComponentDiscovery.php
index 46d7a4e..56dcdd4 100644
--- a/src/ComponentDiscovery.php
+++ b/src/ComponentDiscovery.php
@@ -108,7 +108,7 @@ class ComponentDiscovery extends ExtensionDiscovery implements ComponentDiscover
 
     // Try to get search dirs from subscribers.
     $event = new PdbDiscoveryEvent($search_dirs);
-    $this->eventDispatcher->dispatch(PdbDiscoveryEvent::SEARCH_DIRS, $event);
+    $this->eventDispatcher->dispatch($event, PdbDiscoveryEvent::SEARCH_DIRS);
 
     // Get the updated dicovery path from subscribers.
     $search_dirs = $event->getDirs();
diff --git a/src/Event/PdbDiscoveryEvent.php b/src/Event/PdbDiscoveryEvent.php
index e651039..1f06d81 100644
--- a/src/Event/PdbDiscoveryEvent.php
+++ b/src/Event/PdbDiscoveryEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\pdb\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Provides an event to handle user custom search dirs.
diff --git a/tests/src/Unit/Plugin/Block/PdbBlockTest.php b/tests/src/Unit/Plugin/Block/PdbBlockTest.php
index 53abff2..9b7153a 100644
--- a/tests/src/Unit/Plugin/Block/PdbBlockTest.php
+++ b/tests/src/Unit/Plugin/Block/PdbBlockTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\pdb\Unit\Plugin\Block;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContextAwarePluginInterface;
 use Drupal\Tests\UnitTestCase;
@@ -16,6 +17,7 @@ use Drupal\Component\Uuid\UuidInterface;
  */
 class PdbBlockTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Instance of the Plugin.
    *
@@ -26,7 +28,7 @@ class PdbBlockTest extends UnitTestCase {
   /**
    * Create the setup for constants and plugin instance.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Mock the UUID service.
diff --git a/tests/src/Unit/Plugin/Derivative/PdbBlockDeriverTest.php b/tests/src/Unit/Plugin/Derivative/PdbBlockDeriverTest.php
index 213d76b..0451abb 100644
--- a/tests/src/Unit/Plugin/Derivative/PdbBlockDeriverTest.php
+++ b/tests/src/Unit/Plugin/Derivative/PdbBlockDeriverTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\pdb\Unit\Plugin\Derivative;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\UnitTestCase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\pdb\Plugin\Derivative\PdbBlockDeriver;
@@ -13,6 +14,7 @@ use Drupal\pdb\ComponentDiscoveryInterface;
  */
 class PdbBlockDeriverTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Mocked Component Discovery.
    *
@@ -30,7 +32,7 @@ class PdbBlockDeriverTest extends UnitTestCase {
   /**
    * Create the setup for constants.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Mock the UUID service.
