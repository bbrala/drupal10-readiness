diff --git a/content_deploy.module b/content_deploy.module
index 8d508d7..50f7532 100755
--- a/content_deploy.module
+++ b/content_deploy.module
@@ -53,19 +53,19 @@ function content_deploy_help($route_name, RouteMatchInterface $route_match) {
       $output .= '<h3>' . t('Uses') . '</h3>';
       $output .= '<dl>';
       $output .= '<dt>' . t('Exporting the full content') . '</dt>';
-      $output .= '<dd>' . t('You can create and download an archive consisting of all your site\'s content exported as <em>*.yml</em> files on the <a href=":url">Export</a> page.', [':url' => \Drupal::url('content.export_full')]) . '</dd>';
+      $output .= '<dd>' . t('You can create and download an archive consisting of all your site\'s content exported as <em>*.yml</em> files on the <a href=":url">Export</a> page.', [':url' => Url::fromRoute('content.export_full')->toString()]) . '</dd>';
       $output .= '<dt>' . t('Importing a full content') . '</dt>';
-      $output .= '<dd>' . t('You can upload a full site content from an archive file on the <a href=":url">Import</a> page. When importing data from a different environment, the site and import files must have matching configuration values for UUID in the <em>system.site</em> configuration item. That means that your other environments should initially be set up as clones of the target site.', [':url' => \Drupal::url('content.import_full')]) . '</dd>';
+      $output .= '<dd>' . t('You can upload a full site content from an archive file on the <a href=":url">Import</a> page. When importing data from a different environment, the site and import files must have matching configuration values for UUID in the <em>system.site</em> configuration item. That means that your other environments should initially be set up as clones of the target site.', [':url' => Url::fromRoute('content.import_full')->toString()]) . '</dd>';
       $output .= '<dt>' . t('Exporting a single content item') . '</dt>';
-      $output .= '<dd>' . t('You can export a single content item by selecting a <em>Content type</em> and <em>Content name</em> on the <a href=":single-export">Single export</a> page. The content and its corresponding <em>*.yml file name</em> are then displayed on the page for you to copy.', [':single-export' => \Drupal::url('content.export_single')]) . '</dd>';
+      $output .= '<dd>' . t('You can export a single content item by selecting a <em>Content type</em> and <em>Content name</em> on the <a href=":single-export">Single export</a> page. The content and its corresponding <em>*.yml file name</em> are then displayed on the page for you to copy.', [':single-export' => Url::fromRoute('content.export_single')->toString()]) . '</dd>';
       $output .= '<dt>' . t('Importing a single content item') . '</dt>';
-      $output .= '<dd>' . t('You can import a single content item by pasting it in YAML format into the form on the <a href=":single-import">Single import</a> page.', [':single-import' => \Drupal::url('content.import_single')]) . '</dd>';
+      $output .= '<dd>' . t('You can import a single content item by pasting it in YAML format into the form on the <a href=":single-import">Single import</a> page.', [':single-import' => Url::fromRoute('content.import_single')->toString()]) . '</dd>';
       $output .= '<dt>' . t('Synchronizing content') . '</dt>';
-      $output .= '<dd>' . t('You can review differences between the active content and an imported content archive on the <a href=":synchronize">Synchronize</a> page to ensure that the changes are as expected, before finalizing the import. The <a href=":synchronize">Synchronize</a>Synchronize</a> page also shows content items that would be added or removed.', [':synchronize' => \Drupal::url('content.sync')]) . '</dd>';
+      $output .= '<dd>' . t('You can review differences between the active content and an imported content archive on the <a href=":synchronize">Synchronize</a> page to ensure that the changes are as expected, before finalizing the import. The <a href=":synchronize">Synchronize</a>Synchronize</a> page also shows content items that would be added or removed.', [':synchronize' => Url::fromRoute('content.sync')->toString()]) . '</dd>';
       $output .= '<dt>' . t('Content logs') . '</dt>';
-      $output .= '<dd>' . t('You can view a chronological list of recorded events containing errors, warnings and operational information of the content import, export and synchronization on the <a href=":content-logs">Logs</a> page.', [':content-logs' => \Drupal::url('content.overview')]) . '</dd>';
+      $output .= '<dd>' . t('You can view a chronological list of recorded events containing errors, warnings and operational information of the content import, export and synchronization on the <a href=":content-logs">Logs</a> page.', [':content-logs' => Url::fromRoute('content.overview')->toString()]) . '</dd>';
       $output .= '<dt>' . t('Content Deploy settings') . '</dt>';
-      $output .= '<dd>' . t('You can set specific settings for the Content Deploy behaviour as ignore the UUID Site validation and more on the <a href=":settings">Settings</a> page.', [':settings' => \Drupal::url('content.settings')]) . '</dd>';
+      $output .= '<dd>' . t('You can set specific settings for the Content Deploy behaviour as ignore the UUID Site validation and more on the <a href=":settings">Settings</a> page.', [':settings' => Url::fromRoute('content.settings')->toString()]) . '</dd>';
       $output .= '</dl>';
 
       //return $output;
@@ -133,7 +133,7 @@ function content_deploy_theme() {
  */
 function content_file_download($uri) {
   $scheme = file_uri_scheme($uri);
-  $target = file_uri_target($uri);
+  $target = \Drupal::service('stream_wrapper_manager')->getTarget($uri);
   if ($scheme == 'temporary' && $target == 'content.tar.gz') {
     if (\Drupal::currentUser()->hasPermission('export content')) {
       $request = \Drupal::request();
diff --git a/src/Form/DeployFilterForm.php b/src/Form/DeployFilterForm.php
index 793797a..a2385fe 100644
--- a/src/Form/DeployFilterForm.php
+++ b/src/Form/DeployFilterForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\content_deploy\Form;
 
+use Drupal\node\Entity\NodeType;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -40,7 +41,7 @@ class DeployFilterForm extends FormBase {
       '#size' => 30,
       '#maxlength' => 128
     ];
-    $node_types = \Drupal\node\Entity\NodeType::loadMultiple();
+    $node_types = NodeType::loadMultiple();
 // If you need to display them in a drop down:
     $content_type = [];
     foreach ($node_types as $node_type) {
diff --git a/src/Utility/ContentSyncDialogHelper.php b/src/Utility/ContentSyncDialogHelper.php
index 3b6f0fd..f537a98 100644
--- a/src/Utility/ContentSyncDialogHelper.php
+++ b/src/Utility/ContentSyncDialogHelper.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\content_deploy\Utility;
 
+use Drupal\imce\Imce;
 use Drupal\Component\Serialization\Json;
 
 /**
@@ -61,9 +62,9 @@ class ContentSyncDialogHelper {
   public static function attachLibraries(array &$build) {
     $build['#attached']['library'][] = 'content_deploy/content_deploy.admin.dialog';
     // @see \Drupal\content_deploy\Element\content_deployHtmlEditor::preRendercontent_deployHtmlEditor
-    if (\Drupal::moduleHandler()->moduleExists('imce') && \Drupal\imce\Imce::access()) {
+    if (\Drupal::moduleHandler()->moduleExists('imce') && Imce::access()) {
       $element['#attached']['library'][] = 'imce/drupal.imce.ckeditor';
-      $element['#attached']['drupalSettings']['content_deploy']['html_editor']['ImceImageIcon'] = file_create_url(drupal_get_path('module', 'imce') . '/js/plugins/ckeditor/icons/imceimage.png');
+      $element['#attached']['drupalSettings']['content_deploy']['html_editor']['ImceImageIcon'] = \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('imce') . '/js/plugins/ckeditor/icons/imceimage.png');
     }
   }
 
