modules/contrib/permanent_entities/src/EventSubscriber/TypeViewerSubscriber.php
modules/contrib/permanent_entities/tests/src/Functional/CrudTest.php
modules/contrib/permanent_entities/permanent_entities.drush.inc
modules/contrib/permanent_entities/permanent_entities.module
modules/contrib/permanent_entities/permanent_entities.page.inc
modules/contrib/permanent_entities/src/Commands/PermanentEntitiesCommands.php
modules/contrib/permanent_entities/src/Form/PermanentEntityForm.php
modules/contrib/permanent_entities/src/Controller/PermanentEntityController.php
modules/contrib/permanent_entities/src/Form/PermanentEntityRevisionDeleteForm.php
modules/contrib/permanent_entities/src/Form/PermanentEntityRevisionRevertForm.php
modules/contrib/permanent_entities/tests/src/Kernel/CrudTest.php
modules/contrib/permanent_entities/src/Form/PermanentEntityRevisionRevertTranslationForm.php
modules/contrib/permanent_entities/src/Entity/PermanentEntity.php
modules/contrib/permanent_entities/src/Form/PermanentEntitySettingsForm.php
modules/contrib/permanent_entities/src/Form/PermanentEntityTypeDeleteForm.php
modules/contrib/permanent_entities/src/Form/PermanentEntityTypeForm.php
modules/contrib/permanent_entities/src/PermanentEntityAccessControlHandler.php
modules/contrib/permanent_entities/src/PermanentEntityHtmlRouteProvider.php
modules/contrib/permanent_entities/src/Entity/PermanentEntityInterface.php
modules/contrib/permanent_entities/src/Entity/PermanentEntityType.php
modules/contrib/permanent_entities/src/Entity/PermanentEntityTypeInterface.php
modules/contrib/permanent_entities/src/Entity/PermanentEntityViewsData.php
modules/contrib/permanent_entities/src/PermanentEntityListBuilder.php
modules/contrib/permanent_entities/src/PermanentEntityPermissions.php
modules/contrib/permanent_entities/src/PermanentEntityStorage.php
modules/contrib/permanent_entities/src/PermanentEntityStorageInterface.php
modules/contrib/permanent_entities/src/PermanentEntityTranslationHandler.php
modules/contrib/permanent_entities/src/PermanentEntityTypeAccessControlHandler.php
modules/contrib/permanent_entities/src/PermanentEntityTypeHtmlRouteProvider.php
modules/contrib/permanent_entities/src/PermanentEntityTypeListBuilder.php
modules/contrib/permanent_entities/src/Plugin/views/argument_default/PermanentEntity.php

3 files with changes
====================

1) modules/contrib/permanent_entities/tests/src/Kernel/CrudTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
     $this->installEntitySchema('permanent_entity');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/permanent_entities/tests/src/Functional/CrudTest.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->admin = $this->drupalCreateUser([], 'superadmin', TRUE);
     $this->drupalLogin($this->admin);
@@ @@
   public function testNoAddOrDelete() {
     $this->drupalGet(Url::fromRoute('entity.permanent_entity.collection'));
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertRaw('Permanent Entities');
+    $this->assertSession()->responseContains('Permanent Entities');
     $assert_session = $this->assertSession();
     $assert_session->elementNotExists('css', '.button--primary');
     // Nothing for edit or delete yet.
@@ @@
     // Since full view mode is enabled, this should return code 200.
     $this->drupalGet('/permanent_entity/jupiter');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertRaw('Jupiter');
-    $this->assertRaw('permanent-entity');
-    $this->assertRaw('permanent-entity--view-mode-full');
-    $this->assertRaw('permanent-entity--type-planet');
-    $this->assertRaw('permanent-entity--id-jupiter');
+    $this->assertSession()->responseContains('Jupiter');
+    $this->assertSession()->responseContains('permanent-entity');
+    $this->assertSession()->responseContains('permanent-entity--view-mode-full');
+    $this->assertSession()->responseContains('permanent-entity--type-planet');
+    $this->assertSession()->responseContains('permanent-entity--id-jupiter');

     // Now disable the full view mode from the bundle settings.
     $entity_type = PermanentEntityType::load('planet');
@@ @@

     $this->drupalGet(Url::fromRoute('entity.permanent_entity.collection'));
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertRaw('Jupiter');
+    $this->assertSession()->responseContains('Jupiter');
     $assert_session = $this->assertSession();
     $assert_session->elementNotExists('css', '.button--primary');
     $assert_session->elementNotExists('css', '.dropbutton .delete');
@@ @@
     );

     $this->assertSession()->statusCodeEquals(200);
-    $this->assertRaw('Jupiter');
+    $this->assertSession()->responseContains('Jupiter');
     $save_button = $this->xpath('//input[@value="Save"]');
     $this->assertCount(1, $save_button, 'The Save button exists.');
-    $this->assertNoRaw('delete');
+    $this->assertSession()->responseNotContains('delete');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertNoRawRector
 * AssertRawRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/permanent_entities/src/EventSubscriber/TypeViewerSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\permanent_entities\EventSubscriber;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Routing\CurrentRouteMatch;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\permanent_entities\Entity\PermanentEntityType;
@@ @@
   /**
    * This method is called when the KernelEvents::REQUEST is dispatched.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   The dispatched event.
    */
   public function onRequest(Event $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


 [OK] 3 files have been changed by Rector                                       

