modules/contrib/webhooks/modules/webhook/src/Entity/Webhook.php
modules/contrib/webhooks/src/Event/ReceiveEvent.php
modules/contrib/webhooks/tests/modules/webhooks_test/webhooks_test.module
modules/contrib/webhooks/tests/src/Functional/WebhooksTest.php
modules/contrib/webhooks/src/Event/SendErrorEvent.php
modules/contrib/webhooks/src/Event/SendEvent.php
modules/contrib/webhooks/src/Event/WebhookEvents.php
modules/contrib/webhooks/src/Exception/WebhookIncomingEndpointNotFoundException.php
modules/contrib/webhooks/src/Exception/WebhookMismatchSignatureException.php
modules/contrib/webhooks/src/Exception/WebhookMismatchTokenException.php
modules/contrib/webhooks/src/Form/SettingsForm.php
modules/contrib/webhooks/src/Form/WebhookConfigDeleteForm.php
modules/contrib/webhooks/modules/webhook/src/EventSubscriber/WebhookSubscriber.php
modules/contrib/webhooks/src/Form/WebhookConfigForm.php
modules/contrib/webhooks/modules/webhook/src/Form/WebhookForm.php
modules/contrib/webhooks/modules/webhook/src/WebhookInterface.php
modules/contrib/webhooks/modules/webhook/src/WebhookListBuilder.php
modules/contrib/webhooks/modules/webhook/webhook.module
modules/contrib/webhooks/src/Commands/WebhooksCommands.php
modules/contrib/webhooks/webhooks.module
modules/contrib/webhooks/src/Plugin/QueueWorker/WebhookDispatcher.php
modules/contrib/webhooks/src/Controller/WebhookController.php
modules/contrib/webhooks/src/Webhook.php
modules/contrib/webhooks/src/WebhookConfigHtmlRouteProvider.php
modules/contrib/webhooks/src/Entity/WebhookConfig.php
modules/contrib/webhooks/src/WebhookConfigListBuilder.php
modules/contrib/webhooks/src/Entity/WebhookConfigInterface.php
modules/contrib/webhooks/src/WebhookDispatcherInterface.php
modules/contrib/webhooks/src/WebhookReceiverInterface.php
modules/contrib/webhooks/src/WebhookSerializerInterface.php
modules/contrib/webhooks/src/WebhooksService.php
modules/contrib/webhooks/tests/modules/webhooks_test/src/EventSubscriber/WebhooksTestSubscriber.php

7 files with changes
====================

1) modules/contrib/webhooks/tests/src/Functional/WebhooksTest.php:193

    ---------- begin diff ----------
@@ @@

     $this->webhookService->send($webhook_config, $webhook);

-    $this->assertEqual($this->state->get('onWebhookSend'), TRUE);
+    $this->assertEquals($this->state->get('onWebhookSend'), TRUE);
   }

   /**
@@ @@
     $this->webhookService->send($webhook_config, $webhook);

     $webhook_received = $this->state->get('onWebhookReceive');
-    $this->assertEqual($webhook_received, TRUE);
+    $this->assertEquals($webhook_received, TRUE);
   }

   /**
@@ @@
     /** @var \Drupal\webhooks\Webhook $webhook_received */
     $webhook_received = $this->state->get('onWebhookReceive_webhook');

-    $this->assertEqual($webhook_received->getPayload(), $this->payload);
+    $this->assertEquals($webhook_received->getPayload(), $this->payload);
   }

   /**
@@ @@

     // Additional custom headers.
     $intersection = array_intersect($headers_received, $this->headers);
-    $this->assertEqual($intersection, $this->headers);
+    $this->assertEquals($intersection, $this->headers);

     // Check for X-Drupal-Delivery header.
-    $this->assertEqual($headers_received['x-drupal-delivery'], $webhook->getUuid());
+    $this->assertEquals($headers_received['x-drupal-delivery'], $webhook->getUuid());

     // Check for X-Drupal-Event header.
-    $this->assertEqual($headers_received['x-drupal-event'], $webhook->getEvent());
+    $this->assertEquals($headers_received['x-drupal-event'], $webhook->getEvent());
   }

   /**
@@ @@
     $this->webhookService->send($webhook_config, $webhook);

     // Make sure the secret has been set.
-    $this->assertEqual($webhook_config->getSecret(), self::WEBHOOK_SECRET);
+    $this->assertEquals($webhook_config->getSecret(), self::WEBHOOK_SECRET);

     $webhook_receive = $this->state->get('onWebhookReceive');

     // This succeeds if the webhook has been verified and accepted.
-    $this->assertEqual($webhook_receive, TRUE);
+    $this->assertEquals($webhook_receive, TRUE);

     /** @var \Drupal\webhooks\Webhook $webhook_received */
     $webhook_received = $this->state->get('onWebhookReceive_webhook');
     // Verify signature.
-    $this->assertEqual($webhook_received->getSignature(), $webhook->getSignature());
+    $this->assertEquals($webhook_received->getSignature(), $webhook->getSignature());
   }

   /**
@@ @@

     /** @var \Drupal\webhooks\Webhook $webhook_received */
     $webhook_received = $this->state->get('onWebhookReceive_webhook');
-    $this->assertEqual($webhook_received->getContentType(), WebhookConfig::CONTENT_TYPE_JSON);
+    $this->assertEquals($webhook_received->getContentType(), WebhookConfig::CONTENT_TYPE_JSON);
   }

   /**
@@ @@

     /** @var \Drupal\webhooks\Webhook $webhook_received */
     $webhook_received = $this->state->get('onWebhookReceive_webhook');
-    $this->assertEqual($webhook_received->getContentType(), WebhookConfig::CONTENT_TYPE_XML);
+    $this->assertEquals($webhook_received->getContentType(), WebhookConfig::CONTENT_TYPE_XML);
   }

   /**
@@ @@

     /** @var \Drupal\webhooks\Webhook $webhook_received */
     $webhook_received = $this->state->get('onWebhookReceive_webhook');
-    $this->assertEqual($webhook_received->getUuid(), $webhook->getUuid());
+    $this->assertEquals($webhook_received->getUuid(), $webhook->getUuid());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/webhooks/modules/webhook/src/Form/WebhookForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New webhook %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/webhooks/src/WebhooksService.php:173

    ---------- begin diff ----------
@@ @@

     // Dispatch Webhook Send event.
     $this->eventDispatcher->dispatch(
-      WebhookEvents::SEND,
-      new SendEvent($webhook_config, $webhook)
+      new SendEvent($webhook_config, $webhook),
+      WebhookEvents::SEND
     );

     $body = $this->encode(
@@ @@
     catch (\Exception $e) {
       // Dispatch Webhook Send error event.
       $this->eventDispatcher->dispatch(
-        WebhookEvents::SEND_ERROR,
-        new SendErrorEvent($webhook_config, $webhook, $e)
+        new SendErrorEvent($webhook_config, $webhook, $e),
+        WebhookEvents::SEND_ERROR
       );

       $this->logger->error(
@@ @@
     else {
       // Dispatch Webhook Receive event.
       $this->eventDispatcher->dispatch(
-        WebhookEvents::RECEIVE,
-        new ReceiveEvent($webhook_config, $webhook)
+        new ReceiveEvent($webhook_config, $webhook),
+        WebhookEvents::RECEIVE
       );
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


4) modules/contrib/webhooks/src/Plugin/QueueWorker/WebhookDispatcher.php:54

    ---------- begin diff ----------
@@ @@
     $webhook_config = WebhookConfig::load($data['id']);
     if ($webhook_config) {
       $this->eventDispatcher->dispatch(
-        WebhookEvents::RECEIVE,
-        new ReceiveEvent($webhook_config, $data['webhook'])
+        new ReceiveEvent($webhook_config, $data['webhook']),
+        WebhookEvents::RECEIVE
       );
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/webhooks/src/Event/SendEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webhooks\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\webhooks\Entity\WebhookConfig;
 use Drupal\webhooks\Webhook;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Class Send Event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/webhooks/src/Event/SendErrorEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webhooks\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\webhooks\Entity\WebhookConfig;
 use Drupal\webhooks\Webhook;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Class Send Event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/webhooks/src/Event/ReceiveEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webhooks\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\webhooks\Entity\WebhookConfig;
 use Drupal\webhooks\Webhook;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Class Receive Event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

