modules/contrib/stripe_webform/src/Event/StripeWebformEvents.php
modules/contrib/stripe_webform/src/Event/StripeWebformWebhookEvent.php
modules/contrib/stripe_webform/src/EventSubscriber/StripeWebformEventSubscriber.php
modules/contrib/stripe_webform/src/Plugin/WebformElement/StripeWebformCC.php
modules/contrib/stripe_webform/src/Plugin/WebformElement/StripeWebformElementBase.php
modules/contrib/stripe_webform/src/Plugin/WebformElement/StripeWebformPaymentRequest.php
modules/contrib/stripe_webform/src/Plugin/WebformHandler/StripeWebformHandler.php
modules/contrib/stripe_webform/stripe_webform.module

4 files with changes
====================

1) modules/contrib/stripe_webform/stripe_webform.module:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Drupal\Core\Form\FormStateInterface;
 /**
  * @file
  * Provides a Stripe webform element and handler.
@@ @@
  *
  * Adds a warning about using wizard webforms.
  */
-function stripe_webform_form_webform_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function stripe_webform_form_webform_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   $webform = $form_state->getFormObject()->getEntity();

   if ($webform->hasWizardPages()) {
@@ @@
  * Disables AJAX on webforms, as it doesn't work nicely with the current stripe
  * implementation.
  */
-function stripe_webform_form_webform_settings_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function stripe_webform_form_webform_settings_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   $webform = $form_state->getFormObject()->getEntity();

   $elements = $webform->getElementsInitializedAndFlattened();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/stripe_webform/src/Plugin/WebformHandler/StripeWebformHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stripe_webform\Plugin\WebformHandler;

+use Stripe\StripeClient;
+use Stripe\Exception\ExceptionInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
     $data = $this->tokenManager->replace($this->configuration, $webform_submission);

     try {
-      $stripe = new \Stripe\StripeClient($apikeySecret);
+      $stripe = new StripeClient($apikeySecret);

       $metadata = [
         'uuid' => $uuid,
@@ @@
         }
       }
     }
-    catch (\Stripe\Exception\ExceptionInterface $e) {
+    catch (ExceptionInterface $e) {
       $this->messenger()->addError($this->t('Stripe error: %error', ['%error' => $e->getMessage()]), 'error');
     }
  }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/stripe_webform/src/EventSubscriber/StripeWebformEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stripe_webform\EventSubscriber;

+use Stripe\Customer;
+use Stripe\Error\Base;
 use Drupal\stripe_webform\Event\StripeWebformWebhookEvent;
 use Drupal\stripe\Event\StripeEvents;
 use Drupal\stripe\Event\StripeWebhookEvent;
@@ @@
     elseif (!empty($stripe_event['data']['object']['customer'])) {
       $customer = $stripe_event['data']['object']['customer'];
       try {
-        $customer = \Stripe\Customer::retrieve($customer);
+        $customer = Customer::retrieve($customer);

         if (isset($customer['metadata']['webform_submission_id'])) {
           $metadata = $customer['metadata'];
         }
-      } catch (\Stripe\Error\Base $e) {
+      } catch (Base $e) {
         $this->logger->error('Stripe API Error: ' . $e->getMessage());
       }
     }
@@ @@
       if ($webform_submission) {
         $webhook_event = new StripeWebformWebhookEvent($stripe_event['type'], $webform_submission, $stripe_event);
         $this->event_dispatcher
-          ->dispatch(StripeWebformWebhookEvent::EVENT_NAME, $webhook_event);
+          ->dispatch($webhook_event, StripeWebformWebhookEvent::EVENT_NAME);
       }
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


4) modules/contrib/stripe_webform/src/Event/StripeWebformWebhookEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stripe_webform\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\webform\WebformSubmissionInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event that is fired when a webhook related to a webform submission is received
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

