diff --git a/modules/cloudflarepurger/src/EventSubscriber/CloudFlareCacheTagHeaderGenerator.php b/modules/cloudflarepurger/src/EventSubscriber/CloudFlareCacheTagHeaderGenerator.php
index d398a9c..a07df85 100644
--- a/modules/cloudflarepurger/src/EventSubscriber/CloudFlareCacheTagHeaderGenerator.php
+++ b/modules/cloudflarepurger/src/EventSubscriber/CloudFlareCacheTagHeaderGenerator.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\cloudflarepurger\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponseInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
@@ -33,10 +33,10 @@ class CloudFlareCacheTagHeaderGenerator implements EventSubscriberInterface {
   /**
    * Generates a 'Cache-Tag' header in the format expected by CloudFlare.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
diff --git a/modules/cloudflarepurger/tests/src/Unit/CredentialTestCheckTest.php b/modules/cloudflarepurger/tests/src/Unit/CredentialTestCheckTest.php
index 9485fad..3351b27 100644
--- a/modules/cloudflarepurger/tests/src/Unit/CredentialTestCheckTest.php
+++ b/modules/cloudflarepurger/tests/src/Unit/CredentialTestCheckTest.php
@@ -26,9 +26,7 @@ class CredentialTestCheckTest extends DiagnosticCheckTestBase {
    */
   public function testCredentialTestCheck($cred_status, $expected_severity) {
     $config_factory = $this->createMock('\Drupal\Core\Config\ConfigFactoryInterface');
-    $config = $this->getMockBuilder('Drupal\Core\Config\Config')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock('Drupal\Core\Config\Config');
     $config->expects($this->atLeastOnce())
       ->method('get')
       ->with('valid_credentials')
diff --git a/modules/cloudflarepurger/tests/src/Unit/DailyTagPurgeLimitCheckTest.php b/modules/cloudflarepurger/tests/src/Unit/DailyTagPurgeLimitCheckTest.php
index 289cf55..953c94c 100644
--- a/modules/cloudflarepurger/tests/src/Unit/DailyTagPurgeLimitCheckTest.php
+++ b/modules/cloudflarepurger/tests/src/Unit/DailyTagPurgeLimitCheckTest.php
@@ -17,7 +17,7 @@ class DailyTagPurgeLimitCheckTest extends DiagnosticCheckTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->container = new ContainerBuilder();
diff --git a/modules/cloudflarepurger/tests/src/Unit/DiagnosticCheckTestBase.php b/modules/cloudflarepurger/tests/src/Unit/DiagnosticCheckTestBase.php
index 0cbb61d..94722f2 100644
--- a/modules/cloudflarepurger/tests/src/Unit/DiagnosticCheckTestBase.php
+++ b/modules/cloudflarepurger/tests/src/Unit/DiagnosticCheckTestBase.php
@@ -53,12 +53,10 @@ abstract class DiagnosticCheckTestBase extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalState = new CoreState(new KeyValueMemoryFactory(), new MemoryBackend('test'), new NullLockBackend());
-    $this->timestampStub = $this->getMockBuilder('Drupal\cloudflare\Timestamp')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->timestampStub = $this->createMock('Drupal\cloudflare\Timestamp');
     $this->cloudflareState = new CloudFlareState($this->drupalState, $this->timestampStub);
 
     $this->container = new ContainerBuilder();
diff --git a/src/EventSubscriber/ClientIpRestore.php b/src/EventSubscriber/ClientIpRestore.php
index 197beb0..33510f5 100644
--- a/src/EventSubscriber/ClientIpRestore.php
+++ b/src/EventSubscriber/ClientIpRestore.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\cloudflare\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Url;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ -10,7 +11,6 @@ use Drupal\Core\StringTranslation\StringTranslationTrait;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\IpUtils;
 use Psr\Log\LoggerInterface;
@@ -96,7 +96,7 @@ class ClientIpRestore implements EventSubscriberInterface {
   /**
    * Restores the origination client IP delivered to Drupal from CloudFlare.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     if (!$this->isClientIpRestoreEnabled) {
       return;
     }
diff --git a/tests/src/Functional/CloudFlareAdminSettingsFormTest.php b/tests/src/Functional/CloudFlareAdminSettingsFormTest.php
index 4f46a97..294fe28 100644
--- a/tests/src/Functional/CloudFlareAdminSettingsFormTest.php
+++ b/tests/src/Functional/CloudFlareAdminSettingsFormTest.php
@@ -32,7 +32,7 @@ class CloudFlareAdminSettingsFormTest extends BrowserTestBase {
   /**
    * Setup the test.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser(['administer cloudflare']);
@@ -51,9 +51,10 @@ class CloudFlareAdminSettingsFormTest extends BrowserTestBase {
       'email' => 'test@test.com',
     ];
     ComposerDependenciesCheckMock::mockComposerDependenciesMet(TRUE);
-    $this->drupalPostForm($this->route, $edit, t('Next'));
+    $this->drupalGet($this->route);
+    $this->submitForm($edit, t('Next'));
     $this->assertSession()->addressEquals('/admin/config/services/cloudflare/two?js=nojs');
-    $this->drupalPostForm(NULL, [], t('Finish'));
+    $this->submitForm([], t('Finish'));
     $this->assertSession()->responseContains('68ow48650j63zfzx1w9jd29cr367u0ezb6a4g');
     $this->assertSession()->responseContains('test@test.com');
     $this->assertSession()->responseContains('testdomain.com');
@@ -70,9 +71,10 @@ class CloudFlareAdminSettingsFormTest extends BrowserTestBase {
     ];
     ComposerDependenciesCheckMock::mockComposerDependenciesMet(TRUE);
     ZoneMock::mockMultiZoneAccount(TRUE);
-    $this->drupalPostForm($this->route, $edit, t('Next'));
+    $this->drupalGet($this->route);
+    $this->submitForm($edit, t('Next'));
     $this->assertSession()->addressEquals('/admin/config/services/cloudflare/two?js=nojs');
-    $this->drupalPostForm(NULL, ['zone_selection' => "123456789999"], t('Finish'));
+    $this->submitForm(['zone_selection' => "123456789999"], t('Finish'));
     $this->assertSession()->responseContains('68ow48650j63zfzx1w9jd29cr367u0ezb6a4g');
     $this->assertSession()->responseContains('testdomain2.com');
   }
@@ -96,8 +98,9 @@ class CloudFlareAdminSettingsFormTest extends BrowserTestBase {
 
     $zone_mock = new ZoneMock($config_factory, $logger_channel_cloudflare, $cloudflare_state, $composer_dependencies_check);
     $container->set('cloudflare.zone', $zone_mock);
+    $this->drupalGet($this->route);
 
-    $this->drupalPostForm($this->route, $edit, t('Next'));
+    $this->submitForm($edit, t('Next'));
     $this->assertSession()->pageTextContains('Please enter a host without http/https');
   }
 
@@ -112,7 +115,8 @@ class CloudFlareAdminSettingsFormTest extends BrowserTestBase {
       'bypass_host' => 'http://blah.com',
     ];
     ZoneMock::mockAssertValidCredentials(TRUE);
-    $this->drupalPostForm($this->route, $edit, t('Next'));
+    $this->drupalGet($this->route);
+    $this->submitForm($edit, t('Next'));
     $this->assertSession()->pageTextContains('Please enter a host without http/https');
   }
 
@@ -126,7 +130,8 @@ class CloudFlareAdminSettingsFormTest extends BrowserTestBase {
       'client_ip_restore_enabled' => TRUE,
       'bypass_host' => 'blah!@#!@',
     ];
-    $this->drupalPostForm($this->route, $edit, t('Next'));
+    $this->drupalGet($this->route);
+    $this->submitForm($edit, t('Next'));
     $this->assertSession()->pageTextContains('You have entered an invalid host.');
   }
 
diff --git a/tests/src/Functional/CloudFlareAdminSettingsInvalidFormTest.php b/tests/src/Functional/CloudFlareAdminSettingsInvalidFormTest.php
index bd31e4b..f4d042f 100644
--- a/tests/src/Functional/CloudFlareAdminSettingsInvalidFormTest.php
+++ b/tests/src/Functional/CloudFlareAdminSettingsInvalidFormTest.php
@@ -35,7 +35,7 @@ class CloudFlareAdminSettingsInvalidFormTest extends BrowserTestBase {
   /**
    * Setup the test.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser(['administer cloudflare']);
@@ -90,7 +90,8 @@ class CloudFlareAdminSettingsInvalidFormTest extends BrowserTestBase {
       'apikey' => '68ow48650j63zfzx1w9jd29cr367u0ezb6a4g',
       'email' => 'test@test.com',
     ];
-    $this->drupalPostForm($this->route, $edit, t('Next'));
+    $this->drupalGet($this->route);
+    $this->submitForm($edit, t('Next'));
     $this->assertSession()->addressEquals('/admin/config/services/cloudflare');
   }
 
@@ -105,7 +106,8 @@ class CloudFlareAdminSettingsInvalidFormTest extends BrowserTestBase {
       'email' => 'test@test.com',
     ];
     $this->drupalLogin($this->adminUser);
-    $this->drupalPostForm($this->route, $edit, t('Next'));
+    $this->drupalGet($this->route);
+    $this->submitForm($edit, t('Next'));
     $this->assertSession()->pageTextContains('Invalid Api Key: Key can only contain lowercase or numerical characters.');
   }
 
@@ -120,7 +122,8 @@ class CloudFlareAdminSettingsInvalidFormTest extends BrowserTestBase {
       'email' => 'test@test.com',
     ];
     $this->drupalLogin($this->adminUser);
-    $this->drupalPostForm($this->route, $edit, t('Next'));
+    $this->drupalGet($this->route);
+    $this->submitForm($edit, t('Next'));
     $this->assertSession()->pageTextContains('Invalid Api Key: Key should be 37 chars long.');
   }
 
@@ -135,7 +138,8 @@ class CloudFlareAdminSettingsInvalidFormTest extends BrowserTestBase {
       'email' => 'test@test.com',
     ];
     $this->drupalLogin($this->adminUser);
-    $this->drupalPostForm($this->route, $edit, t('Next'));
+    $this->drupalGet($this->route);
+    $this->submitForm($edit, t('Next'));
     $this->assertSession()->pageTextContains('Invalid Api Key: Key can only contain alphanumeric characters.');
   }
 
diff --git a/tests/src/Functional/ComposerDependencyTest.php b/tests/src/Functional/ComposerDependencyTest.php
index dae05c7..923e218 100644
--- a/tests/src/Functional/ComposerDependencyTest.php
+++ b/tests/src/Functional/ComposerDependencyTest.php
@@ -32,7 +32,7 @@ class ComposerDependencyTest extends BrowserTestBase {
   /**
    * Setup the test.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser(['administer cloudflare']);
     $this->route = Url::fromRoute('cloudflare.admin_settings_form');
diff --git a/tests/src/Unit/ClientIpRestoreTest.php b/tests/src/Unit/ClientIpRestoreTest.php
index 123fbd8..4cde98e 100644
--- a/tests/src/Unit/ClientIpRestoreTest.php
+++ b/tests/src/Unit/ClientIpRestoreTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\cloudflare\Unit;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Cache\MemoryBackend;
@@ -10,7 +11,6 @@ use Drupal\Tests\UnitTestCase;
 use GuzzleHttp\ClientInterface;
 use Psr\Log\LoggerInterface;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 
 /**
@@ -28,7 +28,7 @@ class ClientIpRestoreTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->container = new ContainerBuilder();
     $this->container->set('string_translation', $this->getStringTranslationStub());
@@ -78,9 +78,7 @@ class ClientIpRestoreTest extends UnitTestCase {
     }
 
     $config_factory = $this->createMock('\Drupal\Core\Config\ConfigFactoryInterface');
-    $config = $this->getMockBuilder('Drupal\Core\Config\Config')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock('Drupal\Core\Config\Config');
 
     // Create a map of arguments to return values.
     $map = [
@@ -139,7 +137,7 @@ class ClientIpRestoreTest extends UnitTestCase {
     }
 
     $request->overrideGlobals();
-    $event = new GetResponseEvent($kernel, $request, 'foo', new NotFoundHttpException('foo'));
+    $event = new RequestEvent($kernel, $request, 'foo', new NotFoundHttpException('foo'));
     $client_ip_restore->onRequest($event);
     $this->assertEquals($expected_client_ip, $request->getClientIp());
 
diff --git a/tests/src/Unit/StateTest.php b/tests/src/Unit/StateTest.php
index 69b2f21..c867e1a 100644
--- a/tests/src/Unit/StateTest.php
+++ b/tests/src/Unit/StateTest.php
@@ -23,9 +23,7 @@ class StateTest extends UnitTestCase {
    * Tests tag count tracking functionality.
    */
   public function testTagPurgeDailyCountIncrements() {
-    $timestamp_stub = $this->getMockBuilder('Drupal\cloudflare\Timestamp')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $timestamp_stub = $this->createMock('Drupal\cloudflare\Timestamp');
 
     // Configure the stub.
     $timestamp_stub->method('now')
@@ -57,9 +55,7 @@ class StateTest extends UnitTestCase {
    * Tests tag count boundary functionality.
    */
   public function testTagPurgeBoundaryIncrements() {
-    $timestamp_stub = $this->getMockBuilder('Drupal\cloudflare\Timestamp')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $timestamp_stub = $this->createMock('Drupal\cloudflare\Timestamp');
 
     // Configure the stub.
     $timestamp_stub->method('now')
@@ -91,9 +87,7 @@ class StateTest extends UnitTestCase {
    * Tests tag count tracking functionality.
    */
   public function testApiRateLimitCountIncrements() {
-    $timestamp_stub = $this->getMockBuilder('Drupal\cloudflare\Timestamp')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $timestamp_stub = $this->createMock('Drupal\cloudflare\Timestamp');
 
     // Configure the stub.
     $timestamp_stub->method('now')
@@ -125,9 +119,7 @@ class StateTest extends UnitTestCase {
    * Tests tag count boundary functionality.
    */
   public function testApiRateLimitBoundaryIncrements() {
-    $timestamp_stub = $this->getMockBuilder('Drupal\cloudflare\Timestamp')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $timestamp_stub = $this->createMock('Drupal\cloudflare\Timestamp');
 
     // Configure the stub.
     $timestamp_stub->method('now')
