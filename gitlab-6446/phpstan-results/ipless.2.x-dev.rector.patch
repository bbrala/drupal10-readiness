diff --git a/src/Asset/AssetRenderer.php b/src/Asset/AssetRenderer.php
index 8b4b88e..623c7fe 100644
--- a/src/Asset/AssetRenderer.php
+++ b/src/Asset/AssetRenderer.php
@@ -169,7 +169,7 @@ class AssetRenderer implements AssetRendererInterface {
       $less->parseFile($file, $path);
 
       $event = new IplessCompilationEvent($this);
-      $this->eventDispatcher->dispatch(IplessEvents::LESS_FILE_COMPILED, $event);
+      $this->eventDispatcher->dispatch($event, IplessEvents::LESS_FILE_COMPILED);
 
       $this->preparePath($output);
       file_put_contents($output, $less->getCss());
@@ -204,7 +204,7 @@ class AssetRenderer implements AssetRendererInterface {
       }
       else {
         // This is for keep compatibility with Drupal <= 8.7.x.
-        file_prepare_directory($info['dirname'], FILE_CREATE_DIRECTORY);
+        \Drupal::service('file_system')->prepareDirectory($info['dirname'], FileSystemInterface::CREATE_DIRECTORY);
       }
     }
   }
diff --git a/src/Asset/AssetResolver.php b/src/Asset/AssetResolver.php
index 171d0d8..6ca43cd 100644
--- a/src/Asset/AssetResolver.php
+++ b/src/Asset/AssetResolver.php
@@ -55,7 +55,7 @@ class AssetResolver extends AssetResolverDefault implements AssetResolverInterfa
             $extension_type = 'theme';
           }
 
-          $path     = drupal_get_path($extension_type, $extension);
+          $path     = \Drupal::service('extension.path.resolver')->getPath($extension_type, $extension);
           $pathinfo = pathinfo($file);
 
           $options['data'] = $path . '/' . $file;
diff --git a/src/Event/IplessCompilationEvent.php b/src/Event/IplessCompilationEvent.php
index a06a6a4..3f3af5f 100644
--- a/src/Event/IplessCompilationEvent.php
+++ b/src/Event/IplessCompilationEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\ipless\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\ipless\Asset\AssetRenderer;
 
 /**
diff --git a/src/Event/IplessEvents.php b/src/Event/IplessEvents.php
index b4e5bce..6a00877 100644
--- a/src/Event/IplessEvents.php
+++ b/src/Event/IplessEvents.php
@@ -2,14 +2,12 @@
 
 namespace Drupal\ipless\Event;
 
-use Symfony\Component\EventDispatcher\Event;
-
 /**
  * Class event IplessEvent
  *
  * @author Damien LAGUERRE
  */
-final class IplessEvents extends Event {
+final class IplessEvents extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * Name of the event fired when a less file is compiled.
diff --git a/src/EventSubscriber/HtmlResponseIplessSubscriber.php b/src/EventSubscriber/HtmlResponseIplessSubscriber.php
index 176bc96..de07e39 100644
--- a/src/EventSubscriber/HtmlResponseIplessSubscriber.php
+++ b/src/EventSubscriber/HtmlResponseIplessSubscriber.php
@@ -3,10 +3,10 @@
 
 namespace Drupal\ipless\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Render\HtmlResponse;
 use Drupal\ipless\Asset\AssetResolverInterface;
 use Drupal\ipless\IplessInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
@@ -51,10 +51,10 @@ class HtmlResponseIplessSubscriber implements EventSubscriberInterface {
   /**
    * Generate Less files.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     $response = $event->getResponse();
 
     if (!$response instanceof HtmlResponse || !$this->ipless->isEnabled()) {
