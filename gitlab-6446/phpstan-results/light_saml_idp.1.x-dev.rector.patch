diff --git a/src/Controller/LightSamlIdpController.php b/src/Controller/LightSamlIdpController.php
index 681b595..e088a09 100644
--- a/src/Controller/LightSamlIdpController.php
+++ b/src/Controller/LightSamlIdpController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\light_saml_idp\Controller;
 
+use LightSaml\Binding\BindingFactory;
+use LightSaml\Context\Profile\MessageContext;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Session\AccountProxy;
@@ -199,9 +201,9 @@ class LightSamlIdpController extends ControllerBase {
     }
     $assertion = $this->samlGenerator->buildAssertion($serviceProvider, $this->currentUser, $requestId);
     $this->samlGenerator->addAssertionToResponse($serviceProvider, $samlMessage, $assertion);
-    $bindingFactory = new \LightSaml\Binding\BindingFactory();
+    $bindingFactory = new BindingFactory();
 
-    $messageContext = new \LightSaml\Context\Profile\MessageContext();
+    $messageContext = new MessageContext();
     $messageContext->setMessage($samlMessage)->asResponse();
 
     // We only support SAML 2.0 HTTP POST binding for now.
diff --git a/src/EventSubscriber/StoreAnonymousSAMLRequestSubscriber.php b/src/EventSubscriber/StoreAnonymousSAMLRequestSubscriber.php
index b0fc685..9d4e1b5 100644
--- a/src/EventSubscriber/StoreAnonymousSAMLRequestSubscriber.php
+++ b/src/EventSubscriber/StoreAnonymousSAMLRequestSubscriber.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\light_saml_idp\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Core\Routing\RouteMatch;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 use Symfony\Component\HttpKernel\KernelEvents;
 
@@ -28,10 +28,10 @@ class StoreAnonymousSAMLRequestSubscriber implements EventSubscriberInterface {
   /**
    * Store the SAML request data in the user's session.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    */
-  public function storeSAMLRequest(GetResponseForExceptionEvent $event) {
-    if ($event->getException() instanceof AccessDeniedHttpException && $this->account->isAnonymous()) {
+  public function storeSAMLRequest(ExceptionEvent $event) {
+    if ($event->getThrowable() instanceof AccessDeniedHttpException && $this->account->isAnonymous()) {
       $request = $event->getRequest();
       $routeName = RouteMatch::createFromRequest($request)->getRouteName();
       $samlRequest = $request->get('SAMLRequest');
