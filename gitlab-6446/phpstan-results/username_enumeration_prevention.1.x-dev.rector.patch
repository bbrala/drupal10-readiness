diff --git a/src/UserRouteEventSubscriber.php b/src/UserRouteEventSubscriber.php
index e52118e..920b553 100644
--- a/src/UserRouteEventSubscriber.php
+++ b/src/UserRouteEventSubscriber.php
@@ -2,13 +2,13 @@
 
 namespace Drupal\username_enumeration_prevention;
 
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Routing\RouteProviderInterface;
 use Drupal\Core\Routing\RouteMatch;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Symfony\Component\HttpKernel\KernelEvents;
@@ -60,10 +60,10 @@ class UserRouteEventSubscriber implements EventSubscriberInterface {
   /**
    * {@inheritdoc}
    */
-  public function onException(GetResponseForExceptionEvent $event) {
+  public function onException(ExceptionEvent $event) {
     $routeMatch = RouteMatch::createFromRequest($event->getRequest());
-    if ($event->getException() instanceof AccessDeniedHttpException && in_array($routeMatch->getRouteName(), $this->getUserRoutes())) {
-      $event->setException(new NotFoundHttpException());
+    if ($event->getThrowable() instanceof AccessDeniedHttpException && in_array($routeMatch->getRouteName(), $this->getUserRoutes())) {
+      $event->setThrowable(new NotFoundHttpException());
     }
   }
 
diff --git a/tests/src/Functional/FloodTest.php b/tests/src/Functional/FloodTest.php
index 8ab7116..9128ce2 100644
--- a/tests/src/Functional/FloodTest.php
+++ b/tests/src/Functional/FloodTest.php
@@ -44,20 +44,20 @@ class FloodTest extends PageCacheTagsTestBase {
     for ($i = 0; $i < 3; $i++) {
       $this->drupalGet('user/password');
       $edit = ['name' => $name];
-      $this->drupalPostForm(NULL, $edit, $this->t('Submit'));
+      $this->submitForm($edit, $this->t('Submit'));
     }
 
     // The next request should trigger flood control.
     $this->drupalGet('user/password');
     $edit = ['name' => $this->randomMachineName()];
-    $this->drupalPostForm(NULL, $edit, $this->t('Submit'));
+    $this->submitForm($edit, $this->t('Submit'));
 
     // Error should not be displayed to the end user.
-    $this->assertNoText($this->t('Too many password recovery requests from your IP address. It is temporarily blocked. Try again later or contact the site administrator.'));
+    $this->assertSession()->pageTextNotContains($this->t('Too many password recovery requests from your IP address. It is temporarily blocked. Try again later or contact the site administrator.'));
 
     // But mail should be.
     $mail = $this->drupalGetMails();
-    $this->assert(!empty($mail), "password reset mails were sent");
+    $this->assertTrue(!empty($mail), "password reset mails were sent");
   }
 
 }
