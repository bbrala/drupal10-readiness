modules/contrib/field_tokens/field_tokens.module
modules/contrib/field_tokens/field_tokens.tokens.inc
modules/contrib/field_tokens/src/Tests/FieldTokensFormattedTest.php
modules/contrib/field_tokens/src/Tests/FieldTokensGeneralTest.php
modules/contrib/field_tokens/src/Tests/FieldTokensPropertyTest.php
modules/contrib/field_tokens/src/Tests/FieldTokensTestBase.php

4 files with changes
====================

1) modules/contrib/field_tokens/src/Tests/FieldTokensTestBase.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a content type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/field_tokens/src/Tests/FieldTokensPropertyTest.php:24

    ---------- begin diff ----------
@@ @@
     $value = \Drupal::service('token')->replace($token, ['node' => $node]);

     // Check the token is rendered correctly.
-    $this->assertEqual($value, $node->{$this->field->get('field_name')}[0]->target_id, $token . ' matches provided Image field target_id property.');
+    $this->assertEquals($value, $node->{$this->field->get('field_name')}[0]->target_id, $token . ' matches provided Image field target_id property.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/field_tokens/src/Tests/FieldTokensGeneralTest.php:25

    ---------- begin diff ----------
@@ @@
     // Set second image field to hidden.
     $edit = [];
     $edit["fields[{$field_name}][type]"] = 'hidden';
-    $this->drupalPostForm("admin/structure/types/manage/{$this->contentType->id()}/display", $edit, t('Save'));
+    $this->drupalGet("admin/structure/types/manage/{$this->contentType->id()}/display");
+    $this->submitForm($edit, t('Save'));

     // Create node with two images attached.
     $test_image = current($this->drupalGetTestFiles('image'));
@@ @@
     $edit['title[0][value]'] = $this->randomMachineName();
     $edit["files[{$this->field->get('field_name')}_0]"] = $file_system->realpath($test_image->uri);
     $edit["files[{$field_name}_0]"] = $file_system->realpath($test_image->uri);
-    $this->drupalPostForm('node/add/' . $this->contentType->id(), $edit, t('Save and publish'));
+    $this->drupalGet('node/add/' . $this->contentType->id());
+    $this->submitForm($edit, t('Save and publish'));

     // Add Alt text.
     $edit = [];
     $edit["{$this->field->get('field_name')}[0][alt]"] = $this->randomString();
     $edit["{$field_name}[0][alt]"] = $this->randomString();
-    $this->drupalPostForm(NULL, $edit, t('Save and publish'));
+    $this->submitForm($edit, t('Save and publish'));

     // Retrieve ID of the newly created node from the current URL.
     $matches = [];
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/field_tokens/src/Tests/FieldTokensFormattedTest.php:35

    ---------- begin diff ----------
@@ @@
     $value = \Drupal::service('token')->replace($token, ['node' => $node]);

     // Check the token is rendered correctly.
-    $this->assertEqual($value, $output, $token . ' matches rendered Image formatter for provided Image field.');
+    $this->assertEquals($value, $output, $token . ' matches rendered Image formatter for provided Image field.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

