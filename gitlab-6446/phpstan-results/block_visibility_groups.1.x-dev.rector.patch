diff --git a/block_visibility_groups_admin/src/Tests/GroupListerTest.php b/block_visibility_groups_admin/src/Tests/GroupListerTest.php
index 5d0e6a7..7af8f13 100644
--- a/block_visibility_groups_admin/src/Tests/GroupListerTest.php
+++ b/block_visibility_groups_admin/src/Tests/GroupListerTest.php
@@ -34,7 +34,7 @@ class GroupListerTest extends BrowserTestBase {
    */
   public function testGroupLister() {
     // Check that the basic functions of module block_visibility_groups_admin.
-    $this->assertEqual(TRUE, TRUE, 'Test Unit Generated via App Console.');
+    $this->assertEquals(TRUE, TRUE, 'Test Unit Generated via App Console.');
   }
 
 }
diff --git a/tests/src/Functional/BlockVisibilityGroupsTestBase.php b/tests/src/Functional/BlockVisibilityGroupsTestBase.php
index 733defe..fe3d470 100644
--- a/tests/src/Functional/BlockVisibilityGroupsTestBase.php
+++ b/tests/src/Functional/BlockVisibilityGroupsTestBase.php
@@ -34,7 +34,7 @@ abstract class BlockVisibilityGroupsTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Create and login with user who can administer blocks.
     $this->blockVisibilityGroupsUser = $this->drupalCreateUser([
diff --git a/tests/src/Functional/BlockVisibilityGroupsUiTest.php b/tests/src/Functional/BlockVisibilityGroupsUiTest.php
index febe239..4b8066c 100644
--- a/tests/src/Functional/BlockVisibilityGroupsUiTest.php
+++ b/tests/src/Functional/BlockVisibilityGroupsUiTest.php
@@ -33,14 +33,14 @@ class BlockVisibilityGroupsUiTest extends BlockVisibilityGroupsTestBase {
 
     $this->drupalGet('admin/structure/block/manage/' . $block->id());
     $selected = $this->assertSession()->elementExists('css', '#edit-visibility-condition-group-block-visibility-group option:selected');
-    $this->assertEqual($selected->getText(), $group->label());
+    $this->assertEquals($selected->getText(), $group->label());
 
     $block = \Drupal::service('entity_type.manager')
       ->getStorage('block')
       ->load($block->id());
 
     $actual = $block->getVisibility();
-    $this->assertEqual($actual['condition_group']['block_visibility_group'], $group->id());
+    $this->assertEquals($actual['condition_group']['block_visibility_group'], $group->id());
   }
 
   /**
@@ -68,7 +68,7 @@ class BlockVisibilityGroupsUiTest extends BlockVisibilityGroupsTestBase {
       'label' => $this->randomMachineName(),
       'id' => 'test_block_visibility_groups',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
 
     // Block visibility created successfully or not.
     $this->assertPageTextContains('Saved the @group Block Visibility Group.', ['@group' => $edit['label']]);
@@ -76,8 +76,8 @@ class BlockVisibilityGroupsUiTest extends BlockVisibilityGroupsTestBase {
       ->getStorage('block_visibility_group')
       ->load($edit['id']);
 
-    $this->assertEqual($block_visibility_group->id(), $edit['id']);
-    $this->assertEqual($block_visibility_group->label(), $edit['label']);
+    $this->assertEquals($block_visibility_group->id(), $edit['id']);
+    $this->assertEquals($block_visibility_group->label(), $edit['label']);
   }
 
   /**
@@ -166,7 +166,7 @@ class BlockVisibilityGroupsUiTest extends BlockVisibilityGroupsTestBase {
     $this->drupalGet('admin/structure/block/manage/' . $block->id());
     $tabs = $this->assertSession()->elementExists('css', "div[data-drupal-selector=\"edit-visibility-tabs\"]");
     $items = $tabs->findAll('css', 'summary');
-    $this->assertEqual('Condition Group', $items[0]->getText());
+    $this->assertEquals('Condition Group', $items[0]->getText());
     $this->assertSession()->fieldValueEquals('Block Visibility Groups', '');
 
     $group = $this->createGroup();
@@ -198,7 +198,7 @@ class BlockVisibilityGroupsUiTest extends BlockVisibilityGroupsTestBase {
     $ul->clickLink('Manage Blocks');
 
     $selected = $this->assertSession()->elementExists('css', '#block-admin-display-form option:selected');
-    $this->assertEqual($group->label(), $selected->getText());
+    $this->assertEquals($group->label(), $selected->getText());
 
     // Find the block's row and visit it's configuration page.
     $row = $this->assertSession()->elementExists('css', "tr[data-drupal-selector=\"edit-blocks-{$block->id()}\"]");
@@ -228,7 +228,7 @@ class BlockVisibilityGroupsUiTest extends BlockVisibilityGroupsTestBase {
     $row->clickLink('Configure');
 
     $selected = $this->assertSession()->elementExists('css', '#edit-visibility-condition-group-block-visibility-group option:selected');
-    $this->assertEqual($selected->getText(), $group->label());
+    $this->assertEquals($selected->getText(), $group->label());
 
     $this->getSession()->getPage()->pressButton('Save block');
 
@@ -255,10 +255,10 @@ class BlockVisibilityGroupsUiTest extends BlockVisibilityGroupsTestBase {
     $tabs = $this->assertSession()->elementExists('css', "div[data-drupal-selector=\"edit-visibility-tabs\"]");
     $items = $tabs->findAll('css', 'summary');
     $this->assertCount(1, $items);
-    $this->assertEqual('Condition Group', $items[0]->getText());
+    $this->assertEquals('Condition Group', $items[0]->getText());
     $item = $tabs->find('css', '.form-item-visibility-condition-group-block-visibility-group');
     $label = $item->find('css', 'label');
-    $this->assertEqual('Block Visibility Groups', $label->getText());
+    $this->assertEquals('Block Visibility Groups', $label->getText());
     $this->assertSession()->fieldValueEquals('Block Visibility Groups', $group->id());
   }
 
@@ -277,8 +277,8 @@ class BlockVisibilityGroupsUiTest extends BlockVisibilityGroupsTestBase {
     $row = $this->assertSession()->elementExists('css', "tr[data-drupal-selector=\"edit-conditions-$condition_id\"]");
     $cells = $row->findAll('css', 'td');
     $this->assertCount(3, $cells);
-    $this->assertEqual($expected['label'], $cells[0]->getText());
-    $this->assertEqual($expected['description'], $cells[1]->getText());
+    $this->assertEquals($expected['label'], $cells[0]->getText());
+    $this->assertEquals($expected['description'], $cells[1]->getText());
     $this->assertSession()->elementExists('css', 'ul.dropbutton', $row);
 
     return $row;
