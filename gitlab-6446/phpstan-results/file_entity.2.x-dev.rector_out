modules/contrib/file_entity/file_entity.api.php
modules/contrib/file_entity/src/FileEntityAccessControlHandler.php
modules/contrib/file_entity/src/Plugin/Action/FileSetTemporary.php
modules/contrib/file_entity/tests/src/Functional/FileEntityAccessTest.php
modules/contrib/file_entity/views/views_plugin_row_file_rss.inc
modules/contrib/file_entity/file_entity.file.inc
modules/contrib/file_entity/file_entity.install
modules/contrib/file_entity/src/Plugin/Field/FieldFormatter/FileAudioFormatter.php
modules/contrib/file_entity/src/FileEntityInterface.php
modules/contrib/file_entity/src/FileEntityPermissions.php
modules/contrib/file_entity/file_entity.module
modules/contrib/file_entity/src/Plugin/Field/FieldFormatter/FileDownloadLinkFormatter.php
modules/contrib/file_entity/src/FileEntityServiceProvider.php
modules/contrib/file_entity/src/FileTypeInterface.php
modules/contrib/file_entity/src/FileTypeListBuilder.php
modules/contrib/file_entity/src/Form/FileAddArchiveForm.php
modules/contrib/file_entity/src/Plugin/Field/FieldFormatter/FileImageFormatter.php
modules/contrib/file_entity/src/Plugin/Field/FieldFormatter/FileImageResponsiveFormatter.php
modules/contrib/file_entity/src/Form/FileAddForm.php
modules/contrib/file_entity/src/Plugin/Field/FieldFormatter/FileSizeFormatter.php
modules/contrib/file_entity/src/Plugin/Field/FieldFormatter/FileVideoFormatter.php
modules/contrib/file_entity/tests/src/Functional/FileEntityAdminTest.php
modules/contrib/file_entity/file_entity.theme.inc
modules/contrib/file_entity/file_entity.tokens.inc
modules/contrib/file_entity/file_entity.views.inc
modules/contrib/file_entity/src/Controller/FileController.php
modules/contrib/file_entity/src/Plugin/Field/FieldWidget/FileEditableWidget.php
modules/contrib/file_entity/src/Plugin/QueueWorker/FileDetermineType.php
modules/contrib/file_entity/src/Plugin/views/argument/Type.php
modules/contrib/file_entity/src/Plugin/views/field/FileName.php
modules/contrib/file_entity/src/Form/FileDeleteMultipleForm.php
modules/contrib/file_entity/src/Entity/FileEntity.php
modules/contrib/file_entity/src/Plugin/views/field/Link.php
modules/contrib/file_entity/src/Plugin/views/field/LinkDelete.php
modules/contrib/file_entity/src/Plugin/views/field/LinkDownload.php
modules/contrib/file_entity/src/Form/FileEditForm.php
modules/contrib/file_entity/src/Plugin/views/field/LinkEdit.php
modules/contrib/file_entity/src/Plugin/views/field/Type.php
modules/contrib/file_entity/src/Plugin/views/filter/SchemeType.php
modules/contrib/file_entity/src/Plugin/views/filter/Type.php
modules/contrib/file_entity/src/Form/FileInlineEditForm.php
modules/contrib/file_entity/src/Routing/RouteSubscriber.php
modules/contrib/file_entity/src/UploadValidatorsTrait.php
modules/contrib/file_entity/src/Form/FileSettingsForm.php
modules/contrib/file_entity/src/Form/FileTypeDisableForm.php
modules/contrib/file_entity/src/Form/FileTypeEnableForm.php
modules/contrib/file_entity/src/Form/FileTypeForm.php
modules/contrib/file_entity/src/Mimetypes.php
modules/contrib/file_entity/tests/src/Functional/FileEntityCacheTagsTest.php
modules/contrib/file_entity/src/Normalizer/FileEntityNormalizer.php
modules/contrib/file_entity/src/Normalizer/FileItemNormalizer.php
modules/contrib/file_entity/src/Plugin/Action/FileDelete.php
modules/contrib/file_entity/src/Plugin/Action/FileSetPermanent.php
modules/contrib/file_entity/tests/src/Functional/FileEntityCreationTest.php
modules/contrib/file_entity/tests/src/Functional/FileEntityEditTest.php
modules/contrib/file_entity/tests/src/Functional/FileEntityFileTypeClassificationTest.php
modules/contrib/file_entity/src/Entity/FileEntityViewBuilder.php
modules/contrib/file_entity/src/Entity/FileType.php
modules/contrib/file_entity/tests/src/Functional/FileEntityPathautoTest.php
modules/contrib/file_entity/tests/src/Functional/FileEntityReplaceTest.php
modules/contrib/file_entity/tests/src/Functional/FileEntityServicesTest.php
modules/contrib/file_entity/tests/src/Functional/FileEntityTestBase.php
modules/contrib/file_entity/tests/src/Functional/FileEntityTokenTest.php
modules/contrib/file_entity/tests/src/Functional/FileEntityTypeTest.php
modules/contrib/file_entity/tests/src/Functional/FileEntityUnitTest.php
modules/contrib/file_entity/tests/src/FunctionalJavascript/FileEntitySettingsTest.php
modules/contrib/file_entity/tests/src/Kernel/FileEntityNormalizerTest.php
modules/contrib/file_entity/views/views_handler_field_file_rendered.inc

18 files with changes
=====================

1) modules/contrib/file_entity/views/views_plugin_row_file_rss.inc:108

    ---------- begin diff ----------
@@ @@
     $item_text = '';

     $uri = entity_uri('file', $file);
-    $user = user_load($file->uid);
+    $user = \Drupal::service('entity_type.manager')->getStorage('user')->load($file->uid);
     $file->link = url($uri['path'], $uri['options'] + array('absolute' => TRUE));
     $file->rss_namespaces = array();
     $file->rss_elements = array(
@@ @@
     if ($display_mode != 'title') {
       // We render file contents and force links to be last.
       $build['links']['#weight'] = 1000;
-      $item_text .= drupal_render($build);
+      $item_text .= \Drupal::service('renderer')->render($build);
     }

     $item = new stdClass();
    ----------- end diff -----------

Applied rules:
 * DrupalRenderRector
 * UserLoadRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/file_entity/src/Plugin/Field/FieldFormatter/FileImageResponsiveFormatter.php:144

    ---------- begin diff ----------
@@ @@
     unset($item->_attributes);

     if ($this->getSetting('image_link')) {
-      $url = file_url_transform_relative(file_create_url($file->getFileUri()));
+      $url = \Drupal::service('file_url_generator')->generateString($file->getFileUri());
     }

     $elements[] = array(
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/file_entity/src/Form/FileAddForm.php:445

    ---------- begin diff ----------
@@ @@
     if ($save) {
       if (StreamWrapperManager::getScheme($file->getFileUri()) != $form_state->get('scheme')) {
         // @TODO: Users should not be allowed to create private files without permission ('view private files')
-        if ($moved_file = file_move($file, $form_state->get('scheme') . '://' . StreamWrapperManager::getTarget($file->getFileUri()), FileSystemInterface::EXISTS_RENAME)) {
+        if ($moved_file = \Drupal::service('file.repository')->move($file, $form_state->get('scheme') . '://' . StreamWrapperManager::getTarget($file->getFileUri()), FileSystemInterface::EXISTS_RENAME)) {
           // Only re-assign the file object if file_move() did not fail.
           $moved_file->setFilename($file->getFilename());
    ----------- end diff -----------

Applied rules:
 * FileMoveRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/file_entity/file_entity.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Render\Element;
 /**
  * @file
  * Extends Drupal file entities to be fieldable and viewable.
@@ @@

   // Helpful $content variable for templates.
   $variables += array('content' => array());
-  foreach (\Drupal\Core\Render\Element::children($variables['elements']) as $key) {
+  foreach (Element::children($variables['elements']) as $key) {
     $variables['content'][$key] = $variables['elements'][$key];
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


5) modules/contrib/file_entity/file_entity.api.php:42

    ---------- begin diff ----------
@@ @@
 function hook_file_transfer($uri, array $headers) {
   // Redirect a download for an S3 file to the actual location.
   if (StreamWrapperManager::getScheme($uri) == 's3') {
-    $url = file_create_url($uri);
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
     drupal_goto($url);
   }
 }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector


6) modules/contrib/file_entity/tests/src/Kernel/FileEntityNormalizerTest.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('node');
     $this->installEntitySchema('file');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/file_entity/tests/src/FunctionalJavascript/FileEntitySettingsTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->config = $this->config('file_entity.settings');
   }
@@ @@
     $assert_session->pageTextContains('Field used for the image title attribute: field_image_title_text');
     $assert_session->pageTextContains('Field used for the image title attribute: field_image_title_text');

-    $this->drupalPostForm(NULL, [], 'uri_settings_edit');
+    $this->submitForm([], 'uri_settings_edit');
     $assert_session->assertWaitOnAjaxRequest();
     $assert_session->responseContains('fields[uri][settings_edit_form][settings][title]');
     $assert_session->responseContains('fields[uri][settings_edit_form][settings][alt]');
@@ @@
       'fields[uri][settings_edit_form][settings][title]' => '_none',
       'fields[uri][settings_edit_form][settings][alt]' => '_none',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Update');
+    $this->submitForm($edit, 'Update');
     $assert_session->assertWaitOnAjaxRequest();
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $assert_session->assertWaitOnAjaxRequest();
     $assert_session->pageTextContains('Title attribute is hidden.');
     $assert_session->pageTextContains('Alt attribute is hidden.');
@@ @@
     $page = $this->getSession()->getPage();
     $page->attachFileToField('files[upload]', $this->container->get('file_system')->realpath($test_file[0]->uri));
     $assert_session->assertWaitOnAjaxRequest();
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->submitForm([], 'Next');
     $assert_session->assertWaitOnAjaxRequest();
     $assert_session->pageTextContains('Destination');
-    $this->drupalPostForm(NULL, [], 'Next');
+    $this->submitForm([], 'Next');
     $edit = [
       'field_image_alt_text[0][value]' => 'Alt text',
       'field_image_title_text[0][value]' => 'Title text',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $assert_session->responseNotContains('alt="Alt text"', 'Alt attribute is hidden.');
     $assert_session->responseNotContains('title="Title text"', 'Title attribute is hidden.');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/file_entity/tests/src/Functional/FileEntityUnitTest.php:2

    ---------- begin diff ----------
@@ @@
 namespace Drupal\Tests\file_entity\Functional;

 use Drupal\file\Entity\File;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeExtensionGuesser;

 /**
  * Test basic file entity functionality.
@@ @@
  */
 class FileEntityUnitTest extends FileEntityTestBase {

-  function setUp() {
+  function setUp(): void {
     parent::setUp();
     $this->setUpFiles();
   }
@@ @@
       'public://test.mkv' => 'video/x-matroska',
       'public://test.webp' => 'image/webp',
     );
-    /** @var MimeTypeExtensionGuesser $guesser */
+    /** @var \Symfony\Component\Mime\MimeTypes $guesser */
     $guesser = $this->container->get('file.mime_type.guesser.extension');
     foreach ($tests as $input => $expected) {
-      $this->assertEqual($expected, $guesser->guess($input));
+      $this->assertEquals($expected, $guesser->guess($input));
     }
   }

@@ @@
     $file = reset($this->files['text']);

     // Test entity ID, revision ID, and bundle.
-    $this->assertEqual($file->id(), $file->fid->value);
-    $this->assertEqual($file->getRevisionId(), NULL);
-    $this->assertEqual($file->bundle(), 'document');
+    $this->assertEquals($file->id(), $file->fid->value);
+    $this->assertEquals($file->getRevisionId(), NULL);
+    $this->assertEquals($file->bundle(), 'document');

     // Test the entity URI callback.
     /*$uri = entity_uri('file', $file);
@@ @@
         $file->hasMetadata('width'),
         'Image dimensions retrieved on file load for an image file.'
       );
-      $this->assertEqual(
-        $file->getMetadata('height'),
-        $files[$file->id()]['height'],
-        'Loaded image height is equal to saved image height.'
-      );
-      $this->assertEqual(
-        $file->getMetadata('width'),
-        $files[$file->id()]['width'],
-        'Loaded image width is equal to saved image width.'
-      );
+      $this->assertEquals($file->getMetadata('height'), $files[$file->id()]['height'], 'Loaded image height is equal to saved image height.');
+      $this->assertEquals($file->getMetadata('width'), $files[$file->id()]['width'], 'Loaded image width is equal to saved image width.');
     }
     foreach (File::loadMultiple($text_fids) as $file) {
       $this->assertFalse(
@@ @@
     $image->resize($file->getMetadata('width') / 2, $file->getMetadata('height') / 2);
     $image->save();
     $file->save();
-    $this->assertEqual(
-      $file->getMetadata('height'),
-      $files[$file->id()]['height'] / 2,
-      'Image file height updated by file save.'
-    );
-    $this->assertEqual(
-      $file->getMetadata('width'),
-      $files[$file->id()]['width'] / 2,
-      'Image file width updated by file save.'
-    );
+    $this->assertEquals($file->getMetadata('height'), $files[$file->id()]['height'] / 2, 'Image file height updated by file save.');
+    $this->assertEquals($file->getMetadata('width'), $files[$file->id()]['width'] / 2, 'Image file width updated by file save.');
     // Clear the cache and reload the file.
     \Drupal::entityTypeManager()->getStorage('file')->resetCache();
     $file = File::load($file->id());
-    $this->assertEqual(
-      $file->getMetadata('height'),
-      $files[$file->id()]['height'] / 2,
-      'Updated image height retrieved by file load.'
-    );
-    $this->assertEqual(
-      $file->getMetadata('width'),
-      $files[$file->id()]['width'] / 2,
-      'Updated image width retrieved by file load.'
-    );
+    $this->assertEquals($file->getMetadata('height'), $files[$file->id()]['height'] / 2, 'Updated image height retrieved by file load.');
+    $this->assertEquals($file->getMetadata('width'), $files[$file->id()]['width'] / 2, 'Updated image width retrieved by file load.');

     //Test hook_file_delete().
     $file->delete();
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/file_entity/tests/src/Functional/FileEntityTypeTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->setUpFiles();
   }
@@ @@
     $this->drupalLogin($user);

     $this->drupalGet('admin/structure/file-types');
-    $this->assertResponse(200, 'File types admin page is accessible');
+    $this->assertSession()->statusCodeEquals(200, 'File types admin page is accessible');
   }

   /**
@@ @@
     $type_machine_label = 'foobar';
     $this->createFileType(array('id' => $type_machine_type, 'label' => $type_machine_label));
     $loaded_type = FileType::load($type_machine_type);
-    $this->assertEqual($loaded_type->label(), $type_machine_label, "Was able to create a type and retreive it.");
+    $this->assertEquals($loaded_type->label(), $type_machine_label, "Was able to create a type and retreive it.");
   }

   /**
@@ @@
     $file = reset($this->files['image']);
     $edit = array();
     $edit['files[upload]'] = \Drupal::service('file_system')->realpath($file->getFileUri());
-    $this->drupalPostForm('file/add', $edit, t('Next'));
+    $this->drupalGet('file/add');
+    $this->submitForm($edit, t('Next'));

     // Step 2: Select file type candidate.
-    $this->assertText('Image 1');
-    $this->assertText('Image 2');
+    $this->assertSession()->pageTextContains('Image 1');
+    $this->assertSession()->pageTextContains('Image 2');
     $edit = array();
     $edit['type'] = 'image2';
-    $this->drupalPostForm(NULL, $edit, t('Next'));
+    $this->submitForm($edit, t('Next'));

     // Step 3: Select file scheme candidate.
-    $this->assertText('Public local files served by the webserver.');
-    $this->assertText('Private local files served by Drupal.');
+    $this->assertSession()->pageTextContains('Public local files served by the webserver.');
+    $this->assertSession()->pageTextContains('Private local files served by Drupal.');
     $edit = array();
     $edit['scheme'] = 'public';
-    $this->drupalPostForm(NULL, $edit, t('Next'));
+    $this->submitForm($edit, t('Next'));

     // Step 4: Complete field widgets.
     $edit = array();
     $edit["{$field_name}[0][value]"] = $this->randomMachineName();
     $edit['filename[0][value]'] = $this->randomMachineName();
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertRaw(t('@type %name was uploaded.', array('@type' => 'Image 2', '%name' => $edit['filename[0][value]'])));
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains(t('@type %name was uploaded.', array('@type' => 'Image 2', '%name' => $edit['filename[0][value]'])));

     // Check that the file exists in the database.
     $file = $this->getFileByFilename($edit['filename[0][value]']);
@@ @@
     $file = reset($this->files['image']);
     $edit = array();
     $edit['files[upload]'] = \Drupal::service('file_system')->realpath($file->getFileUri());
-    $this->drupalPostForm('file/add', $edit, t('Next'));
+    $this->drupalGet('file/add');
+    $this->submitForm($edit, t('Next'));

     // Step 2: Scheme selection.
     if ($this->xpath('//input[@name="scheme"]')) {
-      $this->drupalPostForm(NULL, array(), t('Next'));
+      $this->submitForm(array(), t('Next'));
     }

     // Step 3: Complete field widgets.
@@ @@
     $edit = array();
     $edit["{$field_name}[0][value]"] = $this->randomMachineName();
     $edit['filename[0][value]'] = $this->randomMachineName();
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertRaw(t('@type %name was uploaded.', array('@type' => 'Image', '%name' => $edit['filename[0][value]'])));
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains(t('@type %name was uploaded.', array('@type' => 'Image', '%name' => $edit['filename[0][value]'])));

     // Check that the file exists in the database.
     $file = $this->getFileByFilename($edit['filename[0][value]']);
@@ @@
    */
   public function testTypesCrudUi() {
     $this->drupalGet('admin/structure/file-types');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $user = $this->drupalCreateUser(array('administer file types'));
     $this->drupalLogin($user);

     $this->drupalGet('admin/structure/file-types');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Create new file type.
     $edit = array(
@@ @@
       'mimetypes' => 'image/png',
     );
     $this->drupalGet('admin/structure/file-types/add');
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertText(t('The file type @type has been added.', array('@type' => $edit['label'])));
-    $this->assertText($edit['label']);
-    $this->assertText($edit['description']);
-    $this->assertLink(t('Disable'));
-    $this->assertLink(t('Delete'));
-    $this->assertLinkByHref('admin/structure/file-types/manage/' . $edit['id'] . '/disable');
-    $this->assertLinkByHref('admin/structure/file-types/manage/' . $edit['id'] . '/delete');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('The file type @type has been added.', array('@type' => $edit['label'])));
+    $this->assertSession()->pageTextContains($edit['label']);
+    $this->assertSession()->pageTextContains($edit['description']);
+    $this->assertSession()->linkExists(t('Disable'));
+    $this->assertSession()->linkExists(t('Delete'));
+    $this->assertSession()->linkByHrefExists('admin/structure/file-types/manage/' . $edit['id'] . '/disable');
+    $this->assertSession()->linkByHrefExists('admin/structure/file-types/manage/' . $edit['id'] . '/delete');

     // Edit file type.
     $this->drupalGet('admin/structure/file-types/manage/' . $edit['id'] . '/edit');
-    $this->assertRaw(t('Save'));
-    $this->assertRaw(t('Delete'));
-    $this->assertRaw($edit['label']);
-    $this->assertText($edit['description']);
-    $this->assertText($edit['mimetypes']);
-    $this->assertText(t('Known MIME types'));
+    $this->assertSession()->responseContains(t('Save'));
+    $this->assertSession()->responseContains(t('Delete'));
+    $this->assertSession()->responseContains($edit['label']);
+    $this->assertSession()->pageTextContains($edit['description']);
+    $this->assertSession()->pageTextContains($edit['mimetypes']);
+    $this->assertSession()->pageTextContains(t('Known MIME types'));

     // Modify file type.
     $edit['label'] = t('New type label');
-    $this->drupalPostForm(NULL, array('label' => $edit['label']), t('Save'));
-    $this->assertText(t('The file type @type has been updated.', array('@type' => $edit['label'])));
-    $this->assertText($edit['label']);
+    $this->submitForm(array('label' => $edit['label']), t('Save'));
+    $this->assertSession()->pageTextContains(t('The file type @type has been updated.', array('@type' => $edit['label'])));
+    $this->assertSession()->pageTextContains($edit['label']);

     // Disable and re-enable file type.
     $this->drupalGet('admin/structure/file-types/manage/' . $edit['id'] . '/disable');
-    $this->assertText(t('Are you sure you want to disable the file type @type?', array('@type' => $edit['label'])));
-    $this->drupalPostForm(NULL, array(), t('Disable'));
-    $this->assertText(t('The file type @type has been disabled.', array('@type' => $edit['label'])));
+    $this->assertSession()->pageTextContains(t('Are you sure you want to disable the file type @type?', array('@type' => $edit['label'])));
+    $this->submitForm(array(), t('Disable'));
+    $this->assertSession()->pageTextContains(t('The file type @type has been disabled.', array('@type' => $edit['label'])));
     $this->assertFieldByXPath("//tbody//tr[5]//td[1]", $edit['label']);
-    $this->assertLink(t('Enable'));
-    $this->assertLinkByHref('admin/structure/file-types/manage/' . $edit['id'] . '/enable');
+    $this->assertSession()->linkExists(t('Enable'));
+    $this->assertSession()->linkByHrefExists('admin/structure/file-types/manage/' . $edit['id'] . '/enable');
     $this->drupalGet('admin/structure/file-types/manage/' . $edit['id'] . '/enable');
-    $this->assertText(t('Are you sure you want to enable the file type @type?', array('@type' => $edit['label'])));
-    $this->drupalPostForm(NULL, array(), t('Enable'));
-    $this->assertText(t('The file type @type has been enabled.', array('@type' => $edit['label'])));
+    $this->assertSession()->pageTextContains(t('Are you sure you want to enable the file type @type?', array('@type' => $edit['label'])));
+    $this->submitForm(array(), t('Enable'));
+    $this->assertSession()->pageTextContains(t('The file type @type has been enabled.', array('@type' => $edit['label'])));
     $this->assertFieldByXPath("//tbody//tr[4]//td[1]", $edit['label']);

     // Delete newly created type.
     $this->drupalGet('admin/structure/file-types/manage/' . $edit['id'] . '/delete');
-    $this->assertText(t('Are you sure you want to delete the file type @type?', array('@type' => $edit['label'])));
-    $this->drupalPostForm(NULL, array(), t('Delete'));
-    $this->assertText(t('The file type @type has been deleted.', array('@type' => $edit['label'])));
+    $this->assertSession()->pageTextContains(t('Are you sure you want to delete the file type @type?', array('@type' => $edit['label'])));
+    $this->submitForm(array(), t('Delete'));
+    $this->assertSession()->pageTextContains(t('The file type @type has been deleted.', array('@type' => $edit['label'])));
     $this->drupalGet('admin/structure/file-types');
-    $this->assertNoText($edit['label']);
+    $this->assertSession()->pageTextNotContains($edit['label']);

     // Edit pre-defined file type.
     $this->drupalGet('admin/structure/file-types/manage/image/edit');
-    $this->assertRaw(t('Image'));
-    $this->assertText("image/*");
-    $this->drupalPostForm(NULL, array('label' => t('Funky images')), t('Save'));
-    $this->assertText(t('The file type @type has been updated.', array('@type' => t('Funky images'))));
-    $this->assertText(t('Funky image'));
+    $this->assertSession()->responseContains(t('Image'));
+    $this->assertSession()->pageTextContains("image/*");
+    $this->submitForm(array('label' => t('Funky images')), t('Save'));
+    $this->assertSession()->pageTextContains(t('The file type @type has been updated.', array('@type' => t('Funky images'))));
+    $this->assertSession()->pageTextContains(t('Funky image'));
   }
 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertLinkByHrefRector
 * AssertLinkRector
 * AssertNoTextRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/file_entity/tests/src/Functional/FileEntityTokenTest.php:10

    ---------- begin diff ----------
@@ @@
  */
 class FileEntityTokenTest extends FileEntityTestBase {

-  function setUp() {
+  function setUp(): void {
     parent::setUp();
     $this->setUpFiles();
   }
@@ @@
         $this->assertTrue(preg_match('/^' . $expected . '$/', $values[$token]), t("Token value for [@type:@token] was '@actual', matching regular expression pattern '@expected'.", array('@type' => $type, '@token' => $token, '@actual' => $values[$token], '@expected' => $expected)));
       }
       else {
-        $this->assertIdentical($values[$token], $expected, t("Token value for [@type:@token] was '@actual', expected value '@expected'.", array('@type' => $type, '@token' => $token, '@actual' => $values[$token], '@expected' => $expected)));
+        $this->assertSame($values[$token], $expected, t("Token value for [@type:@token] was '@actual', expected value '@expected'.", array('@type' => $type, '@token' => $token, '@actual' => $values[$token], '@expected' => $expected)));
       }
     }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/file_entity/tests/src/Functional/FileEntityTestBase.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->config = $this->config('file_entity.settings');
   }
@@ @@

     // Save the file and assert success.
     $result = $file->save();
-    $this->assertIdentical(SAVED_NEW, $result, t('The file was added to the database.'), 'Create test file');
+    $this->assertSame(SAVED_NEW, $result, t('The file was added to the database.'), 'Create test file');

     return $file;
   }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/file_entity/tests/src/Functional/FileEntityReplaceTest.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->setUpFiles();
   }
@@ @@

     // Test that the Upload widget appears for a local file.
     $this->drupalGet('file/' . $file->id() . '/edit');
-    $this->assertFieldByName('files[replace_upload]');
+    $this->assertSession()->fieldExists('files[replace_upload]');

     // Test that file saves without uploading a file.
-    $this->drupalPostForm(NULL, array(), t('Save'));
-    $this->assertText(t('@file has been updated.', array('@file' => $file->getFilename()))/*, 'File was updated without file upload.'*/);
+    $this->submitForm(array(), t('Save'));
+    $this->assertSession()->pageTextContains(t('@file has been updated.', array('@file' => $file->getFilename())));

     // Get the next text file to use as a replacement.
     $original = clone $file;
@@ @@
     // Test that the file saves when uploading a replacement file.
     $edit = array();
     $edit['files[replace_upload]'] = \Drupal::service('file_system')->realpath($replacement->getFileUri());
-    $this->drupalPostForm('file/' . $file->id() . '/edit', $edit, t('Save'));
-    $this->assertText(t('@file has been updated.', array('@file' => $file->getFilename()))/*, 'File was updated with file upload.'*/);
+    $this->drupalGet('file/' . $file->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('@file has been updated.', array('@file' => $file->getFilename())));

     // Re-load the file from the database.
     /** @var \Drupal\file\FileInterface $file */
@@ @@
     $file = File::load($file->id());

     // Test how file properties changed after the file has been replaced.
-    $this->assertEqual($file->getFilename(), $original->getFilename(), 'Updated file name did not change.');
-    $this->assertNotEqual($file->getSize(), $original->getSize(), 'Updated file size changed from previous file.');
-    $this->assertEqual($file->getSize(), $replacement->getSize(), 'Updated file size matches uploaded file.');
-    $this->assertEqual(file_get_contents($file->getFileUri()), file_get_contents($replacement->getFileUri()), 'Updated file contents matches uploaded file.');
+    $this->assertEquals($file->getFilename(), $original->getFilename(), 'Updated file name did not change.');
+    $this->assertNotEquals($file->getSize(), $original->getSize(), 'Updated file size changed from previous file.');
+    $this->assertEquals($file->getSize(), $replacement->getSize(), 'Updated file size matches uploaded file.');
+    $this->assertEquals(file_get_contents($file->getFileUri()), file_get_contents($replacement->getFileUri()), 'Updated file contents matches uploaded file.');
     $this->assertEmpty(\Drupal::entityQuery('file')->condition('status', 0)->execute(), 'Temporary file used for replacement was deleted.');

     // Get an image file.
     $image = reset($this->files['image']);
     $edit['files[replace_upload]'] = \Drupal::service('file_system')->realpath($image->getFileUri());
+    $this->drupalGet('file/' . $file->id() . '/edit');

     // Test that validation works by uploading a non-text file as a replacement.
-    $this->drupalPostForm('file/' . $file->id() . '/edit', $edit, t('Save'));
-    $this->assertRaw(t('The specified file %file could not be uploaded.', array('%file' => $image->getFilename())), 'File validation works, upload failed correctly.');
-    $this->assertText('Only files with the following extensions are allowed: txt.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains(t('The specified file %file could not be uploaded.', array('%file' => $image->getFilename())));
+    $this->assertSession()->pageTextContains('Only files with the following extensions are allowed: txt.');

     $replacement = next($this->files['text']);

@@ @@
     // Test the file upload.
     $edit = array();
     $edit['files[replace_upload]'] = \Drupal::service('file_system')->realpath($replacement->getFileUri());
-    $this->drupalPostForm('file/' . $file->id() . '/edit', $edit, t('Upload'));
-    $this->assertText('text-2.txt');
-    $this->drupalPostForm(NULL, array(), t('Save'));
-    $this->assertText(t('@file has been updated.', array('@file' => $file->getFilename()))/*, 'File was updated with file upload.'*/);
+    $this->drupalGet('file/' . $file->id() . '/edit');
+    $this->submitForm($edit, t('Upload'));
+    $this->assertSession()->pageTextContains('text-2.txt');
+    $this->submitForm(array(), t('Save'));
+    $this->assertSession()->pageTextContains(t('@file has been updated.', array('@file' => $file->getFilename())));

     // Create a non-local file record.
     /** @var \Drupal\file\FileInterface $file2 */
@@ @@

     // Test that Upload widget does not appear for non-local file.
     $this->drupalGet('file/' . $file2->id() . '/edit');
-    $this->assertNoFieldByName('files[replace_upload]');
+    $this->assertSession()->fieldValueNotEquals('files[replace_upload]', '');

   }
 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * AssertNotEqualRector
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/file_entity/tests/src/Functional/FileEntityFileTypeClassificationTest.php:69

    ---------- begin diff ----------
@@ @@
     // Existing files have yet to be classified and should have an undefined
     // file type.
     $file_type = $this->getFileType($text_file);
-    $this->assertEqual($file_type['type'], 'undefined', t('The text file has an undefined file type.'));
+    $this->assertEquals($file_type['type'], 'undefined', t('The text file has an undefined file type.'));
     $file_type = $this->getFileType($image_file);
-    $this->assertEqual($file_type['type'], 'undefined', t('The image file has an undefined file type.'));
+    $this->assertEquals($file_type['type'], 'undefined', t('The image file has an undefined file type.'));

     // When editing files before cron has run the bundle should have been
     // updated.
     $account = $this->drupalCreateUser(['bypass file access']);
     $this->drupalLogin($account);
-    $this->assertNotEqual($image_file->bundle(), 'image', 'The image file does not have correct bundle before loading it.');
+    $this->assertNotEquals($image_file->bundle(), 'image', 'The image file does not have correct bundle before loading it.');
     $this->drupalGet('file/' . $image_file->id() . '/edit');
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));
     $image_file = File::load($image_file->id());
-    $this->assertEqual($image_file->bundle(), 'image', 'The image file has correct bundle after load.');
+    $this->assertEquals($image_file->bundle(), 'image', 'The image file has correct bundle after load.');

     // The classification queue is processed during cron runs. Run cron to
     // trigger the classification process.
@@ @@
     // MIME type is assigned to a file type. Check to see if each file was
     // assigned a proper file type.
     $file_type = $this->getFileType($text_file);
-    $this->assertEqual($file_type['type'], 'document', t('The text file was properly assigned the Document file type.'));
+    $this->assertEquals($file_type['type'], 'document', t('The text file was properly assigned the Document file type.'));
     $file_type = $this->getFileType($image_file);
-    $this->assertEqual($file_type['type'], 'image', t('The image file was properly assigned the Image file type.'));
+    $this->assertEquals($file_type['type'], 'image', t('The image file was properly assigned the Image file type.'));

     // Uninstall the file_entity module and ensure that cron can run and files
     // can still be loaded.
     \Drupal::service('module_installer')->uninstall(['file_entity']);
-    $this->assertEqual([], \Drupal::entityDefinitionUpdateManager()->getChangeList());
+    $this->assertEquals([], \Drupal::entityDefinitionUpdateManager()->getChangeList());

     $image_file = File::load($image_file->id());
-    $this->assertEqual(get_class($image_file), File::class);
+    $this->assertEquals(get_class($image_file), File::class);
     $this->cronRun();
     Views::viewsData()->getAll();
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNotEqualRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/file_entity/tests/src/Functional/FileEntityEditTest.php:15

    ---------- begin diff ----------
@@ @@

   public static $modules = ['block'];

-  function setUp() {
+  function setUp(): void {
     parent::setUp();
     // Add the tasks and actions blocks.
     $this->drupalPlaceBlock('local_actions_block');
@@ @@
     // Create file to edit.
     $edit = array();
     $edit['files[upload]'] = \Drupal::service('file_system')->realpath($test_file->uri);
-    $this->drupalPostForm('file/add', $edit, t('Next'));
+    $this->drupalGet('file/add');
+    $this->submitForm($edit, t('Next'));
     if ($this->xpath('//input[@name="scheme"]')) {
-      $this->drupalPostForm(NULL, array(), t('Next'));
+      $this->submitForm(array(), t('Next'));
     }

     // Check that the file exists in the database.
@@ @@
     $this->clickLink(t('Edit'));
     $edit_url = $file->toUrl('edit-form', ['absolute' => TRUE])->toString();
     $actual_url = $this->getURL();
-    $this->assertEqual($edit_url, $actual_url, t('On edit page.'));
+    $this->assertEquals($edit_url, $actual_url, t('On edit page.'));

     // Check that the name field is displayed with the correct value.
     $active = t('(active tab)');
     $link_text = t('@local-task-title<span class="element-invisible">@active</span>', array('@local-task-title' => t('Edit'), '@active' => $active));
-    $this->assertText(strip_tags($link_text), 0, t('Edit tab found and marked active.'));
-    $this->assertFieldByName($name_key, $file->label(), t('Name field displayed.'));
+    $this->assertSession()->pageTextContains(strip_tags($link_text));
+    $this->assertSession()->fieldValueEquals($name_key, $file->label());

     // The user does not have "delete" permissions so no delete button should be found.
-    $this->assertNoFieldByName('op', t('Delete'), 'Delete button not found.');
+    $this->assertSession()->fieldValueNotEquals('op', t('Delete'), 'Delete button not found.');

     // Edit the content of the file.
     $edit = array();
     $edit[$name_key] = $this->randomMachineName(8);
     // Stay on the current page, without reloading.
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Check that the name field is displayed with the updated values.
-    $this->assertText($edit[$name_key], t('Name displayed.'));
+    $this->assertSession()->pageTextContains($edit[$name_key]);
   }

   /**
@@ @@
     $test_file = $this->getTestFile('text');
     $edit = array();
     $edit['files[upload]'] = \Drupal::service('file_system')->realpath($test_file->uri);
-    $this->drupalPostForm('file/add', $edit, t('Next'));
-    $this->drupalPostForm(NULL, array(), t('Next'));
+    $this->drupalGet('file/add');
+    $this->submitForm($edit, t('Next'));
+    $this->submitForm(array(), t('Next'));

     // Check that the file was associated with the currently logged in user.
     $file = $this->getFileByFilename('text-0_0.txt');
-    $this->assertIdentical($file->getOwnerId(), $this->admin_user->id(), 'File associated with admin user.');
+    $this->assertSame($file->getOwnerId(), $this->admin_user->id(), 'File associated with admin user.');

     // Try to change the 'associated user' field to an invalid user name.
     $edit = array(
       'uid[0][target_id]' => 'invalid-name',
     );
-    $this->drupalPostForm('file/' . $file->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('file/' . $file->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
     if (\version_compare(\Drupal::VERSION, '9.2', '<')) {
       $this->assertSession()->pageTextContains('There are no entities matching "invalid-name".');
     }
@@ @@
     // Change the associated user field to the anonymous user (uid 0).
     $edit = array();
     $edit['uid[0][target_id]'] = 'Anonymous (0)';
-    $this->drupalPostForm('file/' . $file->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('file/' . $file->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
     \Drupal::entityTypeManager()->getStorage('file')->resetCache();
     $file = File::load($file->id());
-    $this->assertIdentical($file->getOwnerId(), '0', 'File associated with anonymous user.');
+    $this->assertSame($file->getOwnerId(), '0', 'File associated with anonymous user.');

     // Change the associated user field to another user's name (that is not
     // logged in).
     $edit = array();
     $edit['uid[0][target_id]'] = $this->web_user->label();
-    $this->drupalPostForm('file/' . $file->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('file/' . $file->id() . '/edit');
+    $this->submitForm($edit, t('Save'));
     \Drupal::entityTypeManager()->getStorage('file')->resetCache();
     $file = File::load($file->id());
-    $this->assertIdentical($file->getOwnerId(), $this->web_user->id(), 'File associated with normal user.');
+    $this->assertSame($file->getOwnerId(), $this->web_user->id(), 'File associated with normal user.');

     // Check that normal users cannot change the associated user information.
     $this->drupalLogin($this->web_user);
     $this->drupalGet('file/' . $file->id() . '/edit');
-    $this->assertNoFieldByName('uid[0][target_id]');
+    $this->assertSession()->fieldValueNotEquals('uid[0][target_id]', '');
   }
 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertIdenticalRector
 * AssertNoFieldByNameRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/file_entity/tests/src/Functional/FileEntityCreationTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $web_user = $this->drupalCreateUser(array('create files',
@@ @@
     // Create a file.
     $edit = array();
     $edit['files[upload]'] = \Drupal::service('file_system')->realpath($test_file->uri);
-    $this->drupalPostForm('file/add', $edit, t('Next'));
+    $this->drupalGet('file/add');
+    $this->submitForm($edit, t('Next'));

     // Check that the document file has been uploaded.
-    $this->assertRaw(t('@type %name was uploaded.', array('@type' => 'Document', '%name' => 'text-0_0.txt')), t('Document file uploaded.'));
+    $this->assertSession()->responseContains(t('@type %name was uploaded.', array('@type' => 'Document', '%name' => 'text-0_0.txt')));

     // Check that the file exists in the database.
     $file = $this->getFileByFilename('text-0_0.txt');
@@ @@
     $edit['files[upload]'] = \Drupal::service('file_system')->realpath($test_file->uri);
     $this->drupalGet('file/add');
     $this->assertEmpty($this->xpath('//input[@id="edit-upload-remove-button"]'), 'Remove');
-    $this->drupalPostForm(NULL, $edit, t('Next'));
+    $this->submitForm($edit, t('Next'));

     // Check if your on form step 2, scheme selecting.
     // At this point it should not skip this form.
@@ @@
     $this->assertNotEmpty($this->xpath('//input[@name="scheme"]'), "Loaded select destination scheme page.");

     // Test if the public radio button is selected by default.
-    $this->assertFieldChecked('edit-scheme-public', 'Public Scheme is checked');
+    $this->assertSession()->checkboxChecked('edit-scheme-public', 'Public Scheme is checked');

     // Submit form and set scheme to private.
     $edit = array();
     $edit['scheme'] = 'private';
-    $this->drupalPostForm(NULL, $edit, t('Next'));
+    $this->submitForm($edit, t('Next'));

     // Check that the document file has been uploaded.
-    $this->assertRaw(t('@type %name was uploaded.', array('@type' => 'Document', '%name' => 'text-0_0.txt')), t('Document file uploaded.'));
+    $this->assertSession()->responseContains(t('@type %name was uploaded.', array('@type' => 'Document', '%name' => 'text-0_0.txt')));

     // Check that the file exists in the database.
     $file = $this->getFileByFilename('text-0_0.txt');
@@ @@
     // Create an image.
     $test_file = $this->getTestFile('image');
     $edit = array('files[upload]' => \Drupal::service('file_system')->realpath($test_file->uri));
-    $this->drupalPostForm('file/add', $edit, t('Next'));
+    $this->drupalGet('file/add');
+    $this->submitForm($edit, t('Next'));

     $data = array(
       'field_image_title_text' => 'My image',
@@ @@
     foreach ($data as $field => $value) {
       $edit[$field . '[0][value]'] = $value;
     }
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $file = $this->getFileByFilename('image-test_0.png');
     $this->drupalGet('file/' . $file->id());
-    $this->assertRaw('alt="A test image"', 'Alt attribute is shown and has the correct value.');
-    $this->assertRaw('title="My image"', 'Title attribute is shown and has the correct value.');
+    $this->assertSession()->responseContains('alt="A test image"');
+    $this->assertSession()->responseContains('title="My image"');

     // Make sure the field values are saved.
     $created_file = FileEntity::load(1)->getTranslation(LanguageInterface::LANGCODE_DEFAULT);
     foreach ($data as $field => $value) {
-      $this->assertEqual($value, $created_file->get($field)->value);
+      $this->assertEquals($value, $created_file->get($field)->value);
     }
   }

@@ @@
       'remove_archive' => TRUE,
     ];
     $this->drupalGet('admin/content/files/archive');
-    $this->drupalPostForm(NULL, $edit, t('Submit'));
+    $this->submitForm($edit, t('Submit'));

-    $this->assertText('Extracted archive.tar.gz and added 1 new files.');
+    $this->assertSession()->pageTextContains('Extracted archive.tar.gz and added 1 new files.');

     $this->assertTrue($file = !empty($file_storage->loadByProperties(['filename' => 'test_jpg.jpg'])), "File that matches the pattern can be found in the database.");
     $this->assertTrue($file ? $this->getFileByFilename('test_jpg.jpg')->isPermanent() : FALSE, "File that matches the pattern is permanent.");
@@ @@
       'remove_archive' => FALSE,
     ];
     $this->drupalGet('admin/content/files/archive');
-    $this->drupalPostForm(NULL, $edit, t('Submit'));
+    $this->submitForm($edit, t('Submit'));

     $this->assertTrue($file = !empty($file_storage->loadByProperties(['filename' => 'archive2.tar.gz'])), "Archive is in the database since value for remove_checkbox is FALSE.");
     $this->assertTrue($file ? $this->getFileByFilename('archive2.tar.gz')->isPermanent() : FALSE, "Archive is permanent since value for remove_checkbox is FALSE.");
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldCheckedRector
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/file_entity/tests/src/Functional/FileEntityCacheTagsTest.php:25

    ---------- begin diff ----------
@@ @@

   protected $adminUser;

-  function setUp() {
+  function setUp(): void {
     parent::setUp();

     $this->enablePageCaching();
@@ @@
   protected function verifyPageCache(Url $url, $hit_or_miss, $tags = FALSE) {
     $this->drupalGet($url);
     $message = new FormattableMarkup('Page cache @hit_or_miss for %path.', array('@hit_or_miss' => $hit_or_miss, '%path' => $url->toString()));
-    $this->assertEqual($this->drupalGetHeader('X-Drupal-Cache'), $hit_or_miss, $message);
+    $this->assertEquals($this->drupalGetHeader('X-Drupal-Cache'), $hit_or_miss, $message);
     if ($hit_or_miss === 'HIT' && is_array($tags)) {
       $absolute_url = $url->setAbsolute()->toString();
       $cid_parts = array($absolute_url, 'html');
@@ @@
       sort($cache_entry->tags);
       $tags = array_unique($tags);
       sort($tags);
-      $this->assertIdentical($cache_entry->tags, $tags);
+      $this->assertSame($cache_entry->tags, $tags);
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/file_entity/tests/src/Functional/FileEntityAdminTest.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // Add the tasks and actions blocks.
     $this->drupalPlaceBlock('local_actions_block');
@@ @@
     foreach ($list as $entry) {
       $entries[] = trim((string) $entry->getText());
     }
-    $this->assertEqual($files_query, $entries, 'Files are sorted in the view according to the default query.');
+    $this->assertEquals($files_query, $entries, 'Files are sorted in the view according to the default query.');

     // Compare the rendered HTML node list to a query for the files ordered by
     // filename to account for possible database-dependent sort order.
@@ @@
     foreach ($list as $entry) {
       $entries[] = trim((string) $entry->getText());
     }
-    $this->assertEqual($files_query, $entries, 'Files are sorted in the view the same as they are in the query.');
+    $this->assertEquals($files_query, $entries, 'Files are sorted in the view the same as they are in the query.');
   }

   /**
@@ @@

     // Verify view, edit, and delete links for any file.
     $this->drupalGet('admin/content/files');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $i = 0;
     foreach ($files as $file) {
-      $this->assertLinkByHref('file/' . $file->id());
-      $this->assertLinkByHref('file/' . $file->id() . '/edit');
-      $this->assertLinkByHref('file/' . $file->id() . '/delete');
+      $this->assertSession()->linkByHrefExists('file/' . $file->id());
+      $this->assertSession()->linkByHrefExists('file/' . $file->id() . '/edit');
+      $this->assertSession()->linkByHrefExists('file/' . $file->id() . '/delete');
       // Verify tableselect.
-      $this->assertFieldByName("bulk_form[$i]", NULL, 'Bulk form checkbox found.');
+      $this->assertSession()->fieldExists("bulk_form[$i]");
     }

     // Verify no operation links beside download are displayed for regular
@@ @@
     $this->drupalLogout();
     $this->drupalLogin($this->userBasic);
     $this->drupalGet('admin/content/files');
-    $this->assertResponse(200);
-    $this->assertLinkByHref('file/' . $files['public_image']->id());
-    $this->assertLinkByHref('file/' . $files['public_document']->id());
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->linkByHrefExists('file/' . $files['public_image']->id());
+    $this->assertSession()->linkByHrefExists('file/' . $files['public_document']->id());
     // Download access of public files is always allowed.
-    $this->assertLinkByHref('file/' . $files['public_document']->id() . '/download');
-    $this->assertLinkByHref('file/' . $files['public_document']->id() . '/download');
-    $this->assertNoLinkByHref('file/' . $files['public_image']->id() . '/edit');
-    $this->assertNoLinkByHref('file/' . $files['public_image']->id() . '/delete');
-    $this->assertNoLinkByHref('file/' . $files['public_document']->id() . '/edit');
-    $this->assertNoLinkByHref('file/' . $files['public_document']->id() . '/delete');
+    $this->assertSession()->linkByHrefExists('file/' . $files['public_document']->id() . '/download');
+    $this->assertSession()->linkByHrefExists('file/' . $files['public_document']->id() . '/download');
+    $this->assertSession()->linkByHrefNotExists('file/' . $files['public_image']->id() . '/edit');
+    $this->assertSession()->linkByHrefNotExists('file/' . $files['public_image']->id() . '/delete');
+    $this->assertSession()->linkByHrefNotExists('file/' . $files['public_document']->id() . '/edit');
+    $this->assertSession()->linkByHrefNotExists('file/' . $files['public_document']->id() . '/delete');

     // Verify no tableselect.
     // @todo Drupal 8 always shows bulk selection, test specific actions
@@ @@
     $this->drupalLogout();
     $this->drupalLogin($this->userViewOwn);
     $this->drupalGet('admin/content/files');
-    $this->assertResponse(200);
-    $this->assertLinkByHref($files['private_document']->toUrl()->toString());
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->linkByHrefExists($files['private_document']->toUrl()->toString());
     // Verify no operation links are displayed.
     $this->drupalGet($files['private_document']->toUrl('edit-form'));
-    $this->assertResponse(403, 'User doesn\'t have permission to edit files');
+    $this->assertSession()->statusCodeEquals(403, 'User doesn\'t have permission to edit files');
     $this->drupalGet($files['private_document']->toUrl('delete-form'));
-    $this->assertResponse(403, 'User doesn\'t have permission to delete files');
+    $this->assertSession()->statusCodeEquals(403, 'User doesn\'t have permission to delete files');

     // Verify user cannot see private file of other users.
-    $this->assertNoLinkByHref($files['private_image']->toUrl()->toString());
-    $this->assertNoLinkByHref($files['private_image']->toUrl('edit-form')->toString());
-    $this->assertNoLinkByHref($files['private_image']->toUrl('delete-form')->toString());
-    $this->assertNoLinkByHref($files['private_image']->downloadUrl()->toString());
+    $this->assertSession()->linkByHrefNotExists($files['private_image']->toUrl()->toString());
+    $this->assertSession()->linkByHrefNotExists($files['private_image']->toUrl('edit-form')->toString());
+    $this->assertSession()->linkByHrefNotExists($files['private_image']->toUrl('delete-form')->toString());
+    $this->assertSession()->linkByHrefNotExists($files['private_image']->downloadUrl()->toString());

     // Verify no tableselect.
-    $this->assertNoFieldByName('bulk_form[' . $files['private_document']->id() . ']', '', 'No bulk form checkbox found.');
+    $this->assertSession()->fieldValueNotEquals('bulk_form[' . $files['private_document']->id() . ']', '', 'No bulk form checkbox found.');

     // Verify private file is displayed with permission.
     $this->drupalLogout();
     $this->drupalLogin($this->userViewPrivate);
     $this->drupalGet('admin/content/files');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Verify user can see private file of other users.
-    $this->assertLinkByHref('file/' . $files['private_document']->id());
-    $this->assertLinkByHref('file/' . $files['private_image']->id());
+    $this->assertSession()->linkByHrefExists('file/' . $files['private_document']->id());
+    $this->assertSession()->linkByHrefExists('file/' . $files['private_image']->id());

     // Verify operation links are displayed for users with appropriate
     // permission.
@@ @@
     $this->drupalLogout();
     $this->drupalLogin($this->userEditDelete);
     $this->drupalGet('admin/content/files');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     foreach ($files as $file) {
-      $this->assertLinkByHref('file/' . $file->id());
-      $this->assertLinkByHref('file/' . $file->id() . '/edit');
-      $this->assertLinkByHref('file/' . $file->id() . '/delete');
-      $this->assertLinkByHref('file/' . $file->id() . '/delete');
+      $this->assertSession()->linkByHrefExists('file/' . $file->id());
+      $this->assertSession()->linkByHrefExists('file/' . $file->id() . '/edit');
+      $this->assertSession()->linkByHrefExists('file/' . $file->id() . '/delete');
+      $this->assertSession()->linkByHrefExists('file/' . $file->id() . '/delete');
     }

     // Verify file access can be bypassed.
@@ @@
     $this->drupalLogout();
     $this->drupalLogin($this->userAdmin);
     $this->drupalGet('admin/content/files');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     foreach ($files as $file) {
-      $this->assertLinkByHref('file/' . $file->id());
-      $this->assertLinkByHref('file/' . $file->id() . '/edit');
-      $this->assertLinkByHref('file/' . $file->id() . '/delete');
-      $this->assertLinkByHref('file/' . $file->id() . '/download');
+      $this->assertSession()->linkByHrefExists('file/' . $file->id());
+      $this->assertSession()->linkByHrefExists('file/' . $file->id() . '/edit');
+      $this->assertSession()->linkByHrefExists('file/' . $file->id() . '/delete');
+      $this->assertSession()->linkByHrefExists('file/' . $file->id() . '/download');
     }
   }

@@ @@

     // Test single operations.
     $this->drupalGet('admin/content/files');
-    $this->assertLinkByHref('file/1/delete');
-    $this->assertLinkByHref('file/2/delete');
+    $this->assertSession()->linkByHrefExists('file/1/delete');
+    $this->assertSession()->linkByHrefExists('file/2/delete');
     $this->drupalGet('file/1/delete');
-    $this->assertTitle(t('Are you sure you want to delete the file @filename? | Drupal', array('@filename' => FileEntity::load(1)->label())));
-    $this->drupalPostForm(NULL, array(), 'Delete');
-    $this->assertNoLinkByHref('file/1/delete');
-    $this->assertLinkByHref('file/2/delete');
+    $this->assertSession()->titleEquals(t('Are you sure you want to delete the file @filename? | Drupal', array('@filename' => FileEntity::load(1)->label())));
+    $this->submitForm(array(), 'Delete');
+    $this->assertSession()->linkByHrefNotExists('file/1/delete');
+    $this->assertSession()->linkByHrefExists('file/2/delete');

     // Test bulk status change.
     // The "first" file now has id 2, but bulk form fields start counting at 0.
@@ @@
       'bulk_form[1]' => 1,
       'bulk_form[2]' => 1,
     );
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
+    $this->submitForm($edit, 'Apply to selected items');

     \Drupal::entityTypeManager()->getStorage('file')->resetCache();
     $this->assertFalse(FileEntity::load(2)->isPermanent());
@@ @@
       'bulk_form[0]' => 1,
       'bulk_form[1]' => 1,
     );
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
+    $this->submitForm($edit, 'Apply to selected items');

     \Drupal::entityTypeManager()->getStorage('file')->resetCache();
     $this->assertTrue(FileEntity::load(2)->isPermanent());
@@ @@
       'bulk_form[0]' => 1,
       'bulk_form[1]' => 1,
     );
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
-    $this->assertTitle(t('Are you sure you want to delete these files? | Drupal'));
-    $this->assertLink('Cancel');
-    $this->drupalPostForm(NULL, array(), 'Delete');
+    $this->submitForm($edit, 'Apply to selected items');
+    $this->assertSession()->titleEquals(t('Are you sure you want to delete these files? | Drupal'));
+    $this->assertSession()->linkExists('Cancel');
+    $this->submitForm(array(), 'Delete');

     \Drupal::entityTypeManager()->getStorage('file')->resetCache();
     $this->assertNull(FileEntity::load(2), 'File 2 is deleted.');
@@ @@

     // Check the usage links on the file overview.
     $this->drupalGet('admin/content/files');
-    $this->assertLink('0 places');
-    $this->assertNoLink('1 place');
+    $this->assertSession()->linkExists('0 places');
+    $this->assertSession()->linkNotExists('1 place');

     // Check the usage view.
     $this->clickLink('0 places');
-    $this->assertText('This file is not currently used.');
+    $this->assertSession()->pageTextContains('This file is not currently used.');

     // Attach a file field to article nodes.
     $content_type = $this->drupalCreateContentType();
@@ @@

     // Check that the usage link is updated.
     $this->drupalGet('admin/content/files');
-    $this->assertLink('1 place');
+    $this->assertSession()->linkExists('1 place');

     // Check that the using node shows up on the usage view.
     $this->clickLink('1 place');
-    $this->assertLink('An article that uses a file');
+    $this->assertSession()->linkExists('An article that uses a file');

     // Check local tasks.
     $this->clickLink('View');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->clickLink('Usage');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }
 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertLinkByHrefRector
 * AssertLinkRector
 * AssertNoFieldByNameRector
 * AssertNoLinkByHrefRector
 * AssertNoLinkRector
 * AssertResponseRector
 * AssertTextRector
 * AssertTitleRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/file_entity/tests/src/Functional/FileEntityAccessTest.php:27

    ---------- begin diff ----------
@@ @@
    */
   protected $accessControlHandler;

-  function setUp() {
+  function setUp(): void {
     parent::setUp();
     $this->setUpFiles(array('uid' => 0));
     $this->accessControlHandler = $this->container->get('entity_type.manager')->getAccessControlHandler('file');
@@ @@
   function assertFileEntityAccess($ops, $file, $account) {
     $this->accessControlHandler->resetCache();
     foreach ($ops as $op => $expected) {
-      $this->assertEqual(
-        $expected,
-        $op === 'create' ?
-          $this->accessControlHandler->createAccess($file, $account) :
-          $this->accessControlHandler->access($file, $op, $account)
-      );
+      $this->assertEquals($expected, $op === 'create' ?
+        $this->accessControlHandler->createAccess($file, $account) :
+        $this->accessControlHandler->access($file, $op, $account));
     }
   }

@@ @@
     $web_user = $this->drupalCreateUser(array());
     $this->drupalLogin($web_user);
     $this->drupalGet('file/add');
-    $this->assertResponse(403, 'Users without access can not access the file add page');
+    $this->assertSession()->statusCodeEquals(403, 'Users without access can not access the file add page');
     $web_user = $this->drupalCreateUser(array('create files'));
     $this->drupalLogin($web_user);
     $this->drupalGet('file/add');
-    $this->assertResponse(200, 'Users with access can access the file add page');
+    $this->assertSession()->statusCodeEquals(200, 'Users with access can access the file add page');

     $file = reset($this->files['text']);

@@ @@
     $web_user = $this->drupalCreateUser(array('view own files'));
     $this->drupalLogin($web_user);
     $this->drupalGet("file/{$file->id()}");
-    $this->assertResponse(403, 'Users without access can not access the file view page');
+    $this->assertSession()->statusCodeEquals(403, 'Users without access can not access the file view page');
     $web_user = $this->drupalCreateUser(array('view files'));
     $this->drupalLogin($web_user);
     $this->drupalGet("file/{$file->id()}");
-    $this->assertResponse(200, 'Users with access can access the file view page');
+    $this->assertSession()->statusCodeEquals(200, 'Users with access can access the file view page');

     $url = "file/{$file->id()}/download";
     $web_user = $this->drupalCreateUser(array());
@@ @@
     $web_user = $this->drupalCreateUser(array('download any document files'));
     $this->drupalLogin($web_user);
     $this->drupalGet($url, array('query' => array('token' => $file->getDownloadToken())));
-    $this->assertResponse(200, 'Users with access can download the file');
+    $this->assertSession()->statusCodeEquals(200, 'Users with access can download the file');
     $this->drupalGet($url, array('query' => array('token' => 'invalid-token')));
-    $this->assertResponse(403, 'Cannot download file with in invalid token.');
+    $this->assertSession()->statusCodeEquals(403, 'Cannot download file with in invalid token.');
     $this->drupalGet($url);
-    $this->assertResponse(403, 'Cannot download file without a token.');
+    $this->assertSession()->statusCodeEquals(403, 'Cannot download file without a token.');
     $this->config->set('allow_insecure_download', TRUE)->save();
     $this->drupalGet($url);
-    $this->assertResponse(200, 'Users with access can download the file without a token when allow_insecure_download is set.');
+    $this->assertSession()->statusCodeEquals(200, 'Users with access can download the file without a token when allow_insecure_download is set.');

     $web_user = $this->drupalCreateUser(array());
     $this->drupalLogin($web_user);
     $this->drupalGet("file/{$file->id()}/edit");
-    $this->assertResponse(403, 'Users without access can not access the file edit page');
+    $this->assertSession()->statusCodeEquals(403, 'Users without access can not access the file edit page');
     $web_user = $this->drupalCreateUser(array('edit any document files'));
     $this->drupalLogin($web_user);
     $this->drupalGet("file/{$file->id()}/edit");
-    $this->assertResponse(200, 'Users with access can access the file edit page');
+    $this->assertSession()->statusCodeEquals(200, 'Users with access can access the file edit page');

     $web_user = $this->drupalCreateUser(array());
     $this->drupalLogin($web_user);
     $this->drupalGet("file/{$file->id()}/delete");
-    $this->assertResponse(403, 'Users without access can not access the file delete page');
+    $this->assertSession()->statusCodeEquals(403, 'Users without access can not access the file delete page');
     $web_user = $this->drupalCreateUser(array('delete any document files'));
     $this->drupalLogin($web_user);
     $this->drupalGet("file/{$file->id()}/delete");
-    $this->assertResponse(200, 'Users with access can access the file delete page');
+    $this->assertSession()->statusCodeEquals(200, 'Users with access can access the file delete page');
   }

   /**
@@ @@

     foreach ($this->getPrivateDownloadAccessCases() as $case) {
       /** @var FileInterface $file */
-      $file = file_copy($original_file, 'private://');
+      $file = \Drupal::service('file.repository')->copy($original_file, 'private://');
       $user_name = 'anonymous';

       // Create users and login only if non-anonymous.
@@ @@
         '%uri' => $file->getFileUri(),
       );
       $this->assertTrue(is_file($file->getFileUri()), new FormattableMarkup('File %name owned by %username successfully created at %uri.', $arguments));
-      $url = file_create_url($file->getFileUri());
+      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
       $message_file_info = ' ' . new FormattableMarkup('File %uri was checked.', array('%uri' => $file->getFileUri()));

       // Try to download the file.
       $this->drupalGet($url);
-      $this->assertResponse($case['expect'], $case['message'] . $message_file_info);
+      $this->assertSession()->statusCodeEquals($case['expect'], $case['message'] . $message_file_info);

       // Logout authenticated users.
       if ($authenticated_user) {
@@ @@
     $image = current($this->files['image']);

     // Use a private file to check download access.
-    $image = \file_copy($image, 'private://' . $image->getFilename());
+    $image = \Drupal::service('file.repository')->copy($image, 'private://' . $image->getFilename());

     $node = Node::create([
       'title' => 'Title',
@@ @@
     $node->save();
     $this->drupalGet('node/' . $node->id());

-    $this->assertRaw('file/' . $image->id() . '/download', 'Download link available.');
-    $this->assertLink('Download image-test.png');
+    $this->assertSession()->responseContains('file/' . $image->id() . '/download');
+    $this->assertSession()->linkExists('Download image-test.png');

     $this->drupalLogout();
     $this->drupalGet('node/' . $node->id());
-    $this->assertText("You don't have access to download this file.", 'No access message displays correctly.');
+    $this->assertSession()->pageTextContains("You don't have access to download this file.");
     $view_display->setComponent('image', [
       'type' => 'file_download_link',
       'settings' => [
@@ @@
       ],
     ])->save();
     $this->drupalGet('node/' . $node->id());
-    $this->assertText('Another message.', 'No access message updated.');
+    $this->assertSession()->pageTextContains('Another message.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertLinkRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * FileCopyRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 18 files have been changed by Rector                                      

