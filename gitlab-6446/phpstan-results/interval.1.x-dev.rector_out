modules/contrib/interval/tests/src/Functional/IntervalTest.php
modules/contrib/interval/interval.module
modules/contrib/interval/interval.rules.inc
modules/contrib/interval/src/Element/Interval.php
modules/contrib/interval/src/IntervalBase.php
modules/contrib/interval/src/IntervalInterface.php
modules/contrib/interval/src/IntervalItemInterface.php
modules/contrib/interval/src/IntervalPluginManager.php
modules/contrib/interval/src/IntervalPluginManagerInterface.php
modules/contrib/interval/src/InvalidIntervalException.php
modules/contrib/interval/src/Plugin/Field/FieldFormatter/IntervalFormatterBase.php
modules/contrib/interval/src/Plugin/Field/FieldFormatter/IntervalFormatterDefault.php
modules/contrib/interval/src/Plugin/Field/FieldFormatter/IntervalFormatterPhp.php
modules/contrib/interval/src/Plugin/Field/FieldFormatter/IntervalFormatterRaw.php
modules/contrib/interval/src/Plugin/Field/FieldType/IntervalItem.php
modules/contrib/interval/src/Plugin/Field/FieldWidget/IntervalWidget.php
modules/contrib/interval/tests/src/Kernel/IntervalItemTest.php

2 files with changes
====================

1) modules/contrib/interval/tests/src/Kernel/IntervalItemTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * @inheritDoc
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a field with settings to validate.
@@ @@
     $this->entityValidateAndSave($entity);

     // Verify initial field value
-    $this->assertEqual($entity->field_interval->interval, $value['interval']);
-    $this->assertEqual($entity->field_interval->period, $value['period']);
-    $this->assertEqual($entity->get('field_interval')->first()->buildPHPString(), '30 minutes');
+    $this->assertEquals($entity->field_interval->interval, $value['interval']);
+    $this->assertEquals($entity->field_interval->period, $value['period']);
+    $this->assertEquals($entity->get('field_interval')->first()->buildPHPString(), '30 minutes');

     // Verify changing the date value.
     $new_value = ['interval' => 2, 'period' => 'hour'];
     $entity->field_interval = $new_value;
-    $this->assertEqual($entity->field_interval->interval, $new_value['interval']);
-    $this->assertEqual($entity->field_interval->period, $new_value['period']);
-    $this->assertEqual($entity->get('field_interval')->first()->buildPHPString(), '2 hours');
+    $this->assertEquals($entity->field_interval->interval, $new_value['interval']);
+    $this->assertEquals($entity->field_interval->period, $new_value['period']);
+    $this->assertEquals($entity->get('field_interval')->first()->buildPHPString(), '2 hours');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/interval/tests/src/Functional/IntervalTest.php:56

    ---------- begin diff ----------
@@ @@
   /**
    * Sets the test up.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser($this->permissions);
   }
@@ @@
       'field_name' => 'foobar',
       'new_storage_type' => 'interval',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save and continue'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm($edit, t('Save and continue'));
+    $this->submitForm([
       'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,
     ], t('Save field settings'));

-    $this->drupalPostForm(NULL, [], t('Save settings'));
-    $this->assertRaw(t('Saved %name configuration', ['%name' => 'Foobar']));
+    $this->submitForm([], t('Save settings'));
+    $this->assertSession()->responseContains(t('Saved %name configuration', ['%name' => 'Foobar']));

     // Setup widget and formatters.
     EntityFormDisplay::load('entity_test.entity_test.default')
@@ @@

     // Test the fields values/widget.
     $this->drupalGet('entity_test/add');
-    $this->assertField('field_foobar[0][interval]', 'Found foobar field interval');
-    $this->assertField('field_foobar[0][period]', 'Found foobar field period');
+    $this->assertSession()->fieldExists('field_foobar[0][interval]', 'Found foobar field interval');
+    $this->assertSession()->fieldExists('field_foobar[0][period]', 'Found foobar field period');

     // Add some extra fields.
     $button = $this->getSession()->getPage()->findButton('Add another item');
@@ @@
       'user_id[0][target_id]' => 'foo (' . $this->adminUser->id() . ')',
     ];

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->resetAll();
     $entities = \Drupal::entityTypeManager()->getStorage('entity_test')->loadByProperties([
       'name' => 'Barfoo',
     ]);
-    $this->assertEqual(1, count($entities), 'Entity was saved');
+    $this->assertEquals(1, count($entities), 'Entity was saved');
     $entity = reset($entities);
     $this->drupalGet('entity_test/' . $entity->id());
-    $this->assertText('Barfoo');
-    $this->assertText('1 Week');
-    $this->assertText('3 Days');
-    $this->assertText('1 Quarter');
+    $this->assertSession()->pageTextContains('Barfoo');
+    $this->assertSession()->pageTextContains('1 Week');
+    $this->assertSession()->pageTextContains('3 Days');
+    $this->assertSession()->pageTextContains('1 Quarter');

     // Change the formatter to raw.
     EntityViewDisplay::load('entity_test.entity_test.default')
@@ @@
       ])
       ->save();
     $this->drupalGet('entity_test/' . $entity->id());
-    $this->assertText('1 Week');
-    $this->assertText('3 Days');
-    $this->assertText('1 Quarter');
+    $this->assertSession()->pageTextContains('1 Week');
+    $this->assertSession()->pageTextContains('3 Days');
+    $this->assertSession()->pageTextContains('1 Quarter');

     // Change the formatter to php.
     EntityViewDisplay::load('entity_test.entity_test.default')
@@ @@
       ])
       ->save();
     $this->drupalGet('entity_test/' . $entity->id());
-    $this->assertText('7 days');
-    $this->assertText('3 days');
-    $this->assertText('3 months');
+    $this->assertSession()->pageTextContains('7 days');
+    $this->assertSession()->pageTextContains('3 days');
+    $this->assertSession()->pageTextContains('3 months');

     $this->drupalGet('entity_test/manage/' . $entity->id() . '/edit');
     $edit = [
@@ @@
       // Remove one child.
       'field_foobar[2][interval]' => '',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->drupalGet('entity_test/' . $entity->id());
-    $this->assertText('Bazbar');
+    $this->assertSession()->pageTextContains('Bazbar');
     // Reload entity.
     \Drupal::entityTypeManager()->getStorage('entity_test')->resetCache([$entity->id()]);
     $entity = \Drupal::entityTypeManager()->getStorage('entity_test')->load($entity->id());
-    $this->assertEqual(count($entity->field_foobar), 2, 'Two values in field');
+    $this->assertEquals(count($entity->field_foobar), 2, 'Two values in field');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldRector
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 2 files have been changed by Rector                                       

