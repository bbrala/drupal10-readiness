modules/contrib/media_pixabay/media_pixabay.module
modules/contrib/media_pixabay/src/Api/PixabayApiService.php
modules/contrib/media_pixabay/src/Api/PixabayApiServiceInterface.php
modules/contrib/media_pixabay/src/Form/PixabayApiConfigForm.php
modules/contrib/media_pixabay/src/Plugin/EntityBrowser/Widget/Pixabay.php
modules/contrib/media_pixabay/tests/modules/media_pixabay_test/src/Api/PixabayApiService.php
modules/contrib/media_pixabay/tests/src/Functional/MediaPixabayApiKeyConfigurationTest.php
modules/contrib/media_pixabay/tests/src/FunctionalJavascript/MediaPixabayWidgetTest.php

2 files with changes
====================

1) modules/contrib/media_pixabay/tests/src/FunctionalJavascript/MediaPixabayWidgetTest.php:77

    ---------- begin diff ----------
@@ @@
    * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
    * @throws \Drupal\Core\Entity\EntityStorageException
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser([
       'administer pixabay settings',
@@ @@
     // Test unsuccessful form submission (extensions validation).
     $uuid = $this->addPixabayWidget($webAssert);
     $this->selectMediaType($webAssert, $uuid);
-    $this->drupalPostForm(NULL, ["table[$uuid][form][extensions]" => 'docx'], 'Save');
+    $this->submitForm(["table[$uuid][form][extensions]" => 'docx'], 'Save');
     $webAssert->responseContains('The allowed extensions on this widget do not match those that are allowed on the media type test, they might have been changed.
            Try saving the configuration again.');

@@ @@

     // There should be no widgets now.
     $this->assertSession()->elementNotExists('css', 'tr.draggable');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');

     // Test the media type select ajax callback, which fills the extensions
     // field with the allowed extensions configured in the selected media type.
@@ @@
       ->load('media.test.' . $mediaTypeLoaded->getSource()->getConfiguration()['source_field']);
     $extensions = $fieldInstance->get('settings')['file_extensions'];
     $webAssert->fieldValueEquals("table[$uuid][form][extensions]", $extensions);
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $webAssert->responseContains('The entity browser <em class="placeholder">Test entity browser</em> has been updated.');
     $webAssert->fieldExists("table[$uuid][form][extensions]")->setValue('jpg');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $webAssert->responseContains('The entity browser <em class="placeholder">Test entity browser</em> has been updated.');
     $webAssert->fieldValueEquals("table[$uuid][form][extensions]", 'jpg');

@@ @@
     $this->drupalGet('/entity-browser/modal/test_entity_browser');

     // Test if the widget tab is active and has the correct name.
-    $this->assertEqual($webAssert->elementExists('css', 'nav.eb-tabs a')
+    $this->assertEquals($webAssert->elementExists('css', 'nav.eb-tabs a')
       ->getAttribute('class'), 'is-active active');
     $webAssert->elementContains('css', 'nav.eb-tabs a', 'pixabay');

@@ @@
     // Test if all elements exists with the correct attributes.
     $webAssert->elementExists('css', '#pixabay-wrapper');
     $pixabayLogoImage = $webAssert->elementExists('css', '.pixabay-logo-widget img');
-    $this->assertEqual($pixabayLogoImage->getAttribute('alt'), 'Pixabay');
-    $this->assertEqual($pixabayLogoImage->getAttribute('src'), 'https://pixabay.com/static/img/public/leaderboard_a.png');
+    $this->assertEquals($pixabayLogoImage->getAttribute('alt'), 'Pixabay');
+    $this->assertEquals($pixabayLogoImage->getAttribute('src'), 'https://pixabay.com/static/img/public/leaderboard_a.png');
     $pixabayLogoImageLink = $webAssert->elementExists('css', '.pixabay-logo-widget a');
-    $this->assertEqual($pixabayLogoImageLink->getAttribute('href'), 'https://pixabay.com/');
-    $this->assertEqual($pixabayLogoImageLink->getAttribute('target'), '_blank');
+    $this->assertEquals($pixabayLogoImageLink->getAttribute('href'), 'https://pixabay.com/');
+    $this->assertEquals($pixabayLogoImageLink->getAttribute('target'), '_blank');
     $webAssert->responseContains('Pixabay search');
-    $this->assertEqual($webAssert->fieldExists('search_key')->getAttribute('placeholder'), 'Enter search terms...');
+    $this->assertEquals($webAssert->fieldExists('search_key')->getAttribute('placeholder'), 'Enter search terms...');

     // Test empty search API key submit.
-    $this->drupalPostForm(NULL, [], 'Pixabay search');
+    $this->submitForm([], 'Pixabay search');
     $webAssert->responseContains('Please configure your Pixabay API search key.');
+    $this->drupalGet('admin/config/media/pixabay');

     // Test empty search term submit.
-    $this->drupalPostForm('admin/config/media/pixabay', ['media_pixabay_api' => 'not-empty-string'], 'Save configuration');
+    $this->submitForm(['media_pixabay_api' => 'not-empty-string'], 'Save configuration');
     $this->drupalGet('/entity-browser/modal/test_entity_browser');
-    $this->drupalPostForm(NULL, [], 'Pixabay search');
+    $this->submitForm([], 'Pixabay search');
     $webAssert->responseContains('Please enter a search term.');

     // Test no results returned from api call.
@@ @@
       'response',
       json_encode((object) $this->getMockResponseData('empty'))
     )->save();
-    $this->drupalPostForm(NULL, ['search_key' => 'test'], 'Pixabay search');
+    $this->submitForm(['search_key' => 'test'], 'Pixabay search');
     $webAssert->responseContains('Current search provided no results, please enter a valid search term.');

     // Test exception thrown in the api call.
@@ @@
       'response',
       'exception'
     )->save();
-    $this->drupalPostForm(NULL, ['search_key' => 'test'], 'Pixabay search');
+    $this->submitForm(['search_key' => 'test'], 'Pixabay search');
     $webAssert->responseContains('The validation');
     $webAssert->responseContains('failed with error "test"');

@@ @@
       'response',
       json_encode((object) $this->getMockResponseData('valid'))
     )->save();
-    $this->drupalPostForm(NULL, ['search_key' => 'test'], 'Pixabay search');
+    $this->submitForm(['search_key' => 'test'], 'Pixabay search');

     // Test if classes are toggled correctly on click, element attributes and
     // extension validation.
@@ @@
     $webAssert->elementExists('css', '#result-images');
     $imageCheckbox = $this->selectImage($webAssert, '#edit-pictures-0', 'https://via.placeholder.com/1_640.png', 'https://via.placeholder.com/300.png', 150, 99);

-    $this->drupalPostForm(NULL, [], 'Select entities');
-    $this->assertEqual($imageCheckbox->hasClass('pixabay-configuration-error'), TRUE);
+    $this->submitForm([], 'Select entities');
+    $this->assertEquals($imageCheckbox->hasClass('pixabay-configuration-error'), TRUE);
     $webAssert->responseContains('Extension png doesn\'t match the allowed extensions set in the widget configuration.');

     $imageCheckbox->click();
-    $this->assertEqual($imageCheckbox->hasClass('pixabay-configuration-error'), FALSE);
+    $this->assertEquals($imageCheckbox->hasClass('pixabay-configuration-error'), FALSE);
     $this->selectImage($webAssert, '#edit-pictures-1', 'https://via.placeholder.com/1_640.jpg', 'https://via.placeholder.com/300.jpg', 160, 84);
-    $this->drupalPostForm(NULL, [], 'Select entities');
+    $this->submitForm([], 'Select entities');
     $webAssert->responseNotContains('Extension png doesn\'t match the allowed extensions set in the widget configuration.');

     // Test if results are correct with image size 1280.
     $this->drupalGet('/admin/config/content/entity_browser/test_entity_browser/widgets');
     $webAssert->fieldExists("table[$uuid][form][image_size]")->setValue('_1280');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');

     $this->drupalGet('/entity-browser/modal/test_entity_browser');
-    $this->drupalPostForm(NULL, ['search_key' => 'test'], 'Pixabay search');
+    $this->submitForm(['search_key' => 'test'], 'Pixabay search');
     $this->selectImage($webAssert, '#edit-pictures-0', 'https://via.placeholder.com/1_1280.png', 'https://via.placeholder.com/300.png', 150, 99);
   }

@@ @@
     $imageCheckbox = $webAssert->elementExists('css', $selector);
     $imageCheckboxInput = $webAssert->elementExists('css', "$selector input");
     $image = $webAssert->elementExists('css', "$selector img");
-    $this->assertEqual($image->hasClass('pixabay-image'), TRUE);
-    $this->assertEqual($image->getAttribute('src'), $previewUrl);
-    $this->assertEqual($image->getAttribute('alt'), 'Pixabay image');
-    $this->assertEqual($image->getAttribute('width'), $previewWidth);
-    $this->assertEqual($image->getAttribute('height'), $previewHeight);
-    $this->assertEqual($imageCheckboxInput->isVisible(), FALSE);
-    $this->assertEqual($imageCheckboxInput->getAttribute('value'), "$imageURL $previewUrl pixabay_id pixabay_tags");
-    $this->assertEqual($imageCheckbox->isChecked(), FALSE);
+    $this->assertEquals($image->hasClass('pixabay-image'), TRUE);
+    $this->assertEquals($image->getAttribute('src'), $previewUrl);
+    $this->assertEquals($image->getAttribute('alt'), 'Pixabay image');
+    $this->assertEquals($image->getAttribute('width'), $previewWidth);
+    $this->assertEquals($image->getAttribute('height'), $previewHeight);
+    $this->assertEquals($imageCheckboxInput->isVisible(), FALSE);
+    $this->assertEquals($imageCheckboxInput->getAttribute('value'), "$imageURL $previewUrl pixabay_id pixabay_tags");
+    $this->assertEquals($imageCheckbox->isChecked(), FALSE);
     $imageCheckbox->click();
-    $this->assertEqual($imageCheckboxInput->isChecked(), TRUE);
-    $this->assertEqual($imageCheckbox->hasClass('pixabay-selected-image'), TRUE);
+    $this->assertEquals($imageCheckboxInput->isChecked(), TRUE);
+    $this->assertEquals($imageCheckbox->hasClass('pixabay-selected-image'), TRUE);
     return $imageCheckbox;
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/media_pixabay/tests/src/Functional/MediaPixabayApiKeyConfigurationTest.php:133

    ---------- begin diff ----------
@@ @@
    * @throws \Behat\Mink\Exception\ResponseTextException
    */
   private function assertApiKeyConfigurationSubmitMarkup($path, array $edit, $statusMessage) {
-    $this->drupalPostForm($path, $edit, 'Save configuration');
+    $this->drupalGet($path);
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->pageTextContains($statusMessage);
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 2 files have been changed by Rector                                       

