modules/contrib/href_lang_exchange/href_lang_exchange.api.php
modules/contrib/href_lang_exchange/href_lang_exchange.module
modules/contrib/href_lang_exchange/modules/href_lang_exchange_country_override/href_lang_exchange_country_override.module
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/href_lang_exchange_href.install
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Entity/SiteEntityInterface.php
modules/contrib/href_lang_exchange/src/Authorization/NoAuthorization.php
modules/contrib/href_lang_exchange/src/HrefLangItemStorageInterface.php
modules/contrib/href_lang_exchange/src/Service/SettingsManager.php
modules/contrib/href_lang_exchange/tests/src/Unit/Plugin/Block/HrefLanguageSwitchBlockTest.php
modules/contrib/href_lang_exchange/src/Plugin/Block/HrefLanguageConnectionCountBlock.php
modules/contrib/href_lang_exchange/src/Service/SettingsManagerInterface.php
modules/contrib/href_lang_exchange/src/Connection/AuthorizationInterface.php
modules/contrib/href_lang_exchange/src/Service/SiteManagement.php
modules/contrib/href_lang_exchange/src/Connection/Connection.php
modules/contrib/href_lang_exchange/src/Twig/TwigExtension.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Entity/SiteEntityViewsData.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/href_lang_exchange_href.module
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/site_entity.page.inc
modules/contrib/href_lang_exchange/tests/src/Unit/Plugin/Field/FieldFormatter/HrefLangExchangeFieldItemFormatterTest.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Authentication/Provider/BasicTokenAuth.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Form/SettingsForm.php
modules/contrib/href_lang_exchange/tests/src/Unit/Plugin/Field/FieldType/HrefLangExchangeFieldItemTest.php
modules/contrib/href_lang_exchange/tests/src/Kernel/Controller/JSONAPIEntityAutocompleteControllerTest.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Form/SiteEntityDeleteForm.php
modules/contrib/href_lang_exchange/tests/src/Unit/Plugin/Field/FieldWidget/HrefLangExchangeFieldItemAutocompleteWidgetTest.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_autoupdater/href_lang_exchange_autoupdater.module
modules/contrib/href_lang_exchange/tests/src/Unit/Plugin/QueueWorker/HrefLangUpdateQueueTest.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Authorization/AuthorizationToken.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Form/SiteEntityForm.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_autoupdater/src/Controller/SiteEntityController.php
modules/contrib/href_lang_exchange/tests/src/Unit/Plugin/views/filter/FilterByHrefLangItemsTest.php
modules/contrib/href_lang_exchange/src/Plugin/Block/HrefLanguageSwitchBlock.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Controller/SiteEntityController.php
modules/contrib/href_lang_exchange/tests/src/Unit/Service/HrefLangItemValidatorTest.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Form/SiteEntityRevisionDeleteForm.php
modules/contrib/href_lang_exchange/src/Plugin/Field/FieldFormatter/HrefLangExchangeFieldItemFormatter.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_country_override/src/RegionLanguageFilter.php
modules/contrib/href_lang_exchange/tests/src/Kernel/HrefLangExchangeTestBase.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Form/SiteEntityRevisionRevertForm.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_country_override/src/RegionLanguageFilterInterface.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_country_override/src/SiteEntityHrefLangEntity.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_country_override/src/SiteEntityMultiRegionExtensionStorage.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_country_override/src/SiteEntityMultiRegionExtensionStorageInterface.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_custom_logos/href_lang_exchange_custom_logos.module
modules/contrib/href_lang_exchange/src/Plugin/Field/FieldType/HrefLangExchangeFieldItem.php
modules/contrib/href_lang_exchange/tests/src/Unit/Authorization/NoAuthorizationTest.php
modules/contrib/href_lang_exchange/src/Connection/ConnectionInterface.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Form/SiteEntitySettingsForm.php
modules/contrib/href_lang_exchange/src/Connection/ResourceInterface.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Helper/CheckAvailabilityInterface.php
modules/contrib/href_lang_exchange/src/Connection/SendValidator.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Entity/SiteEntity.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Helper/CheckAvailabilityService.php
modules/contrib/href_lang_exchange/tests/src/Unit/Connection/ConnectionTest.php
modules/contrib/href_lang_exchange/tests/src/Unit/Service/LazyStoreItemTest.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_custom_logos/src/Controller/MultisiteLogosController.php
modules/contrib/href_lang_exchange/src/Connection/SendValidatorInterface.php
modules/contrib/href_lang_exchange/src/Connection/SiteInterface.php
modules/contrib/href_lang_exchange/src/Connection/SiteManagementInterface.php
modules/contrib/href_lang_exchange/src/Controller/JSONAPIEntityAutocompleteController.php
modules/contrib/href_lang_exchange/tests/src/Unit/Service/LazyStoreTest.php
modules/contrib/href_lang_exchange/tests/src/Unit/Service/NormalLazyStoreTest.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Plugin/Validation/Constraint/CheckWebsiteAvailability.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Plugin/Validation/Constraint/CheckWebsiteAvailabilityValidator.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Service/MasterElement.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Service/SettingsManager.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Service/SiteManagementService.php
modules/contrib/href_lang_exchange/tests/src/Unit/Service/SettingsManagerTest.php
modules/contrib/href_lang_exchange/tests/src/Unit/Service/SiteManagementTest.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/SiteEntityAccessControlHandler.php
modules/contrib/href_lang_exchange/tests/src/Unit/Twig/TwigExtensionTest.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/SiteEntityHtmlRouteProvider.php
modules/contrib/href_lang_exchange/src/Plugin/Field/FieldWidget/HrefLangExchangeFieldItemAutocompleteWidget.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/SiteEntityListBuilder.php
modules/contrib/href_lang_exchange/src/Entity/HrefLangItem.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/SiteEntityStorage.php
modules/contrib/href_lang_exchange/src/Plugin/QueueWorker/HrefLangUpdateQueue.php
modules/contrib/href_lang_exchange/src/Plugin/Validation/Constraint/CheckSiteIDExist.php
modules/contrib/href_lang_exchange/src/Plugin/Validation/Constraint/CheckSiteIDExistValidator.php
modules/contrib/href_lang_exchange/src/Plugin/simple_sitemap/SitemapGenerator/HrefLangExchangeSitemapGenerator.php
modules/contrib/href_lang_exchange/src/Plugin/simple_sitemap/SitemapType/HrefLangExchangeSitemapType.php
modules/contrib/href_lang_exchange/src/Plugin/views/filter/FilterByHrefLangItems.php
modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/SiteEntityStorageInterface.php
modules/contrib/href_lang_exchange/tests/src/Unit/Connection/SendValidatorTest.php
modules/contrib/href_lang_exchange/src/Service/HrefLangItemValidator.php
modules/contrib/href_lang_exchange/src/EventSubscriber/LazyHrefItemSubscriber.php
modules/contrib/href_lang_exchange/src/Form/HrefLangItemDeleteForm.php
modules/contrib/href_lang_exchange/src/Service/HrefLangItemValidatorInterface.php
modules/contrib/href_lang_exchange/src/Service/LazyStore.php
modules/contrib/href_lang_exchange/src/Service/LazyStoreInterface.php
modules/contrib/href_lang_exchange/src/Service/LazyStoreItem.php
modules/contrib/href_lang_exchange/src/Form/HrefLangItemForm.php
modules/contrib/href_lang_exchange/src/Service/LazyStoreItemInterface.php
modules/contrib/href_lang_exchange/src/Service/LazyStoreItemJsonExtensionInterface.php
modules/contrib/href_lang_exchange/src/Service/NormalLazyStore.php
modules/contrib/href_lang_exchange/src/HrefLangItemAccessControlHandler.php
modules/contrib/href_lang_exchange/src/HrefLangItemInterface.php
modules/contrib/href_lang_exchange/src/HrefLangItemSchema.php
modules/contrib/href_lang_exchange/src/HrefLangItemState.php
modules/contrib/href_lang_exchange/src/HrefLangItemStorage.php
modules/contrib/href_lang_exchange/tests/src/Unit/Controller/JSONAPIEntityAutocompleteControllerTest.php
modules/contrib/href_lang_exchange/tests/src/Unit/EventSubscriber/LazyHrefItemSubscriberTest.php
modules/contrib/href_lang_exchange/tests/src/Unit/Form/HrefLangItemDeleteFormTest.php
modules/contrib/href_lang_exchange/tests/src/Unit/Form/HrefLangItemFormTest.php
modules/contrib/href_lang_exchange/tests/src/Unit/HrefLangItemAccessControlHandlerTest.php
modules/contrib/href_lang_exchange/tests/src/Unit/HrefLangItemSchemaTest.php
modules/contrib/href_lang_exchange/tests/src/Unit/HrefLangItemStorageTest.php
modules/contrib/href_lang_exchange/tests/src/Unit/Plugin/Block/HrefLanguageConnectionCountBlockTest.php

10 files with changes
=====================

1) modules/contrib/href_lang_exchange/tests/src/Unit/Service/NormalLazyStoreTest.php:26

    ---------- begin diff ----------
@@ @@
    * @covers ::__construct
    */
   public function testConstructException() {
-    $this->setExpectedException(\InvalidArgumentException::class);
+    $this->expectException(\InvalidArgumentException::class);
     new EntityConditionGroup('NOT_ALLOWED', []);
   }
    ----------- end diff -----------

Applied rules:
 * DelegateExceptionArgumentsRector
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/href_lang_exchange/tests/src/Unit/Service/HrefLangItemValidatorTest.php:23

    ---------- begin diff ----------
@@ @@
    */
   public function testConstruct($case) {

-    $client = $this->getMockBuilder('GuzzleHttp\ClientInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $queue = $this->getMockBuilder('Drupal\Core\Queue\QueueFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $client = $this->createMock('GuzzleHttp\ClientInterface');
+    $queue = $this->createMock('Drupal\Core\Queue\QueueFactory');
+    $logger = $this->createMock('Psr\Log\LoggerInterface');

     // $connection = new Connection($client, $queue, $logger);
     $this->assertEquals(TRUE, TRUE);
@@ @@
    * @covers ::__construct
    */
   public function testConstructException() {
-    $this->setExpectedException(\InvalidArgumentException::class);
+    $this->expectException(\InvalidArgumentException::class);
     new EntityConditionGroup('NOT_ALLOWED', []);
   }

@@ @@
    */
   public function testValidateByUniquePath($case) {

-    $connection = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\ConnectionInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $connection = $this->createMock('Drupal\href_lang_exchange\Connection\ConnectionInterface');

-    $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger = $this->createMock('Psr\Log\LoggerInterface');

-    $url = $this->getMockBuilder('\Drupal\Core\Url')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $entity = $this->getMockBuilder('Drupal\Core\Entity\EntityInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock('\Drupal\Core\Url');
+    $entity = $this->createMock('Drupal\Core\Entity\EntityInterface');

     $entity->expects($this->any())
       ->method('toUrl')
       ->will($this->returnValue($url));

-    $form_state = $this->getMockBuilder('Drupal\Core\Form\FormStateInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $form_state = $this->createMock('Drupal\Core\Form\FormStateInterface');

-    $configa = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $configa = $this->createMock('\Drupal\Core\Config\ImmutableConfig');
     $configa->expects($this->any())
       ->method('get')->with('country.default')
       ->will($this->returnValue('AF'));

-    $config = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock('\Drupal\Core\Config\ImmutableConfig');
     $config->expects($this->any())
       ->method('get')->with('system.date')
       ->will($this->returnValue($configa));

-    $site_interface = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\SiteInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $site_interface = $this->createMock('Drupal\href_lang_exchange\Connection\SiteInterface');

-    $translation = $this->getMockBuilder('Drupal\Core\StringTranslation\TranslationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $translation = $this->createMock('Drupal\Core\StringTranslation\TranslationInterface');

     $form = [];
     $mock = $this->createMock('Symfony\Component\DependencyInjection\ContainerBuilder');
@@ @@
       [['value' => FALSE]],
       [
         [
-          'value' => $this->getMockBuilder('Drupal\href_lang_exchange\Connection\SiteInterface')
-            ->disableOriginalConstructor()
-            ->getMock(),
+          'value' => $this->createMock('Drupal\href_lang_exchange\Connection\SiteInterface'),
         ],
       ],
     ];
@@ @@
    */
   public function testValidateByUniqueTypes($case) {

-    $connection = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\ConnectionInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $connection = $this->createMock('Drupal\href_lang_exchange\Connection\ConnectionInterface');

-    $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger = $this->createMock('Psr\Log\LoggerInterface');

-    $entity = $this->getMockBuilder('Drupal\Core\Entity\EntityInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity = $this->createMock('Drupal\Core\Entity\EntityInterface');

-    $form_state = $this->getMockBuilder('Drupal\Core\Form\FormStateInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $form_state = $this->createMock('Drupal\Core\Form\FormStateInterface');

-    $configa = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $configa = $this->createMock('\Drupal\Core\Config\ImmutableConfig');
     $configa->expects($this->any())
       ->method('get')->with('country.default')
       ->will($this->returnValue('AF'));

-    $config = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock('\Drupal\Core\Config\ImmutableConfig');
     $config->expects($this->any())
       ->method('get')->with('system.date')
       ->will($this->returnValue($configa));

-    $site_interface = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\SiteInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $site_interface = $this->createMock('Drupal\href_lang_exchange\Connection\SiteInterface');

-    $translation = $this->getMockBuilder('Drupal\Core\StringTranslation\TranslationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $translation = $this->createMock('Drupal\Core\StringTranslation\TranslationInterface');

     $form = [];
     $mock = $this->createMock('Symfony\Component\DependencyInjection\ContainerBuilder');
@@ @@
       [['value' => FALSE]],
       [
         [
-          'value' => $this->getMockBuilder('Drupal\href_lang_exchange\Connection\SiteInterface')
-            ->disableOriginalConstructor()
-            ->getMock(),
+          'value' => $this->createMock('Drupal\href_lang_exchange\Connection\SiteInterface'),
         ],
       ],
     ];
    ----------- end diff -----------

Applied rules:
 * DelegateExceptionArgumentsRector
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Controller/SiteEntityController.php:132

    ---------- begin diff ----------
@@ @@
         ]));
       }
       else {
-        $link = $site_entity->link($date);
+        $link = $site_entity->toLink($date)->toString();
       }

       $row = [];
    ----------- end diff -----------

Applied rules:
 * EntityInterfaceLinkRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Authentication/Provider/BasicTokenAuth.php:75

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function handleException(ExceptionEvent $event) {
-    $exception = $event->getException();
+    $exception = $event->getThrowable();
     if ($exception instanceof AccessDeniedHttpException) {
-      $event->setException(new UnauthorizedHttpException('Invalid consumer origin.', $exception));
+      $event->setThrowable(new UnauthorizedHttpException('Invalid consumer origin.', $exception));
       return TRUE;
     }
     return FALSE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameMethodRector
 * WrapReturnRector


5) modules/contrib/href_lang_exchange/modules/href_lang_exchange_href/src/Form/SiteEntityRevisionDeleteForm.php:73

    ---------- begin diff ----------
@@ @@
    */
   public function getQuestion() {
     return $this->t('Are you sure you want to delete the revision from %revision-date?', [
-      '%revision-date' => format_date($this->revision->getRevisionCreationTime()),
+      '%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()),
     ]);
   }

@@ @@
       '%revision' => $this->revision->getRevisionId(),
     ]);
     $this->messenger()->addMessage(t('Revision from %revision-date of Site entity %title has been deleted.', [
-      '%revision-date' => format_date($this->revision->getRevisionCreationTime()),
+      '%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()),
       '%title' => $this->revision->label(),
     ]));
     $form_state->setRedirect(
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/href_lang_exchange/tests/src/Unit/Form/HrefLangItemFormTest.php:41

    ---------- begin diff ----------
@@ @@
    * @param \Drupal\Core\Messenger\MessengerInterface $messenger
    *   The messenger service.
    */
-  public function __construct(EntityRepositoryInterface $entity_repository, HrefLangItemValidatorInterface $validator, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, MessengerInterface $messenger = NULL) {
+  public function __construct(EntityRepositoryInterface $entity_repository, HrefLangItemValidatorInterface $validator, $entity_type_bundle_info = NULL, TimeInterface $time = NULL, MessengerInterface $messenger = NULL) {
     parent::__construct($entity_repository, $entity_type_bundle_info, $time);
     $this->messenger = $messenger;
     $this->validator = $validator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/href_lang_exchange/tests/src/Unit/EventSubscriber/LazyHrefItemSubscriberTest.php:50

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function createEntityTypeManagerInterface($value) {
-    $lazy_store = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $lazy_store = $this->createMock(EntityTypeManagerInterface::class);

     return $lazy_store;
   }
@@ @@
    * {@inheritdoc}
    */
   public function createLoggerInterface($value) {
-    $lazy_store = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $lazy_store = $this->createMock(LoggerInterface::class);
     return $lazy_store;
   }

@@ @@
    * {@inheritdoc}
    */
   public function lazyHrefTerminateProvider() {
-    $lazy_element = $this->getMockBuilder(Connection::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $lazy_element = $this->createMock(Connection::class);

     $lazy_element->expects($this->exactly(4))
       ->method('getHrefLangItem')
@@ @@
    *
    */
   public function createLazyStore($value) {
-    $lazy_store = $this->getMockBuilder(LazyStoreInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $lazy_store = $this->createMock(LazyStoreInterface::class);

     $lazy_store->expects($this->any())
       ->method('getStore')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/href_lang_exchange/tests/src/Unit/Controller/JSONAPIEntityAutocompleteControllerTest.php:41

    ---------- begin diff ----------
@@ @@
    *   The provider array.
    */
   public function handleAutocompleteProvider() {
-    $default_serializer = $this->getMockBuilder(SerializerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_serializer = $this->createMock(SerializerInterface::class);

-    $default_module_handler = $this->getMockBuilder(ModuleHandler::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_module_handler = $this->createMock(ModuleHandler::class);

     $default_module_handler->expects($this->any())
       ->method('alter')
       ->will($this->returnValue([]));

-    $default_connection = $this->getMockBuilder(ConnectionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_connection = $this->createMock(ConnectionInterface::class);

     $default_connection->expects($this->any())
       ->method('checkSelfMaster')
       ->will($this->returnValue(TRUE));

-    $default_storage = $this->getMockBuilder(HrefLangItemStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_storage = $this->createMock(HrefLangItemStorageInterface::class);

     $default_storage->expects($this->any())
       ->method('loadMultiple')
@@ @@
       ->method('loadAllByGid')
       ->will($this->returnValue([]));

-    $default_query = $this->getMockBuilder(QueryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_query = $this->createMock(QueryInterface::class);

     $default_query->expects($this->any())
       ->method('condition')
@@ @@
    *   The provider array.
    */
   public function handleSearchFacetProvider() {
-    $default_serializer = $this->getMockBuilder(SerializerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_serializer = $this->createMock(SerializerInterface::class);

-    $default_module_handler = $this->getMockBuilder(ModuleHandler::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_module_handler = $this->createMock(ModuleHandler::class);

     $default_module_handler->expects($this->any())
       ->method('alter')
       ->will($this->returnValue([]));

-    $default_connection = $this->getMockBuilder(ConnectionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_connection = $this->createMock(ConnectionInterface::class);

     $default_connection->expects($this->any())
       ->method('checkSelfMaster')
       ->will($this->returnValue(TRUE));

-    $default_query = $this->getMockBuilder(QueryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_query = $this->createMock(QueryInterface::class);

     $default_query->expects($this->any())
       ->method('condition')
@@ @@
    * {@inheritdoc}
    */
   public function createStorage($loadAllLanguages, $getQuery = [], $loadMultiple = [], $loadAllByGid = []) {
-    $default_storage = $this->getMockBuilder(HrefLangItemStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_storage = $this->createMock(HrefLangItemStorageInterface::class);

     $default_storage->expects($this->any())
       ->method('loadMultiple')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/href_lang_exchange/tests/src/Unit/Connection/SendValidatorTest.php:38

    ---------- begin diff ----------
@@ @@
    *   The provider array.
    */
   public function isItJsonApiRequestProvider() {
-    $default_entity = $this->getMockBuilder(HrefLangItemInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_entity = $this->createMock(HrefLangItemInterface::class);

-    $default_connection = $this->getMockBuilder(ConnectionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_connection = $this->createMock(ConnectionInterface::class);

     $default_connection->expects($this->any())
       ->method('checkSelfMaster')
       ->will($this->returnValue(TRUE));

-    $default_request_stack = $this->getMockBuilder(RequestStack::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_request_stack = $this->createMock(RequestStack::class);

     $basic = new Request();
     $basic->setMethod('POST');
@@ @@
       ->method('getCurrentRequest')
       ->will($this->returnValue($basic));

-    $default_route_matcher = $this->getMockBuilder(RouteMatchInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_route_matcher = $this->createMock(RouteMatchInterface::class);

     $default_resource_manager = $this->createResourceManager(Connection::RESOURCE_ADDRESS);

@@ @@
     $default_elements = [
       [
         [
-          'entity' => $this->getMockBuilder(EntityInterface::class)
-            ->disableOriginalConstructor()
-            ->getMock(),
+          'entity' => $this->createMock(EntityInterface::class),
           'connection' => $default_connection,
           'request_stack' => $default_request_stack,
           'route_matcher' => $default_route_matcher,
@@ @@
    * {@inheritdoc}
    */
   public function createConnection($checkSelfMaster) {
-    $mock = $this->getMockBuilder(ConnectionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mock = $this->createMock(ConnectionInterface::class);

     $mock->expects($this->once())
       ->method('checkSelfMaster')
@@ @@
    * {@inheritdoc}
    */
   public function createResourceManager($getResourceAddress) {
-    $mock = $this->getMockBuilder(ResourceInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mock = $this->createMock(ResourceInterface::class);

     $mock->expects($this->any())
       ->method('getResourceAddress')
@@ @@
    * {@inheritdoc}
    */
   public function createRequestStack($request) {
-    $mock = $this->getMockBuilder(RequestStack::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mock = $this->createMock(RequestStack::class);

     $mock->expects($this->any())
       ->method('getCurrentRequest')
@@ @@
    *   The provider array.
    */
   public function isItFormEditProvider() {
-    $default_entity = $this->getMockBuilder(HrefLangItemInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_entity = $this->createMock(HrefLangItemInterface::class);

-    $default_connection = $this->getMockBuilder(ConnectionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_connection = $this->createMock(ConnectionInterface::class);

     $default_connection->expects($this->any())
       ->method('checkSelfMaster')
       ->will($this->returnValue(TRUE));

-    $default_request_stack = $this->getMockBuilder(RequestStack::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_request_stack = $this->createMock(RequestStack::class);

     $basic = new Request();
     $basic->setMethod('POST');
@@ @@
     $default_elements = [
       [
         [
-          'entity' => $this->getMockBuilder(EntityInterface::class)
-            ->disableOriginalConstructor()
-            ->getMock(),
+          'entity' => $this->createMock(EntityInterface::class),
           'connection' => $default_connection,
           'request_stack' => $default_request_stack,
           'route_matcher' => $default_route_matcher,
@@ @@
    * {@inheritdoc}
    */
   public function createRouteMatch($match) {
-    $mock = $this->getMockBuilder(RouteMatchInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mock = $this->createMock(RouteMatchInterface::class);

     $mock->expects($this->any())
       ->method('getRouteName')
@@ @@
    *   The provider array.
    */
   public function isItFormAddProvider() {
-    $default_entity = $this->getMockBuilder(HrefLangItemInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_entity = $this->createMock(HrefLangItemInterface::class);

-    $default_connection = $this->getMockBuilder(ConnectionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_connection = $this->createMock(ConnectionInterface::class);

     $default_connection->expects($this->any())
       ->method('checkSelfMaster')
       ->will($this->returnValue(TRUE));

-    $default_request_stack = $this->getMockBuilder(RequestStack::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $default_request_stack = $this->createMock(RequestStack::class);

     $basic = new Request();
     $basic->setMethod('POST');
@@ @@
     $default_elements = [
       [
         [
-          'entity' => $this->getMockBuilder(EntityInterface::class)
-            ->disableOriginalConstructor()
-            ->getMock(),
+          'entity' => $this->createMock(EntityInterface::class),
           'connection' => $default_connection,
           'request_stack' => $default_request_stack,
           'route_matcher' => $default_route_matcher,
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/href_lang_exchange/tests/src/Unit/Connection/ConnectionTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The mock container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerBuilder|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Symfony\Component\DependencyInjection\ContainerBuilder|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $container;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
-    $this->container = $this->getMockBuilder('Symfony\Component\DependencyInjection\ContainerBuilder')
-      ->setMethods(['get'])
-      ->getMock();
+    $this->container = $this->createMock('Symfony\Component\DependencyInjection\ContainerBuilder');
   }

   /**
@@ @@
    */
   public function testConstruct($case) {

-    $client = $this->getMockBuilder('GuzzleHttp\ClientInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $queue = $this->getMockBuilder('Drupal\Core\Queue\QueueFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $authorization = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\AuthorizationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $siteManagement = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\SiteManagementInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $client = $this->createMock('GuzzleHttp\ClientInterface');
+    $queue = $this->createMock('Drupal\Core\Queue\QueueFactory');
+    $logger = $this->createMock('Psr\Log\LoggerInterface');
+    $authorization = $this->createMock('Drupal\href_lang_exchange\Connection\AuthorizationInterface');
+    $siteManagement = $this->createMock('Drupal\href_lang_exchange\Connection\SiteManagementInterface');

     $connection = new Connection($client, $queue, $logger, $authorization, $siteManagement);
     $group = new EntityConditionGroup($case['conjunction'], $case['members']);
@@ @@
    * @covers ::__construct
    */
   public function testConstructException() {
-    $this->setExpectedException(\InvalidArgumentException::class);
+    $this->expectException(\InvalidArgumentException::class);
     new EntityConditionGroup('NOT_ALLOWED', []);
   }

@@ @@
   public function testGetMaster($case) {

     if (!($case['value'] instanceof SiteInterface)) {
-      $this->setExpectedException(\Exception::class, 'No master is defined.');
+        $this->expectExceptionMessage('No master is defined.');
+        $this->expectException(\Exception::class);
     }

-    $client = $this->getMockBuilder('GuzzleHttp\ClientInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $queue = $this->getMockBuilder('Drupal\Core\Queue\QueueFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $authorization = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\AuthorizationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $siteManagement = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\SiteManagementInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $client = $this->createMock('GuzzleHttp\ClientInterface');
+    $queue = $this->createMock('Drupal\Core\Queue\QueueFactory');
+    $logger = $this->createMock('Psr\Log\LoggerInterface');
+    $authorization = $this->createMock('Drupal\href_lang_exchange\Connection\AuthorizationInterface');
+    $siteManagement = $this->createMock('Drupal\href_lang_exchange\Connection\SiteManagementInterface');

-    $storage = $this->getMockBuilder('Drupal\href_lang_exchange_href\SiteEntityStorageInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $storage = $this->createMock('Drupal\href_lang_exchange_href\SiteEntityStorageInterface');
     $storage->expects($this->once())
       ->method('getMaster')
       ->will($this->returnValue($case['value']));

-    $typeManager = $this->getMockBuilder('Drupal\Core\Entity\EntityTypeManagerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $typeManager = $this->createMock('Drupal\Core\Entity\EntityTypeManagerInterface');
     $typeManager->expects($this->once())
       ->method('getStorage')
       ->with('site_entity')
@@ @@
       [['value' => FALSE]],
       [
         [
-          'value' => $this->getMockBuilder('Drupal\href_lang_exchange\Connection\SiteInterface')
-            ->disableOriginalConstructor()
-            ->getMock(),
+          'value' => $this->createMock('Drupal\href_lang_exchange\Connection\SiteInterface'),
         ],
       ],
     ];
@@ @@
     $filter = $case['filter'];
     $response = $case['response'];

-    $queue = $this->getMockBuilder('Drupal\Core\Queue\QueueFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $authorization = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\AuthorizationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $siteManagement = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\SiteManagementInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $queue = $this->createMock('Drupal\Core\Queue\QueueFactory');
+    $logger = $this->createMock('Psr\Log\LoggerInterface');
+    $authorization = $this->createMock('Drupal\href_lang_exchange\Connection\AuthorizationInterface');
+    $siteManagement = $this->createMock('Drupal\href_lang_exchange\Connection\SiteManagementInterface');

     // Create a mock and queue two responses.
     $mock = new MockHandler([
@@ @@
     $connection = new Connection($client, $queue, $logger, $authorization, $siteManagement);

     if (!is_string($url) || !is_string($filter)) {
-      $this->setExpectedException(\Exception::class, '$url or $filter is not a string');
+        $this->expectExceptionMessage('$url or $filter is not a string');
+        $this->expectException(\Exception::class);
     }

     $item = $connection->getHrefLangItem($url, $filter);
@@ @@
     $entity = '';
     $gid = '';

-    $language = $this->getMockBuilder('\Drupal\Core\Language\LanguageInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $language = $this->createMock('\Drupal\Core\Language\LanguageInterface');

-    $entity = $this->getMockBuilder('Drupal\node\Entity\Node')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity = $this->createMock('Drupal\node\Entity\Node');

-    $url = $this->getMockBuilder('\Drupal\Core\Url')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock('\Drupal\Core\Url');
     $entity->expects($this->any())
       ->method('getTitle')
       ->will($this->returnValue($this->getRandomGenerator()->word(10)));
@@ @@
       ->method('language')
       ->will($this->returnValue($language));

-    $immutable_config = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $immutable_config = $this->createMock('\Drupal\Core\Config\ImmutableConfig');

     $immutable_config->expects($this->once())
       ->method('get')->with('country.default')
       ->will($this->returnValue('DE'));

-    $config_factory = $this->getMockBuilder('Drupal\Core\Config\ConfigFactoryInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config_factory = $this->createMock('Drupal\Core\Config\ConfigFactoryInterface');

     $config_factory->expects($this->once())
       ->method('get')->with('system.date')
@@ @@

     $this->setMockContainerService('config.factory', $config_factory);

-    $client = $this->getMockBuilder('GuzzleHttp\ClientInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $queue = $this->getMockBuilder('Drupal\Core\Queue\QueueFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $logger = $this->getMockBuilder('Psr\Log\LoggerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $authorization = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\AuthorizationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $siteManagement = $this->getMockBuilder('Drupal\href_lang_exchange\Connection\SiteManagementInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $client = $this->createMock('GuzzleHttp\ClientInterface');
+    $queue = $this->createMock('Drupal\Core\Queue\QueueFactory');
+    $logger = $this->createMock('Psr\Log\LoggerInterface');
+    $authorization = $this->createMock('Drupal\href_lang_exchange\Connection\AuthorizationInterface');
+    $siteManagement = $this->createMock('Drupal\href_lang_exchange\Connection\SiteManagementInterface');

     $connection = new Connection($client, $queue, $logger, $authorization, $siteManagement);
     $hreflang = $connection->createHrefLangItemFromEntity($entity, $gid);
@@ @@
       [['value' => FALSE]],
       [
         [
-          'value' => $this->getMockBuilder('Drupal\href_lang_exchange\Connection\SiteInterface')
-            ->disableOriginalConstructor()
-            ->getMock(),
+          'value' => $this->createMock('Drupal\href_lang_exchange\Connection\SiteInterface'),
         ],
       ],
     ];
    ----------- end diff -----------

Applied rules:
 * DelegateExceptionArgumentsRector
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 10 files have been changed by Rector                                      

