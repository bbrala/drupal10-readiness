modules/contrib/log/src/Entity/Log.php
modules/contrib/log/log.module
modules/contrib/log/src/Plugin/migrate/source/d7/Log.php
modules/contrib/log/src/ContextProvider/LogRouteContext.php
modules/contrib/log/src/Plugin/views/field/LogField.php
modules/contrib/log/src/Controller/LogAutocompleteController.php
modules/contrib/log/src/Plugin/views/sort/LogStandardSort.php
modules/contrib/log/tests/src/Functional/LogActionsTest.php
modules/contrib/log/src/Entity/LogInterface.php
modules/contrib/log/src/Entity/LogType.php
modules/contrib/log/src/Entity/LogTypeInterface.php
modules/contrib/log/src/Event/LogEvent.php
modules/contrib/log/src/Form/LogActionFormBase.php
modules/contrib/log/src/Form/LogCloneActionForm.php
modules/contrib/log/src/Form/LogForm.php
modules/contrib/log/src/Form/LogRescheduleActionForm.php
modules/contrib/log/src/Form/LogTypeForm.php
modules/contrib/log/src/LogListBuilder.php
modules/contrib/log/src/LogStorage.php
modules/contrib/log/tests/src/Functional/LogCRUDTest.php
modules/contrib/log/src/LogTypeListBuilder.php
modules/contrib/log/src/LogViewsData.php
modules/contrib/log/src/Plugin/Action/LogActionBase.php
modules/contrib/log/src/Plugin/Action/LogClone.php
modules/contrib/log/src/Plugin/Action/LogMarkAsDone.php
modules/contrib/log/tests/src/Functional/LogNamePatternTest.php
modules/contrib/log/src/Plugin/Action/LogMarkAsPending.php
modules/contrib/log/src/Plugin/Action/LogReschedule.php
modules/contrib/log/src/Plugin/Action/LogStateChangeBase.php
modules/contrib/log/tests/src/Functional/LogTestBase.php
modules/contrib/log/tests/src/Kernel/LogActionsTest.php
modules/contrib/log/tests/src/Kernel/NameAutocompleteTest.php
modules/contrib/log/tests/src/Kernel/SortTimestampIdTest.php
modules/contrib/log/tests/src/Traits/LogCreationTrait.php

7 files with changes
====================

1) modules/contrib/log/tests/src/Kernel/SortTimestampIdTest.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp();

     $this->installEntitySchema('log');
@@ @@

     $this->executeView($view);

-    $this->assertEqual(3, count($view->result), 'The number of returned rows match.');
+    $this->assertEquals(3, count($view->result), 'The number of returned rows match.');
     $this->assertIdenticalResultset($view, $this->expectedResultASC, [
       'name' => 'name',
       'id' => 'id',
@@ @@

     $this->executeView($view);

-    $this->assertEqual(3, count($view->result), 'The number of returned rows match.');
+    $this->assertEquals(3, count($view->result), 'The number of returned rows match.');
     $this->assertIdenticalResultset($view, $this->expectedResultDESC, [
       'name' => 'name',
       'id' => 'id',
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/log/tests/src/Kernel/NameAutocompleteTest.php:71

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('log');
@@ @@

     // Tests admin account so it returns the complete set of logs.
     $result = $this->getAutocompleteResult('log');
-    $this->assertEqual(count($this->logs), count($result), 'Number of results for matching query and admin user is as expected.');
+    $this->assertEquals(count($this->logs), count($result), 'Number of results for matching query and admin user is as expected.');

     // With an account that has 'view any default log' permission, the result
     // should be the complete set of logs.
     $this->container->get('current_user')->setAccount($this->anyAccount);
     $result = $this->getAutocompleteResult('log');
-    $this->assertEqual(3, count($result), 'Number of results for matching query and user with view any permission is as expected.');
+    $this->assertEquals(3, count($result), 'Number of results for matching query and user with view any permission is as expected.');

     // With an account that has 'view own default log' permission, the result
     // should be the logs belonging to that user.
     $this->container->get('current_user')->setAccount($this->ownAccount);
     $result = $this->getAutocompleteResult('log');
-    $this->assertEqual(1, count($result), 'Number of results for matching query and user with view own permission is as expected.');
+    $this->assertEquals(1, count($result), 'Number of results for matching query and user with view own permission is as expected.');
     $own_log = array_filter($this->logs, function ($log) {
       /** @var \Drupal\log\Entity\LogInterface $log */
       return $log->id() == $this->ownAccount->id();
     });
     $own_log = reset($own_log);
-    $this->assertEqual($result[0], $own_log->label(), 'The right log for the user is returned.');
+    $this->assertEquals($result[0], $own_log->label(), 'The right log for the user is returned.');

     // With an account with no permissions and the right query, there should be
     // no results anyway.
@@ @@

     $this->container->get('current_user')->setAccount($this->adminAccount);
     $result = $this->getAutocompleteResult('log');
-    $this->assertEqual(count($this->logs) - 1, count($result), 'Duplicated log is not duplicated in the autocomplete results.');
+    $this->assertEquals(count($this->logs) - 1, count($result), 'Duplicated log is not duplicated in the autocomplete results.');
     $expected_order = [
       'Z log',
       'First log',
@@ @@
       'Second log',
       'Third log',
     ];
-    $this->assertEqual($result, $expected_order, 'Order of results is as expected.');
+    $this->assertEquals($result, $expected_order, 'Order of results is as expected.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/log/tests/src/Kernel/LogActionsTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->actionManager = $this->container->get('plugin.manager.action');
@@ @@
     $action->execute($new_log);
     $storage = $this->container->get('entity_type.manager')->getStorage('log');
     $log = $storage->load($new_log->id());
-    $this->assertEqual($log->get('status')->value, 'done');
+    $this->assertEquals($log->get('status')->value, 'done');
   }

   /**
@@ @@
     $action->execute($new_log);
     $storage = $this->container->get('entity_type.manager')->getStorage('log');
     $log = $storage->load($new_log->id());
-    $this->assertEqual($log->get('status')->value, 'pending');
+    $this->assertEquals($log->get('status')->value, 'pending');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/log/tests/src/Functional/LogTestBase.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = $this->container->get('entity_type.manager');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/log/tests/src/Functional/LogNamePatternTest.php:19

    ---------- begin diff ----------
@@ @@
     $edit = [
       'status' => 'done',
     ];
-    $this->drupalPostForm('log/add/name_pattern', $edit, $this->t('Save'));
+    $this->drupalGet('log/add/name_pattern');
+    $this->submitForm($edit, $this->t('Save'));

     $result = $this->storage
       ->getQuery()
@@ @@
     $this->assertEquals($log->label(), $log_id . ' done', 'Log name is the pattern and not the name.');

     $this->drupalGet($log->toUrl('canonical'));
-    $this->assertResponse(200);
-    $this->assertText($log_id);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains($log_id);
   }

   /**
@@ @@
     $edit = [
       'name[0][value]' => $name,
     ];
+    $this->drupalGet('log/add/name_pattern');

-    $this->drupalPostForm('log/add/name_pattern', $edit, $this->t('Save'));
+    $this->submitForm($edit, $this->t('Save'));

     $result = $this->storage
       ->getQuery()
@@ @@
     $this->assertEquals($log->get('name')->value, $name, 'Log name is the pattern and not the name.');

     $this->drupalGet($log->toUrl('canonical'));
-    $this->assertResponse(200);
-    $this->assertText($name);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains($name);
   }

   /**
@@ @@
     $edit = [
       'name[0][value]' => $this->randomMachineName(),
     ];
-    $this->drupalPostForm($log->toUrl('edit-form'), $edit, $this->t('Save'));
-    $this->assertText($edit['name[0][value]']);
+    $this->drupalGet($log->toUrl('edit-form'));
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->pageTextContains($edit['name[0][value]']);

     // Test that clearing the name forces it to be auto-generated.
     $edit = [
@@ @@
       'name[0][value]' => '',
       'status' => 'pending',
     ];
-    $this->drupalPostForm($log->toUrl('edit-form'), $edit, $this->t('Save'));
-    $this->assertText($log->id() . ' pending');
+    $this->drupalGet($log->toUrl('edit-form'));
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->pageTextContains($log->id() . ' pending');

     // Test that updating a log with an auto-generated name automatically
     // updates the name.
@@ @@
     $edit = [
       'status' => 'done',
     ];
-    $this->drupalPostForm($log->toUrl('edit-form'), $edit, $this->t('Save'));
-    $this->assertText($log->id() . ' done');
+    $this->drupalGet($log->toUrl('edit-form'));
+    $this->submitForm($edit, $this->t('Save'));
+    $this->assertSession()->pageTextContains($log->id() . ' done');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/log/tests/src/Functional/LogCRUDTest.php:17

    ---------- begin diff ----------
@@ @@
    */
   public function testFieldsVisibility() {
     $this->drupalGet('log/add/default');
-    $this->assertResponse('200');
+    $this->assertSession()->statusCodeEquals('200');
     $assert_session = $this->assertSession();
     $assert_session->fieldExists('name[0][value]');
     $assert_session->fieldExists('timestamp[0][value][date]');
@@ @@
     $edit = [
       'name[0][value]' => $name,
     ];
+    $this->drupalGet('log/add/default');

-    $this->drupalPostForm('log/add/default', $edit, $this->t('Save'));
+    $this->submitForm($edit, $this->t('Save'));

     $result = $this->storage
       ->getQuery()
@@ @@
     $log->save();

     $this->drupalGet($log->toUrl('canonical'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

-    $this->assertText($edit['name']);
-    $this->assertRaw(\Drupal::service('date.formatter')->format(\Drupal::time()->getRequestTime()));
+    $this->assertSession()->pageTextContains($edit['name']);
+    $this->assertSession()->responseContains(\Drupal::service('date.formatter')->format(\Drupal::time()->getRequestTime()));
   }

   /**
@@ @@
     $edit = [
       'name[0][value]' => $this->randomMachineName(),
     ];
-    $this->drupalPostForm($log->toUrl('edit-form'), $edit, $this->t('Save'));
+    $this->drupalGet($log->toUrl('edit-form'));
+    $this->submitForm($edit, $this->t('Save'));

-    $this->assertText($edit['name[0][value]']);
+    $this->assertSession()->pageTextContains($edit['name[0][value]']);
   }

   /**
@@ @@

     $label = $log->getName();
     $log_id = $log->id();
+    $this->drupalGet($log->toUrl('delete-form'));

-    $this->drupalPostForm($log->toUrl('delete-form'), [], $this->t('Delete'));
-    $this->assertRaw($this->t('The @entity-type %label has been deleted.', [
+    $this->submitForm([], $this->t('Delete'));
+    $this->assertSession()->responseContains($this->t('The @entity-type %label has been deleted.', [
       '@entity-type' => $log->getEntityType()->getSingularLabel(),
       '%label' => $label,
     ]));
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/log/tests/src/Functional/LogActionsTest.php:23

    ---------- begin diff ----------
@@ @@
     $log->save();

     $num_of_logs = $this->storage->getQuery()->count()->execute();
-    $this->assertEqual($num_of_logs, 1, 'There is one log in the system.');
+    $this->assertEquals($num_of_logs, 1, 'There is one log in the system.');

     $edit = [];
     $edit['action'] = 'log_clone_action';
     $edit['log_bulk_form[0]'] = TRUE;
-    $this->drupalPostForm('admin/content/log', $edit, $this->t('Apply to selected items'));
-    $this->assertResponse(200);
-    $this->assertText($this->t('Are you sure you want to clone this log?'));
-    $this->assertText($this->t('New date'));
+    $this->drupalGet('admin/content/log');
+    $this->submitForm($edit, $this->t('Apply to selected items'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to clone this log?'));
+    $this->assertSession()->pageTextContains($this->t('New date'));

     $new_timestamp = strtotime(date('Y-n-j', strtotime('+1 day', $timestamp)));

@@ @@
     $edit_clone['date[month]'] = date('n', $new_timestamp);
     $edit_clone['date[year]'] = date('Y', $new_timestamp);
     $edit_clone['date[day]'] = date('j', $new_timestamp);
-    $this->drupalPostForm(NULL, $edit_clone, $this->t('Clone'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log');
-    $this->assertText($this->t('Cloned 1 log'));
+    $this->submitForm($edit_clone, $this->t('Clone'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log');
+    $this->assertSession()->pageTextContains($this->t('Cloned 1 log'));
     $logs = $this->storage->loadMultiple();
-    $this->assertEqual(count($logs), 2, 'There are two logs in the system.');
+    $this->assertEquals(count($logs), 2, 'There are two logs in the system.');
     $timestamps = [];
     foreach ($logs as $log) {
       $timestamps[] = $log->get('timestamp')->value;
     }
-    $this->assertEqual($timestamps, [$timestamp, $new_timestamp], 'Timestamp on the new log has been updated.');
+    $this->assertEquals($timestamps, [$timestamp, $new_timestamp], 'Timestamp on the new log has been updated.');
   }

   /**
@@ @@
     }

     $num_of_logs = $this->storage->getQuery()->count()->execute();
-    $this->assertEqual($num_of_logs, 3, 'There are three logs in the system.');
+    $this->assertEquals($num_of_logs, 3, 'There are three logs in the system.');

     $edit = [];
     $edit['action'] = 'log_clone_action';
@@ @@
     for ($i = 0; $i < 3; $i++) {
       $edit['log_bulk_form[' . $i . ']'] = TRUE;
     }
-    $this->drupalPostForm('admin/content/log', $edit, $this->t('Apply to selected items'));
-    $this->assertResponse(200);
-    $this->assertText($this->t('Are you sure you want to clone these logs?'));
-    $this->assertText($this->t('New date'));
+    $this->drupalGet('admin/content/log');
+    $this->submitForm($edit, $this->t('Apply to selected items'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to clone these logs?'));
+    $this->assertSession()->pageTextContains($this->t('New date'));

     $new_timestamp = strtotime(date('Y-n-j', strtotime('+1 day', $timestamp)));

@@ @@
     $edit_clone['date[month]'] = date('n', $new_timestamp);
     $edit_clone['date[year]'] = date('Y', $new_timestamp);
     $edit_clone['date[day]'] = date('j', $new_timestamp);
-    $this->drupalPostForm(NULL, $edit_clone, $this->t('Clone'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log');
-    $this->assertText($this->t('Cloned 3 logs'));
+    $this->submitForm($edit_clone, $this->t('Clone'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log');
+    $this->assertSession()->pageTextContains($this->t('Cloned 3 logs'));

     $logs = $this->storage->loadMultiple();
-    $this->assertEqual(count($logs), 6, 'There are six logs in the system.');
+    $this->assertEquals(count($logs), 6, 'There are six logs in the system.');
     for ($i = 1; $i <= 3; $i++) {
       $expected_timestamps[] = $new_timestamp;
     }
@@ @@
     foreach ($logs as $log) {
       $log_timestamps[] = $log->get('timestamp')->value;
     }
-    $this->assertEqual($log_timestamps, $expected_timestamps, 'Timestamp on the new logs has been updated.');
+    $this->assertEquals($log_timestamps, $expected_timestamps, 'Timestamp on the new logs has been updated.');
   }

   /**
@@ @@
     $log->save();

     $num_of_logs = $this->storage->getQuery()->count()->execute();
-    $this->assertEqual($num_of_logs, 1, 'There is one log in the system.');
+    $this->assertEquals($num_of_logs, 1, 'There is one log in the system.');

     $edit = [];
     $edit['action'] = 'log_reschedule_action';
     $edit['log_bulk_form[0]'] = TRUE;
-    $this->drupalPostForm('admin/content/log', $edit, $this->t('Apply to selected items'));
-    $this->assertResponse(200);
-    $this->assertText($this->t('Are you sure you want to reschedule this log?'));
-    $this->assertText($this->t('New date'));
+    $this->drupalGet('admin/content/log');
+    $this->submitForm($edit, $this->t('Apply to selected items'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to reschedule this log?'));
+    $this->assertSession()->pageTextContains($this->t('New date'));

     $new_timestamp = strtotime(date('Y-n-j', strtotime('+1 day', $timestamp)));

@@ @@
     $edit_reschedule['date[month]'] = date('n', $new_timestamp);
     $edit_reschedule['date[year]'] = date('Y', $new_timestamp);
     $edit_reschedule['date[day]'] = date('j', $new_timestamp);
-    $this->drupalPostForm(NULL, $edit_reschedule, $this->t('Reschedule'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log');
-    $this->assertText($this->t('Rescheduled 1 log'));
+    $this->submitForm($edit_reschedule, $this->t('Reschedule'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log');
+    $this->assertSession()->pageTextContains($this->t('Rescheduled 1 log'));

     $logs = $this->storage->loadMultiple();
-    $this->assertEqual($num_of_logs, 1, 'There is one log in the system.');
+    $this->assertEquals($num_of_logs, 1, 'There is one log in the system.');
     $log = reset($logs);
-    $this->assertEqual($log->get('timestamp')->value, $new_timestamp, 'Timestamp on the log has changed.');
-    $this->assertEqual($log->get('status')->value, 'pending', 'Log has been set to pending.');
+    $this->assertEquals($log->get('timestamp')->value, $new_timestamp, 'Timestamp on the log has changed.');
+    $this->assertEquals($log->get('status')->value, 'pending', 'Log has been set to pending.');
   }

   /**
@@ @@
     }

     $num_of_logs = $this->storage->getQuery()->count()->execute();
-    $this->assertEqual($num_of_logs, 3, 'There are three logs in the system.');
+    $this->assertEquals($num_of_logs, 3, 'There are three logs in the system.');

     $edit = [];
     $edit['action'] = 'log_reschedule_action';
@@ @@
     for ($i = 0; $i < 3; $i++) {
       $edit['log_bulk_form[' . $i . ']'] = TRUE;
     }
-    $this->drupalPostForm('admin/content/log', $edit, $this->t('Apply to selected items'));
-    $this->assertResponse(200);
-    $this->assertText($this->t('Are you sure you want to reschedule these logs?'));
-    $this->assertText($this->t('New date'));
+    $this->drupalGet('admin/content/log');
+    $this->submitForm($edit, $this->t('Apply to selected items'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to reschedule these logs?'));
+    $this->assertSession()->pageTextContains($this->t('New date'));

     $new_timestamp = strtotime('+1 day', $timestamp);

@@ @@
     $edit_reschedule['date[month]'] = date('n', $new_timestamp);
     $edit_reschedule['date[year]'] = date('Y', $new_timestamp);
     $edit_reschedule['date[day]'] = date('j', $new_timestamp);
-    $this->drupalPostForm(NULL, $edit_reschedule, $this->t('Reschedule'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log');
-    $this->assertText($this->t('Rescheduled 3 logs'));
+    $this->submitForm($edit_reschedule, $this->t('Reschedule'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log');
+    $this->assertSession()->pageTextContains($this->t('Rescheduled 3 logs'));

     $logs = $this->storage->loadMultiple();
-    $this->assertEqual(count($logs), 3, 'There are three logs in the system.');
+    $this->assertEquals(count($logs), 3, 'There are three logs in the system.');
     foreach ($logs as $log) {
-      $this->assertEqual($log->get('timestamp')->value, $new_timestamp, 'Timestamp on the log has changed.');
-      $this->assertEqual($log->get('status')->value, 'pending', 'Log has been set to pending.');
+      $this->assertEquals($log->get('timestamp')->value, $new_timestamp, 'Timestamp on the log has changed.');
+      $this->assertEquals($log->get('status')->value, 'pending', 'Log has been set to pending.');
     }
   }

@@ @@
     $log->save();

     $num_of_logs = $this->storage->getQuery()->count()->execute();
-    $this->assertEqual($num_of_logs, 1, 'There is one log in the system.');
+    $this->assertEquals($num_of_logs, 1, 'There is one log in the system.');

     $edit = [];
     $edit['action'] = 'log_reschedule_action';
     $edit['log_bulk_form[0]'] = TRUE;
-    $this->drupalPostForm('admin/content/log', $edit, $this->t('Apply to selected items'));
-    $this->assertResponse(200);
-    $this->assertText($this->t('Are you sure you want to reschedule this log?'));
-    $this->assertText($this->t('New date'));
+    $this->drupalGet('admin/content/log');
+    $this->submitForm($edit, $this->t('Apply to selected items'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to reschedule this log?'));
+    $this->assertSession()->pageTextContains($this->t('New date'));

     $edit_reschedule = [];
     $edit_reschedule['type_of_date'] = 1;
-    $this->drupalPostForm(NULL, $edit_reschedule, $this->t('Reschedule'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log/reschedule');
-    $this->assertText($this->t('Please enter the amount of time for rescheduling.'));
+    $this->submitForm($edit_reschedule, $this->t('Reschedule'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log/reschedule');
+    $this->assertSession()->pageTextContains($this->t('Please enter the amount of time for rescheduling.'));

     $new_timestamp = strtotime('+1 day', $timestamp);

@@ @@
     $edit_reschedule['type_of_date'] = 1;
     $edit_reschedule['amount'] = 1;
     $edit_reschedule['time'] = 'day';
-    $this->drupalPostForm(NULL, $edit_reschedule, $this->t('Reschedule'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log');
-    $this->assertText($this->t('Rescheduled 1 log'));
+    $this->submitForm($edit_reschedule, $this->t('Reschedule'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log');
+    $this->assertSession()->pageTextContains($this->t('Rescheduled 1 log'));

     $logs = $this->storage->loadMultiple();
-    $this->assertEqual($num_of_logs, 1, 'There is one log in the system.');
+    $this->assertEquals($num_of_logs, 1, 'There is one log in the system.');
     $log = reset($logs);
-    $this->assertEqual($log->get('timestamp')->value, $new_timestamp, 'Timestamp on the log has changed.');
-    $this->assertEqual($log->get('status')->value, 'pending', 'Log has been set to pending.');
+    $this->assertEquals($log->get('timestamp')->value, $new_timestamp, 'Timestamp on the log has changed.');
+    $this->assertEquals($log->get('status')->value, 'pending', 'Log has been set to pending.');
   }

   /**
@@ @@
     }

     $num_of_logs = $this->storage->getQuery()->count()->execute();
-    $this->assertEqual($num_of_logs, 3, 'There are three logs in the system.');
+    $this->assertEquals($num_of_logs, 3, 'There are three logs in the system.');

     $edit = [];
     $edit['action'] = 'log_reschedule_action';
@@ @@
     for ($i = 0; $i < 3; $i++) {
       $edit['log_bulk_form[' . $i . ']'] = TRUE;
     }
-    $this->drupalPostForm('admin/content/log', $edit, $this->t('Apply to selected items'));
-    $this->assertResponse(200);
-    $this->assertText($this->t('Are you sure you want to reschedule these logs?'));
-    $this->assertText($this->t('New date'));
+    $this->drupalGet('admin/content/log');
+    $this->submitForm($edit, $this->t('Apply to selected items'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to reschedule these logs?'));
+    $this->assertSession()->pageTextContains($this->t('New date'));

     $edit_reschedule = [];
     $edit_reschedule['type_of_date'] = 1;
     $edit_reschedule['amount'] = -1;
     $edit_reschedule['time'] = 'month';
-    $this->drupalPostForm(NULL, $edit_reschedule, $this->t('Reschedule'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log');
-    $this->assertText($this->t('Rescheduled 3 logs'));
+    $this->submitForm($edit_reschedule, $this->t('Reschedule'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log');
+    $this->assertSession()->pageTextContains($this->t('Rescheduled 3 logs'));

     $logs = $this->storage->loadMultiple();
-    $this->assertEqual(count($logs), 3, 'There are three logs in the system.');
+    $this->assertEquals(count($logs), 3, 'There are three logs in the system.');
     $log_timestamps = [];
     foreach ($logs as $log) {
       $log_timestamps[] = $log->get('timestamp')->value;
     }
-    $this->assertEqual($log_timestamps, $expected_timestamps, 'Logs have been rescheduled');
+    $this->assertEquals($log_timestamps, $expected_timestamps, 'Logs have been rescheduled');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertResponseRector
 * AssertTextRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

