diff --git a/business_rules.drush.inc b/business_rules.drush.inc
index 3a8fb5a..be5e9f0 100644
--- a/business_rules.drush.inc
+++ b/business_rules.drush.inc
@@ -1,12 +1,12 @@
 <?php
 
+use Symfony\Contracts\EventDispatcher\Event;
 /**
  * @file
  * Business Rules module integration with Drush 8 and earlier.
  */
 
 use Drupal\business_rules\Events\BusinessRulesDrushEvent;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Implements hook_drush_init().
diff --git a/src/Entity/BusinessRulesItemBase.php b/src/Entity/BusinessRulesItemBase.php
index b01ec23..4b30744 100644
--- a/src/Entity/BusinessRulesItemBase.php
+++ b/src/Entity/BusinessRulesItemBase.php
@@ -322,7 +322,7 @@ abstract class BusinessRulesItemBase extends ConfigEntityBase implements ItemInt
     if (!$this->isNew()) {
       // Dispatch an event about the item deletion.
       $event = new BusinessRulesEvent($this);
-      $this->eventDispatcher->dispatch('business_rules.item_pos_delete', $event);
+      $this->eventDispatcher->dispatch($event, 'business_rules.item_pos_delete');
     }
   }
 
diff --git a/src/EventSubscriber/BusinessRulesListener.php b/src/EventSubscriber/BusinessRulesListener.php
index 207eba7..d4fa447 100644
--- a/src/EventSubscriber/BusinessRulesListener.php
+++ b/src/EventSubscriber/BusinessRulesListener.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\EventSubscriber;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\Events\BusinessRulesDrushEvent;
 use Drupal\business_rules\Util\BusinessRulesProcessor;
@@ -11,7 +12,6 @@ use Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
@@ -184,7 +184,7 @@ class BusinessRulesListener implements EventSubscriberInterface {
   /**
    * Rebuilds container when dynamic rule eventsubscribers are not registered.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   The event object.
    * @param string $event_name
    *   The event name.
@@ -220,7 +220,7 @@ class BusinessRulesListener implements EventSubscriberInterface {
   /**
    * Run the necessary commands on terminate event.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   The terminate event.
    */
   public function onTerminate(Event $event) {
diff --git a/src/EventSubscriber/KernelRequestListener.php b/src/EventSubscriber/KernelRequestListener.php
index f06c8bd..833b607 100644
--- a/src/EventSubscriber/KernelRequestListener.php
+++ b/src/EventSubscriber/KernelRequestListener.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\business_rules\EventSubscriber;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Symfony\Component\DependencyInjection\ContainerAwareInterface;
 use Symfony\Component\DependencyInjection\ContainerAwareTrait;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
 
@@ -31,7 +31,7 @@ class KernelRequestListener implements EventSubscriberInterface, ContainerAwareI
   /**
    * Create a new event for BusinessRules plugin KernelRequest.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   The event.
    */
   public function onKernelRequest(Event $event) {
diff --git a/src/Util/BusinessRulesProcessor.php b/src/Util/BusinessRulesProcessor.php
index e09b587..b9551e2 100644
--- a/src/Util/BusinessRulesProcessor.php
+++ b/src/Util/BusinessRulesProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Util;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Entity\Action;
 use Drupal\business_rules\Entity\BusinessRule;
@@ -19,7 +20,6 @@ use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\dbug\Dbug;
 use Drupal\Core\Messenger\MessengerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Class BusinessRulesProcessor.
@@ -186,7 +186,7 @@ class BusinessRulesProcessor {
     }
 
     // Dispatch a event before start the processing.
-    $this->eventDispatcher->dispatch('business_rules.before_process_event', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.before_process_event');
 
     if (!$event->hasArgument('variables')) {
       $event->setArgument('variables', new VariablesSet());
@@ -200,7 +200,7 @@ class BusinessRulesProcessor {
     $this->saveDebugInfo();
 
     // Dispatch a event after processing the business rule.
-    $this->eventDispatcher->dispatch('business_rules.after_process_event', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.after_process_event');
   }
 
   /**
@@ -255,7 +255,7 @@ class BusinessRulesProcessor {
     $triggered_rules = [];
 
     // Dispatch a event before check the triggered rules.
-    $this->eventDispatcher->dispatch('business_rules.before_check_the_triggered_rules', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.before_check_the_triggered_rules');
 
     foreach ($rules as $rule) {
       $rule = new BusinessRule($rule);
@@ -268,7 +268,7 @@ class BusinessRulesProcessor {
     }
 
     // Dispatch a event after check the triggered rules.
-    $this->eventDispatcher->dispatch('business_rules.after_check_the_triggered_rules', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.after_check_the_triggered_rules');
 
     return $triggered_rules;
   }
@@ -313,7 +313,7 @@ class BusinessRulesProcessor {
       $array = (object) $array;
       $event = new Event($array);
       // Dispatch a event before save debug info block.
-      $this->eventDispatcher->dispatch('business_rules.before_save_debug_info_block', $event);
+      $this->eventDispatcher->dispatch($event, 'business_rules.before_save_debug_info_block');
       $array = (array) $array;
 
       $key_value->set($session_id, $array);
@@ -334,7 +334,7 @@ class BusinessRulesProcessor {
    */
   public function processItems(array $items, BusinessRulesEvent $event, $parent_id) {
     // Dispatch a event before process business rule items.
-    $this->eventDispatcher->dispatch('business_rules.before_process_items', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.before_process_items');
 
     /** @var \Drupal\business_rules\BusinessRulesItemObject $item */
     foreach ($items as $item) {
@@ -388,7 +388,7 @@ class BusinessRulesProcessor {
     }
 
     // Dispatch a event after process business rule items.
-    $this->eventDispatcher->dispatch('business_rules.after_process_items', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.after_process_items');
   }
 
   /**
@@ -495,7 +495,7 @@ class BusinessRulesProcessor {
   public function executeAction(Action $action, BusinessRulesEvent $event) {
 
     // Dispatch a event before execute an action.
-    $this->eventDispatcher->dispatch('business_rules.before_execute_action', new Event($event, $action));
+    $this->eventDispatcher->dispatch(new Event($event, $action), 'business_rules.before_execute_action');
 
     $action_variables = $action->getVariables();
     $this->evaluateVariables($action_variables, $event);
@@ -504,7 +504,7 @@ class BusinessRulesProcessor {
     $this->debugArray['action_result'][$this->ruleBeingExecuted->id()][$action->id()] = $result;
 
     // Dispatch a event after execute an action.
-    $this->eventDispatcher->dispatch('business_rules.after_execute_action', new Event($event, $action));
+    $this->eventDispatcher->dispatch(new Event($event, $action), 'business_rules.after_execute_action');
 
     return $result;
   }
@@ -525,7 +525,7 @@ class BusinessRulesProcessor {
   public function isConditionValid(Condition $condition, BusinessRulesEvent $event) {
 
     // Dispatch a event before check if condition is valid.
-    $this->eventDispatcher->dispatch('business_rules.before_check_if_condition_is_valid', new Event($event, $condition));
+    $this->eventDispatcher->dispatch(new Event($event, $condition), 'business_rules.before_check_if_condition_is_valid');
 
     $condition_variables = $condition->getVariables();
     $this->evaluateVariables($condition_variables, $event);
@@ -533,7 +533,7 @@ class BusinessRulesProcessor {
     $result = $condition->isReverse() ? !$result : $result;
 
     // Dispatch a event after check if condition is valid.
-    $this->eventDispatcher->dispatch('business_rules.after_check_if_condition_is_valid', new Event($event, $condition));
+    $this->eventDispatcher->dispatch(new Event($event, $condition), 'business_rules.after_check_if_condition_is_valid');
 
     return $result;
 
@@ -662,7 +662,7 @@ class BusinessRulesProcessor {
    */
   public function evaluateVariables(VariablesSet $variablesSet, BusinessRulesEvent $event) {
     // Dispatch a event before evaluate variables.
-    $this->eventDispatcher->dispatch('business_rules.before_evaluate_variables', new Event($event, $variablesSet));
+    $this->eventDispatcher->dispatch(new Event($event, $variablesSet), 'business_rules.before_evaluate_variables');
 
     /** @var \Drupal\business_rules\VariableObject $variable */
     /** @var \Drupal\business_rules\VariablesSet $eventVariables */
@@ -679,7 +679,7 @@ class BusinessRulesProcessor {
     }
 
     // Dispatch a event after evaluate variables.
-    $this->eventDispatcher->dispatch('business_rules.after_evaluate_variables', new Event($event, $variablesSet));
+    $this->eventDispatcher->dispatch(new Event($event, $variablesSet), 'business_rules.after_evaluate_variables');
   }
 
   /**
diff --git a/tests/src/FunctionalJavascript/DependentFieldsView.php b/tests/src/FunctionalJavascript/DependentFieldsView.php
index eb0ba07..c2f9fc5 100644
--- a/tests/src/FunctionalJavascript/DependentFieldsView.php
+++ b/tests/src/FunctionalJavascript/DependentFieldsView.php
@@ -49,7 +49,7 @@ class DependentFieldsView extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create terms in the vocabulary.
diff --git a/tests/src/FunctionalJavascript/ParagraphsAjaxSupport.php b/tests/src/FunctionalJavascript/ParagraphsAjaxSupport.php
index d3dfd7a..c751c29 100644
--- a/tests/src/FunctionalJavascript/ParagraphsAjaxSupport.php
+++ b/tests/src/FunctionalJavascript/ParagraphsAjaxSupport.php
@@ -49,7 +49,7 @@ class ParagraphsAjaxSupport extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create terms in the vocabulary.
diff --git a/tests/src/Kernel/BusinessRulesProcessorTest.php b/tests/src/Kernel/BusinessRulesProcessorTest.php
index aa51ae8..1f9ac3f 100644
--- a/tests/src/Kernel/BusinessRulesProcessorTest.php
+++ b/tests/src/Kernel/BusinessRulesProcessorTest.php
@@ -36,7 +36,7 @@ class BusinessRulesProcessorTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Set up the service container.
diff --git a/tests/src/Unit/ConfigEntityCalculateDependencyTest.php b/tests/src/Unit/ConfigEntityCalculateDependencyTest.php
index 3fd5967..1499ef7 100644
--- a/tests/src/Unit/ConfigEntityCalculateDependencyTest.php
+++ b/tests/src/Unit/ConfigEntityCalculateDependencyTest.php
@@ -50,7 +50,7 @@ class ConfigEntityCalculateDependencyTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $entityStorage = $this->createMock(EntityStorageInterface::class);
     $entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
     $this->businessRulesActionManager = $this->createMock(BusinessRulesActionManager::class);
