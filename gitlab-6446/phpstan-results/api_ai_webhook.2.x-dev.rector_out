modules/contrib/api_ai_webhook/api_ai_webhook.install
modules/contrib/api_ai_webhook/src/EventSubscriber/ResponseEventSubscriber.php
modules/contrib/api_ai_webhook/api_ai_webhook.module
modules/contrib/api_ai_webhook/modules/chatbot_api_apiai/chatbot_api_apiai.module
modules/contrib/api_ai_webhook/modules/chatbot_api_apiai/src/ApiAiContextTrait.php
modules/contrib/api_ai_webhook/modules/chatbot_api_apiai/src/EventSubscriber/RequestSubscriber.php
modules/contrib/api_ai_webhook/src/Form/ModuleConfigurationForm.php
modules/contrib/api_ai_webhook/modules/chatbot_api_apiai/src/IntentRequestApiAiProxy.php
modules/contrib/api_ai_webhook/modules/chatbot_api_apiai/src/IntentResponseApiAiProxy.php
modules/contrib/api_ai_webhook/modules/chatbot_api_apiai/tests/src/Unit/IntentAttributeSetGetTest.php
modules/contrib/api_ai_webhook/src/Plugin/ChatbotApiEntities/PushHandler/ApiAiPushHandler.php
modules/contrib/api_ai_webhook/src/ApiAiEvent.php
modules/contrib/api_ai_webhook/src/Authentication/Provider/ApiAiAuth.php
modules/contrib/api_ai_webhook/tests/modules/api_ai_webhook_test/src/Plugin/Chatbot/Intent/UserInfo.php
modules/contrib/api_ai_webhook/src/Controller/ApiAiEndpointController.php
modules/contrib/api_ai_webhook/tests/src/Functional/ConfigurationTest.php
modules/contrib/api_ai_webhook/tests/src/Kernel/ChatbotIntentPluginTest.php
modules/contrib/api_ai_webhook/tests/src/Unit/ApiAiPushHandlerTest.php

5 files with changes
====================

1) modules/contrib/api_ai_webhook/src/ApiAiEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\api_ai_webhook;

+use Symfony\Contracts\EventDispatcher\Event;
 use DialogFlow\Model\Webhook\Request;
 use DialogFlow\Model\Webhook\Response;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Implements a new Symfony event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/api_ai_webhook/tests/src/Unit/ApiAiPushHandlerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\api_ai_webhook\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\api_ai_webhook\Plugin\ChatbotApiEntities\PushHandler\ApiAiPushHandler;
 use Drupal\chatbot_api_entities\Entity\EntityCollectionInterface;
 use Drupal\Tests\UnitTestCase;
@@ @@
  */
 class ApiAiPushHandlerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Tests api handler saves.
    */
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/api_ai_webhook/tests/src/Kernel/ChatbotIntentPluginTest.php:45

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['filter', 'user']);
     $this->installSchema('system', ['sequences']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/api_ai_webhook/tests/src/Functional/ConfigurationTest.php:38

    ---------- begin diff ----------
@@ @@
       'http_headers' => 'Lorem: ABC' . PHP_EOL . 'Ipsum: DEF',
     ];
     // Send the form.
-    $this->drupalPostForm(NULL, $edit, 'op');
+    $this->submitForm($edit, 'op');
     // Verify the saved message.
     $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/api_ai_webhook/src/EventSubscriber/ResponseEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\api_ai_webhook\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\JsonResponse;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;

 /**
  * Subscribe to the response in order to better handle Dialogflow errors.
@@ @@
    * This method is called whenever the kernel.response event is dispatched,
    * then we filter responses/requests coming form Dialogflow webhook.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The repose event.
    */
-  public function alterResponse(FilterResponseEvent $event) {
+  public function alterResponse(ResponseEvent $event) {
     if (rtrim($event->getRequest()->getPathInfo(), '/') === '/api.ai/webhook') {

       // Handle errors.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


 [OK] 5 files have been changed by Rector                                       

