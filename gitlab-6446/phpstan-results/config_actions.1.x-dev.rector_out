modules/contrib/config_actions/src/Plugin/ConfigActions/ConfigActionsChange.php
modules/contrib/config_actions/tests/src/Kernel/ConfigActionsSourceTest.php
modules/contrib/config_actions/config_actions.drush.inc
modules/contrib/config_actions/src/Plugin/ConfigActions/ConfigActionsDefault.php
modules/contrib/config_actions/config_actions.module
modules/contrib/config_actions/src/Plugin/ConfigActions/ConfigActionsDelete.php
modules/contrib/config_actions/src/Plugin/ConfigActions/ConfigActionsInclude.php
modules/contrib/config_actions/src/Annotation/ConfigActionsPlugin.php
modules/contrib/config_actions/src/Annotation/ConfigActionsSource.php
modules/contrib/config_actions/src/Plugin/ConfigActionsSource/ConfigActionsArray.php
modules/contrib/config_actions/src/Commands/ConfigActionsCommands.php
modules/contrib/config_actions/src/Plugin/ConfigActionsSource/ConfigActionsFile.php
modules/contrib/config_actions/src/Plugin/ConfigActionsSource/ConfigActionsId.php
modules/contrib/config_actions/src/ConfigActionsPluginBase.php
modules/contrib/config_actions/src/Plugin/ConfigActionsSource/ConfigActionsList.php
modules/contrib/config_actions/src/Plugin/ConfigActionsSource/ConfigActionsTemplate.php
modules/contrib/config_actions/tests/src/Unit/ConfigActionsPluginBaseTest.php
modules/contrib/config_actions/tests/src/Kernel/ConfigActionsModuleTest.php
modules/contrib/config_actions/tests/src/Unit/ConfigActionsTransformTest.php
modules/contrib/config_actions/tests/src/Kernel/ConfigActionsPluginTest.php
modules/contrib/config_actions/src/ConfigActionsPluginInterface.php
modules/contrib/config_actions/src/ConfigActionsPluginManager.php
modules/contrib/config_actions/src/ConfigActionsService.php
modules/contrib/config_actions/src/ConfigActionsServiceInterface.php
modules/contrib/config_actions/src/ConfigActionsSourceBase.php
modules/contrib/config_actions/src/ConfigActionsSourceInterface.php
modules/contrib/config_actions/src/ConfigActionsSourceManager.php
modules/contrib/config_actions/tests/src/Kernel/ConfigActionsServiceTest.php
modules/contrib/config_actions/src/ConfigActionsTransform.php
modules/contrib/config_actions/src/ConfigActionsValidateTrait.php
modules/contrib/config_actions/src/Plugin/ConfigActions/ConfigActionsAdd.php

8 files with changes
====================

1) modules/contrib/config_actions/tests/src/Unit/ConfigActionsPluginBaseTest.php:15

    ---------- begin diff ----------
@@ @@
 class ConfigActionsPluginBaseTest extends UnitTestCase {

   /**
-   * @var \Drupal\config_actions\ConfigActionsServiceInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\config_actions\ConfigActionsServiceInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $configActions;

@@ @@
    */
   protected $definition;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $container = new ContainerBuilder();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/config_actions/tests/src/Kernel/ConfigActionsSourceTest.php:49

    ---------- begin diff ----------
@@ @@
    */
   protected $logger;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installConfig('system');
     $this->sourceManager = $this->container->get('plugin.manager.config_actions_source');
@@ @@
     $source = 'field.field.node.image.yml';
     $options = [
       'source' => $source,
-      'base' => DRUPAL_ROOT . '/' . drupal_get_path('module', 'test_config_actions'),
+      'base' => DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath('test_config_actions'),

     ];
     /** @var \Drupal\config_actions\ConfigActionsSourceInterface $plugin */
@@ @@
     $this->assertEquals('node.@bundle@.@field_name@', $data['id']);

     // Test file saving
-    $path = DRUPAL_ROOT . drupal_get_path('module', 'test_config_actions');
+    $path = DRUPAL_ROOT . \Drupal::service('extension.list.module')->getPath('test_config_actions');
     $config_file = 'myactions.yml';
     $filename = $path . '/' . $config_file;
     if (file_exists($filename)) {
@@ @@

     // Next, perform the same test but instead of using the base_path, use
     // an absolute path in the source filename.
-    $base_path = $path . '/' . drupal_get_path('module', 'test_config_actions');
+    $base_path = $path . '/' . \Drupal::service('extension.list.module')->getPath('test_config_actions');
     $config_file = 'myactions.yml';
     $options = [
       'source' => $base_path . '/' . $config_file,
@@ @@
     ];
     $options = [
       'source' => $source,
-      'base' => DRUPAL_ROOT . '/' . drupal_get_path('module', 'test_config_actions'),
+      'base' => DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath('test_config_actions'),
     ];

     // First, test that the File is loaded first
@@ @@
     ];
     $options = [
       'source' => $source,
-      'base' => DRUPAL_ROOT . '/' . drupal_get_path('module', 'test_config_actions'),
+      'base' => DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath('test_config_actions'),
     ];

     /** @var \Drupal\config_actions\ConfigActionsSourceInterface $plugin */
@@ @@
     ];
     $options = [
       'source' => $source,
-      'base' => DRUPAL_ROOT . '/' . drupal_get_path('module', 'test_config_actions'),
+      'base' => DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath('test_config_actions'),
     ];

     /** @var \Drupal\config_actions\ConfigActionsSourceInterface $plugin */
@@ @@
     ];
     $options = [
       'source' => $source,
-      'base' => DRUPAL_ROOT . '/' . drupal_get_path('module', 'test_config_actions'),
+      'base' => DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath('test_config_actions'),
     ];

     /** @var \Drupal\config_actions\ConfigActionsSourceInterface $plugin */
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/config_actions/tests/src/Kernel/ConfigActionsServiceTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('system');
     $this->installConfig('node');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/config_actions/tests/src/Kernel/ConfigActionsPluginTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('system');
     $this->installConfig('node');
@@ @@
       'replace' => $replace,
     ];

-    $path = drupal_get_path('module', 'test_config_actions') . '/config/templates';
+    $path = \Drupal::service('extension.list.module')->getPath('test_config_actions') . '/config/templates';
     $source = $path . '/field.storage.node.image.yml';
     $orig_config = Yaml::decode(file_get_contents($source));
     $orig_config = ConfigActionsTransform::replace($orig_config, $replace);
@@ @@
       'replace' => $replace,
     ];

-    $path = drupal_get_path('module', 'test_config_actions') . '/config/templates';
+    $path = \Drupal::service('extension.list.module')->getPath('test_config_actions') . '/config/templates';
     $source = $path . '/field.field.node.image.yml';
     $orig_config = Yaml::decode(file_get_contents($source));
     $orig_config_article = ConfigActionsTransform::replace($orig_config, $replace_article);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/config_actions/tests/src/Kernel/ConfigActionsModuleTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->configActions = \Drupal::service('config_actions');
     parent::installConfig(['system']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/config_actions/src/ConfigActionsService.php:360

    ---------- begin diff ----------
@@ @@
         $actions = $this->readActions($action_file['path']);
         // Rebase so any includes look in the specified module.
         $actions['module'] = !empty($actions['module']) ? $actions['module'] : $action_file['module'];
-        $actions['base'] = DRUPAL_ROOT . '/' . drupal_get_path('module', $actions['module']);
+        $actions['base'] = DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath($actions['module']);
         // Use file key as default source.
         $actions['source'] = !empty($actions['source']) ? $actions['source'] : $action_file['file'];
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector


7) modules/contrib/config_actions/src/ConfigActionsPluginBase.php:283

    ---------- begin diff ----------
@@ @@
     $result = [];

     if (!empty($this->module)) {
-      $this->base = DRUPAL_ROOT . '/' . drupal_get_path('module', $this->module);
+      $this->base = DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath($this->module);
     }

     // Perform any property substitution in the loaded defaults.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/config_actions/config_actions.module:18

    ---------- begin diff ----------
@@ @@
     return;
   }
   foreach ($modules as $module_name) {
-    $action_dir = DRUPAL_ROOT . '/' . drupal_get_path('module', $module_name) . '/' . ConfigActionsServiceInterface::CONFIG_ACTIONS_CONFIG_DIR;
+    $action_dir = DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath($module_name) . '/' . ConfigActionsServiceInterface::CONFIG_ACTIONS_CONFIG_DIR;
     if (is_dir($action_dir)) {
       $configActions = \Drupal::service('config_actions');
       // Enable autoExecute mode to skip any actions marked with "auto:false"
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 8 files have been changed by Rector                                       

