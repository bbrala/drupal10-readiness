modules/contrib/poool/poool.api.php
modules/contrib/poool/src/PooolHelperService.php
modules/contrib/poool/poool.module
modules/contrib/poool/src/Component/Render/PooolJavaScriptSnippet.php
modules/contrib/poool/src/Event/PooolEvents.php
modules/contrib/poool/src/Event/PooolUserIsPremiumEvent.php
modules/contrib/poool/src/Form/PooolSettingsForm.php
modules/contrib/poool/src/Manager/PooolManager.php
modules/contrib/poool/src/Plugin/DataType/Poool.php
modules/contrib/poool/src/Plugin/DataType/PooolInterface.php
modules/contrib/poool/src/Plugin/Field/FieldFormatter/PooolEmptyFormatter.php
modules/contrib/poool/src/Plugin/Field/FieldType/PooolFieldItem.php
modules/contrib/poool/src/Plugin/Field/FieldWidget/PooolDefaultWidget.php

3 files with changes
====================

1) modules/contrib/poool/src/PooolHelperService.php:40

    ---------- begin diff ----------
@@ @@
    */
   public function userIsPremium(AccountProxyInterface $account) {
     $event = new PooolUserIsPremiumEvent($account);
-    $this->eventDispatcher->dispatch(PooolEvents::POOOL_USER_IS_PREMIUM, $event);
+    $this->eventDispatcher->dispatch($event, PooolEvents::POOOL_USER_IS_PREMIUM);
     return $event->isPremium();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


2) modules/contrib/poool/src/Event/PooolUserIsPremiumEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\poool\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Session\AccountProxyInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the pool user is premium event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/poool/poool.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Cache\Cache;
+use Drupal\poool\Component\Render\PooolJavaScriptSnippet;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\Entity\EntityViewDisplay;
 /**
  * Implements hook_page_attachments().
  *
@@ @@
   $request = \Drupal::request();

   // Add module cache tags.
-  $page['#cache']['tags'] = \Drupal\Core\Cache\Cache::mergeTags(isset($page['#cache']['tags']) ? $page['#cache']['tags'] : [], $config->getCacheTags());
+  $page['#cache']['tags'] = Cache::mergeTags(isset($page['#cache']['tags']) ? $page['#cache']['tags'] : [], $config->getCacheTags());

   // Get page http status code for visibility filtering.
   $status = NULL;
@@ @@
     $page['#attached']['html_head'][] = [
       [
         '#tag' => 'script',
-        '#value' => new \Drupal\poool\Component\Render\PooolJavaScriptSnippet($script),
+        '#value' => new PooolJavaScriptSnippet($script),
       ],
       'poool_tracking_script',
     ];
@@ @@
     $page_entity = _poool_get_page_entity();
     /** @var \Drupal\poool\Manager\PooolManager $pooolManager */
     $pooolManager = \Drupal::service('poool.manager');
-    $entity_settings = $page_entity instanceof \Drupal\Core\Entity\ContentEntityInterface ? $pooolManager->getPooolSettingsForEntity($page_entity) : NULL;
+    $entity_settings = $page_entity instanceof ContentEntityInterface ? $pooolManager->getPooolSettingsForEntity($page_entity) : NULL;
     if (isset($entity_settings['page-type'])) {
       return $entity_settings['page-type'];
     }
@@ @@
     $entity = $variables['element']['#object'];
     $view_mode = $variables['element']['#view_mode'];
     $field_name = $variables['element']['#field_name'];
-    $entity_display = \Drupal\Core\Entity\Entity\EntityViewDisplay::collectRenderDisplay($entity, $view_mode);
+    $entity_display = EntityViewDisplay::collectRenderDisplay($entity, $view_mode);
     $field_display = $entity_display->getComponent($field_name);

     if (isset($field_display['third_party_settings']['poool']['poool_tag_placed']) && $field_display['third_party_settings']['poool']['poool_tag_placed']) {
@@ @@
       if (!$pooolHelper->userIsPremium($currentUser)) {
         /** @var \Drupal\poool\Manager\PooolManager $pooolManager */
         $pooolManager = \Drupal::service('poool.manager');
-        $entity_settings = $entity instanceof \Drupal\Core\Entity\ContentEntityInterface ? $pooolManager->getPooolSettingsForEntity($entity) : NULL;
+        $entity_settings = $entity instanceof ContentEntityInterface ? $pooolManager->getPooolSettingsForEntity($entity) : NULL;
         $variables['attributes']['data-poool'] = $entity_settings['percent'] ?? $field_display['third_party_settings']['poool']['poool_visibility_percent'];
         $variables['attributes']['data-poool-mode'] = $entity_settings['mode'] ?? $field_display['third_party_settings']['poool']['poool_mode'];
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

