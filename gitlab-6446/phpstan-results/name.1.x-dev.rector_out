modules/contrib/name/name.api.php
modules/contrib/name/name.module
modules/contrib/name/src/NameFormatParser.php
modules/contrib/name/src/Traits/NameFormSettingsHelperTrait.php
modules/contrib/name/name.install
modules/contrib/name/tests/src/Functional/NameAdminTest.php
modules/contrib/name/src/NameFormatter.php
modules/contrib/name/src/NameFormatterInterface.php
modules/contrib/name/name.post_update.php
modules/contrib/name/src/NameGenerator.php
modules/contrib/name/name.theme.inc
modules/contrib/name/name.views.inc
modules/contrib/name/src/NameGeneratorInterface.php
modules/contrib/name/src/Controller/NameAutocompleteController.php
modules/contrib/name/src/NameListFormatInterface.php
modules/contrib/name/src/NameListFormatListBuilder.php
modules/contrib/name/src/NameOptionsProvider.php
modules/contrib/name/src/Element/Name.php
modules/contrib/name/tests/src/Functional/NameFieldTest.php
modules/contrib/name/src/NameSettingsForm.php
modules/contrib/name/src/Entity/NameFormat.php
modules/contrib/name/src/Entity/NameListFormat.php
modules/contrib/name/src/NameUnicodeExtras.php
modules/contrib/name/src/Feeds/Target/NameTarget.php
modules/contrib/name/src/Form/NameFormatDeleteConfirm.php
modules/contrib/name/src/Plugin/Field/FieldFormatter/NameFormatter.php
modules/contrib/name/src/Form/NameFormatForm.php
modules/contrib/name/src/Form/NameListFormatDeleteConfirm.php
modules/contrib/name/src/Form/NameListFormatForm.php
modules/contrib/name/src/NameAutocomplete.php
modules/contrib/name/tests/src/Functional/NameNodeTokenReplaceTest.php
modules/contrib/name/src/Plugin/Field/FieldType/NameItem.php
modules/contrib/name/src/NameFormatAccessController.php
modules/contrib/name/src/NameFormatInterface.php
modules/contrib/name/src/NameFormatListBuilder.php
modules/contrib/name/tests/src/Functional/NameOptionsProviderTest.php
modules/contrib/name/src/Plugin/Field/FieldWidget/NameWidget.php
modules/contrib/name/tests/src/Functional/NameTestBase.php
modules/contrib/name/tests/src/Functional/NameTestTrait.php
modules/contrib/name/tests/src/Functional/NameWidgetTest.php
modules/contrib/name/src/Plugin/diff/Field/NameFieldBuilder.php
modules/contrib/name/src/Plugin/migrate/cckfield/NameItem.php
modules/contrib/name/src/Plugin/views/filter/Fulltext.php
modules/contrib/name/src/Render/NameListFormattableMarkup.php
modules/contrib/name/src/Traits/NameAdditionalPreferredTrait.php
modules/contrib/name/tests/src/Kernel/NameAutocompleteTest.php
modules/contrib/name/src/Traits/NameFieldSettingsTrait.php
modules/contrib/name/tests/src/Kernel/NameUserTest.php
modules/contrib/name/src/Traits/NameFormDisplaySettingsTrait.php
modules/contrib/name/tests/src/Unit/NameFormatParserTest.php
modules/contrib/name/tests/src/Unit/NameUnicodeExtrasTest.php

11 files with changes
=====================

1) modules/contrib/name/name.install:77

    ---------- begin diff ----------
@@ @@
 function name_update_8203() {
   $config_factory = \Drupal::configFactory();

-  $config_path = drupal_get_path('module', 'name') . '/config/install/name.generate.components.yml';
+  $config_path = \Drupal::service('extension.list.module')->getPath('name') . '/config/install/name.generate.components.yml';
   $data = Yaml::parse(file_get_contents($config_path));
   $config = $config_factory->getEditable('name.generate.components');
   $config->set('components', $data['components']);
@@ @@
   $config->set('gender', $data['gender']);
   $config->save(TRUE);

-  $config_path = drupal_get_path('module', 'name') . '/config/install/name.generate.preferred.yml';
+  $config_path = \Drupal::service('extension.list.module')->getPath('name') . '/config/install/name.generate.preferred.yml';
   $data = Yaml::parse(file_get_contents($config_path));
   $config = $config_factory->getEditable('name.generate.preferred');
   $config->set('preferred', $data['preferred']);
@@ @@
     $old_config->delete();
   }
   else {
-    $config_path = drupal_get_path('module', 'name') . '/config/install/name.generate.examples.yml';
+    $config_path = \Drupal::service('extension.list.module')->getPath('name') . '/config/install/name.generate.examples.yml';
     $data = Yaml::parse(file_get_contents($config_path));
     $config = $config_factory->getEditable('name.generate.examples');
     $config->set('examples', $data['examples']);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


2) modules/contrib/name/name.module:481

    ---------- begin diff ----------
@@ @@
         '#required' => $show_component_required_marker,
         '#title_display' => 'before',
       ];
-      $element['#title'] = render($label);
+      $element['#title'] = \Drupal::service('renderer')->render($label);
       break;

     case 'placeholder':
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector


3) modules/contrib/name/tests/src/Unit/NameFormatParserTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $test_settings = [
       'name.settings' => [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/name/tests/src/Kernel/NameUserTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(self::$modules);
     $this->installSchema('system', ['sequences']);
@@ @@
       'entity_type' => 'user',
       'bundle' => 'user',
     ])->save();
-    $this->assertIdentical('', \Drupal::config('name.settings')->get('user_preferred'));
+    $this->assertSame('', \Drupal::config('name.settings')->get('user_preferred'));

     FieldStorageConfig::create([
       'field_name' => 'field_name_test',
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/name/tests/src/Kernel/NameAutocompleteTest.php:45

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(self::$modules);
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/name/tests/src/Functional/NameWidgetTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create content-type: page.
@@ @@
       'field_name' => 'name_test',
       'new_storage_type' => 'name',
     ];
+    $this->drupalGet('admin/structure/types/manage/page/fields/add-field');

-    $this->drupalPostForm('admin/structure/types/manage/page/fields/add-field', $new_name_field, t('Save and continue'));
+    $this->submitForm($new_name_field, t('Save and continue'));
     $storage_settings = [];
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test/storage', $storage_settings, t('Save field settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test/storage');
+    $this->submitForm($storage_settings, t('Save field settings'));
     $this->resetAll();

     // Set up a field of each label display and test it shows.
@@ @@

       'settings[component_layout]' => 'default',
     ];
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');

-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->submitForm($field_settings, t('Save settings'));

     $this->drupalGet('node/add/page');

@@ @@
     // Test the language layouts.
     $this->verbose('Testing asian');
     $field_settings['settings[component_layout]'] = 'asian';
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $this->drupalGet('node/add/page');
     $this->assertFieldSettings($field_settings);

     $this->verbose('Testing eastern');
     $field_settings['settings[component_layout]'] = 'eastern';
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $this->drupalGet('node/add/page');
     $this->assertFieldSettings($field_settings);

     $this->verbose('Testing german');
     $field_settings['settings[component_layout]'] = 'german';
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $this->drupalGet('node/add/page');
     $this->assertFieldSettings($field_settings);

@@ @@
       // 'settings[credentials_inline]' => TRUE,
       // 'settings[component_layout]' => 'default',
     ] + $field_settings;
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $this->drupalGet('node/add/page');
     foreach (_name_component_keys() as $component) {
       $this->assertComponentSettings($component, $field_settings);
@@ @@
    */
   protected function assertComponentSettings($key, array $settings) {
     $xpath = '//div[contains(@class,:value)]';
-    $elements = $this->xpath($this->buildXPathQuery($xpath, [':value' => "name-{$key}-wrapper"]));
+    $elements = $this->xpath($this->assertSession()->buildXPathQuery($xpath, [':value' => "name-{$key}-wrapper"]));
     $this->assertNotEmpty($elements, "Component $key field found.");
     $object = reset($elements);

@@ @@
    */
   protected function constructFieldXpathByTypeAndAttribute($type, $attribute, $value) {
     $xpath = '//' . $type . '[@' . $attribute . '=:value]';
-    return $this->buildXPathQuery($xpath, [':value' => $value]);
+    return $this->assertSession()->buildXPathQuery($xpath, [':value' => $value]);
   }

 }
    ----------- end diff -----------

Applied rules:
 * BuildXPathQueryRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/name/tests/src/Functional/NameTestBase.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->webUser = $this->drupalCreateUser([]);
     $this->adminUser = $this->drupalCreateUser([
@@ @@
   protected function assertNameFormats($name_components, $type, $object, array $names, array $options = []) {
     foreach ($names as $format => $expected) {
       $value = \Drupal::service('name.format_parser')->parse($name_components, $format);
-      $this->assertIdentical($value, $expected, t("Name value for '@name' was '@actual', expected value '@expected'. Components were: %components", [
+      $this->assertSame($value, $expected, t("Name value for '@name' was '@actual', expected value '@expected'. Components were: %components", [
         '@name' => $format,
         '@actual' => $value,
         '@expected' => $expected,
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/name/tests/src/Functional/NameOptionsProviderTest.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->entityListener = \Drupal::service('entity_type.listener');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/name/tests/src/Functional/NameNodeTokenReplaceTest.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->interfaceLanguage = \Drupal::languageManager()->getCurrentLanguage();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/name/tests/src/Functional/NameFieldTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create content-type: page.
@@ @@
       'field_name' => 'name_test',
       'new_storage_type' => 'name',
     ];
+    $this->drupalGet('admin/structure/types/manage/page/fields/add-field');

-    $this->drupalPostForm('admin/structure/types/manage/page/fields/add-field', $new_name_field, t('Save and continue'));
+    $this->submitForm($new_name_field, t('Save and continue'));
     $storage_settings = [];
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test/storage', $storage_settings, t('Save field settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test/storage');
+    $this->submitForm($storage_settings, t('Save field settings'));
     $this->resetAll();

     // Required test.
@@ @@
     foreach ($this->nameGetFieldStorageSettingsCheckboxes() as $key => $value) {
       $field_settings[$key] = FALSE;
     }
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');

-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->submitForm($field_settings, t('Save settings'));

     $n = _name_translations();
     $required_messages = [
@@ @@
       ]),
     ];
     foreach ($required_messages as $message) {
-      $this->assertText($message);
+      $this->assertSession()->pageTextContains($message);
     }
     $field_settings = [
       'settings[components][title]' => FALSE,
@@ @@
       'settings[generational_options]' => "-- --\nJr.\nSr.\nI\nII\nIII\nIV\nV\nVI\nVII\nVIII\nIX\nX\n[vocabulary:123]",
     ];
     $this->resetAll();
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));

     $required_messages = [
       t('@field must be higher than or equal to 1.', ['@field' => $n['title']]),
@@ @@
       ]),
     ];
     foreach ($required_messages as $message) {
-      $this->assertText($message);
+      $this->assertSession()->pageTextContains($message);
     }

     // Make sure option lengths do not exceed the title lengths.
@@ @@
       'settings[generational_options]' => "AAAA\n-- --\nJr.\nSr.\nI\nII\nIII\nIV\nV\nVI\nVII\nVIII\nIX\nX\nBBBB",
     ];
     $this->resetAll();
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $required_messages = [
       t('The following options exceed the maximum allowed @field length: Aaaaa., Bbbbbbbb, Ccccc.', [
         '@field' => t('@title options', ['@title' => $n['title']]),
@@ @@
     ];

     foreach ($required_messages as $message) {
-      $this->assertText($message);
+      $this->assertSession()->pageTextContains($message);
     }

     // Make sure option have at least one valid option.
@@ @@
       'settings[generational_options]' => " \n-- --\n ",
     ];
     $this->resetAll();
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $required_messages = [
       t('@field are required.', ['@field' => t('@title options', ['@title' => $n['title']])]),
       t('@field are required.', ['@field' => t('@generational options', ['@generational' => $n['generational']])]),
     ];
     foreach ($required_messages as $message) {
-      $this->assertText($message);
+      $this->assertSession()->pageTextContains($message);
     }

     // Make sure option have at least one valid only have one default value.
@@ @@
       'settings[generational_options]' => "-- --\nJr.\nSr.\nI\nII\nIII\nIV\nV\nVI\n--",
     ];
     $this->resetAll();
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));
     $required_messages = [
       t('@field can only have one blank value assigned to it.', [
         '@field' => t('@title options', [
@@ @@
       ]),
     ];
     foreach ($required_messages as $message) {
-      $this->assertText($message);
+      $this->assertSession()->pageTextContains($message);
     }

     // Save the field again with the default values.
     $this->resetAll();
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $this->nameGetFieldStorageSettings(), t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($this->nameGetFieldStorageSettings(), t('Save settings'));

-    $this->assertText(t('Saved Test name configuration.'));
+    $this->assertSession()->pageTextContains(t('Saved Test name configuration.'));

     // First, check that field validation is working.
     $field_settings = [
@@ @@

     ];
     $this->resetAll();
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_name_test', $field_settings, t('Save settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');
+    $this->submitForm($field_settings, t('Save settings'));

     $required_messages = [
       t('Maximum length for @field must be higher than or equal to 1.', ['@field' => $n['title']]),
@@ @@
       ]),
     ];
     foreach ($required_messages as $message) {
-      $this->assertText($message);
+      $this->assertSession()->pageTextContains($message);
     }

     $field_settings = [
@@ @@
     $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test');

     foreach ($field_settings as $name => $value) {
-      $this->assertFieldByName($name, $value);
+      $this->assertSession()->fieldValueEquals($name, $value);
     }

     // Check help text display.
@@ @@
     $edit = [
       'description' => 'This is a description.',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save settings'));
+    $this->submitForm($edit, t('Save settings'));
     $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test/storage');
     $edit = [
       'cardinality' => 'number',
       'cardinality_number' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save field settings'));
+    $this->submitForm($edit, t('Save field settings'));
     $this->drupalGet('node/add/page');
-    $this->assertUniqueText('This is a description.', 'Field description is shown once when field cardinality is 1.');
+    $this->assertSession()->pageTextContainsOnce('This is a description.', 'Field description is shown once when field cardinality is 1.');

     $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test/storage');
     $edit = [
@@ @@
       'cardinality' => 'number',
       'cardinality_number' => 3,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save field settings'));
+    $this->submitForm($edit, t('Save field settings'));
     $this->drupalGet('node/add/page');
-    $this->assertUniqueText('This is a description.', 'Field description is shown once when field cardinality is 3.');
+    $this->assertSession()->pageTextContainsOnce('This is a description.', 'Field description is shown once when field cardinality is 3.');

     $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_name_test/storage');
     $edit = [
       'cardinality' => '-1',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save field settings'));
+    $this->submitForm($edit, t('Save field settings'));
     $this->drupalGet('node/add/page');
-    $this->assertUniqueText('This is a description.', 'Field description is shown once when field cardinality is unlimited.');
+    $this->assertSession()->pageTextContainsOnce('This is a description.', 'Field description is shown once when field cardinality is unlimited.');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertTextRector
 * AssertUniqueTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/name/tests/src/Functional/NameAdminTest.php:99

    ---------- begin diff ----------
@@ @@
       'name_settings[sep3]' => '',
     ];
     foreach ($default_values as $name => $value) {
-      $this->assertField($name, $value);
+      $this->assertSession()->fieldExists($name, $value);
     }
     // ID example.
-    $this->assertFieldById('edit-name-settings-sep1', ' ', t('Sep 1 default value.'));
+    $this->assertSession()->fieldValueEquals('edit-name-settings-sep1', ' ');

     $test_values = [
       'name_settings[sep1]' => '~',
@@ @@
       'name_settings[sep2]' => '^',
       'name_settings[sep3]' => '-',
     ];
-    $this->drupalPostForm('admin/config/regional/name/settings', $test_values, t('Save configuration'));
-    $this->assertText(t('The configuration options have been saved.'));
+    $this->drupalGet('admin/config/regional/name/settings');
+    $this->submitForm($test_values, t('Save configuration'));
+    $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));

     foreach ($test_values as $name => $value) {
-      $this->assertField($name, $value);
+      $this->assertSession()->fieldExists($name, $value);
     }

     // Delete all existing formats.
@@ @@
     });

     $this->drupalGet('admin/config/regional/name/add');
-    $this->assertRaw('Format string help', 'Testing the help fieldgroup');
+    $this->assertSession()->responseContains('Format string help');
     $values = ['label' => '', 'id' => '', 'pattern' => ''];
-    $this->drupalPostForm('admin/config/regional/name/add', $values, t('Save format'));
+    $this->drupalGet('admin/config/regional/name/add');
+    $this->submitForm($values, t('Save format'));
     foreach ([t('Name'), t('Machine-readable name'), t('Format')] as $title) {
-      $this->assertText(t('@field field is required', ['@field' => $title]));
+      $this->assertSession()->pageTextContains(t('@field field is required', ['@field' => $title]));
     }
     $values = [
       'label' => 'given',
@@ @@
       'id' => '1234567890abcdefghijklmnopqrstuvwxyz_',
       'pattern' => 'a',
     ];
-    $this->drupalPostForm('admin/config/regional/name/add', $values, t('Save format'));
-    $this->assertNoText(t('@field field is required', ['@field' => t('Format')]));
-    $this->assertNoText(t('@field field is required', ['@field' => t('Machine-readable name')]));
+    $this->drupalGet('admin/config/regional/name/add');
+    $this->submitForm($values, t('Save format'));
+    $this->assertSession()->pageTextNotContains(t('@field field is required', ['@field' => t('Format')]));
+    $this->assertSession()->pageTextNotContains(t('@field field is required', ['@field' => t('Machine-readable name')]));

     $values = ['label' => 'given', 'id' => '%&*(', 'pattern' => 'a'];
-    $this->drupalPostForm('admin/config/regional/name/add', $values, t('Save format'));
-    $this->assertText(t('The machine-readable name must contain only lowercase letters, numbers, and underscores.'));
+    $this->drupalGet('admin/config/regional/name/add');
+    $this->submitForm($values, t('Save format'));
+    $this->assertSession()->pageTextContains(t('The machine-readable name must contain only lowercase letters, numbers, and underscores.'));

     $values = ['label' => 'default', 'id' => 'default', 'pattern' => 'a'];
-    $this->drupalPostForm('admin/config/regional/name/add', $values, t('Save format'));
-    $this->assertText(t('The machine-readable name is already in use. It must be unique.'));
+    $this->drupalGet('admin/config/regional/name/add');
+    $this->submitForm($values, t('Save format'));
+    $this->assertSession()->pageTextContains(t('The machine-readable name is already in use. It must be unique.'));

     $values = ['label' => 'Test', 'id' => 'test', 'pattern' => '\a\bc'];
-    $this->drupalPostForm('admin/config/regional/name/add', $values, t('Save format'));
-    $this->assertText(t('Name format Test added.'));
+    $this->drupalGet('admin/config/regional/name/add');
+    $this->submitForm($values, t('Save format'));
+    $this->assertSession()->pageTextContains(t('Name format Test added.'));

     $row = [
       'title' => 'Test',
@@ @@
     $this->assertRow($row, $row_template, 3);

     $values = ['label' => 'new name', 'pattern' => 'f+g'];
-    $this->drupalPostForm('admin/config/regional/name/manage/test', $values, t('Save format'));
-    $this->assertText(t('Name format new name has been updated.'));
+    $this->drupalGet('admin/config/regional/name/manage/test');
+    $this->submitForm($values, t('Save format'));
+    $this->assertSession()->pageTextContains(t('Name format new name has been updated.'));

     $row = [
       'label' => $values['label'],
@@ @@
     $this->assertRow($row, $row_template, 3);

     $this->drupalGet('admin/config/regional/name/manage/60');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);

     $this->drupalGet('admin/config/regional/name/manage/60/delete');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);

     $this->drupalGet('admin/config/regional/name/manage/test/delete');
-    $this->assertText(t('Are you sure you want to delete the custom format @title?', ['@title' => $values['label']]));
+    $this->assertSession()->pageTextContains(t('Are you sure you want to delete the custom format @title?', ['@title' => $values['label']]));

-    $this->drupalPostForm(NULL, [], t('Delete'));
-    $this->assertText(t('The name format @title has been deleted.', ['@title' => $values['label']]));
+    $this->submitForm([], t('Delete'));
+    $this->assertSession()->pageTextContains(t('The name format @title has been deleted.', ['@title' => $values['label']]));
   }

   /**
@@ @@
       // Integers 1 through 20.
       // 'el_al_first' => '',
     ];
-    $this->drupalPostForm('admin/config/regional/name/list/add', $values, t('Save list format'));
+    $this->drupalGet('admin/config/regional/name/list/add');
+    $this->submitForm($values, t('Save list format'));
     $labels = [
       t('Name'),
       t('Machine-readable name'),
     ];
     foreach ($labels as $title) {
-      $this->assertText(t('@field field is required', ['@field' => $title]));
+      $this->assertSession()->pageTextContains(t('@field field is required', ['@field' => $title]));
     }
     $values = [
       'label' => 'comma',
@@ @@
       'el_al_min' => '14',
       'el_al_first' => '5',
     ];
-    $this->drupalPostForm('admin/config/regional/name/list/add', $values, t('Save list format'));
-    $this->assertNoText(t('@field field is required', ['@field' => t('Last delimiter type')]));
-    $this->assertNoText(t('@field field is required', ['@field' => t('Machine-readable name')]));
+    $this->drupalGet('admin/config/regional/name/list/add');
+    $this->submitForm($values, t('Save list format'));
+    $this->assertSession()->pageTextNotContains(t('@field field is required', ['@field' => t('Last delimiter type')]));
+    $this->assertSession()->pageTextNotContains(t('@field field is required', ['@field' => t('Machine-readable name')]));

     $values['id'] = '%&*(';
-    $this->drupalPostForm('admin/config/regional/name/list/add', $values, t('Save list format'));
-    $this->assertText(t('The machine-readable name must contain only lowercase letters, numbers, and underscores.'));
+    $this->drupalGet('admin/config/regional/name/list/add');
+    $this->submitForm($values, t('Save list format'));
+    $this->assertSession()->pageTextContains(t('The machine-readable name must contain only lowercase letters, numbers, and underscores.'));

     $values = ['label' => 'default', 'id' => 'default', 'delimiter' => 'a'];
-    $this->drupalPostForm('admin/config/regional/name/list/add', $values, t('Save list format'));
-    $this->assertText(t('The machine-readable name is already in use. It must be unique.'));
+    $this->drupalGet('admin/config/regional/name/list/add');
+    $this->submitForm($values, t('Save list format'));
+    $this->assertSession()->pageTextContains(t('The machine-readable name is already in use. It must be unique.'));

     $values = [
       'label' => 'Test label',
@@ @@
       'el_al_min' => '3',
       'el_al_first' => '1',
     ];
-    $this->drupalPostForm('admin/config/regional/name/list/add', $values, t('Save list format'));
-    $this->assertText(t('Name list format Test label added.'));
+    $this->drupalGet('admin/config/regional/name/list/add');
+    $this->submitForm($values, t('Save list format'));
+    $this->assertSession()->pageTextContains(t('Name list format Test label added.'));

     $row = [
       'title' => 'Test label',
@@ @@
     $this->assertRowContains(['settings' => $summary_text], $row_template, 3);

     $this->drupalGet('admin/config/regional/name/list/manage/60');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);

     $this->drupalGet('admin/config/regional/name/list/manage/60/delete');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);

     $this->drupalGet('admin/config/regional/name/list/manage/test/delete');
-    $this->assertText(t('Are you sure you want to delete the custom list format @title?', ['@title' => $values['label']]));
+    $this->assertSession()->pageTextContains(t('Are you sure you want to delete the custom list format @title?', ['@title' => $values['label']]));

-    $this->drupalPostForm(NULL, [], t('Delete'));
-    $this->assertText(t('The name list format @title has been deleted.', ['@title' => $values['label']]));
+    $this->submitForm([], t('Delete'));
+    $this->assertSession()->pageTextContains(t('The name list format @title has been deleted.', ['@title' => $values['label']]));
   }

   /**
@@ @@
           $results = isset($elements[0]) ? $elements[0]->getHtml() : '';
           $message = "Testing {$cell_code} on row {$id} using '{$xpath}' and expecting '" . Html::escape($value) . "', got '" . Html::escape($results) . "'.";
           if ($results == $value || strpos($results, $value . '?destination=') === 0) {
-            $this->pass($message);
-          }
-          else {
+          } else {
             $this->fail($message);
           }
         }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByIdRector
 * AssertFieldRector
 * AssertNoTextRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * PassRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 11 files have been changed by Rector                                      

