modules/contrib/youtube/src/Feeds/Target/YouTubeItem.php
modules/contrib/youtube/src/Form/YoutubeSettingsForm.php
modules/contrib/youtube/src/Plugin/Field/FieldFormatter/YouTubeFormatter.php
modules/contrib/youtube/src/Plugin/Field/FieldFormatter/YouTubeThumbFormatter.php
modules/contrib/youtube/src/Plugin/Field/FieldFormatter/YouTubeUrlFormatter.php
modules/contrib/youtube/src/Plugin/Field/FieldType/YouTubeItem.php
modules/contrib/youtube/src/Plugin/Field/FieldWidget/YouTubeDefaultWidget.php
modules/contrib/youtube/src/Plugin/migrate/field/d7/YouTubeField.php
modules/contrib/youtube/tests/src/Functional/YouTubeTest.php
modules/contrib/youtube/youtube.module

2 files with changes
====================

1) modules/contrib/youtube/youtube.module:352

    ---------- begin diff ----------
@@ @@
   $destination = youtube_build_thumbnail_uri($video_id);

   // Save the thumbnail and add to Drupal managed files.
-  $file = file_save_data($data, $destination, FileSystemInterface::EXISTS_REPLACE);
+  $file = \Drupal::service('file.repository')->writeData($data, $destination, FileSystemInterface::EXISTS_REPLACE);

   if (!$file) {
     \Drupal::service('logger.factory')->get('youtube')->error(
@@ @@
 function youtube_build_thumbnail_uri($video_id = NULL) {
   $youtube_thumb_dir = \Drupal::config('youtube.settings')->get('youtube_thumb_dir');
   $youtube_thumb_dir = empty($youtube_thumb_dir) ? 'youtube' : $youtube_thumb_dir;
-  $youtube_thumb_uri = file_build_uri($youtube_thumb_dir);
+  $youtube_thumb_uri = \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . $youtube_thumb_dir));

   if ($video_id) {
     return $youtube_thumb_uri . '/' . $video_id . '.jpg';
@@ @@
           if ($video_id = $field->video_id) {
             $file_uri = youtube_build_thumbnail_uri($video_id);
             if (file_exists($file_uri) || youtube_get_remote_image($video_id)) {
-              $replacements[$original] = file_create_url($file_uri);
+              $replacements[$original] = \Drupal::service('file_url_generator')->generateAbsoluteString($file_uri);

               if ($style_name = \Drupal::config('youtube.settings')->get('youtube_thumb_token_image_style')) {
                 $image_style = ImageStyle::load($style_name);
@@ @@
                 if (!file_exists($derivative_uri)) {
                   $image_style->createDerivative($file_uri, $derivative_uri);
                 }
-                $replacements[$original] = file_create_url($derivative_uri);
+                $replacements[$original] = \Drupal::service('file_url_generator')->generateAbsoluteString($derivative_uri);
               }
             }
           }
    ----------- end diff -----------

Applied rules:
 * FileBuildUriRector
 * FileSaveDataRector
 * FileCreateUrlRector
 * ArgumentRemoverRector


2) modules/contrib/youtube/tests/src/Functional/YouTubeTest.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create Basic page and Article node types.
@@ @@

     // Display creation form.
     $this->drupalGet('node/add/article');
-    $this->assertFieldByName("{$field_name}[0][input]", '', t('Video input field is displayed'));
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][input]", '');

     // Verify that a valid URL can be submitted.
     $video_id = 'T5y3dJYHb_A';
@@ @@
       "title[0][value]" => "Test1",
       "{$field_name}[0][input]" => $value,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertText(t('Article Test1 has been created.'));
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('Article Test1 has been created.'));

     $video_id = 'T5y3dJYHb_A';

@@ @@
     $subject = $this->getSession()->getPage()->getContent();
     $pattern = '/<img .*src="(.*?' . $video_id . '[\/\d+]*\.[jpg].*?)"/s';
     preg_match($pattern, $subject, $matches);
-    $this->assertPattern($pattern);
+    $this->assertSession()->responseMatches($pattern);
     $img_url = $matches[1];

     // Verify that the remote image is created.
     $this->drupalGet($img_url);
-    $this->assertResponse(200, 'Remote image downloaded');
+    $this->assertSession()->statusCodeEquals(200, 'Remote image downloaded');
   }

   /**
@@ @@

     // Display creation form.
     $this->drupalGet('node/add/article');
-    $this->assertFieldByName("{$field_name}[0][input]", '', t('Video input field is displayed'));
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][input]", '');

     // Verify that a valid URL can be submitted.
     $video_id = 'T5y3dJYHb_A';
@@ @@
       "title[0][value]" => 'Test',
       "{$field_name}[0][input]" => $value,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertText(t('Article Test has been created.'));
-    $this->assertRaw($embed_value);
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('Article Test has been created.'));
+    $this->assertSession()->responseContains($embed_value);

     // Verify that the video is displayed.
     $pattern = '<iframe.*src="' . $embed_value;
     $pattern = str_replace('/', '\/', $pattern);
     $pattern = '/' . $pattern . '/s';
-    $this->assertPattern($pattern);
+    $this->assertSession()->responseMatches($pattern);

     // Verify that invalid URLs cannot be submitted.
     $this->drupalGet('node/add/article');
@@ @@
       "title[0][value]" => 'Test1',
       "{$field_name}[0][input]" => $value,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertText(t('Please provide a valid YouTube URL.'));
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('Please provide a valid YouTube URL.'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertPatternRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 2 files have been changed by Rector                                       

