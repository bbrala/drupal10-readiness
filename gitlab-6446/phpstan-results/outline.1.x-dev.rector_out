modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/ChildCount.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/Mutation/Expand.php
modules/contrib/outline/outline.install
modules/contrib/outline/src/EntryForm.php
modules/contrib/outline/tests/modules/outline_crud/outline_crud.module
modules/contrib/outline/tests/src/Functional/EntryTranslationUITest.php
modules/contrib/outline/tests/src/Kernel/OutlineQueryAlterTest.php
modules/contrib/outline/tests/modules/outline_entry_display_configurable_test/outline_term_display_configurable_test.module
modules/contrib/outline/tests/modules/outline_serialization_test/src/OutlineResponse.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/Children.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/Content.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/EditFormUrl.php
modules/contrib/outline/outline.module
modules/contrib/outline/tests/modules/outline_serialization_test/src/OutlineSerializationTestController.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/Expanded.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/Mutation/Add.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/Mutation/Rename.php
modules/contrib/outline/tests/modules/outline_test/outline_test.module
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/Mutation/SetParent.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/Mutation/Collapse.php
modules/contrib/outline/tests/src/Functional/EntryAccessTest.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/ParentEid.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/ParentUuid.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/QueryEntries.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/Mutation/Delete.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/ReferencedEntityDisplay.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/ReferencedEntityEditFormUrl.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/ReferencedEntityId.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/ReferencedEntityMode.php
modules/contrib/outline/src/EntryInterface.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/ReferencedEntityType.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/ReferencedEntityUuid.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Entry/Render.php
modules/contrib/outline/src/EntryStorage.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Outline/QueryOutlines.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Outline/RootEid.php
modules/contrib/outline/outline.theme.inc
modules/contrib/outline/src/Ajax/deleteEntryCommand.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/DataProducer/Outline/ServerUuid.php
modules/contrib/outline/tests/src/Kernel/PendingRevisionTest.php
modules/contrib/outline/modules/outline_graphql/src/Plugin/GraphQL/Schema/OutlineSchema.php
modules/contrib/outline/src/Ajax/parentEntryCommand.php
modules/contrib/outline/src/Ajax/renameEntryCommand.php
modules/contrib/outline/tests/src/Functional/EntryAutocompleteTest.php
modules/contrib/outline/src/Ajax/renderEntryCommand.php
modules/contrib/outline/src/Controller/OutlineController.php
modules/contrib/outline/src/Entity/Entry.php
modules/contrib/outline/tests/src/Functional/LoadMultipleTest.php
modules/contrib/outline/tests/src/Traits/OutlineTestTrait.php
modules/contrib/outline/tests/src/Unit/Menu/OutlineLocalTasksTest.php
modules/contrib/outline/tests/src/Functional/EntryCacheTagsTest.php
modules/contrib/outline/tests/src/Functional/EntryContextualLinksTest.php
modules/contrib/outline/tests/src/Functional/OutlineEntryIndentationTest.php
modules/contrib/outline/tests/src/Functional/EntryIndexTest.php
modules/contrib/outline/modules/outline_graphql/src/Wrappers/QueryConnection.php
modules/contrib/outline/src/EntryStorageInterface.php
modules/contrib/outline/src/EntryStorageSchema.php
modules/contrib/outline/modules/outline_graphql/src/Wrappers/RootEntryConnection.php
modules/contrib/outline/tests/src/Functional/OutlineEntryPagerTest.php
modules/contrib/outline/src/EntryTranslationHandler.php
modules/contrib/outline/src/EntryViewBuilder.php
modules/contrib/outline/src/Form/EntryDeleteForm.php
modules/contrib/outline/tests/src/Functional/OutlineImageTest.php
modules/contrib/outline/src/Form/OutlineDeleteForm.php
modules/contrib/outline/src/Entity/Outline.php
modules/contrib/outline/src/OutlineForm.php
modules/contrib/outline/src/EntryAccessControlHandler.php
modules/contrib/outline/src/EntryBreadcrumbBuilder.php
modules/contrib/outline/tests/src/Functional/OutlineLanguageTest.php
modules/contrib/outline/src/OutlineInterface.php
modules/contrib/outline/src/OutlineListBuilder.php
modules/contrib/outline/tests/src/Functional/OutlinePermissionsTest.php
modules/contrib/outline/tests/src/Functional/EntryLanguageTest.php
modules/contrib/outline/src/OutlinePermissions.php
modules/contrib/outline/src/OutlineStorage.php
modules/contrib/outline/tests/src/Functional/EntryParentsTest.php
modules/contrib/outline/src/OutlineStorageInterface.php
modules/contrib/outline/src/Plugin/EntityReferenceSelection/EntrySelection.php
modules/contrib/outline/src/Plugin/Field/FieldFormatter/EntityReferenceOutlineEntryRssFormatter.php
modules/contrib/outline/tests/src/Functional/EntryTest.php
modules/contrib/outline/tests/src/Functional/OutlineSerializationTest.php
modules/contrib/outline/tests/src/Functional/OutlineTestBase.php
modules/contrib/outline/tests/src/Functional/OutlineTranslationTest.php
modules/contrib/outline/tests/src/Functional/OutlineTranslationTestTrait.php
modules/contrib/outline/tests/src/Functional/OutlineUiTest.php
modules/contrib/outline/tests/src/Functional/ThemeTest.php
modules/contrib/outline/tests/src/Functional/TokenReplaceTest.php
modules/contrib/outline/tests/src/Kernel/EntryEntityQueryTest.php
modules/contrib/outline/tests/src/Kernel/EntryEntityReferenceTest.php
modules/contrib/outline/tests/src/Kernel/EntryHierarchyValidationTest.php
modules/contrib/outline/tests/src/Functional/EntryTranslationFieldViewTest.php
modules/contrib/outline/tests/src/Kernel/EntryKernelTest.php
modules/contrib/outline/tests/src/Functional/EntryTranslationTest.php
modules/contrib/outline/tests/src/Kernel/EntryValidationTest.php
modules/contrib/outline/tests/src/Kernel/OutlineCrudTest.php

24 files with changes
=====================

1) modules/contrib/outline/outline.theme.inc:23

    ---------- begin diff ----------
@@ @@
 //  $variables['attributes']['class'][] = 'outline';
 //
 //}
-  
+
   //kint($outline_tree);
   //$variables['attributes']['class'][] = Html::getClass('outline-' . $outline->bundle());
 //   if (!$outline->isPublished()) {
    ----------- end diff -----------

2) modules/contrib/outline/outline.module:103

    ---------- begin diff ----------
@@ @@
  *   A $page element suitable for use by drupal_render().
  */
 function outline_entry_view(Entry $entry, $view_mode = 'full', $langcode = NULL) {
-  return entity_view($entry, $view_mode, $langcode);
+  return \Drupal::entityTypeManager()->getViewBuilder($entry->getEntityTypeId())->view($entry, $view_mode, $langcode);
 }

 /**
    ----------- end diff -----------

Applied rules:
 * EntityViewRector
 * ArgumentRemoverRector


3) modules/contrib/outline/src/Plugin/Field/FieldFormatter/EntityReferenceOutlineEntryRssFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\outline\Plugin\Field\FieldFormatter;

+use Drupal\Core\Url;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\Plugin\Field\FieldFormatter\EntityReferenceFormatterBase;
@@ @@
         'key' => 'category',
         'value' => $entity->label(),
         'attributes' => array(
-          'domain' => $entity->id() ? \Drupal::url('entity.outline_entry.canonical', ['outline_entry' => $entity->id()], array('absolute' => TRUE)) : '',
+          'domain' => $entity->id() ? Url::fromRoute('entity.outline_entry.canonical', ['outline_entry' => $entity->id()], array('absolute' => TRUE))->toString() : '',
         ),
       );
     }
    ----------- end diff -----------

Applied rules:
 * DrupalURLRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/outline/tests/src/Functional/EntryTranslationTest.php:105

    ---------- begin diff ----------
@@ @@

     // Test entries are listed.
     $this->drupalget('node/add/article');
-    $this->assertText('one');
-    $this->assertText('two');
-    $this->assertText('three');
+    $this->assertSession()->pageTextContains('one');
+    $this->assertSession()->pageTextContains('two');
+    $this->assertSession()->pageTextContains('three');

     // Test entries translated are listed.
     $this->drupalget('hu/node/add/article');
-    $this->assertText('translatedOne');
-    $this->assertText('translatedTwo');
-    $this->assertText('translatedThree');
+    $this->assertSession()->pageTextContains('translatedOne');
+    $this->assertSession()->pageTextContains('translatedTwo');
+    $this->assertSession()->pageTextContains('translatedThree');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/outline/tests/src/Functional/EntryTranslationFieldViewTest.php:63

    ---------- begin diff ----------
@@ @@
     $translation_path = $this->translateToLangcode . '/' . $path;

     $this->drupalGet($path);
-    $this->assertNoText($this->translatedTagName);
-    $this->assertText($this->baseTagName);
+    $this->assertSession()->pageTextNotContains($this->translatedTagName);
+    $this->assertSession()->pageTextContains($this->baseTagName);
     $this->drupalGet($translation_path);
-    $this->assertText($this->translatedTagName);
-    $this->assertNoText($this->baseTagName);
+    $this->assertSession()->pageTextContains($this->translatedTagName);
+    $this->assertSession()->pageTextNotContains($this->baseTagName);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/outline/tests/src/Functional/EntryTest.php:87

    ---------- begin diff ----------
@@ @@
   public function testParentHandlerSettings() {
     $outline_fields = \Drupal::service('entity_field.manager')->getFieldDefinitions('outline_entry', $this->outline->id());
     $parent_target_bundles = $outline_fields['parent']->getSetting('handler_settings')['target_bundles'];
-    $this->assertIdentical([$this->outline->id() => $this->outline->id()], $parent_target_bundles);
+    $this->assertSame([$this->outline->id() => $this->outline->id()], $parent_target_bundles);
   }

   /**
@@ @@
     // Edit $entry2, setting $entry1 as parent.
     $edit = [];
     $edit['parent[]'] = [$entry1->id()];
-    $this->drupalPostForm('outline/entry/' . $entry2->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('outline/entry/' . $entry2->id() . '/edit');
+    $this->submitForm($edit, t('Save'));

     // Check the hierarchy.
     $children = $outline_storage->loadChildren($entry1->id());
@@ @@

     // Get Page 1.
     $this->drupalGet('admin/structure/outline/manage/' . $this->outline->id() . '/overview');
-    $this->assertText($entry1->getName(), 'Parent Entry is displayed on Page 1');
+    $this->assertSession()->pageTextContains($entry1->getName());
     for ($x = 1; $x <= 13; $x++) {
-      $this->assertText($entries_array[$x]->getName(), $entries_array[$x]->getName() . ' found on Page 1');
+      $this->assertSession()->pageTextContains($entries_array[$x]->getName());
     }

     // Get Page 2.
     $this->drupalGet('admin/structure/outline/manage/' . $this->outline->id() . '/overview', ['query' => ['page' => 1]]);
-    $this->assertText($entry1->getName(), 'Parent Entry is displayed on Page 2');
+    $this->assertSession()->pageTextContains($entry1->getName());
     for ($x = 1; $x <= 18; $x++) {
-      $this->assertText($entries_array[$x]->getName(), $entries_array[$x]->getName() . ' found on Page 2');
+      $this->assertSession()->pageTextContains($entries_array[$x]->getName());
     }

     // Get Page 3.
     $this->drupalGet('admin/structure/outline/manage/' . $this->outline->id() . '/overview', ['query' => ['page' => 2]]);
-    $this->assertNoText($entry1->getName(), 'Parent Entry is not displayed on Page 3');
+    $this->assertSession()->pageTextNotContains($entry1->getName());
     for ($x = 1; $x <= 17; $x++) {
-      $this->assertNoText($entries_array[$x]->getName(), $entries_array[$x]->getName() . ' not found on Page 3');
+      $this->assertSession()->pageTextNotContains($entries_array[$x]->getName());
     }
     for ($x = 18; $x <= 25; $x++) {
-      $this->assertText($entries_array[$x]->getName(), $entries_array[$x]->getName() . ' found on Page 3');
+      $this->assertSession()->pageTextContains($entries_array[$x]->getName());
     }
   }

@@ @@
     $edit['title[0][value]'] = $this->randomMachineName();
     $edit['body[0][value]'] = $this->randomMachineName();
     $edit[$this->field->getName() . '[]'] = $entry1->id();
-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, t('Save'));

     // Check that the entry is displayed when the node is viewed.
     $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
     $this->drupalGet('node/' . $node->id());
-    $this->assertText($entry1->getName(), 'Entry is displayed when viewing the node.');
+    $this->assertSession()->pageTextContains($entry1->getName());

     $this->clickLink(t('Edit'));
-    $this->assertText($entry1->getName(), 'Entry is displayed when editing the node.');
-    $this->drupalPostForm(NULL, [], t('Save'));
-    $this->assertText($entry1->getName(), 'Entry is displayed after saving the node with no changes.');
+    $this->assertSession()->pageTextContains($entry1->getName());
+    $this->submitForm([], t('Save'));
+    $this->assertSession()->pageTextContains($entry1->getName());

     // Edit the node with a different entry.
     $edit[$this->field->getName() . '[]'] = $entry2->id();
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, t('Save'));

     $this->drupalGet('node/' . $node->id());
-    $this->assertText($entry2->getName(), 'Entry is displayed when viewing the node.');
+    $this->assertSession()->pageTextContains($entry2->getName());
+    $this->drupalGet('node/' . $node->id() . '/edit');

     // Preview the node.
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Preview'));
-    $this->assertUniqueText($entry2->getName(), 'Entry is displayed when previewing the node.');
-    $this->drupalPostForm('node/' . $node->id() . '/edit', NULL, t('Preview'));
-    $this->assertUniqueText($entry2->getName(), 'Entry is displayed when previewing the node again.');
+    $this->submitForm($edit, t('Preview'));
+    $this->assertSession()->pageTextContainsOnce($entry2->getName(), 'Entry is displayed when previewing the node.');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm(NULL, t('Preview'));
+    $this->assertSession()->pageTextContainsOnce($entry2->getName(), 'Entry is displayed when previewing the node again.');
   }

   /**
@@ @@

     // Verify the placeholder is there.
     $this->drupalGet('node/add/article');
-    $this->assertRaw('placeholder="Start typing here."', 'Placeholder is present.');
+    $this->assertSession()->responseContains('placeholder="Start typing here."');

     // Preview and verify the entries appear but are not created.
-    $this->drupalPostForm(NULL, $edit, t('Preview'));
+    $this->submitForm($edit, t('Preview'));
     foreach ($entries as $entry) {
-      $this->assertText($entry, 'The entry appears on the node preview.');
+      $this->assertSession()->pageTextContains($entry);
     }
     $tree = $this->container->get('entity_type.manager')->getStorage('outline_entry')->loadTree($this->outline->id());
     $this->assertTrue(empty($tree), 'The entries are not created on preview.');
@@ @@

     // outline.module does not maintain its static caches.
     outline_entrys_static_reset();
+    $this->drupalGet('node/add/article');

     // Save, creating the entries.
-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
-    $this->assertText(t('@type @title has been created.', ['@type' => t('Article'), '@title' => $edit['title[0][value]']]), 'The node was created successfully.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('@type @title has been created.', ['@type' => t('Article'), '@title' => $edit['title[0][value]']]));

     // Verify that the creation message contains a link to a node.
     $view_link = $this->xpath('//div[@class="messages"]//a[contains(@href, :href)]', [':href' => 'node/']);
-    $this->assert(isset($view_link), 'The message area contains a link to a node');
+    $this->assertTrue(isset($view_link), 'The message area contains a link to a node');

     foreach ($entries as $entry) {
-      $this->assertText($entry, 'The entry was saved and appears on the node page.');
+      $this->assertSession()->pageTextContains($entry);
     }

     // Get the created entries.
@@ @@

     // Get the node.
     $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
+    $this->drupalGet('node/' . $node->id() . '/edit');

     // Test editing the node.
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     foreach ($entries as $entry) {
-      $this->assertText($entry, 'The entry was retained after edit and still appears on the node page.');
+      $this->assertSession()->pageTextContains($entry);
     }

     // Delete entry 1 from the entry edit page.
     $this->drupalGet('outline/entry/' . $entry_objects['entry1']->id() . '/edit');
     $this->clickLink(t('Delete'));
-    $this->drupalPostForm(NULL, NULL, t('Delete'));
+    $this->submitForm(NULL, t('Delete'));

     // Delete entry 2 from the entry delete page.
     $this->drupalGet('outline/entry/' . $entry_objects['entry2']->id() . '/delete');
-    $this->drupalPostForm(NULL, [], t('Delete'));
+    $this->submitForm([], t('Delete'));
     $entry_names = [$entry_objects['entry3']->getName(), $entry_objects['entry4']->getName()];

     $this->drupalGet('node/' . $node->id());

     foreach ($entry_names as $entry_name) {
-      $this->assertText($entry_name, new FormattableMarkup('The entry %name appears on the node page after two entries, %deleted1 and %deleted2, were deleted.', ['%name' => $entry_name, '%deleted1' => $entry_objects['entry1']->getName(), '%deleted2' => $entry_objects['entry2']->getName()]));
+      $this->assertSession()->pageTextContains($entry_name);
     }
-    $this->assertNoText($entry_objects['entry1']->getName(), new FormattableMarkup('The deleted entry %name does not appear on the node page.', ['%name' => $entry_objects['entry1']->getName()]));
-    $this->assertNoText($entry_objects['entry2']->getName(), new FormattableMarkup('The deleted entry %name does not appear on the node page.', ['%name' => $entry_objects['entry2']->getName()]));
+    $this->assertSession()->pageTextNotContains($entry_objects['entry1']->getName());
+    $this->assertSession()->pageTextNotContains($entry_objects['entry2']->getName());
   }

   /**
@@ @@
     // Explicitly set the parents field to 'root', to ensure that
     // EntryForm::save() handles the invalid entry ID correctly.
     $edit['parent[]'] = [0];
+    $this->drupalGet('admin/structure/outline/manage/' . $this->outline->id() . '/add');

     // Create the entry to edit.
-    $this->drupalPostForm('admin/structure/outline/manage/' . $this->outline->id() . '/add', $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $entries = outline_entry_load_multiple_by_name($edit['name[0][value]']);
     $entry = reset($entries);
@@ @@

     $this->clickLink(t('Edit'));

-    $this->assertRaw($edit['name[0][value]'], 'The randomly generated entry name is present.');
-    $this->assertText($edit['description[0][value]'], 'The randomly generated entry description is present.');
+    $this->assertSession()->responseContains($edit['name[0][value]']);
+    $this->assertSession()->pageTextContains($edit['description[0][value]']);

     $edit = [
       'name[0][value]' => $this->randomMachineName(14),
       'description[0][value]' => $this->randomMachineName(102),
     ];
+    $this->drupalGet('outline/entry/' . $entry->id() . '/edit');

     // Edit the entry.
-    $this->drupalPostForm('outline/entry/' . $entry->id() . '/edit', $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Check that the entry is still present at admin UI after edit.
     $this->drupalGet('admin/structure/outline/manage/' . $this->outline->id() . '/overview');
-    $this->assertText($edit['name[0][value]'], 'The randomly generated entry name is present.');
+    $this->assertSession()->pageTextContains($edit['name[0][value]']);
     $this->assertSession()->linkExists(t('Edit'));

     // Check the entry link can be clicked through to the entry page.
@@ @@

     // View the entry and check that it is correct.
     $this->drupalGet('outline/entry/' . $entry->id());
-    $this->assertText($edit['name[0][value]'], 'The randomly generated entry name is present.');
-    $this->assertText($edit['description[0][value]'], 'The randomly generated entry description is present.');
+    $this->assertSession()->pageTextContains($edit['name[0][value]']);
+    $this->assertSession()->pageTextContains($edit['description[0][value]']);

     // Did this page request display a 'entry-listing-heading'?
     $this->assertSession()->elementExists('xpath', '//div[contains(@class, "field--name-description")]');
@@ @@
     $value = $this->randomMachineName();
     $entry->setDescription($value);
     $entry->save();
-    $this->assertEqual($entry->description->processed, "<p>$value</p>\n");
+    $this->assertEquals($entry->description->processed, "<p>$value</p>\n");

     // Check that the entry feed page is working.
     $this->drupalGet('outline/entry/' . $entry->id() . '/feed');
@@ @@
     // Delete the entry.
     $this->drupalGet('outline/entry/' . $entry->id() . '/edit');
     $this->clickLink(t('Delete'));
-    $this->drupalPostForm(NULL, NULL, t('Delete'));
+    $this->submitForm(NULL, t('Delete'));

     // Assert that the entry no longer exists.
     $this->drupalGet('outline/entry/' . $entry->id());
@@ @@
       'entries[tid:' . $entry3->id() . ':0][weight]' => 1,
       'entries[tid:' . $entry1->id() . ':0][weight]' => 2,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     $outline_storage->resetCache();
     $entries = $outline_storage->loadTree($this->outline->id());
-    $this->assertEqual($entries[0]->tid, $entry2->id(), 'Entry 2 was moved above entry 1.');
-    $this->assertEqual($entries[1]->parents, [$entry2->id()], 'Entry 3 was made a child of entry 2.');
-    $this->assertEqual($entries[2]->tid, $entry1->id(), 'Entry 1 was moved below entry 2.');
+    $this->assertEquals($entries[0]->tid, $entry2->id(), 'Entry 2 was moved above entry 1.');
+    $this->assertEquals($entries[1]->parents, [$entry2->id()], 'Entry 3 was made a child of entry 2.');
+    $this->assertEquals($entries[2]->tid, $entry1->id(), 'Entry 1 was moved below entry 2.');
+    $this->drupalGet('admin/structure/outline/manage/' . $this->outline->id() . '/overview');

-    $this->drupalPostForm('admin/structure/outline/manage/' . $this->outline->id() . '/overview', [], t('Reset to alphabetical'));
+    $this->submitForm([], t('Reset to alphabetical'));
     // Submit confirmation form.
-    $this->drupalPostForm(NULL, [], t('Reset to alphabetical'));
+    $this->submitForm([], t('Reset to alphabetical'));
     // Ensure form redirected back to overview.
-    $this->assertUrl('admin/structure/outline/manage/' . $this->outline->id() . '/overview');
+    $this->assertSession()->addressEquals('admin/structure/outline/manage/' . $this->outline->id() . '/overview');

     $outline_storage->resetCache();
     $entries = $outline_storage->loadTree($this->outline->id(), 0, NULL, TRUE);
-    $this->assertEqual($entries[0]->id(), $entry1->id(), 'Entry 1 was moved to back above entry 2.');
-    $this->assertEqual($entries[1]->id(), $entry2->id(), 'Entry 2 was moved to back below entry 1.');
-    $this->assertEqual($entries[2]->id(), $entry3->id(), 'Entry 3 is still below entry 2.');
-    $this->assertEqual($entries[2]->parents, [$entry2->id()], 'Entry 3 is still a child of entry 2.');
+    $this->assertEquals($entries[0]->id(), $entry1->id(), 'Entry 1 was moved to back above entry 2.');
+    $this->assertEquals($entries[1]->id(), $entry2->id(), 'Entry 2 was moved to back below entry 1.');
+    $this->assertEquals($entries[2]->id(), $entry3->id(), 'Entry 3 is still below entry 2.');
+    $this->assertEquals($entries[2]->parents, [$entry2->id()], 'Entry 3 is still a child of entry 2.');
   }

   /**
@@ @@
       'description[0][value]' => $this->randomMachineName(100),
       'parent[]' => [0, $parent->id()],
     ];
+    $this->drupalGet('admin/structure/outline/manage/' . $this->outline->id() . '/add');
     // Save the new entry.
-    $this->drupalPostForm('admin/structure/outline/manage/' . $this->outline->id() . '/add', $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Check that the entry was successfully created.
     $entries = outline_entry_load_multiple_by_name($edit['name[0][value]']);
     $entry = reset($entries);
     $this->assertNotNull($entry, 'Entry found in database.');
-    $this->assertEqual($edit['name[0][value]'], $entry->getName(), 'Entry name was successfully saved.');
-    $this->assertEqual($edit['description[0][value]'], $entry->getDescription(), 'Entry description was successfully saved.');
+    $this->assertEquals($edit['name[0][value]'], $entry->getName(), 'Entry name was successfully saved.');
+    $this->assertEquals($edit['description[0][value]'], $entry->getDescription(), 'Entry description was successfully saved.');
     // Check that the parent tid is still there. The other parent (<root>) is
     // not added by \Drupal\outline\EntryStorageInterface::loadParents().
     $parents = $this->container->get('entity_type.manager')->getStorage('outline_entry')->loadParents($entry->id());
     $parent = reset($parents);
-    $this->assertEqual($edit['parent[]'][1], $parent->id(), 'Entry parents were successfully saved.');
+    $this->assertEquals($edit['parent[]'][1], $parent->id(), 'Entry parents were successfully saved.');
   }

   /**
@@ @@
     $edit['title[0][value]'] = $this->randomMachineName(8);
     $edit['body[0][value]'] = $this->randomMachineName(16);
     $edit[$this->field->getName() . '[target_id]'] = $entry->getName();
-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, t('Save'));

     // Check that the entry is displayed when editing and saving the node with no
     // changes.
     $this->clickLink(t('Edit'));
-    $this->assertRaw($entry->getName(), 'Entry is displayed when editing the node.');
-    $this->drupalPostForm(NULL, [], t('Save'));
-    $this->assertRaw($entry->getName(), 'Entry is displayed after saving the node with no changes.');
+    $this->assertSession()->responseContains($entry->getName());
+    $this->submitForm([], t('Save'));
+    $this->assertSession()->responseContains($entry->getName());
   }

   /**
@@ @@
       'description[0][value]' => $this->randomMachineName(100),
       'parent[]' => [0],
     ];
+    $this->drupalGet('admin/structure/outline/manage/' . $this->outline->id() . '/add');

     // Create the entry.
-    $this->drupalPostForm('admin/structure/outline/manage/' . $this->outline->id() . '/add', $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     $entries = outline_entry_load_multiple_by_name($edit['name[0][value]']);
     $entry = reset($entries);
@@ @@
     $this->drupalGet('outline/entry/' . $entry->id() . '/edit');
     $breadcrumbs = $this->getSession()->getPage()->findAll('css', 'nav.breadcrumb ol li a');
     $this->assertCount(2, $breadcrumbs, 'The breadcrumbs are present on the page.');
-    $this->assertIdentical($breadcrumbs[0]->getText(), 'Home', 'First breadcrumb text is Home');
-    $this->assertIdentical($breadcrumbs[1]->getText(), $entry->label(), 'Second breadcrumb text is entry name on entry edit page.');
-    $this->assertEscaped($breadcrumbs[1]->getText());
+    $this->assertSame($breadcrumbs[0]->getText(), 'Home', 'First breadcrumb text is Home');
+    $this->assertSame($breadcrumbs[1]->getText(), $entry->label(), 'Second breadcrumb text is entry name on entry edit page.');
+    $this->assertSession()->assertEscaped($breadcrumbs[1]->getText());

     // Check the breadcrumb on the entry delete page.
     $this->drupalGet('outline/entry/' . $entry->id() . '/delete');
     $breadcrumbs = $this->getSession()->getPage()->findAll('css', 'nav.breadcrumb ol li a');
     $this->assertCount(2, $breadcrumbs, 'The breadcrumbs are present on the page.');
-    $this->assertIdentical($breadcrumbs[0]->getText(), 'Home', 'First breadcrumb text is Home');
-    $this->assertIdentical($breadcrumbs[1]->getText(), $entry->label(), 'Second breadcrumb text is entry name on entry delete page.');
-    $this->assertEscaped($breadcrumbs[1]->getText());
+    $this->assertSame($breadcrumbs[0]->getText(), 'Home', 'First breadcrumb text is Home');
+    $this->assertSame($breadcrumbs[1]->getText(), $entry->label(), 'Second breadcrumb text is entry name on entry delete page.');
+    $this->assertSession()->assertEscaped($breadcrumbs[1]->getText());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertEscapedRector
 * AssertIdenticalRector
 * AssertNoTextRector
 * AssertRawRector
 * AssertRector
 * AssertTextRector
 * AssertUniqueTextRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/outline/tests/src/Functional/EntryParentsTest.php:116

    ---------- begin diff ----------
@@ @@
   protected function submitAddEntryForm($name) {
     $this->getSession()->getPage()->fillField('Name', $name);

-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');

     $result = $this->entryStorage
       ->getQuery()
@@ @@
     $this->assertParentOption('--Test entry 5', TRUE);
     $this->assertParentOption('Test entry 2');
     $this->assertParentOption('-Test entry 4', TRUE);
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertParentsUnchanged($entry_6);
   }

@@ @@
     $this->assertParentOption('--Test entry 5', TRUE);
     $this->assertParentOption('Test entry 2');
     $this->assertParentOption('-Test entry 4', TRUE);
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertParentsUnchanged($entry_6);
   }

@@ @@
     $entry_1 = $this->createEntry('Test entry 1');
     $this->drupalGet($entry_1->toUrl('edit-form'));
     $this->assertParentOption('<root>', TRUE);
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertParentsUnchanged($entry_1);
     $entries[] = $entry_1;

@@ @@
     $this->drupalGet($entry_2->toUrl('edit-form'));
     $this->assertParentOption('<root>', TRUE);
     $this->assertParentOption('Test entry 1');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertParentsUnchanged($entry_2);
     $entries[] = $entry_2;

@@ @@
     $this->assertParentOption('<root>');
     $this->assertParentOption('Test entry 1', TRUE);
     $this->assertParentOption('Test entry 2');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertParentsUnchanged($entry_3);
     $entries[] = $entry_3;

@@ @@
     $this->assertParentOption('Test entry 1');
     $this->assertParentOption('-Test entry 3');
     $this->assertParentOption('Test entry 2', TRUE);
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertParentsUnchanged($entry_4);
     $entries[] = $entry_4;

@@ @@
     $this->assertParentOption('-Test entry 3', TRUE);
     $this->assertParentOption('Test entry 2');
     $this->assertParentOption('-Test entry 4');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertParentsUnchanged($entry_5);
     $entries[] = $entry_5;
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/outline/tests/src/Functional/EntryIndexTest.php:111

    ---------- begin diff ----------
@@ @@
     $edit['body[0][value]'] = $this->randomMachineName();
     $edit["{$this->fieldName1}[]"] = $entry_1->id();
     $edit["{$this->fieldName2}[]"] = $entry_1->id();
-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, t('Save'));

     // Check that the entry is indexed, and only once.
     $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
@@ @@
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual(1, $index_count, 'Entry 1 is indexed once.');
+    $this->assertEquals(1, $index_count, 'Entry 1 is indexed once.');

     // Update the article to change one entry.
     $edit["{$this->fieldName1}[]"] = $entry_2->id();
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, t('Save'));

     // Check that both entries are indexed.
     $index_count = $connection->select('outline_index')
@@ @@
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual(1, $index_count, 'Entry 1 is indexed.');
+    $this->assertEquals(1, $index_count, 'Entry 1 is indexed.');
     $index_count = $connection->select('outline_index')
       ->condition('nid', $node->id())
       ->condition('eid', $entry_2->id())
@@ @@
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual(1, $index_count, 'Entry 2 is indexed.');
+    $this->assertEquals(1, $index_count, 'Entry 2 is indexed.');

     // Update the article to change another entry.
     $edit["{$this->fieldName2}[]"] = $entry_2->id();
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, t('Save'));

     // Check that only one entry is indexed.
     $index_count = $connection->select('outline_index')
@@ @@
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual(0, $index_count, 'Entry 1 is not indexed.');
+    $this->assertEquals(0, $index_count, 'Entry 1 is not indexed.');
     $index_count = $connection->select('outline_index')
       ->condition('nid', $node->id())
       ->condition('eid', $entry_2->id())
@@ @@
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual(1, $index_count, 'Entry 2 is indexed once.');
+    $this->assertEquals(1, $index_count, 'Entry 2 is indexed once.');

     // Redo the above tests without interface.
     $node_storage->resetCache([$node->id()]);
@@ @@
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual(0, $index_count, 'Entry 1 is not indexed.');
+    $this->assertEquals(0, $index_count, 'Entry 1 is not indexed.');
     $index_count = $connection->select('outline_index')
       ->condition('nid', $node->id())
       ->condition('eid', $entry_2->id())
@@ @@
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual(1, $index_count, 'Entry 2 is indexed once.');
+    $this->assertEquals(1, $index_count, 'Entry 2 is indexed once.');

     // Update the article to change one entry.
     $node->{$this->fieldName1} = [['target_id' => $entry_1->id()]];
@@ @@
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual(1, $index_count, 'Entry 1 is indexed.');
+    $this->assertEquals(1, $index_count, 'Entry 1 is indexed.');
     $index_count = $connection->select('outline_index')
       ->condition('nid', $node->id())
       ->condition('eid', $entry_2->id())
@@ @@
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual(1, $index_count, 'Entry 2 is indexed.');
+    $this->assertEquals(1, $index_count, 'Entry 2 is indexed.');

     // Update the article to change another entry.
     $node->{$this->fieldName2} = [['target_id' => $entry_1->id()]];
@@ @@
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual(1, $index_count, 'Entry 1 is indexed once.');
+    $this->assertEquals(1, $index_count, 'Entry 1 is indexed once.');
     $index_count = $connection->select('outline_index')
       ->condition('nid', $node->id())
       ->condition('eid', $entry_2->id())
@@ @@
       ->countQuery()
       ->execute()
       ->fetchField();
-    $this->assertEqual(0, $index_count, 'Entry 2 is not indexed.');
+    $this->assertEquals(0, $index_count, 'Entry 2 is not indexed.');
   }

   /**
@@ @@
     $this->drupalGet('outline/entry/' . $entry1->id());
     // Breadcrumbs are not rendered with a language, prevent the entry
     // language from being added to the options.
-    $this->assertRaw(Link::fromTextAndUrl($entry2->getName(), $entry2->toUrl('canonical', ['language' => NULL]))->toString(), 'Parent entry link is displayed when viewing the node.');
+    $this->assertSession()->responseContains(Link::fromTextAndUrl($entry2->getName(), $entry2->toUrl('canonical', ['language' => NULL]))->toString());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertRawRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/outline/tests/src/Functional/EntryAutocompleteTest.php:227

    ---------- begin diff ----------
@@ @@
       ['query' => ['q' => 'bbb']]
     );

-    $this->assertIdentical($expected, $data);
+    $this->assertSame($expected, $data);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/outline/tests/src/Kernel/EntryValidationTest.php:44

    ---------- begin diff ----------
@@ @@
     $entry->set('name', $this->randomString(256));
     $violations = $entry->validate();
     $this->assertCount(1, $violations, 'Violation found when name is too long.');
-    $this->assertEqual($violations[0]->getPropertyPath(), 'name.0.value');
+    $this->assertEquals($violations[0]->getPropertyPath(), 'name.0.value');
     $field_label = $entry->get('name')->getFieldDefinition()->getLabel();
-    $this->assertEqual($violations[0]->getMessage(), t('%name: may not be longer than @max characters.', ['%name' => $field_label, '@max' => 255]));
+    $this->assertEquals($violations[0]->getMessage(), t('%name: may not be longer than @max characters.', ['%name' => $field_label, '@max' => 255]));

     $entry->set('name', NULL);
     $violations = $entry->validate();
     $this->assertCount(1, $violations, 'Violation found when name is NULL.');
-    $this->assertEqual($violations[0]->getPropertyPath(), 'name');
-    $this->assertEqual($violations[0]->getMessage(), t('This value should not be null.'));
+    $this->assertEquals($violations[0]->getPropertyPath(), 'name');
+    $this->assertEquals($violations[0]->getMessage(), t('This value should not be null.'));
     $entry->set('name', 'test');

     $entry->set('parent', 9999);
     $violations = $entry->validate();
     $this->assertCount(1, $violations, 'Violation found when entry parent is invalid.');
-    $this->assertEqual($violations[0]->getMessage(), new FormattableMarkup('The referenced entity (%type: %id) does not exist.', ['%type' => 'outline_entry', '%id' => 9999]));
+    $this->assertEquals($violations[0]->getMessage(), new FormattableMarkup('The referenced entity (%type: %id) does not exist.', ['%type' => 'outline_entry', '%id' => 9999]));

     $entry->set('parent', 0);
     $violations = $entry->validate();
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/outline/tests/src/Kernel/EntryKernelTest.php:117

    ---------- begin diff ----------
@@ @@
       }
       $depth_count[$entry->depth]++;
     }
-    $this->assertEqual(6, $depth_count[0], '6 elements in outline tree depth 0.');
-    $this->assertEqual(3, $depth_count[1], '3 elements in outline tree depth 1.');
-    $this->assertEqual(1, $depth_count[2], '1 element in outline tree depth 2.');
-    $this->assertEqual(0, $depth_count[3], '0 elements in outline tree depth 3.');
+    $this->assertEquals(6, $depth_count[0], '6 elements in outline tree depth 0.');
+    $this->assertEquals(3, $depth_count[1], '3 elements in outline tree depth 1.');
+    $this->assertEquals(1, $depth_count[2], '1 element in outline tree depth 2.');
+    $this->assertEquals(0, $depth_count[3], '0 elements in outline tree depth 3.');

   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/outline/tests/src/Kernel/EntryEntityReferenceTest.php:108

    ---------- begin diff ----------
@@ @@
       ],
     ];

-    $this->assertIdentical($result, $expected_result, 'Entrys selection restricted to a single outline.');
+    $this->assertSame($result, $expected_result, 'Entrys selection restricted to a single outline.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/outline/tests/src/Kernel/EntryEntityQueryTest.php:62

    ---------- begin diff ----------
@@ @@
       ->condition('oid', $outline2->id())
       ->execute();
     sort($result);
-    $this->assertEqual(array_keys($entries2), $result);
+    $this->assertEquals(array_keys($entries2), $result);
     $eid = reset($result);
     $ids = (object) [
       'entity_type' => 'outline_entry',
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/outline/tests/src/Functional/TokenReplaceTest.php:78

    ---------- begin diff ----------
@@ @@
     $edit = [];
     $edit['name[0][value]'] = '<blink>Blinking Text</blink>';
     $edit['parent[]'] = [$entry1->id()];
-    $this->drupalPostForm('outline/entry/' . $entry2->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('outline/entry/' . $entry2->id() . '/edit');
+    $this->submitForm($edit, t('Save'));

     // Create node with entry2.
     $edit = [];
     $node = $this->drupalCreateNode(['type' => 'article']);
     $edit[$this->fieldName . '[]'] = $entry2->id();
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Save'));
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, t('Save'));

     // Generate and test sanitized tokens for entry1.
     $tests = [];
@@ @@
     foreach ($tests as $input => $expected) {
       $bubbleable_metadata = new BubbleableMetadata();
       $output = $token_service->replace($input, ['entry' => $entry1], ['langcode' => $language_interface->getId()], $bubbleable_metadata);
-      $this->assertEqual($output, $expected, new FormattableMarkup('Sanitized outline entry token %token replaced.', ['%token' => $input]));
-      $this->assertEqual($bubbleable_metadata, $metadata_tests[$input]);
+      $this->assertEquals($output, $expected, new FormattableMarkup('Sanitized outline entry token %token replaced.', ['%token' => $input]));
+      $this->assertEquals($bubbleable_metadata, $metadata_tests[$input]);
     }

     // Generate and test sanitized tokens for entry2.
@@ @@

     foreach ($tests as $input => $expected) {
       $output = $token_service->replace($input, ['entry' => $entry2], ['langcode' => $language_interface->getId()]);
-      $this->assertEqual($output, $expected, new FormattableMarkup('Sanitized outline entry token %token replaced.', ['%token' => $input]));
+      $this->assertEquals($output, $expected, new FormattableMarkup('Sanitized outline entry token %token replaced.', ['%token' => $input]));
     }

     // Generate and test sanitized tokens.
@@ @@

     foreach ($tests as $input => $expected) {
       $output = $token_service->replace($input, ['outline' => $this->outline], ['langcode' => $language_interface->getId()]);
-      $this->assertEqual($output, $expected, new FormattableMarkup('Sanitized outline outline token %token replaced.', ['%token' => $input]));
+      $this->assertEquals($output, $expected, new FormattableMarkup('Sanitized outline outline token %token replaced.', ['%token' => $input]));
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/outline/tests/src/Functional/ThemeTest.php:41

    ---------- begin diff ----------
@@ @@
     // should use the administrative theme.
     $outline = $this->createOutline();
     $this->drupalGet('admin/structure/outline/manage/' . $outline->id() . '/add');
-    $this->assertRaw('seven/css/base/elements.css', t("The administrative theme's CSS appears on the page for adding a outline entry."));
+    $this->assertSession()->responseContains('seven/css/base/elements.css');

     // Viewing a outline entry should use the default theme.
     $entry = $this->createEntry($outline);
     $this->drupalGet('outline/entry/' . $entry->id());
-    $this->assertRaw('bartik/css/base/elements.css', t("The default theme's CSS appears on the page for viewing a outline entry."));
+    $this->assertSession()->responseContains('bartik/css/base/elements.css');

     // Editing a outline entry should use the same theme as adding one.
     $this->drupalGet('outline/entry/' . $entry->id() . '/edit');
-    $this->assertRaw('seven/css/base/elements.css', t("The administrative theme's CSS appears on the page for editing a outline entry."));
+    $this->assertSession()->responseContains('seven/css/base/elements.css');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/outline/tests/src/Functional/OutlineUiTest.php:45

    ---------- begin diff ----------
@@ @@
     $edit['name'] = $this->randomMachineName();
     $edit['description'] = $this->randomMachineName();
     $edit['oid'] = $oid;
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertRaw(t('Created new outline %name.', ['%name' => $edit['name']]), 'Outline created successfully.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains(t('Created new outline %name.', ['%name' => $edit['name']]));

     // Edit the outline.
     $this->drupalGet('admin/structure/outline');
-    $this->assertText($edit['name'], 'Outline name found in the outline overview listing.');
-    $this->assertText($edit['description'], 'Outline description found in the outline overview listing.');
-    $this->assertLinkByHref(Url::fromRoute('entity.outline_entry.add_form', ['outline' => $edit['oid']])->toString());
+    $this->assertSession()->pageTextContains($edit['name']);
+    $this->assertSession()->pageTextContains($edit['description']);
+    $this->assertSession()->linkByHrefExists(Url::fromRoute('entity.outline_entry.add_form', ['outline' => $edit['oid']])->toString());
     $this->clickLink(t('Edit outline'));
     $edit = [];
     $edit['name'] = $this->randomMachineName();
     $edit['description'] = $this->randomMachineName();
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->drupalGet('admin/structure/outline');
-    $this->assertText($edit['name'], 'Outline name found in the outline overview listing.');
-    $this->assertText($edit['description'], 'Outline description found in the outline overview listing.');
+    $this->assertSession()->pageTextContains($edit['name']);
+    $this->assertSession()->pageTextContains($edit['description']);

     // Try to submit a outline with a duplicate machine name.
     $edit['oid'] = $oid;
-    $this->drupalPostForm('admin/structure/outline/add', $edit, t('Save'));
-    $this->assertText(t('The machine-readable name is already in use. It must be unique.'));
+    $this->drupalGet('admin/structure/outline/add');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('The machine-readable name is already in use. It must be unique.'));

     // Try to submit an invalid machine name.
     $edit['oid'] = '!&^%';
-    $this->drupalPostForm('admin/structure/outline/add', $edit, t('Save'));
-    $this->assertText(t('The machine-readable name must contain only lowercase letters, numbers, and underscores.'));
+    $this->drupalGet('admin/structure/outline/add');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('The machine-readable name must contain only lowercase letters, numbers, and underscores.'));

     // Ensure that outline titles are escaped properly.
     $edit = [];
@@ @@
     $edit['name'] = 'Don\'t Panic';
     $edit['description'] = $this->randomMachineName();
     $edit['oid'] = 'don_t_panic';
-    $this->drupalPostForm('admin/structure/outline/add', $edit, t('Save'));
+    $this->drupalGet('admin/structure/outline/add');
+    $this->submitForm($edit, t('Save'));

     $site_name = $this->config('system.site')->get('name');
-    $this->assertTitle("Don't Panic | $site_name");
+    $this->assertSession()->titleEquals("Don't Panic | $site_name");
   }

   /**
@@ @@
       $outlines[$key]->set('weight', $weight);
       $edit['outlines[' . $key . '][weight]'] = $weight;
     }
+    $this->drupalGet('admin/structure/outline');
     // Saving the new weights via the interface.
-    $this->drupalPostForm('admin/structure/outline', $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Load the outlines from the database.
     $this->container->get('entity_type.manager')->getStorage('outline')->resetCache();
@@ @@

     // Check that the weights are saved in the database correctly.
     foreach ($outlines as $key => $outline) {
-      $this->assertEqual($new_outlines[$key]->get('weight'), $outlines[$key]->get('weight'), 'The outline weight was changed.');
+      $this->assertEquals($new_outlines[$key]->get('weight'), $outlines[$key]->get('weight'), 'The outline weight was changed.');
     }
   }

@@ @@
     $this->assertEmpty(Outline::loadMultiple(), 'No outlines found.');
     $this->drupalGet('admin/structure/outline');
     // Check the default message for no outlines.
-    $this->assertText(t('No outlines available.'));
+    $this->assertSession()->pageTextContains(t('No outlines available.'));
   }

   /**
@@ @@
       'name' => $this->randomMachineName(),
       'oid' => $oid,
     ];
-    $this->drupalPostForm('admin/structure/outline/add', $edit, t('Save'));
-    $this->assertText(t('Created new outline'), 'New outline was created.');
+    $this->drupalGet('admin/structure/outline/add');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('Created new outline'));

     // Check the created outline.
     $this->container->get('entity_type.manager')->getStorage('outline')->resetCache();
@@ @@
     // Delete the outline.
     $this->drupalGet('admin/structure/outline/manage/' . $outline->id());
     $this->clickLink(t('Delete'));
-    $this->assertRaw(t('Are you sure you want to delete the outline %name?', ['%name' => $outline->label()]), '[confirm deletion] Asks for confirmation.');
-    $this->assertText(t('Deleting a outline will delete all the entries in it. This action cannot be undone.'), '[confirm deletion] Inform that all entries will be deleted.');
+    $this->assertSession()->responseContains(t('Are you sure you want to delete the outline %name?', ['%name' => $outline->label()]));
+    $this->assertSession()->pageTextContains(t('Deleting a outline will delete all the entries in it. This action cannot be undone.'));

     // Confirm deletion.
-    $this->drupalPostForm(NULL, NULL, t('Delete'));
-    $this->assertRaw(t('Deleted outline %name.', ['%name' => $outline->label()]), 'Outline deleted.');
+    $this->submitForm(NULL, t('Delete'));
+    $this->assertSession()->responseContains(t('Deleted outline %name.', ['%name' => $outline->label()]));
     $this->container->get('entity_type.manager')->getStorage('outline')->resetCache();
     $this->assertNull(Outline::load($oid), 'Outline not found.');
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertLinkByHrefRector
 * AssertRawRector
 * AssertTextRector
 * AssertTitleRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/outline/tests/src/Functional/OutlineTranslationTest.php:38

    ---------- begin diff ----------
@@ @@
     $this->drupalGet('admin/structure/outline/add');

     // Check that the field to enable content translation is available.
-    $this->assertField('edit-default-language-content-translation', 'The content translation checkbox is present on the page.');
+    $this->assertSession()->fieldExists('edit-default-language-content-translation', 'The content translation checkbox is present on the page.');

     // Create the outline.
     $oid = mb_strtolower($this->randomMachineName());
@@ @@
     $edit['langcode'] = 'en';
     $edit['oid'] = $oid;
     $edit['default_language[content_translation]'] = TRUE;
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Check if content translation is enabled on the edit page.
     $this->drupalGet('admin/structure/outline/manage/' . $oid);
-    $this->assertFieldChecked('edit-default-language-content-translation', 'The content translation was correctly selected.');
+    $this->assertSession()->checkboxChecked('edit-default-language-content-translation', 'The content translation was correctly selected.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertFieldRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/outline/tests/src/Functional/OutlineTestBase.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('system_breadcrumb_block');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/outline/tests/src/Functional/OutlinePermissionsTest.php:235

    ---------- begin diff ----------
@@ @@
     // Visit the main outline administration page.
     $this->drupalGet('admin/structure/outline/manage/' . $outline->id() . '/add');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertField('edit-name-0-value', 'Add outline entry form opened successfully.');
+    $this->assertSession()->fieldExists('edit-name-0-value', 'Add outline entry form opened successfully.');

     // Submit the entry.
     $edit = [];
     $edit['name[0][value]'] = $this->randomMachineName();

-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertText(t('Created new entry @name.', ['@name' => $edit['name[0][value]']]), 'Entry created successfully.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('Created new entry @name.', ['@name' => $edit['name[0][value]']]));

     // Verify that the creation message contains a link to a entry.
     $view_link = $this->xpath('//div[@class="messages"]//a[contains(@href, :href)]', [':href' => 'entry/']);
-    $this->assert(isset($view_link), 'The message area contains a link to a entry');
+    $this->assertTrue(isset($view_link), 'The message area contains a link to a entry');

     $entries = \Drupal::entityTypeManager()
       ->getStorage('outline_entry')
@@ @@
     // Edit the entry.
     $this->drupalGet('outline/entry/' . $entry->id() . '/edit');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText($edit['name[0][value]'], 'Edit outline entry form opened successfully.');
+    $this->assertSession()->pageTextContains($edit['name[0][value]']);

     $edit['name[0][value]'] = $this->randomMachineName();
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertText(t('Updated entry @name.', ['@name' => $edit['name[0][value]']]), 'Entry updated successfully.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('Updated entry @name.', ['@name' => $edit['name[0][value]']]));

     // Delete the outline.
     $this->drupalGet('outline/entry/' . $entry->id() . '/delete');
-    $this->assertRaw(t('Are you sure you want to delete the @entity-type %label?', ['@entity-type' => 'outline entry', '%label' => $edit['name[0][value]']]), 'Delete outline entry form opened successfully.');
+    $this->assertSession()->responseContains(t('Are you sure you want to delete the @entity-type %label?', ['@entity-type' => 'outline entry', '%label' => $edit['name[0][value]']]));

     // Confirm deletion.
-    $this->drupalPostForm(NULL, NULL, t('Delete'));
-    $this->assertRaw(t('Deleted entry %name.', ['%name' => $edit['name[0][value]']]), 'Entry deleted.');
+    $this->submitForm(NULL, t('Delete'));
+    $this->assertSession()->responseContains(t('Deleted entry %name.', ['%name' => $edit['name[0][value]']]));

     // Test as user with "create" permissions.
     $user = $this->drupalCreateUser(["create entries in {$outline->id()}"]);
@@ @@
     $edit = [];
     $edit['name[0][value]'] = $this->randomMachineName();

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $assert_session->pageTextContains(t('Created new entry @name.', ['@name' => $edit['name[0][value]']]));

     $entries = \Drupal::entityTypeManager()
@@ @@
     // Edit the entry.
     $this->drupalGet('outline/entry/' . $entry->id() . '/edit');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText($entry->getName(), 'Edit outline entry form opened successfully.');
+    $this->assertSession()->pageTextContains($entry->getName());

     $edit['name[0][value]'] = $this->randomMachineName();
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertText(t('Updated entry @name.', ['@name' => $edit['name[0][value]']]), 'Entry updated successfully.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->pageTextContains(t('Updated entry @name.', ['@name' => $edit['name[0][value]']]));

     // Verify that the update message contains a link to a entry.
     $view_link = $this->xpath('//div[@class="messages"]//a[contains(@href, :href)]', [':href' => 'entry/']);
-    $this->assert(isset($view_link), 'The message area contains a link to a entry');
+    $this->assertTrue(isset($view_link), 'The message area contains a link to a entry');

     // Ensure the entry cannot be deleted.
     $this->drupalGet('outline/entry/' . $entry->id() . '/delete');
@@ @@

     // Delete the outline.
     $this->drupalGet('outline/entry/' . $entry->id() . '/delete');
-    $this->assertRaw(t('Are you sure you want to delete the @entity-type %label?', ['@entity-type' => 'outline entry', '%label' => $entry->getName()]), 'Delete outline entry form opened successfully.');
+    $this->assertSession()->responseContains(t('Are you sure you want to delete the @entity-type %label?', ['@entity-type' => 'outline entry', '%label' => $entry->getName()]));

     // Confirm deletion.
-    $this->drupalPostForm(NULL, NULL, t('Delete'));
-    $this->assertRaw(t('Deleted entry %name.', ['%name' => $entry->getName()]), 'Entry deleted.');
+    $this->submitForm(NULL, t('Delete'));
+    $this->assertSession()->responseContains(t('Deleted entry %name.', ['%name' => $entry->getName()]));

     // Test as user without proper permissions.
     $user = $this->drupalCreateUser();
    ----------- end diff -----------

Applied rules:
 * AssertFieldRector
 * AssertRawRector
 * AssertRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


20) modules/contrib/outline/tests/src/Functional/OutlineImageTest.php:91

    ---------- begin diff ----------
@@ @@
     $image = array_pop($files);
     $edit['name[0][value]'] = $this->randomMachineName();
     $edit['files[field_test_0]'] = \Drupal::service('file_system')->realpath($image->uri);
-    $this->drupalPostForm('admin/structure/outline/manage/' . $this->outline->id() . '/add', $edit, t('Save'));
-    $this->drupalPostForm(NULL, ['field_test[0][alt]' => $this->randomMachineName()], t('Save'));
+    $this->drupalGet('admin/structure/outline/manage/' . $this->outline->id() . '/add');
+    $this->submitForm($edit, t('Save'));
+    $this->submitForm(['field_test[0][alt]' => $this->randomMachineName()], t('Save'));
     $entries = \Drupal::entityTypeManager()->getStorage('outline_entry')->loadByProperties(['name' => $edit['name[0][value]']]);
     $entry = reset($entries);
-    $this->assertText(t('Created new entry @name.', ['@name' => $entry->getName()]));
+    $this->assertSession()->pageTextContains(t('Created new entry @name.', ['@name' => $entry->getName()]));

     // Create a user that should have access to the file and one that doesn't.
     $access_user = $this->drupalCreateUser(['access content']);
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/outline/tests/src/Functional/OutlineEntryPagerTest.php:64

    ---------- begin diff ----------
@@ @@

     // Ensure that pager is visible on page 1.
     $this->drupalGet('admin/structure/outline/manage/' . $this->outline->id() . '/overview');
-    $this->assertPattern('|<nav class="pager" [^>]*>|');
+    $this->assertSession()->responseMatches('|<nav class="pager" [^>]*>|');

     // Ensure that pager is visible on page 2.
     $this->drupalGet('admin/structure/outline/manage/' . $this->outline->id() . '/overview', ['query' => ['page' => 1]]);
-    $this->assertPattern('|<nav class="pager" [^>]*>|');
+    $this->assertSession()->responseMatches('|<nav class="pager" [^>]*>|');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertPatternRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


22) modules/contrib/outline/tests/src/Functional/OutlineEntryIndentationTest.php:66

    ---------- begin diff ----------
@@ @@
       'entries[tid:' . $entry2->id() . ':0][weight]' => 1,
     ];
     // Submit the edited form and check for HTML indentation element presence.
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertPattern('|<div class="js-indentation indentation">&nbsp;</div>|');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseMatches('|<div class="js-indentation indentation">&nbsp;</div>|');

     // Check explicitly that entry 2's parent is entry 1.
     $parents = $outline_storage->loadParents($entry2->id());
-    $this->assertEqual(key($parents), 1, 'Entry 1 is the entry 2\'s parent');
+    $this->assertEquals(key($parents), 1, 'Entry 1 is the entry 2\'s parent');

     // Move the second entry back out to the root level.
     $this->drupalGet('admin/structure/outline/manage/' . $this->outline->get('oid') . '/overview');
@@ @@
     $edit = [
       'entries[tid:' . $entry2->id() . ':0][weight]' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     // All entries back at the root level, no indentation should be present.
     $this->assertSession()->responseNotMatches('|<div class="js-indentation indentation">&nbsp;</div>|');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertPatternRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


23) modules/contrib/outline/tests/src/Functional/LoadMultipleTest.php:39

    ---------- begin diff ----------
@@ @@
     $entry_storage = \Drupal::entityTypeManager()->getStorage('outline_entry');
     $entries = $entry_storage->loadByProperties(['oid' => $outline->id()]);
     $count = count($entries);
-    $this->assertEqual($count, 5, new FormattableMarkup('Correct number of entries were loaded. @count entries.', ['@count' => $count]));
+    $this->assertEquals($count, 5, new FormattableMarkup('Correct number of entries were loaded. @count entries.', ['@count' => $count]));

     // Load the same entries again by tid.
     $entries2 = Entry::loadMultiple(array_keys($entries));
-    $this->assertEqual($count, count($entries2), 'Five entries were loaded by tid.');
-    $this->assertEqual($entries, $entries2, 'Both arrays contain the same entries.');
+    $this->assertEquals($count, count($entries2), 'Five entries were loaded by tid.');
+    $this->assertEquals($entries, $entries2, 'Both arrays contain the same entries.');

     // Remove one entry from the array, then delete it.
     $deleted = array_shift($entries2);
@@ @@
     $loaded_entries = $entry_storage->loadByProperties(['name' => $entry->getName()]);
     $this->assertCount(1, $loaded_entries, 'One entry was loaded.');
     $loaded_entry = reset($loaded_entries);
-    $this->assertEqual($entry->id(), $loaded_entry->id(), 'Entry loaded by name successfully.');
+    $this->assertEquals($entry->id(), $loaded_entry->id(), 'Entry loaded by name successfully.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


24) modules/contrib/outline/tests/src/Functional/EntryTranslationUITest.php:131

    ---------- begin diff ----------
@@ @@
     // Verify translation links.
     $this->drupalGet('admin/structure/outline/manage/' . $this->outline->id() . '/overview');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertLinkByHref('entry/' . $translatable_tid . '/translations', 0, 'The translations link exists for a translatable outline.');
-    $this->assertLinkByHref('entry/' . $translatable_tid . '/edit', 0, 'The edit link exists for a translatable outline.');
+    $this->assertSession()->linkByHrefExists('entry/' . $translatable_tid . '/translations', 0, 'The translations link exists for a translatable outline.');
+    $this->assertSession()->linkByHrefExists('entry/' . $translatable_tid . '/edit', 0, 'The edit link exists for a translatable outline.');

     $this->drupalGet('admin/structure/outline/manage/' . $untranslatable_outline->id() . '/overview');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertLinkByHref('entry/' . $untranslatable_tid . '/edit');
-    $this->assertNoLinkByHref('entry/' . $untranslatable_tid . '/translations');
+    $this->assertSession()->linkByHrefExists('entry/' . $untranslatable_tid . '/edit');
+    $this->assertSession()->linkByHrefNotExists('entry/' . $untranslatable_tid . '/translations');
   }

   /**
@@ @@
           '@title' => $entity->getTranslation($langcode)->label(),
           '%language' => $languages[$langcode]->getName(),
         ]);
-        $this->assertRaw($title);
+        $this->assertSession()->responseContains($title);
       }
     }
   }
@@ @@
       foreach ($this->langcodes as $langcode) {
         $options = ['language' => $languages[$langcode]];
         $url = $entity->toUrl('edit-form', $options);
-        $this->drupalPostForm($url, ['status[value]' => $value], t('Save'), $options);
+        $this->drupalGet($url, $options);
+        $this->submitForm(['status[value]' => $value], t('Save'));
       }
       $storage->resetCache([$this->entityId]);
       $entity = $storage->load($this->entityId);
    ----------- end diff -----------

Applied rules:
 * AssertLinkByHrefRector
 * AssertNoLinkByHrefRector
 * AssertRawRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/outline/tests/src/Functional/EntryLanguageTest.php"   
         file, due to:                                                          
         "System error: "Invalid value"                                         
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 212          

 [ERROR] Could not process                                                      
         "modules/contrib/outline/tests/src/Functional/OutlineLanguageTest.php" 
         file, due to:                                                          
         "System error: "Invalid value"                                         
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 212          

