diff --git a/src/AgreementHandler.php b/src/AgreementHandler.php
index ea25ea8..24d96f3 100644
--- a/src/AgreementHandler.php
+++ b/src/AgreementHandler.php
@@ -226,7 +226,7 @@ class AgreementHandler implements AgreementHandlerInterface {
     elseif ($agreement->agreeOnce()) {
       $expire = new \DateTime('+10 years');
     }
-    return new Cookie($cookieName, $agreed, $expire, '/', NULL, NULL, 'lax');
+    return Cookie::create($cookieName, $agreed, $expire, '/', NULL, NULL, 'lax');
   }
 
   /**
diff --git a/src/EventSubscriber/AgreementSubscriber.php b/src/EventSubscriber/AgreementSubscriber.php
index b87fbee..484d21a 100644
--- a/src/EventSubscriber/AgreementSubscriber.php
+++ b/src/EventSubscriber/AgreementSubscriber.php
@@ -2,15 +2,15 @@
 
 namespace Drupal\agreement\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\agreement\AgreementHandlerInterface;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Session\SessionManagerInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\HttpExceptionInterface;
 
 /**
@@ -68,7 +68,7 @@ class AgreementSubscriber implements EventSubscriberInterface {
   /**
    * Check if the user needs to accept an agreement.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent|\Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent|\Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The response event.
    */
   public function checkForRedirection($event) {
@@ -103,12 +103,12 @@ class AgreementSubscriber implements EventSubscriberInterface {
    * the checkForRedirection function, that will lead to an infinite redirect
    * loop.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *   The response exception event.
    */
-  public function exceptionRedirect(GetResponseForExceptionEvent $event) {
-    $exception = $event->getException();
-    if ($exception instanceof HttpExceptionInterface && $event->getException()->getStatusCode() === 403) {
+  public function exceptionRedirect(ExceptionEvent $event) {
+    $exception = $event->getThrowable();
+    if ($exception instanceof HttpExceptionInterface && $event->getThrowable()->getStatusCode() === 403) {
       $this->checkForRedirection($event);
     }
   }
@@ -116,10 +116,10 @@ class AgreementSubscriber implements EventSubscriberInterface {
   /**
    * Executes function to set redirect response if it is required.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The response event.
    */
-  public function requestForRedirection(GetResponseEvent $event) {
+  public function requestForRedirection(RequestEvent $event) {
     $this->checkForRedirection($event);
   }
 
diff --git a/tests/src/Functional/AgreementAccessDeniedRedirectTest.php b/tests/src/Functional/AgreementAccessDeniedRedirectTest.php
index 5b51b61..2a63b26 100644
--- a/tests/src/Functional/AgreementAccessDeniedRedirectTest.php
+++ b/tests/src/Functional/AgreementAccessDeniedRedirectTest.php
@@ -19,7 +19,7 @@ class AgreementAccessDeniedRedirectTest extends AgreementTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->unprivilegedUser = $this->createUnprivilegedUser();
diff --git a/tests/src/Functional/AgreementAnonymousTest.php b/tests/src/Functional/AgreementAnonymousTest.php
index 5dd33a0..d875122 100644
--- a/tests/src/Functional/AgreementAnonymousTest.php
+++ b/tests/src/Functional/AgreementAnonymousTest.php
@@ -12,7 +12,7 @@ class AgreementAnonymousTest extends AgreementTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $settings = $this->agreement->getSettings();
diff --git a/tests/src/Functional/AgreementCustomUnprivilegedUserTest.php b/tests/src/Functional/AgreementCustomUnprivilegedUserTest.php
index d7170c2..f93a903 100644
--- a/tests/src/Functional/AgreementCustomUnprivilegedUserTest.php
+++ b/tests/src/Functional/AgreementCustomUnprivilegedUserTest.php
@@ -19,7 +19,7 @@ class AgreementCustomUnprivilegedUserTest extends AgreementTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->account = $this->createUnprivilegedUser();
@@ -50,7 +50,8 @@ class AgreementCustomUnprivilegedUserTest extends AgreementTestBase {
 
     $privilegedUser = $this->createPrivilegedUser();
     $this->drupalLogin($privilegedUser);
-    $this->drupalPostForm('/admin/config/people/agreement/manage/' . $this->agreement->id() . '/delete', [], 'Confirm');
+    $this->drupalGet('/admin/config/people/agreement/manage/' . $this->agreement->id() . '/delete');
+    $this->submitForm([], 'Confirm');
     $this->assertSession()
       ->pageTextContains('Successfully deleted agreement');
   }
@@ -105,7 +106,8 @@ class AgreementCustomUnprivilegedUserTest extends AgreementTestBase {
       'pass[pass1]' => $pass = $this->randomString(),
       'pass[pass2]' => $pass,
     ];
-    $this->drupalPostForm('/user/' . $this->account->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('/user/' . $this->account->id() . '/edit');
+    $this->submitForm($edit, 'Save');
 
     if ($this->checkForMetaRefresh()) {
       $this->metaRefreshCount = 0;
diff --git a/tests/src/Functional/AgreementMultilingualTest.php b/tests/src/Functional/AgreementMultilingualTest.php
index 737995f..8002891 100644
--- a/tests/src/Functional/AgreementMultilingualTest.php
+++ b/tests/src/Functional/AgreementMultilingualTest.php
@@ -41,7 +41,7 @@ class AgreementMultilingualTest extends AgreementTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Add a new language.
@@ -69,7 +69,8 @@ class AgreementMultilingualTest extends AgreementTestBase {
       'language_interface[enabled][language-url]' => '1',
       'language_interface[enabled][language-user]' => '1',
     ];
-    $this->drupalPostForm('admin/config/regional/language/detection', $languageEdit, t('Save settings'));
+    $this->drupalGet('admin/config/regional/language/detection');
+    $this->submitForm($languageEdit, t('Save settings'));
 
     // Asserts that the configuration is translatable.
     // @todo Make these better translations.
@@ -82,7 +83,8 @@ class AgreementMultilingualTest extends AgreementTestBase {
       'translation[config_names][agreement.agreement.default][settings][failure]' => 'Debes aceptar nuestro acuerdo para continuar.',
       'translation[config_names][agreement.agreement.default][agreement]' => 'Este es el texto del acuerdo.',
     ];
-    $this->drupalPostForm('admin/config/people/agreement/manage/default/translate/es/add', $configEdit, t('Save translation'));
+    $this->drupalGet('admin/config/people/agreement/manage/default/translate/es/add');
+    $this->submitForm($configEdit, t('Save translation'));
 
     $this->drupalLogout();
   }
@@ -116,7 +118,8 @@ class AgreementMultilingualTest extends AgreementTestBase {
    * @throws \Behat\Mink\Exception\ResponseTextException
    */
   public function assertAgreed(Agreement $agreement) {
-    $this->drupalPostForm($agreement->get('path'), ['agree' => 1], 'Enviar');
+    $this->drupalGet($agreement->get('path'));
+    $this->submitForm(['agree' => 1], 'Enviar');
 
     // Check for redirects. It's odd that drupalPostForm doesn't handle this but
     // drupalGet does.
@@ -137,7 +140,8 @@ class AgreementMultilingualTest extends AgreementTestBase {
    * @throws \Behat\Mink\Exception\ResponseTextException
    */
   public function assertNotAgreed(Agreement $agreement) {
-    $this->drupalPostForm($agreement->get('path'), [], 'Enviar');
+    $this->drupalGet($agreement->get('path'));
+    $this->submitForm([], 'Enviar');
     $this->assertSession()->pageTextContains('Debes aceptar nuestro acuerdo para continuar.');
   }
 
diff --git a/tests/src/Functional/AgreementMultipleRoleTest.php b/tests/src/Functional/AgreementMultipleRoleTest.php
index 4b04631..8cab880 100644
--- a/tests/src/Functional/AgreementMultipleRoleTest.php
+++ b/tests/src/Functional/AgreementMultipleRoleTest.php
@@ -26,7 +26,7 @@ class AgreementMultipleRoleTest extends AgreementTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create the roles.
diff --git a/tests/src/Functional/AgreementMultipleTest.php b/tests/src/Functional/AgreementMultipleTest.php
index b40ffd2..e155913 100644
--- a/tests/src/Functional/AgreementMultipleTest.php
+++ b/tests/src/Functional/AgreementMultipleTest.php
@@ -21,7 +21,7 @@ class AgreementMultipleTest extends AgreementTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->newAgreement = Agreement::create([
diff --git a/tests/src/Functional/AgreementRevokeTest.php b/tests/src/Functional/AgreementRevokeTest.php
index 07c8447..e951386 100644
--- a/tests/src/Functional/AgreementRevokeTest.php
+++ b/tests/src/Functional/AgreementRevokeTest.php
@@ -25,7 +25,8 @@ class AgreementRevokeTest extends AgreementTestBase {
     $edit = [
       'agree' => '0',
     ];
-    $this->drupalPostForm('/agreement', $edit, $settings['submit']);
+    $this->drupalGet('/agreement');
+    $this->submitForm($edit, $settings['submit']);
     $this->assertSession()->pageTextContains('You have successfully revoked your acceptance of our agreement. ');
 
     // Assert agreement page after revoking.
diff --git a/tests/src/Functional/AgreementTestBase.php b/tests/src/Functional/AgreementTestBase.php
index 2e0ff99..0c3eb68 100644
--- a/tests/src/Functional/AgreementTestBase.php
+++ b/tests/src/Functional/AgreementTestBase.php
@@ -57,7 +57,7 @@ abstract class AgreementTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Set front page to "node".
@@ -206,7 +206,8 @@ abstract class AgreementTestBase extends BrowserTestBase {
    */
   public function assertNotAgreed(Agreement $agreement) {
     $settings = $agreement->getSettings();
-    $this->drupalPostForm($agreement->get('path'), [], $settings['submit']);
+    $this->drupalGet($agreement->get('path'));
+    $this->submitForm([], $settings['submit']);
     $this->assertSession()->pageTextContains($settings['failure']);
   }
 
@@ -220,7 +221,8 @@ abstract class AgreementTestBase extends BrowserTestBase {
    */
   public function assertAgreed(Agreement $agreement) {
     $settings = $agreement->getSettings();
-    $this->drupalPostForm($agreement->get('path'), ['agree' => 1], $settings['submit']);
+    $this->drupalGet($agreement->get('path'));
+    $this->submitForm(['agree' => 1], $settings['submit']);
 
     // Check for redirects. It's odd that drupalPostForm doesn't handle this but
     // drupalGet does.
diff --git a/tests/src/Kernel/d6/AgreementMigrateTest.php b/tests/src/Kernel/d6/AgreementMigrateTest.php
index 62118fc..030b915 100644
--- a/tests/src/Kernel/d6/AgreementMigrateTest.php
+++ b/tests/src/Kernel/d6/AgreementMigrateTest.php
@@ -17,7 +17,7 @@ class AgreementMigrateTest extends MigrateDrupal6TestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $agreementFixture = __DIR__ . '/../../../fixtures/drupal6.php';
diff --git a/tests/src/Kernel/d7/AgreementMigrateTest.php b/tests/src/Kernel/d7/AgreementMigrateTest.php
index 5fc1c02..eb5940d 100644
--- a/tests/src/Kernel/d7/AgreementMigrateTest.php
+++ b/tests/src/Kernel/d7/AgreementMigrateTest.php
@@ -20,7 +20,7 @@ class AgreementMigrateTest extends MigrateDrupal7TestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $agreementFixture = __DIR__ . '/../../../fixtures/drupal7.php';
diff --git a/tests/src/Unit/AgreementHandlerTest.php b/tests/src/Unit/AgreementHandlerTest.php
index 1692d7c..c57a6fa 100644
--- a/tests/src/Unit/AgreementHandlerTest.php
+++ b/tests/src/Unit/AgreementHandlerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\agreement\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\agreement\AgreementHandler;
 use Drupal\agreement\Entity\Agreement;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
@@ -17,6 +18,7 @@ use Symfony\Component\HttpFoundation\RequestStack;
  */
 class AgreementHandlerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Asserts that database operation errors are handled.
    *
@@ -45,9 +47,7 @@ class AgreementHandlerTest extends UnitTestCase {
       ->willReturn($transactionProphet->reveal());
 
     // Prophecy does not allow mocking objects that return $this because.
-    $delete = $this->getMockBuilder('\Drupal\Core\Database\Query\Delete')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $delete = $this->createMock('\Drupal\Core\Database\Query\Delete');
     $delete->expects($this->any())
       ->method('condition')
       ->willReturnSelf();
@@ -61,9 +61,7 @@ class AgreementHandlerTest extends UnitTestCase {
         return 3;
       });
 
-    $insert = $this->getMockBuilder('\Drupal\Core\Database\Query\Insert')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $insert = $this->createMock('\Drupal\Core\Database\Query\Insert');
     $insert->expects($this->any())
       ->method('fields')
       ->willReturnSelf();
@@ -146,9 +144,7 @@ class AgreementHandlerTest extends UnitTestCase {
     $statementProphet->fetchField()->willReturn($agreed);
 
     // Mocks select query using mock object because prophecy.
-    $select = $this->getMockBuilder('\Drupal\Core\Database\Query\SelectInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $select = $this->createMock('\Drupal\Core\Database\Query\SelectInterface');
     $select->expects($this->any())
       ->method('fields')
       ->willReturnSelf();
diff --git a/tests/src/Unit/EventSubscriber/AgreementSubscriberTest.php b/tests/src/Unit/EventSubscriber/AgreementSubscriberTest.php
index d40afd0..5fbeb68 100644
--- a/tests/src/Unit/EventSubscriber/AgreementSubscriberTest.php
+++ b/tests/src/Unit/EventSubscriber/AgreementSubscriberTest.php
@@ -2,12 +2,13 @@
 
 namespace Drupal\Tests\agreement\Unit\EventSubscriber;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\agreement\EventSubscriber\AgreementSubscriber;
 use Drupal\Tests\UnitTestCase;
 use Prophecy\Argument;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\HttpKernelInterface;
 
 /**
@@ -17,6 +18,7 @@ use Symfony\Component\HttpKernel\HttpKernelInterface;
  */
 class AgreementSubscriberTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Asserts that check for redirection method is functional.
    *
@@ -39,7 +41,7 @@ class AgreementSubscriberTest extends UnitTestCase {
     $kernelProphet = $this->prophesize('\Drupal\Core\DrupalKernelInterface');
 
     $request = new Request();
-    $event = new GetResponseEvent(
+    $event = new RequestEvent(
       $kernelProphet->reveal(),
       $request,
       HttpKernelInterface::MASTER_REQUEST
diff --git a/tests/src/Unit/Plugin/views/field/AgreementEntityTest.php b/tests/src/Unit/Plugin/views/field/AgreementEntityTest.php
index 774f380..50aa710 100644
--- a/tests/src/Unit/Plugin/views/field/AgreementEntityTest.php
+++ b/tests/src/Unit/Plugin/views/field/AgreementEntityTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\agreement\Unit\Plugin\views\field;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\agreement\Entity\Agreement;
 use Drupal\agreement\Plugin\views\field\AgreementEntity;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ -15,6 +16,7 @@ use Drupal\views\ResultRow;
  */
 class AgreementEntityTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Agreement entity plugin.
    *
@@ -25,7 +27,7 @@ class AgreementEntityTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $agreement = new Agreement([
       'id' => 'default',
       'label' => 'Default agreement',
