diff --git a/rest_api_access_token.info.yml b/rest_api_access_token.info.yml
index 50edf26..e7ff11e 100755
--- a/rest_api_access_token.info.yml
+++ b/rest_api_access_token.info.yml
@@ -3,5 +3,4 @@ description: REST API Access Token module.
 package: Web services
 type: module
 configure: rest_api_access_token.config_form
-core_version_requirement: ^8 || ^9
-core: 8.x
+core_version_requirement: ^8 || ^9 || ^10
diff --git a/src/Authentication/Event/LogoutEvent.php b/src/Authentication/Event/LogoutEvent.php
index a2ec4ab..73bc517 100755
--- a/src/Authentication/Event/LogoutEvent.php
+++ b/src/Authentication/Event/LogoutEvent.php
@@ -11,7 +11,7 @@ use Symfony\Component\HttpFoundation\Request;
  *
  * @package Drupal\rest_api_access_token\Authentication\Event
  */
-class LogoutEvent extends Event {
+class LogoutEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * Request model.
diff --git a/src/Authentication/Event/TokenResponseEvent.php b/src/Authentication/Event/TokenResponseEvent.php
index c261dd4..574e1e6 100755
--- a/src/Authentication/Event/TokenResponseEvent.php
+++ b/src/Authentication/Event/TokenResponseEvent.php
@@ -10,7 +10,7 @@ use Symfony\Component\EventDispatcher\Event;
  *
  * @package Drupal\rest_api_access_token\Authentication\Event
  */
-class TokenResponseEvent extends Event {
+class TokenResponseEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * Token model.
diff --git a/src/Controller/AuthController.php b/src/Controller/AuthController.php
index 398ccf5..7e242a0 100755
--- a/src/Controller/AuthController.php
+++ b/src/Controller/AuthController.php
@@ -115,7 +115,7 @@ class AuthController extends ControllerBase {
     $token = $this->loginService->login($login, $password);
 
     $event = new TokenResponseEvent($token, $data);
-    $this->eventDispatcher->dispatch(AccessTokenEvents::TOKEN_RESPONSE, $event);
+    $this->eventDispatcher->dispatch($event, AccessTokenEvents::TOKEN_RESPONSE);
 
     if (!$event->hasAccess()) {
       throw new AuthenticationException($event->getErrorMessage());
@@ -147,7 +147,7 @@ class AuthController extends ControllerBase {
     $status = $this->loginService->logout($publicToken);
 
     $event = new LogoutEvent($request, $user);
-    $this->eventDispatcher->dispatch(AccessTokenEvents::LOGOUT, $event);
+    $this->eventDispatcher->dispatch($event, AccessTokenEvents::LOGOUT);
 
     $response = [
       self::FIELD_LOGOUT => $status,
@@ -171,7 +171,7 @@ class AuthController extends ControllerBase {
     $status = $this->loginService->logoutFromAllDevices($user);
 
     $event = new LogoutEvent($request, $user);
-    $this->eventDispatcher->dispatch(AccessTokenEvents::LOGOUT, $event);
+    $this->eventDispatcher->dispatch($event, AccessTokenEvents::LOGOUT);
 
     $response = [
       self::FIELD_LOGOUT => $status,
diff --git a/src/EventSubscriber/CacheEndpointSubscriber.php b/src/EventSubscriber/CacheEndpointSubscriber.php
index 508e591..fd6c8dc 100755
--- a/src/EventSubscriber/CacheEndpointSubscriber.php
+++ b/src/EventSubscriber/CacheEndpointSubscriber.php
@@ -79,10 +79,10 @@ class CacheEndpointSubscriber implements EventSubscriberInterface {
   /**
    * Get cached request.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   Response event.
    */
-  public function onKernelRequest(GetResponseEvent $event) {
+  public function onKernelRequest(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
@@ -108,10 +108,10 @@ class CacheEndpointSubscriber implements EventSubscriberInterface {
   /**
    * Store request response in cache.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   Response event.
    */
-  public function onKernelResponse(FilterResponseEvent $event) {
+  public function onKernelResponse(\Symfony\Component\HttpKernel\Event\ResponseEvent $event) {
     $response = $event->getResponse();
     $request = $event->getRequest();
     $requestId = (string) $request->headers->get(AccessTokenProvider::REQUEST_ID);
