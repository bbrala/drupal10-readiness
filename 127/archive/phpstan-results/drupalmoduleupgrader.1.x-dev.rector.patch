diff --git a/src/Routing/RouterBase.php b/src/Routing/RouterBase.php
index 1bb7ae1..ed3a064 100644
--- a/src/Routing/RouterBase.php
+++ b/src/Routing/RouterBase.php
@@ -35,7 +35,7 @@ class RouterBase extends ArrayCollection implements RouterInterface {
    * {@inheritdoc}
    */
   public function finalize() {
-    $this->dispatcher->dispatch('router.built', new RouterBuiltEvent($this));
+    $this->dispatcher->dispatch(new RouterBuiltEvent($this), 'router.built');
   }
 
 }
diff --git a/src/Routing/RouterBuiltEvent.php b/src/Routing/RouterBuiltEvent.php
index ddbe3d5..648d94c 100644
--- a/src/Routing/RouterBuiltEvent.php
+++ b/src/Routing/RouterBuiltEvent.php
@@ -8,7 +8,7 @@ use Symfony\Component\EventDispatcher\Event;
  * Event object fired when all routes have been added to a RouterInterface
  * implementation.
  */
-class RouterBuiltEvent extends Event {
+class RouterBuiltEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * @var \Drupal\drupalmoduleupgrader\Converter\Routing\RouterInterface
diff --git a/templates/EventSubscriber.html.twig b/templates/EventSubscriber.html.twig
index 7c7c421..f39cff4 100644
--- a/templates/EventSubscriber.html.twig
+++ b/templates/EventSubscriber.html.twig
@@ -6,7 +6,7 @@
 namespace Drupal\{{ module }}\EventSubscriber;
 
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\EventDispatcher\EventSubscriberInterface;
+use Symfony\Contracts\EventDispatcher\EventSubscriberInterface;
 
 class {{ class }} implements EventSubscriberInterface {
 
diff --git a/tests/src/Unit/IssueTest.php b/tests/src/Unit/IssueTest.php
index e4813dc..88844fb 100644
--- a/tests/src/Unit/IssueTest.php
+++ b/tests/src/Unit/IssueTest.php
@@ -15,7 +15,7 @@ class IssueTest extends TestBase {
    */
   private $issue;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->issue = new Issue($this->target, 'Foobaz');
   }
@@ -33,7 +33,7 @@ class IssueTest extends TestBase {
   public function testDocumentation() {
     $this->issue->addDocumentation('http://www.google.com', 'Just Google it, baby!');
     $documentation = $this->issue->getDocumentation();
-    $this->assertInternalType('array', $documentation);
+    $this->assertIsArray($documentation);
     $this->assertCount(1, $documentation);
     $this->assertArrayHasKey('url', $documentation[0]);
     $this->assertArrayHasKey('title', $documentation[0]);
@@ -42,7 +42,7 @@ class IssueTest extends TestBase {
   }
 
   public function testViolationsAndDetectors() {
-    $analyzer = $this->getMockBuilder('\Drupal\drupalmoduleupgrader\AnalyzerBase')->disableOriginalConstructor()->getMock();
+    $analyzer = $this->createMock('\Drupal\drupalmoduleupgrader\AnalyzerBase');
     $analyzer->method('getPluginId')->willReturn('blarg');
     $this->issue->addAffectedFile($this->dir->getChild('foo.info')->url(), $analyzer);
 
@@ -65,7 +65,7 @@ END;
     $this->issue->addViolation($node, $analyzer);
 
     $violations = $this->issue->getViolations();
-    $this->assertInternalType('array', $violations);
+    $this->assertIsArray($violations);
     $this->assertCount(2, $violations);
     $this->assertArrayHasKey('file', $violations[0]);
     $this->assertArrayNotHasKey('line_number', $violations[0]);
@@ -75,7 +75,7 @@ END;
     $this->assertEquals($this->dir->getChild('foo.module')->url(), $violations[1]['file']);
 
     $detectors = $this->issue->getDetectors();
-    $this->assertInternalType('array', $detectors);
+    $this->assertIsArray($detectors);
     $this->assertCount(1, $detectors);
     $this->assertEquals($analyzer->getPluginId(), $detectors[0]);
   }
@@ -85,7 +85,7 @@ END;
     $this->issue->addFix('baz', ['bar' => 'wambooli']);
 
     $fixes = $this->issue->getFixes();
-    $this->assertInternalType('array', $fixes);
+    $this->assertIsArray($fixes);
     $this->assertCount(2, $fixes);
     $this->assertEquals(['_plugin_id' => 'foo'], $fixes[0]);
     $this->assertEquals(['_plugin_id' => 'baz', 'bar' => 'wambooli'], $fixes[1]);
diff --git a/tests/src/Unit/Plugin/DMU/Analyzer/DBTest.php b/tests/src/Unit/Plugin/DMU/Analyzer/DBTest.php
index cb0c54b..53de941 100644
--- a/tests/src/Unit/Plugin/DMU/Analyzer/DBTest.php
+++ b/tests/src/Unit/Plugin/DMU/Analyzer/DBTest.php
@@ -10,7 +10,7 @@ use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\FunctionCalls;
  */
 class DBTest extends AnalyzerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $code = <<<'END'
@@ -41,7 +41,7 @@ END;
 
   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(1, $issues[0]->getViolations());
diff --git a/tests/src/Unit/Plugin/DMU/Analyzer/FlagHookTest.php b/tests/src/Unit/Plugin/DMU/Analyzer/FlagHookTest.php
index 338d66f..d2f96a2 100644
--- a/tests/src/Unit/Plugin/DMU/Analyzer/FlagHookTest.php
+++ b/tests/src/Unit/Plugin/DMU/Analyzer/FlagHookTest.php
@@ -10,7 +10,7 @@ use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions;
  */
 class FlagHookTest extends AnalyzerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $code = <<<'END'
@@ -38,7 +38,7 @@ END;
 
   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(1, $issues[0]->getViolations());
diff --git a/tests/src/Unit/Plugin/DMU/Analyzer/FunctionCallTest.php b/tests/src/Unit/Plugin/DMU/Analyzer/FunctionCallTest.php
index 7e11d14..5b8a185 100644
--- a/tests/src/Unit/Plugin/DMU/Analyzer/FunctionCallTest.php
+++ b/tests/src/Unit/Plugin/DMU/Analyzer/FunctionCallTest.php
@@ -10,7 +10,7 @@ use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\FunctionCalls;
  */
 class FunctionCallTest extends AnalyzerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $code = <<<'END'
@@ -39,7 +39,7 @@ END;
 
   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(1, $issues[0]->getViolations());
diff --git a/tests/src/Unit/Plugin/DMU/Analyzer/HookFormAlterTest.php b/tests/src/Unit/Plugin/DMU/Analyzer/HookFormAlterTest.php
index 5dd474d..92360ef 100644
--- a/tests/src/Unit/Plugin/DMU/Analyzer/HookFormAlterTest.php
+++ b/tests/src/Unit/Plugin/DMU/Analyzer/HookFormAlterTest.php
@@ -10,7 +10,7 @@ use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions;
  */
 class HookFormAlterTest extends AnalyzerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $code = <<<'END'
@@ -44,7 +44,7 @@ END;
 
   public function testHookFormAlter() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(2, $issues[0]->getViolations());
@@ -52,7 +52,7 @@ END;
 
   public function testDerivedFormAlter() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(2, $issues[0]->getViolations());
diff --git a/tests/src/Unit/Plugin/DMU/Analyzer/HookPermissionTest.php b/tests/src/Unit/Plugin/DMU/Analyzer/HookPermissionTest.php
index 3ce57df..dd01c1b 100644
--- a/tests/src/Unit/Plugin/DMU/Analyzer/HookPermissionTest.php
+++ b/tests/src/Unit/Plugin/DMU/Analyzer/HookPermissionTest.php
@@ -14,7 +14,7 @@ use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions;
  */
 class HookPermissionTest extends AnalyzerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $code = <<<'END'
@@ -42,7 +42,7 @@ END;
 
   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(1, $issues[0]->getViolations());
diff --git a/tests/src/Unit/Plugin/DMU/Analyzer/HookUninstallTest.php b/tests/src/Unit/Plugin/DMU/Analyzer/HookUninstallTest.php
index 59f04e8..2b55a81 100644
--- a/tests/src/Unit/Plugin/DMU/Analyzer/HookUninstallTest.php
+++ b/tests/src/Unit/Plugin/DMU/Analyzer/HookUninstallTest.php
@@ -10,7 +10,7 @@ use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions;
  */
 class HookUninstalltest extends AnalyzerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $code = <<<'END'
@@ -38,7 +38,7 @@ END;
 
   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
     $this->assertCount(1, $issues[0]->getViolations());
diff --git a/tests/src/Unit/Plugin/DMU/Analyzer/InfoFileTest.php b/tests/src/Unit/Plugin/DMU/Analyzer/InfoFileTest.php
index cf1820c..987104b 100644
--- a/tests/src/Unit/Plugin/DMU/Analyzer/InfoFileTest.php
+++ b/tests/src/Unit/Plugin/DMU/Analyzer/InfoFileTest.php
@@ -8,7 +8,7 @@ namespace Drupal\Tests\drupalmoduleupgrader\Unit\Plugin\DMU\Analyzer;
  */
 class InfoFileTest extends AnalyzerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $info = <<<'END'
@@ -27,7 +27,7 @@ END;
 
   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertArrayHasKey('core', $issues);
     $this->assertArrayHasKey('type', $issues);
     $this->assertArrayNotHasKey('dependencies', $issues);
diff --git a/tests/src/Unit/Plugin/DMU/Analyzer/PSR4Test.php b/tests/src/Unit/Plugin/DMU/Analyzer/PSR4Test.php
index ccd0ae3..1af3ba2 100644
--- a/tests/src/Unit/Plugin/DMU/Analyzer/PSR4Test.php
+++ b/tests/src/Unit/Plugin/DMU/Analyzer/PSR4Test.php
@@ -10,7 +10,7 @@ use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Classes;
  */
 class PSR4Test extends AnalyzerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $code = <<<'END'
@@ -33,7 +33,7 @@ END;
 
   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
   }
diff --git a/tests/src/Unit/Plugin/DMU/Analyzer/TestsTest.php b/tests/src/Unit/Plugin/DMU/Analyzer/TestsTest.php
index 7880e3b..5d6e808 100644
--- a/tests/src/Unit/Plugin/DMU/Analyzer/TestsTest.php
+++ b/tests/src/Unit/Plugin/DMU/Analyzer/TestsTest.php
@@ -10,7 +10,7 @@ use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Classes;
  */
 class TestsTest extends AnalyzerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $code = <<<'END'
@@ -34,7 +34,7 @@ END;
 
   public function test() {
     $issues = $this->analyzer->analyze($this->target);
-    $this->assertInternalType('array', $issues);
+    $this->assertIsArray($issues);
     $this->assertNotEmpty($issues);
     $this->assertIssueDefaults($issues[0]);
   }
diff --git a/tests/src/Unit/Plugin/DMU/Converter/Functions/CToolsGetPluginsTest.php b/tests/src/Unit/Plugin/DMU/Converter/Functions/CToolsGetPluginsTest.php
index 0c5858b..75fd7f0 100644
--- a/tests/src/Unit/Plugin/DMU/Converter/Functions/CToolsGetPluginsTest.php
+++ b/tests/src/Unit/Plugin/DMU/Converter/Functions/CToolsGetPluginsTest.php
@@ -11,7 +11,7 @@ use Pharborist\Parser;
  */
 class CToolsGetPluginsTest extends FunctionCallModifierTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->plugin = CToolsGetPlugins::create($this->container, [], 'ctools_get_plugins', []);
   }
diff --git a/tests/src/Unit/Plugin/DMU/Converter/Functions/DBTest.php b/tests/src/Unit/Plugin/DMU/Converter/Functions/DBTest.php
index 6cd9ee6..a37bb4e 100644
--- a/tests/src/Unit/Plugin/DMU/Converter/Functions/DBTest.php
+++ b/tests/src/Unit/Plugin/DMU/Converter/Functions/DBTest.php
@@ -13,7 +13,7 @@ use Pharborist\Parser;
  */
 class DBTest extends FunctionCallModifierTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->plugin = $this->getPlugin([], ['function' => 'db_select']);
   }
diff --git a/tests/src/Unit/Plugin/DMU/Converter/Functions/DisableTest.php b/tests/src/Unit/Plugin/DMU/Converter/Functions/DisableTest.php
index 52b6f50..fd737f0 100644
--- a/tests/src/Unit/Plugin/DMU/Converter/Functions/DisableTest.php
+++ b/tests/src/Unit/Plugin/DMU/Converter/Functions/DisableTest.php
@@ -13,7 +13,7 @@ use Pharborist\Parser;
  */
 class DisableTest extends FunctionCallModifierTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->plugin = $this->getPlugin([], ['function' => 'field_create_field']);
   }
diff --git a/tests/src/Unit/Plugin/DMU/Converter/Functions/DrupalGetTitleTest.php b/tests/src/Unit/Plugin/DMU/Converter/Functions/DrupalGetTitleTest.php
index 85530e0..66da71e 100644
--- a/tests/src/Unit/Plugin/DMU/Converter/Functions/DrupalGetTitleTest.php
+++ b/tests/src/Unit/Plugin/DMU/Converter/Functions/DrupalGetTitleTest.php
@@ -10,7 +10,7 @@ use Pharborist\Parser;
  */
 class DrupalGetTitleTest extends FunctionCallModifierTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->plugin = $this->getPlugin();
   }
diff --git a/tests/src/Unit/Plugin/DMU/Converter/Functions/FunctionCallModifierTestBase.php b/tests/src/Unit/Plugin/DMU/Converter/Functions/FunctionCallModifierTestBase.php
index 32f839a..f5fc9d2 100644
--- a/tests/src/Unit/Plugin/DMU/Converter/Functions/FunctionCallModifierTestBase.php
+++ b/tests/src/Unit/Plugin/DMU/Converter/Functions/FunctionCallModifierTestBase.php
@@ -21,7 +21,7 @@ abstract class FunctionCallModifierTestBase extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->plugin = $this->getPlugin();
   }
diff --git a/tests/src/Unit/Plugin/DMU/Fixer/HookToYAMLTest.php b/tests/src/Unit/Plugin/DMU/Fixer/HookToYAMLTest.php
index 70d0b20..3df2fbc 100644
--- a/tests/src/Unit/Plugin/DMU/Fixer/HookToYAMLTest.php
+++ b/tests/src/Unit/Plugin/DMU/Fixer/HookToYAMLTest.php
@@ -18,9 +18,7 @@ class HookToYAMLTest extends TestBase {
       ],
     ];
 
-    $indexer = $this->getMockBuilder('\Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $indexer = $this->createMock('\Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions');
     $indexer->method('has')->with('hook_permission')->willReturn(TRUE);
     $indexer->method('hasExecutable')->with('hook_permission')->willReturn(TRUE);
     $indexer->method('execute')->with('hook_permission')->willReturn($permissions);
diff --git a/tests/src/Unit/Plugin/DMU/Indexer/ClassesTest.php b/tests/src/Unit/Plugin/DMU/Indexer/ClassesTest.php
index b45dca8..32680fc 100644
--- a/tests/src/Unit/Plugin/DMU/Indexer/ClassesTest.php
+++ b/tests/src/Unit/Plugin/DMU/Indexer/ClassesTest.php
@@ -13,7 +13,7 @@ use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Classes;
  */
 class ClassesTest extends IndexerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $code = <<<'END'
diff --git a/tests/src/Unit/Plugin/DMU/Indexer/FunctionsTest.php b/tests/src/Unit/Plugin/DMU/Indexer/FunctionsTest.php
index 627d819..66d3ee4 100644
--- a/tests/src/Unit/Plugin/DMU/Indexer/FunctionsTest.php
+++ b/tests/src/Unit/Plugin/DMU/Indexer/FunctionsTest.php
@@ -13,7 +13,7 @@ use Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions;
  */
 class FunctionsTest extends IndexerTestBase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $code = <<<'END'
diff --git a/tests/src/Unit/Plugin/DMU/Rewriter/FormStateTest.php b/tests/src/Unit/Plugin/DMU/Rewriter/FormStateTest.php
index ef15773..e2ce9c7 100644
--- a/tests/src/Unit/Plugin/DMU/Rewriter/FormStateTest.php
+++ b/tests/src/Unit/Plugin/DMU/Rewriter/FormStateTest.php
@@ -16,7 +16,7 @@ class FormStateTest extends TestBase {
    */
   protected $plugin;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $definition = [
diff --git a/tests/src/Unit/Plugin/DMU/Rewriter/GenericTest.php b/tests/src/Unit/Plugin/DMU/Rewriter/GenericTest.php
index fdf5aaf..923db6a 100644
--- a/tests/src/Unit/Plugin/DMU/Rewriter/GenericTest.php
+++ b/tests/src/Unit/Plugin/DMU/Rewriter/GenericTest.php
@@ -17,7 +17,7 @@ class GenericTest extends TestBase {
    */
   protected $plugin;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $definition = [
diff --git a/tests/src/Unit/ReportTest.php b/tests/src/Unit/ReportTest.php
index 68b5800..dae1ba3 100644
--- a/tests/src/Unit/ReportTest.php
+++ b/tests/src/Unit/ReportTest.php
@@ -15,7 +15,7 @@ class ReportTest extends TestBase {
    */
   private $report;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->report = new Report();
   }
diff --git a/tests/src/Unit/Routing/Drupal7/RouterTest.php b/tests/src/Unit/Routing/Drupal7/RouterTest.php
index 344ad95..87653c5 100644
--- a/tests/src/Unit/Routing/Drupal7/RouterTest.php
+++ b/tests/src/Unit/Routing/Drupal7/RouterTest.php
@@ -13,7 +13,7 @@ class RouterTest extends UnitTestCase {
 
   private $router;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->router = new Router();
 
diff --git a/tests/src/Unit/Routing/Drupal8/RouteWrapperTest.php b/tests/src/Unit/Routing/Drupal8/RouteWrapperTest.php
index 133363b..103be91 100644
--- a/tests/src/Unit/Routing/Drupal8/RouteWrapperTest.php
+++ b/tests/src/Unit/Routing/Drupal8/RouteWrapperTest.php
@@ -13,7 +13,7 @@ class RouteWrapperTest extends UnitTestCase {
 
   private $route, $wrapper;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->route = new Route('user/{user}/edit');
     $this->wrapper = new RouteWrapper('user.edit', $this->route, $this->createMock('\Drupal\Core\Routing\RouteProviderInterface'));
diff --git a/tests/src/Unit/Routing/LinkBinding/LinkBindingTest.php b/tests/src/Unit/Routing/LinkBinding/LinkBindingTest.php
index df8ba6a..2ab9dfe 100644
--- a/tests/src/Unit/Routing/LinkBinding/LinkBindingTest.php
+++ b/tests/src/Unit/Routing/LinkBinding/LinkBindingTest.php
@@ -16,7 +16,7 @@ class LinkBindingTest extends UnitTestCase {
 
   private $source, $destination;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $item = [
       'title' => 'Diff',
diff --git a/tests/src/Unit/Routing/ParameterBindingTest.php b/tests/src/Unit/Routing/ParameterBindingTest.php
index 214fec5..86073a0 100644
--- a/tests/src/Unit/Routing/ParameterBindingTest.php
+++ b/tests/src/Unit/Routing/ParameterBindingTest.php
@@ -18,7 +18,7 @@ class ParameterBindingTest extends UnitTestCase {
    */
   private $parameter;
 
-  public function setUp() {
+  public function setUp(): void {
     // ParameterNode supports variadic parameters, which use the T_ELLIPSIS
     // token. Which will be undefined on any PHP older than 5.6. So this kludges
     // around that.
diff --git a/tests/src/Unit/Routing/RouterBaseTest.php b/tests/src/Unit/Routing/RouterBaseTest.php
index 0934f03..e1c7852 100644
--- a/tests/src/Unit/Routing/RouterBaseTest.php
+++ b/tests/src/Unit/Routing/RouterBaseTest.php
@@ -15,7 +15,7 @@ class RouterBaseTest extends UnitTestCase {
 
   private $userEdit, $userView, $userRoot, $routeProvider;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->userEdit = new Route('/user/{user}/edit');
     $this->userView = new Route('/user/{user}');
diff --git a/tests/src/Unit/TargetTest.php b/tests/src/Unit/TargetTest.php
index 2844858..9b50510 100644
--- a/tests/src/Unit/TargetTest.php
+++ b/tests/src/Unit/TargetTest.php
@@ -14,12 +14,10 @@ class TargetTest extends TestBase {
    */
   protected $indexer;
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
-    $this->indexer = $this->getMockBuilder('\Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->indexer = $this->createMock('\Drupal\drupalmoduleupgrader\Plugin\DMU\Indexer\Functions');
 
     $this->container
       ->get('plugin.manager.drupalmoduleupgrader.indexer')
@@ -28,10 +26,8 @@ class TargetTest extends TestBase {
       ->willReturn($this->indexer);
   }
 
-  /**
-   * @expectedException \RuntimeException
-   */
   public function testInvalidBasePath() {
+    $this->expectException(\RuntimeException::class);
     // Trying to create a target with an invalid path should instantly
     // throw an exception.
     new Target('foobar', $this->container);
@@ -86,10 +82,8 @@ class TargetTest extends TestBase {
     $this->assertFalse($this->target->implementsHook('menu_alter'));
   }
 
-  /**
-   * @expectedException \InvalidArgumentException
-   */
   public function testExecuteUnimplementedHook() {
+    $this->expectException(\InvalidArgumentException::class);
     $this->indexer->method('has')->with('hook_menu')->willReturn(FALSE);
     $this->target->executeHook('menu');
   }
@@ -106,7 +100,7 @@ class TargetTest extends TestBase {
     $this->indexer->method('execute')->with('hook_menu')->willReturn($expected);
 
     $actual = $this->target->executeHook('menu');
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertSame($expected, $actual);
   }
 
diff --git a/tests/src/Unit/TestBase.php b/tests/src/Unit/TestBase.php
index 67b2975..3d84dbc 100644
--- a/tests/src/Unit/TestBase.php
+++ b/tests/src/Unit/TestBase.php
@@ -42,7 +42,7 @@ abstract class TestBase extends UnitTestCase {
   /**
    * Mocks an entire module, called foo, in a virtual file system.
    */
-  public function setUp() {
+  public function setUp(): void {
     $this->info = $this->getAnnotations();
 
     $this->dir = $this->mockModule('foo');
diff --git a/tests/src/Unit/Utility/Filter/ContainsLogicFilterTest.php b/tests/src/Unit/Utility/Filter/ContainsLogicFilterTest.php
index 44d32e9..bb49346 100644
--- a/tests/src/Unit/Utility/Filter/ContainsLogicFilterTest.php
+++ b/tests/src/Unit/Utility/Filter/ContainsLogicFilterTest.php
@@ -16,7 +16,7 @@ class ContainsLogicFilterTest extends UnitTestCase {
    */
   protected $filter;
 
-  public function setUp() {
+  public function setUp(): void {
     $this->filter = new ContainsLogicFilter();
   }
 
diff --git a/tests/src/Unit/Utility/Filter/FieldValueFilterTest.php b/tests/src/Unit/Utility/Filter/FieldValueFilterTest.php
index 44e3cd8..d33102e 100644
--- a/tests/src/Unit/Utility/Filter/FieldValueFilterTest.php
+++ b/tests/src/Unit/Utility/Filter/FieldValueFilterTest.php
@@ -16,7 +16,7 @@ class FieldValueFilterTest extends UnitTestCase {
    */
   protected $filter;
 
-  public function setUp() {
+  public function setUp(): void {
     $this->filter = new FieldValueFilter('foo');
   }
 
diff --git a/tests/src/Unit/Utility/Filter/FunctionCallArgumentFilterTest.php b/tests/src/Unit/Utility/Filter/FunctionCallArgumentFilterTest.php
index a967436..d8cc8d7 100644
--- a/tests/src/Unit/Utility/Filter/FunctionCallArgumentFilterTest.php
+++ b/tests/src/Unit/Utility/Filter/FunctionCallArgumentFilterTest.php
@@ -16,7 +16,7 @@ class FunctionCallArgumentFilterTest extends UnitTestCase {
    */
   protected $filter;
 
-  public function setUp() {
+  public function setUp(): void {
     $this->filter = new FunctionCallArgumentFilter('foo');
   }
 
diff --git a/tests/src/Unit/Utility/Filter/NodeAssignmentFilterTest.php b/tests/src/Unit/Utility/Filter/NodeAssignmentFilterTest.php
index e5806d0..101ba31 100644
--- a/tests/src/Unit/Utility/Filter/NodeAssignmentFilterTest.php
+++ b/tests/src/Unit/Utility/Filter/NodeAssignmentFilterTest.php
@@ -16,7 +16,7 @@ class NodeAssignmentFilterTest extends UnitTestCase {
    */
   protected $filter;
 
-  public function setUp() {
+  public function setUp(): void {
     $this->filter = new NodeAssignmentFilter();
   }
 
diff --git a/tests/src/Unit/Utility/Path/Drupal7/PathUtilityTest.php b/tests/src/Unit/Utility/Path/Drupal7/PathUtilityTest.php
index 66a2aeb..f28dea9 100644
--- a/tests/src/Unit/Utility/Path/Drupal7/PathUtilityTest.php
+++ b/tests/src/Unit/Utility/Path/Drupal7/PathUtilityTest.php
@@ -19,7 +19,7 @@ class PathUtilityTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->path = new PathUtility('node/%node/foo/%');
   }
@@ -41,17 +41,13 @@ class PathUtilityTest extends UnitTestCase {
     $this->assertEquals('wambooli', $path->last()->__toString());
   }
 
-  /**
-   * @expectedException \InvalidArgumentException
-   */
   public function testAddArray() {
+    $this->expectException(\InvalidArgumentException::class);
     $this->path->add([]);
   }
 
-  /**
-   * @expectedException \InvalidArgumentException
-   */
   public function testAddObject() {
+    $this->expectException(\InvalidArgumentException::class);
     $this->path->add(new \StdClass());
   }
 
diff --git a/tests/src/Unit/Utility/Path/Drupal8/PathUtilityTest.php b/tests/src/Unit/Utility/Path/Drupal8/PathUtilityTest.php
index 7490171..dad8689 100644
--- a/tests/src/Unit/Utility/Path/Drupal8/PathUtilityTest.php
+++ b/tests/src/Unit/Utility/Path/Drupal8/PathUtilityTest.php
@@ -11,7 +11,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class PathUtilityTest extends UnitTestCase {
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->path = new PathUtility('node/{node}/foo/{bar}');
   }
@@ -33,17 +33,13 @@ class PathUtilityTest extends UnitTestCase {
     $this->assertEquals('wambooli', $path->last()->__toString());
   }
 
-  /**
-   * @expectedException \InvalidArgumentException
-   */
   public function testAddArray() {
+    $this->expectException(\InvalidArgumentException::class);
     $this->path->add([]);
   }
 
-  /**
-   * @expectedException \InvalidArgumentException
-   */
   public function testAddObject() {
+    $this->expectException(\InvalidArgumentException::class);
     $this->path->add(new \StdClass());
   }
 
