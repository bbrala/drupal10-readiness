diff --git a/tests/src/Kernel/ConditionPluginManagerTest.php b/tests/src/Kernel/ConditionPluginManagerTest.php
index 41f5dc1..896863f 100644
--- a/tests/src/Kernel/ConditionPluginManagerTest.php
+++ b/tests/src/Kernel/ConditionPluginManagerTest.php
@@ -22,9 +22,7 @@ class ConditionPluginManagerTest extends KernelTestBase {
    * Tests using 'not:' to negate plugins.
    */
   public function testConditionPluginManagerNot() {
-    $row = $this->getMockBuilder('Drupal\migrate\Row')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $row = $this->createMock('Drupal\migrate\Row');
 
     // Typical scenario.
     $configuration = [
diff --git a/tests/src/Kernel/condition/AllElementsTest.php b/tests/src/Kernel/condition/AllElementsTest.php
index 5bec9d7..08f030e 100644
--- a/tests/src/Kernel/condition/AllElementsTest.php
+++ b/tests/src/Kernel/condition/AllElementsTest.php
@@ -20,9 +20,7 @@ class AllElementsTest extends KernelTestBase {
    * Tests evaluating the 'all_elements' condition.
    */
   public function testEvaluate() {
-    $row = $this->getMockBuilder('Drupal\migrate\Row')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $row = $this->createMock('Drupal\migrate\Row');
     $configuration = [
       'condition' => [
         'plugin' => 'greater_than',
diff --git a/tests/src/Kernel/condition/AndConditionTest.php b/tests/src/Kernel/condition/AndConditionTest.php
index 6c52f5f..6562ccd 100644
--- a/tests/src/Kernel/condition/AndConditionTest.php
+++ b/tests/src/Kernel/condition/AndConditionTest.php
@@ -20,9 +20,7 @@ class AndConditionTest extends KernelTestBase {
    * Tests evaluating the and condition.
    */
   public function testEvaluate() {
-    $row = $this->getMockBuilder('Drupal\migrate\Row')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $row = $this->createMock('Drupal\migrate\Row');
     $configuration = [
       'conditions' => [
         [
@@ -44,9 +42,7 @@ class AndConditionTest extends KernelTestBase {
     $this->assertFalse($condition->evaluate(4, $row));
 
     // Set iterate to false and assert the same results.
-    $row = $this->getMockBuilder('Drupal\migrate\Row')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $row = $this->createMock('Drupal\migrate\Row');
     $configuration = [
       'iterate' => FALSE,
       'conditions' => [
diff --git a/tests/src/Kernel/condition/EntityExistsTest.php b/tests/src/Kernel/condition/EntityExistsTest.php
index f136b4e..21935f2 100644
--- a/tests/src/Kernel/condition/EntityExistsTest.php
+++ b/tests/src/Kernel/condition/EntityExistsTest.php
@@ -44,9 +44,7 @@ class EntityExistsTest extends KernelTestBase {
    * Tests with a real entity.
    */
   public function testEvaluate() {
-    $row = $this->getMockBuilder('Drupal\migrate\Row')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $row = $this->createMock('Drupal\migrate\Row');
 
     $user = User::create([
       'name' => $this->randomString(),
diff --git a/tests/src/Kernel/condition/HasElementTest.php b/tests/src/Kernel/condition/HasElementTest.php
index 5afadcf..340a4fd 100644
--- a/tests/src/Kernel/condition/HasElementTest.php
+++ b/tests/src/Kernel/condition/HasElementTest.php
@@ -20,9 +20,7 @@ class HasElementTest extends KernelTestBase {
    * Tests evaluating the 'has_element' condition.
    */
   public function testEvaluate() {
-    $row = $this->getMockBuilder('Drupal\migrate\Row')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $row = $this->createMock('Drupal\migrate\Row');
     $configuration = [
       'condition' => [
         'plugin' => 'equals',
diff --git a/tests/src/Kernel/condition/OrConditionTest.php b/tests/src/Kernel/condition/OrConditionTest.php
index 6090640..ca87698 100644
--- a/tests/src/Kernel/condition/OrConditionTest.php
+++ b/tests/src/Kernel/condition/OrConditionTest.php
@@ -20,9 +20,7 @@ class OrConditionTest extends KernelTestBase {
    * Tests evaluating the or condition.
    */
   public function testEvaluate() {
-    $row = $this->getMockBuilder('Drupal\migrate\Row')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $row = $this->createMock('Drupal\migrate\Row');
     $configuration = [
       'conditions' => [
         [
diff --git a/tests/src/Unit/condition/ArrayConditionTestBase.php b/tests/src/Unit/condition/ArrayConditionTestBase.php
index f312d28..4a04680 100644
--- a/tests/src/Unit/condition/ArrayConditionTestBase.php
+++ b/tests/src/Unit/condition/ArrayConditionTestBase.php
@@ -25,8 +25,7 @@ abstract class ArrayConditionTestBase extends UnitTestCase {
    * @dataProvider providerTestConfigurationValidation
    */
   public function testConfigurationValidation($configuration, $message) {
-    $condition_manager = $this->getMockBuilder('\Drupal\Component\Plugin\PluginManagerInterface')
-      ->getMock();
+    $condition_manager = $this->createMock('\Drupal\Component\Plugin\PluginManagerInterface');
     $condition_manager->expects($this->any())
       ->method('createInstance')
       ->willReturn(NULL);
@@ -49,21 +48,17 @@ abstract class ArrayConditionTestBase extends UnitTestCase {
    * @dataProvider providerTestEvaluate
    */
   public function testEvaluate($source, $configuration, $sub_evaluate_map, $expected) {
-    $row = $this->getMockBuilder('Drupal\migrate\Row')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $row = $this->createMock('Drupal\migrate\Row');
 
     $map = [];
     foreach ($sub_evaluate_map as $source_then_return) {
       $map[] = [$source_then_return[0], $row, $source_then_return[1]];
     }
-    $condition = $this->getMockBuilder('\Drupal\migrate_conditions\ConditionInterface')
-      ->getMock();
+    $condition = $this->createMock('\Drupal\migrate_conditions\ConditionInterface');
     $condition->expects($this->any())
       ->method('evaluate')
       ->willReturnMap($map);
-    $condition_manager = $this->getMockBuilder('\Drupal\Component\Plugin\PluginManagerInterface')
-      ->getMock();
+    $condition_manager = $this->createMock('\Drupal\Component\Plugin\PluginManagerInterface');
     $condition_manager->expects($this->any())
       ->method('createInstance')
       ->will($this->returnValue($condition));
diff --git a/tests/src/Unit/condition/ConditionTestBase.php b/tests/src/Unit/condition/ConditionTestBase.php
index aabe17e..5303e70 100644
--- a/tests/src/Unit/condition/ConditionTestBase.php
+++ b/tests/src/Unit/condition/ConditionTestBase.php
@@ -24,9 +24,7 @@ abstract class ConditionTestBase extends UnitTestCase {
    * @dataProvider providerTestEvaluate
    */
   public function testEvaluate($source, $configuration, $property_value, $expected) {
-    $row = $this->getMockBuilder('Drupal\migrate\Row')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $row = $this->createMock('Drupal\migrate\Row');
     if (isset($configuration['property'])) {
       $row->expects($this->any())
         ->method('get')
diff --git a/tests/src/Unit/condition/ConditionTestEvaluateExceptionsTrait.php b/tests/src/Unit/condition/ConditionTestEvaluateExceptionsTrait.php
index e723489..4cc31a3 100644
--- a/tests/src/Unit/condition/ConditionTestEvaluateExceptionsTrait.php
+++ b/tests/src/Unit/condition/ConditionTestEvaluateExceptionsTrait.php
@@ -14,9 +14,7 @@ trait ConditionTestEvaluateExceptionsTrait {
    * @dataProvider providerTestEvaluateExceptions
    */
   public function testEvaluateExceptions($source, $configuration, $property_value, $expected_message) {
-    $row = $this->getMockBuilder('Drupal\migrate\Row')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $row = $this->createMock('Drupal\migrate\Row');
     if (isset($configuration['property'])) {
       $row->expects($this->any())
         ->method('get')
diff --git a/tests/src/Unit/condition/EntityExistsTest.php b/tests/src/Unit/condition/EntityExistsTest.php
index 50dbc2f..ced29be 100644
--- a/tests/src/Unit/condition/EntityExistsTest.php
+++ b/tests/src/Unit/condition/EntityExistsTest.php
@@ -21,16 +21,12 @@ class EntityExistsTest extends UnitTestCase {
    * @dataProvider providerTestEvaluate
    */
   public function testEvaluate($source, $load, $configuration, $expected) {
-    $row = $this->getMockBuilder('Drupal\migrate\Row')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $storage = $this->getMockBuilder('\Drupal\Core\Entity\EntityStorageInterface')
-      ->getMock();
+    $row = $this->createMock('Drupal\migrate\Row');
+    $storage = $this->createMock('\Drupal\Core\Entity\EntityStorageInterface');
     $storage->expects($this->once())
       ->method('load')
       ->willReturnMap([[$source, $load]]);
-    $entity_type_manager = $this->getMockBuilder('\Drupal\Core\Entity\EntityTypeManagerInterface')
-      ->getMock();
+    $entity_type_manager = $this->createMock('\Drupal\Core\Entity\EntityTypeManagerInterface');
     $entity_type_manager->expects($this->once())
       ->method('getStorage')
       ->willReturnMap([[$configuration['entity_type'], $storage]]);
@@ -43,7 +39,7 @@ class EntityExistsTest extends UnitTestCase {
    * Data provider for ::testEvaluate().
    */
   public function providerTestEvaluate() {
-    $mock_entity = $this->getMockBuilder('\Drupal\Core\Entity\EntityInterface')->getMock();
+    $mock_entity = $this->createMock('\Drupal\Core\Entity\EntityInterface');
     return [
       [
         'source' => 123,
@@ -68,13 +64,9 @@ class EntityExistsTest extends UnitTestCase {
    * @covers ::evaluate
    */
   public function testEvaluateExceptions() {
-    $row = $this->getMockBuilder('Drupal\migrate\Row')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $storage = $this->getMockBuilder('\Drupal\Core\Entity\EntityStorageInterface')
-      ->getMock();
-    $entity_type_manager = $this->getMockBuilder('\Drupal\Core\Entity\EntityTypeManagerInterface')
-      ->getMock();
+    $row = $this->createMock('Drupal\migrate\Row');
+    $storage = $this->createMock('\Drupal\Core\Entity\EntityStorageInterface');
+    $entity_type_manager = $this->createMock('\Drupal\Core\Entity\EntityTypeManagerInterface');
     $entity_type_manager->expects($this->once())
       ->method('getStorage')
       ->willReturn($storage);
@@ -93,11 +85,8 @@ class EntityExistsTest extends UnitTestCase {
    * @covers ::__construct
    */
   public function testConstructorExceptions() {
-    $row = $this->getMockBuilder('Drupal\migrate\Row')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $entity_type_manager = $this->getMockBuilder('\Drupal\Core\Entity\EntityTypeManagerInterface')
-      ->getMock();
+    $row = $this->createMock('Drupal\migrate\Row');
+    $entity_type_manager = $this->createMock('\Drupal\Core\Entity\EntityTypeManagerInterface');
     $entity_type_manager->expects($this->once())
       ->method('getStorage')
       ->willThrowException(new PluginNotFoundException('foo'));
diff --git a/tests/src/Unit/condition/LogicalConditionTestBase.php b/tests/src/Unit/condition/LogicalConditionTestBase.php
index ba901e5..08a2388 100644
--- a/tests/src/Unit/condition/LogicalConditionTestBase.php
+++ b/tests/src/Unit/condition/LogicalConditionTestBase.php
@@ -25,8 +25,7 @@ abstract class LogicalConditionTestBase extends UnitTestCase {
    * @dataProvider providerTestConfigurationValidation
    */
   public function testConfigurationValidation($configuration, $message) {
-    $condition_manager = $this->getMockBuilder('\Drupal\Component\Plugin\PluginManagerInterface')
-      ->getMock();
+    $condition_manager = $this->createMock('\Drupal\Component\Plugin\PluginManagerInterface');
     $condition_manager->expects($this->any())
       ->method('createInstance')
       ->willReturn(NULL);
@@ -49,22 +48,18 @@ abstract class LogicalConditionTestBase extends UnitTestCase {
    * @dataProvider providerTestEvaluate
    */
   public function testEvaluate($source, $evaluates, $configuration, $expected) {
-    $row = $this->getMockBuilder('Drupal\migrate\Row')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $row = $this->createMock('Drupal\migrate\Row');
 
     $conditions = [];
     for ($i = 0; $i < count($configuration['conditions']); $i++) {
-      $condition = $this->getMockBuilder('\Drupal\migrate_conditions\ConditionInterface')
-        ->getMock();
+      $condition = $this->createMock('\Drupal\migrate_conditions\ConditionInterface');
       $condition->expects($this->any())
         ->method('evaluate')
         ->willReturn($evaluates[$i]);
       $conditions[] = $condition;
     }
 
-    $condition_manager = $this->getMockBuilder('\Drupal\Component\Plugin\PluginManagerInterface')
-      ->getMock();
+    $condition_manager = $this->createMock('\Drupal\Component\Plugin\PluginManagerInterface');
     $condition_manager->expects($this->any())
       ->method('createInstance')
       ->willReturnOnConsecutiveCalls(...$conditions);
@@ -73,8 +68,7 @@ abstract class LogicalConditionTestBase extends UnitTestCase {
     $condition = new $class($configuration, $this->conditionId, [], $condition_manager);
     $this->assertSame($expected, $condition->evaluate($source, $row));
     // Negate and expect the opposite.
-    $condition_manager = $this->getMockBuilder('\Drupal\Component\Plugin\PluginManagerInterface')
-      ->getMock();
+    $condition_manager = $this->createMock('\Drupal\Component\Plugin\PluginManagerInterface');
     $condition_manager->expects($this->any())
       ->method('createInstance')
       ->willReturnOnConsecutiveCalls(...$conditions);
@@ -95,14 +89,10 @@ abstract class LogicalConditionTestBase extends UnitTestCase {
    * @dataProvider providerTestEvaluateExceptions
    */
   public function testEvaluateExceptions($source, $configuration, $expected_message) {
-    $row = $this->getMockBuilder('Drupal\migrate\Row')
-      ->disableOriginalConstructor()
-      ->getMock();
-
-    $condition = $this->getMockBuilder('\Drupal\migrate_conditions\ConditionInterface')
-      ->getMock();
-    $condition_manager = $this->getMockBuilder('\Drupal\Component\Plugin\PluginManagerInterface')
-      ->getMock();
+    $row = $this->createMock('Drupal\migrate\Row');
+
+    $condition = $this->createMock('\Drupal\migrate_conditions\ConditionInterface');
+    $condition_manager = $this->createMock('\Drupal\Component\Plugin\PluginManagerInterface');
     $condition_manager->expects($this->any())
       ->method('createInstance')
       ->willReturn($condition);
diff --git a/tests/src/Unit/process/EvaluateConditionTest.php b/tests/src/Unit/process/EvaluateConditionTest.php
index a3bbe80..e9cf702 100644
--- a/tests/src/Unit/process/EvaluateConditionTest.php
+++ b/tests/src/Unit/process/EvaluateConditionTest.php
@@ -19,13 +19,11 @@ class EvaluateConditionTest extends MigrateProcessTestCase {
    * @dataProvider providerTestEvaluateCondition
    */
   public function testEvaluateCondition($evaluate, $expected) {
-    $condition = $this->getMockBuilder('\Drupal\migrate_conditions\ConditionInterface')
-      ->getMock();
+    $condition = $this->createMock('\Drupal\migrate_conditions\ConditionInterface');
     $condition->expects($this->once())
       ->method('evaluate')
       ->will($this->returnValue($evaluate));
-    $condition_manager = $this->getMockBuilder('\Drupal\Component\Plugin\PluginManagerInterface')
-      ->getMock();
+    $condition_manager = $this->createMock('\Drupal\Component\Plugin\PluginManagerInterface');
     $condition_manager->expects($this->once())
       ->method('createInstance')
       ->will($this->returnValue($condition));
diff --git a/tests/src/Unit/process/FilterOnConditionTest.php b/tests/src/Unit/process/FilterOnConditionTest.php
index 16ed2e9..bfbce45 100644
--- a/tests/src/Unit/process/FilterOnConditionTest.php
+++ b/tests/src/Unit/process/FilterOnConditionTest.php
@@ -20,13 +20,11 @@ class FilterOnConditionTest extends MigrateProcessTestCase {
    * @dataProvider providerTestFilterOnCondition
    */
   public function testFilterOnCondition($value, $evaluate, $expected, $preserve_keys = NULL) {
-    $condition = $this->getMockBuilder('\Drupal\migrate_conditions\ConditionInterface')
-      ->getMock();
+    $condition = $this->createMock('\Drupal\migrate_conditions\ConditionInterface');
     $condition->expects($this->exactly(count($evaluate)))
       ->method('evaluate')
       ->willReturnOnConsecutiveCalls(...$evaluate);
-    $condition_manager = $this->getMockBuilder('\Drupal\Component\Plugin\PluginManagerInterface')
-      ->getMock();
+    $condition_manager = $this->createMock('\Drupal\Component\Plugin\PluginManagerInterface');
     $condition_manager->expects($this->once())
       ->method('createInstance')
       ->will($this->returnValue($condition));
@@ -81,10 +79,8 @@ class FilterOnConditionTest extends MigrateProcessTestCase {
    * Tests input validation.
    */
   public function testFilterOnConditionNotArray() {
-    $condition = $this->getMockBuilder('\Drupal\migrate_conditions\ConditionInterface')
-      ->getMock();
-    $condition_manager = $this->getMockBuilder('\Drupal\Component\Plugin\PluginManagerInterface')
-      ->getMock();
+    $condition = $this->createMock('\Drupal\migrate_conditions\ConditionInterface');
+    $condition_manager = $this->createMock('\Drupal\Component\Plugin\PluginManagerInterface');
     $condition_manager->expects($this->once())
       ->method('createInstance')
       ->will($this->returnValue($condition));
diff --git a/tests/src/Unit/process/FirstMeetingConditionTest.php b/tests/src/Unit/process/FirstMeetingConditionTest.php
index 8687744..9c5ec68 100644
--- a/tests/src/Unit/process/FirstMeetingConditionTest.php
+++ b/tests/src/Unit/process/FirstMeetingConditionTest.php
@@ -19,13 +19,11 @@ class FirstMeetingConditionTest extends MigrateProcessTestCase {
    * @dataProvider providerTestFirstMeetingCondition
    */
   public function testFirstMeetingCondition($value, $evaluate, $default_value, $expected) {
-    $condition = $this->getMockBuilder('\Drupal\migrate_conditions\ConditionInterface')
-      ->getMock();
+    $condition = $this->createMock('\Drupal\migrate_conditions\ConditionInterface');
     $condition->expects($this->exactly(count($evaluate)))
       ->method('evaluate')
       ->willReturnOnConsecutiveCalls(...$evaluate);
-    $condition_manager = $this->getMockBuilder('\Drupal\Component\Plugin\PluginManagerInterface')
-      ->getMock();
+    $condition_manager = $this->createMock('\Drupal\Component\Plugin\PluginManagerInterface');
     $condition_manager->expects($this->once())
       ->method('createInstance')
       ->will($this->returnValue($condition));
diff --git a/tests/src/Unit/process/IfConditionTest.php b/tests/src/Unit/process/IfConditionTest.php
index 98e681d..b1e427c 100644
--- a/tests/src/Unit/process/IfConditionTest.php
+++ b/tests/src/Unit/process/IfConditionTest.php
@@ -20,13 +20,11 @@ class IfConditionTest extends MigrateProcessTestCase {
    * @dataProvider providerTestIfCondition
    */
   public function testIfCondition($source, $evaluate, $expected, $do_get = [], $else_get = []) {
-    $condition = $this->getMockBuilder('\Drupal\migrate_conditions\ConditionInterface')
-      ->getMock();
+    $condition = $this->createMock('\Drupal\migrate_conditions\ConditionInterface');
     $condition->expects($this->once())
       ->method('evaluate')
       ->will($this->returnValue($evaluate));
-    $condition_manager = $this->getMockBuilder('\Drupal\Component\Plugin\PluginManagerInterface')
-      ->getMock();
+    $condition_manager = $this->createMock('\Drupal\Component\Plugin\PluginManagerInterface');
     $condition_manager->expects($this->once())
       ->method('createInstance')
       ->will($this->returnValue($condition));
@@ -108,10 +106,8 @@ class IfConditionTest extends MigrateProcessTestCase {
    * @dataProvider providerTestConstructorValidation
    */
   public function testConstructorValidation($configuration, $message) {
-    $condition = $this->getMockBuilder('\Drupal\migrate_conditions\ConditionInterface')
-      ->getMock();
-    $condition_manager = $this->getMockBuilder('\Drupal\Component\Plugin\PluginManagerInterface')
-      ->getMock();
+    $condition = $this->createMock('\Drupal\migrate_conditions\ConditionInterface');
+    $condition_manager = $this->createMock('\Drupal\Component\Plugin\PluginManagerInterface');
     $condition_manager->expects($this->any())
       ->method('createInstance')
       ->will($this->returnValue($condition));
diff --git a/tests/src/Unit/process/ProcessPluginWithConditionBaseTest.php b/tests/src/Unit/process/ProcessPluginWithConditionBaseTest.php
index 6f4d7ca..5befcd3 100644
--- a/tests/src/Unit/process/ProcessPluginWithConditionBaseTest.php
+++ b/tests/src/Unit/process/ProcessPluginWithConditionBaseTest.php
@@ -20,10 +20,8 @@ class ProcessPluginWithConditionBaseTest extends MigrateProcessTestCase {
    * @dataProvider providerTestConstructorValidation
    */
   public function testConstructorValidation($configuration, $message) {
-    $condition = $this->getMockBuilder('\Drupal\migrate_conditions\ConditionInterface')
-      ->getMock();
-    $condition_manager = $this->getMockBuilder('\Drupal\Component\Plugin\PluginManagerInterface')
-      ->getMock();
+    $condition = $this->createMock('\Drupal\migrate_conditions\ConditionInterface');
+    $condition_manager = $this->createMock('\Drupal\Component\Plugin\PluginManagerInterface');
     $condition_manager->expects($this->any())
       ->method('createInstance')
       ->will($this->returnValue($condition));
@@ -65,8 +63,7 @@ class ProcessPluginWithConditionBaseTest extends MigrateProcessTestCase {
   public function testConditionInstance() {
     $equals_configuration = ['value' => 123];
     $equals = new Equals($equals_configuration, 'equals', []);
-    $condition_manager = $this->getMockBuilder('\Drupal\Component\Plugin\PluginManagerInterface')
-      ->getMock();
+    $condition_manager = $this->createMock('\Drupal\Component\Plugin\PluginManagerInterface');
     $condition_manager->expects($this->once())
       ->method('createInstance')
       ->willReturnMap([['equals', ['value' => 123], $equals]]);
diff --git a/tests/src/Unit/process/SkipOnConditionTest.php b/tests/src/Unit/process/SkipOnConditionTest.php
index cc1101e..b87a115 100644
--- a/tests/src/Unit/process/SkipOnConditionTest.php
+++ b/tests/src/Unit/process/SkipOnConditionTest.php
@@ -21,10 +21,8 @@ class SkipOnConditionTest extends MigrateProcessTestCase {
    * @dataProvider providerTestConstructorValidation
    */
   public function testConstructorValidation($configuration, $message) {
-    $condition = $this->getMockBuilder('\Drupal\migrate_conditions\ConditionInterface')
-      ->getMock();
-    $condition_manager = $this->getMockBuilder('\Drupal\Component\Plugin\PluginManagerInterface')
-      ->getMock();
+    $condition = $this->createMock('\Drupal\migrate_conditions\ConditionInterface');
+    $condition_manager = $this->createMock('\Drupal\Component\Plugin\PluginManagerInterface');
     $condition_manager->expects($this->any())
       ->method('createInstance')
       ->will($this->returnValue($condition));
@@ -61,13 +59,11 @@ class SkipOnConditionTest extends MigrateProcessTestCase {
    * @dataProvider providerTestSkipOnCondition
    */
   public function testSkipOnCondition($will_skip, $method, $evaluate, $message) {
-    $condition = $this->getMockBuilder('\Drupal\migrate_conditions\ConditionInterface')
-      ->getMock();
+    $condition = $this->createMock('\Drupal\migrate_conditions\ConditionInterface');
     $condition->expects($this->once())
       ->method('evaluate')
       ->will($this->returnValue($evaluate));
-    $condition_manager = $this->getMockBuilder('\Drupal\Component\Plugin\PluginManagerInterface')
-      ->getMock();
+    $condition_manager = $this->createMock('\Drupal\Component\Plugin\PluginManagerInterface');
     $condition_manager->expects($this->once())
       ->method('createInstance')
       ->will($this->returnValue($condition));
